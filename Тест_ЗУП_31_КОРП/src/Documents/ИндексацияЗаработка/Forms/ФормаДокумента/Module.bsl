#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма); 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.ОбъектыИндексацииПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
		
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Месяц, Организация, Ответственный", 
		"Объект.МесяцИндексации",
		"Объект.Организация",
		"Объект.Ответственный");
		
		Если ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
			ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
		КонецЕсли;
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Если Объект.Показатели.Количество() = 0 Тогда
			ЗаполнитьИндексируемыеПоУмолчаниюПоказатели();
		КонецЕсли;
		
		ЗаполнитьДанныеФормыПоОрганизации();
		ПриПолученииДанныхНаСервере();
		
		Объект.Дата = ТекущаяДатаСеанса();
	
	КонецЕсли;
	
	КадровыйУчетФормыРасширенный.РазместитьКомандуПроверкиШтатномуРасписанию(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
		
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	РеквизитВДанные(ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения
		И Не ПараметрыЗаписи.Свойство("ПроверкаПередЗаписьюВыполнена") Тогда
		
		Отказ = Истина;
		ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПрочитатьВремяРегистрации();
	ДанныеВРеквизит();
	УстановитьОтображениеНадписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ИндексацияЗаработка", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтаФорма Тогда
		
		Если ИмяСобытия = "ИзмененыНачисления" И Источник = ЭтаФорма Тогда
			
			ЗаполнитьНачисленияИзВРеменногоХранилища(Параметр.АдресВХранилище);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КоэффициентИндексацииПриИзменении(Элемент)
	КоэффициентИндексацииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьДокументыВведенныеПозже(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьВведенныеНаДатуДокументы(ЭтотОбъект.ДокументыВведенныеПозже);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьРанееВведенныеДокументы(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьВведенныеНаДатуДокументы(ЭтотОбъект.РанееВведенныеДокументы);
	
КонецПроцедуры

// Редактирование месяца строкой.
&НаКлиенте
Процедура МесяцСтрокойПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцИндексации", "МесяцСтрокой", Модифицированность);
	ПриИзмененииМесяцаНачисления();
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцИндексации", "МесяцСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцИндексации", "МесяцСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИндексацияГосударственныхСлужащихПриИзменении(Элемент)
		
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
		Модуль.ИндексацияГосударственныхСлужащихПриИзмененииПриИзменении(ЭтотОбъект);
		ЗаполнитьИндексируемыеПоУмолчаниюПоказатели();
		ПоказателиПоказательПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИндексацииГосударственныхСлужащихПриИзменении(Элемент)
	ЗаполнитьИндексируемыеПоУмолчаниюПоказатели();
	ПоказателиПоказательПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИндексацияВоеннослужащихПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	ЗаполнитьИндексируемыеПоУмолчаниюПоказатели();
	ПоказателиПоказательПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоказатели

&НаКлиенте
Процедура ПоказателиПоказательПриИзменении(Элемент)
	ПоказателиПоказательПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Показатели.НайтиСтроки(Новый Структура("Показатель", ВыбранноеЗначение)).Количество() > 0 
		И ЭтаФорма.Элементы["Показатели"].ТекущиеДанные.Показатель <> ВыбранноеЗначение Тогда
		
		ТекстСообщения = НСтр("ru = 'Показатель ""%1"" уже добавлен. Дублирование индексируемых показателей не допускается.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыбранноеЗначение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Показатели");
		ВыбранноеЗначение = Неопределено;
		Возврат;
	КонецЕсли;
	
	Элементы.Показатели.ТекущиеДанные.СпособОкругления = ОкруглениеПоУмолчаниюДляПоказателя(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Элементы["Показатели"].ТекущиеДанные.Показатель) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметровВыбора = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, "ПоказателиПоказатель", "ПараметрыВыбора");
	Если МассивПараметровВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеПараметрыВыбора = Новый Массив;
	РедактируемыйПараметрВыбора = Неопределено;
	
	Для каждого ПараметрВыбора Из МассивПараметровВыбора Цикл
		Если ПараметрВыбора.Имя = "Отбор.Ссылка" Тогда
			РедактируемыйПараметрВыбора = ПараметрВыбора;
		Иначе
			НовыеПараметрыВыбора.Добавить(ПараметрВыбора); 
		КонецЕсли;
	КонецЦикла;
	
	Если РедактируемыйПараметрВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивЭлементовДляВыбора = РедактируемыйПараметрВыбора.Значение;
	
	НовыйМассивЭлементовДляВыбора = Новый Массив();
	Для каждого ЭлементРедактируемогоПараметраВыбора Из РедактируемыйПараметрВыбора.Значение  Цикл
		НовыйМассивЭлементовДляВыбора.Добавить(ЭлементРедактируемогоПараметраВыбора);
	КонецЦикла;
	НовыйМассивЭлементовДляВыбора.Добавить(ЭтаФорма.Элементы["Показатели"].ТекущиеДанные.Показатель);
	
	НовыеПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(НовыйМассивЭлементовДляВыбора)));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	Элементы,
	"ПоказателиПоказатель",
	"ПараметрыВыбора",
	Новый ФиксированныйМассив(НовыеПараметрыВыбора));	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСпособОкругленияПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Элементы.Показатели.ТекущиеДанные.Показатель) Тогда
		Возврат;
	КонецЕсли;
	ПоказателиСпособОкругленияПриИзмененииНаСервере(Элементы.Показатели.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПослеУдаления(Элемент)
	ПоказателиПослеУдаленияНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоказателиСотрудников

&НаКлиенте
Процедура ПоказателиСотрудниковСотрудникПриИзменении(Элемент)
	ПоказателиСотрудниковСотрудникПриИзмененииНаСервере(Элементы.ПоказателиСотрудников.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(Элемент.ТекущиеДанные.Сотрудник, Поле.Имя, Элемент.ТекущаяСтрока);	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковПередУдалением(Элемент, Отказ)
	
	СписокСотрудников = Новый Массив;
	Для каждого ИдентификаторУдаляемойСтроки Из Элемент.ВыделенныеСтроки Цикл
		
		СтрокаСотрудника = ПоказателиСотрудников.НайтиПоИдентификатору(ИдентификаторУдаляемойСтроки);
		Если СтрокаСотрудника <> Неопределено Тогда
			СписокСотрудников.Добавить(СтрокаСотрудника.Сотрудник);
		КонецЕсли;
		
	КонецЦикла;
	
	УдаляемыеСотрудники = Новый ФиксированныйМассив(СписокСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковПослеУдаления(Элемент)
	
	Если УдаляемыеСотрудники <> Неопределено Тогда
		
		Для каждого УдаляемыйСотрудник Из УдаляемыеСотрудники Цикл
			УдалитьНачисленияПоСотруднику(УдаляемыйСотрудник);
			УдалитьПересчетТарифныхСтавокПоСотруднику(УдаляемыйСотрудник);
		КонецЦикла;
		УдаляемыеСотрудники = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСотрудниковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеПоказателяПриИзменении(Элемент)
	ИмяПоказателя = СтрЗаменить(Элемент.Имя, "ПоказателиСотрудников", "");
	
	Строка = Элементы.ПоказателиСотрудников.ТекущиеДанные;
	
	Отбор = Новый Структура("ПутьКДанным", ИмяПоказателя);
	РедактируемыйПоказатель = Объект.Показатели.НайтиСтроки(Отбор);
	Если РедактируемыйПоказатель.Количество() > 0 Тогда
		Если Строка.ПоказательТарифнойСтавки = РедактируемыйПоказатель[0].Показатель Тогда
			Строка.КоэффициентИндексацииСотрудника = Строка[ИмяПоказателя] / Строка[ИмяПоказателя + "ТекущееЗначение"];
		КонецЕсли
	КонецЕсли; 
	Строка.ФиксСтрока = Истина;
	
	ЗначениеПоказателяПриИзмененииНаСервере(Элементы.ПоказателиСотрудников.ТекущаяСтрока);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПодходящихСотрудников(Команда)
	
	Если Объект.Сотрудники.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодходящихСотрудниковЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Табличная часть будет очищена, продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе 
		ЗаполнитьПодходящихСотрудниковЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСоответствиеШтатномуРасписанию(Команда)
	
	КадровыйУчетРасширенныйКлиент.ПроверитьНаСоответствиеШтатномуРасписанию(ЭтаФорма, Объект);	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ЗаписатьНаКлиенте(Истина, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	ПараметрыОткрытия = Неопределено;
	КадровыйУчетРасширенныйКлиент.ДобавитьПараметрыОтбораПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(
		ЭтаФорма, ПараметрыОткрытия);
		
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.ПоказателиСотрудников,
		Объект.Организация, 
		Объект.Подразделение,
		Объект.МесяцИндексации, 
		КонецМесяца(Объект.МесяцИндексации),
		,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ПрочитатьВремяРегистрации();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцИндексации", "МесяцСтрокой");
	ДанныеВРеквизит();
	ДополнитьФорму();
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма, Неопределено, Ложь);
	ОбновитьЗаголовокГруппыИндексируемыеПоказатели(ЭтотОбъект);
	УстановитьПараметрыВыбораПоказателей();
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения();
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизит()
	
	МассивСотрудников = Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник");
	
	ВремяРегистрацииСотрудников = ЗарплатаКадрыРасширенный.ВремяРегистрацииСотрудниковДокумента(Объект.Ссылка, МассивСотрудников, Объект.МесяцИндексации);
	
	ТекущиеПоказателиСотрудников = Документы.ИндексацияЗаработка.ТекущиеПоказателиСотрудников(
		Объект.Ссылка,
		Объект.Показатели.Выгрузить(, "Показатель").ВыгрузитьКолонку("Показатель"),
		Объект.МесяцИндексации,
		МассивСотрудников,
		ВремяРегистрацииСотрудников);
	
	ДополнитьФормуПоказателиСотрудников();
	ЭтаФорма["ПоказателиСотрудников"].Очистить();
	ПоказателиСотрудниковВРеквизитФормы(Объект.Сотрудники, Объект.ЗначенияПоказателей, ТекущиеПоказателиСотрудников, ВремяРегистрацииСотрудников);
	ЗаполнитьФОТПоСотрудникам();
	
	ТекущиеЗначенияСовокупныхТарифныхСтавок = Документы.ИндексацияЗаработка.ТекущиеЗначенияСовокупныхТарифныхСтавокСотрудников(
		Объект.Ссылка, Объект.МесяцИндексации, МассивСотрудников, ВремяРегистрацииСотрудников);
	
	ЗначенияСовокупныхТарифныхСтавокВРеквизитФормы(Объект.ПересчетТарифныхСтавок, ТекущиеЗначенияСовокупныхТарифныхСтавок);
	
КонецПроцедуры	

// Процедура заполняет таблицу формы в которой редактируются список сотрудников и их показатели.
// Данные для заполнения берутся из Объект.ПоказателиСотрудников.
&НаСервере
Процедура ПоказателиСотрудниковВРеквизитФормы(КоэффициентыСотрудников, ЗначенияПоказателейСотрудников, ТекущиеЗначенияПоказателей, ВремяРегистрацииСотрудников)
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	УникальныеСотрудники = Новый Соответствие;
	
	Для Каждого СтрокаСотрудника Из КоэффициентыСотрудников Цикл
		
		Если УникальныеСотрудники.Получить(СтрокаСотрудника.Сотрудник) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СотрудникиДаты.Добавить();
		НоваяСтрока.Сотрудник = СтрокаСотрудника.Сотрудник;
		НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(СтрокаСотрудника.Сотрудник);
		
		УникальныеСотрудники.Вставить(СтрокаСотрудника.Сотрудник, Истина);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиДаты.Период,
		|	СотрудникиДаты.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&СотрудникиДаты КАК СотрудникиДаты";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	КадровыеДанные = "ДолжностьПоШтатномуРасписанию";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	ПозицииШтатногоРасписания = Новый Соответствие;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ПозицииШтатногоРасписания.Вставить(Выборка.Сотрудник, Выборка.ДолжностьПоШтатномуРасписанию);
	КонецЦикла;
	
	ПоказателиТарифныхСтавокСотрудников = ТекущиеЗначенияПоказателей.Скопировать(,"Сотрудник, ПоказательТарифнойСтавки");
	ПоказателиТарифныхСтавокСотрудников.Свернуть("Сотрудник, ПоказательТарифнойСтавки");
	
	Отбор = Новый Структура;
	
	ПоказательИнфо = Неопределено;
	ФорматнаяСтрока = Неопределено;
	
	// И коэффициенты индексации
	Для каждого КоэффициентСотрудника Из КоэффициентыСотрудников Цикл
		
		Отбор.Очистить();
		Отбор.Вставить("Сотрудник", КоэффициентСотрудника.Сотрудник);
		Строки = ЭтаФорма["ПоказателиСотрудников"].НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			Строка = Строки[0];
		Иначе
			Строка = ЭтаФорма["ПоказателиСотрудников"].Добавить();
			Строка["Сотрудник"] = КоэффициентСотрудника.Сотрудник;
			Строка["ФиксСтрока"] = КоэффициентСотрудника.ФиксСтрока;
		КонецЕсли;
		
		Для каждого КолонкаПоказатель Из Объект.Показатели Цикл
			
			Отбор.Вставить("Показатель", КолонкаПоказатель.Показатель);
			ЗначениеПоказателяСотрудника = ЗначенияПоказателейСотрудников.НайтиСтроки(Отбор);
			
			Если ЗначениеПоказателяСотрудника.Количество() > 0 Тогда
				ЗначениеПоказателяСотрудника = ЗначениеПоказателяСотрудника[0];
				Строка[КолонкаПоказатель.ПутьКДанным] = ЗначениеПоказателяСотрудника.Значение;
			КонецЕсли;
			
			Если НЕ ТекущиеЗначенияПоказателей = Неопределено Тогда
				
				ТекущееЗначениеПоказателя = ТекущиеЗначенияПоказателей.НайтиСтроки(Отбор);
				Если ТекущееЗначениеПоказателя.Количество() > 0 Тогда
					
					Строка[КолонкаПоказатель.ПутьКДанным + "Используется"] = Истина;
					ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя[0];
					Строка[КолонкаПоказатель.ПутьКДанным + "ТекущееЗначение"] = ТекущееЗначениеПоказателя.Значение;
					
					ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(КолонкаПоказатель.Показатель);	
					ФорматнаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1; ЧРГ=", ПоказательИнфо["Точность"]);
					
					СуммаПодстановки = Строка(Формат(ТекущееЗначениеПоказателя.Значение, ФорматнаяСтрока));			
					СуммаПодстановки = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СуммаПодстановки, 9, " ");
					
					ПредставлениеТекущего = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'было: %1'"), СуммаПодстановки);
					Строка[КолонкаПоказатель.ПутьКДанным + "ТекущееЗначениеПредставление"] = ПредставлениеТекущего; 
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Строка["КоэффициентИндексацииСотрудника"] = КоэффициентСотрудника.КоэффициентИндексации;
		Строка.ДолжностьПоШтатномуРасписанию = ПозицииШтатногоРасписания.Получить(КоэффициентСотрудника.Сотрудник);
		Строка.ВремяРегистрации = ВремяРегистрацииСотрудников.Получить(Строка.Сотрудник);
		
	КонецЦикла;
	
	Для каждого ПоказательТарифнойСтавкиСотрудника Из ПоказателиТарифныхСтавокСотрудников Цикл
		
		Отбор.Очистить();
		Отбор.Вставить("Сотрудник", ПоказательТарифнойСтавкиСотрудника.Сотрудник);
		Строки = ЭтаФорма["ПоказателиСотрудников"].НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			Строка = Строки[0];
		Иначе
			Строка = ЭтаФорма["ПоказателиСотрудников"].Добавить();
			Строка["Сотрудник"] = ПоказательТарифнойСтавкиСотрудника.Сотрудник;
		КонецЕсли;
		
		Строка["ПоказательТарифнойСтавки"] = ПоказательТарифнойСтавкиСотрудника["ПоказательТарифнойСтавки"];
		
	КонецЦикла;
	
	КоэффициентыСотрудников.Очистить();
	ЗначенияПоказателейСотрудников.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗначенияСовокупныхТарифныхСтавокВРеквизитФормы(ЗначенияСовокупныхТарифныхСтавок, ТекущиеЗначенияСовокупныхТарифныхСтавок);
	
	Отбор = Новый Структура;
	
	Для Каждого ДанныеСовокупныхТарифныхСтавок Из ЗначенияСовокупныхТарифныхСтавок Цикл 
		
		Отбор.Вставить("Сотрудник", ДанныеСовокупныхТарифныхСтавок.Сотрудник);
		ДанныеСотрудника = ЭтаФорма["ПоказателиСотрудников"].НайтиСтроки(Отбор);
		
		Если ДанныеСотрудника.Количество() > 0 Тогда 
			
			ДанныеСотрудника[0].СовокупнаяТарифнаяСтавка = ДанныеСовокупныхТарифныхСтавок.СовокупнаяТарифнаяСтавка;
			ДанныеСотрудника[0].ВидТарифнойСтавки = ДанныеСовокупныхТарифныхСтавок.ВидТарифнойСтавки;
			
			ТекущиеДанныеСовокупныхТарифныхСтавок = ТекущиеЗначенияСовокупныхТарифныхСтавок.НайтиСтроки(Отбор);
			
			Если ТекущиеДанныеСовокупныхТарифныхСтавок.Количество() > 0 Тогда 
				ДанныеСотрудника[0].СовокупнаяТарифнаяСтавкаТекущееЗначение = ТекущиеДанныеСовокупныхТарифныхСтавок[0].СовокупнаяТарифнаяСтавка;
				
				СуммаПодстановки = Строка(Формат(ТекущиеДанныеСовокупныхТарифныхСтавок[0].СовокупнаяТарифнаяСтавка, "ЧДЦ=2; ЧРГ="));			
				СуммаПодстановки = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СуммаПодстановки, 10, " ");
				
				ПредставлениеТекущего = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'было: %1'"), СуммаПодстановки);				
				ДанныеСотрудника[0].СовокупнаяТарифнаяСтавкаТекущееЗначениеПредставление = ПредставлениеТекущего;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначенияСовокупныхТарифныхСтавок.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура РеквизитВДанные(ТекущийОбъект)
	ПоказателиСотрудниковВДанныеФормы(ТекущийОбъект);
КонецПроцедуры	

// Процедура переносит отредактированный пользователем список сотрудников и их показателей
// в Объект.ЗначенияПоказателей.
&НаСервере
Процедура ПоказателиСотрудниковВДанныеФормы(ТекущийОбъект)
	
	ТекущийОбъект.Сотрудники.Очистить();
	ТекущийОбъект.ЗначенияПоказателей.Очистить();
	ТекущийОбъект.ПересчетТарифныхСтавок.Очистить();
	
	МассивУдаляемыхСотрудников  = Новый Массив;
	Для каждого ПоказателиСотрудника Из ЭтаФорма["ПоказателиСотрудников"] Цикл
		Если Объект.Показатели.Количество() > 0 Тогда
			// Перепишем показатели в объект.
			Для каждого КолонкаПоказатель Из Объект.Показатели Цикл
				// Если только добавили показатель, то колонка ПутьКДанным не заполнена.
				Если ЗначениеЗаполнено(КолонкаПоказатель.ПутьКДанным) 
					И ЗначениеЗаполнено(ПоказателиСотрудника[КолонкаПоказатель.ПутьКДанным + "ТекущееЗначение"]) Тогда
					Строка = ТекущийОбъект.ЗначенияПоказателей.Добавить();
					Строка.Сотрудник = ПоказателиСотрудника.Сотрудник;
					Строка.Показатель = КолонкаПоказатель.Показатель;
					Строка.Значение = ПоказателиСотрудника[КолонкаПоказатель.ПутьКДанным];
					Строка.КоэффициентИндексации = ПоказателиСотрудника[КолонкаПоказатель.ПутьКДанным]/ПоказателиСотрудника[КолонкаПоказатель.ПутьКДанным+"ТекущееЗначение"];
				КонецЕсли;
			КонецЦикла;
			// и коэффициент индексации
			Строка = ТекущийОбъект.Сотрудники.Добавить();
			Строка.Сотрудник = ПоказателиСотрудника.Сотрудник;
			Строка.ФиксСтрока = ПоказателиСотрудника.ФиксСтрока;
			Строка.КоэффициентИндексации = ПоказателиСотрудника.КоэффициентИндексацииСотрудника;
			// И значения совокупных тарифных ставок.
			Строка = ТекущийОбъект.ПересчетТарифныхСтавок.Добавить();
			Строка.Сотрудник = ПоказателиСотрудника.Сотрудник;
			Строка.СовокупнаяТарифнаяСтавка = ПоказателиСотрудника.СовокупнаяТарифнаяСтавка;
			Строка.ВидТарифнойСтавки = ПоказателиСотрудника.ВидТарифнойСтавки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму()
	
	УправлениеШтатнымРасписаниемФормы.ПроверкаШтатногоРасписанияПодготовитьТаблицуФормы(ЭтаФорма, РеквизитыПроверяемыеНаСоответствие());
	ЗарплатаКадрыРасширенный.ОформлениеНесколькихДокументовНаОднуДатуДополнитьФорму(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодходящихСотрудниковЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПодходящихСотрудниковНаСервере();
	
КонецПроцедуры

// Процедура заполняет таблицы документа сотрудниками, у которых среди плановых показателей есть выбранные в документе.
// Также выполняются все сопутствующие действия: индексация, округление, расчет ФОТ и т.п.
&НаСервере
Процедура ЗаполнитьПодходящихСотрудниковНаСервере(СохранятьИсправления = Ложь, ВыводитьСообщения = Ложь)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		ПолучитьСообщенияПользователю(?(ВыводитьСообщения, Ложь, Истина));
		Возврат;
	КонецЕсли;
	
	Если СохранятьИсправления Тогда
		РеквизитВДанные(Объект);
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьДокумент(Объект.МесяцИндексации, СохранятьИсправления);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ДанныеВРеквизит();
	
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения();
	
КонецПроцедуры

// Процедура пересчитывает результаты индексации не изменяя состав строк.
// Если указана строка показателя редактируемого в текущий момент - пересчитывается только он.
//
&НаСервере
Процедура ПересчитатьФорму(СтрокаПересчитываемогоПоказателя = Неопределено)
	
	Если Объект.Показатели.Количество() > 0 Тогда
		ПересчитатьЗначенияПоказателей(СтрокаПересчитываемогоПоказателя);
		ПересчитатьФОТИСовокупныеТарифныеСтавки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЗначенияПоказателей(Знач СтрокаПересчитываемогоПоказателя = Неопределено)
	
	ОписаниеОкругленияПоказателей = ИндексацияЗаработка.ОписаниеОкругленияПоказателей(Объект.Показатели.Выгрузить(, "Показатель, СпособОкругления"));
	
	ПересчитываемыеПоказатели = Объект.Показатели;
	Если НЕ СтрокаПересчитываемогоПоказателя = Неопределено Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Показатель", Объект.Показатели.НайтиПоИдентификатору(СтрокаПересчитываемогоПоказателя).Показатель);
		ПересчитываемыеПоказатели = Объект.Показатели.НайтиСтроки(Отбор);
	КонецЕсли;
			
	Для каждого ИндексируемыйПоказатель Из ПересчитываемыеПоказатели Цикл
		
		ОписаниеОкругленияПоказателя = ОписаниеОкругленияПоказателей.Получить(ИндексируемыйПоказатель.Показатель);
		
		КоэффициентИндексацииПоказателя = Объект.КоэффициентИндексации;
		Если Объект.ИндексацияВоеннослужащих Тогда
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");			
				КоэффициентИндексацииПоказателя = Модуль.КоэффициентИндексацииПоказателя(КоэффициентИндексацииПоказателя, ИндексируемыйПоказатель.Показатель, Объект.ВидИндексацииГосударственныхСлужащих);
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Строка Из ЭтаФорма["ПоказателиСотрудников"] Цикл
			Если ЗначениеЗаполнено(ИндексируемыйПоказатель.ПутьКДанным) 
				И ЗначениеЗаполнено(Строка[ИндексируемыйПоказатель.ПутьКДанным + "ТекущееЗначение"]) Тогда
				
				ИндексированноеЗначение = ИндексацияЗаработка.ИндексированноеЗначениеПоказателя(Строка[ИндексируемыйПоказатель.ПутьКДанным + "ТекущееЗначение"],
																			КоэффициентИндексацииПоказателя, 
																			ОписаниеОкругленияПоказателя);
				
				Строка[ИндексируемыйПоказатель.ПутьКДанным] = ИндексированноеЗначение;
				Если Строка.ПоказательТарифнойСтавки = ИндексируемыйПоказатель.Показатель Тогда
					Строка.КоэффициентИндексацииСотрудника  = Строка[ИндексируемыйПоказатель.ПутьКДанным] / Строка[ИндексируемыйПоказатель.ПутьКДанным + "ТекущееЗначение"];
				КонецЕсли;
			КонецЕсли;
			Строка.ФиксСтрока = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения();	
	
КонецПроцедуры

#Область ФОТ

&НаСервере
Процедура ЗаполнитьФОТПоСотрудникам()
	Для каждого СтрокаСотрудника Из ЭтаФорма["ПоказателиСотрудников"] Цикл
		СтрокаСотрудника.ФОТ = ФОТСотрудника(СтрокаСотрудника.Сотрудник);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ФОТСотрудника(Сотрудник)
	НачисленияСотрудника = Объект.НачисленияСотрудников.Выгрузить(Новый Структура("Сотрудник", Сотрудник));
	Возврат НачисленияСотрудника.Итог("Размер");
КонецФункции

&НаСервере
Процедура ПересчитатьФОТИСовокупныеТарифныеСтавки(Знач СтрокаПересчитываемогоСотрудника = Неопределено)
	
	ВремяРегистрацииСотрудников = Новый Соответствие;
	Для Каждого СтрокаСотрудника Из ПоказателиСотрудников Цикл 
		ВремяРегистрацииСотрудников.Вставить(СтрокаСотрудника.Сотрудник, СтрокаСотрудника.ВремяРегистрации);
	КонецЦикла;
	
	Если НЕ СтрокаПересчитываемогоСотрудника = Неопределено Тогда
		СтрокаПересчитываемогоСотрудника = ЭтаФорма["ПоказателиСотрудников"].НайтиПоИдентификатору(СтрокаПересчитываемогоСотрудника);
	КонецЕсли;
	
	ПересчитываемыйСотрудник = Неопределено;
	
	Если СтрокаПересчитываемогоСотрудника <> Неопределено Тогда
		ПересчитываемыйСотрудник = СтрокаПересчитываемогоСотрудника.Сотрудник;
	КонецЕсли;
	
	Менеджер = Документы.ИндексацияЗаработка;
	
	РеквизитВДанные(Объект);
	
	ПересчитываемыеНачисления = Объект.НачисленияСотрудников;
	ПересчитываемыеПоказатели = Объект.ЗначенияПоказателей;
	
	Если ЗначениеЗаполнено(ПересчитываемыйСотрудник) Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Сотрудник", ПересчитываемыйСотрудник);  
		
		ПересчитываемыеПоказатели = Объект.ЗначенияПоказателей.НайтиСтроки(Отбор);
	КонецЕсли;
		
	Менеджер.РассчитатьФОТ(Объект.Ссылка, Объект.Организация, Объект.МесяцИндексации, 
		ПересчитываемыеНачисления, ПересчитываемыеПоказатели, ПоказателиСотрудников, ВремяРегистрацииСотрудников);
		
	ЗаполнитьФОТПоСотрудникам();
	
	ИзвестныеПоказатели = ЗарплатаКадрыРасширенный.ПоказателиРасчетаСовокупныхТарифныхСтавок();
	Для Каждого СтрокаПоказателя Из ПересчитываемыеПоказатели Цикл 
		НоваяСтрока = ИзвестныеПоказатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказателя);
		НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(НоваяСтрока.Сотрудник);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(Сотрудник, Поле, ИдентификаторСтроки)
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		
		Если Поле = "ПоказателиСотрудниковФОТ" Тогда
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("АдресВХранилище", АдресВХранилищеНачисленийИУдержаний(ИдентификаторСтроки));
			ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр Или Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьИндексациюЗаработка"));
			
			ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(ПараметрыОткрытия, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция АдресВХранилищеНачисленийИУдержаний(ИдентификаторСтроки)
	
	СтрокаСотрудника = ПоказателиСотрудников.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ПараметрыОткрытия = ЗарплатаКадрыРасширенныйКлиентСервер.ПараметрыРедактированияСоставаНачисленийИУдержаний();
	
	ПараметрыОткрытия.ВладелецНачисленийИУдержаний = СтрокаСотрудника.Сотрудник;
	ПараметрыОткрытия.ДатаРедактирования = СтрокаСотрудника.ВремяРегистрации;
	ПараметрыОткрытия.Организация = Объект.Организация;
	ПараметрыОткрытия.РежимРаботы = 3;
	ПараметрыОткрытия.ДополнитьНедостающиеЗначенияПоказателей = Истина;
	
	ДополнитьСтруктуруНачислениямиИПоказателями(СтрокаСотрудника.Сотрудник, ПараметрыОткрытия.Подразделение, ПараметрыОткрытия, СтрокаСотрудника.ВремяРегистрации);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыОткрытия, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ДополнитьСтруктуруНачислениямиИПоказателями(Сотрудник, Подразделение, ПараметрыОткрытия, ВремяРегистрации)
	
	МассивНачислений = Новый Массив;
	МассивПоказателей = Новый Массив;
	
	// Получение показателей расчета зарплаты сотрудника.
	
	ИндексируемыеПоказатели = Новый ТаблицаЗначений;
	ИндексируемыеПоказатели.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ИндексируемыеПоказатели.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	СтрокиСотрудника = ЭтаФорма["ПоказателиСотрудников"].НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Если СтрокиСотрудника.Количество() > 0 Тогда
		СтрокаСотрудника = СтрокиСотрудника[0];
		Для каждого КолонкаПоказатель Из Объект.Показатели Цикл
			Если СтрокаСотрудника[КолонкаПоказатель.ПутьКДанным + "ТекущееЗначение"] > 0 Тогда
				СтрокаИндексируемогоПоказателя = ИндексируемыеПоказатели.Добавить();
				СтрокаИндексируемогоПоказателя.Показатель = КолонкаПоказатель.Показатель;
				СтрокаИндексируемогоПоказателя.Значение = СтрокаСотрудника[КолонкаПоказатель.ПутьКДанным];
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	СтрокаТаблицыСотрудников = ТаблицаСотрудников.Добавить();
	СтрокаТаблицыСотрудников.Период = ВремяРегистрации;
	СтрокаТаблицыСотрудников.Организация = Объект.Организация;
	СтрокаТаблицыСотрудников.Сотрудник = Сотрудник;
		
	ИдентификаторСтрокиВидаРасчета = 1;
	СтрокиНачислений = Объект.НачисленияСотрудников.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
		
		СтруктураНачисления = Новый Структура("Начисление,ДокументОснование,ИдентификаторСтрокиВидаРасчета,Размер");
		ЗаполнитьЗначенияСвойств(СтруктураНачисления, СтрокаНачислений);
		СтруктураНачисления.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		МассивНачислений.Добавить(СтруктураНачисления);
		
		ОписаниеНачисления = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтруктураНачисления.Начисление);
		Для каждого ОписаниеПоказателя Из ОписаниеНачисления.Показатели Цикл
			Если ОписаниеПоказателя.ЗапрашиватьПриВводе Тогда
				
				СтрокиЗначенийПоказателя = ИндексируемыеПоказатели.НайтиСтроки(Новый Структура("Показатель", ОписаниеПоказателя.Показатель));
				Если СтрокиЗначенийПоказателя.Количество() > 0 Тогда
					СтруктураПоказателя = Новый Структура("Показатель,ИдентификаторСтрокиВидаРасчета,Значение");
					СтруктураПоказателя.Показатель = ОписаниеПоказателя.Показатель;
					СтруктураПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
					СтруктураПоказателя.Значение = СтрокиЗначенийПоказателя[0].Значение;
					МассивПоказателей.Добавить(СтруктураПоказателя);
				КонецЕсли; 
				
			КонецЕсли; 
		КонецЦикла;
		
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
		
	КонецЦикла;
	
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.Используется = Истина;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.Таблица = МассивНачислений;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.ИзменятьСоставВидовРасчета = Ложь;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.ИзменятьЗначенияПоказателей = Ложь;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.НомерТаблицы = 1;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.ПоказатьФОТ = Истина;
	
	ПараметрыОткрытия.Показатели = МассивПоказателей;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияИзВРеменногоХранилища(АдресВХранилище);
	
	ДанныеИзХранилища = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Сотрудник = ДанныеИзХранилища.ВладелецНачисленийИУдержаний;
	
	УдалитьНачисленияПоСотруднику(Сотрудник);
	ФОТИзменен = Ложь;
	НачисленияСотрудников = Новый Массив;
	Если ДанныеИзХранилища <> Неопределено Тогда
		Для каждого НачислениеСотрудника Из ДанныеИзХранилища.Начисления Цикл
			НоваяСтрокаНачислений = Объект.НачисленияСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНачислений, НачислениеСотрудника);
			НоваяСтрокаНачислений.Сотрудник = Сотрудник;
			НачисленияСотрудников.Добавить(НоваяСтрокаНачислений);
		КонецЦикла;
		ФОТИзменен = ДанныеИзХранилища.Модифицированность;
	КонецЕсли; 
	
	ВремяРегистрацииСотрудников = Новый Соответствие;
	ВремяРегистрацииСотрудников.Вставить(Сотрудник, Объект.МесяцИндексации);
	
	НайденныеСтроки = ЭтаФорма["ПоказателиСотрудников"].НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].ФОТ = ФОТСотрудника(Сотрудник);
		Если ФОТИзменен Тогда
			НайденныеСтроки[0].ФиксСтрока = Истина;
		КонецЕсли;
		ВремяРегистрацииСотрудников.Вставить(Сотрудник, НайденныеСтроки[0].ВремяРегистрации);
		КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения();
	КонецЕсли; 
	
	ИзвестныеПоказатели = ЗарплатаКадрыРасширенный.ПоказателиРасчетаСовокупныхТарифныхСтавок();
	Если ДанныеИзХранилища <> Неопределено Тогда
		Для Каждого ДанныеПоказателя Из ДанныеИзХранилища.Показатели Цикл 
			НоваяСтрока = ИзвестныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоказателя);
			НоваяСтрока.Сотрудник = Сотрудник;
			НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(Сотрудник);
		КонецЦикла;
	КонецЕсли;
		
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].СовокупнаяТарифнаяСтавка = ДанныеИзХранилища.СовокупнаяТарифнаяСтавка;
		НайденныеСтроки[0].ВидТарифнойСтавки = ДанныеИзХранилища.ВидТарифнойСтавки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отрисовка_формы

// Процедура добавляет на форму элементы для редактирования списка сотрудников 
// и показателей этих сотрудников.
&НаСервере
Процедура ДополнитьФормуПоказателиСотрудников()
	
	МассивИменРеквизитовФормы = Новый Массив;
	
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, МассивИменРеквизитовФормы, "Объект.Показатели");
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, МассивИменРеквизитовФормы, "ПоказателиСотрудников");
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Показатели.Показатель
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	&Показатели КАК Показатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Показатели.Показатель,
	|	ПоказателиРасчетаЗарплаты.Идентификатор КАК ПутьКДанным,
	|	ПоказателиРасчетаЗарплаты.КраткоеНаименование КАК Заголовок
	|ИЗ
	|	ВТПоказатели КАК Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|		ПО Показатели.Показатель = ПоказателиРасчетаЗарплаты.Ссылка
	|ГДЕ
	|	Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Показатели", Объект.Показатели.Выгрузить(, "Показатель"));
	ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
	
	ТипЗначениеПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты();
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		
		ПоказательИспользуется = Новый РеквизитФормы(СтрокаПоказателя.ПутьКДанным + "Используется", Новый ОписаниеТипов("Булево"), "ПоказателиСотрудников");
		ДобавляемыеРеквизиты.Добавить(ПоказательИспользуется);
		
		НовыйПоказатель = Новый РеквизитФормы(СтрокаПоказателя.ПутьКДанным, ТипЗначениеПоказателя, "ПоказателиСотрудников", СтрокаПоказателя.Заголовок);
		ДобавляемыеРеквизиты.Добавить(НовыйПоказатель);
		НовыйПоказательТекущееЗначение = Новый РеквизитФормы(СтрокаПоказателя.ПутьКДанным + "ТекущееЗначение", ТипЗначениеПоказателя, "ПоказателиСотрудников", СтрокаПоказателя.Заголовок + "(тек. значение)");
		ДобавляемыеРеквизиты.Добавить(НовыйПоказательТекущееЗначение);
		
		НовыйПоказательТекущееЗначениеПредставление = Новый РеквизитФормы(СтрокаПоказателя.ПутьКДанным + "ТекущееЗначениеПредставление", ТипСтрока, "ПоказателиСотрудников");
		ДобавляемыеРеквизиты.Добавить(НовыйПоказательТекущееЗначениеПредставление);
		
	КонецЦикла;
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(ЭтаФорма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		
		Отбор = Новый Структура("Показатель", СтрокаПоказателя.Показатель);
		РедактируемыйПоказатель = Объект.Показатели.НайтиСтроки(Отбор);
		РедактируемыйПоказатель[0].ПутьКДанным = СтрокаПоказателя.ПутьКДанным; 
		РедактируемыйПоказатель[0].КраткоеНаименование = СтрокаПоказателя.Заголовок; 
		
	КонецЦикла;
	
	ГруппаПоказателиСотрудников = ЭтаФорма.Элементы.Найти("ГруппаПоказателиСотрудников");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		ГруппаСотрудник = ЭтаФорма.Элементы.Найти("ГруппаСотрудник");
		ГруппаСотрудник.Заголовок = "Сотрудник / Должность";
	КонецЕсли;
	
	ЗарплатаКадры.УдалитьПодчиненныеЭлементыГруппы(ЭтаФорма, ГруппаПоказателиСотрудников);
	
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		ДобавитьЭлементыПоказателя(СтрокаПоказателя, ГруппаПоказателиСотрудников);
	КонецЦикла;
	
	ДополнитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыПоказателя(СтрокаПоказателя, ЭлементПоказателиСотрудников)
	ГруппаЗначенияПоказателя = ЭтаФорма.Элементы.Добавить("ГруппаПоказатель" + СтрокаПоказателя.ПутьКДанным, Тип("ГруппаФормы"), ЭлементПоказателиСотрудников);
	ГруппаЗначенияПоказателя.Заголовок = СтрокаПоказателя.Заголовок;
	ГруппаЗначенияПоказателя.ОтображатьВШапке = Истина; 
	ГруппаЗначенияПоказателя.ОтображатьЗаголовок = Истина;
	ГруппаЗначенияПоказателя.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	ГруппаЗначенияПоказателя.РастягиватьПоГоризонтали = Ложь;

	ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(СтрокаПоказателя.Показатель);	
	
	// Добавим значение показателя после индексации.
	ДобавитьЭлементЗначенияПоказателя(СтрокаПоказателя, ГруппаЗначенияПоказателя, ПоказательИнфо);
	
	// Добавим непроиндексированное (старое) значение показателя.
	ДобавитьЭлементЗначенияПоказателя(СтрокаПоказателя, ГруппаЗначенияПоказателя, ПоказательИнфо, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементЗначенияПоказателя(СтрокаПоказателя, Группа, ПоказательИнфо, НовоеЗначение = Истина)
	
	ПутьПоказателя = СтрокаПоказателя.ПутьКДанным + ?(НовоеЗначение, "", "ТекущееЗначениеПредставление");
	
	ЭлементПоказатель = ЭтаФорма.Элементы.Добавить("ПоказателиСотрудников" + СтрокаПоказателя.ПутьКДанным + ?(НовоеЗначение, "", "ТекущееЗначениеПредставление"), Тип("ПолеФормы"), Группа);
	ЭлементПоказатель.ПутьКДанным = "ПоказателиСотрудников." + СтрокаПоказателя.ПутьКДанным + ?(НовоеЗначение, "", "ТекущееЗначениеПредставление");
	ЭлементПоказатель.Заголовок = СтрокаПоказателя.Заголовок;
	ЭлементПоказатель.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементПоказатель.ОтображатьВШапке = Ложь;
	ЭлементПоказатель.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	ЭлементПоказатель.РастягиватьПоГоризонтали = Ложь;
	ЭлементПоказатель.Ширина = 10;

	Если НовоеЗначение Тогда
		ЭлементПоказатель.ОграничениеТипа = ПоказательИнфо.ТипПоказателя;
		ЭлементПоказатель.Формат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);			
		ЭлементПоказатель.УстановитьДействие("ПриИзменении", "Подключаемый_ЗначениеПоказателяПриИзменении");
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоказателиСотрудников." + СтрокаПоказателя.ПутьКДанным + "Используется");
		ЭлементОтбора.ПравоеЗначение = Ложь;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПоказателиСотрудников" + ПутьПоказателя);		
	Иначе
		ЭлементПоказатель.ТолькоПросмотр = Истина;
		ЭлементПоказатель.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		ЭлементПоказатель.Шрифт = ШрифтыСтиля.ШрифтСоставнойНадписиМоноширинный;
		ЭлементПоказатель.Ширина = 15;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовокГруппыИндексируемыеПоказатели(Форма)
	
	Если Форма.Объект.Показатели.Количество() > 0 Тогда
		ЗаголовокПоказателей =  НСтр("ru = 'Индексируемые показатели'") + ": ";
		Для каждого Показатель Из Форма.Объект.Показатели Цикл
			ЗаголовокПоказателей = ЗаголовокПоказателей + Показатель.КраткоеНаименование + ", ";
		КонецЦикла;
	Иначе
		ЗаголовокПоказателей = НСтр("ru = 'Показатели не выбраны'") + "  ";
	КонецЕсли;
	
	Форма.Элементы.ГруппаПоказатели.Заголовок = Лев(ЗаголовокПоказателей, СтрДлина(ЗаголовокПоказателей) - 2);
КонецПроцедуры

#КонецОбласти

#Область Серверные_обработчики_событий_формы

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьДанныеФормыПоОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	Элементы.МесяцСтрокой.АвтоОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.МесяцИндексации);
	Элементы.МесяцСтрокой.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.МесяцИндексации);
	ПриИзмененииМесяцаНачисленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМесяцаНачисленияНаСервере()
	
	ПрочитатьВремяРегистрации();
	УстановитьОтображениеНадписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	ПриИзмененииМесяцаНачисления();
КонецПроцедуры 

&НаСервере
Процедура КоэффициентИндексацииПриИзмененииНаСервере()
	ПересчитатьФорму();
КонецПроцедуры

&НаСервере
Процедура ПоказателиПоказательПриИзмененииНаСервере()
	ПоказателиСотрудниковВДанныеФормы(Объект);
	ДанныеВРеквизит();
	ОбновитьЗаголовокГруппыИндексируемыеПоказатели(ЭтотОбъект);
	УстановитьПараметрыВыбораПоказателей();
	ПересчитатьФорму();
КонецПроцедуры

&НаСервере
Процедура ПоказателиПослеУдаленияНаСервере()
	ПоказателиСотрудниковВДанныеФормы(Объект);
	ДанныеВРеквизит();
	ОбновитьЗаголовокГруппыИндексируемыеПоказатели(ЭтотОбъект);
	УстановитьПараметрыВыбораПоказателей();
	ПересчитатьФорму();
КонецПроцедуры

&НаСервере
Процедура ПоказателиСпособОкругленияПриИзмененииНаСервере(ТекущаяСтрока)
	ПересчитатьФорму(ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура УдалитьНачисленияПоСотруднику(Сотрудник)
	
	СтрокиНачислений = Объект.НачисленияСотрудников.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
		Объект.НачисленияСотрудников.Удалить(СтрокаНачислений);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПересчетТарифныхСтавокПоСотруднику(Сотрудник)
	
	СтрокиПересчета = Объект.ПересчетТарифныхСтавок.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Для каждого СтрокаПересчета Из СтрокиПересчета Цикл
		Объект.ПересчетТарифныхСтавок.Удалить(СтрокаПересчета);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗначениеПоказателяПриИзмененииНаСервере(ТекущаяСтрока)
	ПересчитатьФОТИСовокупныеТарифныеСтавки(ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПоказателиСотрудниковСотрудникПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ТекущаяСтрока = ЭтаФорма["ПоказателиСотрудников"].НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущаяСтрока = Неопределено 
		Или НЕ ЗначениеЗаполнено(ТекущаяСтрока.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииСотрудникаДокумента(Объект.Ссылка, ТекущаяСтрока.Сотрудник, Объект.МесяцИндексации);
	
	ДополнитьПоказателиСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущаяСтрока.Сотрудник));	

КонецПроцедуры

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	ОчищаемыеТаблицы = Новый Массив;
	ОчищаемыеТаблицы.Добавить("ПоказателиСотрудников");
	ОчищаемыеТаблицы.Добавить("Объект.Сотрудники");
	ОчищаемыеТаблицы.Добавить("Объект.ФизическиеЛица");
	ОчищаемыеТаблицы.Добавить("Объект.ЗначенияПоказателей");
	ОчищаемыеТаблицы.Добавить("Объект.НачисленияСотрудников");
	ОчищаемыеТаблицы.Добавить("Объект.ПересчетТарифныхСтавок");
	
	Возврат ОчищаемыеТаблицы;
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("ЭлементФормы", "МесяцСтрокой"));
	Массив.Добавить(Новый Структура("ЭлементФормы", "Организация"));
	Массив.Добавить(Новый Структура("ЭлементФормы", "Подразделение"));
	Массив.Добавить(Новый Структура("ЭлементФормы", "ПоказателиПоказатель"));
	Массив.Добавить(Новый Структура("ЭлементФормы", "КоэффициентИндексации"));
	Массив.Добавить(Новый Структура("ЭлементФормы", "ИндексацияГосударственныхСлужащих"));
	Массив.Добавить(Новый Структура("ЭлементФормы", "ИндексацияВоеннослужащих"));
	
	Для каждого ОписаниеЭлемента Из Массив Цикл
		ОписаниеЭлемента.Вставить("ПредупреждениеПриРедактировании", ЗарплатаКадрыРасширенный.КлючевыеРеквизитыЗаполненияФормыТекстПредупрежденияДокументовСАвтоматическимРасчетом());
	КонецЦикла;
	
	Возврат Массив
КонецФункции

&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения()
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект, ?(ЕстьФиксированныеДанные(), ОтображениеПредупрежденияПриРедактировании.Отображать, ОтображениеПредупрежденияПриРедактировании.Авто));
	УстановитьОтображениеНадписей();
КонецФункции 

&НаСервере
Функция ЕстьФиксированныеДанные()	
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(ЭтотОбъект, ОписаниеТаблицыПоказателиСотрудников());
КонецФункции 

// Контролируемые поля
&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	КонтролируемыеПоляПоказателиСотрудников = Новый Структура("ФиксСтрока");
	КонтролируемыеПоля = Новый Структура("ПоказателиСотрудников", КонтролируемыеПоляПоказателиСотрудников);
	Возврат КонтролируемыеПоля;
	
КонецФункции

// Контролируемые поля
&НаСервере
Функция ОписаниеТаблицыПоказателиСотрудников() Экспорт
	
	ОписаниеТаблицыПоказателиСотрудников = Новый Структура;	
	ОписаниеТаблицыПоказателиСотрудников.Вставить("ИмяТаблицы", 	"ПоказателиСотрудников");
	ОписаниеТаблицыПоказателиСотрудников.Вставить("ПутьКДанным", 	"ПоказателиСотрудников");
	ОписаниеТаблицыПоказателиСотрудников.Вставить("ЭтоПерерасчеты", Ложь);
	
	Возврат ОписаниеТаблицыПоказателиСотрудников;
	
КонецФункции

#КонецОбласти

#Область ЗаполнитьПоказателиПоУмолчанию

&НаСервере
Процедура ЗаполнитьИндексируемыеПоУмолчаниюПоказатели()
	
	
	Если ЗначениеЗаполнено(Объект.ВидИндексацииГосударственныхСлужащих) Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ЗаполнитьИндексируемыеПоУмолчаниюПоказатели(Объект.Показатели, Объект.ВидИндексацииГосударственныхСлужащих, Объект.ИндексацияВоеннослужащих);
		КонецЕсли;		
	Иначе
	
		ПоказателиПредыдущейИндексации 	= ПоказателиПредыдущейИндексации();		
		ИндексацияЗаработка.ЗаполнитьИндексируемыеПоУмолчаниюПоказатели(Объект.Показатели, ПоказателиПредыдущейИндексации);	
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПоказателиПредыдущейИндексации() 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ИндексацияЗаработка.МесяцИндексации) КАК МесяцИндексации
	|ПОМЕСТИТЬ МаксимальныйМесяц
	|ИЗ
	|	Документ.ИндексацияЗаработка КАК ИндексацияЗаработка
	|ГДЕ
	|	ИндексацияЗаработка.МесяцИндексации <= &Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	МАКСИМУМ(ИндексацияЗаработка.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ СсылкаПоследнегоДокумента
	|ИЗ
	|	МаксимальныйМесяц КАК МаксимальныйМесяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИндексацияЗаработка КАК ИндексацияЗаработка
	|		ПО МаксимальныйМесяц.МесяцИндексации = ИндексацияЗаработка.МесяцИндексации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИндексацияЗаработкаПоказатели.Показатель,
	|	ИндексацияЗаработкаПоказатели.СпособОкругления
	|ИЗ
	|	СсылкаПоследнегоДокумента КАК СсылкаПоследнегоДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИндексацияЗаработка.Показатели КАК ИндексацияЗаработкаПоказатели
	|		ПО СсылкаПоследнегоДокумента.Ссылка = ИндексацияЗаработкаПоказатели.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ИндексацияЗаработкаПоказатели.Показатель,
	|	ИндексацияЗаработкаПоказатели.СпособОкругления";
	
	Запрос.УстановитьПараметр("Дата", Объект.МесяцИндексации); 
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ОкруглениеПоУмолчаниюДляПоказателя(Показатель)
	Возврат ИндексацияЗаработка.ОкруглениеПоУмолчаниюДляПоказателя(Показатель);
КонецФункции

&НаСервере
Функция ПроверкаПередЗаписьюНаСервере(РезультатыПроверки, ДанныеОЗанятыхПозициях) Экспорт 
	
	Возврат КадровыйУчетРасширенный.ПроверкаСоответствияШтатномуРасписанию(ДанныеОЗанятыхПозициях, Объект.Ссылка, Истина, РезультатыПроверки);
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеОЗанятыхПозициях()Экспорт
	
	Возврат ПоместитьДанныеОЗанятыхПозицияхВоВременноеХранилище();
	
КонецФункции

&НаСервере
Функция ПоместитьДанныеОЗанятыхПозицияхВоВременноеХранилище()
	
	РеквизитВДанные(Объект);
	
	СотрудникиДаты = ПоказателиСотрудников.Выгрузить(, "Сотрудник, ВремяРегистрации");
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиДаты.ВремяРегистрации КАК Период,
	               |	СотрудникиДаты.Сотрудник
	               |ПОМЕСТИТЬ ВТСотрудникиПериоды
	               |ИЗ
	               |	&СотрудникиДаты КАК СотрудникиДаты";
				   
	Запрос.Выполнить();			   
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	КадровыеДанные = "ДолжностьПоШтатномуРасписанию,КоличествоСтавок,Должность";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
																				   
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадровыеДанныеСотрудников.Сотрудник,
	               |	КадровыеДанныеСотрудников.КоличествоСтавок,
	               |	КадровыеДанныеСотрудников.Должность,
	               |	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию
	               |ИЗ
	               |	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
				   
	КадровыеДанные = Запрос.Выполнить().Выгрузить();
	
	ДанныеОЗанятыхПозициях = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", Объект.МесяцИндексации);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НачисленияСотрудников", Объект.НачисленияСотрудников.Выгрузить());
	Запрос.УстановитьПараметр("ЗначенияПоказателей", Объект.ЗначенияПоказателей.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.Начисление,
		|	НачисленияСотрудников.Размер
		|ПОМЕСТИТЬ ВТНачисленияСотрудников
		|ИЗ
		|	&НачисленияСотрудников КАК НачисленияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.Значение
		|ПОМЕСТИТЬ ВТЗначенияПоказателей
		|ИЗ
		|	&ЗначенияПоказателей КАК ЗначенияПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.Начисление,
		|	НачисленияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТНачисленияСотрудниковСПоказателями
		|ИЗ
		|	ВТНачисленияСотрудников КАК НачисленияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО НачисленияСотрудников.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияСотрудников.Начисление,
		|	НачисленияСотрудников.Показатель
		|ПОМЕСТИТЬ ВТНачисленияСПоказателями
		|ИЗ
		|	ВТНачисленияСотрудниковСПоказателями КАК НачисленияСотрудников
		|ГДЕ
		|	НачисленияСотрудников.Начисление <> ЗНАЧЕНИЕ(ПланВидовРасчета.начисления.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Период КАК Период,
		|	&Организация КАК Организация,
		|	НачисленияСотрудниковСПоказателем.Сотрудник,
		|	НачисленияСотрудниковСПоказателем.Показатель
		|ПОМЕСТИТЬ ВТИзмеренияДаты
		|ИЗ
		|	ВТНачисленияСотрудниковСПоказателями КАК НачисленияСотрудниковСПоказателем
		|ГДЕ
		|	ЕСТЬNULL(НачисленияСотрудниковСПоказателем.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)";
		
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Объект.Ссылка);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДаты",
			"Организация,Сотрудник,Показатель"),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.Начисление,
		|	НачисленияСотрудников.Начисление.Рассчитывается КАК Рассчитывается,
		|	НачисленияСотрудников.Показатель,
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателей.Значение ЕСТЬ NULL 
		|			ТОГДА ЗначенияПоказателейСрезПоследних.Значение
		|		ИНАЧЕ ЗначенияПоказателей.Значение
		|	КОНЕЦ КАК Значение
		|ИЗ
		|	ВТНачисленияСотрудниковСПоказателями КАК НачисленияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПоказателейСрезПоследних
		|		ПО НачисленияСотрудников.Сотрудник = ЗначенияПоказателейСрезПоследних.Сотрудник
		|			И НачисленияСотрудников.Показатель = ЗначенияПоказателейСрезПоследних.Показатель
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей
		|		ПО (НачисленияСотрудников.Сотрудник = ЗначенияПоказателей.Сотрудник)
		|			И (НачисленияСотрудников.Показатель = ЗначенияПоказателей.Показатель)";
		
	НачисленияСотрудников = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.Начисление,
		|	СУММА(НачисленияСотрудников.Размер) КАК ФОТ
		|ИЗ
		|	ВТНачисленияСотрудников КАК НачисленияСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.Начисление";
		
	ФОТСотрудников = Запрос.Выполнить().Выгрузить();
	
	ИспользуетсяШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	Для Каждого ДанныеСотрудника Из КадровыеДанные Цикл
		
		СтруктураЗанятойПозиции = УправлениеШтатнымРасписаниемКлиентСервер.СтруктураДанныхОЗанятыхПозициях(Объект.МесяцИндексации);
		ЗаполнитьЗначенияСвойств(СтруктураЗанятойПозиции, ДанныеСотрудника);
		СтруктураЗанятойПозиции.ПозицияШтатногоРасписания = ?(ИспользуетсяШтатноеРасписание,
			ДанныеСотрудника.ДолжностьПоШтатномуРасписанию, ДанныеСотрудника.Должность);
			
		СтрокиФОТ = ФОТСотрудников.НайтиСтроки(Новый Структура("Сотрудник", ДанныеСотрудника.Сотрудник));
		СтруктураЗанятойПозиции.ФОТ = ?(СтрокиФОТ.Количество() > 0, СтрокиФОТ[0].ФОТ, 0);
			
		СтрокиНачислений = НачисленияСотрудников.НайтиСтроки(Новый Структура("Сотрудник", ДанныеСотрудника.Сотрудник));
		Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
			ЗначениеПоказателя = ?(СтрокаНачислений.Рассчитывается, СтрокаНачислений.Значение, СтруктураЗанятойПозиции.ФОТ); 
			СтруктураЗанятойПозиции.ДанныеОНачислениях.Добавить(
				Новый Структура("Начисление,Показатель,Значение", СтрокаНачислений.Начисление, СтрокаНачислений.Показатель, ЗначениеПоказателя));
		КонецЦикла;
		
		ДанныеОЗанятыхПозициях.Добавить(СтруктураЗанятойПозиции);
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОЗанятыхПозициях, УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыПроверяемыеНаСоответствие()
	
	РеквизитыПроверяемыеНаСоответствие = Новый Структура("РеквизитыШапки,ТабличныеЧасти", Новый Соответствие, Новый Соответствие);
	
	СтруктураОписанияТЧСотрудники = УправлениеШтатнымРасписаниемКлиентСервер.ОписаниеРеквизитовПроверяемыхНаСоответствие();
	СтруктураОписанияТЧСотрудники.СтруктураПоиска = Новый Структура("Сотрудник,ДолжностьПоШтатномуРасписанию");
	РеквизитНесоответствияСтроки = Новый Структура("ИмяРеквизита,ИмяРеквизитаНесоответствия", "ДолжностьПоШтатномуРасписанию", "ДолжностьПоШтатномуРасписаниюНеСоответствуетПозиции");
	СтруктураОписанияТЧСотрудники.РасшифровкаНачислений = Ложь;
	СтруктураОписанияТЧСотрудники.РеквизитНесоответствияСтроки = РеквизитНесоответствияСтроки;
	СтруктураОписанияТЧСотрудники.Вставить("ПутьКДанным", "ПоказателиСотрудников");
	
	РеквизитыПроверяемыеНаСоответствие.ТабличныеЧасти.Вставить("ПоказателиСотрудников", СтруктураОписанияТЧСотрудники);
	
	Возврат РеквизитыПроверяемыеНаСоответствие;
	
КонецФункции

&НаКлиенте
Функция РеквизитыПроверяемыеНаСоответствиеНаКлиенте() Экспорт
	
	Возврат РеквизитыПроверяемыеНаСоответствие();
	
КонецФункции

&НаСервере
Процедура ПрочитатьВремяРегистрации()
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаСотрудника Из ПоказателиСотрудников Цикл
		НоваяСтрока = СотрудникиДаты.Добавить();
		НоваяСтрока.ДатаСобытия = Объект.МесяцИндексации;
		НоваяСтрока.Сотрудник = СтрокаСотрудника.Сотрудник;
	КонецЦикла;
	
	ВремяРегистрацииСотрудников = ВремяРегистрацииСотрудников(СотрудникиДаты);
	
	Для Каждого СтрокаСотрудника Из ПоказателиСотрудников Цикл
		СтрокаСотрудника.ВремяРегистрации = ВремяРегистрацииСотрудников.Получить(СтрокаСотрудника.Сотрудник);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВремяРегистрацииСотрудников(СотрудникиДаты)
	
	ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Объект.Ссылка, СотрудникиДаты);
	Возврат ВремяРегистрацииДокумента.Получить(Объект.МесяцИндексации);
	
КонецФункции

&НаСервере
Процедура УстановитьОтображениеНадписей()
	
	УстановитьПривилегированныйРежим(Истина);
	СотрудникиДаты = ПоказателиСотрудников.Выгрузить(, "Сотрудник, ВремяРегистрации");							
	ЗарплатаКадрыРасширенный.УстановитьТекстНадписиОКонкурирующихДокументахПлановыхНачислений(ЭтотОбъект, СотрудникиДаты, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораПоказателей()
	
	МассивПараметровВыбора = Новый Массив;
	
	МассивВыбранныхПоказателей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплаты.Ссылка
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|ГДЕ
	|	НЕ ПоказателиРасчетаЗарплаты.Ссылка В (&МассивСсылок)
	|	И ПоказателиРасчетаЗарплаты.ВидТарифнойСтавки <> ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)";
	Запрос.УстановитьПараметр("МассивСсылок", Объект.Показатели.Выгрузить(, "Показатель").ВыгрузитьКолонку("Показатель"));
	
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"))));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	Элементы,
	"ПоказателиПоказатель",
	"ПараметрыВыбора",
	Новый ФиксированныйМассив(МассивПараметровВыбора));
	
КонецПроцедуры

#Область ЗаписьДокумента

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЗаписатьНаКлиенте(Истина, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ЗакрытьПослеЗаписи, ПараметрыЗаписи, ОповещениеЗавершения = Неопределено) Экспорт

	КадровыйУчетРасширенныйКлиент.ПередЗаписьюКадровогоДокументаВФорме(ЭтаФорма, Объект, ПараметрыЗаписи, ОповещениеЗавершения, ЗакрытьПослеЗаписи);  
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер", "Объект.ГлавныйБухгалтер");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеГруппыПодписантов()
	
	ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.ГлавныйБухгалтер");	
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(ПоказателиСотрудников.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаПодбораНаСервере(Сотрудники)
	ДополнитьПоказателиСотрудников(Сотрудники);	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПоказателиСотрудников(МассивСотрудников)
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		НоваяСтрока = СотрудникиДаты.Добавить();
		НоваяСтрока.ДатаСобытия = Объект.МесяцИндексации;
		НоваяСтрока.Сотрудник = Сотрудник;
	КонецЦикла;
	
	ВремяРегистрацииСотрудников = ВремяРегистрацииСотрудников(СотрудникиДаты);
	
	Для Каждого СтрокаСотрудника Из ПоказателиСотрудников Цикл 
		ВремяРегистрацииСотрудников.Вставить(СтрокаСотрудника.Сотрудник, СтрокаСотрудника.ВремяРегистрации);
	КонецЦикла;
	
	ТекущиеПоказателиСотрудников = Документы.ИндексацияЗаработка.ТекущиеПоказателиСотрудников(
		Объект.Ссылка,
		Объект.Показатели.Выгрузить(, "Показатель").ВыгрузитьКолонку("Показатель"), 
		Объект.МесяцИндексации, 
		МассивСотрудников,
		ВремяРегистрацииСотрудников);
	
	РезультатИндексации = Документы.ИндексацияЗаработка.ИндексированныеЗначенияПоказателейСотрудников(
		ТекущиеПоказателиСотрудников,
		Объект.КоэффициентИндексации, 
		Неопределено, 
		Объект.Показатели.Выгрузить(, "Показатель,СпособОкругления"),
		Объект.ИндексацияВоеннослужащих,
		Объект.ВидИндексацииГосударственныхСлужащих);
	
	ТаблицаНачисленийСотрудников = Документы.ИндексацияЗаработка.НачисленияСотрудников(
		Объект.Ссылка,
		Объект.МесяцИндексации, 
		РезультатИндексации.КоэффициентыИндексацииСотрудников.ВыгрузитьКолонку("Сотрудник"),
		ВремяРегистрацииСотрудников);
		
	ТарифныеСтавки = ПоказателиСотрудников.Выгрузить();
	ТарифныеСтавки.Очистить();	
		
	Документы.ИндексацияЗаработка.РассчитатьФОТ(Объект.Ссылка, Объект.Организация, Объект.МесяцИндексации, 
		ТаблицаНачисленийСотрудников, РезультатИндексации.ЗначенияПоказателейСотрудников, ТарифныеСтавки, ВремяРегистрацииСотрудников);
	
	Для каждого Сотрудник Из МассивСотрудников Цикл
		УдалитьНачисленияПоСотруднику(Сотрудник);
		УдалитьПересчетТарифныхСтавокПоСотруднику(Сотрудник);
	КонецЦикла;

	Для каждого НачислениеСотрудника Из ТаблицаНачисленийСотрудников Цикл
		ЗаполнитьЗначенияСвойств(Объект.НачисленияСотрудников.Добавить(), НачислениеСотрудника);
	КонецЦикла;
	
	ИзвестныеПоказатели = ЗарплатаКадрыРасширенный.ПоказателиРасчетаСовокупныхТарифныхСтавок();
	Для Каждого СтрокаПоказателя Из РезультатИндексации.ЗначенияПоказателейСотрудников Цикл 
		НоваяСтрока = ИзвестныеПоказатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказателя);
		НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(НоваяСтрока.Сотрудник);
	КонецЦикла;
		
	Для каждого Сотрудник Из МассивСотрудников Цикл
		
		Если РезультатИндексации.КоэффициентыИндексацииСотрудников.Найти(Сотрудник, "Сотрудник") = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'При расчете заработной платы сотрудника %1 не используется ни один из индексируемых показателей.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Сотрудник);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущиеЗначенияСовокупныхТарифныхСтавок = Документы.ИндексацияЗаработка.ТекущиеЗначенияСовокупныхТарифныхСтавокСотрудников(
		Объект.Ссылка, Объект.МесяцИндексации, РезультатИндексации.КоэффициентыИндексацииСотрудников.ВыгрузитьКолонку("Сотрудник"), ВремяРегистрацииСотрудников);
	
	ПоказателиСотрудниковВРеквизитФормы(РезультатИндексации.КоэффициентыИндексацииСотрудников, 
		РезультатИндексации.ЗначенияПоказателейСотрудников, ТекущиеПоказателиСотрудников, ВремяРегистрацииСотрудников);
	
	ЗаполнитьФОТПоСотрудникам();
	
	ЗначенияСовокупныхТарифныхСтавокВРеквизитФормы(ТарифныеСтавки, ТекущиеЗначенияСовокупныхТарифныхСтавок);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуПослеПодтвержденияЗаписи", ЭтотОбъект, Команда);
	ЗарплатаКадрыРасширенныйКлиент.ПоказатьДиалогЗаписиОбъектаДляВыполненияПодключаемойКоманды(ЭтотОбъект, Команда, ОписаниеОповещения);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуПослеПодтвержденияЗаписи(РезультатВопроса, Команда) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

#КонецОбласти
