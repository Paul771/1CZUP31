#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		МетаданныеОбъекта = ЭтотОбъект.Метаданные();
		Для Каждого ПараметрЗаполнения Из ДанныеЗаполнения Цикл
			Если МетаданныеОбъекта.Реквизиты.Найти(ПараметрЗаполнения.Ключ)<>Неопределено Тогда
				ЭтотОбъект[ПараметрЗаполнения.Ключ] = ПараметрЗаполнения.Значение;
			Иначе
				Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, ПараметрЗаполнения.Ключ) Тогда
					ЭтотОбъект[ПараметрЗаполнения.Ключ] = ПараметрЗаполнения.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаАкта, "Объект.ДатаАкта", Отказ, НСтр("ru='Дата акта'"), , , Ложь);
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаПроисшествия, "Объект.ДатаПроисшествия", Отказ, НСтр("ru='Дата происшествия'"), , , Ложь);
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаПриказа, "Объект.ДатаПриказа", Отказ, НСтр("ru='Дата приказа'"), , , Ложь);
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаСоставленияПротоколаОсмотра, "Объект.ДатаСоставленияПротоколаОсмотра", Отказ, НСтр("ru='Дата осмотра'"), , , Ложь);
	
	КоличествоЧленовКомиссии = ЭтотОбъект.Комиссия.Количество();
	
	Если КоличествоЧленовКомиссии = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен состав комиссии.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект", Отказ);
	Иначе
		Если Цел(КоличествоЧленовКомиссии/2) = КоличествоЧленовКомиссии/2 Тогда
			ТекстОшибки = НСтр("ru = 'Количество членов комиссии должно быть нечетным.'");
			Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Комиссия[%1].%2", Комиссия.Количество()-1, "НомерСтроки");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если КоличествоЧленовКомиссии < 3 Тогда
			ТекстОшибки = НСтр("ru = 'Количество членов комиссии должно быть не менее трех.'");
			Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Комиссия[%1].%2", Комиссия.Количество()-1, "НомерСтроки");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	КоличествоПредседателей = 0;
	Для каждого СтрокаКомиссии Из Комиссия Цикл
		Если СтрокаКомиссии.РольВКомиссии = Перечисления.РолиЧленовКомиссииОхраныТруда.Председатель Тогда
			КоличествоПредседателей = КоличествоПредседателей + 1;
		КонецЕсли;
	КонецЦикла;
	Если КоличествоПредседателей > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Председатель в комиссии должен быть один.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект", Отказ);
	ИначеЕсли КоличествоПредседателей = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не указан председатель комиссии.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	
	СформироватьДвиженияПоСпециальнойОценкеУсловийТруда(Движения, ДанныеДляПроведения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПострадавших = Пострадавшие.ВыгрузитьКолонку("Пострадавший");
	СтрокиДляУдаления = Новый Массив;
	
	Для каждого СтрокаИнструктажа Из Инструктажи Цикл
		Если МассивПострадавших.Найти(СтрокаИнструктажа.Пострадавший) = Неопределено Тогда
			СтрокиДляУдаления.Добавить(СтрокаИнструктажа);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаИнструктажа Из СтрокиДляУдаления Цикл
		Инструктажи.Удалить(СтрокаИнструктажа);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НесчастныйСлучайНаПроизводствеПострадавшие.Пострадавший
	|ИЗ
	|	Документ.НесчастныйСлучайНаПроизводстве.Пострадавшие КАК НесчастныйСлучайНаПроизводствеПострадавшие
	|ГДЕ
	|	НесчастныйСлучайНаПроизводствеПострадавшие.Ссылка = &Ссылка
	|	И НесчастныйСлучайНаПроизводствеПострадавшие.Пострадавший <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	МассивПострадавших = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пострадавший");
	КраткийСоставПострадавшие = ЗарплатаКадры.КраткийСоставФизЛиц(МассивПострадавших, ДатаПроисшествия);
	
	МассивУчастников = Новый Массив;
	СтрокаУчастников = "";
	Для каждого СтрокаУчастника Из УчастникиОсмотра Цикл
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(СтрокаУчастника.Участник) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			МассивУчастников.Добавить(СтрокаУчастника.Участник);
		Иначе
			СтрокаУчастников = СтрокаУчастников + СтрокаУчастника.Участник + ", ";
		КонецЕсли;
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрокаУчастников, 2);
	
	КраткийСоставУчастники = ЗарплатаКадры.КраткийСоставФизЛиц(МассивУчастников, ДатаПроисшествия);
	
	Если Не ПустаяСтрока(СтрокаУчастников) Тогда
		КраткийСоставУчастники = КраткийСоставУчастники + ", " + СтрокаУчастников;
		СтрокаПостфикс = "";
		Если СтрДлина(КраткийСоставУчастники) > (100 - 3) Тогда
			СтрокаПостфикс = "...";
		КонецЕсли;
		КраткийСоставУчастники = Лев(КраткийСоставУчастники, 100 - 3) + СтрокаПостфикс;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый Структура("Пострадавшие", "Пострадавший"));
	
	Возврат ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоОрганизацииИФизическимЛицам(ЭтотОбъект, Организация, МассивПараметров, ДатаПроисшествия);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляПроведения()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НесчастныйСлучайНаПроизводстве.Дата КАК Период,
	|	НесчастныйСлучайНаПроизводствеПострадавшие.ДолжностьПоШтатномуРасписанию КАК РабочееМесто,
	|	НесчастныйСлучайНаПроизводствеПострадавшие.ДатаВнеплановойСпецоценки КАК ДатаБлижайшейОценки,
	|	НесчастныйСлучайНаПроизводстве.Организация КАК Организация
	|ИЗ
	|	Документ.НесчастныйСлучайНаПроизводстве.Пострадавшие КАК НесчастныйСлучайНаПроизводствеПострадавшие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НесчастныйСлучайНаПроизводстве КАК НесчастныйСлучайНаПроизводстве
	|		ПО НесчастныйСлучайНаПроизводствеПострадавшие.Ссылка = НесчастныйСлучайНаПроизводстве.Ссылка
	|ГДЕ
	|	НесчастныйСлучайНаПроизводствеПострадавшие.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура СформироватьДвиженияПоСпециальнойОценкеУсловийТруда(Движения, ДанныеДляПроведения)
	
	Выборка = ДанныеДляПроведения.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Движения.ПлановыеДатыСпециальнойОценкиУсловийТруда.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	Движения.ПлановыеДатыСпециальнойОценкиУсловийТруда.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

