#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Сторнирует документ по учетам. Используется подсистемой исправления документов.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений исправляющего документа в которую будут добавлены сторно стоки.
//  Регистратор				 - ДокументСсылка				 - Документ регистратор исправления (документ исправление).
//  ИсправленныйДокумент	 - ДокументСсылка				 - Исправленный документ движения которого будут сторнированы.
//  СтруктураВидовУчета		 - Структура					 - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//  					Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//  ДополнительныеПараметры	 - Структура					 - Структура со свойствами:
//  					* ИсправлениеВТекущемПериоде - Булево - Истина когда исправление выполняется в периоде регистрации исправленного документа.
//						* ОтменаДокумента - Булево - Истина когда исправление вызвано документом СторнированиеНачислений.
//  					* ПериодРегистрации	- Дата - Период регистрации документа регистратора исправления.
// 
// Возвращаемое значение:
//  Булево - "Истина" если сторнирование выполнено этой функцией, "Ложь" если специальной процедуры не предусмотрено.
//
Функция СторнироватьПоУчетам(Движения, Регистратор, ИсправленныйДокумент, СтруктураВидовУчета, ДополнительныеПараметры) Экспорт
	
	РеквизитыДляПроведения = ДополнительныеПараметры.РеквизитыДляПроведения;
	
	Сотрудники = Новый Массив;
	Для Каждого КлючЗначение Из РеквизитыДляПроведения.СотрудникиСИсправленнымиДанными Цикл
		Сотрудники.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	УчетРабочегоВремени.ЗарегистрироватьСторноЗаписиПоДокументу(Движения, РеквизитыДляПроведения.ПериодРегистрации, ИсправленныйДокумент, Сотрудники);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Если ВидФормы = "ФормаОбъекта"
		И (ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьОсобыеУсловияТруда")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьСменыРаботыСотрудников")) Тогда
			
		ВыбраннаяФорма = "ФормаДокументаАльтернативная";
		СтандартнаяОбработка = Ложь;
	КонецЕсли;			
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Конструктор дополнительных данных для печати табеля
//
// Возвращаемое значение:
//   Структура   - Требуемый вид структуры.
//
Функция ДополнительныеДанныеДляПечати() Экспорт

	ДополнительныеДанныеДляПечати = Новый Структура;
	
	ДополнительныеДанныеДляПечати.Вставить("НомерДокумента");
	ДополнительныеДанныеДляПечати.Вставить("НомерКорректировки");
	ДополнительныеДанныеДляПечати.Вставить("ОтветственныйИсполнитель");
	ДополнительныеДанныеДляПечати.Вставить("ДолжностьОтветственногоИсполнителя");
	
	Возврат ДополнительныеДанныеДляПечати;

КонецФункции

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ТабельУчетаРабочегоВремени;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыЗаполнения

Функция ВыборкаДанныхОВремени(ДанныеТабеля, СписокСотрудников = Неопределено, ЗаполнятьТерриторииУсловияТруда = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыЗаполнения = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
	
	ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудники";
	ПараметрыЗаполнения.ИмяВТРезультат = "ВТДанныеУчетаВремениИСостоянийСотрудников";
	ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Ложь;
	ПараметрыЗаполнения.Организация  = ДанныеТабеля.Организация;
	ПараметрыЗаполнения.ДатаАктуальности  = НачалоМесяца(ДанныеТабеля.ПериодРегистрации);
	ПараметрыЗаполнения.ДатаНачала = ДанныеТабеля.ДатаНачалаПериода;
	ПараметрыЗаполнения.ДатаОкончания = ДанныеТабеля.ДатаОкончанияПериода;
	ПараметрыЗаполнения.ДатаНачала = ДанныеТабеля.ДатаНачалаПериода;
	ПараметрыЗаполнения.ДатаОкончания = ДанныеТабеля.ДатаОкончанияПериода;
	ПараметрыЗаполнения.МесяцДатаНачала = НачалоМесяца(ДанныеТабеля.ДатаНачалаПериода);
	ПараметрыЗаполнения.МесяцДатаОкончания = КонецМесяца(ДанныеТабеля.ДатаОкончанияПериода);
	ПараметрыЗаполнения.ПолучатьУжеРассчитанныеДанные = Ложь;
	ПараметрыЗаполнения.ПересчитыватьФактическоеВремя = Истина;
	ПараметрыЗаполнения.УчитыватьТабльныеДанныеОТерриториях = Ложь;
	ПараметрыЗаполнения.ОтноситьПереходящуюЧастьСменыКДнюНачала = Истина;
	
	ПараметрыЗаполнения.ПолучатьУсловияТрудаИТерритории = ЗаполнятьТерриторииУсловияТруда;
	
	Если ЗначениеЗаполнено(ДанныеТабеля.Подразделение) Тогда
		ПараметрыЗаполнения.Подразделение = ДанныеТабеля.Подразделение;
	КонецЕсли;	
	
	ПараметрыЗаполнения.НеучитываемыеРегистраторы.Добавить(ДанныеТабеля.Ссылка);
	
	Если ЗначениеЗаполнено(ДанныеТабеля.ИсправленныйДокумент) Тогда
		ПараметрыЗаполнения.НеучитываемыеРегистраторы.Добавить(ДанныеТабеля.ИсправленныйДокумент);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыЗаполнения.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыЗаполнения.ДатаОкончания);
	
	Если СписокСотрудников = Неопределено Тогда
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация  = ДанныеТабеля.Организация;
		ПараметрыПолученияСотрудников.НачалоПериода = ДанныеТабеля.ДатаНачалаПериода;
		ПараметрыПолученияСотрудников.ОкончаниеПериода = ДанныеТабеля.ДатаОкончанияПериода;
		
		// Подработки
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
			
			ПараметрыПолученияСотрудников.ПодработкиРаботниковПоТрудовымДоговорам = Истина;
			
		КонецЕсли;	
		// Подработки конец
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДобавитьОтборыПоВидуДоговора(ПараметрыПолученияСотрудников.Отборы, Истина);
		КонецЕсли; 
		
		КадровыйУчетРасширенный.ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(ПараметрыПолученияСотрудников);
	
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников, "ВТСотрудникиОрганизации");
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиОрганизации.Сотрудник,
		|	&ДатаНачала,
		|	&ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
		
		Запрос.Выполнить();
		
	Иначе
		ТаблицаСотрудников = Новый ТаблицаЗначений;
		ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		
		Для каждого Сотрудник Из СписокСотрудников Цикл
			СтрокаТаблицы = ТаблицаСотрудников.Добавить();
			СтрокаТаблицы.Сотрудник = Сотрудник;
			СтрокаТаблицы.ДатаНачала = ДанныеТабеля.ДатаНачалаПериода;
			СтрокаТаблицы.ДатаОкончания = ДанныеТабеля.ДатаОкончанияПериода;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	ТаблицаСотрудников.ДатаНачала,
		|	ТаблицаСотрудников.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
		
		Запрос.Выполнить();

	КонецЕсли;	
	
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыЗаполнения);
	
	Запрос.УстановитьПараметр("Явка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	Запрос.УстановитьПараметр("ВечерниеЧасы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы"));
	Запрос.УстановитьПараметр("НочныеЧасы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы"));
	Запрос.УстановитьПараметр("Сверхурочно", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КОНЕЦПЕРИОДА(ДанныеУчетаВремениИСостоянийСотрудников.Дата, МЕСЯЦ) КАК Период,
		|	ДанныеУчетаВремениИСостоянийСотрудников.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиСПериодомКонцаМесяца
		|ИЗ
		|	ВТДанныеУчетаВремениИСостоянийСотрудников КАК ДанныеУчетаВремениИСостоянийСотрудников
		|ГДЕ
		|	ДанныеУчетаВремениИСостоянийСотрудников.ВидУчетаВремени <> &РабочееВремя";
		
	Запрос.Выполнить();
	
	ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиСПериодомКонцаМесяца");
		
	ОписательТаблиц.ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудниковНаКонецМесяца";
	
	КадровыеДанные = "";
	ЗарплатаКадры.ДополнитьКадровымиДаннымиНастройкиПорядкаСписка(КадровыеДанные);
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Истина, КадровыеДанные);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеУчетаВремениИСостоянийСотрудников.Сотрудник КАК Сотрудник,
	|	ДанныеУчетаВремениИСостоянийСотрудников.Дата КАК Дата,
	|	ДанныеУчетаВремениИСостоянийСотрудников.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ДанныеУчетаВремениИСостоянийСотрудников.Дни КАК Дни,
	|	ДанныеУчетаВремениИСостоянийСотрудников.Часы КАК Часы,
	|	ДанныеУчетаВремениИСостоянийСотрудников.НормаЧасов,
	|	ДанныеУчетаВремениИСостоянийСотрудников.Смена КАК Смена,
	|	ДанныеУчетаВремениИСостоянийСотрудников.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
	|	ДанныеУчетаВремениИСостоянийСотрудников.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|	ДанныеУчетаВремениИСостоянийСотрудников.ПереходящаяЧастьПредыдущейСмены
	|		ИЛИ ДанныеУчетаВремениИСостоянийСотрудников.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьСмены,
	|	ВЫБОР
	|		КОГДА ОписаниеВидовВремени.Ссылка = &Явка
	|			ТОГДА 1
	|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &Явка
	|			ТОГДА 2
	|		КОГДА ОписаниеВидовВремени.Ссылка = &ВечерниеЧасы
	|			ТОГДА 3
	|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &ВечерниеЧасы
	|			ТОГДА 3
	|		КОГДА ОписаниеВидовВремени.Ссылка = &НочныеЧасы
	|			ТОГДА 5
	|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &НочныеЧасы
	|			ТОГДА 6
	|		КОГДА ОписаниеВидовВремени.Ссылка = &Сверхурочно
	|			ТОГДА 7
	|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &Сверхурочно
	|			ТОГДА 8
	|		ИНАЧЕ 9
	|	КОНЕЦ КАК ПриоритетВидаВремени,
	|	ДанныеУчетаВремениИСостоянийСотрудников.Территория КАК Территория,
	|	ДанныеУчетаВремениИСостоянийСотрудников.УсловияТруда КАК УсловияТруда
	|ИЗ
	|	ВТДанныеУчетаВремениИСостоянийСотрудников КАК ДанныеУчетаВремениИСостоянийСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ОписаниеВидовВремени
	|		ПО ДанныеУчетаВремениИСостоянийСотрудников.ВидУчетаВремени = ОписаниеВидовВремени.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудниковНаКонецМесяца КАК КадровыеДанныеСотрудниковНаКонецМесяца
	|		ПО ДанныеУчетаВремениИСостоянийСотрудников.Сотрудник = КадровыеДанныеСотрудниковНаКонецМесяца.Сотрудник
	|			И (КОНЕЦПЕРИОДА(ДанныеУчетаВремениИСостоянийСотрудников.Дата, МЕСЯЦ) = КадровыеДанныеСотрудниковНаКонецМесяца.Период)
	|ГДЕ
	|	ДанныеУчетаВремениИСостоянийСотрудников.ВидУчетаВремени <> &РабочееВремя
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Дата,
	|	ПриоритетВидаВремени,
	|	ОписаниеВидовВремени.Наименование,
	|	ВидУчетаВремени,
	|	Территория,
	|	УсловияТруда";
	
	ПсевдонимыТаблиц = Новый Соответствие;
	ПсевдонимыТаблиц.Вставить("Справочник.ПодразделенияОрганизаций", "КадровыеДанныеСотрудниковНаКонецМесяца");
	ПсевдонимыТаблиц.Вставить("Справочник.Должности", "КадровыеДанныеСотрудниковНаКонецМесяца");
	ПсевдонимыТаблиц.Вставить("Справочник.Сотрудники", "КадровыеДанныеСотрудниковНаКонецМесяца");
	
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудников(Запрос, ПсевдонимыТаблиц);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ТаблицаДанныхДляЗаполнения(ДанныеТабеля, СписокСотрудников = Неопределено) Экспорт
	ТаблицаДанныхОВремени = Новый ТаблицаЗначений;
	ТаблицаДанныхОВремени.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для Сч = 1 По 31 Цикл
		ТаблицаДанныхОВремени.Колонки.Добавить("ВидВремени" + Сч, Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
		ТаблицаДанныхОВремени.Колонки.Добавить("Территория" + Сч, Новый ОписаниеТипов("СправочникСсылка.ТерриторииВыполненияРабот"));
		ТаблицаДанныхОВремени.Колонки.Добавить("УсловияТруда" + Сч, Новый ОписаниеТипов("СправочникСсылка.УсловияТруда"));
		ТаблицаДанныхОВремени.Колонки.Добавить("Часов" + Сч, Новый ОписаниеТипов("Число"));
		ТаблицаДанныхОВремени.Колонки.Добавить("ПереходящаяЧастьСмены" + Сч, Новый ОписаниеТипов("Булево"));
	КонецЦикла;	
	
	ТаблицаСмен = Новый ТаблицаЗначений;
	ТаблицаСмен.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для НомерДня = 1 По 31 Цикл
		ТаблицаСмен.Колонки.Добавить("Смена" + НомерДня, Новый ОписаниеТипов("СправочникСсылка.СменыРаботыСотрудников"));
		ТаблицаСмен.Колонки.Добавить("ОтражатьЧасыВДеньНачалаСмены" + НомерДня, Новый ОписаниеТипов("Булево"));
	КонецЦикла;
	
	ПараметрыПолученияФО = Новый Структура("Организация", ДанныеТабеля.Организация);
	ИспользуютсяТерритории = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории", ПараметрыПолученияФО);
	ИспользуютсяУсловияТруда = ПолучитьФункциональнуюОпцию("ИспользоватьОсобыеУсловияТруда", ПараметрыПолученияФО);

	ЗаполнятьТерриторииИУсловия =  ИспользуютсяТерритории Или ИспользуютсяУсловияТруда; 
	
	Выборка = ВыборкаДанныхОВремени(ДанныеТабеля, СписокСотрудников, ЗаполнятьТерриторииИУсловия);
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		СтрокиДанныхПоСотруднику = Новый Массив;
		СтрокаТаблицыСмен = Неопределено;
		Пока Выборка.СледующийПоЗначениюПоля("Дата") Цикл
			Постфикс = Строка(День(Выборка.Дата));
			КоличествоКомбинацийЗначенийИзмерений = 0;
			ТекущаяСмена = Неопределено;
			ОтражатьЧасыВДеньНачалаСмены = Ложь;
			Пока Выборка.Следующий() Цикл
				КоличествоКомбинацийЗначенийИзмерений = КоличествоКомбинацийЗначенийИзмерений + 1;
				
				Если ЗначениеЗаполнено(Выборка.Смена) Тогда
					ТекущаяСмена = Выборка.Смена;
				КонецЕсли;	
				Если Выборка.ПереходящаяЧастьСмены И Выборка.ПереходящаяЧастьТекущейСмены Тогда
					ОтражатьЧасыВДеньНачалаСмены = Истина;
				КонецЕсли;
				
				СтрокаДанныхОВремени = СтрокаТаблицыДанныхДляЗаполнения(
											ТаблицаДанныхОВремени, 
											Выборка.Сотрудник, 
											СтрокиДанныхПоСотруднику, 
											КоличествоКомбинацийЗначенийИзмерений);
				
								
				СтрокаДанныхОВремени["ВидВремени" + Постфикс] = Выборка.ВидУчетаВремени;
				СтрокаДанныхОВремени["Территория" + Постфикс] = Выборка.Территория;
				СтрокаДанныхОВремени["УсловияТруда" + Постфикс] = Выборка.УсловияТруда;
				СтрокаДанныхОВремени["Часов" + Постфикс] = Выборка.Часы;
				СтрокаДанныхОВремени["ПереходящаяЧастьСмены" + Постфикс] = Выборка.ПереходящаяЧастьСмены;
					
			КонецЦикла;	
			
			Если ЗначениеЗаполнено(ТекущаяСмена) Или ОтражатьЧасыВДеньНачалаСмены Тогда
				Если СтрокаТаблицыСмен = Неопределено Тогда
					СтрокаТаблицыСмен = ТаблицаСмен.Добавить();
					СтрокаТаблицыСмен.Сотрудник = Выборка.Сотрудник;
				КонецЕсли;	
				
				СтрокаТаблицыСмен["Смена" + Постфикс] = ТекущаяСмена;
				СтрокаТаблицыСмен["ОтражатьЧасыВДеньНачалаСмены" + Постфикс] = ОтражатьЧасыВДеньНачалаСмены;
			КонецЕсли;	
		КонецЦикла;		
	КонецЦикла;	
	
	ДанныеДляЗаполнения = Новый Структура("ДанныеОВремени, Смены", ТаблицаДанныхОВремени, ТаблицаСмен);
	
	Возврат ДанныеДляЗаполнения;
КонецФункции

Функция СтрокаТаблицыДанныхДляЗаполнения(ТаблицаДанных, Сотрудник, СтрокиДанныхПоСотруднику, КоличествоКомбинацийЗначенийИзмерений)
	Если КоличествоКомбинацийЗначенийИзмерений > СтрокиДанныхПоСотруднику.Количество() Тогда
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Сотрудник = Сотрудник;
		СтрокиДанныхПоСотруднику.Добавить(СтрокаДанных);
	Иначе
		СтрокаДанных = СтрокиДанныхПоСотруднику[КоличествоКомбинацийЗначенийИзмерений - 1];
	КонецЕсли;
	
	Возврат СтрокаДанных;
	
КонецФункции	

Функция ДоступныеДляВводаВидыВремени() Экспорт
	ДоступныеДляВводаВидыВремени = Новый Соответствие;
	
	ВидВремениРабочееВремя = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РабочееВремя", ВидВремениРабочееВремя);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыИспользованияРабочегоВремени.ОсновноеВремя
	|ИЗ
	|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	|ГДЕ
	|	ВидыИспользованияРабочегоВремени.Ссылка <> &РабочееВремя";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДоступныеДляВводаВидыВремени.Вставить(Выборка.ОсновноеВремя, Истина);
	КонецЦикла;
	
	Возврат ДоступныеДляВводаВидыВремени;
КонецФункции	

#КонецОбласти

#Область ПроцедурыПечатиДокумента

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Т-13
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "УнифицированнаяФормаТ13";
	КомандаПечати.Представление = НСтр("ru = 'Т-13'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	// 0504421
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "УнифицированнаяФорма0504421";
	КомандаПечати.Представление = НСтр("ru = 'Табель учета рабочего времени (0504421) до 2015 года'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФункциональныеОпции = "РаботаВБюджетномУчреждении";
	КомандаПечати.Порядок = 40;
	
	// 0504421 с 2015 года
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "УнифицированнаяФорма0504421с2015";
	КомандаПечати.Представление = НСтр("ru = 'Табель учета рабочего времени (0504421)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФункциональныеОпции = "РаботаВБюджетномУчреждении";
	КомандаПечати.Порядок = 30;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм,
		"УнифицированнаяФормаТ13") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"УнифицированнаяФормаТ13",
			"Табель учета рабочего времени (Т-13)",
			СформироватьПечатнуюФормуТ13(МассивОбъектов,
				ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм,
		"УнифицированнаяФорма0504421") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"УнифицированнаяФорма0504421",
			"Табель учета рабочего времени (0504421)",
			ПечатнаяФорма0504421(МассивОбъектов,
				ОбъектыПечати,
				"УнифицированнаяФорма0504421"));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм,
		"УнифицированнаяФорма0504421с2015") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"УнифицированнаяФорма0504421с2015",
			"Табель учета рабочего времени (0504421) с 2015",
			ПечатнаяФорма0504421(МассивОбъектов,
				ОбъектыПечати,
				"УнифицированнаяФорма0504421с2015"));
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗапросДляПечати(МассивОбъектов)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник,
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка,
	|	МИНИМУМ(ТабельУчетаРабочегоВремениДанныеОВремени.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТПорядокСотрудниковВДокументах
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
	|ГДЕ
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник,
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПорядокСотрудниковВДокументах.Сотрудник,
	|	ПорядокСотрудниковВДокументах.Ссылка.Дата КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиДокументов
	|ИЗ
	|	ВТПорядокСотрудниковВДокументах КАК ПорядокСотрудниковВДокументах";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиДокументов");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "Фамилия,Имя,Отчество,ФамилияИО,ФИОПолные,Должность,ТабельныйНомер");

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка КАК Ссылка,
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник КАК Сотрудник,
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов1 КАК Часов,
	|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени1 КАК ВидВремени,
	|	НАЧАЛОПЕРИОДА(ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.ДатаНачалаПериода, МЕСЯЦ) КАК Дата,
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТДанныеОВремени
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
	|ГДЕ
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка В(&МассивОбъектов)
	|	И ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени1 <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|";
	
	Для Сч = 2 По 31 Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка,
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник,
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов" + Сч + ",
		|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени" + Сч + ",
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.ДатаНачалаПериода, МЕСЯЦ), ДЕНЬ, " + Строка(Сч - 1) + "),
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Дата КАК ДатаДокумента
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
		|ГДЕ
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка В(&МассивОбъектов)
		|	И ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени" + Сч + " <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)";

	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабельУчетаРабочегоВремени.Дата,
		|	ТабельУчетаРабочегоВремени.ДатаНачалаПериода,
		|	ТабельУчетаРабочегоВремени.ДатаОкончанияПериода,
		|	ТабельУчетаРабочегоВремени.Номер,
		|	ТабельУчетаРабочегоВремени.Ссылка КАК Ссылка,
		|	ТабельУчетаРабочегоВремени.Организация,
		|	ТабельУчетаРабочегоВремени.Организация.НаименованиеПолное КАК ОрганизацияНаименование,
		|	ТабельУчетаРабочегоВремени.Подразделение,
		|	ТабельУчетаРабочегоВремени.Подразделение.Наименование,
		|	ТабельУчетаРабочегоВремени.Организация.КодПоОКПО,
		|	ТабельУчетаРабочегоВремени.Руководитель,
		|	ТабельУчетаРабочегоВремени.ДолжностьРуководителя,
		|	ТабельУчетаРабочегоВремени.РаботникКадровойСлужбы,
		|	ТабельУчетаРабочегоВремени.ДолжностьРаботникаКадровойСлужбы,
		|	ТабельУчетаРабочегоВремени.Исполнитель,
		|	ТабельУчетаРабочегоВремени.ДолжностьИсполнителя
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени
		|ГДЕ
		|	ТабельУчетаРабочегоВремени.Ссылка В(&МассивОбъектов)";
		
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, "Руководитель,РаботникКадровойСлужбы,Исполнитель", "ВТДанныеДокументов");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Дата,
		|	ДанныеДокументов.ДатаНачалаПериода,
		|	ДанныеДокументов.ДатаОкончанияПериода,
		|	ДанныеДокументов.Номер,
		|	ДанныеДокументов.Ссылка,
		|	ДанныеДокументов.Организация,
		|	ДанныеДокументов.ОрганизацияНаименование,
		|	ДанныеДокументов.Подразделение,
		|	ДанныеДокументов.ПодразделениеНаименование,
		|	ДанныеДокументов.ОрганизацияКодПоОКПО,
		|	ФИОРуководителя.РасшифровкаПодписи КАК ФИОРуководителя,
		|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ФИОРаботникаКадровойСлужбы.РасшифровкаПодписи КАК ФИОКадровика,
		|	ДанныеДокументов.ДолжностьРаботникаКадровойСлужбы КАК ДолжностьКадровика,
		|	ДанныеДокументов.Исполнитель КАК Исполнитель,
		|	ФИОИсполнителя.РасшифровкаПодписи КАК ФИООтветственного,
		|	ДанныеДокументов.ДолжностьИсполнителя КАК ДолжностьОтветственного
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРаботникаКадровойСлужбы
		|		ПО ДанныеДокументов.Ссылка = ФИОРаботникаКадровойСлужбы.Ссылка
		|			И ДанныеДокументов.РаботникКадровойСлужбы = ФИОРаботникаКадровойСлужбы.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОИсполнителя
		|		ПО ДанныеДокументов.Ссылка = ФИОИсполнителя.Ссылка
		|			И ДанныеДокументов.Исполнитель = ФИОИсполнителя.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДокументов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОВремени.Ссылка КАК Ссылка,
		|	ДанныеОВремени.Сотрудник КАК Сотрудник,
		|	ДанныеОВремени.Дата КАК Дата,
		|	ДанныеОВремени.ВидВремени,
		|	ДанныеОВремени.Часов,
		|	ОписаниеВидовВремени.Наименование КАК ВидВремениНаименование,
		|	ОписаниеВидовВремени.БуквенныйКодБюджетный,
		|	ОписаниеВидовВремени.БуквенныйКодБюджетный2009,
		|	ОписаниеВидовВремени.БуквенныйКод,
		|	ОписаниеВидовВремени.РабочееВремя,
		|	ОписаниеВидовВремени.ОсновноеВремя,
		|	ВЫБОР
		|		КОГДА ОписаниеВидовВремени.Ссылка = &Явка
		|			ТОГДА 1
		|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &Явка
		|			ТОГДА 2
		|		КОГДА ОписаниеВидовВремени.Ссылка = &ВечерниеЧасы
		|			ТОГДА 3
		|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &ВечерниеЧасы
		|			ТОГДА 3
		|		КОГДА ОписаниеВидовВремени.Ссылка = &НочныеЧасы
		|			ТОГДА 5
		|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &НочныеЧасы
		|			ТОГДА 6
		|		КОГДА ОписаниеВидовВремени.Ссылка = &Сверхурочно
		|			ТОГДА 7
		|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &Сверхурочно
		|			ТОГДА 8
		|		ИНАЧЕ 9
		|	КОНЕЦ КАК Приоритет,
		|	КадровыеДанныеСотрудников.Должность КАК ДолжностьСсылка,
		|	Должности.Наименование КАК Должность,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ФамилияИО, """") КАК ФамилияИО,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ФИОПолные, """") КАК ФИОПолные,
		|	КадровыеДанныеСотрудников.Фамилия,
		|	КадровыеДанныеСотрудников.Имя,
		|	КадровыеДанныеСотрудников.Отчество,
		|	КадровыеДанныеСотрудников.ТабельныйНомер,
		|	Сотрудники.Наименование КАК СотрудникНаименование,
		|	ОписаниеВидовВремени.Целосменное
		|ИЗ
		|	ВТДанныеОВремени КАК ДанныеОВремени
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ДанныеОВремени.Сотрудник = Сотрудники.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ОписаниеВидовВремени
		|		ПО ДанныеОВремени.ВидВремени = ОписаниеВидовВремени.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядокСотрудниковВДокументах КАК ПорядокСотрудниковВДокументах
		|		ПО ДанныеОВремени.Сотрудник = ПорядокСотрудниковВДокументах.Сотрудник
		|			И ДанныеОВремени.Сотрудник = ПорядокСотрудниковВДокументах.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
		|			ПО КадровыеДанныеСотрудников.Должность = Должности.Ссылка
		|		ПО ДанныеОВремени.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ДанныеОВремени.ДатаДокумента = КадровыеДанныеСотрудников.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ПорядокСотрудниковВДокументах.НомерСтроки,
		|	Сотрудник,
		|	Дата,
		|	Приоритет";	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Явка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	Запрос.УстановитьПараметр("ВечерниеЧасы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы"));
	Запрос.УстановитьПараметр("НочныеЧасы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы"));
	Запрос.УстановитьПараметр("Сверхурочно", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
                                
	Возврат Запрос.ВыполнитьПакет();	
КонецФункции

Функция СформироватьПечатнуюФормуТ13(МассивОбъектов, ОбъектыПечати)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ВидВремениВыходной = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УНИФИЦИРОВАННАЯ_ФОРМА_Т_13";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_УнифицированнаяФормаТ13");
	
	РезультатыЗапросаПоДокументам = СформироватьЗапросДляПечати(МассивОбъектов);
	
	КоличествоРезультатов = РезультатыЗапросаПоДокументам.Количество();
	
	ВыборкаПоДаннымДокументов = РезультатыЗапросаПоДокументам[КоличествоРезультатов - 2].Выбрать();
	
	ДанныеДокументов = Новый Соответствие;
	
	Пока ВыборкаПоДаннымДокументов.Следующий() Цикл
		
		ДанныеДокумента = Новый Структура("Дата, ДатаНачалаПериода, ДатаОкончанияПериода, Номер, ОрганизацияНаименование, Подразделение, ПодразделениеНаименование, ОрганизацияКодПоОКПО"
			+ ",ФИОРуководителя,ДолжностьРуководителя,ФИОКадровика,ДолжностьКадровика,ФИООтветственного,ДолжностьОтветственного");
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, ВыборкаПоДаннымДокументов);							
		ДанныеДокументов.Вставить(ВыборкаПоДаннымДокументов.Ссылка, ДанныеДокумента);							
		
	КонецЦикла;	
	
	ВыборкаДанныхОВремени = РезультатыЗапросаПоДокументам[КоличествоРезультатов - 1].Выбрать();
	
	ВидВремениКомандировка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Командировка");
	
	ТекущийЛист = Новый ТабличныйДокумент;
	ТекущийЛист.АвтоМасштаб = Истина;
	ТекущийЛист.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
	Пока ВыборкаДанныхОВремени.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТекущийЛист = Новый ТабличныйДокумент;
			ТекущийЛист.АвтоМасштаб = Истина;
			ТекущийЛист.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ДанныеДокумента = ДанныеДокументов[ВыборкаДанныхОВремени.Ссылка];
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.ДатаЗаполнения = ДанныеДокумента.Дата;
		ОбластьШапка.Параметры.НомерДокумента = ДанныеДокумента.Номер;
		ОбластьШапка.Параметры.ДатаНачала = ДанныеДокумента.ДатаНачалаПериода;
		ОбластьШапка.Параметры.ДатаОкончания = ДанныеДокумента.ДатаОкончанияПериода;
		ОбластьШапка.Параметры.ОрганизацияНаименование = ДанныеДокумента.ОрганизацияНаименование;
		
	    ОбластьШапка.Параметры.СообщениеОНеприменимостиПечатнойФормы = 
			ЗарплатаКадры.СообщениеОНеприменимостиПечатнойФормы(
				ДанныеДокумента.Дата,
				'20150619',
				"Приказа Минфина РФ",
				'20150330',
				"52н");
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ДанныеДокумента.Подразделение) Тогда
			ОбластьШапка.Параметры.ПодразделениеНаименование = ДанныеДокумента.Подразделение.ПолноеНаименование();
		Иначе
			ОбластьШапка.Параметры.ПодразделениеНаименование = ДанныеДокумента.ПодразделениеНаименование;
		КонецЕсли;
		
		ОбластьШапка.Параметры.ОрганизацияКодПоОКПО = ДанныеДокумента.ОрганизацияКодПоОКПО;
		
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТекущийЛист.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		ТекущийЛист.Вывести(ОбластьШапкаТаблицы);

		НомерСотрудника = 0;
		Пока ВыборкаДанныхОВремени.СледующийПоЗначениюПоля("Сотрудник") Цикл
			ОтработаноДнейЗаПервуюПоловинуМесяца = 0;
			ОтработаноЧасовЗаВторуюПоловинуМесяца = 0;
			ОтработаноДнейЗаВторуюПоловинуМесяца = 0;
			ОтработаноЧасовЗаПервуюПоловинуМесяца = 0;
			ОтработаноДнейЗаМесяц = 0;
			ОтработаноЧасовЗаМесяц = 0;
			
			НомерСотрудника = НомерСотрудника + 1;
			
			ОбластьДанныеОВремени = Макет.ПолучитьОбласть("Строка");
			
			Если НастройкиПечатныхФорм.ВыводитьПолныеФИОВСписочныхПечатныхФормах Тогда
				ФИО = ВыборкаДанныхОВремени.ФИОПолные;
			Иначе
				ФИО = ВыборкаДанныхОВремени.ФамилияИО;
			КонецЕсли;
			
			ОбластьДанныеОВремени.Параметры.Сотрудник = ФИО + "
													|(" + ВыборкаДанныхОВремени.Должность + ")";	
													
			ОбластьДанныеОВремени.Параметры.ТабельныйНомер = ВыборкаДанныхОВремени.ТабельныйНомер;	
			
			ОбластьДанныеОВремени.Параметры.НомерПП = НомерСотрудника;	
			
			ОтклоненияПоСотруднику = Новый ТаблицаЗначений;
			ОтклоненияПоСотруднику.Колонки.Добавить("ВидВремени");
			ОтклоненияПоСотруднику.Колонки.Добавить("БуквенныйКод");
			ОтклоненияПоСотруднику.Колонки.Добавить("Часов");
			ОтклоненияПоСотруднику.Колонки.Добавить("Дней");
			
			Пока ВыборкаДанныхОВремени.СледующийПоЗначениюПоля("Дата") Цикл 
				ПредставлениеВидовВремени = "";
				ЧасыПоВидамВремениСтрока = "";
				
				КоличествоЗаписейНаДату = 0;
				ЭтоКомандировка = Ложь;
	
				РабочийДень = Ложь;
				Пока ВыборкаДанныхОВремени.Следующий() Цикл
					Если Не ВыборкаДанныхОВремени.РабочееВремя 
						И ВыборкаДанныхОВремени.ВидВремени <> ВидВремениВыходной
						И ВыборкаДанныхОВремени.ОсновноеВремя <> Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка() Тогда
						
						ОтклоненияПоВидуВремени = ОтклоненияПоСотруднику.Добавить();
						
						ОтклоненияПоВидуВремени.ВидВремени = ВыборкаДанныхОВремени.ВидВремени;
						ОтклоненияПоВидуВремени.БуквенныйКод = ВыборкаДанныхОВремени.БуквенныйКод;
						ОтклоненияПоВидуВремени.Дней = 1;
						ОтклоненияПоВидуВремени.Часов = ВыборкаДанныхОВремени.Часов;
						
					КонецЕсли;
					
					ПредставлениеВидовВремени = ПредставлениеВидовВремени + "/"+  ВыборкаДанныхОВремени.БуквенныйКод;
					
					Если Не ВыборкаДанныхОВремени.Целосменное Тогда
						
						ЧасыПоВидамВремениСтрока = ЧасыПоВидамВремениСтрока +  "/" + Формат(ВыборкаДанныхОВремени.Часов, "ЧГ=");
					КонецЕсли;
					
					Если ВыборкаДанныхОВремени.РабочееВремя 
						И ВыборкаДанныхОВремени.ОсновноеВремя <> Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка() Тогда
						
						РабочийДень = Истина;
						ОтработаноЧасовЗаМесяц = ОтработаноЧасовЗаМесяц + ВыборкаДанныхОВремени.Часов;
						
						Если День(ВыборкаДанныхОВремени.Дата) > 15 Тогда
							ОтработаноЧасовЗаВторуюПоловинуМесяца = ОтработаноЧасовЗаВторуюПоловинуМесяца + ВыборкаДанныхОВремени.Часов;
						Иначе
							ОтработаноЧасовЗаПервуюПоловинуМесяца = ОтработаноЧасовЗаПервуюПоловинуМесяца + ВыборкаДанныхОВремени.Часов;
						КонецЕсли;
					КонецЕсли;
					
					КоличествоЗаписейНаДату = КоличествоЗаписейНаДату + 1;
					Если ВыборкаДанныхОВремени.ОсновноеВремя = ВидВремениКомандировка Тогда
						ЭтоКомандировка = Истина;
					КонецЕсли;	
					
				КонецЦикла;
				
				Если КоличествоЗаписейНаДату = 1
					И ЭтоКомандировка Тогда  
					
					ЧасыПоВидамВремениСтрока = "";
				КонецЕсли;
				
				Если РабочийДень Тогда
					ОтработаноДнейЗаМесяц = ОтработаноДнейЗаМесяц + 1;
					Если День(ВыборкаДанныхОВремени.Дата) > 15 Тогда
						ОтработаноДнейЗаВторуюПоловинуМесяца = ОтработаноДнейЗаВторуюПоловинуМесяца + 1;
					Иначе
						ОтработаноДнейЗаПервуюПоловинуМесяца = ОтработаноДнейЗаПервуюПоловинуМесяца + 1;
					КонецЕсли;
				КонецЕсли;
				
				НомерДня = День(ВыборкаДанныхОВремени.Дата);
				
				ОбластьДанныеОВремени.Параметры["Символ" + НомерДня] = Сред(ПредставлениеВидовВремени, 2);
				ОбластьДанныеОВремени.Параметры["ДополнительноеЗначение"+ НомерДня] = Сред(ЧасыПоВидамВремениСтрока, 2);
				
			КонецЦикла;
			
			ОбластьДанныеОВремени.Параметры.ДниПерваяПоловина = ОтработаноДнейЗаПервуюПоловинуМесяца;
			ОбластьДанныеОВремени.Параметры.ЧасыПерваяПоловина = ОтработаноЧасовЗаПервуюПоловинуМесяца;
			ОбластьДанныеОВремени.Параметры.ДниВтораяПоловина = ОтработаноДнейЗаВторуюПоловинуМесяца;
			ОбластьДанныеОВремени.Параметры.ЧасыВтораяПоловина = ОтработаноЧасовЗаВторуюПоловинуМесяца;
			ОбластьДанныеОВремени.Параметры.ДниЗаМесяц = ОтработаноДнейЗаМесяц;
			ОбластьДанныеОВремени.Параметры.ЧасыЗаМесяц = ОтработаноЧасовЗаМесяц;
			
			ОтклоненияПоСотруднику.Свернуть("ВидВремени, БуквенныйКод", "Дней, Часов");
			
			СчОтклонений = 1;
			Для Каждого ОтклонениеПоВидуВремени Из ОтклоненияПоСотруднику Цикл
				Если СчОтклонений > 8 Тогда
					Прервать;
				КонецЕсли;
				
				ОбластьДанныеОВремени.Параметры["НеявкаКод" + СчОтклонений] = ОтклонениеПоВидуВремени.БуквенныйКод;
				ОбластьДанныеОВремени.Параметры["НеявкаДниЧасы" + СчОтклонений] = Формат(ОтклонениеПоВидуВремени.Дней, "ЧГ=") + 
						?(ОтклонениеПоВидуВремени.Часов > 0, "(" + Формат(ОтклонениеПоВидуВремени.Часов, "ЧГ=") + ")", "");
				
				СчОтклонений = СчОтклонений + 1;
			КонецЦикла;
			
			МассивОбластей = Новый Массив;
			МассивОбластей.Добавить(ОбластьДанныеОВремени);
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекущийЛист, МассивОбластей) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ТекущийЛист = Новый ТабличныйДокумент;
				ТекущийЛист.АвтоМасштаб = Истина;
				ТекущийЛист.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
				ТекущийЛист.Вывести(ОбластьШапкаТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьДанныеОВремени);
			ТекущийЛист.Вывести(ОбластьДанныеОВремени);
		КонецЦикла;
		
		ОбластьПодвал.Параметры.Заполнить(ДанныеДокумента);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		ТекущийЛист.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДанныхОВремени.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФорма0504421(МассивОбъектов, ОбъектыПечати, ИдентификаторОтчета = "УнифицированнаяФорма0504421с2015")
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ВидВремениВыходной = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни");
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтчетыПечатныеФормыБюджетныхУчреждений");
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Форма0504421";
		ТабличныйДокумент.ТолькоПросмотр = Истина;
		РезультатыЗапросаПоДокументам = СформироватьЗапросДляПечати(МассивОбъектов);		
		КоличествоРезультатов = РезультатыЗапросаПоДокументам.Количество();
		
		ВыборкаПоДаннымДокументов = РезультатыЗапросаПоДокументам[КоличествоРезультатов - 2].Выбрать();
		
		ДанныеДокументов = Новый Соответствие;
		
		Пока ВыборкаПоДаннымДокументов.Следующий() Цикл
			
			ДанныеДокумента = Новый Структура("
				|Дата,
				|ДатаНачалаПериода,
				|ДатаОкончанияПериода,
				|Номер,
				|Организация,
				|ОрганизацияНаименование,
				|Подразделение,
				|ПодразделениеНаименование,
				|ОрганизацияКодПоОКПО,
				|ФИОРуководителя,
				|ДолжностьРуководителя,
				|ФИОКадровика,
				|ДолжностьКадровика,
				|Исполнитель,
				|ФИООтветственного,
				|ДолжностьОтветственного");
			ЗаполнитьЗначенияСвойств(ДанныеДокумента, ВыборкаПоДаннымДокументов);
			ДанныеДокументов.Вставить(ВыборкаПоДаннымДокументов.Ссылка, ДанныеДокумента);
				
		КонецЦикла;	
		
		Выборка = РезультатыЗапросаПоДокументам[КоличествоРезультатов - 1].Выбрать();
		
		ВидВремениКомандировка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Командировка");
		
		ТекущийЛист = Новый ТабличныйДокумент;
		ТекущийЛист.АвтоМасштаб = Истина;
		ТекущийЛист.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
		Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
			
			ДокументПечати = Выборка.Ссылка;
			ДокументРезультат = Новый ТабличныйДокумент;
			ДанныеДокумента = ДанныеДокументов[ДокументПечати];
			
			Если ИдентификаторОтчета = "УнифицированнаяФорма0504421с2015" Тогда
				КлючВарианта = "Форма0504421с2015";
			Иначе
				КлючВарианта = "Форма0504421";
			КонецЕсли;
			
			ДополнительныеДанныеДляПечати = ДополнительныеДанныеДляПечати();
			ДополнительныеДанныеДляПечати.НомерДокумента = ДанныеДокумента.Номер;
			ДополнительныеДанныеДляПечати.НомерКорректировки = НомерКорректировкиТабеля(Выборка.Ссылка);
			ДополнительныеДанныеДляПечати.ОтветственныйИсполнитель = ДанныеДокумента.Исполнитель;
			ДополнительныеДанныеДляПечати.ДолжностьОтветственногоИсполнителя = ДанныеДокумента.ДолжностьОтветственного;
				
			ДанныеОВремени = ПустоеДеревоЗначенийДанныхОВремени();
			СтрокаПоОрганизации = ДанныеОВремени.Строки.Добавить();
			СтрокаПоОрганизации.Организация = ДанныеДокумента.Организация;
			СтрокаПоОрганизации.ОрганизацияКодПоОКПО = ДанныеДокумента.ОрганизацияКодПоОКПО;
			СтрокаПоОрганизации.ОрганизацияНаименование = ДанныеДокумента.ОрганизацияНаименование;
			СтрокаПоОрганизации.ОрганизацияНаименованиеПолное = ДанныеДокумента.ОрганизацияНаименование;
			СтрокаПоОрганизации.Подразделение = ДанныеДокумента.Подразделение;
			СтрокаПоОрганизации.ПодразделениеНаименование = ДанныеДокумента.ПодразделениеНаименование;
			СтрокаПоОрганизации.Месяц = НачалоМесяца(ДанныеДокумента.ДатаНачалаПериода);
			СтрокаПоОрганизации.ПараметрыДанныхОтветственный = ДанныеДокумента.Исполнитель;
			
			НомерСотрудника = 0;
			Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
				НомерСотрудника = НомерСотрудника + 1;
				СтрокаПоСотруднику = СтрокаПоОрганизации.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоСотруднику, СтрокаПоОрганизации);
				СтрокаПоСотруднику.Сотрудник = Выборка.Сотрудник;
				СтрокаПоСотруднику.СотрудникКод = Выборка.ТабельныйНомер;
				СтрокаПоСотруднику.СотрудникНаименование = Выборка.СотрудникНаименование;
				СтрокаПоСотруднику.Имя = Выборка.Имя;
				СтрокаПоСотруднику.Фамилия = Выборка.Фамилия;
				СтрокаПоСотруднику.Отчество = Выборка.Отчество;
				СтрокаПоСотруднику.ДолжностьКонецМесяца = Выборка.ДолжностьСсылка;
				СтрокаПоСотруднику.ДолжностьКонецМесяцаНаименование = Выборка.Должность;
				СтрокаПоСотруднику.СистемныеПоляНомерПоПорядкуВГруппировке = НомерСотрудника;
				
				Пока Выборка.СледующийПоЗначениюПоля("Дата") Цикл
					СтрокаПоДате = СтрокаПоСотруднику.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПоДате, СтрокаПоСотруднику);
					Пока Выборка.Следующий() Цикл
						СтрокаПоДню = СтрокаПоДате.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПоДню, СтрокаПоДате);
						СтрокаПоДню.ВидУчетаВремени = Выборка.ВидВремени;
						СтрокаПоДню.ВидУчетаВремениБуквенныйКодБюджетный = Выборка.БуквенныйКодБюджетный;
						СтрокаПоДню.ВидУчетаВремениБуквенныйКодБюджетный2009 = Выборка.БуквенныйКодБюджетный2009;
						СтрокаПоДню.ВидУчетаВремениНаименование = Выборка.ВидВремениНаименование;
						СтрокаПоДню.ВидУчетаВремениОсновноеВремя = Выборка.ОсновноеВремя;
						СтрокаПоДню.ВидУчетаВремениРабочееВремя = Выборка.РабочееВремя;
						СтрокаПоДню.ВидУчетаВремениЦелосменное = Выборка.Целосменное;
						СтрокаПоДню.Дата = Выборка.Дата;
						СтрокаПоДню.ПриоритетВидаВремени = Выборка.Приоритет;
						СтрокаПоДню.Часы = Выборка.Часов;
						Если Не Выборка.РабочееВремя 
							И Выборка.ВидВремени <> ВидВремениВыходной
							И Выборка.ОсновноеВремя <> Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка() Тогда 
							
							СтрокаПоДню.Отклонение = Истина;
						Иначе
							СтрокаПоДню.Отклонение = Ложь;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			Модуль.ВывестиМакетФормы0504421(ДокументРезультат,
				ДанныеОВремени,
				ДанныеДокумента.ДатаНачалаПериода,
				ДанныеДокумента.ДатаОкончанияПериода,
				ДанныеДокумента.Дата,
				ЗначениеЗаполнено(ДанныеДокумента.Подразделение),
				Истина,
				КлючВарианта,
				ДополнительныеДанныеДляПечати);
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			ТабличныйДокумент.Вывести(ДокументРезультат);
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДокументПечати);
			
		КонецЦикла;
	КонецЕсли;
	Возврат ТабличныйДокумент;
	
КонецФункции

// Возвращает порядковый номер "первичного/корректирующего" табеля в соответствии с требованиями
// заполнения поля "Вид табеля" печатной формы 0504421.
//
// Параметры:
//  Табель  - ДокументСсылка.ТабельУчетаРабочегоВремени - Где требуется определить 
//				"номер корректировки" табеля.
//
// Возвращаемое значение:
//   Число   - (первичный - 0; корректирующий - 1, 2, и т.д.).
//
Функция НомерКорректировкиТабеля(Табель)

	ВозвращаемоеЗначение = -1;
	
	СписокИсправленныхДокументов = Новый Массив; 
	
	Если ЗначениеЗаполнено(Табель.ИсправленныйДокумент) Тогда
		
		СписокИсправленныхДокументов.Добавить(Табель.ИсправленныйДокумент);
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ИмяДокумента = СтрРазделить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Табель), ".")[1];
		ИсправлениеДокументовЗарплатаКадры.СоздатьВТИсправленныеДокументы(МенеджерВременныхТаблиц,
			СписокИсправленныхДокументов, ИмяДокумента, "ВТИсправленныеДокументы");
		
		Запрос = Новый Запрос;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ПустаяСсылка",
			ОбщегоНазначения.МенеджерОбъектаПоСсылке(Табель).ПустаяСсылка());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсправленныеДокументы.ИсправленныйДокумент
		|ИЗ
		|	ВТИсправленныеДокументы КАК ИсправленныеДокументы
		|ГДЕ
		|	ИсправленныеДокументы.ИсправленныйДокумент <> &ПустаяСсылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			СписокИсправленныхДокументов.Добавить(Выборка.ИсправленныйДокумент);
		КонецЦикла;
		
		ВозвращаемоеЗначение = СписокИсправленныхДокументов.Количество();
		
	Иначе 	
		
		ВозвращаемоеЗначение = 0;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПустоеДеревоЗначенийДанныхОВремени()
	
	ТипВидРабочегоВремени = Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени");

	ТипДата = Новый ОписаниеТипов("Дата");
	ТипЧисло = Новый ОписаниеТипов("Число");
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипСтрока3 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3));
	ТипСтрока10 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
	ТипСтрока50 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ТипСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ТипСтрока150 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150));
	ДанныеОВремени = Новый ДеревоЗначений;
	ДанныеОВремени.Колонки.Добавить("ВидУчетаВремени", ТипВидРабочегоВремени);
	ДанныеОВремени.Колонки.Добавить("ВидУчетаВремениБуквенныйКодБюджетный", ТипСтрока3);
	ДанныеОВремени.Колонки.Добавить("ВидУчетаВремениБуквенныйКодБюджетный2009", ТипСтрока3);
	ДанныеОВремени.Колонки.Добавить("ВидУчетаВремениНаименование", ТипСтрока50);
	ДанныеОВремени.Колонки.Добавить("ВидУчетаВремениОсновноеВремя", ТипВидРабочегоВремени);
	ДанныеОВремени.Колонки.Добавить("ВидУчетаВремениРабочееВремя", ТипБулево);
	ДанныеОВремени.Колонки.Добавить("ВидУчетаВремениЦелосменное", ТипБулево);
	ДанныеОВремени.Колонки.Добавить("Дата", ТипДата);
	ДанныеОВремени.Колонки.Добавить("ДолжностьКонецМесяца", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ДанныеОВремени.Колонки.Добавить("ДолжностьКонецМесяцаНаименование", ТипСтрока150);
	ДанныеОВремени.Колонки.Добавить("Имя", ТипСтрока50);
	ДанныеОВремени.Колонки.Добавить("Месяц", ТипДата);
	ДанныеОВремени.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеОВремени.Колонки.Добавить("ОрганизацияКодПоОКПО", ТипСтрока10);
	ДанныеОВремени.Колонки.Добавить("ОрганизацияНаименование", ТипСтрока150);
	ДанныеОВремени.Колонки.Добавить("ОрганизацияНаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ДанныеОВремени.Колонки.Добавить("Отклонение", ТипБулево);
	ДанныеОВремени.Колонки.Добавить("Отчество", ТипСтрока50);
	ДанныеОВремени.Колонки.Добавить("ПараметрыДанныхОтветственный", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ДанныеОВремени.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ДанныеОВремени.Колонки.Добавить("ПодразделениеНаименование", ТипСтрока150);
	ДанныеОВремени.Колонки.Добавить("ПриоритетВидаВремени", ТипЧисло);
	ДанныеОВремени.Колонки.Добавить("РабочиеДни", ТипЧисло);
	ДанныеОВремени.Колонки.Добавить("РабочиеЧасы", ТипЧисло);
	ДанныеОВремени.Колонки.Добавить("СистемныеПоляНомерПоПорядкуВГруппировке", ТипЧисло);
	ДанныеОВремени.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеОВремени.Колонки.Добавить("СотрудникКод", ТипСтрока10);
	ДанныеОВремени.Колонки.Добавить("СотрудникНаименование", ТипСтрока100);
	ДанныеОВремени.Колонки.Добавить("Фамилия", ТипСтрока50);
	ДанныеОВремени.Колонки.Добавить("Часы", ТипЧисло);
	
	Возврат ДанныеОВремени;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
