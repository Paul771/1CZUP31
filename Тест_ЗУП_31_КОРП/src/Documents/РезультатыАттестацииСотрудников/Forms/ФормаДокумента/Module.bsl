
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		// Заполнение нового документа.
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, ВидАттестации",
		"Объект.Организация",
		"Объект.Ответственный",
		"Объект.ВидАттестации");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);

		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;	
	
	ДобавитьУсловноеОформлениеЗначенияПоказателяТарифнойСтавки();
	Элементы.РезультатыАттестацииЗначениеПоказателя.Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитТарифВКадровыхДокументах");		
	
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");

	Если ИспользуетсяРасчетЗарплаты И Не ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений И Объект.ИзменитьОплату Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтаФорма, "РезультатыАттестацииСотрудник");
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПредставлениеДокументаПодтверждающегоКвалификацию();
	
	ПрочитатьВремяРегистрации();
	УстановитьПредставленияНачисленийСотрудников();
	ОбновитьОтображениеПоказателяТарифнойСтавки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_РезультатыАттестацииСотрудников", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыНачисления" И Источник = ЭтаФорма Тогда
		
		ЗаполнитьДанныеСотрудникаИзВРеменногоХранилища(Параметр.АдресВХранилище);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВведеныРеквизитыДокументаПодтверждающегоКвалификацию" И Источник = ЭтаФорма Тогда
		
		Модифицированность = Истина;
		ЗаполнитьРеквизитыДокументаПодтверждающегоКвалификациюСотрудника(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)       
    ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);   
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриказОбАттестацииПриИзменении(Элемент)
    ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ПриказОбАттестацииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидАттестацииПриИзменении(Элемент)
    ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ВидАттестацииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОплатуТрудаПриИзменении(Элемент)
	ИзменитьОплатуТрудаПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыРезультатыАттестации

&НаКлиенте
Процедура РезультатыАттестацииСотрудникПриИзменении(Элемент)
	РезультатыАттестацииСотрудникПриИзмененииНаСервере(Элементы.РезультатыАттестации.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РезультатыАттестацииПриИзменении(Элемент)
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РезультатыАттестацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура РезультатыАттестацииРешениеКомиссииПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйРезерв") Тогда
		МодульКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("КадровыйРезервКлиент");
		МодульКлиент.ПроверитьПолякадровогоРезерва(ЭтаФорма);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатыАттестацииПередУдалением(Элемент, Отказ)
	УдаляемыйСотрудник = Элементы.РезультатыАттестации.ТекущиеДанные.Сотрудник;
КонецПроцедуры

&НаКлиенте
Процедура РезультатыАттестацииПослеУдаления(Элемент)
	ОчиститьПлановыеНачисленияСотрудников(Объект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УдаляемыйСотрудник));
	УдаляемыйСотрудник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура РезультатыАттестацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанныеСтроки.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "РезультатыАттестацииПредставлениеНачислений" Тогда
		ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(ТекущиеДанныеСтроки.Сотрудник, ТекущиеДанныеСтроки.ВремяРегистрации);	
	ИначеЕсли Поле.Имя = "РезультатыАттестацииПредставлениеДокументаПодтверждающегоКвалификацию" Тогда
		ОткрытьФормуРедактированияДокументаПодтверждающегоКвалификацию(ТекущиеДанныеСтроки);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатыАттестацииЗначениеПоказателяПриИзменении(Элемент)
	РезультатыАттестацииЗначениеПоказателяПриИзмененииНаСервере(Элементы.РезультатыАттестации.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РезультатыАттестацииДатаАттестацииПриИзменении(Элемент)
	РезультатыАттестацииДатаАттестацииПриИзмененииНаСервере(Элементы.РезультатыАттестации.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РезультатыАттестацииКатегорияПриИзменении(Элемент)
	РезультатыАттестацииКатегорияПриИзмененииНаСервере(Элементы.РезультатыАттестации.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РезультатыАттестацииРезультатАттестацииПриИзменении(Элемент)
	РезультатыАттестацииРезультатАттестацииПриИзмененииНаСервере(Элементы.РезультатыАттестации.ТекущаяСтрока);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСоставАттестационнойКомиссии

&НаКлиенте
Процедура СоставАттестационнойКомиссииПриИзменении(Элемент)
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьКомиссию(Команда)
	ЗаполнитьКомиссиюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	ПараметрыОткрытия = Неопределено;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
		Модуль.УточнитьПараметрыОткрытияФормыВыбораСотрудников(ПараметрыОткрытия);
	КонецЕсли; 
		
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.РезультатыАттестации,
		Объект.Организация,
		,
		,
		,
		,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудников(Команда)
	ЗаполнитьСотрудниковНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ПрочитатьВремяРегистрации();
	
	УстановитьДоступностьРегистрацииНачислений();
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();	
	ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыВидовРасчета, "Начисления", 1, Ложь);
	
	ЗарплатаКадрыРасширенный.МногофункциональныеДокументыДобавитьЭлементыФормы(ЭтаФорма, НСтр("ru='Документом изменены ежемесячные начисления'"), "РасчетчикГруппа", "ИзменитьОплату");

	НастроитьФорму();
	
	// Видимость элементов кадрового резерва.
	ИспользуетсяКадровыйРезерв = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РезультатыАттестацииПозицияРезерва",
		"Видимость",
		ИспользуетсяКадровыйРезерв);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РезультатыАттестацииВидРезерва",
		"Видимость",
		ИспользуетсяКадровыйРезерв);
		
	УстановитьПредставлениеДокументаПодтверждающегоКвалификацию();
	
	УстановитьПредставленияНачисленийСотрудников();	
	ОбновитьОтображениеПоказателяТарифнойСтавки();
	УстановитьПараметрыВыбораКатегории();
	
КонецПроцедуры

#Область СерверныеОбработчикиСобытийФормы

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
КонецПроцедуры

&НаСервере
Процедура ПриказОбАттестацииПриИзмененииНаСервере()
	ПрочитатьВидАттестации();
	ЗаполнитьКомиссиюПоПриказуОбАттестации();
	НастроитьФорму();
КонецПроцедуры

&НаСервере
Процедура ВидАттестацииПриИзмененииНаСервере()
	УстановитьВидимостьРасчетныхПолей();
	НастроитьФормуПоВидуАттестации();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомиссиюНаСервере()
	ЗаполнитьКомиссиюПоПриказуОбАттестации()
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСотрудниковНаСервере()
	
	Объект.РезультатыАттестации.Очистить();
	Объект.Начисления.Очистить();
	Объект.Показатели.Очистить();
	Объект.ФизическиеЛица.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ПриказОбАттестации) Тогда
		
		СотрудникиПриказаНаАттестацию = СотрудникиПриказаНаАттестацию();
		СотрудникиПриказаНаАттестацию.Колонки.Добавить("РезультатАттестации");
		СотрудникиПриказаНаАттестацию.Колонки.Добавить("ВремяРегистрации");
		
		СотрудникиПриказаНаАттестацию.ЗаполнитьЗначения(АттестацииСотрудниковФормы.ПоложительныйРезультатАттестации(Объект.ВидАттестации), "РезультатАттестации");
		
		Для Каждого Строка Из СотрудникиПриказаНаАттестацию Цикл
			ПрочитатьВремяРегистрацииСтроки(Объект.Ссылка, Строка);
		КонецЦикла;
		
		Объект.РезультатыАттестации.Загрузить(СотрудникиПриказаНаАттестацию);
		
	КонецЕсли;
	
	УстановитьПредставлениеДокументаПодтверждающегоКвалификацию();
	
	ОбновитьОплатуТрудаСотрудников(Объект.РезультатыАттестации);
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();

КонецПроцедуры

&НаСервере
Процедура ИзменитьОплатуТрудаПриИзмененииНаСервере()
	УстановитьВидимостьРеквизитовОплаты();
	ОбновитьОплатуТрудаСотрудников(Объект.РезультатыАттестации);
	УстановитьПараметрыВыбораКатегории();
КонецПроцедуры

&НаСервере
Процедура РезультатыАттестацииСотрудникПриИзмененииНаСервере(ИдентификаторСтроки)
	
	Строка = Объект.РезультатыАттестации.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьВремяРегистрацииСтроки(Объект.Ссылка, Строка);
	
	КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строка.Сотрудник), "Должность");
	
	Если КадровыеДанныеСотрудника.Количество() > 0 Тогда
		Строка.Должность = КадровыеДанныеСотрудника[0].Должность;
	КонецЕсли;
	
	ОбновитьОплатуТрудаСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строка));
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();

КонецПроцедуры

&НаСервере
Процедура РезультатыАттестацииДатаАттестацииПриИзмененииНаСервере(ИдентификаторСтроки)
	
	Строка = Объект.РезультатыАттестации.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьВремяРегистрацииСтроки(Объект.Ссылка, Строка);
	
	ОбновитьОплатуТрудаСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строка));
	
КонецПроцедуры

&НаСервере
Процедура РезультатыАттестацииКатегорияПриИзмененииНаСервере(ИдентификаторСтроки)
	
	Строка = Объект.РезультатыАттестации.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПоказательТарифнойСтавкиСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строка));
	
КонецПроцедуры

&НаСервере
Процедура РезультатыАттестацииРезультатАттестацииПриИзмененииНаСервере(ИдентификаторСтроки)
	
	Строка = Объект.РезультатыАттестации.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьОплатуТрудаСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строка));
	
КонецПроцедуры

&НаСервере
Процедура РезультатыАттестацииЗначениеПоказателяПриИзмененииНаСервере(ИдентификаторСтроки)
	
	Строка = Объект.РезультатыАттестации.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Сотрудник,Показатель", Строка.Сотрудник, Строка.Показатель);
	
	ПоказателиСотрудника = Объект.Показатели.НайтиСтроки(Отбор);
	Для каждого СтрокаПоказателя Из ПоказателиСотрудника Цикл
		СтрокаПоказателя.Значение = Строка.ЗначениеПоказателя;
	КонецЦикла;
	
	Строки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строка);
	
	РассчитатьФОТ(Строки);
	УстановитьПредставленияНачисленийСотрудников(Строки);
	
КонецПроцедуры

#КонецОбласти

#Область ОтрисовкаФормы

&НаСервере
Процедура НастроитьФорму()	
	УстановитьВидПоляВидаАттестации();
	УстановитьПоложениеЗаголовкаВидаАттестации();
	УстановитьВидимостьРасчетныхПолей();
	НастроитьФормуПоВидуАттестации();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидПоляВидаАттестации()
	ПриказОбАттестацииПуст = НЕ ЗначениеЗаполнено(Объект.ПриказОбАттестации);
	Если ПриказОбАттестацииПуст Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "ВидАттестации", "Вид", ВидПоляФормы.ПолеВвода);
	Иначе	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "ВидАттестации", "Вид", ВидПоляФормы.ПолеНадписи);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПоложениеЗаголовкаВидаАттестации()
	ПриказОбАттестацииПуст = НЕ ЗначениеЗаполнено(Объект.ПриказОбАттестации);	
	Если ПриказОбАттестацииПуст Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "ВидАттестации", "ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Авто);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "ВидАттестации", "ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовОплаты()  	
	
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РезультатыАттестацииПредставлениеНачислений",
		"Видимость",
		ИспользуетсяРасчетЗарплаты И Объект.ИзменитьОплату);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РезультатыАттестацииЗначениеПоказателя",
		"Видимость",
		ИспользуетсяРасчетЗарплаты И Объект.ИзменитьОплату);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораКатегории()
	
	СписокПараметровВыбора = Новый Массив;
	Если Не Объект.ИзменитьОплату Тогда 
		ПараметрВыбора = Новый ПараметрВыбора("ПоказатьВсеКатегории", Истина);
	    СписокПараметровВыбора.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	Элементы.РезультатыАттестацииКатегория.ПараметрыВыбора = Новый ФиксированныйМассив(СписокПараметровВыбора);
	
	СписокСвязейПараметровВыбора = Новый Массив;
	Если Объект.ИзменитьОплату Тогда 
		СвязьПараметраВыбора = Новый СвязьПараметраВыбора("Сотрудник", "Элементы.РезультатыАттестации.ТекущиеДанные.Сотрудник", РежимИзмененияСвязанногоЗначения.Очищать);
	    СписокСвязейПараметровВыбора.Добавить(СвязьПараметраВыбора);
		СвязьПараметраВыбора = Новый СвязьПараметраВыбора("ДатаСобытия", "Элементы.РезультатыАттестации.ТекущиеДанные.ВремяРегистрации", РежимИзмененияСвязанногоЗначения.НеИзменять);
	    СписокСвязейПараметровВыбора.Добавить(СвязьПараметраВыбора);
	КонецЕсли;
	
	Элементы.РезультатыАттестацииКатегория.СвязиПараметровВыбора = Новый ФиксированныйМассив(СписокСвязейПараметровВыбора);
	
КонецПроцедуры

#Область НастроитьФормуПоВидуАттестации

&НаСервере
Процедура НастроитьФормуПоВидуАттестации()
	
	ОбновитьДоступныеРезультатыАттестации();
	НастроитьФормуПоТипуАттестации();
	
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДоступныеРезультатыАттестации()
	
	ДоступныеРезультатыАттестации = АттестацииСотрудниковФормы.ДоступныеРезультатыАттестации(Объект.ВидАттестации);
	СписокВыбораРезультата = Элементы.РезультатыАттестацииРезультатАттестации.СписокВыбора; 
	СписокВыбораРезультата.Очистить();
	
	Для каждого ДоступныйРезультат Из ДоступныеРезультатыАттестации Цикл
		СписокВыбораРезультата.Добавить(ДоступныйРезультат);	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоТипуАттестации()
	

	НастройкиОтображенияЭлементовФормы = НастройкиОтображенияЭлементовФормы();
	
	УстановитьВидимостьДолжности(НастройкиОтображенияЭлементовФормы);
	УстановитьВидимостьСпециальности(НастройкиОтображенияЭлементовФормы);
	УстановитьВидимостьДатыОкончания(НастройкиОтображенияЭлементовФормы);
	УстановитьВидимостьРешенияКомиссии(НастройкиОтображенияЭлементовФормы);
	УстановитьВидимостьДатыВнеочереднойАттестации(НастройкиОтображенияЭлементовФормы);
	УстановитьВидимостьПодтверждающегоДокумента(НастройкиОтображенияЭлементовФормы);
	УстановитьВидимостьКомиссии(НастройкиОтображенияЭлементовФормы);
	УстановитьВидимостьЗакладок(НастройкиОтображенияЭлементовФормы);
	УстановитьВидимостьИзменитьОплату(НастройкиОтображенияЭлементовФормы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДолжности(НастройкиОтображенияЭлементовФормы)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "РезультатыАттестацииДолжность", "Видимость", НастройкиОтображенияЭлементовФормы.ОтображатьДолжность);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСпециальности(НастройкиОтображенияЭлементовФормы)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "РезультатыАттестацииСпециальность", "Видимость", НастройкиОтображенияЭлементовФормы.ОтображатьСпециальность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "РезультатыАттестацииКатегория", "Видимость", НастройкиОтображенияЭлементовФормы.ОтображатьСпециальность);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРешенияКомиссии(НастройкиОтображенияЭлементовФормы)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "РезультатыАттестацииРешениеКомиссии", "Видимость", НастройкиОтображенияЭлементовФормы.ОтображатьРешениеКомиссии);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДатыВнеочереднойАттестации(НастройкиОтображенияЭлементовФормы)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "РезультатыАттестацииДатаВнеочереднойАттестации", "Видимость", НастройкиОтображенияЭлементовФормы.ОтображатьДатуВнеочереднойАттестации);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДатыОкончания(НастройкиОтображенияЭлементовФормы)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "РезультатыАттестацииДатаОкончания", "Видимость", НастройкиОтображенияЭлементовФормы.ОтображатьДатуОкончания);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПодтверждающегоДокумента(НастройкиОтображенияЭлементовФормы)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "РезультатыАттестацииПредставлениеДокументаПодтверждающегоКвалификацию", "Видимость", НастройкиОтображенияЭлементовФормы.ОтображатьПодтверждающийДокумент);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗакладок(НастройкиОтображенияЭлементовФормы)
	Если НастройкиОтображенияЭлементовФормы.ОтображатьКомиссию Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "Страницы", "ОтображениеСтраниц", ОтображениеСтраницФормы.ЗакладкиСверху);
	Иначе 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "Страницы", "ОтображениеСтраниц", ОтображениеСтраницФормы.Нет);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомиссии(НастройкиОтображенияЭлементовФормы)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "СтраницаКомиссия", "Видимость", НастройкиОтображенияЭлементовФормы.ОтображатьКомиссию);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИзменитьОплату(НастройкиОтображенияЭлементовФормы)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "ИзменитьОплату", "Видимость", НастройкиОтображенияЭлементовФормы.ОтображатьИзменитьОплату);
КонецПроцедуры

&НаСервере
Функция НастройкиОтображенияЭлементовФормы()
	
	НастройкиОтображенияЭлементовФормы = Новый Структура;
	НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьДолжность", Истина);
	НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьСпециальность", Ложь);
	НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьДатуОкончания", Ложь);
	НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьПодтверждающийДокумент", Ложь);
	НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьДатуВнеочереднойАттестации", Ложь);
	НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьКомиссию", Ложь);
	НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьРешениеКомиссии", Ложь);
	НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьИзменитьОплату", Ложь);
	
	Если ЗначениеЗаполнено(Объект.ВидАттестации) Тогда
		ТипАттестации = АттестацииСотрудников.ТипАттестации(Объект.ВидАттестации);
		НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьДолжность", НеобходимоОтображатьДолжность(ТипАттестации));
		НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьСпециальность", НеобходимоОтображатьСпециальность(ТипАттестации));
		НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьДатуОкончания", НеобходимоОтображатьДатуОкончания(ТипАттестации));
		НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьПодтверждающийДокумент", НеобходимоОтображатьПодтверждающийДокумент(ТипАттестации));
		НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьКомиссию", НеобходимоОтображатьКомиссию());
		
		НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьРешениеКомиссии", НеобходимоОтображатьРешениеКомиссии(ТипАттестации));
		НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьДатуВнеочереднойАттестации", НеобходимоОтображатьДатуВнеочереднойАттестации(ТипАттестации));
		НастройкиОтображенияЭлементовФормы.Вставить("ОтображатьИзменитьОплату", НеобходимоОтображатьИзменитьОплату(ТипАттестации));
	КонецЕсли;
	
	Возврат НастройкиОтображенияЭлементовФормы;	
	
КонецФункции

&НаСервере
Функция НеобходимоОтображатьДолжность(ТипАттестации)
	Возврат ТипАттестации = Перечисления.ТипыАттестацииСотрудников.ПодтверждениеСоответствияДолжности;
КонецФункции

&НаСервере
Функция НеобходимоОтображатьСпециальность(ТипАттестации)
	Возврат ТипАттестации = Перечисления.ТипыАттестацииСотрудников.ПодтверждениеКвалификацииПоСпециальности;
КонецФункции

&НаСервере
Функция НеобходимоОтображатьДатуОкончания(ТипАттестации)
	Возврат ТипАттестации = Перечисления.ТипыАттестацииСотрудников.ПодтверждениеКвалификацииПоСпециальности;
КонецФункции

&НаСервере
Функция НеобходимоОтображатьПодтверждающийДокумент(ТипАттестации)
	Возврат ТипАттестации = Перечисления.ТипыАттестацииСотрудников.ПодтверждениеКвалификацииПоСпециальности;
КонецФункции

&НаСервере
Функция НеобходимоОтображатьКомиссию()
	Возврат ЗначениеЗаполнено(Объект.ВидАттестации) И НЕ АттестацииСотрудников.ЭтоВнешняяАттестация(Объект.ВидАттестации);
КонецФункции

&НаСервере
Функция НеобходимоОтображатьРешениеКомиссии(ТипАттестации)
	Возврат ТипАттестации = Перечисления.ТипыАттестацииСотрудников.ПодтверждениеСоответствияДолжности;
КонецФункции

&НаСервере
Функция НеобходимоОтображатьДатуВнеочереднойАттестации(ТипАттестации)
	Возврат ТипАттестации = Перечисления.ТипыАттестацииСотрудников.ПодтверждениеСоответствияДолжности 
	И АттестацииСотрудниковФормы.НеобходимоОтображатьДатуВнеочереднойАттестации(Объект.ВидАттестации);
КонецФункции

&НаСервере
Функция НеобходимоОтображатьИзменитьОплату(ТипАттестации)
	Возврат ТипАттестации = Перечисления.ТипыАттестацииСотрудников.ПодтверждениеКвалификацииПоСпециальности;
КонецФункции

#КонецОбласти 

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.РезультатыАттестации");
	Массив.Добавить("Объект.СоставАттестационнойКомиссии");
	Возврат Массив
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",			Нстр("ru = 'организации'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "ВидАттестации",			Нстр("ru = 'вида аттестации'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "ПриказОбАттестации",	Нстр("ru = 'приказа'")));
	Возврат Массив
КонецФункции

#КонецОбласти

#Область ПодборСотрудников

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.РезультатыАттестации.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаПодбораНаСервере(Сотрудники)
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, "Должность");
	
	ДатаАттестации = ДатаАттестацииПоследнейСтроки(); 
	Если ДатаАттестации = Неопределено Тогда
		ДатаАттестации = Объект.Дата;
	КонецЕсли;
	
	ВремяРегистрацииСотрудников = ЗарплатаКадрыРасширенный.ВремяРегистрацииСотрудниковДокумента(Объект.Ссылка, Сотрудники, ДатаАттестации);
	
	Строки = Новый Массив;
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		Если НетРезультатовСотрудника(Сотрудник) Тогда 
			Строка = НовыйРезультатСотрудника(Сотрудник, ВремяРегистрацииСотрудников, КадровыеДанныеСотрудников); 
			Строки.Добавить(Строка);						
		КонецЕсли;
	КонецЦикла;	
	
	ОбновитьОплатуТрудаСотрудников(Строки);
	
КонецПроцедуры

&НаСервере
Функция НетРезультатовСотрудника(Сотрудник)
	
	СтрокиРезультатов = Объект.РезультатыАттестации.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Возврат СтрокиРезультатов.Количество() = 0;
	
КонецФункции

&НаСервере
Функция НовыйРезультатСотрудника(Сотрудник, ВремяРегистрацииСотрудников, КадровыеДанныеСотрудников)
	
	НоваяСтрока = Объект.РезультатыАттестации.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.ВремяРегистрации = ВремяРегистрацииСотрудников.Получить(Сотрудник);
	НоваяСтрока.ДатаАттестации = НоваяСтрока.ВремяРегистрации;
	КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(Сотрудник, "Сотрудник");
	Если Не КадровыеДанныеСотрудника = Неопределено Тогда
		НоваяСтрока.Должность = КадровыеДанныеСотрудника.Должность;
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

#КонецОбласти

#Область ПредставлениеДокументаПодтверждающегоКвалификацию

&НаСервере
Процедура УстановитьПредставлениеДокументаПодтверждающегоКвалификацию()
	Для каждого Строка Из Объект.РезультатыАттестации Цикл
		УстановитьПредставлениеДокументаПодтверждающегоКвалификациюСотрудника(Строка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеДокументаПодтверждающегоКвалификациюСотрудника(Строка)
	Строка.ПредставлениеДокументаПодтверждающегоКвалификацию = ПредставлениеДокументаПодтверждающегоКвалификацию(Строка);
КонецПроцедуры

&НаСервере
Функция ПредставлениеДокументаПодтверждающегоКвалификацию(Строка)
	
	Если ДокументПодтверждающийКвалификациюЗаполнен(Строка) Тогда
		ПредставлениеДокумента = ПредставлениеДокументаПодтверждающегоКвалификациюСотрудника(Строка);
	Иначе
		ПредставлениеДокумента = ПредставлениеНезаполненногоДокументаПодтверждающегоКвалификациюСотрудника();
	КонецЕсли;
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

&НаСервере
Функция ДокументПодтверждающийКвалификациюЗаполнен(Строка)
	
	Возврат ЗначениеЗаполнено(Строка.Основание) 
	Или ЗначениеЗаполнено(Строка.СерияДокумента)
	Или ЗначениеЗаполнено(Строка.НомерДокумента)
	Или ЗначениеЗаполнено(Строка.КемВыданДокумент);	
	
КонецФункции

&НаСервере
Функция ПредставлениеДокументаПодтверждающегоКвалификациюСотрудника(Строка)
	
	Шаблон = НСтр("ru = '%1, %2 №%3, выдан: %4'");
	
	Если Не ЗначениеЗаполнено(Строка.Основание) Тогда
	  Шаблон = СтрЗаменить(Шаблон, "%1, ",  "");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Строка.СерияДокумента) Тогда
	  Шаблон = СтрЗаменить(Шаблон, " " + НСтр("ru = '%2'"),  "");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Строка.НомерДокумента) Тогда
	  Шаблон = СтрЗаменить(Шаблон, " " + НСтр("ru = '№%3'"), "");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Строка.КемВыданДокумент) Тогда
	  Шаблон = СтрЗаменить(Шаблон, " " + НСтр("ru = 'выдан: %4'"),  "");
	КонецЕсли;

	ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка.Основание, Строка.СерияДокумента, Строка.НомерДокумента, Строка.КемВыданДокумент);
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

&НаСервере
Функция ПредставлениеНезаполненногоДокументаПодтверждающегоКвалификациюСотрудника()
	
	ПредставлениеДокумента = НСТр("ru='Ввести'");
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыДокументаПодтверждающегоКвалификациюСотрудника(РеквизитыДокумента)
	
	Если РеквизитыДокумента <> Неопределено Тогда
		
		СтрокиПоСотруднику = Объект.РезультатыАттестации.НайтиСтроки(Новый Структура("Сотрудник", РеквизитыДокумента.Сотрудник));
		
		Для каждого Строка Из СтрокиПоСотруднику Цикл
			ЗаполнитьЗначенияСвойств(Строка, РеквизитыДокумента, "Основание,СерияДокумента,НомерДокумента,КемВыданДокумент"); 
			УстановитьПредставлениеДокументаПодтверждающегоКвалификациюСотрудника(Строка);
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОплатаТруда

&НаСервере
Процедура ОбновитьОплатуТрудаСотрудников(Строки)
	
	Если Не Объект.ИзменитьОплату Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудники = Новый Массив;
	Для каждого Строка Из Строки Цикл
	    Сотрудники.Добавить(Строка.Сотрудник);
	КонецЦикла;
	ОчиститьПлановыеНачисленияСотрудников(Объект, Сотрудники);

	ОбновитьПлановыеНачисленияСотрудников(Строки);
	 	
	ДополнитьНачисленияПоказателиКвалификационнойНадбавкой(Строки);

	ОбновитьПоказательТарифнойСтавкиСотрудников(Строки);

КонецПроцедуры

#Область ЗаполнениеПлановыхНачислений

&НаСервере
Процедура ОбновитьПлановыеНачисленияСотрудников(Строки)
	
	ТаблицаПодбораПлановыхНачислений = ТаблицаПодбораПлановыхНачислений();
	Для каждого Строка Из Строки Цикл
		
		Если Не СтрокаЗаполненаДляРасчета(Строка) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПодбораПлановыхНачислений = ТаблицаПодбораПлановыхНачислений.Добавить();
		СтрокаПодбораПлановыхНачислений.Сотрудник = Строка.Сотрудник;
		СтрокаПодбораПлановыхНачислений.Период = Строка.ВремяРегистрации;
		
	КонецЦикла;
	
	ЗаполнитьПлановыеНачисленияСотрудников(ТаблицаПодбораПлановыхНачислений);
	
КонецПроцедуры

&НаСервере
Функция ТаблицаПодбораПлановыхНачислений()
	
	ТаблицаПодбораПлановыхНачислений = Новый ТаблицаЗначений;
	ТаблицаПодбораПлановыхНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПодбораПлановыхНачислений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Возврат ТаблицаПодбораПлановыхНачислений;	
	
КонецФункции

&НаСервере
Функция ДатаАттестацииПоследнейСтроки()
	
	ДатаАттестацииПоследнейСтроки = Неопределено;
	Если Объект.РезультатыАттестации.Количество() > 0 Тогда
		ПоследняяСтрокаСотрудников = Объект.РезультатыАттестации[Объект.РезультатыАттестации.Количество() - 1];
		ДатаАттестацииПоследнейСтроки = ПоследняяСтрокаСотрудников["ДатаАттестации"]; 
	КонецЕсли;
	
	Возврат ДатаАттестацииПоследнейСтроки;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПлановыеНачисленияСотрудников(ТаблицаПодбораПлановыхНачислений)
	
	Если НЕ Объект.ИзменитьОплату Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПодбораПлановыхНачислений.Количество() = 0 Тогда
		Возврат; 
	КонецЕсли;

	ДанныеНачислений = ЗарплатаКадрыРасширенный.ДействующиеНачисленияСотрудников(ТаблицаПодбораПлановыхНачислений, Объект.Ссылка);
	
	Для каждого ДанныеНачисленийСотрудника Из ДанныеНачислений Цикл
		
		ИдентификаторСтрокиВидаРасчета = 1;
				
		Для каждого ОписаниеНачисления Из ДанныеНачисленийСотрудника.Значение.Начисления Цикл
			
			ПлановоеНачислениеСотрудника = Объект.Начисления.Добавить();
			
			ЗаполнитьЗначенияСвойств(ПлановоеНачислениеСотрудника, ОписаниеНачисления);
			ПлановоеНачислениеСотрудника.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			
			Для каждого ОписаниеПоказателя Из ОписаниеНачисления.Показатели Цикл
				
				ПлановыйПоказательСотрудника = Объект.Показатели.Добавить();
				ПлановыйПоказательСотрудника.Сотрудник = ОписаниеНачисления.Сотрудник;
				
				ЗаполнитьЗначенияСвойств(ПлановыйПоказательСотрудника, ОписаниеПоказателя);
				ПлановыйПоказательСотрудника.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
				
			КонецЦикла;
			
			ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПлановыеНачисленияСотрудников(Объект, Сотрудники, ОчищатьПоказатели = Истина)
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныеЧасти = Новый Структура;
	ТабличныеЧасти.Вставить("Начисления");
	Если ОчищатьПоказатели Тогда
		ТабличныеЧасти.Вставить("Показатели");
	КонецЕсли;
	СтруктураОписания = Новый Структура("ТабличныеЧасти", ТабличныеЧасти);
	
	Для каждого Сотрудник Из Сотрудники Цикл
		ЗарплатаКадрыРасширенныйКлиентСервер.УдалитьДанныеСотрудникаСписочногоДокумента(
			Объект, СтруктураОписания, Сотрудник, "Сотрудник");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(Сотрудник, ВремяРегистрации)
	
	РедактироватьСоставНачислений = Истина;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВХранилище", АдресВХранилищеНачисленийИУдержаний(Сотрудник, ВремяРегистрации, РедактироватьСоставНачислений));
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияДокументаПодтверждающегоКвалификацию(Строка)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Сотрудник", Строка.Сотрудник);
	ПараметрыОткрытия.Вставить("Основание", Строка.Основание);
	ПараметрыОткрытия.Вставить("СерияДокумента", Строка.СерияДокумента);
	ПараметрыОткрытия.Вставить("НомерДокумента", Строка.НомерДокумента);
	ПараметрыОткрытия.Вставить("КемВыданДокумент", Строка.КемВыданДокумент);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("Документ.РезультатыАттестацииСотрудников.Форма.ФормаРедактированияДокументаПодтверждающегоКвалификацию", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция АдресВХранилищеНачисленийИУдержаний(Сотрудник, ВремяРегистрации, РедактироватьСоставНачислений)
	
	ПараметрыОткрытия = ЗарплатаКадрыРасширенныйКлиентСервер.ПараметрыРедактированияСоставаНачисленийИУдержаний();
	
	ПараметрыОткрытия.ВладелецНачисленийИУдержаний = Сотрудник;
	ПараметрыОткрытия.ДатаРедактирования = ВремяРегистрации;
	ПараметрыОткрытия.Организация = Объект.Организация;
	ПараметрыОткрытия.РежимРаботы = 3;
	
	ДополнитьСтруктуруНачислениямиИПоказателями(ПараметрыОткрытия, Сотрудник, РедактироватьСоставНачислений);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыОткрытия, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ДополнитьСтруктуруНачислениямиИПоказателями(ПараметрыОткрытия, Сотрудник, РедактироватьСоставНачислений)
	
	МассивНачислений = Новый Массив;
	МассивПоказателей = Новый Массив;
	
	ТаблицаНачислений = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	
	// Добавление всех начислений сотрудника.
	Для Каждого СтрокаНачислений Из ТаблицаНачислений Цикл
		
		СтруктураНачисления = Новый Структура("Начисление,ДокументОснование,ИдентификаторСтрокиВидаРасчета,Размер,Действие");
		ЗаполнитьЗначенияСвойств(СтруктураНачисления, СтрокаНачислений);
		МассивНачислений.Добавить(СтруктураНачисления);
		
		// Добавление показателей начислений.
		СтрокиПоказателей = Объект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", СтрокаНачислений.ИдентификаторСтрокиВидаРасчета));
		Для каждого СтрокаПоказателей Из СтрокиПоказателей Цикл
			СтруктураПоказателя = Новый Структура("Показатель,ИдентификаторСтрокиВидаРасчета,Значение,ТекущееЗначение");
			ЗаполнитьЗначенияСвойств(СтруктураПоказателя, СтрокаПоказателей);
			СтруктураПоказателя.ТекущееЗначение = СтрокаПоказателей.Значение;
			МассивПоказателей.Добавить(СтруктураПоказателя);
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.Используется = Истина;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.Таблица = МассивНачислений;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.ИзменятьСоставВидовРасчета = РедактироватьСоставНачислений;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.ИзменятьЗначенияПоказателей = РедактироватьСоставНачислений;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.НомерТаблицы = 1;
	ПараметрыОткрытия.ОписаниеТаблицыНачислений.ПоказатьФОТ = НЕ РедактироватьСоставНачислений;
	
	ПараметрыОткрытия.Показатели = МассивПоказателей;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСотрудникаИзВРеменногоХранилища(АдресВХранилище)
	
	ДанныеИзХранилища = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Если ДанныеИзХранилища <> Неопределено Тогда
		
		ОчиститьПлановыеНачисленияСотрудников(Объект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеИзХранилища.ВладелецНачисленийИУдержаний));	
		
		ЗаполнитьНачисленияПоСотрудникуИзХранилища(ДанныеИзХранилища);
		
		ЗаполнитьЗначенияСовокупныхСтавокПоСотрудникуИзХранилища(ДанныеИзХранилища);
		ЗаполнитьПоказателиПоСотрудникуИзХранилища(ДанныеИзХранилища);
		
		Строки = Объект.РезультатыАттестации.НайтиСтроки(Новый Структура("Сотрудник", ДанныеИзХранилища.ВладелецНачисленийИУдержаний));
		
		УстановитьПредставленияНачисленийСотрудников(Строки);
		ОбновитьОтображениеПоказателяТарифнойСтавки(Строки);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияСовокупныхСтавокПоСотрудникуИзХранилища(ДанныеИзХранилища)
	НайденныеСтроки = Объект.РезультатыАттестации.НайтиСтроки(Новый Структура("Сотрудник", ДанныеИзХранилища.ВладелецНачисленийИУдержаний));
	
	// Удаление текущих данных
	Для Каждого Строка Из НайденныеСтроки Цикл 
		Строка.СовокупнаяТарифнаяСтавка = 0;
		Строка.ВидТарифнойСтавки = Неопределено;
	КонецЦикла;
	
	Для Каждого ДанныеСотрудника Из НайденныеСтроки Цикл 
		ДанныеСотрудника.СовокупнаяТарифнаяСтавка = ДанныеИзХранилища.СовокупнаяТарифнаяСтавка;
		ДанныеСотрудника.ВидТарифнойСтавки = ДанныеИзХранилища.ВидТарифнойСтавки;	
	КонецЦикла;

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьНачисленияПоСотрудникуИзХранилища(ДанныеИзХранилища)
	
	Сотрудник = ДанныеИзХранилища.ВладелецНачисленийИУдержаний;
	
	Для каждого НачислениеСотрудника Из ДанныеИзХранилища.Начисления Цикл
		НоваяСтрока = Объект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НачислениеСотрудника);
		НоваяСтрока.Сотрудник = Сотрудник;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиПоСотрудникуИзХранилища(ДанныеИзХранилища)
	
	Сотрудник = ДанныеИзХранилища.ВладелецНачисленийИУдержаний;
	
	Для каждого ПоказательСотрудника Из ДанныеИзХранилища.Показатели Цикл
		НоваяСтрока = Объект.Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоказательСотрудника);
		НоваяСтрока.Сотрудник = Сотрудник;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтрокаЗаполненаДляРасчета(Строка)
	
	Возврат ЗначениеЗаполнено(Строка.Сотрудник)
		И ЗначениеЗаполнено(Строка.ВремяРегистрации);
	
КонецФункции

#Область ПредставлениеНачислений

&НаСервере
Процедура УстановитьПредставленияНачисленийСотрудников(Строки = Неопределено)
	
	Если Строки = Неопределено Тогда
		Строки = Объект.РезультатыАттестации;
	КонецЕсли;	

	Для каждого Строка Из Строки Цикл
		УстановитьПредставлениеНачисленийСотрудника(Строка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеНачисленийСотрудника(Строка)
	Строка.ПредставлениеНачислений = ?(СтрокаЗаполненаДляРасчета(Строка), ПредставлениеНачислений(Строка.Сотрудник), Неопределено);
КонецПроцедуры

&НаСервере
Функция ПредставлениеНачислений(Сотрудник)
	
	НачисленияПоСотруднику = НачисленияПоСотруднику(Сотрудник);	
	
	Если НачисленияПоСотрудникуЗаполнены(НачисленияПоСотруднику) Тогда
		ПредставлениеНачислений = ПредставлениеКоллекцииНачислений(НачисленияПоСотруднику);
	Иначе
		ПредставлениеНачислений = ПредставлениеПустойКоллекцииНачислений();
	КонецЕсли;
	
	Возврат ПредставлениеНачислений;
	
КонецФункции

&НаСервере
Функция НачисленияПоСотруднику(Сотрудник)
	
	НачисленияПоСотруднику = Новый ТаблицаЗначений;
	НачисленияПоСотруднику.Колонки.Добавить("Начисление");
	НачисленияПоСотруднику.Колонки.Добавить("Действие");
	НачисленияПоСотруднику.Колонки.Добавить("Размер");
	НачисленияПоСотруднику.Колонки.Добавить("РеквизитДопУпорядочивания");
	
	СтрокиНачисленийСотрудника = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	
	РеквизитыДопУпорядочивания = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Объект.Начисления.Выгрузить(СтрокиНачисленийСотрудника, "Начисление").ВыгрузитьКолонку("Начисление"), "РеквизитДопУпорядочивания");
	
	Для каждого СтрокаНачисленийСотрудника Из СтрокиНачисленийСотрудника Цикл
		НовоеНачислениеПоСотруднику = НачисленияПоСотруднику.Добавить();
		НовоеНачислениеПоСотруднику.Начисление 					= СтрокаНачисленийСотрудника.Начисление;	
		НовоеНачислениеПоСотруднику.Действие 					= СтрокаНачисленийСотрудника.Действие;	
		НовоеНачислениеПоСотруднику.Размер						= СтрокаНачисленийСотрудника.Размер;	
		НовоеНачислениеПоСотруднику.РеквизитДопУпорядочивания 	= РеквизитыДопУпорядочивания.Получить(СтрокаНачисленийСотрудника.Начисление);	
	КонецЦикла;
	
	НачисленияПоСотруднику.Сортировать("РеквизитДопУпорядочивания");
	
	Возврат НачисленияПоСотруднику;	
	
КонецФункции

&НаСервере
Функция НачисленияПоСотрудникуЗаполнены(НачисленияПоСотруднику)
	
	Возврат НачисленияПоСотруднику.Количество() > 0;	
	
КонецФункции

&НаСервере
Функция ПредставлениеКоллекцииНачислений(НачисленияПоСотруднику)
	
	ПредставлениеНачислений = "";
	
	Для каждого НачислениеСотрудника Из НачисленияПоСотруднику Цикл
		Если НачислениеСотрудника.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда 
			Продолжить;
		КонецЕсли;
		ДобавитьРазделитель(ПредставлениеНачислений);
		ПредставлениеНачислений = ПредставлениеНачислений + ПредставлениеНачисления(НачислениеСотрудника);		
	КонецЦикла;
	
	Возврат ПредставлениеНачислений;
	
КонецФункции

&НаСервере
Процедура ДобавитьРазделитель(ПредставлениеНачислений)
	Если НуженРазделитель(ПредставлениеНачислений) Тогда
		ПредставлениеНачислений = ПредставлениеНачислений + ", ";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НуженРазделитель(ПредставлениеНачислений)	
	НуженРазделитель = НЕ ПустаяСтрока(ПредставлениеНачислений);
	Возврат НуженРазделитель;
КонецФункции

&НаСервере
Функция ПредставлениеНачисления(НачислениеСотрудника)
	
	Если ЗначениеЗаполнено(НачислениеСотрудника.Размер) Тогда
		ПредставлениеНачисления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1=%2", НачислениеСотрудника.Начисление, НачислениеСотрудника.Размер);
	Иначе
		ПредставлениеНачисления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1", НачислениеСотрудника.Начисление);
	КонецЕсли;
	
	Возврат ПредставлениеНачисления;	
	
КонецФункции 

&НаСервере
Функция ПредставлениеПустойКоллекцииНачислений()
	
	ПредставлениеНачислений = НСТр("ru='Ввести'");
	
	Возврат ПредставлениеНачислений;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПоказательТарифнойСтавки

&НаСервере
Процедура ОбновитьПоказательТарифнойСтавкиСотрудников(Строки)
	
	Если Не Объект.ИзменитьОплату Тогда
		Возврат;
	КонецЕсли;

	ДанныеСотрудников = ДанныеЗаполненияПоказателяТарифнойСтавкиСотрудников(Строки);
	
	ПодобратьНовыйПоказательТарифнойСтавки(Строки, ДанныеСотрудников);
	
	РассчитатьФОТ(Строки, ДанныеСотрудников);
	УстановитьПредставленияНачисленийСотрудников(Строки);
	ОбновитьОтображениеПоказателяТарифнойСтавки(Строки, ДанныеСотрудников);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеПоказателяТарифнойСтавки(Строки = Неопределено, ДанныеСотрудников = Неопределено)
	
	Если Строки = Неопределено Тогда
		Строки = Объект.РезультатыАттестации;
		ДанныеСотрудников = Неопределено;
	КонецЕсли;	

	Если ДанныеСотрудников = Неопределено Тогда
		ДанныеСотрудников = ДанныеЗаполненияПоказателяТарифнойСтавкиСотрудников(Строки);
	КонецЕсли;
	
	Для каждого Строка Из Строки Цикл
		
		Отбор = Новый Структура("Сотрудник", Строка.Сотрудник);
		
		ДанныеСотрудника = ДанныеСотрудников.НайтиСтроки(Отбор);
		
		Если ДанныеСотрудника.Количество() > 0 Тогда
			
			Строка.Показатель = ДанныеСотрудника[0].Показатель;
			Строка.ТочностьПоказателяТарифнойСтавки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ДанныеСотрудника[0].ТочностьПоказателя);
			
			Отбор.Вставить("Показатель", ДанныеСотрудника[0].Показатель);
			ПоказателиСотрудника = Объект.Показатели.НайтиСтроки(Отбор);
			Если ПоказателиСотрудника.Количество() > 0 Тогда
				Строка.ЗначениеПоказателя = ПоказателиСотрудника[0].Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьНачисленияПоказателиКвалификационнойНадбавкой(Строки)
	
	Если Не Объект.ИзменитьОплату 
		Или Не ИспользуетсяКвалификационнаяНадбавка() Тогда
		Возврат;
	КонецЕсли;
	
	ПоказательКвалификационнаяНадбавка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КвалификационнаяНадбавка");	
	Если ПоказательКвалификационнаяНадбавка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачислениеКвалификационнаяНадбавка = НачислениеКвалификационнаяНадбавка(ПоказательКвалификационнаяНадбавка);
	Если НачислениеКвалификационнаяНадбавка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеНачисления = ОписаниеНачисления(НачислениеКвалификационнаяНадбавка);

	Отбор = Новый Структура("Показатель", ПоказательКвалификационнаяНадбавка);
	
	Для каждого Строка Из Строки Цикл                                           
		Если Не СтрокаЗаполненаДляРасчета(Строка) Тогда
			Продолжить;
		КонецЕсли;
	
		ДобавитьНачислениеСотруднику(Строка.Сотрудник, ОписаниеНачисления);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НачислениеКвалификационнаяНадбавка(ПоказательКвалификационнаяНадбавка)
	
	НачислениеКвалификационнаяНадбавка = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоказатели.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|ГДЕ
	|	НачисленияПоказатели.ЗапрашиватьПриВводе = ИСТИНА
	|	И НачисленияПоказатели.ИспользоватьПриРасчете = ИСТИНА
	|	И НачисленияПоказатели.Показатель = &Показатель";
	Запрос.УстановитьПараметр("Показатель", ПоказательКвалификационнаяНадбавка);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			НачислениеКвалификационнаяНадбавка = Выборка.Ссылка; 		
		КонецЕсли;
	КонецЕсли;
	
	Возврат НачислениеКвалификационнаяНадбавка;
	
КонецФункции

&НаСервере
Процедура ДобавитьНачислениеСотруднику(Сотрудник, ОписаниеНачисления)
	
	Если НачислениеНазначеноРанее(Сотрудник, ОписаниеНачисления.Начисление) Тогда
		Возврат;
	КонецЕсли;
	
	НовоеНачисление = Объект.Начисления.Добавить();
	НовоеНачисление.Сотрудник 	= Сотрудник;
	НовоеНачисление.Начисление 	= ОписаниеНачисления.Начисление;
	НовоеНачисление.Действие 	= Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
	
	Для каждого Показатель Из ОписаниеНачисления.ПостоянныеПоказатели Цикл
		НовыйПоказатель = Объект.Показатели.Добавить();
		НовыйПоказатель.Сотрудник 	= Сотрудник;
		НовыйПоказатель.Показатель 	= Показатель;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НачислениеНазначеноРанее(Сотрудник, Начисление) 
	
	ОтборПоСотрудникуНачислению = Новый Структура("Сотрудник,Начисление");
	ОтборПоСотрудникуНачислению.Вставить("Начисление", Начисление);
	ОтборПоСотрудникуНачислению.Вставить("Сотрудник", Сотрудник);
	
	Возврат НЕ Объект.Начисления.НайтиСтроки(ОтборПоСотрудникуНачислению).Количество() = 0;
	
КонецФункции

&НаСервере
Функция ОписаниеНачисления(Начисление) 
	
	ОписаниеНачисления = Новый Структура;
	ОписаниеНачисления.Вставить("Начисление", Начисление);
	ОписаниеНачисления.Вставить("ПостоянныеПоказатели", ПостоянныеПоказателиНачисления(Начисление));
	
	Возврат ОписаниеНачисления; 
	
КонецФункции

&НаСервере
Функция ПостоянныеПоказателиНачисления(Начисление) 
	
	ПостоянныеПоказатели = Новый Массив;
	
	ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление);
	Для Каждого СтрокаПоказателя Из ИнфоОВидеРасчета.Показатели Цикл
		Если ЭтоПостоянныйПоказатель(СтрокаПоказателя) Тогда
			ПостоянныеПоказатели.Добавить(СтрокаПоказателя.Показатель);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ПостоянныеПоказатели;
	
КонецФункции

&НаСервере
Функция ЭтоПостоянныйПоказатель(СтрокаПоказателя) 
	
	ЭтоПостоянныйПоказатель = Истина;
	
	Если СтрокаПоказателя.ЗапрашиватьПриВводе Тогда
		ПоказательИнфо = ЗарплатаКадрыРасширенныйПовтИсп.СведенияОПоказателеРасчетаЗарплаты(СтрокаПоказателя.Показатель);
		Если ПоказательИнфо.СпособПримененияЗначений <> Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное
			Или ПоказательИнфо.ЗначениеРассчитываетсяАвтоматически Тогда
			ЭтоПостоянныйПоказатель = Ложь;	
		КонецЕсли;
	Иначе
		ЭтоПостоянныйПоказатель = Ложь;	
	КонецЕсли;

	Возврат ЭтоПостоянныйПоказатель;
	
КонецФункции

&НаСервере
Процедура ПодобратьНовыйПоказательТарифнойСтавки(Строки = Неопределено, ДанныеСотрудников= Неопределено)

	Если Строки = Неопределено Тогда
		Строки = Объект.РезультатыАттестации; 
		ДанныеСотрудников= Неопределено;
	КонецЕсли;	
	
	Если ДанныеСотрудников = Неопределено Тогда
		ДанныеСотрудников = ДанныеЗаполненияПоказателяТарифнойСтавкиСотрудников(Строки);
	КонецЕсли;	
	
	ДополнитьДанныеЗаполненияПоказателяЗначениямиПоказателя(ДанныеСотрудников);
	
	Для каждого Строка Из Строки Цикл
		Если Не СтрокаЗаполненаДляРасчета(Строка) 
			Или Строка.РезультатАттестации = Перечисления.РезультатыПодтвержденияКвалификацииПоСпециальности.КвалификацияНеПодтверждена Тогда
			Продолжить;
		КонецЕсли;
		Отбор = Новый Структура("Сотрудник", Строка.Сотрудник);
		ДанныеСотрудника = ДанныеСотрудников.НайтиСтроки(Отбор);
		Если ДанныеСотрудника.Количество() > 0 Тогда
			
			Отбор.Вставить("Показатель", ДанныеСотрудника[0].Показатель);
			ПоказателиСотрудника = Объект.Показатели.НайтиСтроки(Отбор);
			Для каждого СтрокаПоказателя Из ПоказателиСотрудника Цикл
				СтрокаПоказателя.Значение = ДанныеСотрудника[0].ЗначениеПоказателя;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаполненияПоказателяТарифнойСтавкиСотрудников(Строки)
	
	ДанныеСотрудников = ТаблицаЗаполненияПоказателяТарифнойСтавки();
	ЗаполнитьТаблицуЗаполненияПоказателяТарифнойСтавки(ДанныеСотрудников, Строки);	
	
	ДополнитьДанныеЗаполненияПоказателяКадровымиДанными(ДанныеСотрудников); 
	ДополнитьДанныеЗаполненияПоказателяОписаниемПоказателя(ДанныеСотрудников);
	
	Возврат ДанныеСотрудников;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуЗаполненияПоказателяТарифнойСтавки(ТаблицаЗаполненияПоказателя, Строки)
	
	Для каждого Строка Из Строки Цикл
		
		Если Не СтрокаЗаполненаДляРасчета(Строка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСотрудника = ТаблицаЗаполненияПоказателя.Добавить();
		ДанныеСотрудника.Сотрудник = Строка.Сотрудник;
		ДанныеСотрудника.Период = Строка.ВремяРегистрации;
		ДанныеСотрудника.РазрядКатегория = Строка.Категория;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьДанныеЗаполненияПоказателяКадровымиДанными(ДанныеСотрудников)
	
	КадровыеДанныеСотрудников = КадровыеДанныеЗаполненияПоказателяТарифнойСтавки(ДанныеСотрудников);	
	
	ИмяПоляТарифнаяСетка = ИмяПоляТарифнаяСетка();
	
	Для каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		
		КадровыеДанные = КадровыеДанныеСотрудников.НайтиСтроки(Новый Структура("Сотрудник", ДанныеСотрудника.Сотрудник));
		
		Если КадровыеДанные.Количество() > 0 Тогда			
			
			ДанныеСотрудника.ТарифнаяСетка = КадровыеДанные[0][ИмяПоляТарифнаяСетка];
			ДанныеСотрудника.КоличествоСтавок = КадровыеДанные[0].КоличествоСтавок;
						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьДанныеЗаполненияПоказателяОписаниемПоказателя(ДанныеСотрудников)
	
	Для каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		
		ПоказательТарифнойСеткиСотрудника = ПоказательТарифнойСеткиСотрудника(ДанныеСотрудника);
		
		ДанныеСотрудника.Показатель = ПоказательТарифнойСеткиСотрудника;	
		
		КоэффициентПересчета = 1;
		
		Если ЗначениеЗаполнено(ДанныеСотрудника.Показатель) Тогда 
			
			ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(ДанныеСотрудника.Показатель);
			
			Если ПоказательИнфо.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка Тогда
				ДанныеСотрудника.КоэффициентПересчета = ДанныеСотрудника.КоличествоСтавок;
			КонецЕсли; 
			
			ДанныеСотрудника.ТочностьПоказателя = ПоказательИнфо["Точность"];
			
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьДанныеЗаполненияПоказателяЗначениямиПоказателя(ДанныеСотрудников)
	
	ЗначенияТарифныхСтавок = ЗначенияТарифныхСтавок(ДанныеСотрудников);	
	
	Отбор = Новый Структура("Период,ТарифнаяСетка,РазрядКатегория");
	
	Для каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, ДанныеСотрудника, "Период,ТарифнаяСетка,РазрядКатегория");
		
		ЗначенияТарифныхСтавокСотрудника = ЗначенияТарифныхСтавок.НайтиСтроки(Отбор);
		
		Если ЗначенияТарифныхСтавокСотрудника.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;                                                                                                                     
		
		ДанныеСотрудника.ЗначениеПоказателя = ЗначенияТарифныхСтавокСотрудника[0].ЗначениеПоказателя;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КадровыеДанныеЗаполненияПоказателяТарифнойСтавки(ДанныеЗаполненияПоказателяТарифнойСтавки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СотрудникиПериоды", ДанныеЗаполненияПоказателяТарифнойСтавки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиПериоды.Период,
	|	СотрудникиПериоды.Сотрудник
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	&СотрудникиПериоды КАК СотрудникиПериоды";
	
	Запрос.Выполнить();
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение","Регистратор", "<>", Объект.Ссылка));
	
	ПоляОтбора = Новый Структура("КадроваяИсторияСотрудников", Отбор);
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСписокСотрудников");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ТарифнаяСетка,ТарифнаяСеткаНадбавки,КоличествоСтавок", ПоляОтбора, Ложь);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник,
	|	КадровыеДанныеСотрудников.ТарифнаяСетка,
	|	КадровыеДанныеСотрудников.ТарифнаяСеткаНадбавки,
	|	КадровыеДанныеСотрудников.КоличествоСтавок
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ТаблицаЗаполненияПоказателяТарифнойСтавки()
	
	ТаблицаЗаполненияПоказателяТарифнойСтавки = Новый ТаблицаЗначений;
	ТаблицаЗаполненияПоказателяТарифнойСтавки.Колонки.Добавить("Сотрудник", 			Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаЗаполненияПоказателяТарифнойСтавки.Колонки.Добавить("Период", 				ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаЗаполненияПоказателяТарифнойСтавки.Колонки.Добавить("РазрядКатегория", 		Новый ОписаниеТипов("СправочникСсылка.РазрядыКатегорииДолжностей"));
	ТаблицаЗаполненияПоказателяТарифнойСтавки.Колонки.Добавить("ТарифнаяСетка", 		Новый ОписаниеТипов("СправочникСсылка.ТарифныеСетки"));
	ТаблицаЗаполненияПоказателяТарифнойСтавки.Колонки.Добавить("КоэффициентПересчета", 	ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаЗаполненияПоказателяТарифнойСтавки.Колонки.Добавить("КоличествоСтавок", 		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаЗаполненияПоказателяТарифнойСтавки.Колонки.Добавить("Показатель", 			Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаЗаполненияПоказателяТарифнойСтавки.Колонки.Добавить("ЗначениеПоказателя", 	ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаЗаполненияПоказателяТарифнойСтавки.Колонки.Добавить("ТочностьПоказателя", 	ОбщегоНазначения.ОписаниеТипаЧисло(5,0));
	
	Возврат ТаблицаЗаполненияПоказателяТарифнойСтавки;	
	
КонецФункции

&НаСервере
Функция ИмяПоляТарифнаяСетка()
	
	Если ИспользуетсяКвалификационнаяНадбавка() Тогда 
		ИмяПоляТарифнаяСетка = "ТарифнаяСеткаНадбавки";
	Иначе 
		ИмяПоляТарифнаяСетка = "ТарифнаяСетка";		
	КонецЕсли;
	
	Возврат ИмяПоляТарифнаяСетка;
	
КонецФункции

&НаСервере
Функция ПоказательТарифнойСеткиСотрудника(ДанныеСотрудникаДляЗаполненияПоказателя)
	
	Если Не ЗначениеЗаполнено(ДанныеСотрудникаДляЗаполненияПоказателя.ТарифнаяСетка) Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	ОтборСотрудника = Новый Структура("Сотрудник");
	ОтборСотрудника.Сотрудник = ДанныеСотрудникаДляЗаполненияПоказателя.Сотрудник;
	
	НачисленияСотрудника = Объект.Начисления.НайтиСтроки(ОтборСотрудника);	
	
	ПоказательТарифнойСеткиСотрудника = РазрядыКатегорииДолжностей.ПоказательТарифнойСеткиСотрудника(ДанныеСотрудникаДляЗаполненияПоказателя.ТарифнаяСетка, , НачисленияСотрудника);
	
	Возврат ПоказательТарифнойСеткиСотрудника;
	
КонецФункции

&НаСервере
Функция ЗначенияТарифныхСтавок(ДанныеСотрудниковДляЗаполненияПоказателя)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыТарифныеСетки.Период КАК Период,
	|	ПериодыТарифныеСетки.ТарифнаяСетка КАК ТарифнаяСетка,
	|	ПериодыТарифныеСетки.РазрядКатегория КАК РазрядКатегория
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	&ПериодыТарифныеСетки КАК ПериодыТарифныеСетки";
	
	Запрос.УстановитьПараметр("ПериодыТарифныеСетки", ДанныеСотрудниковДляЗаполненияПоказателя);
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = РазрядыКатегорииДолжностей.ПараметрыПостроенияВТЗначенияПоказателейТарифныхСеток("ВТДанныеДокумента");
	
	РазрядыКатегорииДолжностей.СоздатьВТЗначенияПоказателейТарифныхСеток(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПостроения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияПоказателейТарифныхСеток.Период,
	|	ЗначенияПоказателейТарифныхСеток.ТарифнаяСетка, 
	|	ЗначенияПоказателейТарифныхСеток.РазрядКатегория,
	|	ЗначенияПоказателейТарифныхСеток.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	ВТЗначенияПоказателейТарифныхСеток КАК ЗначенияПоказателейТарифныхСеток";
	
	ЗначенияТарифныхСтавок = Запрос.Выполнить().Выгрузить();
	
	Возврат ЗначенияТарифныхСтавок;
	
КонецФункции

&НаСервере
Процедура ДобавитьУсловноеОформлениеЗначенияПоказателяТарифнойСтавки()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", Новый ПолеКомпоновкиДанных("Объект.РезультатыАттестации.ТочностьПоказателя"));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("РезультатыАттестацииЗначениеПоказателя");
	
КонецПроцедуры

&НаСервере
Функция ИспользуетсяКвалификационнаяНадбавка()
	
	ИспользуетсяКвалификационнаяНадбавка = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	
	Возврат ИспользуетсяКвалификационнаяНадбавка;
	
КонецФункции

#КонецОбласти

#Область ФОТ

&НаСервере
Процедура РассчитатьФОТ(Строки, ДанныеСотрудников = Неопределено)
	
	Если ДанныеСотрудников = Неопределено Тогда
		ДанныеСотрудников = ДанныеЗаполненияПоказателяТарифнойСтавкиСотрудников(Строки);
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокиПоДатам = Новый Соответствие();

	ПериодыПоСотрудникам = Новый Соответствие;
	
	Для каждого Строка Из Строки Цикл
		ПериодыПоСотрудникам.Вставить(Строка.Сотрудник, Строка.ВремяРегистрации);
	КонецЦикла;
	
	СотрудникиКРасчету = Новый Массив;
	
	Для Каждого КлючЗначений Из ПериодыПоСотрудникам Цикл
		СотрудникиКРасчету.Добавить(КлючЗначений.Ключ);
	КонецЦикла;	
	
	ТаблицаНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ТаблицаПоказателей = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
		
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Объект.Организация);
	
	ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений();
	
	ПлановыеНачисленияСотрудниковФормы.ЗаполнитьДанныеПлановыхНачисленийПоСотрудникам(
		ТаблицаНачислений,
		ТаблицаПоказателей,
		ЭтотОбъект,
		СотрудникиКРасчету,
		ГоловнаяОрганизация,
		'00010101',
		ОписаниеТаблицыНачислений);
		
	Для Каждого СтрокаНачисления Из ТаблицаНачислений Цикл
		СтрокаНачисления.Период = ПериодыПоСотрудникам[СтрокаНачисления.Сотрудник];			
	КонецЦикла;	
	
	Для Каждого СтрокаПоСотруднику Из Строки Цикл
		СтрокиПоказателей = Объект.Показатели.НайтиСтроки(Новый Структура("Сотрудник", СтрокаПоСотруднику.Сотрудник));
		
		Для Каждого СтрокаТаблицыФормы Из СтрокиПоказателей Цикл
			ДанныеПоказателя = ТаблицаПоказателей.Добавить();
			ДанныеПоказателя.Сотрудник = СтрокаТаблицыФормы.Сотрудник;
			ДанныеПоказателя.ГоловнаяОрганизация = ГоловнаяОрганизация;
			ДанныеПоказателя.Период = ПериодыПоСотрудникам[СтрокаТаблицыФормы.Сотрудник];
			ДанныеПоказателя.Показатель = СтрокаТаблицыФормы.Показатель;
			ДанныеПоказателя.Значение = СтрокаТаблицыФормы.Значение;	
			ДанныеПоказателя.ДокументОснование = СтрокаТаблицыФормы.ДокументОснование;
		КонецЦикла;	
		
	КонецЦикла;	
		
	РассчитанныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ТаблицаНачислений, ТаблицаПоказателей);
	
	ОписаниеТаблицыТарифныхСтавок = ПлановыеНачисленияСотрудниковФормы.ОписаниеТаблицыТарифныхСтавок("Объект.РезультатыАттестации", "Сотрудник", "ВидТарифнойСтавки", "СовокупнаяТарифнаяСтавка");
	
	ПлановыеНачисленияСотрудниковФормы.РезультатРасчетаВторичныхДанныхПоСотрудникамВДанныеФормы(
		ЭтотОбъект,
		РассчитанныеДанные,
		ГоловнаяОрганизация,
		ОписаниеТаблицыНачислений,
		ОписаниеТаблицыТарифныхСтавок);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений()
	
	ОписаниеТаблицыВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицыВидовРасчета.ПутьКДанным = "Объект.Начисления";
	ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей = "";
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование = "ДокументОснование";
	
	Возврат ОписаниеТаблицыВидовРасчета;	
	
КонецФункции	

&НаСервере
Процедура ПрочитатьВидАттестации()
   Объект.ВидАттестации = ВидАттестацииПриказаОбАттестации(Объект.ПриказОбАттестации);
КонецПроцедуры

&НаСервере
Функция ВидАттестацииПриказаОбАттестации(ПриказОбАттестации)
	
	ВидАттестации = Неопределено;
	Если ЗначениеЗаполнено(ПриказОбАттестации) Тогда
		ВидАттестации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПриказОбАттестации, "ВидАттестации");
	КонецЕсли;
	
	Возврат ВидАттестации;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКомиссиюПоПриказуОбАттестации()
	
	Объект.СоставАттестационнойКомиссии.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ПриказОбАттестации) Тогда
		СоставКомиссии = АттестацииСотрудников.СоставАттестационнойКомиссииПриказаОбАттестации(Объект.ПриказОбАттестации);
		Объект.СоставАттестационнойКомиссии.Загрузить(СоставКомиссии);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СотрудникиПриказаНаАттестацию()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриказОбАттестацииСотрудниковСотрудники.Сотрудник,
	|	ПриказОбАттестацииСотрудниковСотрудники.Должность,
	|	ПриказОбАттестацииСотрудниковСотрудники.Специальность,
	|	ПриказОбАттестацииСотрудниковСотрудники.Категория,
	|	ПриказОбАттестацииСотрудниковЗаседанияКомиссии.ДатаЗаседания КАК ДатаАттестации
	|ИЗ
	|	Документ.ПриказОбАттестацииСотрудников.Сотрудники КАК ПриказОбАттестацииСотрудниковСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриказОбАттестацииСотрудников.ЗаседанияКомиссии КАК ПриказОбАттестацииСотрудниковЗаседанияКомиссии
	|		ПО ПриказОбАттестацииСотрудниковСотрудники.Ссылка = ПриказОбАттестацииСотрудниковЗаседанияКомиссии.Ссылка
	|			И ПриказОбАттестацииСотрудниковСотрудники.ИдентификаторСтрокиЗаседаниеКомиссии = ПриказОбАттестацииСотрудниковЗаседанияКомиссии.ИдентификаторСтрокиЗаседаниеКомиссии
	|ГДЕ
	|	ПриказОбАттестацииСотрудниковСотрудники.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаправлениеНаВнешнююАттестациюСотрудники.Сотрудник,
	|	НаправлениеНаВнешнююАттестациюСотрудники.Должность,
	|	НаправлениеНаВнешнююАттестациюСотрудники.Специальность,
	|	НаправлениеНаВнешнююАттестациюСотрудники.Категория,
	|	НаправлениеНаВнешнююАттестациюСотрудники.ДатаАттестации
	|ИЗ
	|	Документ.НаправлениеНаВнешнююАттестацию.Сотрудники КАК НаправлениеНаВнешнююАттестациюСотрудники
	|ГДЕ
	|	НаправлениеНаВнешнююАттестациюСотрудники.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ПриказОбАттестации);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьРегистрацииНачислений()
	
	ПраваНаДокумент = ЗарплатаКадрыРасширенный.ПраваНаМногофункциональныйДокумент(Объект);
	РегистрацияНачисленийДоступна = ПраваНаДокумент.ПолныеПраваПоРолям;
	ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура(ПраваНаДокумент.ОграниченияНаУровнеЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей()
	
	БылиОграничения = ОграниченияНаУровнеЗаписей;
	УстановитьДоступностьРегистрацииНачислений();
	
	Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений
		Или БылиОграничения.ИзменениеБезОграничений <> ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений
		Или БылиОграничения.ИзменениеКадровыхДанных <> ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных Тогда 
		
		Объект.НачисленияУтверждены = ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
		
		УстановитьВидимостьРасчетныхПолей();
		
		Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
			ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРасчетныхПолей()
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("ИзменитьОплату");
	ИменаЭлементов.Добавить("РезультатыАттестацииЗначениеПоказателя");
	ИменаЭлементов.Добавить("РезультатыАттестацииПредставлениеНачислений");
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеПолейМногофункциональныхДокументов(ЭтаФорма, ИменаЭлементов);
	
	Если ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
		УстановитьВидимостьРеквизитовОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВремяРегистрации()
	
	СотрудникиДаты = Объект.РезультатыАттестации.Выгрузить(, "ДатаАттестации, Сотрудник");
	СотрудникиДаты.Колонки.ДатаАттестации.Имя = "ДатаСобытия";
	
	ЗначенияВремениРегистрации = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Объект.Ссылка, СотрудникиДаты);
	
	Для Каждого Строка Из Объект.РезультатыАттестации Цикл
		ВремяРегистрацииСотрудников = ЗначенияВремениРегистрации.Получить(Строка.ДатаАттестации);
		Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
			Строка.ВремяРегистрации = ВремяРегистрацииСотрудников.Получить(Строка.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВремяРегистрацииСтроки(Ссылка, Строка)
	
	Строка.ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииСотрудникаДокумента(Ссылка, Строка.Сотрудник, Строка.ДатаАттестации);
	
КонецПроцедуры

#КонецОбласти
