
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда 
		
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный", "Объект.Организация", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Если Не ЗначениеЗаполнено(Объект.ДатаИзменения) Тогда
			Объект.ДатаИзменения = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеквизитыВДанные(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДанныеВРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ИзменениеЛьготСотрудников", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	УникальныеЗначения = Новый Соответствие;
	
	ИндексСтроки = 0;
	
	Для Каждого ДанныеСотрудника Из ЛьготыРаботников Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.Сотрудник) Тогда 
			ТекстОшибки = НСтр("ru = 'Не указан сотрудник.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, "ЛьготыРаботников[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].Сотрудник", ,Отказ);
		КонецЕсли;
		
		Если УникальныеЗначения[ДанныеСотрудника.Сотрудник] = Неопределено Тогда
			УникальныеЗначения.Вставить(ДанныеСотрудника.Сотрудник, Истина);
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Информация о сотруднике %1 была введена в документе ранее.'"), ДанныеСотрудника.Сотрудник);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, "ЛьготыРаботников[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].Сотрудник", ,Отказ);
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыПоказателиЛьготы" И Источник = ЭтотОбъект Тогда
		ОбработатьИзменениеПоказателейЛьготыНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "ИзмененыПоказателиДокумента" И Источник.ВладелецФормы = ЭтаФорма Тогда
		Если Параметр.Показатели.Количество() > 0 Или Параметр.Начисления.Количество() > 0 Тогда 
			ОбработатьИзменениеПоказателейНаСервере(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
    ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	ПоказателиСотрудников = Новый ФиксированноеСоответствие(Новый Соответствие);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияПриИзменении(Элемент)
	
	ДатаИзмененияПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЛьготыРаботников

&НаКлиенте
Процедура ЛьготыРаботниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Лев(Поле.Имя, 32) = "ЛьготыРаботниковПоказателиЛьготы" Тогда 
		
		НомерКолонки = Число(Сред(Поле.Имя, 33));
		
		ТекущиеДанные = Элементы.ЛьготыРаботников.ТекущиеДанные;
		Если ТекущиеДанные[ИмяКолонкиПоказателиЛьготы(НомерКолонки)] = "" Или Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда 
			Возврат;
		КонецЕсли;
		
		Льгота = Неопределено;
		Для Каждого КлючИЗначение Из НомераКолонокЛьгот Цикл 
			Если КлючИЗначение.Значение = НомерКолонки Тогда 
				Льгота = КлючИЗначение.Ключ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Сотрудник", ТекущиеДанные.Сотрудник);
		ПараметрыФормы.Вставить("Льгота", Льгота);
		ПараметрыФормы.Вставить("Размер", ТекущиеДанные[ИмяКолонкиРазмерЛьготы(НомерКолонки)]);
		ПараметрыФормы.Вставить("ПоказателиСотрудника", ПоказателиСотрудников.Получить(ТекущиеДанные.Сотрудник));
		
	    ОткрытьФорму("Документ.ИзменениеЛьготСотрудников.Форма.РедактированиеЛьготы", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыРаботниковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыРаботниковСотрудникПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЛьготыРаботников.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда 
		СотрудникПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИспользованиеЛьготыПриИзменении(Элемент)
	
	НомерКолонки = Число(Сред(Элемент.Имя, 36));
	ИспользованиеЛьготыПриИзмененииНаСервере(НомерКолонки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.ЛьготыРаботников,
		Объект.Организация,
		,
		НачалоМесяца(Объект.ДатаИзменения),
		КонецМесяца(Объект.ДатаИзменения),
		,
		АдресСпискаПодобранныхСотрудников());
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана организация.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана дата изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаИзменения", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоШтатномуРасписанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказатели(Команда)
	
	ПараметрыФормы = ПараметрыФормыЗаполнениеПоказателей(ПоказателиСотрудников, НомераКолонокЛьгот);
	ОткрытьФорму("ОбщаяФорма.ГрупповоеЗаполнениеПоказателейДокументов", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ДополнитьФорму();
	ДанныеВРеквизиты();
	УстановитьУсловноеОформление();
	
	ЗарплатаКадрыРасширенный.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму()
	
	// Добавление реквизитов
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтотОбъект, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтотОбъект, МассивИменРеквизитовФормы, "ЛьготыРаботников");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	Начисления.Наименование,
	               |	Начисления.КраткоеНаименование
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Льгота)
	               |	И НЕ Начисления.ВАрхиве
	               |	И НЕ Начисления.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Начисления.РеквизитДопУпорядочивания";
				   
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Сч = 1;
	НомераКолонок = Новый Соответствие;
	ДобавляемыеРеквизиты = Новый Массив;
	
	Пока Выборка.Следующий() Цикл 
		
		Наименование = ?(ЗначениеЗаполнено(Выборка.КраткоеНаименование), Выборка.КраткоеНаименование, Выборка.Наименование);
		ИспользованиеЛьготыРеквизит = Новый РеквизитФормы(
			ИмяКолонкиИспользованиеЛьготы(Сч), Новый ОписаниеТипов("Булево"), "ЛьготыРаботников", Наименование);
		ДобавляемыеРеквизиты.Добавить(ИспользованиеЛьготыРеквизит);	
			
		ТекущееИспользованиеЛьготыРеквизит = Новый РеквизитФормы(
			ИмяКолонкиТекущееИспользованиеЛьготы(Сч), Новый ОписаниеТипов("Булево"), "ЛьготыРаботников");
		ДобавляемыеРеквизиты.Добавить(ТекущееИспользованиеЛьготыРеквизит);	
		
		РазмерЛьготыРеквизит = Новый РеквизитФормы(
			ИмяКолонкиРазмерЛьготы(Сч), Новый ОписаниеТипов("Число"), "ЛьготыРаботников");
		ДобавляемыеРеквизиты.Добавить(РазмерЛьготыРеквизит);	
		
		ПоказателиЛьготыРеквизит = Новый РеквизитФормы(
			ИмяКолонкиПоказателиЛьготы(Сч), Новый ОписаниеТипов("Строка"), "ЛьготыРаботников");
		ДобавляемыеРеквизиты.Добавить(ПоказателиЛьготыРеквизит);	
			
		НомераКолонок.Вставить(Выборка.Ссылка, Сч);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	НомераКолонокЛьгот = Новый ФиксированноеСоответствие(НомераКолонок);
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(ЭтотОбъект, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	КоличествоЛьгот = НомераКолонокЛьгот.Количество();
	
	Для Сч = 1 По КоличествоЛьгот Цикл
		
		ИмяГруппы = "ГруппаЛьгота" + Сч;
		
		Если Элементы.Найти("ЛьготыРаботников" + ИмяГруппы) = Неопределено Тогда 
			
			ГруппаЛьгота = Элементы.Добавить("ЛьготыРаботников" + ИмяГруппы, Тип("ГруппаФормы"), Элементы.ЛьготыРаботников);
			ГруппаЛьгота.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаЛьгота.Группировка = ГруппировкаКолонок.ВЯчейке;
			
			Значение = Элементы.Добавить("ЛьготыРаботников" + ИмяКолонкиИспользованиеЛьготы(Сч), Тип("ПолеФормы"), ГруппаЛьгота);
			Значение.Вид = ВидПоляФормы.ПолеФлажка;
			Значение.ПутьКДанным = "ЛьготыРаботников." + ИмяКолонкиИспользованиеЛьготы(Сч);
			Значение.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			Значение.ОтображатьВШапке = Истина;
			Значение.УстановитьДействие("ПриИзменении", "Подключаемый_ИспользованиеЛьготыПриИзменении");
			
			Значение = Элементы.Добавить("ЛьготыРаботников" + ИмяКолонкиПоказателиЛьготы(Сч), Тип("ПолеФормы"), ГруппаЛьгота);
			Значение.Вид = ВидПоляФормы.ПолеНадписи;
			Значение.ГиперссылкаЯчейки = Истина;
			Значение.ПутьКДанным = "ЛьготыРаботников." + ИмяКолонкиПоказателиЛьготы(Сч);
			Значение.ОтображатьВШапке = Ложь;
			Значение.Ширина = 15;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизиты()
	
	Показатели = Новый Соответствие;
	
	Для Каждого ДанныеПоказателя Из Объект.Показатели Цикл 
		
		ПоказателиСотрудника = Показатели[ДанныеПоказателя.Сотрудник];
		Если ПоказателиСотрудника = Неопределено Тогда 
			ПоказателиСотрудника = Новый Соответствие;
			Показатели.Вставить(ДанныеПоказателя.Сотрудник, ПоказателиСотрудника);
		КонецЕсли;
		
		ПоказателиСотрудника.Вставить(ДанныеПоказателя.Показатель, ДанныеПоказателя.Значение);
		
	КонецЦикла;
	
	ПоказателиСотрудников = Новый ФиксированноеСоответствие(Показатели);
	
	ЛьготыРаботников.Очистить();
	
	Для Каждого ДанныеЛьготы Из Объект.Льготы Цикл 
		
		МассивСтрок = ЛьготыРаботников.НайтиСтроки(Новый Структура("Сотрудник", ДанныеЛьготы.Сотрудник));
		Если МассивСтрок.Количество() > 0 Тогда 
			СтрокаСотрудника = МассивСтрок[0];
		Иначе 
			СтрокаСотрудника = ЛьготыРаботников.Добавить();
			СтрокаСотрудника.Сотрудник = ДанныеЛьготы.Сотрудник;
		КонецЕсли;
		
		НомерКолонки = НомераКолонокЛьгот.Получить(ДанныеЛьготы.Льгота);
		Если НомерКолонки <> Неопределено Тогда 
			Если ДанныеЛьготы.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				СтрокаСотрудника[ИмяКолонкиТекущееИспользованиеЛьготы(НомерКолонки)] = Истина;
			Иначе 
				СтрокаСотрудника[ИмяКолонкиИспользованиеЛьготы(НомерКолонки)] = Истина;
				Если ДанныеЛьготы.Действие <> Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить Тогда
					СтрокаСотрудника[ИмяКолонкиТекущееИспользованиеЛьготы(НомерКолонки)] = Истина;
				КонецЕсли;
			КонецЕсли;
			СтрокаСотрудника[ИмяКолонкиРазмерЛьготы(НомерКолонки)] = ДанныеЛьготы.Размер;
			ЗаполнитьПредставлениеПоказателей(СтрокаСотрудника, ДанныеЛьготы.Льгота);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	ТекущийОбъект.Льготы.Очистить();
	ТекущийОбъект.Показатели.Очистить();
	
	Для Каждого ДанныеСотрудника Из ЛьготыРаботников Цикл
		
		СтрокаДобавлена = Ложь;
		
		Для Каждого КлючИЗначение Из НомераКолонокЛьгот Цикл
			
			Льгота = КлючИЗначение.Ключ;
			НомерКолонки = КлючИЗначение.Значение;
			
			ИспользованиеЛьготы = ДанныеСотрудника[ИмяКолонкиИспользованиеЛьготы(НомерКолонки)];
			ТекущееИспользованиеЛьготы = ДанныеСотрудника[ИмяКолонкиТекущееИспользованиеЛьготы(НомерКолонки)];
			
			Если Не ИспользованиеЛьготы И Не ТекущееИспользованиеЛьготы Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаДобавлена = Истина;
			 
			Действие = Неопределено;
			Если Не ИспользованиеЛьготы И ТекущееИспользованиеЛьготы Тогда 
				Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
			КонецЕсли;
			Если ИспользованиеЛьготы И Не ТекущееИспользованиеЛьготы Тогда
				Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
			КонецЕсли;
			
			НоваяСтрока = ТекущийОбъект.Льготы.Добавить();
			НоваяСтрока.Сотрудник = ДанныеСотрудника.Сотрудник;
			НоваяСтрока.Льгота = Льгота;
			НоваяСтрока.Действие = Действие;
			НоваяСтрока.Размер = ДанныеСотрудника[ИмяКолонкиРазмерЛьготы(НомерКолонки)];
			
			// Показатели льгот
			ПоказателиСотрудника = ПоказателиСотрудников.Получить(ДанныеСотрудника.Сотрудник);
			ОписаниеЛьготы = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Льгота);
			Для Каждого ОписаниеПоказателя Из ОписаниеЛьготы.Показатели Цикл
				
				Если Не ОписаниеПоказателя.ЗапрашиватьПриВводе
					И Не (ОписаниеПоказателя.ОтменяемыйПоказатель И Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТекущийОбъект.Показатели.Добавить();
				НоваяСтрока.Сотрудник = ДанныеСотрудника.Сотрудник;
				НоваяСтрока.Показатель = ОписаниеПоказателя.Показатель;
				НоваяСтрока.Действие = Действие;
				
				Если Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
					НоваяСтрока.Значение = 0;
				ИначеЕсли ПоказателиСотрудника <> Неопределено Тогда
					НоваяСтрока.Значение = ПоказателиСотрудника.Получить(ОписаниеПоказателя.Показатель);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не СтрокаДобавлена Тогда 
			НоваяСтрока = ТекущийОбъект.Льготы.Добавить();
			НоваяСтрока.Сотрудник = ДанныеСотрудника.Сотрудник;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеПоказателей(ДанныеСотрудника, Льгота)
	
	НомерКолонки = НомераКолонокЛьгот.Получить(Льгота);
	
	ПредставлениеПоказателей = "";
	
	Если Не ДанныеСотрудника[ИмяКолонкиИспользованиеЛьготы(НомерКолонки)] Тогда 
		ДанныеСотрудника[ИмяКолонкиПоказателиЛьготы(НомерКолонки)] = ПредставлениеПоказателей;
		Возврат;
	КонецЕсли;
	
	ОписаниеЛьготы = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Льгота);
	
	Если Не ОписаниеЛьготы.Рассчитывается Тогда 
		ПредставлениеПоказателей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Фиксированная сумма=%1'"), ДанныеСотрудника[ИмяКолонкиРазмерЛьготы(НомерКолонки)]);
		ДанныеСотрудника[ИмяКолонкиПоказателиЛьготы(НомерКолонки)] = ПредставлениеПоказателей;
		Возврат;
	КонецЕсли;
	
	ДобавленныеПоказатели = Новый Соответствие;
	ПоказателиСотрудника = ПоказателиСотрудников.Получить(ДанныеСотрудника.Сотрудник);
	
	Для Каждого ОписаниеПоказателя Из ОписаниеЛьготы.Показатели Цикл
		
		Если Не ОписаниеПоказателя.ЗапрашиватьПриВводе Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ДобавленныеПоказатели[ОписаниеПоказателя.Показатель] <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ДобавленныеПоказатели.Вставить(ОписаниеПоказателя.Показатель);
		
		ЗначениеПоказателя = 0;
		Если ПоказателиСотрудника <> Неопределено Тогда
			ЗначениеПоказателя = ПоказателиСотрудника.Получить(ОписаниеПоказателя.Показатель);
			Если ЗначениеПоказателя = Неопределено Тогда 
				ЗначениеПоказателя = 0;
			КонецЕсли;
		КонецЕсли;
		
		ПредставлениеПоказателей = ?(ПустаяСтрока(ПредставлениеПоказателей), "", ПредставлениеПоказателей + ", ")
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1=%2", ОписаниеПоказателя.Показатель, ЗначениеПоказателя);
		
	КонецЦикла;
	
	ДанныеСотрудника[ИмяКолонкиПоказателиЛьготы(НомерКолонки)] = ПредставлениеПоказателей;
	
КонецПроцедуры

&НаСервере
Функция ДанныеЛьготСотрудников(МассивСотрудников)
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СотрудникиДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл 
		НоваяСтрока = СотрудникиДаты.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ДатаСобытия = Объект.ДатаИзменения;
	КонецЦикла;
	
	ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Объект.Ссылка, СотрудникиДаты);
	ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(Объект.ДатаИзменения);
	
	СотрудникиДаты.Колонки.Удалить("ДатаСобытия");
	
	Для Каждого СтрокаСотрудника Из СотрудникиДаты Цикл 
		СтрокаСотрудника.Период = ВремяРегистрацииСотрудников.Получить(СтрокаСотрудника.Сотрудник);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Объект.Ссылка);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Сотрудник", "В", МассивСотрудников);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Начисление.КатегорияНачисленияИлиНеоплаченногоВремени", "=", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Льгота);
	
	ПараметрыПостроенияФОТ = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияФОТ.ФормироватьСПериодичностьДень = Ложь;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияФОТ.Отборы, "Сотрудник", "В", МассивСотрудников);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Начисление.КатегорияНачисленияИлиНеоплаченногоВремени", "=", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Льгота);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроенияФОТ);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Объект.Ссылка);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Сотрудник", "В", МассивСотрудников);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеНачисления.Сотрудник,
	|	НачисленияПоказатели.Показатель
	|ПОМЕСТИТЬ ВТПоказателиНачислений
	|ИЗ
	|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ПО ПлановыеНачисления.Начисление = НачисленияПоказатели.Ссылка
	|			И (ПлановыеНачисления.Используется)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиНачислений.Сотрудник КАК Сотрудник,
	|	ПоказателиНачислений.Показатель,
	|	ЗначенияПоказателей.Значение
	|ИЗ
	|	ВТПоказателиНачислений КАК ПоказателиНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПоказателей
	|		ПО ПоказателиНачислений.Сотрудник = ЗначенияПоказателей.Сотрудник
	|			И ПоказателиНачислений.Показатель = ЗначенияПоказателей.Показатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
	|	ПлановыеНачисления.Начисление КАК Льгота,
	|	ПлановыеНачисления.Начисление.Рассчитывается КАК Рассчитывается,
	|	ВЫБОР
	|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
	|			ТОГДА ПлановыеНачисления.Размер
	|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
	|	КОНЕЦ КАК Размер
	|ИЗ
	|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
	|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
	|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
	|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
	|ГДЕ
	|	ПлановыеНачисления.Используется
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
				   
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Показатели = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл 
		ПоказателиСотрудника = Новый Соответствие;
		Показатели.Вставить(Выборка.Сотрудник, ПоказателиСотрудника);
		Пока Выборка.Следующий() Цикл 
			ПоказателиСотрудника.Вставить(Выборка.Показатель, Выборка.Значение);
		КонецЦикла;
	КонецЦикла;
	
	Льготы = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл 
		ЛьготыСотрудника = Новый Соответствие;
		Льготы.Вставить(Выборка.Сотрудник, ЛьготыСотрудника);
		Пока Выборка.Следующий() Цикл 
			ЛьготыСотрудника.Вставить(Выборка.Льгота, Выборка.Размер);
		КонецЦикла;
	КонецЦикла;
	
	ДанныеЛьгот = Новый Структура("Льготы, Показатели", Льготы, Показатели);
	
	Возврат ДанныеЛьгот;
	
КонецФункции

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(ОбщегоНазначения.ВыгрузитьКолонку(ЛьготыРаботников, "Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаПодбораНаСервере(Сотрудники)
	
	ТекущиеСотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ЛьготыРаботников, "Сотрудник");
	НовыеСотрудники = ОбщегоНазначенияКлиентСервер.СократитьМассив(Сотрудники, ТекущиеСотрудники);
	
	ДанныеЛьгот = ДанныеЛьготСотрудников(НовыеСотрудники);
	
	Показатели = Новый Соответствие(ПоказателиСотрудников);
	Для Каждого ДанныеСотрудника Из ДанныеЛьгот.Показатели Цикл 
		ПоказателиСотрудника = Показатели[ДанныеСотрудника.Ключ];
		Если ПоказателиСотрудника = Неопределено Тогда 
			ПоказателиСотрудника = Новый Соответствие;
			Показатели.Вставить(ДанныеСотрудника.Ключ, ПоказателиСотрудника);
		КонецЕсли;
		Для Каждого ДанныеПоказателя Из ДанныеСотрудника.Значение Цикл 
			ПоказателиСотрудника.Вставить(ДанныеПоказателя.Ключ, ДанныеПоказателя.Значение);
		КонецЦикла;
	КонецЦикла;
	ПоказателиСотрудников = Новый ФиксированноеСоответствие(Показатели);
	
	Для Каждого Сотрудник Из НовыеСотрудники Цикл
		НоваяСтрока = ЛьготыРаботников.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		ЗаполнитьДанныеСотрудника(НоваяСтрока, ДанныеЛьгот)
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСотрудника(ДанныеСотрудника, ДанныеЛьгот)
	
	ЛьготыСотрудника = ДанныеЛьгот.Льготы[ДанныеСотрудника.Сотрудник];
	
	Для Каждого КлючИЗначение Из НомераКолонокЛьгот Цикл 
		
		Льгота = КлючИЗначение.Ключ;
		НомерКолонки = КлючИЗначение.Значение;
		
		РазмерЛьготы = Неопределено;
		Если ЛьготыСотрудника <> Неопределено Тогда 
			РазмерЛьготы = ЛьготыСотрудника[Льгота];
		КонецЕсли;
		
		Если РазмерЛьготы = Неопределено Тогда
			ДанныеСотрудника[ИмяКолонкиИспользованиеЛьготы(НомерКолонки)] = Ложь;
			ДанныеСотрудника[ИмяКолонкиТекущееИспользованиеЛьготы(НомерКолонки)] = Ложь;
			ДанныеСотрудника[ИмяКолонкиРазмерЛьготы(НомерКолонки)] = 0;
		Иначе 
			ДанныеСотрудника[ИмяКолонкиИспользованиеЛьготы(НомерКолонки)] = Истина;
			ДанныеСотрудника[ИмяКолонкиТекущееИспользованиеЛьготы(НомерКолонки)] = Истина;
			ДанныеСотрудника[ИмяКолонкиРазмерЛьготы(НомерКолонки)] = РазмерЛьготы;
		КонецЕсли;
		
		ЗаполнитьПредставлениеПоказателей(ДанныеСотрудника, Льгота);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ДанныеСотрудника = ЛьготыРаботников.НайтиПоИдентификатору(Элементы.ЛьготыРаботников.ТекущаяСтрока);
	
	МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСотрудника.Сотрудник);
	ДанныеЛьгот = ДанныеЛьготСотрудников(МассивСотрудников);
	
	Показатели = Новый Соответствие(ПоказателиСотрудников);
	ПоказателиСотрудника = Показатели[ДанныеСотрудника.Сотрудник];
	Если ПоказателиСотрудника = Неопределено Тогда 
		ПоказателиСотрудника = Новый Соответствие;
		Показатели.Вставить(ДанныеСотрудника.Сотрудник, ПоказателиСотрудника);
	КонецЕсли;
	
	ДанныеПоказателейСотрудника = ДанныеЛьгот.Показатели[ДанныеСотрудника.Сотрудник];
	Если ДанныеПоказателейСотрудника <> Неопределено Тогда 
		Для Каждого ДанныеПоказателя Из ДанныеПоказателейСотрудника Цикл 
			ПоказателиСотрудника.Вставить(ДанныеПоказателя.Ключ, ДанныеПоказателя.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПоказателиСотрудников = Новый ФиксированноеСоответствие(Показатели);
	
	ЗаполнитьДанныеСотрудника(ДанныеСотрудника, ДанныеЛьгот);
	
КонецПроцедуры

&НаСервере
Процедура ИспользованиеЛьготыПриИзмененииНаСервере(НомерКолонки)
	
	ДанныеСотрудника = ЛьготыРаботников.НайтиПоИдентификатору(Элементы.ЛьготыРаботников.ТекущаяСтрока);
	
	Льгота = Неопределено;
	Для Каждого КлючИЗначение Из НомераКолонокЛьгот Цикл 
		Если КлючИЗначение.Значение = НомерКолонки Тогда 
			Льгота = КлючИЗначение.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьПредставлениеПоказателей(ДанныеСотрудника, Льгота);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПоказателейЛьготыНаСервере(ДанныеЛьготы)
	
	Отбор = Новый Структура("Сотрудник", ДанныеЛьготы.Сотрудник);
	НайденныеСтроки = ЛьготыРаботников.НайтиСтроки(Отбор);
	
	ДанныеСотрудника = НайденныеСтроки[0];
	
	НомерКолонки = НомераКолонокЛьгот.Получить(ДанныеЛьготы.Льгота);
	
	Если ДанныеЛьготы.Размер = Неопределено Тогда
		
		Показатели = Новый Соответствие(ПоказателиСотрудников);
		
		ПоказателиСотрудника = Показатели[ДанныеСотрудника.Сотрудник];
		Если ПоказателиСотрудника = Неопределено Тогда 
			ПоказателиСотрудника = Новый Соответствие;
			Показатели.Вставить(ДанныеСотрудника.Сотрудник, ПоказателиСотрудника);
		КонецЕсли;
		
		Для Каждого ДанныеПоказателя Из ДанныеЛьготы.ПоказателиСотрудника Цикл 
			ПоказателиСотрудника.Вставить(ДанныеПоказателя.Ключ, ДанныеПоказателя.Значение);
		КонецЦикла;
		
		ПоказателиСотрудников = Новый ФиксированноеСоответствие(Показатели);
		
	Иначе 
		
		ДанныеСотрудника[ИмяКолонкиРазмерЛьготы(НомерКолонки)] = ДанныеЛьготы.Размер;
		
	КонецЕсли;
	
	ДанныеСотрудников = Новый Массив;
	ДанныеСотрудников.Добавить(ДанныеСотрудника);
	
	РассчитатьРазмерЛьготСотрудников(ДанныеСотрудников);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыФормыЗаполнениеПоказателей(ПоказателиСотрудников, НомераКолонокЛьгот) 
	
	ПараметрыФормы = Новый Структура;
	
	Показатели = Новый Соответствие;
	Для Каждого ДанныеСотрудника Из ПоказателиСотрудников Цикл 
		Для Каждого ДанныеПоказателя Из ДанныеСотрудника.Значение Цикл 
			Показатели.Вставить(ДанныеПоказателя.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("МассивПоказателей", ОбщегоНазначения.ВыгрузитьКолонку(Показатели, "Ключ"));
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Льготы", ОбщегоНазначения.ВыгрузитьКолонку(НомераКолонокЛьгот, "Ключ"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.Ссылка В(&Льготы)
	               |	И НЕ Начисления.Рассчитывается";
				   
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	МассивНачислений = Новый Массив;
	Пока Выборка.Следующий() Цикл 
		МассивНачислений.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("МассивНачислений", МассивНачислений);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеПоказателейНаСервере(НачисленияПоказатели)
	
	ЗначенияПоказателей = НачисленияПоказатели.Показатели;
	
	Если ЗначенияПоказателей.Количество() > 0 Тогда 
		Показатели = Новый Соответствие(ПоказателиСотрудников);
		Для Каждого ДанныеСотрудника Из Показатели Цикл 
			Для Каждого ДанныеПоказателя Из ДанныеСотрудника.Значение Цикл
				ЗначениеПоказателя = ЗначенияПоказателей[ДанныеПоказателя.Ключ];
				Если ЗначениеПоказателя <> Неопределено Тогда
					ДанныеСотрудника.Значение.Вставить(ДанныеПоказателя.Ключ, ЗначениеПоказателя);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ПоказателиСотрудников = Новый ФиксированноеСоответствие(Показатели);
	КонецЕсли;
	
	РазмерНачислений = НачисленияПоказатели.Начисления;
	
	Если РазмерНачислений.Количество() > 0 Тогда 
		Для Каждого СтрокаСотрудника Из ЛьготыРаботников Цикл 
			Для Каждого КлючИЗначение Из РазмерНачислений Цикл
				НомерКолонки = НомераКолонокЛьгот.Получить(КлючИЗначение.Ключ);
				Если СтрокаСотрудника[ИмяКолонкиИспользованиеЛьготы(НомерКолонки)] Тогда 
					СтрокаСотрудника[ИмяКолонкиРазмерЛьготы(НомерКолонки)] = КлючИЗначение.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	РассчитатьРазмерЛьготСотрудников(ЛьготыРаботников);
	
КонецПроцедуры

&НаСервере
Процедура ДатаИзмененияПриИзмененииНаСервере()
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ЛьготыРаботников, "Сотрудник");
	ДанныеЛьгот = ДанныеЛьготСотрудников(МассивСотрудников);
	
	Показатели = Новый Соответствие;
	Для Каждого ДанныеСотрудника Из ДанныеЛьгот.Показатели Цикл 
		ПоказателиСотрудника = Показатели[ДанныеСотрудника.Ключ];
		Если ПоказателиСотрудника = Неопределено Тогда 
			ПоказателиСотрудника = Новый Соответствие;
			Показатели.Вставить(ДанныеСотрудника.Ключ, ПоказателиСотрудника);
		КонецЕсли;
		Для Каждого ДанныеПоказателя Из ДанныеСотрудника.Значение Цикл 
			ПоказателиСотрудника.Вставить(ДанныеПоказателя.Ключ, ДанныеПоказателя.Значение);
		КонецЦикла;
	КонецЦикла;
	ПоказателиСотрудников = Новый ФиксированноеСоответствие(Показатели);
	
	Для Каждого ДанныеСотрудника Из ЛьготыРаботников Цикл 
		ЗаполнитьДанныеСотрудника(ДанныеСотрудника, ДанныеЛьгот)
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШтатномуРасписанию();
	
	ЛьготыРаботников.Очистить();
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Объект.Организация;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = Объект.Дата;
	ПараметрыПолученияСотрудников.КадровыеДанные = "Подразделение,Должность,ДолжностьПоШтатномуРасписанию";
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	СотрудникиОрганизации.Колонки.ДолжностьПоШтатномуРасписанию.Имя = "Позиция";
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиОрганизации, "Сотрудник");
	ТекущиеДанныеЛьгот = ДанныеЛьготСотрудников(МассивСотрудников).Льготы;
	
	ТаблицаОписанийПозиций = ЛьготыСотрудников.ТаблицаОписанийПозиций();
	Для Каждого ДанныеСотрудника Из СотрудникиОрганизации Цикл 
		НоваяСтрока = ТаблицаОписанийПозиций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСотрудника);
		НоваяСтрока.Организация = Объект.Организация;
	КонецЦикла;
	
	Запрос = ЛьготыСотрудников.ЗапросДанныеЛьгот(ТаблицаОписанийПозиций);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеПоказателейПозиций = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[5].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Позиция") Цикл 
		ДанныеПоказателейПозиции = Новый Соответствие;
		Пока Выборка.Следующий() Цикл 
			ДанныеПоказателейПозиции.Вставить(Выборка.Показатель, Выборка.Значение);
		КонецЦикла;
		ДанныеПоказателейПозиций.Вставить(Выборка.Позиция, ДанныеПоказателейПозиции);
	КонецЦикла;
	
	Показатели = Новый Соответствие;
	Для Каждого ДанныеСотрудника Из СотрудникиОрганизации Цикл
		ПоказателиСотрудника = ДанныеПоказателейПозиций[ДанныеСотрудника.Позиция];
		Если ПоказателиСотрудника = Неопределено Тогда 
			ПоказателиСотрудника = Новый Соответствие;
		КонецЕсли;
		Показатели.Вставить(ДанныеСотрудника.Сотрудник, ПоказателиСотрудника);
	КонецЦикла;
	
	ПоказателиСотрудников = Новый ФиксированноеСоответствие(Показатели);
	
	ДанныеЛьготПозиций = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[4].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Позиция") Цикл 
		ДанныеЛьгот = Новый Соответствие;
		Пока Выборка.Следующий() Цикл 
			ДанныеЛьгот.Вставить(Выборка.Льгота, Выборка.Размер);
		КонецЦикла;
		ДанныеЛьготПозиций.Вставить(Выборка.Позиция, ДанныеЛьгот);
	КонецЦикла;
	
	Для Каждого ДанныеСотрудника Из СотрудникиОрганизации Цикл
		
		СтрокаСотрудника = ЛьготыРаботников.Добавить();
		СтрокаСотрудника.Сотрудник = ДанныеСотрудника.Сотрудник;
		
		ЛьготыСотрудника = ДанныеЛьготПозиций[ДанныеСотрудника.Позиция];
		ТекущиеЛьготыСотрудника = ТекущиеДанныеЛьгот[ДанныеСотрудника.Сотрудник];
		
		Для Каждого КлючИЗначение Из НомераКолонокЛьгот Цикл 
			
			Льгота = КлючИЗначение.Ключ;
			НомерКолонки = КлючИЗначение.Значение;
			
			РазмерЛьготы = Неопределено;
			Если ЛьготыСотрудника <> Неопределено Тогда 
				РазмерЛьготы = ЛьготыСотрудника[Льгота];
			КонецЕсли;
			
			Если РазмерЛьготы = Неопределено Тогда
				СтрокаСотрудника[ИмяКолонкиИспользованиеЛьготы(НомерКолонки)] = Ложь;
				СтрокаСотрудника[ИмяКолонкиРазмерЛьготы(НомерКолонки)] = 0;
			Иначе 
				СтрокаСотрудника[ИмяКолонкиИспользованиеЛьготы(НомерКолонки)] = Истина;
				СтрокаСотрудника[ИмяКолонкиРазмерЛьготы(НомерКолонки)] = РазмерЛьготы;
			КонецЕсли;
			
			ТекущееИспользование = Ложь;
			Если ТекущиеЛьготыСотрудника <> Неопределено Тогда 
				ТекущееИспользование = ТекущиеЛьготыСотрудника[Льгота] <> Неопределено;
			КонецЕсли;
			
			СтрокаСотрудника[ИмяКолонкиТекущееИспользованиеЛьготы(НомерКолонки)] = ТекущееИспользование;
			
			ЗаполнитьПредставлениеПоказателей(СтрокаСотрудника, Льгота);
			
		КонецЦикла;
		
	КонецЦикла;
	
	РассчитатьРазмерЛьготСотрудников(ЛьготыРаботников);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРазмерЛьготСотрудников(ДанныеСотрудников)	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Объект.Организация);
	ТаблицаНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ТаблицаПоказателей = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
	РассчитываемыеОбъекты = Новый Соответствие;	
	
	Для Каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.Сотрудник) Тогда 
			Продолжить;
		КонецЕсли;
				
		Для Каждого КлючИЗначение Из НомераКолонокЛьгот Цикл 
			
			Льгота = КлючИЗначение.Ключ;
			НомерКолонки = КлючИЗначение.Значение;
			
			Если Не ДанныеСотрудника[ИмяКолонкиИспользованиеЛьготы(НомерКолонки)] Тогда 
				Продолжить;
			КонецЕсли;
			
			ОписаниеЛьготы = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Льгота);
			
			Если Не ОписаниеЛьготы.ЛьготаУчитываетсяПриРасчетеЗарплаты Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаЛьготы = ТаблицаНачислений.Добавить();
			СтрокаЛьготы.Сотрудник = ДанныеСотрудника.Сотрудник;
			СтрокаЛьготы.ГоловнаяОрганизация = ГоловнаяОрганизация;
			СтрокаЛьготы.Период = Объект.ДатаИзменения;

			СтрокаЛьготы.Начисление = Льгота;
			СтрокаЛьготы.ДокументОснование = Неопределено;
			СтрокаЛьготы.Размер = ДанныеСотрудника[ИмяКолонкиРазмерЛьготы(НомерКолонки)];
			
		КонецЦикла;
		
		ПоказателиСотрудника = ПоказателиСотрудников.Получить(ДанныеСотрудника.Сотрудник);
		Если ПоказателиСотрудника <> Неопределено Тогда 
			Для Каждого ДанныеПоказателя Из ПоказателиСотрудника Цикл 
				СтрокаПоказателя = ТаблицаПоказателей.Добавить();
				СтрокаПоказателя.Сотрудник = ДанныеСотрудника.Сотрудник;
				СтрокаПоказателя.ГоловнаяОрганизация = ГоловнаяОрганизация;
				СтрокаПоказателя.Период = Объект.ДатаИзменения;
				СтрокаПоказателя.Показатель = ДанныеПоказателя.Ключ;
				СтрокаПоказателя.ДокументОснование = Неопределено;
				СтрокаПоказателя.Значение = ДанныеПоказателя.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);	
	РассчитанныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ТаблицаНачислений, ТаблицаПоказателей);	
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
	
		РассчитанныеЛьготы = РассчитанныеДанные.ПлановыйФОТ.НайтиСтроки(Новый Структура("Сотрудник", ДанныеСотрудника.Сотрудник));
		Если РассчитанныеЛьготы.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОписаниеЛьготы Из РассчитанныеЛьготы Цикл
			НомерКолонки = НомераКолонокЛьгот.Получить(ОписаниеЛьготы.Начисление);
			ДанныеСотрудника[ИмяКолонкиРазмерЛьготы(НомерКолонки)] = ОписаниеЛьготы.ВкладВФОТ;
			ЗаполнитьПредставлениеПоказателей(ДанныеСотрудника, ОписаниеЛьготы.Начисление);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Для Каждого КлючИЗначение Из НомераКолонокЛьгот Цикл 
		
		НомерКолонки = КлючИЗначение.Значение;
	
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УдаленныеСтроки);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отменено'"));
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЛьготыРаботников" + ИмяКолонкиПоказателиЛьготы(НомерКолонки));	
		
		ГруппаОтбораИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛьготыРаботников" + "." +ИмяКолонкиТекущееИспользованиеЛьготы(НомерКолонки));
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛьготыРаботников" + "." +ИмяКолонкиИспользованиеЛьготы(НомерКолонки));
		ЭлементОтбора.ПравоеЗначение = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиИспользованиеЛьготы(НомерКолонки)
	
	Возврат "ИспользованиеЛьготы" + НомерКолонки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиТекущееИспользованиеЛьготы(НомерКолонки)
	
	Возврат "ТекущееИспользованиеЛьготы" + НомерКолонки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиРазмерЛьготы(НомерКолонки)
	
	Возврат "РазмерЛьготы" + НомерКолонки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиПоказателиЛьготы(НомерКолонки)
	
	Возврат "ПоказателиЛьготы" + НомерКолонки;
	
КонецФункции

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("ЛьготыРаботников");
	Массив.Добавить("Объект.Льготы");
	Массив.Добавить("Объект.Показатели");
	Массив.Добавить("Объект.ФизическиеЛица");
	
	Возврат Массив;
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", Нстр("ru = 'организации'")));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#КонецОбласти
