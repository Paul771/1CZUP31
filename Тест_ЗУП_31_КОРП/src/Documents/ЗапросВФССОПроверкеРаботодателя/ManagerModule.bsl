
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_Запрос";
	КомандаПечати.Представление = НСтр("ru = 'Запрос'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Вызывается при печати документа.
//
// Параметры:
//   См. одноименные параметры процедуры УправлениеПечатьюПереопределяемый.ПриПечати.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	МассивДопустимыхОбъектов = Новый Массив;
	Для каждого ДопустимыйОбъект Из МассивОбъектов Цикл
		Если ТипЗнч(ДопустимыйОбъект) = Тип("ДокументСсылка.ЗапросВФССОПроверкеРаботодателя") Тогда
			МассивДопустимыхОбъектов.Добавить(ДопустимыйОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДопустимыхОбъектов.Количество() > 0 Тогда
		НапечататьМакет(МассивДопустимыхОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, "ПФ_MXL_Запрос", Нстр("ru = 'Запрос'"));
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НапечататьМакет(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ИмяМакета, Синоним)
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета) Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, "ПФ_MXL_Запрос", НСтр("ru = 'Запрос'"), ПечатьЗапроса(МассивОбъектов, ОбъектыПечати, ИмяМакета));
	КонецЕсли;
	
КонецПроцедуры    

Функция ПечатьЗапроса(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗапросВФССОПроверкеРаботодателя";
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	
	// запоминаем области макета
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗапросВФССОПроверкеРаботодателя." + ИмяМакета);
	ОбластьМакетаШапка	= Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ОбластьМакетаПодвал	= Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета 		= Макет.ПолучитьОбласть("Страхователь"); 
	ПустаяОбластьМакета = Макет.ПолучитьОбласть("ПустойСтрахователь"); 

	// получаем данные для печати
	ВыборкаДляШапкиИПодвала = СформироватьЗапросДляПечати(МассивОбъектов).Выбрать();
	ВыборкаСтрок = СформироватьЗапросПоСтрахователи(МассивОбъектов).Выбрать();
	
	Отказ = Ложь; 
	
	ПервыйДокумент = Истина;
	
	Валюта = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	Пока ВыборкаДляШапкиИПодвала.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			// Все документы нужно выводить на разных страницах.
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		ПроверитьЗаполнениеШапки(ВыборкаДляШапкиИПодвала, Отказ);
		
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
		
		СтруктураАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(ВыборкаДляШапкиИПодвала.АдресОрганизации,
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
		УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса, ОбластьМакетаШапка.Параметры.АдресОрганизации);
		
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаШапка.Параметры.НаименованиеТерриториальногоОрганаФСС = СокрЛП(ОбластьМакетаШапка.Параметры.НаименованиеТерриториальногоОрганаФСС);
		ОбластьМакетаШапка.Параметры.ВидПособия = НРег(ОбластьМакетаШапка.Параметры.ВидПособия);
		
		ДанныеАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(ВыборкаДляШапкиИПодвала.Адрес, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
		Если ДанныеАдреса <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ОбластьМакетаШапка.Параметры, ДанныеАдреса);
		КонецЕсли;
				
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
		
		СписокФизлиц = Новый Массив;
		СписокФизлиц.Добавить(ВыборкаДляШапкиИПодвала.Руководитель);
				
		КадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокФизлиц, "ИОФамилия");
		
		ДанныеРуководителя = КадровыеДанныеФизическихЛиц.Найти(ВыборкаДляШапкиИПодвала.Руководитель, "ФизическоеЛицо");
		Если НЕ ДанныеРуководителя = Неопределено Тогда
		   ОбластьМакетаПодвал.Параметры["ФИОРуководителя"] = ДанныеРуководителя.ИОФамилия;
		КонецЕсли;
				
		ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
		
		ВыведеноСтрок = 0;
		
		СтруктураПоиска = Новый Структура("Ссылка", ВыборкаДляШапкиИПодвала.Ссылка);
		
		Пока ВыборкаСтрок.НайтиСледующий(СтруктураПоиска) Цикл
			
			ПроверитьЗаполнениеСтрокиСтрахователи(ВыборкаСтрок, Отказ);
			
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
			ОбластьМакета.Параметры.СтраховательНаименование = СокрЛП(ОбластьМакета.Параметры.СтраховательНаименование);
			ОбластьМакета.Параметры.НаименованиеТерриториальногоОрганаФСС = СокрЛП(ОбластьМакета.Параметры.НаименованиеТерриториальногоОрганаФСС);
	        ОбластьМакета.Параметры.ВыведеноСтрок = ВыведеноСтрок;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		Пока ВыведеноСтрок < 3 Цикл
			ВыведеноСтрок = ВыведеноСтрок + 1;
			ПустаяОбластьМакета.Параметры.ВыведеноСтрок = ВыведеноСтрок;
			ПустаяОбластьМакета.Параметры.ПериодРаботыС = '00010101';
			ПустаяОбластьМакета.Параметры.ПериодРаботыПо = '00010101';
	    	ТабДокумент.Вывести(ПустаяОбластьМакета);
		КонецЦикла;

		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляШапкиИПодвала.Ссылка);
				
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Новый ТабличныйДокумент;
	Иначе
		Возврат ТабДокумент;
	КонецЕсли;

КонецФункции

Функция СформироватьЗапросДляПечати(МассивОбъектов)
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ОписаниеИсточникаДанных = ПерсонифицированныйУчет.ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ.ЗапросВФССОПроверкеРаботодателя";
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "Дата";
	ОписаниеИсточникаДанных.СписокСсылок = МассивОбъектов;

	ПерсонифицированныйУчет.СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументЗапрос.Дата,
	|	ДокументЗапрос.Номер,
	|	ДокументЗапрос.Организация,
	|	ДокументЗапрос.Ссылка,
	|	ДокументЗапрос.Сотрудник,
	|	ДокументЗапрос.Руководитель,
	|	Должности.Наименование КАК Должность,
	|	ДокументЗапрос.РегистрационныйНомерФСС,
	|	ДокументЗапрос.ДополнительныйКодФСС,
	|	ДокументЗапрос.КодПодчиненностиФСС,
	|	ДокументЗапрос.НаименованиеТерриториальногоОрганаФСС,
	|	ДокументЗапрос.СтраховойНомерПФР,
	|	ДокументЗапрос.Фамилия + "" "" + ДокументЗапрос.Имя + "" "" + ДокументЗапрос.Отчество КАК ФИО,
	|	Организации.НаименованиеПолное КАК НазваниеОрганизации,
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП,
	|	ДокументЗапрос.Адрес,
	|	ДокументЗапрос.АдресОрганизации,
	|	ДокументЗапрос.ВидПособия
	|ИЗ
	|	Документ.ЗапросВФССОПроверкеРаботодателя КАК ДокументЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК Организации
	|		ПО ДокументЗапрос.Организация = Организации.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|		ПО ДокументЗапрос.ДолжностьРуководителя = Должности.Ссылка
	|ГДЕ
	|	ДокументЗапрос.Ссылка В(&МассивОбъектов)";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоСтрахователи(МассивОбъектов) 

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Страхователи.НомерСтроки,
	|	Страхователи.Страхователь,
	|	Страхователи.ПериодРаботыПо,
	|	Страхователи.ПериодРаботыС,
	|	Страхователи.РегистрационныйНомерФСС,
	|	Страхователи.ДополнительныйКодФСС,
	|	Страхователи.КодПодчиненностиФСС,
	|	Страхователи.НаименованиеТерриториальногоОрганаФСС,
	|	Страхователи.ИНН,
	|	Страхователи.КПП,
	|	Страхователи.Ссылка
	|ПОМЕСТИТЬ ВТСтрокиДокумента
	|ИЗ
	|	Документ.ЗапросВФССОПроверкеРаботодателя.Страхователи КАК Страхователи
	|ГДЕ
	|	Страхователи.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Страхователи.НомерСтроки,
	|	ПовторныеСтроки.НомерСтроки КАК НомерПовторнойСтроки,
	|	Страхователи.Страхователь КАК Страхователь,
	|	Страхователи.Страхователь.НаименованиеПолное КАК СтраховательНаименование,
	|	Страхователи.ПериодРаботыПо,
	|	Страхователи.ПериодРаботыС,
	|	Страхователи.РегистрационныйНомерФСС,
	|	Страхователи.ДополнительныйКодФСС,
	|	Страхователи.КодПодчиненностиФСС,
	|	Страхователи.НаименованиеТерриториальногоОрганаФСС,
	|	Страхователи.ИНН,
	|	Страхователи.КПП,
	|	Страхователи.Ссылка
	|ИЗ
	|	ВТСтрокиДокумента КАК Страхователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ПовторныеСтроки
	|		ПО Страхователи.НомерСтроки < ПовторныеСтроки.НомерСтроки
	|			И Страхователи.Страхователь = ПовторныеСтроки.Страхователь
	|			И Страхователи.Ссылка = ПовторныеСтроки.Ссылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	//  Организация
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указана организация'"), , , , Отказ);
	КонецЕсли;
	
	// Сотрудник
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран сотрудник'"), , , , Отказ);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФИО) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указано ФИО сотрудника'"), , , , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидПособия) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан вид пособия'"), , , , Отказ);
	КонецЕсли;
	
	//  ФСС
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НаименованиеТерриториальногоОрганаФСС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указано наименование территориального органа ФСС'"), , , , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РегистрационныйНомерФСС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан регистрационный номер в ФСС'"), , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()    

Процедура ПроверитьЗаполнениеСтрокиСтрахователи(ВыборкаПоСтрокамДокумента, Отказ) 

	СтрокаНачалаСообщенияОбОшибке =
		НСтр("ru = 'В строке номер'") + " " + СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) + " " + НСтр("ru = 'табл. части ""Страхователи"":'") + " ";
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Страхователь) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + НСтр("ru = 'не указан страхователь'"), , , , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРаботыПо) Или НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРаботыС) Или ВыборкаПоСтрокамДокумента.ПериодРаботыС > ВыборкаПоСтрокамДокумента.ПериодРаботыПо Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке +  НСтр("ru = 'неверно указан период работы у страхователя'"), , , , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РегистрационныйНомерФСС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке +  НСтр("ru = 'не указан регистрационный номер в ФСС'"), , , , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НаименованиеТерриториальногоОрганаФСС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке +  НСтр("ru = 'не указано наименование территориального органа ФСС'"), , , , Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерПовторнойСтроки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке +  НСтр("ru = 'указанный страхователь повторяется в строке'") + " " + ВыборкаПоСтрокамДокумента.НомерПовторнойСтроки, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиСтрахователи()

#Область МеханизмФиксацииИзменений

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	
	ПараметрыФиксацииВторичныхДанных = ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксацииВторичныхДанных(ФиксацияОписаниеФиксацииРеквизитов());
	Возврат ПараметрыФиксацииВторичныхДанных;
	
КонецФункции

Функция ФиксацияОписаниеФиксацииРеквизитов()
	
	ОписаниеФиксацииРеквизитов = Новый Соответствие;
	
	// Данные работодателя
	ОписаниеФиксацииРеквизитов.Вставить("НаименованиеТерриториальногоОрганаФСС", 	ФиксацияОписаниеФиксацииРеквизита("НаименованиеТерриториальногоОрганаФСС","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("Руководитель", 							ФиксацияОписаниеФиксацииРеквизита("Руководитель","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("ДолжностьРуководителя", 					ФиксацияОписаниеФиксацииРеквизита("ДолжностьРуководителя","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("АдресОрганизации", 						ФиксацияОписаниеФиксацииРеквизита("АдресОрганизации","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("РегистрационныйНомерФСС", 					ФиксацияОписаниеФиксацииРеквизита("РегистрационныйНомерФСС","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("ДополнительныйКодФСС", 					ФиксацияОписаниеФиксацииРеквизита("ДополнительныйКодФСС","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("КодПодчиненностиФСС", 						ФиксацияОписаниеФиксацииРеквизита("КодПодчиненностиФСС","РеквизитыОрганизации", "Организация"));
	
	// Данные сотрудника
	ОписаниеФиксацииРеквизитов.Вставить("Фамилия", 									ФиксацияОписаниеФиксацииРеквизита("Фамилия","ФИОСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("Имя", 										ФиксацияОписаниеФиксацииРеквизита("Имя","ФИОСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("Отчество",	 								ФиксацияОписаниеФиксацииРеквизита("Отчество","ФИОСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("СтраховойНомерПФР", 						ФиксацияОписаниеФиксацииРеквизита("СтраховойНомерПФР","РеквизитыСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("Адрес", 									ФиксацияОписаниеФиксацииРеквизита("Адрес","РеквизитыСотрудника", "Сотрудник"));
		
	Возврат Новый ФиксированноеСоответствие(ОписаниеФиксацииРеквизитов);  
	
КонецФункции 

Функция ФиксацияОписаниеФиксацииРеквизита(ИмяРеквизита, 
	ИмяГруппы, 
	ОснованиеЗаполнения,
	РеквизитСтроки = Ложь,
	ФиксацияГруппы = Ложь, 
	Путь = "",
	Используется = Истина, 
	ОтображатьПредупреждение = Истина, 
	СтрокаПредупреждения =  "")
	
	ФиксацияРеквизита = ФиксацияВторичныхДанныхВДокументах.СтруктураПараметровОписанияФиксацииРеквизитов();
	ФиксацияРеквизита.Вставить("ИмяРеквизита", ИмяРеквизита);
	ФиксацияРеквизита.Вставить("Используется", Используется);
	ФиксацияРеквизита.Вставить("ИмяГруппы", ИмяГруппы);
	ФиксацияРеквизита.Вставить("ФиксацияГруппы", ФиксацияГруппы);
	ФиксацияРеквизита.Вставить("ОснованиеЗаполнения", ОснованиеЗаполнения);
	ФиксацияРеквизита.Вставить("Путь", Путь);
	ФиксацияРеквизита.Вставить("ОтображатьПредупреждение", ОтображатьПредупреждение);
	Если СтрокаПредупреждения <> "" Тогда
		ФиксацияРеквизита.Вставить("СтрокаПредупреждения", СтрокаПредупреждения);
	КонецЕсли;
	ФиксацияРеквизита.Вставить("РеквизитСтроки", РеквизитСтроки);
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксацииРеквизита(ФиксацияРеквизита);
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#КонецЕсли