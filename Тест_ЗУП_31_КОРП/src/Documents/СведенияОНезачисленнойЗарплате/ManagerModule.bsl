#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет есть ли документы по ведомости.
// 
// Параметры:
//	Ведомость - ДокументСсылка
//	Проведен  - Булево, Неопределено - если указано Неопределено, то проведенность не важна.
//
// Возвращаемое значение:
//	Булево - Истина - есть документ по ведомости.
//
Функция ЕстьПоВедомости(Ведомость, Проведен = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.УстановитьПараметр("Проведен", Проведен);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьНезачисленияПоВедомости
	|ИЗ
	|	Документ.СведенияОНезачисленнойЗарплате КАК НезачислениеЗарплаты
	|ГДЕ
	|	НезачислениеЗарплаты.Ведомость = &Ведомость
	|	И НЕ НезачислениеЗарплаты.ПометкаУдаления";
	Если Проведен <> Неопределено Тогда
		Схема = Новый СхемаЗапроса();
		Схема.УстановитьТекстЗапроса(Запрос.Текст);
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
			?(Проведен, "НезачислениеЗарплаты.Проведен", "НЕ НезачислениеЗарплаты.Проведен"));
		Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	КонецЕсли;	
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Выбирает документы по ведомости.
// 
// Параметры:
//	Ведомость - ДокументСсылка
//	Проведен  - Булево, Неопределено - если указано Неопределено, то проведенность не важна.
//
// Возвращаемое значение:
//	Массив - документы по ведомости (ДокументСсылка.СведенияОНезачисленнойЗарплате).
//
Функция ВыбратьПоВедомости(Ведомость, Проведен = Неопределено, ТолькоРазрешенные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НезачислениеЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СведенияОНезачисленнойЗарплате КАК НезачислениеЗарплаты
	|ГДЕ
	|	НезачислениеЗарплаты.Ведомость = &Ведомость
	|	И НЕ НезачислениеЗарплаты.ПометкаУдаления";
	Если Проведен <> Неопределено Тогда
		Схема = Новый СхемаЗапроса();
		Схема.УстановитьТекстЗапроса(Запрос.Текст);
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
			?(Проведен, "НезачислениеЗарплаты.Проведен", "НЕ НезачислениеЗарплаты.Проведен"));
		Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	КонецЕсли;	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");;
	
КонецФункции	

// Осуществляет поиск документов по ведомости.
// 
// Параметры:
//	Ведомость - ДокументСсылка
//	Проведен - Булево, Неопределено - если указано Неопределено, то проведенность не важна.
//
// Возвращаемое значение:
//	Массив - документы по ведомости (ДокументСсылка.СведенияОНезачисленнойЗарплате).
//
Функция НайтиПоВедомости(Ведомость, Проведен = Неопределено, ТолькоРазрешенные = Ложь) Экспорт
	
	ДокументыПоВедомости = ВыбратьПоВедомости(Ведомость, Проведен, ТолькоРазрешенные);
	
	Если ДокументыПоВедомости.Количество() = 0 Тогда
		Возврат ПустаяСсылка()
	Иначе	
		Возврат ДокументыПоВедомости[0];
	КонецЕсли;
	
КонецФункции	

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.СведенияОНезачисленнойЗарплате;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли