#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаНачала, "Объект.ДатаНачала", Отказ, НСтр("ru='Дата начала'"), , , Ложь);
	
	КоличествоЧленовКомиссии = ЭтотОбъект.Комиссия.Количество();
	
	Если КоличествоЧленовКомиссии = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен состав комиссии.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект", Отказ);
	Иначе
		Если Цел(КоличествоЧленовКомиссии/2) = КоличествоЧленовКомиссии/2 Тогда
			ТекстОшибки = НСтр("ru = 'Количество членов комиссии должно быть нечетным.'");
			Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Комиссия[%1].%2", Комиссия.Количество()-1, "НомерСтроки");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	КоличествоПредседателей = 0;
	Для каждого СтрокаКомиссии Из Комиссия Цикл
		Если СтрокаКомиссии.РольВКомиссии = Перечисления.РолиЧленовКомиссииОхраныТруда.Председатель Тогда
			КоличествоПредседателей = КоличествоПредседателей + 1;
		КонецЕсли;
	КонецЦикла;
	Если КоличествоПредседателей > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Председатель в комиссии должен быть один.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект", Отказ);
	ИначеЕсли КоличествоПредседателей = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не указан председатель комиссии.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект", Отказ);
	КонецЕсли;
	
	Если ДатаНачала > ДатаОкончания Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дата окончания не может быть меньше даты начала проведения спецоценки условий труда'"), ЭтотОбъект, "ДатаОкончания", ,Отказ);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РабочиеМеста", РабочиеМеста.Выгрузить());
	Запрос.УстановитьПараметр("АналогичныеМеста", АналогичныеМеста.Выгрузить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РабочиеМеста.РабочееМесто,
	|	РабочиеМеста.НомерСтроки,
	|	РабочиеМеста.ПредставлениеРабочегоМеста
	|ПОМЕСТИТЬ ВТРабочиеМеста
	|ИЗ
	|	&РабочиеМеста КАК РабочиеМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналогичныеМеста.РабочееМесто,
	|	АналогичныеМеста.АналогичноеМесто
	|ПОМЕСТИТЬ ВТАналогичныеМеста
	|ИЗ
	|	&АналогичныеМеста КАК АналогичныеМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеМеста.РабочееМесто,
	|	РабочиеМеста.НомерСтроки,
	|	РабочиеМеста.АналогичноеМесто,
	|	РабочиеМеста.ГруппаАналогичныхМест
	|ИЗ
	|	(ВЫБРАТЬ
	|		РабочиеМеста.РабочееМесто КАК РабочееМесто,
	|		РабочиеМеста.НомерСтроки КАК НомерСтроки,
	|		ЛОЖЬ КАК АналогичноеМесто,
	|		НЕОПРЕДЕЛЕНО КАК ГруппаАналогичныхМест
	|	ИЗ
	|		ВТРабочиеМеста КАК РабочиеМеста
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочиеМеста КАК РабочиеМестаДубль
	|			ПО РабочиеМеста.РабочееМесто = РабочиеМестаДубль.РабочееМесто
	|				И РабочиеМеста.НомерСтроки <> РабочиеМестаДубль.НомерСтроки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РабочиеМеста.РабочееМесто,
	|		РабочиеМеста.НомерСтроки,
	|		ИСТИНА,
	|		ПредставленияРабочихМест.ПредставлениеРабочегоМеста
	|	ИЗ
	|		ВТРабочиеМеста КАК РабочиеМеста
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАналогичныеМеста КАК АналогичныеМеста
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМеста КАК ПредставленияРабочихМест
	|				ПО АналогичныеМеста.РабочееМесто = ПредставленияРабочихМест.РабочееМесто
	|			ПО РабочиеМеста.РабочееМесто = АналогичныеМеста.АналогичноеМесто) КАК РабочиеМеста
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочиеМеста.РабочееМесто,
	|	РабочиеМеста.НомерСтроки,
	|	РабочиеМеста.АналогичноеМесто,
	|	РабочиеМеста.ГруппаАналогичныхМест
	|
	|УПОРЯДОЧИТЬ ПО
	|	РабочиеМеста.РабочееМесто";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("РабочееМесто") Цикл
		Если Выборка.АналогичноеМесто Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Рабочее место ""%1"" используется в группе аналогичных мест ""%2""'"),
				Выборка.РабочееМесто,
				Выборка.ГруппаАналогичныхМест);
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Рабочее место ""%1"" используется в нескольких строках:'") + " ",
				Выборка.РабочееМесто);
			Пока Выборка.Следующий() Цикл
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 %2,'"),
					ТекстОшибки,
					Выборка.НомерСтроки);
			КонецЦикла;
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстОшибки, 1);
		КонецЕсли;
		Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("РабочиеМеста[%1].%2", Выборка.НомерСтроки-1, "РабочееМесто");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, "Объект", Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("РабочиеМеста", ЭтотОбъект.РабочиеМеста.Выгрузить());
	Запрос.УстановитьПараметр("АналогичныеМеста", ЭтотОбъект.АналогичныеМеста.Выгрузить());
	Запрос.УстановитьПараметр("Сотрудники", ЭтотОбъект.Сотрудники.Выгрузить());
	
	// Очистим не используемые аналогичные места
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РабочиеМеста.РабочееМесто
	|ПОМЕСТИТЬ ВТРабочиеМеста
	|ИЗ
	|	&РабочиеМеста КАК РабочиеМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналогичныеМеста.РабочееМесто,
	|	АналогичныеМеста.АналогичноеМесто
	|ПОМЕСТИТЬ ВТАналогичныеМеста
	|ИЗ
	|	&АналогичныеМеста КАК АналогичныеМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналогичныеМеста.РабочееМесто,
	|	АналогичныеМеста.АналогичноеМесто
	|ИЗ
	|	ВТАналогичныеМеста КАК АналогичныеМеста
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМеста КАК РабочиеМеста
	|		ПО АналогичныеМеста.РабочееМесто = РабочиеМеста.РабочееМесто
	|ГДЕ
	|	РабочиеМеста.РабочееМесто ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = ЭтотОбъект.АналогичныеМеста.НайтиСтроки(
			Новый Структура("РабочееМесто, АналогичноеМесто", Выборка.РабочееМесто, Выборка.АналогичноеМесто));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЭтотОбъект.АналогичныеМеста.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	// Очистим не используемых сотрудников
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РабочиеМеста.РабочееМесто КАК РабочееМесто
	|ПОМЕСТИТЬ ВТВсеМеста
	|ИЗ
	|	ВТРабочиеМеста КАК РабочиеМеста
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналогичныеМеста.АналогичноеМесто
	|ИЗ
	|	ВТРабочиеМеста КАК РабочиеМеста
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАналогичныеМеста КАК АналогичныеМеста
	|		ПО РабочиеМеста.РабочееМесто = АналогичныеМеста.РабочееМесто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.РабочееМесто,
	|	Сотрудники.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&Сотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.РабочееМесто,
	|	Сотрудники.Сотрудник
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеМеста КАК ВсеМеста
	|		ПО Сотрудники.РабочееМесто = ВсеМеста.РабочееМесто
	|ГДЕ
	|	ВсеМеста.РабочееМесто ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = ЭтотОбъект.Сотрудники.НайтиСтроки(
			Новый Структура("РабочееМесто, Сотрудник", Выборка.РабочееМесто, Выборка.Сотрудник));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЭтотОбъект.Сотрудники.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	
	ПозицииДокумента = РабочиеМеста.ВыгрузитьКолонку("РабочееМесто");
	Возврат ОбменДаннымиЗарплатаКадрыРасширенный.ОграниченияРегистрацииПоПозициямШтатногоРасписания(ЭтотОбъект, ПозицииДокумента, Организация);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПереченьРабочихМест() Экспорт
	
	РезультатыЗапроса = ОхранаТруда.ДанныеПоРабочимМестам(ЭтотОбъект.Организация, ЭтотОбъект.Дата);
	
	ЭтотОбъект.РабочиеМеста.Очистить();
	ЭтотОбъект.АналогичныеМеста.Очистить();
	
	Выборка = РезультатыЗапроса.Получить(РезультатыЗапроса.ВГраница() - 1).Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("РабочееМесто") Цикл
		НоваяСтрока = ЭтотОбъект.РабочиеМеста.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.АналогичноеМесто) Тогда
				НоваяСтрока = ЭтотОбъект.АналогичныеМеста.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЭтотОбъект.Сотрудники.Загрузить(РезультатыЗапроса.Получить(РезультатыЗапроса.ВГраница()).Выгрузить());
	Если ЭтотОбъект.Комиссия.Количество() = 0 Тогда
		ЭтотОбъект.Комиссия.Загрузить(РезультатыЗапроса.Получить(РезультатыЗапроса.ВГраница()-2).Выгрузить());
		Если ЭтотОбъект.Комиссия.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(ЭтотОбъект.Руководитель) Тогда
				НоваяСтрокаКомиссии = ЭтотОбъект.Комиссия.Добавить();
				НоваяСтрокаКомиссии.ЧленКомиссии = ЭтотОбъект.Руководитель;
				НоваяСтрокаКомиссии.Должность = ЭтотОбъект.ДолжностьРуководителя;
				НоваяСтрокаКомиссии.РольВКомиссии = Перечисления.РолиЧленовКомиссииОхраныТруда.Председатель;
			КонецЕсли;
			Если ЗначениеЗаполнено(ЭтотОбъект.ОтветственныйЗаОхрануТруда) Тогда
				НоваяСтрокаКомиссии = ЭтотОбъект.Комиссия.Добавить();
				НоваяСтрокаКомиссии.ЧленКомиссии = ЭтотОбъект.ОтветственныйЗаОхрануТруда;
				НоваяСтрокаКомиссии.Должность = ЭтотОбъект.ДолжностьОтветственногоЗаОхрануТруда;
				НоваяСтрокаКомиссии.РольВКомиссии = Перечисления.РолиЧленовКомиссииОхраныТруда.ЧленКомиссии;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

