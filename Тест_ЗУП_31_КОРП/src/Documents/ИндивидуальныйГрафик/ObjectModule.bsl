#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора.
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИСотрудникам(ЭтотОбъект, Таблица, "Организация", "ДанныеОВремени.Сотрудник");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый Структура("ДанныеОВремени", "Сотрудник"));
	
	Возврат ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоОрганизацииИСотрудникам(ЭтотОбъект, Организация, МассивПараметров, ПериодРегистрации);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Проведение документа
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ДанныеДляПроведения = ТаблицаДанныхОВремени();
	РеквизитыДляПроведения = Новый Структура();
	РеквизитыДляПроведения.Вставить("ПериодРегистрации", ПериодРегистрации);
	РеквизитыДляПроведения.Вставить("СотрудникиДокумента", СотрудникиДокумента());
	РеквизитыДляПроведения.Вставить("ИсправленныйДокумент", ИсправленныйДокумент);
	
	ИсправлениеДокументовЗарплатаКадры.ПриПроведенииИсправления(Ссылка, Движения, РежимПроведения, Отказ, РеквизитыДляПроведения,, ЭтотОбъект);
	
	УчетРабочегоВремениРасширенный.ЗарегистрироватьДанныеИндивидуальногоГрафика(Движения, ДанныеДляПроведения, ПериодРегистрации);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Ссылка") Тогда
		ЗаполнитьДокументИсправление(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПериодВводаДанныхОВремени = Перечисления.ПериодыВводаДанныхОВремени.ПрошлыйПериод Тогда
		ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаНачалаПериода, "Объект.ДатаНачалаПериода", Отказ, НСтр("ru='Дата начала'"), , , Ложь);
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ОписанияОшибокВводаВремени = Новый Массив;
	
	ТаблицаДанныхОВремени = ТаблицаДанныхОВремени();
	
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеОВремени(МенеджерВТ, ТаблицаДанныхОВремени);
	
	УчетРабочегоВремениРасширенный.ПроверитьРегистрациюЦелосменногоВремени(МенеджерВТ, ОписанияОшибокВводаВремени, Отказ);
	
	УчетРабочегоВремениРасширенный.ПроверитьЗаполненияЧасов(МенеджерВТ, ОписанияОшибокВводаВремени, Отказ);
	
	СтрокиПоСотрудникам = СтрокиПоСотрудникам();
	
	Ошибки = Новый Соответствие;
	
	МассивСотрудников = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудников, ТаблицаДанныхОВремени.ВыгрузитьКолонку("Сотрудник"), Истина);
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 				= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= ДатаНачалаПериода;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= ДатаОкончанияПериода;
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 	= Неопределено;
	
	КадровыйУчет.ПроверитьРаботающихСотрудников(
		МассивСотрудников,
		ПараметрыПолученияСотрудниковОрганизаций,
		Отказ,
		Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "Сотрудник", "Объект.ДанныеОВремени")
	);
	
	Для Каждого ОписаниеОшибки Из ОписанияОшибокВводаВремени Цикл
		СтрокиСотрудника = СтрокиПоСотрудникам.Получить(ОписаниеОшибки.Сотрудник);
		
		Если ЗначениеЗаполнено(ОписаниеОшибки.ВидВремени) Тогда
			НомерСтроки = 0;
			Для Каждого СтрокаДанныхОВремени Из СтрокиСотрудника Цикл
				Если СтрокаДанныхОВремени["ВидВремени" + День(ОписаниеОшибки.Дата)] = ОписаниеОшибки.ВидВремени Тогда
					НомерСтроки = СтрокаДанныхОВремени.НомерСтроки;
				КонецЕсли;	
			КонецЦикла;	
			
			Если НомерСтроки = 0 Тогда
				Поле = "";
			Иначе
				Поле = "Объект.ДанныеОВремени[" + Формат(НомерСтроки - 1, "ЧГ=") + "].Время" + День(ОписаниеОшибки.Дата) + "Представление";
			КонецЕсли;
			
			УчетРабочегоВремениРасширенный.ДобавитьОшибкуПоСотруднику(Ошибки, ОписаниеОшибки.Сотрудник, ОписаниеОшибки.ТекстОшибки, Поле, ОписаниеОшибки.Документ);	
		КонецЕсли;	
		
	КонецЦикла;	
	
	ОписанияОшибокВводаВремени = Новый Массив;
	
	УчетРабочегоВремениРасширенный.ПроверитьСоответствиеРегистрируемыхЧасовДлинеСуток(МенеджерВТ, ОписанияОшибокВводаВремени, Отказ);
	
	Для Каждого ОписаниеОшибки Из ОписанияОшибокВводаВремени Цикл				
		СтрокиСотрудника = СтрокиПоСотрудникам.Получить(ОписаниеОшибки.Сотрудник);
		
		НомерСтроки = СтрокиСотрудника[0].НомерСтроки;
		
		Поле = "Объект.ДанныеОВремени[" + Формат(НомерСтроки - 1, "ЧГ=") + "].Время" + День(ОписаниеОшибки.Дата) + "Представление";

		УчетРабочегоВремениРасширенный.ДобавитьОшибкуПоСотруднику(Ошибки, ОписаниеОшибки.Сотрудник, ОписаниеОшибки.ТекстОшибки, Поле, ОписаниеОшибки.Документ);		
		
	КонецЦикла;	
	
	ОписанияОшибокВводаВремени = Новый Массив;
	
	УчетРабочегоВремениРасширенный.ТабельПроверитьЦелостностьЗаполненияПериода(МенеджерВТ, Организация, Подразделение, ДатаНачалаПериода, ДатаОкончанияПериода, ОписанияОшибокВводаВремени, Отказ);
	
	Для Каждого ОписаниеОшибки Из ОписанияОшибокВводаВремени Цикл				
		СтрокиСотрудника = СтрокиПоСотрудникам.Получить(ОписаниеОшибки.Сотрудник);
		
		НомерСтроки = СтрокиСотрудника[0].НомерСтроки;
		
		Поле = "Объект.ДанныеОВремени[" + Формат(НомерСтроки - 1, "ЧГ=") + "].Время" + День(ОписаниеОшибки.Дата) + "Представление";

		УчетРабочегоВремениРасширенный.ДобавитьОшибкуПоСотруднику(Ошибки, ОписаниеОшибки.Сотрудник, ОписаниеОшибки.ТекстОшибки, Поле, ОписаниеОшибки.Документ);		
		
	КонецЦикла;	
	
	ОписанияОшибокВводаВремени = Новый Массив;
		
	УчетРабочегоВремениРасширенный.ПроверитьУникальностьВводаИтоговыхДанных(МенеджерВТ, Ссылка, ПериодРегистрации, ОписанияОшибокВводаВремени, Истина);
	
	Для Каждого ОписаниеОшибки Из ОписанияОшибокВводаВремени Цикл				
		
		УчетРабочегоВремениРасширенный.ДобавитьОшибкуПоСотруднику(Ошибки, ОписаниеОшибки.Сотрудник, ОписаниеОшибки.ТекстОшибки, , ОписаниеОшибки.Документ);		
		
	КонецЦикла;	
	
	УчетРабочегоВремениРасширенный.ВывестиОшибкиПоСотрудникам(Ошибки, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаДанныхОВремени()
	ТаблицаДанныхОВремени = Новый ТаблицаЗначений;
	ТаблицаДанныхОВремени.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанныхОВремени.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Дней", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Часов", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОВремени.Колонки.Добавить("ВЦеломЗаПериод", Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Смена", Новый ОписаниеТипов("СправочникСсылка.СменыРаботыСотрудников"));
	ТаблицаДанныхОВремени.Колонки.Добавить("ПереходящаяЧастьСмены", Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхОВремени.Колонки.Добавить("ОтражатьЧасыВДеньНачалаСмены", Новый ОписаниеТипов("Булево"));
		
	СтрокиТаблицыСменПоСотрудникам = СтрокиТаблицыСменПоСотрудникам();
	
	НомерДняНачалаПериода = День(ДатаНачалаПериода);
	НомерДняОкончанияПериода = День(ДатаОкончанияПериода);
	Для Каждого СтрокаДанныхОВремени Из ДанныеОВремени Цикл 
		СтрокаТаблицыСмен = СтрокиТаблицыСменПоСотрудникам[СтрокаДанныхОВремени.Сотрудник];
		
		ОбрабатываемаяДата = ДатаНачалаПериода;
		Для НомерДня = НомерДняНачалаПериода По НомерДняОкончанияПериода Цикл
			Если ЗначениеЗаполнено(СтрокаДанныхОВремени["ВидВремени" + НомерДня]) Тогда
				
				ДанныеПоВидуВремениНаДату = ТаблицаДанныхОВремени.Добавить();
				ДанныеПоВидуВремениНаДату.Дата = ОбрабатываемаяДата;
				ДанныеПоВидуВремениНаДату.Сотрудник = СтрокаДанныхОВремени.Сотрудник;
				ДанныеПоВидуВремениНаДату.ВидВремени = СтрокаДанныхОВремени["ВидВремени" + НомерДня];
				ДанныеПоВидуВремениНаДату.Дней = 1;
				ДанныеПоВидуВремениНаДату.Часов = СтрокаДанныхОВремени["Часов" + НомерДня];
				ДанныеПоВидуВремениНаДату.ВЦеломЗаПериод = Ложь;
				
				ДанныеПоВидуВремениНаДату.ПереходящаяЧастьСмены = СтрокаДанныхОВремени["ПереходящаяЧастьСмены" + НомерДня];
				Если СтрокаТаблицыСмен <> Неопределено Тогда
					ДанныеПоВидуВремениНаДату.Смена = СтрокаТаблицыСмен["Смена" + НомерДня];
					ДанныеПоВидуВремениНаДату.ОтражатьЧасыВДеньНачалаСмены = ДанныеПоВидуВремениНаДату.ПереходящаяЧастьСмены И СтрокаТаблицыСмен["ОтражатьЧасыВДеньНачалаСмены" + НомерДня];
				КонецЕсли;					
			КонецЕсли;	
			ОбрабатываемаяДата = ОбрабатываемаяДата + 86400;
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат ТаблицаДанныхОВремени;
КонецФункции	

Процедура ЗаполнитьДокументИсправление(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИндивидуальныйГрафик.Организация,
	|	ИндивидуальныйГрафик.Подразделение,
	|	ИндивидуальныйГрафик.ДатаНачалаПериода,
	|	ИндивидуальныйГрафик.ДатаОкончанияПериода
	|ИЗ
	|	Документ.ИндивидуальныйГрафик КАК ИндивидуальныйГрафик
	|ГДЕ
	|	ИндивидуальныйГрафик.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндивидуальныйГрафикДанныеОВремени.Сотрудник,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов1,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов2,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов3,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов4,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов5,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов6,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов7,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов8,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов9,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов10,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов11,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов12,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов13,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов14,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов15,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов16,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов17,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов18,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов19,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов20,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов21,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов22,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов23,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов24,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов25,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов26,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов27,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов28,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов29,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов30,
	|	ИндивидуальныйГрафикДанныеОВремени.Часов31,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени1,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени2,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени3,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени4,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени5,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени6,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени7,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени8,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени9,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени10,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени11,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени12,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени13,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени14,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени15,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени16,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени17,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени18,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени19,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени20,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени21,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени22,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени23,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени24,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени25,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени26,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени27,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени28,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени29,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени30,
	|	ИндивидуальныйГрафикДанныеОВремени.ВидВремени31
	|ИЗ
	|	Документ.ИндивидуальныйГрафик.ДанныеОВремени КАК ИндивидуальныйГрафикДанныеОВремени
	|ГДЕ
	|	ИндивидуальныйГрафикДанныеОВремени.Ссылка = &Ссылка
	|	И &Условие";
	
	ЗаполнятьПоСпискуСотрудников = Ложь;
	Если ДанныеЗаполнения.Свойство("Сотрудники") Тогда
		ТекстУсловия = "ИндивидуальныйГрафикДанныеОВремени.Сотрудник В (&Сотрудники)";
		Запрос.УстановитьПараметр("Сотрудники", ДанныеЗаполнения.Сотрудники);
		ЗаполнятьПоСпискуСотрудников = Истина;
	Иначе
		ТекстУсловия = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия); 
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ДанныеШапки = Результаты[0].Выбрать();
	
	Если ДанныеШапки.Следующий() Тогда
	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеШапки);
		
		Дата = ТекущаяДатаСеанса();
		
		ПериодРегистрации = Макс(НачалоМесяца(ТекущаяДатаСеанса()), КонецМесяца(ДанныеШапки.ДатаНачалаПериода) + 1);
		
		ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
		
		ПериодВводаДанныхОВремени = Перечисления.ПериодыВводаДанныхОВремени.ПрошлыйПериод;
		
		ДанныеОВремени.Загрузить(Результаты[1].Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокиПоСотрудникам()
	СтрокиПоСотрудникам = Новый Соответствие;
	Для Каждого СтрокаДанных Из ДанныеОВремени Цикл
		МассивСтрок = СтрокиПоСотрудникам.Получить(СтрокаДанных.Сотрудник);
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = Новый Массив;
			СтрокиПоСотрудникам.Вставить(СтрокаДанных.Сотрудник, МассивСтрок);
		КонецЕсли;	
		МассивСтрок.Добавить(СтрокаДанных);
	КонецЦикла;	
	
	Возврат СтрокиПоСотрудникам;
КонецФункции	

Функция СотрудникиДокумента()
	Сотрудники = Новый Массив;
	
	Для Каждого СтрокаДанныхОВремени Из ДанныеОВремени Цикл
		Если Сотрудники.Найти(СтрокаДанныхОВремени.Сотрудник) = Неопределено Тогда
			Сотрудники.Добавить(СтрокаДанныхОВремени.Сотрудник);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Сотрудники;
КонецФункции	

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.Ссылка.ДатаНачалаПериода КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ИндивидуальныйГрафик.ДанныеОВремени КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.Ссылка.ДатаОкончанияПериода,
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.ИндивидуальныйГрафик.ДанныеОВремени КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И ТаблицаДокумента.Ссылка.ДатаОкончанияПериода <> ДАТАВРЕМЯ(1, 1, 1)";
		
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СтрокиТаблицыСменПоСотрудникам()
	СтрокиТаблицыСменПоСотрудникам = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из Смены Цикл
		СтрокиТаблицыСменПоСотрудникам.Вставить(СтрокаТаблицы.Сотрудник, СтрокаТаблицы);
	КонецЦикла;	
	
	Возврат СтрокиТаблицыСменПоСотрудникам;
КонецФункции	

#КонецОбласти

#КонецЕсли