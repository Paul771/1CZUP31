#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	ОписаниеСостава = ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента();
	ОписаниеСостава.ЗаполнятьФизическиеЛицаПоСотрудникам = Ложь;
	ОписаниеСостава.ИспользоватьКраткийСостав = Ложь;
	ОписаниеСостава.ЗаполнятьТабличнуюЧастьФизическиеЛицаДокумента = Ложь;
	
	ЗарплатаКадрыСоставДокументов.ДобавитьОписаниеХраненияСотрудниковФизическихЛиц(
		ОписаниеСостава.ОписаниеХраненияСотрудниковФизическихЛиц,
		"ФизическиеЛица",
		"ФизическоеЛицо");
		
	Возврат ОписаниеСостава;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.3";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b9caf3d5-a0b5-47f0-a23e-a729c842cb7b");
	Обработчик.Процедура = "Документы.ПлатежноеПоручение.ЗаполнитьФизическиеЛица";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение физических лиц в ""Платежное поручение"".'");
	
КонецПроцедуры

Процедура ЗаполнитьФизическиеЛица(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПлатежноеПоручение.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА КАК ЕстьВедомости
	|			ИЗ
	|				Документ.ПлатежноеПоручение.Ведомости КАК Ведомости
	|			ГДЕ
	|				Ведомости.Ссылка = ПлатежноеПоручение.Ссылка)
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА КАК ЕстьФизлица
	|				ИЗ
	|					Документ.ПлатежноеПоручение.ФизическиеЛица КАК ФизическиеЛица
	|				ГДЕ
	|					ФизическиеЛица.Ссылка = ПлатежноеПоручение.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручение.Дата УБЫВ";
	Если ПараметрыОбновления = НеОпределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);		
		
		Выборка = РезультатЗапроса.Выбрать();		
		Пока Выборка.Следующий() Цикл
			ВедомостьОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВедомостьОбъект.ЗаполнитьФизическиеЛицаПоВедомостям();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВедомостьОбъект);
		КонецЦикла;		
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьВБанкДобавитьКомандыПечати(КомандыПечати)	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  (входные)
//    МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - дополнительные настройки печати;
//  (выходные)
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//   ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписокПеречислений") Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ПервыйДокумент = Истина;
		Для каждого ПлатежныйДокумент Из МассивОбъектов Цикл
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			
			// Запомним номер строки, с которой начали выводить текущий документ.
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ВедомостиПлатежногоДокумента = ОбменСБанкамиПоЗарплатнымПроектам.ВедомостиПлатежногоДокументаПеречисленияЗарплаты(ПлатежныйДокумент);
			ТабличныйДокументПлатежногоДокумента = ОбменСБанкамиПоЗарплатнымПроектам.ПечатьСпискаПеречисленийПоДокументам(ВедомостиПлатежногоДокумента, ОбъектыПечати, ПлатежныйДокумент);
			ТабличныйДокумент.Вывести(ТабличныйДокументПлатежногоДокумента);
			
			// В табличном документе необходимо задать имя области, в которую был 
			// выведен объект. Нужно для возможности печати покомплектно.
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ПлатежныйДокумент);
		КонецЦикла;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СписокПеречислений", НСтр("ru = 'Список получателей'"), ТабличныйДокумент);
		
	Иначе
		
		МассивВедомостей = Новый Массив;
		Для каждого ОбъектМассива Из МассивОбъектов Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВедомостей, ОбменСБанкамиПоЗарплатнымПроектам.ВедомостиПлатежногоДокументаПеречисленияЗарплаты(ОбъектМассива), Истина);
		КонецЦикла;
		
		ВзаиморасчетыССотрудникамиВнутренний.ВедомостьВБанкПечать(МассивВедомостей, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОграничениеДокумента

Функция ПредставлениеПометкиОграничения() Экспорт
	
	Возврат НСтр("ru = 'Выгружен'");
	
КонецФункции

Функция ОперацияОграниченияДокумента() Экспорт
	
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьВБанкОперацияОграниченияДокумента();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли