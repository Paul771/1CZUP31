#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьФизическиеЛицаПоВедомостям();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Для Каждого ПараметрЗаполнения Из ДанныеЗаполнения Цикл
			Если ПараметрЗаполнения.Ключ = "Ведомости" Тогда
				Если ПараметрЗаполнения.Значение.Количество() = 1 Тогда
					ТекстОшибки = НСтр("ru = 'Платежное поручение предназначено для группировки нескольких ведомостей с целью формирования единого реестра на зачисление зарплаты и отправки его в банк одним файлом.
										|Ввод платежного поручения никак не влияет на отражение факта выплаты зарплаты в программе. 
										|Создание платежного поручения имеет смысл только для более чем одной ведомости.'");
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				Для Каждого ЗначениеЗаполнения Из ПараметрЗаполнения.Значение Цикл
					НоваяСтрокаСостава = Ведомости.Добавить();
					НоваяСтрокаСостава.Ведомость = ЗначениеЗаполнения;
					Если ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда
						Если ЭтотОбъект.Организация <> ЗначениеЗаполнения.Организация Тогда
							ТекстОшибки = НСтр("ru = 'Платежное поручение предназначено для группировки нескольких ведомостей с целью формирования единого реестра по одной организации.'");
							ВызватьИсключение ТекстОшибки;
						КонецЕсли;
					Иначе
						ЭтотОбъект.Организация = ЗначениеЗаполнения.Организация;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивВедомостей = Новый Массив;
	СоответствиеВедомостей = Новый Соответствие;
	Для каждого СтрокаДокумента Из ЭтотОбъект.Ведомости Цикл
		СоответствиеВедомостей.Вставить(СтрокаДокумента.Ведомость, СтрокаДокумента.НомерСтроки - 1);
		МассивВедомостей.Добавить(СтрокаДокумента.Ведомость);
	КонецЦикла;
	
	МассивОшибок = Новый Массив;
	ОбменСБанкамиПоЗарплатнымПроектам.ПроверитьЗаполнениеПлатежногоДокумента(Ссылка, МассивВедомостей, МассивОшибок);
	
	Для каждого Ошибка Из МассивОшибок Цикл
		ИмяПоля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Ведомости[%1].Ведомость", СоответствиеВедомостей.Получить(Ошибка.Ведомость));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка.ТекстСообщения, ЭтотОбъект, ИмяПоля, , Отказ);
	КонецЦикла;
	
	Если Не Отказ Тогда
		ЭтотОбъект.ДополнительныеСвойства.Вставить("ПроверкаВыполнена", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЭтотОбъект.НомерРеестра = 0;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый Структура("ФизическиеЛица", "ФизическоеЛицо"));
	
	Возврат ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоОрганизацииИФизическимЛицам(ЭтотОбъект, Организация, МассивПараметров, Дата);
	
КонецФункции

// Возвращает признак изменения данных, влияющих на формирование электронного документа.
// 
Функция ИзменилисьКлючевыеРеквизитыЭлектронногоДокумента() Экспорт
	
	ИзменилисьКлючевыеРеквизиты = 
		ЭлектронноеВзаимодействиеБЗК.ИзменилисьРеквизитыОбъекта(ЭтотОбъект, "Дата, Номер, Организация, НомерРеестра, ПометкаУдаления")	
		Или ЭлектронноеВзаимодействиеБЗК.ИзмениласьТабличнаяЧастьОбъекта(ЭтотОбъект, "Ведомости", "Ведомость");
		
	Возврат ИзменилисьКлючевыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьФизическиеЛицаПоВедомостям() Экспорт
	
	ФизическиеЛица.Очистить();
	
	Если Ведомости.Количество() > 0 Тогда
		
		ВедомостиДокумента = Ведомости.ВыгрузитьКолонку("Ведомость");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВедомостьФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.ФизическиеЛица КАК ВедомостьФизическиеЛица
		|ГДЕ
		|	ВедомостьФизическиеЛица.Ссылка В(&Ведомости)";
		Запрос.УстановитьПараметр("Ведомости", ВедомостиДокумента);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ФизическиеЛица, Результат.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"), "ФизическоеЛицо");
		КонецЕсли;
		
		ВзаиморасчетыССотрудникамиВХО.ДополнитьТаблицуФизическиеЛицаПоВедомостям(ФизическиеЛица, ВедомостиДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

