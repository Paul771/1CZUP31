#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.СторнированиеНачислений - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.СторнированиеНачислений - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа.
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(РежимПроведения, ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, Объект, Отказ);
	
	СторнируемыйДокумент = ?(ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("СторнируемыйДокумент"), 
		ДополнительныеПараметры.СторнируемыйДокумент, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "СторнируемыйДокумент"));
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка, СторнируемыйДокумент);
	ДанныеДляПроведения = ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета);
	
	РезультатИсправления = Неопределено;
	ИсправлениеДокументовЗарплатаКадры.ПриПроведенииИсправления(ДокументСсылка, Движения, РежимПроведения, Отказ, РеквизитыДляПроведения, СтруктураВидовУчета, Объект,, РезультатИсправления);
	
	Если Не РезультатИсправления.ИсправлениеВТекущемПериоде Тогда
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
			РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
		
			РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);
		
			// НДФЛ
			УчетНДФЛРасширенный.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), РеквизитыДляПроведения.ДатаВыплатыСторнированныхНачислений, ДанныеДляПроведения.МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПериодРегистрации, , Ложь, , РеквизитыДляПроведения.Ссылка);
			
			// - Регистрация начислений и удержаний в учете начислений и удержаний.
			УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, Неопределено, Неопределено, Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
			
			// - Регистрация отработанного времени в учете начислений и удержаний.
			УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Перечисления.ХарактерВыплатыЗарплаты.Зарплата, Истина);
			
			// - Регистрация начислений в доходах для страховых взносов.
			УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ложь, Истина, РеквизитыДляПроведения.Ссылка);
			
			// - Регистрация начислений и удержаний.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
						ДанныеДляПроведения.НачисленияПоСотрудникам,
						ДанныеДляПроведения.УдержанияПоСотрудникам,
						ДанныеДляПроведения.НДФЛПоСотрудникам,
						Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
			
			УчетСтраховыхВзносов.СформироватьПособия(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.Пособия, ДанныеДляПроведения.ПособияПоУходу);
			
			ПараметрыДвиженийОтпусков = ОстаткиОтпусков.ПараметрыДляСформироватьДвиженияФактическихОтпусков();
			ПараметрыДвиженийОтпусков.ДатаРегистрации = РеквизитыДляПроведения.Дата;
			ПараметрыДвиженийОтпусков.Начисления = ДанныеДляПроведения.Начисления;
			ПараметрыДвиженийОтпусков.ПериодНачисления = РеквизитыДляПроведения.ПериодРегистрации;
			ОстаткиОтпусков.СформироватьДвиженияФактическихОтпусков(Движения, Отказ, ПараметрыДвиженийОтпусков);
		КонецЕсли;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
			// Учет среднего заработка
			УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(Движения, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка);
		КонецЕсли;
		
		// Не пустые наборы не изолированные учетами, могут содержать сторно записи сформированные учетами не умеющими
		// изолировать наборы. Изолируем наборы здесь, что бы в них не попали новые сторно строки при сторнировании в
		// исправленном документе.
		ДвиженияВСтруктуре = ТипЗнч(Движения) = Тип("Структура");
		Для Каждого НаборЗаписей Из Движения Цикл
			Набор = ?(ДвиженияВСтруктуре, НаборЗаписей.Значение, НаборЗаписей);
			Если Не Набор.ДополнительныеСвойства.Свойство("ИзолированоУчетом") И Набор.Количество() > 0 Тогда
				ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, "<ВнеУчета>");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыСторнирования = Новый Структура;
	ПараметрыСторнирования.Вставить("ИсправлениеВТекущемПериоде", РезультатИсправления.ИсправлениеВТекущемПериоде);
	ПараметрыСторнирования.Вставить("ОтменаДокумента", Истина);
	ПараметрыСторнирования.Вставить("ПериодРегистрации", РеквизитыДляПроведения.ПериодРегистрации);
	ПараметрыСторнирования.Вставить("РеквизитыДляПроведения", РеквизитыДляПроведения);
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СторнируемыйДокумент.Метаданные().ПолноеИмя());
	ИсправленныйДокументСторнирован = МенеджерДокумента.СторнироватьПоУчетам(Движения, ДокументСсылка, СторнируемыйДокумент, СтруктураВидовУчета, ПараметрыСторнирования);
	
	Если ИсправленныйДокументСторнирован <> Истина Тогда
		ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияПоВсемУчетам(Движения, СторнируемыйДокумент, РезультатИсправления.ИсправлениеВТекущемПериоде, СтруктураВидовУчета);
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, СтруктураВидовУчета);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

Функция ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета) 
	
	ДанныеДляПроведения = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Сторнировано,ДоначисленияИПерерасчеты", "Ссылка.ПериодРегистрации");
		РасчетЗарплатыРасширенный.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Сторнировано");
		
		ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВД(РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, ДанныеДляПроведения.НачисленияПоСотрудникам);
		
		ЗаполнитьСведенияОПособиях(РеквизитыДляПроведения, ДанныеДляПроведения);
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка("Сторнировано,ДоначисленияИПерерасчеты");
		ДополнительныеПараметры.МесяцНачисления = "Ссылка.ПериодРегистрации";
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура ЗаполнитьСведенияОПособиях(РеквизитыДляПроведения, ДанныеДляПроведения)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&СторнируемыйДокумент КАК Ссылка,
	|	ТаблицаНачислений.Начисление,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сторно,
	|	ТаблицаНачислений.ОплаченоДней,
	|	ТаблицаНачислений.Результат,
	|	ТаблицаНачислений.РезультатВТомЧислеЗаСчетФБ
	|ПОМЕСТИТЬ ВТНачисленияДляУчетаПособий
	|ИЗ
	|	Документ.СторнированиеНачислений.Сторнировано КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	Запрос.УстановитьПараметр("СторнируемыйДокумент", РеквизитыДляПроведения.СторнируемыйДокумент);
	
	Запрос.Выполнить();
	
	МетаданныеСторнируемогоДокумента = РеквизитыДляПроведения.СторнируемыйДокумент.Метаданные();
	ИмяПериодРегистрации = "ПериодРегистрации";
	Если МетаданныеСторнируемогоДокумента.Реквизиты.Найти(ИмяПериодРегистрации) = Неопределено Тогда
		ИмяПериодРегистрации = "МесяцНачисления";
	КонецЕсли;
	
	РеквизитыСторнируемогоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДляПроведения.СторнируемыйДокумент, "Организация," + ИмяПериодРегистрации);
	
	ПособиеПлатитУчастникПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(РеквизитыСторнируемогоДокумента.Организация, РеквизитыСторнируемогоДокумента[ИмяПериодРегистрации]);
	
	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьСведенияОПособиях(ДанныеДляПроведения, ПособиеПлатитУчастникПилотногоПроекта);
	
КонецПроцедуры

Функция РеквизитыДляПроведения(ДокументСсылка, СторнируемыйДокумент)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СторнированиеНачислений.Ссылка КАК Ссылка,
	|	СторнированиеНачислений.Организация КАК Организация,
	|	СторнированиеНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	СторнированиеНачислений.Дата КАК Дата,
	|	СторнированиеНачислений.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	СторнированиеНачислений.СторнируемыйДокумент.#ИмяПериодРегистрации КАК ПериодРегистрацииСторнируемого,
	|	ВЫРАЗИТЬ(СторнированиеНачислений.СторнируемыйДокумент КАК Документ.Отпуск).Дата КАК ДатаВыплатыСторнированныхНачислений
	|ИЗ
	|	Документ.СторнированиеНачислений КАК СторнированиеНачислений
	|ГДЕ
	|	СторнированиеНачислений.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.НомерСтроки КАК НомерСтроки,
	|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.Территория КАК Территория,
	|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.УсловияТруда КАК УсловияТруда,
	|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения КАК ДоляРаспределения,
	|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.Результат КАК Результат,
	|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.СторнированиеНачислений.РаспределениеПоТерриториямУсловиямТруда КАК СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка";
	
	МетаданныеСторнируемогоДокумента = СторнируемыйДокумент.Метаданные();
	Если МетаданныеСторнируемогоДокумента.Реквизиты.Найти("ПланируемаяДатаВыплаты") <> НеОпределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ").Дата", ").ПланируемаяДатаВыплаты");
	ИначеЕсли МетаданныеСторнируемогоДокумента.Реквизиты.Найти("ПериодРегистрации") <> НеОпределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫРАЗИТЬ(", "КОНЕЦПЕРИОДА(ВЫРАЗИТЬ(");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ").Дата", ").ПериодРегистрации, МЕСЯЦ)");
	ИначеЕсли МетаданныеСторнируемогоДокумента.Реквизиты.Найти("МесяцНачисления") <> НеОпределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫРАЗИТЬ(", "КОНЕЦПЕРИОДА(ВЫРАЗИТЬ(");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ").Дата", ").МесяцНачисления, МЕСЯЦ)");
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " КАК Документ.Отпуск", " КАК " + МетаданныеСторнируемогоДокумента.ПолноеИмя());
	
	ИмяПериодРегистрации = "ПериодРегистрации";
	Если МетаданныеСторнируемогоДокумента.Реквизиты.Найти(ИмяПериодРегистрации) = Неопределено Тогда
		ИмяПериодРегистрации = "МесяцНачисления";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяПериодРегистрации", ИмяПериодРегистрации);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
		
	КонецЦикла;
	
	РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, Организация, ПериодРегистрации, Дата, СторнируемыйДокумент, ПериодРегистрацииСторнируемого, ДатаВыплатыСторнированныхНачислений, РаспределениеПоТерриториямУсловиямТруда");
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

Функция ОписаниеСторнируемогоДокумента(СторнируемыйДокумент) Экспорт
	
	Описание = Новый Структура();
	Описание.Вставить("МесяцНачисленияИмя", "МесяцНачисления");
	
	МетаданныеСторнируемогоДокумента = СторнируемыйДокумент.Метаданные();
	Если МетаданныеСторнируемогоДокумента.Реквизиты.Найти(Описание.МесяцНачисленияИмя) = Неопределено Тогда
		Описание.МесяцНачисленияИмя = "ПериодРегистрации";
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#КонецЕсли