#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// Заполнение нового документа.
		ЗначенияДляЗаполнения = Новый Структура("Месяц, Ответственный", "Объект.ПериодРегистрации", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере();
		
		Если Параметры.Свойство("Основание") Тогда
			ДанныеВРеквизиты();
			РассчитатьПослеЗаполнения(Объект);
		КонецЕсли;
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПерерасчетДоступен = Объект.ПериодРегистрации > ПериодРегистрацииСторнируемогоДокумента;
	
	Если Не ПерерасчетДоступен Тогда
		ТекущийОбъект.ДоначислитьЗарплатуПриНеобходимости = Ложь;
		
		МассивИменТаблиц = КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении();
		Для каждого ИмяТаблицы Из МассивИменТаблиц Цикл
			ТекущийОбъект[СтрЗаменить(ИмяТаблицы, "Объект.", "")].Очистить();
		КонецЦикла;
	КонецЕсли;
	
	РеквизитыВДанные(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ДанныеВРеквизиты();
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Сторнировано, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыИсправления = Новый Структура;
	ПараметрыИсправления.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыИсправления.Вставить("РежимЗаписи", ПараметрыЗаписи.РежимЗаписи);
	ПараметрыИсправления.Вставить("ПолеПериодРегистрации", ОписаниеСторнируемогоДокумента.МесяцНачисленияИмя);
	Оповестить("ИзмененоСторнированиеНачислений", ПараметрыИсправления, Объект.СторнируемыйДокумент);
	
	Оповестить("Запись_СторнированиеНачислений", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ТекущийОбъект);
	
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
КонецПроцедуры

&НаКлиенте
Процедура СторнируемыйДокументПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
		ЗаполнитьПоСторнируемомуДокументу();
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Редактирование месяца строкой.

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииПриИзмененииЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой",, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначислитьЗарплатуПриНеобходимостиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
		ЗаполнитьПоСторнируемомуДокументу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоначисленияиперерасчеты

&НаКлиенте
Процедура ДоначисленияИПерерасчетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыДоначисленияИПерерасчеты(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;	
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ДоначисленияИПерерасчетыВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыДоначисленияИПерерасчеты(), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "ДоначисленияИПерерасчеты", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И ЗначениеЗаполнено(Сотрудник) Тогда
		Элементы.ДоначисленияИПерерасчеты.ТекущиеДанные.Сотрудник = Сотрудник;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "ДоначисленияИПерерасчеты", Элементы.ДоначисленияИПерерасчеты.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыСотрудникПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыДоначисленияИПерерасчеты();
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты());
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.ДоначисленияИПерерасчеты.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.ДоначисленияИПерерасчеты.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.ДоначисленияИПерерасчеты.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСторнировано

&НаКлиенте
Процедура СторнированоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыСторнировано(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;	
	КонецЕсли;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыСторнировано(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСотрудникаВШапке()
	
	Сотрудники = Объект.Сторнировано.Выгрузить(,"Сотрудник");
	Сотрудники.Свернуть("Сотрудник");
	
	СотрудникВШапке = Сотрудники.Количество() = 1;
	
	Если СотрудникВШапке Тогда
		Сотрудник = Сотрудники[0].Сотрудник;
	Иначе
		Сотрудник = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСторнируемомуДокументу()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Действие", "Сторнировать");
	ПараметрыЗаполнения.Вставить("Ссылка", ДокументОбъект.СторнируемыйДокумент);
	ПараметрыЗаполнения.Вставить("Период", ДокументОбъект.ПериодРегистрации);
	ПараметрыЗаполнения.Вставить("ДоначислитьЗарплатуПриНеобходимости", ДокументОбъект.ДоначислитьЗарплатуПриНеобходимости);
	
	ДокументОбъект.Заполнить(ПараметрыЗаполнения);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ПриПолученииДанныхНаСервере();
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаДанныеВРеквизит(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата());
	РассчитатьПослеЗаполнения(ДокументОбъект);
	РасчетЗарплатыРасширенныйФормы.ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры

// Подключение универсальных механизмов.
&НаСервере
Процедура ДополнитьФорму()
	
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты(), "Начисления");
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФормуРезультатыРаспределения(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата());	
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДополнитьФорму(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры

&НаСервере
Функция ОписаниеДокумента()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.НачисленияИмя = "ДоначисленияИПерерасчеты";
	Описание.СторноИмя = "Сторнировано";
	Описание.МесяцНачисленияИмя = "ПериодРегистрации";
	Описание.ПорядокВыплатыИмя = Неопределено;
	Описание.ПланируемаяДатаВыплатыИмя = Неопределено;
	Описание.ОписанияТаблицДляРаспределенияРезультата = СтруктураОписанияТаблицДляРаспределенияРезультата();
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыДоначисленияИПерерасчеты()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "ДоначисленияИПерерасчеты";
	ОписаниеТаблицы.ПутьКДанным = "Объект.ДоначисленияИПерерасчеты";
	ОписаниеТаблицы.НомерТаблицы = 1;
	ОписаниеТаблицы.СодержитПолеСотрудник = Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "Сотрудник";
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей = "ДатыДоначисленияИПерерасчеты";
	ОписаниеТаблицы.ОтображатьПоляОписанияВремени				= Истина;
	ОписаниеТаблицы.УправлятьОтображениемПолейОписанияВремени	= Истина;
	ОписаниеТаблицы.ОтображатьПоляНормыВремени					= Истина;
	ОписаниеТаблицы.ЭтоПерерасчеты = Истина;
	ОписаниеТаблицы.ИмяРеквизитаПериод 							= "ПериодРегистрации";
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование 				= "ДокументОснование";
	
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов 	= "ДоначисленияИПерерасчетыРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля 							= Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыСторнировано()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "Сторнировано";
	ОписаниеТаблицы.ПутьКДанным = "Объект.Сторнировано";
	ОписаниеТаблицы.НомерТаблицы = 2;
	ОписаниеТаблицы.СодержитПолеСотрудник = Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "Сотрудник";
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей = "ДатыСторнирование";
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование = "ДокументОснование";
	ОписаниеТаблицы.ИмяРеквизитаФиксСторно = "ФиксСторно";
	
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов 	= "ОтмененныеНачисленияРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля 							= Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДляРаспределенияРезультата()

	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыДоначисленияИПерерасчеты());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыСторнировано());
	
	Возврат ОписанияТаблиц;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОписанияТаблицДляРаспределенияРезультата()

	ОписанияТаблиц = Новый Структура;
	ОписанияТаблиц.Вставить("ДоначисленияИПерерасчеты", ОписаниеТаблицыДоначисленияИПерерасчеты());
	ОписанияТаблиц.Вставить("Сторнировано", ОписаниеТаблицыСторнировано());
	
	Возврат ОписанияТаблиц;

КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка = Истина)

	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(ЭтаФорма, ОписаниеТаблицы, ВыбраннаяСтрока, Объект.ПериодРегистрации);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивОписанийТаблицФормы()
	МассивОписанийТаблицФормы = Новый Структура;
	МассивОписанийТаблицФормы.Вставить("ДоначисленияИПерерасчеты", ОписаниеТаблицыДоначисленияИПерерасчеты());
	Возврат МассивОписанийТаблицФормы  
КонецФункции

#Область РаспределениеПоТерриториямУсловиямТруда

&НаКлиенте
Процедура ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыДляВыбора = РасчетЗарплатыРасширенныйКлиент.ПараметрыДляВыбораПолеРаспределениеПоТерриториямУсловиямТруда();
	ПараметрыДляВыбора.Форма = ЭтаФорма;
	ПараметрыДляВыбора.ОписаниеДокумента = ОписаниеДокумента();
	ПараметрыДляВыбора.ОписаниеТаблицы = ОписаниеТаблицы;
	
	РасчетЗарплатыРасширенныйКлиент.ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПараметрыДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ЭтаФорма, ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда()
	
	Описания = Новый Массив;
	Описания.Добавить(ОписаниеТаблицыСторнировано());
	Описания.Добавить(ОписаниеТаблицыДоначисленияИПерерасчеты());
	
	Возврат Описания;
	
КонецФункции

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.ДоначисленияИПерерасчеты");
	Массив.Добавить("Объект.Показатели");
	Возврат Массив
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "СторнируемыйДокумент", Нстр("ru = 'сторнируемого документа'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, ПредупреждениеПриРедактировании",
		"ДоначислитьЗарплатуПриНеобходимости",
		ЗарплатаКадрыРасширенный.КлючевыеРеквизитыЗаполненияФормыТекстПредупрежденияДокументовСАвтоматическимРасчетом()));
	
	Возврат Массив
КонецФункции

#КонецОбласти

// Контролируемые поля
&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	ДоначисленияИПерерасчетыФиксРасчет = Новый Массив;
	ДоначисленияИПерерасчетыФиксРасчет.Добавить("Результат");
	
	ДоначисленияИПерерасчетыФиксРасчетВремени = Новый Массив;
	ДоначисленияИПерерасчетыФиксРасчетВремени.Добавить("ОтработаноДней");
	ДоначисленияИПерерасчетыФиксРасчетВремени.Добавить("ОтработаноЧасов");
	ДоначисленияИПерерасчетыФиксРасчетВремени.Добавить("НормаДней");
	ДоначисленияИПерерасчетыФиксРасчетВремени.Добавить("НормаЧасов");
	
	ДоначисленияИПерерасчетыФиксСтрока = Новый Массив;
	ДоначисленияИПерерасчетыФиксСтрока.Добавить("Сотрудник");
	ДоначисленияИПерерасчетыФиксСтрока.Добавить("Подразделение");
	ДоначисленияИПерерасчетыФиксСтрока.Добавить("Начисление");
	ДоначисленияИПерерасчетыФиксСтрока.Добавить("ДатаНачала");
	ДоначисленияИПерерасчетыФиксСтрока.Добавить("ДатаОкончания");
	
	ДоначисленияИПерерасчетыФиксЗаполнение = Новый Массив;
	
	СтруктураКонтролируемыхПолей = Новый Структура;
	СтруктураКонтролируемыхПолей.Вставить("ФиксРасчет", ДоначисленияИПерерасчетыФиксРасчет);
	СтруктураКонтролируемыхПолей.Вставить("ФиксЗаполнение", ДоначисленияИПерерасчетыФиксЗаполнение);
	СтруктураКонтролируемыхПолей.Вставить("ФиксСтрока", ДоначисленияИПерерасчетыФиксСтрока);
	СтруктураКонтролируемыхПолей.Вставить("ФиксРасчетВремени", ДоначисленияИПерерасчетыФиксРасчетВремени);
	КонтролируемыеПоля = Новый Структура("ДоначисленияИПерерасчеты", СтруктураКонтролируемыхПолей);
	
	Возврат КонтролируемыеПоля;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей() Экспорт
	Возврат СтарыеЗначенияКонтролируемыхПолей;
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация", Объект.Организация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	
	ДополнитьФорму();
	
	// чтение данных
	ДанныеВРеквизиты();
	
	ЗаполнитьСотрудникаВШапке();
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьВидимостьПерерасчетовНаСервере();

	ЗагрузитьНастройки();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Сторнировано, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.ДоначисленияИПерерасчеты, "ПериодДействия", "ПериодДействияСтрокой");
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизиты()
	
	Если ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
		ОписаниеСторнируемогоДокумента = Документы.СторнированиеНачислений.ОписаниеСторнируемогоДокумента(Объект.СторнируемыйДокумент);
		ПериодРегистрацииСторнируемогоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СторнируемыйДокумент, ОписаниеСторнируемогоДокумента.МесяцНачисленияИмя);
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты(), 2);
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы());
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаДанныеВРеквизит(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата());
	
	ОтражениеЗарплатыВБухучетеРасширенный.ОбъектПриЧтенииНаСервереПредставлениеРаспределения(ЭтаФорма, ОписаниеДокумента());
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДанныеВРеквизит(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	ТекущийОбъект.Показатели.Очистить();
	
	Если Не ТекущийОбъект.ДоначислитьЗарплатуПриНеобходимости Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыДоначисленияИПерерасчеты());
	
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблиц, 2);	
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицДляРаспределенияРезультата());	
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры	

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ДоначисленияИПерерасчетыПодробно.Пометка, ОписаниеТаблицыДоначисленияИПерерасчеты());
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка, Элементы.ДоначисленияИПерерасчетыПодробно.Пометка, ОписаниеТаблицыДоначисленияИПерерасчеты());
КонецПроцедуры  

&НаКлиенте
Процедура ДополнитьСтроку(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей)
	РасчетЗарплатыРасширенныйФормы.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеДокумента(), ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДоначисленияИПерерасчетыОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты());
КонецПроцедуры

&НаКлиенте
Процедура ПереЗаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	Если ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
		ЗаполнитьПоСторнируемомуДокументу();
	КонецЕсли;
	
КонецПроцедуры

// Процедура используется для инициации расчета начислений из вне (на клиенте).
&НаКлиенте
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	РассчитатьСотрудникаНаСервере(Сотрудник);
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаНаСервере(Сотрудник) Экспорт
	
	Отбор = Новый Структура("ФизическиеЛицаСотрудников");
	МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	Отбор.ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ФизическоеЛицо");
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(Объект.ПериодРегистрации, Объект.Организация);
	ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьИсточникиИзмененийМенеджераРасчета(МенеджерРасчета, ИзмененныеДанные);
	
	НачальныеПозицииВставки = Новый Структура;
	ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, НачальныеПозицииВставки);
	МенеджерРасчета.РассчитатьЗарплату();
	РасчетЗарплатыВДанныеФормы(МенеджерРасчета.Зарплата, НачальныеПозицииВставки);	
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПослеЗаполнения(ДокументОбъект)
	
	НачатьТранзакцию();
	
	// Записать сторно-движения для расчета перерасчетов и доначислений.
	РегистраторНаборДляЗаполненияПерерасчета = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборДляЗаполненияПерерасчета = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(РегистраторНаборДляЗаполненияПерерасчета);
	
	// сотрудники и их данные
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект.Сторнировано, "Сотрудник", Истина);
	
	ИсправлениеВТекущемПериоде = Объект.ПериодРегистрации = ПериодРегистрацииСторнируемогоДокумента;
	
	Если ИсправлениеВТекущемПериоде Тогда
		
		МетаданныеРегистра = НаборДляЗаполненияПерерасчета.Метаданные();
		Если МетаданныеРегистра.Имя = "Начисления" Тогда
			УстановитьПривилегированныйРежим(Истина);
			РегистрыРасчета[МетаданныеРегистра.Имя].СторнироватьДвиженияВТекущемПериоде(НаборДляЗаполненияПерерасчета, Объект.СторнируемыйДокумент, Истина);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	Иначе
		
		ГоловнаяОрганиазция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Организация, "ГоловнаяОрганизация");
		ФизлицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ФизическоеЛицо");
		
		Для Каждого СтрокаСторно Из ДокументОбъект.Сторнировано Цикл
			НоваяСтрока = НаборДляЗаполненияПерерасчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСторно);
			НоваяСтрока.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
			НоваяСтрока.ВидРасчета = СтрокаСторно.Начисление;
			НоваяСтрока.ФизическоеЛицо = ФизлицаСотрудников[НоваяСтрока.Сотрудник];
			НоваяСтрока.Организация = ДокументОбъект.Организация;
			НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганиазция;
			НоваяСтрока.ПериодРегистрации = ДокументОбъект.ПериодРегистрации;
			ИспользованиеПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ВидРасчета, "ИспользованиеПериода");
			Если ИспользованиеПериода <> Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия Тогда
				НоваяСтрока.ПериодДействияНачало = СтрокаСторно.ПериодДействия;
				НоваяСтрока.ПериодДействияКонец = КонецМесяца(СтрокаСторно.ПериодДействия);
			Иначе
				НоваяСтрока.ПериодДействияНачало = СтрокаСторно.ДатаНачала;
				НоваяСтрока.ПериодДействияКонец = СтрокаСторно.ДатаОкончания;
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		НаборДляЗаполненияПерерасчета.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Отбор = Новый Структура("ФизическиеЛицаСотрудников");
	Отбор.ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ФизическоеЛицо");
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(Объект.ПериодРегистрации, Объект.Организация);
	ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьИсточникиИзмененийМенеджераРасчета(МенеджерРасчета, ИзмененныеДанные);
	
	НачальныеПозицииВставки = Новый Структура;
	ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, НачальныеПозицииВставки);
	МенеджерРасчета.РассчитатьЗарплату();
	РасчетЗарплатыВДанныеФормы(МенеджерРасчета.Зарплата, НачальныеПозицииВставки);
	
	ОтменитьТранзакцию();
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры

&НаСервере
Процедура ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, НачальныеПозицииВставки, СтрокиМенеджераРасчетаСторнировано = Неопределено)
	
	РасчетЗарплатыРасширенныйФормы.НачисленияВДанныеМенеджераРасчета(Объект.ДоначисленияИПерерасчеты, МенеджерРасчета, Объект.Организация, Отбор, НачальныеПозицииВставки);
	
	Если СтрокиМенеджераРасчетаСторнировано <> Неопределено Тогда
		Для каждого СтрокаСторнировано Из Объект.Сторнировано Цикл
		
			НоваяСтрока = МенеджерРасчета.СтрокаТаблицыНачислений();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСторнировано);
			РасчетЗарплатыРасширенныйФормы.РезультатРаспределенияВМенеджерРасчета(НоваяСтрока, СтрокаСторнировано, СтрокаСторнировано.ИдентификаторСтрокиВидаРасчета);
			РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаВМенеджерРасчета(
				НоваяСтрока,
				СтрокаСторнировано,
				СтрокаСторнировано.ИдентификаторСтрокиВидаРасчета,
				МенеджерРасчета,
				Объект.Организация);
			СтрокиМенеджераРасчетаСторнировано.Вставить(НоваяСтрока, СтрокаСторнировано);
			
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета)
	
	МенеджерРасчета.ИсключаемыйРегистратор = Объект.Ссылка;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = Объект.ДоначислитьЗарплатуПриНеобходимости;
	
КонецПроцедуры

&НаСервере
Процедура РасчетЗарплатыВДанныеФормы(ДанныеМенеджераРасчета, НачальныеПозицииВставки, СтрокиМенеджераРасчетаСторнировано = Неопределено)
	
	ВидыРасчета = Новый Массив;
	Для каждого СтрокаИсточника Из ДанныеМенеджераРасчета.Начисления Цикл
		ВидыРасчета.Добавить(СтрокаИсточника.Начисление);
	КонецЦикла;
	
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	ПараметрыДляПроверкиРезультатаРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляПроверкиРезультатовРаспределенияНачислений();
	
	Начисления = ДанныеМенеджераРасчета.Начисления.Скопировать();
	
	Если НачальныеПозицииВставки <> Неопределено Тогда
		
		Начисления.Индексы.Добавить("Сотрудник");
		ПозицииСотрудников = РасчетЗарплатыРасширенныйФормы.ТаблицаПозицииСотрудников(НачальныеПозицииВставки["Начисления"]);

		Сдвиг = 0;
		СтруктураПоиска = Новый Структура("Сотрудник");
		СтрокиКУдалению = Новый Массив;
	    Для каждого СтрокаПозиций Из ПозицииСотрудников Цикл
			
			СтруктураПоиска.Сотрудник = СтрокаПозиций.Сотрудник;
			СтрокиНачислений = Начисления.НайтиСтроки(СтруктураПоиска);
			ПозицияВставки = СтрокаПозиций.НачальнаяПозиция + Сдвиг;
			КоличествоСтрок = 0;
			Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
				
				Если СтрокиМенеджераРасчетаСторнировано <> Неопределено
					И СтрокиМенеджераРасчетаСторнировано[СтрокаНачисления] <> Неопределено Тогда
			
					Продолжить;
				КонецЕсли;
				НоваяСтрока = РасчетЗарплатыРасширенныйФормы.СтрокаТаблицыПоНачальнойПозиции(Объект.ДоначисленияИПерерасчеты, ПозицияВставки);
				РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеФормы(Объект.Организация, НоваяСтрока, СтрокаНачисления, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
				КоличествоСтрок = КоличествоСтрок + 1;
				ПозицияВставки = ПозицияВставки + 1;
				СтрокиКУдалению.Добавить(СтрокаНачисления);
					
			КонецЦикла; 
			
			Сдвиг = Сдвиг + КоличествоСтрок - СтрокаПозиций.КоличествоСтрок;
			
		КонецЦикла;
		
		Для Каждого СтрокаУдаления Из СтрокиКУдалению Цикл
			Начисления.Удалить(СтрокаУдаления);
		КонецЦикла;	
			
	КонецЕсли;
	
	Для каждого СтрокаИсточника Из Начисления Цикл
		
		Если СтрокиМенеджераРасчетаСторнировано <> Неопределено
			И СтрокиМенеджераРасчетаСторнировано[СтрокаИсточника] <> Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.ДоначисленияИПерерасчеты.Добавить();
		РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеФормы(Объект.Организация, НоваяСтрока, СтрокаИсточника, ВидыРасчетаИнфо, ПараметрыДляПроверкиРезультатаРаспределения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеНачисленияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Сторнировано.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеНачисленияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.Сторнировано.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеНачисленияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Сторнировано.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеНачисленияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеНачисленияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты());
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(ЗадатьВопрос = Истина)
	
	РазностьПериодов = Объект.ПериодРегистрации - ПериодРегистрацииСторнируемогоДокумента;
	
	Если РазностьПериодов < 0 Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипВопроса", "НеКорректныйПериод");
		Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Период сторнирования не может быть меньше периода сторнируемого документа (%1 г.)'"),
			Формат(ПериодРегистрацииСторнируемогоДокумента, "ДФ='ММММ гггг'"));
		
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ОК);
		Возврат;
	КонецЕсли;
	
	ПерерасчетДоступен = РазностьПериодов > 0;
	
	Если ПерерасчетДоступен И Объект.ДоначислитьЗарплатуПриНеобходимости И ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
		ЗаполнитьПоСторнируемомуДокументу();
	КонецЕсли;
	
	Если Элементы.ДоначислитьЗарплатуПриНеобходимости.Видимость <> ПерерасчетДоступен Тогда
		УстановитьВидимостьПерерасчетовНаСервере(ПерерасчетДоступен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ТипВопроса") Тогда
		ЗадатьВопрос = Ложь;
		
		Если ДополнительныеПараметры.ТипВопроса = "ТекущийПериод" И Результат = КодВозвратаДиалога.Отмена Тогда
			Объект.ПериодРегистрации = ДобавитьМесяц(ПериодРегистрацииСторнируемогоДокумента, 1);
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
			
		ИначеЕсли ДополнительныеПараметры.ТипВопроса = "НеКорректныйПериод" Тогда
			Объект.ПериодРегистрации = ПериодРегистрацииСторнируемогоДокумента;
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
			
		КонецЕсли;
	Иначе
		ЗадатьВопрос = Истина;
	КонецЕсли;
	
	ПериодРегистрацииПриИзменении(ЗадатьВопрос);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПерерасчетовНаСервере(ПерерасчетДоступен = Неопределено)
	
	Если ПерерасчетДоступен = Неопределено Тогда
		ПерерасчетДоступен = Объект.ПериодРегистрации > ПериодРегистрацииСторнируемогоДокумента;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоначислитьЗарплатуПриНеобходимости", "Видимость", ПерерасчетДоступен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаДоначисленияИПерерасчеты", "Видимость", ПерерасчетДоступен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Информация", "Видимость", Не ПерерасчетДоступен);
	
КонецПроцедуры	

#КонецОбласти

#Область Инициализация

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;

#КонецОбласти
