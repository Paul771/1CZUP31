#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли; 
	
	// Порядок выплаты заполняем значением по умолчанию (важно для документоа, созданных до появления реквизита ПорядокВыплаты).
	Если ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПустаяСсылка() Тогда
		ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	КонецЕсли;
	
	ПериодыПерерасчета = "";
	
	ПериодыПерерасчетов = НачисленияПерерасчет.Выгрузить(, "ДатаНачала");
	ПериодыПерерасчетов.Свернуть("ДатаНачала");
	ПериодыПерерасчетов.Сортировать("ДатаНачала");
	
	НепрерывныеПериоды = Новый ТаблицаЗначений;
	НепрерывныеПериоды.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	НепрерывныеПериоды.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата"));
	
	НепрерывныйПериод = Неопределено;
	Для каждого СтрокаПериода Из ПериодыПерерасчетов Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПериода.ДатаНачала) Тогда
			Продолжить;
		КонецЕсли;
		
		ПериодПерерасчета = НачалоМесяца(СтрокаПериода.ДатаНачала);
		
		Если НепрерывныйПериод = Неопределено ИЛИ НепрерывныйПериод.Окончание + 1 < ПериодПерерасчета Тогда
			НепрерывныйПериод = НепрерывныеПериоды.Добавить();
			НепрерывныйПериод.Начало = ПериодПерерасчета;
		КонецЕсли;
		
		НепрерывныйПериод.Окончание = КонецМесяца(ПериодПерерасчета);
		
	КонецЦикла;
	
	ДобавитьЗапятую = Ложь;
	Для каждого НепрерывныйПериод Из НепрерывныеПериоды Цикл
		
		Если ДобавитьЗапятую Тогда
			ПериодыПерерасчета = ПериодыПерерасчета + ", ";
		Иначе
			ДобавитьЗапятую = Истина;
		КонецЕсли; 
		
		Если НепрерывныйПериод.Начало = НачалоМесяца(НепрерывныйПериод.Окончание) Тогда
			ПредставлениеПериода = Формат(НепрерывныйПериод.Начало, "ДФ='ММММ гггг'");
		Иначе
			ПредставлениеПериода = Формат(НепрерывныйПериод.Начало, "ДФ='ММММ гггг'") + " - " + Формат(НепрерывныйПериод.Окончание, "ДФ='ММММ гггг'");
		КонецЕсли;
		
		ПериодыПерерасчета = ПериодыПерерасчета + ПредставлениеПериода;
		
	КонецЦикла;
	
	ДокументПроведен =  Неопределено;
	ДополнительныеСвойства.Свойство("Проведен", ДокументПроведен);
	
	Если Проведен ИЛИ ДокументПроведен = Истина Тогда
		ПерерасчетЗарплаты.ПериодыРасчетаСотрудников(ЭтотОбъект);
	КонецЕсли; 
	
	Документы.НачислениеЗарплаты.ЗаполнитьПредставлениеРаспределенияРезультатовРасчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если РежимДоначисления Тогда
		ЗарплатаКадры.ПроверитьДатуВыплаты(ЭтотОбъект, Отказ);
	Иначе
		
		Для каждого СтрокаНачислений Из НачисленияПоДоговорам Цикл
			
			Зарплатакадры.ПроверитьКорректностьДаты(Ссылка, СтрокаНачислений.ПланируемаяДатаВыплаты, "Объект.НачисленияПоДоговорам[" + Формат(СтрокаНачислений.НомерСтроки - 1, "ЧГ=") + "].ПланируемаяДатаВыплаты",
				Отказ, НСтр("ru='Дата выплаты'"), Дата, НСтр("ru='даты документа'"));
			
		КонецЦикла;
		
	КонецЕсли;
	
	УчетНДФЛДокументы.ПроверитьЗаполненияКодовВычетаДокумента(ЭтотОбъект, Отказ);
	
	ПроверитьПериодДействияНачислений(Отказ);
	
	ПроверитьНачисленияПоДоговорам(Отказ);
	
	ПроверитьРаспределениеПоИсточникамФинансирования(Отказ);
	
	ПроверитьРаспределениеПоТерриториямУсловиямТруда(Отказ);
	
	Если Не РежимДоначисления Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПорядокВыплаты");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПланируемаяДатаВыплаты");
	КонецЕсли;
	
	ПроверитьВыплатуПособийУчастникомПроектаПоПрямымВыплатамФСС(Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Документы.НачислениеЗарплаты.ПровестиПоУчетам(Ссылка, РежимПроведения, Отказ, Неопределено, Движения, ЭтотОбъект, ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПерерасчетЗарплаты.ВосстановлениеПерерасчетов(Ссылка, Организация);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	
	Если ДополнительныеСвойства.Свойство("ОграниченияРегистрации") Тогда
		// Ограничения регистрации уже были получены
		Возврат ДополнительныеСвойства.ОграниченияРегистрации;
	КонецЕсли;
	
	ОграниченияРегистрации = ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации();
	ОграниченияРегистрации.Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	
	Возврат ОграниченияРегистрации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

Процедура ПроверитьПериодДействияНачислений(Отказ)
	
	ПараметрыПроверки = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверки.Ссылка = ЭтотОбъект.Ссылка;
	
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Начисления", НСтр("ru = 'Начисления'")));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("НачисленияПерерасчет", НСтр("ru = 'Доначисления, перерасчеты'")));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Пособия", НСтр("ru = 'Пособия'")));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("ПособияПерерасчет", НСтр("ru = 'Перерасчет пособий'")));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Удержания", НСтр("ru = 'Удержания'"), "Удержание"));
	
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ЭтотОбъект, ПараметрыПроверки, ПроверяемыеКоллекции, Отказ);
	
КонецПроцедуры

Процедура ПроверитьВыплатуПособийУчастникомПроектаПоПрямымВыплатамФСС(Отказ)
	
	ЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект = ПрямыеВыплатыПособийСоциальногоСтрахования.ЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект(Организация, МесяцНачисления);
	Если ЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект Тогда
		ТекстСообщения = ПрямыеВыплатыПособийСоциальногоСтрахования.ТекстСообщенияЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект(Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация" , , Отказ);
	Иначе
		
		ВыплачиваемыеПособия = Начисления.Выгрузить(, "Начисление, Результат");
		ВыплачиваемыеПособия.Свернуть("Начисление", "Результат");
		
		ВыплачиваемыеПособияДляПроверки = ПрямыеВыплатыПособийСоциальногоСтрахования.ПустаяТаблицаДляПроверкиОплатыПособийУчастникомПилотногоПроектаФСС();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВыплачиваемыеПособия, ВыплачиваемыеПособияДляПроверки);
		   
		ТекстСообщения = ПрямыеВыплатыПособийСоциальногоСтрахования.ПроверитьОплатуПособийУчастникомПилотногоПроектаФСС(Организация, МесяцНачисления, ВыплачиваемыеПособияДляПроверки);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "МесяцНачисленияСтрокой", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНачисленияПоДоговорам(Отказ)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаПоДоговору Из НачисленияПоДоговорам Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоДоговору.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		СотрудникДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПоДоговору.ДокументОснование, "Сотрудник");
		Если СтрокаПоДоговору.Сотрудник <> СотрудникДоговора Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В строке %1, табличной части ""Начисления по договорам"" для сотрудника %2 указан договор другого сотрудника (%3)'"),
				СтрокаПоДоговору.НомерСтроки,
				СтрокаПоДоговору.Сотрудник,
				СотрудникДоговора);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, , "Объект.НачисленияПоДоговорам[" + Формат(СтрокаПоДоговору.НомерСтроки - 1, "ЧН=; ЧГ=") + "].ДокументОснование" , , Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьРаспределениеПоИсточникамФинансирования(Отказ)
	
	Если РежимДоначисления Тогда
		
		ИменаТаблицРаспределяемыхПоСтатьямФинансирования =
			"Начисления,
			|НачисленияПерерасчет,
			|НачисленияПоДоговорам,
			|Пособия,
			|ПособияПерерасчет,
			|Удержания,
			|НДФЛ,
			|ПогашениеЗаймов,
			|КорректировкиВыплаты";
		
	Иначе
		
		ИменаТаблицРаспределяемыхПоСтатьямФинансирования = "";
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("ОперацииРасчетаЗарплаты");
			
			Если ДополнительныеСвойства.Свойство("ВидОперации") Тогда
				ВидОперации = ДополнительныеСвойства.ВидОперации;
			Иначе
				ВидОперации = Модуль.ВидОперацииДокумента(Ссылка);
			КонецЕсли;
				
			ДанныеВидаОперации = Модуль.ДанныеВидаОперации(ВидОперации);
			
		Иначе
			
			ДанныеВидаОперации = Новый Структура;
			ДанныеВидаОперации.Вставить("ИспользоватьНачисление", Истина);
			ДанныеВидаОперации.Вставить("ИспользоватьДоговоры", Истина);
			ДанныеВидаОперации.Вставить("ИспользоватьПособия", Истина);
			ДанныеВидаОперации.Вставить("ИспользоватьЛьготы", Истина);
			ДанныеВидаОперации.Вставить("ИспользоватьНДФЛ", Истина);
			ДанныеВидаОперации.Вставить("ИспользоватьУдержания", Истина);
			ДанныеВидаОперации.Вставить("ИспользоватьЗаймы", Истина);
			
		КонецЕсли;
		
		Если ДанныеВидаОперации.ИспользоватьНачисление Тогда
			
			ИменаТаблицРаспределяемыхПоСтатьямФинансирования = ?(ПустаяСтрока(ИменаТаблицРаспределяемыхПоСтатьямФинансирования), "", ИменаТаблицРаспределяемыхПоСтатьямФинансирования + ",")
				+ "Начисления,НачисленияПерерасчет";
			
		КонецЕсли;
		
		Если ДанныеВидаОперации.ИспользоватьДоговоры Тогда
			
			ИменаТаблицРаспределяемыхПоСтатьямФинансирования = ?(ПустаяСтрока(ИменаТаблицРаспределяемыхПоСтатьямФинансирования), "", ИменаТаблицРаспределяемыхПоСтатьямФинансирования + ",")
				+ "НачисленияПоДоговорам";
			
		КонецЕсли;
		
		Если ДанныеВидаОперации.ИспользоватьПособия Тогда
			
			ИменаТаблицРаспределяемыхПоСтатьямФинансирования = ?(ПустаяСтрока(ИменаТаблицРаспределяемыхПоСтатьямФинансирования), "", ИменаТаблицРаспределяемыхПоСтатьямФинансирования + ",")
				+ "Пособия,ПособияПерерасчет";
			
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			МодульЛьготыСотрудников = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			МодульЛьготыСотрудников.ДополнитьИменаТаблицРаспределяемыхПоСтатьямФинансирования(ИменаТаблицРаспределяемыхПоСтатьямФинансирования, ДанныеВидаОперации);
		КонецЕсли;
		
		Если ДанныеВидаОперации.ИспользоватьНДФЛ Тогда
			
			ИменаТаблицРаспределяемыхПоСтатьямФинансирования = ?(ПустаяСтрока(ИменаТаблицРаспределяемыхПоСтатьямФинансирования), "", ИменаТаблицРаспределяемыхПоСтатьямФинансирования + ",")
				+ "НДФЛ,КорректировкиВыплаты";
			
		КонецЕсли;
		
		Если ДанныеВидаОперации.ИспользоватьУдержания Тогда
			
			ИменаТаблицРаспределяемыхПоСтатьямФинансирования = ?(ПустаяСтрока(ИменаТаблицРаспределяемыхПоСтатьямФинансирования), "", ИменаТаблицРаспределяемыхПоСтатьямФинансирования + ",")
				+ "Удержания";
			
		КонецЕсли;
		
		Если ДанныеВидаОперации.ИспользоватьЗаймы Тогда
			
			ИменаТаблицРаспределяемыхПоСтатьямФинансирования = ?(ПустаяСтрока(ИменаТаблицРаспределяемыхПоСтатьямФинансирования), "", ИменаТаблицРаспределяемыхПоСтатьямФинансирования + ",")
				+ "ПогашениеЗаймов";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИменаТаблицРаспределяемыхПоСтатьямФинансирования) Тогда
		
		ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержанийОбъекта(
			ЭтотОбъект, ИменаТаблицРаспределяемыхПоСтатьямФинансирования, Отказ);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРаспределениеПоТерриториямУсловиямТруда(Отказ)
	
	ИменаТаблиц = "Начисления,НачисленияПерерасчет,Пособия,ПособияПерерасчет";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		МодульЛьготыСотрудников = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		МодульЛьготыСотрудников.ДополнитьИменаТаблицРаспределенияПоТерриториямУсловиямТруда(ИменаТаблиц);
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.ПроверитьРаспределениеПоТерриториямУсловиямТрудаДокумента(ЭтотОбъект, ИменаТаблиц, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
