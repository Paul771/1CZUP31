#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей;

&НаКлиенте
Перем СотрудникУдаляемойСтроки;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем СотрудникиКРасчету Экспорт;

&НаКлиенте
Перем ПечатныеФормыСотрудников;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма);
	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Объект.РежимДоначисления Тогда
			КлючиИдентификаторовЗаполнения = "Организация, Ответственный, Месяц";
		Иначе
			КлючиИдентификаторовЗаполнения = "Организация, Ответственный, ПредыдущийМесяц";
		КонецЕсли;
		
		ЗначенияДляЗаполнения = Новый Структура(КлючиИдентификаторовЗаполнения, "Объект.Организация", "Объект.Ответственный", "Объект.МесяцНачисления");
		
		Если ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
			ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
		КонецЕсли;
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Если Объект.РежимДоначисления Тогда
			Объект.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
		КонецЕсли; 
			
		ПриПолученииДанныхНаСервере(РеквизитФормыВЗначение("Объект"));
		Если Объект.РежимДоначисления Тогда
			РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачислениеЗарплатыВоеннослужащим",
		"Видимость",
		ИспользоватьВоеннуюСлужбу);
	
		Объект.НачислениеЗарплатыВоеннослужащим = ИспользоватьВоеннуюСлужбу;	

	КонецЕсли;
	
	Если Объект.РежимДоначисления Тогда
		РасчетЗарплатыРасширенныйФормы.УстановитьДоступныеХарактерыВыплаты(Элементы);
		ЗаполнитьПриОткрытии = Параметры.ЗначенияЗаполнения.Свойство("ЗаполнитьПриОткрытии");
	КонецЕсли; 
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// По умолчанию считаем, что после записи форму нужно закрыть, 
	// в связи с тем, что нельзя обработать событие закрытия в веб-клиенте.
	ЗакрыватьПослеЗаписи = Истина;
	
	ОкончательныйРасчетНДФЛ = Не Объект.РежимДоначисления;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗаполнитьПриОткрытии Тогда
		
		ПодключитьОбработчикОжидания("ЗаполнитьДанныеФормыНаКлиенте", 0.1, Истина);
		ЗаполнитьПриОткрытии = Ложь;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Сотрудники.Форма.ФормаВыбора") Тогда
		ОбработкаПодбораНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НачислениеЗарплаты" Тогда
		
		Если Параметр.Свойство("Организация")
			И Параметр.Организация = Объект.Организация
			И Параметр.Свойство("РежимДоначисления")
			И Параметр.РежимДоначисления Тогда
			
			УстановитьОтображениеСообщенияОНеобходимостиПерерасчета();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененыРезультатыРасчетаНДФЛ" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбновитьДанныеНДФЛНаСервере(Параметр);
		РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыНДФЛ());
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ЗаполнениеВыполнено = Ложь;
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачислениеЗарплатыВоеннослужащим",
		"Видимость",
		ИспользоватьВоеннуюСлужбу);
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РасчетЗарплатыРасширенныйКлиент.ПередЗаписьюДокументаСоСпискомСотрудников(ЭтаФорма, "ПередЗаписьюОкончание", Отказ, ПараметрыЗаписи);
	
	Если Не Отказ Тогда
		
		// Если документ проведен, то имитируем режим ПриЗаписиПерепроводить.
		Если Объект.Проведен И ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
			ПровестиДокументНаКлиенте();
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеквизитыВДанные(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОперацииРасчетаЗарплаты");
		Модуль.ЗаписатьВидОперацииДокумента(ТекущийОбъект.Ссылка, ЭтотОбъект["ВидОперации"]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнениеВыполнено = Ложь;
	ПриПолученииДанныхНаСервере(ТекущийОбъект, Ложь);
	
	Если Не ЗакрыватьПослеЗаписи Тогда
		// Признак необходимости закрытия держим постоянно взведенным.
		ЗакрыватьПослеЗаписи = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_НачислениеЗарплаты", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ТекущийОбъект);
	
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
    ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ОбработатьИзменениеОрганизацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОНеобходимостиПерерасчетаНадписьОбработкаНавигационнойСсылки(Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Подробнее" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
		ПараметрыОткрытия.Вставить("ПериодДействия", Объект.МесяцНачисления);
		
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ПараметрыОткрытия.Вставить("Подразделение", Объект.Подразделение);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ПараметрыОткрытия.Вставить("Сотрудники", АдресСпискаСотрудниковВХранилище());
		КонецЕсли;
		
		ОткрытьФорму("Обработка.УправлениеПерерасчетами.Форма.ПричиныПерерасчетов",  ПараметрыОткрытия, ЭтотОбъект,
			, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Редактирование месяца строкой.

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыНачислений(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;	
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыНачислений(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыНачислений(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Начисления", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.Начисления.ТекущиеДанные.Сотрудник;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Начисления", Элементы.Начисления.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыНачислений(ЭтаФорма));
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент) 
	
	ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникУдаляемойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникУдаляемойСтроки)
	
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, ОписаниеТаблицыНачислений(ЭтаФорма));
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтаФорма, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(ИспользоватьВоеннуюСлужбу), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСотрудникПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(ЭтаФорма), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений(ЭтаФорма);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(ЭтаФорма), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(ЭтаФорма), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисленияПерерасчет

&НаКлиенте
Процедура НачисленияПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыПерерасчетов(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;	
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыПерерасчетов(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыПерерасчетов(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НачисленияПерерасчет", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.НачисленияПерерасчет.ТекущиеДанные.Сотрудник;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(
		ЭтаФорма, "НачисленияПерерасчет", Элементы.НачисленияПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыПерерасчетов(ЭтаФорма));
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаПодбораНаКлиенте(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПослеУдаления(Элемент)
	
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, ОписаниеТаблицыПерерасчетов(ЭтаФорма));
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтаФорма, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(ИспользоватьВоеннуюСлужбу), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетСотрудникПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов(ЭтаФорма), Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыПерерасчетов(ЭтаФорма);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаНачалаПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов(ЭтаФорма), Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаОкончанияПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов(ЭтаФорма), Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисленияПоДоговорам

&НаКлиенте
Процедура НачисленияПоДоговорамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыНачисленийПоДоговорам(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыНачисленийПоДоговорам(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамДокументОснованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НачисленияПоДоговорам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) Тогда
		ЗаполнитьСотрудникаПриВыбореДоговораГПХ();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НачисленияПоДоговорам", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "НачисленияПоДоговорам", Элементы.НачисленияПоДоговорам.ТекущиеДанные, НоваяСтрока, Копирование);
	Если НоваяСтрока Тогда
		Элементы.НачисленияПоДоговорам.ТекущиеДанные.ПланируемаяДатаВыплаты = 
			РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплатыПоНастройкам(Объект.МесяцНачисления, НастройкиВыплатыЗарплатыВОрганизации);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(ИзмененныеДанные, "ДоговорыПодряда",, ТекущиеДанные.Сотрудник);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыНачисленийПоДоговорам(ЭтаФорма));
	НачисленияПоДоговорамПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.НачисленияПоДоговорам.ТекущиеДанные.Сотрудник;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(ИзмененныеДанные, "ДоговорыПодряда",, ТекущиеДанные.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПослеУдаления(Элемент)
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, ОписаниеТаблицыНачисленийПоДоговорам(ЭтаФорма));
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПособия

&НаКлиенте
Процедура ПособияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыПособия(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;	
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ПособияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыПособия(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыПособия(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Пособия", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.Пособия.ТекущиеДанные.Сотрудник;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Пособия", Элементы.Пособия.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыПособия(ЭтаФорма));
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПослеУдаления(Элемент) 
	
	ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникУдаляемойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияСотрудникПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПособия(ЭтаФорма), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыПособия(ЭтаФорма);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПособия(ЭтаФорма), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПособия(ЭтаФорма), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Пособия.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.Пособия.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Пособия.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПособияПерерасчет

&НаКлиенте
Процедура ПособияПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыПособияПерерасчет(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;	
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ПособияПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыПособияПерерасчет(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "ПособияПерерасчет", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.ПособияПерерасчет.ТекущиеДанные.Сотрудник;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "ПособияПерерасчет", Элементы.ПособияПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет(ЭтаФорма));
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПослеУдаления(Элемент) 
	
	ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникУдаляемойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетСотрудникПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет(ЭтаФорма), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыПособияПерерасчет(ЭтаФорма);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет(ЭтаФорма), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет(ЭтаФорма), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.ПособияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.ПособияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.ПособияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУдержания

&НаКлиенте
Процедура УдержанияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Удержания", Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияУдержаниеПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыУдержаний();
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыРасширенныйКлиент.УстановитьОграничениеТипаДокументаУдержанияПоКатегории(
		Элемент, Элементы.Удержания.ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Удержания", Элементы.Удержания.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Удержания",
		ТекущиеДанные.ФизическоеЛицо,
		,
		ТекущиеДанные.Удержание);
		
	Если ИспользоватьСтатьиФинансирования Тогда
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.РезультатРаспределения = Неопределено И ЗначениеЗаполнено(АдресТаблицыРаспределенияУдержаний) Тогда 
				ТекущиеДанные.РезультатРаспределения = РезультатРаспределенияИзВременногоХранилища(ТекущиеДанные.ИдентификаторСтрокиВидаРасчета, АдресТаблицыРаспределенияУдержаний, ОписаниеТаблицыНДФЛ());
			КонецЕсли;
			ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПерераспределитьУдержания(ТекущиеДанные, РаботаВБюджетномУчреждении);
		КонецЕсли;
	КонецЕсли;	
		
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыУдержаний());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("УдержанияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(
		ЭтаФорма, ОписаниеТаблицыУдержаний(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
		
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдержанияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыУдержаний(), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.Удержания.ТекущиеДанные.ФизическоеЛицо;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Удержания",
		ТекущиеДанные.ФизическоеЛицо,
		,
		ТекущиеДанные.Удержание);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПослеУдаления(Элемент)
	
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, ОписаниеТаблицыУдержаний());
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтаФорма, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(ИспользоватьВоеннуюСлужбу), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияФизическоеЛицоПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыУдержаний(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыУдержаний(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыУдержаний(), Ложь, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУдержанияПерерасчет

&НаКлиенте
Процедура УдержанияПерерасчетПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "УдержанияПерерасчет", Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПерерасчетУдержаниеПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыУдержанияПерерасчет();
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПерерасчетДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыРасширенныйКлиент.УстановитьОграничениеТипаДокументаУдержанияПоКатегории(
		Элемент, Элементы.УдержанияПерерасчет.ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "УдержанияПерерасчет", Элементы.УдержанияПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Удержания",
		ТекущиеДанные.ФизическоеЛицо,
		,
		ТекущиеДанные.Удержание);
	
	Если ИспользоватьСтатьиФинансирования Тогда
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.РезультатРаспределения = Неопределено И ЗначениеЗаполнено(АдресТаблицыРаспределенияУдержаний) Тогда 
				ТекущиеДанные.РезультатРаспределения = РезультатРаспределенияИзВременногоХранилища(ТекущиеДанные.ИдентификаторСтрокиВидаРасчета, АдресТаблицыРаспределенияУдержаний, ОписаниеТаблицыНДФЛ());
			КонецЕсли;
			ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПерераспределитьУдержания(ТекущиеДанные, РаботаВБюджетномУчреждении);
		КонецЕсли;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыУдержанияПерерасчет());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("УдержанияПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(
		ЭтаФорма, ОписаниеТаблицыУдержанияПерерасчет(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
		
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыУдержанияПерерасчет(), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПерерасчетПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.УдержанияПерерасчет.ТекущиеДанные.ФизическоеЛицо;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Удержания",
		ТекущиеДанные.ФизическоеЛицо,
		,
		ТекущиеДанные.Удержание);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПерерасчетПослеУдаления(Элемент)
	
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, ОписаниеТаблицыУдержанияПерерасчет());
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтаФорма, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(ИспользоватьВоеннуюСлужбу), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПерерасчетФизическоеЛицоПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыУдержанияПерерасчет(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПерерасчетДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыУдержанияПерерасчет(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПерерасчетДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыУдержанияПерерасчет(), Ложь, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНдфл

&НаКлиенте
Процедура НДФЛВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "НДФЛПодразделение" Или Поле.Имя = "НДФЛМесяцНалоговогоПериода" Или Поле.Имя = "НДФЛЗачтеноАвансовыхПлатежей" Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.НДФЛ.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	УчетНДФЛКлиент.ОткрытьФормуПодробнееОРасчетеНДФЛ(
		Объект.Организация, ЭтаФорма, Объект.МесяцНачисления, Элемент.ТекущиеДанные.ФизическоеЛицо);
	
КонецПроцедуры

&НаСервере
Функция СведенияОбНДФЛ() Экспорт
	
	ОписаниеТаблицы = ОписаниеТаблицыНДФЛ();
	
	ТекущиеДанные = Объект.НДФЛ.НайтиПоИдентификатору(Элементы.НДФЛ.ТекущаяСтрока);
	ФизическоеЛицо = ТекущиеДанные.ФизическоеЛицо;
	
	ДополнительныеСведения = УчетНДФЛФормыРасширенный.ДополнительныеДанныеДляПолученияСведенийОДоходахНДФЛДокумента();
	ДополнительныеСведения.МесяцНачисления = Объект.МесяцНачисления;
	ДополнительныеСведения.ПланируемаяДатаВыплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Объект.Организация, Объект.МесяцНачисления);
	
	СведенияОДоходахНДФЛ = УчетНДФЛФормыРасширенный.СведенияОДоходахНДФЛДокумента(Объект, "Начисления,НачисленияПерерасчет,Пособия,ПособияПерерасчет", ДополнительныеСведения, ФизическоеЛицо);	
	АдресСведенийОбНДФЛ = УчетНДФЛФормыРасширенный.СведенияОбНДФЛ(ЭтаФорма, ФизическоеЛицо, ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияРезультатовВХранилище);
	
	ДанныеОбНДФЛ = ПолучитьИзВременногоХранилища(АдресСведенийОбНДФЛ);
	ДанныеОбНДФЛ.Вставить("СведенияОДоходах", СведенияОДоходахНДФЛ.СведенияОДоходах);
	ДанныеОбНДФЛ.Вставить("ВычетыКДоходам", СведенияОДоходахНДФЛ.ВычетыКДоходам);
	
	МаксимальныйИдентификаторСтрокиНДФЛ = ЭтаФорма[ОписаниеПанелиВычеты().ИмяГруппыФормыПанелиВычеты + "МаксимальныйИдентификаторСтрокиНДФЛ"];
	ДанныеОбНДФЛ.Вставить("МаксимальныйИдентификаторСтрокиНДФЛ", МаксимальныйИдентификаторСтрокиНДФЛ);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбНДФЛ, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ОтборСтрокФизическихЛиц = Новый Структура("ФизическоеЛицо", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметр.ФизическоеЛицо));
	РасчетЗарплатыРасширенный.ЗаменитьСтрокиНДФЛ(Объект.НДФЛ, Параметр.НДФЛ, Объект.ПримененныеВычетыНаДетейИИмущественные, Параметр.ПримененныеВычетыНаДетейИИмущественные, ПолучитьКонтролируемыеПоля(), ОписаниеДокумента(ЭтаФорма), ОтборСтрокФизическихЛиц, Ложь);
	
	Для Каждого СтрокаНачислений Из Параметр.Начисления Цикл
		СтруктураПоиска = Новый Структура("ФизическоеЛицо,Начисление,ИдентификаторСтрокиВидаРасчета");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаНачислений);
		СтруктураПоиска.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтроки;
		НайденныеСтроки = Объект.Начисления.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].КодВычета = СтрокаНачислений.КодВычета;
			НайденныеСтроки[0].СуммаВычета = СтрокаНачислений.СуммаВычета;
		КонецЕсли; 
	КонецЦикла;
	
	ИзмененныеДанные.Загрузить(Параметр.ИзмененныеДанные);
	
	ОписаниеПанелиВычеты = ОписаниеПанелиВычеты();
	НайденныеСтроки = Объект.НДФЛ.НайтиСтроки(Новый Структура("ФизическоеЛицо", Параметр.ФизическоеЛицо));
	Для Каждого СтрокаНДФЛ Из НайденныеСтроки Цикл 
		УчетНДФЛФормы.ЗаполнитьПредставленияВычетовСтрокиНДФЛ(ЭтаФорма, СтрокаНДФЛ, ОписаниеПанелиВычеты);
	КонецЦикла;
	
	Модифицированность = Истина;
	НДФЛПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НДФЛ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПередНачаломИзменения(Элемент, Отказ)
	
	УчетНДФЛКлиент.НДФЛПередНачаломИзменения(ЭтаФорма, Элементы.НДФЛ.ТекущиеДанные, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПередУдалением(Элемент, Отказ)
	// Механизм закладки примененные вычеты.
	УчетНДФЛКлиент.НДФЛПередУдалением(ЭтаФорма, Элементы.НДФЛ.ТекущиеДанные, Отказ);
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(ИзмененныеДанные, "НДФЛ", ТекущиеДанные.ФизическоеЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПослеУдаления(Элемент)
	// Механизм закладки примененные вычеты.
	УчетНДФЛКлиентРасширенный.УдалитьПримененныеВычеты(ЭтаФорма);
	НДФЛПослеУдаленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьСтатьиФинансирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.РезультатРаспределения = Неопределено И ЗначениеЗаполнено(АдресТаблицыРаспределенияУдержаний) Тогда 
				ТекущиеДанные.РезультатРаспределения = РезультатРаспределенияИзВременногоХранилища(ТекущиеДанные.ИдентификаторСтрокиНДФЛ, АдресТаблицыРаспределенияУдержаний, ОписаниеТаблицыНДФЛ());
			КонецЕсли;
			ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПерераспределитьНДФЛ(ТекущиеДанные, РаботаВБюджетномУчреждении);
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(ИзмененныеДанные, "НДФЛ", ТекущиеДанные.ФизическоеЛицо);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыНДФЛ());
	НДФЛПриОкончанииРедактированияНаСервере();	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатРаспределенияИзВременногоХранилища(ИдентификаторСтроки, АдресТаблицыРаспределения, ОписаниеТаблицы)
	
	ДанныеРаспределения = ПолучитьИзВременногоХранилища(АдресТаблицыРаспределения);
	
	Если ДанныеРаспределения = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ИменаКолонокТаблицы = ЗарплатаКадрыРасширенныйКлиентСервер.ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицы);
	
	ОтборСтрок = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	ТаблицаРаспределенияПредварительно = ДанныеРаспределения.Скопировать(ОтборСтрок);
	
	ОтражениеЗарплатыВБухучетеРасширенный.ДополнитьТаблицуРаспределенияКодомСтатьиФинансирования(ТаблицаРаспределенияПредварительно);
	
	ТаблицаРаспределения = ТаблицаРаспределенияПредварительно.Скопировать(, ИменаКолонокТаблицы);
	СтруктураРаспределения = ЗарплатаКадрыРасширенный.ТаблицаЗначенийВСтруктуру(ТаблицаРаспределения);
	
	Возврат СтруктураРаспределения;
	
КонецФункции

&НаКлиенте
Процедура НДФЛПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "НДФЛ", Элементы.НДФЛ.ТекущиеДанные, НоваяСтрока, Копирование);
	// Механизм закладки примененные вычеты.
	УчетНДФЛКлиент.НДФЛПриНачалеРедактирования(ЭтаФорма, Элементы.НДФЛ.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ПогашениеЗаймовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыПогашениеЗаймов(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПогашенияЗаймовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьСтатьиФинансирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.РезультатРаспределения = Неопределено И ЗначениеЗаполнено(АдресТаблицыРаспределенияУдержаний) Тогда 
				ТекущиеДанные.РезультатРаспределения = РезультатРаспределенияИзВременногоХранилища(ТекущиеДанные.ИдентификаторСтроки, АдресТаблицыРаспределенияУдержаний, ОписаниеТаблицыПогашениеЗаймов());
			КонецЕсли;
			ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПерераспределитьПогашениеЗаймов(ТекущиеДанные, РаботаВБюджетномУчреждении);
		КонецЕсли;
	КонецЕсли;
	
	ПогашенияЗаймовПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПогашенияЗаймовПослеУдаления(Элемент)
	ПогашенияЗаймовПослеУдаленияНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВзносы

&НаКлиенте
Процедура ВзносыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.Взносы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ДатаПолученияДохода = КонецМесяца(Объект.МесяцНачисления);
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ТекущиеДанные, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	ВзносыПриОкончанииРедактированияНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПослеУдаления(Элемент)
	ВзносыПослеУдаленияНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаПриИзменении(Элемент)
	ДанныеТекущейСтроки = Элементы.Взносы.ТекущиеДанные;
	УчетСтраховыхВзносовКлиент.ВзносыДатаПолученияДоходаСтрокойПриИзменении(ДанныеТекущейСтроки, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДанныеТекущейСтроки = Элементы.Взносы.ТекущиеДанные;
	УчетСтраховыхВзносовКлиент.ВзносыДатаПолученияДоходаСтрокойНачалоВыбора(ЭтотОбъект, ДанныеТекущейСтроки, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	УчетСтраховыхВзносовКлиент.ВзносыДатаПолученияДоходаСтрокойРегулирование(
		Элементы.Взносы.ТекущиеДанные, 
		"ДатаПолученияДохода", 
		"ДатаПолученияДоходаСтрокой",
		Направление, 
		Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЛьготы

&НаКлиенте
Процедура ЛьготыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыЛьгот(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ЛьготыВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыЛьгот(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыЛьгот(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Льготы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.Льготы.ТекущиеДанные.Сотрудник;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Льготы", Элементы.Льготы.ТекущиеДанные, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыЛьгот(ЭтаФорма));
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПослеУдаления(Элемент)
	
	ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникУдаляемойСтроки);
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтаФорма, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(ИспользоватьВоеннуюСлужбу), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыСотрудникПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыЛьгот(ЭтаФорма), Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыЛьгот(ЭтаФорма);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыДатаНачалаПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(ЭтаФорма), Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыДатаОкончанияПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(ЭтаФорма), Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЛьготыПерерасчет

&НаКлиенте
Процедура ЛьготыПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ЛьготыПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПерерасчетПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "ЛьготыПерерасчет", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПерерасчетПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.ЛьготыПерерасчет.ТекущиеДанные.Сотрудник;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "ЛьготыПерерасчет", Элементы.ЛьготыПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма));
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПерерасчетПослеУдаления(Элемент)
	
	ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникУдаляемойСтроки);
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтаФорма, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(ИспользоватьВоеннуюСлужбу), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПерерасчетСотрудникПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма), Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПерерасчетНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПерерасчетДатаНачалаПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма), Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПерерасчетДатаОкончанияПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма), Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорректировкиВыплаты

&НаКлиенте
Процедура КорректировкиВыплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыКорректировкиВыплаты(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КорректировкиВыплатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьСтатьиФинансирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.РезультатРаспределения = Неопределено И ЗначениеЗаполнено(АдресТаблицыРаспределенияУдержаний) Тогда 
				ТекущиеДанные.РезультатРаспределения = РезультатРаспределенияИзВременногоХранилища(ТекущиеДанные.ИдентификаторСтроки, АдресТаблицыРаспределенияУдержаний, ОписаниеТаблицыКорректировкиВыплаты());
			КонецЕсли;
			ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПерераспределитьКорректировкиВыплаты(ТекущиеДанные, РаботаВБюджетномУчреждении);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Заполнить(Команда) Экспорт
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	ПечатныеФормыСотрудников = Неопределено;
	
	РасчетЗарплатыРасширенныйКлиент.ЗаполнитьДокументНачисленияЗарплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьССохранениемИсправлений(Команда)
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	ПечатныеФормыСотрудников = Неопределено;
	
	ПерезаполнитьДанныеФормыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Дозаполнить(Команда)
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	ПечатныеФормыСотрудников = Неопределено;
	
	МассивСотрудников = ОтсутствующиеВДокументеСотрудники();
	
	Если МассивСотрудников.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Результат = ПерезаполнитьДанныеФормыНаСервере(МассивСотрудников, Истина);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтаФорма, МассивСотрудников);
 		ОповеститьОбИзмененииОбъекта();
		УстановитьЗначенияКонтролируемыхПолей();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДФЛ(Команда)
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	РежимПересчетаНДФЛ = Истина;
	ПерезаполнитьДанныеФормыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВзносы(Команда)
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	РежимПересчетаВзносов = Истина;
	ПерезаполнитьДанныеФормыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ПодборСотрудникаВФормеДокументаНачислениеЗарплаты");
	
	Если Объект.РежимДоначисления Тогда
		ВладелецОтбора = Элементы.НачисленияПерерасчет;
	Иначе
		ВладелецОтбора = ЭтотОбъект;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	Отборы = Новый Структура("ПоказыватьДоговорниковГПХ", Истина);
	
	Если ИспользоватьВоеннуюСлужбу Тогда
		Отборы.Вставить("НачислениеЗарплатыВоеннослужащим", Объект.НачислениеЗарплатыВоеннослужащим);	
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Отбор", Отборы);
	КадровыйУчетРасширенныйКлиент.ДобавитьПараметрыОтбораПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(
		ЭтаФорма, ПараметрыОткрытия);
		
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		ВладелецОтбора,
		Объект.Организация,
		Объект.Подразделение,
		Объект.МесяцНачисления, 
		КонецМесяца(Объект.МесяцНачисления),
		,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	Если ЕстьИсправленныеСтроки() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru = 'Документ содержит ручные исправления (выделены шрифтом). 
	                         |Очистить данные?'");
							 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе 
		
		ОчиститьЗавершение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ПечатныеФормыСотрудников = Неопределено;
	ОчиститьТаблицыДокументаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанныеФормы(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	
	ПровестиДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	ПровестиДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(ЭтаФорма));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка, Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ПособияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ПособияПодробно.Пометка, ОписаниеТаблицыПособия(ЭтаФорма));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка, Элементы.ПособияПодробно.Пометка, ОписаниеТаблицыПособия(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ПособияПерерасчетПодробно.Пометка, ОписаниеТаблицыПособияПерерасчет(ЭтаФорма));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка, Элементы.ПособияПерерасчетПодробно.Пометка, ОписаниеТаблицыПособияПерерасчет(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов(ЭтаФорма));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка, Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.УдержанияПодробно.Пометка, ОписаниеТаблицыУдержаний());
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка, Элементы.УдержанияПодробно.Пометка, ОписаниеТаблицыУдержаний());
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПерерасчетПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.УдержанияПодробно.Пометка, ОписаниеТаблицыУдержанияПерерасчет());
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка, Элементы.УдержанияПодробно.Пометка, ОписаниеТаблицыУдержанияПерерасчет());
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ЛьготыПодробно.Пометка, ОписаниеТаблицыЛьгот(ЭтаФорма));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка, Элементы.ЛьготыПодробно.Пометка, ОписаниеТаблицыЛьгот(ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПерерасчетПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ЛьготыПерерасчетПодробно.Пометка, ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка, Элементы.ЛьготыПерерасчетПодробно.Пометка, ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыНачислений(ЭтаФорма));	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыНачислений(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПоДоговорамОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыНачисленийПоДоговорам(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПоДоговорамОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыНачисленийПоДоговорам(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыПособия(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияПерерасчетОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыПособия(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияПерерасчетОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыУдержаний());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыУдержаний());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияПерерасчетОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыУдержанияПерерасчет());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияПерерасчетОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыУдержанияПерерасчет());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыНДФЛ());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыНДФЛ());
КонецПроцедуры

&НаКлиенте
Процедура КарточкаУчетаПоСтраховымВзносам(Команда)
	
	ВзносыВыделенныеСтроки = Элементы.Взносы.ВыделенныеСтроки;
	Если ВзносыВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СотрудникиКРасчету.Количество() > 0 Тогда
		ПересчитатьДокументНаКлиенте();
	КонецЕсли; 
	
	КарточкаУчетаПоСтраховымВзносам = КарточкаУчетаПоСтраховымВзносамНаСервере(ВзносыВыделенныеСтроки);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.КарточкаУчетаПоСтраховымВзносам", "КарточкаУчетаПоСтраховымВзносамПодробнее", 
			КарточкаУчетаПоСтраховымВзносам, ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокумент(Команда)
	ПересчитатьДокументНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛисток(Команда) Экспорт
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ФормированиеРасчетногоЛисткаИзФормыДокументаНачислениеЗарплаты");
	
	НачисленияВыделенныеСтроки = Элементы.Начисления.ВыделенныеСтроки;
	Если НачисленияВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(НачисленияВыделенныеСтроки, "Начисления");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛистокДоначисленияПерерасчеты(Команда)
	
	ВыделенныеСтроки = Элементы.НачисленияПерерасчет.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(ВыделенныеСтроки, "НачисленияПерерасчет");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛистокУдержания(Команда)
	
	УдержанияВыделенныеСтроки = Элементы.Удержания.ВыделенныеСтроки;
	Если УдержанияВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(УдержанияВыделенныеСтроки, "Удержания");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛистокУдержанияПерерасчет(Команда)
	
	УдержанияВыделенныеСтроки = Элементы.Удержания.ВыделенныеСтроки;
	Если УдержанияВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(УдержанияВыделенныеСтроки, "УдержанияПерерасчет");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛистокПособия(Команда)
	
	ВыделенныеСтроки = Элементы.Пособия.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(ВыделенныеСтроки, "Пособия");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛистокДоговорникиГПХ(Команда)
	
	ВыделенныеСтроки = Элементы.НачисленияПоДоговорам.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(ВыделенныеСтроки, "НачисленияПоДоговорам");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначислитьСейчас(Команда)
	
	РасчетЗарплатыРасширенныйКлиент.ДоначислитьЗарплатуСейчас(Объект.Организация, Объект.МесяцНачисления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСотрудников(Команда)
	
	ПересчитатьСотрудниковНаСервере();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Подключаемые команды «Пересчитать сотрудника».

&НаКлиенте
Процедура Подключаемый_НачисленияПересчитатьСотрудника(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ПерерасчетСотрудникаВФормеДокументаНачислениеЗарплаты");
	
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "Начисления", "Сотрудник", Тип("СправочникСсылка.Сотрудники"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПерерасчетПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "НачисленияПерерасчет", "Сотрудник", Тип("СправочникСсылка.Сотрудники"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПерерасчетОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыПерерасчетов(ЭтаФорма));	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПоДоговорамПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "НачисленияПоДоговорам", "Сотрудник", Тип("СправочникСсылка.Сотрудники"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "Пособия", "Сотрудник", Тип("СправочникСсылка.Сотрудники"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияПерерасчетПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "ПособияПерерасчет", "Сотрудник", Тип("СправочникСсылка.Сотрудники"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "Удержания", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияПерерасчетПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "УдержанияПерерасчет", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "НДФЛ", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВзносыПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "Взносы", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПогашениеЗаймовПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "ПогашениеЗаймов", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"));
КонецПроцедуры

#Область ПодключаемыеКомандыУдалитьСотрудника

&НаКлиенте
Процедура Подключаемый_НачисленияУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьСотрудникаНаСервере(ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПерерасчетУдалитьСотрудника(Команда)

	ТекущиеДанные = Элементы.НачисленияПерерасчет.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьСотрудникаНаСервере(ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПоДоговорамУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.НачисленияПоДоговорам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьСотрудникаНаСервере(ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Пособия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьСотрудникаНаСервере(ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияПерерасчетУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.ПособияПерерасчет.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьСотрудникаНаСервере(ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЛьготыУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Льготы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьСотрудникаНаСервере(ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияУдалитьСотрудника(Команда)

	ТекущиеДанные = Элементы.Удержания.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьДанныеСотрудникаНаСервере(ТекущиеДанные.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.НДФЛ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьДанныеСотрудникаНаСервере(ТекущиеДанные.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВзносыУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Взносы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьДанныеСотрудникаНаСервере(ТекущиеДанные.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПогашениеЗаймовУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.ПогашениеЗаймов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьДанныеСотрудникаНаСервере(ТекущиеДанные.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка = Истина)

	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСДанными = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, ОписаниеТаблицы.ПутьКДанным);
	ТекущиеДанные = ТаблицаСДанными.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(ЭтаФорма, ОписаниеТаблицы, ВыбраннаяСтрока, Объект.МесяцНачисления);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

#Область ИнициализацияФормы

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект, ДополнятьФорму = Истина)
	
	ИспользоватьВоеннуюСлужбу = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		НастройкиПрограммы = Новый Структура;
		НастройкиПрограммы.Вставить("ИспользоватьВоеннуюСлужбу", Ложь);
		НастройкиПрограммы.Вставить("НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим", Ложь);
		НастройкиПрограммы.Вставить("ИспользоватьРасчетСохраняемогоДенежногоСодержания", Ложь);  
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.НастройкиПрограммыБюджетногоУчреждения(НастройкиПрограммы);	
		ИспользоватьВоеннуюСлужбу = НастройкиПрограммы.ИспользоватьВоеннуюСлужбу;
	КонецЕсли;

	НовыйДокумент = Параметры.Ключ.Пустая();
	НачатьИнициализациюФормы(ДополнятьФорму, НовыйДокумент);
	ЗарплатаКадрыРасширенный.ИзменитьРеквизитыФормы(ЭтаФорма);
	ЗавершитьИнициализациюФормы(ТекущийОбъект, ДополнятьФорму, НовыйДокумент);
	
	РеквизитыКДобавлению.Очистить();
	РеквизитыКУдалению.Очистить();
	
	Если Объект.Проведен Тогда
		
		СотрудникиПерерасчет = Новый ТаблицаЗначений;
		СотрудникиПерерасчет.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники,СправочникСсылка.ФизическиеЛица"));
		СотрудникиПерерасчет.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
		СотрудникиПерерасчет.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления,ПланВидовРасчетаСсылка.Удержания"));
		СотрудникиПерерасчет.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип);
		СотрудникиПерерасчет.Колонки.Добавить("ПерерасчетНачислений", Новый ОписаниеТипов("Булево"));
		СотрудникиПерерасчет.Колонки.Добавить("ПерерасчетУдержаний", Новый ОписаниеТипов("Булево"));
		
		ТабличныеЧасти = Новый Массив;
		ТабличныеЧасти.Добавить(Объект.НачисленияПерерасчет);
		ТабличныеЧасти.Добавить(Объект.ПособияПерерасчет);
		ТабличныеЧасти.Добавить(Объект.УдержанияПерерасчет);
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			
			Для Каждого Строка Из ТабличнаяЧасть Цикл
				
				НоваяСтрока = СотрудникиПерерасчет.Добавить();
				
				Если ТабличнаяЧасть = Объект.УдержанияПерерасчет Тогда
					НоваяСтрока.Сотрудник = Строка.ФизическоеЛицо;
					НоваяСтрока.ВидРасчета = Строка.Удержание;
					НоваяСтрока.ДокументОснование = Строка.ДокументОснование;
					НоваяСтрока.ПерерасчетУдержаний = Истина;
				Иначе
					НоваяСтрока.Сотрудник = Строка.Сотрудник;
					НоваяСтрока.ПериодДействия = Строка.ПериодДействия;
					НоваяСтрока.ПерерасчетНачислений = Истина;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
					НоваяСтрока.ПериодДействия = НачалоМесяца(Строка.ДатаНачала);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		СотрудникиПерерасчет.Свернуть("Сотрудник,ПериодДействия,ВидРасчета,ДокументОснование,ПерерасчетНачислений,ПерерасчетУдержаний");
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДополнитьСотрудникиПерерасчетыЛьготами(ЭтаФорма.Объект, СотрудникиПерерасчет);
		КонецЕсли;
		
		ПерерасчитанныеСотрудникиДокумента.Загрузить(СотрудникиПерерасчет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьИнициализациюФормы(ДополнятьФорму, НовыйДокумент = Истина)
	
	ЗаполнитьВидыОпераций(НовыйДокумент);
	
	// Устанавливаем значения реквизитов формы.
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	УстановитьФункциональныеОпцииФормы();
	
	Если Не ФормаДополнена И ДополнятьФорму Тогда
		// Вызываем ДополнитьФорму() в режиме отложенных вызовов.
		ДополнитьФорму(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИнициализациюФормы(ТекущийОбъект, ДополнятьФорму, НовыйДокумент = Истина)

	Если Не ФормаДополнена И ДополнятьФорму Тогда 
		// Досоздаем форму.
		ДополнитьФорму(Ложь);
		ДополнитьФорму();
	КонецЕсли;
	
	Если НовыйДокумент И Объект.РежимДоначисления Тогда
		РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект));
	КонецЕсли;
	
	// чтение данных
	ДанныеВРеквизиты(ТекущийОбъект);
	
	НастройкиВыплатыЗарплатыВОрганизации = Новый ФиксированнаяСтруктура(
		РасчетЗарплатыРасширенныйВызовСервера.СведенияОНастройкахЗарплатаКадрыРасширенная(Объект.Организация));
		
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Начисления, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НачисленияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Пособия, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.ПособияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
	
	УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, Объект.МесяцНачисления);
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(ЭтаФорма));
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов(ЭтаФорма));
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.ПособияПодробно.Пометка, ОписаниеТаблицыПособия(ЭтаФорма));
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.ПособияПерерасчетПодробно.Пометка, ОписаниеТаблицыПособияПерерасчет(ЭтаФорма));
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.УдержанияПодробно.Пометка, ОписаниеТаблицыУдержаний());
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.УдержанияПерерасчетПодробно.Пометка, ОписаниеТаблицыУдержанияПерерасчет());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтотОбъект, ОписанияТаблицЛьгот());
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриЗавершенииИнициализацииФормыДокументаНачисленияЗарплаты(ЭтаФорма, Объект.РежимДоначисления, ИспользоватьНачисление);
	КонецЕсли;
	
	РассчитатьИтогиПоДокументу();
	
	Если Объект.РежимДоначисления Тогда
		
		ГруппаСтраницы = Элементы.Найти("Страницы");
		Если ГруппаСтраницы <> Неопределено Тогда
			
			ГруппаНачисления = Элементы.Найти("ГруппаНачисления");
			
			ГруппаСтраница = Элементы.Найти("НачисленияПерерасчетСтраница");
			Если ГруппаСтраница <> Неопределено Тогда
				Элементы.Переместить(ГруппаСтраница, ГруппаСтраницы, ГруппаНачисления);
			КонецЕсли;
			
			ГруппаСтраница = Элементы.Найти("ПособияПерерасчетСтраницы");
			Если ГруппаСтраница <> Неопределено Тогда
				Элементы.Переместить(ГруппаСтраница, ГруппаСтраницы, ГруппаНачисления);
			КонецЕсли;
			
			ГруппаСтраница = Элементы.Найти("ЛьготыПерерасчетСтраница");
			Если ГруппаСтраница <> Неопределено Тогда
				Элементы.Переместить(ГруппаСтраница, ГруппаСтраницы, ГруппаНачисления);
			КонецЕсли;
			
			ГруппаСтраница = Элементы.Найти("УдержанияПерерасчетСтраница");
			Если ГруппаСтраница <> Неопределено Тогда
				Элементы.Переместить(ГруппаСтраница, ГруппаСтраницы, ГруппаНачисления);
			КонецЕсли;
			
		КонецЕсли;
	
		// Страницы с табличными частями
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНачисления",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНачисленияПоДоговорам",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаУправленческиеНачисления",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаЛьготы",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаУдержания",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПособия",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПогашениеЗаймов",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаВзносы",
			"Видимость",
			Ложь);
		
		// Итоги по документу
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИтогНачислено",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИтогВзносы",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"РасчетныйЛистокУдержания",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"РегистрНалоговогоУчетаПоНДФЛ",
			"Видимость",
			Ложь);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНачисления",
			"Видимость",
			ИспользоватьНачисление);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НачисленияПерерасчетСтраница",
			"Видимость",
			ИспользоватьНачисление);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПособия",
			"Видимость",
			ИспользоватьПособия);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПособияПерерасчетСтраницы",
			"Видимость",
			ИспользоватьПособия);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНачисленияПоДоговорам",
			"Видимость",
			ИспользоватьДоговоры);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаЛьготы",
			"Видимость",
			ИспользоватьЛьготы);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаУдержания",
			"Видимость",
			ИспользоватьУдержания);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНДФЛ",
			"Видимость",
			ИспользоватьНДФЛ);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаКорректировкиВыплаты",
			"Видимость",
			ИспользоватьНДФЛ);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПогашениеЗаймов",
			"Видимость",
			ИспользоватьЗаймы);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаВзносы",
			"Видимость",
			ИспользоватьВзносы);
		
		// Итоги по документу
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИтогНачислено",
			"Видимость",
			ИспользоватьНачисление Или ИспользоватьПособия Или ИспользоватьДоговоры Или ИспользоватьЛьготы);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИтогНачисленоПерерасчет",
			"Видимость",
			ИспользоватьНачисление);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИтогУдержано",
			"Видимость",
			ИспользоватьУдержания Или ИспользоватьНДФЛ);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИтогВзносы",
			"Видимость",
			ИспользоватьВзносы);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛьготыПерерасчетСтраница",
		"Видимость",
		ИспользоватьЛьготы);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НДФЛКомандаРедактированияРаспределения",
		"ГиперссылкаЯчейки",
		Ложь);
	
	ЗагрузитьНастройки();
	ЗаполнитьЗаголовокФормы();
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений(НайденыИсправленияПриОткрытии);
	УстановитьДоступностьКомандыДозаполнить();
	
КонецПроцедуры

// Подключение универсальных механизмов.
&НаСервере
Процедура ДополнитьФорму(ОтложенноеИзменение = Неопределено, КонтролируемыеПоля = Неопределено, ОписаниеПанелиВычеты = Неопределено, ОписаниеКлючевыхРеквизитов = Неопределено, ТаблицыОчищаемыеПриИзменении = Неопределено)
	
	Если ОтложенноеИзменение = Неопределено Тогда // Выполняем процедуры, не нуждающиеся в механизме отложенного создания.	
		
		// Создание реквизитов.
		РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФормуРезультатыРаспределения(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата(ЭтаФорма));
		РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФорму(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект), Истина);
		УчетНДФЛФормы.ДополнитьФормуПанельюВычетов(ЭтаФорма, ОписаниеПанелиВычеты, Ложь);
		
		// Создание элементов.
		ЗарплатаКадрыРасширенный.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма, ОписаниеКлючевыхРеквизитов);
		ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма, , ОписаниеКлючевыхРеквизитов, ТаблицыОчищаемыеПриИзменении);
		// Установка свойств элементов формы.
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыплатаГруппа", "Видимость", Объект.РежимДоначисления);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПорядокВыплаты", "ТолькоПросмотр", Истина);
		
		ДобавитьКомандуУдалитьСотрудника();
		
	Иначе
		
		Если ОтложенноеИзменение Тогда
			ДобавлятьЭлементыФормы = Ложь;
			ДобавлятьРеквизитыФормы = Истина;
		Иначе
			ДобавлятьЭлементыФормы = Истина;
			ДобавлятьРеквизитыФормы = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура(
			"КонтролируемыеПоля, 
			|ДобавлятьЭлементыФормы, 
			|ДобавлятьРеквизитыФормы, 
			|ОтложенноеИзменение");
		ДополнительныеПараметры.КонтролируемыеПоля = КонтролируемыеПоля; 
		ДополнительныеПараметры.ДобавлятьЭлементыФормы = ДобавлятьЭлементыФормы;
		ДополнительныеПараметры.ДобавлятьРеквизитыФормы = ДобавлятьРеквизитыФормы;
		ДополнительныеПараметры.ОтложенноеИзменение = ОтложенноеИзменение;
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыНачислений(ЭтаФорма), "Начисления", "НачисленияАвтоКоманды", , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыПерерасчетов(ЭтаФорма), "Начисления", "НачисленияПерерасчетАвтоКоманды", , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыНачисленийПоДоговорам(ЭтаФорма), "", "НачисленийПоДоговорамАвтоКоманды" , , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыПособия(ЭтаФорма), "Пособия", "ПособияАвтоКоманды" , , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыПособияПерерасчет(ЭтаФорма), "Пособия", "ПособияПерерасчетАвтоКоманды" , , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыУдержаний(), "Удержания", "УдержанияАвтоКоманды" , , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыУдержанияПерерасчет(), "Удержания", "УдержанияПерерасчетАвтоКоманды" , , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыНДФЛ(), "", "НДФЛАвтоКоманды" , , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДокументыВыполненияНачисленийДополнитьФорму(ЭтотОбъект, ОписаниеТаблицыЛьгот(ЭтаФорма), "ЛьготыАвтоКоманды", КонтролируемыеПоля, , , ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
			Модуль.ДокументыВыполненияНачисленийДополнитьФорму(ЭтотОбъект, ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма), "ЛьготыПерерасчетАвтоКоманды", КонтролируемыеПоля, , , ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		КонецЕсли;
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Модуль.ПриДополненииФормыДокументаНачислениеЗарплаты(ЭтаФорма, ДополнительныеПараметры);
		КонецЕсли;
		
		РасчетЗарплатыРасширенныйФормы.ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(
			ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		РасчетЗарплатыРасширенныйФормы.ПорядокВыплатыЗарплатыДополнитьФорму(
			ЭтаФорма,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		
		ОтражениеЗарплатыВБухучетеРасширенный.ОбъектПриЧтенииНаСервереПроцентЕНВД(
			ЭтаФорма, Объект.Организация, Объект.МесяцНачисления, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ЗаполнитьВидыОпераций(НовыйДокумент)
	
	ИспользоватьНачисление 	= Истина;
	ИспользоватьПособия 	= Истина;
	ИспользоватьДоговоры 	= Истина;
	ИспользоватьЛьготы 		= Истина;
	ИспользоватьУдержания 	= Истина;
	ИспользоватьНДФЛ 		= Истина;
	ИспользоватьЗаймы 		= Истина;
	ИспользоватьВзносы 		= Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда 
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОперацииРасчетаЗарплаты");
		
		Если НовыйДокумент Тогда
			Параметры.Свойство("ВидОперации", ВидОперации);
			Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
				Модуль.УстановитьВидОперацииДокумента(ЭтотОбъект, Параметры.ЗначениеКопирования);
			КонецЕсли;
		Иначе
			Модуль.УстановитьВидОперацииДокумента(ЭтотОбъект, Объект.Ссылка);
		КонецЕсли;
		
		ДанныеВидаОперации = Модуль.ДанныеВидаОперации(ВидОперации);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеВидаОперации);
		
	КонецЕсли;
	
	Если ИспользоватьЛьготы И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		ИспользоватьЛьготы = Модуль.ИспользуетсяФункционалЛьгот();
	Иначе 
		ИспользоватьЛьготы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовокФормы()
	
	Если Объект.РежимДоначисления Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			АвтоЗаголовок = Истина;
			Заголовок = "";
		Иначе 
			АвтоЗаголовок = Ложь;
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (создание)'"), НСтр("ru='Доначисление, перерасчет'"));
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	АвтоЗаголовок = Истина;
	НаименованиеВидаОперации = "";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда 
		АвтоЗаголовок = Не ЗначениеЗаполнено(ЭтотОбъект["ВидОперации"]);
	    НаименованиеВидаОперации = Строка(ЭтотОбъект["ВидОперации"]);
	КонецЕсли;
	
	Если Не АвтоЗаголовок Тогда
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1 (создание)'"), НаименованиеВидаОперации);
		Иначе
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1 %2 от %3'"), НаименованиеВидаОперации, Объект.Номер, Формат(Объект.Дата, "ДЛФ=Д"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачисленияПоДоговорамПриОкончанииРедактированияНаСервере()
	
	ЗаполнитьВторичныеДанныеФормыПримененныеВычеты();
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

&НаСервере
Процедура НДФЛПриОкончанииРедактированияНаСервере()
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
КонецПроцедуры

&НаСервере
Процедура НДФЛПослеУдаленияНаСервере()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	РассчитатьИтогУдержано(ЭтаФорма);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

&НаСервере
Процедура ПогашенияЗаймовПриОкончанииРедактированияНаСервере()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	РассчитатьИтогУдержано(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПогашенияЗаймовПослеУдаленияНаСервере()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	РассчитатьИтогУдержано(ЭтаФорма);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

&НаСервере
Процедура ВзносыПриОкончанииРедактированияНаСервере()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	РассчитатьИтогВзносы(ЭтаФорма);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

&НаСервере
Процедура ВзносыПослеУдаленияНаСервере()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	РассчитатьИтогВзносы(ЭтаФорма);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

// Месяц начисления
&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()

	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	ОтражениеЗарплатыВБухучетеРасширенный.ОбработатьИзменениеМесяцНачисленияПроцентЕНВД(ЭтаФорма, Объект.Организация, Объект.МесяцНачисления);
	УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, Объект.МесяцНачисления);
	
	ЗаполнениеВыполнено = Ложь;
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

// Заполнение и расчет начислений.

// Процедура используется для инициации расчета начислений из вне (на клиенте).
&НаКлиенте   
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПечатныеФормыСотрудника(Сотрудник);
	
	Если НЕ РасчетЗарплатыРасширенныйКлиент.ДобавитьСотрудникаКРасчету(ЭтаФорма, Сотрудник, ОписаниеТаблицы) Тогда
		РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы = Неопределено, РассчитатьИтоги = Истина)
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект), Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = СотрудникиФизическиеЛицаОтбор(Сотрудник);
	Если Отбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(Объект.МесяцНачисления, Объект.Организация);
	ЗаполнитьНастройкиМенеджераРасчета(Отбор.СотрудникиКРасчету, МенеджерРасчета);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьИсточникиИзмененийМенеджераРасчета(МенеджерРасчета, ИзмененныеДанные);
	
	СотрудникиКРасчету = Отбор.СотрудникиКРасчету;
	НачальныеПозицииВставки = Новый Соответствие;
	ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, НачальныеПозицииВставки);
	МенеджерРасчета.РассчитатьЗарплату();
	
	ДанныеЗаполнения = РасчетЗарплатыРасширенный.ОписаниеДанныхДляЗаполненияТаблицДокумента();
	
	ДанныеЗаполнения.Начисления = МенеджерРасчета.Зарплата.Начисления;
	ДанныеЗаполнения.НачисленияПоДоговорам = МенеджерРасчета.Зарплата.ДоговорыПодряда;
	ДанныеЗаполнения.Удержания = МенеджерРасчета.Зарплата.Удержания;
	ДанныеЗаполнения.НДФЛ = МенеджерРасчета.Зарплата.НДФЛ;
	ДанныеЗаполнения.ПогашениеЗаймов = МенеджерРасчета.Зарплата.ПогашениеЗаймов;
	ДанныеЗаполнения.Взносы = МенеджерРасчета.Зарплата.Взносы;
	ДанныеЗаполнения.КорректировкиВыплаты = МенеджерРасчета.Зарплата.КорректировкиВыплаты;
	
	ДанныеДляЗаполненияВДанныеФормы(ДанныеЗаполнения, НачальныеПозицииВставки, СотрудникиКРасчету);
	
	УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма, , СотрудникиКРасчету);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
	
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы(),СотрудникиКРасчету);
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы(),СотрудникиКРасчету);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(),СотрудникиКРасчету);
	Если РассчитатьИтоги Тогда
		РассчитатьИтогиПоДокументу();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, НачальныеПозицииВставки)
	
	ДанныеРезультатовРаспределенияНачислений = Неопределено;
	Если ЗначениеЗаполнено(АдресТаблицыРаспределенияНачислений) Тогда 
		ДанныеРезультатовРаспределенияНачислений = ПолучитьИзВременногоХранилища(АдресТаблицыРаспределенияНачислений);
	КонецЕсли;
	
	ДанныеРезультатовРаспределенияУдержаний = Неопределено;
	Если ЗначениеЗаполнено(АдресТаблицыРаспределенияУдержаний) Тогда 
		ДанныеРезультатовРаспределенияУдержаний = ПолучитьИзВременногоХранилища(АдресТаблицыРаспределенияУдержаний);
	КонецЕсли;
	
	ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено;
	Если ЗначениеЗаполнено(АдресТаблицыРаспределенияПоТерриториямУсловиямТруда) Тогда 
		ДанныеРаспределенияПоТерриториямУсловиямТруда = ПолучитьИзВременногоХранилища(АдресТаблицыРаспределенияПоТерриториямУсловиямТруда);
	КонецЕсли;
	
	//Начисления
	Если Не Объект.РежимДоначисления Тогда
		РасчетЗарплатыРасширенныйФормы.НачисленияВДанныеМенеджераРасчета(
			Объект.Начисления,
			МенеджерРасчета,
			Объект.Организация,
			Отбор,
			НачальныеПозицииВставки,
			ДанныеРезультатовРаспределенияНачислений,
			ДанныеРаспределенияПоТерриториямУсловиямТруда);
			
		РасчетЗарплатыРасширенныйФормы.ПособияВДанныеМенеджераРасчета(Объект.Пособия, МенеджерРасчета, Объект.Организация, Отбор, НачальныеПозицииВставки, ДанныеРезультатовРаспределенияНачислений, ДанныеРаспределенияПоТерриториямУсловиямТруда);
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.НачисленияПерерасчетВДанныеМенеджераРасчета(Объект.НачисленияПерерасчет, МенеджерРасчета, Объект.Организация, Отбор, НачальныеПозицииВставки, ДанныеРезультатовРаспределенияНачислений, ДанныеРаспределенияПоТерриториямУсловиямТруда);
	РасчетЗарплатыРасширенныйФормы.ПособияПерерасчетВДанныеМенеджераРасчета(Объект.ПособияПерерасчет, МенеджерРасчета, Объект.Организация, Отбор, НачальныеПозицииВставки, ДанныеРезультатовРаспределенияНачислений, ДанныеРаспределенияПоТерриториямУсловиямТруда);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		РасчетЗарплатыРасширенныйФормы.ЛьготыВДанныеМенеджераРасчета(Объект.Льготы, МенеджерРасчета, Объект.Организация, Отбор, НачальныеПозицииВставки, ДанныеРезультатовРаспределенияНачислений, ДанныеРаспределенияПоТерриториямУсловиямТруда);	
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		РасчетЗарплатыРасширенныйФормы.УправленческиеНачисленияВДанныеМенеджераРасчета(Объект.УправленческиеНачисления, МенеджерРасчета, Отбор, НачальныеПозицииВставки, ДанныеРезультатовРаспределенияНачислений, ДанныеРаспределенияПоТерриториямУсловиямТруда);
	КонецЕсли;
		
	//НачисленияПоДоговорам
	РасчетЗарплатыРасширенныйФормы.НачисленияПоДоговорамВДанныеМенеджераРасчета(Объект.НачисленияПоДоговорам, МенеджерРасчета, Объект.Организация, Отбор, НачальныеПозицииВставки, ДанныеРезультатовРаспределенияНачислений, ДанныеРаспределенияПоТерриториямУсловиямТруда);
	
	//Удержания
	РасчетЗарплатыРасширенныйФормы.УдержанияВДанныеМенеджераРасчета(Объект.Удержания, МенеджерРасчета, Отбор, НачальныеПозицииВставки, ДанныеРезультатовРаспределенияУдержаний);
	
	//КорректировкиВыплаты
	РасчетЗарплатыРасширенныйФормы.КорректировкиВыплатыВДанныеМенеджераРасчета(Объект.КорректировкиВыплаты, МенеджерРасчета, Отбор, НачальныеПозицииВставки, ДанныеРезультатовРаспределенияУдержаний);
	
	//ПогашениеЗаймов
	РасчетЗарплатыРасширенныйФормы.ПогашениеЗаймовВДанныеМенеджераРасчета(Объект.ПогашениеЗаймов, МенеджерРасчета, Отбор, НачальныеПозицииВставки, ДанныеРезультатовРаспределенияУдержаний);
	
	//НДФЛ
	РасчетЗарплатыРасширенныйФормы.НДФЛВДанныеМенеджераРасчета(Объект.НДФЛ, Объект.ПримененныеВычетыНаДетейИИмущественные, МенеджерРасчета, Отбор, НачальныеПозицииВставки, ДанныеРезультатовРаспределенияУдержаний);
	
	//Взносы
	РасчетЗарплатыРасширенныйФормы.ВзносыВДанныеМенеджераРасчета(Объект.Взносы, МенеджерРасчета, Отбор, НачальныеПозицииВставки);
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьНастройкиМенеджераРасчета(СотрудникиФизическиеЛица, МенеджерРасчета)
	
	МенеджерРасчета.ИсключаемыйРегистратор = Объект.Ссылка;
	МенеджерРасчета.НастройкиРасчета.Сотрудники = СотрудникиФизическиеЛица;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = ИспользоватьНачисление;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьДоговорыПодряда = ИспользоватьДоговоры;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьУдержания = ИспользоватьУдержания;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНДФЛ = ИспользоватьНДФЛ;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьВзносы = ИспользоватьВзносы;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьЗаймы = ИспользоватьЗаймы;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьКорректировкиВыплаты = ИспользоватьНДФЛ;
	МенеджерРасчета.НастройкиРасчета.ОкончательныйРасчет = Истина;
	
	МенеджерРасчета.НастройкиНДФЛ.Сотрудники = СотрудникиФизическиеЛица;
	МенеджерРасчета.НастройкиНДФЛ.ОкончательныйРасчет = ОкончательныйРасчетНДФЛ;
	МенеджерРасчета.НастройкиНДФЛ.ДатаВыплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Объект.Организация, Объект.МесяцНачисления);
	
	МенеджерРасчета.НастройкиЗаймов.Сотрудники = СотрудникиФизическиеЛица;
	МенеджерРасчета.НастройкиЗаймов.ДатаПогашения = КонецМесяца(Объект.МесяцНачисления);
	
	МенеджерРасчета.НастройкиБухучета.ПроверятьРегистрациюПроцентаЕНВД = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеДляЗаполненияВДанныеФормы(ДанныеЗаполнения, НачальныеПозицииВставки = Неопределено, Сотрудники = Неопределено)
	
	//Начисления
	ТаблицыНачислений = РасчетЗарплатыРасширенныйФормы.ТаблицыНачисленийФормы();
	Если Не Объект.РежимДоначисления Тогда 
		ТаблицыНачислений.Начисления = Объект.Начисления;
		ТаблицыНачислений.Пособия = Объект.Пособия;
	КонецЕсли;
	ТаблицыНачислений.НачисленияПерерасчет = Объект.НачисленияПерерасчет;
	ТаблицыНачислений.ПособияПерерасчет = Объект.ПособияПерерасчет;
	ТаблицыНачислений.Льготы = Объект.Льготы;
	ТаблицыНачислений.ЛьготыПерерасчет = Объект.ЛьготыПерерасчет;
	ТаблицыНачислений.УправленческиеНачисления = Объект.УправленческиеНачисления;
	
	Если Сотрудники <> Неопределено 
		И Сотрудники.Количество() = 1 Тогда
		СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Ложь);
	Иначе
		СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Истина);
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыНачисленияВДанныеФормы(ТаблицыНачислений, ДанныеЗаполнения.Начисления, Объект.Организация, Объект.МесяцНачисления, НачальныеПозицииВставки, Объект.РежимДоначисления);
	
	//Удержания
	ТаблицыУдержаний = РасчетЗарплатыРасширенныйФормы.ТаблицыУдержанийФормы();
	ТаблицыУдержаний.Удержания = Объект.Удержания;
	ТаблицыУдержаний.УдержанияПерерасчет = Объект.УдержанияПерерасчет;
	
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыУдержанияВДанныеФормы(ТаблицыУдержаний, ДанныеЗаполнения.Удержания, Объект.МесяцНачисления, НачальныеПозицииВставки, Объект.РежимДоначисления);
	
	//НачисленияПоДоговорам
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыНачисленияПоДоговорамВДанныеФормы(Объект.НачисленияПоДоговорам, ДанныеЗаполнения.НачисленияПоДоговорам, Объект.Организация, НачальныеПозицииВставки);
	
	//ПогашениеЗаймов
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыПогашениеЗаймовВДанныеФормы(Объект.ПогашениеЗаймов, ДанныеЗаполнения.ПогашениеЗаймов, НачальныеПозицииВставки);
	
	//НДФЛ
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыНДФЛВДанныеФормы(Объект.НДФЛ, Объект.ПримененныеВычетыНаДетейИИмущественные, ДанныеЗаполнения.НДФЛ, НачальныеПозицииВставки);
	
	//КорректировкиВыплаты
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыКорректировкиВыплатыВДанныеФормы(Объект.КорректировкиВыплаты, ДанныеЗаполнения.КорректировкиВыплаты, НачальныеПозицииВставки);
	
	//Взносы
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыВзносыВДанныеФормы(Объект.Взносы, ДанныеЗаполнения.Взносы, НачальныеПозицииВставки);
	
КонецПроцедуры

&НаСервере 
Процедура СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, ИспользоватьСортировкуПоУмолчанию)	
	СортироватьРезультатРасчетаНачислений(ДанныеЗаполнения, ИспользоватьСортировкуПоУмолчанию);
	СортироватьРезультатыРасчетаПоФизическимЛицам(ДанныеЗаполнения);
КонецПроцедуры	

&НаСервере 
Процедура СортироватьРезультатРасчетаНачислений(ДанныеЗаполнения, ИспользоватьСортировкуПоУмолчанию = Истина)
	
	СортируемыеКоллекции = Новый Массив;
	
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияСотрудников(ДанныеЗаполнения.Начисления);
	Коллекция.ОписаниеКоллекции.Псевдоним = "Начисления";
	Коллекция.ОписаниеКоллекции.ИмяПоляСотрудник = "Сотрудник";
	Коллекция.ОписаниеКоллекции.ИмяПоляПодразделение = "Подразделение";
	Коллекция.ОписаниеКоллекции.ИмяПоляПериод = "ДатаНачала";
	СортируемыеКоллекции.Добавить(Коллекция);
		
	МетаданныеРеквизитов = Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.Начисления.Реквизиты;
	Если ИспользоватьСортировкуПоУмолчанию Тогда
		НастройкиСортировки = СотрудникиФормыРасширенный.НастройкиСортировкиПоУмолчанию();
	Иначе
		НастройкиСортировки = СотрудникиФормыРасширенный.НастройкиСортировки();
	КонецЕсли;
	
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "Начисление.ОчередностьРасчета", МетаданныеРеквизитов.Начисление.Тип);
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "Начисление.РеквизитДопУпорядочивания", МетаданныеРеквизитов.Начисление.Тип);
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "ДокументОснование", МетаданныеРеквизитов.ДокументОснование.Тип);
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "ДатаНачала", МетаданныеРеквизитов.ДатаНачала.Тип);	
	
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияСотрудников(ДанныеЗаполнения.НачисленияПоДоговорам);
	Коллекция.ОписаниеКоллекции.Псевдоним = "НачисленияПоДоговорам";
	Коллекция.ОписаниеКоллекции.ИмяПоляСотрудник = "Сотрудник";
	Коллекция.ОписаниеКоллекции.ИмяПоляПодразделение = "Подразделение";
	Коллекция.ОписаниеКоллекции.ИмяПоляПериод = "ДатаНачала";
	СортируемыеКоллекции.Добавить(Коллекция);
	
	УстановитьПривилегированныйРежим(Истина);
	ПорядокСортировки = СотрудникиФормыРасширенный.ПорядокСтрокКоллекцийСотрудников(СортируемыеКоллекции, НастройкиСортировки);
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого КлючЗначение Из ПорядокСортировки Цикл
	    ТаблицаИсходныхДанных = ДанныеЗаполнения[КлючЗначение.Ключ];
		ТаблицаИсходныхДанных.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
			
		Для Каждого СтрокаПорядка Из КлючЗначение.Значение Цикл
			СтрокаТаблицы = ТаблицаИсходныхДанных[СтрокаПорядка.ИндексСтрокиИсходнойТаблицы];
			СтрокаТаблицы.Порядок = СтрокаПорядка.Порядок;	
		КонецЦикла;	
		
		ТаблицаИсходныхДанных.Сортировать("Порядок");
		ТаблицаИсходныхДанных.Колонки.Удалить("Порядок");
	КонецЦикла;
		
КонецПроцедуры	

&НаСервере 
Процедура СортироватьРезультатыРасчетаПоФизическимЛицам(ДанныеЗаполнения)	
	СортируемыеКоллекции = Новый Массив;
	
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияФизическихЛиц(ДанныеЗаполнения.Удержания);
	Коллекция.ОписаниеКоллекции.Псевдоним = "Удержания";
	Коллекция.ОписаниеКоллекции.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	
	МетаданныеРеквизитов = Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.Удержания.Реквизиты;
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "Удержание.ОчередностьРасчета", МетаданныеРеквизитов.Удержание.Тип);
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "Удержание", МетаданныеРеквизитов.Удержание.Тип);
	
	СортируемыеКоллекции.Добавить(Коллекция);
		
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияФизическихЛиц(ДанныеЗаполнения.НДФЛ);
	Коллекция.ОписаниеКоллекции.Псевдоним = "НДФЛ";
	Коллекция.ОписаниеКоллекции.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	
	МетаданныеРеквизитов = Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.НДФЛ.Реквизиты;
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "МесяцНалоговогоПериода", МетаданныеРеквизитов.МесяцНалоговогоПериода.Тип);
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "Подразделение", МетаданныеРеквизитов.Подразделение.Тип);
	
	СортируемыеКоллекции.Добавить(Коллекция);
	
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияФизическихЛиц(ДанныеЗаполнения.Взносы);
	Коллекция.ОписаниеКоллекции.Псевдоним = "Взносы";
	Коллекция.ОписаниеКоллекции.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	
	МетаданныеРеквизитов = Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.Взносы.Реквизиты;
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "МесяцНалоговогоПериода", МетаданныеРеквизитов.ДатаПолученияДохода.Тип);
	
	СортируемыеКоллекции.Добавить(Коллекция);
	
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияФизическихЛиц(ДанныеЗаполнения.ПогашениеЗаймов);	
	Коллекция.ОписаниеКоллекции.Псевдоним = "ПогашениеЗаймов";
	Коллекция.ОписаниеКоллекции.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	
	МетаданныеРеквизитов = Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.ПогашениеЗаймов.Реквизиты;
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "ФизическоеЛицо", МетаданныеРеквизитов.ФизическоеЛицо.Тип);
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "ДоговорЗайма", МетаданныеРеквизитов.ДоговорЗайма.Тип);
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	СортируемыеКоллекции.Добавить(Коллекция);
	
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияФизическихЛиц(ДанныеЗаполнения.КорректировкиВыплаты);
	Коллекция.ОписаниеКоллекции.Псевдоним = "КорректировкиВыплаты";
	Коллекция.ОписаниеКоллекции.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	СортируемыеКоллекции.Добавить(Коллекция);
	
	УстановитьПривилегированныйРежим(Истина);
	ПорядокСортировки = СотрудникиФормыРасширенный.ПорядокСортировкиКоллекцияФизическихЛиц(СортируемыеКоллекции, Объект.Организация, КонецМесяца(Объект.МесяцНачисления));
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого КлючЗначение Из ПорядокСортировки Цикл
	    ТаблицаИсходныхДанных = ДанныеЗаполнения[КлючЗначение.Ключ];
		ТаблицаИсходныхДанных.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
			
		Для Каждого СтрокаПорядка Из КлючЗначение.Значение Цикл
			СтрокаТаблицы = ТаблицаИсходныхДанных[СтрокаПорядка.ИндексСтрокиИсходнойТаблицы];
			СтрокаТаблицы.Порядок = СтрокаПорядка.Порядок;	
		КонецЦикла;	
		
		ТаблицаИсходныхДанных.Сортировать("Порядок");
		ТаблицаИсходныхДанных.Колонки.Удалить("Порядок");
	КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	
	ПерезаполнитьДанныеФормыНаКлиенте(Сотрудники, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыНаКлиенте() Экспорт
	
	ИтогНачислено = 0;
	ИтогУдержано = 0;
	ИтогВзносы = 0;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь,
	"ЗаполнениеДокументаНачислениеЗарплаты");
	
	Результат = РезультатЗаполненияВДлительнойОперации();
	
	Если Результат.ЗаданиеВыполнено Тогда
		
		Если ЗначениеЗаполнено(УИДЗамера) Тогда
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
			УИДЗамера = Неопределено;
		КонецЕсли;
		ОповеститьОбИзмененииОбъекта();
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтаФорма);
	
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДанныеФормыНаКлиенте(Знач Сотрудники = Неопределено, СохранятьИсправления = Истина) Экспорт
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	Если Сотрудники <> Неопределено И ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	КонецЕсли;
	
	Результат = ПерезаполнитьДанныеФормыНаСервере(Сотрудники, СохранятьИсправления, СотрудникиКРасчету);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтаФорма, Сотрудники);
 		ОповеститьОбИзмененииОбъекта();
		УстановитьЗначенияКонтролируемыхПолей();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПерезаполнитьДанныеФормыНаСервере(Сотрудники = Неопределено, СохранятьИсправления = Истина, СотрудникиКРасчету = Неопределено) Экспорт
	
	ИспользоватьДлительнуюОперацию = Истина;
	Если Сотрудники <> Неопределено Тогда
		// Если заполнение выполняется по ограниченному составу сотрудников, то обходимся без длительной операции.
		Если ТипЗнч(Сотрудники) <> Тип("Массив") Или Сотрудники.Количество() < 10 Тогда 
			ИспользоватьДлительнуюОперацию = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СписокСотрудников = Неопределено;
	Если Сотрудники <> Неопределено Тогда
		СписокСотрудников = СотрудникиДляРасчета(Сотрудники);
	КонецЕсли;

	Результат = РасчетЗарплатыРасширенный.ПерезаполнитьДанныеФормы(
		ЭтаФорма, ОписаниеДокумента(ЭтотОбъект), СписокСотрудников, СохранятьИсправления, ИспользоватьДлительнуюОперацию, , СотрудникиПериодДействияДляПерерасчета(СписокСотрудников));
		
	РежимПересчетаНДФЛ = Ложь;	
	РежимПересчетаВзносов = Ложь;	
	
	Если СотрудникиКРасчету <> Неопределено Тогда
		ПересчитатьДокументНаСервере(СотрудникиКРасчету);
	КонецЕсли; 
			
	Если Результат <> Неопределено Тогда
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат <> Неопределено И Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСотрудника(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля, СохранятьИсправления = Истина) Экспорт
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;		

	ТабличнаяЧасть = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, "Объект." + ИмяТаблицы);
	ПерерассчитываемыеСотрудники = Новый Соответствие;
	
	Для Каждого ИдентификаторСтроки Из ВыбранныеСтроки Цикл
		
		ПерерассчитываемаяСтрока = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		Сотрудник = ПерерассчитываемаяСтрока[ВедущееПоле];
		Если ПерерассчитываемыеСотрудники.Получить(Сотрудник) = Неопределено Тогда
			УдалитьПечатныеФормыСотрудника(Сотрудник);
			ПерерассчитываемыеСотрудники.Вставить(Сотрудник, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = ПересчитатьСотрудникаНаСервере(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля, СохранятьИсправления);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтаФорма);
 		ОповеститьОбИзмененииОбъекта();
		УстановитьЗначенияКонтролируемыхПолей();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПересчитатьСотрудникаНаСервере(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля, СохранятьИсправления)
	
	Сотрудники = ВыбранныеВТаблицеСотрудники(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля);
	
	ИспользоватьДлительнуюОперацию = Истина;
	// Если заполнение выполняется по ограниченному составу сотрудников, то обходимся без длительной операции.
	Если ТипЗнч(Сотрудники) <> Тип("Массив") Или Сотрудники.Количество() < 10 Тогда 
		ИспользоватьДлительнуюОперацию = Ложь;
	КонецЕсли;
	
	СписокСотрудников = СотрудникиДляРасчета(Сотрудники);
	
	Результат = РасчетЗарплатыРасширенный.ПерезаполнитьДанныеФормы(
		ЭтаФорма, ОписаниеДокумента(ЭтотОбъект), СписокСотрудников, СохранятьИсправления, ИспользоватьДлительнуюОперацию, , СотрудникиПериодДействияДляПерерасчета(СписокСотрудников));
		
	Если Результат <> Неопределено Тогда
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
		
	Если Результат <> Неопределено И Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();	
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыбранныеВТаблицеСотрудники(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля)
	
	СтрокиТаблицы = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ВыбранныеСтроки Цикл
		СтрокиТаблицы.Добавить(Объект[ИмяТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	
	ВедущиеОбъекты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиТаблицы, ВедущееПоле, Истина);
	
	Если ТипВедущегоПоля = Тип("СправочникСсылка.Сотрудники") Тогда
		Сотрудники = ВедущиеОбъекты;
	Иначе
		Физлица = ВедущиеОбъекты;
		Сотрудники = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(Физлица, Объект.Организация, , Истина);
	КонецЕсли;
	
	Возврат Сотрудники;
	
КонецФункции

&НаКлиенте
Процедура ДополнитьСтроку(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей)
	РасчетЗарплатыРасширенныйФормы.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект), ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Функция РезультатЗаполненияВДлительнойОперации()
	
	СотрудникиПерерасчет = СотрудникиПериодДействияДляПерерасчета();
	
	РасчетЗарплатыРасширенныйКлиентСервер.ОчиститьТаблицыДокумента(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект));
	
	СтруктураПараметров = РасчетЗарплатыРасширенныйКлиентСервер.ПараметрыПолученияДанныхЗаполненияДокумента();
	СтруктураПараметров.ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	СтруктураПараметров.Организация = Объект.Организация;
	СтруктураПараметров.ДокументСсылка = Объект.Ссылка;
	СтруктураПараметров.Подразделение = Объект.Подразделение;
	СтруктураПараметров.МесяцНачисления = Объект.МесяцНачисления;
	СтруктураПараметров.ОкончаниеПериода = КонецМесяца(Объект.МесяцНачисления);
	СтруктураПараметров.РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет;
	СтруктураПараметров.СотрудникиПериодДействияПерерасчет = СотрудникиПерерасчет;
	СтруктураПараметров.ИспользоватьВоеннуюСлужбу = ИспользоватьВоеннуюСлужбу;
	СтруктураПараметров.НачислениеЗарплатыВоеннослужащим = Объект.НачислениеЗарплатыВоеннослужащим;
	СтруктураПараметров.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	СтруктураПараметров.ПроверятьРегистрациюПроцентаЕНВД = Истина;
	СтруктураПараметров.ДатаВыплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Объект.Организация, Объект.МесяцНачисления);
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа «Начисление зарплаты»'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.НачислениеЗарплаты.ПодготовитьДанныеДляЗаполнения",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СотрудникиПериодДействияДляПерерасчета(Сотрудники = Неопределено)
	
	Если Сотрудники = Неопределено Тогда
		СотрудникиПериодДействияПерерасчет = ПерерасчитанныеСотрудникиДокумента.Выгрузить();
	Иначе
		
		СотрудникиПериодДействияПерерасчет = Неопределено;
		Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
			СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		ИначеЕсли ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		Иначе
			СписокСотрудников = Сотрудники;
		КонецЕсли;
		
		СписокФизическихЛиц = Новый Массив;
		Для каждого Сотрудник Из СписокСотрудников Цикл
			
			Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				СписокФизическихЛиц.Добавить(Сотрудник);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокФизическихЛиц.Количество() > 0 Тогда
			
			ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
			ПараметрыПолученияСотрудников.Организация = Объект.Организация;
			ПараметрыПолученияСотрудников.ОкончаниеПериода = Объект.МесяцНачисления - 1;
			ПараметрыПолученияСотрудников.СписокФизическихЛиц = СписокФизическихЛиц;
			
			СотрудникиФизическихЛиц = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
			Если СотрудникиФизическихЛиц.Количество() > 0  Тогда
				
				Для каждого СведенияСотрудника Из СотрудникиФизическихЛиц Цикл
					СписокСотрудников.Добавить(СведенияСотрудника.Сотрудник);
				КонецЦикла;
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(СписокСотрудников, Тип("СправочникСсылка.ФизическиеЛица"));
			СписокСотрудников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокСотрудников);
			
		КонецЕсли;
		
		Если Объект.НачисленияПерерасчет.Количество() > 0
			Или ПерерасчитанныеСотрудникиДокумента.Количество() > 0 Тогда
			
			Для каждого Сотрудник Из СписокСотрудников Цикл
				
				Если Объект.НачисленияПерерасчет.Количество() > 0 Тогда
					
					СтрокиСотрудника = Объект.НачисленияПерерасчет.Выгрузить(Новый Структура("Сотрудник",  Сотрудник), "Сотрудник,ПериодДействия");
					СтрокиСотрудника.Свернуть("Сотрудник,ПериодДействия");
					
					Если СотрудникиПериодДействияПерерасчет = Неопределено Тогда
						СотрудникиПериодДействияПерерасчет = СтрокиСотрудника;
					Иначе
						ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиСотрудника, СотрудникиПериодДействияПерерасчет);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПерерасчитанныеСотрудникиДокумента.Количество() > 0 Тогда
					
					СтрокиСотрудника = ПерерасчитанныеСотрудникиДокумента.Выгрузить(Новый Структура("Сотрудник",  Сотрудник), "Сотрудник,ПериодДействия");
					СтрокиСотрудника.Свернуть("Сотрудник,ПериодДействия");
					
					Если СотрудникиПериодДействияПерерасчет = Неопределено Тогда
						СотрудникиПериодДействияПерерасчет = СтрокиСотрудника;
					Иначе
						ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиСотрудника, СотрудникиПериодДействияПерерасчет);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СотрудникиПериодДействияПерерасчет = Неопределено Тогда
			СотрудникиПериодДействияПерерасчет = Объект.НачисленияПерерасчет.Выгрузить().СкопироватьКолонки("Сотрудник,ПериодДействия");
		КонецЕсли;
		
		СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления, ПланВидовРасчетаСсылка.Удержания"));
		СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ПерерасчетНачислений", Новый ОписаниеТипов("Булево"));
		СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ПерерасчетЛьгот", Новый ОписаниеТипов("Булево"));
		СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ПерерасчетУдержаний", Новый ОписаниеТипов("Булево"));
		СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип);
		
		СотрудникиПериодДействияПерерасчет.ЗаполнитьЗначения(Истина,"ПерерасчетНачислений");
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДополнитьСотрудникиПериодДействияПерерасчет(ЭтаФорма, СписокСотрудников, СотрудникиПериодДействияПерерасчет);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СотрудникиПериодДействияПерерасчет;
	
КонецФункции

&НаСервере
Функция СотрудникиДляРасчета(Сотрудники)
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица")
		Или ТипЗнч(Сотрудники) = Тип("Массив") И Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		Возврат Сотрудники;
	КонецЕсли;
	
	СотрудникиДокумента = СотрудникиДокумента();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("СотрудникиДокумента", СотрудникиДокумента);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Сотрудники.ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛица
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Ссылка В(&Сотрудники)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сотрудники.Ссылка
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
	               |		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	               |			И (Сотрудники.Ссылка В (&СотрудникиДокумента))
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	Сотрудники.Ссылка
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Ссылка В(&Сотрудники)";
				   
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");			   
	
КонецФункции

&НаСервере
Функция СотрудникиФизическиеЛицаОтбор(Сотрудники)
	
	СотрудникиДокумента = СотрудникиДокумента();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("СотрудникиДокумента", СотрудникиДокумента);
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица")
		Или ТипЗнч(Сотрудники) = Тип("Массив") И Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		
		ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Ссылка В(&СотрудникиДокумента)
			|	И Сотрудники.ФизическоеЛицо В(&Сотрудники)";
			
		СотрудникиФизическиеЛица = Запрос.Выполнить().Выбрать();
		Если ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
			ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		Иначе
			ФизическиеЛица = Сотрудники;
		КонецЕсли;
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сотрудники.ФизическоеЛицо
			|ПОМЕСТИТЬ ВТФизическиеЛица
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Ссылка В(&Сотрудники)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
			|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
			|			И (Сотрудники.Ссылка В (&СотрудникиДокумента))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТФизическиеЛица.ФизическоеЛицо
			|ИЗ
			|	ВТФизическиеЛица КАК ВТФизическиеЛица";
			
		Результат = Запрос.ВыполнитьПакет();
		ФизическиеЛица = Результат[2].Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		СотрудникиФизическиеЛица = Результат[1].Выбрать();
		
	КонецЕсли;
	
	Отбор = Новый Структура("СотрудникиКРасчету, ФизическиеЛицаСотрудников, ФизическиеЛицаОтбор, ФизическиеЛица");
	Отбор.ФизическиеЛица = ФизическиеЛица;
	Отбор.ФизическиеЛицаСотрудников = Новый Соответствие;
	Отбор.ФизическиеЛицаОтбор = Новый Соответствие;
	Отбор.СотрудникиКРасчету = Новый Массив;
	
	Пока СотрудникиФизическиеЛица.Следующий() Цикл
		Отбор.ФизическиеЛицаСотрудников.Вставить(СотрудникиФизическиеЛица.Сотрудник, СотрудникиФизическиеЛица.ФизическоеЛицо);
		Отбор.СотрудникиКРасчету.Добавить(СотрудникиФизическиеЛица.Сотрудник);
	КонецЦикла;
	
	Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		Отбор.ФизическиеЛицаОтбор.Вставить(ФизическоеЛицо, Истина)
	КонецЦикла; 
	
	Возврат Отбор;
	
КонецФункции

&НаСервере
Функция СотрудникиДокумента()
	
	СотрудникиДокумента = Новый Массив;
	
	ОписанияТаблиц = ОписанияТаблицНачисленийДляРасчетногоЛистка();
	Для Каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиДокумента, ОбщегоНазначения.ВыгрузитьКолонку(Объект[ОписаниеТаблицы.ИмяТаблицы], ОписаниеТаблицы.ИмяРеквизитаСотрудник, Истина));
	КонецЦикла;
	
	Возврат СотрудникиДокумента;
	
КонецФункции

&НаКлиенте
Процедура ПровестиДокумент()
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Помеченный на удаление документ не может быть проведен.'"));
		Возврат;
	КонецЕсли;
	
	Если СотрудникиКРасчету.Количество() > 0 Тогда
		РасчетЗарплатыРасширенныйКлиент.ПередЗаписьюДокументаСоСпискомСотрудников(ЭтаФорма, "ПровестиДокументОкончание");
	Иначе
		ПровестиДокументНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПересчитатьДокументНаКлиенте();
		ПровестиДокументНаКлиенте();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументНаКлиенте()
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь,
	"ПроведениеДокументаНачислениеЗарплаты");
	
	Результат = РезультатПроведенияВДлительнойОперации();
	
	Если Результат.Свойство("ОшибкиПроверкиЗаполнения") Тогда
		Возврат;
	КонецЕсли;
	
	ПечатныеФормыСотрудников = Неопределено;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Если ЗначениеЗаполнено(УИДЗамера) Тогда
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
			УИДЗамера = Неопределено;
		КонецЕсли;
		ОповеститьОбИзмененииОбъекта();
		ПроведениеВДлительнойОперации = Ложь;
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		Иначе
			ЗакрыватьПослеЗаписи = Истина;
		КонецЕсли;
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатПроведенияВДлительнойОперации()
	
	Если Не ПроверитьЗаполнение() Тогда 
		УчетНДФЛФормыРасширенный.ОбработатьСообщенияПроверкиЗаполнения(ЭтаФорма, ОписаниеТаблицыНДФЛ());
		Возврат Новый Структура("ОшибкиПроверкиЗаполнения", Истина);
	КонецЕсли;
	
	УдалитьПерерасчетыТекущегоПериода = ЗаполнениеВыполнено;
	
	ДокументОбъект = Неопределено;
	// Преобразовываем данные формы в объект, чтобы записать его.
	Если Модифицированность Или Объект.Проведен Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		РеквизитыВДанные(ДокументОбъект);
		ДокументОбъект.ДополнительныеСвойства.Вставить("Проведен", ДокументОбъект.Проведен);
		ДанныеДокумента = ЗарплатаКадры.СериализоватьОбъектВДвоичныеДанные(ДокументОбъект);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("ДанныеДокумента", ДанныеДокумента);
	СтруктураПараметров.Вставить("Отказ", Ложь);
	СтруктураПараметров.Вставить("УстановитьПроведениеДокумента", Истина);
	СтруктураПараметров.Вставить("УдалитьПерерасчетыТекущегоПериода", УдалитьПерерасчетыТекущегоПериода);
	СтруктураПараметров.Вставить("ВидОперации", ЭтотОбъект["ВидОперации"]);
	
	Если ДокументОбъект <> Неопределено Тогда
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ПериодыРасчетаСотрудников") Тогда
			СтруктураПараметров.Вставить("ПериодыРасчетаСотрудников", ДокументОбъект.ДополнительныеСвойства.ПериодыРасчетаСотрудников);
		КонецЕсли; 
		
	КонецЕсли; 
	
	НаименованиеЗадания = НСтр("ru = 'Проведение документа «Начисление зарплаты»'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.НачислениеЗарплаты.ВыполнитьПроведение",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	ПроведениеВДлительнойОперации = Не Результат.ЗаданиеВыполнено;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ПроведениеПослеВыполненияДлительнойОперации();
		ПроведениеВДлительнойОперации = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеПослеВыполненияДлительнойОперации()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗаполнения = Неопределено;
	Если СтруктураДанных.Свойство("ДанныеДляЗаполненияТаблицДокумента", ДанныеДляЗаполнения) Тогда
		// Заполнение табличных частей и вторичных данных коллекций, которые с ней связаны.
		Объект.Начисления.Очистить();
		Объект.НачисленияПерерасчет.Очистить();
		Объект.НачисленияПоДоговорам.Очистить();
		Объект.Пособия.Очистить();
		Объект.ПособияПерерасчет.Очистить();
		Объект.Удержания.Очистить();
		Объект.УдержанияПерерасчет.Очистить();
		Объект.ПогашениеЗаймов.Очистить();
		Объект.НДФЛ.Очистить();
		Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
		Объект.КорректировкиВыплаты.Очистить();
		Объект.Взносы.Очистить();
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Объект.Льготы.Очистить();
			Объект.ЛьготыПерерасчет.Очистить();
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Объект.УправленческиеНачисления.Очистить();
		КонецЕсли;
		
		ДанныеДляЗаполненияВДанныеФормы(ДанныеДляЗаполнения);
		УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма);
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы());
		ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
		ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы());
		
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДанныеДляПерезаполненияТаблицДокумента", ДанныеДляЗаполнения) Тогда
		Сотрудники = СтруктураДанных.СтруктураПараметров.Сотрудники;
		ДанныеДляЗаполненияВДанныеФормы(ДанныеДляЗаполнения, СтруктураДанных.СтруктураПараметров.НачальныеПозицииВставки, Сотрудники);
		УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма, , Сотрудники);
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы(), Сотрудники);
		ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
		ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы(), Сотрудники);
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), Сотрудники);
	КонецЕсли;
	
	ЗаполнениеВыполнено = Истина;
	
	РассчитатьИтогиПоДокументу();
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

&НаСервере
Процедура ПроведениеПослеВыполненияДлительнойОперации()
	
	Модифицированность = Ложь;
	Если Не ЗакрыватьПослеЗаписи Тогда
		ДокументОбъект = ЗарплатаКадры.ДесериализоватьОбъектИзДвоичныхДанных(ПолучитьИзВременногоХранилища(АдресХранилища));
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		ПриПолученииДанныхНаСервере(ДокументОбъект, Ложь);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтложенноеПроведениеДокументов") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		Модуль.ОтразитьДокументыВУчетеСтраховыхВзносовВДлительнойОперации(Объект.Организация, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ЗаданиеВыполненоВДлительнойОперации = Ложь;
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				Если ПроведениеВДлительнойОперации Тогда
					ПроведениеПослеВыполненияДлительнойОперации();
					Если ЗначениеЗаполнено(УИДЗамера) Тогда
						ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
						УИДЗамера = Неопределено;
					КонецЕсли;
				Иначе
					РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтаФорма);
					ЗаполнениеПослеВыполненияДлительнойОперации();
					Если ЗначениеЗаполнено(УИДЗамера) Тогда
						ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
						УИДЗамера = Неопределено;
					КонецЕсли;
				КонецЕсли;
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ЗаданиеВыполненоВДлительнойОперации = Истина;
				ОповеститьОбИзмененииОбъекта();
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	Если ПроведениеВДлительнойОперации И ЗаданиеВыполненоВДлительнойОперации Тогда
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		Иначе
			ЗакрыватьПослеЗаписи = Истина;
		КонецЕсли;
		ПроведениеВДлительнойОперации = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьЗависимыеРезультаты(ПараметрыДляРаспределения) Экспорт
	
	Если ПараметрыДляРаспределения.РаспределятьЗависимыеТаблицы Тогда
		ОбновитьБухучетРезультатовРасчетаНаСервере(ПараметрыДляРаспределения);
	КонецЕсли;    
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудников, ОбщегоНазначения.ВыгрузитьКолонку(Объект.НачисленияПерерасчет, "Сотрудник", Истина));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудников, ОбщегоНазначения.ВыгрузитьКолонку(Объект.Пособия, "Сотрудник", Истина));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудников, ОбщегоНазначения.ВыгрузитьКолонку(Объект.НачисленияПоДоговорам, "Сотрудник", Истина));
	
	Возврат ПоместитьВоВременноеХранилище(МассивСотрудников, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаПодбораНаКлиенте(Сотрудники)
	
	МассивСотрудников = ПодобранныеСотрудники(Сотрудники);
	
	Если МассивСотрудников.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Результат = ПерезаполнитьДанныеФормыНаСервере(МассивСотрудников, Ложь);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтаФорма, Сотрудники);
 		ОповеститьОбИзмененииОбъекта();
		УстановитьЗначенияКонтролируемыхПолей();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодобранныеСотрудники(Сотрудники)
	
	// Оставляем только сотрудников, которых нет в документе.
	МассивСотрудников = Новый Массив;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Начисления");
	ИменаТаблиц.Добавить("НачисленияПерерасчет");
	ИменаТаблиц.Добавить("НачисленияПоДоговорам");
	ИменаТаблиц.Добавить("Пособия");
	ИменаТаблиц.Добавить("ПособияПерерасчет");
	ИменаТаблиц.Добавить("Льготы");
	
	УникальныеСотрудники = Новый Соответствие;
	СписокСотрудниковДокумента = Новый Массив;
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		Для Каждого СтрокаСотрудника Из Объект[ИмяТаблицы] Цикл 
			Если УникальныеСотрудники[СтрокаСотрудника.Сотрудник] = Неопределено Тогда 
				СписокСотрудниковДокумента.Добавить(СтрокаСотрудника.Сотрудник);
				УникальныеСотрудники.Вставить(СтрокаСотрудника.Сотрудник, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		Если УникальныеСотрудники[Сотрудник] = Неопределено Тогда 
			МассивСотрудников.Добавить(Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	// Для корректного пересчета зависимых таблиц добавляем сотрудников из документа с совпадающими физическими лицами.
	ФизическиеЛицаПодобранныхСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ФизическоеЛицо");
	
	ФизическиеЛица = Новый Соответствие;
	Для Каждого КлючИЗначение Из ФизическиеЛицаПодобранныхСотрудников Цикл 
		ФизическиеЛица.Вставить(КлючИЗначение.Значение, Истина);
	КонецЦикла;
	
	ФизическиеЛицаСотрудниковДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудниковДокумента, "ФизическоеЛицо");
	
	Для Каждого КлючИЗначение Из ФизическиеЛицаСотрудниковДокумента Цикл 
		Если ФизическиеЛица[КлючИЗначение.Значение] <> Неопределено Тогда 
			МассивСотрудников.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСотрудников;
	
КонецФункции

&НаСервере
Функция ОтсутствующиеВДокументеСотрудники()
	
	ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	
	ЗаполнятьНачисленияПоДоговорамПодряда = Не ОписаниеДокумента.РежимДоначисления 
		И (ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено
		Или ОписаниеДокумента.УдержанияИмя <> Неопределено Или ОписаниеДокумента.НДФЛИмя <> Неопределено
		Или ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено Или ОписаниеДокумента.ВзносыИмя <> Неопределено);
	
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты();
	ДополнительныеПараметры.ОкончаниеПериода = КонецМесяца(Объект.МесяцНачисления);
	ДополнительныеПараметры.ЗаполнятьНачисленияПоДоговорамПодряда = ЗаполнятьНачисленияПоДоговорамПодряда;
	ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу = ИспользоватьВоеннуюСлужбу;
	ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим = Объект.НачислениеЗарплатыВоеннослужащим;
	
	Сотрудники = РасчетЗарплатыРасширенный.СотрудникиДляНачисленияЗарплаты(Объект.Организация, Объект.Подразделение, Объект.МесяцНачисления, ДополнительныеПараметры);
		
	Возврат ПодобранныеСотрудники(Сотрудники);
	
КонецФункции

// Описания документа, таблиц документа, панелей документа.
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)
	
	РежимДоначисления = Форма.Объект.РежимДоначисления;
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.РежимДоначисления = РежимДоначисления;
	Описание.РежимНачисления = ПредопределенноеЗначение("Перечисление.РежимНачисленияЗарплаты.ОкончательныйРасчет");
	Описание.ЭтоНачислениеЗарплаты = Истина;
	
	Если РежимДоначисления Тогда
		
		Описание.НачисленияПерерасчетИмя = "НачисленияПерерасчет";
		Описание.НачисленияПерерасчетКоманднаяПанельИмя = "НачисленияПерерасчетАвтоКоманды";
		
		Описание.ПособияПерерасчетИмя = "ПособияПерерасчет";
		Описание.ПособияПерерасчетКоманднаяПанельИмя = "ПособияПерерасчетАвтоКоманды";
		
		Описание.ЛьготыПерерасчетИмя = "ЛьготыПерерасчет";
		Описание.ЛьготыПерерасчетКоманднаяПанельИмя = "ЛьготыПерерасчетАвтоКоманды";
		
		Описание.УдержанияПерерасчетИмя = "УдержанияПерерасчет";
		Описание.УдержанияПерерасчетКоманднаяПанельИмя = "УдержанияПерерасчетАвтоКоманды";
		
		Описание.НДФЛИмя = "НДФЛ";
		Описание.НДФЛКоманднаяПанельИмя = "НДФЛАвтоКоманды";
		Описание.ПримененныеВычетыИмя = "ПримененныеВычетыНаДетейИИмущественные";
		
		Описание.КорректировкиВыплатыИмя = "КорректировкиВыплаты";
		
	Иначе
		
		Если Форма.ИспользоватьНачисление Тогда 
			Описание.НачисленияИмя = "Начисления";
			Описание.НачисленияКоманднаяПанельИмя = "НачисленияАвтоКоманды";
			Описание.НачисленияПерерасчетИмя = "НачисленияПерерасчет";
			Описание.НачисленияПерерасчетКоманднаяПанельИмя = "НачисленияПерерасчетАвтоКоманды";
		КонецЕсли;
		
		Если Форма.ИспользоватьДоговоры Тогда 
			Описание.НачисленияПоДоговорамИмя = "НачисленияПоДоговорам";
			Описание.НачисленияПоДоговорамКоманднаяПанельИмя = "НачисленияПоДоговорамАвтоКоманды";
		КонецЕсли;
		
		Если Форма.ИспользоватьПособия Тогда 
			Описание.ПособияИмя = "Пособия";
			Описание.ПособияКоманднаяПанельИмя = "ПособияАвтоКоманды";
			Описание.ПособияПерерасчетИмя = "ПособияПерерасчет";
			Описание.ПособияПерерасчетКоманднаяПанельИмя = "ПособияПерерасчетАвтоКоманды";
		КонецЕсли;
		
		Если Форма.ИспользоватьЛьготы Тогда 
			Описание.ЛьготыИмя = "Льготы";
			Описание.ЛьготыКоманднаяПанельИмя = "ЛьготыАвтоКоманды";
			Описание.ЛьготыПерерасчетИмя = "ЛьготыПерерасчет";
			Описание.ЛьготыПерерасчетКоманднаяПанельИмя = "ЛьготыПерерасчетАвтоКоманды";
		КонецЕсли;
		
		Если Форма.ИспользоватьУдержания Тогда 
			Описание.УдержанияИмя = "Удержания";
			Описание.УдержанияКоманднаяПанельИмя = "УдержанияАвтоКоманды";
			Описание.УдержанияПерерасчетИмя = "УдержанияПерерасчет";
			Описание.УдержанияПерерасчетКоманднаяПанельИмя = "УдержанияПерерасчетАвтоКоманды";
		КонецЕсли;
		
		Если Форма.ИспользоватьНДФЛ Тогда 
			Описание.НДФЛИмя = "НДФЛ";
			Описание.НДФЛКоманднаяПанельИмя = "НДФЛАвтоКоманды";
			Описание.ПримененныеВычетыИмя = "ПримененныеВычетыНаДетейИИмущественные";
			Описание.КорректировкиВыплатыИмя = "КорректировкиВыплаты";
		КонецЕсли;
		
		Если Форма.ИспользоватьЗаймы Тогда 
			Описание.ПогашениеЗаймовИмя = "ПогашениеЗаймов";
		КонецЕсли;
		
		Если Форма.ИспользоватьВзносы Тогда 
			Описание.ВзносыИмя = "Взносы";
		КонецЕсли;
		
		Описание.ПланируемаяДатаВыплатыИмя = Неопределено;
		Описание.ПорядокВыплатыИмя = Неопределено;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБЗККлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияБЗККлиентСервер.ОбщийМодуль("УправленческаяЗарплатаКлиентСервер");
		Модуль.ДополнитьОписаниеРасчетногоДокумента(Описание, РежимДоначисления, Форма.ИспользоватьНачисление);
	КонецЕсли;
	
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента(НСтр("ru = 'Месяц начисления'"), "МесяцНачисленияСтрокой"));
	
	Описание.ОписанияТаблицДляРаспределенияРезультата = СтруктураОписанияТаблицДляРаспределенияРезультата(Форма);
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеПанелиВычеты()
	
	ОписаниеПанелиВычеты = УчетНДФЛКлиентСервер.ОписаниеПанелиВычеты();
	
	ОписаниеТабличнойЧастиНДФЛ = УчетНДФЛКлиентСервер.ОписаниеТабличнойЧастиНДФЛ();
	ОписаниеТабличнойЧастиНДФЛ.ИспользуетсяФиксРасчет = Истина;
	ОписаниеТабличнойЧастиНДФЛ.ИмяПоляПериод = "";
	ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ = ОписаниеТабличнойЧастиНДФЛ;
	
	РасчетЗарплатыКлиентСервер.ДополнитьОписаниеПанелиВычеты(ОписаниеПанелиВычеты);
	ОписаниеТабличнойЧастиКорректировкиВыплаты = РасчетЗарплатыКлиентСервер.ОписаниеТабличнойЧастиКорректировкиВыплаты();
	ОписаниеТабличнойЧастиКорректировкиВыплаты.ИспользуетсяФиксРасчет = Истина;
	ОписаниеПанелиВычеты.ТабличнаяЧастьКорректировкиВыплаты = ОписаниеТабличнойЧастиКорректировкиВыплаты;
	
	НастраиваемыеПанели = Новый Соответствие;
	НастраиваемыеПанели.Вставить("ВычетыЛичные", 				Истина);
	НастраиваемыеПанели.Вставить("ВычетыНаДетейИИмущественные", "Объект.ПримененныеВычетыНаДетейИИмущественные");
	НастраиваемыеПанели.Вставить("ВычетыКДоходам", 				"Объект.Начисления");
	
	ОписаниеПанелиВычеты.НастраиваемыеПанели = НастраиваемыеПанели;
	
	ОписаниеПанелиВычеты.ИмяКолонкиПримененныеВычеты = "ПримененныеВычеты";
	
	Возврат ОписаниеПанелиВычеты;
	
КонецФункции

&НаКлиенте
Функция ОписаниеПанелиВычетыНаКлиенте() Экспорт
	Возврат ОписаниеПанелиВычеты();
КонецФункции

&НаСервере
Функция ОписаниеПанелиВычетыНаСервере() Экспорт
	Возврат ОписаниеПанелиВычеты();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений(Форма)
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "Сотрудник";
	Описание.ИмяПоляДляВставкиПоказателей = "ДатыНачисления";
	Описание.СодержитПолеКодВычета = Истина;
	Описание.ИмяРеквизитаДокументОснование = "ДокументОснование";
	
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияРезультат";
	Описание.ВставлятьПослеПоля 						= Истина;
	
	Описание.ОтображатьПоляОписанияВремени = Истина;
	Описание.ОтображатьПоляНормыВремени = Истина;
	Описание.УправлятьОтображениемПолейОписанияВремени = Истина;
	Описание.РаспределениеРезультатовЗависимыеТаблицы = "Начисления,Пособия,ПогашениеЗаймов,Удержания,НДФЛ";
	
	СтрокаЗависимыеТаблицы = "";
	Если Форма.ИспользоватьНачисление Тогда
		СтрокаЗависимыеТаблицы = "Начисления";
	КонецЕсли;
	Если Форма.ИспользоватьПособия Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ?(ПустаяСтрока(СтрокаЗависимыеТаблицы),"",",") + "Пособия";
	КонецЕсли;
	Если Форма.ИспользоватьНДФЛ Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ?(ПустаяСтрока(СтрокаЗависимыеТаблицы),"",",") + "НДФЛ";
	КонецЕсли;
	Если Форма.ИспользоватьУдержания Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ?(ПустаяСтрока(СтрокаЗависимыеТаблицы),"",",") + "Удержания";	
	КонецЕсли;
	Если Форма.ИспользоватьЗаймы Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ?(ПустаяСтрока(СтрокаЗависимыеТаблицы),"",",") + "ПогашениеЗаймов";	
	КонецЕсли;
	Описание.РаспределениеРезультатовЗависимыеТаблицы = СтрокаЗависимыеТаблицы;
	
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияНачислений";
	Описание.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда = "АдресТаблицыРаспределенияПоТерриториямУсловиямТруда";
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПерерасчетов(Форма)
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	
	ОписаниеТаблицы.СодержитПолеСотрудник = Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "Сотрудник";
	
	ОписаниеТаблицы.ИмяТаблицы									= "НачисленияПерерасчет";
	ОписаниеТаблицы.ПутьКДанным									= "Объект.НачисленияПерерасчет";
	
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей				= "ДатыНачисленияПерерасчет";
	ОписаниеТаблицы.СодержитПолеКодВычета = Истина;
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование 				= "ДокументОснование";
	
	ОписаниеТаблицы.НомерТаблицы 								= 6;
	
	ОписаниеТаблицы.ОтображатьПоляОписанияВремени				= Истина;
	ОписаниеТаблицы.ОтображатьПоляНормыВремени 					= Истина;
	ОписаниеТаблицы.УправлятьОтображениемПолейОписанияВремени	= Истина;
	
	ОписаниеТаблицы.ЭтоПерерасчеты								= Истина;
	ОписаниеТаблицы.ИмяРеквизитаФиксСторно 						= "ФиксСторно";
	
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияПерерасчетРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля 							= Истина;
	
	СтрокаЗависимыеТаблицы = "НачисленияПерерасчет";
	Если Форма.ИспользоватьНДФЛ Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ",НДФЛ";
	КонецЕсли;
	Если Форма.ИспользоватьУдержания Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ",Удержания";	
	КонецЕсли;
	ОписаниеТаблицы.РаспределениеРезультатовЗависимыеТаблицы = СтрокаЗависимыеТаблицы;
	
	ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияНачислений";
	ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда = "АдресТаблицыРаспределенияПоТерриториямУсловиямТруда";
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачисленийПоДоговорам(Форма)
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы = "НачисленияПоДоговорам";
	Описание.ИмяРеквизитаВидРасчета = "";
	Описание.СодержитПолеСотрудник = Истина;
	Описание.СодержитПолеВидРасчета = Ложь;
    Описание.ИмяРеквизитаСотрудник = "Сотрудник";
	Описание.НомерТаблицы = 1;
	Описание.ПутьКДанным = "Объект.НачисленияПоДоговорам";
	Описание.ПроверяемыеРеквизиты = "Сотрудник,ДокументОснование,КодДохода,ДатаНачала,ДатаОкончания";
	Описание.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтроки";
	Описание.УстанавливатьИдентификаторСтрокиРаспределенияРезультата = Ложь;
	
	СтрокаЗависимыеТаблицы = "";
	Если Форма.ИспользоватьНДФЛ Тогда
		СтрокаЗависимыеТаблицы = "НДФЛ";
	КонецЕсли;
	Если Форма.ИспользоватьУдержания Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ?(ПустаяСтрока(СтрокаЗависимыеТаблицы),"",",") + "Удержания";	
	КонецЕсли;
	Если Форма.ИспользоватьЗаймы Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ?(ПустаяСтрока(СтрокаЗависимыеТаблицы),"",",") + "ПогашениеЗаймов";	
	КонецЕсли;
	Описание.РаспределениеРезультатовЗависимыеТаблицы = СтрокаЗависимыеТаблицы;
	
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияНачислений";
	Описание.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда = "АдресТаблицыРаспределенияПоТерриториямУсловиямТруда";
	Описание.ПоказыватьУсловияТруда = Ложь;
	
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияПоДоговорамРезультат";
	Описание.ВставлятьПослеПоля 						= Истина;
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПособия(Форма)
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "Сотрудник";
	Описание.ИмяПоляДляВставкиПоказателей = "ДатыПособия";
	Описание.ИмяТаблицы = "Пособия";
	Описание.ПутьКДанным = "Объект.Пособия";
	Описание.НомерТаблицы = 4;
	
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов = "ПособияОплаченоДней";
	
	СтрокаЗависимыеТаблицы = "";
	Если Форма.ИспользоватьНДФЛ Тогда
		СтрокаЗависимыеТаблицы = "НДФЛ";
	КонецЕсли;
	Если Форма.ИспользоватьУдержания Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ?(ПустаяСтрока(СтрокаЗависимыеТаблицы),"",",") + "Удержания";	
	КонецЕсли;
	Если Форма.ИспользоватьЗаймы Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ?(ПустаяСтрока(СтрокаЗависимыеТаблицы),"",",") + "ПогашениеЗаймов";	
	КонецЕсли;
	Описание.РаспределениеРезультатовЗависимыеТаблицы = СтрокаЗависимыеТаблицы;
	
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияНачислений";
	Описание.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда = "АдресТаблицыРаспределенияПоТерриториямУсловиямТруда";
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПособияПерерасчет(Форма)
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "Сотрудник";
	Описание.ИмяПоляДляВставкиПоказателей = "ПерерасчетДатыПособия";
	Описание.ИмяТаблицы = "ПособияПерерасчет";
	Описание.ПутьКДанным = "Объект.ПособияПерерасчет";
	Описание.НомерТаблицы = 8;
	
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов = "ПособияПерерасчетОплаченоДней";
	
	СтрокаЗависимыеТаблицы = "";
	Если Форма.ИспользоватьНДФЛ Тогда
		СтрокаЗависимыеТаблицы = "НДФЛ";
	КонецЕсли;
	Если Форма.ИспользоватьУдержания Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ?(ПустаяСтрока(СтрокаЗависимыеТаблицы),"",",") + "Удержания";	
	КонецЕсли;
	Если Форма.ИспользоватьЗаймы Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ?(ПустаяСтрока(СтрокаЗависимыеТаблицы),"",",") + "ПогашениеЗаймов";	
	КонецЕсли;
	Описание.РаспределениеРезультатовЗависимыеТаблицы = СтрокаЗависимыеТаблицы;
	
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияНачислений";
	Описание.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда = "АдресТаблицыРаспределенияПоТерриториямУсловиямТруда";
	
	Описание.ЭтоПерерасчеты			= Истина;
	Описание.ОтменятьВсеИсправления = Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыУдержаний()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.ИмяРеквизитаВидРасчета = "Удержание";
	Описание.ИмяТаблицы = "Удержания";
	Описание.ПутьКДанным = "Объект.Удержания";
	Описание.ИмяПоляДляВставкиПоказателей = "УдержанияРезультат";
	Описание.НомерТаблицы = 2;
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	Описание.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияУдержаний";
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов = "УдержанияРезультат";
	Описание.ВставлятьПослеПоля 					   = Истина;
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыУдержанияПерерасчет()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	
	Описание.ИмяРеквизитаВидРасчета = "Удержание";
	Описание.ИмяТаблицы = "УдержанияПерерасчет";
	Описание.ПутьКДанным = "Объект.УдержанияПерерасчет";
	Описание.ИмяПоляДляВставкиПоказателей = "УдержанияПерерасчетРезультат";
	Описание.НомерТаблицы = 2.5;
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	Описание.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияУдержаний";
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов = "УдержанияПерерасчетРезультат";
	
	Описание.ВставлятьПослеПоля = Истина;
	
	Описание.ОтменятьВсеИсправления = Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНДФЛ()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы = "НДФЛ";
	Описание.ПутьКДанным = "Объект.НДФЛ";
	Описание.ИмяПоляДляВставкиПоказателей = "Налог";
	Описание.ИмяПоляРезультат = "Налог";
	Описание.ИмяРеквизитаПериод = "МесяцНалоговогоПериода";
	Описание.НомерТаблицы = 3;
	Описание.СодержитПолеВидРасчета = Ложь;
	Описание.СодержитПолеСотрудник = Истина;
    Описание.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
    Описание.ПроверяемыеРеквизиты = "ФизическоеЛицо,МесяцНалоговогоПериода";
	
	Описание.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияУдержаний";
	Описание.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтрокиНДФЛ";
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов = "НДФЛПодразделение";
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыКорректировкиВыплаты()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыКорректировкиВыплаты();
	Описание.ПроверяемыеРеквизиты = "ФизическоеЛицо";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияУдержаний";
	Описание.ОтображатьПоляРаспределенияРезультатов = Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПогашениеЗаймов()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы = "ПогашениеЗаймов";
	Описание.ПутьКДанным = "Объект.ПогашениеЗаймов";
	Описание.СодержитПолеВидРасчета = Ложь;
	Описание.НомерТаблицы = 5;
	Описание.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияУдержаний";
	Описание.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтроки";
	Описание.УстанавливатьИдентификаторСтрокиРаспределенияРезультата = Истина;
	Описание.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Функция ОписанияТаблицЛьгот()
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыЛьгот(ЭтаФорма));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма));
	
	Возврат ОписанияТаблиц;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыЛьгот(Форма)
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы = "Льготы";
	Описание.ПутьКДанным = "Объект.Льготы";
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "Сотрудник";
	Описание.ИмяПоляДляВставкиПоказателей = "ДатыЛьготы";
	Описание.СодержитПолеКодВычета = Истина;
	Описание.НомерТаблицы = 7;
	
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов 	= "ЛьготыРезультат";
	Описание.ВставлятьПослеПоля 						= Истина;
	
	Описание.ОтображатьПоляОписанияВремени = Истина;
	Описание.ОтображатьПоляНормыВремени = Истина;
	Описание.УправлятьОтображениемПолейОписанияВремени = Истина;
	
	СтрокаЗависимыеТаблицы = "";
	Если Форма.ИспользоватьНДФЛ Тогда
		СтрокаЗависимыеТаблицы = "НДФЛ";
	КонецЕсли;
	Если Форма.ИспользоватьУдержания Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ?(ПустаяСтрока(СтрокаЗависимыеТаблицы),"",",") + "Удержания";	
	КонецЕсли;
	Если Форма.ИспользоватьЗаймы Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ?(ПустаяСтрока(СтрокаЗависимыеТаблицы),"",",") + "ПогашениеЗаймов";	
	КонецЕсли;
	Описание.РаспределениеРезультатовЗависимыеТаблицы = СтрокаЗависимыеТаблицы;
	
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияНачислений";
	Описание.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда = "АдресТаблицыРаспределенияПоТерриториямУсловиямТруда";
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыЛьготыПерерасчет(Форма)
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы = "ЛьготыПерерасчет";
	Описание.ПутьКДанным = "Объект.ЛьготыПерерасчет";
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "Сотрудник";
	Описание.ИмяПоляДляВставкиПоказателей = "ДатыЛьготыПерерасчет";
	Описание.СодержитПолеКодВычета = Истина;
	Описание.НомерТаблицы = 7.5;
	
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов = "ЛьготыПерерасчетРезультат";
	Описание.ВставлятьПослеПоля = Истина;
	
	Описание.ОтображатьПоляОписанияВремени = Истина;
	Описание.ОтображатьПоляНормыВремени = Истина;
	Описание.УправлятьОтображениемПолейОписанияВремени = Истина;
	
	Описание.ЭтоПерерасчеты = Истина;
	Описание.ИмяРеквизитаФиксСторно = "ФиксСторно";
	
	СтрокаЗависимыеТаблицы = "";
	Если Форма.ИспользоватьНДФЛ Тогда
		СтрокаЗависимыеТаблицы = "НДФЛ";
	КонецЕсли;
	Если Форма.ИспользоватьУдержания Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ?(ПустаяСтрока(СтрокаЗависимыеТаблицы),"",",") + "Удержания";	
	КонецЕсли;
	Если Форма.ИспользоватьЗаймы Тогда
		СтрокаЗависимыеТаблицы = СтрокаЗависимыеТаблицы + ?(ПустаяСтрока(СтрокаЗависимыеТаблицы),"",",") + "ПогашениеЗаймов";	
	КонецЕсли;
	Описание.РаспределениеРезультатовЗависимыеТаблицы = СтрокаЗависимыеТаблицы;
	
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияНачислений";
	Описание.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда = "АдресТаблицыРаспределенияПоТерриториямУсловиямТруда";
	
	Описание.ОтменятьВсеИсправления = Истина;
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Функция МассивОписанийТаблицФормы()
	
	МассивОписанийТаблицФормы = Новый Структура;
	
	Если Объект.РежимДоначисления Тогда
		МассивОписанийТаблицФормы.Вставить("Начисления", ОписаниеТаблицыНачислений(ЭтаФорма));
		МассивОписанийТаблицФормы.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов(ЭтаФорма));
		МассивОписанийТаблицФормы.Вставить("Пособия", ОписаниеТаблицыПособия(ЭтаФорма));
		МассивОписанийТаблицФормы.Вставить("ПособияПерерасчет", ОписаниеТаблицыПособияПерерасчет(ЭтаФорма));
		МассивОписанийТаблицФормы.Вставить("Удержания", ОписаниеТаблицыУдержаний());
		МассивОписанийТаблицФормы.Вставить("УдержанияПерерасчет", ОписаниеТаблицыУдержанияПерерасчет());
	Иначе 
		Если ИспользоватьНачисление Тогда 
			МассивОписанийТаблицФормы.Вставить("Начисления", ОписаниеТаблицыНачислений(ЭтаФорма));
			МассивОписанийТаблицФормы.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов(ЭтаФорма));
		КонецЕсли;
		Если ИспользоватьПособия Тогда 
			МассивОписанийТаблицФормы.Вставить("Пособия", ОписаниеТаблицыПособия(ЭтаФорма));
			МассивОписанийТаблицФормы.Вставить("ПособияПерерасчет", ОписаниеТаблицыПособияПерерасчет(ЭтаФорма));
		КонецЕсли;
		Если ИспользоватьЛьготы Тогда 
			МассивОписанийТаблицФормы.Вставить("Льготы", ОписаниеТаблицыЛьгот(ЭтаФорма));
			МассивОписанийТаблицФормы.Вставить("ЛьготыПерерасчет", ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма));
		КонецЕсли;
		Если ИспользоватьУдержания Тогда 
			МассивОписанийТаблицФормы.Вставить("Удержания", ОписаниеТаблицыУдержаний());
			МассивОписанийТаблицФормы.Вставить("УдержанияПерерасчет", ОписаниеТаблицыУдержанияПерерасчет());
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаКлиентСервер");
		Модуль.ПриЗаполненииСтруктурыОписанийТаблицНачисленияЗарплаты(МассивОписанийТаблицФормы, Объект.РежимДоначисления, ИспользоватьНачисление);
	КонецЕсли;
	
	Возврат МассивОписанийТаблицФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДляРаспределенияРезультата(Форма)

	ОписанияТаблиц = Новый Массив;
	
	Если Форма.Объект.РежимДоначисления Тогда 
		
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(Форма));
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(Форма));
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНачисленийПоДоговорам(Форма));
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПособия(Форма));
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПособияПерерасчет(Форма));
		ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержанияПерерасчет());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНДФЛ());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыКорректировкиВыплаты());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПогашениеЗаймов());
		
	Иначе 
		
		Если Форма.ИспользоватьНачисление Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(Форма));
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(Форма));
		КонецЕсли;
		
		Если Форма.ИспользоватьДоговоры Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыНачисленийПоДоговорам(Форма));
		КонецЕсли;
		
		Если Форма.ИспользоватьПособия Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПособия(Форма));
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПособияПерерасчет(Форма));
		КонецЕсли;
		
		Если Форма.ИспользоватьЛьготы Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыЛьгот(Форма));
			ОписанияТаблиц.Добавить(ОписаниеТаблицыЛьготыПерерасчет(Форма));
		КонецЕсли;
		
		Если Форма.ИспользоватьУдержания Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
			ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержанияПерерасчет());
		КонецЕсли;
		
		Если Форма.ИспользоватьНДФЛ Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыНДФЛ());
			ОписанияТаблиц.Добавить(ОписаниеТаблицыКорректировкиВыплаты());
		КонецЕсли;

		Если Форма.ИспользоватьЗаймы Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПогашениеЗаймов());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписанияТаблиц;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОписанияТаблицДляРаспределенияРезультата(Форма)

	ОписанияТаблиц = Новый Структура;
	
	Если Форма.Объект.РежимДоначисления Тогда 
		ОписанияТаблиц.Вставить("Начисления", ОписаниеТаблицыНачислений(Форма));
		ОписанияТаблиц.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов(Форма));
		ОписанияТаблиц.Вставить("НачисленияПоДоговорам", ОписаниеТаблицыНачисленийПоДоговорам(Форма));
		ОписанияТаблиц.Вставить("Пособия", ОписаниеТаблицыПособия(Форма));
		ОписанияТаблиц.Вставить("ПособияПерерасчет", ОписаниеТаблицыПособияПерерасчет(Форма));
		ОписанияТаблиц.Вставить("Удержания", ОписаниеТаблицыУдержаний());
		ОписанияТаблиц.Вставить("УдержанияПерерасчет", ОписаниеТаблицыУдержанияПерерасчет());
		ОписанияТаблиц.Вставить("НДФЛ", ОписаниеТаблицыНДФЛ());
		ОписанияТаблиц.Вставить("КорректировкиВыплаты", ОписаниеТаблицыКорректировкиВыплаты());
		ОписанияТаблиц.Вставить("ПогашениеЗаймов", ОписаниеТаблицыПогашениеЗаймов());
	Иначе 
		Если Форма.ИспользоватьНачисление Тогда 
			ОписанияТаблиц.Вставить("Начисления", ОписаниеТаблицыНачислений(Форма));
			ОписанияТаблиц.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов(Форма));
		КонецЕсли;
		Если Форма.ИспользоватьДоговоры Тогда 
			ОписанияТаблиц.Вставить("НачисленияПоДоговорам", ОписаниеТаблицыНачисленийПоДоговорам(Форма));
		КонецЕсли;
		Если Форма.ИспользоватьПособия Тогда 
			ОписанияТаблиц.Вставить("Пособия", ОписаниеТаблицыПособия(Форма));
			ОписанияТаблиц.Вставить("ПособияПерерасчет", ОписаниеТаблицыПособияПерерасчет(Форма));
		КонецЕсли;
		Если Форма.ИспользоватьЛьготы Тогда 
			ОписанияТаблиц.Вставить("Льготы", ОписаниеТаблицыЛьгот(Форма));
			ОписанияТаблиц.Вставить("ЛьготыПерерасчет", ОписаниеТаблицыЛьготыПерерасчет(Форма));
		КонецЕсли;
		Если Форма.ИспользоватьУдержания Тогда 
			ОписанияТаблиц.Вставить("Удержания", ОписаниеТаблицыУдержаний());
			ОписанияТаблиц.Вставить("УдержанияПерерасчет", ОписаниеТаблицыУдержанияПерерасчет());
		КонецЕсли;
		Если Форма.ИспользоватьНДФЛ Тогда 
			ОписанияТаблиц.Вставить("НДФЛ", ОписаниеТаблицыНДФЛ());
			ОписанияТаблиц.Вставить("КорректировкиВыплаты", ОписаниеТаблицыКорректировкиВыплаты());
		КонецЕсли;
		Если Форма.ИспользоватьЗаймы Тогда 
			ОписанияТаблиц.Вставить("ПогашениеЗаймов", ОписаниеТаблицыПогашениеЗаймов());
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписанияТаблиц;

КонецФункции

&НаСервере
Процедура ДанныеВРеквизиты(ТекущийОбъект)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИнициализироватьИсточникиДанныхФормыПриПолученииДанных(ТекущийОбъект, МенеджерВременныхТаблиц);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяВТРаспределение", "ВТРаспределениеРезультатовНачислений");
	ДополнительныеПараметры.Вставить("ИмяВТПредставлениеРаспределения", "ВТПредставлениеРаспределенияНачислений");
	ДополнительныеПараметры.Вставить("ПодготовленаВТВычетыКДоходам", Ложь);
	ДополнительныеПараметры.Вставить("Период", '00010101');         
	ДополнительныеПараметры.Вставить("ОписаниеПанелиВычеты", ОписаниеПанелиВычеты());
	ДополнительныеПараметры.Вставить("ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда", ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	ДополнительныеПараметры.Вставить("КонтролируемыеПоля", ПолучитьКонтролируемыеПоля());
	
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыНачислений(ЭтотОбъект), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыПерерасчетов(ЭтотОбъект), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыПособия(ЭтотОбъект), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыПособияПерерасчет(ЭтотОбъект), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыНачисленийПоДоговорам(ЭтотОбъект), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписанияТаблицЛьгот(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриПолученииДанныхДокументаНачисленияЗарплаты(ЭтотОбъект, ТекущийОбъект, МенеджерВременныхТаблиц, ДополнительныеПараметры);
	КонецЕсли;
	
	ДополнительныеПараметры.ИмяВТРаспределение = "ВТРаспределениеРезультатовУдержаний";
	ДополнительныеПараметры.ИмяВТПредставлениеРаспределения = "ВТПредставлениеРаспределенияУдержаний";
	
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыУдержаний(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыУдержанияПерерасчет(), МенеджерВременныхТаблиц, ДополнительныеПараметры);

	ЗарплатаКадрыРасширенный.ЗаполнитьВторичныеДанныеНДФЛПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыНДФЛ(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыКорректировкиВыплаты(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыПогашениеЗаймов(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсточникиДанныхФормыПриПолученииДанных(ТекущийОбъект, МенеджерВременныхТаблиц)
	
	СоздатьВТПоказатели(МенеджерВременныхТаблиц, ТекущийОбъект.Показатели);
	
	АдресТаблицыРаспределенияПоТерриториямУсловиямТруда = "";
	СоздатьВТРаспределениеПоТерриториямУсловиямТруда(МенеджерВременныхТаблиц, ТекущийОбъект.РаспределениеПоТерриториямУсловиямТруда);
	
	ТаблицаРаспределенияНачислений = ТекущийОбъект.РаспределениеРезультатовНачислений.Выгрузить();
	СоздатьВТРаспределениеРезультатовНачислений(МенеджерВременныхТаблиц, ТаблицаРаспределенияНачислений);
	ТаблицаРаспределенияНачислений.Индексы.Добавить("ИдентификаторСтроки");
	
	АдресТаблицыРаспределенияНачислений = ПоместитьВоВременноеХранилище(ТаблицаРаспределенияНачислений, УникальныйИдентификатор);
	
	ТаблицаРаспределенияУдержаний = ТекущийОбъект.РаспределениеРезультатовУдержаний.Выгрузить();
	СоздатьВТРаспределениеРезультатовУдержаний(МенеджерВременныхТаблиц, ТаблицаРаспределенияУдержаний);
	ТаблицаРаспределенияУдержаний.Индексы.Добавить("ИдентификаторСтроки");
	
	АдресТаблицыРаспределенияУдержаний = ПоместитьВоВременноеХранилище(ТаблицаРаспределенияУдержаний, УникальныйИдентификатор);	
	
	СоздатьВТПредставлениеРаспределенияРезультатовРасчета(МенеджерВременныхТаблиц, ТекущийОбъект.ПредставлениеРаспределенияРезультатовРасчета);
	
	ЗарплатаКадрыРасширенный.СоздатьВТПредставлениеРаспределенияНачисленийУдержаний(
		МенеджерВременныхТаблиц, 
		ТекущийОбъект.Ссылка, 
		"ВТРаспределениеРезультатовНачислений", 
		"ВТПредставлениеРаспределенияНачислений");
		
	ЗарплатаКадрыРасширенный.СоздатьВТПредставлениеРаспределенияНачисленийУдержаний(
		МенеджерВременныхТаблиц, 
		ТекущийОбъект.Ссылка, 
		"ВТРаспределениеРезультатовУдержаний", 
		"ВТПредставлениеРаспределенияУдержаний");
		
КонецПроцедуры

&НаСервере
Процедура СоздатьВТПоказатели(МенеджерВременныхТаблиц, ТаблицаПоказателей)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ТаблицаПоказателей);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.НомерСтроки,
	               |	Таблица.Показатель КАК Показатель,
	               |	Таблица.Значение,
	               |	Таблица.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
	               |ПОМЕСТИТЬ ВТПоказатели
	               |ИЗ
	               |	&ТаблицаПоказателей КАК Таблица";
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТРаспределениеПоТерриториямУсловиямТруда(МенеджерВременныхТаблиц, РаспределениеПоТерриториямУсловиямТруда)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("РаспределениеПоТерриториямУсловиямТруда", РаспределениеПоТерриториямУсловиямТруда);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.НомерСтроки,
	               |	Таблица.ИдентификаторСтроки,
	               |	Таблица.Территория,
	               |	Таблица.УсловияТруда,
	               |	Таблица.ДоляРаспределения,
	               |	Таблица.Результат,
	               |	Таблица.СуммаВычета,
	               |	Таблица.ИдентификаторСтрокиПоказателей
	               |ПОМЕСТИТЬ ВТРаспределениеПоТерриториямУсловиямТруда
	               |ИЗ
	               |	&РаспределениеПоТерриториямУсловиямТруда КАК Таблица";
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТРаспределениеРезультатовНачислений(МенеджерВременныхТаблиц, ТаблицаРаспределенияНачислений)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаРаспределенияНачислений", ТаблицаРаспределенияНачислений);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Таблица.Территория КАК Территория,
	|	Таблица.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Таблица.СтатьяРасходов КАК СтатьяРасходов,
	|	Таблица.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Таблица.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	Таблица.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	Таблица.Результат КАК Результат
	|ПОМЕСТИТЬ ВТРаспределениеРезультатовНачислений
	|ИЗ
	|	&ТаблицаРаспределенияНачислений КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеНачислений.НомерСтроки КАК НомерСтроки,
	|	РаспределениеНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РаспределениеНачислений.Территория КАК Территория,
	|	РаспределениеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	РаспределениеНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	РаспределениеНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	РаспределениеНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	РаспределениеНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	РаспределениеНачислений.Результат КАК Результат,
	|	ЕСТЬNULL(СтатьиФинансированияЗарплата.Код, """") КАК КодСтатьиФинансирования
	|ИЗ
	|	ВТРаспределениеРезультатовНачислений КАК РаспределениеНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиФинансированияЗарплата КАК СтатьиФинансированияЗарплата
	|		ПО РаспределениеНачислений.СтатьяФинансирования = СтатьиФинансированияЗарплата.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ИдентификаторСтроки,
	|	Территория,
	|	СтатьяФинансирования,
	|	СтатьяРасходов,
	|	СпособОтраженияЗарплатыВБухучете,
	|	ОблагаетсяЕНВД
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТаблицаРаспределенияНачислений = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТРаспределениеРезультатовУдержаний(МенеджерВременныхТаблиц, ТаблицаРаспределенияУдержаний)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаРаспределенияУдержаний", ТаблицаРаспределенияУдержаний);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Таблица.ВидУдержания КАК ВидУдержания,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.Подразделение КАК Подразделение,
	|	Таблица.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Таблица.СтатьяРасходов КАК СтатьяРасходов,
	|	Таблица.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	Таблица.Результат КАК Результат
	|ПОМЕСТИТЬ ВТРаспределениеРезультатовУдержаний
	|ИЗ
	|	&ТаблицаРаспределенияУдержаний КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеРезультатов.НомерСтроки КАК НомерСтроки,
	|	РаспределениеРезультатов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РаспределениеРезультатов.ВидУдержания КАК ВидУдержания,
	|	РаспределениеРезультатов.Сотрудник КАК Сотрудник,
	|	РаспределениеРезультатов.Подразделение КАК Подразделение,
	|	РаспределениеРезультатов.СтатьяФинансирования КАК СтатьяФинансирования,
	|	РаспределениеРезультатов.СтатьяРасходов КАК СтатьяРасходов,
	|	РаспределениеРезультатов.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	РаспределениеРезультатов.Результат КАК Результат,
	|	ЕСТЬNULL(СтатьиФинансированияЗарплата.Код, """") КАК КодСтатьиФинансирования
	|ИЗ
	|	ВТРаспределениеРезультатовУдержаний КАК РаспределениеРезультатов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиФинансированияЗарплата КАК СтатьиФинансированияЗарплата
	|		ПО РаспределениеРезультатов.СтатьяФинансирования = СтатьиФинансированияЗарплата.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ИдентификаторСтроки,
	|	ВидУдержания,
	|	Сотрудник,
	|	Подразделение,
	|	СтатьяФинансирования,
	|	СтатьяРасходов
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТаблицаРаспределенияУдержаний = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТПредставлениеРаспределенияРезультатовРасчета(МенеджерВременныхТаблиц, ПредставлениеРаспределенияРезультатовРасчета)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПредставлениеРаспределенияРезультатовРасчета", ПредставлениеРаспределенияРезультатовРасчета);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.НомерСтроки,
	               |	Таблица.ИдентификаторСтроки,
	               |	Таблица.НомерСтрокиРаспределения,
	               |	Таблица.НомерЭлементаПредставления,
	               |	Таблица.КоличествоЭлементовПредставления,
	               |	Таблица.ПредставлениеРезультата,
	               |	Таблица.ЕстьОшибкиЗаполнения,
	               |	Таблица.РаспределениеНачислений
	               |ПОМЕСТИТЬ ВТПредставлениеРаспределенияРезультатовРасчета
	               |ИЗ
	               |	&ПредставлениеРаспределенияРезультатовРасчета КАК Таблица";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	ТекущийОбъект.Показатели.Очистить();
	
	ОписанияТаблиц = Новый Массив;
	
	Если Объект.РежимДоначисления Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(ЭтаФорма));
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(ЭтаФорма));
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПособия(ЭтаФорма));
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПособияПерерасчет(ЭтаФорма));
		ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержанияПерерасчет());
	Иначе 
		Если ИспользоватьНачисление Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(ЭтаФорма));
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(ЭтаФорма));
		КонецЕсли;
		Если ИспользоватьПособия Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПособия(ЭтаФорма));
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПособияПерерасчет(ЭтаФорма));
		КонецЕсли;
		Если ИспользоватьЛьготы Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыЛьгот(ЭтаФорма));
			ОписанияТаблиц.Добавить(ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма));
		КонецЕсли;
		Если ИспользоватьУдержания Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
			ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержанияПерерасчет());
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаКлиентСервер");
		Модуль.ПриЗаполненииМассиваОписанийТаблицНачисленияЗарплаты(ОписанияТаблиц, Объект.РежимДоначисления, ИспользоватьНачисление);
	КонецЕсли;
	
	Если Объект.РежимДоначисления Или ИспользоватьДоговоры Тогда 
		УстановитьИдентификаторыСтрок(ТекущийОбъект, ОписаниеТаблицыНачисленийПоДоговорам(ЭтаФорма));
	КонецЕсли;
		
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблиц, 2);
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицДляРаспределенияРезультата(ЭтаФорма));
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, НачалоДня(Объект.МесяцНачисления));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизацииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	ОтражениеЗарплатыВБухучетеРасширенный.ОбработатьИзменениеОрганизацииПроцентЕНВД(ЭтаФорма, Объект.Организация, Объект.МесяцНачисления);
	РасчетЗарплатыРасширенныйФормы.ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), Ложь, Ложь);
	
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияКонтролируемыхПолей()
	
	// Выполняет заполнение сведений о значениях контролируемых полей, 
	// которые могли измениться в результате не интерактивного обновления значений.
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Начисления", Истина);
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НачисленияПоДоговорам", Истина);
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Пособия", Истина);
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Удержания", Истина);
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НДФЛ", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИдентификаторыСтрок(ТекущийОбъект, ОписаниеТаблицы)
	ТаблицаОбъекта = Объект[ОписаниеТаблицы.ИмяТаблицы];
	ДанныеФормыКоллекция = ТекущийОбъект[ОписаниеТаблицы.ИмяТаблицы];
	ИдентификаторСтроки = ОписаниеТаблицы.НомерТаблицы * 1000000 + 1;
	Индекс = 0;
	Пока Индекс < Объект[ОписаниеТаблицы.ИмяТаблицы].Количество() Цикл
		СтрокаФормы = ДанныеФормыКоллекция[Индекс];
		СтрокаТаблицы = ТаблицаОбъекта[Индекс];
		СтрокаФормы[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки] = ИдентификаторСтроки;
		СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки] = ИдентификаторСтроки;
		Индекс = Индекс + 1;
		ИдентификаторСтроки = ИдентификаторСтроки +1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПроцентЕНВД() Экспорт

	ЗарегистрироватьПроцентЕНВДНаСервере(Объект.Организация, Объект.МесяцНачисления, ЭтаФорма.ПроцентЕНВД, ЭтаФорма.ПроцентЕНВДСтрока);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьПроцентЕНВДНаСервере(Организация, Месяц, ПроцентЕНВД, ПроцентЕНВДСтрока)
	
	ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьПроцентЕНВДПослеРедактированияВФорме(Организация, Месяц, ПроцентЕНВД, ПроцентЕНВДСтрока);
	
КонецПроцедуры

&НаСервере
Функция ТекстПредупрежденияПриРедактированииПроцентаЕНВД() Экспорт

	ОрганизацияНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "Наименование");
	МесяцНачисленияСтрокой  = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Объект.МесяцНачисления);
	
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При изменении введенного ранее процента деятельности ЕНВД необходимо
					|перезаполнить все документы начисления зарплаты за %1 г по ""%2""'"),
					МесяцНачисленияСтрокой,
					ОрганизацияНаименование);
					
	Возврат ТекстПредупреждения;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроцентЕНВДСтрокаПриИзменении(Элемент)
	
	ОтражениеЗарплатыВБухучетеКлиент.ПроцентЕНВДСтрокаПриИзменении(ЭтаФорма, Элемент, ЭтаФорма.ПроцентЕНВДСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроцентЕНВДСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОтражениеЗарплатыВБухучетеКлиент.ПроцентЕНВДСтрокаНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСотрудникаПриВыбореДоговораГПХ()
	
	ИдентификаторСтроки = Элементы.НачисленияПоДоговорам.ТекущаяСтрока;
	Если ИдентификаторСтроки <> Неопределено Тогда
		
		ТекущиеДанные = Объект.НачисленияПоДоговорам.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Сотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДокументОснование, "Сотрудник");
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция КарточкаУчетаПоСтраховымВзносамНаСервере(ИдентификаторыСтрок)
	
	ФизическиеЛица = Новый Массив;
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ФизическиеЛица.Добавить(Объект.Взносы.НайтиПоИдентификатору(ИдентификаторСтроки).ФизическоеЛицо);
	КонецЦикла;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ДокументОбъект);
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(ДокументОбъект.Ссылка);
	КарточкаУчета.Добавить(УчетСтраховыхВзносов.КарточкаУчетаПоСтраховымВзносамПодробнее(ДокументОбъект, Модифицированность, ФизическиеЛица, Объект.МесяцНачисления));
	
	Возврат КарточкаУчета;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте() Экспорт
	
	ПересчитатьДокументНаСервере(СотрудникиКРасчету);
	РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДокументНаСервере(СотрудникиКРасчету)
	
	Для каждого ТаблицаССотрудниками Из СотрудникиКРасчету Цикл
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаССотрудниками.Значение.СписокСотрудников, "Ключ");
		РассчитатьСотрудникаНаСервере(Сотрудники, ТаблицаССотрудниками.Значение.ОписаниеТаблицы, Ложь);
	КонецЦикла;
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПересчитатьДокументНаКлиенте();
		Записать(Параметры);
	Иначе
		ЗакрыватьПослеЗаписи = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРасчетныйЛисток(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти)
	
	СписокСотрудников = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыВыделенныхСтрок Цикл
		Если ИмяТабличнойЧасти = "Начисления"
			Или ИмяТабличнойЧасти = "НачисленияПерерасчет"
			Или ИмяТабличнойЧасти = "Пособия"
			Или ИмяТабличнойЧасти = "НачисленияПоДоговорам" Тогда
			СписокСотрудников.Добавить(Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ИдентификаторСтроки).Сотрудник);
		Иначе
			СписокСотрудников.Добавить(Объект.Удержания.НайтиПоИдентификатору(ИдентификаторСтроки).ФизическоеЛицо);
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетныйЛисток = Неопределено;
	Если СписокСотрудников.Количество() = 1 Тогда
		РасчетныйЛисток = ПечатнаяФормаСотрудника(СписокСотрудников[0], "РасчетныйЛисток");
	КонецЕсли;
	
	Если РасчетныйЛисток = Неопределено Тогда
		
		Если Объект.Проведен И Не Модифицированность Тогда
			РасчетныйЛисток = РасчетныйЛистокНаСервереБезКонтекста(Объект.Организация, СписокСотрудников, Объект.МесяцНачисления);
		Иначе
			РасчетныйЛисток = РасчетныйЛистокНаСервере(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти, СписокСотрудников);
		КонецЕсли;
		
		Если СписокСотрудников.Количество() = 1 Тогда
			ДобавитьВКоллекциюПечатнуюФормуСотрудника(СписокСотрудников[0], "РасчетныйЛисток", РасчетныйЛисток);
		КонецЕсли;
		
	КонецЕсли;
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(Объект.Ссылка);
	КарточкаУчета.Добавить(РасчетныйЛисток);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.АнализНачисленийИУдержаний", "РасчетныйЛистокПодробнее", 
		КарточкаУчета, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчетныйЛистокНаСервереБезКонтекста(Организация, СписокФизическихЛиц, Месяц)
	
	Если ТипЗнч(СписокФизическихЛиц[0]) = Тип("СправочникСсылка.Сотрудники") Тогда 
		СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокФизическихЛиц, "ФизическоеЛицо"), "Значение", Истина);
	КонецЕсли;
	
	Возврат УчетНачисленнойЗарплаты.РасчетныйЛистокПоДаннымДокумента(Организация, СписокФизическихЛиц, Месяц);
	
КонецФункции

&НаСервере
Функция РасчетныйЛистокНаСервере(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти, СписокСотрудников)
	
	Если ИмяТабличнойЧасти = "Начисления"
		Или ИмяТабличнойЧасти = "НачисленияПерерасчет"
		Или ИмяТабличнойЧасти = "Пособия"
		Или ИмяТабличнойЧасти = "НачисленияПоДоговорам" Тогда
		
		МассивФизическихЛиц = Новый Массив;
		
		Для каждого Сотрудник Из СписокСотрудников Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФизическихЛиц, СотрудникиКлиентСерверПовтИсп.ФизическиеЛицаСотрудников(Сотрудник), Истина);
		КонецЦикла;
		
	Иначе
		МассивФизическихЛиц = СписокСотрудников;
	КонецЕсли;
	
	ДанныеДокумента = ДанныеДокументаФизическихЛиц(МассивФизическихЛиц);
	
	Возврат УчетНачисленнойЗарплаты.РасчетныйЛистокПоДаннымДокумента(Объект.Организация, МассивФизическихЛиц, Объект.МесяцНачисления, Объект.Ссылка, ДанныеДокумента);
	
КонецФункции

&НаСервере
Функция ОписанияТаблицНачисленийДляРасчетногоЛистка() Экспорт 
	
	ОписанияТаблиц = Новый Массив;
	
	Если ИспользоватьНачисление Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(ЭтаФорма));
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(ЭтаФорма));
	КонецЕсли;
	
	Если ИспользоватьДоговоры Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНачисленийПоДоговорам(ЭтаФорма));
	КонецЕсли;
	
	Если ИспользоватьПособия Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПособия(ЭтаФорма));
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПособияПерерасчет(ЭтаФорма));
	КонецЕсли;
	
	Если ИспользоватьЛьготы Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыЛьгот(ЭтаФорма));
		ОписанияТаблиц.Добавить(ОписаниеТаблицыЛьготыПерерасчет(ЭтаФорма));
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаКлиентСервер");
		Модуль.ПриЗаполненииМассиваОписанийТаблицНачисленияЗарплаты(ОписанияТаблиц, Ложь, ИспользоватьНачисление);
	КонецЕсли;
	
	Возврат ОписанияТаблиц;
	
КонецФункции

&НаСервере
Функция ОписанияТаблицУдержанийДляРасчетногоЛистка() Экспорт 
	
	ОписанияТаблиц = Новый Массив;
	
	Если ИспользоватьУдержания Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержанияПерерасчет());
	КонецЕсли;
	
	Если ИспользоватьНДФЛ Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНДФЛ());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыКорректировкиВыплаты());
	КонецЕсли;
	
	Если ИспользоватьЗаймы Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПогашениеЗаймов());
	КонецЕсли;
	
	Возврат ОписанияТаблиц;
	
КонецФункции

&НаКлиенте
Функция ЕстьИсправленныеСтроки() Экспорт
	Возврат ЕстьИсправленныеСтрокиНаСервере();
КонецФункции

&НаСервере
Функция ЕстьИсправленныеСтрокиНаСервере()
	Возврат РасчетЗарплатыРасширенныйФормы.ЕстьИсправленныеСтроки(ЭтаФорма);
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииОбъекта()
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
	ПараметрыОповещения = Новый Структура("Организация,МесяцНачисления,РежимДоначисления");
	ЗаполнитьЗначенияСвойств(ПараметрыОповещения, Объект);
	
	Оповестить("Запись_НачислениеЗарплаты", ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСотрудниковНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СотрудникиДокумента = Объект.Начисления.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	Иначе
		СотрудникиДокумента = Неопределено;
	КонецЕсли;
	
	СотрудникиКПерерасчету = ПерерасчетЗарплаты.СотрудникиКПерерасчету(Объект.Организация, Объект.МесяцНачисления, СотрудникиДокумента);
	
	СотрудникиСоответствие = Новый Соответствие;
	Для каждого СотрудникКПерерасчету Из СотрудникиКПерерасчету Цикл
		СотрудникиСоответствие.Вставить(СотрудникКПерерасчету, Истина);
	КонецЦикла;
	
	ОписаниеТаблицы = ОписаниеТаблицыНачислений(ЭтаФорма);
	
	ОписаниеПересчета = Новый Соответствие;
	ОписаниеПересчета.Вставить(ОписаниеТаблицы.ИмяТаблицы, Новый Структура("ОписаниеТаблицы,СписокСотрудников", ОписаниеТаблицы, СотрудникиСоответствие));
	
	ПерезаполнитьДанныеФормыНаСервере(СотрудникиКПерерасчету, Ложь, ОписаниеПересчета);
	
	ЗаполнениеВыполнено = Истина;
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаСотрудниковВХранилище()
	Возврат ПоместитьВоВременноеХранилище(Объект.Начисления.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ОчиститьТаблицыДокументаНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ТабличнаяЧасть Из Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти Цикл 
		Если Объект.Свойство(ТабличнаяЧасть.Имя) Тогда 
			Объект[ТабличнаяЧасть.Имя].Очистить();
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	РассчитатьИтогиПоДокументу();
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	УстановитьДоступностьКомандыДозаполнить();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуУдалитьСотрудника()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	
	ТаблицыДокумента = Новый Массив;
	ТаблицыДокумента.Добавить("Начисления");
	ТаблицыДокумента.Добавить("НачисленияПоДоговорам");
	ТаблицыДокумента.Добавить("НачисленияПерерасчет");
	ТаблицыДокумента.Добавить("Пособия");
	ТаблицыДокумента.Добавить("ПособияПерерасчет");
	ТаблицыДокумента.Добавить("Льготы");
	ТаблицыДокумента.Добавить("ЛьготыПерерасчет");
	ТаблицыДокумента.Добавить("Удержания");
	ТаблицыДокумента.Добавить("УдержанияПерерасчет");
	ТаблицыДокумента.Добавить("НДФЛ");
	ТаблицыДокумента.Добавить("ПогашениеЗаймов");
	ТаблицыДокумента.Добавить("Взносы");
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл
		
		ИмяТаблицы = ОписаниеДокумента[ТаблицаДокумента + "Имя"];
		Если ИмяТаблицы <> Неопределено Тогда
			
			ИмяКоманднойПанели = Неопределено;
			
			ОписаниеДокумента.Свойство(ТаблицаДокумента + "КоманднаяПанельИмя", ИмяКоманднойПанели);
			ДобавитьКомандуУдалитьСотрудникаВТаблицуДокумента(ИмяТаблицы, ИмяКоманднойПанели);

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуУдалитьСотрудникаВТаблицуДокумента(ИмяТаблицы, ИмяКоманднойПанели)
	
	Если Элементы.Найти(ИмяТаблицы) = Неопределено Тогда
		// Такой таблицы нет в форме
		Возврат;
	КонецЕсли;
	
	Если Команды.Найти(ИмяТаблицы + "УдалитьСотрудника") <> Неопределено Тогда
		// Команда уже существует
		Возврат;
	КонецЕсли;
	
	// Добавляем команду формы
	КомандаУдалитьСотрудника = Команды.Добавить(ИмяТаблицы + "УдалитьСотрудника");
	КомандаУдалитьСотрудника.Действие = "Подключаемый_" + ИмяТаблицы + "УдалитьСотрудника";
	КомандаУдалитьСотрудника.Заголовок = НСтр("ru = 'Удалить сотрудника'");
	КомандаУдалитьСотрудника.Подсказка = НСтр("ru = 'Данные по выбранному сотруднику удаляются со всех таблиц документа'");
	КомандаУдалитьСотрудника.Картинка = БиблиотекаКартинок.Удалить;
	КомандаУдалитьСотрудника.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КомандаУдалитьСотрудника.ИзменяетСохраняемыеДанные = Истина;
	
	// Добавляем элементы (группу кнопок и кнопку) в командную панель.
	Если ИмяКоманднойПанели = Неопределено Тогда
		ИмяКоманднойПанели = ИмяТаблицы + "КоманднаяПанель";
	КонецЕсли;
	
	КоманднаяПанельТаблицы = Элементы.Найти(ИмяКоманднойПанели);
	Если КоманднаяПанельТаблицы <> Неопределено Тогда
		Если КоманднаяПанельТаблицы.ПодчиненныеЭлементы.Количество() = 0 Тогда
			МестоВставки = Неопределено;
		Иначе
			МестоВставки = КоманднаяПанельТаблицы.ПодчиненныеЭлементы[0];
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КоманднаяПанельПересчитатьСотрудникаГруппа";
		ГруппаКнопок = Элементы.Найти(ИмяЭлемента);
		Если ГруппаКнопок = Неопределено Тогда
			ГруппаКнопок = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КоманднаяПанельТаблицы, МестоВставки);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Заголовок = НСтр("ru = 'Обновление строк документа'");
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КоманднаяПанельУдалитьСотрудника";
		Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			КнопкаУдалитьСотрудника = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопок);
			КнопкаУдалитьСотрудника.ИмяКоманды = ИмяТаблицы + "УдалитьСотрудника";
			КнопкаУдалитьСотрудника.ТолькоВоВсехДействиях = Истина;
		КонецЕсли;
		
		// Добавляем элементы в контекстное меню.
		КонтекстноеМеню = Элементы[ИмяТаблицы].КонтекстноеМеню;
		
		МестоВставки = Неопределено;
		Если КонтекстноеМеню.ПодчиненныеЭлементы.Количество() > 0 Тогда
			МестоВставки = КонтекстноеМеню.ПодчиненныеЭлементы[0];
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КонтекстноеМенюПересчитатьСотрудникаГруппа";
		ГруппаКнопок = Элементы.Найти(ИмяЭлемента);
		Если ГруппаКнопок = Неопределено Тогда
			ГруппаКнопок = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КонтекстноеМеню, МестоВставки);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Заголовок = НСтр("ru = 'Обновление строк документа'");
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КонтекстноеМенюУдалитьСотрудника";
		Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			КнопкаУдалитьСотрудника = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопок);
			КнопкаУдалитьСотрудника.ИмяКоманды = ИмяТаблицы + "УдалитьСотрудника";
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСотрудникаНаСервере(Сотрудник)
	
	Если Не УдалитьДанныеСотрудникаНаСервере(Сотрудник) Тогда 
		РассчитатьСотрудникаНаСервере(Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьДанныеСотрудникаНаСервере(СотрудникФизическоеЛицо)
	
	УдаляемыеСотрудники = Новый Соответствие;
	ДополнительныеСотрудники = Новый Соответствие;
	
	Если ТипЗнч(СотрудникФизическоеЛицо) = Тип("СправочникСсылка.Сотрудники") Тогда 
	
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникФизическоеЛицо, "ФизическоеЛицо");
		
		УдаляемыеСотрудники.Вставить(СотрудникФизическоеЛицо, Истина);
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Сотрудник", СотрудникФизическоеЛицо);
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Сотрудники.Ссылка
		               |ИЗ
		               |	Справочник.Сотрудники КАК Сотрудники
		               |ГДЕ
		               |	Сотрудники.Ссылка <> &Сотрудник
		               |	И Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ДополнительныеСотрудники.Вставить(Выборка.Ссылка, Истина);
		КонецЦикла;
		
	Иначе 
		
		ФизическоеЛицо = СотрудникФизическоеЛицо;
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Сотрудники.Ссылка
		               |ИЗ
		               |	Справочник.Сотрудники КАК Сотрудники
		               |ГДЕ
		               |	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			УдаляемыеСотрудники.Вставить(Выборка.Ссылка, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	ОчиститьУдержания = Истина;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Начисления");
	ИменаТаблиц.Добавить("НачисленияПерерасчет");
	ИменаТаблиц.Добавить("НачисленияПоДоговорам");
	ИменаТаблиц.Добавить("Пособия");
	ИменаТаблиц.Добавить("ПособияПерерасчет");
	ИменаТаблиц.Добавить("Льготы");
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
	
		СтрокиСотрудника = Новый Массив;
		Для Каждого СтрокаСотрудника Из Объект[ИмяТаблицы] Цикл 
			Если УдаляемыеСотрудники[СтрокаСотрудника.Сотрудник] <> Неопределено Тогда 
		    	СтрокиСотрудника.Добавить(СтрокаСотрудника);
			ИначеЕсли ДополнительныеСотрудники[СтрокаСотрудника.Сотрудник] <> Неопределено Тогда 
				ОчиститьУдержания = Ложь;
			КонецЕсли;
		КонецЦикла;
	
		Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл 
			Объект[ИмяТаблицы].Удалить(СтрокаСотрудника);
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ОчиститьУдержания Тогда 
		УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
		Возврат Ложь;
	КонецЕсли;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Взносы");
	ИменаТаблиц.Добавить("НДФЛ");
	ИменаТаблиц.Добавить("ПогашениеЗаймов");
	ИменаТаблиц.Добавить("Удержания");
	ИменаТаблиц.Добавить("КорректировкиВыплаты");
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
		СтрокиФизическогоЛица = Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
		Для Каждого СтрокаФизическогоЛица Из СтрокиФизическогоЛица Цикл 
			Объект[ИмяТаблицы].Удалить(СтрокаФизическогоЛица);
		КонецЦикла;
	КонецЦикла;
	
	РассчитатьИтогиПоДокументу();
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьССохранениемИсправлений", "Доступность", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЕстьИсправления = ТекущиеДанные.Свойство("ФиксРасчет") И ТекущиеДанные.ФиксРасчет
		Или ТекущиеДанные.Свойство("ФиксРасчетВремени") И ТекущиеДанные.ФиксРасчетВремени
		Или ТекущиеДанные.Свойство("ФиксЗаполнение") И ТекущиеДанные.ФиксЗаполнение
		Или ТекущиеДанные.Свойство("ФиксСтрока") И ТекущиеДанные.ФиксСтрока;
		
	Если ЕстьИсправления Тогда 	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьССохранениемИсправлений", "Доступность", Истина);
	КонецЕсли;
		
КонецПроцедуры	

&НаСервере
Процедура УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений(ЕстьИсправленныеСтроки = Неопределено)
	
	Если ЕстьИсправленныеСтроки = Неопределено Тогда 
		ЕстьИсправленныеСтроки = ЕстьИсправленныеСтрокиНаСервере();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ЗаполнитьССохранениемИсправлений", "Доступность", ЕстьИсправленныеСтроки);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандыДозаполнить()
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Начисления");
	ИменаТаблиц.Добавить("НачисленияПерерасчет");
	ИменаТаблиц.Добавить("НачисленияПоДоговорам");
	ИменаТаблиц.Добавить("Пособия");
	ИменаТаблиц.Добавить("ПособияПерерасчет");
	ИменаТаблиц.Добавить("Льготы");
	ИменаТаблиц.Добавить("Взносы");
	ИменаТаблиц.Добавить("НДФЛ");
	ИменаТаблиц.Добавить("ПогашениеЗаймов");
	ИменаТаблиц.Добавить("Удержания");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПустойДокумент = Истина;
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
		Если Объект[ИмяТаблицы].Количество() > 0 Тогда 
			ПустойДокумент = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Дозаполнить", "Доступность", Не ПустойДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура НачислениеЗарплатыВоеннослужащимПриИзменении(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	
КонецПроцедуры

// НДФЛ
&НаСервере
Функция НДФЛПодробнееНаСервере(ФизическиеЛица) Экспорт
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ДокументОбъект);
	
	НДФЛПодробнее = Новый Массив;
	НДФЛПодробнее.Добавить(ДокументОбъект.Ссылка);
	НДФЛПодробнее.Добавить(УчетНДФЛФормы.РегистрНалоговогоУчетаПоНДФЛ(ДокументОбъект, Модифицированность, СписокФизическихЛиц, Объект.МесяцНачисления));
	
	Возврат НДФЛПодробнее;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВторичныеДанныеФормыПримененныеВычеты()
	
	УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогНачислено(Форма)
	
	ОписанияСоставляющихНачисления = Новый Массив;
	ОписанияСоставляющихНачисления.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='зарплата'")));
	
	ОписанияСоставляющихНачисленияПоДоговорам = Новый Массив;
	ОписанияСоставляющихНачисленияПоДоговорам.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='по договорам ГПХ'")));
	
	ОписанияСоставляющихПособия = Новый Массив;
	ОписанияСоставляющихПособия.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='пособия'")));
		
	ЛьготыСотрудниковСуществует = ОбщегоНазначенияБЗККлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников");
		
	Если ЛьготыСотрудниковСуществует Тогда
		ОписанияСоставляющихЛьготы = Новый Массив;
		ОписанияСоставляющихЛьготы.Добавить(
			ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='льготы'")));
	КонецЕсли;
		
	ОписанияСоставляющих = Новый Массив;
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Начисления", ОписанияСоставляющихНачисления));
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.НачисленияПоДоговорам", ОписанияСоставляющихНачисленияПоДоговорам));
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Пособия", ОписанияСоставляющихПособия));
		
	Если ЛьготыСотрудниковСуществует Тогда
		ОписанияСоставляющих.Добавить(
			ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Льготы", ОписанияСоставляющихЛьготы));
	КонецЕсли;
		
	ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейРассчитатьИтог(Форма, "ИтогНачислено", ОписанияСоставляющих);
		
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогНачисленоПерерасчет()
	
	ИтогНачисленоПерерасчет = 0;
	ТекстПодсказки = "";
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Объект.НачисленияПерерасчет);
	ТабличныеЧасти.Добавить(Объект.ПособияПерерасчет);
	ТабличныеЧасти.Добавить(Объект.ЛьготыПерерасчет);
	
	Для каждого ТабличнаяЧастьДокумента Из ТабличныеЧасти Цикл
		
		Если ТабличнаяЧастьДокумента.Количество() > 0 Тогда
			
			Если Не ПустаяСтрока(ТекстПодсказки) Тогда
				ТекстПодсказки = ТекстПодсказки + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
			НачисленияПерерасчет = ТабличнаяЧастьДокумента.Выгрузить(, "ФиксСторно,ПериодДействия,Результат");
			
			НачисленияПерерасчет.Свернуть("ФиксСторно,ПериодДействия", "Результат");
			
			ИтогНачисленоПерерасчет = ИтогНачисленоПерерасчет + НачисленияПерерасчет.Итог("Результат");
			
			ДатыНачала = НачисленияПерерасчет.Скопировать(, "ПериодДействия,Результат");
			ДатыНачала.Свернуть("ПериодДействия", "Результат");
			ДатыНачала.Сортировать("ПериодДействия");
			
			Операции = НачисленияПерерасчет.Скопировать(, "ФиксСторно");
			Операции.Свернуть("ФиксСторно");
			Операции.Сортировать("ФиксСторно");
			
			ПустаяСтрока = "                 ";
			
			Если Операции.Количество() > 0 И ДатыНачала.Количество() > 0 Тогда
				
				ДлиныКолонок = Новый Соответствие;
				СоответствиеПериодовКолонкам = Новый Соответствие;
				
				ТаблицаИтогов = Новый ТаблицаЗначений;
				ТаблицаИтогов.Колонки.Добавить("Операция", Новый ОписаниеТипов("Строка"), "");
				
				ДлиныКолонок.Вставить(ТаблицаИтогов.Колонки.Операция.Имя, 0);
				
				НомерКолонки = 1;
				Для каждого СтрокаПериодДействия Из ДатыНачала Цикл
					
					ИмяКолонки = "Итог" + НомерКолонки;
					ЗаголовокКолонки = Формат(СтрокаПериодДействия.ПериодДействия, "ДФ='ММММ гггг'");
					
					ТаблицаИтогов.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"), ЗаголовокКолонки);
					ДлиныКолонок.Вставить(ИмяКолонки, СтрДлина(ЗаголовокКолонки));
					
					СоответствиеПериодовКолонкам.Вставить(СтрокаПериодДействия.ПериодДействия, ИмяКолонки);
					
					НомерКолонки = НомерКолонки + 1;
					
				КонецЦикла;
				
				Для каждого СтрокаОперации Из Операции Цикл
					
					НоваяСтрока = ТаблицаИтогов.Добавить();
					Если СтрокаОперации.ФиксСторно Тогда
						Операция = НСтр("ru='Сторнировано'") + ":";
					Иначе
						Операция = НСтр("ru='Начислено'") + ":";
					КонецЕсли;
					НоваяСтрока.Операция = Операция;
					ЗапомнитьМаксимальнуюДлинуСтроки(ДлиныКолонок, "Операция", СтрДлина(Операция));
					
					СтрокиОперации = НачисленияПерерасчет.НайтиСтроки(Новый Структура("ФиксСторно", СтрокаОперации.ФиксСторно));
					Для каждого СтрокаОперации Из СтрокиОперации Цикл
						Результат = Формат(СтрокаОперации.Результат, "ЧДЦ=2");
						ИмяКолонки = СоответствиеПериодовКолонкам.Получить(СтрокаОперации.ПериодДействия);
						НоваяСтрока[ИмяКолонки] = Результат;
						ЗапомнитьМаксимальнуюДлинуСтроки(ДлиныКолонок, ИмяКолонки, СтрДлина(Результат))
					КонецЦикла;
					
				КонецЦикла;
				
				НоваяСтрока = ТаблицаИтогов.Добавить();
				Для каждого СтрокаДатыНачала Из ДатыНачала Цикл
					Результат = Формат(СтрокаДатыНачала.Результат, "ЧДЦ=2");
					ИмяКолонки = СоответствиеПериодовКолонкам.Получить(СтрокаДатыНачала.ПериодДействия);
					НоваяСтрока[ИмяКолонки] = Результат;
					ЗапомнитьМаксимальнуюДлинуСтроки(ДлиныКолонок, ИмяКолонки, СтрДлина(Результат))
				КонецЦикла;
				
				ПерваяКолонка = Истина;
				Для каждого Колонка Из ТаблицаИтогов.Колонки Цикл
					
					ИмяКолонки = Колонка.Имя;
					ВыводимыйТекст = Колонка.Заголовок;
					
					Отступ = ДлиныКолонок.Получить(ИмяКолонки) - СтрДлина(ВыводимыйТекст);
					Если ПерваяКолонка Тогда
						ПерваяКолонка = Ложь;
						ТекстПодсказки = ТекстПодсказки + ВыводимыйТекст + Лев(ПустаяСтрока, Отступ);
					Иначе
						Отступ = Отступ + 2;
						ТекстПодсказки = ТекстПодсказки + Лев(ПустаяСтрока, Отступ) + ВыводимыйТекст;
					КонецЕсли;
					
				КонецЦикла;
				
				МаксимальнаяДлинаСтроки = 0;
				ВыводимаяСтрока = 1;
				
				Для каждого СтрокаТаблицыИтогов Из ТаблицаИтогов Цикл
					
					ТекстПодсказки = ТекстПодсказки + Символы.ПС;
					ПерваяКолонка = Истина;
					Для каждого Колонка Из ТаблицаИтогов.Колонки Цикл
						
						ИмяКолонки = Колонка.Имя;
						ВыводимыйТекст = СтрокаТаблицыИтогов[ИмяКолонки];
						
						Отступ = ДлиныКолонок.Получить(ИмяКолонки) - СтрДлина(ВыводимыйТекст);
						Если ПерваяКолонка Тогда
							ПерваяКолонка = Ложь;
							ТекстПодсказки = ТекстПодсказки + ВыводимыйТекст + Лев(ПустаяСтрока, Отступ);
						Иначе
							Отступ = Отступ + 2;
							ТекстПодсказки = ТекстПодсказки + Лев(ПустаяСтрока, Отступ) + ВыводимыйТекст;
						КонецЕсли;
						
					КонецЦикла;
					
					ДлинаПоследнейСтроки = СтрДлина(СтрПолучитьСтроку(ТекстПодсказки, СтрЧислоСтрок(ТекстПодсказки)));
					Если МаксимальнаяДлинаСтроки < ДлинаПоследнейСтроки Тогда
						МаксимальнаяДлинаСтроки = ДлинаПоследнейСтроки;
					КонецЕсли;
					
					Если ВыводимаяСтрока = 2 Тогда
						
						ТекстПодсказки = ТекстПодсказки + Символы.ПС
							+ Лев("-------------------------------------------------------------------------------------------------------------------------", МаксимальнаяДлинаСтроки);
						
					КонецЕсли;
					
					ВыводимаяСтрока = ВыводимаяСтрока + 1;
					Если ТаблицаИтогов.Количество() = 2 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(ЭтаФорма, "ИтогНачисленоПерерасчет", ТекстПодсказки);
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьМаксимальнуюДлинуСтроки(Коллекция, Ключ, ДлинаСтроки)
	
	ТекущаяДлина = Коллекция.Получить(Ключ);
	Если ТекущаяДлина < ДлинаСтроки Тогда
		Коллекция.Вставить(Ключ, ДлинаСтроки);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогУдержано(Форма)
	
	ОписанияСоставляющихУдержания = Новый Массив;
	ОписанияСоставляющихУдержания.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='удержания'")));

	ОписанияСоставляющихНДФЛ = Новый Массив;
	ОписанияСоставляющихНДФЛ.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Налог", НСтр("ru='НДФЛ'")));
	
	ОписанияСоставляющихПогашениеЗаймов = Новый Массив;
	ОписанияСоставляющихПогашениеЗаймов.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("ПогашениеПроцентов", НСтр("ru='погашено процентов по займам'")));
	ОписанияСоставляющихПогашениеЗаймов.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("ПогашениеЗайма", НСтр("ru='погашено займов'")));
	ОписанияСоставляющихПогашениеЗаймов.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("НалогНаМатериальнуюВыгоду", НСтр("ru='налог на материальную выгоду'")));
	
	ОписанияСоставляющих = Новый Массив;
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Удержания", ОписанияСоставляющихУдержания));
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.НДФЛ", ОписанияСоставляющихНДФЛ));
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.ПогашениеЗаймов", ОписанияСоставляющихПогашениеЗаймов));
	
	ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейРассчитатьИтог(Форма, "ИтогУдержано", ОписанияСоставляющих);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогВзносы(Форма)
	
	ПоляВзносов = УчетСтраховыхВзносовКлиентСервер.ОписаниеПолейВзносовВСоответствии(Форма.Объект.МесяцНачисления);
	
	ОписанияСоставляющихВзносы = Новый Массив;
	Для каждого ОписаниеПоля Из ПоляВзносов Цикл
		ОписанияСоставляющихВзносы.Добавить(
			ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита(ОписаниеПоля.Ключ, ОписаниеПоля.Значение));
	КонецЦикла;
	
	ОписанияСоставляющих = Новый Массив;
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Взносы", ОписанияСоставляющихВзносы));
	
	ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейРассчитатьИтог(Форма, "ИтогВзносы", ОписанияСоставляющих);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиПоДокументу()
	
	РассчитатьИтогНачислено(ЭтаФорма);
	РассчитатьИтогНачисленоПерерасчет();
	РассчитатьИтогУдержано(ЭтаФорма);
	РассчитатьИтогВзносы(ЭтаФорма);
	
	УстановитьОтображениеСообщенияОНеобходимостиПерерасчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеСообщенияОНеобходимостиПерерасчета()
	
	ПерерасчетЗарплаты.УстановитьОтображениеСообщенияОНеобходимостиПерерасчетаВФормеДокумента(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

// Контролируемые поля
&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	КонтролируемыеПоля = Новый Структура;
	
	// Начисления
	НачисленияФиксРасчет = Новый Массив;
	НачисленияФиксРасчет.Добавить("Результат");
	
	НачисленияФиксРасчетВремени = Новый Массив;
	НачисленияФиксРасчетВремени.Добавить("ОтработаноДней");
	НачисленияФиксРасчетВремени.Добавить("ОтработаноЧасов");
	НачисленияФиксРасчетВремени.Добавить("НормаДней");
	НачисленияФиксРасчетВремени.Добавить("НормаЧасов");
	
	НачисленияФиксСтрока = Новый Массив;
	НачисленияФиксСтрока.Добавить("Сотрудник");
	НачисленияФиксСтрока.Добавить("Подразделение");
	НачисленияФиксСтрока.Добавить("Начисление");
	НачисленияФиксСтрока.Добавить("ДатаНачала");
	НачисленияФиксСтрока.Добавить("ДатаОкончания");
	
	НачисленияПоля = Новый Структура;
	НачисленияПоля.Вставить("ФиксРасчет", НачисленияФиксРасчет);
	НачисленияПоля.Вставить("ФиксЗаполнение", Новый Массив);
	НачисленияПоля.Вставить("ФиксСтрока", НачисленияФиксСтрока);
	НачисленияПоля.Вставить("ФиксРасчетВремени", НачисленияФиксРасчетВремени);
	
	КонтролируемыеПоля.Вставить("Начисления", НачисленияПоля);
	
	// Начисления перерасчет
	НачисленияПерерасчетПоля = Новый Структура;
	НачисленияПерерасчетПоля.Вставить("ФиксРасчет", НачисленияФиксРасчет);
	НачисленияПерерасчетПоля.Вставить("ФиксЗаполнение", Новый Массив);
	НачисленияПерерасчетПоля.Вставить("ФиксСтрока", НачисленияФиксСтрока);
	НачисленияПерерасчетПоля.Вставить("ФиксРасчетВремени", НачисленияФиксРасчетВремени);
	
	КонтролируемыеПоля.Вставить("НачисленияПерерасчет", НачисленияПерерасчетПоля);
	
	// Договоры
	ДоговорыФиксРасчет = Новый Массив;
	ДоговорыФиксРасчет.Добавить("Результат");
	
	ДоговорыФиксСтрока = Новый Массив;
	ДоговорыФиксСтрока.Добавить("Сотрудник");
	ДоговорыФиксСтрока.Добавить("Подразделение");
	ДоговорыФиксСтрока.Добавить("ДокументОснование");
	ДоговорыФиксСтрока.Добавить("ДатаНачала");
	ДоговорыФиксСтрока.Добавить("ДатаОкончания");
	ДоговорыФиксСтрока.Добавить("КодДохода");
	ДоговорыФиксСтрока.Добавить("КодВычета");
	ДоговорыФиксСтрока.Добавить("ПланируемаяДатаВыплаты");
	ДоговорыФиксРасчет.Добавить("СуммаВычета");
	
	ДоговорыПоля = Новый Структура;
	ДоговорыПоля.Вставить("ФиксРасчет", ДоговорыФиксРасчет);
	ДоговорыПоля.Вставить("ФиксСтрока", ДоговорыФиксСтрока);
	
	КонтролируемыеПоля.Вставить("НачисленияПоДоговорам", ДоговорыПоля);
	
	// Пособия
	ПособияФиксРасчет = Новый Массив;
	ПособияФиксРасчет.Добавить("Результат");
	ПособияФиксРасчет.Добавить("РезультатВТомЧислеЗаСчетФБ");
	
	ПособияФиксСтрока = Новый Массив;
	ПособияФиксСтрока.Добавить("Сотрудник");
	ПособияФиксСтрока.Добавить("Подразделение");
	ПособияФиксСтрока.Добавить("Начисление");
	ПособияФиксСтрока.Добавить("ДатаНачала");
	ПособияФиксСтрока.Добавить("ДатаОкончания");
	
	ПособияПоля = Новый Структура;
	ПособияПоля.Вставить("ФиксРасчет", ПособияФиксРасчет);
	ПособияПоля.Вставить("ФиксЗаполнение", Новый Массив);
	ПособияПоля.Вставить("ФиксСтрока", ПособияФиксСтрока);
	
	КонтролируемыеПоля.Вставить("Пособия", ПособияПоля);
	
	// Пособия перерасчет
	ПособияПерерасчетПоля = Новый Структура;
	ПособияПерерасчетПоля.Вставить("ФиксРасчет", ПособияФиксРасчет);
	ПособияПерерасчетПоля.Вставить("ФиксЗаполнение", Новый Массив);
	ПособияПерерасчетПоля.Вставить("ФиксСтрока", ПособияФиксСтрока);
	
	КонтролируемыеПоля.Вставить("ПособияПерерасчет", ПособияПерерасчетПоля);
	
	// Удержания
	УдержанияФиксРасчет = Новый Массив;
	УдержанияФиксРасчет.Добавить("Результат");
	
	УдержанияФиксСтрока = Новый Массив;
	УдержанияФиксСтрока.Добавить("ФизическоеЛицо");
	УдержанияФиксСтрока.Добавить("Удержание");
	УдержанияФиксСтрока.Добавить("ДатаНачала");
	УдержанияФиксСтрока.Добавить("ДатаОкончания");
	
	УдержанияПоля = Новый Структура;
	УдержанияПоля.Вставить("ФиксРасчет", УдержанияФиксРасчет);
	УдержанияПоля.Вставить("ФиксЗаполнение", Новый Массив);
	УдержанияПоля.Вставить("ФиксСтрока", УдержанияФиксСтрока);
	
	КонтролируемыеПоля.Вставить("Удержания", УдержанияПоля);
	
	КонтролируемыеПоля.Вставить("НДФЛ", УчетНДФЛРасширенный.КонтролируемыеПоляДляФиксацииРезультатов());
	КонтролируемыеПоля.Вставить("КорректировкиВыплаты", РасчетЗарплатыРасширенный.КонтролируемыеПоляКорректировкиВыплатыДляФиксацииРезультатов());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьСоставКонтролируемыхПолейНачисленияЗарплаты(КонтролируемыеПоля);
		Модуль.ДополнитьСоставКонтролируемыхПолейНачисленияЗарплаты(КонтролируемыеПоля, "ЛьготыПерерасчет");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ДополнитьСоставКонтролируемыхПолейНачисленияЗарплаты(КонтролируемыеПоля);
	КонецЕсли;
	
	Возврат КонтролируемыеПоля;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей() Экспорт
	Возврат СтарыеЗначенияКонтролируемыхПолей;
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройки()

	РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтаФорма, ОписаниеТаблицыНачислений(ЭтаФорма));
	РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтаФорма, ОписаниеТаблицыПособия(ЭтаФорма));
	РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет(ЭтаФорма));
	РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтаФорма, ОписаниеТаблицыПерерасчетов(ЭтаФорма));
	РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтаФорма, ОписаниеТаблицыУдержаний());
	РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтаФорма, ОписаниеТаблицыУдержанияПерерасчет());
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.УстановитьРежимОтображенияПодробноИзНастройки(ЭтаФорма, ОписанияТаблицЛьгот());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБухучетРезультатовРасчетаНаСервере(ИсходныеДанные = Неопределено)
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(Объект.МесяцНачисления, Объект.Организация);
	ЗаполнитьНастройкиМенеджераРасчета(Неопределено, МенеджерРасчета);
	
	Если ИсходныеДанные = Неопределено Тогда
		НачальныеПозицииВставки = Неопределено;
		Отбор = Неопределено;
		СотрудникиКРасчету = Неопределено;
	Иначе	
		Отбор = СотрудникиФизическиеЛицаОтбор(ИсходныеДанные.Сотрудник);
		СотрудникиКРасчету = Отбор.СотрудникиКРасчету;
		НачальныеПозицииВставки = Новый Структура;
	КонецЕсли;
	
	ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, НачальныеПозицииВставки);
	
	МенеджерРасчета.НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу = Ложь;
	МенеджерРасчета.НастройкиБухучета.ПроверятьНеобходимостьПересчетаВзносов = ИспользоватьВзносы;
	МенеджерРасчета.НастройкиБухучета.ПроверятьНеобходимостьПересчетаНДФЛ	 = ИспользоватьНДФЛ;
	МенеджерРасчета.ЗаполнитьНастройкиОбновленияБухучета(ИсходныеДанные);
	МенеджерРасчета.ОбновитьБухучетРезультатовРасчета();
	
	ДанныеЗаполнения = РасчетЗарплатыРасширенный.ОписаниеДанныхДляЗаполненияТаблицДокумента();
	ДанныеЗаполнения.Начисления = МенеджерРасчета.Зарплата.Начисления;
	ДанныеЗаполнения.НачисленияПоДоговорам = МенеджерРасчета.Зарплата.ДоговорыПодряда;
	ДанныеЗаполнения.Удержания = МенеджерРасчета.Зарплата.Удержания;
	ДанныеЗаполнения.НДФЛ = МенеджерРасчета.Зарплата.НДФЛ;
	ДанныеЗаполнения.ПогашениеЗаймов = МенеджерРасчета.Зарплата.ПогашениеЗаймов;
	ДанныеЗаполнения.Взносы = МенеджерРасчета.Зарплата.Взносы;
	ДанныеЗаполнения.КорректировкиВыплаты = МенеджерРасчета.Зарплата.КорректировкиВыплаты;
	
	ДанныеДляЗаполненияВДанныеФормы(ДанныеЗаполнения, НачальныеПозицииВставки);
	
	УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма, , СотрудникиКРасчету);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
	
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы(),СотрудникиКРасчету);
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы(),СотрудникиКРасчету);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(),СотрудникиКРасчету);
	
	Если ИсходныеДанные <> Неопределено Тогда
		РасчетЗарплатыРасширенныйФормы.УстановитьТекущуюСтрокуТаблицыФормы(ЭтаФорма, ИсходныеДанные.ИмяИсходнойТаблицы, ИсходныеДанные.НомерСтрокиИсходнойТаблицы)
	КонецЕсли;
	
КонецПроцедуры

#Область ПечатныеФормыСотрудников

&НаКлиенте
Функция ПечатнаяФормаСотрудника(Сотрудник, Идентификатор)
	
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
		ФизическоеЛицоСотрудника = СотрудникиКлиентСерверПовтИсп.ФизическиеЛицаСотрудников(Сотрудник)[0];
	Иначе
		ФизическоеЛицоСотрудника = Сотрудник;
	КонецЕсли;
	
	Если СотрудникНеРассчитан(ФизическоеЛицоСотрудника) Тогда
		
		УдалитьПечатныеФормыСотрудника(ФизическоеЛицоСотрудника);
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПодготовитьКоллекциюПечатныхФорм(Идентификатор);
	Возврат ПечатныеФормыСотрудников[Идентификатор].ПечатныеФормы.Получить(ФизическоеЛицоСотрудника);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВКоллекциюПечатнуюФормуСотрудника(Сотрудник, Идентификатор, ПечатнаяФорма)
	
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
		ФизическоеЛицоСотрудника = СотрудникиКлиентСерверПовтИсп.ФизическиеЛицаСотрудников(Сотрудник)[0];
	Иначе
		ФизическоеЛицоСотрудника = Сотрудник;
	КонецЕсли;
	
	Если Не СотрудникНеРассчитан(ФизическоеЛицоСотрудника) Тогда
		
		ПодготовитьКоллекциюПечатныхФорм(Идентификатор);
		ИмеющаясяПечатнаяФорма = ПечатныеФормыСотрудников[Идентификатор].ПечатныеФормы.Получить(ФизическоеЛицоСотрудника);
		
		ПечатныеФормыСотрудников[Идентификатор].ПечатныеФормы.Вставить(ФизическоеЛицоСотрудника, ПечатнаяФорма);
		Если ИмеющаясяПечатнаяФорма = Неопределено Тогда
			
			ПечатныеФормыСотрудников[Идентификатор].Порядок.Добавить(ФизическоеЛицоСотрудника);
			Если ПечатныеФормыСотрудников[Идентификатор].Порядок.Количество() > 100 Тогда
				ПечатныеФормыСотрудников[Идентификатор].Порядок.Удалить(0);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СотрудникНеРассчитан(ФизическоеЛицоСотрудника)
	
	НеРассчитан = Ложь;
	
	Для каждого ТаблицаССотрудниками Из СотрудникиКРасчету Цикл
		
		Если ТаблицаССотрудниками.Значение.СписокСотрудников.Получить(ФизическоеЛицоСотрудника) <> Неопределено Тогда
			
			НеРассчитан = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НеРассчитан;
	
КонецФункции

&НаКлиенте
Процедура УдалитьПечатныеФормыСотрудника(Сотрудник)
	
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
		ФизическоеЛицоСотрудника = СотрудникиКлиентСерверПовтИсп.ФизическиеЛицаСотрудников(Сотрудник)[0];
	Иначе
		ФизическоеЛицоСотрудника = Сотрудник;
	КонецЕсли;
	
	Если ПечатныеФормыСотрудников <> Неопределено Тогда
		
		Для каждого ОписаниеПечатныхФорм Из ПечатныеФормыСотрудников Цикл
			
			Идентификатор = ОписаниеПечатныхФорм.Ключ;
			Если ПечатныеФормыСотрудников[Идентификатор].ПечатныеФормы.Получить(ФизическоеЛицоСотрудника) <> Неопределено Тогда
				
				ПечатныеФормыСотрудников[Идентификатор].ПечатныеФормы.Удалить(ФизическоеЛицоСотрудника);
				
				ИндексПоПорядку = ПечатныеФормыСотрудников[Идентификатор].Порядок.Найти(ФизическоеЛицоСотрудника);
				ПечатныеФормыСотрудников[Идентификатор].Порядок.Удалить(ИндексПоПорядку);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьКоллекциюПечатныхФорм(Идентификатор)
	
	Если ПечатныеФормыСотрудников = Неопределено Тогда
		ПечатныеФормыСотрудников = Новый Структура;
	КонецЕсли;
	
	Если Не ПечатныеФормыСотрудников.Свойство(Идентификатор) Тогда
		ПечатныеФормыСотрудников.Вставить(Идентификатор, Новый Структура("Порядок,ПечатныеФормы", Новый Массив, Новый Соответствие));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область РаспределениеПоТерриториямУсловиямТруда

&НаКлиенте
Процедура ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыДляВыбора = РасчетЗарплатыРасширенныйКлиент.ПараметрыДляВыбораПолеРаспределениеПоТерриториямУсловиямТруда();
	ПараметрыДляВыбора.Форма = ЭтаФорма;
	ПараметрыДляВыбора.ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	ПараметрыДляВыбора.ОписаниеТаблицы = ОписаниеТаблицы;
	
	РасчетЗарплатыРасширенныйКлиент.ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПараметрыДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ЭтаФорма, ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда()
	
	Описания = Новый Массив;
	Если ИспользоватьНачисление Тогда
		Описания.Добавить(ОписаниеТаблицыНачислений(ЭтаФорма));
		Описания.Добавить(ОписаниеТаблицыПерерасчетов(ЭтаФорма));
	КонецЕсли;
	
	Если ИспользоватьПособия Тогда
		Описания.Добавить(ОписаниеТаблицыПособия(ЭтаФорма));
		Описания.Добавить(ОписаниеТаблицыПособияПерерасчет(ЭтаФорма));
	КонецЕсли;
	
	Если ИспользоватьДоговоры Тогда
		Описания.Добавить(ОписаниеТаблицыНачисленийПоДоговорам(ЭтаФорма));
	КонецЕсли;
	
	Если ИспользоватьЛьготы И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьМассивОписанийТаблицФормыНачисленияЗарплаты(Описания, ОписанияТаблицЛьгот());
	КонецЕсли;
	
	Возврат Описания;
	
КонецФункции

#КонецОбласти


#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении();
	Возврат Массив;
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(ИспользоватьВоеннуюСлужбу);
	Возврат Массив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении() 
	
	Массив = Новый Массив;
	Массив.Добавить("Объект.Начисления");
	Массив.Добавить("Объект.НачисленияПерерасчет");
	Массив.Добавить("Объект.НачисленияПоДоговорам");
	Массив.Добавить("Объект.Пособия");
	Массив.Добавить("Объект.ПособияПерерасчет");
	Массив.Добавить("Объект.НДФЛ");
	Массив.Добавить("Объект.Взносы");
	Массив.Добавить("Объект.ПогашениеЗаймов");
	Массив.Добавить("Объект.Удержания");
	Массив.Добавить("Объект.ПримененныеВычетыНаДетейИИмущественные");
	Массив.Добавить("Объект.Льготы");
	
	Возврат Массив;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(ИспользоватьНачислениеЗарплатыВоеннослужащим) 
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",					Нстр("ru = 'организации'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "ПодразделениеОрганизации",		Нстр("ru = 'подразделения'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "МесяцНачисленияСтрокой", 		Нстр("ru = 'месяца начисления'")));
	
	Если ИспользоватьНачислениеЗарплатыВоеннослужащим Тогда
		Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "НачислениеЗарплатыВоеннослужащим", 		Нстр("ru = 'варианта начисления'")));
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

#Область ОбработчикиСобытийЭлементовТаблицыФормыУправленческиеНачисления

&НаКлиенте
Процедура УправленческиеНачисленияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "УправленческиеНачисления", Истина);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.УправленческиеНачисления.ТекущиеДанные.Сотрудник;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "УправленческиеНачисления", Элементы.УправленческиеНачисления.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриОкончанииРедактированияСтрокиНачисленияЗарплаты(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьКомандЗаполненияДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПослеУдаления(Элемент) 
	
	ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникУдаляемойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияСотрудникПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриИзмененииСотрудникаСтрокиНачисленияЗарплаты(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияНачислениеПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриИзмененииНачисленияСтрокиНачисленияЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияДатаНачалаПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриИзмененииДатыНачалаСтрокиНачисленияЗарплаты(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияДатаОкончанияПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриИзмененииДатыОкончанияСтрокиНачисленияЗарплаты(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.УправленческиеНачисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.УправленческиеНачисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.УправленческиеНачисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПодробно(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриНажатииКнопкиПоказатьПодробностиРасчета(ЭтаФорма, Элементы.УправленческиеНачисленияПодробно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УправленческиеНачисленияОтменитьИсправление(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриОтменеИсправленияНачисленияЗарплаты(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УправленческиеНачисленияОтменитьВсеИсправления(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриОтменеВсехИсправленийНачисленияЗарплаты(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандЗаполненияДокумента(ЕстьИсправленныеСтроки = Неопределено)
	
	Если ЕстьИсправленныеСтроки = Неопределено Тогда 
		ЕстьИсправленныеСтроки = ЕстьИсправленныеСтрокиНаСервере();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ЗаполнитьССохранениемИсправлений", "Доступность", ЕстьИсправленныеСтроки);
		
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Начисления");
	ИменаТаблиц.Добавить("НачисленияПерерасчет");
	ИменаТаблиц.Добавить("НачисленияПоДоговорам");
	ИменаТаблиц.Добавить("Пособия");
	ИменаТаблиц.Добавить("ПособияПерерасчет");
	ИменаТаблиц.Добавить("Льготы");
	ИменаТаблиц.Добавить("Взносы");
	ИменаТаблиц.Добавить("НДФЛ");
	ИменаТаблиц.Добавить("ПогашениеЗаймов");
	ИменаТаблиц.Добавить("Удержания");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриЗаполненииСпискаТаблицНачисленияЗарплаты(ИменаТаблиц);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПустойДокумент = Истина;
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
		Если Объект[ИмяТаблицы].Количество() > 0 Тогда 
			ПустойДокумент = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Дозаполнить", "Доступность", Не ПустойДокумент);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ДанныеДокументаФизическихЛиц(ФизическиеЛица) Экспорт
	
	ТабличныеЧасти = ЗарплатаКадрыОтчеты.ТабличныеЧастиДляФормированияНабораДанныхДокументов();
	
	ТабличныеЧасти.ТаблицыНачислений.Добавить(ОписаниеТаблицыНачислений(ЭтотОбъект));
	ТабличныеЧасти.ТаблицыНачислений.Добавить(ОписаниеТаблицыПерерасчетов(ЭтотОбъект));
	ТабличныеЧасти.ТаблицыНачислений.Добавить(ОписаниеТаблицыНачисленийПоДоговорам(ЭтотОбъект));
	ТабличныеЧасти.ТаблицыНачислений.Добавить(ОписаниеТаблицыПособия(ЭтотОбъект));
	ТабличныеЧасти.ТаблицыНачислений.Добавить(ОписаниеТаблицыПособияПерерасчет(ЭтотОбъект));
	ТабличныеЧасти.ТаблицыНачислений.Добавить(ОписаниеТаблицыЛьгот(ЭтотОбъект));
	ТабличныеЧасти.ТаблицыНачислений.Добавить(ОписаниеТаблицыЛьготыПерерасчет(ЭтотОбъект));
	
	ТабличныеЧасти.ТаблицыУдержаний.Добавить(ОписаниеТаблицыНДФЛ());
	ТабличныеЧасти.ТаблицыУдержаний.Добавить(ОписаниеТаблицыУдержаний());
	ТабличныеЧасти.ТаблицыУдержаний.Добавить(ОписаниеТаблицыУдержанияПерерасчет());
	ТабличныеЧасти.ТаблицыУдержаний.Добавить(ОписаниеТаблицыПогашениеЗаймов());
	
	Возврат ЗарплатаКадрыОтчеты.ДанныеДокументаФизическихЛиц(ЭтотОбъект, ФизическиеЛица, ТабличныеЧасти);
	
КонецФункции

#КонецОбласти

#Область Инициализация

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;
СотрудникиКРасчету = Новый Соответствие;

#КонецОбласти
