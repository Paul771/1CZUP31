#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.УвольнениеСписком - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.УвольнениеСписком - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа.
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Документы.Увольнение.ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов, Движения, Объект, ДополнительныеПараметры);
	
КонецПроцедуры

// Сторнирует документ по учетам. Используется подсистемой исправления документов.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений исправляющего документа в которую будут добавлены сторно стоки.
//  Регистратор				 - ДокументСсылка				 - Документ регистратор исправления (документ исправление).
//  ИсправленныйДокумент	 - ДокументСсылка				 - Исправленный документ движения которого будут сторнированы.
//  СтруктураВидовУчета		 - Структура					 - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//  					Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//  ДополнительныеПараметры	 - Структура					 - Структура со свойствами:
//  					* ИсправлениеВТекущемПериоде - Булево - Истина когда исправление выполняется в периоде регистрации исправленного документа.
//						* ОтменаДокумента - Булево - Истина когда исправление вызвано документом СторнированиеНачислений.
//  					* ПериодРегистрации	- Дата - Период регистрации документа регистратора исправления.
// 
// Возвращаемое значение:
//  Булево - "Истина" если сторнирование выполнено этой функцией, "Ложь" если специальной процедуры не предусмотрено.
//
Функция СторнироватьПоУчетам(Движения, Регистратор, ИсправленныйДокумент, СтруктураВидовУчета, ДополнительныеПараметры) Экспорт
	
	Возврат Документы.Увольнение.СторнироватьПоУчетам(Движения, Регистратор, ИсправленныйДокумент, СтруктураВидовУчета, ДополнительныеПараметры);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.УвольнениеСписком;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
		КомандыСозданияДокументов, Метаданные.Документы.УвольнениеСписком);
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приказ об увольнении
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
	КомандаПечати.Идентификатор = "ПФ_MXL_Т8а";
	КомандаПечати.Представление = НСтр("ru = 'Приказ об увольнении (Т-8а)'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная,ЧтениеНачисленнойЗарплатыРасширенная", , Ложь) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		// Записка-расчет при увольнении.
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
		КомандаПечати.Идентификатор = "ПФ_MXL_Т61";
		КомандаПечати.Представление = НСтр("ru = 'Записка-расчет при увольнении (Т-61)'");
		КомандаПечати.Порядок = 20;
		КомандаПечати.ФункциональныеОпции = "РаботаВХозрасчетнойОрганизации";
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;
	
	// Расчет среднего заработка
	УчетСреднегоЗаработка.ДобавитьКомандуПечатиРасчетаСреднегоЗаработка(КомандыПечати, "Документ.УвольнениеСписком");
	УчетСреднегоЗаработка.ДобавитьКомандуПечатиРасчетаСреднегоЗаработкаВыходногоПособия(КомандыПечати, "Документ.УвольнениеСписком");
	УчетСреднегоЗаработка.ДобавитьКомандуПечатиРасчетаСреднегоЗаработка0504425(КомандыПечати, "Документ.УвольнениеСписком");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДобавитьКомандыПечатиСохраняемогоДенежногоСодержания(КомандыПечати);
	КонецЕсли;
	
	// Подробный расчет начислений.
	РасчетЗарплатыРасширенный.ДобавитьКомандуПечатиПодробногоРасчетаНачислений(КомандыПечати);
	
	КадровыйУчетФормы.ДобавитьКомандуПечатиСправкиОСреднемЗаработкеДляПособияПоБезработице(КомандыПечати);
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст
//                           ошибки).
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработка.ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, "РасчетСреднегоЗаработка");
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка", НСтр("ru = 'Расчет среднего заработка'"), ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаВыходногоПособия") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов, "РасчетСреднегоЗаработкаВыходногоПособия");
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработка.ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, "РасчетСреднегоЗаработкаВыходногоПособия");
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаВыходногоПособия", НСтр("ru = 'Расчет среднего заработка (для выходного пособия)'"), ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаФорма0504425") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка0504425(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработка.ТабличныйДокументРасчетаСреднегоЗаработка0504425(ДанныеДокументов,
		ОбъектыПечати,
		"ПФ_MXL_ЗапискаРасчетФорма0504425");
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"РасчетСреднегоЗаработкаФорма0504425",
			НСтр("ru = 'Записка-расчет (0504425)'"),
			ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаФорма0504425с2015") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка0504425(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработка.ТабличныйДокументРасчетаСреднегоЗаработка0504425(ДанныеДокументов,
		ОбъектыПечати,
		"ПФ_MXL_ЗапискаРасчетФорма0504425с2015");
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"РасчетСреднегоЗаработкаФорма0504425с2015",
			НСтр("ru = 'Записка-расчет (0504425) с 2015 года'"),
			ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, ЧтениеНачисленнойЗарплатыРасширенная", , Ложь);
	
КонецФункции	

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Объект.Сотрудники.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник"), "ФизическоеЛицо");
	Если ФизическиеЛицаСотрудников.Количество() > 0 Тогда
		ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ФизическиеЛицаСотрудников, "Значение");
	Иначе
		ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ФизическиеЛица.ПустаяСсылка());
	КонецЕсли;
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ФизическиеЛица;
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок) Экспорт
	
	Возврат Документы.Увольнение.ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок, Истина);													
	
КонецФункции	

Процедура УстановитьИдентификаторыСтрокНДФЛ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УвольнениеСпискомНДФЛ.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УвольнениеСпискомНДФЛ.НомерСтроки) КАК НомерСтроки,
		|	УвольнениеСпискомНДФЛ.ИдентификаторСтрокиНДФЛ КАК ИдентификаторСтрокиНДФЛ
		|ПОМЕСТИТЬ ВТДокументыСНеУникальнымиИдентификаторамиСтрокНДФЛ
		|ИЗ
		|	Документ.УвольнениеСписком.НДФЛ КАК УвольнениеСпискомНДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеСпискомНДФЛ.Ссылка,
		|	УвольнениеСпискомНДФЛ.ИдентификаторСтрокиНДФЛ
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УвольнениеСпискомНДФЛ.НомерСтроки) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыСНеУникальнымиИдентификаторамиСтрокНДФЛ.Ссылка
		|ИЗ
		|	ВТДокументыСНеУникальнымиИдентификаторамиСтрокНДФЛ КАК ДокументыСНеУникальнымиИдентификаторамиСтрокНДФЛ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СоответствиеИдентификаторовСотрудникам = Новый Соответствие;
			
			ИдентификаторСтрокиНДФЛ = 0;
			Для каждого СтрокаНДФЛ Из ДокументОбъект.НДФЛ Цикл
				
				ИдентификаторСтрокиНДФЛ = ИдентификаторСтрокиНДФЛ + 1;
				
				СоответствиеИдентификаторов = СоответствиеИдентификаторовСотрудникам.Получить(СтрокаНДФЛ.Сотрудник);
				Если СоответствиеИдентификаторов = Неопределено Тогда
					СоответствиеИдентификаторов = Новый Соответствие;
				КонецЕсли; 
				
				СоответствиеИдентификаторов.Вставить(СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ, ИдентификаторСтрокиНДФЛ);
				СоответствиеИдентификаторовСотрудникам.Вставить(СтрокаНДФЛ.Сотрудник, СоответствиеИдентификаторов);
				
				СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ = ИдентификаторСтрокиНДФЛ;
				
			КонецЦикла;
			
			ФормироватьДвижения = Ложь;
			Для каждого СтрокаВычетов Из ДокументОбъект.ПримененныеВычетыНаДетейИИмущественные Цикл
				
				СоответствиеИдентификаторов = СоответствиеИдентификаторовСотрудникам.Получить(СтрокаВычетов.Сотрудник);
				Если СоответствиеИдентификаторов <> Неопределено Тогда
					
					ИдентификаторСтрокиНДФЛ = СоответствиеИдентификаторов.Получить(СтрокаВычетов.ИдентификаторСтрокиНДФЛ);
					Если ИдентификаторСтрокиНДФЛ <> Неопределено Тогда
						СтрокаВычетов.ИдентификаторСтрокиНДФЛ = ИдентификаторСтрокиНДФЛ;
						ФормироватьДвижения = Истина;
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЦикла;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Если ФормироватьДвижения Тогда
				
				ДокументОбъект.Движения.ИмущественныеВычетыНДФЛ.Очистить();
				ДокументОбъект.Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Очистить();
				
				ОкончательныйРасчет = (ДокументОбъект.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
			    ДатаОперацииПоНалогам = УчетНДФЛРасширенный.ДатаОперацииПоДокументу(ДокументОбъект.Дата, ДокументОбъект.ПериодРегистрации);
				
				ДанныеДляПроведения = РасчетЗарплатыРасширенный.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
				РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, ДокументОбъект.Ссылка);
				
				ДанныеДокумента = ДанныеДляПроведения.НДФЛ;
				КолонкиДанных = ДанныеДокумента.Колонки;
	
				// Определяем соответствие видов вычетов полям таблицы.
				ВидыВычетов = ВидыВычетовПоПолямТаблицы();
				
				// Вычеты на детей
				МассивВычетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РассчитываемыеРесурсыВычетовНаДетей());
				Для каждого ИмяРесурса Из МассивВычетов Цикл
					Если КолонкиДанных.Найти(ИмяРесурса) <> Неопределено Тогда
						УчетНДФЛ.СформироватьСтандартныеВычетыПоТаблицеЗначений(
							ДокументОбъект.Движения, Ложь, ДокументОбъект.Организация, ДатаОперацииПоНалогам, СтандартныйВычетИзДанныхДокумента(ДанныеДокумента, ИмяРесурса, ВидыВычетов[ИмяРесурса]), , , , ОкончательныйРасчет);
					КонецЕсли;
				КонецЦикла;
				
				// Имущественные вычеты
				МассивВычетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РассчитываемыеРесурсыИмущественныхВычетов());
				Для каждого ИмяРесурса Из МассивВычетов Цикл
					Если КолонкиДанных.Найти(ИмяРесурса) <> Неопределено Тогда
						УчетНДФЛ.СформироватьПредоставленныеИмущественныеВычетыПоТаблицеЗначений(
							ДокументОбъект.Движения, Ложь, ДокументОбъект.Организация, ДатаОперацииПоНалогам, ИмущественныйВычетИзДанныхДокумента(ДанныеДокумента, ИмяРесурса, ВидыВычетов[ИмяРесурса]), , , , ОкончательныйРасчет);
					КонецЕсли;
				КонецЦикла;

				// Запись документа с обновленными движениями
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Функция РассчитываемыеРесурсыВычетовНаДетей() 

	Возврат "ПримененныйВычетНаДетей,ПримененныйВычетНаДетейДвойной,ПримененныйВычетНаДетейДвойнойВторой,ПримененныйВычетНаВторогоРебенка,ПримененныйВычетНаВторогоРебенкаДвойной,ПримененныйВычетНаВторогоРебенкаДвойнойВторой,ПримененныйВычетНаТретьегоРебенка,ПримененныйВычетНаТретьегоРебенкаДвойной,ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,ПримененныйВычетНаДетейИнвалидов,ПримененныйВычетНаДетейИнвалидовДвойной,ПримененныйВычетНаДетейИнвалидовДвойнойВторой";

КонецФункции 

Функция РассчитываемыеРесурсыИмущественныхВычетов() 

	Возврат "ПримененныйВычетИмущественныйРасходы,ПримененныйВычетИмущественныйПроцентыПоКредитам,ПримененныйВычетИмущественныйПроцентыПриПерекредитовании";

КонецФункции 

Функция ВидыВычетовПоПолямТаблицы()

	// Определяем соответствие видов вычетов полям таблицы.
	ВидыВычетов = Новый Соответствие;
	ВидыВычетов.Вставить("ПримененныйВычетИмущественныйПроцентыПоКредитам", Справочники.ВидыВычетовНДФЛ.Код312);
	ВидыВычетов.Вставить("ПримененныйВычетИмущественныйПроцентыПриПерекредитовании", Справочники.ВидыВычетовНДФЛ.Код318);
	ВидыВычетов.Вставить("ПримененныйВычетИмущественныйРасходы", Справочники.ВидыВычетовНДФЛ.Код311);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаДетей", Справочники.ВидыВычетовНДФЛ.Код108);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейДвойной", Справочники.ВидыВычетовНДФЛ.Код110);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейДвойнойВторой", Справочники.ВидыВычетовНДФЛ.Код111);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаВторогоРебенка", Справочники.ВидыВычетовНДФЛ.Код115);
	ВидыВычетов.Вставить("ПримененныйВычетНаВторогоРебенкаДвойной", Справочники.ВидыВычетовНДФЛ.Код119);
	ВидыВычетов.Вставить("ПримененныйВычетНаВторогоРебенкаДвойнойВторой", Справочники.ВидыВычетовНДФЛ.Код123);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаТретьегоРебенка", Справочники.ВидыВычетовНДФЛ.Код116);
	ВидыВычетов.Вставить("ПримененныйВычетНаТретьегоРебенкаДвойной", Справочники.ВидыВычетовНДФЛ.Код120);
	ВидыВычетов.Вставить("ПримененныйВычетНаТретьегоРебенкаДвойнойВторой", Справочники.ВидыВычетовНДФЛ.Код124);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейИнвалидов", Справочники.ВидыВычетовНДФЛ.Код109);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейИнвалидовДвойной", Справочники.ВидыВычетовНДФЛ.Код112);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейИнвалидовДвойнойВторой", Справочники.ВидыВычетовНДФЛ.Код113);
	
	Возврат ВидыВычетов	

КонецФункции

Функция ИмущественныйВычетИзДанныхДокумента(ДанныеДокумента, ИмяКолонки, КодВычета)

	ИмущественныеВычеты = ДанныеДокумента.Скопировать(,"ФизическоеЛицо, МесяцНалоговогоПериода, Подразделение, " + ИмяКолонки);
	ИмущественныеВычеты.Колонки[ИмяКолонки].Имя = "Сумма";
	ИмущественныеВычеты.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ИмущественныеВычеты.ЗаполнитьЗначения(КодВычета, "КодВычета");
	ИмущественныеВычеты.Колонки.Добавить("Год", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
	
	Для каждого СтрокаТЗ Из ИмущественныеВычеты Цикл
		СтрокаТЗ.Год = Год(СтрокаТЗ.МесяцНалоговогоПериода)
	КонецЦикла;
		
	Возврат ИмущественныеВычеты	

КонецФункции

Функция СтандартныйВычетИзДанныхДокумента(ДанныеДокумента, ИмяКолонки, КодВычета)

	СтандартныеВычеты = ДанныеДокумента.Скопировать(,"ФизическоеЛицо, МесяцНалоговогоПериода, Подразделение, " + ИмяКолонки);
	СтандартныеВычеты.Колонки[ИмяКолонки].Имя = "Сумма";
	СтандартныеВычеты.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	СтандартныеВычеты.ЗаполнитьЗначения(КодВычета, "КодВычета");
	
	Возврат СтандартныеВычеты	

КонецФункции

Процедура ЗаполнитьИдентификаторыСтрокСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.ИдентификаторСтрокиСотрудника = 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ИдентификаторыСотрудников = Новый Соответствие;
			МаксимальныйИдентификаторСтрокиСотрудника = 1;
			Для каждого СтрокаСотрудника Из ДокументОбъект.Сотрудники Цикл
				
				СтрокаСотрудника.ИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтрокиСотрудника;
				ИдентификаторыСотрудников.Вставить(СтрокаСотрудника.Сотрудник, СтрокаСотрудника.ИдентификаторСтрокиСотрудника);
				
				МаксимальныйИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтрокиСотрудника + 1;
				
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.ДанныеОбИндексации Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.ДополнительныеОтпуска Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.Взносы Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.НДФЛ Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.Начисления Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.НачисленияПерерасчет Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.УправленческиеНачисления Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.ОтработанноеВремяДляСреднегоОбщий Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.ПогашениеЗаймов Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.Показатели Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.Пособия Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.ПособияПерерасчет Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.ПримененныеВычетыНаДетейИИмущественные Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.СреднийЗаработокОбщий Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.Удержания Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.РаспределениеРезультатовНачислений Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.РаспределениеРезультатовУдержаний Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.ДенежноеСодержание Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.ДенежноеСодержаниеФактическиеНачисления Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.Льготы Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.Сотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.КадровыйРезерв Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.РаспределениеПоТерриториямУсловиямТруда Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			Для каждого СтрокаДокумента Из ДокументОбъект.КорректировкиВыплаты Цикл
				СтрокаДокумента.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников.Получить(СтрокаДокумента.УдалитьСотрудник);
			КонецЦикла;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


#Область ПечатьРасчетаСреднегоЗаработка

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивСсылок, ИмяМакета = "") Экспорт
	
	МассивЗначенийКомпенсаций = Новый Массив;
	МассивЗначенийКомпенсаций.Добавить(ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные"));
	МассивЗначенийКомпенсаций.Добавить(ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("МассивЗначенийКомпенсаций", МассивЗначенийКомпенсаций);
	Запрос.УстановитьПараметр("ОсновнойОтпуск", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	
	СоздатьВТКадровыеДанныеСотрудниковДокумента(Запрос);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Сотрудник КАК Сотрудник,
	|	&ОсновнойОтпуск КАК ВидОтпуска,
	|	Документ.ПризнакКомпенсацииУдержанияОтпуска КАК ПризнакКомпенсацииУдержанияОтпуска
	|ПОМЕСТИТЬ ВТВидыОтпусков
	|ИЗ
	|	Документ.УвольнениеСписком.Сотрудники КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|	И Документ.ПризнакКомпенсацииУдержанияОтпуска В(&МассивЗначенийКомпенсаций)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УвольнениеСпискомДополнительныеОтпуска.Ссылка,
	|	УвольнениеСпискомСотрудники.Сотрудник,
	|	УвольнениеСпискомДополнительныеОтпуска.ВидОтпуска,
	|	УвольнениеСпискомДополнительныеОтпуска.ПризнакКомпенсацииУдержания
	|ИЗ
	|	Документ.УвольнениеСписком.ДополнительныеОтпуска КАК УвольнениеСпискомДополнительныеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
	|		ПО УвольнениеСпискомДополнительныеОтпуска.Ссылка = УвольнениеСпискомСотрудники.Ссылка
	|			И УвольнениеСпискомДополнительныеОтпуска.ИдентификаторСтрокиСотрудника = УвольнениеСпискомСотрудники.ИдентификаторСтрокиСотрудника
	|ГДЕ
	|	УвольнениеСпискомДополнительныеОтпуска.Ссылка В(&МассивСсылок)
	|	И УвольнениеСпискомДополнительныеОтпуска.ПризнакКомпенсацииУдержания В(&МассивЗначенийКомпенсаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.Сотрудник КАК Сотрудник,
	|	Документ.ДатаУвольнения КАК ДатаНачалаСобытия,
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Ссылка.Организация КАК Организация,
	|	Документ.Ссылка.Дата КАК ДатаДокумента,
	|	Документ.Ссылка.Номер КАК НомерДокумента,
	|	Документ.ДатаУвольнения КАК ДатаНачалаОтсутствия,
	|	Документ.ДатаУвольнения КАК ДатаОкончания,
	|	Документ.ПериодРасчетаСреднегоЗаработкаНачало КАК НачалоРасчетногоПериода,
	|	Документ.ПериодРасчетаСреднегоЗаработкаОкончание КАК ОкончаниеРасчетногоПериода,
	|	Документ.ВидРасчетаКомпенсацииУдержанияОтпуска КАК Начисление,
	|	Документ.СуммированныйУчет КАК СуммированныйУчет,
	|	Документ.ПризнакКомпенсацииУдержанияОтпуска КАК ПризнакКомпенсацииУдержанияОтпуска,
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.Должность КАК Должность,
	|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	Организации.НаименованиеПолное КАК ПолноеНаименованиеОрганизации,
	|	Документ.Ссылка.ПериодРегистрации КАК НачалоПериодаРасчетаЗарплаты,
	|	ИСТИНА КАК РассчитатьЗарплату,
	|	ИСТИНА КАК УчитыватьДвиженияДругихРегистраторов
	|ИЗ
	|	Документ.УвольнениеСписком.Сотрудники КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО Документ.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И Документ.ДатаУвольнения = КадровыеДанныеСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Документ.Ссылка.Организация = Организации.Ссылка
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыОтпусков.Ссылка КАК Ссылка,
	|	ВидыОтпусков.Сотрудник КАК Сотрудник,
	|	ВидыОтпусков.ВидОтпуска КАК ВидОтпуска,
	|	ВидыОтпусков.ПризнакКомпенсацииУдержанияОтпуска КАК ПризнакКомпенсацииУдержанияОтпуска
	|ИЗ
	|	ВТВидыОтпусков КАК ВидыОтпусков
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник";
	
	Результаты = Запрос.ВыполнитьПакет();
	Результат = Результаты[Результаты.Количество() - 2];
	ТаблицаОтпусковСотрудников = Результаты[Результаты.Количество() - 1].Выгрузить();
	
	ДанныеДокументов = Новый Массив;
	
	Если Результат.Пустой() Тогда
		Возврат ДанныеДокументов;
	КонецЕсли;
		
	ТаблицыДанныхОСреднем = УчетСреднегоЗаработка.ТаблицыДанныхОСреднемЗаработке("УвольнениеСписком", МассивСсылок);
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			Если ИмяМакета = "РасчетСреднегоЗаработкаВыходногоПособия" Тогда
				СпособРасчета = Неопределено;
				ИспользоватьСреднеЧасовойЗаработок = Выборка.СуммированныйУчет;
			Иначе
				ИспользоватьСреднеЧасовойЗаработок = Ложь;
				МассивОтпусков = ВидыОтпусковОбъекта(ТаблицаОтпусковСотрудников, Выборка.Ссылка, Выборка.Сотрудник);
				Если ОстаткиОтпусков.СодержатсяТолькоОтпускаПоРабочимДням(МассивОтпусков, Выборка.Сотрудник, Выборка.ДатаНачалаСобытия) Тогда
					СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоШестидневке;
				Иначе
					СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням;
				КонецЕсли;
			КонецЕсли;
				
			ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработка.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка(); 
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка);
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.КадровыеДанныеСотрудника, Выборка);
			
			ДанныеОНачислениях 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОНачислениях"], 		"Ссылка", 		Выборка.Ссылка);
			ДанныеОНачислениях 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ДанныеОНачислениях, 								"Сотрудник", 	Выборка.Сотрудник);
			
			ДанныеОВремени 		= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОВремени"], 			"Ссылка", 		Выборка.Ссылка);
			ДанныеОВремени 		= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ДанныеОВремени, 									"Сотрудник", 	Выборка.Сотрудник);
			
			ДанныеОбИндексации 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОбИндексации"], 		"Ссылка", 		Выборка.Ссылка);
			ДанныеОбИндексации 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ДанныеОбИндексации, 								"Сотрудник", 	Выборка.Сотрудник);
			
			ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
			ДополнительныеПараметры.Индексации = ДанныеОбИндексации;
			ДополнительныеПараметры.ДатаНачалаСобытия = Выборка.ДатаНачалаСобытия;
			ДополнительныеПараметры.НачалоПериода = Выборка.НачалоРасчетногоПериода;
			ДополнительныеПараметры.ОкончаниеПериода = Выборка.ОкончаниеРасчетногоПериода;
			ДополнительныеПараметры.ПоЧасам = ИспользоватьСреднеЧасовойЗаработок;
			ДополнительныеПараметры.СпособРасчетаОтпуска = СпособРасчета;

			ДанныеДокумента.ДанныеРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ДанныеДляРасчетаСреднегоЗаработка(ДанныеОНачислениях, ДанныеОВремени, ДополнительныеПараметры);
			
			ДанныеДокумента.ПараметрыРасчета.СпособРасчета = СпособРасчета;
			ДанныеДокумента.ПараметрыРасчета.ИспользоватьСреднеЧасовойЗаработок = ИспользоватьСреднеЧасовойЗаработок;
			ДанныеДокумента.ПараметрыРасчета.НачалоРасчетногоПериода = Выборка.НачалоРасчетногоПериода;
			ДанныеДокумента.ПараметрыРасчета.ОкончаниеРасчетногоПериода = Выборка.ОкончаниеРасчетногоПериода;
			
			ДанныеДокументов.Добавить(ДанныеДокумента);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции

Процедура СоздатьВТКадровыеДанныеСотрудниковДокумента(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Сотрудник,
	|	Документ.ДатаУвольнения КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.УвольнениеСписком.Сотрудники КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)";
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Подразделение,Должность,ВидЗанятости,ДатаПриема,ПриказОПриемеДатаЗавершенияТрудовогоДоговора,КраткосрочныйТрудовойДоговор");
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудники";
	Запрос.Выполнить();

КонецПроцедуры

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка0504425(МассивСсылок) Экспорт
	
	ЗапросПоОрганизациям = Новый Запрос;
	ЗапросПоОрганизациям.УстановитьПараметр("МассивСсылок", МассивСсылок);
	ЗапросПоОрганизациям.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Организация КАК Организация,
	|	Документ.ДатаСобытия КАК ДатаСобытия1
	|ИЗ
	|	Документ.УвольнениеСписком КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)";
	
	ТаблицаРезультатовПоОрганизациям = ЗапросПоОрганизациям.Выполнить().Выгрузить();
	
	ОрганизацииИСведенияОНих = ЗарплатаКадрыРасширенный.ПолучитьИННиКППОрганизаций(ТаблицаРезультатовПоОрганизациям);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Ссылка.Дата КАК Дата,
	|	Документ.Ссылка.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	Документ.Ссылка.Бухгалтер КАК Бухгалтер,
	|	Документ.Ссылка.Исполнитель КАК Исполнитель
	|ПОМЕСТИТЬ ВТСотрудникиИПериод
	|ИЗ
	|	Документ.УвольнениеСписком.Сотрудники КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, "ГлавныйБухгалтер,Бухгалтер,Исполнитель", "ВТСотрудникиИПериод");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ДополнительныеОтпуска.ДнейКомпенсацииУдержания) КАК КоличествоДней,
	|	ДополнительныеОтпуска.Ссылка,
	|	УвольнениеСотрудники.Сотрудник
	|ПОМЕСТИТЬ ВТДополнительныеОтпуска
	|ИЗ
	|	Документ.УвольнениеСписком.ДополнительныеОтпуска КАК ДополнительныеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСотрудники
	|		ПО ДополнительныеОтпуска.Ссылка = УвольнениеСотрудники.Ссылка
	|			И ДополнительныеОтпуска.ИдентификаторСтрокиСотрудника = УвольнениеСотрудники.ИдентификаторСтрокиСотрудника
	|ГДЕ
	|	ДополнительныеОтпуска.Ссылка В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДополнительныеОтпуска.Ссылка,
	|	УвольнениеСотрудники.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Сотрудник КАК Сотрудник,
	|	Документ.ВидРасчетаКомпенсацииУдержанияОтпуска КАК Начисление,
	|	Документ.ДатаУвольнения КАК ДатаНачалаОтсутствия,
	|	Документ.ДнейКомпенсацииУдержанияОтпуска КАК ДнейОсновногоОтпуска,
	|	ЕСТЬNULL(ВТДополнительныеОтпуска.КоличествоДней, 0) КАК ДнейДополнительногоОтпуска,
	|	Документ.ДнейКомпенсацииУдержанияОтпуска + ЕСТЬNULL(ВТДополнительныеОтпуска.КоличествоДней, 0) КАК ДнейОтпускаВсего,
	|	Документ.РабочийГодС КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Документ.РабочийГодПо КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ФИОГлавногоБухгалтера.РасшифровкаПодписи КАК ГлавныйБухгалтерРасшифровкаПодписи,
	|	ФИОБухгалтера.РасшифровкаПодписи КАК БухгалтерРасшифровкаПодписи,
	|	ФИОИсполнителя.РасшифровкаПодписи КАК ИсполнительРасшифровкаПодписи,
	|	Документ.Ссылка.ДолжностьИсполнителя КАК ДолжностьИсполнителя
	|ИЗ
	|	Документ.УвольнениеСписком.Сотрудники КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО Документ.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И Документ.Ссылка.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|			И Документ.Ссылка.Дата = ФИОГлавногоБухгалтера.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
	|		ПО Документ.Ссылка = ФИОБухгалтера.Ссылка
	|			И Документ.Ссылка.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
	|			И Документ.Ссылка.Дата = ФИОБухгалтера.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОИсполнителя
	|		ПО Документ.Ссылка = ФИОИсполнителя.Ссылка
	|			И Документ.Ссылка.Исполнитель = ФИОИсполнителя.ФизическоеЛицо
	|			И Документ.Ссылка.Дата = ФИОИсполнителя.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительныеОтпуска КАК ВТДополнительныеОтпуска
	|		ПО Документ.Ссылка = ВТДополнительныеОтпуска.Ссылка
	|			И Документ.Сотрудник = ВТДополнительныеОтпуска.Сотрудник
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДанныеДокументов = Новый Массив;
	
	БазовыеДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивСсылок);
	
	Отбор = Новый Структура("Ссылка,Сотрудник");
	
	Для каждого БазовыеДанныеДокумента Из БазовыеДанныеДокументов Цикл
		
		Выборка.Сбросить();		
		
		ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработка.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка0504425(); 
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, БазовыеДанныеДокумента, , "РеквизитыДокумента");   
		
		// Т.к. структура реквизитов документа в базовых и расширенных данных различается их надо обработать отдельно.
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, БазовыеДанныеДокумента.РеквизитыДокумента);		
		Отбор.Ссылка = БазовыеДанныеДокумента.РеквизитыДокумента.Ссылка;
		Отбор.Сотрудник = БазовыеДанныеДокумента.РеквизитыДокумента.Сотрудник;
		Если Выборка.НайтиСледующий(Отбор) Тогда
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка); 
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, 
			ОрганизацииИСведенияОНих.Получить(БазовыеДанныеДокумента.РеквизитыДокумента.Организация),
			"ИНН, КПП"); 
		
		ДанныеДокументов.Добавить(ДанныеДокумента);
		
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции

#КонецОбласти

Функция ВидыОтпусковОбъекта(ТаблицаОтпусковСотрудников, Ссылка, Сотрудник)

	МассивОтпусков = Новый Массив;
	
	СтрокиТаблицы = ТаблицаОтпусковСотрудников.НайтиСтроки(Новый Структура("Ссылка, Сотрудник", Ссылка, Сотрудник)); 	
	Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		МассивОтпусков.Добавить(СтрокаТаблицы.ВидОтпуска);
	КонецЦикла;
	
	Возврат МассивОтпусков;

КонецФункции

#Область ПечатьПодробногоРасчетаНачислений

// Заполняет структуру - описание документа для формирования печатной формы подробного расчета начислений.
//
// Параметры:
//   ОписаниеДокумента - структура, определяется в Обработки.ПечатьРасчетаНачислений.ОписаниеДокументаРасчетаНачислений.
//
Процедура ЗаполнитьОписаниеДокументаРасчетаНачислений(ОписаниеДокумента) Экспорт
	
	КатегорииСпециализированногоНачисления = Новый Массив;
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	
	ОписаниеДокумента.Вставить("ИмяДокумента", 								МетаданныеДокумента.Имя);
	ОписаниеДокумента.Вставить("СинонимДокумента", 							МетаданныеДокумента.Синоним);
	ОписаниеДокумента.Вставить("ЕстьРасчетСреднегоЗаработка", 				Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетСпециализированныхНачислений",	Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетЗарплаты", 						Истина);
	ОписаниеДокумента.Вставить("КатегорииСпециализированногоНачисления", 	КатегорииСпециализированногоНачисления);
	ОписаниеДокумента.Вставить("НазваниеСпециализированногоНачисления", 	НСтр("ru='Расчет при увольнении'"));
	
КонецПроцедуры 

// Заполняет таблицу значений - параметры формирования печатной формы подробного расчета начислений.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаНачислений.ДанныеДокументовДляПодробногоРасчетаНачислений.
//
Процедура ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ДанныеДокументов) Экспорт
	РасчетЗарплатыРасширенный.ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ПустаяСсылка().Метаданные().Имя, ДанныеДокументов, "Сотрудники");	
КонецПроцедуры

// Возвращает структуру с двумя таблицами "Начисления" и "Показатели".
// Данные в таблицах представлены в разрезе ссылки на документ.
// 	Параметры:
//		МассивСсылок - массив ссылок на документы у которых есть табличные части "Начисления" и "Показатели".
//		ИмяДокумента - Имя объекта метаданных (документа) для формирования запроса.
//
Функция НачисленияПоказателиДокументов(МассивСсылок) Экспорт 
	Возврат РасчетЗарплатыРасширенный.НачисленияПоказателиДокументов(МассивСсылок, ПустаяСсылка().Метаданные().Имя);	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
