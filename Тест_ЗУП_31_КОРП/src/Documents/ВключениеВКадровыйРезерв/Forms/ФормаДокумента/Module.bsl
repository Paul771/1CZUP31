
#Область ОбработкаСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Начальное заполнение
	Если Параметры.Ключ.Пустая() Тогда
		ЗначенияДляЗаполнения = Новый Структура("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		Объект.ДатаРассмотрения = Объект.Дата;
		// Если в параметрах передан вид резерва - заполняем его.
		Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура")
			И Параметры.Свойство("ВидРезерва")
			И ЗначениеЗаполнено(Параметры.ВидРезерва) Тогда
			
			Объект.ВидРезерва = Параметры.ВидРезерва;
		КонецЕсли;
		// Если в параметрах передано Физическое лицо - вызовем обработчик заполнения по нему.
		Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура")
			И Параметры.Свойство("ФизическоеЛицо")
			И ЗначениеЗаполнено(Параметры.ФизическоеЛицо) Тогда
			
			ЗаполнитьПоФизическомуЛицу(Параметры);
		ИначеЕсли ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура")
			И Параметры.Свойство("ПозицияРезерва")
			И ЗначениеЗаполнено(Параметры.ПозицияРезерва) Тогда
			
			ДополнитьТЧСотрудникиСтрокойПоПараметрам(Параметры);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьВторичныеДанныеФормы();
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтаФорма, "СотрудникиФизическоеЛицо");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьВторичныеДанныеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписаноВключениеВКадровыйРезерв");
	Оповестить("Запись_ВключениеВКадровыйРезерв", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ФорматированнаяНадписьСотрудникиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Образование" Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ФизическоеЛицоСсылка", ТекущиеДанные.ФизическоеЛицо);
		ПараметрыОткрытия.Вставить("НеРегистрироватьОткрытиеФормы", Истина);
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ОбразованиеКвалификация", ПараметрыОткрытия, ЭтаФорма, Истина, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Действие = ПредопределенноеЗначение("Перечисление.ДействияСКадровымиРезервистами.Утвердить");
		КадровыйРезервКлиентСервер.ЗаполнитьОписаниеДействия(Элемент.ТекущиеДанные, Ложь);
	КонецЕсли;
	УстановитьДоступностьКоманд(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ФорматированнаяНадписьСотрудники = "";
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьКоманд(ЭтаФорма, ТекущиеДанные);
	УстановитьФорматированнуюНадписьСотрудники(ТекущиеДанные.ФизическоеЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранныеФизическиеЛица = ВыбранныеФизлицаСотрудников(ВыбранноеЗначение);
	
	Для каждого ВыбранноеФизическоеЛицо Из ВыбранныеФизическиеЛица Цикл
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо",ВыбранноеФизическоеЛицо)).Количество()=0 Тогда
			НовыйСотрудник = Объект.Сотрудники.Добавить();
			НовыйСотрудник.ФизическоеЛицо = ВыбранноеФизическоеЛицо;
			НовыйСотрудник.Действие = ПредопределенноеЗначение("Перечисление.ДействияСКадровымиРезервистами.Утвердить");
			НовыйСотрудник.ДатаОкончания = КонецМесяца(ДобавитьМесяц(Объект.ДатаРассмотрения, 60))-1;
			
			УстановитьДоступностьКоманд(ЭтаФорма, НовыйСотрудник);
			ЗаполнитьТаблицуВторичныхДанныхФизическихЛиц(НовыйСотрудник.ФизическоеЛицо);
			КадровыйРезервКлиентСервер.ЗаполнитьОписаниеДействия(НовыйСотрудник, Ложь);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиФизическоеЛицоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьТаблицуВторичныхДанныхФизическихЛиц(ТекущиеДанные.ФизическоеЛицо);
	УстановитьФорматированнуюНадписьСотрудники(ТекущиеДанные.ФизическоеЛицо);
	
КонецПроцедуры
 
#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьКандидатами(Команда)
	ЗаполнитьКандидатамиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Включить(Команда)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Действие = ПредопределенноеЗначение("Перечисление.ДействияСКадровымиРезервистами.Утвердить");
	ТекущиеДанные.ДатаОкончания = КонецМесяца(ДобавитьМесяц(Объект.ДатаРассмотрения, 60))-1;
	
	УстановитьДоступностьКоманд(ЭтаФорма, ТекущиеДанные);
	КадровыйРезервКлиентСервер.ЗаполнитьОписаниеДействия(ТекущиеДанные, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Действие = ПредопределенноеЗначение("Перечисление.ДействияСКадровымиРезервистами.Отклонить");
	ТекущиеДанные.ДатаОкончания = '00010101';
	
	УстановитьДоступностьКоманд(ЭтаФорма, ТекущиеДанные);
	КадровыйРезервКлиентСервер.ЗаполнитьОписаниеДействия(ТекущиеДанные, Ложь);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подбор(Команда)
	
	ОтборИзПодразделения = ОтборИзПодразделения(Объект.Подразделение);
	
	Если ОтборИзПодразделения.Свойство("Организация") И ЗначениеЗаполнено(ОтборИзПодразделения.Организация) Тогда
	    Организация = ОтборИзПодразделения.Организация;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	Если ОтборИзПодразделения.Свойство("Подразделение") И ЗначениеЗаполнено(ОтборИзПодразделения.Подразделение) Тогда
	    Подразделение = ОтборИзПодразделения.Подразделение;
	Иначе
		Подразделение = Неопределено;
	КонецЕсли;
	
	ПараметрыОткрытия = Неопределено;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
		Модуль.УточнитьПараметрыОткрытияФормыВыбораСотрудников(ПараметрыОткрытия);
	КонецЕсли; 
		
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники, Организация, Подразделение,,,АдресСпискаПодобранныхСотрудников(), ПараметрыОткрытия);

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПоФизическомуЛицу(СтруктураПараметры)

	// Сначала заполним из пула кандидатов, если таковые имеются.
	ЗаполнитьКандидатамиНаСервере(СтруктураПараметры.ФизическоеЛицо);
	
	// Затем добавим строку на основании переданных параметров.
	ДополнитьТЧСотрудникиСтрокойПоПараметрам(СтруктураПараметры);

КонецПроцедуры

&НаСервере
Процедура ДополнитьТЧСотрудникиСтрокойПоПараметрам(СтруктураПараметры)

	СтруктураПоиска = Новый Структура;
	Если СтруктураПараметры.Свойство("ФизическоеЛицо") Тогда
		СтруктураПоиска.Вставить("ФизическоеЛицо", СтруктураПараметры.ФизическоеЛицо);
	КонецЕсли;
	Если СтруктураПараметры.Свойство("ПозицияРезерва") Тогда
		СтруктураПоиска.Вставить("ПозицияРезерва", СтруктураПараметры.ПозицияРезерва);
	КонецЕсли;
	
	НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяПозиция = Объект.Сотрудники.Добавить();
		Если СтруктураПараметры.Свойство("ФизическоеЛицо") Тогда
			НоваяПозиция.ФизическоеЛицо = СтруктураПараметры.ФизическоеЛицо;
		КонецЕсли;
		Если СтруктураПараметры.Свойство("ПозицияРезерва") Тогда
			НоваяПозиция.ПозицияРезерва = СтруктураПараметры.ПозицияРезерва;
		КонецЕсли;
		НоваяПозиция.ДатаОкончания = КонецМесяца(ДобавитьМесяц(Объект.ДатаРассмотрения, 60))-1;
		НоваяПозиция.Действие = ПредопределенноеЗначение("Перечисление.ДействияСКадровымиРезервистами.Утвердить");
		КадровыйРезервКлиентСервер.ЗаполнитьОписаниеДействия(НоваяПозиция, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКандидатамиНаСервере(ПараметрФизическоеЛицо = Неопределено)

	ИспользоватьКадровыйРезервПоВидам = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйРезервПоВидам");
	Если ИспользоватьКадровыйРезервПоВидам И НЕ ЗначениеЗаполнено(Объект.ВидРезерва) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнятьПоРезервисту = НЕ ПараметрФизическоеЛицо = Неопределено;
	
	Объект.Сотрудники.Очистить();
	
	Отбор = Новый Структура("Статус, ФизическоеЛицо");
	Если ЗаполнятьПоРезервисту Тогда
		Отбор.ФизическоеЛицо = ПараметрФизическоеЛицо;
	КонецЕсли;
	Если ИспользоватьКадровыйРезервПоВидам И ЗначениеЗаполнено(Объект.ВидРезерва) Тогда
		Отбор.Вставить("ВидРезерва", Объект.ВидРезерва);
	КонецЕсли;
	
	Отбор.Статус = ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Рассматривается");
	Отбор.Вставить("ИсключаяРегистратор", Объект.Ссылка);
	
	ДатаСреза = Объект.ДатаРассмотрения;
	
	ТаблицаРезервистов = КадровыйРезерв.КадровыйРезервНаДату(ДатаСреза, Отбор);
	
	Для каждого Резервист Из ТаблицаРезервистов Цикл
		НоваяСтрока = Объект.Сотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Резервист);
		НоваяСтрока.ДатаОкончания = КонецМесяца(ДобавитьМесяц(Объект.ДатаРассмотрения, 60))-1;
		НоваяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ДействияСКадровымиРезервистами.Утвердить");
		КадровыйРезервКлиентСервер.ЗаполнитьОписаниеДействия(НоваяСтрока, Ложь);
	КонецЦикла; 
	
	Если НЕ ЗаполнятьПоРезервисту Тогда
		ЗаполнитьТаблицуВторичныхДанныхФизическихЛиц();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКоманд(Форма, ТекущиеДанные)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СотрудникиВключить",
		"Доступность",
		ТекущиеДанные.Действие = ПредопределенноеЗначение("Перечисление.ДействияСКадровымиРезервистами.Отклонить"));

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СотрудникиОтклонить",
		"Доступность",
		ТекущиеДанные.Действие = ПредопределенноеЗначение("Перечисление.ДействияСКадровымиРезервистами.Утвердить"));
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторичныеДанныеФормы()
	
	ЗаполнитьВторичныеДанныеСотрудников();
	ЗаполнитьТаблицуВторичныхДанныхФизическихЛиц();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВторичныхДанныхФизическихЛиц(ПараметрФизическоеЛицо = Неопределено)

	ВычисляемыеДанные = Новый Соответствие;
	// Готовим ВТ фильтров
	Если ПараметрФизическоеЛицо = Неопределено Тогда
		СписокФизическихЛиц = Объект.Сотрудники.Выгрузить(, "ФизическоеЛицо").ВыгрузитьКолонку("ФизическоеЛицо");
	Иначе
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрФизическоеЛицо);
	КонецЕсли;
	
	ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, Истина, Неопределено, ТекущаяДатаСеанса());
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник,
	|	ТаблицаСотрудников.ФизическоеЛицо,
	|	&ДатаСреза КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	|	ФизическиеЛица.ДатаРождения,
	|	&ДатаСреза КАК Период
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&СписокФизическихЛиц)";
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДатаСеанса());
	Запрос.Выполнить();
	
	// Запрос по местам работы сотрудника.
	ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ПараметрыПолученияРабочихМест.НачалоПериода		= '00010101';
	ПараметрыПолученияРабочихМест.ОкончаниеПериода  = ТекущаяДатаСеанса();
	ПараметрыПолученияРабочихМест.СписокСотрудников = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияРабочихМест);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТРабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
		|	ВТРабочиеМестаСотрудников.Должность,
		|	ВТРабочиеМестаСотрудников.Подразделение,
		|	ВТРабочиеМестаСотрудников.ПериодЗаписи КАК ПериодЗаписи
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК ВТРабочиеМестаСотрудников
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодЗаписи УБЫВ
		|ИТОГИ ПО
		|	Сотрудник";
	РабочиеМестаСотрудников = Новый Соответствие;
	ВыборкаСотрудники = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудники.Следующий() Цикл
		МассивРабочихМест = Новый Массив;
		ВыборкаДетальныеЗаписи = ВыборкаСотрудники.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() И МассивРабочихМест.Количество() < 3 Цикл
			МассивРабочихМест.Добавить(Новый Структура("Должность, Подразделение, ПериодЗаписи",
				ВыборкаДетальныеЗаписи.Должность, ВыборкаДетальныеЗаписи.Подразделение, ВыборкаДетальныеЗаписи.ПериодЗаписи));
		КонецЦикла;
		РабочиеМестаСотрудников.Вставить(ВыборкаСотрудники.Сотрудник, МассивРабочихМест);
	КонецЦикла;
	
	// Получаем данные физических лиц.
	Описание = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц("ВТФизическиеЛица");
	КадровыеДанные = "ПолученныеОбразования,ЗнанияЯзыков,Профессии,Специальности,ТрудоваяДеятельность";
	
	ИтоговыйЗапрос = КадровыйУчет.ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(Истина, Описание, КадровыеДанные, ,"ВТПостоянныеКДФизическихЛиц"); 
	ИтоговыйЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ИтоговыйЗапрос.Выполнить();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТФизическиеЛица.ФизическоеЛицо,
	|	ВТФизическиеЛица.ДатаРождения,
	|	ВТСотрудники.Сотрудник,
	|	ЕСТЬNULL(ВТПостоянныеКДФизическихЛиц.ПолученныеОбразования, """") КАК ПолученныеОбразования,
	|	ЕСТЬNULL(ВТПостоянныеКДФизическихЛиц.ЗнанияЯзыков, """") КАК ЗнанияЯзыков,
	|	ЕСТЬNULL(ВТПостоянныеКДФизическихЛиц.Профессии, """") КАК Профессии,
	|	ЕСТЬNULL(ВТПостоянныеКДФизическихЛиц.Специальности, """") КАК Специальности,
	|	ЕСТЬNULL(ВТПостоянныеКДФизическихЛиц.ТрудоваяДеятельность, """") КАК ТрудоваяДеятельность
	|ИЗ
	|	ВТФизическиеЛица КАК ВТФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
	|		ПО ВТФизическиеЛица.ФизическоеЛицо = ВТСотрудники.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПостоянныеКДФизическихЛиц КАК ВТПостоянныеКДФизическихЛиц
	|		ПО ВТФизическиеЛица.ФизическоеЛицо = ВТПостоянныеКДФизическихЛиц.ФизическоеЛицо";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	// Очистка предыдущих сведений.
	Если ПараметрФизическоеЛицо = Неопределено Тогда
	    ВторичныеДанныеФизическихЛиц.Очистить();
	Иначе	
		УдаляемыеФизическиеЛица = ВторичныеДанныеФизическихЛиц.НайтиСтроки(Новый Структура("ФизическоеЛицо", ПараметрФизическоеЛицо));
		Для каждого УдаляемоеФизическоеЛицо Из УдаляемыеФизическиеЛица Цикл
			ВторичныеДанныеФизическихЛиц.Удалить(УдаляемоеФизическоеЛицо);
		КонецЦикла; 
	КонецЕсли;
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		СтруктураВторичныхДанныхФизическогоЛица = СтруктураВторичныхДанныхФизическогоЛица();
		
		Если ЗначениеЗаполнено(ВыборкаЗапроса.ДатаРождения) Тогда
			ДанныеСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.СведенияОСтаже();
			ДанныеСтажа.ДатаОтсчета = ВыборкаЗапроса.ДатаРождения;
			Возраст = ЗарплатаКадрыРасширенныйКлиентСервер.ПродолжительностьСтажа(ДанныеСтажа, ТекущаяДатаСеанса());
			ПредставлениеСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставлениеСтажа(Возраст.Лет, 0, 0);
			ТекстВозраста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)",
				Формат(ВыборкаЗапроса.ДатаРождения, "ДЛФ=D"), ПредставлениеСтажа);
		Иначе
			ТекстВозраста = НСтр("ru ='<не заполнена>'");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураВторичныхДанныхФизическогоЛица, ВыборкаЗапроса);
		
		СтруктураВторичныхДанныхФизическогоЛица.МассивРабочихМест = РабочиеМестаСотрудников.Получить(ВыборкаЗапроса.Сотрудник);
		СтруктураВторичныхДанныхФизическогоЛица.ТекстВозраста = ТекстВозраста;
		
		НоваяСтрока = ВторичныеДанныеФизическихЛиц.Добавить();
		НоваяСтрока.ФизическоеЛицо = ВыборкаЗапроса.ФизическоеЛицо;
		НоваяСтрока.СтруктураВторичныхДанныхФизическогоЛица = СтруктураВторичныхДанныхФизическогоЛица;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураВторичныхДанныхФизическогоЛица()

	СтруктураВторичныхДанныхФизическогоЛица = Новый Структура("
		| Сотрудник,	
		| ПолученныеОбразования, ЗнанияЯзыков, Профессии, Специальности, ТрудоваяДеятельность,
		| ДатаРождения, ТекстВозраста,
		| МассивРабочихМест, МассивАттестаций");
	
	Возврат СтруктураВторичныхДанныхФизическогоЛица;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВторичныеДанныеСотрудников()

	Для каждого СтрокаСотрудник Из Объект.Сотрудники Цикл
		КадровыйРезервКлиентСервер.ЗаполнитьОписаниеДействия(СтрокаСотрудник, Ложь);
	КонецЦикла; 

КонецПроцедуры

// Возвращает адрес во временном хранилище массива уже подобранных сотрудников.
//
&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	// Найдем сотрудников по физлицам
	СписокСотрудниковПоФизическимЛицам = ТаблицаСотрудниковИФизлиц(Объект.Сотрудники.Выгрузить(,"ФизическоеЛицо").ВыгрузитьКолонку("ФизическоеЛицо"));
	
	Возврат ПоместитьВоВременноеХранилище(СписокСотрудниковПоФизическимЛицам.ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаСотрудниковИФизлиц(СписокФизическихЛиц)
	
	ПараметрыСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыСотрудников.СписокФизическихЛиц = СписокФизическихЛиц;
	
	Возврат КадровыйУчет.СотрудникиОрганизации(Истина,ПараметрыСотрудников);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтборИзПодразделения(Подразделение)

	ОтборИзПодразделения = Новый Структура;
	Источник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "Источник");
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Организации") Тогда
		ОтборИзПодразделения.Вставить("Организация", Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ОтборИзПодразделения.Вставить("Подразделение", Источник);
		ОтборИзПодразделения.Вставить("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "ГоловнаяОрганизация"));
	КонецЕсли;
	
	Возврат ОтборИзПодразделения

КонецФункции

&НаСервереБезКонтекста
Функция ВыбранныеФизлицаСотрудников(Сотрудники)
	Возврат КадровыйУчет.ФизическиеЛицаСотрудников(Сотрудники);
КонецФункции

&НаКлиенте
Процедура УстановитьФорматированнуюНадписьСотрудники(ПараметрФизическоеЛицо)

	ДанныеФизическогоЛица = СтрокаВторичныхДанныхФизическогоЛица(ЭтаФорма, ПараметрФизическоеЛицо);
	Если ДанныеФизическогоЛица = Неопределено Тогда
		ФорматированнаяНадписьСотрудники = "";
		Возврат;
	КонецЕсли;
	
	// Заполняем форматированную строку результатами.
	ФорматированнаяНадписьСотрудники = "";
	МассивСтрок = Новый Массив;
	
	ЖирныйШрифт = Новый Шрифт(,,Истина);
	
	// Возраст
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Дата рождения'") + " - ", ЖирныйШрифт));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ДанныеФизическогоЛица.ТекстВозраста));
	МассивСтрок.Добавить(Символы.ПС);
	
	// Образование
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Образование:'") + " ", ЖирныйШрифт));
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.ПолученныеОбразования) Тогда
		Для СчСтрок = 1 По СтрЧислоСтрок(ДанныеФизическогоЛица.ПолученныеОбразования) Цикл
			СтрокаОбразования = СтрПолучитьСтроку(ДанныеФизическогоЛица.ПолученныеОбразования, СчСтрок);
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СтрокаОбразования,,,,"Образование"));
			Суффикс = ?(СтрЧислоСтрок(ДанныеФизическогоЛица.ПолученныеОбразования) = СчСтрок, "", ", ");
			МассивСтрок.Добавить(Суффикс);
		КонецЦикла;
	Иначе
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '<не заполнено>'")));
	КонецЕсли;
	МассивСтрок.Добавить(Символы.ПС);
	
	// Работа
	МассивТекстовРаботы = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.МассивРабочихМест) Тогда
		Для каждого РабочееМесто Из ДанныеФизическогоЛица.МассивРабочихМест Цикл
			ТекстРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 в %2 с %3'"),
			РабочееМесто.Должность,
			РабочееМесто.Подразделение,
			Формат(РабочееМесто.ПериодЗаписи, "ДЛФ=D"));
			Суффикс = ?(ДанныеФизическогоЛица.МассивРабочихМест.Найти(РабочееМесто) + 1 = ДанныеФизическогоЛица.МассивРабочихМест.Количество(), "", ", ");
			МассивТекстовРаботы.Добавить(Новый ФорматированнаяСтрока(ТекстРаботы, Суффикс));
		КонецЦикла; 
	КонецЕсли;

	Если МассивТекстовРаботы.Количество() > 0 Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Работа в компании:'") + " ", ЖирныйШрифт));
		МассивСтрок.Добавить(МассивТекстовРаботы);
	Иначе
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Внешний сотрудник'"), ЖирныйШрифт));
	КонецЕсли;
	МассивСтрок.Добавить(Символы.ПС);
		
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.ТрудоваяДеятельность) Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Предыдущие места работы:'") + " ", ДанныеФизическогоЛица.ТрудоваяДеятельность));
		МассивСтрок.Добавить(Символы.ПС);
	КонецЕсли;
	
	// Профессии, специальность, языки
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ДанныеФизическогоЛица.Профессии));
	МассивСтрок.Добавить(Символы.ПС);
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ДанныеФизическогоЛица.Специальности));
	МассивСтрок.Добавить(Символы.ПС);
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ДанныеФизическогоЛица.ЗнанияЯзыков));
	МассивСтрок.Добавить(Символы.ПС);
	
	ФорматированнаяНадписьСотрудники = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВторичныхДанныхФизическогоЛица(Форма, ПараметрФизическоеЛицо)

	НайденноеСоответствие = Форма.ВторичныеДанныеФизическихЛиц.НайтиСтроки(Новый Структура("ФизическоеЛицо", ПараметрФизическоеЛицо));
	Если НайденноеСоответствие.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденноеСоответствие[0].СтруктураВторичныхДанныхФизическогоЛица;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура УстановитьРезервистаИзПодбора(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт

	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		ТекущиеДанные.ФизическоеЛицо = РезультатЗакрытия;
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 