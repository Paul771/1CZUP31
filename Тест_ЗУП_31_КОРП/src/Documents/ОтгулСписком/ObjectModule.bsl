#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// В качестве данных заполнения может принимать структуру с полями.
//		Ссылка
//		Действие
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Исправить" Тогда
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, ДанныеЗаполнения.Ссылка);
			ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
			ЗарплатаКадрыРасширенный.ПриКопированииМногофункциональногоДокумента(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ОбработкаЗаполненияМногофункциональногоДокумента(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Документы.ОтгулСписком.ПровестиПоУчетам(Ссылка, РежимПроведения, Отказ, Неопределено, Движения, ЭтотОбъект, ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
		
		ЗарплатаКадрыРасширенный.ПроверитьУтверждениеДокумента(ЭтотОбъект, Отказ);
		
		Если Не ЗначениеЗаполнено(ВидРасчета) 
			И Не ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияОтгул") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Документы.Отгул.ТекстСообщенияНеЗаполненВидРасчета(Ложь),
			Ссылка,
			,
			,
			Отказ);
		КонецЕсли;
		
		Если ПерерасчетВыполнен Тогда 
			
			// Проверка корректности распределения по источникам финансирования
			ИменаТаблицРаспределяемыхПоСтатьямФинансирования = "Начисления,НачисленияПерерасчет";
			
			ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержанийОбъекта(
				ЭтотОбъект, ИменаТаблицРаспределяемыхПоСтатьямФинансирования, Отказ);
			
			// Проверка корректности распределения по территориям и условиям труда
			ИменаТаблицРаспределенияПоТерриториямУсловиямТруда = "Начисления,НачисленияПерерасчет";
			
			РасчетЗарплатыРасширенный.ПроверитьРаспределениеПоТерриториямУсловиямТрудаДокумента(
				ЭтотОбъект, ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, Отказ);
			
			ПроверитьПериодДействияНачислений(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПериодыОтгуловСотрудников = Новый Соответствие;
	Для Каждого СтрокаСотрудника Из Сотрудники Цикл
		Если Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаНачала) Или Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаОкончания) Тогда 
			Продолжить;
		КонецЕсли;
		Если СтрокаСотрудника.ДатаНачала > СтрокаСотрудника.ДатаОкончания Тогда 
			ТекстСообщения = НСтр("ru = 'Сотрудник %1: дата начала не может быть больше даты окончания'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСотрудника.Сотрудник);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"Сотрудники[" + Формат(Сотрудники.Индекс(СтрокаСотрудника), "ЧН=0; ЧГ=0") + "].Сотрудник", "Объект", Отказ);
			Продолжить;
		КонецЕсли;
		ДанныеОтгула = Новый Структура("ДатаНачала, ДатаОкончания, НомерСтроки, ИндексСтроки");
		ЗаполнитьЗначенияСвойств(ДанныеОтгула, СтрокаСотрудника);
		ДанныеОтгула.ИндексСтроки = Сотрудники.Индекс(СтрокаСотрудника);
		ПериодыОтгулов = ПериодыОтгуловСотрудников[СтрокаСотрудника.Сотрудник];
		Если ПериодыОтгулов = Неопределено Тогда 
			ПериодыОтгулов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеОтгула);
			ПериодыОтгуловСотрудников.Вставить(СтрокаСотрудника.Сотрудник, ПериодыОтгулов);
		Иначе 
			Для Каждого ПериодОтгула Из ПериодыОтгулов Цикл
				Если Не (ДанныеОтгула.ДатаНачала > ПериодОтгула.ДатаОкончания Или ДанныеОтгула.ДатаОкончания < ПериодОтгула.ДатаНачала) Тогда
					ТекстСообщения = НСтр("ru = 'Пересекаются периоды отгулов сотрудника %1 (строки %2 и %3)'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСотрудника.Сотрудник, ПериодОтгула.НомерСтроки, ДанныеОтгула.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"Сотрудники[" + Формат(ДанныеОтгула.ИндексСтроки, "ЧН=0; ЧГ=0") + "].Сотрудник", "Объект", Отказ);
				КонецЕсли;
			КонецЦикла;
			ПериодыОтгулов.Добавить(ДанныеОтгула);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	Документы.ОтгулСписком.СоздатьВТДанныеДокументов(Ссылка, Организация, ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ПередЗаписьюМногофункциональногоДокумента(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗарплатаКадрыРасширенный.ПриКопированииМногофункциональногоДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый Структура("Сотрудники", "Сотрудник"));
	
	Возврат ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоОрганизацииИСотрудникам(ЭтотОбъект, Организация, МассивПараметров, ПериодРегистрации);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьПериодДействияНачислений(Отказ)
	
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = ЭтотОбъект.Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("НачисленияПерерасчет", НСтр("ru = 'Перерасчет прошлого периода'")));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ЭтотОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
