
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// создается новый документ
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, Месяц", 
							"Объект.Организация", "Объект.Ответственный", "Объект.ПериодРегистрации");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Если Не ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
			Объект.ПериодРегистрации = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Объект.ДатаВыплаты = НачалоДня(ТекущаяДатаСеанса()) + 86400;
		Объект.ДатаПлатежаНДФЛ = Объект.ДатаВыплаты;
		ЗаполнитьДанныеФормыПоОрганизации();
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	ДатаПлатежаНДФЛПрежняя = Объект.ДатаПлатежаНДФЛ;
	ПеречислениеНДФЛРеквизитыПрежняя = Объект.ПеречислениеНДФЛРеквизиты;
	ОбновитьФормуПоДоступностиВедомостей(ЭтаФорма, Объект.РегистрироватьВыплатуВедомостью);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Обработчик подсистемы "ВерсионированиеОбъектов".
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриПолученииДанныхНаСервере();
	
	СохраняемыеЗначения = Новый Структура;
	СохраняемыеЗначения.Вставить("Исполнитель", ТекущийОбъект.Исполнитель);
	СохраняемыеЗначения.Вставить("ДолжностьИсполнителя", ТекущийОбъект.ДолжностьИсполнителя);
	
	ЗарплатаКадры.СохранитьЗначенияЗаполненияОтветственныхРаботниковФормы(ЭтотОбъект, ТекущийОбъект.Организация, СохраняемыеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ДивидендыФизическимЛицам", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзмененыРезультатыРасчетаУдержаний" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбновитьДанныеУдержанийНаСервере(Параметр);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыплатыПриИзменении(Элемент)
	
	Если (НЕ ИспользоватьВедомостиДляРегистрацииВыплат Или Не Объект.РегистрироватьВыплатуВедомостью) И (Не ЗначениеЗаполнено(Объект.ДатаПлатежаНДФЛ) Или Объект.ДатаПлатежаНДФЛ < Объект.ДатаВыплаты) Тогда
		Объект.ДатаПлатежаНДФЛ = Объект.ДатаВыплаты;
	КонецЕсли;
	
	РассчитатьНДФЛиУдержанияАкционеров();
	
КонецПроцедуры

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Модифицированность);
	ПриИзмененииПериодаРегистрации();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	ПриИзмененииПериодаРегистрации();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПериодаРегистрацииПриИзменении", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПередУдалением(Элемент, Отказ)
	
	Если Элементы.Начисления.ТекущиеДанные <> Неопределено Тогда
		УдаляемоеФизическоеЛицо = Элементы.Начисления.ТекущиеДанные.Акционер;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элементы.Начисления.ТекущиеДанные <> Неопределено Тогда
		
		Если НоваяСтрока И Копирование Тогда
			Элементы.Начисления.ТекущиеДанные.Акционер = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		Иначе
			УдаляемоеФизическоеЛицо = Элементы.Начисления.ТекущиеДанные.Акционер;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УдаляемоеФизическоеЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	УдалитьДанныеУдаляемогоФизическогоЛица();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияАкционерПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	
	Если ДанныеСтроки.Акционер <> УдаляемоеФизическоеЛицо Тогда
		УдалитьДанныеУдаляемогоФизическогоЛица();
		УдаляемоеФизическоеЛицо = ДанныеСтроки.Акционер;
		ЗаполнитьУдержанияФизическихЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСтроки.Акционер));
	КонецЕсли;

	РассчитатьНДФЛПоТекущейСтроке();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачисленоПриИзменении(Элемент)
	РассчитатьНДФЛПоТекущейСтроке();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСтавкаНДФЛПриИзменении(Элемент)
	РассчитатьНДФЛПоТекущейСтроке();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВычетПоНДФЛПриИзменении(Элемент)
	РассчитатьНДФЛПоТекущейСтроке();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДобавитьНовыеСтроки(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение));
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		ДобавитьНовыеСтроки(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РегистрироватьВыплатуВедомостьюПриИзменении(Элемент)
	
	ОбновитьФормуПоДоступностиВедомостей(ЭтаФорма, Объект.РегистрироватьВыплатуВедомостью);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПодборАкционеров(Команда)
	
	ФизическиеЛицаЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуПодбораФизическихЛицПоРоли(
		Элементы.Начисления,
		Объект.Организация,
		ПредопределенноеЗначение("Перечисление.РолиФизическихЛиц.Акционер"),
		АдресСпискаПодобранныхФизическихЛиц());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеУдержаний(Команда)
	РасчетЗарплатыРасширенныйКлиент.ОткрытьФормуПодробнееОРасчетеУдержаний(Объект, "ДивидендыФизическимЛицам", ЭтаФорма, ОписаниеДокумента());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура РассчитатьНДФЛАкционераНаСервере(ВыбраннаяСтрока)
	
	ТекущиеДанные = Объект.Начисления.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НДФЛ = 0;
	ТекущиеДанные.КВыплате = 0;
	
	Акционер = ТекущиеДанные.Акционер;
	Начислено = ТекущиеДанные.Начислено;
	ВычетПоНДФЛ = ТекущиеДанные.ВычетПоНДФЛ;
		
	Если Не (ЗначениеЗаполнено(Акционер) И ЗначениеЗаполнено(Начислено)) Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияДивидендов = Перечисления.КатегорииДоходовНДФЛ.Дивиденды;
	СтавкаНДФЛ = ТекущиеДанные.СтавкаНДФЛ;
	Если ЗначениеЗаполнено(СтавкаНДФЛ) Тогда
		Если СтавкаНДФЛ = Перечисления.НДФЛСтавки.Ставка05 Тогда
			КатегорияДивидендов = Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке05;
		ИначеЕсли СтавкаНДФЛ = Перечисления.НДФЛСтавки.Ставка10 Тогда
			КатегорияДивидендов = Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке10;
		ИначеЕсли СтавкаНДФЛ = Перечисления.НДФЛСтавки.Ставка12 Тогда
			КатегорияДивидендов = Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке12;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные.НДФЛ = УчетНДФЛРасширенный.НалогСДивидендовАкционера(Объект.ДатаВыплаты, Акционер, Начислено, ВычетПоНДФЛ, КатегорияДивидендов);
	
	УдержанияАкционера = Объект.Удержания.НайтиСтроки(Новый Структура("ФизическоеЛицо", Акционер));
	Если УдержанияАкционера.Количество() Тогда
		
		Для Каждого Удержание Из УдержанияАкционера Цикл
			Удержание.Результат = 0;
		КонецЦикла;
		ТекущиеДанные.Удержано = 0;
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Дивиденды.НомерСтроки КАК НомерСтроки,
		|	Дивиденды.Акционер КАК ФизическоеЛицо,
		|	Дивиденды.Начислено КАК Начислено,
		|	Дивиденды.ВычетПоНДФЛ КАК ВычетПоНДФЛ,
		|	Дивиденды.НДФЛ КАК НДФЛ,
		|	Дивиденды.КВыплате КАК КВыплате,
		|	Дивиденды.Удержано КАК Удержано,
		|	ВЫБОР
		|		КОГДА Дивиденды.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка05)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДивидендыПоСтавке05)
		|		КОГДА Дивиденды.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка10)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДивидендыПоСтавке10)
		|		КОГДА Дивиденды.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка12)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДивидендыПоСтавке12)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.Дивиденды)
		|	КОНЕЦ КАК КатегорияДохода
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	&Начисления КАК Дивиденды";
		Запрос.УстановитьПараметр("Начисления", Объект.Начисления.Выгрузить(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные)));
		Запрос.Выполнить();
		
		КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, Акционер, ДокументОбъект.Организация, ДокументОбъект.ПериодРегистрации);
		
		Если Объект.Ссылка.Пустая() Тогда
			ДокументОбъект.УстановитьСсылкуНового(Документы.ДивидендыФизическимЛицам.ПолучитьСсылку());
		КонецЕсли;
		Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокумента.ФизическоеЛицо,
		|	ДанныеДокумента.НДФЛ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВТОсновныеСотрудникиФизическихЛиц.Сотрудник ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НФДЛДивиденды)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НФДЛДивидендыСотрудникам)
		|	КОНЕЦ КАК НачислениеУдержание
		|ИЗ
		|	ВТДанныеДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеСотрудникиФизическихЛиц КАК ВТОсновныеСотрудникиФизическихЛиц
		|		ПО ДанныеДокумента.ФизическоеЛицо = ВТОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ВТОсновныеСотрудникиФизическихЛиц.Сотрудник ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.Дивиденды)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДивидендыСотрудников)
		|	КОНЕЦ КАК Начисление,
		|	&Ссылка КАК ДокументОснование,
		|	ДанныеДокумента.Начислено КАК Сумма
		|ИЗ
		|	ВТДанныеДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеСотрудникиФизическихЛиц КАК ВТОсновныеСотрудникиФизическихЛиц
		|		ПО ДанныеДокумента.ФизическоеЛицо = ВТОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо";
		
		Результат = Запрос.ВыполнитьПакет();
		
		ДанныеДляПроведения = Новый Структура;
		
		НДФЛ = Результат[0].Выгрузить();
		НДФЛ.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ДанныеДляПроведения.Вставить("НДФЛ", НДФЛ);
		
		ДанныеДляПроведения.Вставить("Начисления", Результат[1].Выгрузить());
		
		УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(
												ДокументОбъект.Движения, Ложь, ДокументОбъект.Организация, ДокументОбъект.ПериодРегистрации, ДанныеДляПроведения.Начисления, , ДанныеДляПроведения.НДФЛ);
		
		МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ДокументОбъект.ПериодРегистрации, ДокументОбъект.Организация);
		
		МенеджерВременныхТаблицУдержания = Новый МенеджерВременныхТаблиц;
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблицУдержания, ДокументОбъект.Движения.НачисленияУдержанияПоКонтрагентамАкционерам);
		ДокументОбъект.Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Очистить();
		
		ДанныеДивидендов = Документы.ДивидендыФизическимЛицам.ДанныеДляПроведенияДивиденды(Запрос.МенеджерВременныхТаблиц);
		УчетНДФЛРасширенный.СформироватьДоходыИНДФЛСДивидендов(ДокументОбъект.Ссылка, ДокументОбъект.Движения, Ложь,
								ДокументОбъект.Организация, ДокументОбъект.ДатаВыплаты, ДанныеДивидендов, ДокументОбъект.ВключатьВДекларациюПоНалогуНаПрибыль,,,,Ложь);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблицУдержания, ДокументОбъект.Движения.СведенияОДоходахНДФЛ);
		ДокументОбъект.Движения.СведенияОДоходахНДФЛ.Очистить();
		
		МенеджерРасчета.УстановитьМенеджерВременныхТаблиц(МенеджерВременныхТаблицУдержания);
		
		МенеджерРасчета.НастройкиРасчета.РассчитыватьУдержания = Истина;
		МенеджерРасчета.НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияАкционера, МенеджерРасчета.Зарплата.Удержания);
		
		МенеджерРасчета.РассчитатьЗарплату();
		
		// Перенос в документ результатов расчета удержаний
		ИденитфикаторыУдержаний = Объект.Удержания.Выгрузить( , "ИдентификаторСтрокиВидаРасчета");
		ИденитфикаторыУдержаний.Сортировать("ИдентификаторСтрокиВидаРасчета Убыв");
		МаксимальныйИдентификатор = ?(ИденитфикаторыУдержаний.Количество() И ИденитфикаторыУдержаний[0].ИдентификаторСтрокиВидаРасчета <> 0, ИденитфикаторыУдержаний[0].ИдентификаторСтрокиВидаРасчета, 3*1000000);
		
		Если МенеджерРасчета.Зарплата.Удержания.Количество() Тогда
			Для Каждого СтрокаУдержания Из УдержанияАкционера Цикл
				СтрокиПоказателей = Объект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", СтрокаУдержания.ИдентификаторСтрокиВидаРасчета));
				Для Каждого СтрокаПоказателей Из СтрокиПоказателей Цикл
					Объект.Показатели.Удалить(СтрокаПоказателей);
				КонецЦикла;
				Объект.Удержания.Удалить(СтрокаУдержания);
			КонецЦикла;
			
			Удержано = 0;
			Для Каждого СтрокаУдержания Из МенеджерРасчета.Зарплата.Удержания Цикл
				МаксимальныйИдентификатор = МаксимальныйИдентификатор + 1;
				
				НовоеУдержание = Объект.Удержания.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеУдержание, СтрокаУдержания);
				НовоеУдержание.ИдентификаторСтрокиВидаРасчета = МаксимальныйИдентификатор;
				
				Для Каждого ЗначениеПоказателя Из СтрокаУдержания.Показатели Цикл
					СтрокаПоказателей = Объект.Показатели.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПоказателей, ЗначениеПоказателя);
					СтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = МаксимальныйИдентификатор;
				КонецЦикла;
				
				Удержано = Удержано + СтрокаУдержания.Результат;
			КонецЦикла;
			ТекущиеДанные.Удержано = Удержано;
		КонецЕсли;
		
		// Значеение показателей в данные формы
		ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеТаблицыУдержаний()), 2);
		
	КонецЕсли;
	
	ТекущиеДанные.КВыплате = Начислено - ТекущиеДанные.НДФЛ - ТекущиеДанные.Удержано;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНДФЛПоТекущейСтроке();
	
	РассчитатьНДФЛАкционераНаСервере(Элементы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхФизическихЛиц()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Начисления.Выгрузить(,"Акционер").ВыгрузитьКолонку("Акционер"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ДобавитьНовыеСтроки(ФизическиеЛица)
	
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		СтрокиНачислений = Объект.Начисления.НайтиСтроки(Новый Структура("Акционер", ФизическоеЛицо));
		Если СтрокиНачислений.Количество() = 0 Тогда
			НоваяСтрока = Объект.Начисления.Добавить();
			НоваяСтрока.Акционер = ФизическоеЛицо;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение удержаний по исполнительным листам выбранных физических лиц
	Если ФизическиеЛица.Количество() Тогда
		ЗаполнитьУдержанияФизическихЛиц(ФизическиеЛица);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьДанныеФормыПоОрганизации();
	
КонецПроцедуры

&НаСервере
Функция ЗапрашиваемыеЗначенияДанныхФормыПоОрганизации()
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Исполнитель", "Объект.Исполнитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьИсполнителя", "Объект.ДолжностьИсполнителя");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрашиваемыеЗначения = ЗапрашиваемыеЗначенияДанныхФормыПоОрганизации();
	ФиксированныеЗначения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация");
	
	ЗарплатаКадры.ЗаполнитьОтветственныхРаботниковОрганизацииВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения, ФиксированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");
	
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыУдержаний(), "Удержания", , Ложь);
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеТаблицыУдержаний()), 2);
	
	ЗарплатаКадры.ЗапомнитьОтветственныхРаботниковОрганизацииВФорме(ЭтотОбъект, ЗапрашиваемыеЗначенияДанныхФормыПоОрганизации());
	
	ИспользоватьВедомостиДляРегистрацииВыплат = ПолучитьФункциональнуюОпцию("ИспользоватьВедомостиДляВыплатыПрочихДоходов");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.МесяцНачисленияИмя 	= "ПериодРегистрации";
	Описание.УдержанияИмя			= "Удержания";
	Описание.ПериодДействияВШапке 	= Истина;
	Описание.НеРаспределятьПоСтатьямФинансирования = Истина;
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеУдержанийНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.Удержания.Загрузить(Параметр.Удержания.Выгрузить());
	
	Для Каждого Строка Из Объект.Начисления Цикл
		Удержано = 0;
		СтрокиУдержаний = Объект.Удержания.НайтиСтроки(Новый Структура("ФизическоеЛицо", Строка.Акционер));
		Для Каждого СтрокаУдержания Из СтрокиУдержаний Цикл
			Удержано = Удержано + СтрокаУдержания.Результат;
		КонецЦикла;
		Строка.Удержано = Удержано;
		Строка.КВыплате = Строка.Начислено - Строка.НДФЛ - Строка.Удержано;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУдержанияФизическихЛиц(ФизическиеЛица)
	
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		УдаляемыеСтроки = Объект.Удержания.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
		Для Каждого Строка Из УдаляемыеСтроки Цикл
			Объект.Удержания.Удалить(Строка);
		КонецЦикла;
	КонецЦикла;
	
	КатегорияИсполнительныйЛист = ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ИсполнительныйЛист");
	КатегорияВознаграждениеПлатежногоАгента = ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента");
	
	МенеджерРасчета = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияВсехСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Объект.Организация;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыПолученияСотрудников.КадровыеДанные = "ДатаУвольнения, ГоловнаяОрганизация";
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Отбор = Новый Структура("ФизическоеЛицо, ДокументОснование, Удержание");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СотрудникиОрганизации.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ПериодРегистрации
	|		КОГДА ЕСТЬNULL(СотрудникиОрганизации.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) > КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА &ПериодРегистрации
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ДатаУвольнения, МЕСЯЦ)
	|	КОНЕЦ КАК ДатаНачала,
	|	СотрудникиОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СотрудникиОрганизации.ДатаУвольнения КАК ДатаУвольнения
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|ИТОГИ ПО
	|	ГоловнаяОрганизация,
	|	ДатаНачала";
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаПериода = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПериода.Следующий() Цикл
			Если МенеджерРасчета = Неопределено Тогда
				МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ВыборкаПериода.ДатаНачала, Объект.Организация);
			Иначе
				МенеджерРасчета.Инициализировать(ВыборкаПериода.ДатаНачала, Объект.Организация);
			КонецЕсли;
			ФизическиеЛицаПериода = Новый Массив;
			Выборка = ВыборкаПериода.Выбрать();
			Пока Выборка.Следующий() Цикл
				ФизическиеЛицаПериода.Добавить(Выборка.ФизическоеЛицо);
			КонецЦикла;
			
			МенеджерРасчета.ЗаполнитьУдержанияФизическихЛицЗаПериод(ФизическиеЛицаПериода, ВыборкаОрганизация.ГоловнаяОрганизация, ВыборкаПериода.ДатаНачала, КонецМесяца(ВыборкаПериода.ДатаНачала));
			Для Каждого СтрокаУдержания Из МенеджерРасчета.Зарплата.Удержания Цикл
				Если СтрокаУдержания.Категория = КатегорияИсполнительныйЛист 
					Или СтрокаУдержания.Категория = КатегорияВознаграждениеПлатежногоАгента Тогда
					
					ЗаполнитьЗначенияСвойств(Отбор, СтрокаУдержания);
					Если Объект.Удержания.НайтиСтроки(Отбор).Количество() Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = Объект.Удержания.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
					ДатаУдержания = ?(ЗначениеЗаполнено(Объект.ДатаВыплаты), Объект.ДатаВыплаты, Объект.Дата);
					НоваяСтрока.ДатаНачала = НачалоДня(ДатаУдержания);
					НоваяСтрока.ДатаОкончания = КонецДня(ДатаУдержания);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Проверим удержания:
	// Если Сотрудник уволен, тогда исполнительные листы фиксированной суммой и до предела не считаем,
	// если Сотрудник не уволен, тогде можем считать все.
	ТаблицаУдержаний = Объект.Удержания.Выгрузить(, "НомерСтроки, ДокументОснование, ФизическоеЛицо");
	Запрос.УстановитьПараметр("ТаблицаУдержаний", ТаблицаУдержаний);
	Запрос.УстановитьПараметр("ДатаВыплаты", Объект.ДатаВыплаты);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.ДокументОснование,
	|	Удержания.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТИсполнительныеЛисты
	|ИЗ
	|	&ТаблицаУдержаний КАК Удержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнительныеЛисты.ДокументОснование,
	|	ИсполнительныеЛисты.ФизическоеЛицо,
	|	МИНИМУМ(ЕСТЬNULL(СотрудникиОрганизации.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ДатаУвольнения
	|ПОМЕСТИТЬ ВТДанные
	|ИЗ
	|	ВТИсполнительныеЛисты КАК ИсполнительныеЛисты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО ИсполнительныеЛисты.ФизическоеЛицо = СотрудникиОрганизации.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсполнительныеЛисты.ДокументОснование,
	|	ИсполнительныеЛисты.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанные.ДокументОснование,
	|	МАКСИМУМ(УсловияУдержанияПоИсполнительномуДокументу.Период) КАК Период
	|ПОМЕСТИТЬ ВТПериодыПолученияУсловийПоИсполнительныиЛистам
	|ИЗ
	|	ВТДанные КАК ВТДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
	|		ПО ВТДанные.ДокументОснование = УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент
	|			И (ВЫБОР
	|				КОГДА ВТДанные.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА &ДатаВыплаты
	|				ИНАЧЕ ВТДанные.ДатаУвольнения
	|			КОНЕЦ > УсловияУдержанияПоИсполнительномуДокументу.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанные.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанные.ДокументОснование
	|ИЗ
	|	ВТДанные КАК ВТДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыПолученияУсловийПоИсполнительныиЛистам КАК ВТПериодыПолученияУсловийПоИсполнительныиЛистам
	|		ПО ВТДанные.ДокументОснование = ВТПериодыПолученияУсловийПоИсполнительныиЛистам.ДокументОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
	|		ПО ВТДанные.ДокументОснование = УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент
	|			И (ВТПериодыПолученияУсловийПоИсполнительныиЛистам.Период = УсловияУдержанияПоИсполнительномуДокументу.Период)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УсловияУдержанияПоИсполнительномуДокументу.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой)
	|					ИЛИ ЕСТЬNULL(ВТДанные.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|						И УсловияУдержанияПоИсполнительномуДокументу.Предел <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Удаляемыестроки = Объект.Удержания.НайтиСтроки(Новый Структура("ДокументОснование", Выборка.ДокументОснование));
		Для Каждого Строка Из Удаляемыестроки Цикл
			Объект.Удержания.Удалить(Строка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДанныеУдаляемогоФизическогоЛица()
	
	Если ЗначениеЗаполнено(УдаляемоеФизическоеЛицо) Тогда
		
		СтрокиФизическогоЛица = Объект.Начисления.НайтиСтроки(Новый Структура("Акционер", УдаляемоеФизическоеЛицо));
		Если СтрокиФизическогоЛица.Количество() > 0 Тогда
			РассчитатьНДФЛАкционераНаСервере(СтрокиФизическогоЛица[0].ПолучитьИдентификатор());
		Иначе
			СтрокиКУдалению = Объект.Удержания.НайтиСтроки(Новый Структура("ФизическоеЛицо", УдаляемоеФизическоеЛицо));
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				СтрокиПоказателей = Объект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", СтрокаКУдалению.ИдентификаторСтрокиВидаРасчета));
				Для Каждого СтрокаПоказателей Из СтрокиПоказателей Цикл
					Объект.Показатели.Удалить(СтрокаПоказателей);
				КонецЦикла;
				Объект.Удержания.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли;
		
		УдаляемоеФизическоеЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СведенияОбУдержаниях() Экспорт
	
	Возврат РасчетЗарплатыРасширенный.СведенияОбУдержаниях(ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	ПерезаполнитьНачисленияСотрудникаНаСервере(Сотрудники, СохранятьИсправления);
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьНачисленияСотрудникаНаСервере(Сотрудники, СохранятьИсправления) Экспорт
	
	Если Не СохранятьИсправления Тогда
		Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		ИначеЕсли ТипЗнч(Сотрудники) = Тип("Массив") Тогда 
			СписокФизическихЛиц = Сотрудники;
		Иначе
			СписокФизическихЛиц = Объект.Начисления.Выгрузить(, "Акционер").ВыгрузитьКолонку("Акционер");
		КонецЕсли;
		
		ЗаполнитьУдержанияФизическихЛиц(СписокФизическихЛиц);
	КонецЕсли;
	
	Для Каждого НачислениеФизическогоЛица Из Объект.Начисления Цикл
		Если СписокФизическихЛиц.Найти(НачислениеФизическогоЛица.Акционер) <> Неопределено Тогда
			РассчитатьНДФЛАкционераНаСервере(НачислениеФизическогоЛица.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыУдержаний()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.СодержитПолеСотрудник	= Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник	= "ФизическоеЛицо";
	ОписаниеТаблицы.ИмяРеквизитаВидРасчета	= "Удержание";
	ОписаниеТаблицы.ИмяТаблицы 				= "Удержания";
	ОписаниеТаблицы.НомерТаблицы 			= 3;
	ОписаниеТаблицы.СодержитПолеВидРасчета	= Истина;
	ОписаниеТаблицы.СодержитПолеСотрудник	= Ложь;
	ОписаниеТаблицы.ПутьКДанным				= "Объект.Удержания";
	ОписаниеТаблицы.ПутьКДаннымПоказателей	= "Объект.Показатели";
	ОписаниеТаблицы.ИмяРеквизитаДатаНачала	= "ДатаНачала";
	ОписаниеТаблицы.ИмяРеквизитаДатаОкончания = "ДатаОкончания";
	
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОжиданияПериодаРегистрацииПриИзменении()
	РассчитатьНДФЛиУдержанияАкционеров();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериодаРегистрации()
	РассчитатьНДФЛиУдержанияАкционеров();
КонецПроцедуры

Процедура РассчитатьНДФЛиУдержанияАкционеров()
	ПерезаполнитьНачисленияСотрудникаНаСервере(, Ложь);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоДоступностиВедомостей(Форма, РегистрироватьВыплатуВедомостью)

	ВедомостиДоступны = Форма.ИспользоватьВедомостиДляРегистрацииВыплат И РегистрироватьВыплатуВедомостью;
	
	Если ВедомостиДоступны Тогда
		Форма.ДатаПлатежаНДФЛПрежняя = Форма.Объект.ДатаПлатежаНДФЛ;
		Форма.ПеречислениеНДФЛРеквизитыПрежняя = Форма.Объект.ПеречислениеНДФЛРеквизиты;
		Форма.Объект.ДатаПлатежаНДФЛ = Дата(1,1,1);
		Форма.Объект.ПеречислениеНДФЛРеквизиты = "";
	Иначе
		Форма.Объект.ДатаПлатежаНДФЛ = Форма.ДатаПлатежаНДФЛПрежняя;
		Форма.Объект.ПеречислениеНДФЛРеквизиты = Форма.ПеречислениеНДФЛРеквизитыПрежняя;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.КоманднаяПанель.ПодчиненныеЭлементы,
			"ФормаОбработкаСозданиеВедомостейПрочихДоходовСоздатьВедомостиПрочихДоходовПоДокументу",
			"Видимость",
			ВедомостиДоступны);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПеречислениеНДФЛ",
		"Доступность",
		Не ВедомостиДоступны);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаПлатежаНДФЛ",
		"АвтоОтметкаНезаполненного",
		Не ВедомостиДоступны);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаПлатежаНДФЛ",
		"ОтметкаНезаполненного",
		Не ВедомостиДоступны И Не ЗначениеЗаполнено(Форма.Объект.ДатаПлатежаНДФЛ));	

КонецПроцедуры

#КонецОбласти
