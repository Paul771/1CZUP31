
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Ключ.Пустая() Тогда 
		
		Если Не ЗначениеЗаполнено(Объект.Шаблон) Тогда
			Шаблон = Неопределено;
			Параметры.Свойство("Шаблон", Шаблон);
			
			Если Шаблон = Неопределено Тогда
				ДополнительныйПараметр = Неопределено;
				Параметры.Свойство("ДополнительныйПараметр", ДополнительныйПараметр);
				Если ТипЗнч(ДополнительныйПараметр) = Тип("УникальныйИдентификатор") Тогда
					Шаблон = Справочники.ШаблоныПроизвольныхКадровыхПриказов.ПолучитьСсылку(ДополнительныйПараметр);
				Иначе
					Шаблон = Справочники.ШаблоныПроизвольныхКадровыхПриказов.ПустаяСсылка();
				КонецЕсли;
	        КонецЕсли;			
			
			Объект.Шаблон = Шаблон;
			
		КонецЕсли;
		
		Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.Сотрудники") Тогда
			Если Объект.Шаблон.НесколькоСотрудников Тогда
				НоваяСтрока = Объект.Сотрудники.Добавить();
				НоваяСтрока.Сотрудник = Параметры.Основание;
			Иначе
				Объект.Сотрудник = Параметры.Основание;
			КонецЕсли;
		КонецЕсли;
		
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный", 
									"Объект.Организация",
									"Объект.Ответственный");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);

		ПриПолученииДанныхНаСервере(Объект);
							
	КонецЕсли;
	
	ЗаполнитьЗаголовокФормы(Объект);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Удаляем добавленные команды и кнопки печати.
	МассивУдаляемыхКоманд = Новый Массив;
	Для Каждого КомандаПечати Из Команды Цикл
		Если СтрНайти(КомандаПечати.Имя, "КомандаПечати") > 0 Тогда
			МассивУдаляемыхКоманд.Добавить(КомандаПечати);
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого КомандаПечати Из МассивУдаляемыхКоманд Цикл
		Команды.Удалить(КомандаПечати);		
	КонецЦикла;
	
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого ЭлементФормы Из Элементы Цикл
		Если СтрНайти(ЭлементФормы.Имя, "ФормаКоманднаяПанельКомандаПечати") > 0 И ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
			МассивУдаляемыхЭлементов.Добавить(ЭлементФормы);
		КонецЕсли;			
	КонецЦикла;
	
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элемент);		
	КонецЦикла;
	
	// Добавляем команды печати в зависимости от настроек шаблона.
	КомандыПечати = Документы.ПроизвольныйКадровыйПриказ.КомандыПечатиФормы(ЭтаФорма);
	Если КомандыПечати.Количество() > 0 Тогда
		Документы.ПроизвольныйКадровыйПриказ.ПриСозданииНаСервере(ЭтаФорма, КомандыПечати);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	Если НастройкиДокумента.НесколькоСотрудников
		И ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			
		НоваяСтрока = Объект.Сотрудники.Добавить();
		НоваяСтрока.Сотрудник = Объект.Сотрудник;
		Объект.Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
		
	КонецЕсли;
	
	Если Не НастройкиДокумента.ПоказыватьПодразделение Тогда
		Объект.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ЗначенияРеквизитов.Очистить();
	
	СохранитьЗначенияРеквизитовШапки(ТекущийОбъект);
	
	СохранитьЗначенияРеквизитовСпискаСотрудников(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для	Каждого КлючИЗначение Из ПроверяемыеПоля Цикл
		ПутьКРеквизиту = КлючИЗначение.Ключ;
		ИмяПоляФормы = КлючИЗначение.Значение;
		ЧастиПутиКРеквизиту = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКРеквизиту, ".");
		Если ЧастиПутиКРеквизиту[0] = "Объект" Тогда
			Если Найти(ИмяПоляФормы, "Объект") Тогда
				ЧастиПоляФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПоляФормы, ".");
				ИмяРеквизита = ЧастиПоляФормы[1];
				ЗначениеРеквизита = ЭтаФорма["Объект"][ИмяРеквизита];
			Иначе
				ИмяРеквизита = ИмяПоляФормы;
				ЗначениеРеквизита = ЭтаФорма[ИмяПоляФормы]; 
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Поле ""%1"" не заполнено'"), Элементы[ИмяРеквизита].Заголовок);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКРеквизиту, , Отказ);
			КонецЕсли;
		ИначеЕсли ЧастиПутиКРеквизиту[0] = "Сотрудники" Тогда
			ИмяРеквизита = ЧастиПутиКРеквизиту[1];
			Для Каждого СтрокаКоллекции Из Объект.Сотрудники Цикл
				ЗначениеРеквизита = Неопределено;
				СтрокаКоллекции.Свойство(ИмяРеквизита, ЗначениеРеквизита);
				Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					    НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""Сотрудники""'"), Элементы[ИмяПоляФормы].Заголовок,					
						СтрокаКоллекции.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Элементы.Сотрудники.АвтоОтметкаНезаполненного И Объект.Сотрудники.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена таблица ""Сотрудники""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ПроизвольныйКадровыйПриказ", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	ЗаполнитьЗаголовокФормы(ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьСотрудников(Команда)
	
	ЗадаватьВопрос = Объект.Сотрудники.Количество() > 0;
	
	Если ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Таблица документа будет очищена. 
	                         |Продолжить?'");
							 
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе 
		
		ЗаполнитьЗавершение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекОбъект)
	
	СтруктураНастроек = Справочники.ШаблоныПроизвольныхКадровыхПриказов.НастройкиВидаДокумента(ТекОбъект.Шаблон);

	НастройкиДокумента = Новый ФиксированнаяСтруктура(СтруктураНастроек);

	СоответствиеПроверяемыхРеквизитов = Новый Соответствие;
	
	НастроитьЭлементыФормы(СоответствиеПроверяемыхРеквизитов);

	ОтобразитьДополнительныеРеквизитыШапки(СоответствиеПроверяемыхРеквизитов);
	
	ПрочитатьДополнительныеРеквизитыШапки();	
	
	ОтобразитьДополнительныеКолонкиТабличнойЧасти(СоответствиеПроверяемыхРеквизитов);
	
	ПрочитатьДополнительныеКолонкиТабличнойЧасти();
	
	ПроверяемыеПоля = Новый ФиксированноеСоответствие(СоответствиеПроверяемыхРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовокФормы(ТекОбъект)
	
	АвтоЗаголовок = Не ЗначениеЗаполнено(ТекОбъект.Шаблон);
	
	Если Не АвтоЗаголовок Тогда
		ПредставлениеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекОбъект.Шаблон, "Наименование");
		Если Параметры.Ключ.Пустая() Тогда
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1 (создание)'"), ПредставлениеДокумента);
		Иначе
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1 %2 от %3'"), ПредставлениеДокумента, ТекОбъект.Номер, ТекОбъект.Дата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы(СоответствиеПроверяемыхРеквизитов)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Сотрудник",
			"Видимость",
			НЕ НастройкиДокумента.НесколькоСотрудников);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Сотрудник",
			"АвтоОтметкаНезаполненного",
			НЕ НастройкиДокумента.НесколькоСотрудников);
				
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Сотрудники",
			"Видимость",
			НастройкиДокумента.НесколькоСотрудников);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Сотрудники",
			"АвтоОтметкаНезаполненного",
			НастройкиДокумента.НесколькоСотрудников);
			
	Если НастройкиДокумента.НесколькоСотрудников Тогда
		СоответствиеПроверяемыхРеквизитов.Вставить("Сотрудники.Сотрудник", "СотрудникиСотрудник");
	Иначе
		СоответствиеПроверяемыхРеквизитов.Вставить("Объект.Сотрудник", "Объект.Сотрудник");
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаРуководитель",
			"Видимость",
			НастройкиДокумента.ПодписываетРуководитель);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаГлавныйБухгалтер",
			"Видимость",
			НастройкиДокумента.ПодписываетГлавныйБухгалтер);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаКассир",
			"Видимость",
			НастройкиДокумента.ПодписываетКассир);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаРуководительКадровойСлужбы",
			"Видимость",
			НастройкиДокумента.ПодписываетРуководительКадровойСлужбы);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаБухгалтер",
			"Видимость",
			НастройкиДокумента.ПодписываетБухгалтер);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Подразделение",
			"Видимость",
			НастройкиДокумента.ПоказыватьПодразделение);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Подразделение",
			"АвтоОтметкаНезаполненного",
			НастройкиДокумента.ПроверятьЗаполнениеПодразделения);
			
	Если НастройкиДокумента.ПроверятьЗаполнениеПодразделения Тогда
		СоответствиеПроверяемыхРеквизитов.Вставить("Объект.Подразделение", "Объект.Подразделение");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьДанныеФормыПоОрганизации();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	Если НастройкиДокумента.ПодписываетРуководитель Тогда
		ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
		ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	КонецЕсли;
	
	Если НастройкиДокумента.ПодписываетГлавныйБухгалтер Тогда
		ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер", "Объект.ГлавныйБухгалтер");
		ЗапрашиваемыеЗначения.Вставить("ДолжностьГлавногоБухгалтера", "Объект.ДолжностьГлавногоБухгалтера");
	КонецЕсли;
	
	Если НастройкиДокумента.ПодписываетКассир Тогда
		ЗапрашиваемыеЗначения.Вставить("Кассир", "Объект.Кассир");
		ЗапрашиваемыеЗначения.Вставить("ДолжностьКассира", "Объект.ДолжностьКассира");
	КонецЕсли;

	Если НастройкиДокумента.ПодписываетРуководительКадровойСлужбы Тогда
		ЗапрашиваемыеЗначения.Вставить("РуководительКадровойСлужбы", "Объект.РуководительКадровойСлужбы");
		ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителяКадровойСлужбы", "Объект.ДолжностьРуководителяКадровойСлужбы");
	КонецЕсли;

	Если НастройкиДокумента.ПодписываетБухгалтер Тогда
		ЗапрашиваемыеЗначения.Вставить("Бухгалтер", "Объект.Бухгалтер");
		ЗапрашиваемыеЗначения.Вставить("ДолжностьБухгалтера", "Объект.ДолжностьБухгалтера");
	КонецЕсли;
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	

КонецПроцедуры

&НаСервере
Процедура ОтобразитьДополнительныеРеквизитыШапки(СоответствиеПроверяемыхРеквизитов)
	
	РеквизитыФормы = ПолучитьРеквизиты();
	
	ТаблицаРеквизитовШапки = ТаблицаРеквизитов(Объект.Шаблон);
	
	ДобавляемыеРеквизиты = Новый Массив();
	УдаляемыеРеквизиты = Новый Массив();
		
	Для каждого ОписаниеРеквизита Из ТаблицаРеквизитовШапки Цикл
		
		ИмяРеквизита = "Реквизит_"+СтрЗаменить(Строка(ОписаниеРеквизита.Ссылка.УникальныйИдентификатор()), "-", "_");
		Реквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеРеквизита.ТипЗначения, , ОписаниеРеквизита.Наименование, Истина);
		
		Если РеквизитСуществует(РеквизитыФормы, Реквизит) Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Если ОписаниеРеквизита.ОбязательноДляЗаполнения Тогда
			СоответствиеПроверяемыхРеквизитов.Вставить("Объект."+ИмяРеквизита, ИмяРеквизита);
		КонецЕсли;
		
	КонецЦикла;
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Создание элементов формы.
	ЭлементРазмещения = Элементы.ДополнительныеРеквизиты;
	
	Для Каждого ОписаниеРеквизита Из ТаблицаРеквизитовШапки Цикл
		
		ИмяРеквизита = "Реквизит_"+СтрЗаменить(Строка(ОписаниеРеквизита.Ссылка.УникальныйИдентификатор()), "-", "_");
		
		Если ЭтаФорма.Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ЭлементРазмещения);
				
		Если ОписаниеРеквизита.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
			Элемент.Вид = ВидПоляФормы.ПолеФлажка
		Иначе
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.АвтоОтметкаНезаполненного = ОписаниеРеквизита.ОбязательноДляЗаполнения;			
		КонецЕсли;
		
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.Заголовок = ОписаниеРеквизита.Наименование;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДополнительныеКолонкиТабличнойЧасти(СоответствиеПроверяемыхРеквизитов)
	
	РеквизитыФормы = ПолучитьРеквизиты("Объект.Сотрудники");

	ТаблицаРеквизитовСпискаСотрудников = ТаблицаРеквизитов(Объект.Шаблон, Истина);
	 	
	ДобавляемыеРеквизиты = Новый Массив();
	УдаляемыеРеквизиты = Новый Массив();
	
	Для Каждого ОписаниеРеквизита Из ТаблицаРеквизитовСпискаСотрудников Цикл
		
		ИмяРеквизита = "Реквизит_"+СтрЗаменить(Строка(ОписаниеРеквизита.Ссылка.УникальныйИдентификатор()), "-", "_");
		Реквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеРеквизита.ТипЗначения, "Объект.Сотрудники", ОписаниеРеквизита.Наименование, Истина);
		
		Если Не РеквизитСуществует(РеквизитыФормы, Реквизит) Тогда
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
				
		Если ОписаниеРеквизита.ОбязательноДляЗаполнения Тогда
			СоответствиеПроверяемыхРеквизитов.Вставить("Сотрудники."+ИмяРеквизита, "Сотрудники"+ИмяРеквизита);
		КонецЕсли;
		
	КонецЦикла;
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Создание элементов формы.
	ЭлементРазмещения = Элементы.Сотрудники;
	
	Для Каждого ОписаниеРеквизита Из ТаблицаРеквизитовСпискаСотрудников Цикл
		
		ИмяРеквизита = "Реквизит_"+СтрЗаменить(Строка(ОписаниеРеквизита.Ссылка.УникальныйИдентификатор()), "-", "_");
		
		Элемент = ЭтаФорма.Элементы.Найти("Сотрудники"+ИмяРеквизита);
		
		Если Элемент = Неопределено Тогда
			Элемент = Элементы.Добавить("Сотрудники"+ИмяРеквизита, Тип("ПолеФормы"), ЭлементРазмещения);
			Элемент.ПутьКДанным = "Объект.Сотрудники."+ИмяРеквизита;			
		КонецЕсли;   	
				
		Если ОписаниеРеквизита.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
			Элемент.Вид = ВидПоляФормы.ПолеФлажка
		Иначе
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.АвтоОтметкаНезаполненного = ОписаниеРеквизита.ОбязательноДляЗаполнения;			
		КонецЕсли;

		Элемент.Заголовок = ОписаниеРеквизита.Наименование;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияРеквизитовШапки(ТекущийОбъект)
	
	ТаблицаРеквизитовШапки = ТаблицаРеквизитов(Объект.Шаблон);	
		
	Для Каждого ОписаниеРеквизита Из ТаблицаРеквизитовШапки Цикл
		
		ЗначениеРеквизита = ЭтаФорма["Реквизит_"+СтрЗаменить(Строка(ОписаниеРеквизита.Ссылка.УникальныйИдентификатор()), "-", "_")];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
			НоваяСтрокаЗначенияРеквизитов 			= ТекущийОбъект.ЗначенияРеквизитов.Добавить();
			НоваяСтрокаЗначенияРеквизитов.Реквизит	= ОписаниеРеквизита.Ссылка;
			НоваяСтрокаЗначенияРеквизитов.Значение  = ЗначениеРеквизита;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияРеквизитовСпискаСотрудников(ТекущийОбъект)
	
	ТаблицаРеквизитовСпискаСотрудников = ТаблицаРеквизитов(Объект.Шаблон, Истина);	
	
	ИдентификаторСтроки = 0;
	Для Каждого СтрокаСотрудник Из Объект.Сотрудники Цикл
		
	    ИдентификаторСтроки = ИдентификаторСтроки + 1;
		
		Для Каждого ОписаниеРеквизита Из ТаблицаРеквизитовСпискаСотрудников Цикл
			
			ЗначениеРеквизита = Неопределено;
			СтрокаСотрудник.Свойство("Реквизит_"+СтрЗаменить(Строка(ОписаниеРеквизита.Ссылка.УникальныйИдентификатор()), "-", "_"), ЗначениеРеквизита);
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
				НоваяСтрокаЗначенияРеквизитов 						= ТекущийОбъект.ЗначенияРеквизитов.Добавить();
				НоваяСтрокаЗначенияРеквизитов.Реквизит 				= ОписаниеРеквизита.Ссылка;
				НоваяСтрокаЗначенияРеквизитов.ИдентификаторСтроки	= ИдентификаторСтроки;
				НоваяСтрокаЗначенияРеквизитов.Значение 				= ЗначениеРеквизита;
				
				СтрокаОбъектаПоНомеру = ТекущийОбъект.Сотрудники.Найти(СтрокаСотрудник.НомерСтроки, "НомерСтроки");
				Если СтрокаОбъектаПоНомеру <> Неопределено Тогда
					СтрокаОбъектаПоНомеру.ИдентификаторСтроки = ИдентификаторСтроки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьДополнительныеРеквизитыШапки()
	
	Если Объект.ЗначенияРеквизитов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеквизитовШапки = ТаблицаРеквизитов(Объект.Шаблон);	
	
	Для каждого ОписаниеРеквизита Из ТаблицаРеквизитовШапки Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Реквизит", ОписаниеРеквизита.Ссылка);
		ПараметрыОтбора.Вставить("ИдентификаторСтроки", 0);
		СтрокиСоЗначениемРеквизита = Объект.ЗначенияРеквизитов.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиСоЗначениемРеквизита.Количество() > 0 Тогда
			ЭтаФорма["Реквизит_"+СтрЗаменить(Строка(ОписаниеРеквизита.Ссылка.УникальныйИдентификатор()), "-", "_")] = СтрокиСоЗначениемРеквизита[0].Значение;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДополнительныеКолонкиТабличнойЧасти()
	
	Если Объект.ЗначенияРеквизитов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеквизитовСпискаСотрудников = ТаблицаРеквизитов(Объект.Шаблон, Истина);	
	ТаблицаСотрудники = Объект.Сотрудники.Выгрузить();
	
	Для Каждого СтрокаСотрудник Из ТаблицаСотрудники Цикл
		
		Для Каждого ОписаниеРеквизита Из ТаблицаРеквизитовСпискаСотрудников Цикл

			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Реквизит", ОписаниеРеквизита.Ссылка);
			ПараметрыОтбора.Вставить("ИдентификаторСтроки", СтрокаСотрудник.НомерСтроки);
			СтрокиСоЗначениемРеквизита = Объект.ЗначенияРеквизитов.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиСоЗначениемРеквизита.Количество() > 0 Тогда
				СтрокаСотрудник["Реквизит_"+СтрЗаменить(Строка(ОписаниеРеквизита.Ссылка.УникальныйИдентификатор()), "-", "_")] = СтрокиСоЗначениемРеквизита[0].Значение;
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Объект.Сотрудники.Загрузить(ТаблицаСотрудники);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаРеквизитов(Шаблон, РеквизитыСпискаСотрудников = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеквизитыПроизвольныхКадровыхПриказов.Ссылка,
	|	РеквизитыПроизвольныхКадровыхПриказов.Наименование,
	|	РеквизитыПроизвольныхКадровыхПриказов.ТипЗначения,
	|	РеквизитыПроизвольныхКадровыхПриказов.ОбязательноДляЗаполнения,
	|	РеквизитыПроизвольныхКадровыхПриказов.РеквизитУпорядочивания КАК РеквизитУпорядочивания
	|ИЗ
	|	ПланВидовХарактеристик.РеквизитыПроизвольныхКадровыхПриказов КАК РеквизитыПроизвольныхКадровыхПриказов
	|ГДЕ
	|	РеквизитыПроизвольныхКадровыхПриказов.Шаблон = &Шаблон
	|	И "+ ?(РеквизитыСпискаСотрудников, "", "НЕ") + " РеквизитыПроизвольныхКадровыхПриказов.ИспользуетсяВТабличнойЧасти
	|   И НЕ РеквизитыПроизвольныхКадровыхПриказов.ВАрхиве
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитУпорядочивания";  
	
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокСотрудников();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСотрудников()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Сотрудники.Очистить();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем сотрудников
	ПараметрыВТСотрудники = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыВТСотрудники.Организация 		= Объект.Организация;
	ПараметрыВТСотрудники.Подразделение		= Объект.Подразделение;
	ПараметрыВТСотрудники.НачалоПериода		= НачалоМесяца(Объект.Дата);
	ПараметрыВТСотрудники.ОкончаниеПериода 	= КонецМесяца(Объект.Дата);
	ПараметрыВТСотрудники.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыВТСотрудники);
	
	// Уточняем кадровые данные на полученных сотрудников.
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТСотрудникиОрганизации");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "Подразделение,Должность");
	
	// Упорядочиваем результаты
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадровыеДанныеСотрудников.Сотрудник,
	|	Сотрудники.Наименование
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = КадровыеДанныеСотрудников.Сотрудник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Наименование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Сотрудники.Добавить();
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
	КонецЦикла;    
	
КонецПроцедуры

&НаСервере
Функция РеквизитСуществует(РеквизитыФормы, Реквизит) 
	
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
		Если РеквизитФормы.Имя = Реквизит.Имя Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
