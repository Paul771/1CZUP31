
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ДоступноОформлениеОтпусков = Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная,ДобавлениеИзменениеОтпусков");
	ДоступноОформлениеПереносов = Пользователи.РолиДоступны("ДобавлениеИзменениеОтпусков");
	
	Если Параметры.Ключ.Пустая() Тогда
	
		// Заполнение нового документа.
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный",
			"Объект.Организация",
			"Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		ЗаполнитьДанныеФормыПоОрганизации();
		
		ИнициализироватьФорму();
		ПриПолученииДанныхНаСервере();
		
		УстановитьИнформационнуюНадпись(ЭтаФорма);
	
	КонецЕсли; 
		
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтаФорма, "СотрудникиСотрудник");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанДокументОтпуск" Тогда
		ЗаполнитьСвязанныеДокументы();
	ИначеЕсли ИмяСобытия = "ЗаписанДокументПеренос" Тогда
		СтруктураПоиска = Новый Структура("Сотрудник, ВидОтпуска, ДатаНачала");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Параметр);
		СтрокиПоСотруднику = Объект.Сотрудники.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПоСотруднику.Количество() > 0 Тогда
			ЗаполнитьСвязанныеДокументы();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ИнициализироватьФорму();
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ГрафикОтпусков", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
    ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительКадровойСлужбыПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СотрудникиОтпуск" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработатьТекущийОтпуск(ВыбраннаяСтрока);
		
	ИначеЕсли Поле.Имя = "СотрудникиПеренос" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработатьТекущийПеренос(ВыбраннаяСтрока);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ТекущиеДанные.Рассчитан Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сотруднику %1 уже начислены отпускные и оформлено отсутствие.
				|Продолжить?'"),
				ТекущиеДанные.Сотрудник);
				
		Оповещение = Новый ОписаниеОповещения("СотрудникиПередУдалениемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		
		Отказ = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалениемЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
		Объект.Сотрудники.Удалить(ТекущиеДанные);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		Элемент.ТекущиеДанные.ВидОтпуска = ПредопределенноеЗначение("Справочник.ВидыОтпусков.ПустаяСсылка");
		Элемент.ТекущиеДанные.ДатаНачала = '00010101';
		Элемент.ТекущиеДанные.ДатаОкончания = '00010101';
		Элемент.ТекущиеДанные.Перенос = ПредопределенноеЗначение("Документ.ПереносОтпуска.ПустаяСсылка");
		Элемент.ТекущиеДанные.Отпуск = ПредопределенноеЗначение("Документ.Отпуск.ПустаяСсылка");
		Элемент.ТекущиеДанные.Рассчитан = Ложь;
		Элемент.ТекущиеДанные.Проведен = Ложь;
		Элемент.ТекущиеДанные.ПереносПроведен = Ложь;
		Элемент.ТекущиеДанные.ОписаниеПеренесенногоОтпуска = "";
		Элемент.ТекущиеДанные.КоличествоДней = 0;
		
		СотрудникиСотрудникПриИзмененииНаСервере(Элементы.Сотрудники.ТекущаяСтрока);
		
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидОтпуска) Тогда
			Элемент.ТекущиеДанные.ПереносПроведен = Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИнформационнуюНадпись(ЭтаФорма);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиОбработкаВыбораНаСервере(ВыбранноеЗначение);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	СотрудникиСотрудникПриИзмененииНаСервере(Элементы.Сотрудники.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВидОтпускаПриИзменении(Элемент)
	
	УстановитьКоличествоДнейНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) 
		И НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания)
		И ТекущиеДанные.КоличествоДней > 0 Тогда
		ОписаниеВидаОтпуска = ОписаниеВидаОтпуска(ТекущиеДанные.ВидОтпуска);
		ТекущиеДанные.ДатаОкончания = ОстаткиОтпусковКлиентСервер.ДатаОкончанияОтпуска(ТекущиеДанные.Сотрудник, ТекущиеДанные.ДатаНачала, ТекущиеДанные.КоличествоДней, ОписаниеВидаОтпуска);
		
	Иначе
		ПриИзмененииПериодаОтпуска();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииПериодаОтпуска();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиКоличествоДнейПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.КоличествоДней > 0 И ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) Тогда
		ОписаниеВидаОтпуска = ОписаниеВидаОтпуска(ТекущиеДанные.ВидОтпуска);
		ТекущиеДанные.ДатаОкончания = ОстаткиОтпусковКлиентСервер.ДатаОкончанияОтпуска(ТекущиеДанные.Сотрудник, ТекущиеДанные.ДатаНачала, ТекущиеДанные.КоличествоДней, ОписаниеВидаОтпуска);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПроверитьПравильностьОформленныхОтпусков(Команда)
	
	ДатыОстатков = Новый Соответствие;
	ДанныеОРасхождениях = ДанныеОРасхожденияхСУчетом(ДатыОстатков);
	Если ДанныеОРасхождениях.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Документ оформлен правильно'"));
	Иначе
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДанныеОРасхождениях", ДанныеОРасхождениях);
		ПараметрыОткрытия.Вставить("ДатыОстатков", ДатыОстатков);
		
		ОткрытьФорму("Документ.ГрафикОтпусков.Форма.ФормаПроверкиПравильностиОформления", ПараметрыОткрытия, ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьОткрытьОтпуск(Команда)

	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат	
	КонецЕсли; 
	
	ОчиститьСообщения();
	
	ОбработатьТекущийОтпуск(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьОткрытьПеренос(Команда)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат	
	КонецЕсли; 
	
	ОчиститьСообщения();
	
	ОбработатьТекущийПеренос(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыОткрытия = Неопределено;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
		Модуль.УточнитьПараметрыОткрытияФормыВыбораСотрудников(ПараметрыОткрытия);
	КонецЕсли; 
		
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники, 
		Объект.Организация,
		,
		Объект.Дата,
		,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ГрафикОтпусков.Сотрудники";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка сотрудников из файла'");
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьСотрудниковИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузитьСотрудниковИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСотрудниковИзФайлаНаСервере(АдресЗагруженныхДанных);
			
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСотрудниковИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	СотрудникиДобавлены = Ложь;
	  
	ТаблицаДанных = ОстаткиОтпусков.ОписаниеТаблицыДанных();
	
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаДанных.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
		
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда 
			Продолжить;
		КонецЕсли;
		
		Строка = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаТаблицы);
		Строка.ДатаОстатков     		= Объект.Дата;
	    Строка.ЭтоРасчетПриУвольнении   = Ложь;
		
		Если ЗначениеЗаполнено(Строка.ВидОтпуска) Тогда 
			ОписаниеВидаОтпуска = ОстаткиОтпусков.ОписаниеВидаОтпуска(Строка.ВидОтпуска);
			Строка.КоличествоДней = УчетРабочегоВремениРасширенный.ДлительностьИнтервала(Строка.Сотрудник, Строка.ДатаНачала, Строка.ДатаОкончания, ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
		КонецЕсли;
		
		СотрудникиДобавлены = Истина;
		
	КонецЦикла;
	
	СоответствиеФизЛиц = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТаблицаДанных.ВыгрузитьКолонку("Сотрудник"), "ФизическоеЛицо");

	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		СтрокаТаблицы.ФизическоеЛицо = СоответствиеФизЛиц[СтрокаТаблицы.Сотрудник];
	КонецЦикла;
	
	Объект.Сотрудники.Загрузить(ТаблицаДанных);
		
	Если СотрудникиДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ЗаполнитьСвязанныеДокументы();
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрежниеЗначения()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Для каждого СтрокаСотрудники Из Объект.Сотрудники Цикл
				ЗаполнитьПрежниеЗначенияСтроки(СтрокаСотрудники);
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПрежниеЗначенияСтроки(СтрокаСотрудники)

	Если ЗначениеЗаполнено(СтрокаСотрудники.Отпуск) Тогда
		СтрокаСотрудники.ВидОтпускаПрежний = СтрокаСотрудники.ВидОтпуска;
		СтрокаСотрудники.ДатаНачалаПрежняя = СтрокаСотрудники.ДатаНачала;
		СтрокаСотрудники.ДатаОкончанияПрежняя = СтрокаСотрудники.ДатаОкончанияПрежняя;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстанавливаемыеПараметры = Новый Структура;
	УстанавливаемыеПараметры.Вставить("Организация", Объект.Организация);
	
	УстановитьПараметрыФункциональныхОпцийФормы(УстанавливаемыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	ЗаполнитьДанныеФормыПоОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиСотрудникПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
			ЗаполнитьСтрокуСотрудника(ТекущиеДанные);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуСотрудника(ТекущиеДанные)
	
	ВидыОтпусковСотрудника = Новый Массив;
		
	ДанныеПоОтпускамСотрудника = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ТекущиеДанные.Сотрудник));
	ДанныеПоОтпускамСотрудника.Удалить(ДанныеПоОтпускамСотрудника.Найти(ТекущиеДанные));
	
	НачалоПериодаОтпуска = '00010101';
	ОкончаниеПериодаОтпуска = '00010101';
	МаксимальнаяДатаОкончания = '00010101';
	Для каждого ДанныеОтпуска Из ДанныеПоОтпускамСотрудника Цикл
		
		ВидыОтпусковСотрудника.Добавить(ДанныеОтпуска.ВидОтпуска);
		Если МаксимальнаяДатаОкончания <= ДанныеОтпуска.ДатаОкончания Тогда
			МаксимальнаяДатаОкончания = КонецДня(ДанныеОтпуска.ДатаОкончания) + 1;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидОтпуска) И ВидыОтпусковСотрудника.Найти(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной")) = Неопределено Тогда
		ТекущиеДанные.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	КонецЕсли;
	
	ТекущиеДанные.ДатаНачала = МаксимальнаяДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Функция ПриИзмененииПериодаОтпуска()
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник)
		И ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания)
		И ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) 
		И ТекущиеДанные.ДатаНачала <= ТекущиеДанные.ДатаОкончания Тогда
		
		УстановитьКоличествоДнейНаСервере();
		
	Иначе
		ТекущиеДанные.КоличествоДней = 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСвязанныеДокументы()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикОтпусковСотрудники.НомерСтроки,
	|	ГрафикОтпусковСотрудники.Сотрудник КАК Сотрудник,
	|	ГрафикОтпусковСотрудники.ВидОтпуска КАК ВидОтпуска,
	|	ГрафикОтпусковСотрудники.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ГрафикОтпусков.Сотрудники КАК ГрафикОтпусковСотрудники
	|ГДЕ
	|	ГрафикОтпусковСотрудники.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереносОтпуска.Сотрудник КАК Сотрудник,
	|	ПереносОтпуска.ВидОтпуска КАК ВидОтпуска,
	|	ПереносОтпуска.Ссылка,
	|	ПереносОтпуска.Проведен,
	|	ПереносОтпуска.ИсходнаяДатаНачала,
	|	ПереносОтпуска.ДатаНачала
	|ПОМЕСТИТЬ ВТПереносы
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереносОтпуска КАК ПереносОтпуска
	|		ПО ДанныеДокумента.Сотрудник = ПереносОтпуска.Сотрудник
	|			И ДанныеДокумента.ВидОтпуска = ПереносОтпуска.ВидОтпуска
	|			И ДанныеДокумента.ДатаНачала = ПереносОтпуска.ИсходнаяДатаНачала
	|			И (НЕ ПереносОтпуска.ПометкаУдаления)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикОтпусковСотрудники.НомерСтроки,
	|	ГрафикОтпусковСотрудники.Сотрудник КАК Сотрудник,
	|	ГрафикОтпусковСотрудники.ВидОтпуска КАК ВидОтпуска,
	|	ДОБАВИТЬКДАТЕ(ВЫБОР
	|			КОГДА Переносы.Проведен
	|				ТОГДА Переносы.ДатаНачала
	|			ИНАЧЕ ГрафикОтпусковСотрудники.ДатаНачала
	|		КОНЕЦ, ДЕНЬ, -1) КАК ДатаНачалаФакта,
	|	ДОБАВИТЬКДАТЕ(ВЫБОР
	|			КОГДА Переносы.Проведен
	|				ТОГДА Переносы.ДатаНачала
	|			ИНАЧЕ ГрафикОтпусковСотрудники.ДатаНачала
	|		КОНЕЦ, ДЕНЬ, 1) КАК ДатаОкончанияФакта,
	|	ГрафикОтпусковСотрудники.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ВТПлановыеОтпуска
	|ИЗ
	|	ВТДанныеДокумента КАК ГрафикОтпусковСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереносы КАК Переносы
	|		ПО ГрафикОтпусковСотрудники.Сотрудник = Переносы.Сотрудник
	|			И ГрафикОтпусковСотрудники.ВидОтпуска = Переносы.ВидОтпуска
	|			И ГрафикОтпусковСотрудники.ДатаНачала = Переносы.ИсходнаяДатаНачала
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Отпуск.Ссылка,
	|	Отпуск.Сотрудник КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной) КАК ВидОтпуска,
	|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачала,
	|	Отпуск.Проведен
	|ПОМЕСТИТЬ ВТФактическиеОтпуска
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК Отпуск
	|		ПО ДанныеДокумента.Сотрудник = Отпуск.Сотрудник
	|			И (НЕ Отпуск.ПометкаУдаления)
	|ГДЕ
	|	Отпуск.ПредоставитьОсновнойОтпуск
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускДополнительныеОтпуска.Ссылка,
	|	ОтпускДополнительныеОтпуска.Ссылка.Сотрудник,
	|	ОтпускДополнительныеОтпуска.ВидОтпуска,
	|	ОтпускДополнительныеОтпуска.ДатаНачала,
	|	ОтпускДополнительныеОтпуска.Ссылка.Проведен
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
	|		ПО ДанныеДокумента.Сотрудник = ОтпускДополнительныеОтпуска.Ссылка.Сотрудник
	|			И ДанныеДокумента.ВидОтпуска = ОтпускДополнительныеОтпуска.ВидОтпуска
	|			И (НЕ ОтпускДополнительныеОтпуска.Ссылка.ПометкаУдаления)
	|ГДЕ
	|	ОтпускДополнительныеОтпуска.Ссылка.ПредоставитьДополнительныйОтпуск
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеОтпуска.НомерСтроки,
	|	МАКСИМУМ(ФактическиеОтпуска.Ссылка) КАК Отпуск
	|ПОМЕСТИТЬ ВТПроведенныеОтпуска
	|ИЗ
	|	ВТПлановыеОтпуска КАК ПлановыеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФактическиеОтпуска КАК ФактическиеОтпуска
	|		ПО ПлановыеОтпуска.Сотрудник = ФактическиеОтпуска.Сотрудник
	|			И ПлановыеОтпуска.ВидОтпуска = ФактическиеОтпуска.ВидОтпуска
	|			И (ФактическиеОтпуска.ДатаНачала МЕЖДУ ПлановыеОтпуска.ДатаНачалаФакта И ПлановыеОтпуска.ДатаОкончанияФакта)
	|			И (ФактическиеОтпуска.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеОтпуска.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеОтпуска.НомерСтроки,
	|	МАКСИМУМ(ФактическиеОтпуска.Ссылка) КАК Отпуск
	|ПОМЕСТИТЬ ВТНеПроведенныеОтпуска
	|ИЗ
	|	ВТПлановыеОтпуска КАК ПлановыеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФактическиеОтпуска КАК ФактическиеОтпуска
	|		ПО ПлановыеОтпуска.Сотрудник = ФактическиеОтпуска.Сотрудник
	|			И ПлановыеОтпуска.ВидОтпуска = ФактическиеОтпуска.ВидОтпуска
	|			И (ФактическиеОтпуска.ДатаНачала МЕЖДУ ПлановыеОтпуска.ДатаНачалаФакта И ПлановыеОтпуска.ДатаОкончанияФакта)
	|			И (НЕ ФактическиеОтпуска.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеОтпуска.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеОтпуска.НомерСтроки,
	|	МАКСИМУМ(Переносы.Ссылка) КАК Перенос
	|ПОМЕСТИТЬ ВТПроведенныеПереносы
	|ИЗ
	|	ВТПлановыеОтпуска КАК ПлановыеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПереносы КАК Переносы
	|		ПО ПлановыеОтпуска.Сотрудник = Переносы.Сотрудник
	|			И ПлановыеОтпуска.ВидОтпуска = Переносы.ВидОтпуска
	|			И ПлановыеОтпуска.ДатаНачала = Переносы.ИсходнаяДатаНачала
	|			И (Переносы.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеОтпуска.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеОтпуска.НомерСтроки,
	|	МАКСИМУМ(Переносы.Ссылка) КАК Перенос
	|ПОМЕСТИТЬ ВТНепроведенныеПереносы
	|ИЗ
	|	ВТПлановыеОтпуска КАК ПлановыеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПереносы КАК Переносы
	|		ПО ПлановыеОтпуска.Сотрудник = Переносы.Сотрудник
	|			И ПлановыеОтпуска.ВидОтпуска = Переносы.ВидОтпуска
	|			И ПлановыеОтпуска.ДатаНачала = Переносы.ИсходнаяДатаНачала
	|			И (НЕ Переносы.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеОтпуска.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикОтпусковСотрудники.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ПроведенныеОтпуска.Отпуск ЕСТЬ НЕ NULL 
	|			ТОГДА ПроведенныеОтпуска.Отпуск
	|		КОГДА НеПроведенныеОтпуска.Отпуск ЕСТЬ НЕ NULL 
	|			ТОГДА НеПроведенныеОтпуска.Отпуск
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.Отпуск.ПустаяСсылка)
	|	КОНЕЦ КАК Отпуск,
	|	ВЫБОР
	|		КОГДА ПроведенныеОтпуска.Отпуск ЕСТЬ НЕ NULL 
	|			ТОГДА ПроведенныеОтпуска.Отпуск.ДокументРассчитан
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Рассчитан,
	|	ВЫБОР
	|		КОГДА ПроведенныеОтпуска.Отпуск ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Проведен,
	|	ВЫБОР
	|		КОГДА ПроведенныеПереносы.Перенос ЕСТЬ НЕ NULL 
	|			ТОГДА ПроведенныеПереносы.Перенос
	|		КОГДА НепроведенныеПереносы.Перенос ЕСТЬ НЕ NULL 
	|			ТОГДА НепроведенныеПереносы.Перенос
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ПереносОтпуска.ПустаяСсылка)
	|	КОНЕЦ КАК Перенос,
	|	ВЫБОР
	|		КОГДА ПроведенныеПереносы.Перенос ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПереносПроведен,
	|	ПереносОтпуска.ДатаНачала КАК ДатаНачалаПеренесенногоОтпуска,
	|	ПереносОтпуска.ДатаОкончания КАК ДатаОкончанияПеренесенногоОтпуска
	|ИЗ
	|	ВТПлановыеОтпуска КАК ГрафикОтпусковСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроведенныеОтпуска КАК ПроведенныеОтпуска
	|		ПО ГрафикОтпусковСотрудники.НомерСтроки = ПроведенныеОтпуска.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеПроведенныеОтпуска КАК НеПроведенныеОтпуска
	|		ПО ГрафикОтпусковСотрудники.НомерСтроки = НеПроведенныеОтпуска.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроведенныеПереносы КАК ПроведенныеПереносы
	|		ПО ГрафикОтпусковСотрудники.НомерСтроки = ПроведенныеПереносы.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНепроведенныеПереносы КАК НепроведенныеПереносы
	|		ПО ГрафикОтпусковСотрудники.НомерСтроки = НепроведенныеПереносы.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПереносОтпуска КАК ПереносОтпуска
	|		ПО (ВЫБОР
	|				КОГДА ПроведенныеПереносы.Перенос ЕСТЬ НЕ NULL 
	|					ТОГДА ПроведенныеПереносы.Перенос
	|				КОГДА НепроведенныеПереносы.Перенос ЕСТЬ НЕ NULL 
	|					ТОГДА НепроведенныеПереносы.Перенос
	|				ИНАЧЕ ЗНАЧЕНИЕ(Документ.ПереносОтпуска.ПустаяСсылка)
	|			КОНЕЦ = ПереносОтпуска.Ссылка)";
	ТаблицаОтпусков = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицыОтпусков Из ТаблицаОтпусков Цикл
		
		СтрокиОтпусков =  Объект.Сотрудники.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТаблицыОтпусков.НомерСтроки));
		Если СтрокиОтпусков.Количество() > 0 Тогда
			ЗаполняемаяСтрока = СтрокиОтпусков[0];
			ЗаполнитьЗначенияСвойств(ЗаполняемаяСтрока, СтрокаТаблицыОтпусков, , "НомерСтроки");
			Если ЗначениеЗаполнено(СтрокаТаблицыОтпусков.Перенос) Тогда
				ЗаполняемаяСтрока.ОписаниеПеренесенногоОтпуска = НСтр("ru='на период с'") + " " + Формат(СтрокаТаблицыОтпусков.ДатаНачалаПеренесенногоОтпуска, "ДЛФ=D") + " " + НСтр("ru='по'") + " " + Формат(СтрокаТаблицыОтпусков.ДатаОкончанияПеренесенногоОтпуска, "ДЛФ=D")
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	ЗаполнитьПрежниеЗначения();
	УстановитьИнформационнуюНадпись(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбщиеДанныеЗаполнения(Объект, Сотрудник, ДокументОтпуск)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Действие", "Заполнить");
	ПараметрыЗаполнения.Вставить("ДокументОтпуск", ДокументОтпуск);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("Сотрудник", Сотрудник);
	ПараметрыЗаполнения.Вставить("Ссылка", Объект.Ссылка);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЗаполненияСтроки(СтрокаОтпуска, ДатаНачалаЗаполняемогоОтпуска = Неопределено, ДатаОкончанияЗаполняемогоОтпуска = Неопределено)
	
	СтруктураОтпуска = Новый Структура;
		
	СтруктураОтпуска.Вставить("ВидОтпуска", СтрокаОтпуска.ВидОтпуска);
	СтруктураОтпуска.Вставить("ДатаНачала", ?(ДатаНачалаЗаполняемогоОтпуска = Неопределено, СтрокаОтпуска.ДатаНачала, ДатаНачалаЗаполняемогоОтпуска));
	СтруктураОтпуска.Вставить("ДатаОкончания", ?(ДатаОкончанияЗаполняемогоОтпуска = Неопределено, СтрокаОтпуска.ДатаОкончания, ДатаОкончанияЗаполняемогоОтпуска));
	СтруктураОтпуска.Вставить("КоличествоДней", СтрокаОтпуска.КоличествоДней);
	СтруктураОтпуска.Вставить("ВидОтпускаПрежний", СтрокаОтпуска.ВидОтпускаПрежний);
	СтруктураОтпуска.Вставить("ИндексСтрокиДокумента", СтрокаОтпуска.НомерСтроки - 1);
	
	Возврат СтруктураОтпуска;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьТекущийОтпуск(ИдентификаторСтроки)
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	ДополнительныеПараметры = Новый Структура("ПерезаполнитьНачисления", Ложь);
	
	Если Модифицированность Или Не ЗначениеЗаполнено(ТекущиеДанные.Отпуск) Тогда
		ДополнительныеПараметры.ПерезаполнитьНачисления = Истина;
		Оповещение = Новый ОписаниеОповещения("ОбработатьТекущийОтпускЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДобавитьОтпускКДокументу(Оповещение);
	Иначе 
		ОбработатьТекущийОтпускЗавершение(ТекущиеДанные, ДополнительныеПараметры);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТекущийОтпускЗавершение(ТекущиеДанные, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Отпуск) Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.Отпуск);
		ПараметрыОткрытия.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ПараметрыОткрытия.Вставить("ПерезаполнитьНачисления", ДополнительныеПараметры.ПерезаполнитьНачисления);
		
		ОткрытьФорму("Документ.Отпуск.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТекущийПеренос(ИдентификаторСтроки)
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Модифицированность Или Не ЗначениеЗаполнено(ТекущиеДанные.Перенос) Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьТекущийПереносЗавершение", ЭтотОбъект);
		ДобавитьПереносКДокументу(Оповещение);
	Иначе 
		ОбработатьТекущийПереносЗавершение(ТекущиеДанные, Неопределено);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТекущийПереносЗавершение(ТекущиеДанные, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Перенос) Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.Перенос);
		ПараметрыОткрытия.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		ОткрытьФорму("Документ.ПереносОтпуска.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтпускКДокументу(ОповещениеЗавершения = Неопределено)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗаписатьДокумент", Истина);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Модифицированность Тогда
			
			ТекстВопроса = НСтр("ru='Оформить отпуск можно только после записи этого документа.
									|Записать этот документ?'");
									
			Оповещение = Новый ОписаниеОповещения("ДобавитьОтпускКДокументуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
			
		Иначе
			
			ДополнительныеПараметры.ЗаписатьДокумент = Ложь;
			ДобавитьОтпускКДокументуЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры)
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтпускКДокументуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗаписатьДокумент И Не Записать() Тогда 
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Отпуск) Тогда
		ПараметрыЗаполненияСтроки = ПараметрыЗаполненияОтпуска(ТекущиеДанные.Сотрудник, Элементы.Сотрудники.ТекущаяСтрока);
		Если ПараметрыЗаполненияСтроки.Количество() > 0 Тогда
			РезультатЗаполнения = РасчетныйДокументПоПараметрыЗаполнения(ТекущиеДанные.Сотрудник, ПараметрыЗаполненияСтроки[0]);
			Если РезультатЗаполнения.Отпуск <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, РезультатЗаполнения);
				ЗаполнитьПрежниеЗначенияСтроки(ТекущиеДанные);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПереносКДокументу(ОповещениеЗавершения = Неопределено)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗаписатьДокумент", Истина);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Модифицированность Тогда
			
			ТекстВопроса = НСтр("ru='Оформить перенос можно только после записи этого документа.
									|Записать этот документ?'");
									
			Оповещение = Новый ОписаниеОповещения("ДобавитьПереносКДокументуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
				
		Иначе
			
			ДополнительныеПараметры.ЗаписатьДокумент = Ложь;
			ДобавитьПереносКДокументуЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПереносКДокументуЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗаписатьДокумент И Не Записать() Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	ПараметрыЗаполненияСтроки = ПараметрыЗаполненияПереноса(ТекущиеДанные.Сотрудник, Элементы.Сотрудники.ТекущаяСтрока);
	Если ПараметрыЗаполненияСтроки.Количество() > 0 Тогда
		ПереносСсылка = ПереносПоПараметрамЗаполнения(ПараметрыЗаполненияСтроки[0]);
		Если ПереносСсылка <> Неопределено Тогда
			ТекущиеДанные.Перенос = ПереносСсылка;
		КонецЕсли;
	КонецЕсли; 
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоДнейНаСервере()
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	ОписаниеВидаОтпуска = ОстаткиОтпусков.ОписаниеВидаОтпуска(ТекущиеДанные.ВидОтпуска);
	ТекущиеДанные.КоличествоДней = УчетРабочегоВремениРасширенный.ДлительностьИнтервала(ТекущиеДанные.Сотрудник, ТекущиеДанные.ДатаНачала, ТекущиеДанные.ДатаОкончания, ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
	
	ДатаОкончания = ТекущиеДанные.ДатаОкончания;
	ДатаНачала = ТекущиеДанные.ДатаНачала;
	
	СтрокиПоСотруднику = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ТекущиеДанные.Сотрудник));
	ИндексСтрокиТекущегоОтпуска = СтрокиПоСотруднику.Найти(ТекущиеДанные);
	Если ИндексСтрокиТекущегоОтпуска <> Неопределено Тогда
		
		Для ИндексСтроки = ИндексСтрокиТекущегоОтпуска + 1 По СтрокиПоСотруднику.Количество() - 1 Цикл
			
			ДанныеСтроки = СтрокиПоСотруднику[ИндексСтроки];
			Если ДанныеСтроки.ДатаНачала <= ДатаОкончания И ДанныеСтроки.ДатаОкончания >= ДатаНачала Тогда
				
				ДанныеСтроки.ДатаНачала = КонецДня(ДатаОкончания) + 1;
				ОписаниеВидаОтпуска = ОписаниеВидаОтпуска(ДанныеСтроки.ВидОтпуска);
				ДанныеСтроки.ДатаОкончания = ОстаткиОтпусковКлиентСервер.ДатаОкончанияОтпуска(ДанныеСтроки.Сотрудник, ДанныеСтроки.ДатаНачала, ДанныеСтроки.КоличествоДней, ОписаниеВидаОтпуска);
				
				ДатаОкончания = ДанныеСтроки.ДатаОкончания;
			Иначе
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИнформационнуюНадпись(Форма)
	
	КоличествоСтрок = Форма.Объект.Сотрудники.Количество();
	
	НеОформленные = Форма.Объект.Сотрудники.НайтиСтроки(Новый Структура("Отпуск", ПредопределенноеЗначение("Документ.Отпуск.ПустаяСсылка")));
	КоличествоНеОформленных = НеОформленные.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		ИмяИнформационнойСтраницы = "ГруппаИнформационнаяПусто";
	ИначеЕсли КоличествоНеОформленных = КоличествоСтрок Тогда
		ИмяИнформационнойСтраницы = "ГруппаИнформационнаяВсеНеОформлены";
	ИначеЕсли КоличествоНеОформленных > 0 Тогда
		ИмяИнформационнойСтраницы = "ГруппаИнформационнаяОформленыНеВсе";
	Иначе
		ИмяИнформационнойСтраницы = "ГруппаИнформационнаяВсеОформлены";
	КонецЕсли; 
	
	ТекущаяСтраница = Форма.Элементы.Найти(ИмяИнформационнойСтраницы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГруппаИнформация",
		"ТекущаяСтраница",
		ТекущаяСтраница);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗаполненияОтпуска(Сотрудник, ИдентификаторСтрокиСотрудника)
	
	ПараметрыЗаполненияДокументов = Новый Массив;
	
	// Формирование массива обрабатываемых строк.
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтрокиСотрудника);
	Если СтрокаСотрудника = Неопределено Тогда
		Возврат ПараметрыЗаполненияДокументов
	КонецЕсли; 
	
	ДатаНачалаЗаполняемогоОтпуска = СтрокаСотрудника.ДатаНачала;
	ДатаОкончанияЗаполняемогоОтпуска = СтрокаСотрудника.ДатаОкончания;
	Если ЗначениеЗаполнено(СтрокаСотрудника.Перенос) И СтрокаСотрудника.ПереносПроведен Тогда
		ДанныеПереноса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаСотрудника.Перенос, "ДатаНачала, ДатаОкончания");
		ДатаНачалаЗаполняемогоОтпуска = ДанныеПереноса.ДатаНачала;
		ДатаОкончанияЗаполняемогоОтпуска = ДанныеПереноса.ДатаОкончания;
	КонецЕсли;
	
	// Формирование списка уже оформленных документов Отпуск.
	ВсеСтрокиСотрудника = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	
	ДокументыОтпуск = Новый Массив;
	Для каждого СтрокаМассива Из ВсеСтрокиСотрудника Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаМассива.Отпуск) ИЛИ СтрокаМассива.Рассчитан Тогда
			Продолжить;
		КонецЕсли; 
		ДокументыОтпуск.Добавить(СтрокаМассива.Отпуск);
	КонецЦикла;
	
	// Получение данных оформленных документов.
	ИменаРеквизитовДокумента = "ДатаНачалаПериодаОтсутствия,ДатаОкончанияПериодаОтсутствия,Проведен";
	ДанныеДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДокументыОтпуск, ИменаРеквизитовДокумента);
	
	ПодходящийДокумент = Неопределено;
	Для каждого ДанныеДокумента Из ДанныеДокументов Цикл
		
		ЗначенияРеквизитовДокумента = ДанныеДокумента.Значение;
		
		Если КонецДня(ЗначенияРеквизитовДокумента.ДатаОкончанияПериодаОтсутствия) + 1 = ДатаНачалаЗаполняемогоОтпуска
			ИЛИ КонецДня(ДатаОкончанияЗаполняемогоОтпуска) + 1 = ЗначенияРеквизитовДокумента.ДатаНачалаПериодаОтсутствия Тогда
			
			ПодходящийДокумент = ДанныеДокумента.Ключ;
			Если ЗначенияРеквизитовДокумента.Проведен = Истина Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновление данных оформленного документа, если подходящего документа нет
	// отпуск относится к пустому документу.
	ЗначенияРеквизитовДокумента = ДанныеДокументов.Получить(ПодходящийДокумент);
	Если ЗначенияРеквизитовДокумента = Неопределено Тогда
		
		ЗначенияРеквизитовДокумента = Новый Структура(ИменаРеквизитовДокумента);
		
		ЗначенияРеквизитовДокумента.ДатаНачалаПериодаОтсутствия = ДатаНачалаЗаполняемогоОтпуска;
		ЗначенияРеквизитовДокумента.ДатаОкончанияПериодаОтсутствия = ДатаОкончанияЗаполняемогоОтпуска;
		
	Иначе
		
		Если КонецДня(ЗначенияРеквизитовДокумента.ДатаОкончанияПериодаОтсутствия) + 1 = ДатаНачалаЗаполняемогоОтпуска Тогда
			ЗначенияРеквизитовДокумента.ДатаОкончанияПериодаОтсутствия = ДатаОкончанияЗаполняемогоОтпуска;
		ИначеЕсли КонецДня(ДатаОкончанияЗаполняемогоОтпуска) + 1 = ЗначенияРеквизитовДокумента.ДатаНачалаПериодаОтсутствия Тогда
			ЗначенияРеквизитовДокумента.ДатаНачалаПериодаОтсутствия = ДатаНачалаЗаполняемогоОтпуска;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ЗначенияРеквизитовДокумента.Свойство("МассивСтрокДокумента") Тогда
		МассивСтрокДокумента = ЗначенияРеквизитовДокумента.МассивСтрокДокумента;
	Иначе
		МассивСтрокДокумента = Новый Массив;
	КонецЕсли; 
	
	МассивСтрокДокумента.Добавить(СтрокаСотрудника);
	ЗначенияРеквизитовДокумента.Вставить("МассивСтрокДокумента", МассивСтрокДокумента);
	
	// Если подходящего документа не было найдено, создадим уникальный ключ
	// для списка связанных датами строк.
	Если ПодходящийДокумент = Неопределено Тогда
		ПодходящийДокумент = Новый УникальныйИдентификатор();
	КонецЕсли; 
	ДанныеДокументов.Вставить(ПодходящийДокумент, ЗначенияРеквизитовДокумента);
	
	// Формирование списка параметров заполнения документов Отпуск.
	Для каждого ДанныеДокумента Из ДанныеДокументов Цикл
		
		Если НЕ ДанныеДокумента.Значение.Свойство("МассивСтрокДокумента") Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ТипЗнч(ДанныеДокумента.Ключ) = Тип("ДокументСсылка.Отпуск") Тогда
			ДокументОтпуск = ДанныеДокумента.Ключ;
		Иначе
			ДокументОтпуск = Документы.Отпуск.ПустаяСсылка();
		КонецЕсли;
		
		ПараметрыЗаполнения = ОбщиеДанныеЗаполнения(Объект, Сотрудник, ДокументОтпуск);
		
		ДанныеОтпусков = Новый Массив;
		Для каждого СтрокаДокумента Из ДанныеДокумента.Значение.МассивСтрокДокумента Цикл
			ДанныеОтпусков.Добавить(ДанныеЗаполненияСтроки(СтрокаДокумента, ДатаНачалаЗаполняемогоОтпуска, ДатаОкончанияЗаполняемогоОтпуска));
		КонецЦикла;
		
		ПараметрыЗаполнения.Вставить("ДанныеОтпусков", ДанныеОтпусков);
		ПараметрыЗаполнения.Вставить("АвторасчетПериодаПредоставления", Истина);
		
		ПараметрыЗаполненияДокументов.Добавить(ПараметрыЗаполнения);
		
	КонецЦикла;
	
	Возврат ПараметрыЗаполненияДокументов;
	
КонецФункции

&НаСервере
Функция ПараметрыЗаполненияПереноса(Сотрудник, ИдентификаторСтрокиСотрудника)
	
	ПараметрыЗаполненияДокументов = Новый Массив;
	
	// Формирование массива обрабатываемых строк.
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтрокиСотрудника);
	Если СтрокаСотрудника = Неопределено Или ЗначениеЗаполнено(СтрокаСотрудника.Перенос) Тогда
		Возврат ПараметрыЗаполненияДокументов
	КонецЕсли; 
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Действие", "Заполнить");
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("Сотрудник", СтрокаСотрудника.Сотрудник);
	ПараметрыЗаполнения.Вставить("ИсходнаяДатаНачала", СтрокаСотрудника.ДатаНачала);
	ПараметрыЗаполнения.Вставить("ВидОтпуска", СтрокаСотрудника.ВидОтпуска);
	ПараметрыЗаполнения.Вставить("ИсходнаяДатаНачала", СтрокаСотрудника.ДатаНачала);
	ПараметрыЗаполнения.Вставить("ДатаНачала", СтрокаСотрудника.ДатаНачала);
	ПараметрыЗаполнения.Вставить("ДатаОкончания", СтрокаСотрудника.ДатаОкончания);
	ПараметрыЗаполнения.Вставить("Руководитель", Объект.Руководитель);
	ПараметрыЗаполнения.Вставить("ДолжностьРуководителя", Объект.ДолжностьРуководителя);
	
	ПараметрыЗаполненияДокументов.Добавить(ПараметрыЗаполнения);
	
	Возврат ПараметрыЗаполненияДокументов;
	
КонецФункции

&НаСервере
Функция РасчетныйДокументПоПараметрыЗаполнения(Сотрудник, ПараметрыЗаполнения)
	
	РезультатЗаполнения = Новый Структура("Рассчитан,Проведен,ОтпускРассчитал,Отпуск", Ложь, Ложь);
	УстановитьПривилегированныйРежим(Истина);
	
	ПодходящийДокумент = ПараметрыЗаполнения.ДокументОтпуск;
	
	Если ЗначениеЗаполнено(ПодходящийДокумент) Тогда
		ДокументОтпуск = ПодходящийДокумент.ПолучитьОбъект();
	Иначе
		ДокументОтпуск = Документы.Отпуск.СоздатьДокумент();
	КонецЕсли;
	
	ДокументОтпуск.Заполнить(ПараметрыЗаполнения);
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") Тогда
		ДокументОтпуск.ДокументРассчитан = Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	Документы.Отпуск.ПроверитьРаботающих(ДокументОтпуск, Отказ);
	
	Если НЕ Отказ Тогда
		
		ДокументОтпуск.Записать(РежимЗаписиДокумента.Запись);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") Тогда
		
			Попытка
				
				Если НЕ ТранзакцияАктивна() Тогда
					ДокументОтпуск.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли; 
				
			Исключение
				Инфо = ИнформацияОбОшибке();
				ВызватьИсключение НСтр("ru='Не удалось записать'") + " " + Строка(ДокументОтпуск.Ссылка);
			КонецПопытки;
			
		КонецЕсли;
			
	Иначе
		
		СообщенияПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина);
		Если СообщенияПроверкиЗаполнения <> Неопределено Тогда
			
			Для каждого СообщениеПроверки Из СообщенияПроверкиЗаполнения Цикл
				
				Если СообщениеПроверки.Поле = "Сотрудник" Тогда
					СообщениеПроверки.Поле = "Сотрудники[" + ПараметрыЗаполнения.ДанныеОтпусков[0].ИндексСтрокиДокумента + "]." + СообщениеПроверки.Поле;
				КонецЕсли;
				
				СообщениеПроверки.Сообщить();
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	РезультатЗаполнения.Вставить("Отпуск", ДокументОтпуск.Ссылка);
	РезультатЗаполнения.Вставить("Рассчитан", ДокументОтпуск.ДокументРассчитан И ДокументОтпуск.Проведен);
	РезультатЗаполнения.Вставить("Проведен", ДокументОтпуск.Проведен);
	РезультатЗаполнения.Вставить("ОтпускРассчитал", ДокументОтпуск.Рассчитал);
	
	ЗаполнитьСвязанныеДокументы();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗаполнения;
	
КонецФункции

&НаСервере
Функция ПереносПоПараметрамЗаполнения(ПараметрыЗаполнения)
	
	СсылкаНаПеренос = Неопределено;
	
	ДокументПеренос = Документы.ПереносОтпуска.СоздатьДокумент();
	ДокументПеренос.Заполнить(ПараметрыЗаполнения);
	
	Отказ = Ложь;
	Документы.ПереносОтпуска.ПроверитьРаботающих(ДокументПеренос, Отказ);
	
	Если НЕ Отказ Тогда
		
		ДокументПеренос.Записать(РежимЗаписиДокумента.Запись);
		СсылкаНаПеренос = ДокументПеренос.Ссылка;
		
	Иначе
		
		СообщенияПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина);
		Если СообщенияПроверкиЗаполнения <> Неопределено Тогда
			
			Для каждого СообщениеПроверки Из СообщенияПроверкиЗаполнения Цикл
				
				Если СообщениеПроверки.Поле = "Сотрудник" Тогда
					СообщениеПроверки.Поле = "Сотрудники[" + ПараметрыЗаполнения.ДанныеОтпусков[0].ИндексСтрокиДокумента + "]." + СообщениеПроверки.Поле;
				КонецЕсли;
				
				СообщениеПроверки.Сообщить();
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ЗаполнитьСвязанныеДокументы();
	
	Возврат СсылкаНаПеренос;
	
КонецФункции

&НаСервере
Функция ДанныеОРасхожденияхСУчетом(ДатыОстатков)
	
	Расхождения = Новый Массив;
	
	ТаблицаСотрудников = Объект.Сотрудники.Выгрузить(, "Сотрудник");
	ТаблицаСотрудников.Свернуть("Сотрудник");
	Для каждого СтрокаТаблицыСотрудников Из ТаблицаСотрудников Цикл
		
		СтрокиПоСотруднику = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник, Отпуск, Перенос", СтрокаТаблицыСотрудников.Сотрудник, ПредопределенноеЗначение("Документ.Отпуск.ПустаяСсылка"), ПредопределенноеЗначение("Документ.ПереносОтпуска.ПустаяСсылка")));
		Если СтрокиПоСотруднику.Количество() > 0 Тогда
			
			ДатаОстатков = '00010101';
			Для Каждого СтрокаПоСотруднику Из СтрокиПоСотруднику Цикл
				ДатаОстатков = Макс(СтрокаПоСотруднику.ДатаНачала, ДатаОстатков);
			КонецЦикла;
			Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда 
				ДатаОстатков = Объект.Дата;
			КонецЕсли;
			ДатыОстатков.Вставить(СтрокаТаблицыСотрудников.Сотрудник, ДатаОстатков);
			ОстаткиОтпуска = ОстаткиОтпусков.ОстатокОтпускаСотрудникаНаДату(СтрокаТаблицыСотрудников.Сотрудник, ДатаОстатков, Объект.Ссылка);
			
			Для каждого СтрокаПоСотруднику Из СтрокиПоСотруднику Цикл
				
				СтрокаСоответствует = Неопределено;
				Для каждого ОстатокОтпуска Из ОстаткиОтпуска.ОстаткиВРазрезеВидовОтпусков Цикл
					
					Если СтрокаПоСотруднику.ВидОтпуска = ОстатокОтпуска.ВидЕжегодногоОтпуска Тогда
						
						СтрокаСоответствует = Истина;
						Если СтрокаПоСотруднику.КоличествоДней <> ОстатокОтпуска.КоличествоДней Тогда
							
							СтрокаСоответствует = Ложь;
							
							ОписаниеОшибки = Новый Структура("Сотрудник,ВидОтпуска");
							ЗаполнитьЗначенияСвойств(ОписаниеОшибки, СтрокаПоСотруднику);
							
							Если СтрокаПоСотруднику.КоличествоДней > ОстатокОтпуска.КоличествоДней Тогда
								
								ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Предоставляется отпуск на %1 дн. больше, чем осталось по данным учета'"),
									СтрокаПоСотруднику.КоличествоДней - ОстатокОтпуска.КоличествоДней);
									
							Иначе
									
								ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='По данным учета остаток дней отпуска на %1 дн. больше'"),
									ОстатокОтпуска.КоличествоДней - СтрокаПоСотруднику.КоличествоДней);
								
							КонецЕсли;
							
							ОписаниеОшибки.Вставить("ПредставлениеОшибки", ПредставлениеОшибки);
							
							Расхождения.Добавить(ОписаниеОшибки);
							
						КонецЕсли; 
						
						Прервать;
						
					КонецЕсли; 
					
				КонецЦикла;
				
				Если СтрокаСоответствует = Неопределено Тогда
					
					ОписаниеОшибки = Новый Структура("Сотрудник,ВидОтпуска");
					ЗаполнитьЗначенияСвойств(ОписаниеОшибки, СтрокаПоСотруднику);
					
					ПредставлениеОшибки = НСтр("ru='Не найдено остатков отпуска'");
					
					ОписаниеОшибки.Вставить("ПредставлениеОшибки", ПредставлениеОшибки);
					
					Расхождения.Добавить(ОписаниеОшибки);
							
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Расхождения;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьФорму()
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗапрашиваемыеЗначения.Вставить("РуководительКадровойСлужбы", "Объект.РуководительКадровойСлужбы");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителяКадровойСлужбы", "Объект.ДолжностьРуководителяКадровойСлужбы");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеГруппыПодписантов()
	
	ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.РуководительКадровойСлужбы");
	
КонецПроцедуры	

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура СотрудникиОбработкаВыбораНаСервере(ВыбранныеСотрудники)
	
	Для каждого Сотрудник Из ВыбранныеСотрудники Цикл
		
		НоваяСтрокаСотрудники = Объект.Сотрудники.Добавить();
		НоваяСтрокаСотрудники.Сотрудник = Сотрудник;
		
		СотрудникиСотрудникПриИзмененииНаСервере(НоваяСтрокаСотрудники.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеВидаОтпуска(ВидОтпуска)
	Возврат ОстаткиОтпусков.ОписаниеВидаОтпуска(ВидОтпуска);
КонецФункции
	
#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.Сотрудники");
	Возврат Массив
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",		Нстр("ru = 'организации'")));
	Возврат Массив
КонецФункции

#КонецОбласти
