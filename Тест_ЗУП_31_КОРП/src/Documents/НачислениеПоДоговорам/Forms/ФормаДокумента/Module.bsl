
#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей;

&НаКлиенте
Перем СотрудникУдаляемойСтроки;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем СотрудникиКРасчету Экспорт;

&НаКлиенте
Перем ПечатныеФормыСотрудников;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтотОбъект);
	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.МесяцНачисления = '00010101';
		КонецЕсли;
		
		// Заполнение нового документа.
		ЗначенияДляЗаполнения = Новый Структура("Месяц, Организация, Ответственный",
		"Объект.МесяцНачисления",
		"Объект.Организация",
		"Объект.Ответственный");
		
		Если ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
			ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
		КонецЕсли;

		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		Если Не ЗначениеЗаполнено(Объект.МесяцНачисления) И ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.МесяцНачисления = НачалоМесяца(Объект.Дата);
		КонецЕсли;
		
		ПриПолученииДанныхНаСервере(РеквизитФормыВЗначение("Объект"));
		
	КонецЕсли;
		
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Сотрудники.Форма.ФормаВыбора") Тогда
		ОбработкаПодбораНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыРезультатыРасчетаНДФЛ" И Источник.ВладелецФормы = ЭтотОбъект Тогда
		ОбновитьДанныеНДФЛНаСервере(Параметр);
		РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицыНДФЛ());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РасчетЗарплатыРасширенныйКлиент.ПередЗаписьюДокументаСоСпискомСотрудников(ЭтотОбъект, "ПередЗаписьюОкончание", Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеквизитыВДанные(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнениеВыполнено = Ложь;
	ПриПолученииДанныхНаСервере(ТекущийОбъект, Ложь);
	
	Если Не ЗакрыватьПослеЗаписи Тогда
		// Признак необходимости закрытия держим постоянно взведенным.
		ЗакрыватьПослеЗаписи = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_НачислениеПоДоговорам", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ТекущийОбъект);
	
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	ОбработатьИзменениеОрганизацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Редактирование месяца строкой.

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисленияПоДоговорам

&НаКлиенте
Процедура НачисленияПоДоговорамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыНачисленийПоДоговорам(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыНачисленийПоДоговорам(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамДокументОснованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НачисленияПоДоговорам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) Тогда
		ЗаполнитьСотрудникаПриВыбореДоговораГПХ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "НачисленияПоДоговорам", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "НачисленияПоДоговорам", Элементы.НачисленияПоДоговорам.ТекущиеДанные, НоваяСтрока, Копирование);
	
	Если НоваяСтрока Тогда
		Элементы.НачисленияПоДоговорам.ТекущиеДанные.ПланируемаяДатаВыплаты = 
			РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплатыПоНастройкам(Объект.МесяцНачисления, НастройкиВыплатыЗарплатыВОрганизации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(ИзмененныеДанные, "ДоговорыПодряда",, ТекущиеДанные.Сотрудник);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицыНачисленийПоДоговорам());
	НачисленияПоДоговорамПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.НачисленияПоДоговорам.ТекущиеДанные.Сотрудник;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(ИзмененныеДанные, "ДоговорыПодряда",, ТекущиеДанные.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПослеУдаления(Элемент)
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, ОписаниеТаблицыНачисленийПоДоговорам());
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУдержания

&НаКлиенте
Процедура УдержанияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "Удержания", Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияУдержаниеПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыУдержаний();
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтотОбъект, ОписаниеТаблицыВидовРасчета, 2);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыРасширенныйКлиент.УстановитьОграничениеТипаДокументаУдержанияПоКатегории(
		Элемент, Элементы.Удержания.ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "Удержания", Элементы.Удержания.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Удержания",
		ТекущиеДанные.ФизическоеЛицо,
		,
		ТекущиеДанные.Удержание);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицыУдержаний());
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("УдержанияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(
		ЭтотОбъект, ОписаниеТаблицыУдержаний(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
		
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыУдержаний(), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.Удержания.ТекущиеДанные.ФизическоеЛицо;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Удержания",
		ТекущиеДанные.ФизическоеЛицо,
		,
		ТекущиеДанные.Удержание);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПослеУдаления(Элемент)
	
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, ОписаниеТаблицыУдержаний());
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтотОбъект, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияФизическоеЛицоПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеТаблицыУдержаний(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеТаблицыУдержаний(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеТаблицыУдержаний(), Ложь, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНдфл

&НаКлиенте
Процедура НДФЛВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не УчетНДФЛКлиентРасширенный.НеобходимоОткрытьФормуНДФЛПодробнее(Поле) Тогда
		ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыНДФЛ(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если Элементы.НДФЛ.ТекущаяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Объект.НДФЛ.НайтиПоИдентификатору(Элементы.НДФЛ.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			
			ОтборСтрокФизическихЛиц = Новый Структура("ФизическоеЛицо", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные.ФизическоеЛицо));
			РасчетЗарплатыРасширенный.ЗаменитьСтрокиНДФЛ(Объект.НДФЛ, Параметр.НДФЛ, Объект.ПримененныеВычетыНаДетейИИмущественные, Параметр.ПримененныеВычетыНаДетейИИмущественные, ПолучитьКонтролируемыеПоля(), ОписаниеДокумента(ЭтотОбъект), ОтборСтрокФизическихЛиц, Ложь);
			
		КонецЕсли;
		
		Если Параметр.Свойство("Начисления") Тогда
			
			Для каждого СтрокаНачислений Из Параметр.Начисления Цикл
				
				СтруктураПоиска = Новый Структура("ФизическоеЛицо,Начисление,ИдентификаторСтрокиВидаРасчета");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаНачислений);
				НайденныеСтроки = Объект.Начисления.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					НайденныеСтроки[0].КодВычета = СтрокаНачислений.КодВычета;
					НайденныеСтроки[0].СуммаВычета = СтрокаНачислений.СуммаВычета;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	НДФЛПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "НДФЛ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПередНачаломИзменения(Элемент, Отказ)
	
	УчетНДФЛКлиент.НДФЛПередНачаломИзменения(ЭтотОбъект, Элементы.НДФЛ.ТекущиеДанные, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПередУдалением(Элемент, Отказ)
	// Механизм закладки примененные вычеты.
	УчетНДФЛКлиент.НДФЛПередУдалением(ЭтотОбъект, Элементы.НДФЛ.ТекущиеДанные, Отказ);
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(ИзмененныеДанные, "НДФЛ", ТекущиеДанные.ФизическоеЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПослеУдаления(Элемент)
	
	// Механизм закладки примененные вычеты.
	УчетНДФЛКлиентРасширенный.УдалитьПримененныеВычеты(ЭтотОбъект);
	НДФЛПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьСтатьиФинансирования Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.РезультатРаспределения = Неопределено И ЗначениеЗаполнено(АдресТаблицыРаспределенияУдержаний) Тогда 
				ТекущиеДанные.РезультатРаспределения = РезультатРаспределенияИзВременногоХранилища(ТекущиеДанные.ИдентификаторСтрокиНДФЛ, АдресТаблицыРаспределенияУдержаний, ОписаниеТаблицыНДФЛ());
			КонецЕсли;
			ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПерераспределитьНДФЛ(ТекущиеДанные, РаботаВБюджетномУчреждении);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(ИзмененныеДанные, "НДФЛ", ТекущиеДанные.ФизическоеЛицо);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицыНДФЛ());
	НДФЛПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатРаспределенияИзВременногоХранилища(ИдентификаторСтроки, АдресТаблицыРаспределения, ОписаниеТаблицы)
	
	ДанныеРаспределения = ПолучитьИзВременногоХранилища(АдресТаблицыРаспределения);
	
	Если ДанныеРаспределения = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ИменаКолонокТаблицы = ЗарплатаКадрыРасширенныйКлиентСервер.ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицы);
	
	ОтборСтрок = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	ТаблицаРаспределенияПредварительно = ДанныеРаспределения.Скопировать(ОтборСтрок);
	
	ОтражениеЗарплатыВБухучетеРасширенный.ДополнитьТаблицуРаспределенияКодомСтатьиФинансирования(ТаблицаРаспределенияПредварительно);
	
	ТаблицаРаспределения = ТаблицаРаспределенияПредварительно.Скопировать(, ИменаКолонокТаблицы);
	СтруктураРаспределения = ЗарплатаКадрыРасширенный.ТаблицаЗначенийВСтруктуру(ТаблицаРаспределения);
	
	Возврат СтруктураРаспределения;
	
КонецФункции

&НаКлиенте
Процедура НДФЛПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "НДФЛ", Элементы.НДФЛ.ТекущиеДанные, НоваяСтрока, Копирование);
	// Механизм закладки примененные вычеты.
	УчетНДФЛКлиент.НДФЛПриНачалеРедактирования(ЭтотОбъект, Элементы.НДФЛ.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорректировкиВыплаты

&НаКлиенте
Процедура КорректировкиВыплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыКорректировкиВыплаты(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КорректировкиВыплатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьСтатьиФинансирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.РезультатРаспределения = Неопределено И ЗначениеЗаполнено(АдресТаблицыРаспределенияУдержаний) Тогда 
				ТекущиеДанные.РезультатРаспределения = РезультатРаспределенияИзВременногоХранилища(ТекущиеДанные.ИдентификаторСтроки, АдресТаблицыРаспределенияУдержаний, ОписаниеТаблицыКорректировкиВыплаты());
			КонецЕсли;
			ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПерераспределитьКорректировкиВыплаты(ТекущиеДанные, РаботаВБюджетномУчреждении);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Заполнить(Команда)
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	ПечатныеФормыСотрудников = Неопределено;
	
	РасчетЗарплатыРасширенныйКлиент.ЗаполнитьДокументНачисленияЗарплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДФЛ(Команда)
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	РежимПересчетаНДФЛ = Истина;
	ПерезаполнитьДанныеФормыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	Отборы = Новый Структура("РольСотрудника", ПредопределенноеЗначение("Перечисление.РолиСотрудников.Договорник"));
	
	ПараметрыОткрытия.Вставить("Отбор", Отборы);
	КадровыйУчетРасширенныйКлиент.ДобавитьПараметрыОтбораПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(
		ЭтотОбъект, ПараметрыОткрытия);
		
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		ЭтотОбъект,
		Объект.Организация,
		Объект.Подразделение,
		Объект.МесяцНачисления, 
		КонецМесяца(Объект.МесяцНачисления),
		,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанныеФормы(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	
	ПровестиДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	ПровестиДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтотОбъект, Не Элементы.УдержанияПодробно.Пометка, ОписаниеТаблицыУдержаний());
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка, Элементы.УдержанияПодробно.Пометка, ОписаниеТаблицыУдержаний());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПоДоговорамОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтотОбъект, ОписаниеТаблицыНачисленийПоДоговорам());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПоДоговорамОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтотОбъект, ОписаниеТаблицыНачисленийПоДоговорам());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтотОбъект, ОписаниеТаблицыУдержаний());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтотОбъект, ОписаниеТаблицыУдержаний());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтотОбъект, ОписаниеТаблицыНДФЛ());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтотОбъект, ОписаниеТаблицыНДФЛ());
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛистокУдержания(Команда)
	
	УдержанияВыделенныеСтроки = Элементы.Удержания.ВыделенныеСтроки;
	Если УдержанияВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(УдержанияВыделенныеСтроки, "Удержания");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛистокДоговорникиГПХ(Команда)
	
	ВыделенныеСтроки = Элементы.НачисленияПоДоговорам.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(ВыделенныеСтроки, "НачисленияПоДоговорам");
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрНалоговогоУчетаПоНДФЛ(Команда)
	
	НДФЛВыделенныеСтроки = Элементы.НДФЛ.ВыделенныеСтроки;
	Если НДФЛВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РегистрНалоговогоУчетаПоНДФЛ = НДФЛПодробнееНаСервереПоИдентификаторамСтрок(НДФЛВыделенныеСтроки);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.РегистрНалоговогоУчетаПоНДФЛ", "РегистрНалоговогоУчетаПоНДФЛ", 
		РегистрНалоговогоУчетаПоНДФЛ, ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Подключаемые команды «Пересчитать сотрудника».

&НаКлиенте
Процедура Подключаемый_НачисленияПоДоговорамПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтотОбъект, "НачисленияПоДоговорам", "Сотрудник", Тип("СправочникСсылка.Сотрудники"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтотОбъект, "Удержания", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтотОбъект, "НДФЛ", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"));
КонецПроцедуры

#Область ПодключаемыеКомандыУдалитьСотрудника

&НаКлиенте
Процедура Подключаемый_НачисленияПоДоговорамУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.НачисленияПоДоговорам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьСотрудникаНаСервере(ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияУдалитьСотрудника(Команда)

	ТекущиеДанные = Элементы.Удержания.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьДанныеСотрудникаНаСервере(ТекущиеДанные.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.НДФЛ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьДанныеСотрудникаНаСервере(ТекущиеДанные.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка = Истина)

	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСДанными = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, ОписаниеТаблицы.ПутьКДанным);
	ТекущиеДанные = ТаблицаСДанными.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(ЭтотОбъект, ОписаниеТаблицы, ВыбраннаяСтрока, Объект.МесяцНачисления);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

#Область ИнициализацияФормы

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект, ДополнятьФорму = Истина)
	
	НовыйДокумент = Параметры.Ключ.Пустая();
	НачатьИнициализациюФормы(ДополнятьФорму, НовыйДокумент);
	ЗарплатаКадрыРасширенный.ИзменитьРеквизитыФормы(ЭтотОбъект);
	ЗавершитьИнициализациюФормы(ТекущийОбъект, ДополнятьФорму, НовыйДокумент);
	
	РеквизитыКДобавлению.Очистить();
	РеквизитыКУдалению.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура НачатьИнициализациюФормы(ДополнятьФорму, НовыйДокумент = Истина)
	
	// Устанавливаем значения реквизитов формы.
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	УстановитьФункциональныеОпцииФормы();
	
	Если Не ФормаДополнена И ДополнятьФорму Тогда
		// Вызываем ДополнитьФорму() в режиме отложенных вызовов.
		ДополнитьФорму(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИнициализациюФормы(ТекущийОбъект, ДополнятьФорму, НовыйДокумент = Истина)

	Если Не ФормаДополнена И ДополнятьФорму Тогда 
		// Досоздаем форму.
		ДополнитьФорму(Ложь);
		ДополнитьФорму();
	КонецЕсли;
	
	// чтение данных
	ДанныеВРеквизиты(ТекущийОбъект);
	
	НастройкиВыплатыЗарплатыВОрганизации = Новый ФиксированнаяСтруктура(
		РасчетЗарплатыРасширенныйВызовСервера.СведенияОНастройкахЗарплатаКадрыРасширенная(Объект.Организация));
		
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	
	УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтотОбъект, Объект.МесяцНачисления);
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтотОбъект, Элементы.УдержанияПодробно.Пометка, ОписаниеТаблицыУдержаний());
	
	РассчитатьИтогиПоДокументу();
	
	ЗагрузитьНастройки();
	
КонецПроцедуры

// Подключение универсальных механизмов.
&НаСервере
Процедура ДополнитьФорму(ОтложенноеИзменение = Неопределено, КонтролируемыеПоля = Неопределено, ОписаниеПанелиВычеты = Неопределено, ОписаниеКлючевыхРеквизитов = Неопределено, ТаблицыОчищаемыеПриИзменении = Неопределено)
	
	Если ОтложенноеИзменение = Неопределено Тогда // Выполняем процедуры, не нуждающиеся в механизме отложенного создания.	
		
		// Создание реквизитов.
		РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФормуРезультатыРаспределения(ЭтотОбъект, ОписанияТаблицДляРаспределенияРезультата(ЭтотОбъект));
		РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФорму(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект), Истина);
		УчетНДФЛФормы.ДополнитьФормуПанельюВычетов(ЭтотОбъект, ОписаниеПанелиВычеты, Ложь);
		
		// Создание элементов.
		ЗарплатаКадрыРасширенный.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект, ОписаниеКлючевыхРеквизитов);
		ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект, , ОписаниеКлючевыхРеквизитов, ТаблицыОчищаемыеПриИзменении);
		
		ДобавитьКомандуУдалитьСотрудника();
		
	Иначе
		
		Если ОтложенноеИзменение Тогда
			ДобавлятьЭлементыФормы = Ложь;
			ДобавлятьРеквизитыФормы = Истина;
		Иначе
			ДобавлятьЭлементыФормы = Истина;
			ДобавлятьРеквизитыФормы = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура(
			"КонтролируемыеПоля, 
			|ДобавлятьЭлементыФормы, 
			|ДобавлятьРеквизитыФормы, 
			|ОтложенноеИзменение");
		ДополнительныеПараметры.КонтролируемыеПоля = КонтролируемыеПоля; 
		ДополнительныеПараметры.ДобавлятьЭлементыФормы = ДобавлятьЭлементыФормы;
		ДополнительныеПараметры.ДобавлятьРеквизитыФормы = ДобавлятьРеквизитыФормы;
		ДополнительныеПараметры.ОтложенноеИзменение = ОтложенноеИзменение;
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтотОбъект, ОписаниеТаблицыНачисленийПоДоговорам(), "", "НачисленийПоДоговорамАвтоКоманды" , , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтотОбъект, ОписаниеТаблицыУдержаний(), "Удержания", "УдержанияАвтоКоманды" , , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтотОбъект, ОписаниеТаблицыНДФЛ(), "", "НДФЛАвтоКоманды" , , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		
		РасчетЗарплатыРасширенныйФормы.ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(
			ЭтотОбъект, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура НачисленияПриОкончанииРедактированияНаСервере()
	
	ЗаполнитьВторичныеДанныеФормыПримененныеВычеты();
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НачисленияПоДоговорамПриОкончанииРедактированияНаСервере()
	
	ЗаполнитьВторичныеДанныеФормыПримененныеВычеты();
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НДФЛПриОкончанииРедактированияНаСервере()
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура НДФЛПослеУдаленияНаСервере()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	РассчитатьИтогУдержано(ЭтаФорма);
	
КонецПроцедуры

// Месяц начисления
&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтотОбъект, Объект.МесяцНачисления);
	
	ЗаполнениеВыполнено = Ложь;
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

// Заполнение и расчет начислений.

// Процедура используется для инициации расчета начислений из вне (на клиенте).
&НаКлиенте   
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	
	Если НЕ РасчетЗарплатыРасширенныйКлиент.ДобавитьСотрудникаКРасчету(ЭтотОбъект, Сотрудник, ОписаниеТаблицы) Тогда
		РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы = Неопределено, РассчитатьИтоги = Истина)
	
	Отбор = СотрудникиФизическиеЛицаОтбор(Сотрудник);
	Если Отбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(Объект.МесяцНачисления, Объект.Организация);
	ЗаполнитьНастройкиМенеджераРасчета(Отбор.ФизическиеЛица, МенеджерРасчета);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьИсточникиИзмененийМенеджераРасчета(МенеджерРасчета, ИзмененныеДанные);
	
	НачальныеПозицииВставки = Новый Структура;
	ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, НачальныеПозицииВставки);
	МенеджерРасчета.РассчитатьЗарплату();
	ДанныеДляЗаполненияВДанныеФормы(МенеджерРасчета.Зарплата, НачальныеПозицииВставки);
	
	НачисленияПриОкончанииРедактированияНаСервере();
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), Отбор.СотрудникиКРасчету);
	Если РассчитатьИтоги Тогда
		РассчитатьИтогиПоДокументу();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, НачальныеПозицииВставки)
	
	ДанныеРезультатовРаспределенияНачислений = Неопределено;
	Если ЗначениеЗаполнено(АдресТаблицыРаспределенияНачислений) Тогда 
		ДанныеРезультатовРаспределенияНачислений = ПолучитьИзВременногоХранилища(АдресТаблицыРаспределенияНачислений);
	КонецЕсли;
	
	ДанныеРезультатовРаспределенияУдержаний = Неопределено;
	Если ЗначениеЗаполнено(АдресТаблицыРаспределенияУдержаний) Тогда 
		ДанныеРезультатовРаспределенияУдержаний = ПолучитьИзВременногоХранилища(АдресТаблицыРаспределенияУдержаний);
	КонецЕсли;
	
	ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено;
	Если ЗначениеЗаполнено(АдресТаблицыРаспределенияПоТерриториямУсловиямТруда) Тогда 
		ДанныеРаспределенияПоТерриториямУсловиямТруда = ПолучитьИзВременногоХранилища(АдресТаблицыРаспределенияПоТерриториямУсловиямТруда);
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.НачисленияПоДоговорамВДанныеМенеджераРасчета(Объект.НачисленияПоДоговорам, МенеджерРасчета, Объект.Организация, Отбор, НачальныеПозицииВставки, ДанныеРезультатовРаспределенияНачислений, ДанныеРаспределенияПоТерриториямУсловиямТруда);
	РасчетЗарплатыРасширенныйФормы.УдержанияВДанныеМенеджераРасчета(Объект.Удержания, МенеджерРасчета, Отбор, НачальныеПозицииВставки, ДанныеРезультатовРаспределенияУдержаний);
	РасчетЗарплатыРасширенныйФормы.НДФЛВДанныеМенеджераРасчета(Объект.НДФЛ, Объект.ПримененныеВычетыНаДетейИИмущественные, МенеджерРасчета, Отбор, НачальныеПозицииВставки, ДанныеРезультатовРаспределенияУдержаний);
	РасчетЗарплатыРасширенныйФормы.КорректировкиВыплатыВДанныеМенеджераРасчета(Объект.КорректировкиВыплаты, МенеджерРасчета, Отбор, НачальныеПозицииВставки, ДанныеРезультатовРаспределенияУдержаний);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиМенеджераРасчета(СотрудникиФизическиеЛица, МенеджерРасчета)
	
	МенеджерРасчета.ИсключаемыйРегистратор = Объект.Ссылка;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьДоговорыПодряда = Истина;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьУдержания = Истина;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНДФЛ = Истина;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьКорректировкиВыплаты = Истина;
	
	МенеджерРасчета.НастройкиНДФЛ.Сотрудники = СотрудникиФизическиеЛица;
	МенеджерРасчета.НастройкиНДФЛ.ОкончательныйРасчет = ОкончательныйРасчетНДФЛ;
	
КонецПроцедуры

&НаСервере
Функция СотрудникиФизическиеЛицаОтбор(Сотрудники)
	
	СотрудникиДокумента = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиДокумента, ОбщегоНазначения.ВыгрузитьКолонку(Объект.НачисленияПоДоговорам, "Сотрудник"), Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("СотрудникиДокумента", СотрудникиДокумента);
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица")
		Или ТипЗнч(Сотрудники) = Тип("Массив") И Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Ссылка В(&СотрудникиДокумента)
			|	И Сотрудники.ФизическоеЛицо В(&Сотрудники)";
		
		Если ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
			ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		Иначе
			ФизическиеЛица = Сотрудники;
		КонецЕсли;
		СотрудникиФизическиеЛица = Запрос.Выполнить().Выбрать();
		
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сотрудники.ФизическоеЛицо
			|ПОМЕСТИТЬ ВТФизическиеЛица
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Ссылка В(&Сотрудники)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
			|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
			|			И (Сотрудники.Ссылка В (&СотрудникиДокумента))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТФизическиеЛица.ФизическоеЛицо
			|ИЗ
			|	ВТФизическиеЛица КАК ВТФизическиеЛица";
			
		Результат = Запрос.ВыполнитьПакет();
		ФизическиеЛица = Результат[2].Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		СотрудникиФизическиеЛица = Результат[1].Выбрать();
		
	КонецЕсли;
	
	Отбор = Новый Структура("СотрудникиКРасчету, ФизическиеЛицаСотрудников, ФизическиеЛицаОтбор, ФизическиеЛица");
	Отбор.ФизическиеЛица = ФизическиеЛица;
	Отбор.ФизическиеЛицаСотрудников = Новый Соответствие;
	Отбор.ФизическиеЛицаОтбор = Новый Соответствие;
	Отбор.СотрудникиКРасчету = Новый Массив;
	
	Пока СотрудникиФизическиеЛица.Следующий() Цикл
		Отбор.ФизическиеЛицаСотрудников.Вставить(СотрудникиФизическиеЛица.Сотрудник, СотрудникиФизическиеЛица.ФизическоеЛицо);
		Отбор.СотрудникиКРасчету.Добавить(СотрудникиФизическиеЛица.Сотрудник);
	КонецЦикла;
	
	Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		Отбор.ФизическиеЛицаОтбор.Вставить(ФизическоеЛицо, Истина)
	КонецЦикла;
	
	Возврат Отбор;
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	
	ПерезаполнитьДанныеФормыНаКлиенте(Сотрудники, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыНаКлиенте() Экспорт
	
	Результат = РезультатЗаполненияВДлительнойОперации();
	
	Если Результат.ЗаданиеВыполнено Тогда
		
		ОповеститьОбИзмененииОбъекта();
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтотОбъект);
		
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДанныеФормыНаКлиенте(Знач Сотрудники = Неопределено, СохранятьИсправления = Истина) Экспорт
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	Если Сотрудники <> Неопределено И ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	КонецЕсли;
	
	Результат = ПерезаполнитьДанныеФормыНаСервере(Сотрудники, СохранятьИсправления, СотрудникиКРасчету);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтотОбъект, Сотрудники);
		ОповеститьОбИзмененииОбъекта();
		УстановитьЗначенияКонтролируемыхПолей();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПерезаполнитьДанныеФормыНаСервере(Сотрудники = Неопределено, СохранятьИсправления = Истина, СотрудникиКРасчету = Неопределено) Экспорт
	
	ИспользоватьДлительнуюОперацию = Истина;
	Если Сотрудники <> Неопределено Тогда
		// Если заполнение выполняется по ограниченному составу сотрудников, то обходимся без длительной операции.
		Если ТипЗнч(Сотрудники) <> Тип("Массив") Или Сотрудники.Количество() < 10 Тогда 
			ИспользоватьДлительнуюОперацию = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СписокСотрудников = Неопределено;
	Если Сотрудники <> Неопределено Тогда
		СписокСотрудников = СотрудникиДляРасчета(Сотрудники);
	КонецЕсли;
	
	Результат = РасчетЗарплатыРасширенный.ПерезаполнитьДанныеФормы(
		ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект), СписокСотрудников, СохранятьИсправления, ИспользоватьДлительнуюОперацию);
	
	Если СотрудникиКРасчету <> Неопределено Тогда
		ПересчитатьДокументНаСервере(СотрудникиКРасчету);
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат <> Неопределено И Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСотрудника(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля) Экспорт
	
	ПересчитатьСотрудникаНаСервере(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля);
	
КонецПроцедуры

&НаСервере
Функция ПересчитатьСотрудникаНаСервере(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля)
	
	Сотрудники = ВыбранныеВТаблицеСотрудники(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля);
	
	СписокСотрудников = СотрудникиДляРасчета(Сотрудники);
	
	Результат = РасчетЗарплатыРасширенный.ПерезаполнитьДанныеФормы(
		ЭтаФорма, ОписаниеДокумента(ЭтотОбъект), СписокСотрудников);
		
	Если Результат <> Неопределено Тогда
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
		
	Если Результат <> Неопределено И Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыбранныеВТаблицеСотрудники(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля)
	
	СтрокиТаблицы = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ВыбранныеСтроки Цикл
		СтрокиТаблицы.Добавить(Объект[ИмяТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	
	ВедущиеОбъекты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиТаблицы, ВедущееПоле, Истина);
	
	Если ТипВедущегоПоля = Тип("СправочникСсылка.Сотрудники") Тогда
		Сотрудники = ВедущиеОбъекты;
	Иначе
		Физлица = ВедущиеОбъекты;
		Сотрудники = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(Физлица, Объект.Организация, , Истина);
	КонецЕсли;
	
	Возврат Сотрудники;
	
КонецФункции

&НаКлиенте
Процедура ДополнитьСтроку(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей)
	РасчетЗарплатыРасширенныйФормы.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект), ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Функция РезультатЗаполненияВДлительнойОперации()
	
	РасчетЗарплатыРасширенныйКлиентСервер.ОчиститьТаблицыДокумента(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект));
	
	СтруктураПараметров = РасчетЗарплатыРасширенныйКлиентСервер.ПараметрыПолученияДанныхЗаполненияДокумента();
	СтруктураПараметров.ОписаниеДокумента 	= ОписаниеДокумента(ЭтотОбъект);
	СтруктураПараметров.Организация 		= Объект.Организация;
	СтруктураПараметров.ДокументСсылка 		= Объект.Ссылка;
	СтруктураПараметров.Подразделение 		= Объект.Подразделение;
	СтруктураПараметров.МесяцНачисления 	= Объект.МесяцНачисления;
	СтруктураПараметров.ДатаВыплаты 		= Объект.Дата;
	СтруктураПараметров.ОкончаниеПериода 	= КонецМесяца(Объект.МесяцНачисления);
	СтруктураПараметров.РежимНачисления 	= Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет;
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа «Начисление по договорам»'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.НачислениеПоДоговорам.ПодготовитьДанныеДляЗаполнения",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СотрудникиДляРасчета(Сотрудники)
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица")
		Или ТипЗнч(Сотрудники) = Тип("Массив") И Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		Возврат Сотрудники;
	КонецЕсли;
	
	СотрудникиДокумента = Новый Массив;
	
	ОписанияТаблиц = ОписанияТаблицНачисленийДляРасчетногоЛистка();
	Для Каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиДокумента, ОбщегоНазначения.ВыгрузитьКолонку(Объект[ОписаниеТаблицы.ИмяТаблицы], ОписаниеТаблицы.ИмяРеквизитаСотрудник, Истина));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("СотрудникиДокумента", СотрудникиДокумента);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Сотрудники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
	|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	|			И (Сотрудники.Ссылка В (&СотрудникиДокумента))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Сотрудники)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ПровестиДокумент()
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Помеченный на удаление документ не может быть проведен.'"));
		Возврат;
	КонецЕсли;
	
	Если СотрудникиКРасчету.Количество() > 0 Тогда
		РасчетЗарплатыРасширенныйКлиент.ПередЗаписьюДокументаСоСпискомСотрудников(ЭтотОбъект, "ПровестиДокументОкончание");
	Иначе
		ПровестиДокументНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПересчитатьДокументНаКлиенте();
		ПровестиДокументНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументНаКлиенте()
	
	Результат = РезультатПроведенияВДлительнойОперации();
	
	Если Результат.Свойство("ОшибкиПроверкиЗаполнения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ОповеститьОбИзмененииОбъекта();
		ПроведениеВДлительнойОперации = Ложь;
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		Иначе
			ЗакрыватьПослеЗаписи = Истина;
		КонецЕсли;
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатПроведенияВДлительнойОперации()
	
	Если Не ПроверитьЗаполнение() Тогда 
		УчетНДФЛФормыРасширенный.ОбработатьСообщенияПроверкиЗаполнения(ЭтотОбъект, ОписаниеТаблицыНДФЛ());
		Возврат Новый Структура("ОшибкиПроверкиЗаполнения", Истина);
	КонецЕсли;
	
	ДокументОбъект = Неопределено;
	
	// Преобразовываем данные формы в объект, чтобы записать его.
	Если Модифицированность Или Объект.Проведен Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		РеквизитыВДанные(ДокументОбъект);
		ДокументОбъект.ДополнительныеСвойства.Вставить("Проведен", ДокументОбъект.Проведен);
		ДокументОбъект.Проведен = Ложь;
		ДокументОбъект.Записать();
		// После записи сразу же перечитываем объект, чтобы избежать различия версий.
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		ПриПолученииДанныхНаСервере(ДокументОбъект, Ложь);
		Модифицированность = Ложь;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("Отказ", Ложь);
	СтруктураПараметров.Вставить("УстановитьПроведениеДокумента", Истина);
		
	НаименованиеЗадания = НСтр("ru = 'Проведение документа «Начисление по договорам»'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.НачислениеПоДоговорам.ВыполнитьПроведение",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	ПроведениеВДлительнойОперации = Не Результат.ЗаданиеВыполнено;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ПроведениеПослеВыполненияДлительнойОперации();
		ПроведениеВДлительнойОперации = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеПослеВыполненияДлительнойОперации()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗаполнения = Неопределено;
	Если СтруктураДанных.Свойство("ДанныеДляЗаполненияТаблицДокумента", ДанныеДляЗаполнения) Тогда
		
		// Заполнение табличных частей и вторичных данных коллекций, которые с ней связаны.
		Объект.НачисленияПоДоговорам.Очистить();
		Объект.Удержания.Очистить();
		Объект.НДФЛ.Очистить();
		Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
		Объект.КорректировкиВыплаты.Очистить();
		
		ДанныеДляЗаполненияВДанныеФормы(ДанныеДляЗаполнения);
		ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма);
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы());
		ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
		ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы());
		
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДанныеДляПерезаполненияТаблицДокумента", ДанныеДляЗаполнения) Тогда
		ДанныеДляЗаполненияВДанныеФормы(ДанныеДляЗаполнения, СтруктураДанных.СтруктураПараметров.НачальныеПозицииВставки);
		ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтотОбъект);
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтотОбъект, МассивОписанийТаблицФормы());
		ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
		ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтотОбъект, МассивОписанийТаблицФормы());
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	КонецЕсли;
	
	РассчитатьИтогиПоДокументу();
	ЗаполнениеВыполнено = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеДляЗаполненияВДанныеФормы(ДанныеЗаполнения, НачальныеПозицииВставки = Неопределено)
	
	СортироватьДанныеДляЗаполнения(ДанныеЗаполнения);
	
	//Удержания
	ТаблицыУдержаний = РасчетЗарплатыРасширенныйФормы.ТаблицыУдержанийФормы();
	ТаблицыУдержаний.Удержания = Объект.Удержания;
	
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыУдержанияВДанныеФормы(ТаблицыУдержаний, ДанныеЗаполнения.Удержания, , НачальныеПозицииВставки);
	
	//НачисленияПоДоговорам
	Псевдоним = ИмяТаблицыНачисленияПоДоговорам(ДанныеЗаполнения);
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыНачисленияПоДоговорамВДанныеФормы(Объект.НачисленияПоДоговорам, ДанныеЗаполнения[Псевдоним], Объект.Организация, НачальныеПозицииВставки);
	
	//НДФЛ
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыНДФЛВДанныеФормы(Объект.НДФЛ, Объект.ПримененныеВычетыНаДетейИИмущественные, ДанныеЗаполнения.НДФЛ, НачальныеПозицииВставки);
	
	//КорректировкиВыплаты
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыКорректировкиВыплатыВДанныеФормы(Объект.КорректировкиВыплаты, ДанныеЗаполнения.КорректировкиВыплаты, НачальныеПозицииВставки);
	
КонецПроцедуры

&НаСервере
Процедура СортироватьДанныеДляЗаполнения(ДанныеЗаполнения)
	
	СортироватьРезультатРасчетаНачислений(ДанныеЗаполнения);
	СортироватьРезультатыРасчетаПоФизическимЛицам(ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервере
Функция ИмяТаблицыНачисленияПоДоговорам(ДанныеЗаполнения)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("НачисленияПоДоговорам") Тогда
		Возврат "НачисленияПоДоговорам";
	Иначе
		Возврат "ДоговорыПодряда";
	КонецЕсли;
КонецФункции

&НаСервере
Процедура СортироватьРезультатРасчетаНачислений(ДанныеЗаполнения)
	
	СортируемыеКоллекции = Новый Массив;
	
	Псевдоним = ИмяТаблицыНачисленияПоДоговорам(ДанныеЗаполнения);
	МетаданныеРеквизитов = Метаданные.Документы.НачислениеПоДоговорам.ТабличныеЧасти.НачисленияПоДоговорам.Реквизиты;
	
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияСотрудников(ДанныеЗаполнения[Псевдоним]);
	Коллекция.ОписаниеКоллекции.Псевдоним = Псевдоним;
	Коллекция.ОписаниеКоллекции.ИмяПоляСотрудник = "Сотрудник";
	Коллекция.ОписаниеКоллекции.ИмяПоляПодразделение = "Подразделение";
	Коллекция.ОписаниеКоллекции.ИмяПоляПериод = "ДатаНачала";
	СортируемыеКоллекции.Добавить(Коллекция);
	
	НастройкиСортировки = СотрудникиФормыРасширенный.НастройкиСортировкиПоУмолчанию();
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "ДокументОснование", МетаданныеРеквизитов.ДокументОснование.Тип);
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "ДатаНачала", МетаданныеРеквизитов.ДатаНачала.Тип);
	
	УстановитьПривилегированныйРежим(Истина);
	ПорядокСортировки = СотрудникиФормыРасширенный.ПорядокСтрокКоллекцийСотрудников(СортируемыеКоллекции, НастройкиСортировки);
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого КлючЗначение Из ПорядокСортировки Цикл
		
		ТаблицаИсходныхДанных = ДанныеЗаполнения[КлючЗначение.Ключ];
		ТаблицаИсходныхДанных.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
			
		Для Каждого СтрокаПорядка Из КлючЗначение.Значение Цикл
			СтрокаТаблицы = ТаблицаИсходныхДанных[СтрокаПорядка.ИндексСтрокиИсходнойТаблицы];
			СтрокаТаблицы.Порядок = СтрокаПорядка.Порядок;
		КонецЦикла;
		
		ТаблицаИсходныхДанных.Сортировать("Порядок");
		ТаблицаИсходныхДанных.Колонки.Удалить("Порядок");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьРезультатыРасчетаПоФизическимЛицам(ДанныеЗаполнения)
	
	СортируемыеКоллекции = Новый Массив;
	
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияФизическихЛиц(ДанныеЗаполнения.Удержания);
	Коллекция.ОписаниеКоллекции.Псевдоним = "Удержания";
	Коллекция.ОписаниеКоллекции.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	
	МетаданныеРеквизитов = Метаданные.Документы.НачислениеПоДоговорам.ТабличныеЧасти.Удержания.Реквизиты;
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "Удержание.ОчередностьРасчета", МетаданныеРеквизитов.Удержание.Тип);
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "Удержание", МетаданныеРеквизитов.Удержание.Тип);
	
	СортируемыеКоллекции.Добавить(Коллекция);
	
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияФизическихЛиц(ДанныеЗаполнения.НДФЛ);
	Коллекция.ОписаниеКоллекции.Псевдоним = "НДФЛ";
	Коллекция.ОписаниеКоллекции.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	
	МетаданныеРеквизитов = Метаданные.Документы.НачислениеПоДоговорам.ТабличныеЧасти.НДФЛ.Реквизиты;
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "МесяцНалоговогоПериода", МетаданныеРеквизитов.МесяцНалоговогоПериода.Тип);
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "Подразделение", МетаданныеРеквизитов.Подразделение.Тип);
	
	СортируемыеКоллекции.Добавить(Коллекция);
	
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияФизическихЛиц(ДанныеЗаполнения.КорректировкиВыплаты);
	Коллекция.ОписаниеКоллекции.Псевдоним = "КорректировкиВыплаты";
	Коллекция.ОписаниеКоллекции.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	СортируемыеКоллекции.Добавить(Коллекция);
	
	УстановитьПривилегированныйРежим(Истина);
	ПорядокСортировки = СотрудникиФормыРасширенный.ПорядокСортировкиКоллекцияФизическихЛиц(СортируемыеКоллекции, Объект.Организация, КонецМесяца(Объект.МесяцНачисления));
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого КлючЗначение Из ПорядокСортировки Цикл
		
		ТаблицаИсходныхДанных = ДанныеЗаполнения[КлючЗначение.Ключ];
		ТаблицаИсходныхДанных.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
			
		Для Каждого СтрокаПорядка Из КлючЗначение.Значение Цикл
			СтрокаТаблицы = ТаблицаИсходныхДанных[СтрокаПорядка.ИндексСтрокиИсходнойТаблицы];
			СтрокаТаблицы.Порядок = СтрокаПорядка.Порядок;
		КонецЦикла;
		
		ТаблицаИсходныхДанных.Сортировать("Порядок");
		ТаблицаИсходныхДанных.Колонки.Удалить("Порядок");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроведениеПослеВыполненияДлительнойОперации()
	
	Если Не ЗакрыватьПослеЗаписи Тогда
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		ПриПолученииДанныхНаСервере(ДокументОбъект, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ЗаданиеВыполненоВДлительнойОперации = Ложь;
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				Если ПроведениеВДлительнойОперации Тогда
					ПроведениеПослеВыполненияДлительнойОперации();
				Иначе
					РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтотОбъект);
					ЗаполнениеПослеВыполненияДлительнойОперации();
				КонецЕсли;
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ЗаданиеВыполненоВДлительнойОперации = Истина;
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	ОповеститьОбИзмененииОбъекта();
	
	Если ПроведениеВДлительнойОперации И ЗаданиеВыполненоВДлительнойОперации Тогда
		
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		Иначе
			ЗакрыватьПослеЗаписи = Истина;
		КонецЕсли;
		ПроведениеВДлительнойОперации = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьЗависимыеРезультаты(ПараметрыДляРаспределения) Экспорт
	
	Если ПараметрыДляРаспределения.РаспределятьЗависимыеТаблицы Тогда
		ОбновитьБухучетРезультатовРасчетаНаСервере(ПараметрыДляРаспределения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Объект.НачисленияПоДоговорам, "Сотрудник", Истина);
	
	Возврат ПоместитьВоВременноеХранилище(МассивСотрудников, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаПодбораНаКлиенте(Сотрудники)
	
	МассивСотрудников = ПодобранныеСотрудники(Сотрудники);
	
	Если МассивСотрудников.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Результат = ПерезаполнитьДанныеФормыНаСервере(МассивСотрудников, Ложь);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтотОбъект, Сотрудники);
		ОповеститьОбИзмененииОбъекта();
		УстановитьЗначенияКонтролируемыхПолей();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодобранныеСотрудники(Сотрудники)
	
	// Оставляем только сотрудников, которых нет в документе.
	МассивСотрудников = Новый Массив;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("НачисленияПоДоговорам");
	
	УникальныеСотрудники = Новый Соответствие;
	СписокСотрудниковДокумента = Новый Массив;
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		Для Каждого СтрокаСотрудника Из Объект[ИмяТаблицы] Цикл 
			Если УникальныеСотрудники[СтрокаСотрудника.Сотрудник] = Неопределено Тогда 
				СписокСотрудниковДокумента.Добавить(СтрокаСотрудника.Сотрудник);
				УникальныеСотрудники.Вставить(СтрокаСотрудника.Сотрудник, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		Если УникальныеСотрудники[Сотрудник] = Неопределено Тогда 
			МассивСотрудников.Добавить(Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	// Для корректного пересчета зависимых таблиц добавляем сотрудников из документа с совпадающими физическими лицами.
	ФизическиеЛицаПодобранныхСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ФизическоеЛицо");
	
	ФизическиеЛица = Новый Соответствие;
	Для Каждого КлючИЗначение Из ФизическиеЛицаПодобранныхСотрудников Цикл 
		ФизическиеЛица.Вставить(КлючИЗначение.Значение, Истина);
	КонецЦикла;
	
	ФизическиеЛицаСотрудниковДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудниковДокумента, "ФизическоеЛицо");
	
	Для Каждого КлючИЗначение Из ФизическиеЛицаСотрудниковДокумента Цикл 
		Если ФизическиеЛица[КлючИЗначение.Значение] <> Неопределено Тогда 
			МассивСотрудников.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСотрудников;
	
КонецФункции

// Описания документа, таблиц документа, панелей документа.
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.ЭтоНачислениеЗарплаты = Истина;
	
	Описание.НачисленияПоДоговорамИмя = "НачисленияПоДоговорам";
	Описание.НачисленияПоДоговорамКоманднаяПанельИмя = "НачисленияПоДоговорамАвтоКоманды";
	Описание.УдержанияИмя = "Удержания";
	Описание.УдержанияКоманднаяПанельИмя = "УдержанияАвтоКоманды";
	Описание.НДФЛИмя = "НДФЛ";
	Описание.НДФЛКоманднаяПанельИмя = "НДФЛАвтоКоманды";
	Описание.КорректировкиВыплатыИмя = "КорректировкиВыплаты";
	Описание.ПримененныеВычетыИмя = "ПримененныеВычетыНаДетейИИмущественные";
	Описание.ПланируемаяДатаВыплатыИмя = "Дата";
	Описание.ПорядокВыплатыИмя = Неопределено;
	
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента(НСтр("ru = 'Месяц начисления'"), "МесяцНачисленияСтрокой"));
	
	Описание.ОписанияТаблицДляРаспределенияРезультата = СтруктураОписанияТаблицДляРаспределенияРезультата(Форма);
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеПанелиВычеты()
	
	ОписаниеПанелиВычеты = УчетНДФЛКлиентСервер.ОписаниеПанелиВычеты();
	
	ОписаниеТабличнойЧастиНДФЛ = УчетНДФЛКлиентСервер.ОписаниеТабличнойЧастиНДФЛ();
	ОписаниеТабличнойЧастиНДФЛ.ИспользуетсяФиксРасчет = Истина;
	ОписаниеТабличнойЧастиНДФЛ.ИмяПоляПериод = "";
	ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ = ОписаниеТабличнойЧастиНДФЛ;
	
	РасчетЗарплатыКлиентСервер.ДополнитьОписаниеПанелиВычеты(ОписаниеПанелиВычеты);
	ОписаниеТабличнойЧастиКорректировкиВыплаты = РасчетЗарплатыКлиентСервер.ОписаниеТабличнойЧастиКорректировкиВыплаты();
	ОписаниеТабличнойЧастиКорректировкиВыплаты.ИспользуетсяФиксРасчет = Истина;
	ОписаниеПанелиВычеты.ТабличнаяЧастьКорректировкиВыплаты = ОписаниеТабличнойЧастиКорректировкиВыплаты;
	
	НастраиваемыеПанели = Новый Соответствие;
	НастраиваемыеПанели.Вставить("ВычетыЛичные", 				Истина);
	НастраиваемыеПанели.Вставить("ВычетыНаДетейИИмущественные", "Объект.ПримененныеВычетыНаДетейИИмущественные");
	НастраиваемыеПанели.Вставить("ВычетыКДоходам", 				"Объект.НачисленияПоДоговорам");  
	
	ОписаниеПанелиВычеты.НастраиваемыеПанели = НастраиваемыеПанели;
	
	Возврат ОписаниеПанелиВычеты;
	
КонецФункции

&НаКлиенте
Функция ОписаниеПанелиВычетыНаКлиенте() Экспорт
	Возврат ОписаниеПанелиВычеты();
КонецФункции

&НаСервере
Функция ОписаниеПанелиВычетыНаСервере() Экспорт
	Возврат ОписаниеПанелиВычеты();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачисленийПоДоговорам()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы = "НачисленияПоДоговорам";
	Описание.ИмяРеквизитаВидРасчета = "";
	Описание.СодержитПолеВидРасчета = Ложь;
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "Сотрудник";
	Описание.СодержитПолеКодДохода = Истина;
	Описание.НомерТаблицы = 1;
	Описание.ПутьКДанным = "Объект.НачисленияПоДоговорам";
	Описание.ПроверяемыеРеквизиты = "Сотрудник,ДокументОснование,КодДохода,ДатаНачала,ДатаОкончания";
	Описание.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтроки";
	Описание.УстанавливатьИдентификаторСтрокиРаспределенияРезультата = Ложь;
	Описание.РаспределениеРезультатовЗависимыеТаблицы = "НДФЛ,Удержания";
	
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияНачислений";
	Описание.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда = "АдресТаблицыРаспределенияПоТерриториямУсловиямТруда";
	Описание.ПоказыватьУсловияТруда = Ложь;
	
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияПоДоговорамРезультат";
	Описание.ВставлятьПослеПоля 	= Истина;
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыУдержаний()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.ИмяРеквизитаВидРасчета = "Удержание";
	Описание.ИмяТаблицы = "Удержания";
	Описание.ПутьКДанным = "Объект.Удержания";
	Описание.ИмяПоляДляВставкиПоказателей = "УдержанияРезультат";
	Описание.НомерТаблицы = 2;
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	Описание.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияУдержаний";
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов = "УдержанияРезультат";
	Описание.ВставлятьПослеПоля 					   = Истина;
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНДФЛ()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы = "НДФЛ";
	Описание.ПутьКДанным = "Объект.НДФЛ";
	Описание.ИмяПоляДляВставкиПоказателей = "Налог";
	Описание.ИмяПоляРезультат = "Налог";
	Описание.ИмяРеквизитаПериод = "МесяцНалоговогоПериода";
	Описание.НомерТаблицы = 3;
	Описание.СодержитПолеВидРасчета = Ложь;
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	Описание.ПроверяемыеРеквизиты = "ФизическоеЛицо,МесяцНалоговогоПериода";
	
	Описание.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияУдержаний";
	Описание.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтрокиНДФЛ";
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов = "НДФЛМесяцНалоговогоПериода";
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыКорректировкиВыплаты()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыКорректировкиВыплаты();
	Описание.ПроверяемыеРеквизиты = "ФизическоеЛицо";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияУдержаний";
	Описание.ОтображатьПоляРаспределенияРезультатов = Истина;
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Функция МассивОписанийТаблицФормы()
	
	МассивОписанийТаблицФормы = Новый Структура;
	МассивОписанийТаблицФормы.Вставить("Удержания", ОписаниеТаблицыУдержаний());
	
	Возврат МассивОписанийТаблицФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДляРаспределенияРезультата(Форма)
	
	ОписанияТаблиц = Новый Массив;
	
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачисленийПоДоговорам());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНДФЛ());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыКорректировкиВыплаты());
	
	Возврат ОписанияТаблиц;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОписанияТаблицДляРаспределенияРезультата(Форма)
	
	ОписанияТаблиц = Новый Структура;
	
	ОписанияТаблиц.Вставить("НачисленияПоДоговорам", ОписаниеТаблицыНачисленийПоДоговорам());
	ОписанияТаблиц.Вставить("Удержания", ОписаниеТаблицыУдержаний());
	ОписанияТаблиц.Вставить("НДФЛ", ОписаниеТаблицыНДФЛ());
	
	Возврат ОписанияТаблиц;
	
КонецФункции

&НаСервере
Процедура ДанныеВРеквизиты(ТекущийОбъект)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИнициализироватьИсточникиДанныхФормыПриПолученииДанных(ТекущийОбъект, МенеджерВременныхТаблиц);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяВТРаспределение", "ВТРаспределениеРезультатовНачислений");
	ДополнительныеПараметры.Вставить("ИмяВТПредставлениеРаспределения", "ВТПредставлениеРаспределенияНачислений");
	ДополнительныеПараметры.Вставить("ПодготовленаВТВычетыКДоходам", Ложь);
	ДополнительныеПараметры.Вставить("Период", '00010101');
	ДополнительныеПараметры.Вставить("ОписаниеПанелиВычеты", ОписаниеПанелиВычеты());
	ДополнительныеПараметры.Вставить("ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда", ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	ДополнительныеПараметры.Вставить("КонтролируемыеПоля", ПолучитьКонтролируемыеПоля());
	
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыНачисленийПоДоговорам(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
	ДополнительныеПараметры.ИмяВТРаспределение = "ВТРаспределениеРезультатовУдержаний";
	ДополнительныеПараметры.ИмяВТПредставлениеРаспределения = "ВТПредставлениеРаспределенияУдержаний";
	
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыУдержаний(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ЗарплатаКадрыРасширенный.ЗаполнитьВторичныеДанныеНДФЛПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыНДФЛ(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыКорректировкиВыплаты(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсточникиДанныхФормыПриПолученииДанных(ТекущийОбъект, МенеджерВременныхТаблиц)
	
	СоздатьВТПоказатели(МенеджерВременныхТаблиц, ТекущийОбъект.Показатели);
	
	АдресТаблицыРаспределенияПоТерриториямУсловиямТруда = "";
	СоздатьВТРаспределениеПоТерриториямУсловиямТруда(МенеджерВременныхТаблиц, ТекущийОбъект.РаспределениеПоТерриториямУсловиямТруда);
	
	ТаблицаРаспределенияНачислений = ТекущийОбъект.РаспределениеРезультатовНачислений.Выгрузить();
	СоздатьВТРаспределениеРезультатовНачислений(МенеджерВременныхТаблиц, ТаблицаРаспределенияНачислений);
	ТаблицаРаспределенияНачислений.Индексы.Добавить("ИдентификаторСтроки");
	
	АдресТаблицыРаспределенияНачислений = ПоместитьВоВременноеХранилище(ТаблицаРаспределенияНачислений, УникальныйИдентификатор);
	
	ТаблицаРаспределенияУдержаний = ТекущийОбъект.РаспределениеРезультатовУдержаний.Выгрузить();
	СоздатьВТРаспределениеРезультатовУдержаний(МенеджерВременныхТаблиц, ТаблицаРаспределенияУдержаний);
	ТаблицаРаспределенияУдержаний.Индексы.Добавить("ИдентификаторСтроки");
	
	АдресТаблицыРаспределенияУдержаний = ПоместитьВоВременноеХранилище(ТаблицаРаспределенияУдержаний, УникальныйИдентификатор);	
	
	СоздатьВТПредставлениеРаспределенияРезультатовРасчета(МенеджерВременныхТаблиц, ТекущийОбъект.ПредставлениеРаспределенияРезультатовРасчета);
	
	ЗарплатаКадрыРасширенный.СоздатьВТПредставлениеРаспределенияНачисленийУдержаний(
		МенеджерВременныхТаблиц,
		ТекущийОбъект.Ссылка,
		"ВТРаспределениеРезультатовНачислений",
		"ВТПредставлениеРаспределенияНачислений");
		
	ЗарплатаКадрыРасширенный.СоздатьВТПредставлениеРаспределенияНачисленийУдержаний(
		МенеджерВременныхТаблиц,
		ТекущийОбъект.Ссылка,
		"ВТРаспределениеРезультатовУдержаний",
		"ВТПредставлениеРаспределенияУдержаний");
		
КонецПроцедуры

&НаСервере
Процедура СоздатьВТПоказатели(МенеджерВременныхТаблиц, ТаблицаПоказателей)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ТаблицаПоказателей);
	
	Запрос.Текст = "ВЫБРАТЬ
		|	Таблица.НомерСтроки,
		|	Таблица.Показатель КАК Показатель,
		|	Таблица.Значение,
		|	Таблица.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ
		|	&ТаблицаПоказателей КАК Таблица";
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТРаспределениеПоТерриториямУсловиямТруда(МенеджерВременныхТаблиц, РаспределениеПоТерриториямУсловиямТруда)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("РаспределениеПоТерриториямУсловиямТруда", РаспределениеПоТерриториямУсловиямТруда);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.НомерСтроки,
	               |	Таблица.ИдентификаторСтроки,
	               |	Таблица.Территория,
	               |	Таблица.УсловияТруда,
	               |	Таблица.ДоляРаспределения,
	               |	Таблица.Результат,
	               |	Таблица.СуммаВычета,
	               |	Таблица.ИдентификаторСтрокиПоказателей
	               |ПОМЕСТИТЬ ВТРаспределениеПоТерриториямУсловиямТруда
	               |ИЗ
	               |	&РаспределениеПоТерриториямУсловиямТруда КАК Таблица";
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТРаспределениеРезультатовНачислений(МенеджерВременныхТаблиц, ТаблицаРаспределенияНачислений)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаРаспределенияНачислений", ТаблицаРаспределенияНачислений);
	
	Запрос.Текст = "ВЫБРАТЬ
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.ИдентификаторСтроки,
		|	Таблица.Территория,
		|	Таблица.СтатьяФинансирования,
		|	Таблица.СтатьяРасходов,
		|	Таблица.СпособОтраженияЗарплатыВБухучете,
		|	Таблица.ОблагаетсяЕНВД,
		|	Таблица.Результат
		|ПОМЕСТИТЬ ВТРаспределениеРезультатовНачислений
		|ИЗ
		|	&ТаблицаРаспределенияНачислений КАК Таблица";
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТРаспределениеРезультатовУдержаний(МенеджерВременныхТаблиц, ТаблицаРаспределенияУдержаний)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаРаспределенияУдержаний", ТаблицаРаспределенияУдержаний);
	
	Запрос.Текст = "ВЫБРАТЬ
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.ИдентификаторСтроки,
		|	Таблица.ВидУдержания,
		|	Таблица.Сотрудник,
		|	Таблица.Подразделение,
		|	Таблица.СтатьяФинансирования,
		|	Таблица.СтатьяРасходов,
		|	Таблица.Результат
		|ПОМЕСТИТЬ ВТРаспределениеРезультатовУдержаний
		|ИЗ
		|	&ТаблицаРаспределенияУдержаний КАК Таблица";
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТПредставлениеРаспределенияРезультатовРасчета(МенеджерВременныхТаблиц, ПредставлениеРаспределенияРезультатовРасчета)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПредставлениеРаспределенияРезультатовРасчета", ПредставлениеРаспределенияРезультатовРасчета);
	
	Запрос.Текст = "ВЫБРАТЬ
		|	Таблица.НомерСтроки,
		|	Таблица.ИдентификаторСтроки,
		|	Таблица.НомерСтрокиРаспределения,
		|	Таблица.НомерЭлементаПредставления,
		|	Таблица.КоличествоЭлементовПредставления,
		|	Таблица.ПредставлениеРезультата,
		|	Таблица.ЕстьОшибкиЗаполнения,
		|	Таблица.РаспределениеНачислений
		|ПОМЕСТИТЬ ВТПредставлениеРаспределенияРезультатовРасчета
		|ИЗ
		|	&ПредставлениеРаспределенияРезультатовРасчета КАК Таблица";
		
	Запрос.Выполнить();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	ПересчитатьДокументНаСервере(СотрудникиКРасчету);
	РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДокументНаСервере(СотрудникиКРасчету)
	
	Для каждого ТаблицаССотрудниками Из СотрудникиКРасчету Цикл
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаССотрудниками.Значение.СписокСотрудников, "Ключ");
		РассчитатьСотрудникаНаСервере(Сотрудники, ТаблицаССотрудниками.Значение.ОписаниеТаблицы, Ложь);
	КонецЦикла;
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРасчетныйЛисток(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти)
	
	СписокСотрудников = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыВыделенныхСтрок Цикл
		
		Если ИмяТабличнойЧасти = "НачисленияПоДоговорам" Тогда
			СписокСотрудников.Добавить(Объект.НачисленияПоДоговорам.НайтиПоИдентификатору(ИдентификаторСтроки).Сотрудник);
		Иначе
			СписокСотрудников.Добавить(Объект.Удержания.НайтиПоИдентификатору(ИдентификаторСтроки).ФизическоеЛицо);
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетныйЛисток = Неопределено;
	Если СписокСотрудников.Количество() = 1 Тогда
		РасчетныйЛисток = ПечатнаяФормаСотрудника(СписокСотрудников[0], "РасчетныйЛисток");
	КонецЕсли;
	
	Если РасчетныйЛисток = Неопределено Тогда
		
		Если Объект.Проведен И Не Модифицированность Тогда
			РасчетныйЛисток = РасчетныйЛистокНаСервереБезКонтекста(Объект.Организация, СписокСотрудников, Объект.МесяцНачисления);
		Иначе
			РасчетныйЛисток = РасчетныйЛистокНаСервере(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти, СписокСотрудников);
		КонецЕсли;
		
		Если СписокСотрудников.Количество() = 1 Тогда
			ДобавитьВКоллекциюПечатнуюФормуСотрудника(СписокСотрудников[0], "РасчетныйЛисток", РасчетныйЛисток);
		КонецЕсли;
		
	КонецЕсли;
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(Объект.Ссылка);
	КарточкаУчета.Добавить(РасчетныйЛисток);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.АнализНачисленийИУдержаний", "РасчетныйЛистокПодробнее", 
		КарточкаУчета, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчетныйЛистокНаСервереБезКонтекста(Организация, СписокФизическихЛиц, Месяц)
	
	Если ТипЗнч(СписокФизическихЛиц[0]) = Тип("СправочникСсылка.Сотрудники") Тогда 
		СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокФизическихЛиц, "ФизическоеЛицо"), "Значение", Истина);
	КонецЕсли;
	
	Возврат УчетНачисленнойЗарплаты.РасчетныйЛистокПоДаннымДокумента(Организация, СписокФизическихЛиц, Месяц);
	
КонецФункции

&НаСервере
Функция РасчетныйЛистокНаСервере(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти, СписокСотрудников)
	
	Если ИмяТабличнойЧасти = "НачисленияПоДоговорам" Тогда
		
		МассивФизическихЛиц = Новый Массив;
		
		Для каждого Сотрудник Из СписокСотрудников Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФизическихЛиц, СотрудникиКлиентСерверПовтИсп.ФизическиеЛицаСотрудников(Сотрудник), Истина);
		КонецЦикла;
		
	Иначе
		МассивФизическихЛиц = СписокСотрудников;
	КонецЕсли;
	
	ДанныеДокумента = Новый Структура;
	
	Возврат УчетНачисленнойЗарплаты.РасчетныйЛистокПоДаннымДокумента(Объект.Организация, МассивФизическихЛиц, Объект.МесяцНачисления, Объект.Ссылка, ДанныеДокумента);
	
КонецФункции

&НаСервере
Процедура ДобавитьКомандуУдалитьСотрудника()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	
	ТаблицыДокумента = Новый Массив;
	ТаблицыДокумента.Добавить("НачисленияПоДоговорам");
	ТаблицыДокумента.Добавить("Удержания");
	ТаблицыДокумента.Добавить("НДФЛ");
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл
		
		ИмяТаблицы = ОписаниеДокумента[ТаблицаДокумента + "Имя"];
		Если ИмяТаблицы <> Неопределено Тогда
			
			ИмяКоманднойПанели = Неопределено;
			
			ОписаниеДокумента.Свойство(ТаблицаДокумента + "КоманднаяПанельИмя", ИмяКоманднойПанели);
			ДобавитьКомандуУдалитьСотрудникаВТаблицуДокумента(ИмяТаблицы, ИмяКоманднойПанели);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуУдалитьСотрудникаВТаблицуДокумента(ИмяТаблицы, ИмяКоманднойПанели)
	
	Если Элементы.Найти(ИмяТаблицы) = Неопределено Тогда
		// Такой таблицы нет в форме
		Возврат;
	КонецЕсли;
	
	Если Команды.Найти(ИмяТаблицы + "УдалитьСотрудника") <> Неопределено Тогда
		// Команда уже существует
		Возврат;
	КонецЕсли;
	
	// Добавляем команду формы
	КомандаУдалитьСотрудника = Команды.Добавить(ИмяТаблицы + "УдалитьСотрудника");
	КомандаУдалитьСотрудника.Действие = "Подключаемый_" + ИмяТаблицы + "УдалитьСотрудника";
	КомандаУдалитьСотрудника.Заголовок = НСтр("ru = 'Удалить сотрудника'");
	КомандаУдалитьСотрудника.Подсказка = НСтр("ru = 'Данные по выбранному сотруднику удаляются со всех таблиц документа'");
	КомандаУдалитьСотрудника.Картинка = БиблиотекаКартинок.Удалить;
	КомандаУдалитьСотрудника.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КомандаУдалитьСотрудника.ИзменяетСохраняемыеДанные = Истина;
	
	// Добавляем элементы (группу кнопок и кнопку) в командную панель.
	Если ИмяКоманднойПанели = Неопределено Тогда
		ИмяКоманднойПанели = ИмяТаблицы + "КоманднаяПанель";
	КонецЕсли;
	
	КоманднаяПанельТаблицы = Элементы.Найти(ИмяКоманднойПанели);
	Если КоманднаяПанельТаблицы <> Неопределено Тогда
		Если КоманднаяПанельТаблицы.ПодчиненныеЭлементы.Количество() = 0 Тогда
			МестоВставки = Неопределено;
		Иначе
			МестоВставки = КоманднаяПанельТаблицы.ПодчиненныеЭлементы[0];
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КоманднаяПанельПересчитатьСотрудникаГруппа";
		ГруппаКнопок = Элементы.Найти(ИмяЭлемента);
		Если ГруппаКнопок = Неопределено Тогда
			ГруппаКнопок = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КоманднаяПанельТаблицы, МестоВставки);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Заголовок = НСтр("ru = 'Обновление строк документа'");
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КоманднаяПанельУдалитьСотрудника";
		Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			КнопкаУдалитьСотрудника = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопок);
			КнопкаУдалитьСотрудника.ИмяКоманды = ИмяТаблицы + "УдалитьСотрудника";
			КнопкаУдалитьСотрудника.ТолькоВоВсехДействиях = Истина;
		КонецЕсли;
		
		// Добавляем элементы в контекстное меню.
		КонтекстноеМеню = Элементы[ИмяТаблицы].КонтекстноеМеню;
		
		МестоВставки = Неопределено;
		Если КонтекстноеМеню.ПодчиненныеЭлементы.Количество() > 0 Тогда
			МестоВставки = КонтекстноеМеню.ПодчиненныеЭлементы[0];
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КонтекстноеМенюПересчитатьСотрудникаГруппа";
		ГруппаКнопок = Элементы.Найти(ИмяЭлемента);
		Если ГруппаКнопок = Неопределено Тогда
			ГруппаКнопок = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КонтекстноеМеню, МестоВставки);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Заголовок = НСтр("ru = 'Обновление строк документа'");
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КонтекстноеМенюУдалитьСотрудника";
		Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			КнопкаУдалитьСотрудника = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопок);
			КнопкаУдалитьСотрудника.ИмяКоманды = ИмяТаблицы + "УдалитьСотрудника";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	ТекущийОбъект.Показатели.Очистить();
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
	
	ОписаниеТаблицы = ОписаниеТаблицыНачисленийПоДоговорам();
	ИдентификаторСтроки = ОписаниеТаблицы.НомерТаблицы * 1000000 + 1;
	Индекс = 0;
	Пока Индекс < Объект.НачисленияПоДоговорам.Количество() Цикл
		ТекущийОбъект.НачисленияПоДоговорам[Индекс].ИдентификаторСтроки = ИдентификаторСтроки;
		Объект.НачисленияПоДоговорам[Индекс].ИдентификаторСтроки = ИдентификаторСтроки;
		Индекс = Индекс + 1;
		ИдентификаторСтроки = ИдентификаторСтроки +1;
	КонецЦикла;
	
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтотОбъект, ТекущийОбъект, ОписанияТаблиц, 2);
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаРеквизитВДанные(ЭтотОбъект, ТекущийОбъект, ОписанияТаблицДляРаспределенияРезультата(ЭтотОбъект));
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, НачалоДня(Объект.МесяцНачисления));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизацииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияКонтролируемыхПолей()
	
	// Выполняет заполнение сведений о значениях контролируемых полей, 
	// которые могли измениться в результате не интерактивного обновления значений.
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "НачисленияПоДоговорам", Истина);
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "Удержания", Истина);
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "НДФЛ", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСотрудникаПриВыбореДоговораГПХ()
	
	ИдентификаторСтроки = Элементы.НачисленияПоДоговорам.ТекущаяСтрока;
	Если ИдентификаторСтроки <> Неопределено Тогда
		
		ТекущиеДанные = Объект.НачисленияПоДоговорам.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Сотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДокументОснование, "Сотрудник");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПересчитатьДокументНаКлиенте();
		Записать(Параметры);
	Иначе
		ЗакрыватьПослеЗаписи = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицНачисленийДляРасчетногоЛистка() Экспорт 
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачисленийПоДоговорам());
	
	Возврат ОписанияТаблиц;
	
КонецФункции

&НаСервере
Функция ОписанияТаблицУдержанийДляРасчетногоЛистка() Экспорт 
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНДФЛ());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыКорректировкиВыплаты());
	
	Возврат ОписанияТаблиц;
	
КонецФункции

&НаКлиенте
Функция ЕстьИсправленныеСтроки() Экспорт
	Возврат ЕстьИсправленныеСтрокиНаСервере();
КонецФункции

&НаСервере
Функция ЕстьИсправленныеСтрокиНаСервере()
	Возврат РасчетЗарплатыРасширенныйФормы.ЕстьИсправленныеСтроки(ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииОбъекта()
	
	ОповеститьОбИзменении(Объект.Ссылка);
	ПараметрыОповещения = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Оповестить("Запись_НачислениеПоДоговорам", ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСотрудникаНаСервере(Сотрудник)
	
	Если Не УдалитьДанныеСотрудникаНаСервере(Сотрудник) Тогда 
		РассчитатьСотрудникаНаСервере(Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьДанныеСотрудникаНаСервере(СотрудникФизическоеЛицо)
	
	УдаляемыеСотрудники = Новый Соответствие;
	ДополнительныеСотрудники = Новый Соответствие;
	
	Если ТипЗнч(СотрудникФизическоеЛицо) = Тип("СправочникСсылка.Сотрудники") Тогда 
	
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникФизическоеЛицо, "ФизическоеЛицо");
		
		УдаляемыеСотрудники.Вставить(СотрудникФизическоеЛицо, Истина);
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Сотрудник", СотрудникФизическоеЛицо);
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка <> &Сотрудник
		|	И Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДополнительныеСотрудники.Вставить(Выборка.Ссылка, Истина);
		КонецЦикла;
		
	Иначе 
		
		ФизическоеЛицо = СотрудникФизическоеЛицо;
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			УдаляемыеСотрудники.Вставить(Выборка.Ссылка, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	ОчиститьУдержания = Истина;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("НачисленияПоДоговорам");
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
	
		СтрокиСотрудника = Новый Массив;
		Для Каждого СтрокаСотрудника Из Объект[ИмяТаблицы] Цикл 
			Если УдаляемыеСотрудники[СтрокаСотрудника.Сотрудник] <> Неопределено Тогда 
				СтрокиСотрудника.Добавить(СтрокаСотрудника);
			ИначеЕсли ДополнительныеСотрудники[СтрокаСотрудника.Сотрудник] <> Неопределено Тогда 
				ОчиститьУдержания = Ложь;
			КонецЕсли;
		КонецЦикла;
	
		Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл 
			Объект[ИмяТаблицы].Удалить(СтрокаСотрудника);
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ОчиститьУдержания Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("НДФЛ");
	ИменаТаблиц.Добавить("Удержания");
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		СтрокиФизическогоЛица = Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
		Для Каждого СтрокаФизическогоЛица Из СтрокиФизическогоЛица Цикл 
			Объект[ИмяТаблицы].Удалить(СтрокаФизическогоЛица);
		КонецЦикла;
	КонецЦикла;
	РассчитатьИтогиПоДокументу();
	
	Возврат Истина;
	
КонецФункции

// НДФЛ
&НаСервере
Функция НДФЛПодробнееНаСервереПоИдентификаторамСтрок(ИдентификаторыСтрок)
	
	ФизическиеЛица = Новый Массив;
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ФизическиеЛица.Добавить(Объект.НДФЛ.НайтиПоИдентификатору(ИдентификаторСтроки).ФизическоеЛицо);
	КонецЦикла;
	
	Возврат НДФЛПодробнееНаСервере(ФизическиеЛица);
	
КонецФункции

&НаСервере
Функция НДФЛПодробнееНаСервере(ФизическиеЛица) Экспорт
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ДокументОбъект);
	
	НДФЛПодробнее = Новый Массив;
	НДФЛПодробнее.Добавить(ДокументОбъект.Ссылка);
	НДФЛПодробнее.Добавить(УчетНДФЛФормы.РегистрНалоговогоУчетаПоНДФЛ(ДокументОбъект, Модифицированность, СписокФизическихЛиц, Объект.МесяцНачисления));
	
	Возврат НДФЛПодробнее;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьВторичныеДанныеТабличныхЧастей(Форма, Период = '00010101', ВыбранныеСотрудники = Неопределено)
		
	Если ВыбранныеСотрудники <> Неопределено Тогда 
		
		ФизическиеЛицаСотрудников = Новый Соответствие;
		ВыбранныеФизическиеЛица = Новый Соответствие;
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ВыбранныеСотрудники", ВыбранныеСотрудники);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&ВыбранныеСотрудники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
		|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо";
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл 
			ФизическиеЛицаСотрудников.Вставить(Выборка.Сотрудник, Выборка.ФизическоеЛицо);
			ВыбранныеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	ОписаниеПанелиВычеты = Форма.ОписаниеПанелиВычетыНаСервере();
	
	ВычетыКДоходам = ОписаниеПанелиВычеты.НастраиваемыеПанели.Получить("ВычетыКДоходам");
	Если ВычетыКДоходам <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "СоответствиеКодовВычетовКодамДоходов",
			Новый ФиксированноеСоответствие(УчетНДФЛ.ВычетыКДоходам(Год(Период))));
			
		ДанныеВычетовКДоходам = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ВычетыКДоходам);
		
		Сотрудники = ДанныеВычетовКДоходам.Выгрузить(, "Сотрудник");
		Сотрудники.Свернуть("Сотрудник");
		
		Если ВыбранныеСотрудники = Неопределено Тогда 
			ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники.ВыгрузитьКолонку("Сотрудник"), "ФизическоеЛицо");
		КонецЕсли;
		
		Для каждого СтрокаНачисления Из ДанныеВычетовКДоходам Цикл
			
			ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаНачисления.Сотрудник];
			Если ВыбранныеСотрудники <> Неопределено И ФизическоеЛицо = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаНачисления.ВычетПримененныйКДоходам = Форма.СоответствиеКодовВычетовКодамДоходов.Получить(СтрокаНачисления.КодДохода) <> Неопределено;
			
			Если ФизическоеЛицо <> Неопределено Тогда
				СтрокаНачисления.ФизическоеЛицо = ФизическоеЛицо;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеНДФЛ = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ.ПутьКДаннымНДФЛ);
	Форма[ОписаниеПанелиВычеты.ИмяГруппыФормыПанелиВычеты + "МаксимальныйИдентификаторСтрокиНДФЛ"] = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(ДанныеНДФЛ);
	
	ДанныеНДФЛСтроки = Новый Массив;
	ИмяПоляФизическоеЛицо = ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ.ИмяПоляФизическоеЛицо;
	
	Для каждого СтрокаНДФЛ Из ДанныеНДФЛ Цикл
		Если ВыбранныеСотрудники <> Неопределено И ВыбранныеФизическиеЛица.Получить(СтрокаНДФЛ[ИмяПоляФизическоеЛицо]) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		УчетНДФЛФормы.ЗаполнитьПредставленияВычетовСтрокиНДФЛ(Форма, СтрокаНДФЛ, ОписаниеПанелиВычеты);
		ДанныеНДФЛСтроки.Добавить(СтрокаНДФЛ);
	КонецЦикла;
		
	Если НЕ ПустаяСтрока(ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ.ИмяПоляПериод) Тогда
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(
			ДанныеНДФЛСтроки,
			ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ.ИмяПоляПериод,
			ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ.ИмяПоляПериод + "Строкой");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторичныеДанныеФормыПримененныеВычеты()
	
	ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогНачислено(Форма)
	
	ОписанияСоставляющихНачисления = Новый Массив;
	
	ОписанияСоставляющихНачисленияПоДоговорам = Новый Массив;
	ОписанияСоставляющихНачисленияПоДоговорам.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='по договорам ГПХ'")));
	
	ОписанияСоставляющих = Новый Массив;
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.НачисленияПоДоговорам", ОписанияСоставляющихНачисленияПоДоговорам));
		
	ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейРассчитатьИтог(Форма, "ИтогНачислено", ОписанияСоставляющих);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогУдержано(Форма)
	
	ОписанияСоставляющихУдержания = Новый Массив;
	ОписанияСоставляющихУдержания.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='удержания'")));

	ОписанияСоставляющихНДФЛ = Новый Массив;
	ОписанияСоставляющихНДФЛ.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Налог", НСтр("ru='НДФЛ'")));
	
	ОписанияСоставляющих = Новый Массив;
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Удержания", ОписанияСоставляющихУдержания));
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.НДФЛ", ОписанияСоставляющихНДФЛ));
	
	ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейРассчитатьИтог(Форма, "ИтогУдержано", ОписанияСоставляющих);
		
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиПоДокументу()
	
	РассчитатьИтогНачислено(ЭтаФорма);
	РассчитатьИтогУдержано(ЭтаФорма);
	
КонецПроцедуры

// Контролируемые поля
&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	КонтролируемыеПоля = Новый Структура;
		
	// Договоры
	ДоговорыФиксРасчет = Новый Массив;
	ДоговорыФиксРасчет.Добавить("Результат");
	
	ДоговорыФиксСтрока = Новый Массив;
	ДоговорыФиксСтрока.Добавить("Сотрудник");
	ДоговорыФиксСтрока.Добавить("Подразделение");
	ДоговорыФиксСтрока.Добавить("ДокументОснование");
	ДоговорыФиксСтрока.Добавить("ДатаНачала");
	ДоговорыФиксСтрока.Добавить("ДатаОкончания");
	ДоговорыФиксСтрока.Добавить("КодДохода");
	ДоговорыФиксСтрока.Добавить("КодВычета");
	ДоговорыФиксСтрока.Добавить("ПланируемаяДатаВыплаты");
	ДоговорыФиксРасчет.Добавить("СуммаВычета");
	
	ДоговорыПоля = Новый Структура;
	ДоговорыПоля.Вставить("ФиксРасчет", ДоговорыФиксРасчет);
	ДоговорыПоля.Вставить("ФиксСтрока", ДоговорыФиксСтрока);
	
	КонтролируемыеПоля.Вставить("НачисленияПоДоговорам", ДоговорыПоля);
		
	// Удержания
	УдержанияФиксРасчет = Новый Массив;
	УдержанияФиксРасчет.Добавить("Результат");
	
	УдержанияФиксСтрока = Новый Массив;
	УдержанияФиксСтрока.Добавить("ФизическоеЛицо");
	УдержанияФиксСтрока.Добавить("Удержание");
	УдержанияФиксСтрока.Добавить("ДатаНачала");
	УдержанияФиксСтрока.Добавить("ДатаОкончания");
	
	УдержанияПоля = Новый Структура;
	УдержанияПоля.Вставить("ФиксРасчет", УдержанияФиксРасчет);
	УдержанияПоля.Вставить("ФиксЗаполнение", Новый Массив);
	УдержанияПоля.Вставить("ФиксСтрока", УдержанияФиксСтрока);
	
	КонтролируемыеПоля.Вставить("Удержания", УдержанияПоля);
	
	КонтролируемыеПоля.Вставить("НДФЛ", УчетНДФЛРасширенный.КонтролируемыеПоляДляФиксацииРезультатов());
	КонтролируемыеПоля.Вставить("КорректировкиВыплаты", РасчетЗарплатыРасширенный.КонтролируемыеПоляКорректировкиВыплатыДляФиксацииРезультатов());
	
	Возврат КонтролируемыеПоля;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей() Экспорт
	Возврат СтарыеЗначенияКонтролируемыхПолей;
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройки()
	
	РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтотОбъект, ОписаниеТаблицыУдержаний());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБухучетРезультатовРасчетаНаСервере(ИсходныеДанные)
	
	Отбор = СотрудникиФизическиеЛицаОтбор(ИсходныеДанные.Сотрудник);
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(Объект.МесяцНачисления, Объект.Организация);
	ЗаполнитьНастройкиМенеджераРасчета(Отбор.ФизическиеЛица, МенеджерРасчета);
	МенеджерРасчета.НастройкиБухучета.ПроверятьНеобходимостьПересчетаНДФЛ = МенеджерРасчета.НастройкиРасчета.РассчитыватьНДФЛ;
	
	НачальныеПозицииВставки = Новый Структура;
	ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, НачальныеПозицииВставки);
	
	МенеджерРасчета.ЗаполнитьНастройкиОбновленияБухучета(ИсходныеДанные);
	МенеджерРасчета.ОбновитьБухучетРезультатовРасчета();
	
	ДанныеДляЗаполненияВДанныеФормы(МенеджерРасчета.Зарплата, НачальныеПозицииВставки);
	
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), Отбор.СотрудникиКРасчету);
	
	РасчетЗарплатыРасширенныйФормы.УстановитьТекущуюСтрокуТаблицыФормы(ЭтаФорма, ИсходныеДанные.ИмяИсходнойТаблицы, ИсходныеДанные.НомерСтрокиИсходнойТаблицы);
	
КонецПроцедуры

#Область РаспределениеПоТерриториямУсловиямТруда

&НаКлиенте
Процедура ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыДляВыбора = РасчетЗарплатыРасширенныйКлиент.ПараметрыДляВыбораПолеРаспределениеПоТерриториямУсловиямТруда();
	ПараметрыДляВыбора.Форма = ЭтаФорма;
	ПараметрыДляВыбора.ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	ПараметрыДляВыбора.ОписаниеТаблицы = ОписаниеТаблицы;
	
	РасчетЗарплатыРасширенныйКлиент.ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПараметрыДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ЭтотОбъект, ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(ЭтотОбъект, РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда()
	Описания = Новый Массив;
	Описания.Добавить(ОписаниеТаблицыНачисленийПоДоговорам());
	Возврат Описания;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПечатныеФормыСотрудников

&НаКлиенте
Функция ПечатнаяФормаСотрудника(Сотрудник, Идентификатор)
	
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
		ФизическоеЛицоСотрудника = СотрудникиКлиентСерверПовтИсп.ФизическиеЛицаСотрудников(Сотрудник)[0];
	Иначе
		ФизическоеЛицоСотрудника = Сотрудник;
	КонецЕсли;
	
	Если СотрудникНеРассчитан(ФизическоеЛицоСотрудника) Тогда
		
		УдалитьПечатныеФормыСотрудника(ФизическоеЛицоСотрудника);
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПодготовитьКоллекциюПечатныхФорм(Идентификатор);
	
	Возврат ПечатныеФормыСотрудников[Идентификатор].ПечатныеФормы.Получить(ФизическоеЛицоСотрудника);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВКоллекциюПечатнуюФормуСотрудника(Сотрудник, Идентификатор, ПечатнаяФорма)
	
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
		ФизическоеЛицоСотрудника = СотрудникиКлиентСерверПовтИсп.ФизическиеЛицаСотрудников(Сотрудник)[0];
	Иначе
		ФизическоеЛицоСотрудника = Сотрудник;
	КонецЕсли;
	
	Если Не СотрудникНеРассчитан(ФизическоеЛицоСотрудника) Тогда
		
		ПодготовитьКоллекциюПечатныхФорм(Идентификатор);
		ИмеющаясяПечатнаяФорма = ПечатныеФормыСотрудников[Идентификатор].ПечатныеФормы.Получить(ФизическоеЛицоСотрудника);
		
		ПечатныеФормыСотрудников[Идентификатор].ПечатныеФормы.Вставить(ФизическоеЛицоСотрудника, ПечатнаяФорма);
		Если ИмеющаясяПечатнаяФорма = Неопределено Тогда
			
			ПечатныеФормыСотрудников[Идентификатор].Порядок.Добавить(ФизическоеЛицоСотрудника);
			Если ПечатныеФормыСотрудников[Идентификатор].Порядок.Количество() > 100 Тогда
				ПечатныеФормыСотрудников[Идентификатор].Порядок.Удалить(0);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СотрудникНеРассчитан(ФизическоеЛицоСотрудника)
	
	НеРассчитан = Ложь;
	
	Для каждого ТаблицаССотрудниками Из СотрудникиКРасчету Цикл
		
		Если ТаблицаССотрудниками.Значение.СписокСотрудников.Получить(ФизическоеЛицоСотрудника) <> Неопределено Тогда
			
			НеРассчитан = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НеРассчитан;
	
КонецФункции

&НаКлиенте
Процедура УдалитьПечатныеФормыСотрудника(Сотрудник)
	
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
		ФизическоеЛицоСотрудника = СотрудникиКлиентСерверПовтИсп.ФизическиеЛицаСотрудников(Сотрудник)[0];
	Иначе
		ФизическоеЛицоСотрудника = Сотрудник;
	КонецЕсли;
	
	Если ПечатныеФормыСотрудников <> Неопределено Тогда
		
		Для каждого ОписаниеПечатныхФорм Из ПечатныеФормыСотрудников Цикл
			
			Идентификатор = ОписаниеПечатныхФорм.Ключ;
			Если ПечатныеФормыСотрудников[Идентификатор].ПечатныеФормы.Получить(ФизическоеЛицоСотрудника) <> Неопределено Тогда
				
				ПечатныеФормыСотрудников[Идентификатор].ПечатныеФормы.Удалить(ФизическоеЛицоСотрудника);
				
				ИндексПоПорядку = ПечатныеФормыСотрудников[Идентификатор].Порядок.Найти(ФизическоеЛицоСотрудника);
				ПечатныеФормыСотрудников[Идентификатор].Порядок.Удалить(ИндексПоПорядку);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьКоллекциюПечатныхФорм(Идентификатор)
	
	Если ПечатныеФормыСотрудников = Неопределено Тогда
		ПечатныеФормыСотрудников = Новый Структура;
	КонецЕсли;
	
	Если Не ПечатныеФормыСотрудников.Свойство(Идентификатор) Тогда
		ПечатныеФормыСотрудников.Вставить(Идентификатор, Новый Структура("Порядок,ПечатныеФормы", Новый Массив, Новый Соответствие));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении();
	Возврат Массив;
	
КонецФункции

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = КлючевыеРеквизитыОписаниеКлючевыхРеквизитов();
	Возврат Массив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении() 
	
	Массив = Новый Массив;
	Массив.Добавить("Объект.НачисленияПоДоговорам");
	Массив.Добавить("Объект.НДФЛ");
	Массив.Добавить("Объект.Удержания");
	Массив.Добавить("Объект.ПримененныеВычетыНаДетейИИмущественные");
	
	Возврат Массив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыОписаниеКлючевыхРеквизитов() 
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",					Нстр("ru = 'организации'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "ПодразделениеОрганизации",		Нстр("ru = 'подразделения'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "МесяцНачисленияСтрокой", 		Нстр("ru = 'месяца начисления'")));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область Инициализация

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;
СотрудникиКРасчету = Новый Соответствие;

#КонецОбласти
