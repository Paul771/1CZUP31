#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Сторнирует документ по учетам. Используется подсистемой исправления документов.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений исправляющего документа в которую будут добавлены сторно стоки.
//  Регистратор				 - ДокументСсылка				 - Документ регистратор исправления (документ исправление).
//  ИсправленныйДокумент	 - ДокументСсылка				 - Исправленный документ движения которого будут сторнированы.
//  СтруктураВидовУчета		 - Структура					 - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//  					Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//  ДополнительныеПараметры	 - Структура					 - Структура со свойствами:
//  					* ИсправлениеВТекущемПериоде - Булево - Истина когда исправление выполняется в периоде регистрации исправленного документа.
//						* ОтменаДокумента - Булево - Истина когда исправление вызвано документом СторнированиеНачислений.
//  					* ПериодРегистрации	- Дата - Период регистрации документа регистратора исправления.
// 
// Возвращаемое значение:
//  Булево - "Истина" если сторнирование выполнено этой функцией, "Ложь" если специальной процедуры не предусмотрено.
//
Функция СторнироватьПоУчетам(Движения, Регистратор, ИсправленныйДокумент, СтруктураВидовУчета, ДополнительныеПараметры) Экспорт
	
	УправлениеШтатнымРасписанием.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
	
	Если ДополнительныеПараметры.ОтменаДокумента Тогда
		ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияПоВсемУчетам(Движения, ИсправленныйДокумент, Ложь, СтруктураВидовУчета);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ВосстановлениеВДолжности;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическоеЛицоВШапке(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты", , Ложь) Тогда
		
		// Бронирование позиции
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Документ.ВосстановлениеВДолжности";
		КомандаПечати.Идентификатор = "ПФ_MXL_ПриказОВосстановленииНаРаботе";
		КомандаПечати.Представление = НСтр("ru = 'Приказ о восстановлении на работе'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  (входные)
//    МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - дополнительные настройки печати;
//  (выходные)
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//   ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	НужноПечататьПриказ = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОВосстановленииНаРаботе");
	
	Если НужноПечататьПриказ Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОВосстановленииНаРаботе",
			НСтр("ru = 'Приказ о восстановлении на работе'"), ПечатьПриказа(МассивОбъектов, ОбъектыПечати), ,
			"Документ.ВосстановлениеВДолжности.ПФ_MXL_ПриказОВосстановленииНаРаботе");
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьПриказа(МассивОбъектов, ОбъектыПечати)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПФ_MXL_ПриказОВосстановленииНаРаботе";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВосстановлениеВДолжности.ПФ_MXL_ПриказОВосстановленииНаРаботе");
	
	Выборка = ВыборкаДанныхДляПечатиДокументов(МассивОбъектов);
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если НомерСтрокиНачало > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьПечати = Макет.ПолучитьОбласть("ПерваяОбласть");
		
		ОбластьПечати.Параметры.Заполнить(Выборка);
		ОбластьПечати.Параметры.ДатаПриказа = Формат(Выборка.Дата, "ДЛФ=DD");
		
		ОбластьПечати.Параметры.ДатаУвольнения = Формат(Выборка.ДатаУвольнения, "ДЛФ=DD");
		ОбластьПечати.Параметры.ДатаПриказаОбУвольнении = Формат(Выборка.ДатаПриказаОбУвольнении, "ДЛФ=DD");
		
		Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
			ОбластьПечати.Параметры.НомерПриказа = КадровыйУчетРасширенный.НомерКадровогоПриказа(Выборка.Номер);
			ОбластьПечати.Параметры.НомерПриказаОбУвольнении = КадровыйУчетРасширенный.НомерКадровогоПриказа(Выборка.НомерПриказаОбУвольнении)
		Иначе
			ОбластьПечати.Параметры.НомерПриказа = Выборка.Номер;
			ОбластьПечати.Параметры.НомерПриказаОбУвольнении = Выборка.НомерПриказаОбУвольнении;
		КонецЕсли;
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ОбластьПечати.Параметры.Подразделение) Тогда
			ОбластьПечати.Параметры.Подразделение = ОбластьПечати.Параметры.Подразделение.ПолноеНаименование();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.СотрудникФИОПолные) Тогда
			
			ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(Выборка.СотрудникФИОПолные),
				4, ОбластьПечати.Параметры.СотрудникФИОПолные, Выборка.СотрудникПол);
			
		КонецЕсли;
		
		ОбластьПечати.Параметры.ТабельныйНомер = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(Выборка.ТабельныйНомер, Истина, Истина);
		
		Если ЗначениеЗаполнено(ОбластьПечати.Параметры.РазрядКатегория) Тогда
			ОбластьПечати.Параметры.РазрядКатегория = ", " + Выборка.РазрядКатегория;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ОтветственноеЛицоРасчетчик) Тогда
			
			ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(Выборка.ОтветственноеЛицоРасчетчик),
				3, ОбластьПечати.Параметры.ОтветственноеЛицоРасчетчик, Выборка.ОтветственноеЛицоРасчетчикПол);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПечати);
		
		Если Выборка.КомпенсироватьМоральныйВред Тогда
			ОбластьПечати = Макет.ПолучитьОбласть("ВтораяОбластьСКомпенсациейМатериальногоВреда");
		Иначе
			ОбластьПечати = Макет.ПолучитьОбласть("ВтораяОбласть");
		КонецЕсли;
		
		ОбластьПечати.Параметры.Заполнить(Выборка);
		
		Если Выборка.КомпенсироватьМоральныйВред Тогда
			ОбластьПечати.Параметры.РазмерКомпенсации = Формат(Выборка.СуммаКомпенсации, "ЧДЦ=2");
		КонецЕсли;
		
		ОбластьПечати.Параметры.ДатаВыплатыКомпенсаций = Формат(Выборка.ДатаВыплатыКомпенсаций, "ДЛФ=DD");
		ОбластьПечати.Параметры.ДатаНачалаОплатыПоСреднемуЗаработку = Формат(Выборка.ДатаНачалаОплатыПоСреднемуЗаработку, "ДЛФ=DD");
		ОбластьПечати.Параметры.ДатаОкончанияОплатыПоСреднемуЗаработку = Формат(Выборка.ДатаОкончанияОплатыПоСреднемуЗаработку, "ДЛФ=DD");
		
		ТабличныйДокумент.Вывести(ОбластьПечати);
		
		ОбластьПечати = Макет.ПолучитьОбласть("ТретьяОбласть");
		
		ОбластьПечати.Параметры.Заполнить(Выборка);
		
		Если ЗначениеЗаполнено(Выборка.ОтветственноеЛицоКадровик) Тогда
			
			ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(Выборка.ОтветственноеЛицоКадровик),
				3, ОбластьПечати.Параметры.ОтветственноеЛицоКадровик, Выборка.ОтветственноеЛицоКадровикПол);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИсполнительФамилия) Тогда
			
			ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(Выборка.ИсполнительФамилия),
				3, ОбластьПечати.Параметры.ИсполнительФамилияИО, Выборка.ИсполнительПол);
			
			СтруктураФИОИсполнителя = Новый Структура;
			СтруктураФИОИсполнителя.Вставить("Фамилия", ОбластьПечати.Параметры.ИсполнительФамилияИО);
			СтруктураФИОИсполнителя.Вставить("Имя", Выборка.ИсполнительИмя);
			СтруктураФИОИсполнителя.Вставить("Отчество", Выборка.ИсполнительОтчество);
			
			ОбластьПечати.Параметры.ИсполнительФамилияИО = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИОИсполнителя);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДолжностьИсполнителя) Тогда
			
			ОбластьПечати.Параметры.ДолжностьИсполнителя =
				СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(Выборка.ДолжностьИсполнителя), 3);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПечати);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ВыборкаДанныхДляПечатиДокументов(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВосстановлениеВДолжности.Ссылка,
		|	ВосстановлениеВДолжности.Дата,
		|	ВосстановлениеВДолжности.Номер,
		|	ВосстановлениеВДолжности.Организация.НаименованиеПолное КАК НаименованиеОрганизации,
		|	ВосстановлениеВДолжности.Подразделение,
		|	ВосстановлениеВДолжности.Сотрудник,
		|	ВосстановлениеВДолжности.Должность,
		|	ВосстановлениеВДолжности.ДолжностьПоШтатномуРасписанию,
		|	ВосстановлениеВДолжности.ДатаВосстановления,
		|	ВосстановлениеВДолжности.ДатаУвольнения,
		|	ВосстановлениеВДолжности.ДокументУвольнения,
		|	ВосстановлениеВДолжности.ОснованиеВосстановленияВДолжности,
		|	ВосстановлениеВДолжности.РазрядКатегория,
		|	ВосстановлениеВДолжности.ДатаВыплатыКомпенсаций,
		|	ВосстановлениеВДолжности.СуммаКомпенсации,
		|	ВосстановлениеВДолжности.КомпенсироватьМоральныйВред,
		|	ДОБАВИТЬКДАТЕ(ВосстановлениеВДолжности.ДатаУвольнения, ДЕНЬ, 1) КАК ДатаНачалаОплатыПоСреднемуЗаработку,
		|	ДОБАВИТЬКДАТЕ(ВосстановлениеВДолжности.ДатаВосстановления, ДЕНЬ, -1) КАК ДатаОкончанияОплатыПоСреднемуЗаработку,
		|	ВосстановлениеВДолжности.ДокументУвольнения.Дата КАК ДатаПриказаОбУвольнении,
		|	ВосстановлениеВДолжности.ДокументУвольнения.Номер КАК НомерПриказаОбУвольнении,
		|	ВосстановлениеВДолжности.Руководитель,
		|	ВосстановлениеВДолжности.ДолжностьРуководителя,
		|	ВосстановлениеВДолжности.Бухгалтер,
		|	ВосстановлениеВДолжности.РаботникКадровойСлужбы,
		|	ВосстановлениеВДолжности.Исполнитель,
		|	ВосстановлениеВДолжности.ДолжностьИсполнителя,
		|	ВосстановлениеВДолжности.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТДанныеДокументовВосстановлениеВДолжности
		|ИЗ
		|	Документ.ВосстановлениеВДолжности КАК ВосстановлениеВДолжности
		|ГДЕ
		|	ВосстановлениеВДолжности.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина,
		"Руководитель,Бухгалтер,РаботникКадровойСлужбы,Исполнитель,ФизическоеЛицо", "ВТДанныеДокументовВосстановлениеВДолжности");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокументовВосстановлениеВДолжности.ДокументУвольнения
		|ИЗ
		|	ВТДанныеДокументовВосстановлениеВДолжности КАК ДанныеДокументовВосстановлениеВДолжности";
	
	КадровыйУчет.СоздатьВТДанныеДокументовУвольнение(Запрос.МенеджерВременныхТаблиц, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументУвольнения"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументовВосстановлениеВДолжности.Ссылка,
		|	ДанныеДокументовВосстановлениеВДолжности.Дата,
		|	ДанныеДокументовВосстановлениеВДолжности.Номер,
		|	ДанныеДокументовВосстановлениеВДолжности.НаименованиеОрганизации,
		|	ДанныеДокументовВосстановлениеВДолжности.Подразделение,
		|	ДанныеДокументовВосстановлениеВДолжности.Сотрудник,
		|	ДанныеДокументовВосстановлениеВДолжности.Сотрудник.Код КАК ТабельныйНомер,
		|	ДанныеДокументовВосстановлениеВДолжности.Должность,
		|	ДанныеДокументовВосстановлениеВДолжности.ДолжностьПоШтатномуРасписанию,
		|	ДанныеДокументовВосстановлениеВДолжности.ДатаВосстановления,
		|	ДанныеДокументовВосстановлениеВДолжности.ДатаУвольнения,
		|	ДанныеДокументовВосстановлениеВДолжности.ДокументУвольнения,
		|	ДанныеДокументовВосстановлениеВДолжности.ОснованиеВосстановленияВДолжности,
		|	ДанныеДокументовВосстановлениеВДолжности.РазрядКатегория,
		|	ДанныеДокументовВосстановлениеВДолжности.ДатаВыплатыКомпенсаций,
		|	ДанныеДокументовВосстановлениеВДолжности.СуммаКомпенсации,
		|	ДанныеДокументовВосстановлениеВДолжности.КомпенсироватьМоральныйВред,
		|	ДанныеДокументовВосстановлениеВДолжности.ДатаНачалаОплатыПоСреднемуЗаработку,
		|	ДанныеДокументовВосстановлениеВДолжности.ДатаОкончанияОплатыПоСреднемуЗаработку,
		|	ДанныеДокументовВосстановлениеВДолжности.НомерПриказаОбУвольнении,
		|	ДанныеДокументовВосстановлениеВДолжности.ДатаПриказаОбУвольнении,
		|	ДанныеДокументовВосстановлениеВДолжности.Руководитель,
		|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительИОФамилия,
		|	ДанныеДокументовВосстановлениеВДолжности.ДолжностьРуководителя,
		|	ДанныеДокументовВосстановлениеВДолжности.Бухгалтер,
		|	ФИОБухгалтера.ФИОПолные КАК ОтветственноеЛицоРасчетчик,
		|	ФИОБухгалтера.Пол КАК ОтветственноеЛицоРасчетчикПол,
		|	ДанныеДокументовВосстановлениеВДолжности.РаботникКадровойСлужбы,
		|	ФИОРаботникаКадровойСлужбы.ФИОПолные КАК ОтветственноеЛицоКадровик,
		|	ФИОРаботникаКадровойСлужбы.Пол КАК ОтветственноеЛицоКадровикПол,
		|	ДанныеДокументовВосстановлениеВДолжности.Исполнитель,
		|	ФИОИсполнителя.Пол КАК ИсполнительПол,
		|	ФИОИсполнителя.Фамилия КАК ИсполнительФамилия,
		|	ФИОИсполнителя.Имя КАК ИсполнительИмя,
		|	ФИОИсполнителя.Отчество КАК ИсполнительОтчество,
		|	ДанныеДокументовВосстановлениеВДолжности.ДолжностьИсполнителя,
		|	ДанныеДокументовВосстановлениеВДолжности.ФизическоеЛицо,
		|	ФИОСотрудника.ФИОПолные КАК СотрудникФИОПолные,
		|	ФИОСотрудника.РасшифровкаПодписи КАК СотрудникИОФамилия,
		|	ФИОСотрудника.Пол КАК СотрудникПол,
		|	ДанныеДокументовУвольнение.ОснованиеУвольнения
		|ИЗ
		|	ВТДанныеДокументовВосстановлениеВДолжности КАК ДанныеДокументовВосстановлениеВДолжности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументовВосстановлениеВДолжности.Ссылка = ФИОРуководителя.Ссылка
		|			И ДанныеДокументовВосстановлениеВДолжности.Руководитель = ФИОРуководителя.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
		|		ПО ДанныеДокументовВосстановлениеВДолжности.Ссылка = ФИОБухгалтера.Ссылка
		|			И ДанныеДокументовВосстановлениеВДолжности.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРаботникаКадровойСлужбы
		|		ПО ДанныеДокументовВосстановлениеВДолжности.Ссылка = ФИОРаботникаКадровойСлужбы.Ссылка
		|			И ДанныеДокументовВосстановлениеВДолжности.РаботникКадровойСлужбы = ФИОРаботникаКадровойСлужбы.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОИсполнителя
		|		ПО ДанныеДокументовВосстановлениеВДолжности.Ссылка = ФИОИсполнителя.Ссылка
		|			И ДанныеДокументовВосстановлениеВДолжности.Исполнитель = ФИОИсполнителя.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОСотрудника
		|		ПО ДанныеДокументовВосстановлениеВДолжности.Ссылка = ФИОСотрудника.Ссылка
		|			И ДанныеДокументовВосстановлениеВДолжности.ФизическоеЛицо = ФИОСотрудника.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокументов КАК ДанныеДокументовУвольнение
		|		ПО ДанныеДокументовВосстановлениеВДолжности.ДокументУвольнения = ДанныеДокументовУвольнение.Ссылка";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти


Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	Если КадровыйУчетРасширенный.ПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Тогда
		
		ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
			КомандыСозданияДокументов, Метаданные.Документы.ВосстановлениеВДолжности);
		
	КонецЕсли; 
	
КонецФункции

Процедура РассчитатьФОТПоДокументу(ДокументОбъект) Экспорт
	
	ТаблицаНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ТаблицаПоказателей = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
	ИзвестныеКадровыеДанные = ПлановыеНачисленияСотрудников.СоздатьТаблицаКадровыхДанных();
	
	КадровыеДанныеСотрудника = ИзвестныеКадровыеДанные.Добавить();
	КадровыеДанныеСотрудника.Сотрудник = ДокументОбъект.Сотрудник;
	КадровыеДанныеСотрудника.Период = ДокументОбъект.ДатаВосстановления;
	КадровыеДанныеСотрудника.Организация = ДокументОбъект.Организация;
	КадровыеДанныеСотрудника.Подразделение = ДокументОбъект.Подразделение;
	КадровыеДанныеСотрудника.ГрафикРаботы = ДокументОбъект.ГрафикРаботы;
	КадровыеДанныеСотрудника.КоличествоСтавок = ДокументОбъект.КоличествоСтавок;
	
	СписокНачислений = Новый Массив;
	Для Каждого СтрокаНачисления Из ДокументОбъект.Начисления Цикл
		ДанныеНачисления = ТаблицаНачислений.Добавить();
		ДанныеНачисления.Сотрудник = ДокументОбъект.Сотрудник;
		ДанныеНачисления.Период = ДокументОбъект.ДатаВосстановления;
		ДанныеНачисления.Начисление = СтрокаНачисления.Начисление;
		ДанныеНачисления.Размер = СтрокаНачисления.Размер;
		
	КонецЦикла;
	
	Для Каждого СтрокаПоказателя Из ДокументОбъект.Показатели Цикл
		ДанныеПоказателя = ТаблицаПоказателей.Добавить();
		ДанныеПоказателя.Сотрудник = ДокументОбъект.Сотрудник;
		ДанныеПоказателя.Период = ДокументОбъект.ДатаВосстановления;
		ДанныеПоказателя.Показатель = СтрокаПоказателя.Показатель;
		ДанныеПоказателя.Значение = СтрокаПоказателя.Значение;
	КонецЦикла;
	
	РассчитанныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ТаблицаНачислений, ТаблицаПоказателей, ИзвестныеКадровыеДанные);
	
	Для Каждого ОписаниеНачисления Из РассчитанныеДанные.ПлановыйФОТ Цикл
		
		СтрокиДокумента = ДокументОбъект.Начисления.НайтиСтроки(Новый Структура("Начисление", ОписаниеНачисления.Начисление));
		Если СтрокиДокумента.Количество() > 0 Тогда
			СтрокиДокумента[0].Размер = ОписаниеНачисления.ВкладВФОТ;
		КонецЕсли; 
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаполнитьФОТВДвиженияхЗагружаемогоДокумента(ДокументОбъект.Движения.ПлановыеНачисления, ДокументОбъект.Начисления);		
КонецПроцедуры

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная, ЧтениеДанныхДляНачисленияЗарплатыРасширенная", , Ложь);
	
КонецФункции	

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ДанныеДляПроверкиОграничений.Подразделение = Объект.Подразделение;
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок, ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей = Неопределено) Экспорт
	
	ДанныеДляРегистрацииВУчете = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВосстановлениеВДолжности.Ссылка КАК Ссылка,
		|	ВосстановлениеВДолжности.Ссылка.Организация КАК Организация,
		|	ВосстановлениеВДолжности.Подразделение КАК Подразделение,
		|	ВосстановлениеВДолжности.Сотрудник КАК Сотрудник,
		|	ВосстановлениеВДолжности.Должность КАК Должность,
		|	ВосстановлениеВДолжности.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	ВосстановлениеВДолжности.ДатаВосстановления КАК ДатаСобытия,
		|	ВосстановлениеВДолжности.КоличествоСтавок КАК КоличествоСтавок,
		|	ВосстановлениеВДолжности.ВидЗанятости КАК ВидЗанятости,
		|	ВосстановлениеВДолжности.ГрафикРаботы КАК ГрафикРаботы,
		|	ВосстановлениеВДолжности.Территория КАК Территория
		|ИЗ
		|	Документ.ВосстановлениеВДолжности КАК ВосстановлениеВДолжности
		|ГДЕ
		|	ВосстановлениеВДолжности.Ссылка В(&МассивСсылок)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл	
		
		Пока Выборка.Следующий() Цикл
			КадровыйУчетРасширенный.ДобавитьДанныеОСтажахПФР(ДанныеДляРегистрацииВУчете, Выборка.Ссылка, Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
	// Данные о сотрудниках, переводимых на внутреннее совмещение
	Если ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей = Неопределено Тогда
		ВидыЗанятостиВнутреннихСовместителей = ВидыЗанятостиВнутреннихСовместителей(МассивСсылок);
	Иначе
		ВидыЗанятостиВнутреннихСовместителей = Новый Соответствие;
		ВидыЗанятостиВнутреннихСовместителей.Вставить(МассивСсылок[0], ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей);
	КонецЕсли;
	
	КадровыйУчетРасширенный.ДополнитьДанныеДляРегистрацииВУчетеСтажейПФРСведениямиВнутреннихСовместителей(
		ДанныеДляРегистрацииВУчете, ВидыЗанятостиВнутреннихСовместителей);
	
	Возврат ДанныеДляРегистрацииВУчете;
	
КонецФункции

Функция ВидыЗанятостиВнутреннихСовместителей(МассивСсылок)
	
	ВидыЗанятостиВнутреннихСовместителей = Новый Соответствие;
	
	Выборка = РезультатЗапросаПоДвижениямВидовЗанятостиСотрудников(МассивСсылок).Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ДвиженияВидовЗанятости = Новый ТаблицаЗначений;
		ДвиженияВидовЗанятости.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ДвиженияВидовЗанятости.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
		ДвиженияВидовЗанятости.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ДвиженияВидовЗанятости.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ДвиженияВидовЗанятости.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ДвиженияВидовЗанятости.Колонки.Добавить("ВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
		ДвиженияВидовЗанятости.Колонки.Добавить("ДействуетДо", Новый ОписаниеТипов("Дата"));
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДвиженияВидовЗанятости, Выборка);
		КонецЦикла;
		
		ВидыЗанятостиВнутреннихСовместителей.Вставить(Выборка.Ссылка,
			КадровыйУчетРасширенный.ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей(ДвиженияВидовЗанятости, Выборка.Организация));
		
	КонецЦикла;
	
	Возврат ВидыЗанятостиВнутреннихСовместителей;
	
КонецФункции

Функция РезультатЗапросаПоДвижениямВидовЗанятостиСотрудников(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВосстановлениеВДолжности.Ссылка КАК Ссылка,
		|	ВосстановлениеВДолжности.Ссылка.Организация КАК Организация,
		|	ВосстановлениеВДолжности.ДатаВосстановления КАК ДатаСобытия,
		|	ВосстановлениеВДолжности.ДатаВосстановления КАК Период,
		|	ВосстановлениеВДолжности.Сотрудник КАК Сотрудник,
		|	ВосстановлениеВДолжности.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВосстановлениеВДолжности.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВосстановлениеВДолжности.ВидЗанятости КАК ВидЗанятости,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	Документ.ВосстановлениеВДолжности КАК ВосстановлениеВДолжности
		|ГДЕ
		|	ВосстановлениеВДолжности.Ссылка В(&МассивСсылок)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ЗаполнитьОбъект(Объект, Сотрудник, ДатаСобытия, ДокументУвольнения = Неопределено) Экспорт
	
	ИменаКадровыхДанных = "
		|ДатаУвольнения,
		|Организация,
		|Подразделение,
		|Должность,
		|ДолжностьПоШтатномуРасписанию,
		|Территория,
		|КоличествоСтавок,
		|ВидЗанятости,
		|ГрафикРаботы,
		|СпособРасчетаАванса,
		|Аванс,
		|СпособОтраженияЗарплатыВБухучете,
		|ОтношениеКЕНВД,
		|СтатьяФинансирования,
		|ПорядокРасчетаСтоимостиЕдиницыВремени,
		|СовокупнаяТарифнаяСтавка,
		|ВидСовокупнойТарифнойСтавки,
		|РазрядКатегория,
		|ВидДоговора,
		|СрочныйДоговор,
		|ДатаОкончания,
		|ОснованиеСрочногоДоговора,
		|СрокЗаключенияДоговора,
		|ОснованиеПредставителя,
		|ПоступлениеНаСлужбуВпервые,
		|ВидАктаГосоргана,
		|ОборудованиеРабочегоМеста,
		|ИныеУсловияДоговора,
		|ПКУ,
		|СезонныйДоговор";
	
	Если Не ЗначениеЗаполнено(ДокументУвольнения) Тогда
		ИменаКадровыхДанных = ИменаКадровыхДанных + ",ПриказОбУвольнении";
	Иначе
		Объект.ДокументУвольнения = ДокументУвольнения;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		МодульГрейды = ОбщегоНазначения.ОбщийМодуль("Грейды");
		МодульГрейды.ДобавитьВКоллекциюПоляСведенийОГрейдах(ИменаКадровыхДанных, "Грейд");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДобавитьВКоллекциюПоляСведенийОГосударственныхИлиМуниципальныхСлужащих(ИменаКадровыхДанных, "СпособПоступленияНаСлужбу");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудник, ИменаКадровыхДанных, ДатаСобытия);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если КадровыеДанные.Количество() > 0 Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, КадровыеДанные[0]);
		
		Объект.ДатаЗавершенияТрудовогоДоговора = КадровыеДанные[0].ДатаОкончания;
		Объект.ОснованиеПредставителяНанимателя = КадровыеДанные[0].ОснованиеПредставителя;
		Объект.ВидТарифнойСтавки = КадровыеДанные[0].ВидСовокупнойТарифнойСтавки;
		
		Если Не ЗначениеЗаполнено(ДокументУвольнения) Тогда
			Объект.ДокументУвольнения = КадровыеДанные[0].ПриказОбУвольнении;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
		
		ТекстПредупреждения = НСтр("ru='Сотрудник %1 еще не уволен'");
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, Объект.Сотрудник);
		
		Объект.Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
		Объект.ДатаУвольнения = '00010101';
		Объект.ДокументУвольнения = Документы.Увольнение.ПустаяСсылка();
		
		ВызватьИсключение ТекстПредупреждения;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДокументУвольнения) Тогда
		
		Объект.Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
		Объект.ДатаУвольнения = '00010101';
		Объект.ДокументУвольнения = Документы.Увольнение.ПустаяСсылка();
		
		ВызватьИсключение НСтр("ru='Восстановление в должности можно оформлять на основании документа Увольнение'");
		
	КонецЕсли;
	
	ДатаУвольнения = Объект.ДатаУвольнения;
	
	// Начисления
	Объект.Начисления.Очистить();
	Объект.Показатели.Очистить();
	
	ЗарплатаКадрыРасширенный.ДействующиеНачисленияВРеквизит(
		Объект.Ссылка, СотрудникиДаты(Объект, ДатаУвольнения), Объект.Начисления, Объект.Показатели, ОписаниеТаблицыНачислений());
	
	// Льготы
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ЗаполнитьСоставДействующихЛьготСотрудникаВОбъекте(Объект, ДатаУвольнения, Объект.Льготы, Объект.Показатели, ОписаниеТаблицыЛьгот());
	КонецЕсли;
	
	// Остатки отпусков
	
	Объект.ЕжегодныеОтпуска.Очистить();
	
	ДанныеДокумента = ОстаткиОтпусков.ОписаниеПараметровДанныхКадровогоДокумента();
	ДанныеДокумента.Регистратор = Объект.Ссылка;
	ДанныеДокумента.Сотрудник = Сотрудник;
	ДанныеДокумента.ДатаСобытия = ДатаУвольнения;
	
	ОстаткиОтпусков.ЗаполнитьДействующимиПравамиСотрудника(Объект.ЕжегодныеОтпуска, ДанныеДокумента);
	
КонецПроцедуры

Функция СотрудникиДаты(Объект, ДатаСобытия) Экспорт
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаСотрудник = ТаблицаСотрудников.Добавить();
	
	СтрокаСотрудник.Сотрудник = Объект.Сотрудник;
	СтрокаСотрудник.ДолжностьПоШтатномуРасписанию = Объект.ДолжностьПоШтатномуРасписанию;
	СтрокаСотрудник.Период = ДатаСобытия;
	
	Возврат ТаблицаСотрудников;
	
КонецФункции

Функция ОписаниеТаблицыНачислений() Экспорт
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыПлановыхНачисленийДокумента();
	Возврат ОписаниеТаблицы;
	
КонецФункции

Функция ОписаниеТаблицыЛьгот() Экспорт
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыПлановыхНачисленийДокумента();
	
	ОписаниеТаблицы.ИмяТаблицы =				"Льготы";
	ОписаниеТаблицы.НомерТаблицы =				1;
	ОписаниеТаблицы.ИмяРеквизитаВидРасчета =	"Льгота";
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

#КонецОбласти

#КонецЕсли
