#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ДатаВосстановления = ТекущаяДатаСеанса();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники")
		Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Увольнение") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
			Сотрудник = ДанныеЗаполнения;
		Иначе
			
			ДокументУвольнения = ДанныеЗаполнения;
			ДанныеДокументаУвольнение = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Сотрудник");
			Сотрудник = ДанныеДокументаУвольнение.Сотрудник;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		Документы.ВосстановлениеВДолжности.ЗаполнитьОбъект(ЭтотОбъект, Сотрудник, ТекущаяДатаСеанса(), ДокументУвольнения);
		УстановитьПривилегированныйРежим(Ложь);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Исправить" Тогда
			
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, ДанныеЗаполнения.Ссылка);
			
			ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
			ЗарплатаКадрыРасширенный.ПриКопированииМногофункциональногоДокумента(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		Модуль.ОбработкаЗаполненияКадровогоПриказа(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ЕжегодныеОтпуска") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			
			Если ДанныеЗаполнения.Свойство("Организация") Тогда
				Организация = ДанныеЗаполнения.Организация;
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("Сотрудник") Тогда
				Сотрудник = ДанныеЗаполнения.Сотрудник;
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("ДатаВосстановления") Тогда
				ДатаВосстановления = ДанныеЗаполнения.ДатаВосстановления;
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("ДолжностьПоШтатномуРасписанию") Тогда
				ДолжностьПоШтатномуРасписанию = ДанныеЗаполнения.ДолжностьПоШтатномуРасписанию;
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("Подразделение") Тогда
				Подразделение = ДанныеЗаполнения.Подразделение;
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("Должность") Тогда
				Должность = ДанныеЗаполнения.Должность;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеДокумента = ОстаткиОтпусков.ОписаниеПараметровДанныхКадровогоДокумента();
		ДанныеДокумента.Регистратор = Ссылка;
		ДанныеДокумента.Сотрудник = Сотрудник;
		ДанныеДокумента.ДатаСобытия = ДатаВосстановления;
		
		ДанныеНовойПозиции = ОстаткиОтпусков.ОписаниеПараметровДанныхПозиции();
		ДанныеНовойПозиции.ДолжностьПоШтатномуРасписанию = ДолжностьПоШтатномуРасписанию;
		ДанныеНовойПозиции.Подразделение = Подразделение;
		ДанныеНовойПозиции.Должность = Должность;
		ДанныеНовойПозиции.Территория = Территория;
		
		ОстаткиОтпусков.ЗаполнитьПоложеннымиПравамиСотрудника(ЕжегодныеОтпуска, ДанныеДокумента, ДанныеНовойПозиции);
		
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ОбработкаЗаполненияМногофункциональногоДокумента(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ОбработкаЗаполненияДокументаПриемНаРаботу(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация, , , Истина);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект, , , ЗначениеЗаполнено(ИсправленныйДокумент));
	ЗарплатаКадрыРасширенный.ИнициализироватьОтложеннуюРегистрациюВторичныхДанныхПоДвижениямДокумента(Движения);
	
	ИсправлениеДокументовЗарплатаКадры.ПриПроведенииИсправления(Ссылка, Движения, РежимПроведения, Отказ,,, ЭтотОбъект, "ДатаВосстановления");
	
	Если ДополнительныеСвойства.Свойство("ВосстановитьДвиженияУвольнения") Тогда
		
		ИсправлениеПериодическихСведений.ОтменитьИсправления(
			Ссылка, ДополнительныеСвойства.ВосстановитьДвиженияУвольнения, ИменаСторнируемыхРегистровДокументаУвольнения());
		
	КонецЕсли;
	
	// Сторнирование движений приказа об увольнении
	Если ДополнительныеСвойства.Свойство("ИсправлятьДвиженияУвольнения") Тогда
		
		ИсправлениеПериодическихСведений.ЗафиксироватьИсправления(
			Ссылка, ДокументУвольнения, ИменаСторнируемыхРегистровДокументаУвольнения());
		
	КонецЕсли;
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(
		Движения, ДанныеДляПроведения.СотрудникиДаты, Ссылка);
	
	КадровыйУчет.СформироватьКадровыеДвижения(ЭтотОбъект, Движения, ДанныеДляПроведения.КадровыеДвижения);
	
	КадровыйУчетРасширенный.СформироватьИсториюИзмененияГрафиков(Движения, ДанныеДляПроведения.КадровыеДвижения);
	РазрядыКатегорииДолжностей.СформироватьДвиженияРазрядовКатегорийСотрудников(Движения, ДанныеДляПроведения.РазрядыКатегорииСотрудников);
	РазрядыКатегорииДолжностей.СформироватьДвиженияПКУСотрудников(Движения, ДанныеДляПроведения.ПКУСотрудников);
	
	КадровыйУчет.СформироватьДвиженияВидовЗанятостиСотрудников(Движения, ДанныеДляПроведения.ДвиженияВидовЗанятости);
	
	Если НачисленияУтверждены Тогда
		
		СтруктураПлановыхНачислений = Новый Структура;
		СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
		СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателейНачислений);
		СтруктураПлановыхНачислений.Вставить("ПрименениеДополнительныхПоказателей", ДанныеДляПроведения.ПрименениеДополнительныхПоказателей);
		
		РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ЭтотОбъект, Движения, СтруктураПлановыхНачислений, Ложь);
		РасчетЗарплаты.СформироватьДвиженияПлановыхВыплат(Движения, ДанныеДляПроведения.КадровыеДвижения);
		РасчетЗарплатыРасширенный.СформироватьДвиженияПорядкаПересчетаТарифныхСтавок(Движения, ДанныеДляПроведения.ПорядокПересчетаТарифнойСтавки);
		
		РасчетЗарплатыРасширенный.СформироватьДвиженияПримененияПлановыхНачислений(Движения, ДанныеДляПроведения.ПрименениеНачислений);
		
	КонецЕсли;
	
	ОстаткиОтпусков.СформироватьДвиженияПоложенныхЕжегодныхОтпусков(Ссылка, Движения, ДанныеДляПроведения.ЕжегодныеОтпуска);
	
	СостоянияСотрудников.ЗарегистрироватьСостоянияСотрудников(Движения, Ссылка, ДанныеДляПроведения.ДанныеСостояний);
	
	КонтрактыДоговорыСотрудников.СформироватьДвиженияОсновныхДанныхИСведенийОКонтрактахДоговорах(
		Движения, ДанныеДляПроведения.СведенияОКонтрактахДоговорах, Ложь);
	
	УчетСтажаПФР.ЗарегистрироватьПериодыВУчетеСтажаПФР(Движения, ДанныеДляПроведения.ДанныеДляРегистрацииВУчетаСтажаПФР);
	
	КадровыйУчетРасширенный.СформироватьДвиженияПоТерриториям(Движения, ДанныеДляПроведения.ТерриторииСотрудников, Организация);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.СформироватьДвиженияГрейдовСотрудников(Движения, ДанныеДляПроведения.ДанныеГрейдовСотрудников);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлассныеЧиныРанги");
		Модуль.СформироватьДвиженияКлассныхЧиновРанговФизическихЛиц(Движения, ДанныеДляПроведения.КлассныеЧиныРангиФизическихЛиц);
	КонецЕсли;
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, Организация, , Не ЗначениеЗаполнено(ИсправленныйДокумент));
	КонецЕсли; 
	
	КадровыйУчетРасширенный.ЗарегистрироватьВРеестреКадровыхПриказов(Движения, ДанныеДляПроведения.ДанныеРеестраКадровыхПриказов, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(ДокументУвольнения) И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументУвольнения, "Проведен") Тогда
		
		ТекстСообщения = НСтр("ru='Не проведен приказ об увольнении'") + " - " + Строка(ДокументУвольнения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "", ,Отказ);
		
	КонецЕсли;
	
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаВосстановления, "Объект.ДатаВосстановления", Отказ, НСтр("ru='Дата восстановления в должности'"), ДатаУвольнения, НСтр("ru='даты увольнения'") , Ложь);
	
	Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	ПроверяемыеСтруктуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭтотОбъект);
	
	ПроверитьСоответствиеПозицииШРПодразделению(Отказ, ПроверяемыеРеквизиты);
	
	ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, "ПериодическиеСведения");
	
	ПроверяемыйРеквизитЕжегодныеОтпуска = ПроверяемыеРеквизиты.Найти("ЕжегодныеОтпуска");
	Если ПроверяемыйРеквизитЕжегодныеОтпуска <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыйРеквизитЕжегодныеОтпуска);
	КонецЕсли;
	
	// проверка КоличествоДнейВГод
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Для каждого Отпуск Из ЕжегодныеОтпуска Цикл
		Если НЕ ЗначениеЗаполнено(Отпуск.КоличествоДнейВГод) И НЕ ОстаткиОтпусков.ЭтоСтажевыйОтпуск(Отпуск.ВидЕжегодногоОтпуска) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не заполнено количество дней в год для отпуска %1'"), Отпуск.ВидЕжегодногоОтпуска);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "", ,Отказ);
		КонецЕсли;
	КонецЦикла;
	МассивНепроверяемыхРеквизитов.Добавить("ЕжегодныеОтпуска.КоличествоДнейВГод");
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	СотрудникиДаты.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	
	Для Каждого ПроверяемаяСтруктура Из ПроверяемыеСтруктуры Цикл
		СтрокаСотрудникиДаты = СотрудникиДаты.Добавить();
		СтрокаСотрудникиДаты.Сотрудник = ПроверяемаяСтруктура.Сотрудник;
		СтрокаСотрудникиДаты.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности;
		СтрокаСотрудникиДаты.ДатаСобытия = ПроверяемаяСтруктура.ДатаВосстановления;
	КонецЦикла;
	
	ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Ссылка, СотрудникиДаты);
	
	Для Каждого СтрокаСотрудника Из СотрудникиДаты Цикл
		ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаСотрудника.ДатаСобытия);
		Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
			СтрокаСотрудника.ДатаСобытия = ВремяРегистрацииСотрудников.Получить(СтрокаСотрудника.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	ДокументыДляИсключения = Новый Массив;
	ДокументыДляИсключения.Добавить(Ссылка);
	ДокументыДляИсключения.Добавить(ДокументУвольнения);
	ДокументыДляИсключения.Добавить(ИсправленныйДокумент);
	
	КадровыйУчет.ПроверитьВозможностьПроведенияПоКадровомуУчетуТаблицыСотрудников(СотрудникиДаты, ДокументыДляИсключения, Отказ);
	
	СтруктурыПроверяемыхКонфликтовВидовЗанятости = Новый Массив;
	Для каждого ПроверяемаяСтруктура Из ПроверяемыеСтруктуры Цикл
		
		СтруктураПроверки = СотрудникиФормыРасширенный.ПустаяСтруктураДляПроверкиКонфликтовВидовЗанятостиСотрудников();
		ЗаполнитьЗначенияСвойств(СтруктураПроверки, ПроверяемаяСтруктура);
		СтруктураПроверки.ДатаСобытия = ПроверяемаяСтруктура.ДатаВосстановления;
		
		СтруктурыПроверяемыхКонфликтовВидовЗанятости.Добавить(СтруктураПроверки);
		
	КонецЦикла;
	
	ДокументыДляИсключения = Новый Массив;
	ДокументыДляИсключения.Добавить(Ссылка);
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		ДокументыДляИсключения.Добавить(ИсправленныйДокумент);
	КонецЕсли;
	
	ИсключаемыеИзПроверкиСотрудники = КадровыйУчетРасширенный.ВнутренниеСовместителиОсновныхСотрудников(
		СтруктурыПроверяемыхКонфликтовВидовЗанятости, Организация, ДокументыДляИсключения);
	
	СообщениеОКонфликтах = СотрудникиФормыРасширенный.СообщениеОКонфликтахВидовЗанятостиСотрудников(
		СтруктурыПроверяемыхКонфликтовВидовЗанятости, Организация, ДокументыДляИсключения, ИсключаемыеИзПроверкиСотрудники);
	
	Для каждого КонфликтыСотрудника Из СообщениеОКонфликтах Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КонфликтыСотрудника.Значение, Ссылка, "ВидЗанятости", "Объект", Отказ);
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		ДатаПроверки = ДатаВосстановления;
		
		КадровыйУчетРасширенный.ПроверкаСпискаНачисленийКадровогоДокумента(
			ЭтотОбъект, ДатаПроверки, "Начисления", "Показатели", Отказ, , );
		
		КадровыйУчетРасширенный.ПроверкаСпискаНачисленийКадровогоДокумента(
			ЭтотОбъект, ДатаПроверки, "Льготы", "Показатели", Отказ, , , "Льгота");
		
		КадровыйУчет.ПроверитьСоответствиеСотрудниковОрганизации(Организация, Сотрудник, Отказ);
		
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ПроверитьУтверждениеДокумента(ЭтотОбъект, Отказ);
	
	Если НачисленияУтверждены Тогда 
		
		РасчетЗарплатыРасширенный.ПроверитьМножественностьОплатыВремениРаботникВШапке(
			ДатаВосстановления, Сотрудник, Начисления, Ссылка, Отказ, Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить, ИсправленныйДокумент);		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ПроверкаЗаполненияДокументаПриемНаРаботу(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидДоговора");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ИсправлениеПериодическихСведений.ОтменитьИсправления(
		Ссылка, ДокументУвольнения, ИменаСторнируемыхРегистровДокументаУвольнения());
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКУдалениюПроведения(ЭтотОбъект, ЗначениеЗаполнено(ИсправленныйДокумент));
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		ДолжностьПозиции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДолжностьПоШтатномуРасписанию, "Должность");
		Если Должность <> ДолжностьПозиции Тогда
			Должность = ДолжностьПозиции;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДолжностьПоШтатномуРасписанию) Тогда
			ДолжностьПоШтатномуРасписанию = Справочники.ШтатноеРасписание.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ПередЗаписьюМногофункциональногоДокумента(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Проведен Тогда
			
			ДокументУвольненияПредыдущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ДокументУвольнения");
			Если ДокументУвольненияПредыдущий <> ДокументУвольнения Тогда
				
				ДополнительныеСвойства.Вставить("ВосстановитьДвиженияУвольнения", ДокументУвольненияПредыдущий);
				ДополнительныеСвойства.Вставить("ИсправлятьДвиженияУвольнения");
				
			КонецЕсли;
			
		Иначе
			ДополнительныеСвойства.Вставить("ИсправлятьДвиженияУвольнения");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	НеРегистрироватьБухучет = Ложь;
	ИмяТаблицы 			= "Документ.ВосстановлениеВДолжности";
	ИмяПоляПериод 		= "Таблица.ДатаВосстановления";
	ИмяПоляДействуетДо 	= Неопределено;
	ОтражениеЗарплатыВБухучетеРасширенный.ОбновитьСведенияОБухучетеЗарплатыСотрудников(ЭтотОбъект,НеРегистрироватьБухучет,ИмяТаблицы,ИмяПоляПериод,ИмяПоляДействуетДо);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗарплатаКадрыРасширенный.ПриКопированииМногофункциональногоДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	Возврат ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоОрганизацииИСотруднику(ЭтотОбъект, Организация, Сотрудник, ДатаВосстановления);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИменаСторнируемыхРегистровДокументаУвольнения()
	
	Возврат "КадроваяИсторияСотрудников,ДанныеСостоянийСотрудников,ПараметрыПериодовСтажаПФР";
	
КонецФункции

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.ДатаУвольнения КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ВосстановлениеВДолжности КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор";
		
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПроверитьСоответствиеПозицииШРПодразделению(Отказ, ПроверяемыеРеквизиты)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		
		Если ПроверяемыеРеквизиты.Найти("ДолжностьПоШтатномуРасписанию") <> Неопределено
			ИЛИ ПроверяемыеРеквизиты.Найти("Сотрудники.ДолжностьПоШтатномуРасписанию") Тогда 
			
			ПроверяемыеСтруктуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭтотОбъект);
			ПутьКДанным = "Объект.Подразделение";
			
			Для каждого ПроверяемаяСтруктура Из ПроверяемыеСтруктуры Цикл
				
				Если ЗначениеЗаполнено(ПроверяемаяСтруктура.ДолжностьПоШтатномуРасписанию) Тогда
					
					Если ПроверяемыеСтруктуры.Количество() = 1 Тогда
						ПутьКДаннымРеквизита = ПутьКДанным;
					Иначе
						ПутьКДаннымРеквизита = ПутьКДанным + "[" + ПроверяемаяСтруктура.НомерСтроки + "].Подразделение";
					КонецЕсли;
					
					ПодразделениеПоШтатномуРасписанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемаяСтруктура.ДолжностьПоШтатномуРасписанию, "Подразделение");
					Если ПодразделениеПоШтатномуРасписанию <> ПроверяемаяСтруктура.Подразделение Тогда
						ТекстСообщения = НСтр("ru = 'Значение поля ""Подразделение"" не соответствует позиции штатного расписания указанной в документе.'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, ПутьКДаннымРеквизита, , Отказ);
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры	

#Область ПодготовкаДанныхДляПроведенияДокумента

Функция ДанныеДляПроведения()
	
	ДанныеДляПроведения = Новый Структура; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВосстановлениеВДолжности.Ссылка,
		|	ВосстановлениеВДолжности.Ссылка.Организация КАК Организация,
		|	ВосстановлениеВДолжности.ДатаВосстановления,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ВосстановлениеВДолжности.Сотрудник,
		|	ВосстановлениеВДолжности.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВосстановлениеВДолжности.ДолжностьПоШтатномуРасписанию,
		|	ВосстановлениеВДолжности.Подразделение,
		|	ВосстановлениеВДолжности.Территория,
		|	ВосстановлениеВДолжности.Должность,
		|	ВосстановлениеВДолжности.РазрядКатегория,
		|	ВосстановлениеВДолжности.ПКУ,
		|	ВосстановлениеВДолжности.КоличествоСтавок,
		|	ВосстановлениеВДолжности.ГрафикРаботы,
		|	ВосстановлениеВДолжности.СпособРасчетаАванса,
		|	ВосстановлениеВДолжности.Аванс,
		|	ВосстановлениеВДолжности.ВидЗанятости,
		|	ВосстановлениеВДолжности.Ссылка.ВидДоговора КАК ВидДоговора,
		|	ВосстановлениеВДолжности.ФизическоеЛицо,
		|	ВосстановлениеВДолжности.ДатаЗавершенияТрудовогоДоговора,
		|	ВосстановлениеВДолжности.ПорядокРасчетаСтоимостиЕдиницыВремени,
		|	ВосстановлениеВДолжности.СовокупнаяТарифнаяСтавка,
		|	ВосстановлениеВДолжности.ВидТарифнойСтавки,
		|	ВосстановлениеВДолжности.ВидАктаГосоргана,
		|	ВосстановлениеВДолжности.ПоступлениеНаСлужбуВпервые,
		|	ВосстановлениеВДолжности.СпособПоступленияНаСлужбу,
		|	ВосстановлениеВДолжности.СрочныйДоговор,
		|	ВосстановлениеВДолжности.СезонныйДоговор,
		|	ВосстановлениеВДолжности.СрокЗаключенияДоговора,
		|	ВосстановлениеВДолжности.ОснованиеСрочногоДоговора,
		|	ВосстановлениеВДолжности.ОборудованиеРабочегоМеста,
		|	ВосстановлениеВДолжности.ИныеУсловияДоговора,
		|	ВосстановлениеВДолжности.Ссылка.Руководитель КАК Руководитель,
		|	ВосстановлениеВДолжности.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ВосстановлениеВДолжности.Ссылка.ОснованиеПредставителяНанимателя КАК ОснованиеПредставителяНанимателя,
		|	ВосстановлениеВДолжности.ДатаУвольнения
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Документ.ВосстановлениеВДолжности КАК ВосстановлениеВДолжности
		|ГДЕ
		|	ВосстановлениеВДолжности.Ссылка = &Ссылка";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.ДатаВосстановления КАК ДатаСобытия,
		|	ТаблицаСотрудников.ДействуетДо КАК ДействуетДо,
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ТаблицаСотрудников.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	ТаблицаСотрудников.Подразделение КАК Подразделение,
		|	ТаблицаСотрудников.Должность КАК Должность,
		|	ТаблицаСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	ТаблицаСотрудников.ГрафикРаботы КАК ГрафикРаботы,
		|	ТаблицаСотрудников.СпособРасчетаАванса КАК СпособРасчетаАванса,
		|	ТаблицаСотрудников.Аванс КАК Аванс,
		|	ТаблицаСотрудников.Ссылка.ВидДоговора КАК ВидДоговора,
		|	ТаблицаСотрудников.ФизическоеЛицо,
		|	ТаблицаСотрудников.Ссылка.Руководитель КАК Руководитель,
		|	ТаблицаСотрудников.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя
		|ИЗ
		|	ВТСотрудники КАК ТаблицаСотрудников";
	
	// Первый набор данных для проведения - таблица для формирования кадровых движений, истории графиков, авансов.
	КадровыеДвижения = Запрос.Выполнить().Выгрузить();
	КадровыеДвижения.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	КадровыеДвижения.ЗаполнитьЗначения(Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности, "ВидСобытия");
	ДанныеДляПроведения.Вставить("КадровыеДвижения", КадровыеДвижения);
	
	ДвиженияВидовЗанятости = Документы.ВосстановлениеВДолжности.РезультатЗапросаПоДвижениямВидовЗанятостиСотрудников(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка)).Выгрузить();
	
	// Данные о сотрудниках, переводимых на внутреннее совмещение
	ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей =
		КадровыйУчетРасширенный.ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей(ДвиженияВидовЗанятости, Организация);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей, ДвиженияВидовЗанятости);
	
	ДанныеДляПроведения.Вставить("ДвиженияВидовЗанятости", ДвиженияВидовЗанятости);
	
	Если НачисленияУтверждены Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ДатаВосстановления КАК ДатаСобытия,
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Начисления.Начисление,
			|	Начисления.Размер,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Сотрудники.ГоловнаяОрганизация
			|ИЗ
			|	Документ.ВосстановлениеВДолжности.Начисления КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
			|		ПО Начисления.Ссылка = Сотрудники.Ссылка
			|ГДЕ
			|	Начисления.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Сотрудники.ДатаВосстановления,
			|	Сотрудники.Сотрудник,
			|	Льготы.Льгота,
			|	Льготы.Размер,
			|	Сотрудники.ФизическоеЛицо,
			|	Сотрудники.ГоловнаяОрганизация
			|ИЗ
			|	Документ.ВосстановлениеВДолжности.Льготы КАК Льготы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
			|		ПО Льготы.Ссылка = Сотрудники.Ссылка
			|ГДЕ
			|	Льготы.Ссылка = &Ссылка";
		
		// Второй набор данных для проведения - таблица для формирования плановых начислений.
		ПлановыеНачисления = Запрос.Выполнить().Выгрузить();
		ПлановыеНачисления.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
		ПлановыеНачисления.ЗаполнитьЗначения(Истина, "Используется");
		ПлановыеНачисления.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип));
		ДанныеДляПроведения.Вставить("ПлановыеНачисления", ПлановыеНачисления);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДОБАВИТЬКДАТЕ(Сотрудники.ДатаУвольнения, ДЕНЬ, 1) КАК ДатаСобытия,
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	ЛОЖЬ КАК Применение
			|ИЗ
			|	ВТСотрудники КАК Сотрудники
			|ГДЕ
			|	ДОБАВИТЬКДАТЕ(Сотрудники.ДатаУвольнения, ДЕНЬ, 1) < Сотрудники.ДатаВосстановления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Сотрудники.ДатаВосстановления,
			|	Сотрудники.Сотрудник,
			|	ИСТИНА
			|ИЗ
			|	ВТСотрудники КАК Сотрудники";
		
		ПрименениеНачислений = РасчетЗарплатыРасширенный.ПустаяТаблицаРегистрацииПримененияПлановыхНачислений();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ПрименениеНачислений);
		ДанныеДляПроведения.Вставить("ПрименениеНачислений", ПрименениеНачислений);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ДатаВосстановления КАК ДатаСобытия,
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.Организация КАК Организация,
			|	Сотрудники.ФизическоеЛицо,
			|	Показатели.Показатель,
			|	МАКСИМУМ(Показатели.Значение) КАК Значение,
			|	Показатели.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТЗначенияПоказателей
			|ИЗ
			|	Документ.ВосстановлениеВДолжности.Показатели КАК Показатели
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВосстановлениеВДолжности.Начисления КАК Начисления
			|		ПО Показатели.Ссылка = Начисления.Ссылка
			|			И Показатели.ИдентификаторСтрокиВидаРасчета = Начисления.ИдентификаторСтрокиВидаРасчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
			|		ПО Показатели.Ссылка = Сотрудники.Ссылка
			|ГДЕ
			|	Показатели.Ссылка = &Ссылка
			|	И Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	Сотрудники.ДатаВосстановления,
			|	Сотрудники.Сотрудник,
			|	Сотрудники.Организация,
			|	Сотрудники.ФизическоеЛицо,
			|	Показатели.Показатель,
			|	Показатели.Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Сотрудники.ДатаВосстановления,
			|	Сотрудники.Сотрудник,
			|	Сотрудники.Организация,
			|	Сотрудники.ФизическоеЛицо,
			|	Показатели.Показатель,
			|	Показатели.Значение,
			|	Показатели.Ссылка
			|ИЗ
			|	Документ.ВосстановлениеВДолжности.Показатели КАК Показатели
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
			|		ПО Показатели.Ссылка = Сотрудники.Ссылка
			|ГДЕ
			|	Показатели.Ссылка = &Ссылка
			|	И Показатели.ИдентификаторСтрокиВидаРасчета = 0
			|	И Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗначенияПоказателей.ДатаСобытия,
			|	ЗначенияПоказателей.Сотрудник,
			|	ЗначенияПоказателей.Организация,
			|	ЗначенияПоказателей.ФизическоеЛицо,
			|	ЗначенияПоказателей.Показатель,
			|	МАКСИМУМ(ЗначенияПоказателей.Значение) КАК Значение,
			|	ЗначенияПоказателей.Ссылка
			|ИЗ
			|	ВТЗначенияПоказателей КАК ЗначенияПоказателей
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗначенияПоказателей.ДатаСобытия,
			|	ЗначенияПоказателей.Сотрудник,
			|	ЗначенияПоказателей.Организация,
			|	ЗначенияПоказателей.ФизическоеЛицо,
			|	ЗначенияПоказателей.Показатель,
			|	ЗначенияПоказателей.Ссылка";
		
		// Третий набор данных для проведения - таблица для формирования значений показателей начислений.
		ЗначенияПоказателей = Запрос.Выполнить().Выгрузить();
		ЗначенияПоказателей.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип));
		ДанныеДляПроведения.Вставить("ЗначенияПоказателейНачислений", ЗначенияПоказателей);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ДатаВосстановления КАК ДатаСобытия,
			|	Сотрудники.Организация КАК Организация,
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Показатели.Показатель КАК Показатель,
			|	ИСТИНА КАК Применение
			|ИЗ
			|	Документ.ВосстановлениеВДолжности.Показатели КАК Показатели
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
			|		ПО Показатели.Ссылка = Сотрудники.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВосстановлениеВДолжности.Показатели КАК ПоказателиНачислений
			|		ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка
			|			И Показатели.Показатель = ПоказателиНачислений.Показатель
			|			И (ПоказателиНачислений.ИдентификаторСтрокиВидаРасчета <> 0)
			|ГДЕ
			|	Показатели.Ссылка = &Ссылка
			|	И Показатели.ИдентификаторСтрокиВидаРасчета = 0
			|	И Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
			|	И ПоказателиНачислений.Показатель ЕСТЬ NULL ";
		
		// Пятый набор данных для проведения - таблица для формирования применения дополнительных показателей.
		ПрименениеДополнительныхПоказателей = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("ПрименениеДополнительныхПоказателей", ПрименениеДополнительныхПоказателей);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.ДатаВосстановления КАК ДатаСобытия,
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Сотрудники.ПорядокРасчетаСтоимостиЕдиницыВремени КАК ПорядокРасчета,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
			|ИЗ
			|	ВТСотрудники КАК Сотрудники";
		
		// Шестой набор данных для проведения - таблица для формирования значений порядка пересчета тарифной ставки.
		ПорядокПересчетаТарифнойСтавки = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("ПорядокПересчетаТарифнойСтавки", ПорядокПересчетаТарифнойСтавки);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ДатаВосстановления КАК ДатаСобытия,
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Сотрудники.СовокупнаяТарифнаяСтавка КАК Значение,
			|	ВЫБОР
			|		КОГДА Сотрудники.СовокупнаяТарифнаяСтавка = 0
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
			|		ИНАЧЕ Сотрудники.ВидТарифнойСтавки
			|	КОНЕЦ КАК ВидТарифнойСтавки,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
			|ИЗ
			|	ВТСотрудники КАК Сотрудники";
		
		// Седьмой набор данных для проведения - таблица для формирования значений совокупной тарифной ставки.
		ДанныеСовокупныхТарифныхСтавок = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", ДанныеСовокупныхТарифныхСтавок);
		
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕжегодныеОтпуска.ВидЕжегодногоОтпуска.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтСтажа)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаВосстановления, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаВосстановления
		|	КОНЕЦ КАК ДатаСобытия,
		|	Сотрудники.Сотрудник,
		|	ЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
		|	ЕжегодныеОтпуска.КоличествоДнейВГод
		|ИЗ
		|	Документ.ВосстановлениеВДолжности.ЕжегодныеОтпуска КАК ЕжегодныеОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО ЕжегодныеОтпуска.Ссылка = Сотрудники.Ссылка
		|ГДЕ
		|	ЕжегодныеОтпуска.Ссылка = &Ссылка";
	
	// Четвертый набор данных для проведения - таблица для формирования положенных видов ежегодных отпусков.
	ПоложенныеЕжегодныеОтпуска = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ЕжегодныеОтпуска", ПоложенныеЕжегодныеОтпуска);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаВосстановления КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.РазрядКатегория КАК РазрядКатегория,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Восьмой набор данных для проведения - таблица для формирования значений разряда сотрудника.
	РазрядыКатегорииСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("РазрядыКатегорииСотрудников", РазрядыКатегорииСотрудников);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаВосстановления КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Девятый набор данных для проведения - таблица для формирования времени регистрации документа.
	СотрудникиДаты = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаВосстановления КАК Период,
		|	Сотрудники.ДатаВосстановления КАК ДатаНачала,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация,
		|	Сотрудники.Организация,
		|	Сотрудники.ДатаЗавершенияТрудовогоДоговора КАК ДатаОкончания,
		|	Сотрудники.Руководитель КАК ПредставительНанимателя,
		|	Сотрудники.ДолжностьРуководителя КАК ДолжностьПредставителяНанимателя,
		|	Сотрудники.ОснованиеПредставителяНанимателя КАК ОснованиеПредставителяНанимателя,
		|	Сотрудники.ВидАктаГосоргана,
		|	Сотрудники.ПоступлениеНаСлужбуВпервые,
		|	Сотрудники.СпособПоступленияНаСлужбу,
		|	Сотрудники.СрочныйДоговор,
		|	Сотрудники.СезонныйДоговор,
		|	Сотрудники.СрокЗаключенияДоговора,
		|	Сотрудники.ОснованиеСрочногоДоговора,
		|	Сотрудники.ОборудованиеРабочегоМеста,
		|	Сотрудники.ИныеУсловияДоговора
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Десятый набор данных для проведения - таблица для формирования описаний договоров сотрудников.
	СведенияОКонтрактахДоговорах = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СведенияОКонтрактахДоговорах", СведенияОКонтрактахДоговорах);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа) КАК Состояние,
		|	Сотрудники.ДатаВосстановления КАК Начало,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Окончание,
		|	НЕОПРЕДЕЛЕНО КАК ВидВремени
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Данные состояний
	ДанныеСостояний = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДанныеСостояний", ДанныеСостояний);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаВосстановления КАК Период,
		|	Сотрудники.Сотрудник,
		|	ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Территория
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Набор сведений для проведения по территориям сотрудников
	СведенияОТерриторияхСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ТерриторииСотрудников", СведенияОТерриторияхСотрудников);
	
	// Данные для регистрации в учета стажа ПФР
	ДанныеДляРегистрацииВУчете = Документы.ВосстановлениеВДолжности.ДанныеДляРегистрацииВУчетаСтажаПФР(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка), ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей);
	
	ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииВУчетаСтажаПФР", ДанныеДляРегистрацииВУчете[Ссылка]);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		ДанныеГрейдовСотрудников = Модуль.ДанныеДляПроведенияГрейдыСотрудников(Ссылка, "ДатаВосстановления");
		
		ДанныеДляПроведения.Вставить("ДанныеГрейдовСотрудников", ДанныеГрейдовСотрудников);
		
	КонецЕсли;
	
	// Данные для Реестра кадровых приказов
	ДанныеРеестраКадровыхПриказов = КадровыйУчетРасширенный.ТаблицаРеестраКадровыхПриказов();
	НомерПриказа = "";
	ДатаПриказа = Дата(1, 1, 1);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВосстановлениеВДолжности.Сотрудник,
	|	ВосстановлениеВДолжности.ФизическоеЛицо,
	|	ВосстановлениеВДолжности.Ссылка КАК ДокументОснование,
	|	ВосстановлениеВДолжности.Номер КАК НомерПриказа,
	|	ВосстановлениеВДолжности.Дата КАК ДатаПриказа,
	|	ВосстановлениеВДолжности.Подразделение,
	|	ВосстановлениеВДолжности.Должность,
	|	ВосстановлениеВДолжности.ВидДоговора,
	|	ВосстановлениеВДолжности.ДатаВосстановления КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.ВосстановлениеВДолжности) КАК ВидСобытия,
	|	ВосстановлениеВДолжности.РазрядКатегория КАК Разряд,
	|	ВосстановлениеВДолжности.Организация,
	|	ВосстановлениеВДолжности.Показатели.(
	|		Ссылка,
	|		НомерСтроки,
	|		ИдентификаторСтрокиВидаРасчета,
	|		Показатель,
	|		Значение
	|	),
	|	ВосстановлениеВДолжности.Начисления.(
	|		Ссылка,
	|		НомерСтроки,
	|		Начисление,
	|		ИдентификаторСтрокиВидаРасчета,
	|		Размер
	|	)
	|ИЗ
	|	Документ.ВосстановлениеВДолжности КАК ВосстановлениеВДолжности
	|ГДЕ
	|	ВосстановлениеВДолжности.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерДокумента = 1;
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Номер = НомерДокумента;
		
		НоваяСтрока.ТарифнаяСтавкаНадбавка = КадровыйУчетРасширенный.ПредставлениеТарифнойСтавкиНадбавки(Выборка.Начисления.Выгрузить(), Выборка.Показатели.Выгрузить());
		
		НомерПриказа = Выборка.НомерПриказа;
		ДатаПриказа = Выборка.ДатаПриказа;
		
	КонецЦикла;
	
	Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(ДатаПриказа, НомерПриказа);
	
	ДанныеРеестраКадровыхПриказов.ЗаполнитьЗначения(Основание, "Основание");
	
	ДанныеДляПроведения.Вставить("ДанныеРеестраКадровыхПриказов", ДанныеРеестраКадровыхПриказов);
	
	// Данные для формирования значений ПКУ сотрудника.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаВосстановления КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ПКУ КАК ПКУ,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	ПКУСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПКУСотрудников", ПКУСотрудников);
	
	Если НачисленияУтверждены И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриемНаРаботуДополнитьДанныеДляПроведение(ДанныеДляПроведения, Запрос.МенеджерВременныхТаблиц, Ссылка);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлассныеЧиныРанги");
		КлассныеЧиныРангиФизическихЛиц = Модуль.ВосстановлениеВДолжностиСведенияОКлассныхЧинахРангах(Ссылка);
		ДанныеДляПроведения.Вставить("КлассныеЧиныРангиФизическихЛиц", КлассныеЧиныРангиФизическихЛиц);
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
