#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей Экспорт;

&НаКлиенте
Перем СотрудникУдаляемойСтроки;

&НаКлиенте
Перем ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
		
		// СтандартныеПодсистемы.ВерсионированиеОбъектов
		ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
		// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
		// СтандартныеПодсистемы.Свойства
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли; 
	
	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтаФорма);
	
	НовыйДокумент = Не Параметры.Свойство("Ключ") Или Параметры.Ключ.Пустая();
	
	Если НовыйДокумент Тогда  // форма нового
		ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура("ЧтениеБезОграничений, ИзменениеБезОграничений, ИзменениеКадровыхДанных", Ложь, Ложь, Ложь);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НовыйДокумент Тогда
		
		Если Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
			
			Параметры.Свойство("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников);
			
			РедактированиеСтрокиСписочногоДокумента = Истина;
			
			СтрокаСписочногоДокумента = Параметры.СтрокаСписочногоДокумента;
			СсылкаНаОбъект = СтрокаСписочногоДокумента.СсылкаНаОбъект;
			СсылкаНаИсправленныйДокумент = СтрокаСписочногоДокумента.ИсправленныйДокумент;
			
			Если СтрокаСписочногоДокумента.Свойство("ЗаполнениеВыполнено") Тогда
				ЗаполнениеВыполнено = СтрокаСписочногоДокумента.ЗаполнениеВыполнено;
			КонецЕсли; 
			
			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект = Документы.Увольнение.СоздатьДокумент();
			УстановитьПривилегированныйРежим(Ложь);
			
			ДокументОбъект.Заполнить(Неопределено);
			
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			
			ЗарплатаКадрыРасширенныйКлиентСервер.ЗаполнитьЗначенияЗаполненныхСвойств(Объект, СтрокаСписочногоДокумента);
			
			ТабличныеЧастиОбъекта = СтрокаСписочногоДокумента.ТабличныеЧасти;
			Для каждого ОписаниеТабличнойЧасти Из ТабличныеЧастиОбъекта Цикл
				
				Если ОписаниеТабличнойЧасти.Ключ = "ОписаниеТабличныхЧастей" Тогда
					Продолжить;
				КонецЕсли; 
				
				Для каждого СтрокаТЧ Из ОписаниеТабличнойЧасти.Значение Цикл
					ЗаполнитьЗначенияСвойств(Объект[ОписаниеТабличнойЧасти.Ключ].Добавить(), СтрокаТЧ);
				КонецЦикла;
				
			КонецЦикла;
			
			ПриПолученииДанныхНаСервере();
			
			ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет; 
			АвтоЗаголовок = Ложь;
			
			Заголовок = НСтр("ru='Увольнение'");
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ВыплатаРасчетчикГруппа",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"МесяцОрганизация",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ДатаНомерГруппа",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ПодписиГруппа",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ПодвалДокументаГруппа",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"КоманднаяПанельФормы",
				"Видимость",
				Истина);
			
			Если ТолькоПросмотр Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					"Закрыть",
					"КнопкаПоУмолчанию",
					Истина);
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					"ОК",
					"Доступность",
					Ложь);
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					"ОК",
					"КнопкаПоУмолчанию",
					Истина);
				
			КонецЕсли;
			
		Иначе
			
			КадровыйУчетРасширенный.ПроверитьПравоИнтерактивногоСозданияКадровыхПриказовСотрудника();
			
			// Очистим реквизит Сотрудник, если он уже уволен.
			Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И Параметры.ЗначениеКопирования.Проведен Тогда
				Объект.Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
				Объект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
			КонецЕсли; 
			
			СсылкаНаИсправленныйДокумент = Объект.ИсправленныйДокумент;
			ЭтоИсправление = ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент);
			
			Если Не ЭтоИсправление Тогда
				Если Не ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
					Объект.ДатаУвольнения = ТекущаяДатаСеанса();
				КонецЕсли;
				Объект.ПериодРегистрации = НачалоМесяца(Объект.ДатаУвольнения);
			КонецЕсли;
			
			// Заполнение нового документа.
			ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, Месяц",
				"Объект.Организация",
				"Объект.Ответственный",
				"Объект.ПериодРегистрации");
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
			
			ЗаполнитьДанныеФормыПоОрганизации();
			
			ПриПолученииДанныхНаСервере();
			
			Если ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
				ДатаУвольненияПриИзмененииНаСервере();
			КонецЕсли; 
			
			Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
				
				ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
				РассчитатьНачисленияНаСервере();
				ОценкаПроизводительности.ЗакончитьЗамерВремени("РасчетДокументаУвольнение", ВремяНачалаЗамера);
				
			Иначе
				ОчиститьРассчитанныеДанные();
				ПерезаполнятьСреднийЗаработок = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СсылкаНаИсправленныйДокумент = Объект.ИсправленныйДокумент;
		Если Параметры.Свойство("ВыполнитьПерезаполнениеСведенийОСреднемЗаработке") Тогда
			
			ПерезаполнятьСреднийЗаработок = Истина;
			Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
				
				ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
				РассчитатьНачисленияНаСервере();
				ОценкаПроизводительности.ЗакончитьЗамерВремени("РасчетДокументаУвольнение", ВремяНачалаЗамера);
				
			Иначе
				ОчиститьРассчитанныеДанные();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НадписьМесяцевВыплатыДенежногоСодержания = НСтр("ru='мес.'");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтаФорма, "Сотрудник");
	КонецЕсли; 
	
	ОбновитьВидимостьПричиныУвольнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
		
		Если ЖдатьЗакрытияФормыУведомления Тогда
			
			ЖдатьЗакрытияФормыУведомления = Ложь;
			Отказ = Истина;
			
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
		
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемФормыРедактированияСтрокиДокументаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ЗаполнениеВыполнено = Ложь;
	
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина);
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения И Не ПараметрыЗаписи.Свойство("ПроверкаПередЗаписьюВыполнена") Тогда
		Отказ = Истина;
		ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если РасчетНеобходимоВыполнить Тогда
		
		ВыполнитьРасчетНачисленийНаСервере();
		ЗарплатаКадрыРасширенный.ЗаполнитьТекущийОбъектОбъектомФормы(ТекущийОбъект, Объект);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РеквизитыВДанные(ТекущийОбъект); 
	Если ЗаполнениеВыполнено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыСреднегоЗаработка", Истина);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыТекущегоПериода", Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	КадровыйУчетФормыРасширенный.ОбновитьСтажиСотрудникаДокумента(ТекущийОбъект);
	
	ДанныеВРеквизиты();
	
	СохраняемыеЗначения = Новый Структура;
	СохраняемыеЗначения.Вставить("Бухгалтер", ТекущийОбъект.Бухгалтер);
	СохраняемыеЗначения.Вставить("РаботникКадровойСлужбы", ТекущийОбъект.РаботникКадровойСлужбы);
	СохраняемыеЗначения.Вставить("ДолжностьРаботникаКадровойСлужбы", ТекущийОбъект.ДолжностьРаботникаКадровойСлужбы);
	СохраняемыеЗначения.Вставить("Исполнитель", ТекущийОбъект.Исполнитель);
	СохраняемыеЗначения.Вставить("ДолжностьИсполнителя", ТекущийОбъект.ДолжностьИсполнителя);
	
	ЗарплатаКадры.СохранитьЗначенияЗаполненияОтветственныхРаботниковФормы(ЭтотОбъект, ТекущийОбъект.Организация, СохраняемыеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки, "ПроведениеДокументаУвольнение");
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Проведен", ЭтаФорма.Объект.Проведен);
	ПараметрыОповещения.Вставить("ПомеченНаУдаление", ЭтаФорма.Объект.ПометкаУдаления);
	ПараметрыОповещения.Вставить("Результат", ЭтаФорма.СсылкаНаОбъект);
	ПараметрыОповещения.Вставить("Ответственный", ЭтаФорма.Объект.Ответственный);
	ПараметрыОповещения.Вставить("ДатаДокумента", ЭтаФорма.Объект.Дата);
	ПараметрыОповещения.Вставить("НомерДокумента", ЭтаФорма.Объект.Номер);
	ПараметрыОповещения.Вставить("Сотрудник", ЭтаФорма.Объект.Сотрудник);
	Оповестить("ПослеЗаписиОбъектаСвязанногоСПереводомКДругомуРаботодателю", ПараметрыОповещения, ЭтаФорма);
	
	КадровыйУчетКлиент.ОповеститьОбИзмененииРабочегоМеста(ЭтаФорма);
	
	Если Объект.Проведен Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗакрытьПослеПроведения", ЭтотОбъект);
		ЖдатьЗакрытияФормыУведомления = ЗарплатаКадрыРасширенныйКлиент.ПроверитьУволенныхОтветственныхЛиц(Объект.ФизическоеЛицо, Оповещение);
		
	КонецЕсли;
	
	Оповестить("Запись_Увольнение", ПараметрыЗаписи, СсылкаНаОбъект);
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		ИсправлениеДокументовЗарплатаКадрыКлиент.ОповеститьОбИсправленииДокумента(СсылкаНаОбъект, СсылкаНаИсправленныйДокумент, ПараметрыЗаписи.РежимЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства 
		Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	Если Не РедактированиеСтрокиСписочногоДокумента И ИспользуетсяРасчетЗарплаты Тогда
		ИсправлениеДокументовЗарплатаКадрыКлиент.ОбработкаОповещенияИсправленногоДокумента(ЭтотОбъект, СсылкаНаОбъект, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеПричинУвольненияСотрудника" И Источник = Объект.Сотрудник Тогда  
		ОбновитьПричинуУвольнения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ТекущийОбъект);
		
	Если РедактированиеСтрокиСписочногоДокумента Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверкаСтрокиСписочногоДокумента", Истина);
	КонецЕсли; 
	
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ИзменениеСотрудникаВФормеДокументаУвольнение");		
	
	ОбновитьРасчетДенежногоСодержания = Истина;
	СотрудникПриИзмененииНаСервере();
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

// Работа с месяцем начисления "строкой".
&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДатаУвольненияПриИзменении(Элемент)
	
	ОбновитьРасчетДенежногоСодержания = Истина;
	ДатаУвольненияПриИзмененииНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияДнейЧасовВыходногоПособияПриИзменении()
	
	ДнейЧасовВыходногоПособияПриИзмененииНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияКоличествоМесяцевВыплатыДенежногоСодержанияПриИзменении()
	
	КоличествоМесяцевВыплатыДенежногоСодержанияПриИзмененииНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейЧасовВыходногоПособияПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияДнейЧасовВыходногоПособияПриИзменении", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоМесяцевВыплатыДенежногоСодержанияПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияКоличествоМесяцевВыплатыДенежногоСодержанияПриИзменении", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьЗамещаласьМенее12МесяцевПриИзменении(Элемент)
	
	ОбновитьРасчетДенежногоСодержания = Истина;
	ВыполнитьРасчетНачислений();

КонецПроцедуры

&НаКлиенте
Процедура ПризнакКомпенсацииОтпускаПриИзменении(Элемент)
	
	ПризнакКомпенсацииОтпускаПриИзмененииНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейКомпенсацииУдержанияОтпускаПриИзменении(Элемент)
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаКомпенсацииОсновногоОтпускаПриИзменении(Элемент)
	
	ВидРасчетаКомпенсацииОсновногоОтпускаПриИзмененииНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходноеПособиеПриИзменении(Элемент)
	
	УстановитьИспользованиеСреднечасовогоЗаработка();	
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначислитьЗарплатуПриНеобходимостиПриИзменении(Элемент)
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗаКоторыйПредоставляетсяОтпускExtendedTooltipНажатие(Элемент)
	СтандартнаяОбработка = Ложь;
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.Сотрудники", "СправкаПоОтпускамСотрудника",
	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), ЭтаФорма,
	Новый Структура("ДатаОстатков, ЭтоРасчетПриУвольнении", Объект.ДатаУвольнения, Истина));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПорядокВыплатыПриИзменении(Элемент)
	
	ПорядокВыплатыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПланируемаяДатаВыплатыПриИзменении(Элемент)
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДокументРассчитанПриИзменении(Элемент)
	ДокументРассчитанПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	РуководительПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерПриИзменении(Элемент)
	ГлавныйБухгалтерПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура БухгалтерПриИзменении(Элемент)
	БухгалтерПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РаботникКадровойСлужбыПриИзменении(Элемент)
	РаботникКадровойСлужбыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	ИсполнительПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Сверхурочно1_5ПриИзменении(Элемент)
	ВыполнитьРасчетНачислений();
КонецПроцедуры

&НаКлиенте
Процедура Сверхурочно2ПриИзменении(Элемент)
	ВыполнитьРасчетНачислений();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполненностьДанныхИнформационныйТекстОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УчетСреднегоЗаработкаКлиент.ПоказатьПричиныПерерасчетаСреднегоЗаработка(СсылкаНаОбъект,
		СтандартнаяОбработка, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВосстановлениеВДолжностиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьВосстановлениеВДолжности" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено(ВосстановлениеВДолжности) Тогда
			ПоказатьЗначение(, ВосстановлениеВДолжности);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область АдаптацияУвольнение

&НаКлиенте
Процедура Подключаемый_РешениеИнфоНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("АдаптацияУвольнениеКлиент");
		Модуль.ОбработкаНавигационнойСсылкиРешения(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольненииПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчетКорпоративная") Тогда
		МодульКадровыйУчетКорпоративныйКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("КадровыйУчетКорпоративныйКлиентСервер");
		МодульКадровыйУчетКорпоративныйКлиентСервер.УвольнениеУстановитьВидимостьПолейВводаКомпенсацииНеотработанныхДней(ЭтотОбъект);
		МодульКадровыйУчетКорпоративныйКлиентСервер.УстановитьНеобходимостьРасчетаДнейЧасовКомпенсацииЗаНеотработанноеВремя(ЭтотОбъект);
	КонецЕсли;
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДатаУведомленияОбУвольнении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчетКорпоративная") Тогда
		МодульКадровыйУчетКорпоративныйКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("КадровыйУчетКорпоративныйКлиентСервер");
		МодульКадровыйУчетКорпоративныйКлиентСервер.УстановитьНеобходимостьРасчетаДнейЧасовКомпенсацииЗаНеотработанноеВремя(ЭтотОбъект);
	КонецЕсли;
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КоличествоДнейЧасовКомпенсацииПриУвольнении(Элемент)
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении(Элемент)
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеОтпуска

&НаКлиенте
Процедура ДополнительныеОтпускаВидОтпускаПриИзменении(Элемент)
	
	ДополнительныеОтпускаВидОтпускаПриИзмененииНаСервере(Элементы.ДополнительныеОтпуска.ТекущаяСтрока);
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаВидРасчетаКомпенсацииПриИзменении(Элемент)
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаКоличествоДнейКомпенсацииПриИзменении(Элемент)
	
	ДополнительныеОтпускаКоличествоДнейКомпенсацииПриИзмененииНаСервере(Элементы.ДополнительныеОтпуска.ТекущаяСтрока);
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если ИспользуетсяРасчетЗарплаты И РегистрацияНачисленийДоступна Тогда
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПризнакКомпенсацииУдержания) Тогда
			Элемент.ТекущиеДанные.ПризнакКомпенсацииУдержания = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные");
		КонецЕсли;
		
		УстановитьТипЗначенияВидаРасчета(Элементы.ДополнительныеОтпуска.ТекущиеДанные, "ПризнакКомпенсацииУдержания", "ВидРасчетаКомпенсацииУдержания");
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаПризнакКомпенсацииУдержанияДополнительныхОтпусковПриИзменении(Элемент)
	Если ИспользуетсяРасчетЗарплаты И РегистрацияНачисленийДоступна Тогда
		УстановитьТипЗначенияВидаРасчета(Элементы.ДополнительныеОтпуска.ТекущиеДанные, "ПризнакКомпенсацииУдержания", "ВидРасчетаКомпенсацииУдержания");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаПослеУдаления(Элемент)
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриИзменении(Элемент)
	НачисленияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НачисленияПриИзмененииНаСервере()
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Начисления", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.Начисления.ТекущиеДанные.ФизическоеЛицо = Объект.ФизическоеЛицо;
		Элементы.Начисления.ТекущиеДанные.Сотрудник = Объект.Сотрудник;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Начисления", Элементы.Начисления.ТекущиеДанные, НоваяСтрока, Копирование);	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.Начисления.ТекущиеДанные.Сотрудник;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРезультатПриИзменении(Элемент)
	ОбновитьНачисленоИтог(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПособия

&НаКлиенте
Процедура ПособияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ПособияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Пособия", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.Пособия.ТекущиеДанные.Сотрудник;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.Пособия.ТекущиеДанные.Сотрудник = Объект.Сотрудник;
	КонецЕсли;

	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Пособия", Элементы.Пособия.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПослеУдаления(Элемент) 
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ПособияНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Пособия.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.Пособия.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Пособия.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПособияПерерасчет

&НаКлиенте
Процедура ПособияПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ПособияПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "ПособияПерерасчет", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.ПособияПерерасчет.ТекущиеДанные.Сотрудник;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ПособияПерерасчет.ТекущиеДанные.Сотрудник = Объект.Сотрудник;
	КонецЕсли;

	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "ПособияПерерасчет", Элементы.ПособияПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПослеУдаления(Элемент) 
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.ПособияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.ПособияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.ПособияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУдержания

&НаКлиенте
Процедура УдержанияПриИзменении(Элемент)
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Удержания", Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияУдержаниеПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыРасширенныйКлиент.УстановитьОграничениеТипаДокументаУдержанияПоКатегории(
		Элемент, Элементы.Удержания.ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.Удержания.ТекущиеДанные.ФизическоеЛицо = Объект.ФизическоеЛицо;
	КонецЕсли;

	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Удержания", Элементы.Удержания.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Удержания",
		Объект.ФизическоеЛицо,
		,
		ТекущиеДанные.Удержание);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	ОбновитьУдержаноИтог(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Удержания",
		Объект.ФизическоеЛицо,
		,
		ТекущиеДанные.Удержание);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПослеУдаления(Элемент)
	
	ОбновитьУдержаноИтог(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНдфл

&НаКлиенте
Процедура НДФЛПриИзменении(Элемент)
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НДФЛ", Истина);
	// Механизм закладки примененные вычеты.
	УчетНДФЛКлиент.НДФЛПриАктивизацииСтроки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПередНачаломИзменения(Элемент, Отказ)
	// Механизм закладки примененные вычеты.
	УчетНДФЛКлиент.НДФЛПередНачаломИзменения(ЭтаФорма, Элементы.НДФЛ.ТекущиеДанные, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПередУдалением(Элемент, Отказ)
	// Механизм закладки примененные вычеты.
	УчетНДФЛКлиент.НДФЛПередУдалением(ЭтаФорма, Элементы.НДФЛ.ТекущиеДанные, Отказ);
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(ИзмененныеДанные, "НДФЛ", Объект.ФизическоеЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПослеУдаления(Элемент)
	
	// Механизм закладки примененные вычеты.
	УчетНДФЛКлиентРасширенный.УдалитьПримененныеВычеты(ЭтаФорма);
	
	ОбновитьУдержаноИтог(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьСтатьиФинансирования Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПерераспределитьНДФЛ(ТекущиеДанные, РаботаВБюджетномУчреждении);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(ИзмененныеДанные, "НДФЛ", Объект.ФизическоеЛицо);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНДФЛ(РегистрацияНачисленийДоступна), , Ложь);
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	// Механизм закладки примененные вычеты.
	УчетНДФЛКлиент.НДФЛУстановитьДоступностьЭлементовЛичныхВычетов(ЭтаФорма);
	
	ОбновитьУдержаноИтог(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.НДФЛ.ТекущиеДанные.ФизическоеЛицо = Объект.ФизическоеЛицо;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "НДФЛ", Элементы.НДФЛ.ТекущиеДанные, НоваяСтрока, Копирование);
	// Механизм закладки примененные вычеты.
	УчетНДФЛКлиент.НДФЛПриНачалеРедактирования(ЭтаФорма, Элементы.НДФЛ.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыЛичныеПриИзменении(Элемент)
	УчетНДФЛКлиент.НДФЛПриОкончанииРедактирования(ЭтаФорма);
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНДФЛ(РегистрацияНачисленийДоступна), , Ложь);
	УчетНДФЛКлиент.НДФЛУстановитьДоступностьЭлементовЛичныхВычетов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НДФЛВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНДФЛ(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПримененныеВычетыКДоходам

&НаКлиенте
Процедура Подключаемый_ВычетыКДоходамПередНачаломИзменения(Элемент, Отказ, Копирование, Родитель, Группа)
	УчетНДФЛКлиентРасширенный.ПримененныеВычетыКДоходам(ЭтаФорма, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыКДоходамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ВычетыПриОкончанииРедактирования(Элемент.ТекущиеДанные, ОтменаРедактирования, "ФизическоеЛицо,Подразделение");
	ОбновитьПредставлениеВычетовКДоходамСтрокиНДФЛ();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПримененныеВычетыИИмущественныенадетейиимущественные

&НаКлиенте
Процедура Подключаемый_ВычетыНаДетейИИмущественныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	УчетНДФЛКлиент.МожноИзменятьПримененныеВычеты(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыНаДетейИИмущественныеПередНачаломИзменения(Элемент, Отказ)
	
	УчетНДФЛКлиентРасширенный.ПримененныеВычетыНаДетейИИмущественныеПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыНаДетейИИмущественныеПередУдалением(Элемент, Отказ)
	
	УчетНДФЛКлиент.МожноИзменятьПримененныеВычеты(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыНаДетейИИмущественныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УчетНДФЛКлиент.ВычетыПриНачалеРедактирования(Элемент.ТекущиеДанные, НоваяСтрока, Элементы.НДФЛ.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыНаДетейИИмущественныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ВычетыПриОкончанииРедактирования(Элемент.ТекущиеДанные, ОтменаРедактирования, "ИдентификаторСтрокиНДФЛ");
	ОбновитьПредставлениеВычетовНаДетейИИмущественныхСтрокиНДФЛ();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисленияперерасчет

&НаКлиенте
Процедура НачисленияПерерасчетПриИзменении(Элемент)
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НачисленияПерерасчет", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	РасчетЗарплатыРасширенныйКлиент.ПередНачаломДобавленияСтрокиПерерасчета(Элемент, Отказ, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПередУдалением(Элемент, Отказ)
	
	РасчетЗарплатыРасширенныйКлиент.ПередУдалениемСтрокиПерерасчета(Элемент, Отказ);
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.НачисленияПерерасчет.ТекущиеДанные.Сотрудник = Объект.Сотрудник;
	КонецЕсли;
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "НачисленияПерерасчет", Элементы.НачисленияПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПослеУдаления(Элемент)
	РассчитатьСотрудникаНаСервере(Объект.Сотрудник, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетНачислениеПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетРезультатПриИзменении(Элемент)
	ОбновитьПерерасчетИтог(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПогашениезаймов

&НаКлиенте
Процедура ПогашениеЗаймовПриИзменении(Элемент)
	
	ПогашениеЗаймовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПогашениеЗаймовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.ПогашениеЗаймов.ТекущиеДанные.ФизическоеЛицо = Объект.ФизическоеЛицо;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПогашениеЗаймовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьУдержаноИтог(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПогашениеЗаймовПослеУдаления(Элемент)
	
	ОбновитьУдержаноИтог(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПогашениеЗаймовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПогашениеЗаймов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВзносы

&НаКлиенте
Процедура ВзносыПриИзменении(Элемент)
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Взносы.ТекущиеДанные.ФизическоеЛицо = Объект.ФизическоеЛицо;
	
	ТекущиеДанные = Элементы.Взносы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ДатаПолученияДохода = КонецМесяца(Объект.ПериодРегистрации);
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ТекущиеДанные, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаПриИзменении(Элемент)
	ДанныеТекущейСтроки = Элементы.Взносы.ТекущиеДанные;
	УчетСтраховыхВзносовКлиент.ВзносыДатаПолученияДоходаСтрокойПриИзменении(ДанныеТекущейСтроки, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДанныеТекущейСтроки = Элементы.Взносы.ТекущиеДанные;
	УчетСтраховыхВзносовКлиент.ВзносыДатаПолученияДоходаСтрокойНачалоВыбора(ЭтотОбъект, ДанныеТекущейСтроки, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	УчетСтраховыхВзносовКлиент.ВзносыДатаПолученияДоходаСтрокойРегулирование(
		Элементы.Взносы.ТекущиеДанные, 
		"ДатаПолученияДохода", 
		"ДатаПолученияДоходаСтрокой",
		Направление, 
		Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорректировкиВыплаты

&НаКлиенте
Процедура КорректировкиВыплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(
		КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыКорректировкиВыплаты(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КорректировкиВыплатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.КорректировкиВыплаты.ТекущиеДанные.ФизическоеЛицо = Объект.ФизическоеЛицо;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КорректировкиВыплатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьСтатьиФинансирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПерераспределитьКорректировкиВыплаты(ТекущиеДанные, РаботаВБюджетномУчреждении);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЛьготы

&НаКлиенте
Процедура ЛьготыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ЛьготыВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Льготы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.Льготы.ТекущиеДанные.Сотрудник;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Льготы.ТекущиеДанные.Сотрудник = Объект.Сотрудник;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Льготы", Элементы.Льготы.ТекущиеДанные, НоваяСтрока, Копирование);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПослеУдаления(Элемент)
	
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыРезультатПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыДатаНачалаПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыДатаОкончанияПриИзменении(Элемент)
	
	ОбновитьНачисленоИтог(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Подключаемый_ОбработчикиСобытийЭлементовТаблицыКадровыйРезерв

&НаКлиенте
Процедура Подключаемый_КадровыйРезервПриАктивизацииСтроки(Элемент)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		МодульКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("КадровыйРезервКлиент");
		МодульКлиент.КадровыйРезервПриАктивизацииСтрокиДляОбщихДокументов(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ИсправлениеДокументов
&НаКлиенте
Процедура Подключаемый_Исправить(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(СсылкаНаОбъект, "Увольнение");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправлению(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправлению(ЭтаФорма.ДокументИсправление, "Увольнение");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправленному(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправленному(СсылкаНаИсправленныйДокумент, "Увольнение");
КонецПроцедуры
// Конец ИсправлениеДокументов

&НаКлиенте
Процедура РаспределитьЗависимыеРезультаты(ПараметрыДляРаспределения) Экспорт
	
	Если ПараметрыДляРаспределения.РаспределятьЗависимыеТаблицы Тогда
		ОбновитьБухучетРезультатовРасчетаНаСервере(ПараметрыДляРаспределения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияПерерасчетОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНДФЛ(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "РасчетДокументаУвольнение");
		РассчитатьНачисленияНаСервере();
	Иначе 
		ОчиститьРассчитанныеДанные();
		ПерезаполнятьСреднийЗаработок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисления(Команда) Экспорт
	
	ОчиститьСообщения();
	ОбновитьРасчетДенежногоСодержания = ОбновитьРасчетДенежногоСодержания Или Не РасчетДенежногоСодержанияРедактировался;
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма)) Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "РасчетДокументаУвольнение");
		РассчитатьНачисленияНаСервере(Истина);
		ЗарплатаКадрыРасширенныйКлиентСервер.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
	Иначе 
		ОчиститьРассчитанныеДанные();
		ПерезаполнятьСреднийЗаработок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСреднийЗаработок(Команда)	
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьСреднийЗаработокЗавершение", ЭтотОбъект);
	УчетСреднегоЗаработкаКлиент.ОткрытьФормуВводаСреднегоЗаработкаОбщий(ПараметрыРедактированияСреднегоЗаработка(КадровыйУчетРасширенныйКлиентСервер.ЭтоСреднечасовойЗаработокВДокументеУвольнение(), Ложь), ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСреднийЗаработокЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатРедактирования <> Неопределено Тогда 	
		ПерезаполнятьСреднийЗаработок = Ложь;
		ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(РезультатРедактирования);
		ВыполнитьРасчетНачислений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСреднийЗаработокВыходногоПособия(Команда)	
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьСреднийЗаработокВыходногоПособияЗавершение", ЭтотОбъект);
	УчетСреднегоЗаработкаКлиент.ОткрытьФормуВводаСреднегоЗаработкаОбщий(ПараметрыРедактированияСреднегоЗаработка(ИспользуетсяСреднечасовойЗаработок, Истина), ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСреднийЗаработокВыходногоПособияЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт	

	Если РезультатРедактирования <> Неопределено Тогда
		ПерезаполнятьСреднийЗаработок = Ложь;
		ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(РезультатРедактирования);
		ВыполнитьРасчетНачислений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДенежноеСодержание(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьОткрытьДенежноеСодержаниеЗавершение", ЭтотОбъект);
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетДенежногоСодержанияКлиент");
		Модуль.ОткрытьФормуВводаСохраняемогоДенежногоСодержания(Объект, "Увольнение","ЕжегодныйОтпуск", ЭтаФорма, ОписаниеДокумента(ЭтаФорма),Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДенежноеСодержаниеВыходногоПособия(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьОткрытьДенежноеСодержаниеЗавершение", ЭтотОбъект);
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетДенежногоСодержанияКлиент");
		Модуль.ОткрытьФормуВводаСохраняемогоДенежногоСодержания(Объект, "Увольнение","ВыходноеПособие", ЭтаФорма, ОписаниеДокумента(ЭтаФорма),Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОткрытьДенежноеСодержаниеЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатРедактирования <> Неопределено Тогда
		ОбновитьДанныеДляРасчетаСохраняемогоЗаработка = Ложь;
		РасчетДенежногоСодержанияРедактировался = РасчетДенежногоСодержанияРедактировался(Объект.ДенежноеСодержание);
		ВыполнитьРасчетНачислений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РасчетДенежногоСодержанияРедактировался(ДенежноеСодержание)

	Для каждого СтрокаТЧ Из ДенежноеСодержание Цикл
		Если СтрокаТЧ.ФиксРасчет Тогда
			Возврат Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

&НаСервере
Функция ПараметрыРедактированияСреднегоЗаработка(ЭтоСреднечасовойЗаработок, ЭтоВыходноеПособие)	
	
	ПараметрыРедактирования = УчетСреднегоЗаработкаКлиентСервер.ПараметрыРедактированияОбщегоСреднегоЗаработкаПоДокументу();
	ПараметрыРедактирования.ДокументСсылка = СсылкаНаОбъект;
	ПараметрыРедактирования.Сотрудник = Объект.Сотрудник;
	ПараметрыРедактирования.Организация = Объект.Организация;
	ПараметрыРедактирования.ДатаНачалаСобытия = Объект.ДатаУвольнения + 86400;
	Если ЭтоУвольнениеВПоследнийДеньМесяца(Объект) Тогда
		ПараметрыРедактирования.ДатаНачалаСобытия = НачалоМесяца(ДобавитьМесяц(Объект.ДатаУвольнения, 1));
	КонецЕсли;
	
	Если ЭтоВыходноеПособие Тогда
		ПараметрыРедактирования.Начисление = Объект.ВыходноеПособие;
	Иначе
		ПараметрыРедактирования.Начисление = Объект.ВидРасчетаКомпенсацииУдержанияОтпуска;
		СпособыРасчета = Новый Массив;
		Для Каждого СпособРасчета Из СпособыРасчетаСреднегоЗаработка Цикл
			СпособыРасчета.Добавить(СпособРасчета.Значение);
		КонецЦикла;	
		ПараметрыРедактирования.СпособыРасчета = СпособыРасчета;
	КонецЕсли;
	
	ПараметрыРедактирования.НачалоПериодаРасчета = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
	ПараметрыРедактирования.ОкончаниеПериодаРасчета = Объект.ПериодРасчетаСреднегоЗаработкаОкончание; 
	ПараметрыРедактирования.ЭтоСреднечасовойЗаработок = ЭтоСреднечасовойЗаработок;
	ПараметрыРедактирования.ФиксПериодРасчета = Объект.ФиксПериодРасчетаСреднегоЗаработка;
	
	Если РасчитыватьСреднийЗаработокПриЗаполненииДокумента() Тогда
		// Если это увольнение в последний день месяца передаем данные документа для проведения, 
		// чтобы в случае перечитывания в калькуляторе учета прежде записать начисления документа в учет,
		// это нужно, т.к. при увольнении последним днем месяца текущий месяц входит в базу расчета среднего заработка.
		ДанныеДляПроведения = ДанныеДокументаДляПроведения(ДанныеДляПроведения);
		// Уничтожаем менеджер временных таблиц.
		ДанныеДляПроведения.МенеджерВременныхТаблиц = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Модуль.ПослеПодготовкиДанныхДляПроведенияДокументаРасчетаЗарплаты(ДанныеДляПроведения);
		КонецЕсли;
		ПараметрыРедактирования.ДокументВладелецДанныеАдрес = ПоместитьВоВременноеХранилище(ДанныеДляПроведения, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	УчетСреднегоЗаработка.ЗаполнитьТаблицыДанныхСреднегоЗаработкаПоДокументу(Объект, ПараметрыРедактирования);
	
	Возврат ПараметрыРедактирования;
	
КонецФункции

&НаСервере
Функция ДанныеДокументаДляПроведения(ДанныеДляПроведения)
	
	// Чтобы применить методы, осуществляющие сбор данных для проведения запишем документ.
	ОтменятьТранзакцию = Ложь;
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьТранзакцию = Истина;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ДокументОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не СсылкаНаОбъект.Пустая() Тогда
		// служебное копирование.
		ДокументОбъект.ДополнительныеСвойства.Вставить("МодификацияЗапрещена");
		ДокументОбъект = ДокументОбъект.Скопировать();
		ДокументОбъект.Дата = Объект.Дата;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	ВременнаяСсылка = Документы.Увольнение.ПолучитьСсылку();
	ДокументОбъект.УстановитьСсылкуНового(ВременнаяСсылка);
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Сбор данных для проведения
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.Увольнение.СоздатьВТКадровыеДанныеУвольняемыхСотрудников(МенеджерВременныхТаблиц, ВременнаяСсылка);
	
	ДанныеДляПроведения = Документы.Увольнение.ДанныеДляПроведения(ВременнаяСсылка, МенеджерВременныхТаблиц, ДокументОбъект.ПериодРегистрации, ДокументОбъект.Организация);
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ДокументСсылка", ВременнаяСсылка);
	ДанныеДляПроведения.Вставить("ПериодРегистрации", ДокументОбъект.ПериодРегистрации);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

&НаКлиенте
Процедура НачисленияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(СсылкаНаОбъект, Элементы.НачисленияПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ПособияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ПособияПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(СсылкаНаОбъект, Элементы.ПособияПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ПособияПерерасчетПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(СсылкаНаОбъект, Элементы.ПособияПерерасчетПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ЛьготыПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(СсылкаНаОбъект, Элементы.ЛьготыПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна));
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.УдержанияПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(СсылкаНаОбъект, Элементы.УдержанияПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчетПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПерерасчетПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(СсылкаНаОбъект, Элементы.НачисленияПерерасчетПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрНалоговогоУчетаПоНДФЛ(Команда)
	НДФЛТекущиеДанные = Элементы.НДФЛ.ТекущиеДанные;
	Если НДФЛТекущиеДанные <> Неопределено Тогда
		РегистрНалоговогоУчетаПоНДФЛ = НДФЛПодробнееНаСервере(НДФЛТекущиеДанные.ФизическоеЛицо);
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.РегистрНалоговогоУчетаПоНДФЛ", "РегистрНалоговогоУчетаПоНДФЛ", 
		РегистрНалоговогоУчетаПоНДФЛ, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КарточкаУчетаПоСтраховымВзносам(Команда)
	
	ВзносыТекущиеДанные = Элементы.Взносы.ТекущиеДанные;
	Если ВзносыТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КарточкаУчетаПоСтраховымВзносам = КарточкаУчетаПоСтраховымВзносамНаСервере(ВзносыТекущиеДанные.ФизическоеЛицо);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.КарточкаУчетаПоСтраховымВзносам", "КарточкаУчетаПоСтраховымВзносамПодробнее", 
			КарточкаУчетаПоСтраховымВзносам, ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ЗавершитьРедактированиеСтрокиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеСтрокиДокумента()
	
	Отказ = Ложь;
	Если Модифицированность Тогда
		
		Если Не ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Не Отказ Тогда 
			ПроверитьПересечениеПериодовОтсутствияНаКлиенте(Отказ, Неопределено, Истина);
		КонецЕсли;
		
		Если Не Отказ Тогда 
			ОписаниеДокумента = СтруктураСОписаниемДокумента();
			Модифицированность = Ложь;
		КонецЕсли;
		
	Иначе
		ОписаниеДокумента = Неопределено;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Закрыть(ОписаниеДокумента);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ЗаписатьНаКлиенте(Истина, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	
КонецПроцедуры

#Область Подключаемый_КадровыйРезерв

&НаКлиенте
Процедура Подключаемый_КадровыйРезервОставить(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		МодульКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("КадровыйРезервКлиент");
		МодульКлиент.КадровыйРезервОставитьДляОбщихДокументов(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КадровыйРезервИсключить(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		МодульКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("КадровыйРезервКлиент");
		МодульКлиент.КадровыйРезервИсключитьДляОбщихДокументов(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#Область Подключаемый_КадровыйРезерв

&НаСервере
Процедура ЗаполнитьКадровыйРезерв()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		МодульФормы = ОбщегоНазначения.ОбщийМодуль("КадровыйРезервФормы");
		МодульФормы.ЗаполнитьКадровыйРезервВДокументеУвольнение(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ПриПолученииДанныхНаСервере

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	РасчетДенежногоСодержанияРедактировался = РасчетДенежногоСодержанияРедактировался(Объект.ДенежноеСодержание);
	
	НовыйДокумент = Не Параметры.Свойство("Ключ") Или Параметры.Ключ.Пустая();
	НачатьИнициализациюФормы();
	ЗарплатаКадрыРасширенный.ИзменитьРеквизитыФормы(ЭтаФорма);
	ЗавершитьИнициализациюФормы(НовыйДокумент);
	
	РеквизитыКДобавлению.Очистить();
	РеквизитыКУдалению.Очистить();
	
	ЗарплатаКадры.ЗапомнитьОтветственныхРаботниковОрганизацииВФорме(ЭтотОбъект, ЗапрашиваемыеЗначенияДанныхФормыПоОрганизации());
	
КонецПроцедуры

&НаСервере
Процедура НачатьИнициализациюФормы()
	
	УстановитьДоступностьРегистрацииНачислений();
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьФункциональныеОпцииФормы();
	
	// Устанавливаем значения реквизитов формы.
	СпособУдержанияИзлишнеНачисленныхОтпускных = ПолучитьФункциональнуюОпцию("СпособУдержанияИзлишнеНачисленныхОтпускных");
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	ДоступенВводНового = Пользователи.РолиДоступны("ДобавлениеИзменениеКадровогоСостоянияРасширенная", , Ложь);
	НадписьДнейЧасов = НСтр("ru='дн.'");
	ПерезаполнятьСреднийЗаработок = Истина;
	
	УстановитьИспользованиеСреднечасовогоЗаработка();
	УстановитьИспользованиеОплатыПереработокСуммированногоУчета();
	ЗаполнитьИнформациюЗаполненностиДанных();
	ЗаполнитьСтруктуруРеквизитовИСпособовРасчетаОтпуска();
	
	НадписьДнейЧасовВыходногоПособия = НадписьДнейЧасовВыходногоПособия();
	
	// Вызываем ДополнитьФорму() в режиме отложенных вызовов.
	ДополнитьФорму(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИнициализациюФормы(НовыйДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Досоздаем форму.
	ДополнитьФорму(Ложь);
	ДополнитьФорму();
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		ПрочитатьРеквизитыИсправления();
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// Чтение данных.
	ДанныеВРеквизиты();
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	
	ОбновитьИтоги(ЭтаФорма);
	Если ИспользуетсяРасчетЗарплаты И Не ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений И Объект.ДокументРассчитан Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	ЗаполнитьВторичныеДанныеСотрудникаВФорме(НовыйДокумент);
	
	// Добавление элементов форм.
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
	РасчетЗарплатыРасширенныйФормы.УстановитьДоступныеХарактерыВыплаты(Элементы);
		
	ЗагрузитьНастройки();
	
	УстановитьДоступностьЭлементовФормы(ЭтаФорма, Объект);
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	УстановитьОтметкуНезаполненногоДнейКомпенсацииУдержанияОтпуска();
	УстановитьВидимостьПерерасчетов();
	УстановитьВидимостьРасчетныхПолей();
	УстановитьВидимостьСуммированногоУчета();
	УстановитьСтраницуОсновногоСреднегоЗаработка();
	СформироватьНадписьОстаткиОтгулов();
	УстановитьТипОснованияУвольнения();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчетКорпоративная") Тогда
		МодульКадровыйУчетКорпоративный = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетКорпоративный");
		МодульКадровыйУчетКорпоративный.УвольнениеЗавершитьИнициализациюФормы(ЭтотОбъект, НовыйДокумент);
	КонецЕсли;
	
	УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, Объект.ПериодРегистрации);
	ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
	
	// Установка свойств элементов формы.
	ОбновитьФормуПоВидуДоговора();
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		НастроитьОтображениеГруппыПодписантов();
	КонецЕсли;
	
	ПроверитьВосстановлениеВДолжности();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму(ОтложенноеИзменение = Неопределено)
	
	Если ОтложенноеИзменение = Неопределено Тогда // Выполняем процедуры, не нуждающиеся в механизме отложенного создания.
		
		// Создание реквизитов.
		РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФормуРезультатыРаспределения(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));
		
		Если РегистрацияНачисленийДоступна Тогда
			УчетНДФЛФормы.ДополнитьФормуПанельюВычетов(ЭтаФорма);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
			МодульФормы = ОбщегоНазначения.ОбщийМодуль("КадровыйРезервФормы");
			МодульФормы.ДополнитьФормуДокументаКадровымРезервом(ЭтаФорма);
		КонецЕсли;
		
		// Создание реквизитов.
		ЗарплатаКадрыРасширенный.МногофункциональныеДокументыДобавитьЭлементыФормы(ЭтаФорма, НСтр("ru='Расчет утвердил'"), "РасчетчикГруппа", "ДокументРассчитан", "Рассчитал");
		ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
		КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
		
	Иначе
		
		Если ОтложенноеИзменение Тогда
			ДобавлятьЭлементыФормы = Ложь;
			ДобавлятьРеквизитыФормы = Истина;
		Иначе
			ДобавлятьЭлементыФормы = Истина;
			ДобавлятьРеквизитыФормы = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура(
			"КонтролируемыеПоля, 
			|ДобавлятьЭлементыФормы, 
			|ДобавлятьРеквизитыФормы, 
			|ОтложенноеИзменение");
		ДополнительныеПараметры.ДобавлятьЭлементыФормы = ДобавлятьЭлементыФормы;
		ДополнительныеПараметры.ДобавлятьРеквизитыФормы = ДобавлятьРеквизитыФормы;
		ДополнительныеПараметры.ОтложенноеИзменение = ОтложенноеИзменение;
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, СсылкаНаОбъект);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, СсылкаНаОбъект);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, СсылкаНаОбъект);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, СсылкаНаОбъект);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна), "Удержания", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, СсылкаНаОбъект);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНДФЛ(РегистрацияНачисленийДоступна), "", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, СсылкаНаОбъект);
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДокументыВыполненияНачисленийДополнитьФорму(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыСохраняемоеДенежноеСодержание(), "Начисления", , Ложь,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, СсылкаНаОбъект);
		КонецЕсли;
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДокументыВыполненияНачисленийДополнитьФорму(ЭтотОбъект, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна), "ЛьготыАвтоКоманды",,, РегистрацияНачисленийДоступна, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, СсылкаНаОбъект);
		КонецЕсли;
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Модуль.ПриДополненииФормыДокументаУвольнение(ЭтаФорма, ДополнительныеПараметры);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнениеФормы");
			Модуль.ДополнитьФормуКадровогоДокумента(ЭтотОбъект, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчетКорпоративная") Тогда
			МодульКадровыйУчетКорпоративный = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетКорпоративный");
			МодульКадровыйУчетКорпоративный.УвольнениеДополнитьФорму(ЭтотОбъект, ОтложенноеИзменение);
		КонецЕсли;
		
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДополнитьФорму(
			ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
			
		Если Не РедактированиеСтрокиСписочногоДокумента Тогда
			
			ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(
				ЭтаФорма, Истина, Ложь, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
			
			РасчетЗарплатыРасширенныйФормы.ПорядокВыплатыЗарплатыДополнитьФорму(
				ЭтаФорма,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
			
		КонецЕсли;
		
		ОтражениеЗарплатыВБухучетеРасширенный.ОбъектПриЧтенииНаСервереПроцентЕНВД(
			ЭтаФорма, Объект.Организация, Объект.ПериодРегистрации, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЗаписатьНаКлиенте(Истина, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, Объект.ПериодРегистрации);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРассчитанныеДанные()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.Начисления.Очистить();
	Объект.НачисленияПерерасчет.Очистить();
	Объект.РаспределениеПоТерриториямУсловиямТруда.Очистить();
	Объект.Пособия.Очистить();
	Объект.ПособияПерерасчет.Очистить();
	Объект.Показатели.Очистить();
	Объект.Удержания.Очистить();
	Объект.ПогашениеЗаймов.Очистить();
	Объект.Взносы.Очистить();
	Объект.Льготы.Очистить();
	Объект.УправленческиеНачисления.Очистить();
	
	Объект.НДФЛ.Очистить();
	Объект.КорректировкиВыплаты.Очистить();
	Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	
	ОбновитьИтоги(ЭтотОбъект);
	
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область ЗаполнениеИРасчетНачислений

&НаКлиенте
Процедура ВыполнитьРасчетНачислений()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.ПодключитьОбработчикОжиданияАвтоматическогоРасчета(ЭтаФорма, "РассчитатьНачисленияНаКлиенте");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисленияНаКлиенте()
	
	ВыполнитьРасчетНачисленийНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасчетНачисленийНаСервере()
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
		ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
		РассчитатьНачисленияНаСервере();
		ЗарплатаКадрыРасширенныйКлиентСервер.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
		ОценкаПроизводительности.ЗакончитьЗамерВремени("РасчетДокументаУвольнение", ВремяНачалаЗамера);
	Иначе 
		ОчиститьРассчитанныеДанные();
		ПерезаполнятьСреднийЗаработок = Истина;
	КонецЕсли;
	
КонецПроцедуры


#Область РассчитатьНачисленияНаСервере

&НаСервере
Процедура РассчитатьНачисленияНаСервере(ВыводитьСообщения = Ложь)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОчиститьРассчитанныеДанные();
	ЗаполнитьВидыРасчетовПоВидамОтпусков();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчетКорпоративная") Тогда
		МодульКадровыйУчетКорпоративный = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетКорпоративный");
		МодульКадровыйУчетКорпоративный.УвольнениеЗаполнитьНачислениеКомпенсацииЗаНеотработанноеВремя(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Документ = РеквизитФормыВЗначение("Объект");
	Отказ = Ложь;
	Документы.Увольнение.ПроверитьЗаполнениеКомпенсацииДополнительныхОтпусков(Документ, Отказ, ВыводитьСообщения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.ВидРасчетаКомпенсацииУдержанияОтпуска)
		И Объект.ПризнакКомпенсацииУдержанияОтпуска <> Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать
		И Не (СпособУдержанияИзлишнеНачисленныхОтпускных = ПредопределенноеЗначение("Перечисление.СпособыУдержанияИзлишнеНачисленныхОтпускных.СторнированиеРанееНачисленныхСумм")
			И Объект.ПризнакКомпенсацииУдержанияОтпуска = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом")) Тогда
		
		Отказ = Истина;
		Если ВыводитьСообщения И ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан вид расчета компенсации (удержания) отпуска'"),,"Объект.ВидРасчетаКомпенсацииУдержанияОтпуска");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаДополнительныеОтпуска Из Объект.ДополнительныеОтпуска Цикл
		
		НадоЗаполнятьВидРасчета = Документы.Увольнение.НеобходимоЗаполнитьВидРасчетаКомпенсацииУдержания(
			СтрокаДополнительныеОтпуска.ПризнакКомпенсацииУдержания, СпособУдержанияИзлишнеНачисленныхОтпускных, СтрокаДополнительныеОтпуска.ВидРасчетаКомпенсацииУдержания);
		
		Если НадоЗаполнятьВидРасчета Тогда
			
			Отказ = Истина;
			Если ВыводитьСообщения И ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан вид расчета компенсации (удержания) отпуска'"), ,
					"Объект.ДополнительныеОтпуска[" + Формат(СтрокаДополнительныеОтпуска.НомерСтроки - 1, "ЧГ=") + "]ВидРасчетаКомпенсацииУдержания");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.ВыходноеПособие)
		И ЗначениеЗаполнено(Объект.ДнейЧасовВыходногоПособия) Тогда
		
		Отказ = Истина;
		Если ВыводитьСообщения И ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений  Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан вид расчета выходного пособия'"),,"Объект.ВыходноеПособие");
		КонецЕсли;
	
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчетКорпоративная") Тогда
		
		МодульКадровыйУчетКорпоративный = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетКорпоративный");
		МодульКадровыйУчетКорпоративный.УвольнениеПроверкаЗаполненияПриРасчете(
			ЭтотОбъект, Отказ, ВыводитьСообщения, ОграниченияНаУровнеЗаписей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПланируемаяДатаВыплаты)
		И (Объект.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет 
		Или Объект.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс) Тогда
		
		Отказ = Истина;
		Если ВыводитьСообщения И ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена дата выплаты'"),,"Объект.ПланируемаяДатаВыплаты");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаполнитьНаСервере();
		
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна));
		ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна));
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
		ОбновитьИтоги(ЭтаФорма);
		
	КонецЕсли;
	
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	УстановитьСвойствоДокументРассчитан();
	
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	УстановитьСтраницуОсновногоСреднегоЗаработка();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыРасчетовПоВидамОтпусков()
	
	ДополнительныйОтбор = Новый Структура("ВидОтпуска");
	
	// Определим категории начислений.
	Если Объект.РасчетДенежногоСодержания Тогда
		КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска");
		КатегорияУдержания  = ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ДенежноеСодержаниеУдержаниеЗаНеотработанныеДниОтпуска");
	Иначе
		КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска");
		КатегорияУдержания 	= ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.УдержаниеЗаНеотработанныеДниОтпуска");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") Тогда
		
		ДополнительныйОтбор.Вставить("ВидОтпуска", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
		
		Если Объект.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные Тогда
			
			Если ТипЗнч(Объект.ВидРасчетаКомпенсацииУдержанияОтпуска) <> Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
				ТекущаяКатегория = Неопределено;
			Иначе
				ТекущаяКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидРасчетаКомпенсацииУдержанияОтпуска, "КатегорияНачисленияИлиНеоплаченногоВремени");
			КонецЕсли;
			Если ТекущаяКатегория <> КатегорияНачисления Тогда
				РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, Объект.ВидРасчетаКомпенсацииУдержанияОтпуска, КатегорияНачисления, ДополнительныйОтбор);
			КонецЕсли;
			
		ИначеЕсли Объект.ПризнакКомпенсацииУдержанияОтпуска <> Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать
			И Не (СпособУдержанияИзлишнеНачисленныхОтпускных = ПредопределенноеЗначение("Перечисление.СпособыУдержанияИзлишнеНачисленныхОтпускных.СторнированиеРанееНачисленныхСумм")
			И Объект.ПризнакКомпенсацииУдержанияОтпуска = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом")) Тогда
			
			Если ТипЗнч(Объект.ВидРасчетаКомпенсацииУдержанияОтпуска) <> Тип("ПланВидовРасчетаСсылка.Удержания") Тогда
				ТекущаяКатегория = Неопределено;
			Иначе
				ТекущаяКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидРасчетаКомпенсацииУдержанияОтпуска, "КатегорияУдержания");
			КонецЕсли;
			Если ТекущаяКатегория <> КатегорияУдержания Тогда
				РасчетЗарплатыРасширенныйФормы.ЗаполнитьУдержаниеВФормеДокументаПоРоли(ЭтаФорма, Объект.ВидРасчетаКомпенсацииУдержанияОтпуска, КатегорияУдержания, ДополнительныйОтбор);
			КонецЕсли;
			
		КонецЕсли;
		
		Для каждого ДополнительныйОтпуск Из Объект.ДополнительныеОтпуска Цикл
			
			ДополнительныйОтбор.Вставить("ВидОтпуска", ДополнительныйОтпуск.ВидОтпуска);
			
			Если ДополнительныйОтпуск.ПризнакКомпенсацииУдержания = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные Тогда
				Если ТипЗнч(ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания) <> Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
					ТекущаяКатегория = Неопределено;
				Иначе
					ТекущаяКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания, "КатегорияНачисленияИлиНеоплаченногоВремени");
				КонецЕсли;
				Если ТекущаяКатегория <> КатегорияНачисления Тогда
					РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания, КатегорияНачисления, ДополнительныйОтбор);
				КонецЕсли;
			ИначеЕсли Объект.ПризнакКомпенсацииУдержанияОтпуска <> Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать
				И Не (СпособУдержанияИзлишнеНачисленныхОтпускных = ПредопределенноеЗначение("Перечисление.СпособыУдержанияИзлишнеНачисленныхОтпускных.СторнированиеРанееНачисленныхСумм")
				И Объект.ПризнакКомпенсацииУдержанияОтпуска = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом")) Тогда
				Если ТипЗнч(ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания) <> Тип("ПланВидовРасчетаСсылка.Удержания") Тогда
					ТекущаяКатегория = Неопределено;
				Иначе
					ТекущаяКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания, "КатегорияУдержания");
				КонецЕсли;
				Если ТекущаяКатегория <> КатегорияУдержания Тогда
					РасчетЗарплатыРасширенныйФормы.ЗаполнитьУдержаниеВФормеДокументаПоРоли(ЭтаФорма, ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания, КатегорияУдержания, ДополнительныйОтбор);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		НадоЗаполнятьВидРасчета = Объект.ПризнакКомпенсацииУдержанияОтпуска <> Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать 
			И НЕ ЗначениеЗаполнено(Объект.ВидРасчетаКомпенсацииУдержанияОтпуска)
			И Не (СпособУдержанияИзлишнеНачисленныхОтпускных = ПредопределенноеЗначение("Перечисление.СпособыУдержанияИзлишнеНачисленныхОтпускных.СторнированиеРанееНачисленныхСумм")
			И Объект.ПризнакКомпенсацииУдержанияОтпуска = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом"));
		
		Если НадоЗаполнятьВидРасчета Тогда
			ДополнительныйОтбор.Вставить("ВидОтпуска", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
			Если Объект.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные Тогда
				РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, Объект.ВидРасчетаКомпенсацииУдержанияОтпуска, КатегорияНачисления, ДополнительныйОтбор);
			Иначе	
				РасчетЗарплатыРасширенныйФормы.ЗаполнитьУдержаниеВФормеДокументаПоРоли(ЭтаФорма, Объект.ВидРасчетаКомпенсацииУдержанияОтпуска, КатегорияУдержания, ДополнительныйОтбор);
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ДополнительныйОтпуск Из Объект.ДополнительныеОтпуска Цикл
			
			Если Не ЗначениеЗаполнено(ДополнительныйОтпуск.ПризнакКомпенсацииУдержания) Тогда
				Продолжить;
			КонецЕсли;
			
			НадоЗаполнятьВидРасчета = Документы.Увольнение.НеобходимоЗаполнитьВидРасчетаКомпенсацииУдержания(
				ДополнительныйОтпуск.ПризнакКомпенсацииУдержания, СпособУдержанияИзлишнеНачисленныхОтпускных, ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания);
			
			Если НадоЗаполнятьВидРасчета Тогда
				
				ДополнительныйОтбор.Вставить("ВидОтпуска", ДополнительныйОтпуск.ВидОтпуска);
				Если ДополнительныйОтпуск.ПризнакКомпенсацииУдержания = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные Тогда
					РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания, КатегорияНачисления, ДополнительныйОтбор);
				Иначе
					РасчетЗарплатыРасширенныйФормы.ЗаполнитьУдержаниеВФормеДокументаПоРоли(ЭтаФорма, ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания, КатегорияУдержания, ДополнительныйОтбор);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы);
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПериодЗаполнения = ПериодЗаполненияДокумента();
	Сотрудники = СотрудникиДокумента();
	МенеджерРасчета = ПроинициализированныйМенеджерРасчета(ПериодЗаполнения, Сотрудники);
	ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета);
	
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьИсточникиИзмененийМенеджераРасчета(МенеджерРасчета, ИзмененныеДанные);
	
	ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета);
	МенеджерРасчета.РассчитатьЗарплату();
	РасчетЗарплатыВДанныеФормы(МенеджерРасчета.Зарплата);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна));
	ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна));
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ИсключаемыеРегистраторы = Новый Массив;
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ИсключаемыеРегистраторы.Добавить(СсылкаНаОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент) Тогда
		ИсключаемыеРегистраторы.Добавить(СсылкаНаИсправленныйДокумент);
	КонецЕсли;
	
	// Метод создает строки в коллекциях начислений и удержаний,
	// строки остальных коллекций заполняются при расчете.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.МесяцНачалаРасчетов) Тогда
		
		Объект.МесяцНачалаРасчетов = РасчетЗарплатыРасширенный.МесяцНачалаРасчетовПриУвольненииСотрудника(
			Объект.Сотрудник, Объект.ДатаУвольнения, Объект.ПериодРегистрации, ИсключаемыеРегистраторы);
		
	КонецЕсли;
	
	ПериодЗаполнения = ПериодЗаполненияДокумента();
	Сотрудники = СотрудникиДокумента();
	МенеджерРасчета = ПроинициализированныйМенеджерРасчета(ПериодЗаполнения, Сотрудники);
	
	МенеджерРасчета.ИсключаемыйРегистратор = СсылкаНаОбъект;
	МенеджерРасчета.ИсправленныйДокумент = СсылкаНаИсправленныйДокумент;
	
	МенеджерРасчета.НастройкиРасчета.ОкончательныйРасчет = Истина;
	
	МенеджерРасчета.НастройкиРасчета.ИсключатьРанееОплаченныеПериоды = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриИнициализацииМенеджераРасчетаДляЗаполненияДокументаРасчетаЗарплаты(МенеджерРасчета);
	КонецЕсли;
	
	Организация = Объект.Организация;
	МесяцНачисления = НачалоМесяца(Объект.ПериодРегистрации);
	// Если дата увольнения раньше начала месяца начисления, сдвигаем период расчета.
	НачалоПериода = Объект.МесяцНачалаРасчетов;
	
	Если ЭтоУвольнениеБудущимМесяцем(Объект) Тогда
		ОкончаниеПериода = Макс(КонецМесяца(МесяцНачисления), КонецДня(Объект.ДатаУвольнения));
	Иначе
		ОкончаниеПериода = Мин(КонецМесяца(МесяцНачисления), КонецДня(Объект.ДатаУвольнения));
	КонецЕсли;
	
	ПериодВыявления = Новый СтандартныйПериод;
	ПериодВыявления.ДатаНачала = НачалоПериода;
	ПериодВыявления.ДатаОкончания = ОкончаниеПериода;
	
	ОтменятьТранзакцию = Ложь;
	ПродлеватьТранзакцию = Ложь;
	Если ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент) Тогда
		Если Не ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
			ОтменятьТранзакцию = Истина;
			ПродлеватьТранзакцию = Истина;
		КонецЕсли;
		Отказ = Ложь;
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ИсправлениеПериодическихСведений.ПолучитьПрежнийИсправленный(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			СсылкаДокументаИсправления = СсылкаНаОбъект;
		Иначе
			СсылкаДокументаИсправления = Документы.Увольнение.ПолучитьСсылку();
		КонецЕсли;
		ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(ДокументОбъект, Отказ, РежимПроведенияДокумента.Неоперативный, СсылкаДокументаИсправления, СсылкаНаИсправленныйДокумент);
		УправлениеШтатнымРасписанием.СторнироватьДвиженияДокумента(ДокументОбъект.Движения, СсылкаНаИсправленныйДокумент);
	КонецЕсли;
	
	ЗаполнитьПоказателиПереработокСуммированногоУчета(МенеджерРасчета);
	
	// Если увольнение происходит в последний день месяца, 
	// то заработок за этот месяц также следует включить в базу среднего заработка при расчете компенсации за отпуск.
	ЗаполнятьОтрицательныеНачисленияЗаОтпуск = Истина;
	Если РасчитыватьСреднийЗаработокПриЗаполненииДокумента() Тогда
		
		// Выполняем расчет начислений для регистрации их в среднем заработке.
		ТаблицаНачислений = МенеджерРасчета.ТаблицаИсходныеДанныеНачисленияЗарплатыПоНачислениям();
		ЗаполнитьОтрицательныеНачисленияЗаОтпуск(ТаблицаНачислений, МенеджерРасчета);
		
		ЗаполнитьНачисления(ПериодЗаполнения, ИсключаемыеРегистраторы, МенеджерРасчета, ТаблицаНачислений);
		СформироватьЗаписиПерерасчета(МенеджерРасчета);
		
		МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = Истина;
		МенеджерРасчета.РассчитатьЗарплату();
		
		ТаблицаРассчитанныхНачислений = МенеджерРасчета.Зарплата.Начисления.Скопировать();
		ТаблицаРассчитанныхУдержаний = МенеджерРасчета.Зарплата.Удержания.Скопировать();
		
		РасчетЗарплатыВДанныеФормы(МенеджерРасчета.Зарплата);
		ПериодВыявления = Неопределено;
		ЗаполнятьОтрицательныеНачисленияЗаОтпуск = Ложь;
		Если Не ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
			ОтменятьТранзакцию = Истина;
		КонецЕсли;
		
		// Для корректной регистрации данных среднего заработка нужно прежде зарегистрировать начисления и отработанное время.
		ДанныеДляПроведения = ДанныеДокументаДляПроведения(ДанныеДляПроведения);
		ИсключаемыеРегистраторы.Добавить(ДанныеДляПроведения.ДокументСсылка);
		
		// Регистрируем данные документа в учете.
		Отказ = Ложь;
		// Смоделируем коллекцию движений документа.
		НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.Увольнение, ДанныеДляПроведения.ДокументСсылка);
		// Регистрация начислений
		РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(
			НаборыЗаписей, Отказ, Объект.Организация, КонецМесяца(Объект.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
		// Регистрация отработанного времени в учете начислений и удержаний.
		УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(
			НаборыЗаписей, Отказ, Объект.Организация, Объект.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, , Истина);
		// Определяем исключаемый регистратор, который будет использоваться при обновлении корректировок.	
		НаборыЗаписей.ДанныеОВремениДляРасчетаСреднегоОбщий.ДополнительныеСвойства.Вставить("ИсключаемыйРегистратор", СсылкаНаОбъект);
		// Учет среднего заработка
		УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(НаборыЗаписей, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка, Истина);
		
		// Обновляем данные среднего заработка в документе с учетом зарегистрированных начислений.
		ЗаполнитьПериодРасчетаСреднегоЗаработка();
		
		ОчиститьРассчитанныеДанные();
		
		Если ОтменятьТранзакцию = Истина И ПродлеватьТранзакцию = Ложь Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
	Иначе
		Если ПерезаполнятьСреднийЗаработок Тогда
			ОбновитьДанныеДляРасчетаСреднего();
		КонецЕсли;
		Если Объект.РасчетДенежногоСодержания Тогда
			ОбновитьДанныеДляРасчетаСохраняемогоДенежногоСодержания();
		КонецЕсли;
	КонецЕсли;
	
	ПерезаполнятьСреднийЗаработок = Истина;
	
	// Дополняем таблицу начислений строками специализированных.
	ТаблицаНачислений = МенеджерРасчета.ТаблицаИсходныеДанныеНачисленияЗарплатыПоНачислениям();
	ЗаполнитьВыходноеПособие(ТаблицаНачислений, МенеджерРасчета);
	ЗаполнитьКомпенсацииЗаОтпуск(ТаблицаНачислений, МенеджерРасчета);
	Если ЗаполнятьОтрицательныеНачисленияЗаОтпуск Тогда
		ЗаполнитьОтрицательныеНачисленияЗаОтпуск(ТаблицаНачислений, МенеджерРасчета);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчетКорпоративная") Тогда
		МодульКадровыйУчетКорпоративный = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетКорпоративный");
		МодульКадровыйУчетКорпоративный.УвольнениеЗаполнитьКомпенсациюЗаНеотработанноеВремя(ЭтотОбъект, ТаблицаНачислений, МенеджерРасчета);
	КонецЕсли;
	
	Если Не РасчитыватьСреднийЗаработокПриЗаполненииДокумента() Тогда
		
		ЗаполнитьНачисления(ПериодЗаполнения, ИсключаемыеРегистраторы, МенеджерРасчета, ТаблицаНачислений);
		СформироватьЗаписиПерерасчета(МенеджерРасчета);
		
	Иначе
		
		МенеджерРасчета.ЗаполнитьНачисленияСотрудниковЗаПериод(Сотрудники, ТаблицаНачислений, ПериодВыявления);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРассчитанныхНачислений, МенеджерРасчета.Зарплата.Начисления);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРассчитанныхУдержаний, МенеджерРасчета.Зарплата.Удержания);
		
	КонецЕсли;
	
	
	// Удержания (рассчитываем, если выплата в межрасчетный период).
	ЗаполнитьУдержания(МенеджерРасчета);
	
	ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета);
	МенеджерРасчета.НастройкиБухучета.КоэффициентыСреднегоЗаработкаДокумента = УчетСреднегоЗаработка.КоэффициентыРаспределенияСреднегоЗаработкаДокумента(Объект, ОписаниеДокумента(ЭтаФорма));
	МенеджерРасчета.РассчитатьЗарплату();
	
	РасчетЗарплатыВДанныеФормы(МенеджерРасчета.Зарплата);
	
	МенеджерРасчета = Неопределено;
	
	Если ОтменятьТранзакцию = Истина Тогда
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьПерерасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисления(ПериодЗаполнения, ИсключаемыеРегистраторы, МенеджерРасчета, ТаблицаНачислений)
	
	// Заполнение перерасчетов начислений в месяце увольнения
	ДанныеПерерасчета = ПерерасчетЗарплаты.ДанныеПерерасчетаПриУвольненииСотрудника(
		СсылкаНаОбъект, СсылкаНаИсправленныйДокумент, Объект.Сотрудник, Объект.Организация, Объект.ДатаУвольнения, ПериодЗаполнения, ИсключаемыеРегистраторы, МенеджерРасчета);
	
	МенеджерРасчета.ЗаполнитьНачислениеЗарплаты(ДанныеПерерасчета.ТаблицаСотрудников, , , ТаблицаНачислений);
	
	Если ДанныеПерерасчета.НачисленияПерерасчет.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.НачисленияПерерасчет, МенеджерРасчета.Зарплата.Начисления);
	КонецЕсли;
	
	Если ДанныеПерерасчета.ПособияПерерасчет.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.ПособияПерерасчет, МенеджерРасчета.Зарплата.Начисления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУдержания(МенеджерРасчета)
	
	ТаблицаУдержаний = МенеджерРасчета.ТаблицаИсходныеДанныеУдержанияПериоды();
	ЗаполнитьУдержанияЗаОтпуск(ТаблицаУдержаний, МенеджерРасчета);
	МенеджерРасчета.ЗаполнитьУдержанияСотрудникаЗаПериод(Объект.Сотрудник, Объект.МесяцНачалаРасчетов, КонецМесяца(Объект.ДатаУвольнения), ТаблицаУдержаний);
	
	ЗаполнитьСторноУдержанийЗаОтпуск(МенеджерРасчета);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.ДополнитьТаблицуУдержанийДаннымиПоУченическимДоговорамСотрудника(Объект.Сотрудник, Объект.ДатаУвольнения, МенеджерРасчета);
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.УдержанияВДанныеМенеджераРасчета(Объект.Удержания, МенеджерРасчета);
	
КонецПроцедуры

&НаСервере
Процедура РасчетЗарплатыВДанныеФормы(ДанныеМенеджераРасчета)
	
	//Начисления
	ТаблицыНачислений = РасчетЗарплатыРасширенныйФормы.ТаблицыНачисленийФормы();
	ТаблицыНачислений.Начисления = Объект.Начисления;
	ТаблицыНачислений.НачисленияПерерасчет = Объект.НачисленияПерерасчет;
	ТаблицыНачислений.Пособия = Объект.Пособия;
	ТаблицыНачислений.ПособияПерерасчет = Объект.ПособияПерерасчет;
	ТаблицыНачислений.Льготы = Объект.Льготы;
	ТаблицыНачислений.УправленческиеНачисления = Объект.УправленческиеНачисления;
	
	СортироватьРезультатыРасчетаПоФизическимЛицам(ДанныеМенеджераРасчета);

	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыНачисленияВДанныеФормы(ТаблицыНачислений, ДанныеМенеджераРасчета.Начисления, Объект.Организация);
	
	//Удержания
	ТаблицыУдержаний = РасчетЗарплатыРасширенныйФормы.ТаблицыУдержанийФормы();
	ТаблицыУдержаний.Удержания = Объект.Удержания;
	
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыУдержанияВДанныеФормы(ТаблицыУдержаний, ДанныеМенеджераРасчета.Удержания);
	
	//ПогашениеЗаймов
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыПогашениеЗаймовВДанныеФормы(Объект.ПогашениеЗаймов, ДанныеМенеджераРасчета.ПогашениеЗаймов);
	
	//НДФЛ
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыНДФЛВДанныеФормы(Объект.НДФЛ, Объект.ПримененныеВычетыНаДетейИИмущественные, ДанныеМенеджераРасчета.НДФЛ);
	
	//КорректировкиВыплаты
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыКорректировкиВыплатыВДанныеФормы(Объект.КорректировкиВыплаты, ДанныеМенеджераРасчета.КорректировкиВыплаты);
	
	//Взносы
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыВзносыВДанныеФормы(Объект.Взносы, ДанныеМенеджераРасчета.Взносы);
	
КонецПроцедуры

&НаСервере
Процедура СортироватьРезультатыРасчетаПоФизическимЛицам(ДанныеЗаполнения)
	
	СортируемыеКоллекции = Новый Массив;
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияФизическихЛиц(ДанныеЗаполнения.НДФЛ);
	Коллекция.ОписаниеКоллекции.Псевдоним = "НДФЛ";
	Коллекция.ОписаниеКоллекции.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	
	МетаданныеРеквизитов = Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.НДФЛ.Реквизиты;
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "МесяцНалоговогоПериода", МетаданныеРеквизитов.МесяцНалоговогоПериода.Тип);
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "Подразделение", МетаданныеРеквизитов.Подразделение.Тип);
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "КатегорияДохода", МетаданныеРеквизитов.КатегорияДохода.Тип);
	
	СортируемыеКоллекции.Добавить(Коллекция);
	
	УстановитьПривилегированныйРежим(Истина);
	ПорядокСортировки = СотрудникиФормыРасширенный.ПорядокСортировкиКоллекцияФизическихЛиц(СортируемыеКоллекции, Объект.Организация, КонецМесяца(Объект.ПериодРегистрации));
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого КлючЗначение Из ПорядокСортировки Цикл
	    ТаблицаИсходныхДанных = ДанныеЗаполнения[КлючЗначение.Ключ];
		ТаблицаИсходныхДанных.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
			
		Для Каждого СтрокаПорядка Из КлючЗначение.Значение Цикл
			СтрокаТаблицы = ТаблицаИсходныхДанных[СтрокаПорядка.ИндексСтрокиИсходнойТаблицы];
			СтрокаТаблицы.Порядок = СтрокаПорядка.Порядок;	
		КонецЦикла;	
		
		ТаблицаИсходныхДанных.Сортировать("Порядок");
		ТаблицаИсходныхДанных.Колонки.Удалить("Порядок");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета)
	
	Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник);
	
	МенеджерРасчета.ИсключаемыйРегистратор = СсылкаНаОбъект;
	МенеджерРасчета.ИсправленныйДокумент = СсылкаНаИсправленныйДокумент;
	
	МенеджерРасчета.НастройкиРасчета.ОкончательныйРасчет = Истина;
	МенеджерРасчета.НастройкиРасчета.Сотрудники = Сотрудники;
	
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = Истина;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНДФЛ = Истина;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьЗаймы = Истина;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьУдержания = ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты);
	МенеджерРасчета.НастройкиРасчета.РассчитыватьВзносы = Истина;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьКорректировкиВыплаты = Истина;
	МенеджерРасчета.НастройкиРасчета.СохранятьИсправления = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриИнициализацииМенеджераРасчетаДляЗаполненияДокументаРасчетаЗарплаты(МенеджерРасчета);
	КонецЕсли;
	
	МенеджерРасчета.НастройкиНДФЛ.Сотрудники = Сотрудники;
	МенеджерРасчета.НастройкиНДФЛ.ДатаВыплаты = Объект.ПланируемаяДатаВыплаты;
	МенеджерРасчета.НастройкиНДФЛ.ОкончательныйРасчет = Истина;
	
	МенеджерРасчета.НастройкиЗаймов.Сотрудники = Сотрудники;
	МенеджерРасчета.НастройкиЗаймов.ДатаПогашения = Мин(КонецМесяца(Объект.ПериодРегистрации), КонецДня(Объект.ДатаУвольнения));
	
КонецПроцедуры

&НаСервере
Процедура ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета)
	
	//Начисления
	РасчетЗарплатыРасширенныйФормы.НачисленияВДанныеМенеджераРасчета(Объект.Начисления, МенеджерРасчета, Объект.Организация);
	ПоказательДней = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска");
	РасчетЗарплатыРасширенныйФормы.УпаковатьИзвестныеПоказателиВМенеджерРасчета(МенеджерРасчета, МенеджерРасчета.Зарплата.Начисления, ПоказательДней);
	
	//НачисленияПерерасчет
	РасчетЗарплатыРасширенныйФормы.НачисленияПерерасчетВДанныеМенеджераРасчета(Объект.НачисленияПерерасчет, МенеджерРасчета, Объект.Организация);
	
	//Пособия
	РасчетЗарплатыРасширенныйФормы.ПособияВДанныеМенеджераРасчета(Объект.Пособия, МенеджерРасчета, Объект.Организация);
	
	//ПособияПерерасчет
	РасчетЗарплатыРасширенныйФормы.ПособияПерерасчетВДанныеМенеджераРасчета(Объект.ПособияПерерасчет, МенеджерРасчета, Объект.Организация);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		РасчетЗарплатыРасширенныйФормы.ЛьготыВДанныеМенеджераРасчета(Объект.Льготы, МенеджерРасчета, Объект.Организация);	
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		РасчетЗарплатыРасширенныйФормы.УправленческиеНачисленияВДанныеМенеджераРасчета(Объект.УправленческиеНачисления, МенеджерРасчета);		
	КонецЕсли;
	
	//Удержания
	РасчетЗарплатыРасширенныйФормы.УдержанияВДанныеМенеджераРасчета(Объект.Удержания, МенеджерРасчета);
	
	//КорректировкиВыплаты
	РасчетЗарплатыРасширенныйФормы.КорректировкиВыплатыВДанныеМенеджераРасчета(Объект.КорректировкиВыплаты, МенеджерРасчета);
	
	//ПогашениеЗаймов
	РасчетЗарплатыРасширенныйФормы.ПогашениеЗаймовВДанныеМенеджераРасчета(Объект.ПогашениеЗаймов, МенеджерРасчета);
	
	//НДФЛ
	РасчетЗарплатыРасширенныйФормы.НДФЛВДанныеМенеджераРасчета(Объект.НДФЛ, Объект.ПримененныеВычетыНаДетейИИмущественные, МенеджерРасчета);
	
	//Взносы
	РасчетЗарплатыРасширенныйФормы.ВзносыВДанныеМенеджераРасчета(Объект.Взносы, МенеджерРасчета);
	
	//КоэффициентыСреднегоЗаработкаДокумента
	МенеджерРасчета.НастройкиБухучета.КоэффициентыСреднегоЗаработкаДокумента = УчетСреднегоЗаработка.КоэффициентыРаспределенияСреднегоЗаработкаДокумента(Объект, ОписаниеДокумента(ЭтаФорма));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаписиПерерасчета(МенеджерРасчета)
	
	ТаблицыНачислений = РасчетЗарплатыРасширенныйФормы.ТаблицыНачисленийФормы();
	ТаблицыНачислений.Начисления = Объект.Начисления;
	ТаблицыНачислений.Пособия = Объект.Пособия;
	ТаблицыНачислений.Льготы = Объект.Льготы;
	ТаблицыНачислений.УправленческиеНачисления = Объект.УправленческиеНачисления;
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыНачисленияВДанныеФормы(ТаблицыНачислений, МенеджерРасчета.Зарплата.Начисления, Объект.Организация);
	
	Если ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент) Тогда
		СотрудникДляИсправления = ?(ТипЗнч(СсылкаНаИсправленныйДокумент) = Тип("ДокументСсылка.Увольнение"), Неопределено, Объект.Сотрудник);
		ОписаниеТаблицы = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна);
		ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчетаДляИсправления(Объект.Организация, Объект.ПериодРегистрации, СсылкаНаИсправленныйДокумент, Объект.Начисления, Объект.НачисленияПерерасчет, СсылкаНаОбъект, ОписаниеТаблицы, ПолучитьКонтролируемыеПоля(), ОписаниеДокумента(ЭтаФорма), СотрудникДляИсправления, Объект.ДоначислитьЗарплатуПриНеобходимости);
		ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчетаДляИсправленияПособий(
			СсылкаНаИсправленныйДокумент, Объект.ПериодРегистрации, Объект.Пособия, Объект.ПособияПерерасчет, Объект.НачисленияПерерасчет,
			КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), СотрудникДляИсправления);
	Иначе
		ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчета(Объект.Организация, Объект.ПериодРегистрации, Объект.Начисления, Объект.НачисленияПерерасчет, СсылкаНаОбъект, ПолучитьКонтролируемыеПоля(), ОписаниеДокумента(ЭтаФорма));
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.НачисленияПерерасчетВДанныеМенеджераРасчета(Объект.НачисленияПерерасчет, МенеджерРасчета, Объект.Организация);
	РасчетЗарплатыРасширенныйФормы.ПособияПерерасчетВДанныеМенеджераРасчета(Объект.ПособияПерерасчет, МенеджерРасчета, Объект.Организация);
	Объект.Начисления.Очистить();
	Объект.Пособия.Очистить();
	Объект.Льготы.Очистить();
	Объект.УправленческиеНачисления.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСреднегоЗаработкаДляКомпенсацииОтпуска(ВидОтпуска)
	
	ОписаниеВидаОтпуска = ОстаткиОтпусков.ОписаниеВидаОтпуска(ВидОтпуска, ОтпускВРабочихДняхПоДоговору);
	Если ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням = Истина Тогда
		Возврат Объект.СреднийЗаработок;
	КонецЕсли;
	
	Возврат	Объект.СреднийЗаработокПоРабочимДням;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКомпенсацииЗаОтпуск(ТаблицаНачислений, МенеджерРасчета)
	
	ДатаКомпенсации = НачалоДня(Объект.ДатаУвольнения);
	Если Не ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
		ДатаКомпенсации = НачалоДня(Объект.ПериодРегистрации);
	КонецЕсли;
	
	ПоказательДней = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейКомпенсации");
	ПоказательСреднийЗаработок = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
	ПоказательДенежноеСодержание = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание");
	
	Если Объект.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные Тогда
		Если Объект.ДнейКомпенсацииУдержанияОтпуска > 0 Тогда
			НовыйИнтервал = ТаблицаНачислений.Добавить();
			НовыйИнтервал.Сотрудник = Объект.Сотрудник;
			НовыйИнтервал.Начисление = Объект.ВидРасчетаКомпенсацииУдержанияОтпуска;
			НовыйИнтервал.ДатаНачала = ДатаКомпенсации;
			НовыйИнтервал.ДатаОкончания	= ДатаКомпенсации;
			МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательДней, Объект.ДнейКомпенсацииУдержанияОтпуска);
			Если Объект.РасчетДенежногоСодержания Тогда
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательДенежноеСодержание, Объект.СохраняемоеДенежноеСодержание);
			Иначе
				Значение = ЗначениеСреднегоЗаработкаДляКомпенсацииОтпуска(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательСреднийЗаработок, Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("ПризнакКомпенсацииУдержания");
	ОтборСтрок.ПризнакКомпенсацииУдержания = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные;
	НайденныеСтроки = Объект.ДополнительныеОтпуска.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаОтпуска Из НайденныеСтроки Цикл
		Если СтрокаОтпуска.ДнейКомпенсацииУдержания = 0 Тогда
			Продолжить;
		КонецЕсли;
		НовыйИнтервал = ТаблицаНачислений.Добавить();
		НовыйИнтервал.Сотрудник = Объект.Сотрудник;
		НовыйИнтервал.Начисление = СтрокаОтпуска.ВидРасчетаКомпенсацииУдержания;
		НовыйИнтервал.ДатаНачала = ДатаКомпенсации;
		НовыйИнтервал.ДатаОкончания = ДатаКомпенсации;
		МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательДней, СтрокаОтпуска.ДнейКомпенсацииУдержания);
		Если Объект.РасчетДенежногоСодержания Тогда
			МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательДенежноеСодержание, Объект.СохраняемоеДенежноеСодержание);
		Иначе
			Значение = ЗначениеСреднегоЗаработкаДляКомпенсацииОтпуска(СтрокаОтпуска.ВидОтпуска);
			МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательСреднийЗаработок, Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыходноеПособие(ТаблицаНачислений, МенеджерРасчета)
	
	Если Объект.РасчетДенежногоСодержания И ЗначениеЗаполнено(Объект.КоличествоМесяцевВыплатыДенежногоСодержания) Тогда
		
		НоваяСтрока = ТаблицаНачислений.Добавить();
		НоваяСтрока.Сотрудник = Объект.Сотрудник;
		НоваяСтрока.Начисление = Объект.ВидРасчетаМесячноеДенежноеСодержание;
		НоваяСтрока.ДатаНачала = Объект.ДатаУвольнения;
		НоваяСтрока.ДатаОкончания = Объект.ДатаУвольнения;
		
		Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МесячноеДенежноеСодержание");
		МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НоваяСтрока, Показатель, Объект.МесячноеДенежноеСодержание);
		
		Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МесяцевВыплатыКомпенсации");
		МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НоваяСтрока, Показатель, Объект.КоличествоМесяцевВыплатыДенежногоСодержания);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДнейЧасовВыходногоПособия) Тогда
		
		НоваяСтрока = ТаблицаНачислений.Добавить();
		НоваяСтрока.Сотрудник = Объект.Сотрудник;
		НоваяСтрока.Начисление = Объект.ВыходноеПособие;
		НоваяСтрока.ДатаНачала = Объект.ДатаУвольнения;
		НоваяСтрока.ДатаОкончания = Объект.ДатаУвольнения;
		
		Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
		МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НоваяСтрока, Показатель, Объект.СреднийЗаработокВыходногоПособия);
		
		Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейЧасовВыходногоПособия");
		МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НоваяСтрока, Показатель, Объект.ДнейЧасовВыходногоПособия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУдержанияЗаОтпуск(ТаблицаУдержаний, МенеджерРасчета)
	
	Если СпособУдержанияИзлишнеНачисленныхОтпускных = Перечисления.СпособыУдержанияИзлишнеНачисленныхОтпускных.СторнированиеРанееНачисленныхСумм Тогда
		Возврат;
	КонецЕсли;
	
	ПоказательДней = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейКомпенсации");
	ПоказательСреднийЗаработок = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
	ПоказательДенежноеСодержание = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание");
	
	ДатаКомпенсации = НачалоДня(Объект.ДатаУвольнения);
	Если Не ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
		ДатаКомпенсации = НачалоДня(Объект.ПериодРегистрации);
	КонецЕсли;
	
	Если Объект.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом Тогда
		Если Объект.ДнейКомпенсацииУдержанияОтпуска > 0 Тогда
			НовыйИнтервал = ТаблицаУдержаний.Добавить();
			НовыйИнтервал.Сотрудник = Объект.Сотрудник;
			НовыйИнтервал.Удержание = Объект.ВидРасчетаКомпенсацииУдержанияОтпуска;
			НовыйИнтервал.ДатаНачала = ДатаКомпенсации;
			НовыйИнтервал.ДатаОкончания = ДатаКомпенсации;
			МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательДней, Объект.ДнейКомпенсацииУдержанияОтпуска);
			Если Объект.РасчетДенежногоСодержания Тогда
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательДенежноеСодержание, Объект.СохраняемоеДенежноеСодержание);
			Иначе
				Значение = ЗначениеСреднегоЗаработкаДляКомпенсацииОтпуска(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательСреднийЗаработок, Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("ПризнакКомпенсацииУдержания");
	ОтборСтрок.ПризнакКомпенсацииУдержания = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом;
	НайденныеСтроки = Объект.ДополнительныеОтпуска.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаОтпуска Из НайденныеСтроки Цикл
		Если СтрокаОтпуска.ДнейКомпенсацииУдержания = 0 Тогда
			Продолжить;
		КонецЕсли;
		НовыйИнтервал = ТаблицаУдержаний.Добавить();
		НовыйИнтервал.Сотрудник = Объект.Сотрудник;
		НовыйИнтервал.Удержание = СтрокаОтпуска.ВидРасчетаКомпенсацииУдержания;
		НовыйИнтервал.ДатаНачала = ДатаКомпенсации;
		НовыйИнтервал.ДатаОкончания = ДатаКомпенсации;
		МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательДней, СтрокаОтпуска.ДнейКомпенсацииУдержания);
		Если Объект.РасчетДенежногоСодержания Тогда
			МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательДенежноеСодержание, Объект.СохраняемоеДенежноеСодержание);
		Иначе
			Значение = ЗначениеСреднегоЗаработкаДляКомпенсацииОтпуска(СтрокаОтпуска.ВидОтпуска);
			МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательСреднийЗаработок, Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтрицательныеНачисленияЗаОтпуск(ТаблицаНачислений, МенеджерРасчета)
	
	Если СпособУдержанияИзлишнеНачисленныхОтпускных <> Перечисления.СпособыУдержанияИзлишнеНачисленныхОтпускных.СторнированиеРанееНачисленныхСумм Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНачислений.Колонки.Добавить("СторнируемыйДокумент", Неопределено);
	
	ПоказательДней = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска");
	КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете();
	
	МассивВидыОтпусков = Новый Массив;
	ДлительностьОтпусков = Новый Соответствие;
	// Основной отпуск
	Если Объект.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом Тогда
		Если Объект.ДнейКомпенсацииУдержанияОтпуска > 0 Тогда
			МассивВидыОтпусков.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
			ДлительностьОтпусков.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"), Объект.ДнейКомпенсацииУдержанияОтпуска);
		КонецЕсли;
	КонецЕсли;
	// Дополнительные отпуска
	ОтборСтрок = Новый Структура("ПризнакКомпенсацииУдержания");
	ОтборСтрок.ПризнакКомпенсацииУдержания = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом;
	НайденныеСтроки = Объект.ДополнительныеОтпуска.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаОтпуска Из НайденныеСтроки Цикл
		МассивВидыОтпусков.Добавить(СтрокаОтпуска.ВидОтпуска);
		ДлительностьОтпусков.Вставить(СтрокаОтпуска.ВидОтпуска, СтрокаОтпуска.ДнейКомпенсацииУдержания);
	КонецЦикла;
	
	ИсключаемыеРегистраторы = Новый Массив;
	ИсключаемыеРегистраторы.Добавить(СсылкаНаОбъект);
	ИсключаемыеРегистраторы.Добавить(СсылкаНаИсправленныйДокумент);
	НачисленныеОтпуска = УчетНачисленнойЗарплатыРасширенный.НачисленныеОтпускаПоПериодамИВидам(Объект.Сотрудник, МассивВидыОтпусков, ИсключаемыеРегистраторы);
	
	Длительность = 0;
	ВидОтпускаПредыдущий = Неопределено;
	Для каждого СтрокаОтпуска Из НачисленныеОтпуска Цикл
		
		ВидОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОтпуска.Начисление, "ВидОтпуска");
		Если ВидОтпуска <> ВидОтпускаПредыдущий Тогда
			ВидОтпускаПредыдущий = ВидОтпуска;
			Длительность = ДлительностьОтпусков.Получить(ВидОтпуска);
		КонецЕсли;
		
		Если Длительность = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйИнтервал = ТаблицаНачислений.Добавить();
		НовыйИнтервал.Сотрудник = Объект.Сотрудник;
		НовыйИнтервал.СторнируемыйДокумент = СтрокаОтпуска.СторнируемыйДокумент;
		НовыйИнтервал.Начисление = СтрокаОтпуска.Начисление;
		НовыйИнтервал.ДатаНачала = СтрокаОтпуска.ДатаНачала;
		
		Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
			Если СтрокаОтпуска["Показатель" + НомерПоказателя] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаОтпуска["Показатель" + НомерПоказателя] = ПоказательДней Тогда
				СтрокаДлительностьОтпуска = СтрокаОтпуска["Значение" + НомерПоказателя];
				Если Длительность >= СтрокаДлительностьОтпуска Тогда
					НоваяДлительностьОтпуска = -СтрокаДлительностьОтпуска;
				Иначе
					НоваяДлительностьОтпуска = -Длительность;
					
					// Вычислим даты отрицательного отпуска
					ОтпускВРабочихДняхПоДоговору = ОстаткиОтпусков.ОтпускСотрудникаВРабочихДняхПоДоговору(Объект.Сотрудник, СтрокаОтпуска.ДатаНачала);
					ОписаниеВидаОтпуска = ОстаткиОтпусков.ОписаниеВидаОтпуска(ВидОтпуска, ОтпускВРабочихДняхПоДоговору);
					ДлительностьОтпускаЦелая = Цел(Длительность) + ?((Длительность - Цел(Длительность)) > 0, 1, 0);
					Если ЗначениеЗаполнено(СтрокаОтпуска.ДатаНачала) Тогда
						СтрокаОтпуска.ДатаОкончания = КонецДня(ОстаткиОтпусковКлиентСервер.ДатаОкончанияОтпуска(СтрокаОтпуска.Сотрудник, СтрокаОтпуска.ДатаНачала, ДлительностьОтпускаЦелая, ОписаниеВидаОтпуска));
					КонецЕсли;
					
				КонецЕсли;
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательДней, НоваяДлительностьОтпуска);
				Длительность = Длительность + НоваяДлительностьОтпуска;
			Иначе
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, СтрокаОтпуска["Показатель" + НомерПоказателя], СтрокаОтпуска["Значение" + НомерПоказателя]);
			КонецЕсли;
		КонецЦикла;
		
		НовыйИнтервал.ДатаОкончания = СтрокаОтпуска.ДатаОкончания;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСторноУдержанийЗаОтпуск(МенеджерРасчета)
	
	Если Не ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляСторнированияУдержанийЗаОтпуск = Документы.Увольнение.ДанныеДляСторнированияУдержанийЗаОтпуск(СсылкаНаИсправленныйДокумент);
	Удержания = МенеджерРасчета.Зарплата.Удержания;
	Для каждого Строка Из ДанныеДляСторнированияУдержанийЗаОтпуск.Удержания Цикл
		ПоказателиСтроки = ДанныеДляСторнированияУдержанийЗаОтпуск.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", Строка.ИдентификаторСтрокиВидаРасчета));
		НоваяСтрокаУдержания = Обработки.МенеджерРасчетаЗарплаты.СтрокаТаблицыУдержаний(Удержания);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУдержания, Строка);
		Для Каждого СтрокаПоказатель Из ПоказателиСтроки Цикл
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУдержания.Показатели.Добавить(), СтрокаПоказатель);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(РезультатРедактирования)
	
	// Переносит данные учета среднего заработка (результат работы формы "калькулятора") 
	// в таблицы документа.
	
	Объект.СреднийЗаработокОбщий.Очистить();
	Объект.ОтработанноеВремяДляСреднегоОбщий.Очистить();
	Объект.ДанныеОбИндексации.Очистить();
	
	УчетСреднегоЗаработка.ЗаполнитьДанныеУчетаОбщегоСреднегоЗаработка(
		Объект.СреднийЗаработокОбщий, 
		Объект.ОтработанноеВремяДляСреднегоОбщий, 
		Объект.ДанныеОбИндексации, 
		РезультатРедактирования, 
		Модифицированность);
	
	Объект.ПериодРасчетаСреднегоЗаработкаНачало = РезультатРедактирования.НачалоПериодаРасчета;
	Объект.ПериодРасчетаСреднегоЗаработкаОкончание = РезультатРедактирования.ОкончаниеПериодаРасчета;
	Объект.ФиксПериодРасчетаСреднегоЗаработка = РезультатРедактирования.ФиксПериодРасчета;
	
	ЗаполнитьИнформациюЗаполненностиДанных();
	
	РассчитатьСреднийЗаработок();
	
КонецПроцедуры	

#КонецОбласти

#Область ПодключениеМеханизмаРасчетаНачислений

&НаСервере
Процедура ДанныеВРеквизиты()
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		СсылкаНаОбъект = Объект.Ссылка;
	КонецЕсли;
	
	СсылкаНаИсправленныйДокумент = Объект.ИсправленныйДокумент;
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОписанияТаблиц = Новый Массив;
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна));
		
		ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписанияТаблиц, 2);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ВводНачисленийДанныеВРеквизит(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыСохраняемоеДенежноеСодержание(), 2);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДокументыВыполненияНачисленийДанныеВРеквизит(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна), 2);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Модуль.ПриПолученииДанныхДокументаОплатыТруда(ЭтаФорма);
		КонецЕсли;
		
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна));
		
		Если РегистрацияНачисленийДоступна Тогда 
			УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма);
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Начисления, "ПериодДействия", "ПериодДействияСтрокой");
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НачисленияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Пособия, "ПериодДействия", "ПериодДействияСтрокой");
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.ПособияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
		КонецЕсли;
		
		ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаДанныеВРеквизит(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));
		
		ОтражениеЗарплатыВБухучетеРасширенный.ОбъектПриЧтенииНаСервереПредставлениеРаспределения(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДанныеВРеквизит(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	КонецЕсли;
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		ПрочитатьРеквизитыИсправления();
		ИсправлениеДокументовЗарплатаКадрыКлиентСервер.УстановитьПоляИсправления(ЭтаФорма);
	КонецЕсли;
	
	// Кадровый резерв.
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		МодульКлиентСервер = ОбщегоНазначения.ОбщийМодуль("КадровыйРезервКлиентСервер");
		МодульКлиентСервер.ЗаполнитьВторичныеДанныеКадровогоРезерва(Объект.КадровыйРезерв);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнениеФормы");
		Модуль.УстановитьОтображениеНадписейВКадровомДокументе(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		ТекущийОбъект.Показатели.Очистить();
		
		ОписанияТаблиц = Новый Массив;
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна));
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДополнитьМассивОписанийТаблицФормыНачисленияЗарплаты(ОписанияТаблиц, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыСохраняемоеДенежноеСодержание());
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДополнитьМассивОписанийТаблицФормыНачисленияЗарплаты(ОписанияТаблиц, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна));
		КонецЕсли;
	
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаКлиентСервер");
			Модуль.ПриЗаполненииМассиваОписанийТаблицНачисленияЗарплаты(ОписанияТаблиц);
		КонецЕсли;
		
		ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблиц, 2);	
		ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));	
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьРеквизитыИсправления()
	ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(ЭтотОбъект, , , , , Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСтроку(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей)
	РасчетЗарплатыРасширенныйФормы.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

#КонецОбласти

#Область ОписанияДокументаТаблицПанелей

&НаСервереБезКонтекста
Функция МассивОписанийТаблицФормы(ПравоНаЧтениеДокументаБезОграничений)
	
	МассивОписанийТаблицФормы = Новый Структура;
	МассивОписанийТаблицФормы.Вставить("Начисления", КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений));
	МассивОписанийТаблицФормы.Вставить("НачисленияПерерасчет", КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений));
	МассивОписанийТаблицФормы.Вставить("Пособия", КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(ПравоНаЧтениеДокументаБезОграничений));
	МассивОписанийТаблицФормы.Вставить("ПособияПерерасчет", КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(ПравоНаЧтениеДокументаБезОграничений));
	МассивОписанийТаблицФормы.Вставить("Удержания", КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(ПравоНаЧтениеДокументаБезОграничений));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		МодульЛьготыСотрудниковКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудниковКлиентСервер");
		МодульЛьготыСотрудниковКлиентСервер.ДополнитьСтруктуруОписанийТаблицФормыНачисленияЗарплаты(МассивОписанийТаблицФормы, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(ПравоНаЧтениеДокументаБезОграничений));
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаКлиентСервер");
		Модуль.ПриЗаполненииСтруктурыОписанийТаблицНачисленияЗарплаты(МассивОписанийТаблицФормы);
	КонецЕсли;
	
	Возврат МассивОписанийТаблицФормы;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)
	Возврат КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(Форма));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОписанияДокумента(Форма)
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("ИзменениеБезОграничений", Форма.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений);
	ПараметрыОписания.Вставить("СпособыРасчетаСреднегоЗаработка", Форма.СпособыРасчетаСреднегоЗаработка);
	ПараметрыОписания.Вставить("ПризнакКомпенсацииУдержанияОтпуска", Форма.Объект.ПризнакКомпенсацииУдержанияОтпуска);
	ПараметрыОписания.Вставить("ДнейЧасовВыходногоПособия", Форма.Объект.ДнейЧасовВыходногоПособия);
	ПараметрыОписания.Вставить("РегистрацияНачисленийДоступна", Форма.РегистрацияНачисленийДоступна);
	
	Возврат ПараметрыОписания;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеПанелиВычеты()
	
	ОписаниеПанелиВычеты = УчетНДФЛКлиентСервер.ОписаниеПанелиВычеты();
	
	ОписаниеТабличнойЧастиНДФЛ = УчетНДФЛКлиентСервер.ОписаниеТабличнойЧастиНДФЛ();
	ОписаниеТабличнойЧастиНДФЛ.ИспользуетсяФиксРасчет = Истина;
	ОписаниеТабличнойЧастиНДФЛ.ИмяПоляПериод = "";
	ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ = ОписаниеТабличнойЧастиНДФЛ;
	
	РасчетЗарплатыКлиентСервер.ДополнитьОписаниеПанелиВычеты(ОписаниеПанелиВычеты);
	ОписаниеТабличнойЧастиКорректировкиВыплаты = РасчетЗарплатыКлиентСервер.ОписаниеТабличнойЧастиКорректировкиВыплаты();
	ОписаниеТабличнойЧастиКорректировкиВыплаты.ИспользуетсяФиксРасчет = Истина;
	ОписаниеПанелиВычеты.ТабличнаяЧастьКорректировкиВыплаты = ОписаниеТабличнойЧастиКорректировкиВыплаты;
	
	НастраиваемыеПанели = Новый Соответствие;
	НастраиваемыеПанели.Вставить("ВычетыЛичные", Истина);
	НастраиваемыеПанели.Вставить("ВычетыНаДетейИИмущественные", "Объект.ПримененныеВычетыНаДетейИИмущественные");
	НастраиваемыеПанели.Вставить("ВычетыКДоходам", "Объект.Начисления");
	
	ОписаниеПанелиВычеты.НастраиваемыеПанели = НастраиваемыеПанели;
	
	Возврат ОписаниеПанелиВычеты;
	
КонецФункции

&НаКлиенте
Функция ОписаниеПанелиВычетыНаКлиенте() Экспорт
	Возврат ОписаниеПанелиВычеты();
КонецФункции

&НаСервере
Функция ОписаниеПанелиВычетыНаСервере() Экспорт
	Возврат ОписаниеПанелиВычеты();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДляРаспределенияРезультата(ПравоНаЧтениеДокументаБезОграничений)

	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНДФЛ(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыКорректировкиВыплаты(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПогашениеЗаймов(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(ПравоНаЧтениеДокументаБезОграничений));
	
	Возврат ОписанияТаблиц;

КонецФункции

#КонецОбласти

#Область КонтролируемыеПоля

&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	НачисленияФиксРасчет = Новый Массив;
	НачисленияФиксРасчет.Добавить("Результат");
	
	НачисленияФиксРасчетВремени = Новый Массив;
	НачисленияФиксРасчетВремени.Добавить("ОтработаноДней");
	НачисленияФиксРасчетВремени.Добавить("ОтработаноЧасов");
	НачисленияФиксРасчетВремени.Добавить("НормаДней");
	НачисленияФиксРасчетВремени.Добавить("НормаЧасов");
	
	НачисленияФиксСтрока = Новый Массив;
	НачисленияФиксСтрока.Добавить("Сотрудник");
	НачисленияФиксСтрока.Добавить("Подразделение");
	НачисленияФиксСтрока.Добавить("Начисление");
	НачисленияФиксСтрока.Добавить("ДатаНачала");
	НачисленияФиксСтрока.Добавить("ДатаОкончания");
	
	УдержанияФиксРасчет = Новый Массив;
	УдержанияФиксРасчет.Добавить("Результат");
	
	ТаблицаНачисления = Новый Структура;
	ТаблицаНачисления.Вставить("ФиксРасчет", НачисленияФиксРасчет);
	ТаблицаНачисления.Вставить("ФиксЗаполнение", Новый Массив);
	ТаблицаНачисления.Вставить("ФиксСтрока", НачисленияФиксСтрока);
	ТаблицаНачисления.Вставить("ФиксРасчетВремени", НачисленияФиксРасчетВремени);
	
	ТаблицаПособия = Новый Структура;
	ТаблицаПособия.Вставить("ФиксРасчет", НачисленияФиксРасчет);
	ТаблицаПособия.Вставить("ФиксЗаполнение", Новый Массив);
	ТаблицаПособия.Вставить("ФиксСтрока", НачисленияФиксСтрока);
	
	ТаблицаУдержания = Новый Структура;
	ТаблицаУдержания.Вставить("ФиксРасчет", УдержанияФиксРасчет);
	ТаблицаУдержания.Вставить("ФиксЗаполнение", Новый Массив);
	
	ТаблицаНачисленияПерерасчет = Новый Структура;
	ТаблицаНачисленияПерерасчет.Вставить("ФиксРасчет", НачисленияФиксРасчет);
	ТаблицаНачисленияПерерасчет.Вставить("ФиксЗаполнение", Новый Массив);
	ТаблицаНачисленияПерерасчет.Вставить("ФиксСтрока", НачисленияФиксСтрока);
	ТаблицаНачисленияПерерасчет.Вставить("ФиксРасчетВремени", НачисленияФиксРасчетВремени);
	
	ТаблицаПособияПерерасчет = Новый Структура;
	ТаблицаПособияПерерасчет.Вставить("ФиксРасчет", НачисленияФиксРасчет);
	ТаблицаПособияПерерасчет.Вставить("ФиксЗаполнение", Новый Массив);
	ТаблицаПособияПерерасчет.Вставить("ФиксСтрока", НачисленияФиксСтрока);
	
	КонтролируемыеПоля = Новый Структура;
	КонтролируемыеПоля.Вставить("Начисления", ТаблицаНачисления);
	КонтролируемыеПоля.Вставить("Пособия", ТаблицаПособия);
	КонтролируемыеПоля.Вставить("Удержания", ТаблицаУдержания);
	КонтролируемыеПоля.Вставить("НДФЛ", УчетНДФЛРасширенный.КонтролируемыеПоляДляФиксацииРезультатов());
	КонтролируемыеПоля.Вставить("КорректировкиВыплаты", РасчетЗарплатыРасширенный.КонтролируемыеПоляКорректировкиВыплатыДляФиксацииРезультатов());
	КонтролируемыеПоля.Вставить("НачисленияПерерасчет", ТаблицаНачисленияПерерасчет);
	КонтролируемыеПоля.Вставить("ПособияПерерасчет", ТаблицаПособияПерерасчет);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьСоставКонтролируемыхПолейНачисленияЗарплаты(КонтролируемыеПоля);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ДополнитьСоставКонтролируемыхПолейНачисленияЗарплаты(КонтролируемыеПоля);
	КонецЕсли;
			
	Возврат КонтролируемыеПоля;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей() Экспорт
	Возврат СтарыеЗначенияКонтролируемыхПолей;
КонецФункции

#КонецОбласти 

#Область СреднийЗаработок

&НаСервере
Процедура ЗаполнитьПериодРасчетаСреднегоЗаработка()
	
	Если Не ИспользуетсяРасчетЗарплаты Или Объект.ФиксПериодРасчетаСреднегоЗаработка Тогда
		// Период расчета среднего заработка установлен принудительно.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаУвольнения) 
		Или Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаСобытия = Объект.ДатаУвольнения;
	Если ЭтоУвольнениеВПоследнийДеньМесяца(Объект) Тогда
		ДатаНачалаСобытия = НачалоМесяца(ДобавитьМесяц(Объект.ДатаУвольнения, 1));
	КонецЕсли;
	
	ПериодРасчетаСреднего = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(
		ДатаНачалаСобытия, Объект.Сотрудник, Объект.ВидРасчетаКомпенсацииУдержанияОтпуска);
	
	ОбновлятьДанныеСреднегоЗаработка = Ложь;
	Если НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаНачало) <> НачалоМесяца(ПериодРасчетаСреднего.ДатаНачала) 
		Или	НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаОкончание) <> НачалоМесяца(ПериодРасчетаСреднего.ДатаОкончания) Тогда
		Объект.ПериодРасчетаСреднегоЗаработкаНачало	= ПериодРасчетаСреднего.ДатаНачала;
		Объект.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднего.ДатаОкончания;
		ОбновлятьДанныеСреднегоЗаработка = Истина;
	КонецЕсли;
	
	Если РасчитыватьСреднийЗаработокПриЗаполненииДокумента() Тогда
		// Т.к. зарплата за месяц увольнения начисляется в документе увольнения, 
		// ее нужно в любом случае обновить в данных среднего заработка.
		// Удаляем из таблиц среднего заработка данные за последний месяц.
		ТаблицыСреднего = Новый Массив;
		ТаблицыСреднего.Добавить(Объект.СреднийЗаработокОбщий);
		ТаблицыСреднего.Добавить(Объект.ОтработанноеВремяДляСреднегоОбщий);
		УдаляемыеСтрокиСреднегоЗаработка = Новый Массив;
		Для Каждого ТаблицаСреднего Из ТаблицыСреднего Цикл
			
			УдаляемыеСтрокиСреднегоЗаработка.Очистить();
			
			Для каждого СтрокаСреднего Из ТаблицаСреднего Цикл
				Если СтрокаСреднего.Период >= НачалоМесяца(Объект.ПериодРегистрации) Тогда
					УдаляемыеСтрокиСреднегоЗаработка.Добавить(СтрокаСреднего);
				КонецЕсли;
			КонецЦикла;	
			
			Для каждого УдаляемаяСтрока Из УдаляемыеСтрокиСреднегоЗаработка Цикл
				ТаблицаСреднего.Удалить(УдаляемаяСтрока);
			КонецЦикла; 
			
		КонецЦикла;
		ОбновлятьДанныеСреднегоЗаработка = Истина;
	КонецЕсли;
	
	Если ОбновлятьДанныеСреднегоЗаработка Тогда
		ОбновитьДанныеДляРасчетаСреднего();
	КонецЕсли;
	Если Объект.РасчетДенежногоСодержания Тогда
		ОбновитьДанныеДляРасчетаСохраняемогоДенежногоСодержания();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоУвольнениеВПоследнийДеньМесяца(Объект)
	Возврат КонецДня(Объект.ДатаУвольнения) = КонецМесяца(Объект.ДатаУвольнения);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоУвольнениеБудущимМесяцем(Объект)
	Возврат НачалоДня(Объект.ДатаУвольнения) > КонецМесяца(Объект.ПериодРегистрации);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоУвольнениеВМесяцеПриемаНаРаботу(ДатаУвольнения, ДатаПриема)
	Возврат НачалоМесяца(ДатаУвольнения) = НачалоМесяца(ДатаПриема);
КонецФункции

&НаСервере
Функция РасчитыватьСреднийЗаработокПриЗаполненииДокумента()
	
	Возврат ЭтоУвольнениеВПоследнийДеньМесяца(Объект)
		Или ЭтоУвольнениеБудущимМесяцем(Объект)
		Или ЭтоУвольнениеВМесяцеПриемаНаРаботу(Объект.ДатаУвольнения, ДатаПриемаНаРаботу)
		Или Объект.МесяцНачалаРасчетов < НачалоМесяца(Объект.ДатаУвольнения);
	
КонецФункции

&НаСервере
Процедура РассчитатьСреднийЗаработок()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	ДополнительныеПараметры.Индексации = Объект.ДанныеОбИндексации;
	ДополнительныеПараметры.ДатаНачалаСобытия = Объект.ДатаУвольнения;
	ДополнительныеПараметры.НачалоПериода = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
	ДополнительныеПараметры.ОкончаниеПериода = Объект.ПериодРасчетаСреднегоЗаработкаОкончание;
	ДополнительныеПараметры.ПоЧасам = КадровыйУчетРасширенныйКлиентСервер.ЭтоСреднечасовойЗаработокВДокументеУвольнение();
	Для Каждого КлючИЗначение Из СпособыРасчетаСреднегоЗаработка Цикл
		ДополнительныеПараметры.СпособРасчетаОтпуска = КлючИЗначение.Значение;
		Объект[КлючИЗначение.Ключ] = УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработокОбщий(Объект.СреднийЗаработокОбщий, Объект.ОтработанноеВремяДляСреднегоОбщий, ДополнительныеПараметры);
	КонецЦикла;
	
	ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	ДополнительныеПараметры.Индексации = Объект.ДанныеОбИндексации;
	ДополнительныеПараметры.ДатаНачалаСобытия = Объект.ДатаУвольнения;
	ДополнительныеПараметры.НачалоПериода = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
	ДополнительныеПараметры.ОкончаниеПериода = Объект.ПериодРасчетаСреднегоЗаработкаОкончание;
	ДополнительныеПараметры.ПоЧасам = ИспользуетсяСреднечасовойЗаработок;
	Объект.СреднийЗаработокВыходногоПособия = УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработокОбщий(Объект.СреднийЗаработокОбщий, Объект.ОтработанноеВремяДляСреднегоОбщий, ДополнительныеПараметры);
	
	ЗаполнениеВыполнено = Истина;
	
	ЗаполнитьИнформациюЗаполненностиДанных();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСохраняемоеДенежноеСодержание()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.РассчитатьСохраняемоеДенежноеСодержаниеДокумента(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	КонецЕсли;
		
	ЗаполнениеВыполнено = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДляРасчетаСохраняемогоДенежногоСодержания()
	
	Если НЕ ОбновитьРасчетДенежногоСодержания Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.ОбновитьДанныеСохраняемогоДенежногоСодержанияДокумента(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	КонецЕсли;
	
	ОбновитьРасчетДенежногоСодержания = Ложь;
	РасчетДенежногоСодержанияРедактировался = Ложь;
	
	РассчитатьСохраняемоеДенежноеСодержание();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДляРасчетаСреднего()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеСреднегоЗаработка = Новый Структура("ДанныеОНачислениях, ДанныеОВремени, ДанныеОбИндексации");
	ДанныеСреднегоЗаработка.ДанныеОНачислениях = Объект.СреднийЗаработокОбщий;
	ДанныеСреднегоЗаработка.ДанныеОВремени = Объект.ОтработанноеВремяДляСреднегоОбщий;
	ДанныеСреднегоЗаработка.ДанныеОбИндексации = Объект.ДанныеОбИндексации;
		
	УчетСреднегоЗаработка.ОбновитьДанныеОбщегоСреднегоЗаработка(
			ДанныеСреднегоЗаработка, 
			Объект.ДатаУвольнения + 86400, 
			Объект.ПериодРасчетаСреднегоЗаработкаНачало, 
			Объект.ПериодРасчетаСреднегоЗаработкаОкончание, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), , 
			СсылкаНаОбъект);
		
	ЗаполнитьИнформациюЗаполненностиДанных();
	
	РассчитатьСреднийЗаработок();
	ПерезаполнятьСреднийЗаработок = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеСреднечасовогоЗаработка()
	
	ИспользуетсяСреднечасовойЗаработок = Ложь;
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.СуммированныйУчет = УчетРабочегоВремениРасширенный.СотрудникуПрименяетсяСуммированныйУчетРабочегоВремени(Объект.Сотрудник, Объект.ДатаУвольнения);
	Если Объект.СуммированныйУчет Тогда
		ИспользуетсяСреднечасовойЗаработок = Истина;
		Возврат;
	КонецЕсли;
	
	Если УчетСреднегоЗаработка.НачислениеИспользуетСреднечасовойЗаработок(Объект.ВыходноеПособие) Тогда
		ИспользуетсяСреднечасовойЗаработок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеОплатыПереработокСуммированногоУчета()
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ИспользуетсяОплатаСуммированногоУчета = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПереработокСуммированногоУчета");
		УстановитьПривилегированныйРежим(Истина);
		СотрудникНаСуммированномГрафике = УчетРабочегоВремениРасширенный.СотрудникуПрименяетсяСуммированныйУчетРабочегоВремени(Объект.Сотрудник, Объект.ДатаУвольнения);
		ИспользоватьОплатуПереработокСуммированногоУчета = СотрудникНаСуммированномГрафике И ИспользуетсяОплатаСуммированногоУчета;
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		ИспользоватьОплатуПереработокСуммированногоУчета = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеНДФЛ

&НаСервере
Функция НДФЛПодробнееНаСервере(ФизическоеЛицо)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ДокументОбъект);
	
	НДФЛПодробнее = Новый Массив;
	НДФЛПодробнее.Добавить(ДокументОбъект.Ссылка);
	НДФЛПодробнее.Добавить(УчетНДФЛФормы.РегистрНалоговогоУчетаПоНДФЛ(ДокументОбъект, Модифицированность, ФизическоеЛицо, Объект.ПериодРегистрации));
	
	Возврат НДФЛПодробнее;
	
КонецФункции

&НаКлиенте
Процедура ВычетыПриОкончанииРедактирования(ТекущиеДанные, ОтменаРедактирования, КлючиПоиска)
	
	Если Не Элементы[ОписаниеПанелиВычеты().ТабличнаяЧастьНДФЛ.ИмяТаблицыФормы].ТекущиеДанные.ФиксРасчет Тогда
		Если УчетНДФЛКлиентРасширенный.ВычетыИзменены(ЭтаФорма, ТекущиеДанные, ОтменаРедактирования) Тогда
			
			СтруктураПоиска = Новый Структура(КлючиПоиска);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
			
			УстановитьФиксРасчетСтрокНДФЛ(СтруктураПоиска);
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеВычетовНаДетейИИмущественныхСтрокиНДФЛ()
	
	УчетНДФЛФормы.ОбновитьПредставлениеВычетовНаДетейИИмущественныхСтрокиНДФЛ(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеВычетовКДоходамСтрокиНДФЛ()
	
	УчетНДФЛФормы.ОбновитьПредставлениеВычетовКДоходамСтрокиНДФЛ(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФиксРасчетСтрокНДФЛ(СтруктураПоиска)
	
	УчетНДФЛФормы.УстановитьФиксРасчетСтрокНДФЛ(ЭтаФорма, СтруктураПоиска);
	
КонецПроцедуры

#КонецОбласти 

#Область СервернаяЧастьОбработчиковСобытийЭлементовФормы

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
	УстановитьФункциональныеОпцииФормы();
	РасчетЗарплатыРасширенныйФормы.ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), РегистрацияНачисленийДоступна);
	
	УстановитьПривилегированныйРежим(Истина);

	ЗаполнитьДанныеФормыПоОрганизации();
	РасчетЗарплатыРасширенныйФормы.ОбновитьПлановыеДатыВыплатыПоОрганизации(ЭтаФорма);
	УстановитьПланируемуюДатуВыплаты();	
	ОтражениеЗарплатыВБухучетеРасширенный.ОбработатьИзменениеОрганизацииПроцентЕНВД(ЭтаФорма, Объект.Организация, Объект.ПериодРегистрации);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	ОчиститьМесяцНачалаРасчетов();
	
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Объект.ФизическоеЛицо = Неопределено;
	Иначе					
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Объект.Сотрудник, "ДатаРождения");
		Если КадровыеДанные.Количество() > 0 Тогда
			Если Не ЗначениеЗаполнено(КадровыеДанные[0].ДатаРождения)
				И Объект.ПериодРегистрации < УчетСтраховыхВзносовКлиентСервер.ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР() Тогда
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='У %1 не заполнена дата рождения'"),
					Объект.Сотрудник);
				Объект.Сотрудник = Неопределено;
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			Объект.ФизическоеЛицо = КадровыеДанные[0].ФизическоеЛицо;
		КонецЕсли; 
	КонецЕсли;

	ОбновитьВидимостьПричиныУвольнения();
	ОчиститьДанныеСреднегоЗаработка();
	ОчиститьНачисления();
	ОбновитьДанныеПоСотруднику();
	
КонецПроцедуры

&НаСервере
Процедура ДатаУвольненияПриИзмененииНаСервере()
	
	ОчиститьМесяцНачалаРасчетов();
	
	УстановитьПланируемуюДатуВыплаты();
	ОбновитьДанныеПоСотруднику();
	
	Если ОбщегоНазначенияБЗККлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчетКорпоративная") Тогда
		МодульКадровыйУчетКорпоративныйКлиентСервер = ОбщегоНазначенияБЗККлиентСервер.ОбщийМодуль("КадровыйУчетКорпоративныйКлиентСервер");
		МодульКадровыйУчетКорпоративныйКлиентСервер.УстановитьНеобходимостьРасчетаДнейЧасовКомпенсацииЗаНеотработанноеВремя(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#Область ОчиститьОбновитьДанныеПоСотруднику

&НаСервере
Процедура ОчиститьДанныеСреднегоЗаработка()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	Объект.СреднийЗаработокОбщий.Очистить();
	Объект.ОтработанноеВремяДляСреднегоОбщий.Очистить();
	Объект.ДанныеОбИндексации.Очистить();
	Объект.СреднийЗаработокПоРабочимДням = Неопределено;
	Объект.СреднийЗаработокВыходногоПособия = Неопределено;
	Объект.СреднийЗаработок = Неопределено;
	Объект.ПериодРасчетаСреднегоЗаработкаНачало = Неопределено;
	Объект.ПериодРасчетаСреднегоЗаработкаОкончание = Неопределено;
	
	Объект.ДенежноеСодержание.Очистить();
	Объект.ДенежноеСодержаниеФактическиеНачисления.Очистить();
	
	УстановитьПредупреждениеДокументНеРассчитан(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНачисления()
	
	Объект.Начисления.Очистить();
	Объект.НачисленияПерерасчет.Очистить();
	Объект.РаспределениеПоТерриториямУсловиямТруда.Очистить();
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоСотруднику()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьВторичныеДанныеСотрудникаВФорме();
	УстановитьСтраницуОсновногоСреднегоЗаработка();
	УстановитьТипОснованияУвольнения();

	УстановитьИспользованиеСреднечасовогоЗаработка();
	УстановитьИспользованиеОплатыПереработокСуммированногоУчета();
	
	НадписьДнейЧасовВыходногоПособия = НадписьДнейЧасовВыходногоПособия();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчетКорпоративная") Тогда
		МодульКадровыйУчетКорпоративный = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетКорпоративный");
		МодульКадровыйУчетКорпоративный.УвольнениеУстановитьНадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя(ЭтотОбъект);
	КонецЕсли;
	
	РассчитатьКоличествоДнейКомпенсацииУдержанияОтпускаНаСервере();
	РассчитатьКоличествоЧасовКомпенсацииСуммированногоУчетаНаСервере();
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		УстановитьТипЗначенияВидаРасчета(Объект);
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы(ЭтаФорма, ЭтаФорма.Объект);
	УстановитьВидимостьСуммированногоУчета();
	УстановитьОтметкуНезаполненногоДнейКомпенсацииУдержанияОтпуска();
	ОбновитьФормуПоВидуДоговора();
	
	Объект.ФиксПериодРасчетаСреднегоЗаработка = Ложь;
	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	ЗаполнитьКадровыйРезерв();
	
	УстановитьВидимостьПерерасчетов();
	СформироватьНадписьОстаткиОтгулов();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоДнейКомпенсацииУдержанияОтпускаНаСервере()
	
	Объект.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать;
	Объект.ДнейКомпенсацииУдержанияОтпуска = Неопределено;  
	Объект.РабочийГодС = Неопределено; 
	Объект.РабочийГодПо = Неопределено;
	Объект.ДополнительныеОтпуска.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Или Не ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
		Возврат
	КонецЕсли;
	
	ИсключаемыеРегистраторы = Новый Массив;
	ИсключаемыеРегистраторы.Добавить(СсылкаНаОбъект);
	Если ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент) Тогда
		ИсключаемыеРегистраторы.Добавить(СсылкаНаИсправленныйДокумент);
	КонецЕсли;
	
	Результат = ОстаткиОтпусков.ОстатокОтпускаСотрудникаНаДату(Объект.Сотрудник, Объект.ДатаУвольнения, ИсключаемыеРегистраторы, Истина);
	
	Объект.РабочийГодС	= Результат.РабочийГодС;
	Объект.РабочийГодПо	= Мин(Объект.ДатаУвольнения, Результат.РабочийГодПо);
	
	ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении = ОстаткиОтпусков.ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении();
	
	Для Каждого Остаток Из Результат.ОстаткиВРазрезеВидовОтпусков Цикл
		Если НЕ ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении.Найти(Остаток.ВидЕжегодногоОтпуска) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Остаток.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
			Объект.ПризнакКомпенсацииУдержанияОтпуска	= ?(Остаток.КоличествоДней > 0, Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные,Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом);
			Объект.ДнейКомпенсацииУдержанияОтпуска		= ?(Остаток.КоличествоДней > 0, Остаток.КоличествоДней, Остаток.КоличествоДней * (-1));
			Объект.РабочийГодС = Остаток.РабочийГодС;
			Объект.РабочийГодПо = Мин(Объект.ДатаУвольнения, Остаток.РабочийГодПо);
		Иначе
			Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
				Строка = Объект.ДополнительныеОтпуска.Добавить();
				Строка.ВидОтпуска									= Остаток.ВидЕжегодногоОтпуска;
				Строка.ПризнакКомпенсацииУдержания					= ?(Остаток.КоличествоДней > 0, Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные,Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом);
				Строка.ДнейКомпенсацииУдержания						= ?(Остаток.КоличествоДней > 0, Остаток.КоличествоДней, Остаток.КоличествоДней * (-1));
				Строка.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск 	= Остаток.РабочийГодС;
				Строка.КонецПериодаЗаКоторыйПредоставляетсяОтпуск 	= Мин(Объект.ДатаУвольнения, Остаток.РабочийГодПо);
			КонецЕсли;  
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоЧасовКомпенсацииСуммированногоУчетаНаСервере()

	Объект.Сверхурочно1_5 = 0;
	Объект.Сверхурочно2 = 0;
	
	Если НЕ ЗначениеЗаполнено(Объект.Сотрудник)
		Или Не ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ИспользоватьОплатуПереработокСуммированногоУчета Тогда
		Возврат;
	КонецЕсли;
	
	// Вычисляем незакрытые периоды по предыдущим проведенным документам
	ПериодСуммированногоУчета = УчетРабочегоВремениРасширенный.ПериодСуммированногоУчетаПоПрошлымДокументам(Объект.Организация, Объект.ДатаУвольнения, Объект.Сотрудник);
	
	// Получаем переработки
	ТаблицаСотрудников = РасчетЗарплатыРасширенный.ПоказателиСуммированногоУчетаСотрудниковЗаПериод(
							ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник),
							НачалоМесяца(ПериодСуммированногоУчета.ПериодСуммированногоУчетаНачало),
							КонецДня(Объект.ДатаУвольнения));
							
							
	Если ТаблицаСотрудников.Количество() > 0 Тогда
		Объект.Сверхурочно1_5 = Макс(ТаблицаСотрудников[0].Переработки, 0);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ДнейЧасовВыходногоПособияПриИзмененииНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновитьФормуПоВидуДоговора();

	НадоЗаполнятьВидРасчета = ЗначениеЗаполнено(Объект.ДнейЧасовВыходногоПособия) И Не ЗначениеЗаполнено(Объект.ВыходноеПособие);
	Если НадоЗаполнятьВидРасчета Тогда
		// Заполняем вид оплаты выходного пособия.
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(
			ЭтаФорма, Объект.ВыходноеПособие, Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры  

&НаСервере
Процедура КоличествоМесяцевВыплатыДенежногоСодержанияПриИзмененииНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);

	НадоЗаполнятьВидРасчета = ЗначениеЗаполнено(Объект.КоличествоМесяцевВыплатыДенежногоСодержания) И Не ЗначениеЗаполнено(Объект.ВидРасчетаМесячноеДенежноеСодержание);
	Если НадоЗаполнятьВидРасчета Тогда
		// Заполняем вид оплаты выходного пособия.
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(
			ЭтаФорма, Объект.ВидРасчетаМесячноеДенежноеСодержание, Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособиеМесячноеДенежноеСодержание);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	ОчиститьМесяцНачалаРасчетов();
	
	УстановитьПланируемуюДатуВыплаты();
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтражениеЗарплатыВБухучетеРасширенный.ОбработатьИзменениеМесяцНачисленияПроцентЕНВД(ЭтаФорма, Объект.Организация, Объект.ПериодРегистрации); 
	УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, Объект.ПериодРегистрации);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьВидимостьПерерасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ВидРасчетаКомпенсацииОсновногоОтпускаПриИзмененииНаСервере()
	
	Объект.ФиксПериодРасчетаСреднегоЗаработка = Ложь;
	
	Если Не РасчитыватьСреднийЗаработокПриЗаполненииДокумента() Тогда
		ЗаполнитьПериодРасчетаСреднегоЗаработка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПогашениеЗаймовПриИзмененииНаСервере()
	
	УстановитьСвойствоДокументРассчитан();

КонецПроцедуры

&НаСервере
Процедура ПризнакКомпенсацииОтпускаПриИзмененииНаСервере()
	
	УстановитьТипЗначенияВидаРасчета(Объект);
	УстановитьДоступностьЭлементовФормы(ЭтаФорма, Объект);
	УстановитьОтметкуНезаполненногоДнейКомпенсацииУдержанияОтпуска();
	
КонецПроцедуры

&НаСервере
Процедура ДокументРассчитанПриИзменении()
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
КонецПроцедуры

&НаСервере
Процедура РуководительПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура ГлавныйБухгалтерПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура БухгалтерПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура РаботникКадровойСлужбыПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура ИсполнительПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтпускаВидОтпускаПриИзмененииНаСервере(ИдентификаторСтроки)
	
	Строка = Объект.ДополнительныеОтпуска.НайтиПоИдентификатору(ИдентификаторСтроки);
	ОбновитьРабочийГодДополнительногоОтпуска(Строка);
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтпускаКоличествоДнейКомпенсацииПриИзмененииНаСервере(ИдентификаторСтроки)
	
	Строка = Объект.ДополнительныеОтпуска.НайтиПоИдентификатору(ИдентификаторСтроки);
	ОбновитьРабочийГодДополнительногоОтпуска(Строка);

КонецПроцедуры

#КонецОбласти

#Область ОбновитьИтоги

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	ОбновитьНачисленоИтог(Форма); 
	ОбновитьУдержаноИтог(Форма);
	ОбновитьПерерасчетИтог(Форма);
	ОбновитьПерерасчетПособийИтог(Форма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНачисленоИтог(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Форма.НачисленоИтог = Форма.Объект.Начисления.Итог("Результат") + Форма.Объект.Пособия.Итог("Результат") + Форма.Объект.Льготы.Итог("Результат");
	
	СписокКомпенсаций = Новый Массив;
	Если Форма.Объект.ПризнакКомпенсацииУдержанияОтпуска = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные") Тогда
		СписокКомпенсаций.Добавить(Форма.Объект.ВидРасчетаКомпенсацииУдержанияОтпуска);
	КонецЕсли;
	
	Для каждого Компенсация Из Форма.Объект.ДополнительныеОтпуска Цикл
		Если Компенсация.ПризнакКомпенсацииУдержания = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные") Тогда
			СписокКомпенсаций.Добавить(Компенсация.ВидРасчетаКомпенсацииУдержания);
		КонецЕсли;
	КонецЦикла; 
	
	ВыходноеПособие = Неопределено;
	
	Форма.НачисленоКомпенсаций = 0;
	Форма.НачисленоВыходноеПособие = 0;
	Форма.НачисленоПрочее = 0;
	СведенияОНачислениях  = СведенияОНачислениях(Форма.Объект);
	
	Для каждого Начисление Из Форма.Объект.Начисления Цикл
		СведенияОНачислении = СведенияОНачислениях.Получить(Начисление.Начисление);
		
		Если СписокКомпенсаций.Найти(Начисление.Начисление) <> Неопределено Тогда
			Форма.НачисленоКомпенсаций = Форма.НачисленоКомпенсаций + Начисление.Результат; 
		ИначеЕсли СведенияОНачислении.КатегорияНачисленияИлиНеоплаченногоВремени = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие") Тогда
			Форма.НачисленоВыходноеПособие = Форма.НачисленоВыходноеПособие + Начисление.Результат;                                          
		Иначе	
			Форма.НачисленоПрочее = Форма.НачисленоПрочее + Начисление.Результат;
		КонецЕсли;
	КонецЦикла; 
	
	Для Каждого СтрокаПособий Из Форма.Объект.Пособия Цикл
		Форма.НачисленоПрочее = Форма.НачисленоПрочее + СтрокаПособий.Результат;
	КонецЦикла;
	
	Для Каждого СтрокаЛьгот Из Форма.Объект.Льготы Цикл
		Форма.НачисленоПрочее = Форма.НачисленоПрочее + СтрокаЛьгот.Результат;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция СведенияОНачислениях(Знач Объект)
	МассивНачислений = Объект.Начисления.Выгрузить().ВыгрузитьКолонку("Начисление");
	СведенияОНачислениях = Новый Соответствие;
	Для каждого Начисление Из МассивНачислений Цикл
		СведенияОНачислениях.Вставить(Начисление, ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление));
	КонецЦикла;
	Возврат СведенияОНачислениях;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУдержаноИтог(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Форма.УдержаноНДФЛ = Форма.Объект.НДФЛ.Итог("Налог");
	Форма.УдержаноПрочее = Форма.Объект.Удержания.Итог("Результат");
	Форма.УдержаноЗаймы = Форма.Объект.ПогашениеЗаймов.Итог("ПогашениеЗайма") + Форма.Объект.ПогашениеЗаймов.Итог("ПогашениеПроцентов") + Форма.Объект.ПогашениеЗаймов.Итог("НалогНаМатериальнуюВыгоду");
	Форма.УдержаноИтог = Форма.УдержаноНДФЛ + Форма.УдержаноПрочее + Форма.УдержаноЗаймы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПерерасчетИтог(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	Форма.ПерерасчетИтог = Форма.Объект.НачисленияПерерасчет.Итог("Результат");		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПерерасчетПособийИтог(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	Форма.ПерерасчетПособийИтог = Форма.Объект.ПособияПерерасчет.Итог("Результат");		
КонецПроцедуры

#КонецОбласти

#Область РедактированиеПроцентаЕНВДВФормеДокумента

&НаКлиенте
Процедура ЗарегистрироватьПроцентЕНВД() Экспорт
	
	ЗарегистрироватьПроцентЕНВДНаСервере(Объект.Организация, Объект.ПериодРегистрации, ЭтаФорма.ПроцентЕНВД, ЭтаФорма.ПроцентЕНВДСтрока);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьПроцентЕНВДНаСервере(Организация, Месяц, ПроцентЕНВД, ПроцентЕНВДСтрока)
	
	ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьПроцентЕНВДПослеРедактированияВФорме(Организация, Месяц, ПроцентЕНВД, ПроцентЕНВДСтрока);
	
КонецПроцедуры

&НаСервере
Функция ТекстПредупрежденияПриРедактированииПроцентаЕНВД() Экспорт
	
	ОрганизацияНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "Наименование");
	МесяцНачисленияСтрокой  = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Объект.ПериодРегистрации);
	
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'При изменении введенного ранее процента деятельности ЕНВД необходимо
	|перезаполнить все документы начисления зарплаты за %1 г по ""%2""'"),
	МесяцНачисленияСтрокой,
	ОрганизацияНаименование);
	
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроцентЕНВДСтрокаПриИзменении(Элемент)
	
	ОтражениеЗарплатыВБухучетеКлиент.ПроцентЕНВДСтрокаПриИзменении(ЭтаФорма, Элемент, ЭтаФорма.ПроцентЕНВДСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроцентЕНВДСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОтражениеЗарплатыВБухучетеКлиент.ПроцентЕНВДСтрокаНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти 

#Область РаспределениеПоТерриториямУсловиямТруда

&НаКлиенте
Процедура ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыДляВыбора = РасчетЗарплатыРасширенныйКлиент.ПараметрыДляВыбораПолеРаспределениеПоТерриториямУсловиямТруда();
	ПараметрыДляВыбора.Форма = ЭтаФорма;
	ПараметрыДляВыбора.ОписаниеДокумента = ОписаниеДокумента(ЭтаФорма);
	ПараметрыДляВыбора.ОписаниеТаблицы = ОписаниеТаблицы;
	
	РасчетЗарплатыРасширенныйКлиент.ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПараметрыДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ЭтаФорма, ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда()
	
	Описания = Новый Массив;
	Описания.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	Описания.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	Описания.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
	Описания.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьМассивОписанийТаблицФормыНачисленияЗарплаты(Описания, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна));
	КонецЕсли;
	
	Возврат Описания;
	
КонецФункции

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Возврат Новый Массив;
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПериодРегистрации"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "Организация"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "Сотрудник"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаУвольнения"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПризнакКомпенсацииОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДнейКомпенсацииУдержанияОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВидРасчетаКомпенсацииУдержанияОсновногоОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДнейЧасовВыходногоПособия"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВыходноеПособие"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДополнительныеОтпускаВидОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДополнительныеОтпускаВидРасчетаКомпенсации"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДополнительныеОтпускаПризнакКомпенсацииУдержанияДополнительныхОтпусков"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДополнительныеОтпускаКоличествоДнейКомпенсации"));
	КонецЕсли;
	
	Для каждого ОписаниеЭлемента Из Массив Цикл
		ОписаниеЭлемента.Вставить("ПредупреждениеПриРедактировании", ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыТекстПредупрежденияДокументовСАвтоматическимРасчетом());
	КонецЦикла;
	
	Возврат Массив
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма)
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ?(ЕстьФиксированныеДанные(Форма), ОтображениеПредупрежденияПриРедактировании.Отображать, ОтображениеПредупрежденияПриРедактировании.Авто));
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьФиксированныеДанные(Форма)
	Если НЕ Форма.РегистрацияНачисленийДоступна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсправленныйДокументЗаполнен = ЗначениеЗаполнено(Форма.СсылкаНаИсправленныйДокумент);
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен) 
		Или РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен)
		Или РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен)
		Или РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен)
		Или РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНДФЛ(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен)
		Или РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен);
		
КонецФункции 

#КонецОбласти

#Область АдаптацияУвольнение

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиРешенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаНавигационнойСсылкиРешенияЗавершениеНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаНавигационнойСсылкиРешенияЗавершениеНаСервере(Результат, ДополнительныеПараметры)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнениеФормы");
		Модуль.ОбработкаНавигационнойСсылкиРешенияЗавершение(ЭтотОбъект, Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоВидуДоговора()
	
	ИспользоватьГосударственнуюМуниципальнуюСлужбу = ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу");
	Если ИспользоватьГосударственнуюМуниципальнуюСлужбу Тогда
		
		ЭтоГосслужащий = ЭтоГосслужащий();
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ВыходноеПособиеДенежноеСодержание",
			"Видимость",
			ЭтоГосслужащий);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДенежноеСодержаниеИнфо",
			"Видимость",
			ЭтоГосслужащий);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПоказательСреднегоЗаработка",
			"Видимость",
			Не Объект.РасчетДенежногоСодержания);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОткрытьСреднийЗаработокВыходногоПособия",
			"Доступность",
			Объект.ДнейЧасовВыходногоПособия > 0 Или Не ЭтоГосслужащий);	
		
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"РасчетДенежногоСодержания",
			"Видимость",
			ЗарплатаКадрыРасширенный.ДоступноИзменениеВариантаРасчетаВДокументе(Объект.Сотрудник,Объект.ДатаУвольнения));
			
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчетКорпоративная") Тогда
		МодульКадровыйУчетКорпоративный = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетКорпоративный");
		МодульКадровыйУчетКорпоративный.УвольнениеОбновитьФормуПоВидуДоговора(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоГосслужащий()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Возврат МодульГосударственнаяСлужба.ВидДоговораГосударственнойСлужбы(ЭтотОбъект, Объект.ВидДоговора);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИнформациюЗаполненностиДанных()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНадписи = УчетСреднегоЗаработка.ИнформацияОЗаполненностиДанныхСреднегоЗаработка(
		СсылкаНаОбъект,
		ЗаполнениеВыполнено,
		Объект.Сотрудник,
		Объект.ДатаУвольнения,
		Объект.ПериодРасчетаСреднегоЗаработкаНачало, 
		Объект.ПериодРасчетаСреднегоЗаработкаОкончание, 
		Объект.СреднийЗаработокОбщий, 
		Объект.ОтработанноеВремяДляСреднегоОбщий);
	
	ЗаполненностьДанныхИнформационныйТекст	= СтруктураНадписи.Текст;
	ЗаполненностьДанныхКартинка				= СтруктураНадписи.Картинка;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредупреждениеДокументНеРассчитан(Форма)
	
	Форма.ЗаполненностьДанныхИнформационныйТекст = УчетСреднегоЗаработкаКлиентСервер.ТекстПредупрежденияДокументНеРассчитан();
	Форма.ЗаполненностьДанныхКартинка = БиблиотекаКартинок.Предупреждение;
	Форма.ОбновитьИнформациюЗаполненностиДанных  = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруРеквизитовИСпособовРасчетаОтпуска()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовИСпособовРасчетаОтпуска = Новый Структура;
	СтруктураРеквизитовИСпособовРасчетаОтпуска.Вставить("СреднийЗаработок", ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням"));
	СтруктураРеквизитовИСпособовРасчетаОтпуска.Вставить("СреднийЗаработокПоРабочимДням", ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ОплатаОтпускаПоШестидневке"));
	
	СпособыРасчетаСреднегоЗаработка = Новый ФиксированнаяСтруктура(СтруктураРеквизитовИСпособовРасчетаОтпуска);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.ЗаполнитьРеквизитФормыНазначенияРасчетаДенежногоСодержания(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовФормы(Форма, Объект)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДнейКомпенсацииУдержанияОтпуска",
		"Доступность",
		Объект.ПризнакКомпенсацииУдержанияОтпуска <> ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВидРасчетаКомпенсацииУдержанияОсновногоОтпуска",
		"Доступность",
		Объект.ПризнакКомпенсацииУдержанияОтпуска <> ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать")
			И Не (Форма.СпособУдержанияИзлишнеНачисленныхОтпускных = ПредопределенноеЗначение("Перечисление.СпособыУдержанияИзлишнеНачисленныхОтпускных.СторнированиеРанееНачисленныхСумм")
				И Объект.ПризнакКомпенсацииУдержанияОтпуска = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом")));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДополнительныеОтпуска",
		"ИзменятьСоставСтрок",
		Форма.ДоступенВводНового);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДополнительныеОтпуска",
		"ИзменятьПорядокСтрок",
		Форма.ДоступенВводНового);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненногоДнейКомпенсацииУдержанияОтпуска()
	
	АвтоОтметкаНезаполненного = Объект.ПризнакКомпенсацииУдержанияОтпуска <> Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать
		И Не (СпособУдержанияИзлишнеНачисленныхОтпускных = ПредопределенноеЗначение("Перечисление.СпособыУдержанияИзлишнеНачисленныхОтпускных.СторнированиеРанееНачисленныхСумм")
				И Объект.ПризнакКомпенсацииУдержанияОтпуска = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДнейКомпенсацииУдержанияОтпуска", "АвтоОтметкаНезаполненного", АвтоОтметкаНезаполненного); 
	Если Не АвтоОтметкаНезаполненного Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДнейКомпенсацииУдержанияОтпуска", "ОтметкаНезаполненного", Ложь); 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПерерасчетов()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ПерерасчетыДоступны = ИсправлениеДокументовРасчетЗарплатыКлиентСервер.ПерерасчетыДоступны(ЭтаФорма,,"ДатаУвольнения");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НачисленияПерерасчет", 	"Видимость", ПерерасчетыДоступны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПособияПерерасчет", 	"Видимость", ПерерасчетыДоступны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПерерасчетГруппа", 		"Видимость", ПерерасчетыДоступны);
	
	ИсправлениеДокументовРасчетЗарплатыКлиентСервер.УстановитьДоначислениеПриИсправлении(ЭтаФорма, ПерерасчетыДоступны);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипЗначенияВидаРасчета(Объект, ИмяПоляПризнака = "ПризнакКомпенсацииУдержанияОтпуска", ИмяПоляВидРасчета = "ВидРасчетаКомпенсацииУдержанияОтпуска")
	
	Если Объект[ИмяПоляПризнака] = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные") Тогда
		Если ТипЗнч(Объект[ИмяПоляВидРасчета]) <> Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
			Объект[ИмяПоляВидРасчета] = ПредопределенноеЗначение("ПланВидовРасчета.Начисления.ПустаяСсылка");
		КонецЕсли;
	Иначе 	
		Если ТипЗнч(Объект[ИмяПоляВидРасчета]) <> Тип("ПланВидовРасчетаСсылка.Удержания") Тогда
			Объект[ИмяПоляВидРасчета]  = ПредопределенноеЗначение("ПланВидовРасчета.Удержания.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьТипОснованияУвольнения()
	
	ОграничениеТипа = ОграничениеТипаОснованияУвольнения(Объект.ВидДоговора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "ОснованиеУвольнения", "ОграничениеТипа", ОграничениеТипа);
	
КонецПроцедуры

&НаСервере
Функция ОграничениеТипаОснованияУвольнения(ВидДоговора)
	
	ТипОснования = ТипОснованияУвольнения(ВидДоговора);
	
	ОграничениеТипа = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипОснования));
	
	Возврат ОграничениеТипа;
	
КонецФункции

&НаСервере
Функция ТипОснованияУвольнения(ВидДоговора)
	
	ТипОснования = Тип("СправочникСсылка.ОснованияУвольнения");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		ТипОснования = Модуль.ТипОснованияУвольнения(ВидДоговора);
	КонецЕсли;
	
	Возврат ТипОснования;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка = Истина)

	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(ЭтаФорма, ОписаниеТаблицы, ВыбраннаяСтрока, Объект.ПериодРегистрации);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаСервере
Процедура УстановитьСвойствоДокументРассчитан()
	
	Если ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда 
		Объект.ДокументРассчитан = Истина;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеТаблицы = Новый Массив;
	ПроверяемыеТаблицы.Добавить("Начисления");
	ПроверяемыеТаблицы.Добавить("НачисленияПерерасчет");
	
	ПроверяемыеНачисления = Новый Массив;
	
	Для каждого ПроверяемаяТаблица Из ПроверяемыеТаблицы Цикл
		НачисленияДокумента = Новый Массив;
		Для каждого Начисление Из Форма.Объект[ПроверяемаяТаблица] Цикл
			НачисленияДокумента.Добавить(Начисление.Начисление);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеНачисления, НачисленияДокумента, Истина);
	КонецЦикла;
	
	АвтоОтметкаНезаполненного = ДатаВыплатыОбязательнаКЗаполнению(Форма.Объект.ПорядокВыплаты, ПроверяемыеНачисления);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПланируемаяДатаВыплаты", "АвтоОтметкаНезаполненного", АвтоОтметкаНезаполненного); 
	Если Не АвтоОтметкаНезаполненного Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПланируемаяДатаВыплаты", "ОтметкаНезаполненного", Ложь); 
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаВыплатыОбязательнаКЗаполнению(Знач ПорядокВыплаты, Знач ПроверяемыеНачисления)
	
	УстановитьПривилегированныйРежим(Истина);	
	Возврат УчетНДФЛРасширенный.ДатаВыплатыОбязательнаКЗаполнению(ПорядокВыплаты, ПроверяемыеНачисления);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьРасчетныхПолей()
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("Результаты");
	ИменаЭлементов.Добавить("НачисленияУдержанияСтраница");
	ИменаЭлементов.Добавить("ВидРасчетаКомпенсацииУдержанияОсновногоОтпуска");
	ИменаЭлементов.Добавить("ВыходноеПособие");
	ИменаЭлементов.Добавить("ГруппаРасчетДенежногоСодержания");
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеПолейМногофункциональныхДокументов(ЭтаФорма, ИменаЭлементов);
	
	Если ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
		УстановитьВидимостьПерерасчетов();
		УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, Объект.ПериодРегистрации);
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.НачисленияПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.НачисленияПерерасчетПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.ПособияПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.ПособияПерерасчетПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
		ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "Результаты", "ТолькоПросмотр", Истина);
		ОтражениеЗарплатыВБухучетеРасширенный.ОбъектПриЧтенииНаСервереПроцентЕНВД(ЭтаФорма, Объект.Организация, Объект.ПериодРегистрации, Истина, Ложь);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.УстановитьВидимостьГруппыЛьготы(Элементы, "ГруппаЛьготы");
			Модуль.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтотОбъект, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "ГруппаЛьготы", "Видимость", Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПорядокВыплаты", "Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСуммированногоУчета()

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаСуммированныйУчет",
		"Видимость",
		ИспользоватьОплатуПереработокСуммированногоУчета);
			
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРегистрацииНачислений()
	
	ПраваНаДокумент = ЗарплатаКадрыРасширенный.ПраваНаМногофункциональныйДокумент(Объект);
	РегистрацияНачисленийДоступна = ПраваНаДокумент.ПолныеПраваПоРолям;
	ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура(ПраваНаДокумент.ОграниченияНаУровнеЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей()
	
	БылиОграничения = ОграниченияНаУровнеЗаписей;
	УстановитьДоступностьРегистрацииНачислений();
	
	Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений
		Или БылиОграничения.ИзменениеБезОграничений <> ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений
		Или БылиОграничения.ИзменениеКадровыхДанных <> ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных Тогда 
		
		Объект.ДокументРассчитан = ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
		Объект.Рассчитал = Неопределено;
		ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
		
		УстановитьВидимостьРасчетныхПолей();
		
		Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
			ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НадписьДнейЧасовВыходногоПособия()
	Если Не ИспользуетсяСреднечасовойЗаработок Тогда
		НадписьДнейЧасовВыходногоПособия = НСтр("ru='дн.'");	
	Иначе
		НадписьДнейЧасовВыходногоПособия = НСтр("ru='час.'");	
	КонецЕсли; 
	Возврат НадписьДнейЧасовВыходногоПособия
КонецФункции	

&НаСервере
Процедура ОбновитьРабочийГодДополнительногоОтпуска(Строка)
	Если (ЗначениеЗаполнено(Строка.ВидОтпуска) И ЗначениеЗаполнено(Строка.ДнейКомпенсацииУдержания)) Тогда               
		
		СтруктураПараметров = ОстаткиОтпусков.ПараметрыПолученияРабочегоПериодаОтпуска();
		СтруктураПараметров.Сотрудник = Объект.Сотрудник;
		СтруктураПараметров.ТекущийРегистратор = СсылкаНаОбъект;
		СтруктураПараметров.ВидОтпуска = Строка.ВидОтпуска;
		СтруктураПараметров.ДатаНачала = Дата(1, 1, 1);
		СтруктураПараметров.ДатаОкончания = Дата(1, 1, 1);
		СтруктураПараметров.ДатаКомпенсации = Объект.ДатаУвольнения;
		СтруктураПараметров.КоличествоДнейКомпенсации = Строка.ДнейКомпенсацииУдержания;
		ПериодДополнительногоОтпуска = ОстаткиОтпусков.РабочийПериодОтпуска(СтруктураПараметров);
		
		Строка.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодДополнительногоОтпуска.РабочийГодС;
		Строка.КонецПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодДополнительногоОтпуска.РабочийГодПо;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПорядокВыплатыПриИзмененииНаСервере()
	
	УстановитьПланируемуюДатуВыплаты();
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПланируемуюДатуВыплаты()
	
	Если ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты) Тогда
		Если ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент) Тогда
			Объект.ПланируемаяДатаВыплаты = НачалоДня(ТекущаяДатаСеанса() + 86400);
		Иначе
			Объект.ПланируемаяДатаВыплаты = Объект.ДатаУвольнения;
		КонецЕсли;
	Иначе
		РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоМежрасчетнаяВыплата(ПорядокВыплаты)
		
	Возврат РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
КонецФункции

&НаСервере
Функция КарточкаУчетаПоСтраховымВзносамНаСервере(ФизическоеЛицо)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(ДокументОбъект.Ссылка);
	КарточкаУчета.Добавить(УчетСтраховыхВзносов.КарточкаУчетаПоСтраховымВзносамПодробнее(ДокументОбъект, Модифицированность, ФизическоеЛицо, Объект.ПериодРегистрации));
	
	Возврат КарточкаУчета;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВторичныеДанныеСотрудникаВФорме(ЗаполнитьВидДоговора = Истина)
	
	ЗаполнитьОтпускВРабочихДняхПоДоговору();
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		СтрокаРеквизитов = "ДатаПриема";
		Если ЗаполнитьВидДоговора Тогда
			СтрокаРеквизитов = СтрокаРеквизитов + ",ВидДоговора";
		КонецЕсли;
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), СтрокаРеквизитов);
		Если ЗаполнитьВидДоговора Тогда
			Объект.ВидДоговора = КадровыеДанныеСотрудника[0].ВидДоговора;
			Объект.РасчетДенежногоСодержания = Ложь;
			ЗарплатаКадрыРасширенный.УстановитьВариантРасчетаДокументаПоСреднемуЗаработку(Объект,"ДатаУвольнения");
		КонецЕсли;
		ДатаПриемаНаРаботу = КадровыеДанныеСотрудника[0].ДатаПриема;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтпускВРабочихДняхПоДоговору()
	
	ОтпускВРабочихДняхПоДоговору = ОстаткиОтпусков.ОтпускСотрудникаВРабочихДняхПоДоговору(Объект.Сотрудник, Объект.ДатаУвольнения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницуОсновногоСреднегоЗаработка()
	
	Если ОтпускВРабочихДняхПоДоговору Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СреднийЗаработок", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СреднийЗаработокПоРабочимДням", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СреднийЗаработок", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СреднийЗаработокПоРабочимДням", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапрашиваемыеЗначенияДанныхФормыПоОрганизации()
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер", "Объект.ГлавныйБухгалтер");
	
	ЗапрашиваемыеЗначения.Вставить("Бухгалтер", "Объект.Бухгалтер");
	
	ЗапрашиваемыеЗначения.Вставить("РаботникКадровойСлужбы", "Объект.РаботникКадровойСлужбы");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРаботникаКадровойСлужбы", "Объект.ДолжностьРаботникаКадровойСлужбы");
	
	ЗапрашиваемыеЗначения.Вставить("Исполнитель", "Объект.Исполнитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьИсполнителя", "Объект.ДолжностьИсполнителя");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрашиваемыеЗначения = ЗапрашиваемыеЗначенияДанныхФормыПоОрганизации();
	ФиксированныеЗначения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация");
	
	ЗарплатаКадры.ЗаполнитьОтветственныхРаботниковОрганизацииВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения, ФиксированныеЗначения);
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеГруппыПодписантов()
	
	Если ПолучитьФункциональнуюОпциюФормы("РаботаВБюджетномУчреждении") Тогда
		ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.ГлавныйБухгалтер", "Объект.Бухгалтер", "Объект.Исполнитель");	
	Иначе
		ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.ГлавныйБухгалтер", "Объект.Бухгалтер", "Объект.РаботникКадровойСлужбы");
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗакрытьПослеПроведения(Результат, ДополнительныеПараметры) Экспорт
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СтруктураСОписаниемДокумента(РассчитатьНачисления = Ложь)
	
	Если РассчитатьНачисления Тогда
		РассчитатьНачисленияНаСервере();
	КонецЕсли;
	
	РеквизитыВДанные(Объект);

	ОписаниеДокумента = ЗарплатаКадрыРасширенныйВызовСервера.СтруктураПоМетаданным("Документ.Увольнение");
	ЗарплатаКадрыРасширенный.ЗаполнитьОбъектПоОбразцу(ОписаниеДокумента, Объект);
	
	ОписаниеДокумента.Вставить("ЗаполнениеВыполнено", ЗаполнениеВыполнено);
	
	Возврат ОписаниеДокумента;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемФормыРедактированияСтрокиДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеДокумента = СтруктураСОписаниемДокумента();
	Модифицированность = Ложь;
	Закрыть(ОписаниеДокумента);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьОстаткиОтгулов()

	ДниЧасыНакопленныхОтгулов = УчетРабочегоВремениРасширенный.ДниЧасыНакопленныхОтгулов(Объект.Организация, Объект.Сотрудник, Объект.ДатаУвольнения);
	
	Если ДниЧасыНакопленныхОтгулов.РасходДнейОтгула > 0 ИЛИ ДниЧасыНакопленныхОтгулов.РасходЧасовОтгула > 0 Тогда
		
		Если ДниЧасыНакопленныхОтгулов.РасходДнейОтгула > 0 И ДниЧасыНакопленныхОтгулов.РасходЧасовОтгула > 0 Тогда
			НадписьОстаткиОтгулов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У сотрудника остались неиспользованными %1 дн. и %2 ч. отгулов.'"),
				ДниЧасыНакопленныхОтгулов.РасходДнейОтгула,
				ДниЧасыНакопленныхОтгулов.РасходЧасовОтгула);
		ИначеЕсли ДниЧасыНакопленныхОтгулов.РасходДнейОтгула > 0 Тогда
			НадписьОстаткиОтгулов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У сотрудника остались неиспользованными %1 дн. отгулов.'"),
				ДниЧасыНакопленныхОтгулов.РасходДнейОтгула);
		Иначе
			НадписьОстаткиОтгулов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У сотрудника остались неиспользованными %1 ч. отгулов.'"),
				ДниЧасыНакопленныхОтгулов.РасходЧасовОтгула);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НадписьОстаткиОтгулов",
			"Видимость",
			Истина);
			
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НадписьОстаткиОтгулов",
			"Видимость",
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	Если РегистрацияНачисленийДоступна Тогда
		РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.УстановитьРежимОтображенияПодробноИзНастройки(ЭтотОбъект, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна));
		КонецЕсли;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Модуль.ПриЗавершенииИнициализацииФормыДокументаОплатыТруда(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБухучетРезультатовРасчетаНаСервере(ИсходныеДанные)
	
	ПериодЗаполнения = ПериодЗаполненияДокумента();
	Сотрудники = СотрудникиДокумента();
	МенеджерРасчета = ПроинициализированныйМенеджерРасчета(ПериодЗаполнения, Сотрудники);
	ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета);
	
	ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета);
	МенеджерРасчета.НастройкиБухучета.ПроверятьНеобходимостьПересчетаНДФЛ = МенеджерРасчета.НастройкиРасчета.РассчитыватьНДФЛ;
	МенеджерРасчета.ЗаполнитьНастройкиОбновленияБухучета(ИсходныеДанные);
	МенеджерРасчета.ОбновитьБухучетРезультатовРасчета();
	РасчетЗарплатыВДанныеФормы(МенеджерРасчета.Зарплата);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна));
	ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна));
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
	РасчетЗарплатыРасширенныйФормы.УстановитьТекущуюСтрокуТаблицыФормы(ЭтаФорма, ИсходныеДанные.ИмяИсходнойТаблицы, ИсходныеДанные.НомерСтрокиИсходнойТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПересечениеПериодовОтсутствияНаКлиенте(Отказ, ПараметрыЗаписи, ЗакрытьПослеЗаписи)
	
	Если ПараметрыЗаписи <> Неопределено И ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьПересечениеПериодовОтсутствияНаСервере(СсылкаНаОбъект, СсылкаНаИсправленныйДокумент, Объект.Сотрудник, Объект.ДатаУвольнения);
	
	ДанныеСотрудника = РезультатПроверки.ДанныеСотрудников.Получить(Объект.Сотрудник);
	Если ДанныеСотрудника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПроверки.Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Сотрудник был уволен %1 (%2).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеСотрудника.ПредставлениеПериода, ДанныеСотрудника.Регистратор);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", ЗакрытьПослеЗаписи);
	
	ТекстВопроса = НСтр("ru = 'На период %1 сотруднику зарегистрировано отсутствие документом %2. Провести документ?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеСотрудника.ПредставлениеПериода, ДанныеСотрудника.Регистратор);
		
	Оповещение = Новый ОписаниеОповещения("ПроверитьПересечениеПериодовОтсутствияНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПересечениеПериодовОтсутствияНаКлиентеЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
	
	Если ПараметрыЗаписи = Неопределено Тогда 
		ОписаниеДокумента = СтруктураСОписаниемДокумента();
		Модифицированность = Ложь;
		Закрыть(ОписаниеДокумента);
		Возврат;
	КонецЕсли;
	
	КадровыйУчетРасширенныйКлиент.ЗаписьВФормеДокументаУвольнение(ЭтаФорма, ПараметрыЗаписи, ДополнительныеПараметры.ЗакрытьПослеЗаписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПересечениеПериодовОтсутствияНаСервере(СсылкаНаОбъект, СсылкаНаИсправленныйДокумент, Сотрудник, ДатаУвольнения)
	
	ИсходныеДанные = СостоянияСотрудников.ПустаяТаблицаДанныхСостоянийСотрудника();
	
	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.Увольнение;
	НоваяСтрока.Начало = ДатаУвольнения + 86400;
	
	Возврат СостоянияСотрудников.ПроверитьПересечениеПериодовОтсутствия(ИсходныеДанные, СсылкаНаОбъект, СсылкаНаИсправленныйДокумент);
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ЗакрытьПослеЗаписи, ПараметрыЗаписи)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", ЗакрытьПослеЗаписи);
	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьРасчетСотрудникаПередЗаписьюДокумента(
		ЭтаФорма, "ЗаписатьНаКлиентеЗавершение", ДополнительныеПараметры, РегистрацияНачисленийДоступна);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
		ЗакрытьПослеЗаписи = ДополнительныеПараметры.ЗакрытьПослеЗаписи;
		
		Отказ = Ложь;
		ПроверитьПересечениеПериодовОтсутствияНаКлиенте(Отказ, ПараметрыЗаписи, ЗакрытьПослеЗаписи);
		
		Если Отказ Тогда 
			Возврат;
		КонецЕсли;
		
		Если РедактированиеСтрокиСписочногоДокумента Тогда
			ЗавершитьРедактированиеСтрокиДокумента();
		Иначе
			КадровыйУчетРасширенныйКлиент.ЗаписьВФормеДокументаУвольнение(ЭтаФорма, ПараметрыЗаписи, ЗакрытьПослеЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьМесяцНачалаРасчетов()
	
	Если Не ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент) Тогда
		Объект.МесяцНачалаРасчетов = '00010101';
	КонецЕсли;
	
КонецПроцедуры


#Область ОбработчикиСобытийЭлементовТаблицыФормыУправленческиеНачисления

&НаКлиенте
Процедура УправленческиеНачисленияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "УправленческиеНачисления", Истина);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "УправленческиеНачисления", Элементы.УправленческиеНачисления.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
			ИзмененныеДанные,
			"Начисления",
			Объект.ФизическоеЛицо,
			ТекущиеДанные.Сотрудник,
			ТекущиеДанные.Начисление);
	
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриОкончанииРедактированияСтрокиНачисленияЗарплаты(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.УправленческиеНачисления.ТекущиеДанные.Сотрудник;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		Объект.ФизическоеЛицо,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПослеУдаления(Элемент) 
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПослеУдаленияСтрокиНачисленияЗарплаты(ЭтаФорма, СотрудникУдаляемойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияНачислениеПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриИзмененииНачисленияСтрокиНачисленияЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияДатаНачалаПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриИзмененииДатыНачалаСтрокиНачисленияЗарплаты(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияДатаОкончанияПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриИзмененииДатыОкончанияСтрокиНачисленияЗарплаты(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.УправленческиеНачисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.УправленческиеНачисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.УправленческиеНачисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УправленческиеНачисленияПодробно(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриНажатииКнопкиПоказатьПодробностиРасчета(ЭтаФорма, Элементы.УправленческиеНачисленияПодробно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УправленческиеНачисленияОтменитьИсправление(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправленческаяЗарплатаКлиент");
		Модуль.ПриОтменеИсправленияНачисленияЗарплаты(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВосстановлениеВДолжности()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументУвольнения", СсылкаНаОбъект);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВосстановлениеВДолжности.Ссылка,
		|	ВосстановлениеВДолжности.ОснованиеВосстановленияВДолжности,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВосстановлениеВДолжности.Ссылка)
		|ИЗ
		|	Документ.ВосстановлениеВДолжности КАК ВосстановлениеВДолжности
		|ГДЕ
		|	ВосстановлениеВДолжности.ДокументУвольнения = &ДокументУвольнения
		|	И ВосстановлениеВДолжности.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВосстановлениеВДолжности.Дата";
		
	Если РедактированиеСтрокиСписочногоДокумента Тогда
		
		Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВосстановлениеВДолжности.Проведен",
			"И ВосстановлениеВДолжности.Проведен
			|	И ВосстановлениеВДолжности.Сотрудник = &Сотрудник");
		
	КонецЕсли;
	
	ВидимостьГруппыВосстановлениеВДолжности = Ложь;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТолькоПросмотр = Истина;
		ВидимостьГруппыВосстановлениеВДолжности = Истина;
		ВосстановлениеВДолжности = Выборка.Ссылка;
		
		ТекстЗаголовка = Новый ФорматированнаяСтрока(
			НСтр("ru='Действие приказа отменено в связи с'") + " ",
			Выборка.ОснованиеВосстановленияВДолжности + ", " + НСтр("ru='см'") + ". ",
			Новый ФорматированнаяСтрока(Выборка.СсылкаПредставление, , , , "ПоказатьВосстановлениеВДолжности"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДекорацияВосстановлениеВДолжности",
			"Заголовок",
			ТекстЗаголовка);
		
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаВосстановлениеВДолжности",
		"Видимость",
		ВидимостьГруппыВосстановлениеВДолжности);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиПереработокСуммированногоУчета(МенеджерРасчета)
	
	Если Не ИспользоватьОплатуПереработокСуммированногоУчета Тогда
		Возврат;
	КонецЕсли;
	
	ПереработаноВПределах2Часов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПереработаноПоСуммированномуУчетуВПределах2Часов");
	Переработано = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПереработаноПоСуммированномуУчету");
	Если ПереработаноВПределах2Часов = Неопределено Или Переработано = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Сверхурочно1_5 > 0 Тогда
		МенеджерРасчета.ДобавитьЗначениеОпределяющегоПоказателя(
			Объект.Сотрудник, 
			Объект.Организация, 
			ПереработаноВПределах2Часов, 
			Объект.Сверхурочно1_5, 
			НачалоМесяца(Объект.ДатаУвольнения));
	КонецЕсли;
	
	Если Объект.Сверхурочно1_5 + Объект.Сверхурочно2 > 0 Тогда
		МенеджерРасчета.ДобавитьЗначениеОпределяющегоПоказателя(
			Объект.Сотрудник, 
			Объект.Организация, 
			Переработано, 
			Объект.Сверхурочно1_5 + Объект.Сверхурочно2, 
			НачалоМесяца(Объект.ДатаУвольнения));
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура РасчетДенежногоСодержанияПриИзмененииНаСервере()
	
	ОчиститьДанныеСреднегоЗаработка();
	ОчиститьНачисления();
	ОбновитьФормуПоВидуДоговора();
	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетДенежногоСодержанияПриИзменении(Элемент)
	
	ОбновитьРасчетДенежногоСодержания = Истина;
	РасчетДенежногоСодержанияПриИзмененииНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "АНАЛИЗ ТЕКУЧЕСТИ ПЕРСОНАЛА"

&НаКлиенте
Процедура ПричинаУвольненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") И НЕ Объект.Сотрудник.Пустая() Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("АнализТекучестиПерсоналаКлиент");
		Модуль.ОткрытьФормуВводаПричинУвольнения(ЭтаФорма, Объект.Сотрудник);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьПричинуУвольнения()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АнализТекучестиПерсонала");
		Модуль.ОбновитьПричинуУвольнения(ЭтаФорма, Объект.Сотрудник);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПричиныУвольнения()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АнализТекучестиПерсонала");
		Модуль.ОбновитьВидимостьПричиныУвольнения(ЭтаФорма, Объект.Сотрудник);
		Модуль.ОбновитьПричинуУвольнения(ЭтаФорма, Объект.Сотрудник);
	Иначе
		Элементы.ПричинаУвольнения.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПричинаУвольненияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Функция ПроинициализированныйМенеджерРасчета(ПериодЗаполнения, Сотрудники)
	
	Если ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент) Тогда
		МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(Объект.ПериодРегистрации, Объект.Организация);
	Иначе
		МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчетаПоПериоду(ПериодЗаполнения, Объект.Организация);
	КонецЕсли;
	
	МенеджерРасчета.НастройкиРасчета.Сотрудники = Сотрудники;
	Для Каждого Сотрудник Из Сотрудники Цикл
		МенеджерРасчета.ДобавитьДатуЗавершенияРаботы(Сотрудник, Объект.ДатаУвольнения);
	КонецЦикла;
	
	Возврат МенеджерРасчета;
	
КонецФункции

&НаСервере
Функция ПериодЗаполненияДокумента()
	
	ПериодЗаполнения = Новый СтандартныйПериод;
	ПериодЗаполнения.ДатаНачала = Объект.МесяцНачалаРасчетов;
	ПериодЗаполнения.ДатаОкончания = КонецДня(Объект.ДатаУвольнения);
	
	Возврат ПериодЗаполнения;
	
КонецФункции

&НаСервере
Функция СотрудникиДокумента()
	
	Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") И Сотрудники <> Неопределено Тогда 
		
		ПараметрыПолученияПодработок = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(Сотрудники, , КонецМесяца(Объект.ПериодРегистрации));
		МассивПодработок = КадровыйУчетРасширенный.ПодработкиСотрудников(Истина, ПараметрыПолученияПодработок);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, МассивПодработок, Истина);
		
	КонецЕсли;
	
	Возврат Сотрудники;
	
КонецФункции

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;

#КонецОбласти


#КонецОбласти

