#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расчет среднего заработка
	УчетПособийСоциальногоСтрахованияРасширенный.ДобавитьКомандуПечатиРасчетаСреднегоЗаработка(КомандыПечати, "Документ.БольничныйЛист");
	
	Если Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеРабочегоВремениНачисленнойЗарплаты,ЧтениеРабочегоВремениНачисленнойЗарплаты", , Ложь) Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик     = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
			КомандаПечати.МенеджерПечати = "Документ.БольничныйЛист";
			КомандаПечати.Идентификатор  = "ПФ_MXL_РасчетПособия";
			КомандаПечати.Представление  = НСтр("ru = 'Расчет пособия к листку нетрудоспособности'");
			КомандаПечати.Порядок        = 1;
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоплатуЗаДниБолезни") Тогда
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик     = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
			КомандаПечати.МенеджерПечати = "Документ.БольничныйЛист";
			КомандаПечати.Идентификатор  = "ПФ_MXL_ДоплатаЗаДниНетрудоспособности";
			КомандаПечати.Представление  = НСтр("ru = 'Приказ о доплате за дни болезни'");
			КомандаПечати.Порядок        = 10;
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Подробный расчет начислений.
	РасчетЗарплатыРасширенный.ДобавитьКомандуПечатиПодробногоРасчетаНачислений(КомандыПечати);
	
	// Приказ о предоставлении отпуска.
	Если КадровыйУчетРасширенный.НастройкиКадровогоУчета().ПечататьТ6ДляОтпусковПоБеременностиИРодам Тогда
		КадровыйУчетРасширенный.ДобавитьКомандуПечатиПриказаОПредоставленииОтпуска(КомандыПечати);
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  (входные)
//    МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - дополнительные настройки печати;
//  (выходные)
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//   ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РасчетПособия") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_РасчетПособия",
			НСтр("ru = 'Расчет пособия к листку нетрудоспособности'"),
			ТабличныйДокументРасчетаПособия(УправлениеПечатью.МакетПечатнойФормы("Документ.БольничныйЛист.ПФ_MXL_РасчетПособия"), МассивОбъектов, ОбъектыПечати),
			,
			"Документ.БольничныйЛист.ПФ_MXL_РасчетПособия");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ДоплатаЗаДниНетрудоспособности") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ДоплатаЗаДниНетрудоспособности",
			НСтр("ru = 'Доплата за дни нетрудоспособности'"),
			ТабличныйДокументДоплатаЗаДниНетрудоспособности(УправлениеПечатью.МакетПечатнойФормы("Документ.БольничныйЛист.ПФ_MXL_ДоплатаЗаДниНетрудоспособности"), МассивОбъектов, ОбъектыПечати),
			,
			"Документ.БольничныйЛист.ПФ_MXL_ДоплатаЗаДниНетрудоспособности");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка") Тогда
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработкаФСС(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработкаФСС.ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати);
		Если ТабличныйДокумент <> Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"РасчетСреднегоЗаработка",
				НСтр("ru = 'Расчет среднего заработка'"),
				ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// Получает данные для заполнения документа по первичному листку нетрудоспособности.
//
// Параметры:
//  ПервичныйБольничныйЛист - ДокументСсылка.БольничныйЛист
//                 первичный листок нетрудоспособности.
//  ИсключаемыеДокументы - массив из ДокументСсылка.БольничныйЛист
//                 см. описание метода ПоследнийДеньБолезни.
//
// Возвращаемое значение:
//   Дата - последний день болезни, зарегистрированной по переданному б/л.
//
Функция ДанныеПервичногоБольничногоЛиста(ПервичныйБольничныйЛист, ИсключаемыеДокументы = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА БольничныйЛист.ЯвляетсяПродолжениемБолезни
	|			ТОГДА БольничныйЛист.ПервичныйБольничныйЛист
	|		ИНАЧЕ БольничныйЛист.Ссылка
	|	КОНЕЦ КАК ПервичныйБольничныйЛист,
	|	ИСТИНА КАК ЯвляетсяПродолжениемБолезни,
	|	БольничныйЛист.Организация,
	|	БольничныйЛист.НомерЛисткаНетрудоспособности КАК НомерПервичногоЛисткаНетрудоспособности,
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.ДатаНарушенияРежима,
	|	БольничныйЛист.ДоплачиватьДоСреднегоЗаработка,
	|	БольничныйЛист.СтажЛет,
	|	БольничныйЛист.СтажМесяцев,
	|	БольничныйЛист.СтажРасширенныйЛет,
	|	БольничныйЛист.СтажРасширенныйМесяцев,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаНачало,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	БольничныйЛист.ФиксПериодРасчетаСреднегоЗаработка,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	БольничныйЛист.ПроцентОплатыБезЛьгот,
	|	БольничныйЛист.ОграничениеПособияБезЛьгот,
	|	БольничныйЛист.ПрименятьЛьготыПриНачисленииПособия,
	|	БольничныйЛист.ФинансированиеФедеральнымБюджетом,
	|	БольничныйЛист.ПричинаНетрудоспособности,
	|	БольничныйЛист.ДатаНачалаСобытия,
	|	БольничныйЛист.ДатаНачалаПоловиннойОплаты,
	|	БольничныйЛист.ПроцентОплаты,
	|	БольничныйЛист.ОграничениеПособия,
	|	БольничныйЛист.УчитыватьЗаработокПредыдущихСтрахователей,
	|	БольничныйЛист.СлучайУходаЗаБольнымРебенком,
	|	БольничныйЛист.НазначитьПособие,
	|	БольничныйЛист.РасчетПоПравилам2010Года,
	|	БольничныйЛист.ВидОплатыПособия,
	|	БольничныйЛист.ВидОплатыЗаСчетРаботодателя,
	|	БольничныйЛист.ВидНеоплачиваемогоВремени,
	|	БольничныйЛист.ВидРасчетаДоплаты,
	|	БольничныйЛист.ПроцентДоплатыЗаДниНетрудоспособности,
	|	БольничныйЛист.ДоляНеполногоВремени,
	|	БольничныйЛист.РайонныйКоэффициентРФнаНачалоСобытия,
	|	БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход1,
	|	БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход2
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ПервичныйБольничныйЛист);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДанныеПервичногоДокумента = Новый Структура;
	Для Каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		ДанныеПервичногоДокумента.Вставить(КолонкаРезультата.Имя, Выборка[КолонкаРезультата.Имя]);
	КонецЦикла;
	
	ДатаНачала = ПоследнийДеньБолезни(ПервичныйБольничныйЛист, ИсключаемыеДокументы) + 86400;
	ДанныеПервичногоДокумента.Вставить("ДатаНачала", ДатаНачала);
	ДанныеПервичногоДокумента.Вставить("ДатаНачалаОплаты", ДатаНачала);
	
	Возврат ДанныеПервичногоДокумента;
	
КонецФункции

// Определяет последний день болезни, оформленной несколькими листками нетрудоспособности.
//
// Параметры:
//  ПервичныйБольничныйЛист - ДокументСсылка.БольничныйЛист
//                 первичный листок нетрудоспособности.
//  ИсключаемыеДокументы - массив из ДокументСсылка.БольничныйЛист
//                 массив листков нетрудоспособности, которые не нужно учитывать при определении последнего дня болезни.
//
// Возвращаемое значение:
//   Дата - последний день болезни, зарегистрированной по переданному б/л.
//
Функция ПоследнийДеньБолезни(ПервичныйБольничныйЛист, ИсключаемыеДокументы  = Неопределено) Экспорт

	ДатаОкончанияБолезни = '00010101';
	
	Если Не ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		Возврат	ДатаОкончанияБолезни;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка = &ПервичныйБольничныйЛист
	|	И БольничныйЛист.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛист.ДатаОкончания
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.ПервичныйБольничныйЛист = &ПервичныйБольничныйЛист
	|	И НЕ БольничныйЛист.Ссылка В (&ИсключаемыеДокументы)
	|	И БольничныйЛист.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОкончания УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПервичныйБольничныйЛист", ПервичныйБольничныйЛист);
	Запрос.УстановитьПараметр("ИсключаемыеДокументы", ?(ИсключаемыеДокументы = Неопределено, Новый Массив, ИсключаемыеДокументы));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаОкончанияБолезни = Выборка.ДатаОкончания;
	КонецЕсли;

	Возврат	ДатаОкончанияБолезни;
	
КонецФункции

// Определяет максимальное оплачиваемое количество дней нетрудоспособности для указанной причины.
//
// Параметры:
//  ПричинаНетрудоспособности	 - Перечисления.ПричиныНетрудоспособности
//  СлучайУходаЗаБольнымРебенком - Перечисления.СлучаиУходаЗаБольнымиДетьми.
// 
// Возвращаемое значение:
//  МаксимальноеКоличествоОплачиваемыхДней - Число.
//
Функция МаксимальноеКоличествоОплачиваемыхДнейПоПричинеНетрудоспособности(ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком) Экспорт
	
	МаксимальноеКоличествоОплачиваемыхДней = Неопределено;
	
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании Тогда
		МаксимальноеКоличествоОплачиваемыхДней = 24; // П.2 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ.
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым Тогда
		МаксимальноеКоличествоОплачиваемыхДней = 7; // Пп. 6 п.5 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ.
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно
		Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре Тогда
		МаксимальноеКоличествоОплачиваемыхДней = 15; // Пп. 2 п.5 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ.
	КонецЕсли;
	
	Возврат МаксимальноеКоличествоОплачиваемыхДней;
	
КонецФункции

// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.БольничныйЛист - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.БольничныйЛист - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа.
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(РежимПроведения, ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, Объект, Отказ);
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);
	ДанныеДляПроведения = ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета);
	
	ИсправлениеДокументовЗарплатаКадры.ПриПроведенииИсправления(ДокументСсылка, Движения, РежимПроведения, Отказ, РеквизитыДляПроведения, СтруктураВидовУчета, Объект);
	
	Если РеквизитыДляПроведения.ДокументРассчитан Тогда
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
			РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
			РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);
			РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Удержания, ДанныеДляПроведения.ПоказателиУдержаний);
			ИсполнительныеЛисты.СформироватьУдержанияПоИсполнительнымДокументам(Движения, ДанныеДляПроведения.УдержанияПоИсполнительнымДокументам);
			РасчетЗарплатыРасширенный.СформироватьДвиженияУдержанийДоПределаПоСотрудникам(Движения, Отказ, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.УдержанияДоПределаПоСотрудникам);
			РасчетЗарплатыРасширенный.СформироватьЗадолженностьПоУдержаниямФизическихЛиц(Движения, ДанныеДляПроведения.ЗадолженностьПоУдержаниям);
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
				Модуль.СформироватьДвиженияНачислений(Движения, Отказ, ДанныеДляПроведения, РеквизитыДляПроведения.ПериодРегистрации);
			КонецЕсли;
			
			ПроверитьПересечениеФактическогоПериодаДействия(ДокументСсылка, Отказ);
			
#Область РегистрацияДоходовВУчетеНДФЛ
			
			// - Регистрация бухучета начислений и удержаний, выполняется до вызова регистрации доходов в учете НДФЛ.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
					Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
					ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, Неопределено,
					РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(РеквизитыДляПроведения.ПорядокВыплаты));
					
			// - Регистрация бухучета займов.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
						Неопределено, ДанныеДляПроведения.УдержанияЗаймов, Неопределено,
						РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(РеквизитыДляПроведения.ПорядокВыплаты));
					
			// - Регистрация материальной выгоды в учете НДФЛ.
			ДатаОперацииПоНалогам = НачалоДня(РеквизитыДляПроведения.ДатаНачалаСобытия) - 1;
			УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.МатериальнаяВыгода, Ложь, , ДокументСсылка, РеквизитыДляПроведения.ДоходПолученНаТерриторииРФ);
			
			УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, Неопределено, Неопределено, РеквизитыДляПроведения.ПорядокВыплаты);
			УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, РеквизитыДляПроведения.ПорядокВыплаты, Истина);
			УчетНДФЛРасширенный.ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(
				РеквизитыДляПроведения.Ссылка, Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты, РеквизитыДляПроведения.ПланируемаяДатаВыплаты, ДанныеДляПроведения, Истина, Истина, РеквизитыДляПроведения.ДоходПолученНаТерриторииРФ);
			РасчетЗарплатыРасширенный.СформироватьДвиженияКорректировкиВыплатыПоВременнойТаблицеНачислений(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты, ДанныеДляПроведения, Истина, Истина);
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
				Модуль.ЗарегистрироватьНачисленияУдержания(Движения, Отказ, ДанныеДляПроведения, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты);
				Модуль.ЗарегистрироватьОтработанноеВремя(Движения, Отказ, ДанныеДляПроведения, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты);
			КонецЕсли;
			
#КонецОбласти

			// - Регистрация начислений в доходах для страховых взносов.
			УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ложь, Истина, РеквизитыДляПроведения.Ссылка);
			
			// - регистрация пособий
			УчетСтраховыхВзносов.СформироватьПособия(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.Пособия, Неопределено);
			
			// Займы
			// - взаиморасчеты по займам
			ЗаймыСотрудникам.ЗарегистрироватьВзаиморасчетыПоЗаймам(Движения, ДанныеДляПроведения.ВзаиморасчетыПоЗаймам, Отказ);
			
			// - Регистрация займов в учете заработной платы.
			УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьПогашениеЗаймов(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.УдержанияЗаймов, РеквизитыДляПроведения.ПорядокВыплаты);
						
			УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
			УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НалогНаМатериальнуюВыгоду, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам);
			УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду, ДанныеДляПроведения.МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПорядокВыплаты,,, Истина);
			
			// - Регистрация бухучета НДФЛ, выполняется после вызова регистрации доходов в учете НДФЛ.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
					Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
					Неопределено, Неопределено, ДанныеДляПроведения.НДФЛПоСотрудникам,
					РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(РеквизитыДляПроведения.ПорядокВыплаты));
					
			// - Регистрация бухучета займов.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
						Неопределено, Неопределено, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду,
						РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(РеквизитыДляПроведения.ПорядокВыплаты));
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
				
				Модуль.ЗарегистрироватьНачисленияСоставМесячногоДенежногоСодержания(Движения, Отказ, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.СоставМесячногоДенежногоСодержания);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
			// Корректировки данных для среднего заработка.
			ПараметрыКорректировок = УчетПособийСоциальногоСтрахованияРасширенный.ПараметрыЗаписиКорректировокСреднегоЗаработкаФСС();
			ЗаполнитьТаблицыКорректировок(РеквизитыДляПроведения.Ссылка, ПараметрыКорректировок);
			УчетПособийСоциальногоСтрахованияРасширенный.ЗаписатьКорректировкиСреднегоЗаработкаФСС(
				РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.Сотрудник, РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаНачало, РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаОкончание, ПараметрыКорректировок);
			// Учет среднего заработка (регистрация начислений).
			УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(Движения, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		ПараметрыДвиженийОтпусков = ОстаткиОтпусков.ПараметрыДляСформироватьДвиженияФактическихОтпусков();
		ПараметрыДвиженийОтпусков.ДатаРегистрации = РеквизитыДляПроведения.Дата;
		ПараметрыДвиженийОтпусков.Начисления = ДанныеДляПроведения.Начисления;
		ПараметрыДвиженийОтпусков.ПериодНачисления = РеквизитыДляПроведения.ПериодРегистрации;
		ОстаткиОтпусков.СформироватьДвиженияФактическихОтпусков(Движения, Отказ, ПараметрыДвиженийОтпусков);
		
		СостоянияСотрудников.ЗарегистрироватьСостоянияСотрудников(Движения, РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения.ДанныеСостоянийСотрудников);
		УчетСтажаПФР.ЗарегистрироватьПериодыВУчетеСтажаПФР(Движения, ДанныеДляРегистрацииВУчетаСтажаПФР(РеквизитыДляПроведения.Ссылка)[РеквизитыДляПроведения.Ссылка]);
		
		Если РеквизитыДляПроведения.ОсвобождатьСтавку Тогда
			КадровыйУчетРасширенный.ОсвободитьСтавкуВременно(Движения, ДанныеДляПроведения.ПериодыОсвобожденияСтавки);
		КонецЕсли;
		
		УчетСреднегоЗаработка.УдалитьПричиныПерерасчетов(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		ПерерасчетЗарплаты.УдалениеПерерасчетовПоДополнительнымПараметрам(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
		// Реестр отпусков
		Если РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			КадровыйУчетРасширенный.ЗарегистрироватьВРеестреОтпусков(Движения, ДанныеДляПроведения.ДанныеРеестраОтпусков, Отказ);
		КонецЕсли;
	
		Если РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком
			Или РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым Тогда
			УчетПособийСоциальногоСтрахованияРасширенный.СформироватьДвиженияПериодовУходаЗаБольнымиРодственниками(Движения, ДанныеДляПроведения.ПериодыУходаЗаРодственниками);
		КонецЕсли;
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ВыполнитьЗапланированныеКорректировкиДвижений(Движения);
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, СтруктураВидовУчета);
	
КонецПроцедуры

// Сторнирует документ по учетам. Используется подсистемой исправления документов.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений исправляющего документа в которую будут добавлены сторно стоки.
//  Регистратор				 - ДокументСсылка				 - Документ регистратор исправления (документ исправление).
//  ИсправленныйДокумент	 - ДокументСсылка				 - Исправленный документ движения которого будут сторнированы.
//  СтруктураВидовУчета		 - Структура					 - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//  					Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//  ДополнительныеПараметры	 - Структура					 - Структура со свойствами:
//  					* ИсправлениеВТекущемПериоде - Булево - Истина когда исправление выполняется в периоде регистрации исправленного документа.
//						* ОтменаДокумента - Булево - Истина когда исправление вызвано документом СторнированиеНачислений.
//  					* ПериодРегистрации	- Дата - Период регистрации документа регистратора исправления.
// 
// Возвращаемое значение:
//  Булево - "Истина" если сторнирование выполнено этой функцией, "Ложь" если специальной процедуры не предусмотрено.
//
Функция СторнироватьПоУчетам(Движения, Регистратор, ИсправленныйДокумент, СтруктураВидовУчета, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ОтменаДокумента Или ДополнительныеПараметры.ИсправлениеВТекущемПериоде Тогда
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
			УчетСреднегоЗаработка.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		КонецЕсли;
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
			
			УчетСтраховыхВзносовРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ДополнительныеПараметры);
			УчетНДФЛРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ДополнительныеПараметры);
			РасчетЗарплатыРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
			ОтражениеЗарплатыВБухучетеРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
			УчетНачисленнойЗарплатыРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
			УчетПособийСоциальногоСтрахованияРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
			УправлениеШтатнымРасписанием.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
			
			ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияБезСпецификиУчетов(Движения, ИсправленныйДокумент,
				ДополнительныеПараметры.ИсправлениеВТекущемПериоде);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.БольничныйЛист;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическоеЛицоВШапке(МетаданныеДокумента);
	
КонецФункции

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "Документ.БольничныйЛист";
	НовыеСведения.ПоляРегистрации = "Сотрудник,ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "Удержано,Показатели.Значение,ПримененныеВычетыНаДетейИИмущественные.РазмерВычета";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "Документ.БольничныйЛист";
	НовыеСведения.ПоляРегистрации = "Начисления.Сотрудник";
	НовыеСведения.ПоляДоступа     = "Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "Документ.БольничныйЛист";
	НовыеСведения.ПоляРегистрации = "НачисленияПерерасчет.Сотрудник";
	НовыеСведения.ПоляДоступа     = "НачисленияПерерасчет.Результат,НачисленияПерерасчет.РасчетнаяБазаЗаЕдиницуНормыВремени,НачисленияПерерасчет.СуммаВычета,НачисленияПерерасчет.РезультатВТомЧислеЗаСчетФБ";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "Документ.БольничныйЛист";
	НовыеСведения.ПоляРегистрации = "НДФЛ.ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "НДФЛ.Налог,НДФЛ.ЗачтеноАвансовыхПлатежей,НДФЛ.ПримененныйВычетЛичный,НДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату";
	НовыеСведения.ОбластьДанных   = "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "Документ.БольничныйЛист";
	НовыеСведения.ПоляРегистрации = "СреднийЗаработокДанныеСтрахователей.ФизическоеЛицо,СреднийЗаработокФСС.ФизическоеЛицо,Удержания.ФизическоеЛицо,РаспределениеРезультатовУдержаний.Сотрудник";
	НовыеСведения.ПоляДоступа     = "СреднийЗаработокДанныеСтрахователей.Сумма,СреднийЗаработокФСС.Сумма,Удержания.Результат,РаспределениеРезультатовНачислений.Результат,РаспределениеРезультатовУдержаний.Результат";
	НовыеСведения.ОбластьДанных   = "Доходы";
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
		КомандыСозданияДокументов, Метаданные.Документы.БольничныйЛист);
	
КонецФункции

Функция ВидыСтажаВЛисткеНетрудоспособности() Экспорт
	КатегорииСтажа = КатегорииСтажаВЛисткеНетрудоспособности();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыСтажа.Ссылка,
	|	ВидыСтажа.КатегорияСтажа
	|ИЗ
	|	Справочник.ВидыСтажа КАК ВидыСтажа
	|ГДЕ
	|	ВидыСтажа.КатегорияСтажа В(&КатегорииСтажа)";
	Запрос.УстановитьПараметр("КатегорииСтажа", КатегорииСтажа);
	Результат = Запрос.Выполнить();
	ВидыСтажа = Новый Массив;
	НеобязательныеВидыСтажа = Новый Соответствие;
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВидыСтажа.Добавить(Выборка.Ссылка);
			Если Выборка.КатегорияСтажа = Перечисления.КатегорииСтажа.РасширенныйСтраховой Тогда
				ЗаголовокФлажка = НСтр("ru = 'Требуется ввести стаж с учетом нестраховых периодов'");
				НеобязательныеВидыСтажа.Вставить(Выборка.Ссылка, ЗаголовокФлажка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("ВидыСтажа, НеобязательныеВидыСтажа", ВидыСтажа, НеобязательныеВидыСтажа);
КонецФункции

Функция КатегорииСтажаВЛисткеНетрудоспособности() Экспорт
	КатегорииСтажа = Новый Массив;
	КатегорииСтажа.Добавить(Перечисления.КатегорииСтажа.Страховой);
	КатегорииСтажа.Добавить(Перечисления.КатегорииСтажа.РасширенныйСтраховой);
	Возврат КатегорииСтажа;
КонецФункции

Процедура ЗаполнитьСведенияОПособиях(РеквизитыДляПроведения, ДанныеДляПроведения)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Ссылка,
	|	ТаблицаНачислений.Начисление,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости КАК ВидЗанятости,
	|	ЛОЖЬ КАК Сторно,
	|	ТаблицаНачислений.ОплаченоДней,
	|	ТаблицаНачислений.Результат,
	|	ТаблицаНачислений.РезультатВТомЧислеЗаСчетФБ
	|ПОМЕСТИТЬ ВТНачисленияДляУчетаПособий
	|ИЗ
	|	Документ.БольничныйЛист.Начисления КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаНачислений.Сторно
	|			ТОГДА ТаблицаНачислений.СторнируемыйДокумент
	|		ИНАЧЕ ТаблицаНачислений.Ссылка
	|	КОНЕЦ,
	|	ТаблицаНачислений.Начисление,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сторно,
	|	ТаблицаНачислений.ОплаченоДней,
	|	ТаблицаНачислений.Результат,
	|	ТаблицаНачислений.РезультатВТомЧислеЗаСчетФБ
	|ИЗ
	|	Документ.БольничныйЛист.НачисленияПерерасчет КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаНачислений.Сторно
	|			ТОГДА ТаблицаНачислений.СторнируемыйДокумент
	|		ИНАЧЕ ТаблицаНачислений.Ссылка
	|	КОНЕЦ,
	|	ТаблицаНачислений.Начисление,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сторно,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.БольничныйЛист.НачисленияПерерасчетНулевыеСторно КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.Выполнить();
	
	ПособиеПлатитУчастникПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации);

	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьСведенияОПособиях(ДанныеДляПроведения, ПособиеПлатитУчастникПилотногоПроекта);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСостоянийСотрудника(РеквизитыДляПроведения, ДанныеДляПроведения, ДругиеСотрудники) Экспорт
	
	ДанныеСостояний = СостоянияСотрудников.ПустаяТаблицаДанныхСостоянийСотрудника();
	Если РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		НоваяСтрока = ДанныеСостояний.Добавить();
		НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
		НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам;
		НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачала;
		НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончания;
	Иначе
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
			// Если расчет зарплаты отключен, то считаем весь период "оплаченной болезнью".
			НоваяСтрока = ДанныеСостояний.Добавить();
			НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
			НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.Болезнь;
			НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачала;
			НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончания;
		Иначе
			Если Не РеквизитыДляПроведения.НазначитьПособие Тогда
				// Весь период без оплаты
				НоваяСтрока = ДанныеСостояний.Добавить();
				НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
				НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
				НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачала;
				НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончания;
			Иначе
				Если РеквизитыДляПроведения.ДатаНачала < РеквизитыДляПроведения.ДатаНачалаОплаты Тогда
					// Если оплата начинается позже, то интервал перед - это болезнь без оплаты.
					НоваяСтрока = ДанныеСостояний.Добавить();
					НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
					НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
					НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачала;
					НоваяСтрока.Окончание = НачалоДня(РеквизитыДляПроведения.ДатаНачалаОплаты) - 1;
				КонецЕсли;
				НоваяСтрока = ДанныеСостояний.Добавить();
				НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
				НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.Болезнь;
				НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачалаОплаты;
				НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончанияОплаты;
				Если РеквизитыДляПроведения.ДатаОкончанияОплаты < РеквизитыДляПроведения.ДатаОкончания Тогда
					// Если оплата заканчивается раньше, то интервал - это болезнь без оплаты.
					НоваяСтрока = ДанныеСостояний.Добавить();
					НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
					НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
					НоваяСтрока.Начало = КонецДня(РеквизитыДляПроведения.ДатаОкончанияОплаты) + 1;
					НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончания;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// По всем другим рабочим местам регистрируем болезнь без оплаты.
	Для Каждого ДругойСотрудник Из ДругиеСотрудники Цикл
		НоваяСтрока = ДанныеСостояний.Добавить();
		НоваяСтрока.Сотрудник = ДругойСотрудник;
		Если РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам;		
		Иначе	
			НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
			НоваяСтрока.ВидВремени = Справочники.ВидыИспользованияРабочегоВремени.Болезнь;
		КонецЕсли;	
		НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачала;
		НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончания;
	КонецЦикла;
	
	ДанныеДляПроведения.ДанныеСостоянийСотрудников = ДанныеСостояний;
	
КонецПроцедуры

Функция ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета)
	
	ДанныеДляПроведения = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет,НачисленияПерерасчетНулевыеСторно", "Ссылка.ПериодРегистрации");
		Если РеквизитыДляПроведения.ДокументРассчитан Тогда
			
			РасчетЗарплатыРасширенный.ЗаполнитьУдержания(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
			РасчетЗарплатыРасширенный.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
			РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
			РасчетЗарплатыРасширенный.ЗаполнитьДанныеКорректировкиВыплаты(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.ФизическоеЛицо);
			ЗаполнитьСведенияОПособиях(РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения);
			РасчетЗарплатыРасширенный.ЗаполнитьПогашениеЗадолженностиПоУдержаниям(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.ПериодРегистрации);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
				ПараметрыУправленческаяЗарплата = Модуль.ДополнительныеПараметрыПодготовкиДанныхДляПроведения();
				ПараметрыУправленческаяЗарплата.ПолеДатыДействия = "Ссылка.ПериодРегистрации";
				ПараметрыУправленческаяЗарплата.ПолеВидаНачисления = "Начисление";
				Модуль.ПриПодготовкеДанныхДляПроведенияДокументаРасчетаЗарплаты(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ПараметрыУправленческаяЗарплата);
			КонецЕсли;
			
			ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВД(РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, ДанныеДляПроведения.НачисленияПоСотрудникам);
			
			ЗаймыСотрудникам.ЗаполнитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, НачалоДня(РеквизитыДляПроведения.ДатаНачалаСобытия) - 1, "Ссылка.ПериодРегистрации");
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			
				СоставМесячногоДенежногоСодержания = Модуль.СведенияОСоставеМесячногоДенежногоСодержания(РеквизитыДляПроведения.Ссылка, "ДенежноеСодержание,ДенежноеСодержаниеФактическиеНачисления");
				ДанныеДляПроведения.Вставить("СоставМесячногоДенежногоСодержания", СоставМесячногоДенежногоСодержания);
			КонецЕсли;
			
		КонецЕсли;
		
		ДругиеСотрудники = КадровыйУчетРасширенный.ДругиеСотрудникиФизическогоЛица(
		РеквизитыДляПроведения.ФизическоеЛицо, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.Сотрудник, РеквизитыДляПроведения.ДатаНачала, РеквизитыДляПроведения.ДатаОкончания);
		
		ЗаполнитьДанныеСостоянийСотрудника(РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения, ДругиеСотрудники);
		
		Если РеквизитыДляПроведения.ОсвобождатьСтавку Тогда
			МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыДляПроведения.Сотрудник);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудников, ДругиеСотрудники);
			КадровыйУчетРасширенный.ЗаполнитьПериодыОсвобожденияСтавки(ДанныеДляПроведения, МассивСотрудников, РеквизитыДляПроведения.ДатаНачала, КонецДня(РеквизитыДляПроведения.ДатаОкончания) + 1);
			Если ЗначениеЗаполнено(РеквизитыДляПроведения.ИсправленныйДокумент) Тогда
				ДанныеИсправленногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДляПроведения.ИсправленныйДокумент, "ФизическоеЛицо,Организация,Сотрудник,ДатаНачала,ДатаОкончания");
				ДругиеСотрудникиИсправленногоДокумента = КадровыйУчетРасширенный.ДругиеСотрудникиФизическогоЛица(ДанныеИсправленногоДокумента.ФизическоеЛицо,
				ДанныеИсправленногоДокумента.Организация, ДанныеИсправленногоДокумента.Сотрудник,
				ДанныеИсправленногоДокумента.ДатаНачала, ДанныеИсправленногоДокумента.ДатаОкончания);
				МассивСотрудниковИсправленногоДокумента = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеИсправленногоДокумента.Сотрудник);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудниковИсправленногоДокумента, ДругиеСотрудникиИсправленногоДокумента);
				КадровыйУчетРасширенный.ЗаполнитьПериодыОсвобожденияСтавки(ДанныеДляПроведения, МассивСотрудниковИсправленногоДокумента, ДанныеИсправленногоДокумента.ДатаНачала,  КонецДня(ДанныеИсправленногоДокумента.ДатаОкончания) + 1, Истина);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьДанныеРеестраОтпусков(РеквизитыДляПроведения, ДанныеДляПроведения);
		ЗаполнитьДанныеУчетаПериодовУходаЗаБольнымиДетьми(РеквизитыДляПроведения, ДанныеДляПроведения);
		
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ДокументРассчитан И СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка();
		ДополнительныеПараметры.МесяцНачисления = "Ссылка.ПериодРегистрации";
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура ЗаполнитьДанныеРеестраОтпусков(РеквизитыДляПроведения, ДанныеДляПроведения)
	
	Если Не РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРеестраОтпусков = КадровыйУчетРасширенный.ТаблицаРеестраОтпусков();
	
	НоваяСтрока = ДанныеРеестраОтпусков.Добавить();
	Если ЗначениеЗаполнено(РеквизитыДляПроведения.ИсправленныйДокумент) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", РеквизитыДляПроведения.ИсправленныйДокумент);
		Запрос.УстановитьПараметр("Сотрудник", РеквизитыДляПроведения.Сотрудник);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	РеестрОтпусков.Сотрудник,
			|	РеестрОтпусков.ФизическоеЛицо,
			|	РеестрОтпусков.ДокументОснование,
			|	РеестрОтпусков.Номер,
			|	РеестрОтпусков.ВидОтпуска,
			|	РеестрОтпусков.ВидДоговора,
			|	РеестрОтпусков.Основание
			|ИЗ
			|	РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
			|ГДЕ
			|	РеестрОтпусков.Регистратор = &ДокументОснование
			|	И РеестрОтпусков.Сотрудник = &Сотрудник";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	Иначе
		
		НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
		НоваяСтрока.ФизическоеЛицо = РеквизитыДляПроведения.ФизическоеЛицо;
		НоваяСтрока.ДокументОснование = РеквизитыДляПроведения.Ссылка;
		НоваяСтрока.Номер = 1;
		
		НоваяСтрока.ВидОтпуска = НСтр("ru='Отпуск по беременности и родам'");
		
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
			Истина, РеквизитыДляПроведения.Сотрудник, "ВидДоговора", РеквизитыДляПроведения.ДатаНачала);
		
		Если КадровыеДанныеСотрудника.Количество() > 0 Тогда
			НоваяСтрока.ВидДоговора = КадровыеДанныеСотрудника[0].ВидДоговора;
		КонецЕсли;
		
		Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.Номер);
		НоваяСтрока.Основание = Основание;
		
	КонецЕсли;
	
	НоваяСтрока.Период = РеквизитыДляПроведения.Дата;
	
	НоваяСтрока.КоличествоДнейОтпуска = ЗарплатаКадрыКлиентСервер.ДнейВПериоде(
		РеквизитыДляПроведения.ДатаНачала, РеквизитыДляПроведения.ДатаОкончания);
	
	НоваяСтрока.ДатаНачалаПериодаОтсутствия = РеквизитыДляПроведения.ДатаНачала;
	НоваяСтрока.ДатаОкончанияПериодаОтсутствия = РеквизитыДляПроведения.ДатаОкончания;
	
	ДанныеДляПроведения.Вставить("ДанныеРеестраОтпусков", ДанныеРеестраОтпусков);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыКорректировок(РеквизитыДляПроведения, ПараметрыКорректировок)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	КорректировкиНачислений.ФизическоеЛицо,
		|	КорректировкиНачислений.ПорядокРасчета,
		|	КорректировкиНачислений.СтатьяФинансирования,
		|	КорректировкиНачислений.Период,
		|	КорректировкиНачислений.Сумма
		|ИЗ
		|	Документ.БольничныйЛист.СреднийЗаработокФСС КАК КорректировкиНачислений
		|ГДЕ
		|	КорректировкиНачислений.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)
		|	И КорректировкиНачислений.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкиВремени.ФизическоеЛицо,
		|	КорректировкиВремени.Период,
		|	КорректировкиВремени.ОтработаноДнейКалендарных,
		|	КорректировкиВремени.ДнейБолезниУходаЗаДетьми
		|ИЗ
		|	Документ.БольничныйЛист.ОтработанноеВремяДляСреднегоФСС КАК КорректировкиВремени
		|ГДЕ
		|	КорректировкиВремени.Источник <> ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Исправления)
		|	И КорректировкиВремени.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыОтсутствий.Ссылка,
		|	ПериодыОтсутствий.НомерСтроки,
		|	ПериодыОтсутствий.Начало,
		|	ПериодыОтсутствий.Окончание,
		|	ПериодыОтсутствий.Дни,
		|	ПериодыОтсутствий.ВидБолезниУходаЗаДетьми,
		|	ПериодыОтсутствий.Источник,
		|	ПериодыОтсутствий.УдалитьКорректировка
		|ИЗ
		|	Документ.БольничныйЛист.ПериодыБолезниУходаЗаДетьми КАК ПериодыОтсутствий
		|ГДЕ
		|	ПериодыОтсутствий.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)
		|	И ПериодыОтсутствий.Ссылка = &Ссылка";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПараметрыКорректировок.КорректировкиНачислений = РезультатыЗапроса[0].Выгрузить();
	ПараметрыКорректировок.КорректировкиВремени = РезультатыЗапроса[1].Выгрузить();
	ПараметрыКорректировок.ПериодыОтсутствий = РезультатыЗапроса[2].Выгрузить();
	
КонецПроцедуры

Функция РеквизитыДляПроведения(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныйЛист.Ссылка КАК Ссылка,
	|	БольничныйЛист.Организация КАК Организация,
	|	БольничныйЛист.ПериодРегистрации КАК ПериодРегистрации,
	|	БольничныйЛист.ДокументРассчитан КАК ДокументРассчитан,
	|	БольничныйЛист.ПорядокВыплаты КАК ПорядокВыплаты,
	|	БольничныйЛист.Дата КАК Дата,
	|	БольничныйЛист.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	БольничныйЛист.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	БольничныйЛист.Сотрудник КАК Сотрудник,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	БольничныйЛист.ОсвобождатьСтавку КАК ОсвобождатьСтавку,
	|	БольничныйЛист.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачала,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания,
	|	БольничныйЛист.НазначитьПособие КАК НазначитьПособие,
	|	БольничныйЛист.ДатаНачалаОплаты КАК ДатаНачалаОплаты,
	|	БольничныйЛист.ДатаОкончанияОплаты КАК ДатаОкончанияОплаты,
	|	БольничныйЛист.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БольничныйЛист.ИсправленныйДокумент КАК ИсправленныйДокумент,
	|	БольничныйЛист.Номер КАК Номер,
	|	БольничныйЛист.СлучайУходаЗаБольнымРебенком КАК СлучайУходаЗаБольнымРебенком,
	|	БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход1 КАК РодственникЗаКоторымОсуществляетсяУход1,
	|	БольничныйЛист.ДатаНачалаРодственник1 КАК ДатаНачалаРодственник1,
	|	БольничныйЛист.ДатаОкончанияРодственник1 КАК ДатаОкончанияРодственник1,
	|	БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход2 КАК РодственникЗаКоторымОсуществляетсяУход2,
	|	БольничныйЛист.ДатаНачалаРодственник2 КАК ДатаНачалаРодственник2,
	|	БольничныйЛист.ДатаОкончанияРодственник2 КАК ДатаОкончанияРодственник2,
	|	БольничныйЛист.ДоходПолученНаТерриторииРФ КАК ДоходПолученНаТерриторииРФ
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.НомерСтроки КАК НомерСтроки,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.Территория КАК Территория,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.УсловияТруда КАК УсловияТруда,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения КАК ДоляРаспределения,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.Результат КАК Результат,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.БольничныйЛист.РаспределениеПоТерриториямУсловиямТруда КАК БольничныйЛистРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
		
	КонецЦикла;
	
	РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, Организация, ПериодРегистрации, ДокументРассчитан, ПорядокВыплаты, Дата, ПланируемаяДатаВыплаты,
		| ДатаНачалаСобытия, Сотрудник, ПериодРасчетаСреднегоЗаработкаНачало, ПериодРасчетаСреднегоЗаработкаОкончание, ОсвобождатьСтавку, ПричинаНетрудоспособности,
		| ДатаНачала, ДатаОкончания, НазначитьПособие, ДатаНачалаОплаты, ДатаОкончанияОплаты, ФизическоеЛицо, ИсправленныйДокумент, Номер, СлучайУходаЗаБольнымРебенком,
		| РодственникЗаКоторымОсуществляетсяУход1, ДатаНачалаРодственник1, ДатаОкончанияРодственник1, РодственникЗаКоторымОсуществляетсяУход2, ДатаНачалаРодственник2,
		| ДатаОкончанияРодственник2, РаспределениеПоТерриториямУсловиямТруда, ДоходПолученНаТерриторииРФ");
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

Процедура ПроверитьПересечениеФактическогоПериодаДействия(ДокументСсылка, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитов =
	"ПериодРегистрации,
	|Организация,
	|ИсправленныйДокумент,
	|ВидОплатыПособия,
	|ВидОплатыЗаСчетРаботодателя,
	|ВидНеоплачиваемогоВремени,
	|ВидРасчетаДоплаты";
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, ИменаРеквизитов);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.*
	               |ИЗ
	               |	Документ.БольничныйЛист.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.Ссылка = &Ссылка";
				   
	Начисления = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПроверки = РасчетЗарплатыРасширенный.ПараметрыПроверкиПересеченияФактическогоПериодаДействия();
	ПараметрыПроверки.Организация = РеквизитыДокумента.Организация;
	ПараметрыПроверки.ПериодРегистрации = РеквизитыДокумента.ПериодРегистрации;
	ПараметрыПроверки.Документ = ДокументСсылка;
	ПараметрыПроверки.Начисления = Начисления;
	ПараметрыПроверки.ИсправленныйДокумент = РеквизитыДокумента.ИсправленныйДокумент;
	
	ОсновныеНачисления = Новый Массив;
	ОсновныеНачисления.Добавить(РеквизитыДокумента.ВидОплатыПособия);
	ОсновныеНачисления.Добавить(РеквизитыДокумента.ВидОплатыЗаСчетРаботодателя);
	ОсновныеНачисления.Добавить(РеквизитыДокумента.ВидНеоплачиваемогоВремени);
	ОсновныеНачисления.Добавить(РеквизитыДокумента.ВидРасчетаДоплаты);
	
	ПараметрыПроверки.ОсновныеНачисления = ОсновныеНачисления;
	
	РасчетЗарплатыРасширенный.ПроверитьПересечениеФактическогоПериодаДействия(ПараметрыПроверки, Отказ);
	
КонецПроцедуры

#Область ПечатьРасчетаСреднегоЗаработка

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаСреднегоЗаработка.ДанныеДокументовРасчетаСреднегоЗаработка.
//   ИмяМакета          - строка, вариант печати расчета среднего заработка.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработкаФСС(МассивСсылок) Экспорт
	
	ДанныеДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	УчетПособийСоциальногоСтрахования.СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(Запрос.МенеджерВременныхТаблиц, МассивСсылок);
	
	СоздатьВТКадровыеДанныеСотрудниковБольничныхЛистов(Запрос, МассивСсылок);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Сотрудник,
	|	ДанныеДокументов.ДатаНачалаСобытия,
	|	ДанныеДокументов.ПрименятьПредельнуюВеличину,
	|	ДанныеДокументов.ИспользоватьДниБолезниУходаЗаДетьми,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	ДанныеДокументов.УчитыватьЗаработокПредыдущихСтрахователей,
	|	ДанныеДокументов.РасчетПоПравилам2010Года,
	|	ДанныеДокументов.ДоляНеполногоВремени,
	|	ДанныеДокументов.РайонныйКоэффициентРФ,
	|	ДанныеДокументов.МинимальныйРазмерОплатыТрудаРФ,
	|	БольничныйЛист.Организация,
	|	БольничныйЛист.Дата КАК ДатаДокумента,
	|	БольничныйЛист.Номер КАК НомерДокумента,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачалаОтсутствия,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончанияОтсутствия,
	|	Организации.НаименованиеПолное КАК ПолноеНаименованиеОрганизации,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	ВТКадровыеДанныеСотрудников.Организация КАК Страхователь,
	|	ВТКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТКадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	ВТКадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТКадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	ВТКадровыеДанныеСотрудников.Должность КАК Должность,
	|	ВТКадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО БольничныйЛист.Организация = Организации.Ссылка
	|		ПО ДанныеДокументов.Ссылка = БольничныйЛист.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ПО ДанныеДокументов.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокументов.ДатаНачалаСобытия = ВТКадровыеДанныеСотрудников.Период";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТаблицыДанныхОСреднем = УчетПособийСоциальногоСтрахования.ТаблицыДанныхСреднегоЗаработкаФСС("БольничныйЛист", МассивСсылок);
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработкаФСС.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка();
			
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка);
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.КадровыеДанныеСотрудника, Выборка);
			
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС();
			ЗаполнитьЗначенияСвойств(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, Выборка);
			
			ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, ТаблицыДанныхОСреднем);
			ДанныеДокумента.ПараметрыРасчета = ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС.ПараметрыРасчета;
			ДанныеДокумента.ДанныеРасчетаСреднего = ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС.ДанныеРасчетаСреднего;
			
			ДанныеДокументов.Добавить(ДанныеДокумента);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеДокументов;
	
КонецФункции

Процедура СоздатьВТКадровыеДанныеСотрудниковБольничныхЛистов(Запрос, МассивСсылок)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.ДатаНачалаСобытия КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В(&МассивСсылок)";
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "Организация,ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Подразделение,Должность,ВидЗанятости");
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьПодробногоРасчетаНачислений

// Заполняет структуру - описание документа для формирования печатной формы подробного расчета начислений.
//
// Параметры:
//   ОписаниеДокумента - структура, определяется в Обработки.ПечатьРасчетаНачислений.ОписаниеДокументаРасчетаНачислений.
//
Процедура ЗаполнитьОписаниеДокументаРасчетаНачислений(ОписаниеДокумента) Экспорт
	КатегорииСпециализированногоНачисления = Новый Массив;
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	
	ОписаниеДокумента.Вставить("ИмяДокумента", 								МетаданныеДокумента.Имя);
	ОписаниеДокумента.Вставить("СинонимДокумента", 							МетаданныеДокумента.Синоним);
	ОписаниеДокумента.Вставить("ЕстьРасчетСреднегоЗаработка", 				Истина);
	ОписаниеДокумента.Вставить("СреднийЗаработокОбщий",		 				Ложь);
	ОписаниеДокумента.Вставить("ЕстьРасчетСпециализированныхНачислений",	Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетЗарплаты", 						Истина);
	ОписаниеДокумента.Вставить("КатегорииСпециализированногоНачисления", 	КатегорииСпециализированногоНачисления);
	ОписаниеДокумента.Вставить("НазваниеСпециализированногоНачисления", 	НСтр("ru = 'Больничный лист'"));
КонецПроцедуры

// Заполняет таблицу значений - параметры формирования печатной формы подробного расчета начислений.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаНачислений.ДанныеДокументовДляПодробногоРасчетаНачислений.
//
Процедура ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ДанныеДокументов) Экспорт
	РасчетЗарплатыРасширенный.ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ПустаяСсылка().Метаданные().Имя, ДанныеДокументов);
КонецПроцедуры

// Возвращает структуру с двумя таблицами "Начисления" и "Показатели".
// Данные в таблицах представлены в разрезе ссылки на документ.
// 	Параметры:
//		МассивСсылок - массив ссылок на документы у которых есть табличные части "Начисления" и "Показатели".
//		ИмяДокумента - Имя объекта метаданных (документа) для формирования запроса.
//
Функция НачисленияПоказателиДокументов(МассивСсылок) Экспорт
	Возврат РасчетЗарплатыРасширенный.НачисленияПоказателиДокументов(МассивСсылок, ПустаяСсылка().Метаданные().Имя);
КонецФункции

#КонецОбласти

#Область ПечатьРасчетаПособияКЛисткуНетрудоспособности

// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму расчета оплаты пособия.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ТабличныйДокументРасчетаПособия(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_РасчетПособия";
	
	ДанныеДляПечатиРасчетаПособия = ДанныеДляПечатиРасчетаПособия(МассивОбъектов);
	
	ВывестиДанныеРасчетаПособияВТабличныйДокумент(Макет, ДокументРезультат, ДанныеДляПечатиРасчетаПособия, ОбъектыПечати);
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеДляПечатиРасчетаПособия(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныеЛисты.Ссылка КАК Ссылка,
	|	БольничныеЛисты.Сотрудник КАК Сотрудник,
	|	БольничныеЛисты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БольничныеЛисты.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	БольничныеЛисты.ПроцентОплаты КАК ПроцентОплаты,
	|	БольничныеЛисты.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	БольничныеЛисты.ДатаНачалаОплаты КАК ДатаНачалаОплаты,
	|	БольничныеЛисты.ДатаОкончанияОплаты КАК ДатаОкончанияОплаты,
	|	БольничныеЛисты.ВидОплатыПособия КАК ВидОплатыПособия,
	|	БольничныеЛисты.ВидОплатыЗаСчетРаботодателя КАК ВидОплатыЗаСчетРаботодателя,
	|	БольничныеЛисты.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
	|	БольничныеЛисты.РасчетПоПравилам2010Года КАК РасчетПоПравилам2010Года,
	|	БольничныеЛисты.СтажЛет КАК СтажЛет,
	|	БольничныеЛисты.СтажМесяцев КАК СтажМесяцев,
	|	ВЫБОР
	|		КОГДА БольничныеЛисты.СтажРасширенныйЛет = 0
	|				И БольничныеЛисты.СтажРасширенныйМесяцев = 0
	|			ТОГДА БольничныеЛисты.СтажЛет
	|		ИНАЧЕ БольничныеЛисты.СтажРасширенныйЛет
	|	КОНЕЦ КАК СтажРасширенныйЛет,
	|	ВЫБОР
	|		КОГДА БольничныеЛисты.СтажРасширенныйЛет = 0
	|				И БольничныеЛисты.СтажРасширенныйМесяцев = 0
	|			ТОГДА БольничныеЛисты.СтажМесяцев
	|		ИНАЧЕ БольничныеЛисты.СтажРасширенныйМесяцев
	|	КОНЕЦ КАК СтажРасширенныйМесяцев,
	|	БольничныеЛисты.Организация КАК Организация,
	|	БольничныеЛисты.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	БольничныеЛисты.УсловияИсчисленияКод1 КАК УсловияИсчисленияКод1,
	|	БольничныеЛисты.УсловияИсчисленияКод2 КАК УсловияИсчисленияКод2,
	|	БольничныеЛисты.УсловияИсчисленияКод3 КАК УсловияИсчисленияКод3,
	|	НЕ БольничныеЛисты.НазначитьПособие КАК НеВыплачиватьПособие,
	|	ВЫБОР
	|		КОГДА БольничныеЛисты.ДатаНачалаПоловиннойОплаты >= БольничныеЛисты.ДатаНачалаОплаты
	|				И БольничныеЛисты.ДатаНачалаПоловиннойОплаты <= БольничныеЛисты.ДатаОкончанияОплаты
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Снижено,
	|	ВЫБОР
	|		КОГДА БольничныеЛисты.ДатаНачалаПоловиннойОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ БольничныеЛисты.ДатаОкончанияОплаты < БольничныеЛисты.ДатаНачалаПоловиннойОплаты
	|			ТОГДА РАЗНОСТЬДАТ(БольничныеЛисты.ДатаНачалаОплаты, БольничныеЛисты.ДатаОкончанияОплаты, ДЕНЬ) + 1
	|		ИНАЧЕ РАЗНОСТЬДАТ(БольничныеЛисты.ДатаНачалаОплаты, БольничныеЛисты.ДатаНачалаПоловиннойОплаты, ДЕНЬ)
	|	КОНЕЦ КАК ДнейВПолномРазмере,
	|	ВЫБОР
	|		КОГДА БольничныеЛисты.ДатаНачалаПоловиннойОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|				И БольничныеЛисты.ДатаОкончанияОплаты >= БольничныеЛисты.ДатаНачалаПоловиннойОплаты
	|			ТОГДА РАЗНОСТЬДАТ(БольничныеЛисты.ДатаНачалаПоловиннойОплаты, БольничныеЛисты.ДатаОкончанияОплаты, ДЕНЬ) + 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейПо50процентов,
	|	БольничныеЛисты.ДатаНачала КАК ДатаНачала,
	|	БольничныеЛисты.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ОрганизацияСправочник.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ОрганизацияСправочник.Наименование
	|		ИНАЧЕ ОрганизацияСправочник.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	БольничныеЛисты.РайонныйКоэффициентРФнаНачалоСобытия КАК РайонныйКоэффициентРФнаНачалоСобытия,
	|	БольничныеЛисты.ПериодРегистрации КАК ПериодРегистрации,
	|	БольничныеЛисты.ДатаНарушенияРежима КАК ДатаНарушенияРежима,
	|	БольничныеЛисты.СреднийДневнойЗаработок КАК СреднийДневнойЗаработок,
	|	БольничныеЛисты.МинимальныйСреднедневнойЗаработок КАК МинимальныйСреднедневнойЗаработок,
	|	БольничныеЛисты.ОграничениеПособия КАК ОграничениеПособия,
	|	БольничныеЛисты.ПорядокВыплаты КАК ПорядокВыплаты,
	|	БольничныеЛисты.ДоляНеполногоВремени КАК ДоляНеполногоВремени,
	|	БольничныеЛисты.ДатаНачалаПоловиннойОплаты КАК ДатаНачалаПоловиннойОплаты
	|ПОМЕСТИТЬ ВТБольничныеЛисты
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныеЛисты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОрганизацияСправочник
	|		ПО БольничныеЛисты.Организация = ОрганизацияСправочник.Ссылка
	|ГДЕ
	|	БольничныеЛисты.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛистНачисления.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТБольничныеЛистыДатыНачалаНачислений
	|ИЗ
	|	ВТБольничныеЛисты КАК БольничныеЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.Начисления КАК БольничныйЛистНачисления
	|		ПО БольничныеЛисты.Ссылка = БольничныйЛистНачисления.Ссылка";
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТБольничныеЛистыДатыНачалаНачислений");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"МинимальнаяОплатаТрудаРФ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		,
		"ВТМинимальнаяОплатаТруда");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"МаксимальныйРазмерЕжемесячнойСтраховойВыплаты",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		,
		"ВТМаксимальнаяОплатаТруда");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БольничныеЛисты.Сотрудник
	|ИЗ
	|	ВТБольничныеЛисты КАК БольничныеЛисты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныеЛисты.Ссылка,
	|	БольничныеЛисты.Сотрудник,
	|	БольничныеЛисты.ФизическоеЛицо,
	|	БольничныеЛисты.ПричинаНетрудоспособности,
	|	БольничныеЛисты.ПроцентОплаты,
	|	БольничныеЛисты.ДатаНачалаСобытия,
	|	БольничныеЛисты.ДатаНачалаОплаты,
	|	БольничныеЛисты.ДатаОкончанияОплаты,
	|	БольничныеЛисты.ВидОплатыПособия,
	|	БольничныеЛисты.ВидОплатыЗаСчетРаботодателя,
	|	БольничныеЛисты.ФинансированиеФедеральнымБюджетом,
	|	БольничныеЛисты.РасчетПоПравилам2010Года,
	|	БольничныеЛисты.СтажЛет,
	|	БольничныеЛисты.СтажМесяцев,
	|	БольничныеЛисты.СтажРасширенныйЛет,
	|	БольничныеЛисты.СтажРасширенныйМесяцев,
	|	БольничныеЛисты.Организация,
	|	БольничныеЛисты.НомерЛисткаНетрудоспособности,
	|	БольничныеЛисты.УсловияИсчисленияКод1,
	|	БольничныеЛисты.УсловияИсчисленияКод2,
	|	БольничныеЛисты.УсловияИсчисленияКод3,
	|	БольничныеЛисты.НеВыплачиватьПособие,
	|	БольничныеЛисты.Снижено,
	|	БольничныеЛисты.ОграничениеПособия,
	|	БольничныеЛисты.ДнейВПолномРазмере,
	|	БольничныеЛисты.ДнейПо50процентов,
	|	БольничныеЛисты.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	БольничныеЛисты.ДатаНачала,
	|	БольничныеЛисты.ДатаОкончания,
	|	БольничныеЛисты.НаименованиеОрганизации,
	|	БольничныеЛисты.РайонныйКоэффициентРФнаНачалоСобытия,
	|	БольничныеЛисты.ПериодРегистрации,
	|	БольничныеЛисты.ДатаНарушенияРежима,
	|	БольничныеЛисты.ДатаНачалаПоловиннойОплаты,
	|	БольничныеЛисты.СреднийДневнойЗаработок КАК СреднийДневнойЗаработок,
	|	БольничныеЛисты.МинимальныйСреднедневнойЗаработок
	|ИЗ
	|	ВТБольничныеЛисты КАК БольничныеЛисты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛистНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	БольничныйЛистНачисления.ДатаОкончания КАК ПериодДействияКонец,
	|	БольничныйЛистНачисления.Результат КАК Результат,
	|	БольничныйЛистНачисления.ОплаченоДней КАК ОплаченоВремени,
	|	БольничныйЛистНачисления.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА БольничныеЛисты.ОграничениеПособия = ЗНАЧЕНИЕ(Перечисление.ВидыОграниченияПособия.ОграничениеВРазмереММОТ)
	|				ИЛИ БольничныеЛисты.ДатаНарушенияРежима <> ДАТАВРЕМЯ(1, 1, 1)
	|					И БольничныйЛистНачисления.ДатаНачала >= БольничныеЛисты.ДатаНарушенияРежима
	|			ТОГДА МинимальнаяОплатаТруда.Размер / ДЕНЬ(КОНЕЦПЕРИОДА(БольничныйЛистНачисления.ДатаНачала, МЕСЯЦ)) * ВЫБОР
	|					КОГДА БольничныеЛисты.РайонныйКоэффициентРФнаНачалоСобытия < 1
	|						ТОГДА 1
	|					ИНАЧЕ БольничныеЛисты.РайонныйКоэффициентРФнаНачалоСобытия
	|				КОНЕЦ
	|		КОГДА БольничныеЛисты.ОграничениеПособия = ЗНАЧЕНИЕ(Перечисление.ВидыОграниченияПособия.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты)
	|			ТОГДА МаксимальнаяОплатаТруда.Размер * 4 / ДЕНЬ(КОНЕЦПЕРИОДА(БольничныйЛистНачисления.ДатаНачала, МЕСЯЦ)) * ВЫБОР
	|					КОГДА БольничныеЛисты.РайонныйКоэффициентРФнаНачалоСобытия < 1
	|						ТОГДА 1
	|					ИНАЧЕ БольничныеЛисты.РайонныйКоэффициентРФнаНачалоСобытия
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МаксимальныйРазмерДневногоПособия,
	|	ВЫБОР
	|		КОГДА ПВРНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
	|			ТОГДА БольничныйЛистНачисления.Результат
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоРаботодателем,
	|	ВЫБОР
	|		КОГДА ПВРНачисления.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
	|			ТОГДА БольничныйЛистНачисления.Результат
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоФСС
	|ИЗ
	|	ВТБольничныеЛисты КАК БольничныеЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.Начисления КАК БольничныйЛистНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПВРНачисления
	|			ПО БольничныйЛистНачисления.Начисление = ПВРНачисления.Ссылка
	|		ПО БольничныеЛисты.Ссылка = БольничныйЛистНачисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМинимальнаяОплатаТруда КАК МинимальнаяОплатаТруда
	|		ПО (БольничныйЛистНачисления.ДатаНачала = МинимальнаяОплатаТруда.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМаксимальнаяОплатаТруда КАК МаксимальнаяОплатаТруда
	|		ПО БольничныеЛисты.ДатаНачалаСобытия = МаксимальнаяОплатаТруда.Период
	|ГДЕ
	|	ПВРНачисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам))
	|
	|УПОРЯДОЧИТЬ ПО
	|	БольничныеЛисты.ДатаНачала
	|ИТОГИ
	|	СУММА(Результат),
	|	СУММА(НачисленоРаботодателем),
	|	СУММА(НачисленоФСС)
	|ПО
	|	Ссылка";
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоРезультатов  = Результат.Количество();
	
	СписокСотрудников = Результат[КоличествоРезультатов - 3].Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, "ФИОПолные,ИНН,СтраховойНомерПФР,Подразделение,Должность,ТабельныйНомер,Пол");
	
	ВыборкаДляШапки = Результат[КоличествоРезультатов - 2].Выбрать();
	ВыборкаНачислений = Результат[КоличествоРезультатов - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);					
	
	ДанныеДляПечатиРасчетаСреднегоЗаработка = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработкаФСС(МассивСсылок);
	ОбластиДляВстраиванияСреднегоЗаработка = Обработки.ПечатьРасчетаСреднегоЗаработкаФСС.ОбластиДляВстраивания(ДанныеДляПечатиРасчетаСреднегоЗаработка, Ложь);
	
	ДанныеДляПечатиРасчетаПособия = Новый Структура;
	ДанныеДляПечатиРасчетаПособия.Вставить("ВыборкаДляШапки", ВыборкаДляШапки);
	ДанныеДляПечатиРасчетаПособия.Вставить("ВыборкаНачислений", ВыборкаНачислений);
	ДанныеДляПечатиРасчетаПособия.Вставить("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
	ДанныеДляПечатиРасчетаПособия.Вставить("ОбластиДляВстраиванияСреднегоЗаработка", ОбластиДляВстраиванияСреднегоЗаработка);
	ДанныеДляПечатиРасчетаПособия.Вставить("ДанныеДляПечатиРасчетаСреднегоЗаработка", ДанныеДляПечатиРасчетаСреднегоЗаработка);
	
	Возврат ДанныеДляПечатиРасчетаПособия;
	
КонецФункции

Процедура ВывестиДанныеРасчетаПособияВТабличныйДокумент(Макет, ДокументРезультат, ДанныеДляПечатиРасчетаПособия, ОбъектыПечати)
	
	ВыборкаНачислений			= ДанныеДляПечатиРасчетаПособия.ВыборкаНачислений;
	ВыборкаДляШапки				= ДанныеДляПечатиРасчетаПособия.ВыборкаДляШапки;
	КадровыеДанныеСотрудников 	= ДанныеДляПечатиРасчетаПособия.КадровыеДанныеСотрудников;
	ОбластиДляВстраиванияСреднегоЗаработка 	= ДанныеДляПечатиРасчетаПособия.ОбластиДляВстраиванияСреднегоЗаработка;
	ДанныеДляПечатиРасчетаСреднегоЗаработка = ДанныеДляПечатиРасчетаПособия.ДанныеДляПечатиРасчетаСреднегоЗаработка;
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	ПервыйДокумент = Истина;

	Пока ВыборкаДляШапки.Следующий() Цикл
		
		Если ВыборкаДляШапки.РасчетПоПравилам2010Года Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = '%1: Печать расчета пособия по правилам 2010 года не поддерживается.'"), ВыборкаДляШапки.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;

		СекцияШапка = Макет.ПолучитьОбласть("Шапка");
		СекцияРасчетПособияИтог = Макет.ПолучитьОбласть("РасчетПособияНачалоИтогов");
		СекцияПодписи = Макет.ПолучитьОбласть("Подписи");
		
		ЗаполнитьЗначенияСвойств(СекцияШапка.Параметры, ВыборкаДляШапки);
		
		КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(ВыборкаДляШапки.Сотрудник);
		ЗаполнитьКадровыеДанныеСотрудникаВОбласти(СекцияШапка, КадровыеДанныеСотрудника);
		
		СекцияШапка.Параметры.ТабельныйНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(КадровыеДанныеСотрудника.ТабельныйНомер, Истина, Истина);
		СекцияШапка.Параметры.ПодписьЛетСтажа = ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru = 'год'"), НСтр("ru = 'года'"), НСтр("ru = 'лет'"), СекцияШапка.Параметры.СтажРасширенныйЛет);
		СекцияШапка.Параметры.ПодписьМесяцевСтажа = ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru = 'месяц'"), НСтр("ru = 'месяца'"), НСтр("ru = 'месяцев'"), СекцияШапка.Параметры.СтажРасширенныйМесяцев);
		
		Если ВыборкаДляШапки.ФинансированиеФедеральнымБюджетом = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов Тогда
			
			РазностьСтажей 	= УчетПособийСоциальногоСтрахования.ПодсчитатьРазностьСтажейВГодахИМесяцах(ВыборкаДляШапки.СтажРасширенныйЛет,
			ВыборкаДляШапки.СтажРасширенныйМесяцев,
			ВыборкаДляШапки.СтажЛет,
			ВыборкаДляШапки.СтажМесяцев);
			НестраховыхПериодовЛет 		= РазностьСтажей.РазностьЛет;
			НестраховыхПериодовМесяцев 	= РазностьСтажей.РазностьМесяцев;
			
			Если НестраховыхПериодовЛет > 0 Или НестраховыхПериодовМесяцев > 0 Тогда
				СекцияШапка.Параметры.ЛетНестраховогоСтажа 				= НестраховыхПериодовЛет;
				СекцияШапка.Параметры.МесяцевНестраховогоСтажа 			= НестраховыхПериодовМесяцев;
				СекцияШапка.Параметры.ПодписьЛетНестраховогоСтажа 		= ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru = 'год'"), НСтр("ru = 'года'"), НСтр("ru = 'лет'"), СекцияШапка.Параметры.ЛетНестраховогоСтажа);
				СекцияШапка.Параметры.ПодписьМесяцевНестраховогоСтажа 	= ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru = 'месяц'"), НСтр("ru = 'месяца'"), НСтр("ru = 'месяцев'"), СекцияШапка.Параметры.МесяцевНестраховогоСтажа);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыборкаДляШапки.НеВыплачиватьПособие Тогда
			ОписаниеНазначениеПособия = НСтр("ru = 'Пособие не начислялось.'");
		Иначе
			ДнейВПолномРазмере 	= ВыборкаДляШапки.ДнейВПолномРазмере;
			ДнейПо50процентов 	= ВыборкаДляШапки.ДнейПо50процентов;
			ПроцентОплаты 		= ВыборкаДляШапки.ПроцентОплаты;
			
			Если Не ЗначениеЗаполнено(ДнейПо50процентов) Тогда
				ОписаниеОплаченыхДнейПособия = СтрШаблон(НСтр("ru = '%1%% за %2%3'"), ПроцентОплаты, ?(ДнейВПолномРазмере = 0, " -", ДнейВПолномРазмере), ФормаМножественногоЧислаДней(ДнейВПолномРазмере));
			ИначеЕсли Не ЗначениеЗаполнено(ДнейВПолномРазмере) Тогда
				ОписаниеОплаченыхДнейПособия = СтрШаблон(НСтр("ru = '50%% за %1%2'"), ДнейПо50процентов, ФормаМножественногоЧислаДней(ДнейПо50процентов));
			Иначе
				ОписаниеОплаченыхДнейПособия = СтрШаблон(НСтр("ru = '%1%% за %2%3 и 50%% за %4%5'"), ПроцентОплаты, ДнейВПолномРазмере, ФормаМножественногоЧислаДней(ДнейВПолномРазмере), ДнейПо50процентов, ФормаМножественногоЧислаДней(ДнейПо50процентов));
			КонецЕсли;
			
			ОписаниеНазначениеПособия = СтрШаблон(НСтр("ru = 'Назначено пособие %1 в размере %2.'"), ПричинаНетрудоспособностиСтрокой(ВыборкаДляШапки.ПричинаНетрудоспособности), ОписаниеОплаченыхДнейПособия);
			
			Если ВыборкаДляШапки.Снижено Тогда
				ОписаниеНазначениеПособия = ОписаниеНазначениеПособия + Символы.ПС + СтрШаблон(НСтр("ru = 'Пособие снижено с %1'"), Формат(ВыборкаДляШапки.ДатаНачалаПоловиннойОплаты, "ДЛФ=DD"));
			КонецЕсли;
			
		КонецЕсли;
		СекцияШапка.Параметры.ОписаниеНазначениеПособия = ОписаниеНазначениеПособия;
		СекцияШапка.Параметры.НаименованиеОрганизации 	= СокрЛП(СекцияШапка.Параметры.НаименованиеОрганизации);
		
		ДокументРезультат.Вывести(СекцияШапка);
		
		ИмяОбластиСреднегоЗаработка = Обработки.ПечатьРасчетаСреднегоЗаработка.ИмяВстраиваемойОбласти(ОбластиДляВстраиванияСреднегоЗаработка.ОбъектыПечати, ВыборкаДляШапки.Ссылка);
		
		Для каждого Элемент Из ДанныеДляПечатиРасчетаСреднегоЗаработка Цикл
			Если ВыборкаДляШапки.Ссылка = Элемент.РеквизитыДокумента.Ссылка Тогда
				ПараметрыРасчетаСреднего 	= Элемент.ПараметрыРасчета;
				ДанныеРасчетаСреднего 		= Элемент.ДанныеРасчетаСреднего;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ОбластьРасчетаСреднего 			= ОбластиДляВстраиванияСреднегоЗаработка.ТабличныйДокумент.Область(ИмяОбластиСреднегоЗаработка);
		ВысотаОбластиСреднегоЗаработка 	= ОбластьРасчетаСреднего.Низ - ОбластьРасчетаСреднего.Верх;	
		ШиринаОбластиСреднегоЗаработка 	= ОбластиДляВстраиванияСреднегоЗаработка.ТабличныйДокумент.ШиринаТаблицы;	
		
		НачалоНовогоФорматаСтрок = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьПриемник = ДокументРезультат.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + ВысотаОбластиСреднегоЗаработка, );	
		ДокументРезультат.ВставитьОбласть(ОбластьРасчетаСреднего, ОбластьПриемник);
		
		ОбластьПриемник.СоздатьФорматСтрок();
		
		// Назначим ширину колонок у новой области формата строк.
		Для Счетчик = 1 По ШиринаОбластиСреднегоЗаработка Цикл
			НастраиваемаяОбласть = ДокументРезультат.Область(НачалоНовогоФорматаСтрок, Счетчик, НачалоНовогоФорматаСтрок + ВысотаОбластиСреднегоЗаработка, Счетчик);
			НастраиваемаяОбласть.ШиринаКолонки = ОбластиДляВстраиванияСреднегоЗаработка.ТабличныйДокумент.Область(ОбластьРасчетаСреднего.Верх, Счетчик).ШиринаКолонки;
		КонецЦикла;
		
		ВыборкаНачислений.Сбросить();
		
		НачисленоФСС = 0;
		НачисленоРаботодателем = 0;
		НачисленоВсего = 0;
		
		ПособиеПоМатеринству = ЭтоПособиеПоМатеринству(ВыборкаДляШапки);
		
		УчитываемыхДнейВКалендарныхГодах 	= УчетПособийСоциальногоСтрахованияКлиентСервер.УчитываемыхДнейВКалендарныхГодахФСС(ПараметрыРасчетаСреднего, ДанныеРасчетаСреднего);
		ВсегоЗаработка 						= УчетПособийСоциальногоСтрахованияКлиентСервер.УчитываемыйЗаработокФСС(ПараметрыРасчетаСреднего, ДанныеРасчетаСреднего);
	
		Если ПособиеПоМатеринству Тогда
			
			СекцияРасчетПособияШапка = Макет.ПолучитьОбласть("РасчетПособияШапка2013");
			СекцияРасчетПособияСтрока = Макет.ПолучитьОбласть("РасчетПособияСтрока2013");
			
			СреднийПредельный = УчетПособийСоциальногоСтрахованияКлиентСервер.МаксимальныйСреднедневнойЗаработокДляОплатыПособияПоМатеринству(ПараметрыРасчетаСреднего);
			
		Иначе
			
			СекцияРасчетПособияШапка = Макет.ПолучитьОбласть("РасчетПособияШапка2011");
			СекцияРасчетПособияСтрока = Макет.ПолучитьОбласть("РасчетПособияСтрока2011");
			
			СреднийПредельный = 0;
			
		КонецЕсли;
		
		Если ТребуетсяВыводРайонногоКоэффициента(ВыборкаДляШапки) Тогда
			СекцияРасчетПособияШапка.Параметры.УчетРК = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'с учетом РК: %1'"), ВыборкаДляШапки.РайонныйКоэффициентРФнаНачалоСобытия);
		КонецЕсли;
		
		ДокументРезультат.Вывести(СекцияРасчетПособияШапка);
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("СреднийДневнойЗаработок", 				ВыборкаДляШапки.СреднийДневнойЗаработок);
		ЗначенияЗаполнения.Вставить("МинимальныйСреднедневнойЗаработок",	ВыборкаДляШапки.МинимальныйСреднедневнойЗаработок);
		ЗначенияЗаполнения.Вставить("СреднийПредельный", 					СреднийПредельный);
		
		Если ВыборкаНачислений.НайтиСледующий(Новый Структура("Ссылка", ВыборкаДляШапки.Ссылка)) Тогда
			
			ВыборкаНачисленийПоДокументу = ВыборкаНачислений.Выбрать();
			НачисленоФСС = ВыборкаНачислений.НачисленоФСС;
			НачисленоРаботодателем = ВыборкаНачислений.НачисленоРаботодателем;
			НачисленоВсего = НачисленоФСС  + НачисленоРаботодателем;
			
			Пока ВыборкаНачисленийПоДокументу.Следующий() Цикл
				
				ЗаполнитьЗначенияСвойств(СекцияРасчетПособияСтрока.Параметры, ВыборкаНачисленийПоДокументу);
				
				РазмерПособияВПроцентах = РазмерПособияВПроцентах(ВыборкаДляШапки, ВыборкаНачисленийПоДокументу);
				
				Если ВыборкаДляШапки.СреднийДневнойЗаработок < ВыборкаДляШапки.МинимальныйСреднедневнойЗаработок Тогда
					РазмерДневногоПособия = Окр(ВыборкаДляШапки.МинимальныйСреднедневнойЗаработок * РазмерПособияВПроцентах / 100,2);
				Иначе
					РазмерДневногоПособия = Окр(ВыборкаДляШапки.СреднийДневнойЗаработок * РазмерПособияВПроцентах / 100,2);
				КонецЕсли;
				
				ЗначенияЗаполнения.Вставить("РазмерПособияВПроцентах", 	РазмерПособияВПроцентах);
				ЗначенияЗаполнения.Вставить("РазмерДневногоПособия", 	РазмерДневногоПособия);
				
				ЗаполнитьЗначенияСвойств(СекцияРасчетПособияСтрока.Параметры, ЗначенияЗаполнения);
				
				ДокументРезультат.Вывести(СекцияРасчетПособияСтрока);
				
			КонецЦикла;
		КонецЕсли;
		
		СекцияРасчетПособияИтог = Макет.ПолучитьОбласть("РасчетПособияНачалоИтогов");
		СекцияРасчетПособияИтог.Параметры.НачисленоФСС 						= НачисленоФСС;
		СекцияРасчетПособияИтог.Параметры.НачисленоФССПрописью 				= РаботаСКурсамиВалют.СформироватьСуммуПрописью(НачисленоФСС, ВалютаУчета);
		СекцияРасчетПособияИтог.Параметры.НачисленоРаботодателем 			= НачисленоРаботодателем;
		СекцияРасчетПособияИтог.Параметры.НачисленоРаботодателемПрописью 	= РаботаСКурсамиВалют.СформироватьСуммуПрописью(НачисленоРаботодателем, ВалютаУчета);
		СекцияРасчетПособияИтог.Параметры.НачисленоВсего 					= НачисленоВсего;
		СекцияРасчетПособияИтог.Параметры.НачисленоВсегоПрописью 			= РаботаСКурсамиВалют.СформироватьСуммуПрописью(НачисленоВсего, ВалютаУчета);
		ДокументРезультат.Вывести(СекцияРасчетПособияИтог);
				
		СекцияПодписи.Параметры.ПериодРегистрации = ВыборкаДляШапки.ПериодРегистрации;
		ДокументРезультат.Вывести(СекцияПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат,
		НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляШапки.Ссылка);

	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьКадровыеДанныеСотрудникаВОбласти(СекцияШапка, КадровыеДанныеСотрудника)
	
	Если Не КадровыеДанныеСотрудника = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СекцияШапка.Параметры, КадровыеДанныеСотрудника);
		Пол = КадровыеДанныеСотрудника.Пол;
	Иначе
		Пол = Перечисления.ПолФизическогоЛица.Мужской;	
	КонецЕсли;
	
	ЗаполнитьСловаНеРаботалВОбласти(СекцияШапка, Пол);
	
КонецПроцедуры

Процедура ЗаполнитьСловаНеРаботалВОбласти(СекцияШапка, Пол)
	
	Если Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		СловаНеРаботал = НСтр("ru = 'Не работала'");
	Иначе
		СловаНеРаботал = НСтр("ru = 'Не работал'");
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("СловаНеРаботал", СловаНеРаботал);
	ЗаполнитьЗначенияСвойств(СекцияШапка.Параметры, ЗначенияЗаполнения);
	
КонецПроцедуры

Функция ПричинаНетрудоспособностиСтрокой(ПричинаНетрудоспособности)
	
	ПричинаНетрудоспособностиСтрокой = НСтр("ru = 'по временной нетрудоспособности'");
	
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		ПричинаНетрудоспособностиСтрокой = НСтр("ru = 'по беременности и родам'");
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
		ПричинаНетрудоспособностиСтрокой = НСтр("ru = 'по уходу за больным ребенком'");
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым Тогда
		ПричинаНетрудоспособностиСтрокой = НСтр("ru = 'по уходу за больным членом семьи'");
	КонецЕсли;
	
	Возврат ПричинаНетрудоспособностиСтрокой;
	
КонецФункции

Функция ТребуетсяВыводРайонногоКоэффициента(ВыборкаДляШапки)
	
	Возврат (ВыборкаДляШапки.СреднийДневнойЗаработок < ВыборкаДляШапки.МинимальныйСреднедневнойЗаработок
		Или ВыборкаДляШапки.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ
		Или ВыборкаДляШапки.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты
		Или ЗначениеЗаполнено(ВыборкаДляШапки.ДатаНарушенияРежима))
		И ВыборкаДляШапки.РайонныйКоэффициентРФнаНачалоСобытия > 1;
		
КонецФункции

Функция ЭтоПособиеПоМатеринству(ВыборкаДляШапки)
	
	ДатаОтдельногоРасчетаПособийПоМатеринству = УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаОтдельногоРасчетаПособийПоМатеринству();
		
	Возврат ВыборкаДляШапки.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам
		И ВыборкаДляШапки.ДатаНачалаСобытия >= ДатаОтдельногоРасчетаПособийПоМатеринству
		И ВыборкаДляШапки.ПериодРегистрации >= ДатаОтдельногоРасчетаПособийПоМатеринству;
		
КонецФункции

Функция РазмерПособияВПроцентах(ВыборкаДляШапки, ВыборкаНачисленийПоДокументу)
	
	РазмерПособияВПроцентах = ВыборкаДляШапки.ПроцентОплаты;
	
	Если ВыборкаДляШапки.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком
		И ЗначениеЗаполнено(ВыборкаДляШапки.ДатаНачалаПоловиннойОплаты)
		И ВыборкаНачисленийПоДокументу.ПериодДействияНачало >= ВыборкаДляШапки.ДатаНачалаПоловиннойОплаты Тогда
		РазмерПособияВПроцентах = 50;
	КонецЕсли;
	
	Возврат РазмерПособияВПроцентах;
	
КонецФункции

Функция ФормаМножественногоЧислаДней(КоличествоДней)
	
	Возврат ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru = ' календарный день'"), НСтр("ru = ' календарных дня'"), НСтр("ru = ' календарных дней'"), КоличествоДней);
	
КонецФункции

#КонецОбласти

#Область ПечатьДоплатаЗаДниНетрудоспособности

// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму приказа о доплате за дни нетрудоспособности.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ТабличныйДокументДоплатаЗаДниНетрудоспособности(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ДоплатаЗаДниНетрудоспособности";
	
	ДанныеДляПечатиРасчетаПособия = ДанныеДляПечатиДоплатыЗаДниНетрудоспособности(МассивОбъектов);
	
	ВывестиДанныеДоплатыЗаДниНетрудоспособностиВТабличныйДокумент(Макет, ДокументРезультат, ДанныеДляПечатиРасчетаПособия, ОбъектыПечати);
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеДляПечатиДоплатыЗаДниНетрудоспособности(МассивСсылок)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольничныеЛисты.Ссылка,
	|	БольничныеЛисты.Руководитель,
	|	БольничныеЛисты.ДатаНачала КАК Дата
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныеЛисты
	|ГДЕ
	|	БольничныеЛисты.Ссылка В(&МассивСсылок)";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Руководитель"), "ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныеЛисты.Ссылка,
	|	БольничныеЛисты.Сотрудник,
	|	БольничныеЛисты.ФизическоеЛицо,
	|	БольничныеЛисты.ПроцентДоплатыЗаДниНетрудоспособности КАК ПроцентДоплаты,
	|	БольничныеЛисты.ДоплачиватьДоСреднегоЗаработка,
	|	БольничныеЛисты.Номер КАК НомерДокумента,
	|	БольничныеЛисты.Дата КАК ДатаДокумента,
	|	БольничныеЛисты.НомерЛисткаНетрудоспособности КАК НомерЛН,
	|	БольничныеЛисты.ДатаНачала,
	|	БольничныеЛисты.ДатаОкончания,
	|	БольничныеЛисты.ДатаНачалаОплаты,
	|	БольничныеЛисты.ДатаОкончанияОплаты,
	|	ВЫБОР
	|		КОГДА ОрганизацияСправочник.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ОрганизацияСправочник.Наименование
	|		ИНАЧЕ ОрганизацияСправочник.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ФИООтветственныхЛиц.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
	|	БольничныеЛисты.ДолжностьРуководителя
	|ИЗ
	|	ВТДанныеДокументов КАК ВТДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныеЛисты
	|		ПО ВТДанныеДокументов.Ссылка = БольничныеЛисты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
	|		ПО (БольничныеЛисты.Ссылка = ФИООтветственныхЛиц.Ссылка)
	|			И (БольничныеЛисты.ДатаНачала = ФИООтветственныхЛиц.Дата)
	|			И (БольничныеЛисты.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОрганизацияСправочник
	|		ПО (БольничныеЛисты.Организация = ОрганизацияСправочник.Ссылка)";
	
	Результат = Запрос.Выполнить();             
	
	СписокСотрудников = Результат.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, "ФамилияИО,ИОФамилия,Подразделение,Должность,ТабельныйНомер,Пол,ФИОПолные");
	
	Возврат Новый Структура("ДанныеЛН, КадровыеДанныеСотрудников", Результат.Выбрать(), КадровыеДанныеСотрудников);
	
КонецФункции

Процедура ВывестиДанныеДоплатыЗаДниНетрудоспособностиВТабличныйДокумент(Макет, ДокументРезультат, ДанныеДляПечатиРасчетаПособия, ОбъектыПечати)
	
	ДанныеЛН					= ДанныеДляПечатиРасчетаПособия.ДанныеЛН;
	КадровыеДанныеСотрудников 	= ДанныеДляПечатиРасчетаПособия.КадровыеДанныеСотрудников;
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеЛН.Следующий() Цикл
		
		Если НЕ ДанныеЛН.ДоплачиватьДоСреднегоЗаработка Тогда
			ТекстСообщения = НСтр("ru = '%1: Доплата за дни временной нетрудоспособности не производится.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеЛН.Ссылка));
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало 		= ДокументРезультат.ВысотаТаблицы + 1;

		СекцияПриказ 			= Макет.ПолучитьОбласть("Приказ");
		
		ЗаполняемыеСвойства = "НаименованиеОрганизации,ПроцентДоплаты,НомерДокумента,ДатаДокумента,НомерЛН,ДатаНачала,ДатаОкончания,ДатаНачалаОплаты,ДатаОкончанияОплаты,РуководительРасшифровкаПодписи,ДолжностьРуководителя";
		ЗаполнитьЗначенияСвойств(СекцияПриказ.Параметры, ДанныеЛН, ЗаполняемыеСвойства);
		ФорматнаяСтрокаДаты = "ДЛФ=D";
		СекцияПриказ.Параметры.НаименованиеОрганизации 	= СокрЛП(СекцияПриказ.Параметры.НаименованиеОрганизации);
		СекцияПриказ.Параметры.ДатаДокумента 			= Формат(СекцияПриказ.Параметры.ДатаДокумента, ФорматнаяСтрокаДаты);
		СекцияПриказ.Параметры.ДатаНачала 				= Формат(СекцияПриказ.Параметры.ДатаНачала, ФорматнаяСтрокаДаты);
		СекцияПриказ.Параметры.ДатаОкончания 			= Формат(СекцияПриказ.Параметры.ДатаОкончания, ФорматнаяСтрокаДаты);
		СекцияПриказ.Параметры.ДатаНачалаОплаты 		= Формат(СекцияПриказ.Параметры.ДатаНачалаОплаты, ФорматнаяСтрокаДаты);
		СекцияПриказ.Параметры.ДатаОкончанияОплаты 		= Формат(СекцияПриказ.Параметры.ДатаОкончанияОплаты, ФорматнаяСтрокаДаты);
		
		ЗаполняемыеСвойства = "ФамилияИО,Подразделение,Должность,ТабельныйНомер";
		КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(ДанныеЛН.Сотрудник);
		ЗаполнитьЗначенияСвойств(СекцияПриказ.Параметры, КадровыеДанныеСотрудника, ЗаполняемыеСвойства);
		
		ФИОВПадеже = КадровыеДанныеСотрудника.ФИОПолные;
		ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(КадровыеДанныеСотрудника.ФИОПолные), 2, ФИОВПадеже, КадровыеДанныеСотрудника.Пол);
		СекцияПриказ.Параметры.ФамилияИО = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(ФИОВПадеже);
		
		СекцияПриказ.Параметры.СотрудникРасшифровкаПодписи = КадровыеДанныеСотрудника.ИОФамилия;
		
		ДокументРезультат.Вывести(СекцияПриказ);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат,
		НомерСтрокиНачало, ОбъектыПечати, ДанныеЛН.Ссылка);

	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеДляРасчетаСреднегоЗаработка

// Возвращает описание документов с полями ПараметрыРасчета и ДанныеРасчетаСреднего.
// 	ПараметрыРасчета - см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС()
// 	ДанныеРасчетаСреднего - см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ДанныеРасчетаСреднегоЗаработкаФСС.
//
// Параметры:
//	 МассивСсылок 		- массив ссылок на документ БольничныйЛист, по которым получаем данные.
// 
// Возвращаемое значение: Соответствие, ключ - ссылка на больничный лист, значение - Структура("ПараметрыРасчета,ДанныеРасчетаСреднего").
//
Функция ДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(МассивСсылок) Экспорт
	
	ДанныеДокументов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);

	УчетПособийСоциальногоСтрахования.СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(Запрос.МенеджерВременныхТаблиц, МассивСсылок);
	  	
	СоздатьВТКадровыеДанныеСотрудниковБольничныхЛистов(Запрос, МассивСсылок);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Сотрудник,
	|	ДанныеДокументов.ДатаНачалаСобытия,
	|	ДанныеДокументов.ПрименятьПредельнуюВеличину,
	|	ДанныеДокументов.ИспользоватьДниБолезниУходаЗаДетьми,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	ДанныеДокументов.УчитыватьЗаработокПредыдущихСтрахователей,
	|	ДанныеДокументов.РасчетПоПравилам2010Года,
	|	ДанныеДокументов.ДоляНеполногоВремени,
	|	ДанныеДокументов.РайонныйКоэффициентРФ,
	|	ДанныеДокументов.МинимальныйРазмерОплатыТрудаРФ,
	|	ВТКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ПО ДанныеДокументов.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокументов.ДатаНачалаСобытия = ВТКадровыеДанныеСотрудников.Период";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТаблицыДанныхОСреднем = УчетПособийСоциальногоСтрахования.ТаблицыДанныхСреднегоЗаработкаФСС("БольничныйЛист", МассивСсылок);
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС();
			ЗаполнитьЗначенияСвойств(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, Выборка);

			ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, ТаблицыДанныхОСреднем);
			
			ДанныеДокументов.Вставить(Выборка.Ссылка, ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеДокументов;
	
КонецФункции

#КонецОбласти

Функция ДатаНаступленияСтраховогоСлучая(Ссылка) Экспорт
	
	ДатаНаступленияСтраховогоСлучая = Неопределено;
	
	Если ЗначениеЗаполнено(Ссылка) И ТипЗнч(Ссылка) = Тип("ДокументСсылка.БольничныйЛист") Тогда
		ДатаНаступленияСтраховогоСлучая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ДатаНачалаСобытия");
	КонецЕсли;
	
	Возврат ДатаНаступленияСтраховогоСлучая;
	
КонецФункции

Процедура СоздатьВТДанныеБольничныхЛистов(МенеджерВременныхТаблиц, ИмяВТОтборов = "ВТБольничныеЛисты", ИмяПоляСодержащегоСсылку = "Ссылка") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТБольничныеЛисты.Ссылка,
	|	БольничныйЛист.ПрименятьЛьготыПриНачисленииПособия КАК ВыплатаЗаСчетФедеральногоБюджета,
	|	БольничныйЛист.ДатаНачала,
	|	БольничныйЛист.ДатаОкончания,
	|	БольничныйЛист.УсловияИсчисленияКод1,
	|	БольничныйЛист.УсловияИсчисленияКод2,
	|	БольничныйЛист.УсловияИсчисленияКод3,
	|	БольничныйЛист.СтажЛет КАК СтажБезНестраховыхПериодовЛет,
	|	БольничныйЛист.СтажМесяцев КАК СтажБезНестраховыхПериодовСтажМесяцев,
	|	БольничныйЛист.СтажРасширенныйЛет КАК ЛетСтажа,
	|	БольничныйЛист.СтажРасширенныйМесяцев КАК МесяцевСтажа,
	|	ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка) КАК ИсправленныйДокумент
	|ПОМЕСТИТЬ ВТРеквизитыБольничныхЛистов
	|ИЗ
	|	#ВТБольничныеЛисты# КАК ВТБольничныеЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|		ПО ВТБольничныеЛисты.#ИмяПоляСодержащегоСсылку# = БольничныйЛист.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(НачисленияБольничныйЛист.Результат) КАК ЗаСчетФСС,
	|	ДанныеДокументов.Ссылка
	|ПОМЕСТИТЬ ВТНачислено
	|ИЗ
	|	ВТРеквизитыБольничныхЛистов КАК ДанныеДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.Начисления КАК НачисленияБольничныйЛист
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПланВидовРасчетаНачисления
	|			ПО (ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста)
	|					ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание)
	|					ИЛИ ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве))
	|				И НачисленияБольничныйЛист.Начисление = ПланВидовРасчетаНачисления.Ссылка
	|		ПО ДанныеДокументов.ИсправленныйДокумент = НачисленияБольничныйЛист.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРеквизитыБольничныхЛистов.Ссылка,
	|	ВТРеквизитыБольничныхЛистов.ВыплатаЗаСчетФедеральногоБюджета,
	|	ВТРеквизитыБольничныхЛистов.ДатаНачала КАК ДатаНачалаОплаты,
	|	ВТРеквизитыБольничныхЛистов.ДатаОкончания КАК ДатаОкончанияОплаты,
	|	ВТРеквизитыБольничныхЛистов.УсловияИсчисленияКод1,
	|	ВТРеквизитыБольничныхЛистов.УсловияИсчисленияКод2,
	|	ВТРеквизитыБольничныхЛистов.УсловияИсчисленияКод3,
	|	ВТРеквизитыБольничныхЛистов.СтажБезНестраховыхПериодовЛет,
	|	ВТРеквизитыБольничныхЛистов.СтажБезНестраховыхПериодовСтажМесяцев,
	|	ВТРеквизитыБольничныхЛистов.ЛетСтажа,
	|	ВТРеквизитыБольничныхЛистов.МесяцевСтажа,
	|	ВТРеквизитыБольничныхЛистов.ИсправленныйДокумент,
	|	ЕСТЬNULL(ВТНачислено.ЗаСчетФСС, 0) КАК ЗаСчетФСС
	|ПОМЕСТИТЬ ВТДанныеБольничныхЛистов
	|ИЗ
	|	ВТРеквизитыБольничныхЛистов КАК ВТРеквизитыБольничныхЛистов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислено КАК ВТНачислено
	|		ПО ВТРеквизитыБольничныхЛистов.Ссылка = ВТНачислено.Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТБольничныеЛисты#", ИмяВТОтборов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяПоляСодержащегоСсылку#", ИмяПоляСодержащегоСсылку);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПолныеПраваНаДокумент() Экспорт
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, ЧтениеНачисленнойЗарплатыРасширенная", , Ложь);
	
КонецФункции

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт

	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок) Экспорт
	ДанныеДляРегистрацииВУчете = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.ДатаНачала,
	|	БольничныйЛист.ДатаОкончания,
	|	БольничныйЛист.ДатаНачалаОплаты,
	|	БольничныйЛист.ДатаОкончанияОплаты,
	|	БольничныйЛист.ВидОплатыПособия.ВидСтажаПФР2014 КАК ВидСтажаНаПериодСОплатой,
	|	БольничныйЛист.ВидНеоплачиваемогоВремени.ВидСтажаПФР2014 КАК ВидСтажаНаПериодБезОплаты,
	|	БольничныйЛист.Ссылка
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В(&МассивСсылок)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеДляРегистрацииВУчетеПоДокументу = УчетСтажаПФР.ДанныеДляРегистрацииВУчетеСтажаПФР();
		ДанныеДляРегистрацииВУчете.Вставить(Выборка.Ссылка, ДанныеДляРегистрацииВУчетеПоДокументу);
		
		ВидСтажаНаПериодБезОплаты = Выборка.ВидСтажаНаПериодБезОплаты;
		Если (Выборка.ДатаНачала < Выборка.ДатаНачалаОплаты
			Или Выборка.ДатаНачалаОплаты = '00010101')
			И ЗначениеЗаполнено(ВидСтажаНаПериодБезОплаты) Тогда
			
			ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
			ОписаниеПериода.Сотрудник = Выборка.Сотрудник;
			ОписаниеПериода.ДатаНачалаПериода = Выборка.ДатаНачала;
			ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончания;
			ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
			
			Если Выборка.ДатаНачалаОплаты = '00010101' Тогда
				ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончания;
			Иначе
				ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаНачалаОплаты - 86400;
			КонецЕсли;
			
			РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
													 					
			УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", ВидСтажаНаПериодБезОплаты);
		КонецЕсли;
		
		Если Выборка.ДатаНачалаОплаты <> '00010101' Тогда
			ВидСтажаНаПериодСОплатой = Выборка.ВидСтажаНаПериодСОплатой;

			ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
			ОписаниеПериода.Сотрудник = Выборка.Сотрудник;
			ОписаниеПериода.ДатаНачалаПериода = Выборка.ДатаНачалаОплаты;
			ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончанияОплаты;
			ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.Болезнь;

			РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
														 					
			УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", ВидСтажаНаПериодСОплатой);
		КонецЕсли;
		
		Если Выборка.ДатаОкончания > Выборка.ДатаОкончанияОплаты
			И Выборка.ДатаОкончанияОплаты <> '00010101'
			И ЗначениеЗаполнено(ВидСтажаНаПериодБезОплаты) Тогда
			
			ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
			ОписаниеПериода.Сотрудник = Выборка.Сотрудник;
			ОписаниеПериода.ДатаНачалаПериода = Выборка.ДатаОкончанияОплаты + 86400;
			ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончания;
			ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
			
			РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
									 					
			УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", ВидСтажаНаПериодБезОплаты);
		КонецЕсли;
		
	КонецЦикла;

	Возврат ДанныеДляРегистрацииВУчете;
														
КонецФункции

#Область ПериодыУходаЗаДетьми

Процедура ЗаполнитьДанныеУчетаПериодовУходаЗаБольнымиДетьми(РеквизитыДляПроведения, ДанныеДляПроведения)
	
	ПериодыУходаЗаРодственниками = УчетПособийСоциальногоСтрахованияРасширенный.ПустаяТаблицаДвиженийПериодовУходаЗаБольнымиРодственниками();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПериодыУходаЗаБольнымиРодственниками.Период,
	|	ПериодыУходаЗаБольнымиРодственниками.ФизическоеЛицо,
	|	ПериодыУходаЗаБольнымиРодственниками.Родственник,
	|	ПериодыУходаЗаБольнымиРодственниками.СлучайУходаЗаБольнымРебенком,
	|	-ПериодыУходаЗаБольнымиРодственниками.КоличествоДней КАК КоличествоДней,
	|	-ПериодыУходаЗаБольнымиРодственниками.ОплаченоДней КАК ОплаченоДней,
	|	ПериодыУходаЗаБольнымиРодственниками.НачалоПериода,
	|	ПериодыУходаЗаБольнымиРодственниками.ОкончаниеПериода,
	|	ПериодыУходаЗаБольнымиРодственниками.НачалоПериодаОплаты,
	|	ПериодыУходаЗаБольнымиРодственниками.ОкончаниеПериодаОплаты
	|ИЗ
	|	РегистрНакопления.ПериодыУходаЗаБольнымиРодственниками КАК ПериодыУходаЗаБольнымиРодственниками
	|ГДЕ
	|	ПериодыУходаЗаБольнымиРодственниками.Регистратор = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.ИсправленныйДокумент);
	
	ДвиженияИсправленногоДокумента = Запрос.Выполнить().Выбрать();
	
	Пока ДвиженияИсправленногоДокумента.Следующий() Цикл
		
		НоваяСтрока = ПериодыУходаЗаРодственниками.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДвиженияИсправленногоДокумента);
		
	КонецЦикла;
	
	Если Не РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком
		И Не РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым Тогда
		
		Если ПериодыУходаЗаРодственниками.Количество() > 0 Тогда
			ДанныеДляПроведения.Вставить("ПериодыУходаЗаРодственниками", ПериодыУходаЗаРодственниками);
		КонецЕсли;
		
		Возврат;

	КонецЕсли; 
	
	Если РеквизитыДляПроведения.НазначитьПособие Тогда
		ДатаНачалаОплаты = РеквизитыДляПроведения.ДатаНачалаОплаты;
		ДатаОкончанияОплаты = РеквизитыДляПроведения.ДатаОкончанияОплаты;
	Иначе
		ДатаНачалаОплаты = Неопределено;
		ДатаОкончанияОплаты = Неопределено;
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
		СлучайУходаЗаБольнымРебенком = РеквизитыДляПроведения.СлучайУходаЗаБольнымРебенком;
	Иначе
		СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДляПроведения.РодственникЗаКоторымОсуществляетсяУход1) Тогда
		ДатаНачала = ?(ЗначениеЗаполнено(РеквизитыДляПроведения.ДатаНачалаРодственник1), РеквизитыДляПроведения.ДатаНачалаРодственник1, РеквизитыДляПроведения.ДатаНачала);
		ДатаОкончания = ?(ЗначениеЗаполнено(РеквизитыДляПроведения.ДатаОкончанияРодственник1), РеквизитыДляПроведения.ДатаОкончанияРодственник1, РеквизитыДляПроведения.ДатаОкончания);
		ДобавитьПериодыУходаЗаРодственником(ПериодыУходаЗаРодственниками, РеквизитыДляПроведения.ФизическоеЛицо, СлучайУходаЗаБольнымРебенком, РеквизитыДляПроведения.РодственникЗаКоторымОсуществляетсяУход1, ДатаНачала, ДатаОкончания, ДатаНачалаОплаты, ДатаОкончанияОплаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДляПроведения.РодственникЗаКоторымОсуществляетсяУход2) Тогда
		ДатаНачала = ?(ЗначениеЗаполнено(РеквизитыДляПроведения.ДатаНачалаРодственник2), РеквизитыДляПроведения.ДатаНачалаРодственник2, РеквизитыДляПроведения.ДатаНачала);
		ДатаОкончания = ?(ЗначениеЗаполнено(РеквизитыДляПроведения.ДатаОкончанияРодственник2), РеквизитыДляПроведения.ДатаОкончанияРодственник2, РеквизитыДляПроведения.ДатаОкончания);
		ДобавитьПериодыУходаЗаРодственником(ПериодыУходаЗаРодственниками, РеквизитыДляПроведения.ФизическоеЛицо, СлучайУходаЗаБольнымРебенком, РеквизитыДляПроведения.РодственникЗаКоторымОсуществляетсяУход2, ДатаНачала, ДатаОкончания, ДатаНачалаОплаты, ДатаОкончанияОплаты);
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ПериодыУходаЗаРодственниками", ПериодыУходаЗаРодственниками);
	
КонецПроцедуры

Процедура ДобавитьПериодыУходаЗаРодственником(ПериодыУходаЗаДетьми, ФизическоеЛицо, СлучайУходаЗаБольнымРебенком, Родственник, ДатаНачала, ДатаОкончания, ДатаНачалаОплаты, ДатаОкончанияОплаты)
	
	ОписаниеПериодовУходаЗаРодственником = ОписаниеПериодовУходаЗаРодственником(ДатаНачала, ДатаОкончания, ДатаНачалаОплаты, ДатаОкончанияОплаты);
	
	Для каждого ОписаниеПериода Из ОписаниеПериодовУходаЗаРодственником Цикл
		
		ПериодУхода = ПериодыУходаЗаДетьми.Добавить();
		ПериодУхода.ФизическоеЛицо = ФизическоеЛицо;
		ПериодУхода.Родственник = Родственник;
		ПериодУхода.СлучайУходаЗаБольнымРебенком = СлучайУходаЗаБольнымРебенком;
		
		ПериодУхода.Период = ОписаниеПериода.НачалоПериода;
		ПериодУхода.КоличествоДней = ОписаниеПериода.КоличествоДней;
		ПериодУхода.ОплаченоДней = ОписаниеПериода.ОплаченоДней;
		ПериодУхода.НачалоПериода = ОписаниеПериода.НачалоПериода;
		ПериодУхода.ОкончаниеПериода = ОписаниеПериода.ОкончаниеПериода;
		ПериодУхода.НачалоПериодаОплаты = ОписаниеПериода.НачалоПериодаОплаты;
		ПериодУхода.ОкончаниеПериодаОплаты = ОписаниеПериода.ОкончаниеПериодаОплаты;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеПериодовУходаЗаРодственником(ДатаНачала, ДатаОкончания, ДатаНачалаОплаты, ДатаОкончанияОплаты)
	
	ОписаниеПериодовУходаЗаРодственником = Новый Массив;
	
	Если Год(ДатаНачала) = Год(ДатаОкончания) Тогда	
		ОписаниеПериода = ОписаниеПериодаУходаЗаБольнымРодственником(ДатаНачала, ДатаОкончания, ДатаНачалаОплаты, ДатаОкончанияОплаты);
		ОписаниеПериодовУходаЗаРодственником.Добавить(ОписаниеПериода);
	Иначе
		
		НачалоПериодаПервогоГода = НачалоДня(ДатаНачала);
		ОкончаниеПериодаПервогоГода = КонецГода(ДатаНачала);
		
		ОписаниеПериода = ОписаниеПериодаУходаЗаБольнымРодственником(НачалоПериодаПервогоГода, ОкончаниеПериодаПервогоГода, ДатаНачалаОплаты, ДатаОкончанияОплаты);
		ОписаниеПериодовУходаЗаРодственником.Добавить(ОписаниеПериода);
		
		НачалоПериодаВторогоГода = НачалоГода(ДатаОкончания);
		ОкончаниеПериодаВторогоГода = КонецДня(ДатаОкончания);
		
		ОписаниеПериода = ОписаниеПериодаУходаЗаБольнымРодственником(НачалоПериодаВторогоГода, ОкончаниеПериодаВторогоГода, ДатаНачалаОплаты, ДатаОкончанияОплаты);
		ОписаниеПериодовУходаЗаРодственником.Добавить(ОписаниеПериода);
		
	КонецЕсли;
	
	Возврат ОписаниеПериодовУходаЗаРодственником;
	
КонецФункции

Функция ОписаниеПериодаУходаЗаБольнымРодственником(Знач НачалоПериода, Знач ОкончаниеПериода, Знач НачалоПериодаОплаты, Знач ОкончаниеПериодаОплаты)
	
	ДлинаСуток = УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
	ПособиеОплачивается = ЗначениеЗаполнено(НачалоПериодаОплаты) И ЗначениеЗаполнено(ОкончаниеПериодаОплаты);
	
	ОписаниеПериода = Новый Структура("НачалоПериода,ОкончаниеПериода,НачалоПериодаОплаты,ОкончаниеПериодаОплаты,ОплаченоДней,КоличествоДней");
	ОписаниеПериода.НачалоПериода = НачалоПериода;
	ОписаниеПериода.ОкончаниеПериода = ОкончаниеПериода;
	ОписаниеПериода.КоличествоДней = (КонецДня(ОкончаниеПериода) - НачалоДня(НачалоПериода) + 1)/ ДлинаСуток;
	ОписаниеПериода.НачалоПериодаОплаты = '00010101';
	ОписаниеПериода.ОкончаниеПериодаОплаты = '00010101';
	ОписаниеПериода.ОплаченоДней = 0;
	
	Если ПособиеОплачивается Тогда
		НачалоПериодаОплаты = Макс(НачалоПериодаОплаты, НачалоПериода);
		ОкончаниеПериодаОплаты = Мин(ОкончаниеПериодаОплаты, ОкончаниеПериода);
		Если НачалоПериодаОплаты <= ОкончаниеПериодаОплаты Тогда
			ОписаниеПериода.НачалоПериодаОплаты = НачалоПериодаОплаты;
			ОписаниеПериода.ОкончаниеПериодаОплаты = ОкончаниеПериодаОплаты;
			ОписаниеПериода.ОплаченоДней = (КонецДня(ОкончаниеПериодаОплаты) - НачалоДня(НачалоПериодаОплаты) + 1)/ ДлинаСуток;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеПериода;
	
КонецФункции

#КонецОбласти

#Область НачальноеЗаполнениеИОбновлениеИБ

// Процедура заполняет процент доплаты до среднего заработка за дни нетрудоспособности.
//
Процедура ЗаполнитьПроцентДоплатыЗаДниНетрудоспособности() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныйЛист.Ссылка
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.ДоплачиватьДоСреднегоЗаработка = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ПроцентДоплатыЗаДниНетрудоспособности = 100;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;	                
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает структуру с описанием данного вида документа.
//
Функция ОписаниеДокумента() Экспорт

	ОписаниеДокумента = ЗарплатаКадрыРасширенныйКлиентСервер.СтруктураОписанияДокумента();
	
	ОписаниеДокумента.КраткоеНазваниеИменительныйПадеж	 = НСтр("ru = 'болезнь'");
	ОписаниеДокумента.КраткоеНазваниеРодительныйПадеж	 = НСтр("ru = 'болезни'");
	ОписаниеДокумента.ИмяРеквизитаСотрудник				 = "Сотрудник";
	ОписаниеДокумента.ИмяРеквизитаОтсутствующийСотрудник = "Сотрудник";
	ОписаниеДокумента.ИмяРеквизитаДатаНачалаСобытия		 = "ДатаНачала";
	ОписаниеДокумента.ИмяРеквизитаДатаОкончанияСобытия	 = "ДатаОкончания";
	
	Возврат ОписаниеДокумента;

КонецФункции

#КонецОбласти

#Область ЭЛН

// Возвращает соответствие, в котором ключ - имя поля больничного, а значение - имя поля ЭЛН.
Функция СоответствиеПолейЭЛН() Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	
	СоответствиеПолей.Вставить("НомерПервичногоЛисткаНетрудоспособности",      "PREV_LN_CODE");
	СоответствиеПолей.Вставить("ПредоставленДубликатЛисткаНетрудоспособности", "DUPLICATE_FLAG");
	СоответствиеПолей.Вставить("ДатаВыдачиЛисткаНетрудоспособности",           "LN_DATE");
	
	СоответствиеПолей.Вставить("НаименованиеМедицинскойОрганизации", "LPU_NAME");
	СоответствиеПолей.Вставить("АдресМедицинскойОрганизации",        "LPU_ADDRESS");
	СоответствиеПолей.Вставить("ОГРНМедицинскойОрганизации",         "LPU_OGRN");
	
	СоответствиеПолей.Вставить("КодПричиныНетрудоспособности",               "REASON1");
	СоответствиеПолей.Вставить("ДополнительныйКодПричиныНетрудоспособности", "REASON2");
	СоответствиеПолей.Вставить("ВторойКодПричиныНетрудоспособности",         "REASON3");
	
	СоответствиеПолей.Вставить("НомерЛисткаПоОсновномуМестуРаботы",          "PARENT_CODE");
	СоответствиеПолей.Вставить("ДатаИзмененияКодаПричиныНетрудоспособности", "DATE1");
	СоответствиеПолей.Вставить("ДатаОкончанияПутевки",                       "DATE2");
	
	СоответствиеПолей.Вставить("НомерПутевки",   "VOUCHER_NO");
	СоответствиеПолей.Вставить("ОГРН_Санатория", "VOUCHER_OGRN");
	
	СоответствиеПолей.Вставить("ПоУходуФИО1",               "SERV1_FIO");
	СоответствиеПолей.Вставить("ПоУходуРодственнаяСвязь1",  "SERV1_RELATION_CODE");
	СоответствиеПолей.Вставить("ПоУходуВозрастЛет1",        "SERV1_AGE");
	СоответствиеПолей.Вставить("ПоУходуВозрастМесяцев1",    "SERV1_MM");
	
	СоответствиеПолей.Вставить("ПоУходуФИО2",               "SERV2_FIO");
	СоответствиеПолей.Вставить("ПоУходуРодственнаяСвязь2",  "SERV2_RELATION_CODE");
	СоответствиеПолей.Вставить("ПоУходуВозрастЛет2",        "SERV2_AGE");
	СоответствиеПолей.Вставить("ПоУходуВозрастМесяцев2",    "SERV2_MM");
	
	СоответствиеПолей.Вставить("ПоставленаНаУчетВРанниеСрокиБеременности", "PREGN12W_FLAG");
	
	СоответствиеПолей.Вставить("ПериодНахожденияВСтационареСРебенкомС",  "HOSPITAL_DT1");
	СоответствиеПолей.Вставить("ПериодНахожденияВСтационареСРебенкомПо", "HOSPITAL_DT2");
	
	СоответствиеПолей.Вставить("ДатаНаправленияВБюроМСЭ",      "MSE_DT1");
	СоответствиеПолей.Вставить("ДатаРегистрацииДокументовМСЭ", "MSE_DT2");
	СоответствиеПолей.Вставить("ДатаОсвидетельствованияМСЭ",   "MSE_DT3");
	СоответствиеПолей.Вставить("ГруппаИнвалидности",           "MSE_INVALID_GROUP");
	
	СоответствиеПолей.Вставить("Хеш", "LN_HASH");
	
	Возврат СоответствиеПолей;
	
КонецФункции

// Возвращает таблицу с данными, необходимыми для выгрузки реестра ЭЛН.
Функция ДанныеДляРеестраЭЛН(Больничный = Неопределено, Реестр = Неопределено) Экспорт
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Больничный) Тогда
		Запрос.УстановитьПараметр("Ссылка", Больничный);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Больничный.Ссылка КАК Ссылка,
		|	Больничный.Сотрудник КАК Сотрудник,
		|	Больничный.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТБольничные
		|ИЗ
		|	Документ.БольничныйЛист КАК Больничный
		|ГДЕ
		|	Больничный.Ссылка = &Ссылка
		|	И Больничный.Хеш <> """"";
	ИначеЕсли Реестр <> Неопределено Тогда
		Запрос.УстановитьПараметр("Организация", Реестр.Организация);
		Запрос.УстановитьПараметр("ИсключаемыйДокумент", Реестр.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеестрСведенийУчтенных.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности
		|ПОМЕСТИТЬ УчтенныеЗаявления
		|ИЗ
		|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК РеестрСведенийУчтенных
		|ГДЕ
		|	РеестрСведенийУчтенных.Ссылка <> &ИсключаемыйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Больничный.Ссылка КАК Ссылка,
		|	Больничный.Сотрудник КАК Сотрудник,
		|	Больничный.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТБольничные
		|ИЗ
		|	Документ.БольничныйЛист КАК Больничный
		|ГДЕ
		|	Больничный.Проведен
		|	И НЕ Больничный.Ссылка В
		|				(ВЫБРАТЬ
		|					УчтенныеЗаявления.ЛистокНетрудоспособности
		|				ИЗ
		|					УчтенныеЗаявления КАК УчтенныеЗаявления)
		|	И Больничный.Организация = &Организация
		|	И Больничный.Хеш <> """"";
	Иначе
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	КатегорииПособийЗаСчетФСС = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КатегорииПособийЗаСчетФСС();
	Запрос.УстановитьПараметр("КатегорииПособийЗаСчетФСС", КатегорииПособийЗаСчетФСС);
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТБольничные.Ссылка КАК ЛистокНетрудоспособности,
	|	МИНИМУМ(БольничныйЛистНачисления.ДатаНачала) КАК ДатаНачалаОплатыФСС,
	|	МАКСИМУМ(БольничныйЛистНачисления.ДатаОкончания) КАК ДатаОкончанияОплатыФСС,
	|	СУММА(БольничныйЛистНачисления.Результат) КАК СуммаОплатыЗаСчетФСС
	|ПОМЕСТИТЬ ВТПериодыОплатыЗаСчетФСС
	|ИЗ
	|	ВТБольничные КАК ВТБольничные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.Начисления КАК БольничныйЛистНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|			ПО БольничныйЛистНачисления.Начисление = Начисления.Ссылка
	|		ПО ВТБольничные.Ссылка = БольничныйЛистНачисления.Ссылка
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииПособийЗаСчетФСС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТБольничные.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТБольничные.Ссылка КАК ЛистокНетрудоспособности,
	|	СУММА(БольничныйЛистНачисления.Результат) КАК СуммаОплатыЗаСчетРаботодателя
	|ПОМЕСТИТЬ ВТОплатаЗаСчетРаботодателя
	|ИЗ
	|	ВТБольничные КАК ВТБольничные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.Начисления КАК БольничныйЛистНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|			ПО БольничныйЛистНачисления.Начисление = Начисления.Ссылка
	|		ПО ВТБольничные.Ссылка = БольничныйЛистНачисления.Ссылка
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТБольничные.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТБольничные.Ссылка КАК ЛистокНетрудоспособности,
	|	СУММА(СреднийЗаработокФСС.Сумма) КАК БазаДляРасчетаСреднегоЗаработка
	|ПОМЕСТИТЬ ВТБазыДляРасчетаСреднегоЗаработка
	|ИЗ
	|	ВТБольничные КАК ВТБольничные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.СреднийЗаработокФСС КАК СреднийЗаработокФСС
	|		ПО ВТБольничные.Ссылка = СреднийЗаработокФСС.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТБольничные.Ссылка";
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТБольничные");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ИНН,СтраховойНомерПФР,ВидЗанятости");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БольничныйЛист.Ссылка КАК ЛистокНетрудоспособности,
	|	БольничныйЛист.Сотрудник КАК Сотрудник,
	|	БольничныйЛист.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	БольничныйЛист.ОсновноеМестоРаботы КАК ОсновноеМестоРаботы,
	|	БольничныйЛист.ПриступитьКРаботеС КАК ПриступитьКРаботеС,
	|	БольничныйЛист.УсловияИсчисленияКод1 КАК УсловияИсчисленияКод1,
	|	БольничныйЛист.УсловияИсчисленияКод2 КАК УсловияИсчисленияКод2,
	|	БольничныйЛист.УсловияИсчисленияКод3 КАК УсловияИсчисленияКод3,
	|	БольничныйЛист.ДатаАктаН1 КАК ДатаАктаН1,
	|	БольничныйЛист.ДатаНачалаРаботы КАК ДатаНачалаРаботы,
	|	БольничныйЛист.СтажЛет КАК СтажЛет,
	|	БольничныйЛист.СтажМесяцев КАК СтажМесяцев,
	|	БольничныйЛист.СтажРасширенныйЛет КАК СтажРасширенныйЛет,
	|	БольничныйЛист.СтажРасширенныйМесяцев КАК СтажРасширенныйМесяцев,
	|	БольничныйЛист.ДатаНачалаОплаты КАК ДатаНачалаОплаты,
	|	БольничныйЛист.ДатаОкончанияОплаты КАК ДатаОкончанияОплаты,
	|	БольничныйЛист.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
	|	ВЫБОР
	|		КОГДА БольничныйЛист.СреднийДневнойЗаработок > БольничныйЛист.МинимальныйСреднедневнойЗаработок
	|			ТОГДА БольничныйЛист.СреднийДневнойЗаработок
	|		ИНАЧЕ БольничныйЛист.МинимальныйСреднедневнойЗаработок
	|	КОНЕЦ КАК СреднийДневнойЗаработок,
	|	ВТБазыДляРасчетаСреднегоЗаработка.БазаДляРасчетаСреднегоЗаработка КАК БазаДляРасчетаСреднегоЗаработка,
	|	ВТПериодыОплатыЗаСчетФСС.ДатаНачалаОплатыФСС КАК ДатаНачалаОплатыФСС,
	|	ВТПериодыОплатыЗаСчетФСС.ДатаОкончанияОплатыФСС КАК ДатаОкончанияОплатыФСС,
	|	ВТПериодыОплатыЗаСчетФСС.СуммаОплатыЗаСчетФСС КАК СуммаОплатыЗаСчетФСС,
	|	ВТОплатаЗаСчетРаботодателя.СуммаОплатыЗаСчетРаботодателя КАК СуммаОплатыЗаСчетРаботодателя,
	|	КадровыеДанныеСотрудников.ИНН КАК ИНН,
	|	КадровыеДанныеСотрудников.СтраховойНомерПФР КАК СНИЛС,
	|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	БольничныйЛист.Хеш КАК Хеш
	|ИЗ
	|	ВТБольничные КАК ВТБольничные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|		ПО ВТБольничные.Ссылка = БольничныйЛист.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ВТБольничные.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ВТБольничные.Период = КадровыеДанныеСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОплатаЗаСчетРаботодателя КАК ВТОплатаЗаСчетРаботодателя
	|		ПО ВТБольничные.Ссылка = ВТОплатаЗаСчетРаботодателя.ЛистокНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазыДляРасчетаСреднегоЗаработка КАК ВТБазыДляРасчетаСреднегоЗаработка
	|		ПО ВТБольничные.Ссылка = ВТБазыДляРасчетаСреднегоЗаработка.ЛистокНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыОплатыЗаСчетФСС КАК ВТПериодыОплатыЗаСчетФСС
	|		ПО ВТБольничные.Ссылка = ВТПериодыОплатыЗаСчетФСС.ЛистокНетрудоспособности";
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Вызывается после загрузки ЭЛН.
Процедура ПослеЗагрузкиЭЛН(ДокументОбъект, ДанныеИзСервиса) Экспорт
	
	ЗаполнитьМедицинскуюОрганизацию(ДокументОбъект);
	ЗаполнитьРодственников(ДокументОбъект);
	ЗаполнитьДаты(ДокументОбъект);
	ЗаполнитьПричинуНетрудоспособностиИСлучайУходаЗаРебенком(ДокументОбъект);
	
КонецПроцедуры

// Заполнение медицинской организации.
Процедура ЗаполнитьМедицинскуюОрганизацию(Документ)
	Если Не ЗначениеЗаполнено(Документ.ОГРНМедицинскойОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МедицинскиеОрганизации.Ссылка
	|ИЗ
	|	Справочник.МедицинскиеОрганизации КАК МедицинскиеОрганизации
	|ГДЕ
	|	МедицинскиеОрганизации.ОГРН = &ОГРН";
	Запрос.УстановитьПараметр("ОГРН", Документ.ОГРНМедицинскойОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Документ.МедицинскаяОрганизация = Выборка.Ссылка;
	Иначе
		МедОрганизация = Справочники.МедицинскиеОрганизации.СоздатьЭлемент();
		МедОрганизация.Наименование = Документ.НаименованиеМедицинскойОрганизации;
		МедОрганизация.ОГРН         = Документ.ОГРНМедицинскойОрганизации;
		МедОрганизация.Адрес        = Документ.АдресМедицинскойОрганизации;
		МедОрганизация.Записать();
		Документ.МедицинскаяОрганизация = МедОрганизация.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение родственников.
Процедура ЗаполнитьРодственников(Документ)
	Если Не ЗначениеЗаполнено(Документ.ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	НомераИФИОРодственников = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РодственникиФизическихЛиц.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РодственникиФизическихЛиц.НаименованиеСлужебное ПОДОБНО &НаименованиеСлужебное1
	|			ТОГДА 1
	|		КОГДА РодственникиФизическихЛиц.НаименованиеСлужебное ПОДОБНО &НаименованиеСлужебное2
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерРодственника,
	|	РодственникиФизическихЛиц.СтепеньРодства КАК СтепеньРодства,
	|	РодственникиФизическихЛиц.ДатаРождения КАК ДатаРождения
	|ИЗ
	|	Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
	|ГДЕ
	|	РодственникиФизическихЛиц.Владелец = &Владелец
	|	И (РодственникиФизическихЛиц.НаименованиеСлужебное ПОДОБНО &НаименованиеСлужебное1
	|			ИЛИ РодственникиФизическихЛиц.НаименованиеСлужебное ПОДОБНО &НаименованиеСлужебное2)
	|	И РодственникиФизическихЛиц.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Владелец", Документ.ФизическоеЛицо);
	
	Для НомерРодственника = 1 По 2 Цикл
		ФИО = "";
		Если ЗначениеЗаполнено(Документ["ПоУходуФИО"+НомерРодственника]) Тогда
			МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Документ["ПоУходуФИО"+НомерРодственника]);
			Для Каждого Инициал Из МассивСлов Цикл
				Если Не ПустаяСтрока(Инициал) Тогда
					ФИО = ?(ФИО = "", "", ФИО + " ") + ТРег(СокрЛП(Инициал));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ФИО = "" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РодственникиФизическихЛиц.НаименованиеСлужебное ПОДОБНО &НаименованиеСлужебное" + НомерРодственника, "ЛОЖЬ");
		Иначе
			НомераИФИОРодственников.Вставить(НомерРодственника, ФИО);
			Запрос.УстановитьПараметр("НаименованиеСлужебное" + НомерРодственника, ФизическиеЛицаЗарплатаКадры.НаименованиеСлужебное(ФИО) + "%");
		КонецЕсли;
	КонецЦикла;
	
	Если НомераИФИОРодственников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого КлючИЗначение Из НомераИФИОРодственников Цикл
		РодственникиНайденныеПоФИО = Таблица.Скопировать(Новый Структура("НомерРодственника", КлючИЗначение.Ключ));
		ЗаполнитьРодственника(Документ, КлючИЗначение.Ключ, КлючИЗначение.Значение, РодственникиНайденныеПоФИО);
	КонецЦикла;
КонецПроцедуры

// Заполнение родственника.
Процедура ЗаполнитьРодственника(Документ, НомерРодственника, ФИОРодственника, РодственникиНайденныеПоФИО)
	Родственник = Неопределено;
	Количество = РодственникиНайденныеПоФИО.Количество();
	Если Количество = 0 Тогда
		
		РодственникОбъект = Справочники.РодственникиФизическихЛиц.СоздатьЭлемент();
		РодственникОбъект.Владелец              = Документ.ФизическоеЛицо;
		РодственникОбъект.Наименование          = ФИОРодственника;
		РодственникОбъект.НаименованиеСлужебное = ФизическиеЛицаЗарплатаКадры.НаименованиеСлужебное(ФИОРодственника);
		РодственникОбъект.СтепеньРодства        = СтепеньРодства(ФИОРодственника, Документ["ПоУходуРодственнаяСвязь" + НомерРодственника]);
		РодственникОбъект.Записать();
		
		Родственник = РодственникОбъект.Ссылка;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлен родственник сотрудника %1. Нажмите на сообщение, чтобы заполнить степень родства и дату рождения.'"),
			ФИОРодственника);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Родственник, "1", "1");
		
	ИначеЕсли Количество = 1 Тогда
		
		Родственник = РодственникиНайденныеПоФИО[0].Ссылка;
		
	Иначе
		
		СтепеньРодства = СтепеньРодства(ФИОРодственника, Документ["ПоУходуРодственнаяСвязь" + НомерРодственника]);
		Найденные = РодственникиНайденныеПоФИО.НайтиСтроки(Новый Структура("СтепеньРодства", СтепеньРодства));
		Если Найденные.Количество() = 1 Тогда
			Родственник = Найденные[0].Ссылка;
		Иначе
			ВозрастМесяцев = Документ["ПоУходуВозрастЛет" + НомерРодственника] * 12 + Документ["ПоУходуВозрастМесяцев" + НомерРодственника];
			ОжидаемаяДатаРождения = ДобавитьМесяц(Документ.ДатаНачалаСобытия, -ВозрастМесяцев);
			МинимальнаяРазница = Неопределено;
			Для Каждого ДанныеРодственника Из РодственникиНайденныеПоФИО Цикл
				Если Не ЗначениеЗаполнено(ДанныеРодственника.ДатаРождения) Тогда
					Продолжить;
				КонецЕсли;
				Разница = (ОжидаемаяДатаРождения - ДанныеРодственника.ДатаРождения);
				Разница = ?(Разница < 0, -Разница, Разница);
				Если МинимальнаяРазница = Неопределено Или МинимальнаяРазница > Разница Тогда
					МинимальнаяРазница = Разница;
					Родственник = ДанныеРодственника.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Документ["РодственникЗаКоторымОсуществляетсяУход" + НомерРодственника] = Родственник;
КонецПроцедуры

// Определение степени родства "с" родственником по связи "от" родственника.
Функция СтепеньРодства(ФИО, СвязьОтРодственника)
	Если СвязьОтРодственника = "38" Или СвязьОтРодственника = "39" Тогда // Отец, Мать.
		Инициалы = СтрРазделить(ФИО, " ", Ложь);
		Если Инициалы.Количество() > 2 Тогда
			Инициалы.Удалить(0);
			Инициалы.Удалить(0);
			Пол = СотрудникиКлиентСервер.ОпределитьПолПоОтчеству(СтрСоединить(Инициалы, " "));
			Если Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				Возврат Справочники.СтепениРодстваФизическихЛиц.НайтиПоКоду("05"); // Сын
			ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				Возврат Справочники.СтепениРодстваФизическихЛиц.НайтиПоКоду("06"); // Дочь
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Заполнение дат оплаты и освобождения от работы.
Процедура ЗаполнитьДаты(Документ)
	
	Если ЗначениеЗаполнено(Документ.ОсвобождениеДатаНачала1) Тогда
		Документ.ДатаНачала    = Документ.ОсвобождениеДатаНачала1;
		Документ.ДатаОкончания = Документ.ОсвобождениеДатаОкончания1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.ОсвобождениеДатаНачала2)
		И ЗначениеЗаполнено(Документ.ОсвобождениеДатаОкончания2) Тогда
		Если ЗначениеЗаполнено(Документ.ДатаНачала) Тогда
			Документ.ДатаНачала = Мин(Документ.ДатаНачала, Документ.ОсвобождениеДатаНачала2);
		Иначе
			Документ.ДатаНачала = Документ.ОсвобождениеДатаНачала2;
		КонецЕсли;
		Документ.ДатаОкончания = Макс(Документ.ДатаОкончания, Документ.ОсвобождениеДатаОкончания2);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.ОсвобождениеДатаНачала3)
		И ЗначениеЗаполнено(Документ.ОсвобождениеДатаОкончания3) Тогда
		Если ЗначениеЗаполнено(Документ.ДатаНачала) Тогда
			Документ.ДатаНачала = Мин(Документ.ДатаНачала, Документ.ОсвобождениеДатаНачала3);
		Иначе
			Документ.ДатаНачала = Документ.ОсвобождениеДатаНачала3;
		КонецЕсли;
		Документ.ДатаОкончания = Макс(Документ.ДатаОкончания, Документ.ОсвобождениеДатаОкончания3);
	КонецЕсли;
	
	Документ.ДатаНачалаОплаты    = Документ.ДатаНачала;
	Документ.ДатаОкончанияОплаты = Документ.ДатаОкончания;
	
КонецПроцедуры

// Заполняет причину нетрудоспособности и случай ухода за ребенком.
Процедура ЗаполнитьПричинуНетрудоспособностиИСлучайУходаЗаРебенком(Документ)
	Стационар = ЗначениеЗаполнено(Документ.ПериодНахожденияВСтационареСРебенкомС);
	
	Если Документ.КодПричиныНетрудоспособности = "01"
		Или Документ.КодПричиныНетрудоспособности = "02" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "03" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Карантин;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "04"
		Или Документ.КодПричиныНетрудоспособности = "07" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "05" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "06" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Протезирование;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "08" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "09" Тогда
		
		ПоУходуВозраст = Неопределено;
		Если ЗначениеЗаполнено(Документ.ПоУходуВозрастЛет1) Тогда
			ПоУходуВозраст = Документ.ПоУходуВозрастЛет1;
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ.ПоУходуВозрастЛет2) Тогда
			ПоУходуВозраст = Мин(ПоУходуВозраст, Документ.ПоУходуВозрастЛет2);
		КонецЕсли;
		
		Если ПоУходуВозраст <> Неопределено Тогда
			Если ПоУходуВозраст < 7 Тогда
				Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
				Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
					Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетВСтационаре,
					Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно);
			ИначеЕсли ПоУходуВозраст >= 7 И ПоУходуВозраст < 15 Тогда
				Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
				Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
					Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре,
					Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно);
			ИначеЕсли ПоУходуВозраст >= 15 Тогда
				Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым;
			КонецЕсли;
		Иначе
			Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		КонецЕсли;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "10"
		Или Документ.КодПричиныНетрудоспособности = "11" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "12" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно);
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "13" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомВСтационаре,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно);
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "14" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		Документ.СлучайУходаЗаБольнымРебенком = ?(Стационар,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииВСтационаре,
			Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно);
		
	ИначеЕсли Документ.КодПричиныНетрудоспособности = "15" Тогда
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		Документ.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриВИЧ;
		
	Иначе
		Документ.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
