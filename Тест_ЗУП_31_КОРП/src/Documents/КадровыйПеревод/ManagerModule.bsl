#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Сторнирует документ по учетам. Используется подсистемой исправления документов.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений исправляющего документа в которую будут добавлены сторно стоки.
//  Регистратор				 - ДокументСсылка				 - Документ регистратор исправления (документ исправление).
//  ИсправленныйДокумент	 - ДокументСсылка				 - Исправленный документ движения которого будут сторнированы.
//  СтруктураВидовУчета		 - Структура					 - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//  					Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//  ДополнительныеПараметры	 - Структура					 - Структура со свойствами:
//  					* ИсправлениеВТекущемПериоде - Булево - Истина когда исправление выполняется в периоде регистрации исправленного документа.
//						* ОтменаДокумента - Булево - Истина когда исправление вызвано документом СторнированиеНачислений.
//  					* ПериодРегистрации	- Дата - Период регистрации документа регистратора исправления.
// 
// Возвращаемое значение:
//  Булево - "Истина" если сторнирование выполнено этой функцией, "Ложь" если специальной процедуры не предусмотрено.
//
Функция СторнироватьПоУчетам(Движения, Регистратор, ИсправленныйДокумент, СтруктураВидовУчета, ДополнительныеПараметры) Экспорт
	
	УправлениеШтатнымРасписанием.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.КадровыйПеревод;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическоеЛицоВШапке(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты", , Ложь) Тогда
		
		// Бронирование позиции
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
		КомандаПечати.Идентификатор = "ПФ_MXL_ПодтверждениеБронированияПозиции";
		КомандаПечати.Представление = НСтр("ru = 'Подтверждение брони'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ФункциональныеОпции = "ИспользоватьБронированиеПозиций";
			
		// Приказ о переводе
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказов";
		КомандаПечати.Идентификатор = "ПФ_MXL_Т5";
		КомандаПечати.Представление = НСтр("ru = 'Приказ о переводе (Т-5)'");
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДобавитьКомандуПечатиСлужебногоКонтракта(КомандыПечати);
	КонецЕсли;

КонецПроцедуры

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	Если КадровыйУчетРасширенный.ПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Тогда
		
		ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
			КомандыСозданияДокументов, Метаданные.Документы.КадровыйПеревод);
		
	КонецЕсли; 
	
КонецФункции

Процедура РассчитатьФОТПоДокументу(ДокументОбъект) Экспорт
	
	Если НЕ ДокументОбъект.ИзменитьНачисления Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ТаблицаПоказателей = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
	ИзвестныеКадровыеДанные = ПлановыеНачисленияСотрудников.СоздатьТаблицаКадровыхДанных();
	
	КадровыеДанныеСотрудника = ИзвестныеКадровыеДанные.Добавить();
	КадровыеДанныеСотрудника.Сотрудник = ДокументОбъект.Сотрудник;
	КадровыеДанныеСотрудника.Период = ДокументОбъект.ДатаНачала;
	КадровыеДанныеСотрудника.Организация = ДокументОбъект.ОбособленноеПодразделение;
					
	Если ДокументОбъект.ИзменитьПодразделениеИДолжность Тогда
		КадровыеДанныеСотрудника.Подразделение = ДокументОбъект.Подразделение;
		КадровыеДанныеСотрудника.КоличествоСтавок = ДокументОбъект.КоличествоСтавок;
	КонецЕсли;
	
	Если ДокументОбъект.ИзменитьГрафикРаботы Тогда
		КадровыеДанныеСотрудника.ГрафикРаботы = ДокументОбъект.ГрафикРаботы;
	КонецЕсли; 
			
	СписокНачислений = Новый Массив;
	Для Каждого СтрокаНачисления Из ДокументОбъект.Начисления Цикл
		
		Если СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеНачисления = ТаблицаНачислений.Добавить();
		ДанныеНачисления.Сотрудник = ДокументОбъект.Сотрудник;
		ДанныеНачисления.Период = ДокументОбъект.ДатаНачала;
		ДанныеНачисления.Начисление = СтрокаНачисления.Начисление;
		ДанныеНачисления.ДокументОснование = СтрокаНачисления.ДокументОснование;
		ДанныеНачисления.Размер = СтрокаНачисления.Размер;
		
		ПоказателиНачисления = ДокументОбъект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", СтрокаНачисления.ИдентификаторСтрокиВидаРасчета));
		Для Каждого СтрокаПоказателя Из ПоказателиНачисления Цикл
			ДанныеПоказателя = ТаблицаПоказателей.Добавить();
			ДанныеПоказателя.Сотрудник = ДокументОбъект.Сотрудник;
			ДанныеПоказателя.Период = ДокументОбъект.ДатаНачала;
			ДанныеПоказателя.Показатель = СтрокаПоказателя.Показатель;
			ДанныеПоказателя.ДокументОснование = СтрокаНачисления.ДокументОснование;
			ДанныеПоказателя.Значение = СтрокаПоказателя.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	РассчитанныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ТаблицаНачислений, ТаблицаПоказателей, ИзвестныеКадровыеДанные);	
		
	Для Каждого ОписаниеНачисления Из РассчитанныеДанные.ПлановыйФОТ Цикл
		
		Отбор = Новый Структура("Начисление, ДокументОснование", ОписаниеНачисления.Начисление, ОписаниеНачисления.ДокументОснование);
		СтрокиДокумента = ДокументОбъект.Начисления.НайтиСтроки(Отбор);
		Если СтрокиДокумента.Количество() > 0 Тогда
			СтрокиДокумента[0].Размер = ОписаниеНачисления.ВкладВФОТ;
		КонецЕсли; 
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаполнитьФОТВДвиженияхЗагружаемогоДокумента(ДокументОбъект.Движения.ПлановыеНачисления, ДокументОбъект.Начисления);
	
КонецПроцедуры

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная, ЧтениеДанныхДляНачисленияЗарплатыРасширенная", , Ложь);
	
КонецФункции	

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ДанныеДляПроверкиОграничений.Подразделение = Объект.Подразделение;
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок, ПоСпискуСотрудников = Ложь) Экспорт
	ДанныеДляРегистрацииВУчете = Новый Соответствие;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка КАК Ссылка,
		|	КадровыйПеревод.Сотрудник КАК Сотрудник,
		|	КадровыйПеревод.ДатаНачала,
		|	КадровыйПеревод.ДатаОкончания,
		|	КадровыйПеревод.Подразделение,
		|	КадровыйПеревод.ОбособленноеПодразделение КАК Организация,
		|	КадровыйПеревод.Должность,
		|	КадровыйПеревод.ДолжностьПоШтатномуРасписанию,
		|	КадровыйПеревод.ВидЗанятости,
		|	КадровыйПеревод.КоличествоСтавок,
		|	КадровыйПеревод.ГрафикРаботы,
		|	КадровыйПеревод.ИзменитьПодразделениеИДолжность,
		|	КадровыйПеревод.ИзменитьГрафикРаботы,
		|	КадровыйПеревод.НаПериодПереводаСохранятьЛьготныйСтажПФР,
		|	КадровыйПеревод.ВидСтажаПФР,
		|	КадровыйПеревод.Территория
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.Ссылка В(&МассивСсылок)
		|	И (КадровыйПеревод.ИзменитьПодразделениеИДолжность
		|			ИЛИ КадровыйПеревод.ИзменитьГрафикРаботы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Сотрудник";
	
	Если ПоСпискуСотрудников Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком.Сотрудники");
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ДанныеДляРегистрацииВУчетеПоДокументу = УчетСтажаПФР.ДанныеДляРегистрацииВУчетеСтажаПФР();
		ДанныеДляРегистрацииВУчете.Вставить(Выборка.Ссылка, ДанныеДляРегистрацииВУчетеПоДокументу); 
		
		Пока Выборка.Следующий() Цикл
			
			ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
			ОписаниеПериода.Сотрудник = Выборка.Сотрудник;
			ОписаниеПериода.ДатаНачалаПериода = Выборка.ДатаНачала;
			ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончания;
			ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.Перемещение;
			ОписаниеПериода.ВидЗанятости = Выборка.ВидЗанятости;
				
			РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
			
			Если Выборка.НаПериодПереводаСохранятьЛьготныйСтажПФР Тогда						
				Если Выборка.ИзменитьПодразделениеИДолжность Тогда
					УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Организация", Выборка.Организация);
					УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Подразделение", Выборка.Подразделение);
					УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Территория", Выборка.Территория);
				КонецЕсли;	
				
				УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", Выборка.ВидСтажаПФР);					
			Иначе
				Если Выборка.ИзменитьПодразделениеИДолжность Тогда
					УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Должность", Выборка.Должность);
					УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ДолжностьПоШтатномуРасписанию", Выборка.ДолжностьПоШтатномуРасписанию);
					УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "КоличествоСтавок", Выборка.КоличествоСтавок);
					УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Организация", Выборка.Организация);
					УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Подразделение", Выборка.Подразделение);
					УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Территория", Выборка.Территория);
				КонецЕсли;		
				
				Если Выборка.ИзменитьГрафикРаботы Тогда
					УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ГрафикРаботы", Выборка.ГрафикРаботы);
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла; 
		
	КонецЦикла;	

	Возврат ДанныеДляРегистрацииВУчете;
														
КонецФункции	

Функция РеквизитыДляПроведения(ДокументОбъект)
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КадровыйПеревод") Тогда
		РеквизитыДляПроведения.ДатаНачала = ДокументОбъект.ДатаНачала;
	Иначе
		РеквизитыДляПроведения.ДатаНачала = ДокументОбъект.ДатаСобытия;
	КонецЕсли;
	
	РеквизитыДляПроведения.Ссылка = ДокументСсылка;
	РеквизитыДляПроведения.ИсправленныйДокумент = ДокументОбъект.ИсправленныйДокумент;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, ИсправленныйДокумент, ДатаНачала");	
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

#Область ПодготовкаДанныхДляПроведенияДокумента

Функция ДанныеДляПроведения(ДокументСсылка, ТолькоБронированиеПозиции, НачисленияУтверждены)
	
	ДанныеДляПроведения = Новый Структура; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка,
		|	Сотрудники.Ссылка.Организация КАК Организация,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ДатаНачала КАК ДатаНачала,
		|	Сотрудники.ДатаОкончания КАК ДатаОкончания,
		|	Сотрудники.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Сотрудники.ИзменитьПодразделениеИДолжность КАК ИзменитьПодразделениеИДолжность,
		|	Сотрудники.ИзменитьВидЗанятости КАК ИзменитьВидЗанятости,
		|	Сотрудники.ИзменитьГрафикРаботы КАК ИзменитьГрафикРаботы,
		|	Сотрудники.ИзменитьНачисления КАК ИзменитьНачисления,
		|	Сотрудники.ИзменитьЕжегодныеОтпуска КАК ИзменитьЕжегодныеОтпуска,
		|	Сотрудники.ИзменитьАванс КАК ИзменитьАванс,
		|	Сотрудники.ИзменитьТерриторию КАК ИзменитьТерриторию,
		|	Сотрудники.ИзменитьЛьготы КАК ИзменитьЛьготы,
		|	Сотрудники.ИзменитьСведенияОДоговореКонтракте КАК ИзменитьСведенияОДоговореКонтракте,
		|	Сотрудники.Ссылка.НачисленияУтверждены КАК НачисленияУтверждены,
		|	Сотрудники.Подразделение КАК Подразделение,
		|	Сотрудники.Должность КАК Должность,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	Сотрудники.ВидЗанятости КАК ВидЗанятости,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия,
		|	Сотрудники.КоличествоСтавок КАК КоличествоСтавок,
		|	Сотрудники.ГрафикРаботы КАК ГрафикРаботы,
		|	Сотрудники.СпособРасчетаАванса КАК СпособРасчетаАванса,
		|	Сотрудники.Аванс КАК Аванс,
		|	Сотрудники.ПричинаПеревода КАК ПричинаПеревода,
		|	Сотрудники.ОснованиеПеревода КАК ОснованиеПеревода,
		|	Сотрудники.Ссылка.Руководитель КАК Руководитель,
		|	Сотрудники.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	Сотрудники.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Сотрудники.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	Сотрудники.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Сотрудники.ПорядокРасчетаСтоимостиЕдиницыВремени КАК ПорядокРасчетаСтоимостиЕдиницыВремени,
		|	Сотрудники.СовокупнаяТарифнаяСтавка КАК СовокупнаяТарифнаяСтавка,
		|	Сотрудники.ВидТарифнойСтавки КАК ВидТарифнойСтавки,
		|	Сотрудники.РазрядКатегория КАК РазрядКатегория,
		|	Сотрудники.ПКУ КАК ПКУ,
		|	Сотрудники.СменаВидаДоговора КАК СменаВидаДоговора,
		|	Сотрудники.Ссылка.ВидДоговора КАК ВидДоговора,
		|	Сотрудники.ТрудовойДоговорНомер КАК ТрудовойДоговорНомер,
		|	Сотрудники.ТрудовойДоговорДата КАК ТрудовойДоговорДата,
		|	Сотрудники.СрочныйДоговор КАК СрочныйДоговор,
		|	Сотрудники.СезонныйДоговор КАК СезонныйДоговор,
		|	Сотрудники.ДатаЗавершенияТрудовогоДоговора КАК ДатаЗавершенияТрудовогоДоговора,
		|	Сотрудники.ОснованиеСрочногоДоговора КАК ОснованиеСрочногоДоговора,
		|	Сотрудники.СрокЗаключенияДоговора КАК СрокЗаключенияДоговора,
		|	Сотрудники.Ссылка.ОснованиеПредставителяНанимателя КАК ОснованиеПредставителяНанимателя,
		|	Сотрудники.СпособПоступленияНаСлужбу КАК СпособПоступленияНаСлужбу,
		|	Сотрудники.ПоступлениеНаСлужбуВпервые КАК ПоступлениеНаСлужбуВпервые,
		|	Сотрудники.ВидАктаГосоргана КАК ВидАктаГосоргана,
		|	Сотрудники.ОборудованиеРабочегоМеста КАК ОборудованиеРабочегоМеста,
		|	Сотрудники.ИныеУсловияДоговора КАК ИныеУсловияДоговора,
		|	Сотрудники.Грейд КАК Грейд,
		|	Сотрудники.НаПериодПереводаСохранятьЛьготныйСтажПФР КАК НаПериодПереводаСохранятьЛьготныйСтажПФР,
		|	Сотрудники.ВидСтажаПФР КАК ВидСтажаПФР,
		|	Сотрудники.Территория КАК Территория,
		|	Сотрудники.Ссылка.Номер КАК Номер,
		|	Сотрудники.Ссылка.Дата КАК Дата
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Документ.КадровыйПеревод КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка = &Ссылка";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком.Сотрудники");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.Сотрудник КАК Сотрудник,",
			"Сотрудники.Сотрудник КАК Сотрудник, Сотрудники.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,");
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1),
		|	Сотрудники.Сотрудник
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)";
		
	// Таблица для формирования времени регистрации документа.
	СотрудникиДаты = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Аванс,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	Сотрудники.Подразделение,
		|	Сотрудники.Должность,
		|	Сотрудники.КоличествоСтавок,
		|	Сотрудники.ВидСобытия,
		|	Сотрудники.ГрафикРаботы,
		|	Сотрудники.СпособРасчетаАванса,
		|	Сотрудники.ВидЗанятости,
		|	Сотрудники.ВидДоговора,
		|	Сотрудники.ФизическоеЛицо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ИзменитьПодразделениеИДолжность";
		
	// Таблица для формирования кадровых движений.
	КадровыеДвижения = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("КадровыеДвижения", КадровыеДвижения);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	Сотрудники.ИзменитьНачисления КАК ИзменитьНачисления,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.Действие КАК Действие,
		|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	Начисления.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА Начисления.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	Начисления.Размер КАК Размер,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Начисления.ХарактерНачисления КАК ХарактерНачисления,
		|	ВЫБОР
		|		КОГДА Начисления.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить)
		|			ТОГДА ЛОЖЬ
		|		КОГДА Начисления.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИспользуетсяПоОкончании
		|ИЗ
		|	Документ.КадровыйПеревод.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Начисления.Ссылка = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод.Начисления КАК КадровыйПереводНачисленияНеОтмененные
		|		ПО Начисления.Ссылка = КадровыйПереводНачисленияНеОтмененные.Ссылка
		|			И Начисления.НомерСтроки <> КадровыйПереводНачисленияНеОтмененные.НомерСтроки
		|			И Начисления.Начисление = КадровыйПереводНачисленияНеОтмененные.Начисление
		|			И Начисления.ДокументОснование = КадровыйПереводНачисленияНеОтмененные.ДокументОснование
		|			И (КадровыйПереводНачисленияНеОтмененные.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|	И Начисления.Ссылка.НачисленияУтверждены
		|	И ВЫБОР
		|			КОГДА Начисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|				ТОГДА ИСТИНА
		|			КОГДА КадровыйПереводНачисленияНеОтмененные.Начисление ЕСТЬ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ДатаНачала,
		|	Сотрудники.ИзменитьЛьготы,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ,
		|	Сотрудники.Сотрудник,
		|	Льготы.Льгота,
		|	Льготы.Действие,
		|	Льготы.ИдентификаторСтрокиВидаРасчета,
		|	Льготы.ДокументОснование,
		|	ВЫБОР
		|		КОГДА Льготы.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	Льготы.Размер,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация,
		|	NULL,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ВЫБОР
		|					КОГДА Льготы.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить)
		|						ТОГДА ЛОЖЬ
		|					КОГДА Льготы.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|	КОНЕЦ
		|ИЗ
		|	Документ.КадровыйПеревод.Льготы КАК Льготы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Льготы.Ссылка = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод.Льготы КАК КадровыйПереводЛьготыНеОтмененные
		|		ПО Льготы.Ссылка = КадровыйПереводЛьготыНеОтмененные.Ссылка
		|			И Льготы.НомерСтроки <> КадровыйПереводЛьготыНеОтмененные.НомерСтроки
		|			И Льготы.Льгота = КадровыйПереводЛьготыНеОтмененные.Льгота
		|			И Льготы.ДокументОснование = КадровыйПереводЛьготыНеОтмененные.ДокументОснование
		|			И (КадровыйПереводЛьготыНеОтмененные.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
		|ГДЕ
		|	Льготы.Ссылка = &Ссылка
		|	И Льготы.Ссылка.НачисленияУтверждены
		|	И ВЫБОР
		|			КОГДА Льготы.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|				ТОГДА ИСТИНА
		|			КОГДА КадровыйПереводЛьготыНеОтмененные.Льгота ЕСТЬ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Начисления.Ссылка = Сотрудники.Ссылка", "ПО Начисления.Ссылка = Сотрудники.Ссылка И Начисления.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Начисления.НомерСтроки <> КадровыйПереводНачисленияНеОтмененные.НомерСтроки", "И Начисления.НомерСтроки <> КадровыйПереводНачисленияНеОтмененные.НомерСтроки И Начисления.ИдентификаторСтрокиСотрудника = КадровыйПереводНачисленияНеОтмененные.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Льготы.Ссылка = Сотрудники.Ссылка", "ПО Льготы.Ссылка = Сотрудники.Ссылка И Льготы.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Льготы.НомерСтроки <> КадровыйПереводЛьготыНеОтмененные.НомерСтроки", "И Льготы.НомерСтроки <> КадровыйПереводЛьготыНеОтмененные.НомерСтроки И Льготы.ИдентификаторСтрокиСотрудника = КадровыйПереводЛьготыНеОтмененные.ИдентификаторСтрокиСотрудника");
	КонецЕсли;
	
	// Таблица для формирования плановых начислений.
	ПлановыеНачисленияДляРеестраПриказов = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Сотрудники.ИзменитьНачисления
		|			ТОГДА ИСТИНА
		|		КОГДА Сотрудники.Организация <> Сотрудники.ОбособленноеПодразделение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИзменитьНачисления,
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Организация КАК Организация,
		|	Показатели.Показатель КАК Показатель,
		|	Показатели.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	Начисления.ДокументОснование КАК ДокументОснование,
		|	Показатели.Значение КАК Значение,
		|	Начисления.Действие КАК Действие,
		|	Сотрудники.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Начисления.ХарактерНачисления КАК ХарактерНачисления
		|ПОМЕСТИТЬ ВТПоказателиНачислений
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод.Показатели КАК Показатели
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод.Начисления КАК Начисления
		|			ПО Показатели.Ссылка = Начисления.Ссылка
		|				И Показатели.ИдентификаторСтрокиВидаРасчета = Начисления.ИдентификаторСтрокиВидаРасчета
		|		ПО Сотрудники.Ссылка = Показатели.Ссылка
		|ГДЕ
		|	Сотрудники.Ссылка = &Ссылка
		|	И Сотрудники.НачисленияУтверждены
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка,
		|	ВЫБОР
		|		КОГДА Сотрудники.ИзменитьЛьготы
		|			ТОГДА ИСТИНА
		|		КОГДА Сотрудники.Организация <> Сотрудники.ОбособленноеПодразделение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	Сотрудники.ДатаНачала,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Организация,
		|	Показатели.Показатель,
		|	Показатели.ИдентификаторСтрокиВидаРасчета,
		|	Льготы.ДокументОснование,
		|	Показатели.Значение,
		|	Льготы.Действие,
		|	Сотрудники.ОбособленноеПодразделение,
		|	NULL
		|ИЗ
		|	Документ.КадровыйПеревод.Показатели КАК Показатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод.Льготы КАК Льготы
		|		ПО Показатели.Ссылка = Льготы.Ссылка
		|			И (Показатели.Ссылка = &Ссылка)
		|			И Показатели.ИдентификаторСтрокиВидаРасчета = Льготы.ИдентификаторСтрокиВидаРасчета
		|			И (Льготы.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Показатели.Ссылка = Сотрудники.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Показатели.ДатаСобытия КАК ДатаСобытия,
		|	Показатели.ИзменитьНачисления КАК ИзменитьНачисления,
		|	Показатели.ДействуетДо КАК ДействуетДо,
		|	Показатели.Сотрудник КАК Сотрудник,
		|	Показатели.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Показатели.Организация КАК Организация,
		|	Показатели.Показатель КАК Показатель,
		|	Показатели.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	Показатели.ДокументОснование КАК ДокументОснование,
		|	Показатели.Значение КАК Значение,
		|	Показатели.Действие КАК Действие,
		|	Показатели.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Показатели.Ссылка КАК Ссылка,
		|	Показатели.ХарактерНачисления КАК ХарактерНачисления
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ
		|	ВТПоказателиНачислений КАК Показатели
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.ДатаНачала,
		|	ВЫБОР
		|		КОГДА Сотрудники.ИзменитьНачисления
		|			ТОГДА ИСТИНА
		|		КОГДА Сотрудники.Организация <> Сотрудники.ОбособленноеПодразделение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Организация,
		|	Показатели.Показатель,
		|	Показатели.ИдентификаторСтрокиВидаРасчета,
		|	НЕОПРЕДЕЛЕНО,
		|	Показатели.Значение,
		|	ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.ПустаяСсылка),
		|	Сотрудники.ОбособленноеПодразделение,
		|	Показатели.Ссылка,
		|	NULL
		|ИЗ
		|	Документ.КадровыйПеревод.Показатели КАК Показатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Показатели.Ссылка = Сотрудники.Ссылка
		|			И (Показатели.ИдентификаторСтрокиВидаРасчета = 0)
		|			И (Сотрудники.НачисленияУтверждены)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиНачислений КАК ПоказателиНачислений
		|		ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка
		|			И (Сотрудники.ДатаНачала = ПоказателиНачислений.ДатаСобытия)
		|			И Показатели.Показатель = ПоказателиНачислений.Показатель
		|ГДЕ
		|	Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|	И ПоказателиНачислений.Показатель ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Показатели.ДатаСобытия КАК ДатаСобытия,
		|	Показатели.ДействуетДо КАК ДействуетДо,
		|	Показатели.Сотрудник КАК Сотрудник,
		|	Показатели.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Показатели.Организация КАК Организация,
		|	Показатели.Показатель КАК Показатель,
		|	Показатели.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	Показатели.ДокументОснование КАК ДокументОснование,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Показатели.Организация <> Показатели.ОбособленноеПодразделение
		|				ТОГДА 0
		|			ИНАЧЕ Показатели.Значение
		|		КОНЕЦ) КАК Значение,
		|	Показатели.Действие КАК Действие,
		|	Показатели.Ссылка КАК Ссылка,
		|	Показатели.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Показатели.ХарактерНачисления КАК ХарактерНачисления,
		|	Показатели.ИзменитьНачисления КАК ИзменитьНачисления
		|ИЗ
		|	ВТПоказатели КАК Показатели
		|
		|СГРУППИРОВАТЬ ПО
		|	Показатели.ДатаСобытия,
		|	Показатели.ДействуетДо,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.Организация,
		|	Показатели.Показатель,
		|	Показатели.ИдентификаторСтрокиВидаРасчета,
		|	Показатели.ДокументОснование,
		|	Показатели.Действие,
		|	Показатели.Ссылка,
		|	Показатели.ОбособленноеПодразделение,
		|	Показатели.ХарактерНачисления,
		|	Показатели.ИзменитьНачисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Показатели.ДатаСобытия,
		|	Показатели.ДействуетДо,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.ОбособленноеПодразделение,
		|	Показатели.Показатель,
		|	Показатели.ИдентификаторСтрокиВидаРасчета,
		|	Показатели.ДокументОснование,
		|	МАКСИМУМ(Показатели.Значение),
		|	Показатели.Действие,
		|	Показатели.Ссылка,
		|	Показатели.ОбособленноеПодразделение,
		|	NULL,
		|	Показатели.ИзменитьНачисления
		|ИЗ
		|	ВТПоказатели КАК Показатели
		|ГДЕ
		|	Показатели.Организация <> Показатели.ОбособленноеПодразделение
		|
		|СГРУППИРОВАТЬ ПО
		|	Показатели.ДатаСобытия,
		|	Показатели.ДействуетДо,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.ОбособленноеПодразделение,
		|	Показатели.ИдентификаторСтрокиВидаРасчета,
		|	Показатели.Показатель,
		|	Показатели.Действие,
		|	Показатели.ДокументОснование,
		|	Показатели.Ссылка,
		|	Показатели.ИзменитьНачисления,
		|	Показатели.ОбособленноеПодразделение";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.Сотрудник,", "Сотрудники.Сотрудник, Сотрудники.ИдентификаторСтрокиСотрудника,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.Сотрудник КАК Сотрудник,", "Сотрудники.Сотрудник КАК Сотрудник, Сотрудники.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Показатели.Сотрудник,", "Показатели.Сотрудник, Показатели.ИдентификаторСтрокиСотрудника,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Показатели.Сотрудник КАК Сотрудник,", "Показатели.Сотрудник КАК Сотрудник, Показатели.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Начисления.Ссылка = Сотрудники.Ссылка", "ПО Начисления.Ссылка = Сотрудники.Ссылка И Начисления.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Льготы.Ссылка = Сотрудники.Ссылка", "ПО Льготы.Ссылка = Сотрудники.Ссылка И Льготы.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Начисления.Ссылка", "ПО Показатели.Ссылка = Начисления.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Начисления.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Льготы.Ссылка", "ПО Показатели.Ссылка = Льготы.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Льготы.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Сотрудники.Ссылка", "ПО Показатели.Ссылка = Сотрудники.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Сотрудники.Ссылка = Показатели.Ссылка", "ПО Сотрудники.Ссылка = Показатели.Ссылка И Сотрудники.ИдентификаторСтрокиСотрудника = Показатели.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка", "ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = ПоказателиНачислений.ИдентификаторСтрокиСотрудника");
	КонецЕсли;
	
	// Таблица для формирования значений показателей.
	ЗначенияПоказателейДляРеестраПриказов = Запрос.Выполнить().Выгрузить();
	
	// Данные для Реестра кадровых приказов
	ДанныеРеестраКадровыхПриказов = КадровыйУчетРасширенный.ТаблицаРеестраКадровыхПриказов();
	
	НомерПриказа = "";
	ДатаПриказа = Дата(1, 1, 1);
	
	Номер = 1;
	ДополнятьВозвратнымиСобытиями = Ложь;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК Период,
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиСоСменойВидаДоговора
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.СменаВидаДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиСоСменойВидаДоговора.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудникиСоСменойВидаДоговора КАК СотрудникиСоСменойВидаДоговора";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТаблицаВидовДоговора = Новый ТаблицаЗначений;
	Иначе
		
		ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиСоСменойВидаДоговора");
		
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, "ВидДоговора");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанные.Период КАК Период,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.ВидДоговора КАК ВидДоговора
			|ИЗ
			|	ВТКадровыеДанныеСотрудников КАК КадровыеДанные";
		
		ТаблицаВидовДоговора = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Ссылка КАК ДокументОснование,
		|	Сотрудники.Номер КАК НомерПриказа,
		|	Сотрудники.Дата КАК ДатаПриказа,
		|	Сотрудники.Подразделение КАК Подразделение,
		|	Сотрудники.Должность КАК Должность,
		|	Сотрудники.ВидДоговора КАК ВидДоговора,
		|	Сотрудники.ДатаНачала КАК Дата,
		|	Сотрудники.СменаВидаДоговора КАК СменаВидаДоговора,
		|	Сотрудники.ВидСобытия КАК ВидСобытия,
		|	Сотрудники.РазрядКатегория КАК Разряд,
		|	Сотрудники.ДатаОкончания КАК ДатаОкончания,
		|	Сотрудники.Организация КАК Организация
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Сотрудник", Выборка.Сотрудник);
		
		Начисления = ПлановыеНачисленияДляРеестраПриказов.Скопировать(СтруктураПоиска);
		Показатели = ЗначенияПоказателейДляРеестраПриказов.Скопировать(СтруктураПоиска);
		
		Если Выборка.СменаВидаДоговора Тогда
			
			НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
			НоваяСтрока.Номер = Номер;
			Номер = Номер + 1;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Дата		= НачалоДня(Выборка.Дата) - 1;
			НоваяСтрока.ВидСобытия	= Перечисления.ВидыКадровыхСобытий.Увольнение;
			
			НоваяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			НоваяСтрока.Должность = Справочники.Должности.ПустаяСсылка();
			
			Если ТаблицаВидовДоговора.Количество() > 0 Тогда
				
				СтрокаСотрудника = ТаблицаВидовДоговора.Найти(Выборка.Сотрудник, "Сотрудник");
				Если СтрокаСотрудника <> Неопределено Тогда
					НоваяСтрока.ВидДоговора = СтрокаСотрудника.ВидДоговора;
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
			НоваяСтрока.Номер = Номер;
			Номер = Номер + 1;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
			
			НоваяСтрока.ТарифнаяСтавкаНадбавка = КадровыйУчетРасширенный.ПредставлениеТарифнойСтавкиНадбавки(Начисления, Показатели, Истина);
			
			НомерПриказа = Выборка.НомерПриказа;
			ДатаПриказа = Выборка.ДатаПриказа;
			
		Иначе
			
			НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
			НоваяСтрока.Номер = Номер;
			Номер = Номер + 1;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.ТарифнаяСтавкаНадбавка = КадровыйУчетРасширенный.ПредставлениеТарифнойСтавкиНадбавки(Начисления, Показатели, Истина);
			
			НомерПриказа = Выборка.НомерПриказа;
			ДатаПриказа = Выборка.ДатаПриказа;
			
			Если ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
				ДополнятьВозвратнымиСобытиями = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДополнятьВозвратнымиСобытиями Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Ссылка,
			|	Сотрудники.Номер КАК НомерПриказа,
			|	Сотрудники.Дата КАК ДатаПриказа,
			|	Сотрудники.ДатаОкончания КАК ДатаОкончания,
			|	РеестрКадровыхПриказов.Сотрудник КАК Сотрудник,
			|	МАКСИМУМ(РеестрКадровыхПриказов.Дата) КАК Дата
			|ПОМЕСТИТЬ ВТПредыдущиеПриказы
			|ИЗ
			|	РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
			|		ПО РеестрКадровыхПриказов.Сотрудник = Сотрудники.Сотрудник
			|			И РеестрКадровыхПриказов.Дата < Сотрудники.ДатаОкончания
			|			И РеестрКадровыхПриказов.Регистратор <> Сотрудники.Ссылка
			|ГДЕ
			|	Сотрудники.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
			|
			|СГРУППИРОВАТЬ ПО
			|	Сотрудники.Ссылка,
			|	Сотрудники.Номер,
			|	Сотрудники.Дата,
			|	Сотрудники.ДатаОкончания,
			|	РеестрКадровыхПриказов.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПредыдущиеПриказы.Ссылка КАК ДокументОснование,
			|	ПредыдущиеПриказы.НомерПриказа КАК НомерПриказа,
			|	ПредыдущиеПриказы.ДатаПриказа КАК ДатаПриказа,
			|	ДОБАВИТЬКДАТЕ(ПредыдущиеПриказы.ДатаОкончания, ДЕНЬ, 1) КАК Дата,
			|	РеестрКадровыхПриказов.Сотрудник КАК Сотрудник,
			|	РеестрКадровыхПриказов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	РеестрКадровыхПриказов.Организация КАК Организация,
			|	РеестрКадровыхПриказов.Подразделение КАК Подразделение,
			|	РеестрКадровыхПриказов.Должность КАК Должность,
			|	РеестрКадровыхПриказов.Разряд КАК Разряд,
			|	РеестрКадровыхПриказов.ТарифнаяСтавкаНадбавка КАК ТарифнаяСтавкаНадбавка,
			|	РеестрКадровыхПриказов.ВидДоговора КАК ВидДоговора,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия
			|ИЗ
			|	ВТПредыдущиеПриказы КАК ПредыдущиеПриказы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
			|		ПО ПредыдущиеПриказы.Сотрудник = РеестрКадровыхПриказов.Сотрудник
			|			И ПредыдущиеПриказы.Дата = РеестрКадровыхПриказов.Дата";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
			НоваяСтрока.Номер = Номер;
			Номер = Номер + 1;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(ДатаПриказа, НомерПриказа);
	ДанныеРеестраКадровыхПриказов.ЗаполнитьЗначения(Основание, "Основание");
	
	ДанныеДляПроведения.Вставить("ДанныеРеестраКадровыхПриказов", ДанныеРеестраКадровыхПриказов);
	
	Если Не ТолькоБронированиеПозиции Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ДатаНачала КАК Период,
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Сотрудники.ВидЗанятости КАК ВидЗанятости,
			|	ВЫБОР
			|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
			|		ИНАЧЕ Сотрудники.ДатаОкончания
			|	КОНЕЦ КАК ДействуетДо
			|ИЗ
			|	ВТСотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.ИзменитьВидЗанятости";
			
		// Таблица для формирования кадровых движений.
		КадровыеДвижения = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("ДвиженияВидовЗанятости", КадровыеДвижения);
		
		Если НачисленияУтверждены Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Сотрудники.ДатаНачала КАК ДатаСобытия,
				|	ВЫБОР
				|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
				|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
				|		ИНАЧЕ Сотрудники.ДатаОкончания
				|	КОНЕЦ КАК ДействуетДо,
				|	Сотрудники.Сотрудник,
				|	Сотрудники.ГоловнаяОрганизация,
				|	Сотрудники.ВидСобытия,
				|	Сотрудники.Аванс,
				|	Сотрудники.СпособРасчетаАванса,
				|	Сотрудники.ФизическоеЛицо
				|ИЗ
				|	ВТСотрудники КАК Сотрудники
				|ГДЕ
				|	Сотрудники.ИзменитьАванс
				|	И Сотрудники.НачисленияУтверждены";
				
			// Таблица для формирования движений авансов.
			ПлановыеВыплаты = Запрос.Выполнить().Выгрузить();
			ДанныеДляПроведения.Вставить("ПлановыеВыплаты", ПлановыеВыплаты);
			
			ДанныеДляПроведения.Вставить("ПлановыеНачисления", ПлановыеНачисленияДляРеестраПриказов.Скопировать(Новый Структура("ИзменитьНачисления", Истина)));
			ДанныеДляПроведения.Вставить("ЗначенияПоказателей", ЗначенияПоказателейДляРеестраПриказов.Скопировать(Новый Структура("ИзменитьНачисления", Истина)));
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Сотрудники.ДатаНачала КАК ДатаСобытия,
				|	Сотрудники.Организация КАК Организация,
				|	Сотрудники.Сотрудник КАК Сотрудник,
				|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
				|	Показатели.Показатель КАК Показатель,
				|	ВЫБОР
				|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
				|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
				|		ИНАЧЕ Сотрудники.ДатаОкончания
				|	КОНЕЦ КАК ДействуетДо,
				|	ВЫБОР
				|		КОГДА Показатели.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК Применение
				|ИЗ
				|	Документ.КадровыйПеревод.Показатели КАК Показатели
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
				|		ПО Показатели.Ссылка = Сотрудники.Ссылка
				|			И (Сотрудники.НачисленияУтверждены)
				|			И (Сотрудники.ИзменитьНачисления
				|				ИЛИ Сотрудники.ИзменитьЛьготы)
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиНачислений КАК ПоказателиНачислений
				|		ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка
				|			И (Сотрудники.ДатаНачала = ПоказателиНачислений.ДатаСобытия)
				|			И Показатели.Показатель = ПоказателиНачислений.Показатель
				|ГДЕ
				|	Показатели.Ссылка = &Ссылка
				|	И Показатели.ИдентификаторСтрокиВидаРасчета = 0
				|	И Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
				|	И ПоказателиНачислений.Показатель ЕСТЬ NULL ";
				
			Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод")  Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Сотрудники.Ссылка", "ПО Показатели.Ссылка = Сотрудники.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка", "ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = ПоказателиНачислений.ИдентификаторСтрокиСотрудника");
			КонецЕсли;	
			
			// Таблица для формирования применения дополнительных показателей.
			ПрименениеДополнительныхПоказателей = Запрос.Выполнить().Выгрузить();
			ДанныеДляПроведения.Вставить("ПрименениеДополнительныхПоказателей", ПрименениеДополнительныхПоказателей);
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Сотрудники.ДатаНачала КАК ДатаСобытия,
				|	Сотрудники.Сотрудник КАК Сотрудник,
				|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
				|	Сотрудники.ПорядокРасчетаСтоимостиЕдиницыВремени КАК ПорядокРасчета,
				|	ВЫБОР
				|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
				|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
				|		ИНАЧЕ Сотрудники.ДатаОкончания
				|	КОНЕЦ КАК ДействуетДо
				|ИЗ
				|	ВТСотрудники КАК Сотрудники
				|ГДЕ
				|	Сотрудники.НачисленияУтверждены
				|	И (Сотрудники.ИзменитьНачисления
				|			ИЛИ Сотрудники.ИзменитьЛьготы)";
				
			// Таблица для формирования значений порядка пересчета тарифной ставки.
			ПорядокПересчетаТарифнойСтавки = Запрос.Выполнить().Выгрузить();
			ДанныеДляПроведения.Вставить("ПорядокПересчетаТарифнойСтавки", ПорядокПересчетаТарифнойСтавки);
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Сотрудники.ДатаНачала КАК ДатаСобытия,
				|	Сотрудники.Сотрудник КАК Сотрудник,
				|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
				|	Сотрудники.СовокупнаяТарифнаяСтавка КАК Значение,
				|	ВЫБОР
				|		КОГДА Сотрудники.СовокупнаяТарифнаяСтавка = 0
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
				|		ИНАЧЕ Сотрудники.ВидТарифнойСтавки
				|	КОНЕЦ КАК ВидТарифнойСтавки,
				|	ВЫБОР
				|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
				|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
				|		ИНАЧЕ Сотрудники.ДатаОкончания
				|	КОНЕЦ КАК ДействуетДо
				|ИЗ
				|	ВТСотрудники КАК Сотрудники
				|ГДЕ
				|	Сотрудники.НачисленияУтверждены
				|	И (Сотрудники.ИзменитьНачисления
				|			ИЛИ Сотрудники.ИзменитьЛьготы)";
			
			// Таблица для формирования значений совокупной тарифной ставки.
			ДанныеСовокупныхТарифныхСтавок = Запрос.Выполнить().Выгрузить();
			ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", ДанныеСовокупныхТарифныхСтавок);
			
		КонецЕсли;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.ДатаНачала КАК ДатаСобытия,
			|	ВЫБОР
			|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
			|		ИНАЧЕ Сотрудники.ДатаОкончания
			|	КОНЕЦ КАК ДействуетДо,
			|	Сотрудники.Сотрудник,
			|	Сотрудники.ГрафикРаботы,
			|	Сотрудники.ВидСобытия
			|ИЗ
			|	ВТСотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.ИзменитьГрафикРаботы";
			
		// Таблица для формирования истории графиков.
		ГрафикРаботыСотрудников = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("ГрафикРаботыСотрудников", ГрафикРаботыСотрудников);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ДатаНачала КАК ДатаСобытия,
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	ЕжегодныеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ВЫБОР
			|		КОГДА ЕжегодныеОтпуска.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСЕжегоднымиОтпусками.Отменить)
			|			ТОГДА 0
			|		ИНАЧЕ ЕжегодныеОтпуска.КоличествоДнейВГод
			|	КОНЕЦ КАК КоличествоДнейВГод,
			|	ВЫБОР
			|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
			|		ИНАЧЕ Сотрудники.ДатаОкончания
			|	КОНЕЦ КАК ДействуетДо,
			|	ВЫБОР
			|		КОГДА ЕжегодныеОтпуска.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСЕжегоднымиОтпусками.Отменить)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Используется,
			|	ВЫБОР
			|		КОГДА ЕжегодныеОтпуска.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСЕжегоднымиОтпусками.Отменить)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПересчетНеТребуется
			|ПОМЕСТИТЬ ВТДвижения
			|ИЗ
			|	Документ.КадровыйПеревод.ЕжегодныеОтпуска КАК ЕжегодныеОтпуска
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
			|		ПО ЕжегодныеОтпуска.Ссылка = Сотрудники.Ссылка
			|			И (Сотрудники.ИзменитьЕжегодныеОтпуска)
			|ГДЕ
			|	ЕжегодныеОтпуска.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДвижения.ДатаСобытия КАК ДатаСобытия,
			|	ВТДвижения.Сотрудник КАК Сотрудник,
			|	ВТДвижения.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ВТДвижения.КоличествоДнейВГод КАК КоличествоДнейВГод,
			|	ВТДвижения.ДействуетДо КАК ДействуетДо,
			|	ВТДвижения.Используется КАК Используется,
			|	ВТДвижения.ПересчетНеТребуется КАК ПересчетНеТребуется
			|ИЗ
			|	ВТДвижения КАК ВТДвижения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ИспользуемВозвратныеСобытия
			|ИЗ
			|	ВТДвижения КАК ВТДвижения
			|ГДЕ
			|	ВТДвижения.ДействуетДо > ДАТАВРЕМЯ(1, 1, 1)";
			
		Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод")  Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО ЕжегодныеОтпуска.Ссылка = Сотрудники.Ссылка", "ПО ЕжегодныеОтпуска.Ссылка = Сотрудники.Ссылка И ЕжегодныеОтпуска.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
		КонецЕсли;	
		
		// Таблица для формирования положенных видов ежегодных отпусков.
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		ПоложенныеЕжегодныеОтпуска = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выгрузить();
		
		ИспользуемВозвратныеСобытия = (НЕ РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Пустой());
		Если НЕ ИспользуемВозвратныеСобытия Тогда
			ПоложенныеЕжегодныеОтпуска.Колонки.Удалить("ДействуетДо");
		КонецЕсли;
		
		ДанныеДляПроведения.Вставить("ЕжегодныеОтпуска", ПоложенныеЕжегодныеОтпуска);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ДатаНачала КАК ДатаСобытия,
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.РазрядКатегория КАК РазрядКатегория,
			|	ВЫБОР
			|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
			|		ИНАЧЕ Сотрудники.ДатаОкончания
			|	КОНЕЦ КАК ДействуетДо
			|ИЗ
			|	ВТСотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.ИзменитьПодразделениеИДолжность";
			
		// Таблица для формирования значений разряда сотрудника.
		РазрядыКатегорииСотрудников = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("РазрядыКатегорииСотрудников", РазрядыКатегорииСотрудников);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА Сотрудники.СменаВидаДоговора
			|				И НЕ Сотрудники.ТрудовойДоговорДата = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА Сотрудники.ТрудовойДоговорДата
			|		ИНАЧЕ Сотрудники.ДатаНачала
			|	КОНЕЦ КАК Период,
			|	Сотрудники.ДатаНачала,
			|	Сотрудники.Сотрудник,
			|	Сотрудники.ФизическоеЛицо,
			|	Сотрудники.ГоловнаяОрганизация,
			|	Сотрудники.ОбособленноеПодразделение КАК Организация,
			|	Сотрудники.ДатаЗавершенияТрудовогоДоговора КАК ДатаОкончания,
			|	Сотрудники.ТрудовойДоговорНомер КАК НомерДоговораКонтракта,
			|	Сотрудники.ТрудовойДоговорДата КАК ДатаДоговораКонтракта,
			|	Сотрудники.Руководитель КАК ПредставительНанимателя,
			|	Сотрудники.ДолжностьРуководителя КАК ДолжностьПредставителяНанимателя,
			|	Сотрудники.ОснованиеПредставителяНанимателя,
			|	Сотрудники.ВидАктаГосоргана,
			|	Сотрудники.ПоступлениеНаСлужбуВпервые,
			|	Сотрудники.СпособПоступленияНаСлужбу,
			|	Сотрудники.СрочныйДоговор,
			|	Сотрудники.СезонныйДоговор,
			|	Сотрудники.СрокЗаключенияДоговора,
			|	Сотрудники.ОснованиеСрочногоДоговора,
			|	Сотрудники.ОборудованиеРабочегоМеста,
			|	Сотрудники.ИныеУсловияДоговора
			|ИЗ
			|	ВТСотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.СменаВидаДоговора = ИСТИНА
			|	И Сотрудники.ИзменитьСведенияОДоговореКонтракте = ИСТИНА";
			
		// Таблица для формирования описаний договоров сотрудников.
		СведенияОКонтрактахДоговорах = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("СведенияОКонтрактахДоговорахСоСменойВидаДоговора", СведенияОКонтрактахДоговорах);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА Сотрудники.СменаВидаДоговора
			|				И НЕ Сотрудники.ТрудовойДоговорДата = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА Сотрудники.ТрудовойДоговорДата
			|		ИНАЧЕ Сотрудники.ДатаНачала
			|	КОНЕЦ КАК Период,
			|	Сотрудники.ДатаНачала,
			|	Сотрудники.Сотрудник,
			|	Сотрудники.ФизическоеЛицо,
			|	Сотрудники.ГоловнаяОрганизация,
			|	Сотрудники.ОбособленноеПодразделение КАК Организация,
			|	Сотрудники.ДатаЗавершенияТрудовогоДоговора КАК ДатаОкончания,
			|	Сотрудники.ТрудовойДоговорНомер КАК НомерДоговораКонтракта,
			|	Сотрудники.ТрудовойДоговорДата КАК ДатаДоговораКонтракта,
			|	Сотрудники.Руководитель КАК ПредставительНанимателя,
			|	Сотрудники.ДолжностьРуководителя КАК ДолжностьПредставителяНанимателя,
			|	Сотрудники.ОснованиеПредставителяНанимателя,
			|	Сотрудники.ВидАктаГосоргана,
			|	Сотрудники.ПоступлениеНаСлужбуВпервые,
			|	Сотрудники.СпособПоступленияНаСлужбу,
			|	Сотрудники.СрочныйДоговор,
			|	Сотрудники.СезонныйДоговор,
			|	Сотрудники.СрокЗаключенияДоговора,
			|	Сотрудники.ОснованиеСрочногоДоговора,
			|	Сотрудники.ОборудованиеРабочегоМеста,
			|	Сотрудники.ИныеУсловияДоговора
			|ИЗ
			|	ВТСотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.СменаВидаДоговора = ЛОЖЬ
			|	И Сотрудники.ИзменитьСведенияОДоговореКонтракте = ИСТИНА";
			
		// Таблица для формирования описаний договоров сотрудников.
		СведенияОКонтрактахДоговорах = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("СведенияОКонтрактахДоговорах", СведенияОКонтрактахДоговорах);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ДатаНачала КАК Период,
			|	Сотрудники.Сотрудник,
			|	ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	Сотрудники.ФизическоеЛицо,
			|	Сотрудники.Территория,
			|	ВЫБОР
			|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
			|		ИНАЧЕ Сотрудники.ДатаОкончания
			|	КОНЕЦ КАК ДействуетДо
			|ИЗ
			|	ВТСотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.ИзменитьТерриторию";
		
		// Набор сведений для проведения по территориям сотрудников
		СведенияОТерриторияхСотрудников = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("ТерриторииСотрудников", СведенияОТерриторияхСотрудников);
		
		// Данные для регистрации в учета стажа ПФР
		ДанныеДляРегистрацииВУчете = ДанныеДляРегистрацииВУчетаСтажаПФР(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка), ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод"));
		
		ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииВУчетаСтажаПФР", ДанныеДляРегистрацииВУчете[ДокументСсылка]);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
			Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод") Тогда
				ДанныеГрейдовСотрудников = Модуль.ДанныеДляПроведенияСписочногоКадровогоПриказа(ДокументСсылка, "КадровыйПереводСписком", "ДатаНачала", "ДатаОкончания");
			Иначе
				ДанныеГрейдовСотрудников = Модуль.ДанныеДляПроведенияГрейдыСотрудников(ДокументСсылка, "ДатаНачала", "ДатаОкончания");
			КонецЕсли;
			ДанныеДляПроведения.Вставить("ДанныеГрейдовСотрудников", ДанныеГрейдовСотрудников);
			
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
			ДанныеКадровогоРезерва = Модуль.ДанныеКадровогоПереводаДляКадровогоРезерва(ДокументСсылка);
			ДанныеДляПроведения.Вставить("ДанныеКадровогоРезерва", ДанныеКадровогоРезерва);
		КонецЕсли;
		
		// Данные для формирования значений ПКУ сотрудника.
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ДатаНачала КАК ДатаСобытия,
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ПКУ КАК ПКУ,
			|	ВЫБОР
			|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
			|		ИНАЧЕ Сотрудники.ДатаОкончания
			|	КОНЕЦ КАК ДействуетДо
			|ИЗ
			|	ВТСотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.ИзменитьПодразделениеИДолжность";
		
		ПКУСотрудников = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("ПКУСотрудников", ПКУСотрудников);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЗанятыеПозицииШтатногоРасписания.Сотрудник КАК Сотрудник,
			|	Сотрудники.ДатаНачала КАК ДатаЗанятияСтавки,
			|	Сотрудники.ДатаОкончания КАК ДатаОкончания,
			|	Сотрудники.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
			|	Сотрудники.КоличествоСтавок КАК КоличествоСтавок,
			|	МАКСИМУМ(ЗанятыеПозицииШтатногоРасписания.Период) КАК ДатаОсвобождения
			|ИЗ
			|	РегистрНакопления.ЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозицииШтатногоРасписания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
			|		ПО ЗанятыеПозицииШтатногоРасписания.Сотрудник = Сотрудники.Сотрудник
			|			И ЗанятыеПозицииШтатногоРасписания.Период > Сотрудники.ДатаНачала
			|			И ЗанятыеПозицииШтатногоРасписания.ДатаОтменыУсловногоДвижения < Сотрудники.ДатаНачала
			|ГДЕ
			|	ЗанятыеПозицииШтатногоРасписания.УсловноеДвижение
			|	И ЗанятыеПозицииШтатногоРасписания.КоличествоСтавок <> 0
			|	И ЗанятыеПозицииШтатногоРасписания.Регистратор <> &Ссылка
			|	И Сотрудники.ИзменитьПодразделениеИДолжность
			|
			|СГРУППИРОВАТЬ ПО
			|	Сотрудники.ДатаНачала,
			|	Сотрудники.ДатаОкончания,
			|	Сотрудники.ДолжностьПоШтатномуРасписанию,
			|	Сотрудники.КоличествоСтавок,
			|	ЗанятыеПозицииШтатногоРасписания.Сотрудник
			|
			|ИМЕЮЩИЕ
			|	СУММА(ВЫБОР
			|			КОГДА ЗанятыеПозицииШтатногоРасписания.КоличествоСтавок = 0
			|				ТОГДА ЗанятыеПозицииШтатногоРасписания.УсловноеКоличествоСтавок
			|			ИНАЧЕ ЗанятыеПозицииШтатногоРасписания.КоличествоСтавок
			|		КОНЕЦ * ВЫБОР
			|			КОГДА ЗанятыеПозицииШтатногоРасписания.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА 1
			|			ИНАЧЕ -1
			|		КОНЕЦ) > 0";
		
		ДанныеВременноОсвобожденныхПозиций = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("ДанныеВременноОсвобожденныхПозиций", ДанныеВременноОсвобожденныхПозиций);
		
		Если НачисленияУтверждены И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Модуль.КадровыйПереводДополнитьДанныеДляПроведение(ДанныеДляПроведения, Запрос.МенеджерВременныхТаблиц, ДокументСсылка);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("КлассныеЧиныРанги");
			КлассныеЧиныРангиФизическихЛиц = Модуль.КадровыйПереводСведенияОКлассныхЧинахРангах(ДокументСсылка);
			ДанныеДляПроведения.Вставить("КлассныеЧиныРангиФизическихЛиц", КлассныеЧиныРангиФизическихЛиц);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийМодуляДокумента

Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("ИсключатьНеИзмененные") Тогда
		ИсключатьНеИзмененные = Истина;
	Иначе
		ИсключатьНеИзмененные = Ложь;
	КонецЕсли;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация, , ИсключатьНеИзмененные);
	
	// Проведение документа
	ТолькоБронированиеПозиции = ДокументОбъект.БронированиеПозиции И ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПозиций");
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект, , , ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент));
	ЗарплатаКадрыРасширенный.ИнициализироватьОтложеннуюРегистрациюВторичныхДанныхПоДвижениямДокумента(ДокументОбъект.Движения);
	
	ИсправлениеДокументовЗарплатаКадры.ПриПроведенииИсправления(ДокументОбъект.Ссылка, ДокументОбъект.Движения, РежимПроведения, Отказ, РеквизитыДляПроведения(ДокументОбъект),, ДокументОбъект, "ДатаНачала");
	
	ДанныеДляПроведения = ДанныеДляПроведения(ДокументОбъект.Ссылка, ТолькоБронированиеПозиции, ДокументОбъект.НачисленияУтверждены);

	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(
		ДокументОбъект.Движения, ДанныеДляПроведения.СотрудникиДаты, ДокументОбъект.Ссылка);
	
	Если ДанныеДляПроведения.КадровыеДвижения.Количество() > 0 Тогда
		КадровыйУчет.СформироватьКадровыеДвижения(ДокументОбъект, ДокументОбъект.Движения, ДанныеДляПроведения.КадровыеДвижения, ТолькоБронированиеПозиции);
		КадровыйУчетРасширенный.ЗарегистрироватьВРеестреКадровыхПриказов(ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеРеестраКадровыхПриказов, Отказ);
	КонецЕсли;
	
	// Если производится операция бронирования позиции штатного расписания, то никаких действий больше не производится.
	Если ТолькоБронированиеПозиции Тогда
		Возврат;
	КонецЕсли; 
	
	Если ДанныеДляПроведения.РазрядыКатегорииСотрудников.Количество() > 0 Тогда
		РазрядыКатегорииДолжностей.СформироватьДвиженияРазрядовКатегорийСотрудников(
			ДокументОбъект.Движения, ДанныеДляПроведения.РазрядыКатегорииСотрудников);
	КонецЕсли;
	
	Если ДанныеДляПроведения.ПКУСотрудников.Количество() > 0 Тогда
		РазрядыКатегорииДолжностей.СформироватьДвиженияПКУСотрудников(ДокументОбъект.Движения, ДанныеДляПроведения.ПКУСотрудников);
	КонецЕсли;
	
	Если ДанныеДляПроведения.ГрафикРаботыСотрудников.Количество() Тогда
		КадровыйУчетРасширенный.СформироватьИсториюИзмененияГрафиков(
			ДокументОбъект.Движения, ДанныеДляПроведения.ГрафикРаботыСотрудников);
	КонецЕсли;
	
	КадровыйУчет.СформироватьДвиженияВидовЗанятостиСотрудников(ДокументОбъект.Движения, ДанныеДляПроведения.ДвиженияВидовЗанятости);
	
	Если ДокументОбъект.НачисленияУтверждены И ДанныеДляПроведения.ПлановыеНачисления.Количество() > 0 Тогда
		
		СтруктураПлановыхНачислений = Новый Структура;
		СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
		СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателей);
		СтруктураПлановыхНачислений.Вставить("ПрименениеДополнительныхПоказателей", ДанныеДляПроведения.ПрименениеДополнительныхПоказателей);
		
		РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ДокументОбъект, ДокументОбъект.Движения, СтруктураПлановыхНачислений);
		РасчетЗарплатыРасширенный.СформироватьДвиженияПорядкаПересчетаТарифныхСтавок(ДокументОбъект.Движения, ДанныеДляПроведения.ПорядокПересчетаТарифнойСтавки);
		
	КонецЕсли;
	
	Если ДанныеДляПроведения.ЕжегодныеОтпуска.Количество() > 0 Тогда
		ОстаткиОтпусков.СформироватьДвиженияПоложенныхЕжегодныхОтпусков(ДокументОбъект.Ссылка, ДокументОбъект.Движения, ДанныеДляПроведения.ЕжегодныеОтпуска);
	КонецЕсли;
	
	Если ДокументОбъект.НачисленияУтверждены И ДанныеДляПроведения.ПлановыеВыплаты.Количество() Тогда
		РасчетЗарплаты.СформироватьДвиженияПлановыхВыплат(ДокументОбъект.Движения, ДанныеДляПроведения.ПлановыеВыплаты);
	КонецЕсли;
	
	Если ДанныеДляПроведения.СведенияОКонтрактахДоговорахСоСменойВидаДоговора.Количество() Тогда
		КонтрактыДоговорыСотрудников.СформироватьДвиженияОсновныхДанныхИСведенийОКонтрактахДоговорах(
			ДокументОбъект.Движения, ДанныеДляПроведения.СведенияОКонтрактахДоговорахСоСменойВидаДоговора, Истина);
	КонецЕсли;

	Если ДанныеДляПроведения.СведенияОКонтрактахДоговорах.Количество() Тогда
		КонтрактыДоговорыСотрудников.СформироватьДвиженияОсновныхДанныхИСведенийОКонтрактахДоговорах(
			ДокументОбъект.Движения, ДанныеДляПроведения.СведенияОКонтрактахДоговорах, Ложь);
	КонецЕсли;

	УчетСтажаПФР.ЗарегистрироватьПериодыВУчетеСтажаПФР(ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеДляРегистрацииВУчетаСтажаПФР);
	
	КадровыйУчетРасширенный.СформироватьДвиженияПоТерриториям(ДокументОбъект.Движения, ДанныеДляПроведения.ТерриторииСотрудников, ДокументОбъект.Организация);
	
	Если ДанныеДляПроведения.ДанныеВременноОсвобожденныхПозиций.Количество() > 0 Тогда
		
		КадровыйУчетРасширенный.ЗанятьСтавку(
			ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеВременноОсвобожденныхПозиций);
		
		КадровыйУчетРасширенный.ОсвободитьСтавкиПриКадровыхПереводовСВременноОсвобожденныхСтавок(
			ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеВременноОсвобожденныхПозиций);
		
	КонецЕсли; 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.СформироватьДвиженияГрейдовСотрудников(ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеГрейдовСотрудников);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.СформироватьДвиженияИсторииКадровогоРезерва(ДокументОбъект.Движения, ДанныеДляПроведения, "ДанныеКадровогоРезерва");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлассныеЧиныРанги");
		Модуль.СформироватьДвиженияКлассныхЧиновРанговФизическихЛиц(ДокументОбъект.Движения, ДанныеДляПроведения.КлассныеЧиныРангиФизическихЛиц);
	КонецЕсли;
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(ДокументОбъект.Движения, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация, ИсключатьНеИзмененные);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКУдалениюПроведения(ДокументОбъект, ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент));
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц, ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.ДатаНачала КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.КадровыйПеревод КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.ДатаЗавершенияТрудовогоДоговора,
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.КадровыйПеревод КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И ТаблицаДокумента.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком.Сотрудники");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Функция возвращает структуру с описанием данного вида документа.
//
Функция ОписаниеДокумента() Экспорт 

	ОписаниеДокумента = ЗарплатаКадрыРасширенныйКлиентСервер.СтруктураОписанияДокумента();
	
	ОписаниеДокумента.КраткоеНазваниеИменительныйПадеж	 = НСтр("ru = 'перевод'");
	ОписаниеДокумента.КраткоеНазваниеРодительныйПадеж	 = НСтр("ru = 'перевода'");
	ОписаниеДокумента.ИмяРеквизитаСотрудник				 = "Сотрудник";
	ОписаниеДокумента.ИмяРеквизитаОтсутствующийСотрудник = "Сотрудник";
	ОписаниеДокумента.ИмяРеквизитаДатаНачалаСобытия		 = "ДатаНачала";
	ОписаниеДокумента.ИмяРеквизитаДатаОкончанияСобытия	 = "ДатаОкончания";
	ОписаниеДокумента.ИмяРеквизитаФормыТекущаяПозицияШР	 = "ТекущаяДолжностьПоШтатномуРасписанию";
	
	Возврат ОписаниеДокумента;

КонецФункции

#КонецОбласти


#КонецОбласти

#КонецЕсли