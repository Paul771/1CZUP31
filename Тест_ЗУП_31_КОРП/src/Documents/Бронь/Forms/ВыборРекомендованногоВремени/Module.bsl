#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	БроньОбъект = ДанныеФормыВЗначение(Параметры.Бронь, Тип("ДокументОбъект.Бронь"));
	ЗначениеВРеквизитФормы(БроньОбъект, "Бронь");
	БроньИсключение = Параметры.БроньИсключение;
	ВесьДень = Параметры.ВесьДень;
	ДатаИсключения = Параметры.ДатаИсключения;
	Длительность = Параметры.Бронь.ДатаОкончания - Параметры.Бронь.ДатаНачала;
	Если Длительность = 0 Тогда
		Длительность = 3600;
	КонецЕсли;
	
	ОбновитьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Бронь" Тогда
		ОбновитьСервер();
		Если ПересекающиесяБрони.Количество() = 0 Тогда
			Результат = ПолучитьРезультат("НетПересечений");
			Закрыть(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРекомендации

&НаКлиенте
Процедура РекомендацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Элементы.РекомендацииПомещений.ТекущаяСтрока = Неопределено;
	
	ВыбратьРекомендацию();
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендацииПриАктивизацииСтроки(Элемент)
	
	Если ТекущийЭлемент <> Элемент Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОчиститьТекущуюСтрокуПомещений", 0.1, Истина);
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		Элементы.РекомендацииПомещений.ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРекомендацииПомещений

&НаКлиенте
Процедура РекомендацииПомещенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.РекомендацииПомещенийДоступнаСхема Тогда
		СтандартнаяОбработка = Ложь;
		БронированиеПомещенийКлиент.ПоказатьСхемуТерритории(ДанныеСтроки.Помещение);
		Возврат;
	КонецЕсли;
	
	Элементы.Рекомендации.ТекущаяСтрока = Неопределено;
	
	ВыбратьРекомендацию();
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендацииПомещенийПриАктивизацииСтроки(Элемент)
	
	Если ТекущийЭлемент <> Элемент Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОчиститьТекущуюСтрокуВремени", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПересекающиесяБрони

&НаКлиенте
Процедура ПересекающиесяБрониВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ДанныеСтроки.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересекающиесяБрониПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересекающиесяБрониПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ДанныеСтроки.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересекающиесяБрониПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ПометкаУдаления = Ложь;
	
	События = Новый Массив;
	ПовторяющиесяБрони = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ДанныеСтроки.ТипЗаписи =
			ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
			ПовторяющаясяБронь = Новый Структура("Бронь, ДатаИсключения");
			ПовторяющаясяБронь.Бронь = ДанныеСтроки.Ссылка;
			ПовторяющаясяБронь.ДатаИсключения = ДанныеСтроки.ДатаНачала;
			БронированиеПомещенийКлиент.ДобавитьЗначениеВМассив(ПовторяющаясяБронь, ПовторяющиесяБрони);
		Иначе
			БронированиеПомещенийКлиент.ДобавитьЗначениеВМассив(ДанныеСтроки.Ссылка, События);
		КонецЕсли;
	КонецЦикла;
	Если События.Количество() = 0 И ПовторяющиесяБрони.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	БронированиеПомещенийКлиент.УстановитьПометкиУдаления(События, ПовторяющиесяБрони, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ВыбратьРекомендацию();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьРекомендацию()
	
	Если Элементы.Рекомендации.ТекущаяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.Рекомендации.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ТекстПредупреждения = НСтр("ru = 'Не выбрана рекомендация.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		Действие = "ВыборРекомендации";
		Если ТекущиеДанные.Отклонение <> 0 Тогда
			Рекомендация = Новый Структура("ДатаНачала, ДатаОкончания",
				ТекущиеДанные.ДатаНачала, ТекущиеДанные.ДатаОкончания);
		Иначе
			Рекомендация = Новый Структура("ДатаНачала, ДатаОкончания",
				ТекущиеДанные.ДатаНачала, ТекущиеДанные.ДатаНачала + Длительность);
		КонецЕсли;
		
	ИначеЕсли Элементы.РекомендацииПомещений.ТекущаяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.РекомендацииПомещений.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ТекстПредупреждения = НСтр("ru = 'Не выбрана рекомендация.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		Действие = "ВыборРекомендацииПомещения";
		Рекомендация = ТекущиеДанные.Помещение;
		
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не выбрана рекомендация.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьРезультат(Действие, Рекомендация);
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСервер()
	
	// Пересекающиеся брони.
	ВсеПересеченияВОдномДне = (НачалоДня(Бронь.ДатаНачала) = НачалоДня(Бронь.ДатаОкончания));
	ПересекающиесяБрони.Очистить();
	ТаблицаБроней = БронированиеПомещений.ПолучитьПересекающиесяБрони(
		Бронь, БроньИсключение, ДатаИсключения);
	Для Каждого СтрокаБронь Из ТаблицаБроней Цикл
		НоваяСтрока = ПересекающиесяБрони.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБронь);
		ВсеПересеченияВОдномДне = ВсеПересеченияВОдномДне
			И (НачалоДня(СтрокаБронь.ДатаНачала) = НачалоДня(СтрокаБронь.ДатаОкончания));
	КонецЦикла;
	КоличествоПересекающихсяБроней = ПересекающиесяБрони.Количество();
	Если ВсеПересеченияВОдномДне Тогда
		Элементы.ПересекающиесяБрониДатаНачала.Ширина = 9;
		Элементы.ПересекающиесяБрониДатаНачала.Формат = "ДФ='HH:mm'";
		Элементы.ПересекающиесяБрониДатаОкончания.Ширина = 9;
		Элементы.ПересекающиесяБрониДатаОкончания.Формат = "ДФ='HH:mm'";
	Иначе
		Элементы.ПересекающиесяБрониДатаНачала.Ширина = 18;
		Элементы.ПересекающиесяБрониДатаНачала.Формат = "ДФ='d MMMM yyyy HH:mm'";
		Элементы.ПересекающиесяБрониДатаОкончания.Ширина = 18;
		Элементы.ПересекающиесяБрониДатаОкончания.Формат = "ДФ='d MMMM yyyy HH:mm'";
	КонецЕсли;
	
	// Рекомендации - другое время.
	Рекомендации.Очистить();
	ТаблицаРекомендаций = БронированиеПомещений.ПолучитьТаблицуРекомендаций(
		Бронь, БроньИсключение, ДатаИсключения, ВесьДень);
	Для Каждого СтрокаРекомендация Из ТаблицаРекомендаций Цикл
		НоваяСтрока = Рекомендации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРекомендация);
	КонецЦикла;
	
	// Рекомендации - другие помещения.
	РекомендацииПомещений.Очистить();
	ТаблицаРекомендаций = БронированиеПомещений.РекомендацииПомещений(Бронь);
	Для Каждого СтрокаРекомендация Из ТаблицаРекомендаций Цикл
		НоваяСтрока = РекомендацииПомещений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРекомендация);
	КонецЦикла;
	
	КоличествоРекомендацийВремени = Рекомендации.Количество();
	КоличествоРекомендацийПомещений = РекомендацииПомещений.Количество();
	КоличествоРекомендаций = КоличествоРекомендацийВремени + КоличествоРекомендацийПомещений;
	Если КоличествоРекомендаций = 0 Тогда
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		Элементы.ГруппаРекомендации.Доступность = Ложь;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПересекающиесяБрони;
		Заголовок = НСтр("ru = 'Невозможно забронировать'");
		Элементы.ДекорацияПредупреждение.Заголовок =
			НСтр("ru = 'Невозможно забронировать, так как есть пересекающиеся брони.'");
	ИначеЕсли КоличествоРекомендацийВремени <> 0 И КоличествоРекомендацийПомещений <> 0 Тогда
		Заголовок = НСтр("ru = 'Рекомендации'");
		Элементы.ДекорацияПредупреждение.Заголовок =
			НСтр("ru = 'Невозможно забронировать, так как есть пересекающиеся брони. Выберите один из рекомендуемых промежутков времени или помещение.'");
	ИначеЕсли КоличествоРекомендацийВремени <> 0 Тогда
		Заголовок = НСтр("ru = 'Рекомендации'");
		Элементы.ДекорацияИли.Видимость = Ложь;
		Элементы.РекомендацииПомещений.Видимость = Ложь;
		Элементы.ДекорацияПредупреждение.Заголовок =
			НСтр("ru = 'Невозможно забронировать, так как есть пересекающиеся брони. Выберите один из рекомендуемых промежутков времени.'");
	ИначеЕсли КоличествоРекомендацийПомещений <> 0 Тогда
		Заголовок = НСтр("ru = 'Рекомендации'");
		Элементы.ДекорацияИли.Видимость = Ложь;
		Элементы.Рекомендации.Видимость = Ложь;
		Элементы.РекомендацииПомещений.АктивизироватьПоУмолчанию = Истина;
		Элементы.ДекорацияПредупреждение.Заголовок =
			НСтр("ru = 'Невозможно забронировать, так как есть пересекающиеся брони. Выберите одно из рекомендуемых помещений.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРезультат(Действие, Рекомендация = Неопределено)
	
	Результат = Новый Структура("Действие, Рекомендация", Действие, Рекомендация);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Гиперссылка схемы территории.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("РекомендацииПомещенийДоступнаСхема");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РекомендацииПомещений.ДоступнаСхема");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтрокуПомещений()
	
	Элементы.РекомендацииПомещений.ТекущаяСтрока = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтрокуВремени()
	
	Элементы.Рекомендации.ТекущаяСтрока = Неопределено;
	
КонецПроцедуры

#КонецОбласти