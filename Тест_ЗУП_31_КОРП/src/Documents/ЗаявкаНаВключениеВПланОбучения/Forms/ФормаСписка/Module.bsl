#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	РежимВыбора = Параметры.РежимВыбора;
	
	Если Параметры.Свойство("СписокУжеПодобранныхЗаявок") Тогда
		СписокПодобранных.ЗагрузитьЗначения(ПолучитьИзВременногоХранилища(Параметры.СписокУжеПодобранныхЗаявок));
	КонецЕсли;
	
	Если Параметры.Свойство("РегистраторИсключение") Тогда
		РегистраторИсключение = Параметры.РегистраторИсключение;
	КонецЕсли;
	
	ЕстьПраваНаЧтениеПлана = ПравоДоступа("Чтение", Метаданные.Документы.ПланОбученияРазвития);
	
	УстановитьЗначенияОтборов();
	
	// Определяем уровень пользователя.
	ОбучениеРазвитие.УстановитьРеквизитыДоступностиРолей(ЭтаФорма);
	ОбучениеРазвитие.СкрытьНеРазрешенныеКомандыПоРолям(ЭтаФорма);
	
	УстановитьОбязательноеИспользованиеПолейДинамическогоСписка();
	
	УстановитьОтборыДинамическогоСписка(ЭтаФорма);
	// Инициируем список отборов.
	УстановитьСоставСпискаОтборов();
	УстановитьТекущееЗначениеСпискаОтборов();
	УстановитьСвойстваЭлементовФормы(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗарплатаКадры.ПриСозданииНаСервереФормыСДинамическимСписком(ЭтотОбъект, "Список");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область УстановкаСвойствЭлементовФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваЭлементовФормы(Форма)
	
	УстановитьВидимостьПолейСписка(Форма);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СписокОтборов",
		"Видимость",
		НЕ Форма.РежимВыбора);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФормаНаправитьНаСогласование",
		"Видимость",
		НЕ Форма.РежимВыбора);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФормаВернутьНаПодготовку",
		"Видимость",
		НЕ Форма.РежимВыбора);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Список",
		"РежимВыбора",
		Форма.РежимВыбора);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Список",
		"МножественныйВыбор",
		Форма.РежимВыбора);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Список",
		"ИзменятьСоставСтрок",
		НЕ Форма.РежимВыбора);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Список",
		"ИзменятьПорядокСтрок",
		НЕ Форма.РежимВыбора);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПолейСписка(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Статус",
		"Видимость",
		Форма.ЕстьПраваНаЧтениеПлана);

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьОбязательноеИспользованиеПолейДинамическогоСписка()

	Если Не ЕстьПраваНаЧтениеПлана Тогда
		Возврат;
	КонецЕсли;
	
	Список.УстановитьОбязательноеИспользование("ВключенаВПлан", Истина);
	Список.УстановитьОбязательноеИспользование("СтатусНаименование", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьСоставСпискаОтборов()

	Элементы.СписокОтборов.СписокВыбора.Добавить("Все","Все");
	Если ДоступноСогласованиеПервогоУровня Тогда
		Элементы.СписокОтборов.СписокВыбора.Добавить("НеПодготовленные", НСтр("ru = 'Не подготовленные'"));
	КонецЕсли;
	Если ДоступноСогласованиеВторогоУровня Тогда
		Элементы.СписокОтборов.СписокВыбора.Добавить("НеУтвержденные", НСтр("ru = 'Не утвержденные'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущееЗначениеСпискаОтборов()

	Если ДоступноСогласованиеПервогоУровня И ДоступноСогласованиеВторогоУровня Тогда
		СписокОтборов = "Все";
	ИначеЕсли ДоступноСогласованиеПервогоУровня Тогда
		СписокОтборов = "НеПодготовленные";
	Иначе
		СписокОтборов = "НеУтвержденные";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокОтборовПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "Статус");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ВключенаВПлан");
	
	Если СписокОтборов = "НеПодготовленные" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Статус",
			ПредопределенноеЗначение("Перечисление.СостоянияСогласования.ПустаяСсылка"),
			ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ИначеЕсли СписокОтборов = "НеУтвержденные" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Статус",
			ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Рассматривается"),
			ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"ВключенаВПлан",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтборовОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РежимВыбора Тогда
		МассивВыбранныхЗначений = ОбработатьВыбранныеЗначения(ВыбраннаяСтрока);
		ОповеститьОВыборе(МассивВыбранныхЗначений);
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	Если РежимВыбора Тогда
		МассивВыбранныхЗначений = ОбработатьВыбранныеЗначения(Значение);
		ОповеститьОВыборе(МассивВыбранныхЗначений);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, Настройки);
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВернутьНаПодготовку(Команда)
	ВыполнитьКомандуНаКлиенте(Команда, ПредопределенноеЗначение("Перечисление.СостоянияСогласования.ПустаяСсылка"));
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаСогласование(Команда)
	ВыполнитьКомандуНаКлиенте(Команда, ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Рассматривается"));
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	ВыполнитьКомандуНаКлиенте(Команда, ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Отклонено"));
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтклонение(Команда)
	ВыполнитьКомандуНаКлиенте(Команда, ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Рассматривается"));
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗначенияОтборов()

	Если Параметры.Свойство("ЗаявкаВыполнена") Тогда
		Если Параметры.ЗаявкаВыполнена Тогда
			ГруппаОтбораВыполнения = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				Список.Отбор.Элементы,
				НСтр("ru = 'Только исполненные'"),
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		Иначе	
			ГруппаОтбораВыполнения = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				Список.Отбор.Элементы,
				НСтр("ru = 'Только не исполненные'"),
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		КонецЕсли;	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбораВыполнения,
			"ВключенаВПлан",
			ВидСравненияКомпоновкиДанных.Равно,
			Параметры.ЗаявкаВыполнена,,Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоПроведенные") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Проведен",
			Параметры.ТолькоПроведенные,
			ВидСравненияКомпоновкиДанных.Равно,,Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("Подразделение") И ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Подразделение",
			Параметры.Подразделение,
			ВидСравненияКомпоновкиДанных.ВИерархии,,Истина);
	КонецЕсли;
		
	Если (Параметры.Свойство("ДатаНачала") И ЗначениеЗаполнено(Параметры.ДатаНачала)) ИЛИ (Параметры.Свойство("ДатаОкончания") И ЗначениеЗаполнено(Параметры.ДатаОкончания)) Тогда
		
		ГруппаОтбораДаты = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Список.Отбор.Элементы,
			НСтр("ru = 'Отбор по периоду заявок'"),
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
		Если Параметры.Свойство("ДатаНачала") И ЗначениеЗаполнено(Параметры.ДатаНачала) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаОтбораДаты,
				"ДатаНачала",
				ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
				Параметры.ДатаНачала,,Истина);
		КонецЕсли;
		Если Параметры.Свойство("ДатаОкончания") И ЗначениеЗаполнено(Параметры.ДатаОкончания) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаОтбораДаты,
				"ДатаНачала",
				ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
				Параметры.ДатаОкончания,,Истина);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыДинамическогоСписка(ЭтаФорма)

	УстановитьРегистраторИсключение(ЭтаФорма);
	УстановитьСписокПодобранныхЗаявок(ЭтаФорма);
	УстановитьСтроковыеСтатусы(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРегистраторИсключение(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.Список,
		"РегистраторИсключение",
		Форма.РегистраторИсключение);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСписокПодобранныхЗаявок(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.Список,
		"СписокУжеПодобранныхЗаявок",
		Форма.СписокПодобранных.ВыгрузитьЗначения());
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтроковыеСтатусы(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.Список,
		"Готовится",
		НСтр("ru = 'Готовится'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.Список,
		"ЗапланированоОбучение",
		НСтр("ru = 'Запланировано обучение'"));
		
КонецПроцедуры

&НаКлиенте
Функция ОбработатьВыбранныеЗначения(ЗначениеВыбора)

	МассивВыбранныхЗначений = Новый Массив();
	
	Для каждого СтрокаСписка Из ЗначениеВыбора Цикл
		
		Если Элементы.Список.ДанныеСтроки(СтрокаСписка).УжеПодобрана Тогда
			Продолжить;
		КонецЕсли;
		
		ВыбранныйЭлемент = Новый Структура("Заявка, Мероприятие, ДатаНачала, ДатаОкончания, Подразделение, КоличествоУчебныхЧасов, СуммаРасходов");
		ЗаполнитьЗначенияСвойств(ВыбранныйЭлемент,Элементы.Список.ДанныеСтроки(СтрокаСписка));
		ВыбранныйЭлемент.Заявка = Элементы.Список.ДанныеСтроки(СтрокаСписка).Ссылка;
		МассивВыбранныхЗначений.Добавить(ВыбранныйЭлемент);
		
		СписокПодобранных.Добавить(СтрокаСписка);
		УстановитьСписокПодобранныхЗаявок(ЭтаФорма);
		
	КонецЦикла;
	
	Возврат МассивВыбранныхЗначений;

КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандуНаКлиенте(Команда, Статус)

	ОчиститьСообщения();
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Элементы.Список.ВыделенныеСтроки;
	
	ЗаголовокКоманды = ЗаголовокКоманды(Команда.Имя);
	ПроверитьИЗаписатьМассивЗаявок(МассивСтрок, Команда.Имя, ЗаголовокКоманды, Статус);
		
	Элементы.Список.Обновить();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьИЗаписатьМассивЗаявок(МассивСтрок, Команда, ЗаголовокКоманды, Статус) 
	
	СписокСтатусов = СписокДоступныхСтатусовПоКоманде(Команда);
	
	Для каждого Заявка Из МассивСтрок Цикл
		
		ИнформацияПоЗаявке = ОбучениеРазвитие.СтатусЗаявкиНаВключениеВПлан(Заявка);
		
		Если ИнформацияПоЗаявке.ВключенаВПлан ИЛИ СписокСтатусов.НайтиПоЗначению(ИнформацияПоЗаявке.Статус) = Неопределено Тогда
			
			Если МассивСтрок.Количество() > 1 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1:", Заявка) + " ";
			Иначе
				ТекстСообщения = "";
			КонецЕсли;
			
			Если ИнформацияПоЗаявке.ВключенаВПлан Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru = 'Заявки, включенные в план, не могут быть изменены'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ИначеЕсли СписокСтатусов.НайтиПоЗначению(ИнформацияПоЗаявке.Статус) = Неопределено Тогда
				ТекстСообщения = ТекстСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Команда ""%1"" не применима к заявке со статусом ""%2""'"), ЗаголовокКоманды, ИнформацияПоЗаявке.СтатусНаименование);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		ОбучениеРазвитие.ЗаписатьЗаявкуНаСервере(Заявка.ПолучитьОбъект(), Статус);
	
	КонецЦикла; 
	
КонецПроцедуры

// Возвращает список доступных статусов по команде.
//
&НаСервереБезКонтекста
Функция СписокДоступныхСтатусовПоКоманде(Команда)

	СписокСтатусов = Новый СписокЗначений;
	
	Если Команда = "ВернутьНаПодготовку" Тогда
		СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Рассматривается"));
	ИначеЕсли Команда = "НаправитьНаСогласование" Тогда
		СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.ПустаяСсылка"));
		СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Рассматривается"));
		СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Отклонено"));
	ИначеЕсли Команда = "Отклонить" Тогда
		СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Рассматривается"));
	ИначеЕсли Команда = "ОтменитьОтклонение" Тогда
		СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Отклонено"));
	КонецЕсли;

	Возврат СписокСтатусов;
	
КонецФункции

&НаСервере
Функция ЗаголовокКоманды(ИмяКоманды)

	ЭтаКоманда = ЭтаФорма.Команды.Найти(ИмяКоманды);
	Если ЭтаКоманда = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат ЭтаКоманда.Заголовок;
	КонецЕсли;
	
КонецФункции

#КонецОбласти