
#Область ОбработкаСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗначенияДляЗаполнения = Новый Структура("Ответственный, Месяц", "Объект.Ответственный", "Объект.Период");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПриПолученииДанныхНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_НазначениеПоказателейЭффективности"); 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)

	ПодразделениеПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УтвержденПриИзменении(Элемент)
	
	Если Объект.Утвержден Тогда
		Объект.Утвердил = Объект.Ответственный;
	Иначе
		Объект.Утвердил = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
	УстановитьДоступностьЭлементаУтвердил(ЭтаФорма);
	
КонецПроцедуры

#Область МесяцСтрокой

&НаКлиенте
Процедура МесяцСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "МесяцСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "МесяцСтрокой", Направление);
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПодразделения

&НаКлиенте
Процедура ПодразделенияПриАктивизацииСтроки(Элемент)
	ПодразделенияПриАктивизацииСтрокиНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		УстановитьИдентификаторНовойСтрокиОбъектаНазначения(
			Элемент.ТекущиеДанные, МаксимальныйИдентификаторСтрокиПодразделения);
		УстановитьОтборСтрокПоказателей(
			Элементы.ПоказателиПодразделений, Элемент.ТекущиеДанные.ИдентификаторСтрокиОбъектаНазначения);
		ПодразделенияПриАктивизацииСтрокиНаКлиенте();
		ПоказателиПодразделенийПриАктивизацииСтрокиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияПослеУдаления(Элемент)
	
	УдалитьЛишниеСтрокиПоказателей(Объект.Подразделения, Объект.ПоказателиПодразделений, Объект.ШкалыЗначенийПодразделений);
	ПодразделенияПриАктивизацииСтрокиНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПоказателиПодразделений

&НаКлиенте
Процедура ПоказателиПодразделенийПриАктивизацииСтроки(Элемент)
	ПоказателиПодразделенийПриАктивизацииСтрокиНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПодразделенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОтборСтрок = Элементы.ПоказателиПодразделений.ОтборСтрок;
	Если ОтборСтрок = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПодразделенийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		УстановитьИдентификаторСтрокиОбъектаНазначенияПоОтбору(
			Элементы.ПоказателиПодразделений, Элемент.ТекущиеДанные);
			
		ПредзаполнитьЗначенияНовойСтрокиПоказателяПодразделений(
			Элементы.ПоказателиПодразделений, Элемент.ТекущиеДанные);
		ЗаполнитьСтрокуВводаЗначенийПоказателяПодразделений(ЭтаФорма, Элемент.ТекущиеДанные);
		
		УстановитьИдентификаторНовойСтрокиПоказателя(
			Элемент.ТекущиеДанные, МаксимальныйИдентификаторСтрокиПоказателяПодразделения);
		ПоказателиПодразделенийПриАктивизацииСтрокиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПодразделенийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗагрузитьШкалуПоказателяПодразделенийНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПодразделенийПослеУдаления(Элемент)
	УдалитьЛишниеСтрокиШкалыЗначений(Объект.ПоказателиПодразделений, Объект.ШкалыЗначенийПодразделений);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПодразделенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПоказателиПодразделенийВводЗначенийСтрока" Тогда
		ОткрытьФормуНастройкиВводаЗначенийПодразделений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПодразделенийПоказательПриИзменении(Элемент)
	ЗагрузитьШкалуПоказателяПодразделенийНаКлиенте();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыШкалыЗначенийПодразделений

&НаКлиенте
Процедура ШкалыЗначенийПодразделенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.ПоказателиПодразделений.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ШкалыЗначенийПодразделенийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		УстановитьИдентификаторСтрокиШкалыЗначенийПоОтбору(Элементы.ШкалыЗначенийПодразделений, Элемент.ТекущиеДанные)
	КонецЕсли; 
	
	Если Элемент.ТекущийЭлемент.Имя = "ШкалыЗначенийПодразделенийЗначениеДо" Тогда
		ШкалаЗначенийЗначениеДоПрежнее = Элемент.ТекущиеДанные.ЗначениеДо;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШкалыЗначенийПодразделенийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	СтруктураПараметров = СтруктураПараметровШкалыЗначенийПодразделений();
	КлючевыеПоказателиЭффективностиКлиент.ШкалаЗначенийПриИзмененииЗначенияШкалы(
		ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, СтруктураПараметров);
		
	ПоказателиПодразделенийПриАктивизацииСтрокиНаКлиенте();
		
КонецПроцедуры

&НаКлиенте
Процедура ШкалыЗначенийПодразделенийПередУдалением(Элемент, Отказ)
	
	СтрокаПоказателяПодразделения = СтрокаПоказателяПоОтбору(
		Объект.ПоказателиПодразделений, Элементы.ШкалыЗначенийПодразделений);
	
	КлючевыеПоказателиЭффективностиКлиент.ШкалаЗначенийПередУдалением(Элемент, Отказ, СтрокаПоказателяПодразделения.ОбратнаяШкала);
	
КонецПроцедуры

&НаКлиенте
Процедура ШкалыЗначенийПодразделенийПослеУдаления(Элемент)
	
	СтрокаПоказателяПодразделения = СтрокаПоказателяПоОтбору(
		Объект.ПоказателиПодразделений, Элементы.ШкалыЗначенийПодразделений);
	
	КлючевыеПоказателиЭффективностиКлиент.ШкалаЗначенийПослеУдаления(
		Объект.ШкалыЗначенийПодразделений,
		СтрокаПоказателяПодразделения.ОбратнаяШкала,
		Элементы.ШкалыЗначенийПодразделений.ОтборСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ШкалыЗначенийПодразделенийОценкаЗадаетсяИнтерваломПриИзменении(Элемент)
	
	КлючевыеПоказателиЭффективностиКлиент.УстановитьИнтервалыОценки(
		Объект.ШкалыЗначенийПодразделений, Элементы.ШкалыЗначенийПодразделений.ТекущиеДанные, Элементы.ШкалыЗначенийПодразделений.ОтборСтрок);
		
КонецПроцедуры

&НаКлиенте
Процедура ШкалыЗначенийПодразделенийИнтервалОценкиОтПриИзменении(Элемент)
	КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаОценкиВСтроке(Элементы.ШкалыЗначенийПодразделений.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ШкалыЗначенийПодразделенийИнтервалОценкиДоПриИзменении(Элемент)
	КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаОценкиВСтроке(Элементы.ШкалыЗначенийПодразделений.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПозиции

&НаКлиенте
Процедура ПозицииПриАктивизацииСтроки(Элемент)
	ПозицииПриАктивизацииСтрокиНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		УстановитьИдентификаторНовойСтрокиОбъектаНазначения(
			Элемент.ТекущиеДанные, МаксимальныйИдентификаторСтрокиПозиции);
		УстановитьОтборСтрокПоказателей(
			Элементы.ПоказателиПозиций, Элемент.ТекущиеДанные.ИдентификаторСтрокиОбъектаНазначения);
			
		ПозицииПриАктивизацииСтрокиНаКлиенте();
		ПоказателиПозицийПриАктивизацииСтрокиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПослеУдаления(Элемент)
	
	УдалитьЛишниеСтрокиПоказателей(Объект.Позиции, Объект.ПоказателиПозиций, Объект.ШкалыЗначенийПозиций);
	ПозицииПриАктивизацииСтрокиНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПоказателиПозиций

&НаКлиенте
Процедура ПоказателиПозицийПриАктивизацииСтроки(Элемент)
	ПоказателиПозицийПриАктивизацииСтрокиНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПозицийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОтборСтрок = Элементы.ПоказателиПозиций.ОтборСтрок;
	Если ОтборСтрок = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПозицийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		УстановитьИдентификаторСтрокиОбъектаНазначенияПоОтбору(
			Элементы.ПоказателиПозиций, Элемент.ТекущиеДанные);
			
		ПредзаполнитьЗначенияНовойСтрокиПоказателяПозиций(
			Элементы.ПоказателиПозиций, Элемент.ТекущиеДанные);
		ЗаполнитьСтрокуВводаЗначенийПоказателяПозиции(ЭтаФорма, Элемент.ТекущиеДанные);
			
		УстановитьИдентификаторНовойСтрокиПоказателя(
			Элемент.ТекущиеДанные, МаксимальныйИдентификаторСтрокиПоказателяПодразделения);
		ПоказателиПозицийПриАктивизацииСтрокиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПозицийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗагрузитьШкалуПоказателяПозицийНаКлиенте();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПозицийПослеУдаления(Элемент)
	УдалитьЛишниеСтрокиШкалыЗначений(Объект.ПоказателиПозиций, Объект.ШкалыЗначенийПозиций);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПозицийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПоказателиПозицийВводЗначенийСтрока" Тогда
		ОткрытьФормуНастройкиВводаЗначенийПозиций();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПозицийПоказательПриИзменении(Элемент)
	ЗагрузитьШкалуПоказателяПозицийНаКлиенте();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыШкалыЗначенийПозиций

&НаКлиенте
Процедура ШкалыЗначенийПозицийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.ПоказателиПозиций.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШкалыЗначенийПозицийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		УстановитьИдентификаторСтрокиШкалыЗначенийПоОтбору(Элементы.ШкалыЗначенийПозиций, Элемент.ТекущиеДанные)
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ШкалыЗначенийПозицийЗначениеДо" Тогда
		ШкалаЗначенийЗначениеДоПрежнее = Элемент.ТекущиеДанные.ЗначениеДо;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШкалыЗначенийПозицийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	СтруктураПараметров = СтруктураПараметровШкалыЗначенийПозиций();
	КлючевыеПоказателиЭффективностиКлиент.ШкалаЗначенийПриИзмененииЗначенияШкалы(
		ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, СтруктураПараметров);
		
	ПоказателиПозицийПриАктивизацииСтрокиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ШкалыЗначенийПозицийПередУдалением(Элемент, Отказ)
	
	СтрокаПоказателяПозиции = СтрокаПоказателяПоОтбору(
		Объект.ПоказателиПозиций, Элементы.ШкалыЗначенийПозиций);

	КлючевыеПоказателиЭффективностиКлиент.ШкалаЗначенийПередУдалением(Элемент, Отказ, СтрокаПоказателяПозиции.ОбратнаяШкала);
	
КонецПроцедуры

&НаКлиенте
Процедура ШкалыЗначенийПозицийПослеУдаления(Элемент)
	
	СтрокаПоказателяПозиции = СтрокаПоказателяПоОтбору(
		Объект.ПоказателиПозиций, Элементы.ШкалыЗначенийПозиций);
	
	КлючевыеПоказателиЭффективностиКлиент.ШкалаЗначенийПослеУдаления(
		Объект.ШкалыЗначенийПозиций,
		СтрокаПоказателяПозиции.ОбратнаяШкала,
		Элементы.ШкалыЗначенийПозиций.ОтборСтрок);
		
КонецПроцедуры

&НаКлиенте
Процедура ШкалыЗначенийПозицийОценкаЗадаетсяИнтерваломПриИзменении(Элемент)
	
	КлючевыеПоказателиЭффективностиКлиент.УстановитьИнтервалыОценки(
		Объект.ШкалыЗначенийПозиций, Элементы.ШкалыЗначенийПозиций.ТекущиеДанные, Элементы.ШкалыЗначенийПозиций.ОтборСтрок);
		
КонецПроцедуры

&НаКлиенте
Процедура ШкалыЗначенийПозицийИнтервалОценкиОтПриИзменении(Элемент)
	КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаОценкиВСтроке(Элементы.ШкалыЗначенийПозиций.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ШкалыЗначенийПозицийИнтервалОценкиДоПриИзменении(Элемент)
	КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаОценкиВСтроке(Элементы.ШкалыЗначенийПозиций.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПодразделения(Команда)
	ЗаполнитьПодразделенияНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПозиции(Команда)
	ЗаполнитьПозицииНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиПодразделенийРодителя(Команда)
	ЗаполнитьПоказателиПодразделенийРодителяНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиПозицийРодителя(Команда)
	ЗаполнитьПоказателиПозицийРодителяНаКлиенте();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ЗаполнитьВторичныеРеквизитыФормы();
	
	УстановитьСвойстваЭлементовФормы();

КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()

	УстановитьУсловноеОформлениеФормы();
	
	УстановитьПараметрыВыбораПодразделенийВТЧ();
	УстановитьПараметрыВыбораПозицийТЧ();
	
	УстановитьДоступностьЭлементаУтвердил(ЭтаФорма);

КонецПроцедуры

#Область ЗаполнениеВторичныхДанных

&НаСервере
Процедура ЗаполнитьВторичныеРеквизитыФормы()
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "МесяцСтрокой");
	
	ПодразделениеБыло = Объект.Подразделение;
	
	УстановитьМаксимальныеИдентификаторыСтрок();
	
	ЗаполнитьСтрокиВводаЗначенийПоказателяПодразделений();
	ЗаполнитьВторичныеРеквизитыПоказателей(Объект.ПоказателиПодразделений);
	
	ЗаполнитьСтрокиВводаЗначенийПоказателяПозиций();
	ЗаполнитьВторичныеРеквизитыПоказателей(Объект.ПоказателиПозиций);
	
	ЗаполнитьВторичныеРеквизитыШкалПодразделений();
	ЗаполнитьВторичныеРеквизитыШкалПозиций();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМаксимальныеИдентификаторыСтрок()

	МаксимальныйИдентификаторСтрокиПодразделения = ЗарплатаКадрыРасширенный.МаксимальныйИдентификаторСтроки(Объект.Подразделения, "ИдентификаторСтрокиОбъектаНазначения");
	МаксимальныйИдентификаторСтрокиПоказателяПодразделения = ЗарплатаКадрыРасширенный.МаксимальныйИдентификаторСтроки(Объект.ПоказателиПодразделений, "ИдентификаторСтрокиПоказателя");
	МаксимальныйИдентификаторСтрокиПозиции = ЗарплатаКадрыРасширенный.МаксимальныйИдентификаторСтроки(Объект.Позиции, "ИдентификаторСтрокиОбъектаНазначения");
	МаксимальныйИдентификаторСтрокиПоказателяПозиции = ЗарплатаКадрыРасширенный.МаксимальныйИдентификаторСтроки(Объект.ПоказателиПозиций, "ИдентификаторСтрокиПоказателя");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторичныеРеквизитыШкалПодразделений()

	Для каждого СтрокаПоказателя Из Объект.ПоказателиПодразделений Цикл
		ШкалаПоказателя = Объект.ШкалыЗначенийПодразделений.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПоказателя", СтрокаПоказателя.ИдентификаторСтрокиПоказателя));
		КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаПоНижнейГранице(ШкалаПоказателя, СтрокаПоказателя.ОбратнаяШкала);
	КонецЦикла; 
	
	КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаОценки(Объект.ШкалыЗначенийПодразделений);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторичныеРеквизитыШкалПозиций()

	Для каждого СтрокаПозиции Из Объект.ПоказателиПозиций Цикл
		ШкалаПоказателя = Объект.ШкалыЗначенийПозиций.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПоказателя", СтрокаПозиции.ИдентификаторСтрокиПоказателя));
		КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаПоНижнейГранице(ШкалаПоказателя, СтрокаПозиции.ОбратнаяШкала);
	КонецЦикла; 
	
	КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаОценки(Объект.ШкалыЗначенийПозиций);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторичныеРеквизитыПоказателей(ТаблицаПоказателей)

	СоответствиеРеквизитов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТаблицаПоказателей.Выгрузить(, "Показатель").ВыгрузитьКолонку("Показатель"), "ОбратнаяШкала");
	Для каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		СтрокаПоказателя.ОбратнаяШкала = СоответствиеРеквизитов[СтрокаПоказателя.Показатель];
	КонецЦикла; 

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПризнакОбратнаяШкалаПоказателя(Показатель)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель, "ОбратнаяШкала");
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокиВводаЗначенийПоказателяПодразделений()

	Для каждого СтрокаПоказателя Из Объект.ПоказателиПодразделений Цикл
		ЗаполнитьСтрокуВводаЗначенийПоказателяПодразделений(ЭтаФорма, СтрокаПоказателя);
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиВводаЗначенийПоказателяПозиций()

	Для каждого СтрокаПоказателя Из Объект.ПоказателиПозиций Цикл
		ЗаполнитьСтрокуВводаЗначенийПоказателяПозиции(ЭтаФорма, СтрокаПоказателя);
	КонецЦикла; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуВводаЗначенийПоказателяПодразделений(Форма, СтрокаПоказателя)
	
	СтрокаПодразделений = СтрокаПодразделенийПоИдентификатору(Форма, СтрокаПоказателя.ИдентификаторСтрокиОбъектаНазначения);
	Если СтрокаПодразделений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСтрокуВводаЗначенийПоказателя(СтрокаПоказателя, СтрокаПодразделений.Подразделение);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуВводаЗначенийПоказателяПозиции(Форма, СтрокаПоказателя)
	
	СтрокаПозиций = СтрокаПозицийПоИдентификатору(Форма, СтрокаПоказателя.ИдентификаторСтрокиОбъектаНазначения);
	Если СтрокаПозиций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСтрокуВводаЗначенийПоказателя(СтрокаПоказателя, СтрокаПозиций.Позиция);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуВводаЗначенийПоказателя(ТекущиеДанные, ОбъектВладелец)
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.МестоВводаЗначений) Тогда
		ТекущиеДанные.ВводЗначенийСтрока = НСтр("ru = 'Настроить ввод значений'");
	ИначеЕсли ТекущиеДанные.МестоВводаЗначений = ОбъектВладелец Тогда
		ТекущиеДанные.ВводЗначенийСтрока = СтрокаОтветственных(ТекущиеДанные);
	Иначе
		ТекущиеДанные.ВводЗначенийСтрока = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, %2'"),
				ТекущиеДанные.МестоВводаЗначений,
				СтрокаОтветственных(ТекущиеДанные, Ложь));
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаОтветственных(ТекущиеДанные, Трег = Истина)

	Если ТекущиеДанные.ОтветственныйЗаВводПлана = ТекущиеДанные.ОтветственныйЗаВводФакта Тогда
		Вводит = ?(Трег, НСтр("ru = 'Вводит'"), НСтр("ru = 'вводит'"));
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"),
			Вводит,
			ТекущиеДанные.ОтветственныйЗаВводПлана);
	Иначе
		Вводят = ?(Трег, НСтр("ru = 'Вводят'"), НСтр("ru = 'вводят'"));
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2 и %3'"),
			Вводят,
			ТекущиеДанные.ОтветственныйЗаВводПлана,
			ТекущиеДанные.ОтветственныйЗаВводФакта);
	КонецЕсли;

КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПодразделенияПриАктивизацииСтрокиНаКлиенте()

	ТекущиеДанные = Элементы.Подразделения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ПоказателиПодразделений.ОтборСтрок = Неопределено;
	Иначе
		УстановитьОтборСтрокПоказателей(
			Элементы.ПоказателиПодразделений, ТекущиеДанные.ИдентификаторСтрокиОбъектаНазначения);
	КонецЕсли;
	
	УстановитьСтрокуЗаголовкаПоказателейПодразделений(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПозицииПриАктивизацииСтрокиНаКлиенте()

	ТекущиеДанные = Элементы.Позиции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ПоказателиПозиций.ОтборСтрок = Неопределено;
	Иначе
		УстановитьОтборСтрокПоказателей(
			Элементы.ПоказателиПозиций, ТекущиеДанные.ИдентификаторСтрокиОбъектаНазначения);
	КонецЕсли;
	
	УстановитьСтрокуЗаголовкаПоказателейПозиций(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПодразделенийПриАктивизацииСтрокиНаКлиенте()

	ТекущиеДанные = Элементы.ПоказателиПодразделений.ТекущиеДанные;
	УстановитьОтборСтрокШкалы(Элементы.ШкалыЗначенийПодразделений, ТекущиеДанные);
	УстановитьСтрокуЗаголовкаШкалыПодразделений(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПозицийПриАктивизацииСтрокиНаКлиенте()

	ТекущиеДанные = Элементы.ПоказателиПозиций.ТекущиеДанные;
	УстановитьОтборСтрокШкалы(Элементы.ШкалыЗначенийПозиций, ТекущиеДанные);
	УстановитьСтрокуЗаголовкаШкалыПозиций(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокПоказателей(ЭлементыПоказатели, ИдентификаторСтрокиОбъектаНазначения)
	ЭлементыПоказатели.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтрокиОбъектаНазначения", ИдентификаторСтрокиОбъектаНазначения);	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокШкалы(ЭлементыШкалы, ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		ЭлементыШкалы.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтрокиПоказателя", 99999);
	Иначе
		ЭлементыШкалы.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтрокиПоказателя", ТекущиеДанные.ИдентификаторСтрокиПоказателя);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтрокуЗаголовкаПоказателейПодразделений(ТекущиеДанные)

	Если ТекущиеДанные = Неопределено
		ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Подразделение) Тогда
		
		СтрокаЗаголовкаПоказателейПодразделений = НСтр("ru = 'Показатели подразделений'");
		Возврат;
	КонецЕсли;
	
	СтрокаЗаголовкаПоказателейПодразделений = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Показатели подразделения ""%1""'"), ТекущиеДанные.Подразделение);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтрокуЗаголовкаПоказателейПозиций(ТекущиеДанные)

	Если ТекущиеДанные = Неопределено
		ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Позиция) Тогда
		
		СтрокаЗаголовкаПоказателейПодразделений = НСтр("ru = 'Показатели позиций'");
		Возврат;
	КонецЕсли;
	
	СтрокаЗаголовкаПоказателейПозиций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Показатели позиции ""%1""'"), ТекущиеДанные.Позиция);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтрокуЗаголовкаШкалыПодразделений(ТекущиеДанные)

	Если ТекущиеДанные = Неопределено
		ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Показатель) Тогда
		
		СтрокаЗаголовкаШкалыПодразделений = НСтр("ru = 'Шкала значений показателей'");
		Возврат;
	КонецЕсли;
	
	СтрокаЗаголовкаШкалыПодразделений = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Шкала значений показателя ""%1""'"), ТекущиеДанные.Показатель);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтрокуЗаголовкаШкалыПозиций(ТекущиеДанные)

	Если ТекущиеДанные = Неопределено
		ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Показатель) Тогда
		
		СтрокаЗаголовкаШкалыПозиций = НСтр("ru = 'Шкала значений показателей'");
		Возврат;
	КонецЕсли;
	
	СтрокаЗаголовкаШкалыПозиций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Шкала значений показателя ""%1""'"), ТекущиеДанные.Показатель);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИдентификаторНовойСтрокиОбъектаНазначения(ТекущиеДанные, МаксимальныйИдентификаторСтроки)

	ТекущиеДанные.ИдентификаторСтрокиОбъектаНазначения = МаксимальныйИдентификаторСтроки + 1;
	МаксимальныйИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтрокиОбъектаНазначения;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИдентификаторНовойСтрокиПоказателя(ТекущиеДанные, МаксимальныйИдентификаторСтрокиПоказателя)

	ТекущиеДанные.ИдентификаторСтрокиПоказателя = МаксимальныйИдентификаторСтрокиПоказателя + 1;
	МаксимальныйИдентификаторСтрокиПоказателя = ТекущиеДанные.ИдентификаторСтрокиПоказателя;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШкалуПоказателяПодразделенийНаКлиенте()

	ТекущиеДанные = Элементы.ПоказателиПодразделений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ОбратнаяШкала = ПризнакОбратнаяШкалаПоказателя(ТекущиеДанные.Показатель);
	
	ЗагрузитьШкалуПоказателяПодразделенийНаСервере(ТекущиеДанные.Показатель, ТекущиеДанные.ОбратнаяШкала, ТекущиеДанные.ИдентификаторСтрокиПоказателя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделенияНаКлиенте()
	
	Если Объект.Подразделения.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПодразделенияНаКлиентеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Списки подразделений и их показателей будут очищены.
									|Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнитьПодразделенияНаКлиентеЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделенияНаКлиентеЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = Неопределено
		ИЛИ Результат <> КодВозвратаДиалога.Да Тогда
	
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПодразделенияНаСервере();

	Если Объект.Подразделения.Количество() > 0 Тогда
		Элементы.Подразделения.ТекущаяСтрока = Объект.Подразделения[0].ПолучитьИдентификатор();
		ПодразделенияПриАктивизацииСтрокиНаКлиенте();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодразделенияНаСервере()

	ОчиститьПодразделения(ЭтаФорма);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&Подразделение)";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МаксимальныйИдентификаторСтрокиПодразделения = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Подразделения.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ИдентификаторСтрокиОбъектаНазначения = МаксимальныйИдентификаторСтрокиПодразделения;
		МаксимальныйИдентификаторСтрокиПодразделения = МаксимальныйИдентификаторСтрокиПодразделения + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПозицииНаКлиенте()
	
	Если Объект.Позиции.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПозицииНаКлиентеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Списки позиций и их показателей будут очищены.
									|Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнитьПозицииНаКлиентеЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПозицииНаКлиентеЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = Неопределено
		ИЛИ Результат <> КодВозвратаДиалога.Да Тогда
	
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПозицииНаСервере();
	
	Если Объект.Позиции.Количество() > 0 Тогда
		Элементы.Позиции.ТекущаяСтрока = Объект.Позиции[0].ПолучитьИдентификатор();
		ПозицииПриАктивизацииСтрокиНаКлиенте();
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПозицииНаСервере()

	ОчиститьПозиции(ЭтаФорма);
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ПОМЕСТИТЬ ВТПодразделенияОтбор
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&Подразделение)";
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТПодразделенияОтбор");
	
	ОрганизационнаяСтруктура.СоздатьВТПозицииПодразделений(Запрос.МенеджерВременныхТаблиц, "ВТПодразделенияОтбор");
	УдалитьВТ.Добавить("ВТПозицииПодразделений");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТПозицииПодразделений.Позиция КАК Позиция
		|ИЗ
		|	ВТПозицииПодразделений КАК ВТПозицииПодразделений";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МаксимальныйИдентификаторСтрокиПозиции = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Позиции.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ИдентификаторСтрокиОбъектаНазначения = МаксимальныйИдентификаторСтрокиПозиции;
		МаксимальныйИдентификаторСтрокиПозиции = МаксимальныйИдентификаторСтрокиПозиции + 1;
	КонецЦикла;
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

#Область ЗаполнениеПоказателейИзРодителя

// Подразделения
&НаКлиенте
Процедура ЗаполнитьПоказателиПодразделенийРодителяНаКлиенте()
	
	СтрокаПодразделения = СтрокаПодразделенийПоОтбору(ЭтаФорма);
	Если СтрокаПодразделения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПоказателей = Объект.ПоказателиПодразделений.НайтиСтроки(Новый Структура("ИдентификаторСтрокиОбъектаНазначения", СтрокаПодразделения.ИдентификаторСтрокиОбъектаНазначения));
	
	Если СтрокиПоказателей.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоказателиПодразделенийРодителяНаКлиентеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Информация о показателях подразделений будет очищена.
									|Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнитьПоказателиПодразделенийРодителяНаКлиентеЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиПодразделенийРодителяНаКлиентеЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = Неопределено
		ИЛИ Результат <> КодВозвратаДиалога.Да Тогда
	
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоказателиПодразделенийРодителяНаСервере();
	
	Если Объект.ПоказателиПодразделений.Количество() > 0 Тогда
		Элементы.ПоказателиПодразделений.ТекущаяСтрока = Объект.ПоказателиПодразделений[0].ПолучитьИдентификатор();
		ПоказателиПодразделенийПриАктивизацииСтрокиНаКлиенте();
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиПодразделенийРодителяНаСервере()

	СтрокаПодразделения = СтрокаПодразделенийПоОтбору(ЭтаФорма);
	Если СтрокаПодразделения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИсходноеПодразделение = СтрокаПодразделения.Подразделение;
	
	// Удаление показателей
	УдаляемыеПоказателиПодразделений = Объект.ПоказателиПодразделений.НайтиСтроки(Новый Структура("ИдентификаторСтрокиОбъектаНазначения", СтрокаПодразделения.ИдентификаторСтрокиОбъектаНазначения));
	Для каждого СтрокаПоказателя Из УдаляемыеПоказателиПодразделений Цикл
		УдалитьСтрокиШкалыЗначений(Объект.ШкалыЗначенийПодразделений, СтрокаПоказателя.ИдентификаторСтрокиПоказателя);
		Объект.ПоказателиПодразделений.Удалить(СтрокаПоказателя);
	КонецЦикла; 
	
	СтруктураПараметровПодразделений = Новый Структура;
	СтруктураПараметровПодразделений.Вставить("ОбъектНазначения", ИсходноеПодразделение);
	СтруктураПараметровПодразделений.Вставить("ЭлементыПоказатели", Элементы.ПоказателиПодразделений);
	СтруктураПараметровПодразделений.Вставить("ТаблицаПоказателей", Объект.ПоказателиПодразделений);
	СтруктураПараметровПодразделений.Вставить("ТаблицаШкал", Объект.ШкалыЗначенийПодразделений);
	СтруктураПараметровПодразделений.Вставить("ИмяРеквизитаМаксимальныйИдентификаторСтрокиПоказателя", "МаксимальныйИдентификаторСтрокиПоказателяПодразделения");
	
	ЗаполнитьПоказателиРодителяНаСервере(ИсходноеПодразделение, Ложь, СтруктураПараметровПодразделений);
	
	ПоказателиПодразделения = Объект.ПоказателиПодразделений.НайтиСтроки(Новый Структура("ИдентификаторСтрокиОбъектаНазначения", СтрокаПодразделения.ИдентификаторСтрокиОбъектаНазначения));
	Для каждого СтрокаПоказателя Из ПоказателиПодразделения Цикл
		ШкалаПоказателя = Объект.ШкалыЗначенийПодразделений.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПоказателя", СтрокаПоказателя.ИдентификаторСтрокиПоказателя));
		КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаПоНижнейГранице(ШкалаПоказателя, СтрокаПоказателя.ОбратнаяШкала);
	КонецЦикла; 
	
КонецПроцедуры

// Позиции
&НаКлиенте
Процедура ЗаполнитьПоказателиПозицийРодителяНаКлиенте()
	
	СтрокаПозиции = СтрокаПозицийПоОтбору(ЭтаФорма);
	СтрокиПоказателей = Объект.ПоказателиПозиций.НайтиСтроки(Новый Структура("ИдентификаторСтрокиОбъектаНазначения", СтрокаПозиции.ИдентификаторСтрокиОбъектаНазначения));
	
	Если СтрокиПоказателей.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоказателиПозицийРодителяНаКлиентеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Информация о показателях позиций будет очищена.
									|Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнитьПоказателиПозицийРодителяНаКлиентеЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиПозицийРодителяНаКлиентеЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = Неопределено
		ИЛИ Результат <> КодВозвратаДиалога.Да Тогда
	
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоказателиПозицийРодителяНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиПозицийРодителяНаСервере()

	СтрокаПозиции = СтрокаПозицийПоОтбору(ЭтаФорма);
	Если СтрокаПозиции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление показателей
	УдаляемыеПоказателиПозиции = Объект.ПоказателиПозиций.НайтиСтроки(Новый Структура("ИдентификаторСтрокиОбъектаНазначения", СтрокаПозиции.ИдентификаторСтрокиОбъектаНазначения));
	Для каждого СтрокаПоказателя Из УдаляемыеПоказателиПозиции Цикл
		УдалитьСтрокиШкалыЗначений(Объект.ШкалыЗначенийПозиций, СтрокаПоказателя.ИдентификаторСтрокиПоказателя);
		Объект.ПоказателиПозиций.Удалить(СтрокаПоказателя);
	КонецЦикла; 
	
	ИсходнаяПозиция = СтрокаПозиции.Позиция;
	
	СтруктураПараметровПозиций = Новый Структура;
	СтруктураПараметровПозиций.Вставить("ОбъектНазначения", ИсходнаяПозиция);
	СтруктураПараметровПозиций.Вставить("ЭлементыПоказатели", Элементы.ПоказателиПозиций);
	СтруктураПараметровПозиций.Вставить("ТаблицаПоказателей", Объект.ПоказателиПозиций);
	СтруктураПараметровПозиций.Вставить("ТаблицаШкал", Объект.ШкалыЗначенийПозиций);
	СтруктураПараметровПозиций.Вставить("ИмяРеквизитаМаксимальныйИдентификаторСтрокиПоказателя", "МаксимальныйИдентификаторСтрокиПоказателяПозиции");
	
	Подразделение = ОрганизационнаяСтруктура.МестоПозицииВСтруктуреПредприятия(ИсходнаяПозиция);
	
	ЗаполнитьПоказателиРодителяНаСервере(Подразделение, Истина, СтруктураПараметровПозиций);
	
	ПоказателиПозиций = Объект.ПоказателиПозиций.НайтиСтроки(Новый Структура("ИдентификаторСтрокиОбъектаНазначения", СтрокаПозиции.ИдентификаторСтрокиОбъектаНазначения));
	Для каждого СтрокаПоказателя Из ПоказателиПозиций Цикл
		ШкалаПоказателя = Объект.ШкалыЗначенийПозиций.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПоказателя", СтрокаПоказателя.ИдентификаторСтрокиПоказателя));
		КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаПоНижнейГранице(ШкалаПоказателя, СтрокаПоказателя.ОбратнаяШкала);
	КонецЦикла; 
	
КонецПроцедуры

// Общее
&НаСервере
Процедура ЗаполнитьПоказателиРодителяНаСервере(ИсходноеПодразделение, ВключаяСамоПодразделение, СтруктураПараметров)

	Запрос = ЗапросПоказателейПодразделенийВРегистрах(ИсходноеПодразделение, ВключаяСамоПодразделение);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Уровень") Цикл
		СтрокиПодразделения = Объект.Подразделения.НайтиСтроки(Новый Структура("Подразделение", Выборка.Подразделение));
		Если СтрокиПодразделения.Количество() > 0  Тогда
			ЗаполнитьПоказателиИзРодительскогоПодразделенияВДокументе(СтрокиПодразделения[0], СтруктураПараметров);
			Прервать;
		ИначеЕсли Выборка.Показатель <> Null Тогда
			ЗаполнитьПоказателиИзРодительскогоПодразделенияВыборка(Выборка, СтруктураПараметров);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗапросПоказателейПодразделенийВРегистрах(Подразделение, ВключаяСамоПодразделение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодчиненностьСтруктурныхЕдиниц.ВышестоящаяСтруктурнаяЕдиница КАК Подразделение,
		|	ПодчиненностьСтруктурныхЕдиниц.Уровень КАК Уровень
		|ПОМЕСТИТЬ ВТРодители
		|ИЗ
		|	РегистрСведений.ПодчиненностьСтруктурныхЕдиниц КАК ПодчиненностьСтруктурныхЕдиниц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО ПодчиненностьСтруктурныхЕдиниц.СтруктурнаяЕдиница = СтруктураПредприятия.Ссылка
		|			И (ПодчиненностьСтруктурныхЕдиниц.СтруктурнаяЕдиница = &Подразделение)
		|			И (&ВключаяСамоПодразделение
		|				ИЛИ ПодчиненностьСтруктурныхЕдиниц.ВышестоящаяСтруктурнаяЕдиница <> &Подразделение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРодители.Подразделение КАК Подразделение,
		|	ВТРодители.Уровень КАК Уровень,
		|	ПоказателиЭффективностиПодразделенийСрезПоследних.Показатель КАК Показатель,
		|	ПоказателиЭффективностиПодразделенийСрезПоследних.Вес КАК Вес,
		|	ПоказателиЭффективностиПодразделенийСрезПоследних.МестоВводаЗначений КАК МестоВводаЗначений,
		|	ШкалыПоказателиЭффективностиПодразделенийСрезПоследних.ЗначениеДо КАК ЗначениеДо,
		|	ШкалыПоказателиЭффективностиПодразделенийСрезПоследних.ОценкаЗадаетсяИнтервалом КАК ОценкаЗадаетсяИнтервалом,
		|	ШкалыПоказателиЭффективностиПодразделенийСрезПоследних.ИнтервалОценкиОт КАК ИнтервалОценкиОт,
		|	ШкалыПоказателиЭффективностиПодразделенийСрезПоследних.ИнтервалОценкиДо КАК ИнтервалОценкиДо,
		|	ШкалыПоказателиЭффективностиПодразделенийСрезПоследних.Оценка КАК Оценка,
		|	ПодразделенияВводаЗначенийПоказателейЭффективностиСрезПоследних.ОтветственныйЗаВводПлана КАК ОтветственныйЗаВводПлана,
		|	ПодразделенияВводаЗначенийПоказателейЭффективностиСрезПоследних.ОтветственныйЗаВводФакта КАК ОтветственныйЗаВводФакта
		|ИЗ
		|	ВТРодители КАК ВТРодители
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиЭффективностиПодразделений.СрезПоследних(
		|				&Период,
		|				Подразделение В
		|					(ВЫБРАТЬ
		|						ВТРодители.Подразделение КАК Подразделение
		|					ИЗ
		|						ВТРодители КАК ВТРодители)) КАК ПоказателиЭффективностиПодразделенийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалыПоказателиЭффективностиПодразделений.СрезПоследних(
		|					&Период,
		|					Подразделение В
		|						(ВЫБРАТЬ
		|							ВТРодители.Подразделение КАК Подразделение
		|						ИЗ
		|							ВТРодители КАК ВТРодители)) КАК ШкалыПоказателиЭффективностиПодразделенийСрезПоследних
		|			ПО ПоказателиЭффективностиПодразделенийСрезПоследних.Подразделение = ШкалыПоказателиЭффективностиПодразделенийСрезПоследних.Подразделение
		|				И ПоказателиЭффективностиПодразделенийСрезПоследних.Показатель = ШкалыПоказателиЭффективностиПодразделенийСрезПоследних.Показатель
		|				И ПоказателиЭффективностиПодразделенийСрезПоследних.Период = ШкалыПоказателиЭффективностиПодразделенийСрезПоследних.Период
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияВводаЗначенийПоказателейЭффективности.СрезПоследних(
		|					&Период,
		|					Подразделение В
		|						(ВЫБРАТЬ
		|							ВТРодители.Подразделение КАК Подразделение
		|						ИЗ
		|							ВТРодители КАК ВТРодители)) КАК ПодразделенияВводаЗначенийПоказателейЭффективностиСрезПоследних
		|			ПО ПоказателиЭффективностиПодразделенийСрезПоследних.Подразделение = ПодразделенияВводаЗначенийПоказателейЭффективностиСрезПоследних.Подразделение
		|				И ПоказателиЭффективностиПодразделенийСрезПоследних.Показатель = ПодразделенияВводаЗначенийПоказателейЭффективностиСрезПоследних.Показатель
		|				И ПоказателиЭффективностиПодразделенийСрезПоследних.Период = ПодразделенияВводаЗначенийПоказателейЭффективностиСрезПоследних.Период
		|		ПО ВТРодители.Подразделение = ПоказателиЭффективностиПодразделенийСрезПоследних.Подразделение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Уровень,
		|	Показатель,
		|	ЗначениеДо";
	
	Запрос.УстановитьПараметр("Период", Объект.Период);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ВключаяСамоПодразделение", ВключаяСамоПодразделение);
	
	Возврат Запрос;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиИзРодительскогоПодразделенияВДокументе(СтрокаКопируемогоОбъектаНазначения, СтруктураПараметров)

	КопируемыеСтрокиПоказателей = Объект.ПоказателиПодразделений.НайтиСтроки(
		Новый Структура("ИдентификаторСтрокиОбъектаНазначения", СтрокаКопируемогоОбъектаНазначения.ИдентификаторСтрокиОбъектаНазначения));
	
	Для каждого СтрокаКопируемогоПоказателя Из КопируемыеСтрокиПоказателей Цикл
		НоваяСтрокаПоказателя = НоваяСтрокаПоказателяИзРодителя(СтрокаКопируемогоПоказателя, СтруктураПараметров);
		ЗаполнитьСтрокуВводаЗначенийПоказателя(НоваяСтрокаПоказателя, СтруктураПараметров.ОбъектНазначения);
		
		КопируемыеСтрокиШкалы = Объект.ШкалыЗначенийПодразделений.НайтиСтроки(
			Новый Структура("ИдентификаторСтрокиПоказателя", СтрокаКопируемогоПоказателя.ИдентификаторСтрокиПоказателя));
			
		Для каждого СтрокаКопируемойШкалы Из КопируемыеСтрокиШкалы Цикл
			ЗаполнитьШкалуПоказателиИзРодителя(
				СтрокаКопируемойШкалы, НоваяСтрокаПоказателя.ИдентификаторСтрокиПоказателя, СтруктураПараметров);
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиИзРодительскогоПодразделенияВыборка(Выборка, СтруктураПараметров)

	Пока Выборка.СледующийПоЗначениюПоля("Показатель") Цикл
		НоваяСтрокаПоказателя = НоваяСтрокаПоказателяИзРодителя(Выборка, СтруктураПараметров);
		ЗаполнитьСтрокуВводаЗначенийПоказателя(НоваяСтрокаПоказателя, СтруктураПараметров.ОбъектНазначения);
		Пока Выборка.СледующийПоЗначениюПоля("ЗначениеДо") Цикл
			ЗаполнитьШкалуПоказателиИзРодителя(
				Выборка, НоваяСтрокаПоказателя.ИдентификаторСтрокиПоказателя, СтруктураПараметров);
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Функция  НоваяСтрокаПоказателяИзРодителя(СтрокаКопируемогоПоказателя, СтруктураПараметров)

	ТаблицаПоказателей = СтруктураПараметров.ТаблицаПоказателей;
	
	НоваяСтрокаПоказателя = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателя, СтрокаКопируемогоПоказателя);
	
	УстановитьИдентификаторСтрокиОбъектаНазначенияПоОтбору(СтруктураПараметров.ЭлементыПоказатели, НоваяСтрокаПоказателя);
	
	МаксимальныйИдентификаторСтрокиПоказателя = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
		ЭтаФорма, СтруктураПараметров.ИмяРеквизитаМаксимальныйИдентификаторСтрокиПоказателя);
	УстановитьИдентификаторНовойСтрокиПоказателя(
		НоваяСтрокаПоказателя, МаксимальныйИдентификаторСтрокиПоказателя);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		ЭтаФорма, СтруктураПараметров.ИмяРеквизитаМаксимальныйИдентификаторСтрокиПоказателя, МаксимальныйИдентификаторСтрокиПоказателя);

	Возврат НоваяСтрокаПоказателя;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьШкалуПоказателиИзРодителя(СтрокаШкалы, ИдентификаторСтрокиПоказателя, СтруктураПараметров)

	ТаблицаШкал = СтруктураПараметров.ТаблицаШкал;
	
	НоваяСтрока = ТаблицаШкал.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаШкалы);
	НоваяСтрока.ИдентификаторСтрокиПоказателя = ИдентификаторСтрокиПоказателя;

КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ЗагрузитьШкалуПоказателяПодразделенийНаСервере(Показатель, ОбратнаяШкала, ИдентификаторСтрокиПоказателя)

	ЗагрузитьШкалуПоказателя(
		Объект.ШкалыЗначенийПодразделений, Показатель, ОбратнаяШкала, ИдентификаторСтрокиПоказателя);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШкалуПоказателяПозицийНаКлиенте()

	ТекущиеДанные = Элементы.ПоказателиПозиций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ОбратнаяШкала = ПризнакОбратнаяШкалаПоказателя(ТекущиеДанные.Показатель);
	
	ЗагрузитьШкалуПоказателяПозицийНаСервере(ТекущиеДанные.Показатель, ТекущиеДанные.ОбратнаяШкала, ТекущиеДанные.ИдентификаторСтрокиПоказателя);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьШкалуПоказателяПозицийНаСервере(Показатель, ОбратнаяШкала, ИдентификаторСтрокиПоказателя)

	ЗагрузитьШкалуПоказателя(
		Объект.ШкалыЗначенийПозиций, Показатель, ОбратнаяШкала, ИдентификаторСтрокиПоказателя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИдентификаторСтрокиОбъектаНазначенияПоОтбору(ЭлементыПоказатели, ТекущиеДанные)
	
	ОтборСтроки = ЭлементыПоказатели.ОтборСтрок;
	Если ОтборСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ИдентификаторСтрокиОбъектаНазначения = ОтборСтроки.ИдентификаторСтрокиОбъектаНазначения;

КонецПроцедуры

&НаКлиенте
Процедура ПредзаполнитьЗначенияНовойСтрокиПоказателяПодразделений(ЭлементыПоказатели, ТекущиеДанные)

	ТекущиеДанные.Вес = 1;
	
	ТекущиеДанные.ОтветственныйЗаВводПлана = Объект.Ответственный;
	ТекущиеДанные.ОтветственныйЗаВводФакта = Объект.Ответственный;
	
	СтрокаПодразделений = СтрокаПодразделенийПоОтбору(ЭтаФорма);
	Если СтрокаПодразделений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.МестоВводаЗначений = СтрокаПодразделений.Подразделение;

КонецПроцедуры

&НаКлиенте
Процедура ПредзаполнитьЗначенияНовойСтрокиПоказателяПозиций(ЭлементыПоказатели, ТекущиеДанные)

	ТекущиеДанные.Вес = 1;
	
	ТекущиеДанные.ОтветственныйЗаВводПлана = Объект.Ответственный;
	ТекущиеДанные.ОтветственныйЗаВводФакта = Объект.Ответственный;
	
	СтрокаПозиций = СтрокаПозицийПоОтбору(ЭтаФорма);
	Если СтрокаПозиций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.МестоВводаЗначений = СтрокаПозиций.Позиция;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИдентификаторСтрокиШкалыЗначенийПоОтбору(ЭлементыШкалыЗначений, ТекущиеДанные)

	ОтборСтроки = ЭлементыШкалыЗначений.ОтборСтрок;
	Если ОтборСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ИдентификаторСтрокиПоказателя = ОтборСтроки.ИдентификаторСтрокиПоказателя;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиВводаЗначенийПодразделений()
	
	ТекущиеДанные = Элементы.ПоказателиПодразделений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастройкаВодаЗначенийПодразделенийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФормуНастройкиВводаЗначений(
		Объект.Подразделения, Элементы.ПоказателиПодразделений, ТекущиеДанные, ОповещениеОЗакрытии);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиВводаЗначенийПозиций()
	
	ТекущиеДанные = Элементы.ПоказателиПозиций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастройкаВодаЗначенийПозицийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФормуНастройкиВводаЗначений(
		Объект.Позиции, Элементы.ПоказателиПозиций, ТекущиеДанные, ОповещениеОЗакрытии);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиВводаЗначений(ТаблицаОбъектовНазначений, ЭлементыПоказатели, ТекущиеДанные, ОповещениеОЗакрытии)

	СтруктураПоиска = Новый Структура("ИдентификаторСтрокиОбъектаНазначения", ЭлементыПоказатели.ОтборСтрок.ИдентификаторСтрокиОбъектаНазначения);
	НайденныеСтроки = ТаблицаОбъектовНазначений.НайтиСтроки(СтруктураПоиска);
	
	ТекущиеДанныеПодразделение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НайденныеСтроки[0], "Подразделение");
	ТекущиеДанныеПозиция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НайденныеСтроки[0], "Позиция");
	
	ДляПозиции = ЗначениеЗаполнено(ТекущиеДанныеПозиция);
	Если ДляПозиции Тогда
		ТекущиеДанныеПодразделение = МестоПозицииВСтруктуреПредприятияНаСервере(ТекущиеДанныеПозиция);
		ОбъектНазначения = ТекущиеДанныеПозиция;
	Иначе
		ОбъектНазначения = ТекущиеДанныеПодразделение;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Показатель", ТекущиеДанные.Показатель);
	СтруктураПараметров.Вставить("ОбъектНазначения", ОбъектНазначения);
	СтруктураПараметров.Вставить("ДляПозиции", ДляПозиции);
	СтруктураПараметров.Вставить("Подразделение", ТекущиеДанныеПодразделение);
	СтруктураПараметров.Вставить("Позиция", ТекущиеДанныеПозиция);
	СтруктураПараметров.Вставить("ОтветственныйЗаВводПлана", ТекущиеДанные.ОтветственныйЗаВводПлана);
	СтруктураПараметров.Вставить("ОтветственныйЗаВводФакта", ТекущиеДанные.ОтветственныйЗаВводФакта);
	СтруктураПараметров.Вставить("МестоВводаЗначений", ТекущиеДанные.МестоВводаЗначений);
	СтруктураПараметров.Вставить("АдресТаблицыРодителей", АдресТаблицыРодителей(ТекущиеДанные.Показатель, ТекущиеДанныеПодразделение, ДляПозиции));
	
	ОткрытьФорму("Документ.НазначениеПоказателейЭффективности.Форма.ФормаНастройкиВводаЗначений", СтруктураПараметров, ЭтаФорма, УникальныйИдентификатор,,, ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаВодаЗначенийПодразделенийЗавершение(РезультатЗакрытия, ДополнительныеПараметры = Неопределено) Экспорт 

	Если РезультатЗакрытия = Неопределено
		ИЛИ ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаВодаЗначенийПодразделенийЗавершениеНаСервере(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВодаЗначенийПозицийЗавершение(РезультатЗакрытия, ДополнительныеПараметры = Неопределено) Экспорт 

	Если РезультатЗакрытия = Неопределено
		ИЛИ ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаВодаЗначенийПозицийЗавершениеНаСервере(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаВодаЗначенийПодразделенийЗавершениеНаСервере(РезультатЗакрытия, ДополнительныеПараметры = Неопределено) 

	ТекущиеДанные = Объект.ПоказателиПодразделений.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РезультатЗакрытия);
	
	ЗаполнитьСтрокуВводаЗначенийПоказателяПодразделений(ЭтаФорма, ТекущиеДанные);
	
	ПроверитьОтветственныхПоМестамВвода(ТекущиеДанные);
	 
КонецПроцедуры

&НаСервере
Процедура НастройкаВодаЗначенийПозицийЗавершениеНаСервере(РезультатЗакрытия, ДополнительныеПараметры = Неопределено) 

	ТекущиеДанные = Объект.ПоказателиПозиций.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РезультатЗакрытия);
	
	ЗаполнитьСтрокуВводаЗначенийПоказателяПозиции(ЭтаФорма, ТекущиеДанные);
	 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛишниеСтрокиПоказателей(ТаблицаОбъектовНазначения, ТаблицаПоказателей, ТаблицаШкал)

	МассивДляУдаления = Новый Массив;
	
	Для каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		НайденныеСтроки = ТаблицаОбъектовНазначения.НайтиСтроки(Новый Структура("ИдентификаторСтрокиОбъектаНазначения", СтрокаПоказателя.ИдентификаторСтрокиОбъектаНазначения));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		МассивДляУдаления.Добавить(СтрокаПоказателя);
		УдалитьСтрокиШкалыЗначений(ТаблицаШкал, СтрокаПоказателя.ИдентификаторСтрокиПоказателя);
	КонецЦикла; 

	Для каждого СтрокаПоказателя Из МассивДляУдаления Цикл
		ТаблицаПоказателей.Удалить(СтрокаПоказателя);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьСтрокиШкалыЗначений(ТаблицаШкал, ИдентификаторСтрокиПоказателя)

	МассивДляУдаления = Новый Массив;
	НайденныеСтроки = ТаблицаШкал.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПоказателя", ИдентификаторСтрокиПоказателя));
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ТаблицаШкал.Удалить(НайденнаяСтрока);
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛишниеСтрокиШкалыЗначений(ТаблицаПоказателей, ТаблицаШкалы)

	МассивДляУдаления = Новый Массив;
	
	Для каждого СтрокаПоказателя Из ТаблицаШкалы Цикл
		НайденныеСтроки = ТаблицаПоказателей.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПоказателя", СтрокаПоказателя.ИдентификаторСтрокиПоказателя));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		МассивДляУдаления.Добавить(СтрокаПоказателя);
	КонецЦикла; 

	Для каждого СтрокаПоказателя Из МассивДляУдаления Цикл
		ТаблицаШкалы.Удалить(СтрокаПоказателя);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьШкалуПоказателя(ТаблицаШкал, Показатель, ОбратнаяШкала, ИдентификаторСтрокиПоказателя)

	УдаляемыеСтроки = ТаблицаШкал.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПоказателя", ИдентификаторСтрокиПоказателя));
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаШкал.Удалить(УдаляемаяСтрока);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИдентификаторСтрокиПоказателя КАК ИдентификаторСтрокиПоказателя,
		|	СтруктураЦелейШкалаЗначений.ЗначениеДо КАК ЗначениеДо,
		|	СтруктураЦелейШкалаЗначений.Оценка КАК Оценка,
		|	СтруктураЦелейШкалаЗначений.ОценкаЗадаетсяИнтервалом КАК ОценкаЗадаетсяИнтервалом,
		|	СтруктураЦелейШкалаЗначений.ИнтервалОценкиОт КАК ИнтервалОценкиОт,
		|	СтруктураЦелейШкалаЗначений.ИнтервалОценкиДо КАК ИнтервалОценкиДо
		|ИЗ
		|	Справочник.СтруктураЦелей.ШкалаЗначений КАК СтруктураЦелейШкалаЗначений
		|ГДЕ
		|	СтруктураЦелейШкалаЗначений.Ссылка = &Показатель
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтруктураЦелейШкалаЗначений.НомерСтроки";
	Запрос.УстановитьПараметр("ИдентификаторСтрокиПоказателя", ИдентификаторСтрокиПоказателя);
	Запрос.УстановитьПараметр("Показатель", Показатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаШкал.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаОценкиВСтроке(НоваяСтрока);
	КонецЦикла;
	
	ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ИдентификаторСтрокиПоказателя", ИдентификаторСтрокиПоказателя));
	КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаПоНижнейГранице(
		КлючевыеПоказателиЭффективностиКлиентСервер.ШкалаПоказателяПоОтбору(ТаблицаШкал, ОтборСтрок),
		ОбратнаяШкала);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()

	УсловноеОформление.Элементы.Очистить();
	
	КлючевыеПоказателиЭффективностиФормы.УстановитьУсловноеОформлениеШкалыЗначений(УсловноеОформление, "ШкалыЗначенийПодразделений");
	КлючевыеПоказателиЭффективностиФормы.УстановитьУсловноеОформлениеШкалыЗначений(УсловноеОформление, "ШкалыЗначенийПозиций");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораПодразделенийВТЧ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&Подразделение)";
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивПодразделений = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	КлючевыеПоказателиЭффективностиФормы.УстановитьПараметрыВыбораПодразделениям(Элементы.ПодразделенияПодразделение, МассивПодразделений);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораПозицийТЧ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&Подразделение)";
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивПодразделений = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Подразделение");	
	
	ТаблицаПозиций = ОрганизационнаяСтруктура.ПозицииПодразделений(МассивПодразделений);
	МассивПозиций = ТаблицаПозиций.ВыгрузитьКолонку("Позиция");
	
	ПараметрыВыбораМассив = Новый Массив;
	ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивПозиций));
	
	Элементы.ПозицииПозиция.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив); 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПодразделенийПоОтбору(Форма)

	ОтборСтроки = Форма.Элементы.ПоказателиПодразделений.ОтборСтрок;
	Если ОтборСтроки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныеСтроки = Форма.Объект.Подразделения.НайтиСтроки(Новый Структура(ОтборСтроки));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденныеСтроки[0];
	КонецЕсли	

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПодразделенийПоИдентификатору(Форма, ИдентификаторСтрокиОбъектаНазначения)

	НайденныеСтроки = Форма.Объект.Подразделения.НайтиСтроки(Новый Структура("ИдентификаторСтрокиОбъектаНазначения", ИдентификаторСтрокиОбъектаНазначения));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденныеСтроки[0];
	КонецЕсли	

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПозицийПоОтбору(Форма)

	ОтборСтроки = Форма.Элементы.ПоказателиПозиций.ОтборСтрок;
	Если ОтборСтроки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныеСтроки = Форма.Объект.Позиции.НайтиСтроки(Новый Структура(ОтборСтроки));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденныеСтроки[0];
	КонецЕсли	

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПозицийПоИдентификатору(Форма, ИдентификаторСтрокиОбъектаНазначения)

	НайденныеСтроки = Форма.Объект.Позиции.НайтиСтроки(Новый Структура("ИдентификаторСтрокиОбъектаНазначения", ИдентификаторСтрокиОбъектаНазначения));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденныеСтроки[0];
	КонецЕсли	

КонецФункции

&НаКлиенте
Функция СтрокаПоказателяПоОтбору(ТаблицаПоказателей, Элемент)

	ИдентификаторСтрокиПоказателя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Элемент.ОтборСтрок, "ИдентификаторСтрокиПоказателя", Неопределено);
	Если ИдентификаторСтрокиПоказателя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаПоказателей.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПоказателя", ИдентификаторСтрокиПоказателя));
	Возврат НайденныеСтроки[0];

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементаУтвердил(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Утвердивший",
		"Доступность",
		Форма.Объект.Утвержден);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзмененииНаКлиенте()

	Если Объект.Подразделения.Количество() > 0
		ИЛИ Объект.Позиции.Количество() > 0 Тогда
	
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодразделениеПриИзмененииНаКлиентеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличные части документа будут очищены.
									|Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПодразделениеПриИзмененииНаКлиентеЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзмененииНаКлиентеЗавершение(РезультатЗакрытия, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатЗакрытия = Неопределено
		ИЛИ РезультатЗакрытия <> КодВозвратаДиалога.Да Тогда
		
		Объект.Подразделение = ПодразделениеБыло;
		Возврат;
	КонецЕсли;
	
	ПодразделениеБыло = Объект.Подразделение;
	
	ОчиститьПодразделения(ЭтаФорма);	
	ОчиститьПозиции(ЭтаФорма);
	
	УстановитьПараметрыВыбораПодразделенийВТЧ();
	УстановитьПараметрыВыбораПозицийТЧ();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПодразделения(Форма)

	Форма.Объект.Подразделения.Очистить();
	Форма.Объект.ПоказателиПодразделений.Очистить();
	Форма.Объект.ШкалыЗначенийПодразделений.Очистить();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПозиции(Форма)

	Форма.Объект.Позиции.Очистить();
	Форма.Объект.ПоказателиПозиций.Очистить();
	Форма.Объект.ШкалыЗначенийПозиций.Очистить();

КонецПроцедуры

&НаКлиенте
Функция СтруктураПараметровШкалыЗначенийПодразделений()

	СтрокаПоказателяПодразделения = СтрокаПоказателяПоОтбору(
		Объект.ПоказателиПодразделений, Элементы.ШкалыЗначенийПодразделений);
	
	СтруктураПараметров = Новый Структура;

	СтруктураПараметров.Вставить("ШкалаЗначений", Объект.ШкалыЗначенийПодразделений);
	СтруктураПараметров.Вставить("ОбратнаяШкала", СтрокаПоказателяПодразделения.ОбратнаяШкала);
	СтруктураПараметров.Вставить("ОтборСтрок", Элементы.ШкалыЗначенийПодразделений.ОтборСтрок);
	СтруктураПараметров.Вставить("ИмяПоляЗначениеДо", "ШкалыЗначенийПодразделенийЗначениеДо");
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", "Объект.ШкалыЗначенийПодразделений");
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Функция СтруктураПараметровШкалыЗначенийПозиций()

	СтрокаПоказателяПозиции = СтрокаПоказателяПоОтбору(
		Объект.ПоказателиПозиций, Элементы.ШкалыЗначенийПозиций);
	
	СтруктураПараметров = Новый Структура;

	СтруктураПараметров.Вставить("ШкалаЗначений", Объект.ШкалыЗначенийПозиций);
	СтруктураПараметров.Вставить("ОбратнаяШкала", СтрокаПоказателяПозиции.ОбратнаяШкала);
	СтруктураПараметров.Вставить("ОтборСтрок", Элементы.ШкалыЗначенийПозиций.ОтборСтрок);
	СтруктураПараметров.Вставить("ИмяПоляЗначениеДо", "ШкалыЗначенийПозицийЗначениеДо");
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", "Объект.ШкалыЗначенийПозиций");
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция АдресТаблицыРодителей(Показатель, Подразделение, ВключаяСамоПодразделение)

	ТаблицаРодителей = Новый ТаблицаЗначений;
	ТаблицаРодителей.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаРодителей.Колонки.Добавить("ОтветственныйЗаВводПлана", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаРодителей.Колонки.Добавить("ОтветственныйЗаВводФакта", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодчиненностьСтруктурныхЕдиниц.ВышестоящаяСтруктурнаяЕдиница КАК Подразделение
		|ПОМЕСТИТЬ ВТРодители
		|ИЗ
		|	РегистрСведений.ПодчиненностьСтруктурныхЕдиниц КАК ПодчиненностьСтруктурныхЕдиниц
		|ГДЕ
		|	ПодчиненностьСтруктурныхЕдиниц.СтруктурнаяЕдиница = &Подразделение
		|	И (&ВключаяСамоПодразделение
		|			ИЛИ ПодчиненностьСтруктурныхЕдиниц.ВышестоящаяСтруктурнаяЕдиница <> &Подразделение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТРодители.Подразделение КАК Подразделение,
		|	ПодразделенияВводаЗначений.Показатель КАК Показатель,
		|	ПодразделенияВводаЗначений.Подразделение КАК МестоВводаЗначений,
		|	ПодразделенияВводаЗначений.ОтветственныйЗаВводПлана КАК ОтветственныйЗаВводПлана,
		|	ПодразделенияВводаЗначений.ОтветственныйЗаВводФакта КАК ОтветственныйЗаВводФакта
		|ИЗ
		|	ВТРодители КАК ВТРодители
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиЭффективностиПодразделений.СрезПоследних(
		|				&Период,
		|				Показатель = &Показатель
		|					И Подразделение В
		|						(ВЫБРАТЬ
		|							ВТРодители.Подразделение КАК Подразделение
		|						ИЗ
		|							ВТРодители КАК ВТРодители)) КАК ПоказателиЭффективностиПодразделенийСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияВводаЗначенийПоказателейЭффективности.СрезПоследних(
		|					&Период,
		|					Подразделение В
		|						(ВЫБРАТЬ
		|							ВТРодители.Подразделение КАК Подразделение
		|						ИЗ
		|							ВТРодители КАК ВТРодители)) КАК ПодразделенияВводаЗначений
		|			ПО ПоказателиЭффективностиПодразделенийСрезПоследних.Показатель = ПодразделенияВводаЗначений.Показатель
		|				И ПоказателиЭффективностиПодразделенийСрезПоследних.МестоВводаЗначений = ПодразделенияВводаЗначений.Подразделение
		|		ПО ВТРодители.Подразделение = ПоказателиЭффективностиПодразделенийСрезПоследних.МестоВводаЗначений";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ВключаяСамоПодразделение", ВключаяСамоПодразделение);
	Запрос.УстановитьПараметр("Показатель", Показатель);
	Запрос.УстановитьПараметр("Период", Объект.Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиПодразделения = Объект.Подразделения.НайтиСтроки(Новый Структура("Подразделение", Выборка.Подразделение));
		Если СтрокиПодразделения.Количество() > 0  Тогда
			СтрокаПодразделения = СтрокиПодразделения[0];
			СтрокиПоказателя = Объект.ПоказателиПодразделений.НайтиСтроки(Новый Структура("ИдентификаторСтрокиОбъектаНазначения, Показатель", СтрокаПодразделения.ИдентификаторСтрокиОбъектаНазначения, Показатель));
			Если СтрокиПоказателя.Количество() > 0
				И СтрокиПоказателя[0].МестоВводаЗначений = СтрокаПодразделения.Подразделение Тогда
				
				НоваяСтрока = ТаблицаРодителей.Добавить();
				НоваяСтрока.Подразделение = СтрокаПодразделения.Подразделение;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиПоказателя[0]);
			КонецЕсли;
		ИначеЕсли Выборка.Показатель <> Null Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;

	Возврат ПоместитьВоВременноеХранилище(ТаблицаРодителей, УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция МестоПозицииВСтруктуреПредприятияНаСервере(Позиция)
	Возврат ОрганизационнаяСтруктура.МестоПозицииВСтруктуреПредприятия(Позиция);
КонецФункции

&НаСервере
Процедура ПроверитьОтветственныхПоМестамВвода(ТекущиеДанные)

	СтрокаПодразделений = СтрокаПодразделенийПоОтбору(ЭтаФорма);
	Если СтрокаПодразделений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиОтветственных = Объект.ПоказателиПодразделений.НайтиСтроки(Новый Структура("МестоВводаЗначений, Показатель", СтрокаПодразделений.Подразделение, ТекущиеДанные.Показатель));
	ИзменитьОтветственныхЗаВвод(СтрокиОтветственных, ТекущиеДанные);
	
	СтрокиОтветственных = Объект.ПоказателиПозиций.НайтиСтроки(Новый Структура("МестоВводаЗначений", СтрокаПодразделений.Подразделение));
	ИзменитьОтветственныхЗаВвод(СтрокиОтветственных, ТекущиеДанные);

КонецПроцедуры

&НаСервере
Процедура ИзменитьОтветственныхЗаВвод(СтрокиОтветственных, ТекущиеДанные)

	Для каждого СтрокаОтветственных Из СтрокиОтветственных Цикл
		ПерезаполнитьСтроку = Ложь;
	    Если СтрокаОтветственных.ОтветственныйЗаВводПлана <> ТекущиеДанные.ОтветственныйЗаВводПлана Тогда
			СтрокаОтветственных.ОтветственныйЗаВводПлана = ТекущиеДанные.ОтветственныйЗаВводПлана;
			ПерезаполнитьСтроку = Истина;
		КонецЕсли;
	    Если СтрокаОтветственных.ОтветственныйЗаВводФакта <> ТекущиеДанные.ОтветственныйЗаВводФакта Тогда
			СтрокаОтветственных.ОтветственныйЗаВводФакта = ТекущиеДанные.ОтветственныйЗаВводФакта;
			ПерезаполнитьСтроку = Истина;
		КонецЕсли;
		Если ПерезаполнитьСтроку Тогда
			ЗаполнитьСтрокуВводаЗначенийПоказателяПодразделений(ЭтаФорма, СтрокаОтветственных);
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти