#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если СпособОплаты = Перечисления.СпособыОплатыПоДоговоруГПХ.ПоАктамВыполненныхРабот Тогда
		МесяцНачисления = '00010101';
	Иначе
		МесяцНачисления = НачалоМесяца(ДатаОкончания);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаНачала, "Объект.ДатаНачала", Отказ, НСтр("ru='Дата начала'"), , , Ложь);
	ЗарплатаКадрыРасширенный.ПроверитьПериодРегистратораНачисленийУдержаний(ДатаНачала, ДатаОкончания, ЭтотОбъект, "ДатаОкончания", Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения, , Истина)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	ДанныеОПлановыхНачислениях = ДанныеДляПроведения.ПлановыеНачисленияПоДоговорам;
	
	Для Каждого Строка Из ДанныеОПлановыхНачислениях Цикл
		
		Если Строка.ОплатаПоАктамВыполненныхРабот Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.АктПроведен Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'На основании договора уже введен документ %1. Для проведения документа необходимо удалить акт выполненных работ или изменить вариант оплаты в договоре на ""по актам выполненных работ"".'"), Строка.АктВыполненныхРабот);
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		Если СпособОплаты = Перечисления.СпособыОплатыПоДоговоруГПХ.ВКонцеСрокаСАвансовымиПлатежами Тогда
			Движения.УсловияДоговораГПХ.Записывать = Истина;
		    НоваяСтрока = Движения.УсловияДоговораГПХ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период = ДатаНачала;
		Иначе
			Движения.ПлановыеНачисленияПоДоговорам.Записывать = Истина;
		    НоваяСтрока = Движения.ПлановыеНачисленияПоДоговорам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	КадровыйУчетРасширенный.СформироватьДвиженияДоговоровГПХ(Движения, ДанныеДляПроведения.ПериодыДействияДоговоровГражданскоПравовогоХарактера);
	УчетСтажаПФР.ЗарегистрироватьПериодыВУчетеСтажаПФР(Движения, ДанныеДляРегистрацииВУчетаСтажаПФР());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	Возврат ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоОрганизацииИСотруднику(ЭтотОбъект, Организация, Сотрудник, ДатаНачала);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает данные для формирования движений.
// Возвращает таблицу значений - данные, необходимые для формирования плановых начислений по договорам.
//
Функция ДанныеДляПроведения()
	
	КодДоходаСтраховыеВзносы = УчетСтраховыхВзносовРасширенный.ВидДоходаДляДоговораНаВыполнениеРабот(ОблагаетсяФСС_НС);
	
	НДФЛДоговорыРаботыУслуги = УчетНДФЛРасширенный.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги);
	КодДохода = НДФЛДоговорыРаботыУслуги[0];
	
	ВычетыКДоходам = УчетНДФЛ.ВычетыКДоходам(Год(Дата));
	КодВычета = ВычетыКДоходам[КодДохода][0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("КодДоходаСтраховыеВзносы", КодДоходаСтраховыеВзносы);
	Запрос.УстановитьПараметр("КодДохода", КодДохода);
	Запрос.УстановитьПараметр("КодВычета", КодВычета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорРаботыУслуги.Сотрудник,
	|	ДоговорРаботыУслуги.Организация,
	|	ДоговорРаботыУслуги.Ссылка КАК Договор,
	|	&КодДохода КАК КодДохода,
	|	&КодВычета КАК КодВычета,
	|	&КодДоходаСтраховыеВзносы КАК КодДоходаСтраховыеВзносы,
	|	ДоговорРаботыУслуги.СпособОтраженияЗарплатыВБухучете,
	|	ДоговорРаботыУслуги.ОтношениеКЕНВД,
	|	ДоговорРаботыУслуги.Подразделение,
	|	ДоговорРаботыУслуги.Территория,
	|	ДоговорРаботыУслуги.Сумма,
	|	ДоговорРаботыУслуги.СуммаВычета,
	|	ДоговорРаботыУслуги.СуммаЕНВД,
	|	НАЧАЛОПЕРИОДА(ДоговорРаботыУслуги.ДатаОкончания, МЕСЯЦ) КАК МесяцНачисления,
	|	ВЫБОР
	|		КОГДА ДоговорРаботыУслуги.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплатыПоДоговоруГПХ.ПоАктамВыполненныхРабот)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОплатаПоАктамВыполненныхРабот,
	|	ВЫБОР
	|		КОГДА ДоговорРаботыУслуги.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплатыПоДоговоруГПХ.ВКонцеСрокаСАвансовымиПлатежами)
	|			ТОГДА ДоговорРаботыУслуги.ДатаНачала
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДоговорРаботыУслуги.ДатаНачала <= НАЧАЛОПЕРИОДА(ДоговорРаботыУслуги.ДатаОкончания, МЕСЯЦ)
	|					ТОГДА НАЧАЛОПЕРИОДА(ДоговорРаботыУслуги.ДатаОкончания, МЕСЯЦ)
	|				ИНАЧЕ ДоговорРаботыУслуги.ДатаНачала
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаНачала,
	|	ДоговорРаботыУслуги.ДатаОкончания,
	|	ДоговорРаботыУслуги.ЗаключенСоСтудентомРаботающимВСтудотряде,
	|	ДоговорРаботыУслуги.СтатьяФинансирования,
	|	ДоговорРаботыУслуги.СтатьяРасходов,
	|	ДоговорРаботыУслуги.Ссылка КАК ДоговорАкт,
	|	ЕСТЬNULL(АктПриемкиВыполненныхРаботОказанныхУслуг.Проведен, ЛОЖЬ) КАК АктПроведен,
	|	АктПриемкиВыполненныхРаботОказанныхУслуг.Ссылка КАК АктВыполненныхРабот,
	|	ДоговорРаботыУслуги.ДатаОкончания КАК ПланируемаяДатаВыплаты,
	|	ДоговорРаботыУслуги.РазмерПлатежа КАК РазмерЕжемесячногоАвансовогоПлатежа,
	|	ДоговорРаботыУслуги.Дата КАК Период,
	|	ДоговорРаботыУслуги.ФизическоеЛицо
	|ИЗ
	|	Документ.ДоговорРаботыУслуги КАК ДоговорРаботыУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктПриемкиВыполненныхРаботОказанныхУслуг КАК АктПриемкиВыполненныхРаботОказанныхУслуг
	|		ПО ДоговорРаботыУслуги.Ссылка = АктПриемкиВыполненныхРаботОказанныхУслуг.Договор
	|ГДЕ
	|	ДоговорРаботыУслуги.Ссылка = &Ссылка";
	
	РезультатыЗапроса = Запрос.Выполнить();
	
	ДанныеДляПроведения = Новый Структура("ПлановыеНачисленияПоДоговорам,ПериодыДействияДоговоровГражданскоПравовогоХарактера");
	ДанныеДляПроведения.Вставить("ПлановыеНачисленияПоДоговорам", РезультатыЗапроса.Выгрузить());
	
	ПериодыДействияДоговоровГражданскоПравовогоХарактера = Новый Структура;
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("Организация", Организация);
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("Филиал", Организация);
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("Сотрудник", Сотрудник);
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("ДатаНачала", ДатаНачала);
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("ДатаОкончания", ДатаОкончания);
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("Подразделение", Подразделение);
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("Территория", Территория);
	
	ДанныеДляПроведения.Вставить("ПериодыДействияДоговоровГражданскоПравовогоХарактера",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПериодыДействияДоговоровГражданскоПравовогоХарактера));
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР()
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	
	ДанныеДляРегистрации = Документы.ДоговорРаботыУслуги.ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок);
	
	Возврат ДанныеДляРегистрации[Ссылка];
	
КонецФункции

#КонецОбласти

#КонецЕсли
