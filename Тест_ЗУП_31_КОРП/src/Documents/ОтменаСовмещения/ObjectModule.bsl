#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ПередЗаписьюМногофункциональногоДокумента(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ДатаНачалаСовмещения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДатаНачала");
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаОтмены, "Объект.ДатаОтмены", Отказ, НСтр("ru='Дата отмены'"), ДатаНачалаСовмещения, НСтр("ru='даты начала совмещения'"), Ложь);
	
	ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, "ПериодическиеСведения");
	
	Если Не ОтменаДоплатыУтверждена Или Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Начисление");
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ПроверитьУтверждениеДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ОбъектОснование = ДанныеЗаполнения;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Сотрудник") Тогда
		ОбъектОснование = ДанныеЗаполнения.Сотрудник;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектОснование) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ОбъектОснование, , Истина);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудник", ОбъектОснование);
		Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДатаСеанса());
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Совмещение.Ссылка
			|ИЗ
			|	Документ.Совмещение КАК Совмещение
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтменаСовмещения КАК ОтменаСовмещения
			|		ПО Совмещение.Ссылка = ОтменаСовмещения.ДокументОснование
			|			И (ОтменаСовмещения.Проведен)
			|ГДЕ
			|	Совмещение.СовмещающийСотрудник = &Сотрудник
			|	И (Совмещение.ДатаОкончания >= &ДатаОкончания
			|			ИЛИ Совмещение.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
			|	И Совмещение.Проведен
			|	И ОтменаСовмещения.Ссылка ЕСТЬ NULL ";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				
				Выборка.Следующий();
				ОбъектОснование = Выборка.Ссылка
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;	
	
	Если ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.Совмещение") Тогда
		ЗаполнитьРеквизитыПоОснованию(ОбъектОснование);
	ИначеЕсли ТипЗнч(ОбъектОснование) = Тип("Структура") Тогда
		Если ОбъектОснование.Свойство("Действие") И ОбъектОснование.Действие = "Исправить" Тогда
			
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, ОбъектОснование.Ссылка);
			
			ИсправленныйДокумент = ОбъектОснование.Ссылка;
			ЗарплатаКадрыРасширенный.ПриКопированииМногофункциональногоДокумента(ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ОбработкаЗаполненияМногофункциональногоДокумента(ЭтотОбъект, ОбъектОснование, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Проведение документа
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект, , , ЗначениеЗаполнено(ИсправленныйДокумент));
	ЗарплатаКадрыРасширенный.ИнициализироватьОтложеннуюРегистрациюВторичныхДанныхПоДвижениямДокумента(Движения);
	
	ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(ЭтотОбъект, Отказ, РежимПроведения);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПроведения = ДанныеДляПроведения();
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(Движения, ДанныеПроведения.СотрудникиДаты, Ссылка);
	
	Если Не ОтменаДоплатыУтверждена Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураПлановыхНачислений = Новый Структура;
	СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеПроведения.ПлановыеНачисления);
	СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеПроведения.ЗначенияПоказателей);
	
	РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ЭтотОбъект, Движения, СтруктураПлановыхНачислений);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКУдалениюПроведения(ЭтотОбъект, ЗначениеЗаполнено(ИсправленныйДокумент));
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗарплатаКадрыРасширенный.ПриКопированииМногофункциональногоДокумента(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	Возврат ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоОрганизацииИСотруднику(ЭтотОбъект, Организация, СовмещающийСотрудник, ДатаОтмены);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляПроведения()
	
	ДанныеДляПроведения = Новый Структура; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Если ОтменаДоплатыУтверждена Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтменаСовмещения.ДатаОтмены КАК ДатаСобытия,
		|	ОтменаСовмещения.СовмещающийСотрудник КАК Сотрудник,
		|	ОтменаСовмещения.Начисление КАК Начисление,
		|	ЛОЖЬ КАК Используется,
		|	ОтменаСовмещения.СовмещающийСотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОтменаСовмещения.СовмещающийСотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ОтменаСовмещения.ДокументОснование КАК ДокументОснование,
		|	0 КАК Размер
		|ПОМЕСТИТЬ ВТПлановыеНачисления
		|ИЗ
		|	Документ.ОтменаСовмещения КАК ОтменаСовмещения
		|ГДЕ
		|	ОтменаСовмещения.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтменаСовмещенияНачисленияСотрудника.Ссылка.ДатаОтмены,
		|	ОтменаСовмещенияНачисленияСотрудника.Ссылка.СовмещающийСотрудник,
		|	ОтменаСовмещенияНачисленияСотрудника.Начисление,
		|	ИСТИНА,
		|	ОтменаСовмещенияНачисленияСотрудника.Ссылка.СовмещающийСотрудник.ФизическоеЛицо,
		|	ОтменаСовмещенияНачисленияСотрудника.Ссылка.СовмещающийСотрудник.ГоловнаяОрганизация,
		|	ОтменаСовмещенияНачисленияСотрудника.ДокументОснование,
		|	ОтменаСовмещенияНачисленияСотрудника.Размер
		|ИЗ
		|	Документ.ОтменаСовмещения.НачисленияСотрудника КАК ОтменаСовмещенияНачисленияСотрудника
		|ГДЕ
		|	ОтменаСовмещенияНачисленияСотрудника.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисления.ДатаСобытия КАК ДатаСобытия,
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|	ПлановыеНачисления.Начисление КАК Начисление,
		|	ПлановыеНачисления.Используется КАК Используется,
		|	ПлановыеНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПлановыеНачисления.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПлановыеНачисления.ДокументОснование КАК ДокументОснование,
		|	ПлановыеНачисления.Размер КАК Размер
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисления.ДатаСобытия КАК ДатаСобытия,
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|	ПлановыеНачисления.Начисление КАК Начисление,
		|	ПлановыеНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПлановыеНачисления.ГоловнаяОрганизация КАК Организация,
		|	ПоказателиНачислений.Показатель КАК Показатель,
		|	0 КАК Значение
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.Ссылка = ПлановыеНачисления.Начисление)
		|			И (ПоказателиНачислений.ОтменяемыйПоказатель)
		|ГДЕ
		|	НЕ ПлановыеНачисления.Используется
		|	И ПоказателиНачислений.Показатель ЕСТЬ НЕ NULL ";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		// Таблица для формирования плановых начислений.
		ДанныеДляПроведения.Вставить("ПлановыеНачисления", РезультатЗапроса[1].Выгрузить());
		
		// Таблица для формирования значениий показателей плановых начислений.
		ДанныеДляПроведения.Вставить("ЗначенияПоказателей", РезультатЗапроса[2].Выгрузить());
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтменаСовмещения.ДатаОтмены КАК ДатаСобытия,
	|	ОтменаСовмещения.СовмещающийСотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ОтменаСовмещения КАК ОтменаСовмещения
	|ГДЕ
	|	ОтменаСовмещения.Ссылка = &Ссылка";
	
	// Таблица для формирования времени регистрации документа.
	СотрудникиДаты = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура ЗаполнитьРеквизитыПоОснованию(ДокументОснование)
	
	РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Организация, СовмещающийСотрудник, Начисление");

	ЭтотОбъект.Организация = РеквизитыДокументаОснования.Организация;
	ЭтотОбъект.СовмещающийСотрудник = РеквизитыДокументаОснования.СовмещающийСотрудник;
	ЭтотОбъект.ДокументОснование = ДокументОснование;	
	ЭтотОбъект.Начисление = РеквизитыДокументаОснования.Начисление;

КонецПроцедуры

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.СовмещающийСотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ДатаОтмены КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ОтменаСовмещения КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор";
		
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
