#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_СправкаРасширенная";
	КомандаПечати.Представление = НСтр("ru = 'Справка'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 10;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	СсылкиЭтогоДокумента = Новый Массив;
	Для Каждого ДопустимыйОбъект Из МассивОбъектов Цикл
		Если ТипЗнч(ДопустимыйОбъект) = Тип("ДокументСсылка.ИсходящаяСправкаОЗаработкеДляРасчетаПособий") Тогда
			СсылкиЭтогоДокумента.Добавить(ДопустимыйОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Если СсылкиЭтогоДокумента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СправкаРасширенная") Тогда
		ТабличныйДокумент = ТабличныйДокументСправки(СсылкиЭтогоДокумента, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_СправкаРасширенная",
			НСтр("ru = 'Исходящая справка о заработке для расчета пособий'"),
			ТабличныйДокумент);
	КонецЕсли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// ЗарплатаКадрыПодсистемы.ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ПараметрыФиксацииВторичныхДанных = ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксацииВторичныхДанных(
		ФиксацияОписаниеФиксацииРеквизитов(),
		,
		ФиксацияОписанияТЧ());
	УчетПособийСоциальногоСтрахования.ДополнитьПараметрыФиксацииИсходящаяСправкаОЗаработкеДляРасчетаПособий(
		ПараметрыФиксацииВторичныхДанных);
	Возврат ПараметрыФиксацииВторичныхДанных;
КонецФункции

// Конец ЗарплатаКадрыПодсистемы.ФиксацияВторичныхДанныхВДокументах

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ИсходящаяСправкаОЗаработкеДляРасчетаПособий;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическоеЛицоВШапке(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ПечатьСправки

Функция ТабличныйДокументСправки(МассивСсылок, ОбъектыПечати)
	КэшМакетов = Новый Соответствие;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаОЗаработкеДляРасчетаПособий";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ДанныеДокументов          = ЗапросПоОсновнымДанным(МассивСсылок).Выполнить().Выгрузить();
	ВыборкаЗаработка          = ЗапросПоЗаработку(МассивСсылок).Выполнить().Выбрать();
	ВыборкаПериодовРаботы     = ЗапросПоПериодамРаботы(МассивСсылок).Выполнить().Выбрать();
	ПериодыНетрудоспособности = ЗапросПоПериодамНетрудоспособности(МассивСсылок).Выполнить().Выгрузить();
	
	АдресаОрганизаций = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресаОрганизаций(ДанныеДокументов.ВыгрузитьКолонку("Организация"));
	Валюта = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	МассивФизлиц = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФизлиц, ДанныеДокументов.ВыгрузитьКолонку("Руководитель"), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФизлиц, ДанныеДокументов.ВыгрузитьКолонку("ГлавныйБухгалтер"), Истина);
	КадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, МассивФизлиц, "ИОФамилия");
	
	ПервыйДокумент = Истина;
	Для Каждого ДанныеДокумента Из ДанныеДокументов Цикл
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		НачалоТекущегоФрагмента = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ИмяМакета = ?(ДанныеДокумента.Дата >= '20130701', "ПФ_MXL_СправкаРасширенная", "ПФ_MXL_Справка");
		СоставМакета = СоставМакета(КэшМакетов, ИмяМакета);
		
		ВывестиШапку(ТабличныйДокумент, СоставМакета.Шапка, ДанныеДокумента, АдресаОрганизаций);
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеДокумента.Ссылка);
		Если ИмяМакета = "ПФ_MXL_СправкаРасширенная" Тогда
			ВывестиПериодРаботы(ТабличныйДокумент, СоставМакета.ПериодРаботы, СтруктураПоиска, ВыборкаПериодовРаботы);
		КонецЕсли;
		
		ВывестиЗаработок(ТабличныйДокумент, СоставМакета, СтруктураПоиска, ВыборкаЗаработка, Валюта);
		
		Если ИмяМакета = "ПФ_MXL_СправкаРасширенная" Тогда
			ВывестиПериодыНетрудоспособности(ТабличныйДокумент, СоставМакета, СтруктураПоиска, ПериодыНетрудоспособности);
		КонецЕсли;
		
		ВывестиПодвал(ТабличныйДокумент, СоставМакета.Подвал, ДанныеДокумента, КадровыеДанныеФизическихЛиц);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НачалоТекущегоФрагмента, ОбъектыПечати, ДанныеДокумента.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция СоставМакета(КэшМакетов, ИмяМакета)
	СоставМакета = КэшМакетов[ИмяМакета];
	Если СоставМакета = Неопределено Тогда
		СоставМакета = Новый Структура;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий." + ИмяМакета);
		Макет.Область().СоздатьФорматСтрок();
		Для Каждого Область Из Макет.Области Цикл
			СоставМакета.Вставить(Область.Имя, Макет.ПолучитьОбласть(Область.Имя));
		КонецЦикла;
		
		КэшМакетов.Вставить(ИмяМакета, СоставМакета);
	КонецЕсли;
	Возврат СоставМакета;
КонецФункции

Процедура ВывестиШапку(ТабличныйДокумент, ОбластьШапка, ДанныеДокумента, АдресаОрганизаций)
	ПараметрыОбластиШапка = ОбластьШапка.Параметры;
	
	ПараметрыОбластиШапка.Заполнить(ДанныеДокумента);
	
	ПараметрыОбластиШапка.ФИО = СтрШаблон("%1 %2 %3", ДанныеДокумента.Фамилия, ДанныеДокумента.Имя, ДанныеДокумента.Отчество);
	
	ОписаниеЮридическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
		АдресаОрганизаций,
		ДанныеДокумента.Организация,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	ПараметрыОбластиШапка.АдресСтрахователя = ОписаниеЮридическогоАдреса.Представление;
	ПараметрыОбластиШапка.НаименованиеТерриториальногоОрганаФСС = СокрЛП(ПараметрыОбластиШапка.НаименованиеТерриториальногоОрганаФСС);
	ПараметрыОбластиШапка.КемВыданДокумент = СокрЛП(ПараметрыОбластиШапка.КемВыданДокумент);
	ПараметрыОбластиШапка.ДатаВыдачиДокумента = Формат(ПараметрыОбластиШапка.ДатаВыдачиДокумента,"ДЛФ=DD");
	
	ДанныеАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(
		ДанныеДокумента.АдресПоПрописке,
		Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	Если ДанныеАдреса <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОбластиШапка, ДанныеАдреса);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
КонецПроцедуры

Процедура ВывестиПериодРаботы(ТабличныйДокумент, ОбластьПериодРаботы, СтруктураПоиска, ВыборкаПериодовРаботы)
	ПараметрыОбластиПериодРаботы = ОбластьПериодРаботы.Параметры;
	
	ВыведеноСтрок = 0;
	ВыборкаПериодовРаботы.Сбросить();
	Пока ВыборкаПериодовРаботы.НайтиСледующий(СтруктураПоиска) Цикл
		ПараметрыОбластиПериодРаботы.Заполнить(ВыборкаПериодовРаботы);
		ТабличныйДокумент.Вывести(ОбластьПериодРаботы);
		ВыведеноСтрок = ВыведеноСтрок + 1;
	КонецЦикла;
	
	Если ВыведеноСтрок = 0 Тогда
		ПараметрыОбластиПериодРаботы.ПериодРаботыС  = "";
		ПараметрыОбластиПериодРаботы.ПериодРаботыПо = "";
		ТабличныйДокумент.Вывести(ОбластьПериодРаботы);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиЗаработок(ТабличныйДокумент, СоставМакета, СтруктураПоиска, ВыборкаЗаработка, Валюта)
	ПараметрыОбластиГод = СоставМакета.Год.Параметры;
	
	ТабличныйДокумент.Вывести(СоставМакета.Пункт3);
	
	ВыведеноСтрок = 0;
	ВыборкаЗаработка.Сбросить();
	Пока ВыборкаЗаработка.НайтиСледующий(СтруктураПоиска) Цикл
		
		ПараметрыОбластиГод.РасчетныйГод = ВыборкаЗаработка.РасчетныйГод;
		ПараметрыОбластиГод.Заработок    = Формат(Цел(ВыборкаЗаработка.Заработок),"ЧДЦ=0; ЧН=-");
		ПараметрыОбластиГод.ЗаработокКоп = Формат((ВыборкаЗаработка.Заработок - Цел(ВыборкаЗаработка.Заработок)) * 100,"ЧЦ=2; ЧДЦ=0; ЧН=-");
		ПараметрыОбластиГод.ЗаработокПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ВыборкаЗаработка.Заработок, Валюта);
		ТабличныйДокумент.Вывести(СоставМакета.Год);
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
	КонецЦикла;
	
	Если ВыведеноСтрок = 0 Тогда
		ТабличныйДокумент.Вывести(СоставМакета.ПустойГод);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиПериодыНетрудоспособности(ТабличныйДокумент, СоставМакета, СтруктураПоиска, ПериодыНетрудоспособности)
	ПараметрыОбластиГодДни    = СоставМакета.ГодДни.Параметры;
	ПараметрыОбластиПериодДни = СоставМакета.ПериодДни.Параметры;
	
	ТабличныйДокумент.Вывести(СоставМакета.Пункт4);
	
	ПериодыНетрудоспособностиПоГодам = ПериодыНетрудоспособностиПоГодам(СтруктураПоиска, ПериодыНетрудоспособности);
	Для Каждого ДанныеГода Из ПериодыНетрудоспособностиПоГодам Цикл
		
		ПараметрыОбластиГодДни.ДнейБолезниУходаЗаДетьми = ДанныеГода.КоличествоДней;
		ПараметрыОбластиГодДни.РасчетныйГод = Формат(ДанныеГода.Год, "ЧГ=0");
		ТабличныйДокумент.Вывести(СоставМакета.ГодДни);
		
		Для Каждого ДанныеПериода Из ДанныеГода.Периоды Цикл
			ПараметрыОбластиПериодДни.ПериодС                  = ДанныеПериода.ПериодС;
			ПараметрыОбластиПериодДни.ПериодПо                 = ДанныеПериода.ПериодПо;
			ПараметрыОбластиПериодДни.ДнейБолезниУходаЗаДетьми = ДанныеПериода.КоличествоДней;
			ПараметрыОбластиПериодДни.НаименованиеПериода      = ДанныеПериода.НаименованиеПериода;
			ТабличныйДокумент.Вывести(СоставМакета.ПериодДни);
		КонецЦикла;
		
		Если ДанныеГода.Периоды.Количество() = 0 Тогда
			ТабличныйДокумент.Вывести(СоставМакета.ПустойПериодДни);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПериодыНетрудоспособностиПоГодам.Количество() = 0 Тогда
		ТабличныйДокумент.Вывести(СоставМакета.ПустойГодДни);
		ТабличныйДокумент.Вывести(СоставМакета.ПустойПериодДни);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиПодвал(ТабличныйДокумент, ОбластьПодвал, ДанныеДокумента, КадровыеДанныеФизическихЛиц)
	ОбластьПодвал.Параметры.Заполнить(ДанныеДокумента);
	
	ДанныеРуководителя = КадровыеДанныеФизическихЛиц.Найти(ДанныеДокумента.Руководитель, "ФизическоеЛицо");
	Если ДанныеРуководителя <> Неопределено Тогда
		ОбластьПодвал.Параметры["РуководительРасшифровкаПодписи"] = ДанныеРуководителя.ИОФамилия;
	КонецЕсли;
	
	ДанныеГлавногоБухгалтера = КадровыеДанныеФизическихЛиц.Найти(ДанныеДокумента.ГлавныйБухгалтер, "ФизическоеЛицо");
	Если ДанныеГлавногоБухгалтера <> Неопределено Тогда
		ОбластьПодвал.Параметры["ГлавныйБухгалтерРасшифровкаПодписи"] = ДанныеГлавногоБухгалтера.ИОФамилия;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
КонецПроцедуры

// Запрос по шапке документа.
Функция ЗапросПоОсновнымДанным(МассивСсылок)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ОписаниеИсточникаДанных = ПерсонифицированныйУчет.ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий";
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "Дата";
	ОписаниеИсточникаДанных.СписокСсылок = МассивСсылок;
	
	ПерсонифицированныйУчет.СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументСправка.Дата КАК Дата,
	|	ДокументСправка.Номер КАК Номер,
	|	ДокументСправка.Организация КАК Организация,
	|	Организации.НаименованиеПолное КАК НазваниеОрганизации,
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП,
	|	"""" КАК АдресСтрахователя,
	|	ДокументСправка.Ссылка КАК Ссылка,
	|	ДокументСправка.Сотрудник КАК Сотрудник,
	|	ДокументСправка.Руководитель КАК Руководитель,
	|	Должности.Наименование КАК ДолжностьРуководителя,
	|	ДокументСправка.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ДокументСправка.ТелефонОрганизации КАК ТелефонОрганизации,
	|	ДокументСправка.РегистрационныйНомерФСС КАК РегистрационныйНомерФСС,
	|	ДокументСправка.ДополнительныйКодФСС КАК ДополнительныйКодФСС,
	|	ДокументСправка.КодПодчиненностиФСС КАК КодПодчиненностиФСС,
	|	ДокументСправка.НаименованиеТерриториальногоОрганаФСС КАК НаименованиеТерриториальногоОрганаФСС,
	|	ДокументСправка.УдалитьПериодРаботыС КАК ПериодРаботыС,
	|	ДокументСправка.УдалитьПериодРаботыПо КАК ПериодРаботыПо,
	|	ДокументСправка.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	ДокументСправка.Фамилия КАК Фамилия,
	|	ДокументСправка.Имя КАК Имя,
	|	ДокументСправка.Отчество КАК Отчество,
	|	ДокументСправка.АдресПоПрописке КАК АдресПоПрописке,
	|	ДокументСправка.ВидДокумента КАК ВидДокумента,
	|	ДокументСправка.СерияДокумента КАК СерияДокумента,
	|	ДокументСправка.НомерДокумента КАК НомерДокумента,
	|	ДокументСправка.ДатаВыдачиДокумента КАК ДатаВыдачиДокумента,
	|	ДокументСправка.КемВыданДокумент КАК КемВыданДокумент,
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЮрЛицо
	|ИЗ
	|	Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий КАК ДокументСправка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК Организации
	|		ПО ДокументСправка.Организация = Организации.Организация
	|			И ДокументСправка.Дата = Организации.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|		ПО ДокументСправка.ДолжностьРуководителя = Должности.Ссылка
	|ГДЕ
	|	ДокументСправка.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Возврат Запрос;
КонецФункции

// Запрос по табличной части Начисления.
Функция ЗапросПоЗаработку(МассивСсылок)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.РасчетныйГод КАК РасчетныйГод,
	|	Документ.Заработок КАК Заработок,
	|	Документ.НомерСтроки,
	|	Документ.Ссылка
	|ПОМЕСТИТЬ ВТСтрокиДокумента
	|ИЗ
	|	Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий.ДанныеОЗаработке КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.Ссылка,
	|	Документ.РасчетныйГод,
	|	Документ.Заработок,
	|	Документ.НомерСтроки,
	|	Документ.УдалитьДнейБолезниУходаЗаДетьми
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.РасчетныйГод КАК РасчетныйГод,
	|	Документ.Заработок КАК Заработок,
	|	Документ.НомерСтроки,
	|	Документ.Ссылка,
	|	ПовторныеСтроки.НомерСтроки КАК НомерПовторнойСтроки
	|ИЗ
	|	ВТСтрокиДокумента КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ПовторныеСтроки
	|		ПО Документ.РасчетныйГод = ПовторныеСтроки.РасчетныйГод
	|			И Документ.НомерСтроки < ПовторныеСтроки.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйГод";
	
	Возврат Запрос;
КонецФункции

// Запрос по табличной части ПериодыРаботы.
Функция ЗапросПоПериодамРаботы(МассивСсылок)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.НомерСтроки,
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.ПериодРаботыС,
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.ПериодРаботыПо,
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.Ссылка
	|ИЗ
	|	Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий.ПериодыРаботы КАК СправкаОЗаработкеДляРасчетаПособийПериодыРаботы
	|ГДЕ
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.ПериодРаботыС";
	
	Возврат Запрос;
КонецФункции

// Запрос по табличной части ДниБолезниУходаЗаДетьми.
Функция ЗапросПоПериодамНетрудоспособности(МассивСсылок)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправкаОЗаработке.ПериодС КАК ПериодС,
	|	СправкаОЗаработке.ПериодПо КАК ПериодПо,
	|	ГОД(СправкаОЗаработке.ПериодС) КАК ГодНачала,
	|	ГОД(СправкаОЗаработке.ПериодПо) КАК ГодОкончания,
	|	СУММА(СправкаОЗаработке.Дни) КАК ДнейБолезниУходаЗаДетьми,
	|	СправкаОЗаработке.НаименованиеПериода КАК НаименованиеПериода,
	|	СправкаОЗаработке.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий.ДниБолезниУходаЗаДетьми КАК СправкаОЗаработке
	|ГДЕ
	|	СправкаОЗаработке.Ссылка В(&МассивСсылок)
	|	И СправкаОЗаработке.Дни > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ГОД(СправкаОЗаработке.ПериодС),
	|	ГОД(СправкаОЗаработке.ПериодПо),
	|	СправкаОЗаработке.ПериодС,
	|	СправкаОЗаработке.ПериодПо,
	|	СправкаОЗаработке.НаименованиеПериода,
	|	СправкаОЗаработке.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодС";
	
	Возврат Запрос;
КонецФункции

// Данные табличной части ДниБолезниУходаЗаДетьми в разрезе "по каждому году" и в группировке "по годам".
Функция ПериодыНетрудоспособностиПоГодам(СтруктураПоиска, ПериодыНетрудоспособности)
	Результат = Новый Массив;
	
	ПоляЭлементаГод = "Год, КоличествоДней, Периоды";
	ПоляЭлементаПериод = "ПериодС, ПериодПо, КоличествоДней, НаименованиеПериода";
	
	ТекущийГод = Неопределено;
	
	Найденные = ПериодыНетрудоспособности.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		
		Для Год = СтрокаТаблицы.ГодНачала По СтрокаТаблицы.ГодОкончания Цикл
			Если ТекущийГод <> Год Тогда
				ТекущийГод = Год;
				ЭлементГод = Новый Структура(ПоляЭлементаГод);
				ЭлементГод.Год = Год;
				ЭлементГод.КоличествоДней = 0;
				ЭлементГод.Периоды = Новый Массив;
				Результат.Добавить(ЭлементГод);
			КонецЕсли;
			
			ЭлементПериод = Новый Структура(ПоляЭлементаПериод);
			ЭлементПериод.ПериодС  = ?(Год = СтрокаТаблицы.ГодНачала,    СтрокаТаблицы.ПериодС,  Дата(Год, 1, 1));
			ЭлементПериод.ПериодПо = ?(Год = СтрокаТаблицы.ГодОкончания, СтрокаТаблицы.ПериодПо, Дата(Год, 12, 31));
			ЭлементПериод.КоличествоДней = Цел((ЭлементПериод.ПериодПо - ЭлементПериод.ПериодС) / 86400 + 1);
			ЭлементПериод.НаименованиеПериода = СтрокаТаблицы.НаименованиеПериода;
			
			ЭлементГод.КоличествоДней = ЭлементГод.КоличествоДней + ЭлементПериод.КоличествоДней;
			ЭлементГод.Периоды.Добавить(ЭлементПериод);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанных

Функция ФиксацияОписаниеФиксацииРеквизитов()
	
	ОписаниеФиксацииРеквизитов = Новый Соответствие;
	
	// Данные работодателя
	ОписаниеФиксацииРеквизитов.Вставить("НаименованиеТерриториальногоОрганаФСС", 	ФиксацияОписаниеФиксацииРеквизита("НаименованиеТерриториальногоОрганаФСС","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("Руководитель", 							ФиксацияОписаниеФиксацииРеквизита("Руководитель","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("ГлавныйБухгалтер", 						ФиксацияОписаниеФиксацииРеквизита("ГлавныйБухгалтер","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("ДолжностьРуководителя", 					ФиксацияОписаниеФиксацииРеквизита("ДолжностьРуководителя","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("ТелефонОрганизации", 						ФиксацияОписаниеФиксацииРеквизита("ТелефонОрганизации","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("РегистрационныйНомерФСС", 					ФиксацияОписаниеФиксацииРеквизита("РегистрационныйНомерФСС","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("ДополнительныйКодФСС", 					ФиксацияОписаниеФиксацииРеквизита("ДополнительныйКодФСС","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("КодПодчиненностиФСС", 						ФиксацияОписаниеФиксацииРеквизита("КодПодчиненностиФСС","РеквизитыОрганизации", "Организация"));
	
	// Данные сотрудника
	ОписаниеФиксацииРеквизитов.Вставить("Фамилия", 									ФиксацияОписаниеФиксацииРеквизита("Фамилия","ФИОСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("Имя", 										ФиксацияОписаниеФиксацииРеквизита("Имя","ФИОСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("Отчество",	 								ФиксацияОписаниеФиксацииРеквизита("Отчество","ФИОСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("СтраховойНомерПФР", 						ФиксацияОписаниеФиксацииРеквизита("СтраховойНомерПФР","РеквизитыСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("ВидДокумента", 							ФиксацияОписаниеФиксацииРеквизита("ВидДокумента","РеквизитыУдостоверения", "Сотрудник", , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("СерияДокумента", 							ФиксацияОписаниеФиксацииРеквизита("СерияДокумента","РеквизитыУдостоверения", "Сотрудник", , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("НомерДокумента", 							ФиксацияОписаниеФиксацииРеквизита("НомерДокумента","РеквизитыУдостоверения", "Сотрудник", , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("КемВыданДокумент", 						ФиксацияОписаниеФиксацииРеквизита("КемВыданДокумент","РеквизитыУдостоверения", "Сотрудник", , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("ДатаВыдачиДокумента", 						ФиксацияОписаниеФиксацииРеквизита("ДатаВыдачиДокумента","РеквизитыУдостоверения", "Сотрудник", , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("АдресПоПрописке", 							ФиксацияОписаниеФиксацииРеквизита("АдресПоПрописке","РеквизитыСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("ПериодРаботыС", 							ФиксацияОписаниеФиксацииРеквизита("УдалитьПериодРаботыС","РеквизитыСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("ПериодРаботыПо", 							ФиксацияОписаниеФиксацииРеквизита("УдалитьПериодРаботыПо","РеквизитыСотрудника", "Сотрудник"));
	
	// Данные о заработке
	ОписаниеФиксацииРеквизитов.Вставить("ДанныеОЗаработкеЗаработок", 				ФиксацияОписаниеФиксацииРеквизита("Заработок","ДанныеОЗаработке", "ЗаработокСотрудника", Истина, Истина, "ДанныеОЗаработке"));
	
	Возврат Новый ФиксированноеСоответствие(ОписаниеФиксацииРеквизитов);  
	
КонецФункции 

Функция ФиксацияОписанияТЧ()
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("РасчетныйГод");
	
	СтруктураКлючевыхПолей = Новый Структура("ДанныеОЗаработке", МассивПолей);
	
	Возврат	СтруктураКлючевыхПолей
КонецФункции

Функция ФиксацияОписаниеФиксацииРеквизита(ИмяРеквизита, 
	ИмяГруппы, 
	ОснованиеЗаполнения,
	РеквизитСтроки = Ложь,
	ФиксацияГруппы = Ложь, 
	Путь = "",
	Используется = Истина, 
	ОтображатьПредупреждение = Истина, 
	СтрокаПредупреждения =  "")
	
	ФиксацияРеквизита = ФиксацияВторичныхДанныхВДокументах.СтруктураПараметровОписанияФиксацииРеквизитов();
	ФиксацияРеквизита.Вставить("ИмяРеквизита", ИмяРеквизита);
	ФиксацияРеквизита.Вставить("Используется", Используется);
	ФиксацияРеквизита.Вставить("ИмяГруппы", ИмяГруппы);
	ФиксацияРеквизита.Вставить("ФиксацияГруппы", ФиксацияГруппы);
	ФиксацияРеквизита.Вставить("ОснованиеЗаполнения", ОснованиеЗаполнения);
	ФиксацияРеквизита.Вставить("Путь", Путь);
	ФиксацияРеквизита.Вставить("ОтображатьПредупреждение", ОтображатьПредупреждение);
	Если СтрокаПредупреждения <> "" Тогда
		ФиксацияРеквизита.Вставить("СтрокаПредупреждения", СтрокаПредупреждения);
	КонецЕсли;
	ФиксацияРеквизита.Вставить("РеквизитСтроки", РеквизитСтроки);
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксацииРеквизита(ФиксацияРеквизита)
КонецФункции 

#КонецОбласти

#КонецОбласти

#КонецЕсли