
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		// Начальное заполнение
		ЗначенияДляЗаполнения = Новый Структура("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
	КонецЕсли;
	
	ПриПолученииДанныхНаСервере();
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДополнительныеРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ОбучениеРазвитиеСотрудников", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ОбучениеРазвитиеСотрудников") Тогда
		Объект.ПервичныйЭтапОбучения = ВыбранноеЗначение;
		ЗаполнитьРеквизитыФормыПоПервичномуМероприятию();
		УстановитьНадписьПервичныйЭтапОбучения(ЭтаФорма);
	Иначе	
		// подбор из плана обучения
		ЗаполнитьПоОснованиюНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	УстановитьВторичныеРеквизитыФормыПоМероприятию();
	УстановитьСвойстваЭлементовФормы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанДокументОтпуск" 
		ИЛИ ИмяСобытия = "ЗаписанДокументОтпускаСотрудников"
		ИЛИ ИмяСобытия = "ЗаписьДокументаКомандировка"
		ИЛИ ИмяСобытия = "ЗаписьДокументаКомандировкиСотрудников" Тогда
		
			Приказ = СозданныйРегламентныйДокументПоОбучению(Объект.Ссылка);
			УстановитьСвойстваЭлементовКоманд(ЭтаФорма);
			УстановитьНадписьПриказа(ЭтаФорма);
			
	ИначеЕсли ИмяСобытия = "ЗаписанСправочникОбразованиеФизическихЛиц" Тогда
		ЗаполнитьДополнительныеРеквизитыФормы();
	ИначеЕсли ИмяСобытия = "ПодобранНовыйСотрудникИзПланаОбучения" Тогда
		ПодобратьСотрудниковИзПланаЗавершение(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	ЗаписатьДанныеОснованияДляОбразования(НовыйОбъект, Объект.Ссылка);
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ОбразованиеФизическихЛиц") Тогда
		ЗаполнитьВторичныеРеквизитыТаблицыСотрудники();
	Иначе
		Приказ = НовыйОбъект;
		УстановитьНадписьПриказа(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МероприятиеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Мероприятие) Тогда
		УстановитьВторичныеРеквизитыФормыПоМероприятию();
		Возврат;
	КонецЕсли;
	
	Если РеквизитыКЗаполнениюЗаняты("ВыборМероприятия") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("МероприятиеПриИзмененииЗавершение",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Заполнить документ на основании данных мероприятия? Существующие данные будут утеряны.'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
			
		ЗаполнитьПоОснованиюНаСервере(Объект.Мероприятие);
		УстановитьВторичныеРеквизитыФормыПоМероприятию();
		
		УстановитьСвойстваЭлементовФормы(ЭтаФорма);
		УстановитьСвойстваЭлементовКоманд(ЭтаФорма);
		
		Модифицированность = Истина;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриИзменении(Элемент)
	
	ОбучениеРазвитиеКлиент.РассчитатьСуммуРасходов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОснованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Объект.Основание) = Тип("ДокументСсылка.ЗаявкаНаОбучениеРазвитие") Тогда
		ОткрытьФорму("Документ.ЗаявкаНаОбучениеРазвитие.ФормаОбъекта", Новый Структура("Ключ", Объект.Основание));
	ИначеЕсли ТипЗнч(Объект.Основание) = Тип("ДокументСсылка.ПубликацияМероприятияОбученияРазвития") Тогда
		ОткрытьФорму("Документ.ПубликацияМероприятияОбученияРазвития.ФормаОбъекта", Новый Структура("Ключ", Объект.Основание));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПриказНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Приказ) = Тип("ДокументСсылка.Командировка") Тогда
		ОткрытьФорму("Документ.Командировка.ФормаОбъекта", Новый Структура("Ключ", Приказ));
	ИначеЕсли ТипЗнч(Приказ) = Тип("ДокументСсылка.КомандировкиСотрудников") Тогда
		ОткрытьФорму("Документ.КомандировкиСотрудников.ФормаОбъекта", Новый Структура("Ключ", Приказ));
	ИначеЕсли ТипЗнч(Приказ) = Тип("ДокументСсылка.Отпуск") Тогда
		ОткрытьФорму("Документ.Отпуск.ФормаОбъекта", Новый Структура("Ключ", Приказ));
	ИначеЕсли ТипЗнч(Приказ) = Тип("ДокументСсылка.ОтпускаСотрудников") Тогда
		ОткрытьФорму("Документ.ОтпускаСотрудников.ФормаОбъекта", Новый Структура("Ключ", Приказ));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеОбученияПриИзменении(Элемент)
	
	Если Не ПродолжениеОбучения Тогда
		ОчиститьПервичныйЭтапОбучения();
	КонецЕсли;
	
	УстановитьСвойстваЭлементовКоманд(ЭтаФорма);
	УстановитьСвойстваЭлементовФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПервичныйЭтапОбученияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Объект.ПервичныйЭтапОбучения) Тогда
		// Открываем форму выбора
		ПараметрыФормы = Новый Структура("РежимВыбора, СкрыватьСсылку, ТолькоПервичныеЭтапыОбучения", Истина, Объект.Ссылка, Истина);
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		    ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Мероприятие) Тогда
		    ПараметрыФормы.Вставить("Мероприятие", Объект.Мероприятие);
		КонецЕсли;
		ОткрытьФорму("Документ.ОбучениеРазвитиеСотрудников.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	Иначе
		ПараметрыФормы = Новый Структура("Ключ", Объект.ПервичныйЭтапОбучения);
		ОткрытьФорму("Документ.ОбучениеРазвитиеСотрудников.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоХарактеристик

&НаКлиенте
Процедура ДеревоХарактеристикВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ХарактеристикиПерсоналаКлиент.ХарактеристикиВыбор(Элемент.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыХарактеристикиПерсонала

&НаКлиенте
Процедура ХарактеристикиПерсоналаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ХарактеристикиПерсоналаКлиент.ХарактеристикиВыбор(Элемент.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для каждого ВыбранныйСотрудник Из ВыбранноеЗначение Цикл
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник",ВыбранныйСотрудник)).Количество()=0 Тогда
			НовыйСотрудник = Объект.Сотрудники.Добавить();
			НовыйСотрудник.Сотрудник = ВыбранныйСотрудник;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	ЗаполнитьВторичныеРеквизитыТаблицыСотрудники();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "СотрудникиСтрокаСвидетельства" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено(Элементы.Сотрудники.ТекущиеДанные.Свидетельство) Тогда
			ПараметрыФормы = Новый Структура("Ключ",Элементы.Сотрудники.ТекущиеДанные.Свидетельство);
			ОткрытьФорму("Справочник.ОбразованиеФизическихЛиц.ФормаОбъекта",ПараметрыФормы);
		Иначе
			ВвестиСвидетельствоКлиент();
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.СтрокаСвидетельства = НСтр("ru = 'Ввести результаты'");
		Элемент.ТекущиеДанные.Свидетельство = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ОбразованиеФизическихЛиц.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ФизическоеЛицо = ФизическоеЛицоСотрудника(ТекущиеДанные.Сотрудник);
	ЗаполнитьСвидетельствоВСтрокеСотрудника(ЭтаФорма, ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьСотрудников(Команда)
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники,,,,,АдресСпискаПодобранныхСотрудников());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзПубликации(Команда)
	
	Если РеквизитыКЗаполнениюЗаняты("ЗаполнитьИзПубликации") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьИзПубликацииЗавершение",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Заполнить документ на основании данных публикации? Существующие данные будут утеряны.'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИзПубликацииНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтпуск(Команда)
	
	Если Объект.Сотрудники.Количество() > 1 Тогда
		
		ОбучениеРазвитиеКлиент.ОформитьКадровыйПриказ(
			ЭтаФорма,
			"ОтпускаСотрудников",
			ДанныеДокументаОбучения(МассивСотрудников()));
	Иначе
			
		ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
		ОбучениеРазвитиеКлиент.ОформитьКадровыйПриказ(
			ЭтаФорма,
			"Отпуск",
			ДанныеДокументаОбучения(ТекущиеДанные.Сотрудник));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКомандировку(Команда)
	
	Если Объект.Сотрудники.Количество() > 1 Тогда
		
		ОбучениеРазвитиеКлиент.ОформитьКадровыйПриказ(
			ЭтаФорма,
			"КомандировкиСотрудников",
			ДанныеДокументаОбучения(МассивСотрудников()));
	Иначе
			
		ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ОбучениеРазвитиеКлиент.ОформитьКадровыйПриказ(
			ЭтаФорма,
			"Командировка",
			ДанныеДокументаОбучения(ТекущиеДанные.Сотрудник));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеЭтапыОбучения(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ПервичныйЭтапОбучения) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Отбор.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ЭтапыОбучения", Объект.ПервичныйЭтапОбучения);
	
	ОткрытьФорму("Документ.ОбучениеРазвитиеСотрудников.ФормаСписка", ПараметрыФормы, Объект.ПервичныйЭтапОбучения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоКомпетенциям(Команда)
	
	Элементы.ПоКомпетенциям.Пометка = НЕ Элементы.ПоКомпетенциям.Пометка;
	
	ХарактеристикиПерсоналаКлиентСервер.УстановитьВидимостьГруппКомандВКоманднойПанелиХарактеристик(ЭтаФорма, Элементы.ПоКомпетенциям);
	ХарактеристикиПерсоналаКлиентСервер.УстановитьВидимостьГруппХарактеристикПерсонала(ЭтаФорма, Элементы.ПоКомпетенциям);
	
	ЗаполнитьДеревоХарактеристикНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСотрудниковИзПлана(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников());
	ПараметрыФормы.Вставить("Мероприятие", Объект.Мероприятие);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ИсключаемыйРегистратор", Объект.Ссылка);
	ПараметрыФормы.Вставить("ДатаАктуальности", Объект.Дата);
	
	ОткрытьФорму("Документ.ОбучениеРазвитиеСотрудников.Форма.ПодборИзЗапланированногоОбучения", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере()

	ХарактеристикиПерсоналаФормы.ЗагрузитьРежимОтображенияПоКомпетенциям("ОтображениеПоКомпетенциямОбучениеРазвитиеСотрудников", Элементы.ПоКомпетенциям);
	
	УстановитьВторичныеРеквизитыФормыПоМероприятию();
	ЗаполнитьДополнительныеРеквизитыФормы();
	
	УстановитьСвойстваЭлементовФормы(ЭтаФорма);
	УстановитьСвойстваЭлементовКоманд(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыФормыПоПервичномуМероприятию()
	
	Если РеквизитыКЗаполнениюЗаняты("ВыборМногоэтапногоОбучения") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("МногоэтапноеОбучениеВыборЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Заполнить документ на основании данных выбранного этапа? Существующие данные будут утеряны.'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		МногоэтапноеОбучениеВыборЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПервичныйЭтапОбучения()
	Объект.ПервичныйЭтапОбучения = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Документ.ОбучениеРазвитиеСотрудников.ПустаяСсылка");
	УстановитьНадписьПервичныйЭтапОбучения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МногоэтапноеОбучениеВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		// Заполняем весь документ на основании выбранного этапа.
		ЗаполнитьПоОснованиюНаСервере(Объект.ПервичныйЭтапОбучения);
	Иначе
		// Заполняем только некоторые реквизиты.
		ЗаполнитьПодразделениеМероприятиеПоОснованиюНаСервере();
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьВторичныеРеквизитыФормыПоМероприятию();
	
	УстановитьСвойстваЭлементовФормы(ЭтаФорма);
	УстановитьСвойстваЭлементовКоманд(ЭтаФорма);
	 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзПубликацииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьИзПубликацииНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзПубликацииНаКлиенте()

	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("ПоказыватьЗакрытыеПубликации", Истина);
	ПараметрыФормы.Вставить("НаДату", Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.Мероприятие) Тогда
		ПараметрыФормы.Вставить("Мероприятие", Объект.Мероприятие);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПубликации",ЭтаФорма);
	ОткрытьФорму("Документ.ПубликацияМероприятияОбученияРазвития.ФормаСписка",ПараметрыФормы,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятиеПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоОснованиюНаСервере(Объект.Мероприятие);
		ОбучениеРазвитиеКлиент.РассчитатьСуммуРасходов(ЭтаФорма);
	КонецЕсли; 
	
	УстановитьВторичныеРеквизитыФормыПоМероприятию();
	
	УстановитьСвойстваЭлементовФормы(ЭтаФорма);
	УстановитьСвойстваЭлементовКоманд(ЭтаФорма);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВвестиСвидетельствоКлиент()
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Свидетельство) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокументаОбучения  = СтруктураРеквизитовМероприятия(Объект.Мероприятие);
	ДанныеДокументаОбучения.Вставить("ФизическоеЛицо", Элементы.Сотрудники.ТекущиеДанные.ФизическоеЛицо);
	ДанныеДокументаОбучения.Вставить("НаименованиеКурса", Объект.Мероприятие);
	Если ЗначениеЗаполнено(Объект.ПервичныйЭтапОбучения) Тогда
		ДанныеДокументаОбучения.Вставить("Начало", ДатаНачалаПервичногоОбучения(Объект.ПервичныйЭтапОбучения));
	Иначе	
		ДанныеДокументаОбучения.Вставить("Начало", Объект.ДатаНачала);
	КонецЕсли;
	ДанныеДокументаОбучения.Вставить("Окончание", Объект.ДатаОкончания);
	ДанныеДокументаОбучения.Вставить("КоличествоЧасов", Объект.КоличествоУчебныхЧасов);
	ТекстОснования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Пр. № %1 от %2'"), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер), Формат(Объект.Дата,"ДЛФ=D"));
	ДанныеДокументаОбучения.Вставить("Основание", ТекстОснования);
	
	ОбучениеРазвитиеКлиент.ОформитьКадровыйПриказ(
		ЭтаФорма,
		"ОбразованиеФизическихЛиц",
		ДанныеДокументаОбучения);

КонецПроцедуры

#Область УстановкаСвойствЭлементовФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваЭлементовФормы(Форма)

	ЭтотОбъект = Форма.Объект;
	
	ЗаполнятьКонтрагента = Ложь;
	Если Форма.ВнешнееОбучение Тогда
		ЗаполнятьКонтрагента = Истина;
	КонецЕсли;
	
	ЗаполнятьПреподавателя = Ложь;
	Если Не Форма.ВнешнееОбучение И Не Форма.ЭлектронныйКурс Тогда
		ЗаполнятьПреподавателя = Истина;
	КонецЕсли;
	
	ЗаполнятьМестоПроведения = Ложь;
	Если Не Форма.ЭлектронныйКурс Тогда
		ЗаполнятьМестоПроведения = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Контрагент",
		"Видимость",
		ЗаполнятьКонтрагента);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Преподаватель",
		"Видимость",
		ЗаполнятьПреподавателя);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"МестоПроведения",
		"Видимость",
		ЗаполнятьМестоПроведения);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Контрагент",
		"Доступность",
		Форма.ВнешнееОбучение);
		
	// Многоэтапное обучение.
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Подразделение",
		"Доступность",
		Не Форма.ПродолжениеОбучения);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Мероприятие",
		"Доступность",
		Не Форма.ПродолжениеОбучения);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НадписьПервичныйЭтапОбучения",
		"Видимость",
		Форма.ПродолжениеОбучения);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Преподаватель",
		"Заголовок",
		НаименованиеПреподавателя(Форма.Объект.Мероприятие));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СотрудникиОценка",
		"Заголовок",
		Форма.ФормаЗачета);
		
	УстановитьВидимостьРеквизитовОценкиОбучения(Форма);
		
	ХарактеристикиПерсоналаКлиентСервер.УстановитьВидимостьГруппКомандВКоманднойПанелиХарактеристик(Форма, Форма.Элементы.ПоКомпетенциям);
	ХарактеристикиПерсоналаКлиентСервер.УстановитьВидимостьГруппХарактеристикПерсонала(Форма, Форма.Элементы.ПоКомпетенциям);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьРеквизитовОценкиОбучения(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СотрудникиОценка",
		"Видимость",
		ЗначениеЗаполнено(Форма.ФормаЗачета));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СотрудникиКомментарийКОценке",
		"Видимость",
		ЗначениеЗаполнено(Форма.ФормаЗачета));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваЭлементовКоманд(Форма)

	НастройкиРасчетаЗарплаты = НастройкиРасчетаЗарплатыСервер();
	ЭтотОбъект = Форма.Объект;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФормаСоздатьКомандировку",
		"Доступность",
		НастройкиРасчетаЗарплаты.ИспользоватьОплатуКомандировок
		И Форма.Приказ = Неопределено
		И Форма.МероприятиеСОтрывомОтПроизводства);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФормаСоздатьОплачиваемыйОтпуск",
		"Доступность",
		НастройкиРасчетаЗарплаты.ИспользоватьОтпускаУчебные И Форма.Приказ = Неопределено
		И Форма.МероприятиеСОтрывомОтПроизводства);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФормаПоказатьВсеЭтапыОбучения",
		"Видимость",
		ЗначениеЗаполнено(ЭтотОбъект.ПервичныйЭтапОбучения));
		
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция НастройкиРасчетаЗарплатыСервер()

	Возврат РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьОснования(Форма)

	Если ЗначениеЗаполнено(Форма.Объект.Основание) Тогда
		Форма.НадписьОснование = Форма.Объект.Основание;
	Иначе
		Форма.НадписьОснование = НСтр("ru = '<без основания>'");
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НадписьОснование",
		"Видимость",
		ЗначениеЗаполнено(Форма.Объект.Основание));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьПриказа(Форма)

	Если ЗначениеЗаполнено(Форма.Приказ) Тогда
		Форма.НадписьПриказ = Форма.Приказ;
	Иначе
		Форма.НадписьПриказ = НСтр("ru = '<не введен>'");
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НадписьПриказ",
		"Видимость",
		ЗначениеЗаполнено(Форма.Приказ));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьПервичныйЭтапОбучения(Форма)

	Если ЗначениеЗаполнено(Форма.Объект.ПервичныйЭтапОбучения) Тогда
		Форма.НадписьПервичныйЭтапОбучения = Форма.Объект.ПервичныйЭтапОбучения;
	Иначе
		Форма.НадписьПервичныйЭтапОбучения = НСтр("ru = 'Выбрать первичный этап'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПубликации(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если Не РезультатВыбора = Неопределено Тогда
		
		ЗаполнитьПоОснованиюНаСервере(РезультатВыбора);
		УстановитьВторичныеРеквизитыФормыПоМероприятию();
		УстановитьСвойстваЭлементовФормы(ЭтаФорма);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	СписокСотрудников = Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник");
	
	Возврат ПоместитьВоВременноеХранилище(СписокСотрудников, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизитыФормы()

	ПродолжениеОбучения = ЗначениеЗаполнено(Объект.ПервичныйЭтапОбучения);
	Приказ = СозданныйРегламентныйДокументПоОбучению(Объект.Ссылка);
	ЗаполнитьВторичныеРеквизитыТаблицыСотрудники();
	
	УстановитьНадписьПриказа(ЭтаФорма);
	УстановитьНадписьОснования(ЭтаФорма);
	УстановитьНадписьПервичныйЭтапОбучения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторичныеРеквизитыТаблицыСотрудники()

	// Табличная часть "Сотрудники"
	ЗаполнитьТаблицуСвидетельств();
	
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		СтрокаСотрудника.ФизическоеЛицо = ФизическоеЛицоСотрудника(СтрокаСотрудника.Сотрудник);
		ЗаполнитьСвидетельствоВСтрокеСотрудника(ЭтаФорма, СтрокаСотрудника);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ФизическоеЛицоСотрудника(Сотрудник)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуСвидетельств()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументОснованиеОбразованиеФизическихЛиц.ОбъектСсылка.Владелец КАК ФизическоеЛицо,
		|	ДокументОснованиеОбразованиеФизическихЛиц.ОбъектСсылка КАК Свидетельство
		|ПОМЕСТИТЬ ВТСвидетельства
		|ИЗ
		|	РегистрСведений.ОбразованиеФизическихЛицОснования КАК ДокументОснованиеОбразованиеФизическихЛиц
		|ГДЕ
		|	ДокументОснованиеОбразованиеФизическихЛиц.Обучение = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСвидетельства.ФизическоеЛицо,
		|	ВТСвидетельства.Свидетельство,
		|	ОбразованиеФизическихЛиц.ВидДокумента,
		|	ОбразованиеФизическихЛиц.Серия,
		|	ОбразованиеФизическихЛиц.Номер,
		|	ОбразованиеФизическихЛиц.ДатаВыдачи
		|ИЗ
		|	ВТСвидетельства КАК ВТСвидетельства
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛиц
		|		ПО ВТСвидетельства.Свидетельство = ОбразованиеФизическихЛиц.Ссылка";
	Запрос.УстановитьПараметр("ДокументСсылка", Объект.Ссылка);
	ТаблицаСвидетельств.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюНаСервере(ДанныеЗаполнения)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
	ЗаполнитьДополнительныеРеквизитыФормы();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодразделениеМероприятиеПоОснованиюНаСервере();

	ДанныеЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПервичныйЭтапОбучения,"Подразделение, Мероприятие");
	ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения, "Подразделение, Мероприятие");
	ЗаполнитьДополнительныеРеквизитыФормы();

КонецПроцедуры

&НаКлиенте
// Проверяет наличие данных в реквизитах, предназначенных для заполнения.
Функция РеквизитыКЗаполнениюЗаняты(Режим)

	Если Режим = "ПодобратьИзПлана" Тогда
	 
		Возврат ЗначениеЗаполнено(Объект.ДатаНачала)
			ИЛИ ЗначениеЗаполнено(Объект.ДатаОкончания)
			ИЛИ ЗначениеЗаполнено(Объект.КоличествоУчебныхЧасов)
			ИЛИ Объект.Сотрудники.Количество() > 0
			ИЛИ Объект.Расходы.Количество() > 0;
			
	ИначеЕсли Режим = "ЗаполнитьИзПубликации" Тогда
		
		Возврат ЗначениеЗаполнено(Объект.ДатаНачала)
			ИЛИ ЗначениеЗаполнено(Объект.ДатаОкончания)
			ИЛИ ЗначениеЗаполнено(Объект.КоличествоУчебныхЧасов)
			ИЛИ ЗначениеЗаполнено(Объект.Преподаватель)
			ИЛИ ЗначениеЗаполнено(Объект.Контрагент)
			ИЛИ ЗначениеЗаполнено(Объект.МестоПроведения)
			ИЛИ Объект.Сотрудники.Количество() > 0
			ИЛИ Объект.Расходы.Количество() > 0;
			
	ИначеЕсли Режим = "ВыборМногоэтапногоОбучения" Тогда
		
		Возврат ЗначениеЗаполнено(Объект.Преподаватель)
			ИЛИ ЗначениеЗаполнено(Объект.Контрагент)
			ИЛИ ЗначениеЗаполнено(Объект.МестоПроведения)
			ИЛИ Объект.Сотрудники.Количество() > 0;
			
	ИначеЕсли Режим = "ВыборМероприятия" Тогда
		
		Возврат ЗначениеЗаполнено(Объект.КоличествоУчебныхЧасов)
			ИЛИ ЗначениеЗаполнено(Объект.Преподаватель)
			ИЛИ ЗначениеЗаполнено(Объект.Контрагент)
			ИЛИ ЗначениеЗаполнено(Объект.МестоПроведения)
			ИЛИ Объект.Расходы.Количество() > 0;
			
	КонецЕсли;
	
КонецФункции

// Формирует структуру для заполнения данных регламентных документов.
// 
&НаКлиенте
Функция ДанныеДокументаОбучения(Сотрудник)
	
	ДанныеДокументаОбучения = Новый Структура;
	ДанныеДокументаОбучения.Вставить("Подразделение", Объект.Подразделение);
	ДанныеДокументаОбучения.Вставить("Сотрудник", Сотрудник);
	ДанныеДокументаОбучения.Вставить("ДатаНачала", Объект.ДатаНачала);
	ДанныеДокументаОбучения.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	ДанныеДокументаОбучения.Вставить("МестоПроведения", Объект.МестоПроведения);
	ДанныеДокументаОбучения.Вставить("УчебноеЗаведение", МероприятиеУчебноеЗаведение);
	ДанныеДокументаОбучения.Вставить("ВидОтпуска", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускУчебный"));

	Возврат ДанныеДокументаОбучения;
	
КонецФункции

&НаСервере
Функция МассивСотрудников()
	Возврат Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник");
КонецФункции

&НаСервереБезКонтекста
Функция СозданныйРегламентныйДокументПоОбучению(Ссылка)

	Если Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументОснованиеКомандировка.ОбъектСсылка КАК Ссылка
		|ПОМЕСТИТЬ ВТПриказы
		|ИЗ
		|	РегистрСведений.КомандировкаОснования КАК ДокументОснованиеКомандировка
		|ГДЕ
		|	ДокументОснованиеКомандировка.Обучение = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументОснованиеКомандировкиСотрудников.ОбъектСсылка
		|ИЗ
		|	РегистрСведений.КомандировкиСотрудниковОснования КАК ДокументОснованиеКомандировкиСотрудников
		|ГДЕ
		|	ДокументОснованиеКомандировкиСотрудников.Обучение = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументОснованиеОтпуск.ОбъектСсылка
		|ИЗ
		|	РегистрСведений.ОтпускОснования КАК ДокументОснованиеОтпуск
		|ГДЕ
		|	ДокументОснованиеОтпуск.Обучение = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументОснованиеОтпускаСотрудников.ОбъектСсылка
		|ИЗ
		|	РегистрСведений.ОтпускаСотрудниковОснования КАК ДокументОснованиеОтпускаСотрудников
		|ГДЕ
		|	ДокументОснованиеОтпускаСотрудников.Обучение = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТПриказы.Ссылка
		|ИЗ
		|	ВТПриказы КАК ВТПриказы";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат Неопределено;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
КонецФункции
 
&НаСервереБезКонтекста
Функция СтруктураРеквизитовМероприятия(Мероприятие)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мероприятие, "ВидМероприятия, УчебноеЗаведение, ВидДокументаОбОбразовании, ПрисваиваемаяСпециальность, Квалификация");

КонецФункции

// Устанавливает реквизиты формы в зависимости от выбранного мероприятия.
//
&НаСервере
Процедура УстановитьВторичныеРеквизитыФормыПоМероприятию()
	
	УстановитьПризнакиМероприятияВФорме();
	УстановитьИнфоНадписьМероприятия();
	
	ХарактеристикиПерсоналаФормы.ЗаполнитьВторичнуюТаблицуХарактеристикИзМероприятия(ХарактеристикиПерсонала, Объект.Мероприятие);
	ХарактеристикиПерсоналаФормы.ЗаполнитьКартинкуИВидХарактеристикиТаблицыХарактеристик(ХарактеристикиПерсонала);
	ЗаполнитьДеревоХарактеристикНаСервере();
	
	УстановитьВидимостьРеквизитовОценкиОбучения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиМероприятияВФорме()

	ИменаРеквизитов = 
		"УчебноеЗаведение,
		|СпособПроведения, 
		|ФормаЗачета,
		|ОбучениеСОтрывомОтПроизводства";
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Мероприятие, ИменаРеквизитов);
	
	ВнешнееОбучение = Ложь;
	Если РеквизитыМероприятия.СпособПроведения = Перечисления.СпособыПроведенияМероприятийОбученияРазвития.ВнешнееМероприятие Тогда
		ВнешнееОбучение = Истина;
	КонецЕсли;
	
	ЭлектронныйКурс = Ложь;
	Если РеквизитыМероприятия.СпособПроведения = Перечисления.СпособыПроведенияМероприятийОбученияРазвития.ЭлектронныйКурс Тогда
		ЭлектронныйКурс = Истина;
	КонецЕсли;
	
	МероприятиеУчебноеЗаведение = РеквизитыМероприятия.УчебноеЗаведение;
	МероприятиеСОтрывомОтПроизводства = РеквизитыМероприятия.ОбучениеСОтрывомОтПроизводства;
	ФормаЗачета = РеквизитыМероприятия.ФормаЗачета;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИнфоНадписьМероприятия()
	ИнфоНадписьМероприятия = ОбучениеРазвитие.ИнфоНадписьМероприятия(Объект.Мероприятие, ТипЗнч(Объект.Ссылка));
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаНачалаПервичногоОбучения(ПервичныйЭтапОбучения)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйЭтапОбучения, "ДатаНачала");
КонецФункции

&НаСервереБезКонтекста
Функция НаименованиеПреподавателя(Мероприятие)
	Возврат ОбучениеРазвитие.НаименованиеПреподавателяПоВидуМероприятия(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Мероприятие, "ВидМероприятия"));
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеОснованияДляОбразования(ОбъектСсылка, Обучение);
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ОбразованиеФизическихЛиц") Тогда
		ОбучениеРазвитие.ЗаписатьОбразованиеФизическихЛицОснования(ОбъектСсылка, Обучение);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Командировка") Тогда
		ОбучениеРазвитие.ЗаписатьКомандировкаОснования(ОбъектСсылка, Обучение);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.КомандировкиСотрудников") Тогда
		ОбучениеРазвитие.ЗаписатьКомандировкиСотрудниковОснования(ОбъектСсылка, Обучение);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Отпуск") Тогда
		ОбучениеРазвитие.ЗаписатьОтпускОснования(ОбъектСсылка, Обучение);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ОтпускаСотрудников") Тогда
		ОбучениеРазвитие.ЗаписатьОтпускаСотрудниковОснования(ОбъектСсылка, Обучение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоХарактеристикНаСервере()

	ХарактеристикиПерсоналаФормы.СохранитьРежимОтображенияПоКомпетенциям("ОтображениеПоКомпетенциямОбучениеРазвитиеСотрудников", Элементы.ПоКомпетенциям);
	
	Если НЕ Элементы.ПоКомпетенциям.Пометка Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиДерево = РеквизитФормыВЗначение("ДеревоХарактеристик");
	ХарактеристикиПерсоналаФормы.ЗаполнитьДеревоХарактеристик(ХарактеристикиПерсонала, ХарактеристикиДерево);
	ЗначениеВРеквизитФормы(ХарактеристикиДерево, "ДеревоХарактеристик");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСвидетельствоВСтрокеСотрудника(Форма, ТекущаяСтрока)

	НайденныеСтроки = Форма.ТаблицаСвидетельств.НайтиСтроки(Новый Структура("ФизическоеЛицо", ТекущаяСтрока.ФизическоеЛицо));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекущаяСтрока.Свидетельство = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ОбразованиеФизическихЛиц.ПустаяСсылка");
	Иначе
		ТекущаяСтрока.Свидетельство = НайденныеСтроки[0].Свидетельство;
		ТекущаяСтрока.СтрокаСвидетельства = ТекстСтрокиСвидетельства(НайденныеСтроки[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСтрокиСвидетельства(ДанныеСвидетельства)

	// Собрали сводный номер.
	Если ЗначениеЗаполнено(ДанныеСвидетельства.Серия)
		И ЗначениеЗаполнено(ДанныеСвидетельства.Номер) Тогда
		СертификатСводныйНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1-%2", ДанныеСвидетельства.Серия, ДанныеСвидетельства.Номер);
	Иначе
		СертификатСводныйНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 %2", ДанныеСвидетельства.Серия, ДанныеСвидетельства.Номер);
		СертификатСводныйНомер = СокрЛП(СертификатСводныйНомер);
	КонецЕсли;

	// Собрали представление номера и даты.
	Если Не ЗначениеЗаполнено(ДанныеСвидетельства.ДатаВыдачи)
		И Не ЗначениеЗаполнено(СертификатСводныйНомер) Тогда
		СертификатНомерДата = НСтр("ru = '<номер и дата не заполнены>'");
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеСвидетельства.ДатаВыдачи) Тогда
		СертификатНомерДата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '№%1 <дата не заполнена>'"),
			СертификатСводныйНомер);
	ИначеЕсли Не ЗначениеЗаполнено(СертификатСводныйНомер) Тогда
		СертификатНомерДата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<номер не заполнен> от %1'"),
			Формат(ДанныеСвидетельства.ДатаВыдачи,"ДЛФ=D"));
	Иначе
		СертификатНомерДата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '№%1 от %2'"),
			СертификатСводныйНомер,
			Формат(ДанныеСвидетельства.ДатаВыдачи,"ДЛФ=D"));
	КонецЕсли;
		
	// Собрали окончательную строку.
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 %2'"),
			ДанныеСвидетельства.ВидДокумента,
			СертификатНомерДата);

КонецФункции

&НаКлиенте
Процедура ПодобратьСотрудниковИзПланаЗавершение(РезультатЗакрытия) Экспорт

	Если РезультатЗакрытия = Неопределено
		ИЛИ ТипЗнч(РезультатЗакрытия) <> Тип("Массив") Тогда
		
		Возврат;
	КонецЕсли; 

	Для каждого Сотрудник Из РезультатЗакрытия Цикл
		НоваяСтрока = Объект.Сотрудники.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 