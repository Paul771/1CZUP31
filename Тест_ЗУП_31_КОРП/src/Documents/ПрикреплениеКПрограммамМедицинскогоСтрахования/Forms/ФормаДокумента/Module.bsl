
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда 
		
		МассивСотрудников = Неопределено;
		Если Параметры.Свойство("ЗначенияЗаполнения") И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения, , "Сотрудники");
			Если Параметры.ЗначенияЗаполнения.Свойство("Сотрудники") И ТипЗнч(Параметры.ЗначенияЗаполнения.Сотрудники) = Тип("Массив") Тогда
				МассивСотрудников = Параметры.ЗначенияЗаполнения.Сотрудники;
			КонецЕсли;
		Иначе
			ЗначенияДляЗаполнения = Новый Структура;
			ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
			Если Не Параметры.Свойство("ЗначенияЗаполнения") Или Не Параметры.ЗначенияЗаполнения.Свойство("Подразделение") Тогда
				// Подразделение (пустое значение) может быть передано как параметр заполнения из обработки.
				ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
			КонецЕсли;
			ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеУдержанияВПользуТретьихЛиц") Тогда
			РасчетЗарплатыРасширенныйФормы.ЗаполнитьУдержаниеВФормеДокументаПоРоли(
				ЭтаФорма, 
				Объект.Удержание, 
				Перечисления.КатегорииУдержаний.УдержаниеВСчетРасчетовПоПрочимОперациям, 
				Новый Структура("СпособВыполненияУдержания", Перечисления.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете));
		КонецЕсли;
		
		ПриПолученииДанныхНаСервере();
		СотрудникиЗаполнитьНаСервере(МассивСотрудников);
		
	Иначе
		
		// Если это открытие уже существующего документа, 
		// то оно может выполняться в режиме добавления строк.
		Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Сотрудники") Тогда
			МассивСотрудников = Новый Массив;
			Для Каждого ПараметрСотрудник Из Параметры.ЗначенияЗаполнения.Сотрудники Цикл
				НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ПараметрСотрудник));
				Если НайденныеСтроки.Количество() = 0 Тогда
					МассивСотрудников.Добавить(ПараметрСотрудник);
				КонецЕсли;
			КонецЦикла;
			
			Если МассивСотрудников.Количество() > 0 Тогда
				СотрудникиЗаполнитьНаСервере(МассивСотрудников);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекущийОбъект.ДатаОтправки = Дата(Год(ТекущийОбъект.Дата), Месяц(ТекущийОбъект.Дата), День(ТекущийОбъект.Дата), Час(ТекущаяДата), Минута(ТекущаяДата), Секунда(ТекущаяДата));
	РеквизитыВДанные(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ПрикреплениеКПрограммамМедицинскогоСтрахования", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ДанныеВРеквизиты();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ВыборФорматаВложений") Тогда
		
		Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение <> КодВозвратаДиалога.Отмена Тогда
			ПараметрыОтправки = ПараметрыОтправкиПисьма(ВыбранноеЗначение);
			
			МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
			МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	МедицинскоеСтрахованиеФормы.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ПриИзмененииОсновныхПолейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтраховаяКомпанияПриИзменении(Элемент)
	ПриИзмененииОсновныхПолейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПриИзмененииОсновныхПолейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдержатьПриПрикрепленииПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьУдержанияПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УдержаниеПриИзменении(Элемент)
	
	УдержаниеПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборСтрокРодственников(Элементы, ТекущиеДанные.ФизическоеЛицо);
	
	УдержатьПриПрикреплении = ТекущиеДанные.СуммаУдержания <> 0;
	ПрекратитьУдержания = ТекущиеДанные.СуммаПредела <> 0;
	
	УстановитьНадписьПрограммСтрахования(ТекущиеДанные);
	УстановитьНадписьРасширенийПрограммСтрахования(ТекущиеДанные);
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СотрудникиОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиОбработкаВыбораНаСервере(ТекущиеДанные.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиДатаНачалаПриИзмененииНаСервере(ТекущиеДанные.Сотрудник, ТекущиеДанные.ДатаНачала, ТекущиеДанные.ДатаРождения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СотрудникиЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МедицинскоеСтрахованиеКлиент.ЭлементКонтактнойИнформацииНачалоВыбора(ЭтотОбъект, Элемент, "Сотрудники", ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СотрудникиДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МедицинскоеСтрахованиеКлиент.ДокументУдостоверяющийЛичностьНачалоВыбора(ЭтотОбъект, Элемент, "Сотрудники", "Сотрудник", ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыРодственники

&НаКлиенте
Процедура РодственникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанныеПрикрепления = Элементы.Сотрудники.ТекущиеДанные;
		Если ТекущиеДанныеПрикрепления = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ФизическоеЛицо = ТекущиеДанныеПрикрепления.ФизическоеЛицо;
		ТекущиеДанные.ДатаНачала = ОбщегоНазначенияКлиент.ДатаСеанса() + (СдвигДатыПрикрепления * ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах());
		ТекущиеДанные.ДатаОкончания = Объект.ДатаОкончанияСтрахования;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодственникиОбработкаВыбораНаСервере(ВыбранноеЗначение, ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Владелец", ТекущиеДанные.ФизическоеЛицо);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Справочник.РодственникиФизическихЛиц.ФормаВыбора", ПараметрыОткрытия, Элементы.Родственники);
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Родственники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодственникиДатаПриИзмененииНаСервере(ТекущиеДанные.Родственник, ТекущиеДанные.ДатаНачала, ТекущиеДанные.ДатаОкончания, ТекущиеДанные.ДатаРождения);
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиДатаОкончанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Родственники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодственникиДатаПриИзмененииНаСервере(ТекущиеДанные.Родственник, ТекущиеДанные.ДатаНачала, ТекущиеДанные.ДатаОкончания, ТекущиеДанные.ДатаРождения);
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиПрограммыСтрахованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Родственники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Родственник) Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("РодственникиПрограммыСтрахованияЗавершениеРедактирования", ЭтотОбъект, ТекущиеДанные);
	МедицинскоеСтрахованиеКлиент.ПрограммыСтрахованияРедактировать(ЭтотОбъект, ТекущиеДанные, "ПрограммыСтрахованияРодственников", "Родственник", ТекущиеДанные.ДатаНачала, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиРасширенияПрограммСтрахованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Родственники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Родственник) Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("РодственникиРасширенияПрограммСтрахованияЗавершениеРедактирования", ЭтотОбъект, ТекущиеДанные);
	МедицинскоеСтрахованиеКлиент.РасширенияПрограммСтрахованияРедактировать(ЭтотОбъект, ТекущиеДанные, "РасширенияПрограммСтрахованияРодственников", "Родственник", ТекущиеДанные.ДатаНачала, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РодственникиЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МедицинскоеСтрахованиеКлиент.ЭлементКонтактнойИнформацииНачалоВыбора(ЭтотОбъект, Элемент, "Родственники", ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РодственникиДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МедицинскоеСтрахованиеКлиент.ДокументУдостоверяющийЛичностьНачалоВыбора(ЭтотОбъект, Элемент, "Родственники", "Родственник", ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура СотрудникиЗаполнить(Команда)
	СотрудникиЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РодственникиЗаполнить(Команда)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодственникиЗаполнитьНаСервере(ТекущиеДанные.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПрограммыСтрахованияРедактировать(Команда)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СотрудникиПрограммыСтрахованияЗавершениеРедактирования", ЭтотОбъект, ТекущиеДанные);
	МедицинскоеСтрахованиеКлиент.ПрограммыСтрахованияРедактировать(ЭтотОбъект, ТекущиеДанные, "ПрограммыСтрахованияСотрудников", "Сотрудник", ТекущиеДанные.ДатаНачала, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиРасширенияПрограммСтрахованияРедактировать(Команда)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СотрудникиРасширенияПрограммЗавершениеРедактирования", ЭтотОбъект, ТекущиеДанные);
	МедицинскоеСтрахованиеКлиент.РасширенияПрограммСтрахованияРедактировать(ЭтотОбъект, ТекущиеДанные, "РасширенияПрограммСтрахованияСотрудников", "Сотрудник", ТекущиеДанные.ДатаНачала, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыОткрытия = Неопределено;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
		Модуль.УточнитьПараметрыОткрытияФормыВыбораСотрудников(ПараметрыОткрытия);
	КонецЕсли; 
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники,
		Объект.Организация,
		Объект.Подразделение,
		Объект.Дата,
		Истина,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтроки(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОрганизацияСсылка", Объект.Организация);
	Если Элементы.Сотрудники.ВыделенныеСтроки.Количество() = 0 Тогда
		ПараметрыОткрытия.Вставить("ПрограммыСтрахования", Новый Массив);
		ПараметрыОткрытия.Вставить("РасширенияПрограммСтрахования", Новый Массив);
		ПараметрыОткрытия.Вставить("ДатаНачалаСтрахования", Неопределено);
		ПараметрыОткрытия.Вставить("СтраховаяПремия", 0);
		ПараметрыОткрытия.Вставить("СуммаУдержания", 0);
		ПараметрыОткрытия.Вставить("СуммаПредела", 0);
	Иначе
		СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ВыделенныеСтроки[0]);
		СтруктураОтбора = Новый Структура("Сотрудник", СтрокаСотрудника.Сотрудник);
		
		ПараметрыОткрытия.Вставить("ПрограммыСтрахования", Новый Массив);
		НайденныеСтроки = Объект.ПрограммыСтрахованияСотрудников.НайтиСтроки(СтруктураОтбора);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПараметрыОткрытия.ПрограммыСтрахования.Добавить(НайденнаяСтрока.ПрограммаСтрахования);
		КонецЦикла;
		
		ПараметрыОткрытия.Вставить("РасширенияПрограммСтрахования", Новый Массив);
		НайденныеСтроки = Объект.РасширенияПрограммСтрахованияСотрудников.НайтиСтроки(СтруктураОтбора);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПараметрыОткрытия.РасширенияПрограммСтрахования.Добавить(НайденнаяСтрока.РасширениеСтрахования);
		КонецЦикла;
		
		ПараметрыОткрытия.Вставить("ДатаНачалаСтрахования", СтрокаСотрудника.ДатаНачала);
		ПараметрыОткрытия.Вставить("СтраховаяПремия", СтрокаСотрудника.СтраховаяПремия);
		ПараметрыОткрытия.Вставить("СуммаУдержания", СтрокаСотрудника.СуммаУдержания);
		ПараметрыОткрытия.Вставить("СуммаПредела", СтрокаСотрудника.СуммаПредела);
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнениеСведенийСтрахованияЗакрытие", ЭтотОбъект, Элементы.Сотрудники.ВыделенныеСтроки);
	ОткрытьФорму("Документ.ПрикреплениеКПрограммамМедицинскогоСтрахования.Форма.ФормаЗаполнениеСведенийСтрахования", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПечатныеФормыПоПочтеНастройкаУчетнойЗаписиПредложена", ЭтотОбъект);
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		МодульРаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "Документ.ПрикреплениеКПрограммамМедицинскогоСтрахования.ТабличнаяЧасть.Сотрудники";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка сотрудников из файла'");
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьСотрудниковИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОтправитьПечатныеФормыПоПочтеНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ИмяОткрываемойФормы = "ОбщаяФорма.ВыборФорматаВложений";
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиЗаполнитьНаСервере(Сотрудники = Неопределено)
	
	СтруктураИменТаблиц = МедицинскоеСтрахованиеФормы.СтруктураИменТаблиц();
	СтруктураИменТаблиц.ИмяТаблицыСотрудники = "Сотрудники";
	СтруктураИменТаблиц.ИмяТаблицыСведенийСотрудников = "СведенияСотрудников";
	СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияСотрудников = "ПрограммыСтрахованияСотрудников";
	СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияСотрудников = "РасширенияПрограммСтрахованияСотрудников";
	СтруктураИменТаблиц.ИмяТаблицыРодственники = "Родственники";
	СтруктураИменТаблиц.ИмяТаблицыСведенийРодственников = "СведенияРодственников";
	СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияРодственников = "ПрограммыСтрахованияРодственников";
	СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияРодственников = "РасширенияПрограммСтрахованияРодственников";
	
	МедицинскоеСтрахованиеФормы.ПрикреплениеКПрограммамСтрахованияЗаполнить(ЭтотОбъект, СтруктураИменТаблиц, Сотрудники, , , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПрограммыСтрахованияЗавершениеРедактирования(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> Неопределено Тогда
		СотрудникиПрограммыСтрахованияЗавершениеРедактированияНаСервере(Результат, ТекущиеДанные.ПолучитьИдентификатор());
		УстановитьНадписьПрограммСтрахования(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиПрограммыСтрахованияЗавершениеРедактированияНаСервере(Результат, ИдентификаторСтроки)
	
	Если Результат <> Неопределено Тогда
		
		СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
		МедицинскоеСтрахованиеФормы.УстановитьПрограммыСтрахования(Объект, СтрокаСотрудника, "ПрограммыСтрахованияСотрудников", "Сотрудник", Результат);
		
		СтруктураИменТаблиц = МедицинскоеСтрахованиеФормы.СтруктураИменТаблиц();
		СтруктураИменТаблиц.ИмяТаблицыСотрудники = "Сотрудники";
		СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияСотрудников = "ПрограммыСтрахованияСотрудников";
		СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияСотрудников = "РасширенияПрограммСтрахованияСотрудников";
		МедицинскоеСтрахованиеФормы.РассчитатьСтраховуюПремиюСотрудников(Объект, СтруктураИменТаблиц, СтрокаСотрудника.Сотрудник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиРасширенияПрограммЗавершениеРедактирования(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> Неопределено Тогда
		СотрудникиРасширенияПрограммЗавершениеРедактированияНаСервере(Результат, ТекущиеДанные.ПолучитьИдентификатор());
		УстановитьНадписьРасширенийПрограммСтрахования(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиРасширенияПрограммЗавершениеРедактированияНаСервере(Результат, ИдентификаторСтроки)
	
	Если Результат <> Неопределено Тогда
		
		СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
		МедицинскоеСтрахованиеФормы.УстановитьРасширенияПрограммСтрахования(Объект, СтрокаСотрудника, "РасширенияПрограммСтрахованияСотрудников", "Сотрудник", Результат);
		
		РассчитатьСтраховуюПремиюСотрудников(СтрокаСотрудника.Сотрудник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиПрограммыСтрахованияЗавершениеРедактирования(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> Неопределено Тогда
		РодственникиПрограммыСтрахованияЗавершениеРедактированияНаСервере(Результат, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РодственникиПрограммыСтрахованияЗавершениеРедактированияНаСервере(Результат, ИдентификаторСтроки)
	
	Если Результат <> Неопределено Тогда
		
		СтрокаРодственника = Объект.Родственники.НайтиПоИдентификатору(ИдентификаторСтроки);
		МедицинскоеСтрахованиеФормы.УстановитьПрограммыСтрахования(Объект, СтрокаРодственника, "ПрограммыСтрахованияРодственников", "Родственник", Результат, "ФизическоеЛицо");
		
		РассчитатьСтраховуюПремиюРодственников(СтрокаРодственника.Родственник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РодственникиРасширенияПрограммСтрахованияЗавершениеРедактирования(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> Неопределено Тогда
		РодственникиРасширенияПрограммСтрахованияЗавершениеРедактированияНаСервере(Результат, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РодственникиРасширенияПрограммСтрахованияЗавершениеРедактированияНаСервере(Результат, ИдентификаторСтроки)
	
	Если Результат <> Неопределено Тогда
		
		СтрокаРодственника = Объект.Родственники.НайтиПоИдентификатору(ИдентификаторСтроки);
		МедицинскоеСтрахованиеФормы.УстановитьРасширенияПрограммСтрахования(Объект, СтрокаРодственника, "РасширенияПрограммСтрахованияРодственников", "Родственник", Результат, "ФизическоеЛицо");
		
		СтруктураИменТаблиц = МедицинскоеСтрахованиеФормы.СтруктураИменТаблиц();
		СтруктураИменТаблиц.ИмяТаблицыРодственники = "Родственники";
		СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияРодственников = "ПрограммыСтрахованияРодственников";
		СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияРодственников = "РасширенияПрограммСтрахованияРодственников";
		МедицинскоеСтрахованиеФормы.РассчитатьСтраховуюПремиюРодственников(Объект, СтруктураИменТаблиц, СтрокаРодственника.Родственник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РодственникиОбработкаВыбораНаСервере(Родственник, ИдентификаторСтроки)
	
	СтрокаРодственника = Объект.Родственники.Получить(ИдентификаторСтроки);
	СтрокаРодственника.Родственник = Строка(Родственник);
	СтрокаРодственника.ДатаРождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родственник, "ДатаРождения");
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму()
	
	ТаблицыСоСведениями = Новый Соответствие;
	ТаблицыСоСведениями.Вставить("Сотрудники", "ГруппаСведенияСтрахованияСотрудника");
	ТаблицыСоСведениями.Вставить("Родственники", "ГруппаСведенияСтрахованияРодственника");
	
	МедицинскоеСтрахованиеФормы.ПрикреплениеДополнитьФорму(ЭтотОбъект, ТаблицыСоСведениями);
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыУдержаний();
	ЗарплатаКадрыРасширенный.ВводНачисленийВШапкеДополнитьФорму(ЭтотОбъект, ОписаниеТаблицыВидовРасчета, 1);
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПлановыхУдержанийУстановитьВидимостьРазмера(Элементы, Объект.Удержание, "ГруппаУдержания");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОсновныхПолейНаСервере()
	
	ТаблицыСоСведениями = Новый Соответствие;
	ТаблицыСоСведениями.Вставить("Сотрудники", "ГруппаСведенияСтрахованияСотрудника");
	ТаблицыСоСведениями.Вставить("Родственники", "ГруппаСведенияСтрахованияРодственника");
	МедицинскоеСтрахованиеФормы.УстановитьВидимостьПередаваемыхСведений(ЭтотОбъект, ТаблицыСоСведениями);
	
	МедицинскоеСтрахованиеФормы.ПрикреплениеПрочитатьНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиСуммаУдержания", "Доступность", УдержатьПриПрикреплении);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиСуммаПредела", "Доступность", ПрекратитьУдержания);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиДатаНачалаПриИзмененииНаСервере(Сотрудник, ДатаНачала, ДатаРождения)
	
	ДатыСтрахования = Новый Структура;
	ДатыСтрахования.Вставить("ДатаНачала", ДатаНачала);
	ДатыСтрахования.Вставить("ДатаОкончания", Объект.ДатаОкончанияСтрахования);
	ДатыСтрахования.Вставить("ДатаНачалаСтрахования", Объект.ДатаНачалаСтрахования);
	ДатыСтрахования.Вставить("ДатаОкончанияСтрахования", Объект.ДатаОкончанияСтрахования);
	
	ПараметрыОтбора = Новый Структура("Сотрудник", Сотрудник);
	СтрокиПрограмм = Объект.ПрограммыСтрахованияСотрудников.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиПрограмм Цикл
		СтрокаТаблицы.СтраховаяПремия = МедицинскоеСтрахование.СтраховаяПремия(
			СтрокаТаблицы.ПрограммаСтрахования, ДатыСтрахования, ДатаРождения, ШкалаВозрастов, Истина);
	КонецЦикла;
	СтрокиРасширений = Объект.РасширенияПрограммСтрахованияСотрудников.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиРасширений Цикл
		СтрокаТаблицы.СтраховаяПремия = МедицинскоеСтрахование.СтраховаяПремия(
			СтрокаТаблицы.РасширениеСтрахования, ДатыСтрахования, ДатаРождения, ШкалаВозрастов, Истина);
	КонецЦикла;
	
	РассчитатьСтраховуюПремиюСотрудников(Сотрудник);
	
КонецПроцедуры

&НаСервере
Процедура РодственникиДатаПриИзмененииНаСервере(Родственник, ДатаНачала, ДатаОкончания, ДатаРождения)
	
	ДатыСтрахования = Новый Структура;
	ДатыСтрахования.Вставить("ДатаНачала", ДатаНачала);
	ДатыСтрахования.Вставить("ДатаОкончания", ДатаОкончания);
	ДатыСтрахования.Вставить("ДатаНачалаСтрахования", Объект.ДатаНачалаСтрахования);
	ДатыСтрахования.Вставить("ДатаОкончанияСтрахования", Объект.ДатаОкончанияСтрахования);
	
	ПараметрыОтбора = Новый Структура("Родственник", Родственник);
	СтрокиПрограмм = Объект.ПрограммыСтрахованияРодственников.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиПрограмм Цикл
		СтрокаТаблицы.СтраховаяПремия = МедицинскоеСтрахование.СтраховаяПремия(
			СтрокаТаблицы.ПрограммаСтрахования, ДатыСтрахования, ДатаРождения, ШкалаВозрастов, Ложь);
	КонецЦикла;
	СтрокиРасширений = Объект.РасширенияПрограммСтрахованияРодственников.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиРасширений Цикл
		СтрокаТаблицы.СтраховаяПремия = МедицинскоеСтрахование.СтраховаяПремия(
			СтрокаТаблицы.РасширениеСтрахования, ДатыСтрахования, ДатаРождения, ШкалаВозрастов, Ложь);
	КонецЦикла;
	
	РассчитатьСтраховуюПремиюРодственников(Родственник);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтраховуюПремиюСотрудников(Сотрудники = Неопределено)
	
	СтруктураИменТаблиц = МедицинскоеСтрахованиеФормы.СтруктураИменТаблиц();
	СтруктураИменТаблиц.ИмяТаблицыСотрудники = "Сотрудники";
	СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияСотрудников = "ПрограммыСтрахованияСотрудников";
	СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияСотрудников = "РасширенияПрограммСтрахованияСотрудников";
	МедицинскоеСтрахованиеФормы.РассчитатьСтраховуюПремиюСотрудников(Объект, СтруктураИменТаблиц, Сотрудники);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтраховуюПремиюРодственников(Родственники = Неопределено)
	
	СтруктураИменТаблиц = МедицинскоеСтрахованиеФормы.СтруктураИменТаблиц();
	СтруктураИменТаблиц.ИмяТаблицыРодственники = "Родственники";
	СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияРодственников = "ПрограммыСтрахованияРодственников";
	СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияРодственников = "РасширенияПрограммСтрахованияРодственников";
	МедицинскоеСтрахованиеФормы.РассчитатьСтраховуюПремиюРодственников(Объект, СтруктураИменТаблиц, Родственники);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрокРодственников(Элементы, ФизическоеЛицо)
	
	СтруктураОтбора = ?(ФизическоеЛицо = Неопределено, Неопределено, Новый ФиксированнаяСтруктура("ФизическоеЛицо", ФизическоеЛицо));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Родственники", "ОтборСтрок", СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьПрограммСтрахования(ТекущиеДанные)
	
	СотрудникиПрограммыСтрахования = ТекущиеДанные.ПрограммыСтрахования;
	Если ПустаяСтрока(СотрудникиПрограммыСтрахования) Тогда
		СотрудникиПрограммыСтрахования = НСтр("ru = '<Не указаны>'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьРасширенийПрограммСтрахования(ТекущиеДанные)
	
	СотрудникиРасширенияПрограммСтрахования = ТекущиеДанные.РасширенияПрограммСтрахования;
	Если ПустаяСтрока(СотрудникиРасширенияПрограммСтрахования) Тогда
		СотрудникиРасширенияПрограммСтрахования = НСтр("ru = '<Не указаны>'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ДополнитьФорму();
	ДанныеВРеквизиты();
	ПриИзмененииОсновныхПолейНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизиты()
	
	ПередаваемыеСведения = МедицинскоеСтрахованиеФормы.ПередаваемыеСведения();
	ВсеПередаваемыеСведения = МедицинскоеСтрахование.ПередаваемыеСведенияВСтраховуюКомпанию();
	
	ПередаваемыеРеквизиты = Новый Массив;
	Для каждого СтрокаТаблицы Из ВсеПередаваемыеСведения Цикл
		ЕстьПредставлениеСведения = ЗначениеЗаполнено(СтрокаТаблицы.Ссылка);
		Если ЕстьПредставлениеСведения Тогда
			ИскомоеЗначение = СтрокаТаблицы.Ссылка;
		Иначе
			ИскомоеЗначение = СтрокаТаблицы.Имя;
		КонецЕсли;
		СведениеПередается = ПередаваемыеСведения.НайтиПоЗначению(ИскомоеЗначение) <> Неопределено;
		
		Если СведениеПередается Тогда
			ПередаваемыеРеквизиты.Добавить(СтрокаТаблицы.Имя);
			Если ЕстьПредставлениеСведения Тогда
				ПередаваемыеРеквизиты.Добавить(СтрокаТаблицы.Имя + "Представление");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		Для Каждого ПередаваемыйРеквизит Из ПередаваемыеРеквизиты Цикл
			ОтборСтрок = Новый Структура("Сотрудник, СведениеИмя", СтрокаСотрудника.Сотрудник, ПередаваемыйРеквизит);
			НайденныеСтроки = Объект.СведенияСотрудников.НайтиСтроки(ОтборСтрок);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СтрокаСотрудника[ПередаваемыйРеквизит] = НайденнаяСтрока.СведениеЗначение;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Для Каждого СтрокаРодственника Из Объект.Родственники Цикл
		Для Каждого ПередаваемыйРеквизит Из ПередаваемыеРеквизиты Цикл
			ОтборСтрок = Новый Структура("Родственник, СведениеИмя", СтрокаРодственника.Родственник, ПередаваемыйРеквизит);
			НайденныеСтроки = Объект.СведенияРодственников.НайтиСтроки(ОтборСтрок);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СтрокаРодственника[ПередаваемыйРеквизит] = НайденнаяСтрока.СведениеЗначение;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	ТекущийОбъект.СведенияСотрудников.Очистить();
	ТекущийОбъект.СведенияРодственников.Очистить();
	
	ПередаваемыеСведения = МедицинскоеСтрахованиеФормы.ПередаваемыеСведения();
	ВсеПередаваемыеСведения = МедицинскоеСтрахование.ПередаваемыеСведенияВСтраховуюКомпанию();
	
	ПередаваемыеРеквизиты = Новый Массив;
	Для каждого СтрокаТаблицы Из ВсеПередаваемыеСведения Цикл
		ЕстьПредставлениеСведения = ЗначениеЗаполнено(СтрокаТаблицы.Ссылка);
		Если ЕстьПредставлениеСведения Тогда
			ИскомоеЗначение = СтрокаТаблицы.Ссылка;
		Иначе
			ИскомоеЗначение = СтрокаТаблицы.Имя;
		КонецЕсли;
		СведениеПередается = ПередаваемыеСведения.НайтиПоЗначению(ИскомоеЗначение) <> Неопределено;
		
		Если СведениеПередается Тогда
			ПередаваемыеРеквизиты.Добавить(СтрокаТаблицы.Имя);
			Если ЕстьПредставлениеСведения Тогда
				ПередаваемыеРеквизиты.Добавить(СтрокаТаблицы.Имя + "Представление");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		Для Каждого ПередаваемыйРеквизит Из ПередаваемыеРеквизиты Цикл
			НоваяСтрока = ТекущийОбъект.СведенияСотрудников.Добавить();
			НоваяСтрока.Сотрудник = СтрокаСотрудника.Сотрудник;
			НоваяСтрока.СведениеИмя = ПередаваемыйРеквизит;
			НоваяСтрока.СведениеЗначение = СтрокаСотрудника[ПередаваемыйРеквизит];
		КонецЦикла;
	КонецЦикла;
	Для Каждого СтрокаРодственника Из Объект.Родственники Цикл
		Для Каждого ПередаваемыйРеквизит Из ПередаваемыеРеквизиты Цикл
			НоваяСтрока = ТекущийОбъект.СведенияРодственников.Добавить();
			НоваяСтрока.ФизическоеЛицо = СтрокаРодственника.ФизическоеЛицо;
			НоваяСтрока.Родственник = СтрокаРодственника.Родственник;
			НоваяСтрока.СведениеИмя = ПередаваемыйРеквизит;
			НоваяСтрока.СведениеЗначение = СтрокаРодственника[ПередаваемыйРеквизит];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РодственникиЗаполнитьНаСервере(Сотрудник)
	
	СтруктураИменТаблиц = МедицинскоеСтрахованиеФормы.СтруктураИменТаблиц();
	СтруктураИменТаблиц.ИмяТаблицыСотрудники = "Сотрудники";
	СтруктураИменТаблиц.ИмяТаблицыСведенийСотрудников = "СведенияСотрудников";
	СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияСотрудников = "ПрограммыСтрахованияСотрудников";
	СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияСотрудников = "РасширенияПрограммСтрахованияСотрудников";
	СтруктураИменТаблиц.ИмяТаблицыРодственники = "Родственники";
	СтруктураИменТаблиц.ИмяТаблицыСведенийРодственников = "СведенияРодственников";
	СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияРодственников = "ПрограммыСтрахованияРодственников";
	СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияРодственников = "РасширенияПрограммСтрахованияРодственников";
	
	МедицинскоеСтрахованиеФормы.ПрикреплениеКПрограммамСтрахованияЗаполнитьРодственников(ЭтотОбъект, СтруктураИменТаблиц, Объект.Ссылка, Сотрудник);
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура СотрудникиОбработкаВыбораНаСервере(ВыбранныеСотрудники)

	Если ТипЗнч(ВыбранныеСотрудники) = Тип("Массив") Тогда
		СписокСотрудников = ВыбранныеСотрудники;
	Иначе
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранныеСотрудники);
	КонецЕсли;
	
	Если СписокСотрудников.Количество() > 0 Тогда
		
		СтруктураИменТаблиц = МедицинскоеСтрахованиеФормы.СтруктураИменТаблиц();
		СтруктураИменТаблиц.ИмяТаблицыСотрудники = "Сотрудники";
		СтруктураИменТаблиц.ИмяТаблицыСведенийСотрудников = "СведенияСотрудников";
		СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияСотрудников = "ПрограммыСтрахованияСотрудников";
		СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияСотрудников = "РасширенияПрограммСтрахованияСотрудников";
		СтруктураИменТаблиц.ИмяТаблицыРодственники = "Родственники";
		СтруктураИменТаблиц.ИмяТаблицыСведенийРодственников = "СведенияРодственников";
		СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияРодственников = "ПрограммыСтрахованияРодственников";
		СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияРодственников = "РасширенияПрограммСтрахованияРодственников";
		
		МедицинскоеСтрахованиеФормы.ПрикреплениеКПрограммамСтрахованияЗаполнить(ЭтотОбъект, СтруктураИменТаблиц, СписокСотрудников,,, Объект.Ссылка);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОтправкиПисьма(ВыбранноеЗначение)
	Возврат МедицинскоеСтрахование.ПараметрыОтправкиПисьма(ЭтотОбъект, ВыбранноеЗначение, Получатели, НСтр("ru = 'Прикрепление сотрудников'"));
КонецФункции

&НаКлиенте
Процедура ЗаполнениеСведенийСтрахованияЗакрытие(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнениеСведенийСтрахованияЗакрытиеНаСервере(Результат, ДополнительныеПараметры);
		ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			УстановитьНадписьПрограммСтрахования(ТекущиеДанные);
			УстановитьНадписьРасширенийПрограммСтрахования(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеСведенийСтрахованияЗакрытиеНаСервере(Результат, ДополнительныеПараметры)
	
	МассивСотрудников = Новый Массив;
	Для каждого ИдентификаторСтроки Из ДополнительныеПараметры Цикл
		СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтрокаСотрудника.ДатаНачала = Результат.ДатаНачалаСтрахования;
		СтрокаСотрудника.СуммаУдержания = Результат.СуммаУдержания;
		СтрокаСотрудника.СуммаПредела = Результат.СуммаПредела;
		
		ДатыСтрахования = Новый Структура;
		ДатыСтрахования.Вставить("ДатаНачала", СтрокаСотрудника.ДатаНачала);
		ДатыСтрахования.Вставить("ДатаОкончания", Объект.ДатаОкончанияСтрахования);
		ДатыСтрахования.Вставить("ДатаНачалаСтрахования", Объект.ДатаНачалаСтрахования);
		ДатыСтрахования.Вставить("ДатаОкончанияСтрахования", Объект.ДатаОкончанияСтрахования);
		
		МассивСтруктурПрограмм = Новый Массив;
		Для Каждого ЭлементСписка Из Результат.ПрограммыСтрахования Цикл
			СтруктураПрограммы = Новый Структура;
			СтруктураПрограммы.Вставить("ПрограммаСтрахования", ЭлементСписка);
			Если Результат.СтраховаяПремия = 0 Тогда
				СтруктураПрограммы.Вставить("СтраховаяПремия", МедицинскоеСтрахование.СтраховаяПремия(
					ЭлементСписка, ДатыСтрахования, СтрокаСотрудника.ДатаРождения, ШкалаВозрастов, Истина));
			Иначе
				СтруктураПрограммы.Вставить("СтраховаяПремия", Результат.СтраховаяПремия);
			КонецЕсли;
			МассивСтруктурПрограмм.Добавить(СтруктураПрограммы);
		КонецЦикла;
		МассивСтруктурРасширений = Новый Массив;
		Для Каждого ЭлементСписка Из Результат.РасширенияПрограммСтрахования Цикл
			СтруктураРасширения = Новый Структура;
			СтруктураРасширения.Вставить("РасширениеСтрахования", ЭлементСписка);
			Если Результат.СтраховаяПремия = 0 Тогда
				СтруктураРасширения.Вставить("СтраховаяПремия", МедицинскоеСтрахование.СтраховаяПремия(
					ЭлементСписка, ДатыСтрахования, СтрокаСотрудника.ДатаРождения, ШкалаВозрастов, Истина));
			Иначе
				СтруктураРасширения.Вставить("СтраховаяПремия", Результат.СтраховаяПремия);
			КонецЕсли;
			МассивСтруктурРасширений.Добавить(СтруктураРасширения);
		КонецЦикла;
		МедицинскоеСтрахованиеФормы.УстановитьПрограммыСтрахования(Объект, СтрокаСотрудника, "ПрограммыСтрахованияСотрудников", "Сотрудник", МассивСтруктурПрограмм);
		МедицинскоеСтрахованиеФормы.УстановитьРасширенияПрограммСтрахования(Объект, СтрокаСотрудника, "РасширенияПрограммСтрахованияСотрудников", "Сотрудник", МассивСтруктурРасширений);
		МассивСотрудников.Добавить(СтрокаСотрудника.Сотрудник);
	КонецЦикла;
	РассчитатьСтраховуюПремиюСотрудников(МассивСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСотрудниковИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСотрудниковИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСотрудниковИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	ЗагруженныеДанные.Сортировать("Сотрудник");
	
	СотрудникиДобавлены = Ложь;
	
	СтруктураИменТаблиц = МедицинскоеСтрахованиеФормы.СтруктураИменТаблиц();
	СтруктураИменТаблиц.ИмяТаблицыСотрудники = "Сотрудники";
	СтруктураИменТаблиц.ИмяТаблицыСведенийСотрудников = "СведенияСотрудников";
	СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияСотрудников = "ПрограммыСтрахованияСотрудников";
	СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияСотрудников = "РасширенияПрограммСтрахованияСотрудников";
	СтруктураИменТаблиц.ИмяТаблицыРодственники = "Родственники";
	СтруктураИменТаблиц.ИмяТаблицыСведенийРодственников = "СведенияРодственников";
	СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияРодственников = "ПрограммыСтрахованияРодственников";
	СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияРодственников = "РасширенияПрограммСтрахованияРодственников";
	Для Каждого ТаблицаДокумента Из СтруктураИменТаблиц Цикл
		Объект[ТаблицаДокумента.Значение].Очистить();
	КонецЦикла;
	МедицинскоеСтрахованиеФормы.ПрикреплениеКПрограммамСтрахованияЗаполнить(ЭтотОбъект, СтруктураИменТаблиц, ЗагруженныеДанные.ВыгрузитьКолонку("Сотрудник"));
	
	ТекущийСотрудник = Неопределено;
	МассивСтруктурПрограмм = Новый Массив;
	МассивСтруктурРасширений = Новый Массив;
	СтрокаСотрудника = Неопределено;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ТекущийСотрудник <> СтрокаТаблицы.Сотрудник Тогда
			Если СтрокаСотрудника <> Неопределено И МассивСтруктурПрограмм.Количество() > 0 Тогда
				МедицинскоеСтрахованиеФормы.УстановитьПрограммыСтрахования(Объект, СтрокаСотрудника, "ПрограммыСтрахованияСотрудников", "Сотрудник", МассивСтруктурПрограмм);
			КонецЕсли;
			Если СтрокаСотрудника <> Неопределено И МассивСтруктурРасширений.Количество() > 0 Тогда
				МедицинскоеСтрахованиеФормы.УстановитьРасширенияПрограммСтрахования(Объект, СтрокаСотрудника, "РасширенияПрограммСтрахованияСотрудников", "Сотрудник", МассивСтруктурРасширений);
			КонецЕсли;
			ТекущийСотрудник = СтрокаТаблицы.Сотрудник;
			МассивСтруктурПрограмм = Новый Массив;
			МассивСтруктурРасширений = Новый Массив;
			
			СтруктураОтбора = Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник);
			НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаСотрудника = Объект.Сотрудники.Добавить();
			Иначе
				СтрокаСотрудника = НайденныеСтроки[0];
				СтрокаСотрудника.СтраховаяПремия = 0;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаСотрудника.Сотрудник = СтрокаТаблицы.Сотрудник;
		СтрокаСотрудника.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Сотрудник, "ФизическоеЛицо");
		СтрокаСотрудника.ДатаНачала = СтрокаТаблицы.ДатаНачала;
		СтрокаСотрудника.СтраховаяПремия = СтрокаСотрудника.СтраховаяПремия + СтрокаТаблицы.СтраховаяПремия;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПрограммаСтрахования) Тогда
			СтруктураПрограммы = Новый Структура("ПрограммаСтрахования, СтраховаяПремия", СтрокаТаблицы.ПрограммаСтрахования, СтрокаТаблицы.СтраховаяПремия);
			МассивСтруктурПрограмм.Добавить(СтруктураПрограммы);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.РасширениеПрограммСтрахования) Тогда
			СтруктураРасширения = Новый Структура("РасширениеСтрахования, СтраховаяПремия", СтрокаТаблицы.РасширениеПрограммСтрахования, СтрокаТаблицы.СтраховаяПремия);
			МассивСтруктурРасширений.Добавить(СтруктураРасширения);
		КонецЕсли;
		
		СотрудникиДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТекущийСотрудник <> Неопределено Тогда
		Если СтрокаСотрудника <> Неопределено И МассивСтруктурПрограмм.Количество() > 0 Тогда
			МедицинскоеСтрахованиеФормы.УстановитьПрограммыСтрахования(Объект, СтрокаСотрудника, "ПрограммыСтрахованияСотрудников", "Сотрудник", МассивСтруктурПрограмм);
		КонецЕсли;
		Если СтрокаСотрудника <> Неопределено И МассивСтруктурРасширений.Количество() > 0 Тогда
			МедицинскоеСтрахованиеФормы.УстановитьРасширенияПрограммСтрахования(Объект, СтрокаСотрудника, "РасширенияПрограммСтрахованияСотрудников", "Сотрудник", МассивСтруктурРасширений);
		КонецЕсли;
	КонецЕсли;
	
	Если СотрудникиДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдержаниеПриИзмененииНаСервере()
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыУдержаний();
	ЗарплатаКадрыРасширенный.ВводНачисленийВШапкеВидРасчетаПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 1);
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПлановыхУдержанийУстановитьВидимостьРазмера(Элементы, Объект.Удержание, "ГруппаУдержания");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыУдержаний()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "Сотрудники";
	ОписаниеТаблицы.ПутьКДанным = "Объект.Сотрудники";
	ОписаниеТаблицы.ИмяРеквизитаВидРасчета = "Удержание";
	ОписаниеТаблицы.СодержитПолеВидРасчета = Ложь;
	ОписаниеТаблицы.СодержитПолеСотрудник = Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "Сотрудник";
	ОписаниеТаблицы.ЭтоПлановыеНачисленияУдержания = Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

#КонецОбласти

