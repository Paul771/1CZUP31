#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// создается новый документ
		ЗначенияДляЗаполнения = Новый Структура("ПредыдущийМесяц, Ответственный", 
		"Объект.ПериодРегистрации",
		"Объект.Ответственный");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// По умолчанию считаем, что после записи форму нужно закрыть, 
	// в связи с тем, что нельзя обработать событие закрытия в веб-клиенте.
	ЗакрыватьПослеЗаписи = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Если документ проведен, то имитируем режим ПриЗаписиПерепроводить.
	Если Объект.Проведен И ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПровестиДокумент();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриПолученииДанныхНаСервере();
	
	Если Не ЗакрыватьПослеЗаписи Тогда
		// Признак необходимости закрытия держим постоянно взведенным.
		ЗакрыватьПослеЗаписи = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ОтражениеЗарплатыВФинансовомУчете", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаполнятьПоВсемОрганизациямПриИзменении(Элемент)
	
	УстановитьСвойстваПоляОрганизация();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьПоОднойОрганизацииПриИзменении(Элемент)
	
	УстановитьСвойстваПоляОрганизация();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюАналитикуРасходовСтроки(ДанныеСтроки)
	
	СтатьяРасходовАналитика = СтатьяРасходовАналитикаПоУмолчанию(
								ДанныеСтроки.ФизическоеЛицо, 
								ДанныеСтроки.ПодразделениеПредприятия, 
								ДанныеСтроки.ВидОперации, 
								Объект.Ссылка, 
								Объект.Дата);
								
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтатьяРасходовАналитика);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыФизическоеЛицоПриИзменении(Элемент)
	ЗаполнитьСтатьюАналитикуРасходовСтроки(Элементы.НачисленнаяЗарплатаИВзносы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыПодразделениеПриИзменении(Элемент)
	ЗаполнитьСтатьюАналитикуРасходовСтроки(Элементы.НачисленнаяЗарплатаИВзносы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура НачисленнаяЗарплатаИВзносыВидОперацииПриИзменении(Элемент)
	ЗаполнитьСтатьюАналитикуРасходовСтроки(Элементы.НачисленнаяЗарплатаИВзносы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура НачисленныйНДФЛФизическоеЛицоПриИзменении(Элемент)
	ЗаполнитьСтатьюАналитикуРасходовСтроки(Элементы.НачисленныйНДФЛ.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура НачисленныйНДФЛПодразделениеПредприятияПриИзменении(Элемент)
	ЗаполнитьСтатьюАналитикуРасходовСтроки(Элементы.НачисленныйНДФЛ.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура НачисленныйНДФЛВидОперацииПриИзменении(Элемент)
	ЗаполнитьСтатьюАналитикуРасходовСтроки(Элементы.НачисленныйНДФЛ.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УдержаннаяЗарплатаФизическоеЛицоПриИзменении(Элемент)
	ЗаполнитьСтатьюАналитикуРасходовСтроки(Элементы.УдержаннаяЗарплата.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УдержаннаяЗарплатаПодразделениеПредприятияПриИзменении(Элемент)
	ЗаполнитьСтатьюАналитикуРасходовСтроки(Элементы.УдержаннаяЗарплата.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УдержаннаяЗарплатаВидОперацииПриИзменении(Элемент)
	ЗаполнитьСтатьюАналитикуРасходовСтроки(Элементы.УдержаннаяЗарплата.ТекущиеДанные);
КонецПроцедуры

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Заполнить(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.НачисленнаяЗарплатаИВзносы.Количество() > 0 
		Или Объект.НачисленныйНДФЛ.Количество() > 0 
		Или Объект.УдержаннаяЗарплата.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, Нстр("ru = 'Табличные части документа будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе 
		ЗаполнитьЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт 

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Результат = РезультатЗаполненияВДлительнойОперации();
	
	Если Результат.ЗаданиеВыполнено Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходовЗарплатаВзносы(Команда)
	ЗаполнитьСтатьиРасходовВТабличнойЧасти(Объект.НачисленнаяЗарплатаИВзносы, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходовВыделенныхСтрокЗарплатаВзносы(Команда)
	ЗаполнитьСтатьиРасходовВТабличнойЧасти(Объект.НачисленнаяЗарплатаИВзносы, Элементы.НачисленнаяЗарплатаИВзносы.ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходовНДФЛ(Команда)
	ЗаполнитьСтатьиРасходовВТабличнойЧасти(Объект.НачисленныйНДФЛ, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходовВыделенныхСтрокНДФЛ(Команда)
	ЗаполнитьСтатьиРасходовВТабличнойЧасти(Объект.НачисленныйНДФЛ, Элементы.НачисленныйНДФЛ.ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходовУдержания(Команда)
	ЗаполнитьСтатьиРасходовВТабличнойЧасти(Объект.УдержаннаяЗарплата, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходовВыделенныхСтрокУдержания(Команда)
	ЗаполнитьСтатьиРасходовВТабличнойЧасти(Объект.УдержаннаяЗарплата, Элементы.УдержаннаяЗарплата.ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанныеФормы(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	
	ПровестиДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	ПровестиДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");
	
	ДоступноЗаполнениеПоВсемОрганизациям = ОтражениеЗарплатыВФинансовомУчете.ОтражениеЗарплатыВФинансовомУчетеОднимДокументомПоВсемОрганизациямДоступно();
	
	Если Не ДоступноЗаполнениеПоВсемОрганизациям Тогда
		// Для потребителей, в которых не поддерживается отражение в финансовом учете по всем организациям
		// отключаем возможность управления режимом.
		Элементы.ЗаполнятьПоВсемОрганизациям.Видимость = Ложь;
		Элементы.ЗаполнятьПоОднойОрганизации.Видимость = Ложь;
		Элементы.Организация.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		ЗаполнятьПоВсемОрганизациям = 0;
	КонецЕсли;
	
	УстановитьСвойстваПоляОрганизация();
	
КонецПроцедуры

&НаСервере
Функция РезультатЗаполненияВДлительнойОперации()
	
	// Начисленная зарплата и взносы.
	Объект.НачисленнаяЗарплатаИВзносы.Очистить();
	Объект.НачисленныйНДФЛ.Очистить();
	Объект.УдержаннаяЗарплата.Очистить();
	
	СтруктураПараметров = Новый Структура("Организация, ПериодРегистрации", Объект.Организация, Объект.ПериодРегистрации);
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Отражение зарплаты в финансовом учете""'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.ОтражениеЗарплатыВФинансовомУчете.ПодготовитьДанныеДляЗаполнения",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПровестиДокумент()
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Помеченный на удаление документ не может быть проведен.'"));
		Возврат;
	КонецЕсли;
	
	Результат = РезультатПроведенияВДлительнойОперации();
	
	Если Результат.Свойство("ОшибкиПроверкиЗаполнения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		ПараметрыОповещения = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Оповестить("Запись_ОтражениеЗарплатыВФинансовомУчете", ПараметрыОповещения, Объект.Ссылка);
		ПроведениеВДлительнойОперации = Ложь;
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		Иначе
			ЗакрыватьПослеЗаписи = Истина;
		КонецЕсли;
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатПроведенияВДлительнойОперации()
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ОшибкиПроверкиЗаполнения", Истина);
	КонецЕсли;
	
	// Преобразовываем данные формы в объект, чтобы записать его.
	Если Модифицированность Или Объект.Проведен Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.Проведен = Ложь;
		ДокументОбъект.Записать();
		// После записи сразу же перечитываем объект, чтобы избежать различия версий.
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		ПриПолученииДанныхНаСервере();
		Модифицированность = Ложь;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("Отказ", Ложь);
	СтруктураПараметров.Вставить("УстановитьПроведениеДокумента", Истина);
	
	НаименованиеЗадания = НСтр("ru = 'Проведение документа ""Отражение зарплаты в финансовом учете""'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.ОтражениеЗарплатыВФинансовомУчете.ВыполнитьПроведение",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	ПроведениеВДлительнойОперации = Не Результат.ЗаданиеВыполнено;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ПроведениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеПослеВыполненияДлительнойОперации()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОтраженияЗарплаты = Неопределено;
	Если СтруктураДанных.Свойство("РезультатОтраженияЗарплаты", РезультатОтраженияЗарплаты) Тогда
		// Перенесем данные в табличные части документа.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатОтраженияЗарплаты.НачисленнаяЗарплатаИВзносы, Объект.НачисленнаяЗарплатаИВзносы);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатОтраженияЗарплаты.НачисленныйНДФЛ, Объект.НачисленныйНДФЛ);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатОтраженияЗарплаты.УдержаннаяЗарплата, Объект.УдержаннаяЗарплата);
		
		ЗаполнитьСтатьиАналитикуРасходовПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроведениеПослеВыполненияДлительнойОперации()
	
	ПроведениеВДлительнойОперации = Ложь;
	
	Если Не ЗакрыватьПослеЗаписи Тогда
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ЗаданиеВыполненоВДлительнойОперации = Ложь;
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				Если ПроведениеВДлительнойОперации Тогда
					ПроведениеПослеВыполненияДлительнойОперации();
				Иначе
					ЗаполнениеПослеВыполненияДлительнойОперации();
				КонецЕсли;
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ЗаданиеВыполненоВДлительнойОперации = Истина;
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	ОповеститьОбИзменении(Объект.Ссылка);
	ПараметрыОповещения = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Оповестить("Запись_ОтражениеЗарплатыВФинансовомУчете", ПараметрыОповещения, Объект.Ссылка);
	
	Если ЗаданиеВыполненоВДлительнойОперации Тогда
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		Иначе
			ЗакрыватьПослеЗаписи = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьиАналитикуРасходовПоУмолчанию()
	
	// Получаем последние используемые значения по совпадающим сочетаниям заполненных полей.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗарплатаВзносы.ФизическоеЛицо,
	|	ЗарплатаВзносы.ПодразделениеПредприятия,
	|	ЗарплатаВзносы.ВидОперации,
	|	ЗарплатаВзносы.СтатьяРасходов,
	|	ЗарплатаВзносы.АналитикаРасходов
	|ПОМЕСТИТЬ ВТНачисленнаяЗарплатаИВзносы
	|ИЗ
	|	&НачисленнаяЗарплатаИВзносы КАК ЗарплатаВзносы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛ.ФизическоеЛицо,
	|	НДФЛ.ПодразделениеПредприятия,
	|	НДФЛ.ВидОперации,
	|	НДФЛ.СтатьяРасходов,
	|	НДФЛ.АналитикаРасходов
	|ПОМЕСТИТЬ ВТНачисленныйНДФЛ
	|ИЗ
	|	&НачисленныйНДФЛ КАК НДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.ФизическоеЛицо,
	|	Удержания.ПодразделениеПредприятия,
	|	Удержания.ВидОперации,
	|	Удержания.СтатьяРасходов,
	|	Удержания.АналитикаРасходов
	|ПОМЕСТИТЬ ВТУдержаннаяЗарплата
	|ИЗ
	|	&УдержаннаяЗарплата КАК Удержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаВзносы.ФизическоеЛицо,
	|	ЗарплатаВзносы.ПодразделениеПредприятия,
	|	ЗарплатаВзносы.ВидОперации
	|ПОМЕСТИТЬ ВТНезаполненнаяАналитика
	|ИЗ
	|	ВТНачисленнаяЗарплатаИВзносы КАК ЗарплатаВзносы
	|ГДЕ
	|	ЗарплатаВзносы.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	И ЗарплатаВзносы.АналитикаРасходов = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НДФЛ.ФизическоеЛицо,
	|	НДФЛ.ПодразделениеПредприятия,
	|	НДФЛ.ВидОперации
	|ИЗ
	|	ВТНачисленныйНДФЛ КАК НДФЛ
	|ГДЕ
	|	НДФЛ.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	И НДФЛ.АналитикаРасходов = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Удержания.ФизическоеЛицо,
	|	Удержания.ПодразделениеПредприятия,
	|	Удержания.ВидОперации
	|ИЗ
	|	ВТУдержаннаяЗарплата КАК Удержания
	|ГДЕ
	|	Удержания.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	И Удержания.АналитикаРасходов = НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗарплатаВзносы.ФизическоеЛицо,
	|	ЗарплатаВзносы.ПодразделениеПредприятия,
	|	ЗарплатаВзносы.ВидОперации";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачисленнаяЗарплатаИВзносы", Объект.НачисленнаяЗарплатаИВзносы.Выгрузить());
	Запрос.УстановитьПараметр("НачисленныйНДФЛ", Объект.НачисленныйНДФЛ.Выгрузить());
	Запрос.УстановитьПараметр("УдержаннаяЗарплата", Объект.УдержаннаяЗарплата.Выгрузить());
	Запрос.Выполнить();
	
	СоздатьВТАналитикаДругихДокументов(МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Дата);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АналитикаДругихДокументов.ФизическоеЛицо,
	|	АналитикаДругихДокументов.ПодразделениеПредприятия,
	|	АналитикаДругихДокументов.ВидОперации,
	|	АналитикаДругихДокументов.СтатьяРасходов,
	|	АналитикаДругихДокументов.АналитикаРасходов
	|ИЗ
	|	ВТЗаполненнаяАналитика КАК АналитикаДругихДокументов";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо, ПодразделениеПредприятия, ВидОперации");
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("НачисленнаяЗарплатаИВзносы");
	ИменаТаблиц.Добавить("НачисленныйНДФЛ");
	ИменаТаблиц.Добавить("УдержаннаяЗарплата");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
		Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
			НайденныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(ОтборСтрок);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.СтатьяРасходов = Выборка.СтатьяРасходов;
				НайденнаяСтрока.АналитикаРасходов = Выборка.АналитикаРасходов;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьВТАналитикаДругихДокументов(МенеджерВременныхТаблиц, ТекущийДокумент, ДатаАктуальности)
	
	// Получаем последние используемые значения по совпадающим сочетаниям заполненных полей.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаДругихДокументов.Ссылка,
	|	АналитикаДругихДокументов.НомерСтроки КАК НомерСтроки,
	|	АналитикаДругихДокументов.НомерТаблицы,
	|	АналитикаДругихДокументов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	АналитикаДругихДокументов.ПодразделениеПредприятия КАК ПодразделениеПредприятия,
	|	АналитикаДругихДокументов.ВидОперации КАК ВидОперации,
	|	АналитикаДругихДокументов.СтатьяРасходов,
	|	АналитикаДругихДокументов.АналитикаРасходов
	|ПОМЕСТИТЬ ВТАналитикаДругихДокументов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаИВзносы.Ссылка КАК Ссылка,
	|		ЗарплатаИВзносы.НомерСтроки КАК НомерСтроки,
	|		1 КАК НомерТаблицы,
	|		ЗарплатаИВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ЗарплатаИВзносы.ПодразделениеПредприятия КАК ПодразделениеПредприятия,
	|		ЗарплатаИВзносы.ВидОперации КАК ВидОперации,
	|		ЗарплатаИВзносы.СтатьяРасходов КАК СтатьяРасходов,
	|		ЗарплатаИВзносы.АналитикаРасходов КАК АналитикаРасходов
	|	ИЗ
	|		Документ.ОтражениеЗарплатыВФинансовомУчете.НачисленнаяЗарплатаИВзносы КАК ЗарплатаИВзносы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНезаполненнаяАналитика КАК НезаполненнаяАналитика
	|			ПО (НезаполненнаяАналитика.ФизическоеЛицо = ЗарплатаИВзносы.ФизическоеЛицо)
	|				И (НезаполненнаяАналитика.ПодразделениеПредприятия = ЗарплатаИВзносы.ПодразделениеПредприятия)
	|				И (НезаполненнаяАналитика.ВидОперации = ЗарплатаИВзносы.ВидОперации)
	|	ГДЕ
	|		ЗарплатаИВзносы.Ссылка <> &ТекущийДокумент
	|		И ЗарплатаИВзносы.Ссылка.Дата <= &ДатаАктуальности
	|		И ЗарплатаИВзносы.Ссылка.Проведен
	|		И ЗарплатаИВзносы.СтатьяРасходов <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачисленныйНДФЛ.Ссылка,
	|		НачисленныйНДФЛ.НомерСтроки,
	|		2,
	|		НачисленныйНДФЛ.ФизическоеЛицо,
	|		НачисленныйНДФЛ.ПодразделениеПредприятия,
	|		НачисленныйНДФЛ.ВидОперации,
	|		НачисленныйНДФЛ.СтатьяРасходов,
	|		НачисленныйНДФЛ.АналитикаРасходов
	|	ИЗ
	|		Документ.ОтражениеЗарплатыВФинансовомУчете.НачисленныйНДФЛ КАК НачисленныйНДФЛ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНезаполненнаяАналитика КАК НезаполненнаяАналитика
	|			ПО (НезаполненнаяАналитика.ФизическоеЛицо = НачисленныйНДФЛ.ФизическоеЛицо)
	|				И (НезаполненнаяАналитика.ПодразделениеПредприятия = НачисленныйНДФЛ.ПодразделениеПредприятия)
	|				И (НезаполненнаяАналитика.ВидОперации = НачисленныйНДФЛ.ВидОперации)
	|	ГДЕ
	|		НачисленныйНДФЛ.Ссылка <> &ТекущийДокумент
	|		И НачисленныйНДФЛ.Ссылка.Дата <= &ДатаАктуальности
	|		И НачисленныйНДФЛ.Ссылка.Проведен
	|		И НачисленныйНДФЛ.СтатьяРасходов <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УдержаннаяЗарплата.Ссылка,
	|		УдержаннаяЗарплата.НомерСтроки,
	|		3,
	|		УдержаннаяЗарплата.ФизическоеЛицо,
	|		УдержаннаяЗарплата.ПодразделениеПредприятия,
	|		УдержаннаяЗарплата.ВидОперации,
	|		УдержаннаяЗарплата.СтатьяРасходов,
	|		УдержаннаяЗарплата.АналитикаРасходов
	|	ИЗ
	|		Документ.ОтражениеЗарплатыВФинансовомУчете.НачисленнаяЗарплатаИВзносы КАК УдержаннаяЗарплата
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНезаполненнаяАналитика КАК НезаполненнаяАналитика
	|			ПО (НезаполненнаяАналитика.ФизическоеЛицо = УдержаннаяЗарплата.ФизическоеЛицо)
	|				И (НезаполненнаяАналитика.ПодразделениеПредприятия = УдержаннаяЗарплата.ПодразделениеПредприятия)
	|				И (НезаполненнаяАналитика.ВидОперации = УдержаннаяЗарплата.ВидОперации)
	|	ГДЕ
	|		УдержаннаяЗарплата.Ссылка <> &ТекущийДокумент
	|		И УдержаннаяЗарплата.Ссылка.Дата <= &ДатаАктуальности
	|		И УдержаннаяЗарплата.Ссылка.Проведен
	|		И УдержаннаяЗарплата.СтатьяРасходов <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)) КАК АналитикаДругихДокументов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	ПодразделениеПредприятия,
	|	ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаДругихДокументов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	АналитикаДругихДокументов.ПодразделениеПредприятия КАК ПодразделениеПредприятия,
	|	АналитикаДругихДокументов.ВидОперации КАК ВидОперации,
	|	МАКСИМУМ(АналитикаДругихДокументов.Ссылка) КАК Ссылка,
	|	МАКСИМУМ(АналитикаДругихДокументов.НомерСтроки) КАК НомерСтроки,
	|	МИНИМУМ(АналитикаДругихДокументов.НомерТаблицы) КАК НомерТаблицы
	|ПОМЕСТИТЬ ВТЕдинственныеЗначения
	|ИЗ
	|	ВТАналитикаДругихДокументов КАК АналитикаДругихДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаДругихДокументов.ФизическоеЛицо,
	|	АналитикаДругихДокументов.ПодразделениеПредприятия,
	|	АналитикаДругихДокументов.ВидОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	ПодразделениеПредприятия,
	|	ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаДругихДокументов.ФизическоеЛицо,
	|	АналитикаДругихДокументов.ПодразделениеПредприятия,
	|	АналитикаДругихДокументов.ВидОперации,
	|	АналитикаДругихДокументов.СтатьяРасходов,
	|	АналитикаДругихДокументов.АналитикаРасходов
	|ПОМЕСТИТЬ ВТЗаполненнаяАналитика
	|ИЗ
	|	ВТАналитикаДругихДокументов КАК АналитикаДругихДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЕдинственныеЗначения КАК ЕдинственныеЗначения
	|		ПО АналитикаДругихДокументов.ФизическоеЛицо = ЕдинственныеЗначения.ФизическоеЛицо
	|			И АналитикаДругихДокументов.ПодразделениеПредприятия = ЕдинственныеЗначения.ПодразделениеПредприятия
	|			И АналитикаДругихДокументов.ВидОперации = ЕдинственныеЗначения.ВидОперации
	|			И АналитикаДругихДокументов.Ссылка = ЕдинственныеЗначения.Ссылка
	|			И АналитикаДругихДокументов.НомерТаблицы = ЕдинственныеЗначения.НомерТаблицы
	|			И АналитикаДругихДокументов.НомерСтроки = ЕдинственныеЗначения.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатьяРасходовАналитикаПоУмолчанию(ФизическоеЛицо, ПодразделениеПредприятия, ВидОперации, ТекущийДокумент, ДатаАктуальности)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ПодразделениеПредприятия КАК ПодразделениеПредприятия,
	|	&ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ВТНезаполненнаяАналитика";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ПодразделениеПредприятия", ПодразделениеПредприятия);
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	Запрос.Выполнить();
	
	СоздатьВТАналитикаДругихДокументов(МенеджерВременныхТаблиц, ТекущийДокумент, ДатаАктуальности);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АналитикаДругихДокументов.ФизическоеЛицо,
	|	АналитикаДругихДокументов.ПодразделениеПредприятия,
	|	АналитикаДругихДокументов.ВидОперации,
	|	АналитикаДругихДокументов.СтатьяРасходов,
	|	АналитикаДругихДокументов.АналитикаРасходов
	|ИЗ
	|	ВТЗаполненнаяАналитика КАК АналитикаДругихДокументов";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	
	СтатьяАналитикаРасходов = Новый Структура("СтатьяРасходов, АналитикаРасходов");
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтатьяАналитикаРасходов, Выборка);
	КонецЕсли;
	
	Возврат СтатьяАналитикаРасходов;
	
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходовВТабличнойЧасти(ТабличнаяЧасть, ВыделенныеСтроки)
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьСтатьиРасходовВТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ПланВидовХарактеристик.СтатьиРасходов.Форма.ФормаВыбораСтатьиИАналитики", , ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходовВТабличнойЧастиЗавершение(Структура, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(Структура) Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = ДополнительныеПараметры.ТабличнаяЧасть;
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(Строка);
			Если СтрокаТаблицы <> Неопределено Тогда
				СтрокаТаблицы.СтатьяРасходов = Структура.СтатьяРасходов;
				СтрокаТаблицы.АналитикаРасходов = Структура.АналитикаРасходов;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			СтрокаТаблицы.СтатьяРасходов = Структура.СтатьяРасходов;
			СтрокаТаблицы.АналитикаРасходов = Структура.АналитикаРасходов;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПоляОрганизация()
	
	ДоступенВводОрганизации = ЗаполнятьПоВсемОрганизациям = 0;
	
	Элементы.Организация.Доступность = ДоступенВводОрганизации;
	Элементы.Организация.АвтоОтметкаНезаполненного = ДоступенВводОрганизации;
	Элементы.Организация.ОтметкаНезаполненного = ДоступенВводОрганизации И Не ЗначениеЗаполнено(Объект.Организация);
	
	// Очищаем поле, если организация недоступна.
	Если Не ДоступенВводОрганизации Тогда
		Объект.Организация = Неопределено;
	КонецЕсли;
	
	// Изменяем связи параметров выбора.
	Если ЗаполнятьПоВсемОрганизациям = 0 Тогда
		// Заполняется по одной организации.
		СвязиПараметровВыбора = Новый Массив;
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
		Элементы.НачисленнаяЗарплатаИВзносыФизическоеЛицо.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
		Элементы.НачисленныйНДФЛФизическоеЛицо.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
		Элементы.УдержаннаяЗарплатаФизическоеЛицо.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	Иначе
		// Заполняется по всем организациям
		// в каждой табличной части своя Организация.
		СвязиПараметровВыбора = Новый Массив;
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Элементы.НачисленнаяЗарплатаИВзносы.ТекущиеДанные.Организация"));
		Элементы.НачисленнаяЗарплатаИВзносыФизическоеЛицо.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
		
		СвязиПараметровВыбора = Новый Массив;
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Элементы.НачисленныйНДФЛ.ТекущиеДанные.Организация"));
		Элементы.НачисленныйНДФЛФизическоеЛицо.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
		
		СвязиПараметровВыбора = Новый Массив;
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Элементы.УдержаннаяЗарплата.ТекущиеДанные.Организация"));
		Элементы.УдержаннаяЗарплатаФизическоеЛицо.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
