#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Сторнирует документ по учетам. Используется подсистемой исправления документов.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений исправляющего документа в которую будут добавлены сторно стоки.
//  Регистратор				 - ДокументСсылка				 - Документ регистратор исправления (документ исправление).
//  ИсправленныйДокумент	 - ДокументСсылка				 - Исправленный документ движения которого будут сторнированы.
//  СтруктураВидовУчета		 - Структура					 - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//  					Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//  ДополнительныеПараметры	 - Структура					 - Структура со свойствами:
//  					* ИсправлениеВТекущемПериоде - Булево - Истина когда исправление выполняется в периоде регистрации исправленного документа.
//						* ОтменаДокумента - Булево - Истина когда исправление вызвано документом СторнированиеНачислений.
//  					* ПериодРегистрации	- Дата - Период регистрации документа регистратора исправления.
// 
// Возвращаемое значение:
//  Булево - "Истина" если сторнирование выполнено этой функцией, "Ложь" если специальной процедуры не предусмотрено.
//
Функция СторнироватьПоУчетам(Движения, Регистратор, ИсправленныйДокумент, СтруктураВидовУчета, ДополнительныеПараметры) Экспорт
	
	УправлениеШтатнымРасписанием.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ПриемНаРаботу;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическоеЛицоВШапке(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты", , Ложь) Тогда
		
		// Бронирование позиции
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
		КомандаПечати.Идентификатор = "ПФ_MXL_ПодтверждениеБронированияПозиции";
		КомандаПечати.Представление = НСтр("ru = 'Подтверждение брони'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ФункциональныеОпции = "ИспользоватьБронированиеПозиций";
			
		// Приказ о приеме
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказов";
		КомандаПечати.Идентификатор = "ПФ_MXL_Т1";
		КомандаПечати.Порядок = 10;
		КомандаПечати.Представление = НСтр("ru = 'Приказ о приеме (Т-1)'");
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеКадровогоСостоянияРасширенная,ЧтениеКадровогоСостоянияРасширенная", , Ложь) Тогда
		
		// Трудовой договор
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
		КомандаПечати.Идентификатор = "ПФ_MXL_ТрудовойДоговор";
		КомандаПечати.Представление = НСтр("ru = 'Трудовой договор'");
		КомандаПечати.Порядок = 20;
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// Трудовой договор микропредприятий
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказов";
		КомандаПечати.Идентификатор = "ПФ_MXL_ТрудовойДоговорМикропредприятий";
		КомандаПечати.Представление = НСтр("ru = 'Трудовой договор (микропредприятий)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеКадровогоСостоянияРасширенная,ЧтениеКадровогоСостоянияРасширенная", , Ложь) Тогда
		
		// Трудовой договор при дистанционной работе.
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
		КомандаПечати.Идентификатор = "ПФ_MXL_ТрудовойДоговорПриДистанционнойРаботе";
		КомандаПечати.Представление = НСтр("ru = 'Трудовой договор при дистанционной работе'");
		КомандаПечати.Порядок = 30;
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДобавитьКомандыПечатиДокументаПриемНаРаботу(КомандыПечати);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	Если КадровыйУчетРасширенный.ПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Тогда
		
		ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
			КомандыСозданияДокументов, Метаданные.Документы.ПриемНаРаботу);
		
	КонецЕсли; 
	
КонецФункции

Процедура РассчитатьФОТПоДокументу(ДокументОбъект) Экспорт
	
	ТаблицаНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ТаблицаПоказателей = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
	ИзвестныеКадровыеДанные = ПлановыеНачисленияСотрудников.СоздатьТаблицаКадровыхДанных();
	
	КадровыеДанныеСотрудника = ИзвестныеКадровыеДанные.Добавить();
	КадровыеДанныеСотрудника.Сотрудник = ДокументОбъект.Сотрудник;
	КадровыеДанныеСотрудника.Период = ДокументОбъект.ДатаПриема;
	КадровыеДанныеСотрудника.Организация = ДокументОбъект.Организация;
	КадровыеДанныеСотрудника.Подразделение = ДокументОбъект.Подразделение;
	КадровыеДанныеСотрудника.ГрафикРаботы = ДокументОбъект.ГрафикРаботы;
	КадровыеДанныеСотрудника.КоличествоСтавок = ДокументОбъект.КоличествоСтавок;
	
	СписокНачислений = Новый Массив;
	Для Каждого СтрокаНачисления Из ДокументОбъект.Начисления Цикл
		ДанныеНачисления = ТаблицаНачислений.Добавить();
		ДанныеНачисления.Сотрудник = ДокументОбъект.Сотрудник;
		ДанныеНачисления.Период = ДокументОбъект.ДатаПриема;
		ДанныеНачисления.Начисление = СтрокаНачисления.Начисление;
		ДанныеНачисления.Размер = СтрокаНачисления.Размер;
	КонецЦикла;
	
	Для Каждого СтрокаПоказателя Из ДокументОбъект.Показатели Цикл
		ДанныеПоказателя = ТаблицаПоказателей.Добавить();
		ДанныеПоказателя.Сотрудник = ДокументОбъект.Сотрудник;
		ДанныеПоказателя.Период = ДокументОбъект.ДатаПриема;
		ДанныеПоказателя.Показатель = СтрокаПоказателя.Показатель;
		ДанныеПоказателя.Значение = СтрокаПоказателя.Значение;
	КонецЦикла;
	
	РассчитанныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ТаблицаНачислений, ТаблицаПоказателей, ИзвестныеКадровыеДанные);
			
	Для Каждого ОписаниеНачисления Из РассчитанныеДанные.ПлановыйФОТ Цикл
		
		СтрокиДокумента = ДокументОбъект.Начисления.НайтиСтроки(Новый Структура("Начисление", ОписаниеНачисления.Начисление));
		Если СтрокиДокумента.Количество() > 0 Тогда
			СтрокиДокумента[0].Размер = ОписаниеНачисления.ВкладВФОТ;
		КонецЕсли; 
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаполнитьФОТВДвиженияхЗагружаемогоДокумента(ДокументОбъект.Движения.ПлановыеНачисления, ДокументОбъект.Начисления);	
КонецПроцедуры

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная, ЧтениеДанныхДляНачисленияЗарплатыРасширенная", , Ложь);
	
КонецФункции	

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ДанныеДляПроверкиОграничений.Подразделение = Объект.Подразделение;
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок, ПоСпискуСотрудников = Ложь, ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей = Неопределено) Экспорт
	
	ДанныеДляРегистрацииВУчете = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка КАК Ссылка,
		|	ПриемНаРаботу.Ссылка.Организация КАК Организация,
		|	ПриемНаРаботу.Подразделение КАК Подразделение,
		|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
		|	ПриемНаРаботу.Должность КАК Должность,
		|	ПриемНаРаботу.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	ПриемНаРаботу.ДатаПриема КАК ДатаСобытия,
		|	ПриемНаРаботу.КоличествоСтавок КАК КоличествоСтавок,
		|	ПриемНаРаботу.ВидЗанятости КАК ВидЗанятости,
		|	ПриемНаРаботу.ГрафикРаботы КАК ГрафикРаботы,
		|	ПриемНаРаботу.Территория КАК Территория
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Ссылка В(&МассивСсылок)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Сотрудник";
	
	Если ПоСпискуСотрудников Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком.Сотрудники");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Пока Выборка.Следующий() Цикл
			КадровыйУчетРасширенный.ДобавитьДанныеОСтажахПФР(ДанныеДляРегистрацииВУчете, Выборка.Ссылка, Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
	// Данные о сотрудниках, переводимых на внутреннее совмещение
	Если ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей = Неопределено Тогда
		ВидыЗанятостиВнутреннихСовместителей = ВидыЗанятостиВнутреннихСовместителей(МассивСсылок, ПоСпискуСотрудников);
	Иначе
		ВидыЗанятостиВнутреннихСовместителей = Новый Соответствие;
		ВидыЗанятостиВнутреннихСовместителей.Вставить(МассивСсылок[0], ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей);
	КонецЕсли;
	
	КадровыйУчетРасширенный.ДополнитьДанныеДляРегистрацииВУчетеСтажейПФРСведениямиВнутреннихСовместителей(
		ДанныеДляРегистрацииВУчете, ВидыЗанятостиВнутреннихСовместителей);
	
	Возврат ДанныеДляРегистрацииВУчете;
	
КонецФункции

Функция ВидыЗанятостиВнутреннихСовместителей(МассивСсылок, ПоСпискуСотрудников)
	
	ВидыЗанятостиВнутреннихСовместителей = Новый Соответствие;
	
	Выборка = РезультатЗапросаПоДвижениямВидовЗанятостиСотрудников(МассивСсылок, ПоСпискуСотрудников).Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ДвиженияВидовЗанятости = Новый ТаблицаЗначений;
		ДвиженияВидовЗанятости.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ДвиженияВидовЗанятости.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
		ДвиженияВидовЗанятости.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ДвиженияВидовЗанятости.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ДвиженияВидовЗанятости.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ДвиженияВидовЗанятости.Колонки.Добавить("ВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
		ДвиженияВидовЗанятости.Колонки.Добавить("ДействуетДо", Новый ОписаниеТипов("Дата"));
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДвиженияВидовЗанятости, Выборка);
		КонецЦикла;
		
		ВидыЗанятостиВнутреннихСовместителей.Вставить(Выборка.Ссылка,
			КадровыйУчетРасширенный.ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей(ДвиженияВидовЗанятости, Выборка.Организация));
		
	КонецЦикла;
	
	Возврат ВидыЗанятостиВнутреннихСовместителей;
	
КонецФункции

Функция РезультатЗапросаПоДвижениямВидовЗанятостиСотрудников(МассивСсылок, ПоСпискуСотрудников)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка КАК Ссылка,
		|	ПриемНаРаботу.Ссылка.Организация КАК Организация,
		|	ПриемНаРаботу.ДатаПриема КАК ДатаСобытия,
		|	ПриемНаРаботу.ДатаПриема КАК Период,
		|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
		|	ПриемНаРаботу.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПриемНаРаботу.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПриемНаРаботу.ВидЗанятости КАК ВидЗанятости,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Ссылка В(&МассивСсылок)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	Если ПоСпискуСотрудников Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком.Сотрудники");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПодходящаяДатаДокумента(ДатаПриема) Экспорт
	
	ПодходящаяДата = Неопределено;
	
	Если ЗначениеЗаполнено(ДатаПриема) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНачала", ДатаПриема);
		Запрос.УстановитьПараметр("КоличествоДней", 3);
		Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации());
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
			|ПОМЕСТИТЬ ВТРабочиеДни
			|ИЗ
			|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|ГДЕ
			|	ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
			|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаНачала И ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, 10 * &КоличествоДней)
			|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РабочиеДни.Дата КАК Дата,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РабочиеДниВспомогательная.Дата) КАК НомерДня
			|ИЗ
			|	ВТРабочиеДни КАК РабочиеДни
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеДни КАК РабочиеДниВспомогательная
			|		ПО РабочиеДни.Дата >= РабочиеДниВспомогательная.Дата
			|
			|СГРУППИРОВАТЬ ПО
			|	РабочиеДни.Дата
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РабочиеДниВспомогательная.Дата) = &КоличествоДней
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ПодходящаяДата = Выборка.Дата;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ПодходящаяДата;
	
КонецФункции

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц, ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.ДатаПриема КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.ДатаЗавершенияТрудовогоДоговора,
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И ТаблицаДокумента.ДатаЗавершенияТрудовогоДоговора <> ДАТАВРЕМЯ(1, 1, 1)";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком.Сотрудники");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПроверитьСоответствиеПозицииШРПодразделению(ДокументОбъект, Отказ, ПроверяемыеРеквизиты)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		
		Если ПроверяемыеРеквизиты.Найти("ДолжностьПоШтатномуРасписанию") <> Неопределено
			ИЛИ ПроверяемыеРеквизиты.Найти("Сотрудники.ДолжностьПоШтатномуРасписанию") Тогда 
			
			Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
				ПроверяемыеСтруктуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
				ПутьКДанным = "Объект.Подразделение";
			Иначе
				ПроверяемыеСтруктуры = ДокументОбъект.Сотрудники;
				ПутьКДанным = "Объект.Сотрудники";
			КонецЕсли;
			
			Для каждого ПроверяемаяСтруктура Из ПроверяемыеСтруктуры Цикл
				
				Если ЗначениеЗаполнено(ПроверяемаяСтруктура.ДолжностьПоШтатномуРасписанию) Тогда
					
					Если ПроверяемыеСтруктуры.Количество() = 1 Тогда
						ПутьКДаннымРеквизита = ПутьКДанным;
					Иначе
						ПутьКДаннымРеквизита = ПутьКДанным + "[" + ПроверяемаяСтруктура.НомерСтроки + "].Подразделение";
					КонецЕсли;
					
					ПодразделениеПоШтатномуРасписанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемаяСтруктура.ДолжностьПоШтатномуРасписанию, "Подразделение");
					Если ПодразделениеПоШтатномуРасписанию <> ПроверяемаяСтруктура.Подразделение Тогда
						ТекстСообщения = НСтр("ru = 'Значение поля ""Подразделение"" не соответствует позиции штатного расписания указанной в документе.'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, ПутьКДаннымРеквизита, , Отказ);
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры	


#Область ПодготовкаДанныхДляПроведенияДокумента

Функция ДанныеДляПроведения(ДокументСсылка, ТолькоБронированиеПозиции, НачисленияУтверждены, Организация)
	
	ДанныеДляПроведения = Новый Структура; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.Ссылка.Организация КАК Организация,
		|	ПриемНаРаботу.ДатаПриема,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПриемНаРаботу.ДолжностьПоШтатномуРасписанию,
		|	ПриемНаРаботу.Подразделение,
		|	ПриемНаРаботу.Территория,
		|	ПриемНаРаботу.Должность,
		|	ПриемНаРаботу.РазрядКатегория,
		|	ПриемНаРаботу.ПКУ,
		|	ПриемНаРаботу.КоличествоСтавок,
		|	ПриемНаРаботу.ГрафикРаботы,
		|	ПриемНаРаботу.СпособРасчетаАванса,
		|	ПриемНаРаботу.Аванс,
		|	ПриемНаРаботу.ВидЗанятости,
		|	ПриемНаРаботу.Ссылка.ВидДоговора КАК ВидДоговора,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора,
		|	ПриемНаРаботу.ТрудовойДоговорНомер,
		|	ПриемНаРаботу.ТрудовойДоговорДата,
		|	ПриемНаРаботу.ПорядокРасчетаСтоимостиЕдиницыВремени,
		|	ПриемНаРаботу.СовокупнаяТарифнаяСтавка,
		|	ПриемНаРаботу.ВидТарифнойСтавки,
		|	ПриемНаРаботу.ВидАктаГосоргана,
		|	ПриемНаРаботу.ПоступлениеНаСлужбуВпервые,
		|	ПриемНаРаботу.СпособПоступленияНаСлужбу,
		|	ПриемНаРаботу.СрочныйДоговор,
		|	ПриемНаРаботу.СезонныйДоговор,
		|	ПриемНаРаботу.СрокЗаключенияДоговора,
		|	ПриемНаРаботу.ОснованиеСрочногоДоговора,
		|	ПриемНаРаботу.ОборудованиеРабочегоМеста,
		|	ПриемНаРаботу.ИныеУсловияДоговора,
		|	ПриемНаРаботу.Ссылка.Руководитель КАК Руководитель,
		|	ПриемНаРаботу.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ПриемНаРаботу.Ссылка.ОснованиеПредставителяНанимателя КАК ОснованиеПредставителяНанимателя
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Ссылка = &Ссылка";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком.Сотрудники");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриемНаРаботу.Сотрудник,", "ПриемНаРаботу.Сотрудник, ПриемНаРаботу.ИдентификаторСтрокиСотрудника,");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Девятый набор данных для проведения - таблица для формирования времени регистрации документа.
	СотрудникиДаты = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемНаРаботу.ДатаПриема КАК ДатаСобытия,
		|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
		|	ПриемНаРаботу.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПриемНаРаботу.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	ПриемНаРаботу.Подразделение КАК Подразделение,
		|	ПриемНаРаботу.Должность КАК Должность,
		|	ПриемНаРаботу.КоличествоСтавок КАК КоличествоСтавок,
		|	ПриемНаРаботу.ГрафикРаботы КАК ГрафикРаботы,
		|	ПриемНаРаботу.СпособРасчетаАванса КАК СпособРасчетаАванса,
		|	ПриемНаРаботу.Аванс КАК Аванс,
		|	ПриемНаРаботу.ВидЗанятости,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия,
		|	ПриемНаРаботу.Ссылка.ВидДоговора КАК ВидДоговора,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.ТрудовойДоговорНомер,
		|	ПриемНаРаботу.ТрудовойДоговорДата,
		|	ПриемНаРаботу.Ссылка.Руководитель КАК Руководитель,
		|	ПриемНаРаботу.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя
		|ИЗ
		|	ВТСотрудники КАК ПриемНаРаботу";
	
	// Первый набор данных для проведения - таблица для формирования кадровых движений, истории графиков, авансов.
	КадровыеДвижения = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("КадровыеДвижения", КадровыеДвижения);
	
	Если Не ТолькоБронированиеПозиции Тогда
		
		ДвиженияВидовЗанятости = РезультатЗапросаПоДвижениямВидовЗанятостиСотрудников(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка), ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу")).Выгрузить();
		
		// Данные о сотрудниках, переводимых на внутреннее совмещение
		ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей =
			КадровыйУчетРасширенный.ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей(ДвиженияВидовЗанятости, Организация, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка));
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей, ДвиженияВидовЗанятости);
		ДанныеДляПроведения.Вставить("ДвиженияВидовЗанятости", ДвиженияВидовЗанятости);
		
		Если НачисленияУтверждены Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Сотрудники.ДатаПриема КАК ДатаСобытия,
				|	Сотрудники.Сотрудник КАК Сотрудник,
				|	Начисления.Начисление,
				|	Начисления.Размер,
				|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
				|	Сотрудники.ГоловнаяОрганизация
				|ИЗ
				|	Документ.ПриемНаРаботу.Начисления КАК Начисления
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
				|		ПО Начисления.Ссылка = Сотрудники.Ссылка
				|ГДЕ
				|	Начисления.Ссылка = &Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Сотрудники.ДатаПриема,
				|	Сотрудники.Сотрудник,
				|	Льготы.Льгота,
				|	Льготы.Размер,
				|	Сотрудники.ФизическоеЛицо,
				|	Сотрудники.ГоловнаяОрганизация
				|ИЗ
				|	Документ.ПриемНаРаботу.Льготы КАК Льготы
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
				|		ПО Льготы.Ссылка = Сотрудники.Ссылка
				|ГДЕ
				|	Льготы.Ссылка = &Ссылка";
			
			Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу")  Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Начисления.Ссылка = Сотрудники.Ссылка", "ПО Начисления.Ссылка = Сотрудники.Ссылка И Начисления.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Льготы.Ссылка = Сотрудники.Ссылка", "ПО Льготы.Ссылка = Сотрудники.Ссылка И Льготы.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
			КонецЕсли;
			
			// Второй набор данных для проведения - таблица для формирования плановых начислений.
			ПлановыеНачисления = Запрос.Выполнить().Выгрузить();
			ПлановыеНачисления.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
			ПлановыеНачисления.ЗаполнитьЗначения(Истина, "Используется");
			ПлановыеНачисления.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип));
			ДанныеДляПроведения.Вставить("ПлановыеНачисления", ПлановыеНачисления);
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Сотрудники.ДатаПриема КАК ДатаСобытия,
				|	Сотрудники.Сотрудник,
				|	Сотрудники.Организация КАК Организация,
				|	Сотрудники.ФизическоеЛицо,
				|	Показатели.Показатель,
				|	МАКСИМУМ(Показатели.Значение) КАК Значение,
				|	Показатели.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ ВТЗначенияПоказателей
				|ИЗ
				|	Документ.ПриемНаРаботу.Показатели КАК Показатели
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Начисления КАК Начисления
				|		ПО Показатели.Ссылка = Начисления.Ссылка
				|			И Показатели.ИдентификаторСтрокиВидаРасчета = Начисления.ИдентификаторСтрокиВидаРасчета
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
				|		ПО Показатели.Ссылка = Сотрудники.Ссылка
				|ГДЕ
				|	Показатели.Ссылка = &Ссылка
				|	И Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
				|
				|СГРУППИРОВАТЬ ПО
				|	Сотрудники.ДатаПриема,
				|	Сотрудники.Сотрудник,
				|	Сотрудники.Организация,
				|	Сотрудники.ФизическоеЛицо,
				|	Показатели.Показатель,
				|	Показатели.Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Сотрудники.ДатаПриема,
				|	Сотрудники.Сотрудник,
				|	Сотрудники.Организация,
				|	Сотрудники.ФизическоеЛицо,
				|	Показатели.Показатель,
				|	МАКСИМУМ(Показатели.Значение),
				|	Показатели.Ссылка
				|ИЗ
				|	Документ.ПриемНаРаботу.Показатели КАК Показатели
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Льготы КАК Льготы
				|		ПО Показатели.Ссылка = Льготы.Ссылка
				|			И Показатели.ИдентификаторСтрокиВидаРасчета = Льготы.ИдентификаторСтрокиВидаРасчета
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
				|		ПО Показатели.Ссылка = Сотрудники.Ссылка
				|ГДЕ
				|	Показатели.Ссылка = &Ссылка
				|	И Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
				|
				|СГРУППИРОВАТЬ ПО
				|	Сотрудники.ДатаПриема,
				|	Сотрудники.Сотрудник,
				|	Сотрудники.Организация,
				|	Сотрудники.ФизическоеЛицо,
				|	Показатели.Показатель,
				|	Показатели.Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Сотрудники.ДатаПриема,
				|	Сотрудники.Сотрудник,
				|	Сотрудники.Организация,
				|	Сотрудники.ФизическоеЛицо,
				|	Показатели.Показатель,
				|	Показатели.Значение,
				|	Показатели.Ссылка
				|ИЗ
				|	Документ.ПриемНаРаботу.Показатели КАК Показатели
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
				|		ПО Показатели.Ссылка = Сотрудники.Ссылка
				|ГДЕ
				|	Показатели.Ссылка = &Ссылка
				|	И Показатели.ИдентификаторСтрокиВидаРасчета = 0
				|	И Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗначенияПоказателей.ДатаСобытия,
				|	ЗначенияПоказателей.Сотрудник,
				|	ЗначенияПоказателей.Организация,
				|	ЗначенияПоказателей.ФизическоеЛицо,
				|	ЗначенияПоказателей.Показатель,
				|	МАКСИМУМ(ЗначенияПоказателей.Значение) КАК Значение,
				|	ЗначенияПоказателей.Ссылка
				|ИЗ
				|	ВТЗначенияПоказателей КАК ЗначенияПоказателей
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗначенияПоказателей.ДатаСобытия,
				|	ЗначенияПоказателей.Сотрудник,
				|	ЗначенияПоказателей.Организация,
				|	ЗначенияПоказателей.ФизическоеЛицо,
				|	ЗначенияПоказателей.Показатель,
				|	ЗначенияПоказателей.Ссылка";
			
			Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу")  Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.Сотрудник,", "Сотрудники.Сотрудник, Сотрудники.ИдентификаторСтрокиСотрудника,");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗначенияПоказателей.Сотрудник,", "ЗначенияПоказателей.Сотрудник, ЗначенияПоказателей.ИдентификаторСтрокиСотрудника,");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Сотрудники.Ссылка", "ПО Показатели.Ссылка = Сотрудники.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Начисления.Ссылка", "ПО Показатели.Ссылка = Начисления.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Начисления.ИдентификаторСтрокиСотрудника");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Льготы.Ссылка", "ПО Показатели.Ссылка = Льготы.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Льготы.ИдентификаторСтрокиСотрудника");
			КонецЕсли;
			
			// Третий набор данных для проведения - таблица для формирования значений показателей начислений.
			ЗначенияПоказателей = Запрос.Выполнить().Выгрузить();
			ЗначенияПоказателей.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип));
			ДанныеДляПроведения.Вставить("ЗначенияПоказателейНачислений", ЗначенияПоказателей);
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Сотрудники.ДатаПриема КАК ДатаСобытия,
				|	Сотрудники.Организация КАК Организация,
				|	Сотрудники.Сотрудник КАК Сотрудник,
				|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
				|	Показатели.Показатель КАК Показатель,
				|	ИСТИНА КАК Применение
				|ИЗ
				|	Документ.ПриемНаРаботу.Показатели КАК Показатели
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
				|		ПО Показатели.Ссылка = Сотрудники.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Показатели КАК ПоказателиНачислений
				|		ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка
				|			И Показатели.Показатель = ПоказателиНачислений.Показатель
				|			И (ПоказателиНачислений.ИдентификаторСтрокиВидаРасчета <> 0)
				|ГДЕ
				|	Показатели.Ссылка = &Ссылка
				|	И Показатели.ИдентификаторСтрокиВидаРасчета = 0
				|	И Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
				|	И ПоказателиНачислений.Показатель ЕСТЬ NULL ";
			
			Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу") Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Сотрудники.Ссылка", "ПО Показатели.Ссылка = Сотрудники.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка", "ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = ПоказателиНачислений.ИдентификаторСтрокиСотрудника");
			КонецЕсли;
			
			// Пятый набор данных для проведения - таблица для формирования применения дополнительных показателей.
			ПрименениеДополнительныхПоказателей = Запрос.Выполнить().Выгрузить();
			ДанныеДляПроведения.Вставить("ПрименениеДополнительныхПоказателей", ПрименениеДополнительныхПоказателей);
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Сотрудники.ДатаПриема КАК ДатаСобытия,
				|	Сотрудники.Сотрудник КАК Сотрудник,
				|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
				|	Сотрудники.ПорядокРасчетаСтоимостиЕдиницыВремени КАК ПорядокРасчета,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
				|ИЗ
				|	ВТСотрудники КАК Сотрудники";
			
			// Шестой набор данных для проведения - таблица для формирования значений порядка пересчета тарифной ставки.
			ПорядокПересчетаТарифнойСтавки = Запрос.Выполнить().Выгрузить();
			ДанныеДляПроведения.Вставить("ПорядокПересчетаТарифнойСтавки", ПорядокПересчетаТарифнойСтавки);
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Сотрудники.ДатаПриема КАК ДатаСобытия,
				|	Сотрудники.Сотрудник КАК Сотрудник,
				|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
				|	Сотрудники.СовокупнаяТарифнаяСтавка КАК Значение,
				|	ВЫБОР
				|		КОГДА Сотрудники.СовокупнаяТарифнаяСтавка = 0
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
				|		ИНАЧЕ Сотрудники.ВидТарифнойСтавки
				|	КОНЕЦ КАК ВидТарифнойСтавки
				|ИЗ
				|	ВТСотрудники КАК Сотрудники";
			
			// Седьмой набор данных для проведения - таблица для формирования значений совокупной тарифной ставки.
			ДанныеСовокупныхТарифныхСтавок = Запрос.Выполнить().Выгрузить();
			ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", ДанныеСовокупныхТарифныхСтавок);
			
		КонецЕсли;
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ДатаПриема КАК ДатаСобытия,
			|	Сотрудники.Сотрудник,
			|	ЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
			|	ЕжегодныеОтпуска.КоличествоДнейВГод
			|ИЗ
			|	Документ.ПриемНаРаботу.ЕжегодныеОтпуска КАК ЕжегодныеОтпуска
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
			|		ПО ЕжегодныеОтпуска.Ссылка = Сотрудники.Ссылка
			|ГДЕ
			|	ЕжегодныеОтпуска.Ссылка = &Ссылка";
		
		Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу")  Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО ЕжегодныеОтпуска.Ссылка = Сотрудники.Ссылка", "ПО ЕжегодныеОтпуска.Ссылка = ЕжегодныеОтпуска.Ссылка И ЕжегодныеОтпуска.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
		КонецЕсли;
		
		// Четвертый набор данных для проведения - таблица для формирования положенных видов ежегодных отпусков.
		ПоложенныеЕжегодныеОтпуска = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("ЕжегодныеОтпуска", ПоложенныеЕжегодныеОтпуска);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ДатаПриема КАК ДатаСобытия,
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.РазрядКатегория КАК РазрядКатегория,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
			|ИЗ
			|	ВТСотрудники КАК Сотрудники";
		
		// Восьмой набор данных для проведения - таблица для формирования значений разряда сотрудника.
		РазрядыКатегорииСотрудников = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("РазрядыКатегорииСотрудников", РазрядыКатегорииСотрудников);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА Сотрудники.ТрудовойДоговорДата = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА Сотрудники.ДатаПриема
			|		ИНАЧЕ Сотрудники.ТрудовойДоговорДата
			|	КОНЕЦ КАК Период,
			|	Сотрудники.ДатаПриема КАК ДатаНачала,
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо,
			|	Сотрудники.ГоловнаяОрганизация,
			|	Сотрудники.Организация,
			|	Сотрудники.ДатаЗавершенияТрудовогоДоговора КАК ДатаОкончания,
			|	Сотрудники.ТрудовойДоговорНомер КАК НомерДоговораКонтракта,
			|	Сотрудники.ТрудовойДоговорДата КАК ДатаДоговораКонтракта,
			|	Сотрудники.Руководитель КАК ПредставительНанимателя,
			|	Сотрудники.ДолжностьРуководителя КАК ДолжностьПредставителяНанимателя,
			|	Сотрудники.ОснованиеПредставителяНанимателя КАК ОснованиеПредставителяНанимателя,
			|	Сотрудники.ВидАктаГосоргана,
			|	Сотрудники.ПоступлениеНаСлужбуВпервые,
			|	Сотрудники.СпособПоступленияНаСлужбу,
			|	Сотрудники.СрочныйДоговор,
			|	Сотрудники.СезонныйДоговор,
			|	Сотрудники.СрокЗаключенияДоговора,
			|	Сотрудники.ОснованиеСрочногоДоговора,
			|	Сотрудники.ОборудованиеРабочегоМеста,
			|	Сотрудники.ИныеУсловияДоговора
			|ИЗ
			|	ВТСотрудники КАК Сотрудники";
		
		// Десятый набор данных для проведения - таблица для формирования описаний договоров сотрудников.
		СведенияОКонтрактахДоговорах = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("СведенияОКонтрактахДоговорах", СведенияОКонтрактахДоговорах);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа) КАК Состояние,
			|	Сотрудники.ДатаПриема КАК Начало,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Окончание,
			|	НЕОПРЕДЕЛЕНО КАК ВидВремени
			|ИЗ
			|	ВТСотрудники КАК Сотрудники";
		
		// Данные состояний
		ДанныеСостояний = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("ДанныеСостояний", ДанныеСостояний);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ДатаПриема КАК Период,
			|	Сотрудники.Сотрудник,
			|	ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	Сотрудники.ФизическоеЛицо,
			|	Сотрудники.Территория
			|ИЗ
			|	ВТСотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)";
		
		// Набор сведений для проведения по территориям сотрудников
		СведенияОТерриторияхСотрудников = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("ТерриторииСотрудников", СведенияОТерриторияхСотрудников);
		
		// Данные для регистрации в учета стажа ПФР
		ДанныеДляРегистрацииВУчете = ДанныеДляРегистрацииВУчетаСтажаПФР(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка), ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу"), ТаблицаДвиженийВидовЗанятостиВнутреннихСовместителей);
		
		ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииВУчетаСтажаПФР", ДанныеДляРегистрацииВУчете[ДокументСсылка]);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
			Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу") Тогда
				ДанныеГрейдовСотрудников = Модуль.ДанныеДляПроведенияСписочногоКадровогоПриказа(ДокументСсылка, "ПриемНаРаботуСписком", "ДатаПриема");
			Иначе
				ДанныеГрейдовСотрудников = Модуль.ДанныеДляПроведенияГрейдыСотрудников(ДокументСсылка, "ДатаПриема");
			КонецЕсли;
			
			ДанныеДляПроведения.Вставить("ДанныеГрейдовСотрудников", ДанныеГрейдовСотрудников);
			
		КонецЕсли;
		
		// Данные для Реестра кадровых приказов
		ДанныеРеестраКадровыхПриказов = КадровыйУчетРасширенный.ТаблицаРеестраКадровыхПриказов();
		НомерПриказа = "";
		ДатаПриказа = Дата(1, 1, 1);
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПриемНаРаботу.Сотрудник,
			|	ПриемНаРаботу.ФизическоеЛицо,
			|	ПриемНаРаботу.Ссылка КАК ДокументОснование,
			|	ПриемНаРаботу.Номер КАК НомерПриказа,
			|	ПриемНаРаботу.Дата КАК ДатаПриказа,
			|	ПриемНаРаботу.Подразделение,
			|	ПриемНаРаботу.Должность,
			|	ПриемНаРаботу.ВидДоговора,
			|	ПриемНаРаботу.ДатаПриема КАК Дата,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия,
			|	ПриемНаРаботу.РазрядКатегория КАК Разряд,
			|	ПриемНаРаботу.Организация,
			|	ПриемНаРаботу.Показатели.(
			|		Ссылка,
			|		НомерСтроки,
			|		ИдентификаторСтрокиВидаРасчета,
			|		Показатель,
			|		Значение
			|	),
			|	ПриемНаРаботу.Начисления.(
			|		Ссылка,
			|		НомерСтроки,
			|		Начисление,
			|		ИдентификаторСтрокиВидаРасчета,
			|		Размер
			|	)
			|ИЗ
			|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
			|ГДЕ
			|	ПриемНаРаботу.Ссылка = &Ссылка";
			
			Если Не ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
				И ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании") Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриемНаРаботу.РазрядКатегория", "ВЫРАЗИТЬ(ПриемНаРаботу.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).РазрядКатегория");
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Номер = 1;
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Номер = Номер;
				
				НоваяСтрока.ТарифнаяСтавкаНадбавка = КадровыйУчетРасширенный.ПредставлениеТарифнойСтавкиНадбавки(Выборка.Начисления.Выгрузить(), Выборка.Показатели.Выгрузить());			
				
				НомерПриказа = Выборка.НомерПриказа;
				ДатаПриказа = Выборка.ДатаПриказа;
				
			КонецЦикла;
			
		Иначе
			
			Запрос.Текст = 
	        "ВЫБРАТЬ
	        |	ПриемНаРаботу.Ссылка КАК Регистратор,
	        |	ПриемНаРаботу.Сотрудник,
	        |	ПриемНаРаботу.ИдентификаторСтрокиСотрудника,
	        |	ПриемНаРаботу.ФизическоеЛицо,
	        |	ПриемНаРаботу.Ссылка КАК ДокументОснование,
	        |	ПриемНаРаботу.Подразделение,
	        |	ПриемНаРаботу.Должность,
	        |	ПриемНаРаботу.ДатаПриема КАК Дата,
	        |	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия,
	        |	ПриемНаРаботу.РазрядКатегория КАК Разряд,
	        |	ПриемНаРаботу.Ссылка.Номер КАК НомерПриказа,
	        |	ПриемНаРаботу.Ссылка.Дата КАК ДатаПриказа,
	        |	ПриемНаРаботу.Ссылка.ВидДоговора КАК ВидДоговора,
	        |	ПриемНаРаботу.НомерСтроки КАК Номер,
	        |	ПриемНаРаботу.Ссылка.Организация
	        |ИЗ
	        |	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботу
	        |ГДЕ
	        |	ПриемНаРаботу.Ссылка = &Ссылка
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Регистратор
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПриемНаРаботуСпискомНачисления.Ссылка КАК Регистратор,
	        |	ПриемНаРаботуСпискомНачисления.НомерСтроки,
	        |	ПриемНаРаботуСпискомНачисления.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,
	        |	ПриемНаРаботуСпискомНачисления.Начисление,
	        |	ПриемНаРаботуСпискомНачисления.ИдентификаторСтрокиВидаРасчета,
	        |	ПриемНаРаботуСпискомНачисления.Размер
	        |ИЗ
	        |	Документ.ПриемНаРаботуСписком.Начисления КАК ПриемНаРаботуСпискомНачисления
	        |ГДЕ
	        |	ПриемНаРаботуСпискомНачисления.Ссылка = &Ссылка
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Регистратор,
	        |	ИдентификаторСтрокиСотрудника
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПриемНаРаботуСпискомПоказатели.Ссылка КАК Регистратор,
	        |	ПриемНаРаботуСпискомПоказатели.НомерСтроки,
	        |	ПриемНаРаботуСпискомПоказатели.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,
	        |	ПриемНаРаботуСпискомПоказатели.ИдентификаторСтрокиВидаРасчета,
	        |	ПриемНаРаботуСпискомПоказатели.Показатель,
	        |	ПриемНаРаботуСпискомПоказатели.Значение
	        |ИЗ
	        |	Документ.ПриемНаРаботуСписком.Показатели КАК ПриемНаРаботуСпискомПоказатели
	        |ГДЕ
	        |	ПриемНаРаботуСпискомПоказатели.Ссылка = &Ссылка
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Регистратор,
	        |	ИдентификаторСтрокиСотрудника";
			
			Если Не ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
				И ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании") Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриемНаРаботу.РазрядКатегория", "ВЫРАЗИТЬ(ПриемНаРаботу.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).РазрядКатегория");
			КонецЕсли;
			
			Результат = Запрос.ВыполнитьПакет();
			
			Начисления = Результат[1].Выгрузить();
			Показатели = Результат[2].Выгрузить();
			
			Выборка = Результат[0].Выбрать();
			
			Отбор = Новый Структура("Регистратор, ИдентификаторСтрокиСотрудника");
			
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				Отбор.Регистратор = Выборка.Регистратор;
				Отбор.ИдентификаторСтрокиСотрудника = Выборка.ИдентификаторСтрокиСотрудника;
				
				СтрокиНачислений  = Начисления.Скопировать(Отбор);
				СтрокиПоказателей = Показатели.Скопировать(Отбор);
				
				НоваяСтрока.ТарифнаяСтавкаНадбавка = КадровыйУчетРасширенный.ПредставлениеТарифнойСтавкиНадбавки(СтрокиНачислений, СтрокиПоказателей);
				
				НомерПриказа = Выборка.НомерПриказа;
				ДатаПриказа = Выборка.ДатаПриказа;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(ДатаПриказа, НомерПриказа);	

		ДанныеРеестраКадровыхПриказов.ЗаполнитьЗначения(Основание, "Основание");
		
		ДанныеДляПроведения.Вставить("ДанныеРеестраКадровыхПриказов", ДанныеРеестраКадровыхПриказов);
		
		// Данные для формирования значений ПКУ сотрудника.
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ДатаПриема КАК ДатаСобытия,
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ПКУ КАК ПКУ,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
			|ИЗ
			|	ВТСотрудники КАК Сотрудники";
		
		ПКУСотрудников = Запрос.Выполнить().Выгрузить();
		ДанныеДляПроведения.Вставить("ПКУСотрудников", ПКУСотрудников);
		
		Если НачисленияУтверждены И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Модуль.ПриемНаРаботуДополнитьДанныеДляПроведение(ДанныеДляПроведения, Запрос.МенеджерВременныхТаблиц, ДокументСсылка);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("КлассныеЧиныРанги");
			КлассныеЧиныРангиФизическихЛиц = Модуль.ПриемНаРаботуСведенияОКлассныхЧинахРангах(ДокументСсылка);
			ДанныеДляПроведения.Вставить("КлассныеЧиныРангиФизическихЛиц", КлассныеЧиныРангиФизическихЛиц);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведения(ДокументОбъект)
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		РеквизитыДляПроведения.ДатаПриема = ДокументОбъект.ДатаПриема;
	Иначе
		РеквизитыДляПроведения.ДатаПриема = ДокументОбъект.ДатаСобытия;
	КонецЕсли;
	
	РеквизитыДляПроведения.Ссылка = ДокументСсылка;
	РеквизитыДляПроведения.ИсправленныйДокумент = ДокументОбъект.ИсправленныйДокумент;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, ИсправленныйДокумент, ДатаПриема");	
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийМодуляДокумента

Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация, , , Истина);
	
	// Проведение документа
	ТолькоБронированиеПозиции = ДокументОбъект.БронированиеПозиции И ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПозиций");
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект, , , ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент));
	ЗарплатаКадрыРасширенный.ИнициализироватьОтложеннуюРегистрациюВторичныхДанныхПоДвижениямДокумента(ДокументОбъект.Движения);

	ИсправлениеДокументовЗарплатаКадры.ПриПроведенииИсправления(ДокументОбъект.Ссылка, ДокументОбъект.Движения, РежимПроведения, Отказ, РеквизитыДляПроведения(ДокументОбъект),, ДокументОбъект, "ДатаПриема");
	
	ДанныеДляПроведения = ДанныеДляПроведения(ДокументОбъект.Ссылка, ТолькоБронированиеПозиции, ДокументОбъект.НачисленияУтверждены, ДокументОбъект.Организация);
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(
		ДокументОбъект.Движения, ДанныеДляПроведения.СотрудникиДаты, ДокументОбъект.Ссылка);
	
	КадровыйУчет.СформироватьКадровыеДвижения(ДокументОбъект, ДокументОбъект.Движения, ДанныеДляПроведения.КадровыеДвижения, ТолькоБронированиеПозиции);
	
	// Если производится операция бронирования позиции штатного расписания, то никаких действий больше не производится.
	Если ТолькоБронированиеПозиции Тогда
		Возврат;
	КонецЕсли; 
	
	КадровыйУчетРасширенный.СформироватьИсториюИзмененияГрафиков(ДокументОбъект.Движения, ДанныеДляПроведения.КадровыеДвижения);
	РазрядыКатегорииДолжностей.СформироватьДвиженияРазрядовКатегорийСотрудников(ДокументОбъект.Движения, ДанныеДляПроведения.РазрядыКатегорииСотрудников);
	РазрядыКатегорииДолжностей.СформироватьДвиженияПКУСотрудников(ДокументОбъект.Движения, ДанныеДляПроведения.ПКУСотрудников);
	
	КадровыйУчет.СформироватьДвиженияВидовЗанятостиСотрудников(ДокументОбъект.Движения, ДанныеДляПроведения.ДвиженияВидовЗанятости);
	
	Если ДокументОбъект.НачисленияУтверждены Тогда
		
		СтруктураПлановыхНачислений = Новый Структура;
		СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
		СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателейНачислений);
		СтруктураПлановыхНачислений.Вставить("ПрименениеДополнительныхПоказателей", ДанныеДляПроведения.ПрименениеДополнительныхПоказателей);
		
		РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ДокументОбъект, ДокументОбъект.Движения, СтруктураПлановыхНачислений, Ложь);
		РасчетЗарплаты.СформироватьДвиженияПлановыхВыплат(ДокументОбъект.Движения, ДанныеДляПроведения.КадровыеДвижения);
		РасчетЗарплатыРасширенный.СформироватьДвиженияПорядкаПересчетаТарифныхСтавок(ДокументОбъект.Движения, ДанныеДляПроведения.ПорядокПересчетаТарифнойСтавки);
		
	КонецЕсли;
	
	ОстаткиОтпусков.СформироватьДвиженияПоложенныхЕжегодныхОтпусков(ДокументОбъект.Ссылка, ДокументОбъект.Движения, ДанныеДляПроведения.ЕжегодныеОтпуска);
	
	СостоянияСотрудников.ЗарегистрироватьСостоянияСотрудников(ДокументОбъект.Движения, ДокументОбъект.Ссылка, ДанныеДляПроведения.ДанныеСостояний);

	КонтрактыДоговорыСотрудников.СформироватьДвиженияОсновныхДанныхИСведенийОКонтрактахДоговорах(ДокументОбъект.Движения, ДанныеДляПроведения.СведенияОКонтрактахДоговорах);
	
	УчетСтажаПФР.ЗарегистрироватьПериодыВУчетеСтажаПФР(ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеДляРегистрацииВУчетаСтажаПФР);
	
	КадровыйУчетРасширенный.СформироватьДвиженияПоТерриториям(ДокументОбъект.Движения, ДанныеДляПроведения.ТерриторииСотрудников, ДокументОбъект.Организация);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.СформироватьДвиженияГрейдовСотрудников(ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеГрейдовСотрудников);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлассныеЧиныРанги");
		Модуль.СформироватьДвиженияКлассныхЧиновРанговФизическихЛиц(ДокументОбъект.Движения, ДанныеДляПроведения.КлассныеЧиныРангиФизическихЛиц);
	КонецЕсли;
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(ДокументОбъект.Движения, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация, , Не ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент));
	КонецЕсли; 
	
	КадровыйУчетРасширенный.ЗарегистрироватьВРеестреКадровыхПриказов(ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеРеестраКадровыхПриказов, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКУдалениюПроведения(ДокументОбъект, ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент));
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ИсключаемыеРегистраторы = Новый Массив;
	ИсключаемыеРегистраторы.Добавить(ДокументОбъект.Ссылка);
	Если ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент) Тогда
		ИсключаемыеРегистраторы.Добавить(ДокументОбъект.ИсправленныйДокумент);
	КонецЕсли;
	
	ПроверкаСтрокиСписочногоДокумента = ДокументОбъект.ДополнительныеСвойства.Свойство("ПроверкаСтрокиСписочногоДокумента");
	Если ПроверкаСтрокиСписочногоДокумента Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Дата");
	КонецЕсли;
	
	ПроверяетсяПриемНаРаботу = ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПриемНаРаботу");
	
	Если ПроверяетсяПриемНаРаботу Тогда
		ЭтоСписочныйДокумент = Ложь;
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.Сотрудник);
		ПроверяемыеСтруктуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
	Иначе
		ЭтоСписочныйДокумент = Истина;
		Сотрудники = ДокументОбъект.Сотрудники.ВыгрузитьКолонку("Сотрудник");
		ПроверяемыеСтруктуры = ДокументОбъект.Сотрудники;
	КонецЕсли;
	
	Для каждого ПроверяемаяСтруктура Из ПроверяемыеСтруктуры Цикл
		
		Если ПроверяемаяСтруктура.ДатаПриема > ПроверяемаяСтруктура.ДатаЗавершенияТрудовогоДоговора
			И ЗначениеЗаполнено(ПроверяемаяСтруктура.ДатаЗавершенияТрудовогоДоговора) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дата завершения трудового договора не может быть меньше даты приема'"), ДокументОбъект, "ДатаЗавершенияТрудовогоДоговора", ,Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПроверкаСтрокиСписочногоДокумента Тогда
		
		ТаблицаНомеровДоговоров = Новый ТаблицаЗначений;
		ТаблицаНомеровДоговоров.Колонки.Добавить("ТрудовойДоговорДата", Новый ОписаниеТипов("Дата"));
		ТаблицаНомеровДоговоров.Колонки.Добавить("ТрудовойДоговорНомер", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(13)));
		ТаблицаНомеровДоговоров.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаНомеровДоговоров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		
		СотрудникиДокумента = Новый Соответствие;
		НомерДоговоровДокумента = Новый Соответствие;
		Для Каждого ПроверяемаяСтруктура Из ПроверяемыеСтруктуры Цикл
			
			// Проверка дублирования строк по сотруднику списочного документа
			Если Не ПроверяетсяПриемНаРаботу Тогда
				
				НомерСтроки = СотрудникиДокумента.Получить(ПроверяемаяСтруктура.Сотрудник);
				Если НомерСтроки <> Неопределено Тогда
					
					ТекстСообщения = СтрШаблон(НСтр("ru='По сотруднику %1 уже оформлен прием на работу в строке номер'") + " " + НомерСтроки,
						ПроверяемаяСтруктура.Сотрудник);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, "Объект.Сотрудники[" + (ПроверяемаяСтруктура.НомерСтроки - 1) + "].Сотрудник", , Отказ);
					
				Иначе
					СотрудникиДокумента.Вставить(ПроверяемаяСтруктура.Сотрудник, ПроверяемаяСтруктура.НомерСтроки);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПроверяемаяСтруктура.ТрудовойДоговорНомер) Тогда
				
				ЗаполнитьЗначенияСвойств(ТаблицаНомеровДоговоров.Добавить(), ПроверяемаяСтруктура);
				
				Если Не ПроверяетсяПриемНаРаботу Тогда
					
					НомерСтроки = НомерДоговоровДокумента.Получить(ПроверяемаяСтруктура.ТрудовойДоговорНомер);
					Если ЗначениеЗаполнено(НомерСтроки) Тогда
						
						ТекстСообщения = СтрШаблон(НСтр("ru='Номер договора %1 используется в строке'") + " %2",
							ПроверяемаяСтруктура.ТрудовойДоговорНомер, НомерСтроки);
						
						ПутьКДанным = "Объект.Сотрудники[" + (ПроверяемаяСтруктура.НомерСтроки - 1) + "].Сотрудник";
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения, ДокументОбъект.Ссылка, ПутьКДанным, , Отказ);
						
					Иначе
						НомерДоговоровДокумента.Вставить(ПроверяемаяСтруктура.ТрудовойДоговорНомер, ПроверяемаяСтруктура.НомерСтроки);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаНомеровДоговоров.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(ДокументОбъект.Организация));
			Запрос.УстановитьПараметр("ТаблицаНомеровДоговоров", ТаблицаНомеровДоговоров);
			Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ТаблицаНомеровДоговоров.ТрудовойДоговорДата КАК ТрудовойДоговорДата,
				|	ТаблицаНомеровДоговоров.ТрудовойДоговорНомер КАК ТрудовойДоговорНомер,
				|	ТаблицаНомеровДоговоров.Сотрудник КАК Сотрудник,
				|	ТаблицаНомеровДоговоров.НомерСтроки КАК НомерСтроки
				|ПОМЕСТИТЬ ВТТаблицаНомеровДоговоров
				|ИЗ
				|	&ТаблицаНомеровДоговоров КАК ТаблицаНомеровДоговоров
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ОсновныеДанныеКонтрактаДоговораСотрудника.Регистратор КАК Регистратор,
				|	ТаблицаНомеровДоговоров.ТрудовойДоговорНомер КАК ТрудовойДоговорНомер,
				|	ТаблицаНомеровДоговоров.Сотрудник КАК Сотрудник,
				|	ТаблицаНомеровДоговоров.НомерСтроки КАК НомерСтроки
				|ИЗ
				|	РегистрСведений.ОсновныеДанныеКонтрактаДоговораСотрудника КАК ОсновныеДанныеКонтрактаДоговораСотрудника
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаНомеровДоговоров КАК ТаблицаНомеровДоговоров
				|		ПО ОсновныеДанныеКонтрактаДоговораСотрудника.НомерДоговораКонтракта = ТаблицаНомеровДоговоров.ТрудовойДоговорНомер
				|			И (ГОД(ОсновныеДанныеКонтрактаДоговораСотрудника.ДатаДоговораКонтракта) = ГОД(ТаблицаНомеровДоговоров.ТрудовойДоговорДата))
				|ГДЕ
				|	ОсновныеДанныеКонтрактаДоговораСотрудника.ГоловнаяОрганизация = &ГоловнаяОрганизация
				|	И НЕ ОсновныеДанныеКонтрактаДоговораСотрудника.Регистратор В (&ИсключаемыеРегистраторы)
				|
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки";
			
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапроса = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					ТекстСообщения = СтрШаблон(НСтр("ru='Номер договора %1 занят документом'") + " %2",
						Выборка.ТрудовойДоговорНомер, Выборка.Регистратор);
					
					Если ПроверяетсяПриемНаРаботу Тогда
						ПутьКДанным = "Объект.Сотрудник";
					Иначе
						ПутьКДанным = "Объект.Сотрудники[" + (Выборка.НомерСтроки - 1) + "].Сотрудник";
					КонецЕсли;
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, ДокументОбъект.Ссылка, ПутьКДанным, , Отказ);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьСоответствиеПозицииШРПодразделению(ДокументОбъект, Отказ, ПроверяемыеРеквизиты);
	
	// Если производится операция бронирования позиции штатного расписания, то никаких действий больше не производится.
	ТолькоБронированиеПозиции = ДокументОбъект.БронированиеПозиции И ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПозиций");
	Если ТолькоБронированиеПозиции Тогда
		Возврат;
	КонецЕсли; 
	
	ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ДокументОбъект, ПроверяемыеРеквизиты, Отказ, "ПериодическиеСведения");
	
	ПараметрыФО = Новый Структура("Организация", ДокументОбъект.Организация);
	ПроверяемыйРеквизитЕжегодныеОтпуска = ПроверяемыеРеквизиты.Найти("ЕжегодныеОтпуска");
	Если ПроверяемыйРеквизитЕжегодныеОтпуска <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыйРеквизитЕжегодныеОтпуска);
	КонецЕсли;
	
	// проверка КоличествоДнейВГод
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Для каждого Отпуск Из ДокументОбъект.ЕжегодныеОтпуска Цикл
		Если НЕ ЗначениеЗаполнено(Отпуск.КоличествоДнейВГод) И НЕ ОстаткиОтпусков.ЭтоСтажевыйОтпуск(Отпуск.ВидЕжегодногоОтпуска) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не заполнено количество дней в год для отпуска %1'"), Отпуск.ВидЕжегодногоОтпуска);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, "", ,Отказ);
		КонецЕсли;
	КонецЦикла;
	МассивНепроверяемыхРеквизитов.Добавить("ЕжегодныеОтпуска.КоличествоДнейВГод");
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Не ПроверкаСтрокиСписочногоДокумента Тогда
		
		СотрудникиДаты = Новый ТаблицаЗначений;
		СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		СотрудникиДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
		СотрудникиДаты.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
		
		Для Каждого ПроверяемаяСтруктура Из ПроверяемыеСтруктуры Цикл
			СтрокаСотрудникиДаты = СотрудникиДаты.Добавить();
			СтрокаСотрудникиДаты.Сотрудник = ПроверяемаяСтруктура.Сотрудник;
			СтрокаСотрудникиДаты.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
			СтрокаСотрудникиДаты.ДатаСобытия = ПроверяемаяСтруктура.ДатаПриема;
		КонецЦикла;
		
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(ДокументОбъект.Ссылка, СотрудникиДаты);
		
		Для Каждого СтрокаСотрудника Из СотрудникиДаты Цикл
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаСотрудника.ДатаСобытия);
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				СтрокаСотрудника.ДатаСобытия = ВремяРегистрацииСотрудников.Получить(СтрокаСотрудника.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
		ДокументыДляИсключения = Новый Массив;
		ДокументыДляИсключения.Добавить(ДокументОбъект.Ссылка);
		ДокументыДляИсключения.Добавить(ДокументОбъект.ИсправленныйДокумент);
		
		КадровыйУчет.ПроверитьВозможностьПроведенияПоКадровомуУчетуТаблицыСотрудников(СотрудникиДаты, ДокументыДляИсключения, Отказ);
		
	КонецЕсли;
	
	Если Не ПроверкаСтрокиСписочногоДокумента Тогда
		
		СтруктурыПроверяемыхКонфликтовВидовЗанятости = Новый Массив;
		Для каждого ПроверяемаяСтруктура Из ПроверяемыеСтруктуры Цикл
			
			СтруктураПроверки = СотрудникиФормыРасширенный.ПустаяСтруктураДляПроверкиКонфликтовВидовЗанятостиСотрудников();
			ЗаполнитьЗначенияСвойств(СтруктураПроверки, ПроверяемаяСтруктура);
			СтруктураПроверки.ДатаСобытия = ПроверяемаяСтруктура.ДатаПриема;
			
			СтруктурыПроверяемыхКонфликтовВидовЗанятости.Добавить(СтруктураПроверки);
			
		КонецЦикла;
		
		ДокументыДляИсключения = Новый Массив;
		ДокументыДляИсключения.Добавить(ДокументОбъект.Ссылка);
		ДокументыДляИсключения.Добавить(ДокументОбъект.ИсправленныйДокумент);
		
		ИсключаемыеИзПроверкиСотрудники = КадровыйУчетРасширенный.ВнутренниеСовместителиОсновныхСотрудников(
			СтруктурыПроверяемыхКонфликтовВидовЗанятости, ДокументОбъект.Организация, ДокументыДляИсключения);
		
		СообщениеОКонфликтах = СотрудникиФормыРасширенный.СообщениеОКонфликтахВидовЗанятостиСотрудников(
			СтруктурыПроверяемыхКонфликтовВидовЗанятости, ДокументОбъект.Организация, ДокументыДляИсключения, ИсключаемыеИзПроверкиСотрудники);
		
		Для каждого КонфликтыСотрудника Из СообщениеОКонфликтах Цикл
			
			Если ЭтоСписочныйДокумент Тогда
				
				ИндексСтроки = "";
				СтрокаСотрудника = ДокументОбъект.Сотрудники.Найти(КонфликтыСотрудника.Ключ, "Сотрудник");
				Если СтрокаСотрудника <> Неопределено Тогда
					ИндексСтроки = СтрокаСотрудника.НомерСтроки - 1;
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КонфликтыСотрудника.Значение, ДокументОбъект.Ссылка, "Сотрудники[" + ИндексСтроки + "].ВидЗанятости", "Объект", Отказ);
				
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КонфликтыСотрудника.Значение, ДокументОбъект.Ссылка, "ВидЗанятости", "Объект", Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		
		Если ЭтоСписочныйДокумент Тогда
			ИмяТЧСотрудники = "Сотрудники";
			ИмяРеквизитаРабочееМесто = "ИдентификаторСтрокиСотрудника";
			ДатаПроверки = ДокументОбъект.Дата;
		Иначе
			ИмяТЧСотрудники = "";
			ИмяРеквизитаРабочееМесто = "";
			ДатаПроверки = ДокументОбъект.ДатаПриема;
		КонецЕсли;
		
		КадровыйУчетРасширенный.ПроверкаСпискаНачисленийКадровогоДокумента(
			ДокументОбъект, ДатаПроверки, "Начисления", "Показатели", Отказ, , ИмяРеквизитаРабочееМесто, , ИмяТЧСотрудники);
		
		КадровыйУчетРасширенный.ПроверкаСпискаНачисленийКадровогоДокумента(
			ДокументОбъект, ДатаПроверки, "Льготы", "Показатели", Отказ, , ИмяРеквизитаРабочееМесто, "Льгота", ИмяТЧСотрудники);
		
		Если ЭтоСписочныйДокумент Тогда
			КадровыйУчетРасширенный.ПроверитьСоответствиеСотрудниковТабличнойЧастиОрганизации(ДокументОбъект.Организация, ПроверяемыеСтруктуры, Отказ);
		Иначе
			КадровыйУчет.ПроверитьСоответствиеСотрудниковОрганизации(ДокументОбъект.Организация, ДокументОбъект.Сотрудник, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПроверкаСтрокиСписочногоДокумента Тогда
		ЗарплатаКадрыРасширенный.ПроверитьУтверждениеДокумента(ДокументОбъект, Отказ);
	КонецЕсли;
	
	Если ДокументОбъект.НачисленияУтверждены Тогда 
		
		Если Не ЭтоСписочныйДокумент Тогда			
			
		КонецЕсли;		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ПроверкаЗаполненияДокументаПриемНаРаботу(ДокументОбъект, Отказ, ПроверяемыеРеквизиты);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидДоговора");
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

// Функция возвращает структуру с описанием данного вида документа.
//
Функция ОписаниеДокумента() Экспорт 

	ОписаниеДокумента = ЗарплатаКадрыРасширенныйКлиентСервер.СтруктураОписанияДокумента();
	
	ОписаниеДокумента.КраткоеНазваниеИменительныйПадеж	 = НСтр("ru = 'прием'");
	ОписаниеДокумента.КраткоеНазваниеРодительныйПадеж	 = НСтр("ru = 'приема'");
	ОписаниеДокумента.ИмяРеквизитаСотрудник				 = "Сотрудник";
	ОписаниеДокумента.ИмяРеквизитаДатаНачалаСобытия		 = "ДатаПриема";
	ОписаниеДокумента.ИмяРеквизитаДатаОкончанияСобытия	 = "ДатаЗавершенияТрудовогоДоговора";
	
	Возврат ОписаниеДокумента;

КонецФункции

#КонецОбласти

#КонецЕсли
