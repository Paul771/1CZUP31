#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если Документы.ВедомостьНаВыплатуЗарплатыВБанк.ЭтоДанныеЗаполненияНезачисленнымиСтроками(ДанныеЗаполнения) Тогда
		ЗаполнитьНезачисленнымиСтроками(ДанныеЗаполнения)
	Иначе	
		ВзаиморасчетыССотрудниками.ВедомостьОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(ЗарплатныйПроект) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Зарплата.НомерЛицевогоСчета");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Состав.НомерЛицевогоСчета");
	КонецЕсли;
	
	ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	ВзаиморасчетыССотрудниками.ВедомостьОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ВзаиморасчетыССотрудниками.ВедомостьПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи); 
	
	ОбменСБанкамиПоЗарплатнымПроектам.ВедомостьНаВыплатуЗарплатыВБанкПередЗаписью(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОбменСБанкамиПоЗарплатнымПроектам.ВедомостьНаВыплатуЗарплатыВБанкПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	ВзаиморасчетыССотрудниками.ВедомостьОбработкаПроведения(ЭтотОбъект, Отказ);
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЭтотОбъект.НомерРеестра = 0;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает в ведомости переданную зарплату физических лиц
//
// Параметры:
//  ЗарплатаРаботников - ТаблицаЗначений - таблица значений с колонками:
//		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//		* Сумма - Число
//
Процедура УстановитьЗарплатуРаботников(ЗарплатаРаботников) Экспорт
	ВзаиморасчетыССотрудниками.ВедомостьУстановитьЗарплатуРаботников(ЭтотОбъект, ЗарплатаРаботников)
КонецПроцедуры

// Возвращает структуру параметров для ограничения регистрации объекта при обмене.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый Структура("Зарплата", "Сотрудник"));
	
	Возврат ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоОрганизацииИСотрудникам(ЭтотОбъект, Организация, МассивПараметров, ПериодРегистрации);
	
КонецФункции

// Возвращает признак изменения данных, влияющих на формирование электронного документа.
// 
Функция ИзменилисьКлючевыеРеквизитыЭлектронногоДокумента() Экспорт
	
	ИзменилисьКлючевыеРеквизиты = 
		ЭлектронноеВзаимодействиеБЗК.ИзменилисьРеквизитыОбъекта(ЭтотОбъект, "Дата, Номер, Организация, ЗарплатныйПроект, НомерРеестра, ПометкаУдаления")	
		Или ЭлектронноеВзаимодействиеБЗК.ИзмениласьТабличнаяЧастьОбъекта(ЭтотОбъект, "Зарплата", "Сотрудник, КВыплате, НомерЛицевогоСчета");
		
	Возврат ИзменилисьКлючевыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииЗаполненияДокумента

Функция МожноЗаполнитьЗарплату() Экспорт
	Возврат ВзаиморасчетыССотрудниками.ВедомостьМожноЗаполнитьЗарплату(ЭтотОбъект);
КонецФункции

Процедура ЗаполнитьЗарплату() Экспорт
	ВзаиморасчетыССотрудниками.ВедомостьЗаполнитьЗарплату(ЭтотОбъект);
КонецПроцедуры

Процедура ДополнитьЗарплату(ФизическиеЛица) Экспорт
	ВзаиморасчетыССотрудниками.ВедомостьДополнитьЗарплату(ЭтотОбъект, ФизическиеЛица);
КонецПроцедуры	

Процедура ОчиститьЗарплату() Экспорт
	ВзаиморасчетыССотрудниками.ВедомостьОчиститьЗарплату(ЭтотОбъект);
КонецПроцедуры	

#КонецОбласти

Функция МестоВыплаты() Экспорт
	
	МестоВыплаты = ВзаиморасчетыССотрудниками.ВедомостьМестоВыплаты();
	МестоВыплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект;
	МестоВыплаты.Значение = ЗарплатныйПроект; 
	
	Возврат МестоВыплаты
	
КонецФункции

Процедура УстановитьМестоВыплаты(Значение) Экспорт
	ЗарплатныйПроект = Значение;
КонецПроцедуры

Процедура ЗаполнитьПоТаблицеЗарплат(ТаблицаЗарплат) Экспорт
	ДополнитьТаблицуЗарплатНомерамиЛицевыхСчетов(ТаблицаЗарплат);
	ВзаиморасчетыССотрудниками.ВедомостьЗаполнитьПоТаблицеЗарплат(ЭтотОбъект, ТаблицаЗарплат);
КонецПроцедуры

Процедура ДополнитьПоТаблицеЗарплат(ТаблицаЗарплат) Экспорт
	ДополнитьТаблицуЗарплатНомерамиЛицевыхСчетов(ТаблицаЗарплат);
	ВзаиморасчетыССотрудниками.ВедомостьДополнитьПоТаблицеЗарплат(ЭтотОбъект, ТаблицаЗарплат)
КонецПроцедуры

Процедура ДополнитьТаблицуЗарплатНомерамиЛицевыхСчетов(ЗарплатаКВыплате)
	
	МетаданныеРеквизита = Метаданные().ТабличныеЧасти.Состав.Реквизиты.НомерЛицевогоСчета;
	ЗарплатаКВыплате.Колонки.Добавить(МетаданныеРеквизита.Имя, МетаданныеРеквизита.Тип);
	
	ЛицевыеСчетаСотрудников = ОбменСБанкамиПоЗарплатнымПроектам.ЛицевыеСчетаСотрудников(ЗарплатаКВыплате.ВыгрузитьКолонку("Сотрудник"), Истина, Организация, Дата, ЗарплатныйПроект);
	
	Для Каждого СтрокаЗарплаты Из ЗарплатаКВыплате Цикл
		СтрокаЛС = ЛицевыеСчетаСотрудников.Найти(СтрокаЗарплаты.Сотрудник, "Сотрудник");
		Если СтрокаЛС = Неопределено Тогда
			СтрокаЗарплаты.НомерЛицевогоСчета = "";
		Иначе
			СтрокаЗарплаты.НомерЛицевогоСчета = СтрокаЛС.НомерЛицевогоСчета
		КонецЕсли
	КонецЦикла
	
КонецПроцедуры	

// Заполняет документ на основании существующего,
// перенося в новый документ только указанных физических лиц.
// 
// Параметры:
//	Документ - исходный документ (объект или ссылка).
//  Физлица - массив физических лиц.
//
Процедура ЗаполнитьНезачисленнымиСтроками(ДанныеЗаполнения)
	
	Реквизиты = Новый Массив;
	Для Каждого Реквизит Из ДанныеЗаполнения.Ведомость.Метаданные().Реквизиты Цикл
		Реквизиты.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Шапка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.Ведомость, Реквизиты);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка, , "НомерРеестра");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Ведомость.Ссылка);
	Запрос.УстановитьПараметр("Физлица", ДанныеЗаполнения.Физлица);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьЗарплата.Сотрудник КАК Сотрудник,
	|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВедомостьЗарплата.Подразделение КАК Подразделение,
	|	ВедомостьЗарплата.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ВедомостьЗарплата.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВедомостьЗарплата.СтатьяРасходов КАК СтатьяРасходов,
	|	ВедомостьЗарплата.ДокументОснование КАК ДокументОснование,
	|	ВедомостьЗарплата.КВыплате КАК КВыплате,
	|	ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты КАК КомпенсацияЗаЗадержкуЗарплаты,
	|	ВедомостьЗарплата.НомерЛицевогоСчета КАК НомерЛицевогоСчета
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.Ссылка = &Ссылка
	|	И ВедомостьЗарплата.Сотрудник.ФизическоеЛицо В(&Физлица)";
	
	НезачисленнаяЗарплата = Запрос.Выполнить().Выгрузить();
	
	ВзаиморасчетыССотрудниками.ВедомостьЗаполнитьПоТаблицеЗарплат(ЭтотОбъект, НезачисленнаяЗарплата);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
