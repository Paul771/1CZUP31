#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.УченическийДоговор;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическоеЛицоВШапке(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДанныеДляПроведения(Ссылка)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УченическийДоговор.Организация,
		|	УченическийДоговор.ФизическоеЛицо,
		|	УченическийДоговор.Ссылка КАК УченическийДоговор,
		|	УченическийДоговор.ДатаНачалаОбязательств КАК ДатаНачалаДоговора,
		|	УченическийДоговорОбязательства.ПериодРаботы КАК ПериодРаботы,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачалаОбязательств,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончанияОбязательств,
		|	УченическийДоговорОбязательства.Сумма
		|ИЗ
		|	Документ.УченическийДоговор.Обязательства КАК УченическийДоговорОбязательства
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УченическийДоговор КАК УченическийДоговор
		|		ПО УченическийДоговорОбязательства.Ссылка = УченическийДоговор.Ссылка
		|ГДЕ
		|	УченическийДоговор.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРаботы";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ДвиженияУсловийУченическогоДоговора = РезультатЗапроса.Выгрузить();
	
	ПредыдущееДвижение = Неопределено;
	Для каждого Движение Из ДвиженияУсловийУченическогоДоговора Цикл
		Если ПредыдущееДвижение = Неопределено Тогда
			Движение.ДатаНачалаОбязательств = Движение.ДатаНачалаДоговора;
		Иначе
			Движение.ДатаНачалаОбязательств = КонецДня(ПредыдущееДвижение.ДатаОкончанияОбязательств)+1;
		КонецЕсли;
		Движение.ДатаОкончанияОбязательств = НачалоДня(ДобавитьМесяц(Движение.ДатаНачалаДоговора, Движение.ПериодРаботы))-1;
		ПредыдущееДвижение = Движение;
	КонецЦикла; 
	
	ДанныеДляПроведения = Новый Структура;
	ДанныеДляПроведения.Вставить("ДвиженияУсловийУченическогоДоговора", ДвиженияУсловийУченическогоДоговора);
	
	Возврат ДанныеДляПроведения;

КонецФункции	

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Ученический договор
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Документ.УченическийДоговор";
	КомандаПечати.Идентификатор = "УченическийДоговор";
	КомандаПечати.Представление = НСтр("ru = 'Ученический договор'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина; 
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УченическийДоговор");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"УченическийДоговор",
			НСтр("ru = 'Ученический договор'"),
			ПечатьУченическогоДоговора(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.УченическийДоговор.ПФ_MXL_УченическийДоговор");
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьУченическогоДоговора(МассивОбъектов, ОбъектыПечати)
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_УченическийДоговор";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УченическийДоговор.ПФ_MXL_УченическийДоговор");
	ПервыйДоговор = Истина;
	
	Для каждого ДокументСсылка Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДоговор Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДоговор = Ложь;
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
		
		РеквизитыДокумента = ЗначенияПараметровДокумента(ДокументСсылка);
		ЗаполнитьЗначенияСвойств(ОбластьМакетаШапка.Параметры, РеквизитыДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		// Шкала обязательств.
		ОбластьМакетаОбязательства = Макет.ПолучитьОбласть("Обязательства");
		
		КомпенсацияРасходов = НСтр("ru = 'Сотрудник возмещает расходы, понесенные работодателем на его обучение, по шкале обязательств:'" + " ");
		ПерваяСтрока = Истина;
		
		ВыборкаОбязательств = ОбязательстваПоДоговору(ДокументСсылка);
		Пока ВыборкаОбязательств.Следующий() Цикл
			
			Если ВыборкаОбязательств.Сумма = 0 Тогда
				КомпенсацияРасходов = КомпенсацияРасходов + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При увольнении в после %1 г. Сотрудник не возмещает расходы.'"),
					Формат(ВыборкаОбязательств.ДатаНачалаОбязательств, "ДЛФ=Д"));
			ИначеЕсли ПерваяСтрока Тогда
				КомпенсацияРасходов = КомпенсацияРасходов + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'при увольнении в период с %1 по %2 г. Сотрудник возмещает расходы в сумме %3 руб.'"),
					Формат(ВыборкаОбязательств.ДатаНачалаОбязательств, "ДЛФ=Д"),
					Формат(ВыборкаОбязательств.ДатаОкончанияОбязательств, "ДЛФ=Д"),
					ВыборкаОбязательств.Сумма);
				ПерваяСтрока = Ложь;
			Иначе
				КомпенсацияРасходов = КомпенсацияРасходов + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = ', с %1 по %2 г. - %3 руб.'"),
					Формат(ВыборкаОбязательств.ДатаНачалаОбязательств, "ДЛФ=Д"),
					Формат(ВыборкаОбязательств.ДатаОкончанияОбязательств, "ДЛФ=Д"),
					ВыборкаОбязательств.Сумма);
			КонецЕсли;
		
		КонецЦикла;
		
		ОбластьМакетаОбязательства.Параметры.КомпенсацияРасходов = КомпенсацияРасходов;
		ТабличныйДокумент.Вывести(ОбластьМакетаОбязательства);
		
		// Подвал.
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		ЗаполнитьЗначенияСвойств(ОбластьМакетаПодвал.Параметры, РеквизитыДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДокументСсылка);
		
	КонецЦикла; 
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ЗначенияПараметровДокумента(ДокументСсылка)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УченическийДоговор.Дата КАК ДатаДок,
		|	УченическийДоговор.Номер КАК НомерДок,
		|	УченическийДоговор.ФизическоеЛицо,
		|	УченическийДоговор.Руководитель,
		|	УченическийДоговор.ДолжностьРуководителя КАК РуководительДолжность,
		|	УченическийДоговор.Организация,
		|	УченическийДоговор.Квалификация,
		|	Организации.НаименованиеПолное КАК НаименованиеОрганизации,
		|	УченическийДоговор.ДатаНачалаОбязательств КАК ДатаНачалаДоговора,
		|	УченическийДоговор.ДатаОкончанияОбязательств КАК ДатаОкончанияДоговора,
		|	ВЫБОР
		|		КОГДА МероприятияОбученияРазвития.ОбучениеСОтрывомОтПроизводства
		|			ТОГДА &СОтрывомОтПроизводства
		|		ИНАЧЕ &БезОтрываОтПроизводства
		|	КОНЕЦ КАК СОтрывомТекст
		|ПОМЕСТИТЬ ВТУченическийДоговор
		|ИЗ
		|	Документ.УченическийДоговор КАК УченическийДоговор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО УченическийДоговор.Организация = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МероприятияОбученияРазвития КАК МероприятияОбученияРазвития
		|		ПО УченическийДоговор.Мероприятие = МероприятияОбученияРазвития.Ссылка
		|ГДЕ
		|	УченическийДоговор.Ссылка = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТУченическийДоговор.ФизическоеЛицо,
		|	ВТУченическийДоговор.ДатаДок КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТУченическийДоговор КАК ВТУченическийДоговор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТУченическийДоговор.Руководитель КАК ФизическоеЛицо,
		|	ВТУченическийДоговор.ДатаДок КАК Период
		|ПОМЕСТИТЬ ВТРуководительПериод
		|ИЗ
		|	ВТУченическийДоговор КАК ВТУченическийДоговор";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СОтрывомОтПроизводства", НСтр("ru = 'с отрывом от производства'"));
	Запрос.УстановитьПараметр("БезОтрываОтПроизводства", НСтр("ru = 'без отрыва от производства'"));
	Запрос.Выполнить();
	
	
	// Получение кадровых данных сотрудника.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
	КадровыеДанные = "ФИОПолные,ФамилияИО,АдресПоПропискеПредставление,ДокументПредставление";
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТУченическийДоговор.ДатаДок,
		|	ВТУченическийДоговор.НомерДок,
		|	ВТУченическийДоговор.ФизическоеЛицо КАК Сотрудник,
		|	ВТУченическийДоговор.Организация,
		|	ВТУченическийДоговор.Руководитель,
		|	ВТУченическийДоговор.РуководительДолжность,
		|	ВТУченическийДоговор.Квалификация,
		|	ВТУченическийДоговор.НаименованиеОрганизации,
		|	ВТУченическийДоговор.ДатаНачалаДоговора,
		|	ВТУченическийДоговор.ДатаОкончанияДоговора,
		|	ВТУченическийДоговор.СОтрывомТекст,
		|	ВТКадровыеДанныеФизическихЛиц.ФИОПолные,
		|	ВТКадровыеДанныеФизическихЛиц.ФамилияИО,
		|	ВТКадровыеДанныеФизическихЛиц.АдресПоПропискеПредставление,
		|	ВТКадровыеДанныеФизическихЛиц.ДокументПредставление
		|ПОМЕСТИТЬ ВТДоговор
		|ИЗ
		|	ВТУченическийДоговор КАК ВТУченическийДоговор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК ВТКадровыеДанныеФизическихЛиц
		|		ПО ВТУченическийДоговор.ФизическоеЛицо = ВТКадровыеДанныеФизическихЛиц.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКадровыеДанныеФизическихЛиц";
	Запрос.Выполнить();	
	
	// Добавляем кадровые данные руководителя.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц,
		"ВТРуководительПериод");
	КадровыеДанные = "ФИОПолные,ФамилияИО,Пол";
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТДоговор.ДатаДок,
		|	ВТДоговор.НомерДок,
		|	ВТДоговор.Сотрудник,
		|	ВТДоговор.Организация,
		|	ВТДоговор.РуководительДолжность,
		|	ВТКадровыеДанныеФизическихЛиц.ФИОПолные КАК РуководительФИОПолные,
		|	ВТКадровыеДанныеФизическихЛиц.ФамилияИО КАК РуководительФамилияИО,
		|	ВТКадровыеДанныеФизическихЛиц.Пол КАК РуководительПол,
		|	ВТДоговор.Квалификация,
		|	ВТДоговор.НаименованиеОрганизации,
		|	ВТДоговор.ДатаНачалаДоговора,
		|	ВТДоговор.ДатаОкончанияДоговора,
		|	ВТДоговор.СОтрывомТекст,
		|	ВТДоговор.ФИОПолные,
		|	ВТДоговор.ФамилияИО,
		|	ВТДоговор.АдресПоПропискеПредставление,
		|	ВТДоговор.ДокументПредставление
		|ИЗ
		|	ВТДоговор КАК ВТДоговор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК ВТКадровыеДанныеФизическихЛиц
		|		ПО ВТДоговор.Руководитель = ВТКадровыеДанныеФизическихЛиц.ФизическоеЛицо";	
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	ВыборкаЗапроса.Следующий();
	
	ВозвращаемаяСтруктура = ПараметрыУченическогоДоговора();
	
	ЗаполнитьЗначенияСвойств(ВозвращаемаяСтруктура, ВыборкаЗапроса);
	
	ВозвращаемаяСтруктура.ДатаНачалаДоговора = Формат(ВозвращаемаяСтруктура.ДатаНачалаДоговора, "ДЛФ=Д");
	ВозвращаемаяСтруктура.ДатаОкончанияДоговора = Формат(ВозвращаемаяСтруктура.ДатаОкончанияДоговора, "ДЛФ=Д");
	
	АдресаОрганизаций = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресаОрганизаций(ВозвращаемаяСтруктура.Организация);
	ВозвращаемаяСтруктура.АдресОрганизации = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
		АдресаОрганизаций, ВозвращаемаяСтруктура.Организация, ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации")).Представление;
		
	ВозвращаемаяСтруктура.РуководительДолжностьРодПадеж = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(ВозвращаемаяСтруктура.РуководительДолжность), 2);
	ФИОРуководителяВПадеже = "";
	ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ВозвращаемаяСтруктура.РуководительФИОПолные), 2, ФИОРуководителяВПадеже, ВыборкаЗапроса.РуководительПол);
	ВозвращаемаяСтруктура.РуководительФИОПолные = ФИОРуководителяВПадеже; 
		
	Возврат ВозвращаемаяСтруктура;

КонецФункции

Функция ОбязательстваПоДоговору(ДокументСсылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УсловияУченическогоДоговора.ДатаНачалаОбязательств,
		|	УсловияУченическогоДоговора.ДатаОкончанияОбязательств,
		|	УсловияУченическогоДоговора.Сумма
		|ИЗ
		|	РегистрСведений.УсловияУченическогоДоговора КАК УсловияУченическогоДоговора
		|ГДЕ
		|	УсловияУченическогоДоговора.УченическийДоговор = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачалаОбязательств";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ПараметрыУченическогоДоговора()

	Параметры = Новый Структура;
	
	Параметры.Вставить("ДатаДок", '00010101');
	Параметры.Вставить("НомерДок", "");
	Параметры.Вставить("Сотрудник", Справочники.ФизическиеЛица.ПустаяСсылка());
	Параметры.Вставить("НаименованиеОрганизации", "");
	Параметры.Вставить("АдресОрганизации", "");
	Параметры.Вставить("ДатаНачалаДоговора", '00010101');
	Параметры.Вставить("ДатаОкончанияДоговора", '00010101');
	Параметры.Вставить("СОтрывомТекст", "");
	Параметры.Вставить("Квалификация", "");
	Параметры.Вставить("ФИОПолные", "");
	Параметры.Вставить("ФамилияИО", "");
	Параметры.Вставить("РуководительФИОПолные", "");
	Параметры.Вставить("РуководительФамилияИО", "");
	Параметры.Вставить("АдресПоПропискеПредставление", "");
	Параметры.Вставить("ДокументПредставление", "");
	Параметры.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Параметры.Вставить("РуководительДолжность", Справочники.Должности.ПустаяСсылка());
	Параметры.Вставить("РуководительДолжностьРодПадеж", "");
	
	Возврат Параметры;
		
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли