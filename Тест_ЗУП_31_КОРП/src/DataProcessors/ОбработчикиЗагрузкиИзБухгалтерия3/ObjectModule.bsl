#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// Обработчики загрузки конвертации БП 3.0 --> ЗУП 3.0 {0d26307d-a9ce-11e3-be48-e0cb4ed5f645}.
// 
// Данный модуль содержит экспортные процедуры обработчиков событий конвертации 
// и предназначен для отладки правил обмена. После отладки рекомендуется
// скопировать текст модуля в буфер обмена и импортировать его в базу
// "Конвертация данных".
//
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АББРЕВИАТУРЫ)
//
//  ПКО  - правило конвертации объектов.
//  ПКС  - правило конвертации свойств объектов.
//  ПКГС - правило конвертации группы свойств объектов.
//  ПВД  - правило выгрузки данных.
//  ПОД  - правило очистки данных.

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТКИ
// Данный раздел изменять запрещено.

#Область ОписаниеПеременных

Перем Параметры;
Перем Алгоритмы;
Перем Запросы;
Перем УзелДляОбмена;
Перем ОбщиеПроцедурыФункции;

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ (ГЛОБАЛЬНЫЕ)
// В данном разделе разрешено изменять реализацию процедур.

Процедура Конвертация_ПриПолученииИнформацииОбУдалении(Объект, Отказ) Экспорт

	МетаданныеОбъекта = Объект.Метаданные();
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Отказ = Истина;
		
		УстановитьПометкуУдаленияУОбъекта(Объект, Истина, "Справочник");
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Отказ = Истина;
		
		Если Объект.Проведен Тогда
			ОтменитьПроведениеОбъектаВИБ(Объект, ТипЗнч(Объект), Ложь);
		КонецЕсли;
		
		УстановитьПометкуУдаленияУОбъекта(Объект, Истина, "Документ");
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		Отказ = Истина;
		
		УстановитьПометкуУдаленияУОбъекта(Объект, Истина, "ПланВидовХарактеристик");
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

Процедура ПКО_ВедомостьНаВыплатуЗарплатыВБанк_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ВедомостьНаВыплатуЗарплатыПослеЗагрузки(Ссылка, Объект, ПараметрыОбъекта);

КонецПроцедуры

Процедура ПКО_ВедомостьНаВыплатуЗарплатыВКассу_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ВедомостьНаВыплатуЗарплатыПослеЗагрузки(Ссылка, Объект, ПараметрыОбъекта);

КонецПроцедуры

Процедура ПКО_ВедомостьНаВыплатуЗарплатыПеречислением_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ВедомостьНаВыплатуЗарплатыПослеЗагрузки(Ссылка, Объект, ПараметрыОбъекта);

КонецПроцедуры

Процедура ПКО_ВедомостьНаВыплатуЗарплатыРаздатчиком_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ВедомостьНаВыплатуЗарплатыПослеЗагрузки(Ссылка, Объект, ПараметрыОбъекта);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ СВОЙСТВ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ГРУПП СВОЙСТВ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ВЫГРУЗКИ ДАННЫХ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОЧИСТКИ ДАННЫХ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПАРАМЕТРОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// АЛГОРИТМЫ
// Данный раздел разрешено изменять.
// Также допустимо размещать процедуры с алгоритмами в любом из разделов выше.

Процедура ВедомостьНаВыплатуЗарплатыПослеЗагрузки(Ссылка,Объект,ПараметрыОбъекта) Экспорт

	Сотрудники				= Новый ТаблицаЗначений;
	Сотрудники.Колонки.Добавить("Сотрудник");
	Сотрудники.Колонки.Добавить("ФизическоеЛицо");
	НеоформленныеСотрудники	= Новый Соответствие;
	ЗарплатаТабличнаяЧасть	= Неопределено;
	Если ТипЗнч(ПараметрыОбъекта) = Тип("Соответствие") И ПараметрыОбъекта.Получить("ЗарплатаТабличнаяЧасть") <> Неопределено Тогда
		ЗарплатаТабличнаяЧасть = ПараметрыОбъекта["ЗарплатаТабличнаяЧасть"];
	КонецЕсли;
	
	Если ЗарплатаТабличнаяЧасть <> Неопределено Тогда
		МассивФизическихЛиц = ЗарплатаТабличнаяЧасть.ВыгрузитьКолонку("ФизическоеЛицо");
		
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация			= Объект.Организация;
		ПараметрыПолученияСотрудников.СписокФизическихЛиц	= МассивФизическихЛиц;
		ПараметрыПолученияСотрудников.КадровыеДанные		= "ОформленПоТрудовомуДоговору";
		Сотрудники				= КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		
		Для Каждого Сотрудник Из Сотрудники Цикл
			ИндексФизическогоЛица = МассивФизическихЛиц.Найти(Сотрудник.ФизическоеЛицо);
			Если ИндексФизическогоЛица <> Неопределено Тогда
				МассивФизическихЛиц.Удалить(ИндексФизическогоЛица);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивФизическихЛиц.Количество() > 0 Тогда
			НеоформленныеСотрудники	= КадровыйУчет.НеоформленныеСотрудникиФизическихЛиц(МассивФизическихЛиц, Объект.Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если Ссылка = Неопределено Тогда
		ТЧДоЗагрузки	= Объект.Зарплата.Выгрузить();
		ТЧДоЗагрузки.Очистить();
	Иначе
		ТЧДоЗагрузки	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Зарплата").Выгрузить();
		ТЧДоЗагрузки.Колонки.Удалить("Ссылка");
	КонецЕсли;
	
	ТЧПослеЗагрузки	= Объект.Зарплата.Выгрузить();
	
	СтрокиДляУдаленияДо = Новый Массив;
	Для Каждого СтрокаТЧДо Из ТЧДоЗагрузки Цикл
		СтруктураДо		= ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЧДо);
		СтруктураДо.Удалить("НомерСтроки");
		Для Каждого СтрокаТЧПосле Из ТЧПослеЗагрузки Цикл
			СтруктураПосле	= ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЧПосле);
			СтруктураПосле.Удалить("НомерСтроки");
			
			Если ОбщегоНазначения.ДанныеСовпадают(СтруктураДо, СтруктураПосле) Тогда
				СтрокиДляУдаленияДо.Добавить(СтрокаТЧДо);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого СтрокаТЧДо Из СтрокиДляУдаленияДо Цикл
		ТЧДоЗагрузки.Удалить(СтрокаТЧДо);
	КонецЦикла;
	
	Для Каждого СтрокаТЧПосле Из ТЧПослеЗагрузки Цикл
		Если ЗарплатаТабличнаяЧасть <> Неопределено И СтрокаТЧПосле.Сотрудник.Пустая() Тогда
			ФизическоеЛицо = ЗарплатаТабличнаяЧасть[СтрокаТЧПосле.НомерСтроки-1].ФизическоеЛицо;
			
			СтрокаСотрудника = Сотрудники.Найти(ФизическоеЛицо, "ФизическоеЛицо");
			Если СтрокаСотрудника = Неопределено Тогда
				Сотрудник = НеоформленныеСотрудники.Получить(ФизическоеЛицо);
			Иначе
				Сотрудник = СтрокаСотрудника.Сотрудник;
			КонецЕсли;
			
			СтрокаТЧПосле.Сотрудник = Сотрудник;
		КонецЕсли;
		
		СтрокаТЧДо = ТЧДоЗагрузки.Найти(СтрокаТЧПосле.Сотрудник, "Сотрудник");
		Если СтрокаТЧДо = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект.Зарплата.Найти(СтрокаТЧДо.НомерСтроки, "НомерСтроки"), СтрокаТЧДо, , "НомерСтроки, Авторасчет, КВыплате");
	КонецЦикла;

КонецПроцедуры

#Область СлужебныеПроцедурыИФункции
// Данный раздел изменять запрещено.

// Отменяет проведение объекта в информационной базе.
//
// Параметры:
//	Объект - Объект для отмены проведения.
//	Тип - Строка - Тип объекта строкой.
//
Процедура ОтменитьПроведениеОбъектаВИБ(Объект, Тип, ЗаписатьОбъект = Ложь)

	ОбщиеПроцедурыФункции.ОтменитьПроведениеОбъектаВИБ(Объект, Тип, ЗаписатьОбъект);
	
КонецПроцедуры

// Устанавливает пометку удаления.
//
// Параметры:
//	Объект - Объект для установки пометки.
//	ПометкаУдаления - Булево - Флаг пометки удаления.
//	ИмяТипаОбъекта - Строка - Тип объекта строкой.
//
Процедура УстановитьПометкуУдаленияУОбъекта(Объект, ПометкаУдаления, ИмяТипаОбъекта)
	
	ОбщиеПроцедурыФункции.УстановитьПометкуУдаленияУОбъекта(Объект, ПометкаУдаления, ИмяТипаОбъекта);
	
КонецПроцедуры

// Служебная. Инициализирует переменные, необходимые для отладки.
//
// Параметры:
//  Владелец - Обработка КонвертацияОбъектовИнформационныхБаз.
//
Процедура ПодключитьОбработкуДляОтладки(Владелец) Экспорт

	Параметры            	 = Владелец.Параметры;
	ОбщиеПроцедурыФункции	 = Владелец;
	Запросы              	 = Владелец.Запросы;
	УзелДляОбмена		 	 = Владелец.УзелДляОбмена;

КонецПроцедуры

#КонецОбласти

#КонецЕсли
