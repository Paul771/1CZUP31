#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//Заполняет объектный реквизит (приемник) объекту XDTO (источник)
//Параметры: 
//	Приемник - Произвольный -  объект, содержащий реквизиты или свойства, которые должны быть заполнены по свойству объекта XDTO 
//	Источник - ОбъектXDTO, СвойствоXDTO - объект XDTO или его свойство, по которому будет заполнен объектный реквизит
//	ИмяРеквизита - Строка - имя объектного реквизита
//	ЗаполнятьПредставление - Булево - признак необходимости заполнения реквизта представления по свойству objectId.presentation
//
Процедура ЗаполнитьОбъектныйРеквизит(Приемник, Источник, ИмяРеквизита, ЗаполнятьПредставление = Ложь) Экспорт
	
	Если Источник <> Неопределено Тогда
		
		Приемник[ИмяРеквизита] = Источник.name;
		Приемник[ИмяРеквизита + "ID"] = Источник.objectId.id;
		Приемник[ИмяРеквизита + "Тип"] = Источник.objectId.type;
		
		// Старые версии сервиса не заполняют представление.
		Если ЗаполнятьПредставление Тогда
			Если Источник.objectId.Свойства().Получить("presentation") <> Неопределено
				И Источник.objectId.Установлено("presentation") Тогда
				Приемник[ИмяРеквизита + "Представление"] = Источник.objectId.presentation;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает значение навигационной ссылки формы на объект Документооброта
//Параметры: 
//	Форма - УправляемаяФорма - форма объекта 1С:Документооборота
//	ОбъектXDTO - ОбъектXDTO, СвойствоXDTO - объект XDTO или его свойство, по которому будет заполнена навигационная ссылка
Процедура УстановитьНавигационнуюСсылку(Форма, ОбъектXDTO) Экспорт
	
	// навигационная ссылка в objectId
	Если Не ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3") Тогда
		Возврат;
	КонецЕсли;
	
	АдресСервера = Константы.АдресВебСервиса1СДокументооборот.Получить();
	Форма.АвтоНавигационнаяСсылка = Ложь;
	Форма.НавигационнаяСсылка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1#%2",
			АдресСервера, ОбъектXDTO.objectID.navigationRef);
			
КонецПроцедуры

//Устанавливает значения реквизитов состояний в форме документа Документооборота
//Параметры: 
//	Форма - УправляемаяФорма - форма документа 1С:Документооборота
//	ОбъектXDTO - ОбъектXDTO - документ, по которому будут заполнены состояния
Процедура УстановитьСостоянияДокумента(Форма, ОбъектXDTO) Экспорт
	
	// независимые состояния документа
	Если Не ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		Возврат
	КонецЕсли;
	
	ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.statusRegistration, "СостояниеРегистрация");
	ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.statusConsideration, "СостояниеРассмотрение");
	ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.statusApproval, "СостояниеСогласование");
	ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.statusConfirmation, "СостояниеУтверждение");
	ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.statusPerformance, "СостояниеИсполнение");
	
	Реквизиты = Новый Структура("Исполнение, Рассмотрение, Регистрация, Согласование, Утверждение");
	Форма.СостояниеСписок.Очистить();
	Для Каждого Реквизит Из Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Если ЗначениеЗаполнено(Форма["Состояние" + ИмяРеквизита + "ID"]) Тогда
			Форма.СостояниеСписок.Добавить(Форма["Состояние" + ИмяРеквизита + "ID"], Форма["Состояние" + ИмяРеквизита]);
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

//Устанавливает заголовок документа в зависимости от типа интегрированного объекта.
//Параметры: 
//	Форма - УправляемаяФорма - форма документа 1С:Документооборота
Процедура УстановитьЗаголовокДокумента(Форма) Экспорт
	
	ПредставлениеТипа = "";
	Если Форма.Тип = "DMInternalDocument" Тогда
		ПредставлениеТипа = НСтр("ru='Внутренний документ'");
	ИначеЕсли Форма.Тип = "DMIncomingDocument" Тогда
		ПредставлениеТипа = НСтр("ru='Входящий документ'");
	ИначеЕсли Форма.Тип = "DMOutgoingDocument" Тогда
		ПредставлениеТипа = НСтр("ru='Исходящий документ'");
	КонецЕсли;
	
	ПредставлениеДокумента = "";
	Если ЗначениеЗаполнено(Форма.ВнешнийОбъект) Тогда
		Если ОбщегоНазначения.ЭтоДокумент(Форма.ВнешнийОбъект.Метаданные()) Тогда
			ПредставлениеДокумента = Форма.Наименование;
		КонецЕсли;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ПредставлениеДокумента) И ЗначениеЗаполнено(Форма.Представление) Тогда
		ПредставлениеДокумента = Форма.Представление;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Форма.ID) Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (создание)'"), ПредставлениеТипа);
	Иначе
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (%2)'"), ПредставлениеДокумента, ПредставлениеТипа);
	КонецЕсли;
		
	Форма.Заголовок = Заголовок;
	
КонецПроцедуры

//Устанавливает свойства элементов хронометража формы
//
Процедура УстановитьСвойстваЭлементовХронометража(
	ВключенХронометраж,
	КомандаПереключитьХронометраж, 
	ЭлементПереключитьХронометраж) Экспорт
	
	Если ВключенХронометраж Тогда // хронометраж включен
		КомандаПереключитьХронометраж.Подсказка = НСтр("ru = 'Закончить хронометраж'");
		ЭлементПереключитьХронометраж.Пометка = Истина;
	Иначе
		КомандаПереключитьХронометраж.Подсказка = НСтр("ru = 'Включить хронометраж'");
		ЭлементПереключитьХронометраж.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//Заполняет параметры хронометража объекта Документооборота
//
Процедура ЗаполнитьПараметрыХронометража(Форма, ОбъектXDTO) Экспорт
	
	// хронометраж 
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMGetChronometrationSettingsResponse") 
		 Или ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMSetChronometrationSettingsResponse") Тогда
			Параметры =  ОбъектXDTO.settings[0];
		Иначе
			Параметры =  ОбъектXDTO.chronometrationSettings;
		КонецЕсли;
		Форма.ВключенХронометраж = Параметры.chronometrationOn;
		Форма.ДатаНачалаХронометража = Параметры.beginDate;
		Форма.ДатаКонцаХронометража = Параметры.endDate;
		УстановитьСвойстваЭлементовХронометража(Форма.ВключенХронометраж, 
			Форма.Команды.ПереключитьХронометраж, Форма.Элементы.ФормаПереключитьХронометраж);
	КонецЕсли;
	
КонецПроцедуры

//Инвертирует значение хронометржа
//
Процедура ПереключитьХронометраж(Форма) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMSetChronometrationSettingsRequest");
	ОбъектID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, Форма.ID, Форма.Тип);
	Запрос.objects.Добавить(ОбъектID);
	
	Результат = Прокси.execute(Запрос);
	
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	ЗаполнитьПараметрыХронометража(Форма, Результат);
	
КонецПроцедуры

//Помещает набор дополнительных реквизитов объекта на форму объекта
//Параметры:
//	Форма - УправляемаяФорма - управляемая форма документа 1С:Документооборота
//	ОбъектXDTO - ОбъектXDTO - объект, из которого заполняются реквизиты формы
Процедура ПоместитьДополнительныеРеквизитыНаФорму(Форма, ОбъектXDTO) Экспорт
	
	ЕстьСвойства = 
		(ОбъектXDTO.Свойства().Получить("additionalProperties") <> Неопределено)
		И (ОбъектXDTO.additionalProperties.Количество() > 0);
	
	// На некоторых формах для свойств выделена отдельная страница.
	Если Форма.Элементы.Найти("СтраницаСвойства") = Неопределено Тогда
		Форма.Элементы.ГруппаСвойства.Видимость = ЕстьСвойства;
	Иначе
		Форма.Элементы.СтраницаСвойства.Видимость = ЕстьСвойства;
	КонецЕсли;
	
	Форма.Свойства.Очистить();
	Если Не ЕстьСвойства Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДопСвойство Из ОбъектXDTO.additionalProperties Цикл
		НоваяСтрока = Форма.Свойства.Добавить();
		
		НоваяСтрока.Свойство = ДопСвойство.name;
		НоваяСтрока.СвойствоТип = ДопСвойство.objectId.type;
		НоваяСтрока.СвойствоID = ДопСвойство.objectId.id;
		
		Если ДопСвойство.Установлено("propertySimpleValue") Тогда
			НоваяСтрока.Значение = ДопСвойство.propertySimpleValue;
		ИначеЕсли ДопСвойство.Установлено("propertyObjectValue") Тогда
			НоваяСтрока.Значение = ДопСвойство.propertyObjectValue.name;
			НоваяСтрока.ЗначениеТип = ДопСвойство.propertyObjectValue.objectId.type;
			НоваяСтрока.ЗначениеID = ДопСвойство.propertyObjectValue.objectId.id;
		Иначе
			НоваяСтрока.Значение = "";
		КонецЕсли;
		
		Для Каждого ОписаниеТипа Из ДопСвойство.PropertyValueTypes Цикл
			ДанныеОТипе = Новый Структура("xdtoClassName, presentation");
			ДанныеОТипе.xdtoClassName = ОписаниеТипа.xdtoClassName;
			ДанныеОТипе.presentation = ОписаниеТипа.presentation;
			НоваяСтрока.СписокДоступныхТипов.Добавить(ДанныеОТипе);
		КонецЦикла;
		
	КонецЦикла;
	
	Форма.Элементы.Свойства.ВысотаВСтрокахТаблицы 
		= ОбъектXDTO.additionalProperties.Количество();
	
КонецПроцедуры

//Получает набор дополнительных реквизитов объекта и помещает его на форму объекта.
//Параметры:
//	Прокси - ИнтернетПрокси - объект для подключения к web-сервисам Документооборота
//	Форма - УправляемаяФорма - форма объекта 1С:Документооборота
Процедура ПолучитьДополнительныеРеквизитыИПоместитьНаФорму(Прокси, Форма) Экспорт
	
	Объект = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, Форма.Тип);
	Объект.name = Форма.Наименование;
	Объект.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
	Объект.objectId.id = Форма.ID;
	Объект.objectId.type = Форма.Тип;
	
	Если Найти(Форма.Тип, "Document") <> 0 Тогда
		Если ЗначениеЗаполнено(Форма.ВидДокумента) Тогда
			Объект.documentType = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, Форма.Тип + "Type");
			Объект.documentType.name = Форма.ВидДокумента;
			Объект.documentType.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
			Объект.documentType.objectId.id = Форма.ВидДокументаID;
			Объект.documentType.objectId.type = Форма.ВидДокументаТип;
		КонецЕсли;
		
	ИначеЕсли Форма.Тип = "DMCorrespondent" Тогда
		Если ЗначениеЗаполнено(Форма.ЮрФизЛицо) Тогда
			Объект.legalPrivatePerson = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMLegalPrivatePerson");
			Объект.legalPrivatePerson.name = Форма.ЮрФизЛицо;
			Объект.legalPrivatePerson.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
			Объект.legalPrivatePerson.objectId.id = Форма.ЮрФизЛицоID;
			Объект.legalPrivatePerson.objectId.type = Форма.ЮрФизЛицоТип;
		КонецЕсли;
		
	КонецЕсли;
		
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectAdditionalPropertiesRequest");
	Запрос.object = Объект;
	
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	ПоместитьДополнительныеРеквизитыНаФорму(Форма, Результат);
	
КонецПроцедуры

// Заполняет дерево связей в форме по объекту XDTO и начинает асинхронное получение файлов.
//
// Параметры:
//   Форма - УправляемаяФорма - заполняемая форма обработки ИнтеграцияС1СДокументооборот.
//   ОбъектXDTO - ОбъектXDTO - объект, из которого заполняются реквизиты формы.
//   ЭлементДляОбновленияЗаголовка - ПолеФормы, ГруппаФормы - элемент, чей заголовок обновляется.
//   ДобавленныйДокумент - Строка - идентификатор документа, файлы которого следует обновить, или
//                       - Неопределено - признак необходимости обновить все файлы.
//
// Возвращаемое значение:
//   Строка - адрес в хранилище, куда будут помещены сведения о файлах.
//
Функция ЗаполнитьДеревоСвязейИНачатьПолучениеФайлов(Форма, ОбъектXDTO, 
	ЭлементДляОбновленияЗаголовка = Неопределено, ДобавленныйДокумент = Неопределено) Экспорт
	
	Если ОбъектXDTO.Свойства().Получить("relations") = Неопределено
		Или Не ОбъектXDTO.Установлено("relations") Тогда
		
		ЭлементыДерева = Форма.ДеревоСвязей.ПолучитьЭлементы();
		ЭлементыДерева.Очистить();
		
		Если ЭлементДляОбновленияЗаголовка <> Неопределено Тогда
			ЭлементДляОбновленияЗаголовка.Заголовок = НСтр("ru = 'Связи'");
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Дерево = Форма.РеквизитФормыВЗначение("ДеревоСвязей"); 
	
	// Сохраним файлы текущих документов.
	КэшФайлов = Новый Соответствие;
	Для Каждого СтрокаТип из Дерево.Строки Цикл
		Для Каждого СтрокаДокумент из СтрокаТип.Строки Цикл
			ФайлыДокумента = Новый Массив;
			Для Каждого СтрокаФайл из СтрокаДокумент.Строки Цикл
				Файл = Новый Структура;
				Файл.Вставить("ID", СтрокаФайл.ID);
				Файл.Вставить("Тип", СтрокаФайл.Тип);
				Файл.Вставить("Заголовок", СтрокаФайл.Заголовок);
				Файл.Вставить("Расширение", СтрокаФайл.Расширение);
				Файл.Вставить("Картинка", СтрокаФайл.Картинка);
				ФайлыДокумента.Добавить(Файл);
			КонецЦикла;
			Если ФайлыДокумента.Количество() > 0 Тогда
				КэшФайлов.Вставить(СтрокаДокумент.ID, ФайлыДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Дерево.Строки.Очистить();
	
	СвязанныеДокументы = Новый Массив;
		
	Для Каждого Связь Из ОбъектXDTO.relations Цикл
		
		// Найдем строку связи по типу или создадим ее.
		НайденнаяСтрока = Дерево.Строки.Найти(Связь.relationType.name, "Заголовок", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда 
			СтрокаТипСвязи = НайденнаяСтрока;
		Иначе
			СтрокаТипСвязи = Дерево.Строки.Добавить();
			СтрокаТипСвязи.Заголовок = Связь.relationType.name;
			СтрокаТипСвязи.ID = Связь.relationType.objectId.id;
			СтрокаТипСвязи.Тип = Связь.relationType.objectId.type;
		КонецЕсли;
		
		// Добавим строку для документа.
		СтрокаДокумент = СтрокаТипСвязи.Строки.Добавить();
		Если ЗначениеЗаполнено(Связь.relatedDocument.regNumber)
			И ЗначениеЗаполнено(Связь.relatedDocument.regDate) Тогда
			СтрокаДокумент.Заголовок = СтроковыеФункцииКлиентСервер.
				ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (№ %2 от %3)'"),
					Связь.relatedDocument.title,
					Связь.relatedDocument.regNumber,
					Связь.relatedDocument.regDate);
		Иначе
			СтрокаДокумент.Заголовок = Связь.relatedDocument.title;
		КонецЕсли;
		СтрокаДокумент.Тип = Связь.relatedDocument.objectId.type;
		СтрокаДокумент.ID = Связь.relatedDocument.objectId.id;
		СтрокаДокумент.РегистрационныйНомер = Связь.relatedDocument.regNumber;
		СтрокаДокумент.ДатаРегистрации = Связь.relatedDocument.regDate;
		
		ФайлыДокумента = КэшФайлов.Получить(СтрокаДокумент.ID);
		Если ФайлыДокумента <> Неопределено Тогда
			Для Каждого Файл из ФайлыДокумента Цикл
				СтрокаФайл = СтрокаДокумент.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаФайл, Файл);
			КонецЦикла;
		КонецЕсли;
		
		// Подготовим параметры для асинхронного получения файлов.
		Если ДобавленныйДокумент = Неопределено
			Или ДобавленныйДокумент = Связь.relatedDocument.objectId.id Тогда
			СвязанныйДокумент = Новый Структура;
			СвязанныйДокумент.Вставить("ID", Связь.relatedDocument.objectId.id);
			СвязанныйДокумент.Вставить("Тип", Связь.relatedDocument.objectId.type);
			СвязанныеДокументы.Добавить(СвязанныйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(Дерево, "ДеревоСвязей");
	
	Если ЭлементДляОбновленияЗаголовка <> Неопределено Тогда
		Если ОбъектXDTO.relations.Количество() = 0 Тогда 
			ТекстЗаголовка = НСтр("ru = 'Связи'");
		Иначе
			ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Связи (%1)'"),
				ОбъектXDTO.relations.Количество());
		КонецЕсли;
		ЭлементДляОбновленияЗаголовка.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
	Если СвязанныеДокументы.Количество() > 0 Тогда
		Возврат ИнтеграцияС1СДокументооборот.ПолучитьФайлыСвязанныхДокументов(
			СвязанныеДокументы);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает описания файлов по списку связанных документов-владельцев.
//
// Параметры:
//   СвязанныеДокументы - Массив - массив структур:
//     ID - Строка - идентификатор связанного документа.
//     Тип - Строка - тип связанного документа.
//
// Возвращаемое значение:
//   Массив структур:
//     ID - Строка - идентификатор связанного документа.
//     Тип - Строка - тип связанного документа.
//     Файлы - Массив структур:
//       ID - Строка - идентификатор файла.
//       Тип - Строка - тип файла (DMFile).
//       Наименование - Строка - имя без расширения.
//       Расширение - Строка - расширение файла.
//
Функция ПолучитьФайлыСвязанныхДокументов(СвязанныеДокументы) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборот.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	Запрос.columnSet.Добавить("files");
	
	Для Каждого СвязанныйДокумент из СвязанныеДокументы Цикл
		ОбъектИд = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, 
			СвязанныйДокумент.ID, СвязанныйДокумент.Тип);
		Запрос.objectIds.Добавить(ОбъектИд);
	КонецЦикла;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Результат = Новый Массив;
	
	Для Каждого ВладелецXDTO Из Ответ.objects Цикл
		
		Владелец = Новый Структура;
		Владелец.Вставить("ID", ВладелецXDTO.objectId.id);
		Владелец.Вставить("Тип", ВладелецXDTO.objectId.type);
		Владелец.Вставить("Файлы", Новый Массив);
		
		Для Каждого ФайлXDTO из ВладелецXDTO.files Цикл
			
			Файл = Новый Структура;
			Файл.Вставить("ID", ФайлXDTO.objectId.id);
			Файл.Вставить("Тип", ФайлXDTO.objectId.type);
			Файл.Вставить("Наименование", ФайлXDTO.name);
			Файл.Вставить("Расширение", ФайлXDTO.extension);
			
			Владелец.Файлы.Добавить(Файл);
			
		КонецЦикла;
		
		Результат.Добавить(Владелец);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет дерево связей автоматически по ссылкам в объекте интегрируемой конфигурации.
//
// Параметры:
//   Форма - УправляемаяФорма - заполняемая форма обработки ИнтеграцияС1СДокументооборот.
//   ОбъектИС - ЛюбаяСсылка - объект, на основании которого заполняется объект ДО.
//   ЭлементДляОбновленияЗаголовка - ПолеФормы, ГруппаФормы - элемент, чей заголовок обновляется.
//
Процедура ЗаполнитьСвязиНовогоДокумента(Форма, ОбъектИС, ЭлементДляОбновленияЗаголовка) Экспорт
	
	ПодходящиеОбъекты = ИнтеграцияС1СДокументооборот.ПолучитьПодходящиеОбъектыДляДобавленияСвязей(ОбъектИС);
	
	Если ПодходящиеОбъекты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = Новый Структура("ID, Тип",
		Форма.ВидДокументаID,
		Форма.ВидДокументаТип);
	
	Дерево = Форма.РеквизитФормыВЗначение("ДеревоСвязей");
	КоличествоСвязей = 0;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Для Каждого ПодходящийОбъект Из ПодходящиеОбъекты Цикл
		
		СвязываемыйДокумент = Новый Структура("Ссылка, Заголовок",
			ПодходящийОбъект,
			Строка(ПодходящийОбъект));
			
		Попытка
			ДанныеОбъектаДО = ИнтеграцияС1СДокументооборотВызовСервера.
				ДанныеОбъектаДОПоВнешнемуОбъекту(ПодходящийОбъект);
		Исключение
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось получить связанный объект Документооборота при автоматическом создании связей: %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			Продолжить;
		КонецПопытки;
			
		Если ДанныеОбъектаДО = Неопределено Тогда
			
			Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(ПодходящийОбъект);
			Если Правила.Количество() <> 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(Правила[0].ТипОбъектаДО) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидСвязываемогоДокумента = Новый Структура("ID, Тип",
				Правила[0].ИдентификаторВидаДокумента,
				Правила[0].ТипВидаДокумента);
			
			СвязываемыйДокумент.Вставить("Правило", Правила[0].Ссылка);
			
		Иначе // получим связи по виду существующего документа
			
			Если Не ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(ДанныеОбъектаДО.type) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидСвязываемогоДокумента = Новый Структура("ID, Тип",
				ДанныеОбъектаДО.documentType.id,
				ДанныеОбъектаДО.documentType.type);
			
			СвязываемыйДокумент.Вставить("ID", ДанныеОбъектаДО.id);
			СвязываемыйДокумент.Вставить("Тип", ДанныеОбъектаДО.type);
			
		КонецЕсли;
		
		Условия = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
		
		УсловиеИз = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
		УсловиеИз.property = "DocumentFrom";
		УсловиеИз.value = ИнтеграцияС1СДокументооборот.СоздатьObjectID(
			Прокси, ВидДокумента.ID, ВидДокумента.Тип);
		Условия.conditions.Добавить(УсловиеИз);
		
		УсловиеВ = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
		УсловиеВ.property = "DocumentTo";
		УсловиеВ.value = ИнтеграцияС1СДокументооборот.СоздатьObjectID(
			Прокси, ВидСвязываемогоДокумента.ID, ВидСвязываемогоДокумента.Тип);
		Условия.conditions.Добавить(УсловиеВ);
		
		УсловиеПредопределенная = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
		УсловиеПредопределенная.property = "Predefined";
		УсловиеПредопределенная.value = Ложь;
		Условия.conditions.Добавить(УсловиеПредопределенная);
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
		Запрос.type = "DMRelationType";
		Запрос.query = Условия;
		
		Результат = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		Если Результат.items.Количество() > 1 Тогда
			Продолжить;
		ИначеЕсли Результат.items.Количество() = 1 Тогда
			ТипСвязиXDTO = Результат.items[0].object;
			ТипСвязи = Новый Структура("ID, Тип, Заголовок",
				ТипСвязиXDTO.objectId.id,
				ТипСвязиXDTO.objectId.type,
				ТипСвязиXDTO.name);
		Иначе // предопределенный
			ТипСвязи = Новый Структура("ID, Тип, Заголовок",
				"",
				"DMRelationType",
				НСтр("ru = 'Содержит ссылку на'"));
		КонецЕсли;
			
		ПодходящиеСтрокиДерева = Дерево.Строки.НайтиСтроки(ТипСвязи);
		Если ПодходящиеСтрокиДерева.Количество() = 0 Тогда
			СтрокаТипа = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТипа, ТипСвязи);
		Иначе
			СтрокаТипа = ПодходящиеСтрокиДерева[0];
		КонецЕсли;
		
		ПодходящиеСтрокиДерева = СтрокаТипа.Строки.НайтиСтроки(СвязываемыйДокумент);
		Если ПодходящиеСтрокиДерева.Количество() = 0 Тогда
			СтрокаДокумента = СтрокаТипа.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, СвязываемыйДокумент);
			СтрокаДокумента.СвязьНовогоДокумента = Истина;
			КоличествоСвязей = КоличествоСвязей + 1;
		КонецЕсли;
		
	КонецЦикла;
			
	Форма.ЗначениеВРеквизитФормы(Дерево, "ДеревоСвязей");
	
	Если КоличествоСвязей = 0 Тогда 
		ТекстЗаголовка = НСтр("ru = 'Связи'");
	Иначе
		ТекстЗаголовка = СтрШаблон(
			НСтр("ru = 'Связи (%1)'"),
			КоличествоСвязей);
	КонецЕсли;
	ЭлементДляОбновленияЗаголовка.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

// Создает в ДО связи нового документа, добавленные автоматически при его создании на основании
// объекта ИС, но еще не записанные.
//
// Параметры:
//   ДеревоСвязей - ДанныеФормыДерево - дерево связей в форме документа.
//   ID - Строка - идентификатор документа-владельца.
//   Тип - Строка - тип документа-владельца.
//   Представление - Строка - представление документа-владельца.
//
Процедура ЗаписатьСвязиНовогоДокумента(ДеревоСвязей, ID, Тип, Представление) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	ИсходныйДокумент = Новый Структура("ID, Тип, Представление",
		ID,
		Тип,
		Представление);
	
	СтрокиТиповСвязей = ДеревоСвязей.ПолучитьЭлементы();
	Для Каждого СтрокаТипаСвязи Из СтрокиТиповСвязей Цикл
		
		Если ЗначениеЗаполнено(СтрокаТипаСвязи.ID) Тогда
			ТипСвязи = Новый Структура("ID, Тип, Представление",
				СтрокаТипаСвязи.ID,
				СтрокаТипаСвязи.Тип,
				СтрокаТипаСвязи.Заголовок);
		Иначе
			ТипСвязи = Неопределено;
		КонецЕсли;
		
		СтрокиДокументов = СтрокаТипаСвязи.ПолучитьЭлементы();
		Для Каждого СтрокаДокумента Из СтрокиДокументов Цикл
			
			Если Не СтрокаДокумента.СвязьНовогоДокумента Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ID) Тогда
				
				СвязываемыйДокумент = Новый Структура("ID, Тип, Представление",
					СтрокаДокумента.ID,
					СтрокаДокумента.Тип,
					СтрокаДокумента.Заголовок);
				
			Иначе
				
				НовыйОбъектДО = ИнтеграцияС1СДокументооборот.СоздатьОбъектДОПоПравилу(Прокси,
					СтрокаДокумента.Ссылка,
					СтрокаДокумента.Правило);
					
				Если ТипЗнч(НовыйОбъектДО) = Тип("ОбъектXDTO") Тогда
						
					СвязываемыйДокумент = Новый Структура("ID, Тип, Представление",
						НовыйОбъектДО.objectId.id,
						НовыйОбъектДО.objectId.type,
						НовыйОбъектДО.name);
					
				Иначе // сообщение об ошибке
						
					ИмяСобытия = НСтр("ru = 'Автосоздание связанного объекта'");
					ЗаписьЖурналаРегистрации(
						ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(ИмяСобытия), 
						УровеньЖурналаРегистрации.Ошибка,,,
						НовыйОбъектДО);
						
					ТекстИсключения = СтрШаблон(НСтр("ru = 'Не удалось создать связанный документ для ""%1"":
						|%2'"),
						СтрокаДокумента.Заголовок,
						НовыйОбъектДО);
					ВызватьИсключение ТекстИсключения;
				
				КонецЕсли;
				
			КонецЕсли;
					
			ИнтеграцияС1СДокументооборотВызовСервера.ДобавитьСвязьДокументов(
				ИсходныйДокумент,
				СвязываемыйДокумент,
				ТипСвязи);
				
			СтрокаДокумента.СвязьНовогоДокумента = Ложь;
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Передает в ДО файлы нового документа.
//
// Параметры:
//   Файлы - ДанныеФормыКоллекция - список файлов в форме документа.
//   ID - Строка - идентификатор документа-владельца.
//   Тип - Строка - тип документа-владельца.
//   Представление - Строка - представление документа-владельца.
//
Процедура ЗаписатьФайлыНовогоДокумента(Файлы, ID, Тип, Представление) Экспорт
	
	// Передадим в ДО печатные формы, котроые могли быть добавлены на стороне ИС до записи документа.
	Для Каждого Файл Из Файлы Цикл
		
		Если ЗначениеЗаполнено(Файл.ID)
			Или Не ЗначениеЗаполнено(Файл.АдресВременногоХранилищаФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСоздания = Новый Структура;
		ПараметрыСоздания.Вставить("Имя", Файл.Наименование);
		ПараметрыСоздания.Вставить("Расширение", Файл.Расширение);
		ПараметрыСоздания.Вставить("Размер", Файл.Размер);
		ПараметрыСоздания.Вставить("АдресВременногоХранилищаФайла", Файл.АдресВременногоХранилищаФайла);
		ПараметрыСоздания.Вставить("ВремяИзменения", Файл.ДатаСоздания);
		ПараметрыСоздания.Вставить("ВремяИзмененияУниверсальное", Файл.ДатаМодификацииУниверсальная);
		ПараметрыСоздания.Вставить("Текст", "");
		
		Файл.ID = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьИзФайлаНаДискеСервер(
			ПараметрыСоздания,
			ID,
			Тип,
			Представление,
			Ложь); // не пытаться обновить файл в ДО.
		
	КонецЦикла;
	
	// Создадим в ДО файлы по их шаблонам, скопированным из шаблона документа и хранящимся в ДО.
	Для Каждого Файл Из Файлы Цикл
		
		Если ЗначениеЗаполнено(Файл.ID)
			Или Не ЗначениеЗаполнено(Файл.ШаблонID) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСоздания = Новый Структура;
		ПараметрыСоздания.Вставить("Имя", Файл.Наименование);
		ПараметрыСоздания.Вставить("Расширение", Файл.Расширение);
		ПараметрыСоздания.Вставить("ШаблонID", Файл.ШаблонID);
		
		Файл.ID = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьФайлИзШаблона(
			ПараметрыСоздания,
			ID,
			Тип,
			Представление);
		
	КонецЦикла;
		
КонецПроцедуры

//Выполняет действия при изменении вида документа
//Параметры:
//	Форма - УправляемаяФорма - форма документа 1С:Документооборота
Процедура ПриИзмененииВидаНаФормеДокумента(Форма) Экспорт 
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	ВидДокументаID = Форма.ВидДокументаID;
	ВидДокументаТип = Форма.ВидДокументаТип;
	
	ИмяФормы = Форма.ИмяФормы;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(ВидДокументаID) И ЗначениеЗаполнено(ВидДокументаТип) Тогда 
		ОбъектИд = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ВидДокументаID, ВидДокументаТип);
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
		Запрос.objectIds.Добавить(ОбъектИд);
		
		Результат = Прокси.execute(Запрос);
		Попытка
			ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
		Исключение
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Вид документа ""%1"" не найден в 1С:Документообороте'"),
				Форма.ВидДокумента);
		КонецПопытки;
	
		documentType = Результат.objects[0];
	Иначе	
		documentType = Неопределено;
	КонецЕсли;
	
	Если ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВходящийДокумент" Тогда 
		
		Элементы.СрокИсполнения.Видимость = (documentType <> Неопределено И documentType.performanceDateEnabled = Истина); 
		Элементы.Сумма.Видимость 		  = (documentType <> Неопределено И documentType.sumEnabled = Истина); 
		Элементы.Валюта.Видимость 		  = (documentType <> Неопределено И documentType.sumEnabled = Истина); 
		
	ИначеЕсли ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящийДокумент" Тогда 
		
		Элементы.СрокИсполнения.Видимость 	  = (documentType <> Неопределено И documentType.PerformanceDateEnabled = Истина); 
		Элементы.НомерПолучателя.Видимость    = (documentType <> Неопределено И documentType.ExternalNumberEnabled = Истина); 
		Элементы.ДатаПолучателя.Видимость 	  = (documentType <> Неопределено И documentType.ExternalNumberEnabled = Истина); 
		Элементы.Сумма.Видимость 		  	  = (documentType <> Неопределено И documentType.SumEnabled = Истина); 
		Элементы.Валюта.Видимость 		  	  = (documentType <> Неопределено И documentType.SumEnabled = Истина); 
		
	ИначеЕсли ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВнутреннийДокумент" Тогда 
		
		Элементы.СрокИсполнения.Видимость = (DocumentType <> Неопределено И DocumentType.performanceDateEnabled = Истина); 
		Элементы.ГруппаКонтрагент.ОтображатьЗаголовок = (DocumentType <> Неопределено И DocumentType.correspondentEnabled = Истина); 
		Элементы.Контрагент.Видимость  = (DocumentType <> Неопределено И DocumentType.correspondentEnabled = Истина); 
		Элементы.КонтактноеЛицо.Видимость = (DocumentType <> Неопределено И DocumentType.correspondentEnabled = Истина); 
		Элементы.Сумма.Видимость 		  = (DocumentType <> Неопределено И DocumentType.sumEnabled = Истина); 
		Элементы.Валюта.Видимость 		  = (DocumentType <> Неопределено И DocumentType.sumEnabled = Истина); 
		Элементы.СрокДействияПредставление.Видимость = (DocumentType <> Неопределено И DocumentType.durationEnabled = Истина); 
		
	КонецЕсли;
	
	ОтображатьПредупреждения = ОтображениеПредупрежденияПриРедактировании.Отображать;
	НеОтображатьПредупреждения = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	
	Форма.АвтоматическаяНумерация = (DocumentType <> Неопределено И DocumentType.automaticNumeration = Истина);
	Если Форма.АвтоматическаяНумерация Тогда 
		Элементы.РегистрационныйНомер.ОтображениеПредупрежденияПриРедактировании = ОтображатьПредупреждения;
		Элементы.ДатаРегистрации.ОтображениеПредупрежденияПриРедактировании = ОтображатьПредупреждения;
		Элементы.Зарегистрировать.Доступность = Истина;
	Иначе
		Элементы.РегистрационныйНомер.ОтображениеПредупрежденияПриРедактировании = НеОтображатьПредупреждения;
		Элементы.ДатаРегистрации.ОтображениеПредупрежденияПриРедактировании = НеОтображатьПредупреждения;
		Элементы.Зарегистрировать.Доступность = Ложь;
	КонецЕсли;
	
	//установка дополнительных реквизитов
	ПолучитьДополнительныеРеквизитыИПоместитьНаФорму(Прокси, Форма);
	
КонецПроцедуры

//Устанавливает видимость группы информации о недоступности функционала версии веб-сервиса.
//Параметры:
//	Форма - УправляемаяФорма - форма объекта или списка 1С:Документооборота
Процедура ОбработатьФормуПриНедоступностиФункционалаВерсииСервиса(Форма) Экспорт
	
	Форма.Элементы.ГруппаФункционалНеПоддерживается.Видимость = Истина;
	Форма.Элементы.ДекорацияФункционалНеПоддерживается.Заголовок = 
		НСтр("ru='Функционал не поддерживается в данной версии 1С:Документооборота.'");
		
	Форма.ТолькоПросмотр = Истина;

КонецПроцедуры

//Заполняет команды печати на форме
//
Процедура ЗаполнитьКомандыПечати(Форма, ВнешнийОбъект, МестоРазмещенияКоманд) Экспорт
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ЗаполнитьКомандыПечати(Форма, ВнешнийОбъект, МестоРазмещенияКоманд);
	
КонецПроцедуры

// Заполняет стандартные реквизиты бизнес-процесса в соответствующей форме обработки.
//
// Параметры:
//   Форма - УправляемаяФорма - форма обработки, соответствующая бизнес-процессу.
//   ОбъектXDTO - ОбъектXDTO типа, наследующего типу DMBusinessProcess, с данными процесса.
//
Процедура ЗаполнитьСтандартнуюШапкуБизнесПроцесса(Форма, ОбъектXDTO) Экспорт
	
	Форма.Стартован = ОбъектXDTO.started;
	Форма.Завершен = ОбъектXDTO.completed;
	Форма.ДатаНачала = ОбъектXDTO.beginDate;
	Форма.ДатаЗавершения = ОбъектXDTO.endDate;
	Форма.Наименование = ОбъектXDTO.name;
	Если ОбъектXDTO.objectID.Свойства().Получить("presentation") <> Неопределено Тогда
		Форма.Заголовок = ОбъектXDTO.objectId.presentation;
	Иначе
		Форма.Заголовок = ОбъектXDTO.name;
	КонецЕсли;
	Если Форма.Элементы.Найти("СрокДата") <> Неопределено Тогда
		Форма.Срок = ОбъектXDTO.dueDate;
	КонецЕсли;
	Если Форма.Элементы.Найти("Описание") <> Неопределено Тогда
		Форма.Описание = ОбъектXDTO.description;
	КонецЕсли;
	Форма.Тип = ОбъектXDTO.objectId.type;
	Если ОбъектXDTO.objectId.Свойства().Получить("presentation") <> неопределено Тогда
		Форма.Представление = ОбъектXDTO.objectId.presentation;
	КонецЕсли;
	
	ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.author, "Автор"); 
	ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.parentTask, "ГлавнаяЗадача");
	ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.state, "Состояние");
	
	Если Форма.Параметры.Свойство("ГлавнаяЗадача") И НЕ ЗначениеЗаполнено(Форма.ГлавнаяЗадачаID) Тогда
		Форма.ГлавнаяЗадача = Форма.Параметры.ГлавнаяЗадача.name;
		Форма.ГлавнаяЗадачаID = Форма.Параметры.ГлавнаяЗадача.id;
		Форма.ГлавнаяЗадачаТип = Форма.Параметры.ГлавнаяЗадача.type;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ГлавнаяЗадачаID) Тогда
		Если Форма.Элементы.Найти("ГлавнаяЗадачаПредставление") <> Неопределено Тогда	
			Форма.Элементы.ГлавнаяЗадачаПредставление.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПредметыВФорме(Форма, ОбъектXDTO);
	
	Если Форма.Элементы.Найти("ГруппаОстановлен") <> Неопределено Тогда
		Если Форма.СостояниеID = "Остановлен" Тогда 
			Форма.Элементы.ГруппаОстановлен.Видимость = Истина; 
		Иначе
			Форма.Элементы.ГруппаОстановлен.Видимость = Ложь; 
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ВажностьПредставление") <> Неопределено 
		ИЛИ Форма.Элементы.Найти("Важность") <> Неопределено Тогда
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.importance, "Важность");
		Форма.Важность = СтрЗаменить(Форма.Важность," важность","");
	КонецЕсли;
	
	Если ОбъектXDTO.started Или ОбъектXDTO.completed Тогда
		Форма.ТолькоПросмотр = Истина;
		Форма.Элементы.ФормаСтартоватьИЗакрыть.Доступность = Ложь;
		Если Форма.Элементы.Найти("ФормаЗаполнитьПоШаблону") <> Неопределено Тогда
			Форма.Элементы.ФормаЗаполнитьПоШаблону.Доступность = Ложь;
		КонецЕсли;
		Если Форма.Элементы.Найти("ИсполнителиГруппаПеремещение") <> Неопределено Тогда
			Форма.Элементы.ИсполнителиГруппаПеремещение.Доступность = Ложь;
		КонецЕсли;
		Если Форма.Элементы.Найти("СрокИсполненияДней") <> Неопределено Тогда
			Форма.Элементы.СрокИсполненияДней.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Форма.Элементы.Найти("СрокИсполненияЧасов") <> Неопределено Тогда
			Форма.Элементы.СрокИсполненияЧасов.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если ОбъектXDTO.completed Тогда
			Форма.Элементы.ФормаЗаписать.Доступность = Ложь;
			Если Форма.Элементы.Найти("Предметы") <> Неопределено Тогда
				Форма.Элементы.Предметы.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектXDTO.Установлено("state")
		И ОбъектXDTO.state.objectId.id = "Прерван" Тогда
		Форма.Элементы.ФормаЗаписать.Доступность = Ложь;
		Если Форма.Элементы.Найти("Предметы") <> Неопределено Тогда
			Форма.Элементы.Предметы.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	// Изменение формы в зависимости от функциональных опций.
	Если Форма.Элементы.Найти("ГлавнаяЗадачаПредставление") <> Неопределено Тогда
		Форма.Элементы.ГлавнаяЗадачаПредставление.Видимость = ОбъектXDTO.parentTaskEnabled;
	КонецЕсли;
	Если Форма.Элементы.Найти("СрокВремя") <> Неопределено Тогда
		Форма.Элементы.СрокВремя.Видимость = ОбъектXDTO.dueTimeEnabled;
	ИначеЕсли Форма.Элементы.Найти("СрокИсполненияЧасов") <> Неопределено Тогда
		Форма.Элементы.СрокИсполненияЧасов.Видимость = ОбъектXDTO.dueTimeEnabled;
		Форма.Элементы.Часов.Видимость = ОбъектXDTO.dueTimeEnabled;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ID) Тогда
		Форма.Заголовок = СтрШаблон(НСтр("ru = '%1 (Создание)'"), Форма.Заголовок);
		Если Форма.Элементы.Найти("ГруппаИнфо") <> Неопределено Тогда
			Форма.Элементы.ГруппаИнфо.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Заполняет предметы бизнес-процесса в соответствующей форме обработки.
//
// Параметры:
//   Форма - УправляемаяФорма - форма обработки, соответствующая бизнес-процессу.
//   ОбъектXDTO - ОбъектXDTO типа, наследующего типу DMBusinessProcess, с данными процесса.
//
Процедура ЗаполнитьПредметыВФорме(Форма, ОбъектXDTO) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ГлавнаяЗадачаID)
		И Не ЗначениеЗаполнено(ОбъектXDTO.objectId.id) Тогда
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		Ответ = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси,
			Форма.ГлавнаяЗадачаТип,
			Форма.ГлавнаяЗадачаId);
		ГлавнаяЗадачаXDTO = Ответ.objects[0];
		Если Форма.ДоступнаМультипредметность Тогда
			ПредметыXDTO = ГлавнаяЗадачаXDTO.targets.items;
		Иначе
			ПредметXDTO = ГлавнаяЗадачаXDTO.target;
		КонецЕсли;
	Иначе // предметы самой задачи
		Если Форма.ДоступнаМультипредметность Тогда
			ПредметыXDTO = ОбъектXDTO.targets.items;
		Иначе
			ПредметXDTO = ОбъектXDTO.target;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ДоступнаМультипредметность Тогда
		
		Форма.Предметы.Очистить();
		
		Для Каждого ПредметXDTO из ПредметыXDTO Цикл
			
			СтрокаПредмета = Форма.Предметы.Добавить();
			СтрокаПредмета.ИмяПредмета = ПредметXDTO.name;
			СтрокаПредмета.Предмет = ПредметXDTO.target.name;
			СтрокаПредмета.ПредметID = ПредметXDTO.target.objectId.Id;
			СтрокаПредмета.ПредметТип = ПредметXDTO.target.objectId.type;
			СтрокаПредмета.РольПредмета = ПредметXDTO.role.objectId.id;
			СтрокаПредмета.Картинка = ИнтеграцияС1СДокументооборотКлиентСервер.
				НомерКартинкиПоРолиПредмета(СтрокаПредмета.РольПредмета);
				
			Если ПредметXDTO.target.Установлено("externalObject") Тогда
				СтрокаПредмета.Ссылка = ИнтеграцияС1СДокументооборот.СсылкаПоВнешнемуОбъекту(
					ПредметXDTO.target.externalObject);
				КонецЕсли;
				
			Если ЗначениеЗаполнено(СтрокаПредмета.Ссылка) Тогда
				СтрокаПредмета.Представление = Строка(СтрокаПредмета.Ссылка);
			Иначе
				Если ЗначениеЗаполнено(СтрокаПредмета.ИмяПредмета) Тогда
					СтрокаПредмета.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"%1 (%2)",
						СтрокаПредмета.Предмет,
						СтрокаПредмета.ИмяПредмета);
				Иначе
					СтрокаПредмета.Представление = СтрокаПредмета.Предмет;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла; // по предметам
			
	Иначе // мультипредметность не поддерживается
		
		ЗаполнитьОбъектныйРеквизит(Форма, ПредметXDTO, "Предмет");
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет контролера бизнес-процесса в соответствующей форме обработки.
//
// Параметры:
//   Форма - УправляемаяФорма - форма обработки, соответствующая бизнес-процессу.
//   ОбъектXDTO - ОбъектXDTO типа, наследующего типу DMBusinessProcess, с данными процесса.
//
Процедура ЗаполнитьКонтролераВФорме(Форма, ОбъектXDTO) Экспорт
	
	Если ОбъектXDTO.controller.Установлено("user") Тогда
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.controller.user, "Контролер");
	ИначеЕсли ОбъектXDTO.controller.Установлено("role") Тогда
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.controller.role, "Контролер");
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.controller.mainAddressingObject, "ОсновнойОбъектАдресацииКонтролера");
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.controller.secondaryAddressingObject, "ДополнительныйОбъектАдресацииКонтролера");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет проверяющего бизнес-процесса в соответствующей форме обработки.
//
// Параметры:
//   Форма - УправляемаяФорма - форма обработки, соответствующая бизнес-процессу.
//   ОбъектXDTO - ОбъектXDTO типа, наследующего типу DMBusinessProcess, с данными процесса.
//
Процедура ЗаполнитьПроверяющегоВФорме(Форма, ОбъектXDTO) Экспорт
	
	Если ОбъектXDTO.verifier.Установлено("user") Тогда
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.verifier.user, "Проверяющий");
	ИначеЕсли ОбъектXDTO.verifier.Установлено("role") Тогда
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.verifier.role, "Проверяющий");
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.verifier.mainAddressingObject, "ОсновнойОбъектАдресацииПроверяющего");
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.verifier.secondaryAddressingObject, "ДополнительныйОбъектАдресацииПроверяющего");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет исполнителя бизнес-процесса в соответствующей форме обработки.
//
// Параметры:
//   Форма - УправляемаяФорма - форма обработки, соответствующая бизнес-процессу.
//   ОбъектXDTO - ОбъектXDTO типа, наследующего типу DMBusinessProcess, с данными процесса.
//
Процедура ЗаполнитьИсполнителяВФорме(Приемник, ОбъектXDTO) Экспорт
	
	Если ОбъектXDTO.Свойства().Получить("performer") = Неопределено Тогда
		ИсполнительXDTO = ОбъектXDTO;
	Иначе
		ИсполнительXDTO = ОбъектXDTO.performer;
	КонецЕсли;
		
	Если ИсполнительXDTO.Установлено("user") Тогда
		ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.user, "Исполнитель");
	ИначеЕсли ИсполнительXDTO.Установлено("role") Тогда
		ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.role, "Исполнитель");
		ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.mainAddressingObject, "ОсновнойОбъектАдресации");
		ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.secondaryAddressingObject, "ДополнительныйОбъектАдресации");
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность команд, меняющих состояние процесса, в его форме.
//
// Параметры:
//   Форма - УправляемаяФорма - форма обработки, соответствующая бизнес-процессу.
//   ОбъектXDTO - ОбъектXDTO типа, наследующего типу DMBusinessProcess, с данными процесса.
//
Процедура УстановитьВидимостьКомандИзмененияСостоянияПроцесса(Форма, ОбъектXDTO) Экспорт
	
	Если Не ОбъектXDTO.Установлено("state") Тогда
		Форма.Элементы.ФормаОстановитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрерватьПроцесс.Видимость = Ложь;
	ИначеЕсли ОбъектXDTO.Установлено("completed")
		И ОбъектXDTO.completed Тогда 
		Форма.Элементы.ФормаОстановитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрерватьПроцесс.Видимость = Ложь;
	ИначеЕсли Не ОбъектXDTO.Установлено("started")
		ИЛИ Не ОбъектXDTO.started Тогда 
		Форма.Элементы.ФормаОстановитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрерватьПроцесс.Видимость = Ложь;
	ИначеЕсли ОбъектXDTO.state.objectId.id = "Активен" Тогда
		Форма.Элементы.ФормаОстановитьПроцесс.Видимость = Истина;
		Форма.Элементы.ФормаПродолжитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрерватьПроцесс.Видимость = Истина;
	ИначеЕсли ОбъектXDTO.state.objectId.id = "Остановлен" Тогда
		Форма.Элементы.ФормаОстановитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьПроцесс.Видимость = Истина;
		Форма.Элементы.ФормаПрерватьПроцесс.Видимость = Истина;
	ИначеЕсли ОбъектXDTO.state.objectId.id = "Прерван" Тогда
		Форма.Элементы.ФормаОстановитьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрерватьПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьПроцесс.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Заполняет объект XDTO (приемник) по реквизиту (источник)
//Параметры:
//	Прокси - ИнтернетПрокси - объект для подключения к web-сервисам Документооборота
//	Источник - УправляемаяФорма, Структура - содержит реквизиты или свойства, по которым заполняется объект XDTO
//	ИмяРеквизита - Строка - имя объектного реквизита источника
//	Приемник - ОбъектXDTO - содержит заполняемое свойство
//	ТипОбъектаXDTO - Строка - тип XDTO заполняемого свойства
//	ЗаполнятьВсегда - Булево - признак заполнения, даже если объектный реквизит не заполнен
Процедура ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Источник, ИмяРеквизита, Приемник, ТипОбъектаXDTO, ЗаполнятьВсегда = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Источник[ИмяРеквизита])
		Или ЗначениеЗаполнено(Источник[ИмяРеквизита + "ID"])
		Или ЗаполнятьВсегда Тогда
		Приемник = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, ТипОбъектаXDTO);
		Приемник.name = Источник[ИмяРеквизита];
		Приемник.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		Приемник.objectId.id = Источник[ИмяРеквизита + "ID"];
		Приемник.objectId.type = Источник[ИмяРеквизита + "Тип"];
	КонецЕсли;
	
КонецПроцедуры

//Заполняет свойство XDTO (приемник) типа DMBusinessProcessTaskExecutor по данным формы (источник).
//Параметры:
//	Прокси - ИнтернетПрокси - объект для подключения к web-сервисам Документооборота
//	ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMBusinessProcessTaskExecutor, свойство которого нужно заполнить
//	Форма - УправляемаяФорма, Структура - содержит реквизиты - источники заполнения
//	ИмяРеквизита - Строка - имя реквизита исполнителя или роли на форме
//	ИмяРеквизитаАдресации - Строка - имя реквизита данных адресации на форме 
Процедура СоздатьУчастникаБизнесПроцесса(Прокси, ОбъектXDTO, Форма, ИмяРеквизита, ИмяРеквизитаАдресации) Экспорт
	
	Если ЗначениеЗаполнено(Форма[ИмяРеквизита]) Тогда 
		ОбъектXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBusinessProcessTaskExecutor");
		Если Форма[ИмяРеквизита + "Тип"] = "DMUser" Тогда
			ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, ИмяРеквизита, ОбъектXDTO.user, "DMUser")
		Иначе
			ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, ИмяРеквизита, ОбъектXDTO.role, "DMBusinessProcessExecutorRole");
			
			ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, "Основной" + ИмяРеквизитаАдресации,
				ОбъектXDTO.mainAddressingObject, "DMMainAddressingObject");
			
			ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, "Дополнительный" + ИмяРеквизитаАдресации,
				ОбъектXDTO.secondaryAddressingObject, "DMSecondaryAddressingObject")
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Создает объект типа DMBusinessProcess[ИмяПроцесса], и заполняет общие свойства по данным формы.
//Параметры:
//	Прокси - ИнтернетПрокси - объект для подключения к web-сервисам Документооборота
//	Тип - Строка - тип объекта XDTO бизнес-процесса
//	Форма - УправляемаяФорма - содерит реквизиты - источники заполнения
//	Исключения - Строка - имена исключаемых из заполнения реквизитов формы разделенных запятой
Функция ПодготовитьШапкуБизнесПроцесса(Прокси, Тип, Форма, Исключения = "") Экспорт
	
	Объект = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, Тип);
	
	Объект.name = Форма.Наименование;
	Объект.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID"); 
	Объект.objectId.id = Форма.ID;
	Объект.objectId.type = Тип;
	
	//Общая шапка бизнес-процессов
	ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, "Автор", Объект.author, "DMUser");
	ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, "Состояние", Объект.state, "DMBusinessProcessState");
	
	Если Форма.ДоступнаМультипредметность Тогда
		ЗаполнитьПроцессПредметамиИзФормы(Прокси, Форма.Предметы, Объект);
	Иначе
		ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, "Предмет", Объект.target, "DMObject");
	КонецЕсли;
	
	Если Найти(Исключения, "Важность") = 0 Тогда
		ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, "Важность", Объект.importance, "DMBusinessProcessImportance");
	КонецЕсли;
	
	Если Найти(Исключения, "Шаблон") = 0 Тогда
		ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, "Шаблон", Объект.businessProcessTemplate, Тип + "Template");
	КонецЕсли;
	
	Объект.beginDate = Форма.ДатаНачала;
	
	Если Найти(Исключения,"Стартован") = 0 Тогда
		Объект.started = Форма.Стартован;
	КонецЕсли;
	Если Найти(Исключения,"Завершен") = 0 Тогда
		Объект.completed = Форма.Завершен;
	КонецЕсли;
	Если Найти(Исключения,"Описание") = 0 Тогда
		Объект.description = Форма.Описание;
	КонецЕсли;
	Если Найти(Исключения,"Срок") = 0 Тогда
		Объект.dueDate = Форма.Срок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ГлавнаяЗадачаID) Тогда
		Ответ = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси, Форма.ГлавнаяЗадачаТип, Форма.ГлавнаяЗадачаID);
		ГлавнаяЗадачаПриемник = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMBusinessProcessTask");
		ИнтеграцияС1СДокументооборот.ЗаполнитьЗначенияСвойствXDTO(Прокси,ГлавнаяЗадачаПриемник,Ответ.Objects[0]);
		Объект.parentTask = ГлавнаяЗадачаПриемник;
	КонецЕсли;

	Возврат Объект;
	
КонецФункции

// Заполняет объект XDTO бизнес-процесса предметами из таблицы формы.
//
// Параметры:
//   Прокси - WSПрокси - прокси веб-сервиса ДО.
//   Предметы - ДанныеФормыКоллекция - таблица предметов.
//   Процесс - ОбъектXDTO типа DMBusinessProcess<...> - заполняемый процесс.
//
Процедура ЗаполнитьПроцессПредметамиИзФормы(Прокси, Предметы, Процесс)
	
	targetCollection = ИнтеграцияС1СДокументооборот.СоздатьОбъект(
		Прокси, "DMBusinessProcessTargetCollection");
		
	Для Каждого СтрокаПредмета из Предметы Цикл
			
		Если Не Процесс.Установлено("target") Тогда
			Процесс.target = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, СтрокаПредмета.ПредметТип);
			Процесс.target.name = СтрокаПредмета.Предмет;
			Процесс.target.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
			Процесс.target.objectId.id = СтрокаПредмета.ПредметID;
			Процесс.target.objectId.type = СтрокаПредмета.ПредметТип;
		КонецЕсли;
		
		target = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBusinessProcessTarget");
		target.name = СтрокаПредмета.ИмяПредмета;
		
		target.role = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBusinessProcessTargetRole");
		target.role.name = СтрокаПредмета.РольПредмета;
		target.role.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		target.role.objectId.id = СтрокаПредмета.РольПредмета;
		target.role.objectId.type = "DMBusinessProcessTargetRole";
		
		target.target = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, СтрокаПредмета.ПредметТип);
		target.target.name = СтрокаПредмета.Предмет;
		target.target.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		target.target.objectId.id = СтрокаПредмета.ПредметID;
		target.target.objectId.type = СтрокаПредмета.ПредметТип;
		
		targetCollection.items.Добавить(target);
		
	КонецЦикла;
	
	Процесс.targets = targetCollection;
	
КонецПроцедуры

// Помещает значения дополнительных свойств в объект XDTO из формы объекта.
//
// Параметры:
//   Прокси - WSПрокси - прокси веб-сервиса 1С:Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект XDTO.
//   Форма - УправляемаяФорма, Структура - управляемая форма или структура реквизитов документа 1С:Документооборота.
//
Процедура СформироватьДополнительныеСвойства(Прокси, ОбъектXDTO, Форма) Экспорт
	
	Для Каждого ДопСвойство Из Форма.Свойства Цикл

		ДополнительноеСвойство = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAdditionalProperty");
		ДополнительноеСвойство.name = ДопСвойство.Свойство;
		
		ДополнительноеСвойство.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(
			Прокси, ДопСвойство.СвойствоID, ДопСвойство.СвойствоТип);
		
		Если ЗначениеЗаполнено(ДопСвойство.ЗначениеID) Тогда //значение объектного типа
			
			ДоступныеТипы = ДопСвойство.СписокДоступныхТипов;
			Если ДоступныеТипы.Количество() > 1 Тогда 
				ДополнительноеСвойство.propertyObjectValue = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObject");
				ДополнительноеСвойство.propertyObjectValue.name = ДопСвойство.Значение;
				ДополнительноеСвойство.propertyObjectValue.objectId = 
					ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ДопСвойство.ЗначениеID, ДопСвойство.ЗначениеТип);
					
			Иначе
				ТипСвойства = ДоступныеТипы[0].Значение.xdtoClassName;
				ЗначениеСвойства = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, ТипСвойства);
				
				// заполнить из потребителя
				РеквизитТип = ДопСвойство.ЗначениеТип;
				РеквизитID = ДопСвойство.ЗначениеID;
				Если Метаданные.НайтиПоПолномуИмени(РеквизитТип) <> Неопределено Тогда 
					
					СсылкаНаПотребителя = ИнтеграцияС1СДокументооборот.СсылкаИзUUID(РеквизитТип, РеквизитID);
			 		ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(Прокси, ЗначениеСвойства, СсылкаНаПотребителя);
			
				ИначеЕсли РеквизитТип = "Строка" Тогда 
			
					ЗначениеСвойства.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", "");
					ЗначениеСвойства.name = ДопСвойство.Значение;

					ВнешнийИД = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
					ВнешнийИД.id = ДопСвойство.ЗначениеID;
					ВнешнийИД.type = РеквизитТип;
					ВнешнийИД.name = ДопСвойство.Значение;
					
					ЗначениеСвойства.externalObject = ВнешнийИД;
			
				Иначе
			
					ЗначениеСвойства.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(
						Прокси, ДопСвойство.ЗначениеID, ДопСвойство.ЗначениеТип); 
					ЗначениеСвойства.name = ДопСвойство.Значение;
			
				КонецЕсли;
				
				ДополнительноеСвойство.propertyObjectValue = ЗначениеСвойства;
				
			КонецЕсли;
				
		ИначеЕсли ЗначениеЗаполнено(ДопСвойство.Значение) Тогда
			
			ДополнительноеСвойство.propertySimpleValue = ДопСвойство.Значение;
			
		КонецЕсли;
		
		ОбъектXDTO.additionalProperties.Добавить(ДополнительноеСвойство);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет реквизит поиска в список условий XDTO, параллельно формируя представление условия
//
// Параметры:
//   Прокси - WSПрокси - прокси веб-сервиса Документооборота
//   ИмяРеквизита - Строка - имя реквизита поиска
//   ОписаниеУсловий - Структура - описание условий поиска
//   СписокУсловий - ОбъектXDTO типа DMObjectListQuery - пополняемый список условий
//   Представление - Строка - пополняемое представление условия
//
Процедура ДобавитьРеквизитВСписокУсловий(Прокси, ИмяРеквизита, ОписаниеУсловия, СписокУсловий, Представление)
	
	Если Представление = "" Тогда
		Представление = Представление 
			+ ОписаниеУсловия.Представление;
	Иначе
		Представление = Представление 
			+ "; " + НРег(ОписаниеУсловия.Представление);
	КонецЕсли;
	Если ОписаниеУсловия.Свойство("ПредставлениеУсловия") 
		и ЗначениеЗаполнено(ОписаниеУсловия.ПредставлениеУсловия) Тогда
		Представление = Представление
			+ ": " + ОписаниеУсловия.ПредставлениеУсловия;
	Иначе
		Представление = Представление
			+ ": " + ?(ТипЗнч(ОписаниеУсловия.Значение) = Тип("Дата"),
				Формат(ОписаниеУсловия.Значение, "ДЛФ=D"),
				ОписаниеУсловия.Значение);
	КонецЕсли;	
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = ИмяРеквизита;
	Если ОписаниеУсловия.ОператорСравнения = "<=" и ТипЗнч(ОписаниеУсловия.Значение) = Тип("Дата") Тогда
		Условие.value = КонецДня(ОписаниеУсловия.Значение);
	Иначе
		Если ОписаниеУсловия.Свойство("ЗначениеID") и ЗначениеЗаполнено(ОписаниеУсловия.ЗначениеID) Тогда
			ЗначениеРеквизита = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси,
				ОписаниеУсловия.ЗначениеID, ОписаниеУсловия.ЗначениеТип);
			Условие.value = ЗначениеРеквизита;
		Иначе // примитивный тип
			Условие.value = ОписаниеУсловия.Значение;
		КонецЕсли;
	КонецЕсли;
	Если ОписаниеУсловия.ОператорСравнения = "=" и ТипЗнч(ОписаниеУсловия.Значение) = Тип("Дата") Тогда
		Условие.comparisonOperator = ">=";
	Иначе
		Условие.comparisonOperator = ОписаниеУсловия.ОператорСравнения;
	КонецЕсли;
	СписокУсловий.conditions.Добавить(Условие);
	Если ОписаниеУсловия.Свойство("ОператорСравнения2") 
		и ЗначениеЗаполнено(ОписаниеУсловия.ОператорСравнения2) Тогда
		Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = ИмяРеквизита;
		Если ОписаниеУсловия.ОператорСравнения2 = "<=" и ТипЗнч(ОписаниеУсловия.Значение2) = Тип("Дата") Тогда
			Условие.value = КонецДня(ОписаниеУсловия.Значение2);
		Иначе
			Условие.value = ОписаниеУсловия.Значение2;
		КонецЕсли;
		Условие.comparisonOperator = ОписаниеУсловия.ОператорСравнения2;
		СписокУсловий.conditions.Добавить(Условие);
	ИначеЕсли ОписаниеУсловия.ОператорСравнения = "=" 
		и ТипЗнч(ОписаниеУсловия.Значение) = Тип("Дата")
		и ИмяРеквизита <> "anyDate" Тогда
		Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = ИмяРеквизита;
		Условие.value = КонецДня(ОписаниеУсловия.Значение);
		Условие.comparisonOperator = "<=";
		СписокУсловий.conditions.Добавить(Условие);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск объектов ДО по реквизитам, сохраняя результат во временное хранилище
//
// Параметры:
//   ТипОбъекта - Строка - тип объекта, поиск по которому требуется выполнить
//   РеквизитыПоиска - Структура - описание реквизитов поиска
//   АдресВоВременномХранилище - Строка - параметр, в который помещается адрес результатов поиска
//   КоличествоРезультатов - Число - количество результатов поиска
//   ПредельноеКоличествоРезультатов - Число - предельное количество выбираемых объектов, если оно превышено
//
Процедура ВыполнитьПоискПоРеквизитам(ТипОбъекта, РеквизитыПоиска, АдресВоВременномХранилище, 
		КоличествоРезультатов, ПредельноеКоличествоРезультатов) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	СписокУсловий = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
	ПредельноеКоличествоРезультатов = ИнтеграцияС1СДокументооборотПереопределяемый.
		ПредельноеКоличествоВыбираемыхОбъектов(ТипОбъекта);
	СписокУсловий.limit = ПредельноеКоличествоРезультатов;
	
	НаборКолонок = Новый Массив;
	Если ТипОбъекта = "DMIncomingDocument" 
		Или ТипОбъекта = "DMInternalDocument" 
		Или ТипОбъекта = "DMOutgoingDocument" Тогда
		НаборКолонок.Добавить("documentType");
		НаборКолонок.Добавить("regNumber");
		НаборКолонок.Добавить("regDate");
		НаборКолонок.Добавить("sum");
		НаборКолонок.Добавить("organization");
		НаборКолонок.Добавить("correspondent");
		Если ТипОбъекта = "DMInternalDocument" Тогда
			НаборКолонок.Добавить("folder");
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "DMCorrespondent" Тогда
		НаборКолонок.Добавить("inn");
		НаборКолонок.Добавить("kpp");
		
	КонецЕсли;
	
	Представление = "";
	Для Каждого РеквизитПоиска из РеквизитыПоиска Цикл
		ИмяРеквизита = РеквизитПоиска.Ключ;
		ОписаниеУсловия = РеквизитПоиска.Значение;
		ДобавитьРеквизитВСписокУсловий(Прокси, ИмяРеквизита, ОписаниеУсловия, СписокУсловий, 
			Представление);
		// реквизиты с отбором на равенство неинформативны
		Если ОписаниеУсловия.ОператорСравнения = "=" Тогда
			ПозицияВМассиве = НаборКолонок.Найти(ИмяРеквизита);
			Если ПозицияВМассиве <> Неопределено Тогда
				НаборКолонок.Удалить(ПозицияВМассиве);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// добавим оставшиеся колонки в требование выборки
	Для Каждого ИмяРеквизита из НаборКолонок Цикл
		СписокУсловий.columnSet.Добавить(ИмяРеквизита);
	КонецЦикла;
	
	Если Представление = "" Тогда
		Представление = НСтр("ru = 'Условия не заданы.'");
	Иначе
		Представление = Представление + ".";
	КонецЕсли;
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
	Запрос.type = ТипОбъекта;
	Запрос.query = СписокУсловий;
	
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат); // возможно исключение
	
	НайденныеОбъекты = Новый Массив;
	Для Каждого ОбъектXDTO из Результат.items Цикл
		НайденныйОбъект = Новый Структура;
		НайденныеОбъекты.Добавить(НайденныйОбъект);
		НайденныйОбъект.Вставить("name", ОбъектXDTO.object.name);
		НайденныйОбъект.Вставить("ID", ОбъектXDTO.object.objectId.id);
		Для Каждого ОписаниеКолонки из НаборКолонок Цикл
			ИмяРеквизита = ОписаниеКолонки;
			ЗначениеСвойства = ОбъектXDTO.object.Получить(ИмяРеквизита);
			Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда // ссылочный тип ДО
				НайденныйОбъект.Вставить(ИмяРеквизита, ЗначениеСвойства.name);
				НайденныйОбъект.Вставить(ИмяРеквизита + "ID", ЗначениеСвойства.objectId.id);
			Иначе // примитивный тип
				НайденныйОбъект.Вставить(ИмяРеквизита, ЗначениеСвойства);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// ранние версии ДО не поддерживают tooManyObjects
	Если ?(Результат.Установлено("tooManyObjects"), Результат.tooManyObjects, Ложь) Тогда
		Представление = Представление
			+ " " + НСтр("ru = 'Перетащите сюда любой реквизит, чтобы уточнить условия.'");
		;
	Иначе
		ПредельноеКоличествоРезультатов = 0;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("НайденныеОбъекты", НайденныеОбъекты);
	Результат.Вставить("НаборКолонок", НаборКолонок);
	Результат.Вставить("ПредставлениеУсловийПоиска", Представление);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
	
	КоличествоРезультатов = НайденныеОбъекты.Количество();
	
КонецПроцедуры

// Стандартный обработчик печати для подсистемы УправлениеПечатью БСП.
//
// Параметры:
//  (входные)
//    МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - дополнительные настройки печати;
//  (выходные)
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы
//   ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Для Каждого ПечатнаяФорма из КоллекцияПечатныхФорм Цикл 
		Если ПечатнаяФорма.ИмяМакета = "ЛистСогласования" Тогда
			ЛистСогласования = ПодготовитьЛистСогласования(МассивОбъектов); // возможно исключение
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				ПечатнаяФорма.ИмяМакета,
				ПечатнаяФорма.СинонимМакета,
				ЛистСогласования);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает в виде табличного документа печатную форму листа согласования по переданному предмету.
//
// Параметры:
//   ПредметыСогласования - ЛюбаяСсылка или Массив - согласуемые объекты ИС.
//
// Возвращаемое значение:
//   ТабличныйДокумент - печатная форма листа (листов) согласования
//
Функция ПодготовитьЛистСогласования(ПредметыСогласования)
	
	// Без поддержки листа согласования со стороны веб-сервиса этой команды не должно быть в интерфейсе.
	// В случае неожиданной смены версии на стороне сервиса выдадим, однако, исключение.
	Если Не ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.4.8.1") Тогда
		ВызватьИсключение НСтр("ru = 'Для вывода листа согласования нужен 1С:Документооборот версии не ниже 1.4.8.1'");
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	Результат.Защита = Истина;
	
	Макет = Обработки.ИнтеграцияС1СДокументооборот.ПолучитьМакет("ЛистСогласования");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьИсполнителиШапка = Макет.ПолучитьОбласть("ИсполнителиШапка");
	ОбластьИсполнители = Макет.ПолучитьОбласть("Исполнители");
	ОбластьСогласованиеНеЗапускалось = Макет.ПолучитьОбласть("СогласованиеНеЗапускалось");
	
	НуженРазделительСтраниц = Ложь;
	
	Если ТипЗнч(ПредметыСогласования) = Тип("Массив") Тогда
		МассивПредметов = ПредметыСогласования;
	Иначе // единственная ссылка
		МассивПредметов = Новый Массив;
		МассивПредметов.Добавить(ПредметыСогласования);
	КонецЕсли;
	
	Для Каждого ПредметСогласования из МассивПредметов Цикл
		
		Если НуженРазделительСтраниц Тогда
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Результат.Вывести(ОбластьЗаголовок);
		ОбластьШапка.Параметры.Предмет = Строка(ПредметСогласования);
		Результат.Вывести(ОбластьШапка);
		
		// Проверим существование связаного объекта.
		ПредметВДО = ИнтеграцияС1СДокументооборотВызовСервера.
			ДанныеОбъектаДОПоВнешнемуОбъекту(ПредметСогласования);
		Если ПредметВДО = Неопределено Тогда // согласование не запускалось
			Результат.Вывести(ОбластьСогласованиеНеЗапускалось);
			
		Иначе
			Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
			Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetApprovalSheetRequest");
			Запрос.object = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, ПредметВДО.type);
			Запрос.object.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, 
				ПредметВДО.id, ПредметВДО.type);
			Запрос.object.name = ПредметВДО.name;
			Ответ = Прокси.execute(Запрос);
			ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
			Если Ответ.items.Количество() = 0 Тогда
				Результат.Вывести(ОбластьСогласованиеНеЗапускалось);
			Иначе
				Результат.Вывести(ОбластьИсполнителиШапка);
				Для Каждого Пункт из Ответ.items Цикл
					ОбластьИсполнители.Параметры.Должность = Пункт.position;
					ОбластьИсполнители.Параметры.Исполнитель = Пункт.name;
					ОбластьИсполнители.Параметры.РезультатСогласования = Пункт.result;
					ОбластьИсполнители.Параметры.ДатаИсполнения = Пункт.date;
					ОбластьИсполнители.Параметры.РезультатВыполнения = Пункт.comment;
					Результат.Вывести(ОбластьИсполнители);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		НуженРазделительСтраниц = Истина;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли