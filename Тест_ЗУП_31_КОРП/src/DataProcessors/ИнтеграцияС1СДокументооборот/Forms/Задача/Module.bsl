
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Файлы. Доступность отдельных команд настраивается при активизации файла в дереве предметов.
	ДоступенЗахватФайлов = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1");
	// Мультипредметность.
	ДоступнаМультипредметность = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.0.3.1");
	Элементы.ДобавитьПредмет.Видимость = ДоступнаМультипредметность;
	Элементы.ДобавитьПредметИзДекорации.Видимость = ДоступнаМультипредметность;
	Элементы.УдалитьПредмет.Видимость = ДоступнаМультипредметность;
	// Почта.
	Если Не ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.8.1.CORP") Тогда
		Элементы.ФормаСоздатьПисьмо.Видимость = Ложь;
		Элементы.ФормаПринятьКИсполнению.Видимость = Ложь;
	КонецЕсли;
	// Решение вопросов выполнения задач.
	Если Не ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		Элементы.ЗадатьВопросАвтору.Видимость = Ложь;
	КонецЕсли;
	// Хронометраж.
	Если Не ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		Элементы.ФормаУказатьТрудозатраты.Видимость = Ложь;
		Элементы.ФормаПереключитьХронометраж.Видимость = Ложь;
	КонецЕсли;
	
	КаталогДляСохраненияДанных = ИнтеграцияС1СДокументооборотВызовСервера.ЛокальныйКаталогФайлов();
	ИмяПользователя = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя;
	
	НастройкиДокументооборота = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьНастройки();
	ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи = 
		НастройкиДокументооборота.ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи;
	ФактическийИсполнительЗадач = НастройкиДокументооборота.ФактическийИсполнительЗадач;
	Если ФактическийИсполнительЗадач <> "taskPerformer" Тогда
		ТекущийПользовательДО = ИнтеграцияС1СДокументооборотПовтИсп.ТекущийПользовательДокументооборота();
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(
			ЭтаФорма, ТекущийПользовательДО, "ТекущийПользователь");
	КонецЕсли;
		
	ЗаполнитьФормуЗадачи(Параметры);
	УстановитьПризнакЗадачаПросрочена();
	УстановитьОформлениеЗадач(ЭтаФорма.УсловноеОформление);
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ДополнительнаяОбработкаФормыЗадачи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбработатьФормуПоНаличиюПредметов();
	УстановитьДоступностьКомандДереваПриложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма);
		ТекстПредупреждения = "";
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы,,ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметры, Источник)
	
	Если ИмяСобытия = "Запись_ДокументооборотДокумент"
		Или ИмяСобытия = "Запись_ДокументооборотФайл" Тогда
		Если ТипЗнч(Параметры) = Тип("Структура") 
			И Параметры.Свойство("id") 
			И Параметры.Свойство("type")
			И Параметры.Свойство("name") Тогда
			ОбработкаОповещенияЗаписьПредмета(Параметры);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ДокументооборотТрудозатраты" И Источник = ID Тогда
		ВключенХронометраж = Ложь;
		ДатаНачалаХронометража = '00010101';
		УстановитьСвойстваЭлементовХронометражаСервер();
		
	ИначеЕсли ИмяСобытия = "Документооборот_ДобавлениеСвязи" Тогда
		ЭлементыДерева = ДеревоПриложений.ПолучитьЭлементы();
		Для каждого ЭлементДерева из ЭлементыДерева Цикл
			Если ЭлементДерева.ПредметID = Параметры.ID Тогда
				ЭлементДерева.Ссылка = Параметры.Объект;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "Документооборот_УдалениеСвязи" Тогда
		ЭлементыДерева = ДеревоПриложений.ПолучитьЭлементы();
		Для каждого ЭлементДерева из ЭлементыДерева Цикл
			Если ЭлементДерева.ПредметID = Параметры.ID Тогда
				ЭлементыДерева.Удалить(ЭлементДерева);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаИсполненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИсполненияВремяПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РассмотрениеРезультатВыполненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполненияОбработкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесПроцессПредметаРассмотренияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
		БизнесПроцессПредметаРассмотренияТип, БизнесПроцессПредметаРассмотренияID, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметРассмотренияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("id", ПредметРассмотренияID);
	ПараметрыФормы.Вставить("type", ПредметРассмотренияТип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.Задача", ПараметрыФормы, ЭтаФорма, ПредметРассмотренияID);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ИсполнителиКомментарийПроверяющего" 
		ИЛИ Поле.Имя = "ИсполнителиОтправленоНаДоработку" Тогда
		Возврат;
	Иначе
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Исполнители[ВыбраннаяСтрока].ЗадачаID) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("id", Исполнители[ВыбраннаяСтрока].ЗадачаID);
			ПараметрыФормы.Вставить("type", Исполнители[ВыбраннаяСтрока].ЗадачаТип);
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.Задача", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОтправленоНаДоработкуПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиКомментарийПроверяющегоПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПриложений

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Строка = Элемент.ТекущиеДанные;
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Ссылка) Тогда // объект ИС
		ПараметрыФормы = Новый Структура("Ключ", Строка.Ссылка);
		ПоказатьЗначение(, Строка.Ссылка);
		
	ИначеЕсли Строка.ПредметТип = "DMFile" Тогда // файл
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьФайл(Строка.ПредметID, Строка.Предмет,
			Строка.Расширение, УникальныйИдентификатор);
			
	Иначе // объект ДО
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(Строка.ПредметТип,Строка.ПредметID, Строка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандДереваПриложений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвойства

&НаКлиенте
Процедура СвойстваЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеДополнительногоРеквизита(
		ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Свойства.ТекущиеДанные;
	Если ТекущиеДанные.СписокДоступныхТипов.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ТекущиеДанные.Значение) = Тип("Строка") Тогда
		ТипXDTO =ТекущиеДанные.СписокДоступныхТипов[0].Значение.xdtoClassName;
		Если ТипXDTO = "integer" Тогда
			ТекущиеДанные.Значение = 0;
		ИначеЕсли ТипXDTO = "boolean" Тогда
			ТекущиеДанные.Значение = Ложь;
		ИначеЕсли ТипXDTO = "date" Тогда
			ТекущиеДанные.Значение = Дата(1, 1, 1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Свойства.ТекущиеДанные;
	Если ТекущиеДанные.СписокДоступныхТипов.Количество() <> 1 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
		
	ТипXDTO = ТекущиеДанные.СписокДоступныхТипов[0].Значение.xdtoClassName;
	
	Если ТипXDTO = "integer"
		Или ТипXDTO = "boolean"
		Или ТипXDTO = "date"
		Или ТипXDTO = "string" Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипXDTO = "DMObjectPropertyValue" Тогда
		ДополнительноеСвойство = Новый Структура;
		ДополнительноеСвойство.Вставить("id", ТекущиеДанные.СвойствоID);
		ДополнительноеСвойство.Вставить("type", ТекущиеДанные.СвойствоТип);
		Отбор = Новый Структура("additionalProperty", ДополнительноеСвойство);
	Иначе
		Отбор = Неопределено;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ДанныеДляАвтоПодбора(
		ТипXDTO, ДанныеВыбора, Текст, СтандартнаяОбработка, Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Свойства.ТекущиеДанные;
	Если ТекущиеДанные.СписокДоступныхТипов.Количество() <> 1 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
		
	ТипXDTO = ТекущиеДанные.СписокДоступныхТипов[0].Значение.xdtoClassName;
	
	Если ТипXDTO = "integer" 
		Или ТипXDTO = "boolean" 
		Или ТипXDTO = "string" 
		Или ТипXDTO = "date" Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипXDTO = "DMObjectPropertyValue" Тогда
		ДополнительноеСвойство = Новый Структура;
		ДополнительноеСвойство.Вставить("id", ТекущиеДанные.СвойствоID);
		ДополнительноеСвойство.Вставить("type", ТекущиеДанные.СвойствоТип);
		Отбор = Новый Структура("additionalProperty", ДополнительноеСвойство);
	Иначе
		Отбор = Неопределено;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ДанныеДляАвтоПодбора(
		ТипXDTO, ДанныеВыбора, Текст, СтандартнаяОбработка, Отбор);
	
	Если ДанныеВыбора.Количество() = 1 Тогда 
		ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
			"Значение", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма, Истина, Элемент);
		СтандартнаяОбработка = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Значение", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма, Истина, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.Свойства.ТекущиеДанные.Значение = "";
	Элементы.Свойства.ТекущиеДанные.ЗначениеID = "";
	Элементы.Свойства.ТекущиеДанные.ЗначениеТип = "";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапы

&НаКлиенте
Процедура ЭтапыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Этапы.ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.Этапы.ТекущиеДанные.ЗапущенныйБизнесПроцессID) Тогда
			ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
				Элементы.Этапы.ТекущиеДанные.ЗапущенныйБизнесПроцессТип,
				Элементы.Этапы.ТекущиеДанные.ЗапущенныйБизнесПроцессID, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗадачуПервая(Команда)
	
	Если ПроцессТип = "DMBusinessProcessRegistration" Тогда
		Если ЭтоТочкаМаршрута("Зарегистрировать") Тогда
			Для Каждого СтрокаПредмета Из ДеревоПриложений.ПолучитьЭлементы() Цикл
				Если (Не ДоступнаМультипредметность Или СтрокаПредмета.РольПредмета = "Основной")
					И ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(СтрокаПредмета.ПредметТип) Тогда
					ИнтеграцияС1СДокументооборотВызовСервера.
						ЗарегистрироватьДокументПриНеобходимости(СтрокаПредмета.ПредметТип, СтрокаПредмета.ПредметID);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Тип = "DMBusinessProcessIssuesSolutionTaskQuestion" Тогда
		Если ВидВопросаID = "Иное" И НЕ ЗначениеЗаполнено(РезультатВыполнения) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Комментарий'")),,
				"РезультатВыполнения");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроцессТип = "DMBusinessProcessInvitation" И РезультатID = "ПринятоОбязательнымиУчастниками" Тогда 
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗадачуПерваяЗавершение", ЭтаФорма);
		ТекстВопроса = Нстр("ru = 'Есть непринявшие приглашения участники. При подтверждении они будут исключены из списка участников. Продолжить?'");
		ИнтеграцияС1СДокументооборотКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьЗадачуОповеститьЗакрытьФорму(1);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуВторая(Команда)
	
	Если (ПроцессТип = "DMBusinessProcessApproval" И ЭтоТочкаМаршрута("Согласовать"))
		ИЛИ (ПроцессТип = "DMBusinessProcessInvitation" И ЭтоТочкаМаршрута("Пригласить"))
		ИЛИ Тип = "DMBusinessProcessIssuesSolutionTaskAnswer" Тогда
		Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Комментарий'")),,
				"РезультатВыполнения");
			Возврат;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" И ЭтоТочкаМаршрута("Утвердить") Тогда
		Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Укажите причину отклонения документа'"),, 
				"РезультатВыполнения");
			Возврат;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessRegistration" И ЭтоТочкаМаршрута("Зарегистрировать") Тогда
		Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Укажите причину отклонения документа'"),, 
				"РезультатВыполнения");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("id, type, taskId", ПроцессID, ПроцессТип, ID);
	Оповещение = Новый ОписаниеОповещения("ВыполнитьЗадачуВтораяЗавершение", ЭтаФорма);
	
	Если ПроцессТип = "DMBusinessProcessApproval" И ЭтоТочкаМаршрута("Ознакомиться") Тогда
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессСогласование", 
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" И ЭтоТочкаМаршрута("Ознакомиться") Тогда
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессУтверждение", 
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessRegistration" И ЭтоТочкаМаршрута("Ознакомиться") Тогда
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессРегистрация",
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessInvitation" И ЭтоТочкаМаршрута("Ознакомиться") Тогда
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессПриглашение",
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		ВыполнитьЗадачуОповеститьЗакрытьФорму(2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуТретья(Команда)
	
	Если ПроцессТип = "DMBusinessProcessApproval" Тогда
		Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Комментарий'")),,
			"РезультатВыполнения");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьЗадачуОповеститьЗакрытьФорму(3);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Модифицированность Тогда
		Если ЗаписатьОбъект() Тогда
			Модифицированность = Ложь;
			ПараметрыОповещения = Новый Структура("name, id, type", ЭтаФорма.Наименование, ЭтаФорма.ID, ЭтаФорма.Тип);
			Оповестить("Запись_ДокументооборотЗадача", ПараметрыОповещения, ЭтаФорма.ВладелецФормы);
			Закрыть();
		КонецЕсли;
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Если Модифицированность Тогда
		Если ЗаписатьОбъект() Тогда 
			Модифицированность = Ложь;
			ПараметрыОповещения = Новый Структура("name, id, type", ЭтаФорма.Наименование, ЭтаФорма.ID, ЭтаФорма.Тип);
			Оповестить("Запись_ДокументооборотЗадача", ПараметрыОповещения, ЭтаФорма.ВладелецФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)

	Строка = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Ссылка) Тогда // объект ИС
		ПоказатьЗначение(, Строка.Ссылка);
		
	Иначе // объект ДО
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(Строка.ПредметТип, Строка.ПредметID, 
			Элементы.ДеревоПриложенийПредставление);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Команда)
	
	Строка = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если Строка <> Неопределено
		И Строка.ПредметТип = "DMFile" Тогда
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьФайл(Строка.ПредметID, Строка.Предмет,
			Строка.Расширение, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	
	ВыбраннаяСтрока = Элементы.Исполнители.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(Исполнители[ВыбраннаяСтрока].ЗадачаID) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("id", Исполнители[ВыбраннаяСтрока].ЗадачаID);
		ПараметрыФормы.Вставить("type", Исполнители[ВыбраннаяСтрока].ЗадачаТип);
		ПараметрыФормы.Вставить("ТочкаМаршрута",Исполнители[ВыбраннаяСтрока].ТочкаМаршрута);
		ПараметрыФормы.Вставить("ТипПроцесса",ПроцессТип);
			
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.Задача", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБизнесПроцесс(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ПроцессТип, ПроцессID, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьОбъект();
	КонецЕсли;
	
	ПараметрыФормы = новый Структура;
	ПараметрыФормы.Вставить("Задача", Наименование);
	ПараметрыФормы.Вставить("ЗадачаID", ID);
	ПараметрыФормы.Вставить("ЗадачаТип", Тип);
	
	Оповещение = Новый ОписаниеОповещения("ПеренаправитьЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ПеренаправлениеЗадачи", ПараметрыФормы, ЭтаФорма,,,, Оповещение);
	 
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	ПринятаКИсполнению = ПринятьЗадачуКИсполнениюНаСервере();
	
	Если ПринятаКИсполнению Тогда
		Состояние(НСтр("ru = 'Задача принята к исполнению!'"));
		Элементы.ФормаПринятьКИсполнению.Доступность = Ложь;
		ПараметрыОповещения = Новый Структура("name, id, type", ЭтаФорма.Наименование, ЭтаФорма.ID, ЭтаФорма.Тип);
		Оповестить("Запись_ДокументооборотЗадача", ПараметрыОповещения, ЭтаФорма.ВладелецФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСвязанныйОбъект(Команда)
	
	// Создать_Справочник_Контрагенты__1 -> Справочник.Контрагенты_1
	ИмяКоманды = Команда.Имя;
	ИмяТипа = Сред(ИмяКоманды, 9);
	ИмяТипа = СтрЗаменить(ИмяТипа, "___", "~");
	ИмяТипа = СтрЗаменить(ИмяТипа, "__", "&");
	ИмяТипа = СтрЗаменить(ИмяТипа, "_", ".");
	ИмяТипа = СтрЗаменить(ИмяТипа, "&", "_");
	ИмяТипа = СтрЗаменить(ИмяТипа, "~", "._");
	
	Если ДоступнаМультипредметность Тогда
		Предметы = ДеревоПриложений.ПолучитьЭлементы();
		Для Каждого СтрокаПредмета Из Предметы Цикл
			Если СтрокаПредмета.ПредметТип <> "DMFile" Тогда
				ИнтеграцияС1СДокументооборотКлиент.СоздатьИнтегрированныйОбъектПоТипу(
					ЭтаФорма, ИмяТипа, СтрокаПредмета.ПредметТип, СтрокаПредмета.ПредметID);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ИнтеграцияС1СДокументооборотКлиент.СоздатьИнтегрированныйОбъектПоТипу(
			ЭтаФорма, ИмяТипа, ПредметТип, ПредметID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроцесс(Команда)
	
	ПараметрыФормы = новый Структура("ГлавнаяЗадача, Предмет", новый Структура, новый Структура);
	
	ПараметрыФормы.ГлавнаяЗадача.Вставить("name", Наименование);
	ПараметрыФормы.ГлавнаяЗадача.Вставить("id", ID);
	ПараметрыФормы.ГлавнаяЗадача.Вставить("type", Тип);
	
	ПараметрыФормы.Предмет.Вставить("name", Предмет);
	ПараметрыФормы.Предмет.Вставить("id", ПредметID);
	ПараметрыФормы.Предмет.Вставить("type", ПредметТип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.СозданиеБизнесПроцесса", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмо(Команда)
	
	ПараметрыФормы = новый Структура("Предмет", новый Структура);
	
	ПараметрыФормы.Предмет.Вставить("name", Наименование);
	ПараметрыФормы.Предмет.Вставить("id", ID);
	ПараметрыФормы.Предмет.Вставить("type", Тип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящееПисьмо", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросАвтору(Команда)
	
	ПарметрыФормы = новый Структура;
	ПарметрыФормы.Вставить("id",ID);
	ПарметрыФормы.Вставить("type",Тип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессРешениеВопросовНовыйВопрос", ПарметрыФормы, ЭтаФорма, ID);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Источник", Представление);
	ПараметрыФормы.Вставить("ИсточникID", ID);
	ПараметрыФормы.Вставить("ИсточникТип", Тип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы", ПараметрыФормы, ID);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	НуженДиалог = Истина;
	ДлительностьРаботы = ИнтеграцияС1СДокументооборотКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
	Если ДлительностьРаботы < 60 Тогда // меньше 1 минуты
		НуженДиалог = Ложь;
	КонецЕсли;
	
	Если НуженДиалог Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Источник", Представление);
		ПараметрыФормы.Вставить("ИсточникID", ID);
		ПараметрыФормы.Вставить("ИсточникТип", Тип);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы", ПараметрыФормы, ID);
	Иначе
		Если ВключенХронометраж Тогда
			ПереключитьХронометражСервер();
			Если ВключенХронометраж Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(Представление));
				Состояние(Текст);
			КонецЕсли;
		Иначе 
			АктивныеЗаписи = ИнтеграцияС1СДокументооборотВызовСервера.АктивныеЗаписиХронометража();
			Если АктивныеЗаписи.Количество() = 0 Тогда
				ПереключитьХронометражСервер();
				Если ВключенХронометраж Тогда
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(Представление));
					Состояние(Текст);
				КонецЕсли;
			Иначе
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("АктивныеЗаписи", АктивныеЗаписи);
				
				Оповещение = Новый ОписаниеОповещения("ПереключитьХронометражЗавершение", ЭтаФорма, ПараметрыОповещения);
				СтрокаОбъектовХронометража = "";
				Для Каждого Запись Из АктивныеЗаписи Цикл 
					СтрокаОбъектовХронометража = СтрокаОбъектовХронометража + Символы.Таб + Запись.Источник + Символы.ПС;
				КонецЦикла;
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Включен хронометраж по другим объектам:
						|%1
						|Отключить хронометраж и зафиксировать трудозатраты перед включением нового хронометража?'"),
						СтрокаОбъектовХронометража);
				Кнопки = новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Да'"));
				Кнопки.Добавить(КодВозвратаДиалога.Отмена,НСтр("ru='Отмена'"));
				
				ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Отмена);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ПараметрыОповещения) Экспорт
	
	Если ЗаписатьОбъект() Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("id", ПроцессID);
		ПараметрыОповещения.Вставить("Стартован", Истина);
		
		// Соберем предметы.
		Предметы = Новый Массив;
		Если ДоступнаМультипредметность Тогда
			ЭлементыДерева = ДеревоПриложений.ПолучитьЭлементы();
			Для Каждого СтрокаПредмета Из ЭлементыДерева Цикл
				Если СтрокаПредмета.РольПредмета = "Основной" Тогда
					ОписаниеПредмета = Новый Структура;
					ОписаниеПредмета.Вставить("ID", СтрокаПредмета.ПредметID);
					ОписаниеПредмета.Вставить("Тип", СтрокаПредмета.ПредметТип);
					Предметы.Добавить(ОписаниеПредмета);
				КонецЕсли;
			КонецЦикла;
		Иначе // один предмет
			ОписаниеПредмета = Новый Структура;
			ОписаниеПредмета.Вставить("ID", ПредметID);
			ОписаниеПредмета.Вставить("Тип", ПредметТип);
			Предметы.Добавить(ОписаниеПредмета);
		КонецЕсли;
		ПараметрыОповещения.Вставить("Предметы", Предметы);
		
		Оповестить("Запись_ДокументооборотБизнесПроцесс", ПараметрыОповещения, ВладелецФормы);
			
		ПараметрыОповещения = Новый Структура("name, id, type", Представление, id, Тип);
		Оповестить("Запись_ДокументооборотЗадача", ПараметрыОповещения, ВладелецФормы);
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражЗавершение(РезультатВыбора, ПараметрыОповещения) Экспорт
	
	Если РезультатВыбора = КодВозвратаДиалога.Да Тогда
		
		Записи = ИнтеграцияС1СДокументооборотВызовСервера.ПереключитьХронометражПоОбъектамДокументооборота(ПараметрыОповещения.АктивныеЗаписи);
		
		Для Каждого Запись Из Записи Цикл
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("name", Запись.Источник);
			ПараметрыОповещения.Вставить("id", Запись.ИсточникID);
			ПараметрыОповещения.Вставить("type", Запись.ИсточникТип);
			Оповестить("Запись_ДокументооборотТрудозатраты", ПараметрыОповещения, Запись.ИсточникID);
		КонецЦикла;
	
		ПереключитьХронометражСервер();
		Если ВключенХронометраж Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(Представление));
			Состояние(Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуПерваяЗавершение(Ответ, ПараметрыОповещения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗадачуОповеститьЗакрытьФорму(1);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуВтораяЗавершение(Успешно, ПараметрыОповещения) Экспорт
	
	Если Успешно = Истина Тогда
		ВыполнитьЗадачуОповеститьЗакрытьФорму(2);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗавершение(Успешно, ПараметрыОповещения) Экспорт
	
	Если Успешно = Истина Тогда
		ПараметрыОповещения = Новый Структура("name, id, type", ЭтаФорма.Наименование, ЭтаФорма.ID, ЭтаФорма.Тип);
		Оповестить("Запись_ДокументооборотЗадача", ПараметрыОповещения, ЭтаФорма.ВладелецФормы);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовХронометражаСервер()
	
	Обработки.ИнтеграцияС1СДокументооборот.УстановитьСвойстваЭлементовХронометража(
		ВключенХронометраж, Команды.ПереключитьХронометраж, Элементы.ФормаПереключитьХронометраж);
		
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер()
	
	Обработки.ИнтеграцияС1СДокументооборот.ПереключитьХронометраж(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуЗадачи(Параметры)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Условия = Новый Массив;
	Условия.Добавить("withDependentObjects");
	Ответ = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси, Параметры.type, Параметры.id, Условия);
	ОбъектXDTO = Ответ.objects[0];
	
	Обработки.ИнтеграцияС1СДокументооборот.УстановитьНавигационнуюСсылку(ЭтаФорма, ОбъектXDTO);
	Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьПараметрыХронометража(ЭтаФорма, ОбъектXDTO);
	
	// Заполним общие реквизиты задач.
	ID = ОбъектXDTO.objectId.id;
	Тип = ОбъектXDTO.objectId.type;
	Представление = ОбъектXDTO.objectID.presentation;
	Наименование = ОбъектXDTO.Name;
	Заголовок = ОбъектXDTO.objectID.presentation;
	Выполнена = ОбъектXDTO.executed;
	ПринятаКИсполнению = ОбъектXDTO.accepted;
	Дата = ОбъектXDTO.beginDate;
	Номер = ОбъектXDTO.number;
	СрокИсполнения = ОбъектXDTO.dueDate;
	РезультатВыполнения = ОбъектXDTO.executionComment;
	ДатаИсполнения = ОбъектXDTO.endDate;
	Описание = ОбъектXDTO.description;
	
	Если ОбъектXDTO.Свойства().Получить("project") <> Неопределено
		И ОбъектXDTO.Установлено("project") Тогда
		Проект = ОбъектXDTO.project.name;
	КонецЕсли;
	Если ОбъектXDTO.Свойства().Получить("projectTask") <> Неопределено
		И ОбъектXDTO.Установлено("projectTask") Тогда
		ПроектнаяЗадача = ОбъектXDTO.projectTask.name;
	КонецЕсли;
	
	Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ОбъектXDTO.importance,"Важность");
	Если ОбъектXDTO.Свойства().Получить("state") <> Неопределено Тогда
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ОбъектXDTO.state, "Состояние");
	КонецЕсли;
	
	Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ОбъектXDTO.parentBusinessProcess, "Процесс", Истина);
	Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ОбъектXDTO.author, "Автор");
	ЗаполнитьДанныеАдресации(ЭтаФорма, ОбъектXDTO.performer);
	УстановитьТочкуМаршрута(ОбъектXDTO.businessProcessStep);
	
	ПроцессОбъект = ОбъектXDTO.parentBusinessProcess;
	
	// Заполним дерево приложений.
	Если ПроцессТип = "DMBusinessProcessIssuesSolution" Тогда
		ЗаполнитьДеревоПриложенийПоФайлам(ОбъектXDTO.files);
	ИначеЕсли ДоступнаМультипредметность Тогда
		ЗаполнитьДеревоПриложенийПоПредметам(ОбъектXDTO.targets.items);
	ИначеЕсли ОбъектXDTO.Установлено("target") Тогда
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(
			ЭтаФорма, ОбъектXDTO.target, "Предмет");
		ПоддержкаСовместимости_ЗаполнитьПроцессПредметЗадачи(
			Прокси, ОбъектXDTO, ОбъектXDTO.target, ПроцессОбъект);
		ЗаполнитьДеревоПриложенийПоПредмету(ОбъектXDTO.target);
		ЗаполнитьКомандыСозданияПоПредмету(ОбъектXDTO.target);
	КонецЕсли;
	
	Обработки.ИнтеграцияС1СДокументооборот.ПоместитьДополнительныеРеквизитыНаФорму(ЭтаФорма, ОбъектXDTO);
	
	// Определим возможность выполнения и остановки.
	Если НЕ (Выполнена ИЛИ СостояниеID = "Остановлен") Тогда
		ДатаИсполнения = ТекущаяДатаСеанса();
		ДоступноВыполнение = Истина;
	Иначе
		Элементы.ТекстРезультатаВыполнения.Видимость = Истина;
		ДоступноВыполнение = Ложь;
	КонецЕсли;
	Если СостояниеID = "Остановлен" Тогда 
		Элементы.ГруппаСведенияОбОстановке.Видимость = Истина; 
	Иначе
		Элементы.ГруппаСведенияОбОстановке.Видимость = Ложь; 
	КонецЕсли;

	// Заполним описание.
	Если Элементы.Найти("ПолноеОписаниеЗадачи") <> Неопределено Тогда
		
		// Состояния процесса "Прерван", "Остановлен".
		Если ПроцессОбъект.Свойства().Получить("state") <> Неопределено
			И ПроцессОбъект.Установлено("state") Тогда
			
			Если ПроцессОбъект.state.name = "Остановлен" Тогда
				Если Не ПустаяСтрока(ПолноеОписаниеЗадачи) Тогда
					ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи + Символы.ПС;
				КонецЕсли;
				ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи + НСтр("ru = 'Задача остановлена'") + Символы.ПС;
			ИначеЕсли ПроцессОбъект.state.name = "Прерван" Тогда
				Если Не ПустаяСтрока(ПолноеОписаниеЗадачи) Тогда
					ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи + Символы.ПС;
				КонецЕсли;
				ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи + НСтр("ru = 'Задача прервана'") + Символы.ПС;
			КонецЕсли;
			
		КонецЕсли;
		
		// Описание задачи.
		Если Не ПустаяСтрока(ОбъектXDTO.description) Тогда
			Если Не ПустаяСтрока(ПолноеОписаниеЗадачи) Тогда
				ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи + Символы.ПС;
			КонецЕсли;
			ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи + ОбъектXDTO.description + Символы.ПС;
		КонецЕсли;
		
		// Важность.
		Если Не ПустаяСтрока(ПолноеОписаниеЗадачи) Тогда
			ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи + Символы.ПС;
		КонецЕсли;
		ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи
			+ СтрШаблон(НСтр("ru = 'Важность: %1'"), ОбъектXDTO.importance.objectID.id)
			+ Символы.ПС;
		
		// Кому.
		Если Не ПустаяСтрока(ПолноеОписаниеЗадачи) Тогда
			ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи + Символы.ПС;
		КонецЕсли;
		
		ПредставлениеИсполнителя = "";
		
		Если ОбъектXDTO.performer.Установлено("user") Тогда // адресована пользователю
			
			ПредставлениеИсполнителя = ОбъектXDTO.performer.user.name;
			
		ИначеЕсли ОбъектXDTO.performer.Установлено("role") Тогда // адресована роли
			
			ПредставлениеИсполнителя = ОбъектXDTO.performer.role.name;
			
			Если ОбъектXDTO.performer.Установлено("mainAddressingObject") Тогда
				ПредставлениеИсполнителя = ПредставлениеИсполнителя + ", "
					+ ОбъектXDTO.performer.mainAddressingObject.name;
			КонецЕсли;
			Если ОбъектXDTO.performer.Установлено("secondaryAddressingObject") Тогда
				ПредставлениеИсполнителя = ПредставлениеИсполнителя + ", "
					+ ОбъектXDTO.performer.secondaryAddressingObject.name;
			КонецЕсли;
				
		КонецЕсли;
		
		ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи + СтрШаблон(
			НСтр("ru = 'Кому: %1'"),
			ПредставлениеИсполнителя);
		
		// Срок.
		Если ЗначениеЗаполнено(ОбъектXDTO.dueDate) Тогда
			Если Не ПустаяСтрока(ПолноеОписаниеЗадачи) Тогда
				ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи + Символы.ПС;
			КонецЕсли;
			ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи
				+ СтрШаблон(НСтр("ru = 'Срок: %1'"), Формат(ОбъектXDTO.dueDate, "dd.MM.yyyy HH:mm"));
		КонецЕсли;
		
		// Автор.
		Если ОбъектXDTO.Установлено("author") Тогда
			Если Не ПустаяСтрока(ПолноеОписаниеЗадачи) Тогда
				ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи + Символы.ПС;
			КонецЕсли;
			ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи
				+ СтрШаблон(НСтр("ru = 'Автор: %1'"), ОбъектXDTO.author.name);
		КонецЕсли;
		
		// История выполнения.
		Если ПроцессОбъект.Свойства().Получить("executionComment") <> Неопределено
			И Не ПустаяСтрока(ПроцессОбъект.executionComment) Тогда
			Если Не ПустаяСтрока(ПолноеОписаниеЗадачи) Тогда
				ПолноеОписаниеЗадачи = 	ПолноеОписаниеЗадачи + Символы.ПС;
			КонецЕсли;
			ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи 
			+ Символы.ПС + НСтр("ru = 'История выполнения:'")
			+ Символы.ПС + ПроцессОбъект.executionComment;
		КонецЕсли;
		
	КонецЕсли;
	
	// Настроим видимость и заполним реквизиты, специфичные для точки маршрута.
	Элементы.РезультатВыполнения.ТолькоПросмотр = НЕ ДоступноВыполнение;
	Элементы.ДатаИсполнения.ТолькоПросмотр = НЕ ДоступноВыполнение;
	Элементы.ДатаИсполненияВремя.ТолькоПросмотр = НЕ ДоступноВыполнение;
	
	// Заполним реквизиты, специфичные для типа процесса.
	Если ПроцессТип = "DMBusinessProcessApproval" Тогда
		ЗаполнитьДанныеБПСогласование(ОбъектXDTO);
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" Тогда
		ЗаполнитьДанныеБПУтверждение(ОбъектXDTO);
	ИначеЕсли ПроцессТип = "DMBusinessProcessRegistration" Тогда
		ЗаполнитьДанныеБПРегистрация(ОбъектXDTO);
	ИначеЕсли ПроцессТип = "DMBusinessProcessConsideration" Тогда
		ЗаполнитьДанныеБПРассмотрение(ОбъектXDTO);
	ИначеЕсли ПроцессТип = "DMBusinessProcessOrder" Тогда
		ЗаполнитьДанныеБППоручение(Прокси, ОбъектXDTO);
	ИначеЕсли ПроцессТип = "DMBusinessProcessPerformance" Тогда
		ЗаполнитьДанныеБПИсполнение(Прокси, ОбъектXDTO);
	ИначеЕсли ПроцессТип = "DMComplexBusinessProcess" Тогда
		ЗаполнитьДанныеБПКомплексныйПроцесс(Прокси, ПроцессОбъект);
	ИначеЕсли ПроцессТип = "DMBusinessProcessRegistration" Тогда
		ЗаполнитьДанныеБПРегистрация(ОбъектXDTO);
	ИначеЕсли ПроцессТип = "DMBusinessProcessAcquaintance" Тогда
		ЗаполнитьДанныеБПОзнакомление();
	ИначеЕсли ПроцессТип = "DMBusinessProcessIssuesSolution" Тогда
		ЗаполнитьДанныеБПРешениеВопросов(ОбъектXDTO);
	ИначеЕсли ПроцессТип = "DMBusinessProcessInvitation" Тогда
		ЗаполнитьДанныеБППриглашение(ОбъектXDTO);
	Иначе
		ВывестиИнформмациюОНедоступностиВыполненияЗадачи();
	КонецЕсли;
	
	// Обработаем доступность задачи для изменения.
	РазрешеноИзменение = 
		?(ОбъектXDTO.Установлено("changeRight"), ОбъектXDTO.changeRight, Ложь)
		И Не (СостояниеID = "Остановлен")
		И Не Выполнена;
	ЭтаФорма.ТолькоПросмотр = Не РазрешеноИзменение;
	Если Не РазрешеноИзменение Или Не ДоступнаМультипредметность Тогда // уберем гиперссылку "Добавить..."
		Элементы.ДекорацияПредметыИФайлы.Заголовок = НСтр("ru = 'У задачи нет предметов.'");
	КонецЕсли;
	Элементы.ФормаПринятьКИсполнению.Доступность = Не ПринятаКИсполнению И РазрешеноИзменение;
	
КонецПроцедуры

&НаСервере
Процедура ПоддержкаСовместимости_ЗаполнитьПроцессПредметЗадачи(Прокси, ОбъектXDTO, ПредметОбъект, ПроцессОбъект)
	
	// заполняются ли сразу предмет и процесс задачи?
	Если НЕ ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		
		МассивОбъектов = новый Массив;
		МассивКолонок = новый Массив;
		
		МассивОбъектов.Добавить(новый Структура("id, type", ОбъектXDTO.parentBusinessProcess.ObjectID.id, ОбъектXDTO.parentBusinessProcess.ObjectID.type));
		МассивКолонок.Добавить("name");
		МассивКолонок.Добавить("objectId");
		МассивКолонок.Добавить("checkResults");
		МассивКолонок.Добавить("executionComment");
		
		Если ОбъектXDTO.Установлено("target") Тогда
			Если Найти(ОбъектXDTO.target.objectID.type,"Document") <> 0 Тогда
				МассивОбъектов.Добавить(новый Структура("id, type", ОбъектXDTO.target.ObjectID.id, ОбъектXDTO.target.ObjectID.type));
				МассивКолонок.Добавить("files");
				МассивКолонок.Добавить("externalObject");
			ИначеЕсли ОбъектXDTO.target.objectID.type = "DMFile" Тогда
				МассивОбъектов.Добавить(новый Структура("id, type", ОбъектXDTO.target.ObjectID.id, ОбъектXDTO.target.ObjectID.type));
				МассивКолонок.Добавить("extension");
				МассивКолонок.Добавить("modificationDateUniversal");
				МассивКолонок.Добавить("size");
			КонецЕсли;
		КонецЕсли;

		Ответ = ИнтеграцияС1СДокументооборот.ПолучитьОбъекты(Прокси, МассивОбъектов, МассивКолонок);
		
		ПроцессОбъект = Ответ.objects[0];

		Если Ответ.objects.Количество() > 1 Тогда
			ПредметОбъект = Ответ.objects[1];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для БП "Решение вопросов выполнения задач" дерево приложений заполняется по файлам, а не по предметам.
//
&НаСервере
Процедура ЗаполнитьДеревоПриложенийПоФайлам(ФайлыXDTO) 
	
	Дерево = РеквизитФормыВЗначение("ДеревоПриложений");
	Дерево.Строки.Очистить();
	
	ДополнитьДеревоПриложенийФайлами(Дерево.Строки, ФайлыXDTO);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПриложений");
	
КонецПроцедуры

// Для поддерживающих мультипредметность версий веб-сервиса.
//
&НаСервере
Процедура ЗаполнитьДеревоПриложенийПоПредметам(СтрокиПредметовXDTO) 
	
	Дерево = РеквизитФормыВЗначение("ДеревоПриложений");
	Дерево.Строки.Очистить();
	
	Для каждого СтрокаПредметаXDTO из СтрокиПредметовXDTO Цикл
		
		СтрокаПредмета = Дерево.Строки.Добавить();
		
		СтрокаПредмета.ИмяПредмета = СтрокаПредметаXDTO.name;
		СтрокаПредмета.РольПредмета = СтрокаПредметаXDTO.role.objectId.id;
		СтрокаПредмета.ДоступноУдаление = СтрокаПредметаXDTO.allowDeletion;
		
		ЗаполнитьСтрокуПредметаЕгоСвойствами(СтрокаПредмета, СтрокаПредметаXDTO.target);
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПриложений");
	
КонецПроцедуры

// Для версий веб-сервиса, не поддерживающих мультипредметность.
//
&НаСервере
Процедура ЗаполнитьДеревоПриложенийПоПредмету(ПредметXDTO) 
	
	Дерево = РеквизитФормыВЗначение("ДеревоПриложений");
	Дерево.Строки.Очистить();
	
	СтрокаПредмета = Дерево.Строки.Добавить();
	ЗаполнитьСтрокуПредметаЕгоСвойствами(СтрокаПредмета, ПредметXDTO);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПриложений");
	
КонецПроцедуры

// Заполняет команды создания по предмету.
//
&НаСервере
Процедура ЗаполнитьКомандыСозданияПоПредмету(ПредметXDTO) 
	
	Если ПредметXDTO.objectId.type = "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКоманд = ИнтеграцияС1СДокументооборотВызовСервера.СтруктураКомандСозданияИОткрытия(
		ПредметXDTO.objectId.type, ПредметXDTO.objectId.id);
		
	ОбработанныеТипы = Новый Массив;
	
	Для Каждого КомандаСоздания Из СтруктураКоманд.КомандыСоздания Цикл
		
		Если ОбработанныеТипы.Найти(КомандаСоздания.Тип) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Представление = КомандаСоздания.Представление;
		
		ИмяКоманды = СтрЗаменить(КомандаСоздания.Тип, "_", "__");
		ИмяКоманды = СтрЗаменить(ИмяКоманды, ".", "_");
		ИмяКоманды = "Создать_" + ИмяКоманды;
		
		Если Команды.Найти(ИмяКоманды) = Неопределено Тогда
			КомандаСоздатьСвязанныйОбъект = Команды.Добавить(ИмяКоманды);
			КомандаСоздатьСвязанныйОбъект.Действие = "СоздатьСвязанныйОбъект";
		Иначе
			Продолжить;
		КонецЕсли;
		
		Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы.СоздатьНаОсновании);
		Кнопка.Заголовок = Представление;
		Кнопка.ИмяКоманды = ИмяКоманды;
		
	КонецЦикла;
		
КонецПроцедуры

// Заполняет строку дерева приложений по предмету XDTO.
//
&НаСервере
Процедура ЗаполнитьСтрокуПредметаЕгоСвойствами(СтрокаПредмета, ПредметXDTO)
	
	СтрокаПредмета.Предмет = ПредметXDTO.name;
	СтрокаПредмета.ПредметID = ПредметXDTO.objectId.id;
	СтрокаПредмета.ПредметТип = ПредметXDTO.objectId.type;
	
	ЗаполнитьКомандыСозданияПоПредмету(ПредметXDTO);
	
	Если СтрокаПредмета.ПредметТип = "DMFile" Тогда
		СтрокаПредмета.Расширение = ПредметXDTO.extension;
		СтрокаПредмета.Редактируется = ПредметXDTO.editing;
		Если ПредметXDTO.Установлено("editingUser") Тогда
			ТекущийПользовательДокументооборота = ИнтеграцияС1СДокументооборотПовтИсп.ТекущийПользовательДокументооборота();
			СтрокаПредмета.РедактируетсяТекущимПользователем = 
				(ПредметXDTO.editingUser.objectId.id = ТекущийПользовательДокументооборота.objectId.id);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьКартинкуПредмета(СтрокаПредмета);
	ДополнитьСтрокуПредметаСвязаннымОбъектомИС(СтрокаПредмета, ПредметXDTO);
	ДополнитьДеревоПриложенийФайламиПредмета(СтрокаПредмета);
	
КонецПроцедуры

// Устанавливает картинку предмета по его роли или по расширению файла.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКартинкуПредмета(СтрокаПредмета)
	
	Если СтрокаПредмета.ПредметТип = "DMFile" Тогда // для файла – по расширению
		СтрокаПредмета.Картинка = РаботаСФайламиСлужебныйКлиентСервер.
			ПолучитьИндексПиктограммыФайла(СтрокаПредмета.Расширение);
	Иначе // для прочих типов – по роли
		СтрокаПредмета.Картинка = ИнтеграцияС1СДокументооборотКлиентСервер.КартинкаПоРолиПредмета(
			СтрокаПредмета.РольПредмета);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет строку сведениями об объекте ИС, меняя представление.
&НаСервере
Процедура ДополнитьСтрокуПредметаСвязаннымОбъектомИС(СтрокаПредмета, ПредметXDTO)
	
	// Найдем связанный объект ИС.
	Если ПредметXDTO.Установлено("externalObject") Тогда
		СтрокаПредмета.Ссылка = ИнтеграцияС1СДокументооборот.СсылкаПоВнешнемуОбъекту(
			ПредметXDTO.externalObject);
	КонецЕсли;
	// Представление, как в ДО.
	Представление = СтрокаПредмета.Предмет;
	Если ЗначениеЗаполнено(СтрокаПредмета.ИмяПредмета) Тогда // мультипредметность, имя известно
		Представление = Представление + " (" + СтрокаПредмета.ИмяПредмета + ")";
	Иначе // без мультипредметности, дадим пояснение согласно типу
		ДополнитьИмяПредметаПоТипуОбъекта(Представление, СтрокаПредмета.ПредметТип);
	КонецЕсли;
	// Заменим наименование предмета в ДО его представлением в ИС. NB: возможна ситуация, когда права в ДО
	// есть, а в ИС нет. В этом случае форма задачи должна открываться нормально, а пользователь увидит
	// ошибку "Нарушение прав доступа" лишь при попытке открыть предмет в ИС.
	Попытка
		Если ЗначениеЗаполнено(СтрокаПредмета.Ссылка) Тогда // представление как в ИС
			СтрокаПредмета.Представление = Строка(СтрокаПредмета.Ссылка);
		Иначе // представление как в ДО
			СтрокаПредмета.Представление = Представление;
		КонецЕсли;
	Исключение
		СтрокаПредмета.Представление = Представление;
	КонецПопытки;
	
КонецПроцедуры

// Получает вызовом сервиса файлы предмета и дополняет ими дерево приложений.
//
&НаСервере
Процедура ДополнитьДеревоПриложенийФайламиПредмета(СтрокаПредмета)
	
	Если СтрокаПредмета.ПредметТип = "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	СписокФайлов = ИнтеграцияС1СДокументооборотВызовСервера.ФайлыПоВладельцу(
		СтрокаПредмета.ПредметID, СтрокаПредмета.Предмет, СтрокаПредмета.ПредметТип);
	ДополнитьДеревоПриложенийФайлами(СтрокаПредмета.Строки, СписокФайлов.files);
	
КонецПроцедуры

// Дополняет дерево приложений переданной коллекцией файлов.
//
&НаСервере
Процедура ДополнитьДеревоПриложенийФайлами(СтрокиДерева, ФайлыXDTO)
	
	СтрокиДерева.Очистить();
	
	Для каждого ФайлXDTO из ФайлыXDTO Цикл
		СтрокаФайла = СтрокиДерева.Добавить();
		СтрокаФайла.Предмет =  ФайлXDTO.name;
		СтрокаФайла.ПредметТип = ФайлXDTO.objectId.type;
		СтрокаФайла.ПредметID = ФайлXDTO.objectId.id;
		СтрокаФайла.Картинка = РаботаСФайламиСлужебныйКлиентСервер.
			ПолучитьИндексПиктограммыФайла(ФайлXDTO.extension);
		СтрокаФайла.Расширение = ФайлXDTO.extension;
		Если ДоступенЗахватФайлов Тогда
			СтрокаФайла.Редактируется = ФайлXDTO.editing;
			Если ФайлXDTO.Установлено("editingUser") Тогда
				СтрокаФайла.РедактируетсяТекущимПользователем =
					(ВРег(ФайлXDTO.editingUser.name) = ВРег(ИмяПользователя));
			КонецЕсли;
		КонецЕсли;
		СтрокаФайла.Представление = СтрокаФайла.Предмет;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТочкуМаршрута(ИмяТочкиМаршрута)
	
	Если ПроцессТип = "DMBusinessProcessApproval" Тогда
		Если ИмяТочкиМаршрута = "Ознакомиться с результатом согласования" Тогда
			ТочкаМаршрута = "Ознакомиться";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessOrder" Тогда
		Если ИмяТочкиМаршрута = "Контролировать поручение" Тогда
			ТочкаМаршрута = "Контролировать";
		ИначеЕсли ИмяТочкиМаршрута = "Проверить поручение" Тогда
			ТочкаМаршрута = "Проверить";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessPerformance" Тогда
		Если ИмяТочкиМаршрута = "Ответственное исполнение" Тогда
			ТочкаМаршрута = "ОтветственноеИсполнение";
		ИначеЕсли ИмяТочкиМаршрута = "Контролировать исполнение" Тогда
			ТочкаМаршрута = "Контролировать";
		ИначеЕсли ИмяТочкиМаршрута = "Проверить исполнение" Тогда
			ТочкаМаршрута = "Проверить";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessRegistration" Тогда
		Если ИмяТочкиМаршрута = "Ознакомиться с регистрацией" Тогда
			ТочкаМаршрута = "Ознакомиться";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" Тогда
		Если Найти(ИмяТочкиМаршрута, "Ознакомиться с результатом утверждения") <> 0 Тогда
			ТочкаМаршрута = "Ознакомиться";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessConsideration" Тогда
		Если ИмяТочкиМаршрута = "Обработать резолюцию" Тогда
			ТочкаМаршрута = "Ознакомиться";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMComplexBusinessProcess" Тогда
		Если ИмяТочкиМаршрута = "Контролировать ход процесса" Тогда
			ТочкаМаршрута = "Контролировать";
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessIncomingDocumentProcessing" Тогда
		Если ИмяТочкиМаршрута = "Исполнение \ ознакомление" Тогда
			ТочкаМаршрута = "ИсполнениеОзнакомление";
		ИначеЕсли ИмяТочкиМаршрута = "В дело" Тогда
			ТочкаМаршрута = "ВДело";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessInternalDocumentProcessing" Тогда
		Если ИмяТочкиМаршрута = "Рассмотрение" Тогда
			ТочкаМаршрута = "ВложенныйПроцесс1";
		ИначеЕсли ИмяТочкиМаршрута = "Исполнение \ ознакомление" Тогда
			ТочкаМаршрута = "ВложенныйПроцесс2";
		ИначеЕсли ИмяТочкиМаршрута = "В дело" Тогда
			ТочкаМаршрута = "ВложенныйПроцесс3";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessIssuesSolution" Тогда
		Если ИмяТочкиМаршрута = "Рассмотреть вопрос" Тогда
			ТочкаМаршрута = "РассмотрениеИнициатором";
		ИначеЕсли ИмяТочкиМаршрута = "Ознакомиться с результатом рассмотрения" Тогда
			ТочкаМаршрута = "ОзнакомлениеСРезультатомРассмотрения";
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessInvitation" Тогда
		Если ИмяТочкиМаршрута = "Пригласить" Тогда
			ТочкаМаршрута = "Пригласить";
		ИначеЕсли ИмяТочкиМаршрута = "Ознакомиться с результатом приглашения" Тогда
			ТочкаМаршрута = "Ознакомиться";
		ИначеЕсли ИмяТочкиМаршрута = "Оповестить о результатах приглашения" Тогда
			ТочкаМаршрута = "Оповестить";
		КонецЕсли;
	Иначе
		ТочкаМаршрута = ИмяТочкиМаршрута;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоТочкаМаршрута(ИмяТочкиМаршрута)
	
	Если ТочкаМаршрута = ИмяТочкиМаршрута Тогда
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеБПСогласование(ЗадачаОбъект)
	
	//заполнение номера итерации
	НомерИтерации = ЗадачаОбъект.iterationNumber;
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;

	Если ЭтоТочкаМаршрута("Согласовать") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Согласовано'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Согласовано 
															|с замечаниями'");
		Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		Элементы.ВыполнитьЗадачуТретья.Заголовок = НСтр("ru='Не согласовано'");
		
		Элементы.ГруппаЦикл.Видимость = Истина;
		
		//заполнение результата согласования задачи
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.approvalResult, "Результат");
		
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = Строка(Результат) + ".";
			Если РезультатID = "Согласовано" Или РезультатID = "СогласованоСЗамечаниями" Тогда 
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			ИначеЕсли РезультатID = "НеСогласовано" Тогда 
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭтоТочкаМаршрута("Ознакомиться") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Ознакомился'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Повторить
															|согласование...'");
		Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		//заполнение результата согласования
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.approvalResult, "Результат");
		ОтправленоНаПовторноеСогласование = ЗадачаОбъект.returned;
		
		//заполнение листа согласования
		Для каждого СтрокаРезультата из ЗадачаОбъект.approvalResults Цикл
			СтрИсполнения = Исполнители.Добавить();
			СтрИсполнения.РезультатВыполнения = СтрокаРезультата.approvalComment;
			СтрИсполнения.ДатаИсполнения = СтрокаРезультата.approvalDate;
			СтрИсполнения.КартинкаСостояния = 1;
			ЗаполнитьДанныеАдресации(СтрИсполнения, СтрокаРезультата.approvalPerformer);
			Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(СтрИсполнения,СтрокаРезультата.approvalResult,"Результат");
		КонецЦикла;
		
		Элементы.ГруппаСогласование.Видимость = Истина;
		Элементы.Исполнители.Видимость = Истина;
		Элементы.ИсполнителиИсполнитель.Заголовок = НСтр("ru = 'Согласующее лицо'");
		Элементы.ИсполнителиДатаИсполнения.Видимость = Ложь;
		Элементы.ИсполнителиДатаСогласования.Видимость = Истина;
		Элементы.ИсполнителиРезультат.Видимость = Истина;
		Элементы.РезультатВыполнения.Видимость = Ложь;
		Элементы.РезультатВыполненияСкрытый.Видимость = Истина;
		Элементы.Исполнители.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;

		Если (РезультатID = "Согласовано") Или (РезультатID = "СогласованоСЗамечаниями") Тогда 
			Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		ИначеЕсли РезультатID = "НеСогласовано" Тогда 
			Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		КонецЕсли;
		
		//заголовки кнопок
		Если РезультатID = "НеСогласовано" Тогда 
			Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Завершить 
																|согласование'");
		Иначе	
			Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		КонецЕсли;
		
		//заполнение текста результата выполнения для выполненной задачи
		Если ОтправленоНаПовторноеСогласование <> Неопределено Тогда
			Если ОтправленоНаПовторноеСогласование Тогда
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Отправлено на повторное согласование.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			Иначе	
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Ознакомился.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерИтерации <= 1 Тогда 
		Элементы.НомерИтерацииСогласования.Видимость = Ложь;
		Элементы.НомерИтерацииСогласование.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПУтверждение(ЗадачаОбъект)
	
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
	
	//заполнение номера итерации
	НомерИтерации = ЗадачаОбъект.iterationNumber;
	
	Если ЭтоТочкаМаршрута("Утвердить") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Утверждено'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Не утверждено'");
		Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		Элементы.ГруппаЦикл.Видимость = Истина;
		
		//заполнение результата утверждения
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма,ЗадачаОбъект.confirmationResult,"Результат");
		
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = Строка(Результат) + ".";
			Если РезультатID = "Утверждено" Тогда 
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			ИначеЕсли РезультатID = "НеУтверждено" Тогда 
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭтоТочкаМаршрута("Ознакомиться") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Ознакомился'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Повторить 
															|утверждение...'");
		Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		ОтправленоНаПовторноеУтверждение = ЗадачаОбъект.returned;
		
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.confirmationResult,"Результат");
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.confirmationPerformer.user, "Утверждающий");
		ДатаУтверждения = ЗадачаОбъект.confirmationDate;
		РезультатВыполненияУтверждения = ЗадачаОбъект.confirmationComment;
		
		Элементы.ГруппаУтверждение.Видимость = Истина;
		Элементы.РезультатВыполнения.Видимость = Ложь;
		Элементы.РезультатВыполненияСкрытый.Видимость = Истина;
		
		Если (РезультатID = "Утверждено") Тогда 
			Элементы.РезультатУтверждения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		ИначеЕсли РезультатID = "НеУтверждено" Тогда 
			Элементы.РезультатУтверждения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		КонецЕсли;
		
		//заголовки кнопок
		Если РезультатID = "НеУтверждено" Тогда 
			Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Завершить
																|утверждение'");
		Иначе	
			Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		КонецЕсли;
		
		//заполнение текста результата выполнения для выполненной задачи
		Если ОтправленоНаПовторноеУтверждение <> Неопределено Тогда
			Если ОтправленоНаПовторноеУтверждение Тогда
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Отправлено на повторное утверждение.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			Иначе	
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Ознакомился.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерИтерации <= 1 Тогда 
		Элементы.НомерИтерацииУтверждения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБППоручение(Прокси, ЗадачаОбъект)
	
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
	
	Если ЭтоТочкаМаршрута("Выполнить") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Выполнено'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Выполнено.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		
	ИначеЕсли ЭтоТочкаМаршрута("Проверить") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Завершить поручение'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Вернуть на доработку'");
		Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		//заполнение результата выполнения 
		Если ЗадачаОбъект.Установлено("returned") Тогда
			ВозвращеноНаДоработку = ЗадачаОбъект.returned;
		Иначе
			ВозвращеноНаДоработку = Ложь;
		КонецЕсли;
		
		//заполнение текста результата выполнения для выполненной задачи
		Если Выполнена Тогда
			Если ВозвращеноНаДоработку Тогда
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Возвращено на доработку.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			Иначе
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Ознакомился.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭтоТочкаМаршрута("Контролировать") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Снять с контроля'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Снято с контроля.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		
		Элементы.Исполнители.Видимость = Истина;
		Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиСрокИсполнения.Видимость = Истина;
		Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиВыполнена.Видимость = Истина;
		
		СписокЗадач = ПолучитьЗадачиБизнесПроцесса(Прокси);
		Для каждого Задача из СписокЗадач Цикл
			Если Найти(Задача.businessProcessStep,"Контролировать") <> 0 Тогда
				СтрИсполнения = Исполнители.Добавить();
				ЗаполнитьСтрокуЗадачи(СтрИсполнения,Задача);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПИсполнение(Прокси, ЗадачаОбъект)
	
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
	
	Если ЭтоТочкаМаршрута("Исполнить") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Исполнено'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Исполнено.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		
	ИначеЕсли ЭтоТочкаМаршрута("ОтветственноеИсполнение") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Исполнено'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Исполнено и проверено.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		
		Элементы.Исполнители.Видимость = Истина;
		Элементы.Исполнители.Заголовок = "Соисполнители";
		Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиСрокИсполнения.Видимость = Истина;
		Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиВыполнена.Видимость = Истина;
		Элементы.ИсполнителиВыполнена.Видимость = Ложь;
		
		СписокЗадач = ПолучитьЗадачиБизнесПроцесса(Прокси);
		
		Для каждого Задача из СписокЗадач Цикл
			Если Задача.businessProcessStep = "Исполнить" Тогда
				СтрИсполнения = Исполнители.Добавить();
				ЗаполнитьСтрокуЗадачи(СтрИсполнения,Задача);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЭтоТочкаМаршрута("Контролировать") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Снять с контроля'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Проконтролировано.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		
		Элементы.Исполнители.Видимость = Истина;
		Элементы.Исполнители.Заголовок = НСтр("ru = 'Ход исполнения'");
		Элементы.ИсполнителиСрокИсполнения.Видимость = Истина;
		Элементы.ИсполнителиВыполнена.Видимость = Истина;
		Элементы.ИсполнителиКартинкаСостояния.Видимость = Ложь;
		Элементы.ИсполнителиКартинкаОтветственный.Видимость = Истина;
		
		СписокЗадач = ПолучитьЗадачиБизнесПроцесса(Прокси);
		Для каждого Задача из СписокЗадач Цикл
			Если Найти(Задача.businessProcessStep,"Контролировать") = 0 Тогда
				СтрИсполнения = Исполнители.Добавить();
				ЗаполнитьСтрокуЗадачи(СтрИсполнения,Задача);
				Если Найти(Задача.businessProcessStep, "Ответственное") <> 0 Тогда
					СтрИсполнения.КартинкаОтветственный = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЭтоТочкаМаршрута("Проверить") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Проверено'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Проверено.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			Элементы.ИсполнителиОтправленоНаДоработку.ТолькоПросмотр = Истина;
			Элементы.ИсполнителиКомментарийПроверяющего.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.ГруппаЦиклИсполнение.Видимость = Истина;
		Элементы.РезультатВыполнения.Видимость = Ложь;
		Элементы.Исполнители.Видимость = Истина;
		Элементы.Исполнители.ТолькоПросмотр = Ложь;
		Элементы.Исполнители.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.ИсполнителиКомментарий.Заголовок = НСтр("ru = 'Результат выполнения'");
		Элементы.ИсполнителиОтправленоНаДоработку.Видимость = Истина;
		Элементы.ИсполнителиОтправленоНаДоработку.Заголовок = НСтр("ru = 'Вернуть на доработку'");
		Элементы.ИсполнителиКомментарийПроверяющего.Видимость = Истина;
		Элементы.ИсполнителиКартинкаСостояния.Видимость = Ложь;
		Элементы.ИсполнителиКартинкаОтветственный.Видимость = Истина;
		
		НомерИтерации = ЗадачаОбъект.iterationNumber;
		
		Для каждого СтрокаXDTO из ЗадачаОбъект.checkResults цикл
			СтрИсполнения = Исполнители.Добавить();
			ЗаполнитьСтрокуЗадачи(СтрИсполнения, СтрокаXDTO.executorTask);
			СтрИсполнения.ЗадачаID = СтрокаXDTO.executorTask.objectID.id;
			СтрИсполнения.ОтправленоНаДоработку = СтрокаXDTO.returned;
			СтрИсполнения.КомментарийПроверяющего = СтрокаXDTO.checkComment;
			СтрИсполнения.НомерИтерации = ЗадачаОбъект.iterationNumber;
			Если Найти(СтрокаXDTO.executorTask.businessProcessStep, "Ответственное") <> 0 Тогда
				СтрИсполнения.КартинкаОтветственный = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НомерИтерации <= 1 Тогда 
		Элементы.НомерИтерацииИсполнения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПОзнакомление()
	
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
	Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Ознакомился'");
	Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
	Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
	
	Если Выполнена Тогда
		Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Снято с контроля.'");
		Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
	КонецЕсли;
		
	Если ЭтоТочкаМаршрута("Ознакомиться") Тогда
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Ознакомился.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПРегистрация(ЗадачаОбъект)
	
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
	
	// итерации
	Если Не ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.1.3") Тогда
		
		Если ЭтоТочкаМаршрута("Зарегистрировать") Тогда
			Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Зарегистрировано'");
			Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
			Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
			Если Выполнена Тогда
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСТР("ru = 'Зарегистрировано и отправлено.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			КонецЕсли;
		ИначеЕсли ЭтоТочкаМаршрута("Ознакомиться") Тогда
			Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Ознакомился'");
			Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
			Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
			Если Выполнена Тогда
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСТР("ru = 'Ознакомился.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		//заполнение номера итерации
		НомерИтерации = ЗадачаОбъект.iterationNumber;
		
		Если ЭтоТочкаМаршрута("Зарегистрировать") Тогда
			
			Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Зарегистрировано'");
			Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Не зарегистрировано'");
			Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
			
			Если НомерИтерации > 1 Тогда
				Элементы.ГруппаЦикл.Видимость = Истина;
			КонецЕсли;
			
			//заполнение результата утверждения
			Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма,ЗадачаОбъект.registrationResult,"Результат");
			
			Если Выполнена Тогда
				Элементы.ТекстРезультатаВыполнения.Заголовок = Строка(Результат) + ".";
				Если РезультатID = "Зарегистрировано" Тогда 
					Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
				ИначеЕсли РезультатID = "НеЗарегистрировано" Тогда 
					Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЭтоТочкаМаршрута("Ознакомиться") Тогда
			
			Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Ознакомился'");
			Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Повторить регистрацию...'");
			Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
			
			ОтправленоНаПовторнуюРегистрацию = ЗадачаОбъект.returned;
			
			Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.registrationResult,"Результат");
			
			Элементы.ГруппаРегистрация.Видимость = Истина;
			Элементы.РезультатВыполнения.Видимость = Ложь;
			Элементы.РезультатВыполненияСкрытый.Видимость = Истина;
			
			Если (РезультатID = "Зарегистрировано") Тогда 
				Элементы.РезультатРегистрации.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			ИначеЕсли РезультатID = "НеЗарегистрировано" Тогда 
				Элементы.РезультатРегистрации.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			КонецЕсли;
			
			//заголовки кнопок
			Если РезультатID = "НеЗарегистрировано" Тогда 
				Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Завершить регистрацию'");
			Иначе	
				Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
			КонецЕсли;
			
			//заполнение текста результата выполнения для выполненной задачи
			Если ОтправленоНаПовторнуюРегистрацию <> Неопределено Тогда
				Если ОтправленоНаПовторнуюРегистрацию Тогда
					Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Отправлено на повторную регистрацию.'");
					Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
				Иначе	
					Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Ознакомился.'");
					Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НомерИтерации <= 1 Тогда 
			Элементы.НомерИтерацииРегистрации.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПРассмотрение(ЗадачаОбъект)
	
	Элементы.СтраницаОсновныхЗадач.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Элементы.ГруппаТрудозатраты.Видимость = Ложь;
	Элементы.РезультатВыполнения.Видимость = Ложь;
	
	Если ЭтоТочкаМаршрута("Рассмотреть") Тогда
		Элементы.ГруппаКомандыВыполнения.Видимость = Ложь;
		Элементы.ГруппаДатаИВремяВыполнения.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполненияРассмотрение.Заголовок = НСтр("ru = 'Рассмотрено.'");
			Элементы.ТекстРезультатаВыполненияРассмотрение.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			Элементы.ТекстРезультатаВыполненияРассмотрение.Видимость = Истина;
			Элементы.ТекстРезультатаВыполнения.Видимость = Ложь;
		КонецЕсли;
		Элементы.СтраницаРезультатРассмотрения.Видимость = Истина;
		Элементы.СтраницаРезультатРассмотрения.ТолькоПросмотр = НЕ ДоступноВыполнение;
		Элементы.ГруппаКомандыВыполненияРассмотрениеРассмотрено.Видимость = ДоступноВыполнение;
		
	ИначеЕсли ЭтоТочкаМаршрута("Ознакомиться") Тогда
		Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Обработано'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Обработано.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			Элементы.СтраницаРезультатОбработки.Видимость = Истина;
		КонецЕсли;
		
		Резолюция = ЗадачаОбъект.resolution;
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.resolutionPerformer.user, "РезолюцияРассмотрел");
		РезолюцияДатаРассмотрения = ЗадачаОбъект.resolutionDate;
		
		Элементы.Резолюция.Видимость = Истина;
		Элементы.ГруппаРассмотрел.Видимость = Истина;
		Элементы.СтраницаОсновныхЗадач.Заголовок = НСтр("ru = 'Что обработать'");
		Элементы.СтраницаРезультатОбработки.Видимость = Истина;
		Элементы.СтраницаРезультатОбработки.ТолькоПросмотр = НЕ ДоступноВыполнение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПКомплексныйПроцесс(Прокси, ПроцессОбъект)
	
	Элементы.РезультатВыполнения.Видимость = Ложь;
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
	
	Если ЭтоТочкаМаршрута("Контролировать") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Проконтролировано'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Снято с контроля.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		
		Элементы.Этапы.Видимость = Истина;
		НомерСтроки = 1;
		Для Каждого Этап Из ПроцессОбъект.stages Цикл
			НоваяСтрока = Этапы.Добавить();
			НоваяСтрока.НомерСтроки = НомерСтроки;
			НоваяСтрока.ИдентификаторЭтапа = Этап.stageID;
			НоваяСтрока.ИсполнителиЭтапаСтрокой = Этап.participants;
			Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(НоваяСтрока, Этап.template, "ШаблонБизнесПроцесса");
			ДополнитьИмяШаблонаПоТипуШаблона(НоваяСтрока);
			НоваяСтрока.ПредшественникиЭтапаСтрокой = Этап.stagePredecessors;
			НоваяСтрока.ПредшественникиВариантИспользования = Этап.predecessorsUseOption;
			НоваяСтрока.БезусловныйПереходКСледующемуБылВыполнен = Этап.unconditionalPassageExecuted;
			НоваяСтрока.ЗадачаВыполнена = Этап.executed;
			Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(НоваяСтрока, Этап.businessProcess, "ЗапущенныйБизнесПроцесс");
			НоваяСтрока.Срок = Этап.duration;
			НомерСтроки = НомерСтроки + 1;
			Если Этап.Установлено("businessProcess") Тогда
				НоваяСтрока.СрокВыполнения = Этап.businessProcess.dueDate;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПРешениеВопросов(ЗадачаОбъект)
	
	// решение вопросов выполнения задач
	Если НЕ ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		ВывестиИнформмациюОНедоступностиВыполненияЗадачи();
		Возврат;
	КонецЕсли;
	
	Элементы.ЗадатьВопросАвтору.Видимость = Ложь;
	Элементы.ФормаПеренаправить.Видимость = Ложь;
	Элементы.ПредметРассмотрения.Видимость = Истина;
	Элементы.БизнесПроцессПредметаРассмотрения.Видимость = Истина;
	Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.issueTask.parentBusinessProcess, "БизнесПроцессПредметаРассмотрения", Истина);
	Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.issueTask, "ПредметРассмотрения", Истина);
	Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.issueType, "ВидВопроса");
	НомерИтерации = ЗадачаОбъект.iterationNumber;
	Элементы.Наименование.Заголовок = НСтр("ru='Наименование'");
	Элементы.ПолноеОписаниеЗадачиЗаголовок.Заголовок = 
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='История вопроса (цикл: %1)'"),НомерИтерации);
	
	Если ЭтоТочкаМаршрута("РассмотрениеИнициатором") И ВидВопросаID = "Иное" Тогда
		Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Рассмотрено'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Рассмотрено.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		Элементы.РезультатВыполнения.АвтоОтметкаНезаполненного = Истина;
		Элементы.РезультатВыполнения.АвтоВыборНезаполненного = Истина;
		
	ИначеЕсли ЭтоТочкаМаршрута("ОзнакомлениеСРезультатомРассмотрения") Тогда
		Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Закрыть вопрос'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Уточнить'");
		Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если ЗадачаОбъект.Установлено("returned") Тогда
			ВозвращеноНаДоработку = ЗадачаОбъект.returned;
		Иначе
			ВозвращеноНаДоработку = Ложь;
		КонецЕсли;
		Если ВидВопросаID = "ПереносСрока" Тогда
			Элементы.ДекорацияСтатусРассмотрения.Видимость = Истина;
			Если ЗадачаОбъект.postponingAmount = 0 Тогда
				Элементы.ДекорацияСтатусРассмотрения.Заголовок = НСтр("ru = 'Перенос срока не согласован.'");
				Элементы.ДекорацияСтатусРассмотрения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			Иначе
				Элементы.ДекорацияСтатусРассмотрения.Заголовок = НСтр("ru = 'Автор задачи перенес срок.'");
			КонецЕсли;
		КонецЕсли;
		Если Выполнена Тогда
			Если ВозвращеноНаДоработку Тогда
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСТР("ru = 'Отправлено на уточнение.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			Иначе
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСТР("ru = 'Выполнено.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВывестиИнформмациюОНедоступностиВыполненияЗадачи();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБППриглашение(ЗадачаОбъект)
	
	// БП Приглашение
	Если НЕ ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3.CORP") Тогда
		ВывестиИнформмациюОНедоступностиВыполненияЗадачи();
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
	НомерИтерации = ЗадачаОбъект.iterationNumber;
	
	Если ЭтоТочкаМаршрута("Пригласить") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Принять 
															|приглашение'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Отклонить 
															|приглашение'");
		Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		Элементы.ГруппаМестоВремя.Видимость = Истина;
		ДатаНачала = ЗадачаОбъект.activityBegin;
		ДатаОкончания = ЗадачаОбъект.activityEnd;
		МестоПроведения = ЗадачаОбъект.activityVenue;
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.invitationResult, "Результат");
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = Строка(Результат) + ".";
			Если РезультатID = "Принято" Тогда 
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			ИначеЕсли РезультатID = "НеПринято" Тогда 
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭтоТочкаМаршрута("Ознакомиться") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Подтвердить 
															|приглашения'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Повторить 
															|приглашение...'");
		Элементы.ВыполнитьЗадачуТретья.Заголовок = НСтр("ru='Отменить 
															|приглашение'");
		Если Выполнена Тогда
			Если ЗадачаОбъект.invitationReturned Тогда
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Отправлено на повторное приглашение.'");
			Иначе	
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Приглашение завершено.'");
			КонецЕсли;
		КонецЕсли;
		
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.invitationResult, "Результат");
		
		// цвет результата
		Если РезультатID = "ПринятоВсемиУчастниками" Или РезультатID = "ПринятоОбязательнымиУчастниками" Тогда
			Элементы.РезультатПриглашения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		Иначе
			Элементы.РезультатПриглашения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		КонецЕсли;
		
		// заголовки кнопок
		Если РезультатID = "ПринятоВсемиУчастниками" Тогда 
			Элементы.ВыполнитьЗадачуПервая.Видимость = Истина;
			Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
			Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
			
		ИначеЕсли РезультатID = "ПринятоОбязательнымиУчастниками" Тогда 	
			Элементы.ВыполнитьЗадачуПервая.Видимость = Истина;
			Элементы.ВыполнитьЗадачуВторая.Видимость = Истина;
			Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
			
		ИначеЕсли РезультатID = "НеПринятоОбязательнымиУчастниками"
			Или РезультатID = "НеПринятоВсемиУчастниками" Тогда 
			Элементы.ВыполнитьЗадачуПервая.Видимость = Ложь;
			Элементы.ВыполнитьЗадачуВторая.Видимость = Истина;
			Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			Элементы.ВыполнитьЗадачуТретья.Видимость = Истина;
			
		КонецЕсли;
		
		Элементы.ГруппаПриглашение.Видимость = Истина;
		Элементы.Исполнители.Видимость = Истина;
		Элементы.Исполнители.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.ИсполнителиИсполнитель.Заголовок = НСтр("ru='Участник'");
		Элементы.ИсполнителиРезультат.Видимость = Истина;
		Элементы.ИсполнителиЯвкаОбязательна.Видимость = Истина;
		Элементы.ИсполнителиДатаИсполнения.Видимость = Ложь;
		Элементы.РезультатВыполнения.Видимость = Ложь;
		Элементы.РезультатВыполненияСкрытый.Видимость = Истина;
		
		//заполнение листа приглашения
		Для каждого СтрокаРезультата из ЗадачаОбъект.invitationResults Цикл
			СтрИсполнения = Исполнители.Добавить();
			СтрИсполнения.РезультатВыполнения = СтрокаРезультата.invitationComment;
			СтрИсполнения.ДатаОтвета = СтрокаРезультата.invitationDate;
			СтрИсполнения.КартинкаСостояния = 1;
			ЗаполнитьДанныеАдресации(СтрИсполнения, СтрокаРезультата.invitationPerformer);
			Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(СтрИсполнения,СтрокаРезультата.invitationResult,"Результат");
			СтрИсполнения.ЯвкаОбязательна =  СтрокаРезультата.invitationPerformer.attendanceCompulsory;
		КонецЦикла;
		
		Если НомерИтерации <= 1 Тогда 
			Элементы.НомерИтерацииПриглашения.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли ЭтоТочкаМаршрута("Оповестить") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Ознакомился'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		Элементы.ГруппаМестоВремя.Видимость = Истина;
		Элементы.ГруппаПриглашение.Видимость = Истина;
		Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
		
		ДатаНачала = ЗадачаОбъект.activityBegin;
		ДатаОкончания = ЗадачаОбъект.activityEnd;
		МестоПроведения = ЗадачаОбъект.activityVenue;
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.invitationResult, "Результат");
		
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Ознакомился.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		
		// результат приглашения
		Если РезультатID = "ПринятоВсемиУчастниками"
			Или РезультатID = "ПринятоОбязательнымиУчастниками" Тогда 
			Результат =  НСтр("ru = 'Приглашение подтверждено с указанным местом и временем'");
			Элементы.РезультатПриглашения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		Иначе
			Результат =  НСтр("ru = 'Приглашение отменено с указанным местом и временем'");
			Элементы.РезультатПриглашения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		КонецЕсли;
		
		Если НомерИтерации <= 1 Тогда 
			Элементы.НомерИтерацииПриглашения.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИнформмациюОНедоступностиВыполненияЗадачи()
	
	Элементы.ГруппаКомандыВыполнения.Видимость = Ложь;
	Элементы.ТекстРезультатаВыполнения.Видимость = Истина;
	Элементы.ДекорацияВнимание.Видимость = Истина;
	
	Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru='Выполнение задач такого типа не поддерживается в данной версии 1С:Документооборота.'");
	Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИмяШаблонаПоТипуШаблона(СтрокаЭтапа)
	
	Дополнение = "";
	Если СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessOrderTemplate"	Тогда Дополнение = НСтр("ru = 'Поручение'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessConsiderationTemplate" Тогда Дополнение = НСтр("ru = 'Рассмотрение'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessRegistrationTemplate" Тогда Дополнение = НСтр("ru = 'Регистрация'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessApprovalTemplate" 	Тогда Дополнение = НСтр("ru = 'Согласование'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessConfirmationTemplate" Тогда Дополнение = НСтр("ru = 'Утверждение'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessPerformanceTemplate" 	Тогда Дополнение = НСтр("ru = 'Исполнение'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessAcquaintanceTemplate" Тогда Дополнение = НСтр("ru = 'Ознакомление'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMCompoundBusinessProcessTemplate" 	Тогда Дополнение = НСтр("ru = 'Составной процесс'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMComplexBusinessProcessTemplate" 		Тогда Дополнение = НСтр("ru = 'Комплексный процесс'");
	КонецЕсли;
	Если Не ПустаяСтрока(Дополнение) Тогда
		СтрокаЭтапа.ШаблонБизнесПроцесса = Дополнение + ": " + СтрокаЭтапа.ШаблонБизнесПроцесса;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуЗадачи(СтрокаЗадачи,Задача)
	
	ЗаполнитьДанныеАдресации(СтрокаЗадачи, Задача.performer);
	Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,Задача,"Задача");
	СтрокаЗадачи.СрокИсполнения = Задача.dueDate;
	СтрокаЗадачи.РезультатВыполнения = Задача.executionComment;
	СтрокаЗадачи.ДатаИсполнения = Задача.endDate;
	СтрокаЗадачи.Выполнена = Задача.executed;
	СтрокаЗадачи.ТочкаМаршрута = Задача.businessProcessStep;
	СтрокаЗадачи.КартинкаСостояния = ?(СтрокаЗадачи.Выполнена, 1, 0);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗадачиБизнесПроцесса(Прокси)
	
	Запрос = СоздатьОбъект(Прокси, "DMGetTasksTreeRequest");
	Отбор = СоздатьОбъект(Прокси, "DMGetTasksTreeQuery");
	ОбъектXDTO = СоздатьОбъект(Прокси,"DMObject");
	ОбъектXDTO.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ПроцессID, ПроцессТип);
	ОбъектXDTO.name = Процесс;
	
	Отбор.businessProcess.Добавить(ОбъектXDTO);
	
	Запрос.query = Отбор;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ.businessProcesses[0].tasks;
	
КонецФункции

&НаСервере
Процедура ДополнитьИмяПредметаПоТипуОбъекта(ИмяПредмета, ТипОбъекта)
	
	Если ТипОбъекта = "DMInternalDocument" Тогда
		ИмяТипаПредмета = НСтр("ru = 'Внутренний документ'");
	ИначеЕсли ТипОбъекта = "DMIncomingDocument" Тогда
		ИмяТипаПредмета = НСтр("ru = 'Входящий документ'");
	ИначеЕсли ТипОбъекта = "DMOutgoingDocument" Тогда
		ИмяТипаПредмета = НСтр("ru = 'Исходящий документ'");
	ИначеЕсли ТипОбъекта = "DMFile" Тогда
		ИмяТипаПредмета = НСтр("ru = 'Файл'");
	ИначеЕсли ТипОбъекта = "DMActivity" Тогда
		ИмяТипаПредмета = НСтр("ru = 'Мероприятие'");
	ИначеЕсли ТипОбъекта = "DMIncomingEMail" Тогда
		ИмяТипаПредмета = НСтр("ru = 'Входящее письмо'");
	ИначеЕсли ТипОбъекта = "DMOutgoingEMail" Тогда
		ИмяТипаПредмета = НСтр("ru = 'Исходящее письмо'");
	ИначеЕсли ТипОбъекта = "DMProject" Тогда
		ИмяТипаПредмета = НСтр("ru = 'Проект'");
	ИначеЕсли ТипОбъекта = "DMProjectTask" Тогда
		ИмяТипаПредмета = НСтр("ru = 'Проектная задача'");
	ИначеЕсли ТипОбъекта = "DMDiscussionMessage" Тогда
		ИмяТипаПредмета = НСтр("ru = 'Сообщение'");
	ИначеЕсли Лев(ТипОбъекта, 2) <> "DM" Тогда
		КлассТип = ИнтеграцияС1СДокументооборот.РазложитьСтрокуВМассивПодстрок(ТипОбъекта,".");
		Если Найти(КлассТип[0],"Документ") <> 0 Тогда
			КлассТип[0] = "Документы";
		ИначеЕсли Найти(КлассТип[0],"Справочник") <> 0 Тогда
			КлассТип[0] = "Справочники";
		ИначеЕсли Найти(КлассТип[0],"БизнесПроцесс") <> 0 Тогда
			КлассТип[0] = "БизнесПроцессы";
		ИначеЕсли Найти(КлассТип[0],"Задача") <> 0 Тогда
			КлассТип[0] = "Задачи";
		КонецЕсли;
		ИмяТипаПредмета = " (" + Метаданные[КлассТип[0]][КлассТип[1]].Синоним + ")";
	КонецЕсли;
	
	ИмяПредмета = СтрШаблон("%1 (%2)", ИмяПредмета, ИмяТипаПредмета);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакЗадачаПросрочена()
	Если СрокИсполнения < ТекущаяДатаСеанса() И СрокИсполнения <> '00010101000000' Тогда 
		ЗадачаПросрочена = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеЗадач(Знач УсловноеОформление)

	// установка оформления для просроченных задач
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнители.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнители.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = КонецДня(ТекущаяДатаСеанса());
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнители.Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ИсполнителиСрокИсполнения");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Этапы.СрокВыполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Этапы.СрокВыполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбораДанных.Использование = Истина;
		
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Этапы.ЗапущенныйБизнесПроцессID");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ЭтапыШаблонБизнесПроцесса");
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандДереваПриложений()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ОткрытьФайлДляПросмотра.Доступность = Ложь;
		Элементы.Редактировать.Доступность = Ложь;
		Элементы.ЗакончитьРедактирование.Доступность = Ложь;
		Элементы.УдалитьПредмет.Доступность = Ложь;
	Иначе
		Если ТекущиеДанные.ПредметТип = "DMFile" Тогда
			Элементы.ОткрытьФайлДляПросмотра.Доступность = Истина;
			Элементы.Редактировать.Доступность = ДоступенЗахватФайлов И
				(Не ТекущиеДанные.Редактируется Или ТекущиеДанные.РедактируетсяТекущимПользователем);
			Элементы.ЗакончитьРедактирование.Доступность = ДоступенЗахватФайлов И
				ТекущиеДанные.РедактируетсяТекущимПользователем;
		Иначе
			Элементы.ОткрытьФайлДляПросмотра.Доступность = Ложь;
			Элементы.Редактировать.Доступность = Ложь;
			Элементы.ЗакончитьРедактирование.Доступность = Ложь;
		КонецЕсли;
		Элементы.УдалитьПредмет.Доступность = ТекущиеДанные.ДоступноУдаление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеАдресации(Приемник, ИсполнительXDTO)
	
	Если ИсполнительXDTO.Установлено("user") Тогда
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.user,"Исполнитель")
	ИначеЕсли ИсполнительXDTO.Установлено("role") Тогда
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.role,"Исполнитель")
	КонецЕсли;
	
	Если ИсполнительXDTO.Установлено("mainAddressingObject") Тогда
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.mainAddressingObject, "ОсновнойОбъектАдресации");
	КонецЕсли;
	
	Если ИсполнительXDTO.Установлено("secondaryAddressingObject") Тогда
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.secondaryAddressingObject, "ДополнительныйОбъектАдресации");
	КонецЕсли;
	
	Исполнитель = Исполнитель 
		+ ?(ПустаяСтрока(ОсновнойОбъектАдресации), "", ", " + ОсновнойОбъектАдресации) 
		+ ?(ПустаяСтрока(ДополнительныйОбъектАдресации), "", ", " + ДополнительныйОбъектАдресации); 
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьXDTOПоОбъектномуРеквизиту(Прокси, ИмяРеквизита, ИмяСвойстваОбъекта, ОбъектXDTO)
	
	СвойствоОбъекта = СоздатьОбъект(Прокси, ЭтаФорма[ИмяРеквизита+"Тип"]);
	СвойствоОбъекта.name = ЭтаФорма[ИмяРеквизита];
	СвойствоОбъекта.ObjectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ЭтаФорма[ИмяРеквизита+"ID"], ЭтаФорма[ИмяРеквизита+"Тип"]); 
	
	ОбъектXDTO[ИмяСвойстваОбъекта] = СвойствоОбъекта;
	
КонецПроцедуры

&НаСервере
Функция СоздатьОбъект(Прокси, Тип)
	
	Возврат ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, Тип);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗадачуОповеститьЗакрытьФорму(НомерКнопки)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗадачуОповеститьЗакрытьФормуЗавершение",
		ЭтаФорма,
		НомерКнопки);
		
	Если ФактическийИсполнительЗадач = "userChoice"
		И ИсполнительТип = "DMUser"
		И ИсполнительID <> ТекущийПользовательID Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Исполнитель", Исполнитель);
		ПараметрыФормы.Вставить("ТекущийПользователь", ТекущийПользователь);
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИсполнителяЗадачи",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе // без вопроса
			
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ФактическийИсполнительЗадач);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуОповеститьЗакрытьФормуЗавершение(ВыбранныйИсполнитель, НомерКнопки) Экспорт
	
	Если ВыбранныйИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполненияЗадачи = Новый Структура;
	РезультатВыполненияЗадачи.Вставить("НомерКнопки", НомерКнопки);
	РезультатВыполненияЗадачи.Вставить("ВыбранныйИсполнитель", ВыбранныйИсполнитель);
	РезультатВыполненияЗадачи.Вставить("ПредметСсылка", Неопределено);
	
	Если ЗаписатьОбъект(РезультатВыполненияЗадачи) Тогда
		
		Если ЗначениеЗаполнено(РезультатВыполненияЗадачи.ПредметСсылка) Тогда
			ОповеститьОбИзменении(РезультатВыполненияЗадачи.ПредметСсылка);
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("id", ПроцессID);
		ПараметрыОповещения.Вставить("Стартован", Истина);
		
		// Соберем предметы.
		Предметы = Новый Массив;
		Если ДоступнаМультипредметность Тогда
			ЭлементыДерева = ДеревоПриложений.ПолучитьЭлементы();
			Для Каждого СтрокаПредмета Из ЭлементыДерева Цикл
				Если СтрокаПредмета.РольПредмета = "Основной" Тогда
					ОписаниеПредмета = Новый Структура;
					ОписаниеПредмета.Вставить("ID", СтрокаПредмета.ПредметID);
					ОписаниеПредмета.Вставить("Тип", СтрокаПредмета.ПредметТип);
					Предметы.Добавить(ОписаниеПредмета);
				КонецЕсли;
			КонецЦикла;
		Иначе // один предмет
			ОписаниеПредмета = Новый Структура;
			ОписаниеПредмета.Вставить("ID", ПредметID);
			ОписаниеПредмета.Вставить("Тип", ПредметТип);
			Предметы.Добавить(ОписаниеПредмета);
		КонецЕсли;
		ПараметрыОповещения.Вставить("Предметы", Предметы);
		
		Оповестить("Запись_ДокументооборотБизнесПроцесс", ПараметрыОповещения, ВладелецФормы);
		
		ПараметрыОповещения = Новый Структура("name, id, type", Наименование, ID, Тип);
		Оповестить("Запись_ДокументооборотЗадача", ПараметрыОповещения, ВладелецФормы);
		
		Модифицированность = Ложь;
		Закрыть();
		Если ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Источник", Представление);
			ПараметрыФормы.Вставить("ИсточникID", ID);
			ПараметрыФормы.Вставить("ИсточникТип", Тип);
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы", ПараметрыФормы, ID);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Записывает задачу, возможно, выполняя ее.
//
// Параметры:
//   РезультатВыполненияЗадачи - Неопределено, если задача просто записывается, или
//                       - Структура - результат выполнения со свойствами:
//     НомерКнопки - Число - номер кнопки, выполняющей задачу.
//     ВыбранныйИсполнитель - Строка - currentUser - текущий пользователь, или
//                                   - taskPerformer - фактический исполнитель задачи.
//     ПредметСсылка - ЛюбаяСсылка - неявно возвращаемый параметр, предмет задачи,
//       требующий оповещения об изменении.
//
Функция ЗаписатьОбъект(РезультатВыполненияЗадачи = Неопределено)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	ПроцессXDTO = СоздатьОбъект(Прокси, ПроцессТип);
	ПроцессXDTO.name = Процесс;
	ПроцессXDTO.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ПроцессID, ПроцессТип);
	
	Задача = СоздатьОбъект(Прокси, Тип);
	
	Если ДоступнаМультипредметность Тогда
		ЗаполнитьЗадачуПредметамиИзДереваПриложений(Прокси, ДеревоПриложений.ПолучитьЭлементы(), Задача);
	КонецЕсли;
	
	Задача.executed = ?(РезультатВыполненияЗадачи <> Неопределено, Истина, Выполнена);
	Задача.parentBusinessProcess = ПроцессXDTO;
	Задача.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, Тип);
	Задача.name = Наименование;
	Задача.number = Номер;
	Задача.description = Описание;
	Задача.beginDate = Дата;
	Задача.dueDate = СрокИсполнения;
	Задача.endDate = ДатаИсполнения;
	Задача.executionComment = РезультатВыполнения;
	Задача.businessProcessStep = ТочкаМаршрута;
	ЗаполнитьXDTOПоОбъектномуРеквизиту(Прокси, "Важность", "importance", Задача);
	
	// Заполним результат и исполнителя задачи при выполнении.
	Если РезультатВыполненияЗадачи <> Неопределено Тогда
		
		ЗаполнитьСвойстваОбъектаПоТипуЗадачи(Прокси, Задача, РезультатВыполненияЗадачи.НомерКнопки);
	
		Если РезультатВыполненияЗадачи.ВыбранныйИсполнитель = "currentUser" Тогда
			Обработки.ИнтеграцияС1СДокументооборот.СоздатьУчастникаБизнесПроцесса(
				Прокси, Задача.performer, ЭтаФорма, "ТекущийПользователь", "ОбъектАдресации");
		Иначе
			Обработки.ИнтеграцияС1СДокументооборот.СоздатьУчастникаБизнесПроцесса(
				Прокси, Задача.performer, ЭтаФорма, "Исполнитель", "ОбъектАдресации");
		КонецЕсли;
			
	Иначе // обычная запись
		
		Обработки.ИнтеграцияС1СДокументооборот.СоздатьУчастникаБизнесПроцесса(
			Прокси, Задача.performer, ЭтаФорма, "Исполнитель", "ОбъектАдресации");
		
	КонецЕсли;
	
	Обработки.ИнтеграцияС1СДокументооборот.СформироватьДополнительныеСвойства(Прокси, Задача, ЭтаФорма);
	
	Ответ = ИнтеграцияС1СДокументооборот.ЗаписатьОбъект(Прокси, Задача);
	
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		
		Возврат Ложь;
		
	Иначе // Изменение состояния согласования требует особой обработки с оповещением предмета.
		
		Если Тип = "DMBusinessProcessApprovalTaskApproval" 
			И РезультатВыполненияЗадачи <> Неопределено Тогда
			
			НовоеСостояние = Неопределено;
			Если РезультатВыполненияЗадачи.НомерКнопки = 3 Тогда
				НовоеСостояние = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован;
			Иначе
				ДанныеПроцесса = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси,
					ПроцессТип,
					ПроцессID,
					СтрРазделить("completed", ""));
				Если ДанныеПроцесса.objects[0].completed = Истина Тогда
					НовоеСостояние = Перечисления.СостоянияСогласованияВДокументообороте.Согласован;
				КонецЕсли;
			КонецЕсли;
			Если НовоеСостояние <> Неопределено Тогда
				Для Каждого СтрокаПредмета Из ДеревоПриложений.ПолучитьЭлементы() Цикл
					Если (Не ДоступнаМультипредметность Или СтрокаПредмета.РольПредмета = "Основной")
						И ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(СтрокаПредмета.ПредметТип) Тогда
						ИнтеграцияС1СДокументооборотВызовСервера.ПриИзмененииСостоянияСогласования(
							СтрокаПредмета.ПредметID,
							СтрокаПредмета.ПредметТип,
							НовоеСостояние,
							Ложь,
							РезультатВыполненияЗадачи.ПредметСсылка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
			
		Модифицированность = Ложь;
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Заполняет объект XDTO задачи бизнес-процесса предметами из дерева приложений формы.
//
&НаСервере
Процедура ЗаполнитьЗадачуПредметамиИзДереваПриложений(Прокси, СтрокиДерева, Задача)
	
	targetCollection = ИнтеграцияС1СДокументооборот.СоздатьОбъект(
		Прокси, "DMBusinessProcessTaskTargetCollection");
		
	Для каждого СтрокаПредмета из СтрокиДерева Цикл
		
		target = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBusinessProcessTaskTarget");
		
		target.name = СтрокаПредмета.ИмяПредмета;
		
		target.role = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBusinessProcessTargetRole");
		target.role.name = СтрокаПредмета.РольПредмета;
		target.role.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		target.role.objectId.id = СтрокаПредмета.РольПредмета;
		target.role.objectId.type = "DMBusinessProcessTargetRole";
		
		target.target = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, СтрокаПредмета.ПредметТип);
		target.target.name = СтрокаПредмета.Предмет;
		target.target.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		target.target.objectId.id = СтрокаПредмета.ПредметID;
		target.target.objectId.type = СтрокаПредмета.ПредметТип;
		
		target.allowDeletion = СтрокаПредмета.ДоступноУдаление;
		
		targetCollection.items.Добавить(target);
		
	КонецЦикла;
	
	Задача.targets = targetCollection;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвойстваОбъектаПоТипуЗадачи(Прокси, Задача, НомерКнопки)
	
	ИмяТипа = Задача.Тип().Имя;
	
	Если ИмяТипа = "DMBusinessProcessOrderTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessApprovalTaskApproval" Тогда
		Ответ = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMApprovalResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = "Согласовано";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "Согласовано", "DMApprovalResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = "Согласовано с замечаниями";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "СогласованоСЗамечаниями", "DMApprovalResult");
		ИначеЕсли НомерКнопки = 3 Тогда
			Ответ.name = "Не согласовано";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "НеСогласовано", "DMApprovalResult");
		КонецЕсли;
		Задача.approvalResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessApprovalTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConfirmationTaskConfirmation" Тогда
		Ответ = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMConfirmationResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = "Утверждено";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "Утверждено", "DMConfirmationResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = "Не утверждено";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "НеУтверждено", "DMConfirmationResult");
		КонецЕсли;
		Задача.confirmationResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConfirmationTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessRegistrationTaskRegistration" Тогда
		Ответ = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMRegistrationResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = "Зарегистрировано";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "Зарегистрировано", "DMRegistrationResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = "Не зарегистрировано";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "НеЗарегистрировано", "DMRegistrationResult");
		КонецЕсли;
		Задача.registrationResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessRegistrationTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessPerfomanceTaskCheckup" Тогда
		Задача.iterationNumber = НомерИтерации;
		Для каждого Строка из Исполнители Цикл
			СтрокаXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMBusinessProcessPerfomanceTaskCheckupResult");
			СтрокаXDTO.returned = Строка.ОтправленоНаДоработку;
			СтрокаXDTO.checkComment = Строка.КомментарийПроверяющего;
			ЗадачаИсточник = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси, Строка.ЗадачаТип, Строка.ЗадачаID);
			ЗадачаПриемник = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMBusinessProcessTask");
			ИнтеграцияС1СДокументооборот.ЗаполнитьЗначенияСвойствXDTO(Прокси, ЗадачаПриемник, ЗадачаИсточник.objects[0]);
			СтрокаXDTO.executorTask = ЗадачаПриемник;
			Задача.checkResults.Добавить(СтрокаXDTO);
		КонецЦИкла
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConsiderationTaskAcquaint" Тогда
		Задача.resolution = Резолюция;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessIssuesSolutionTaskAnswer" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessInvitationTaskInvitation" Тогда
		Ответ = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMInvitationResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = "Принято";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "Принято", "DMInvitationResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = "Не принято";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "НеПринято", "DMInvitationResult");
		КонецЕсли;
		Задача.invitationResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessInvitationTaskAcquaint" Тогда
		Если НомерКнопки = 1 Тогда
			Задача.invitationAccepted = Истина;
		ИначеЕсли НомерКнопки = 2 Тогда
			Задача.invitationReturned = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет дерево приложений при изменении предмета в других формах.
//
&НаСервере
Процедура ОбработкаОповещенияЗаписьПредмета(Параметры)
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Новый Структура("id, type", Параметры.id, Параметры.type));
	
	МассивКолонок = Новый Массив;
	Если ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(Параметры.type) Тогда
		МассивКолонок.Добавить("files");
		МассивКолонок.Добавить("externalObject");
	ИначеЕсли Параметры.type = "DMFile" Тогда
		МассивКолонок.Добавить("extension");
		МассивКолонок.Добавить("modificationDateUniversal");
		МассивКолонок.Добавить("size");
	КонецЕсли;
	
	Если ДоступнаМультипредметность Тогда // найдем нужную строку и обновим ее
		
		Дерево = РеквизитФормыВЗначение("ДеревоПриложений");
		
		НайденнаяСтрока = Неопределено;
		Для каждого СтрокаПредмета из Дерево.Строки Цикл
			Если Параметры.id = СтрокаПредмета.ПредметID
				И НЕ ЗначениеЗаполнено(СтрокаПредмета.Ссылка) Тогда
				НайденнаяСтрока = СтрокаПредмета; 
			Иначе
				Для каждого СтрокаФайла из СтрокаПредмета.Строки Цикл
					Если Параметры.id = СтрокаФайла.ПредметID Тогда
						НайденнаяСтрока = СтрокаФайла; 
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НайденнаяСтрока <> Неопределено Тогда
				Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
				Ответ = ИнтеграцияС1СДокументооборот.ПолучитьОбъекты(Прокси, МассивОбъектов, МассивКолонок);
				ЗаполнитьСтрокуПредметаЕгоСвойствами(НайденнаяСтрока, Ответ.objects[0]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(Дерево, "ДеревоПриложений");
		
	Иначе // мультипредметности нет, перезаполним дерево целиком
		
		Если Параметры.id <> ID Тогда
			Возврат;
		КонецЕсли;
		
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		Ответ = ИнтеграцияС1СДокументооборот.ПолучитьОбъекты(Прокси, МассивОбъектов, МассивКолонок);
		
		ПредметXDTO = Ответ.objects[0];
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ПредметXDTO, "Предмет");
		ЗаполнитьДеревоПриложенийПоПредмету(ПредметXDTO);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПринятьЗадачуКИсполнениюНаСервере()
	
	ЗадачиКИсполнению = новый Массив;
	ЗадачиКИсполнению.Добавить(ID);
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Возврат ИнтеграцияС1СДокументооборот.ПринятьЗадачуКИсполнению(Прокси, ЗадачиКИсполнению);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыполнитьПрограммноДобавленнуюКоманду(Команда)
	
	// Вызовем обработчик команды, которая добавлена программно при создании формы на сервере.
	ИнтеграцияС1СДокументооборотКлиентПереопределяемый.ВыполнитьПрограммноДобавленнуюКоманду(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредмет(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПредметЗавершение", ЭтаФорма);
	ИнтеграцияС1СДокументооборотКлиент.ДобавитьПредмет(ЭтаФорма, "Вспомогательный", ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредметыИФайлыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, 
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьПредмет(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредметЗавершение(ОписаниеПредмета, ПараметрыОбработчика) Экспорт
	
	Если ОписаниеПредмета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПредметЗавершениеНаСервере(ОписаниеПредмета);
	Модифицированность = Истина;
	ОбработатьФормуПоНаличиюПредметов();
	
	// Развернем дерево и установим фокус на последнюю строку с добавленным предметом.
	ЭлементыДерева = ДеревоПриложений.ПолучитьЭлементы();
	Для каждого ЭлементДерева из ЭлементыДерева Цикл
		ПоследнийИдентификатор = ЭлементДерева.ПолучитьИдентификатор();
		Элементы.ДеревоПриложений.Развернуть(ПоследнийИдентификатор);
	КонецЦикла;
	Элементы.ДеревоПриложений.ТекущаяСтрока = ПоследнийИдентификатор;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПредметЗавершениеНаСервере(ОписаниеПредмета)
	
	Дерево = РеквизитФормыВЗначение("ДеревоПриложений");
	
	СтрокаПредмета = Дерево.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПредмета, ОписаниеПредмета);
	СтрокаПредмета.ДоступноУдаление = Истина;
	Если ЗначениеЗаполнено(СтрокаПредмета.Ссылка) Тогда
		СтрокаПредмета.Представление = Строка(СтрокаПредмета.Ссылка);
	КонецЕсли;
	УстановитьКартинкуПредмета(СтрокаПредмета);
	ДополнитьДеревоПриложенийФайламиПредмета(СтрокаПредмета);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПриложений");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПредмет(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДеревоПриложений.ПолучитьЭлементы().Удалить(ТекущиеДанные);
	КонецЕсли;
	
	ОбработатьФормуПоНаличиюПредметов();
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ПредметТип <> "DMFile" Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.Редактируется И Не ТекущиеДанные.РедактируетсяТекущимПользователем Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Этот файл сейчас редактируется другим пользователем.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Команда", "Редактировать");
	ПараметрыОповещения.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КомандыРедактированияЗавершение", ЭтаФорма, ПараметрыОповещения);
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьФайл(ТекущиеДанные.ПредметID, ТекущиеДанные.Предмет,
		ТекущиеДанные.Расширение, УникальныйИдентификатор, Ложь, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ПредметТип <> "DMFile"
		Или Не ТекущиеДанные.РедактируетсяТекущимПользователем Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Команда", "ЗакончитьРедактирование");
	ПараметрыОповещения.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КомандыРедактированияЗавершение", ЭтаФорма, ПараметрыОповещения);
	
	ИнтеграцияС1СДокументооборотКлиент.ЗакончитьРедактированиеФайла(
		ТекущиеДанные.ПредметID,
		ТекущиеДанные.Предмет,
		ТекущиеДанные.Расширение,
		УникальныйИдентификатор,
		ОписаниеОповещения);
	
КонецПроцедуры

// Общее завершение команд редактирования.
&НаКлиенте
Процедура КомандыРедактированияЗавершение(Результат, Параметры) Экспорт
	
	ТекущиеДанные = ДеревоПриложений.НайтиПоИдентификатору(Параметры.ИдентификаторСтроки);
	Если Параметры.Команда = "Редактировать" Тогда
		ТекущиеДанные.Редактируется = Истина;
		ТекущиеДанные.РедактируетсяТекущимПользователем = Истина;
	Иначе // "ЗакончитьРедактирование"
		ТекущиеДанные.Редактируется = Ложь;
		ТекущиеДанные.РедактируетсяТекущимПользователем = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью элементов формы в зависимости от наличия предметов.
&НаКлиенте
Процедура ОбработатьФормуПоНаличиюПредметов() 
	
	ЕстьПредметы = (ДеревоПриложений.ПолучитьЭлементы().Количество() <> 0);
	Если ЕстьПредметы Тогда
		Если Элементы.ГруппаПриложения.ТекущаяСтраница = Элементы.СтраницаНетПредметов Тогда
			Элементы.ГруппаПриложения.ТекущаяСтраница = Элементы.СтраницаЕстьПредметы;
		КонецЕсли;
	Иначе
		Если Элементы.ГруппаПриложения.ТекущаяСтраница = Элементы.СтраницаЕстьПредметы Тогда
			Элементы.ГруппаПриложения.ТекущаяСтраница = Элементы.СтраницаНетПредметов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти