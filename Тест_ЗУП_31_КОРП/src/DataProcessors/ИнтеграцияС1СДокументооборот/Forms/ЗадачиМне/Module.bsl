&НаКлиенте
Перем ДетальныеСведенияОЗадачах;
&НаКлиенте
Перем НомерАктивизированнойСтроки;
&НаКлиенте
Перем СохраненныеКомментарии;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервереФормРазмещаемыхНаРабочемСтоле(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Автообновление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтеграцияС1СДокументооборот", "Автообновление", Истина);
	ПериодАвтообновления = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтеграцияС1СДокументооборот", "ПериодАвтообновления", 60);
	КаталогДляСохраненияДанных = ИнтеграцияС1СДокументооборотВызовСервера.ЛокальныйКаталогФайлов();
	
	Элементы.ГруппаОсновная.Доступность = Ложь;
	Элементы.Автообновление.Доступность = Ложь;
	
	АдресВебСервисаЗаполнен = 
		ЗначениеЗаполнено(Константы.АдресВебСервиса1СДокументооборот.Получить());
	
	УстановитьОформлениеЗадач(ЭтаФорма.УсловноеОформление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументооборотЗадача" И Источник = ЭтаФорма Тогда
		ОбновитьСписокЗадачЧастично();
		РазвернутьГруппыЗадач();
	КонецЕсли;
	
	Если ИмяСобытия = "ИнтеграцияС1СДокументооборотом_УспешноеПодключение" И Источник <> ЭтаФорма Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДетальныеСведенияОЗадачах = Новый Соответствие;
	НомерАктивизированнойСтроки = Неопределено;
	СохраненныеКомментарии = Новый Соответствие;
	
	Элементы.ГруппаПросмотрЗадачи.Видимость = Не НеПоказыватьОбластьПросмотраЗадачи;
	Элементы.ПоказатьОбластьПросмотраЗадачи.Пометка = Не НеПоказыватьОбластьПросмотраЗадачи;
	
	Если АдресВебСервисаЗаполнен Тогда
		ПроверитьПодключение();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтаФорма);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборот.Форма.АвторизацияВ1СДокументооборот";
	 
	ОткрытьФорму(ИмяФормыПараметров,, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбработатьФормуСогласноВерсииСервиса();
		Если ВерсияСервиса <> "0.0.0.0" Тогда
			РазвернутьГруппыЗадач();
			УстановитьПометкуРежимаГруппировки();
			#Если Не ВебКлиент Тогда
			Если ДоступенФункционалЗадачи Тогда
				Элементы.Автообновление.Доступность = Истина;
				Если Автообновление Тогда
					ПодключитьОбработчикОжидания("Автообновление", ПериодАвтообновления);
				КонецЕсли;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	// Сохраним текст комментария при уходе фокуса.
	Если Элементы.Задачи.ТекущиеДанные <> Неопределено
		И Не Элементы.Задачи.ТекущиеДанные.Группировка Тогда
		
		ЗадачаID = Элементы.Задачи.ТекущиеДанные.ЗадачаID;
		СохраненныйКомментарий = СохраненныеКомментарии.Получить(ЗадачаID);
		Если СохраненныйКомментарий <> Неопределено
			Или Не ПустаяСтрока(Текст) Тогда
			СохраненныеКомментарии.Вставить(ЗадачаID, Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачи

&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Ложь;
	ТекущиеДанные = Элементы.Задачи.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачиВыборЗавершение", ЭтаФорма, ТекущиеДанные.ЗадачаID);
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
		ТекущиеДанные.ЗадачаТип, ТекущиеДанные.ЗадачаID, ЭтаФорма,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиВыборЗавершение(Результат, ЗадачаID) Экспорт
	
	Если Элементы.Задачи.Отображение = ОтображениеТаблицы.Список Тогда
		СтрокиЗадачи = Задачи.ПолучитьЭлементы();
		Для Каждого СтрокаЗадачи из СтрокиЗадачи Цикл
			Если СтрокаЗадачи.ЗадачаID = ЗадачаID Тогда
				СтрокаЗадачи.ДатаПолученияДетальныхСведений = Неопределено;
				АктуализироватьДетальныеСведения(СтрокаЗадачи);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	Иначе // группировка
		Для каждого ГруппаДерева из Задачи.ПолучитьЭлементы() Цикл
			СтрокиЗадачи = ГруппаДерева.ПолучитьЭлементы();
			Для каждого СтрокаЗадачи из СтрокиЗадачи Цикл
				Если СтрокаЗадачи.ЗадачаID = ЗадачаID Тогда
					СтрокаЗадачи.ДатаПолученияДетальныхСведений = Неопределено;
					АктуализироватьДетальныеСведения(СтрокаЗадачи);
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПриАктивизацииСтроки(Элемент)
	
	Если Не НеПоказыватьОбластьПросмотраЗадачи 
		И НомерАктивизированнойСтроки <> Элемент.ТекущаяСтрока Тогда
		
		НомерАктивизированнойСтроки = Элемент.ТекущаяСтрока;
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьДетальныеСведения", 0.1, Истина);
		СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
		Если СтрокаЗадачи = Неопределено Или СтрокаЗадачи.Группировка Тогда
			Элементы.ПринятьКИсполнению.Доступность = Ложь;
		Иначе
			Элементы.ПринятьКИсполнению.Доступность = Не СтрокаЗадачи.ПринятаКИсполнению;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПриложений

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаДерева = Элемент.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.Тип = "DMFile" Тогда // открытие файла на просмотр
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьФайл(СтрокаДерева.ID, СтрокаДерева.Наименование, 
			СтрокаДерева.Расширение, УникальныйИдентификатор);
			
	ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда // объект ИС
		ПараметрыФормы = Новый Структура("Ключ", СтрокаДерева.Ссылка);
		ПоказатьЗначение(, СтрокаДерева.Ссылка);
		
	Иначе // открытие карточки объекта ДО
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(СтрокаДерева.Тип, СтрокаДерева.ID, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПриАктивизацииСтроки(Элемент)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	СтрокаПредмета = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если СтрокаЗадачи = Неопределено 
		Или СтрокаЗадачи.Группировка 
		Или СтрокаПредмета = Неопределено Тогда
		Элементы.КонтекстОткрытьПредмет.Доступность = Ложь;
		Элементы.КонтекстОткрытьИсходныйДокумент.Доступность = Ложь;
	Иначе
		Элементы.КонтекстОткрытьПредмет.Доступность = Истина;
		Если СтрокаПредмета.Тип = "DMFile" Тогда
			СтрокаПредмета = СтрокаПредмета.ПолучитьРодителя();
		КонецЕсли;
		Если СтрокаПредмета <> Неопределено Тогда
			Элементы.КонтекстОткрытьИсходныйДокумент.Доступность = 
				ЗначениеЗаполнено(СтрокаПредмета.Ссылка);
		Иначе
			Элементы.КонтекстОткрытьИсходныйДокумент.Доступность = 
				Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Модифицированность = Ложь;
	ДетальныеСведенияОЗадачах = Новый Соответствие;
	ОбновитьСписокЗадачНаСервере();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	
	Модифицированность = Ложь;
	ТекущиеДанные = Элементы.Задачи.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ДетальныеСведенияОЗадачах.Удалить(ТекущиеДанные.ЗадачаID);
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
		ТекущиеДанные.ЗадачаТип, ТекущиеДанные.ЗадачаID, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроцесс(Команда)
	
	Модифицированность = Ложь;
	
	ТекущиеДанные = Элементы.Задачи.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
		ТекущиеДанные.ПроцессТип,
		ТекущиеДанные.ПроцессID,
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСвязанныйОбъект(Команда)
	
	// Создать_Справочник_Контрагенты__1 -> Справочник.Контрагенты_1
	ИмяКоманды = Команда.Имя;
	ИмяТипа = Сред(ИмяКоманды, 9);
	ИмяТипа = СтрЗаменить(ИмяТипа, "___", "~");
	ИмяТипа = СтрЗаменить(ИмяТипа, "__", "&");
	ИмяТипа = СтрЗаменить(ИмяТипа, "_", ".");
	ИмяТипа = СтрЗаменить(ИмяТипа, "&", "_");
	ИмяТипа = СтрЗаменить(ИмяТипа, "~", "._");
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено 
		Или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	СтрокаПредмета = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если СтрокаПредмета = Неопределено Тогда
		ЭлементыДереваПриложений = ДеревоПриложений.ПолучитьЭлементы();
		Если ЭлементыДереваПриложений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		СтрокаПредмета = ЭлементыДереваПриложений[0];
	Иначе
		СтрокаРодителя = СтрокаПредмета.ПолучитьРодителя();
		Если СтрокаРодителя <> Неопределено Тогда
			СтрокаПредмета = СтрокаРодителя;
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.СоздатьИнтегрированныйОбъектПоТипу(
		ЭтаФорма, ИмяТипа, СтрокаПредмета.Тип, СтрокаПредмета.ID);
	СтрокаЗадачи.ДатаПолученияДетальныхСведений = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроцесс(Команда)
	
	Модифицированность = Ложь;
	
	ТекущиеДанные = Элементы.Задачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ГлавнаяЗадача = Новый Структура;
	ГлавнаяЗадача.Вставить("name", ТекущиеДанные.Задача);
	ГлавнаяЗадача.Вставить("id", ТекущиеДанные.ЗадачаID);
	ГлавнаяЗадача.Вставить("type", ТекущиеДанные.ЗадачаТип);
	
	Оповещение = Новый ОписаниеОповещения("СоздатьПроцессЗавершение", ЭтаФорма);
	ИнтеграцияС1СДокументооборотКлиент.СоздатьБизнесПроцесс( ,ГлавнаяЗадача, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмо(Команда)

	Модифицированность = Ложь;
	
	ТекущиеДанные = Элементы.Задачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Предмет", новый Структура);
	
	ПараметрыФормы.Предмет.Вставить("name", ТекущиеДанные.Задача);
	ПараметрыФормы.Предмет.Вставить("id", ТекущиеДанные.ЗадачаID);
	ПараметрыФормы.Предмет.Вставить("type", ТекущиеДанные.ЗадачаТип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящееПисьмо", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбластьПросмотраЗадачи(Команда)
	
	НеПоказыватьОбластьПросмотраЗадачи = Не НеПоказыватьОбластьПросмотраЗадачи;
	
	Элементы.ГруппаПросмотрЗадачи.Видимость = Не НеПоказыватьОбластьПросмотраЗадачи;
	Элементы.ПоказатьОбластьПросмотраЗадачи.Пометка = Не НеПоказыватьОбластьПросмотраЗадачи;
	
	Если Не НеПоказыватьОбластьПросмотраЗадачи Тогда
		АктуализироватьДетальныеСведения(Элементы.Задачи.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	ПринятьЗадачиКИсполнению();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПеренаправить(Команда)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные; 
	Если СтрокаЗадачи = Неопределено Или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОбновитьСписокЗадач", ЭтаФорма);
	ПараметрыФормы = новый Структура;
	ПараметрыФормы.Вставить("Задача", СтрокаЗадачи.Задача);
	ПараметрыФормы.Вставить("ЗадачаID", СтрокаЗадачи.ЗадачаID);
	ПараметрыФормы.Вставить("ЗадачаТип", СтрокаЗадачи.ЗадачаТип);
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ПеренаправлениеЗадачи",
		ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоВажности(Команда)
	
	СгруппироватьПоКолонке("ВажностьСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоТочкеМаршрута(Команда)
	
	СгруппироватьПоКолонке("ТочкаМаршрута");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоАвтору(Команда)
	
	СгруппироватьПоКолонке("Автор");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоИсполнителю(Команда)
	
	СгруппироватьПоКолонке("Исполнитель");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоБезГруппировки(Команда)
	
	СгруппироватьПоКолонке("");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные; 
	Если СтрокаЗадачи = Неопределено Или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	ДетальныеСведенияЗадачи = ДетальныеСведенияОЗадачах.Получить(СтрокаЗадачи.ЗадачаId);
	Если ДетальныеСведенияЗадачи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПредметID = Неопределено;
	СтрокаПредмета = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если СтрокаПредмета <> Неопределено Тогда
		СтрокаРодителя = СтрокаПредмета.ПолучитьРодителя();
		Если СтрокаРодителя <> Неопределено Тогда
			СтрокаПредмета = СтрокаРодителя;
		КонецЕсли;
		ПредметID = СтрокаПредмета.ID;
	КонецЕсли;
	
	НуженДиалог = Истина;
	ДлительностьРаботы = ИнтеграцияС1СДокументооборотКлиент.ПолучитьДлительностьРаботы(
		ДетальныеСведенияЗадачи.ДатаНачалаХронометража);
	Если ДлительностьРаботы < 60 Тогда // меньше 1 минуты
		НуженДиалог = Ложь;
	КонецЕсли;
	
	Если НуженДиалог Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Источник", СтрокаЗадачи.Задача);
		ПараметрыФормы.Вставить("ИсточникID", СтрокаЗадачи.ЗадачаID);
		ПараметрыФормы.Вставить("ИсточникТип", СтрокаЗадачи.ЗадачаТип);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы", ПараметрыФормы, ЭтаФорма);
		
	Иначе
		
		Если ДетальныеСведенияЗадачи.ВключенХронометраж Тогда
			
			ПереключитьХронометражСервер(СтрокаЗадачи.ЗадачаТип, СтрокаЗадачи.ЗадачаId, ПредметId, ДетальныеСведенияЗадачи);
			Если ДетальныеСведенияЗадачи.ВключенХронометраж Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(СтрокаЗадачи.Задача));
				Состояние(Текст);
			КонецЕсли;
			ДетальныеСведенияОЗадачах.Вставить(СтрокаЗадачи.ЗадачаId, ДетальныеСведенияЗадачи);
			
		Иначе 
			
			// возможно, хронометраж все-таки включен, но детальная запись не успела обновиться
			АктивныеЗаписи = ИнтеграцияС1СДокументооборотВызовСервера.АктивныеЗаписиХронометража();
			Если АктивныеЗаписи.Количество() = 0 
				или (АктивныеЗаписи.Количество() = 1 и АктивныеЗаписи[0].ИсточникId = СтрокаЗадачи.ЗадачаId) Тогда
				
				ПереключитьХронометражСервер(СтрокаЗадачи.ЗадачаТип, СтрокаЗадачи.ЗадачаId, ПредметId, ДетальныеСведенияЗадачи);
				Если ДетальныеСведенияЗадачи.ВключенХронометраж Тогда
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(СтрокаЗадачи.Задача));
					Состояние(Текст);
				КонецЕсли;
				ДетальныеСведенияОЗадачах.Вставить(СтрокаЗадачи.ЗадачаId, ДетальныеСведенияЗадачи);
				
			Иначе
				
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("АктивныеЗаписи", АктивныеЗаписи);
				ПараметрыОповещения.Вставить("Задача", СтрокаЗадачи.Задача);
				ПараметрыОповещения.Вставить("ЗадачаId", СтрокаЗадачи.ЗадачаID);
				ПараметрыОповещения.Вставить("ЗадачаТип", СтрокаЗадачи.ЗадачаТип);
				ПараметрыОповещения.Вставить("ПредметId", ПредметId);
				ПараметрыОповещения.Вставить("ДетальныеСведенияЗадачи", ДетальныеСведенияЗадачи);
				Оповещение = Новый ОписаниеОповещения("ПереключитьХронометражЗавершение",
					ЭтаФорма, ПараметрыОповещения);
				
				СтрокаОбъектовХронометража = "";
				Для Каждого Запись Из АктивныеЗаписи Цикл 
					СтрокаОбъектовХронометража = СтрокаОбъектовХронометража + Символы.Таб + Запись.Источник + Символы.ПС;
				КонецЦикла;
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Включен хронометраж по другим объектам:
						|%1
						|Отключить хронометраж и зафиксировать трудозатраты перед включением нового хронометража?'"),
						СтрокаОбъектовХронометража);
						
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Да'"));
				Кнопки.Добавить(КодВозвратаДиалога.Отмена,НСтр("ru='Отмена'"));
				ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Отмена);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено Или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Источник", СтрокаЗадачи.Задача);
	ПараметрыФормы.Вставить("ИсточникID", СтрокаЗадачи.ЗадачаID);
	ПараметрыФормы.Вставить("ИсточникТип", СтрокаЗадачи.ЗадачаТип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы",
		ПараметрыФормы, СтрокаЗадачи.ЗадачаID);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросАвтору(Команда)
	
	Если Элементы.Задачи.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли Элементы.Задачи.ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("id", Элементы.Задачи.ТекущиеДанные.ЗадачаID);
	ПараметрыФормы.Вставить("type", Элементы.Задачи.ТекущиеДанные.ЗадачаТип);
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессРешениеВопросовНовыйВопрос", 
		ПараметрыФормы, ЭтаФорма, Элементы.Задачи.ТекущиеДанные.ЗадачаID);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПредмет(Команда)
	
	СтрокаДерева = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("Ключ", СтрокаДерева.Ссылка);
		ПоказатьЗначение(, СтрокаДерева.Ссылка);
	ИначеЕсли СтрокаДерева.Тип = "DMFile" Тогда
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьФайл(СтрокаДерева.ID,
			СтрокаДерева.Наименование, 
			СтрокаДерева.Расширение,
			УникальныйИдентификатор);
	Иначе
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
			СтрокаДерева.Тип,
			СтрокаДерева.ID,
			ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсходныйДокумент(Команда)
	
	СтрокаДерева = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.Тип = "DMFile" Тогда
		СтрокаДерева = СтрокаДерева.ПолучитьРодителя();
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
		СтрокаДерева.Тип,
		СтрокаДерева.ID,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуПервая(Команда)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ПроцессТип = СтрокаЗадачи.ПроцессТип;
	ТочкаМаршрута = СтрокаЗадачи.ТочкаМаршрутаКратко;
	ТребоватьРезультатВыполнения = Ложь;
	
	Если ПроцессТип = "DMBusinessProcessRegistration"
		И ТочкаМаршрута = "Зарегистрировать" Тогда
		Для Каждого СтрокаПредмета Из СтрокаЗадачи.Предметы Цикл
			Если (Не ДоступнаМультипредметность Или СтрокаПредмета.РольПредмета = "Основной")
				И ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(СтрокаПредмета.Тип) Тогда
				ИнтеграцияС1СДокументооборотВызовСервера.
					ЗарегистрироватьДокументПриНеобходимости(СтрокаПредмета.Тип, СтрокаПредмета.ID);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокаЗадачи.ПроцессТип = "DMBusinessProcessInvitation" Тогда 
		РезультатID = ПолучитьРезультатПриглашения(СтрокаЗадачи.ЗадачаТип, СтрокаЗадачи.ЗадачаID);
		Если РезультатID = "ПринятоОбязательнымиУчастниками" Тогда 
			Оповещение = Новый ОписаниеОповещения("ВыполнитьЗадачуПерваяЗавершение", ЭтаФорма);
			ТекстВопроса = Нстр("ru = 'Есть непринявшие приглашения участники.
				|При подтверждении они будут исключены из списка участников. Продолжить?'");
			ИнтеграцияС1СДокументооборотКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	Если ПроцессТип = "DMBusinessProcessConsideration" и ТочкаМаршрута = "Рассмотреть" Тогда
		ТребоватьРезультатВыполнения = Истина;
	КонецЕсли;
		
	Если ТребоватьРезультатВыполнения и не ЗначениеЗаполнено(Комментарий) Тогда
		ОчиститьСообщения();
		Элементы.Комментарий.ОтметкаНезаполненного = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Комментарий"" не заполнено'"),,
			"Комментарий");
		Возврат;
	Иначе
		ВыполнитьЗадачу(1);
	КонецЕсли;
 
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуВторая(Команда)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ПроцессТип = СтрокаЗадачи.ПроцессТип;
	ТочкаМаршрута = СтрокаЗадачи.ТочкаМаршрутаКратко;
	ТребоватьРезультатВыполнения = Ложь;
	
	// Требует ли тип задачи ввода результата выполнения?
	Если (ПроцессТип = "DMBusinessProcessApproval" И ТочкаМаршрута = "Согласовать")
		ИЛИ (ПроцессТип = "DMBusinessProcessInvitation" И ТочкаМаршрута = "Пригласить")
		ИЛИ СтрокаЗадачи.ЗадачаТип = "DMBusinessProcessIssuesSolutionTaskAnswer" Тогда
		ТребоватьРезультатВыполнения = Истина;
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" И ТочкаМаршрута = "Утвердить" Тогда
		ТребоватьРезультатВыполнения = Истина;
	ИначеЕсли ПроцессТип = "DMBusinessProcessRegistration" И ТочкаМаршрута = "Зарегистрировать" Тогда
		ТребоватьРезультатВыполнения = Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("id, type, taskId",
		СтрокаЗадачи.ПроцессID, СтрокаЗадачи.ПроцессТип, СтрокаЗадачи.ЗадачаID);
	Оповещение = Новый ОписаниеОповещения("ВыполнитьЗадачуВтораяЗавершение", ЭтаФорма);
	
	// Требует ли тип задачи открытия сложной формы?
	Если ПроцессТип = "DMBusinessProcessApproval" И ТочкаМаршрута = "Ознакомиться" Тогда
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессСогласование", 
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" И ТочкаМаршрута = "Ознакомиться" Тогда
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессУтверждение", 
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessRegistration" И ТочкаМаршрута = "Ознакомиться" Тогда
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессРегистрация",
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessInvitation" И ТочкаМаршрута = "Ознакомиться" Тогда
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессПриглашение",
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
			
		Если ТребоватьРезультатВыполнения И Не ЗначениеЗаполнено(Комментарий) Тогда
			ОчиститьСообщения();
			Элементы.Комментарий.ОтметкаНезаполненного = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Комментарий"" не заполнено'"),,
				"Комментарий");
			Возврат;	
		Иначе
			ВыполнитьЗадачу(2);
		КонецЕсли;
		
	КонецЕсли;
 
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуТретья(Команда)
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ПроцессТип = СтрокаЗадачи.ПроцессТип;
	ТочкаМаршрута = СтрокаЗадачи.ТочкаМаршрутаКратко;
	ТребоватьРезультатВыполнения = Ложь;
	
	// Требует ли тип задачи ввода результата выполнения?
	Если (ПроцессТип = "DMBusinessProcessApproval" И ТочкаМаршрута = "Согласовать")
		ИЛИ (ПроцессТип = "DMBusinessProcessInvitation" И ТочкаМаршрута = "Ознакомиться")
		ИЛИ (ПроцессТип = "DMBusinessProcessOrder" И ТочкаМаршрута = "Проверить") Тогда
		ТребоватьРезультатВыполнения = Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("id, type, taskId",
		СтрокаЗадачи.ПроцессID, СтрокаЗадачи.ПроцессТип, СтрокаЗадачи.ЗадачаID);
	Оповещение = Новый ОписаниеОповещения("ВыполнитьЗадачуТретьяЗавершение", ЭтаФорма);
	
	Если ТребоватьРезультатВыполнения И Не ЗначениеЗаполнено(Комментарий) Тогда
		ОчиститьСообщения();                                                      
		Элементы.Комментарий.ОтметкаНезаполненного = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Комментарий"" не заполнено'"),,
			"Комментарий");
		Возврат;	
	Иначе
		ВыполнитьЗадачу(3);
	КонецЕсли;
 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СоздатьПроцессЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	ОбновитьСписокЗадачЧастично();
	
КонецПроцедуры
 
&НаКлиенте 
Процедура РазвернутьГруппыЗадач()
	
	ЭлементыДерева = Задачи.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.Группировка Тогда
			Элементы.Задачи.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоКолонке(ИмяКолонки)
	
	Модифицированность = Ложь;
	РежимГруппировки = ИмяКолонки;
	УстановитьПометкуРежимаГруппировки();
	СгруппироватьПоКолонкеНаСервере();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуРежимаГруппировки()
	
	Элементы.СписокСгруппироватьПоАвтору.Пометка = (РежимГруппировки = "Автор");
	Элементы.СписокСгруппироватьПоВажности.Пометка = (РежимГруппировки = "ВажностьСтрокой");
	Элементы.СписокСгруппироватьПоТочкеМаршрута.Пометка = (РежимГруппировки = "ТочкаМаршрута");
	Элементы.СписокСгруппироватьПоИсполнителю.Пометка = (РежимГруппировки = "Исполнитель");
	Элементы.СписокСгруппироватьСгруппироватьПоБезГруппировки.Пометка = (РежимГруппировки = "");
	
КонецПроцедуры

&НаСервере
Процедура СгруппироватьПоКолонкеНаСервере()
	
	Если НЕ ЗначениеЗаполнено(ТаблицаЗадачСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяЗадача = Элементы.Задачи.ТекущаяСтрока;
	СледующаяЗадача = Неопределено;
	ПредыдущаяЗадача = Неопределено;
	Если ТекущаяЗадача <> Неопределено Тогда
		СтрокаТекущейЗадачи = Задачи.НайтиПоИдентификатору(ТекущаяЗадача);
		Если СтрокаТекущейЗадачи = Неопределено Тогда
			ТекущаяЗадача = Неопределено;
		Иначе
			Если СтрокаТекущейЗадачи.ЗадачаID <> "" Тогда
				СтрокаСледующейЗадачи = Задачи.НайтиПоИдентификатору(ТекущаяЗадача + 1);
				Если СтрокаСледующейЗадачи <> Неопределено Тогда
					СледующаяЗадача = СтрокаСледующейЗадачи.ЗадачаID;
				КонецЕсли;
				СтрокаПредыдущейЗадачи = Задачи.НайтиПоИдентификатору(ТекущаяЗадача - 1);
				Если СтрокаПредыдущейЗадачи <> Неопределено Тогда
					ПредыдущаяЗадача = СтрокаПредыдущейЗадачи.ЗадачаID;
				КонецЕсли;
			КонецЕсли;
			ТекущаяЗадача = СтрокаТекущейЗадачи.ЗадачаID;
		КонецЕсли;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("Задачи");
	
	ТаблицаЗадач = ПолучитьИзВременногоХранилища(ТаблицаЗадачСсылка);
	
	Дерево.Строки.Очистить();
	
	Если ЗначениеЗаполнено(РежимГруппировки) Тогда
		ТаблицаГруппировок = ТаблицаЗадач.Скопировать();
    	ТаблицаГруппировок.Свернуть(РежимГруппировки);
		Для каждого СтрокаГруппировки из ТаблицаГруппировок Цикл
			СтрокаДерева = Дерево.Строки.Добавить();
			СтрокаДерева.Задача = СтрокаГруппировки[РежимГруппировки];
			СтрокаДерева.КартинкаЗадачи = 2;
			СтрокаДерева.Важность = 1;
			СтрокаДерева.Группировка = Истина;
			СтрокиГруппировки = ТаблицаЗадач.НайтиСтроки(Новый Структура(РежимГруппировки,
				СтрокаГруппировки[РежимГруппировки]));
			Для каждого Строка из СтрокиГруппировки Цикл
				СтрокаЭлемента = СтрокаДерева.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЭлемента,Строка);
			КонецЦикла;
			СтрокаДерева.Строки.Сортировать("СрокИсполнения УБЫВ, Задача");
		КонецЦикла;
		Элементы.Задачи.Отображение = ОтображениеТаблицы.Дерево;
		Дерево.Строки.Сортировать("Задача");
	Иначе
		Для каждого Строка из ТаблицаЗадач Цикл
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,Строка);
		КонецЦикла;
		Элементы.Задачи.Отображение = ОтображениеТаблицы.Список;
		Дерево.Строки.Сортировать("СрокИсполнения УБЫВ, Задача");
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "Задачи");
	УстановитьТекущуюСтроку(ТекущаяЗадача, СледующаяЗадача, ПредыдущаяЗадача);

КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтроку(ТекущаяЗадачаID, СледующаяЗадачаID, ПредыдущаяЗадачаID) 
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(ТекущаяЗадачаID);
	Если СледующаяЗадачаID <> Неопределено Тогда
		МассивЗадач.Добавить(СледующаяЗадачаID);
	КонецЕсли;
	Если ПредыдущаяЗадачаID <> Неопределено Тогда
		МассивЗадач.Добавить(ПредыдущаяЗадачаID);
	КонецЕсли;

	Для Каждого ЗадачаID Из МассивЗадач Цикл
		Если ЗначениеЗаполнено(ЗадачаID) Тогда
			Если Элементы.Задачи.Отображение = ОтображениеТаблицы.Список Тогда
				СтрокиЗадачи = Задачи.ПолучитьЭлементы();
				Для каждого СтрокаЗадачи из СтрокиЗадачи Цикл
					Если СтрокаЗадачи.ЗадачаId = ЗадачаID Тогда
						Элементы.Задачи.ТекущаяСтрока = СтрокаЗадачи.ПолучитьИдентификатор();
						Возврат;
					КонецЕсли;
				КонецЦикла;
			Иначе // группировка
				Для каждого ГруппаДерева из Задачи.ПолучитьЭлементы() Цикл
					СтрокиЗадачи = ГруппаДерева.ПолучитьЭлементы();
					Для каждого СтрокаЗадачи из СтрокиЗадачи Цикл
						Если СтрокаЗадачи.ЗадачаId = ЗадачаID Тогда
							Элементы.Задачи.ТекущаяСтрока = СтрокаЗадачи.ПолучитьИдентификатор();
							Возврат;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПодключениеЗавершение", ЭтаФорма, Неопределено);
	ИнтеграцияС1СДокументооборотКлиент.ПроверитьПодключение(
		ОписаниеОповещения, ЭтаФорма, "ПроверитьПодключение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбработатьФормуСогласноВерсииСервиса();
		Если ВерсияСервиса <> "0.0.0.0" Тогда
			РазвернутьГруппыЗадач();
			УстановитьПометкуРежимаГруппировки();
			#Если Не ВебКлиент Тогда
			Если ДоступенФункционалЗадачи Тогда
				Элементы.Автообновление.Доступность = Истина;
				Если Автообновление Тогда
					ПодключитьОбработчикОжидания("Автообновление", ПериодАвтообновления);
				КонецЕсли;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
	Иначе // не удалось подключиться к ДО
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьФормуСогласноВерсииСервиса()
	
	Заголовок = НСтр("ru = 'Документооборот: задачи мне'");
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборот.ВерсияСервиса();
	
	Если ПустаяСтрока(ВерсияСервиса) Тогда // идет подключение
		
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница
			= Элементы.ГруппаСтраницаОжидание;
		
	Иначе
		
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница
			= Элементы.ГруппаСтраницаОсновная;
			
		Если ВерсияСервиса = "0.0.0.0" Тогда
		
			Элементы.ГруппаФункционалНеПоддерживается.Видимость = Истина;
			Элементы.ГруппаПроверкаАвторизации.Видимость = Истина;
			Элементы.ДекорацияФункционалНеПоддерживается.Заголовок = 
				НСтр("ru = 'Нет доступа к 1С:Документообороту.'");
				
		Иначе // сервис доступен
			
			Элементы.ГруппаПроверкаАвторизации.Видимость = Ложь;
			Элементы.ГруппаФункционалНеПоддерживается.Видимость = Ложь;
			ИмяПользователя = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя;
			
			// Задачи.
			Если ИнтеграцияС1СДокументооборот.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
				Элементы.ГруппаОсновная.Доступность = Истина;
				ДоступенФункционалЗадачи = Истина;
				ДоступенФункционалХронометраж = 
					ИнтеграцияС1СДокументооборот.ДоступенФункционалВерсииСервиса("1.3.2.3")
					и ПолучитьФункциональнуюОпцию("ИспользоватьЕжедневныеОтчеты1СДокументооборота");
				ДоступенЗахватФайлов = ИнтеграцияС1СДокументооборот.ДоступенФункционалВерсииСервиса("1.4.9.1");
				ДоступнаМультипредметность = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.0.3.1");
				ОбновитьСписокЗадачНаСервере();
			Иначе
				Элементы.ГруппаОсновная.Доступность = Ложь;
				ДоступенФункционалЗадачи = Ложь;
				ДоступенФункционалХронометраж = Ложь;
				Обработки.ИнтеграцияС1СДокументооборот.ОбработатьФормуПриНедоступностиФункционалаВерсииСервиса(
					ЭтаФорма);
			КонецЕсли;
			Элементы.ПереключитьХронометраж.Доступность = ДоступенФункционалХронометраж;
			Элементы.УказатьТрудозатраты.Доступность = ДоступенФункционалХронометраж;
			// Решение вопросов.
			Если НЕ ИнтеграцияС1СДокументооборот.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
				Элементы.ЗадатьВопросАвтору.Видимость = Ложь;
			КонецЕсли;
			// Почта.
			Если НЕ ИнтеграцияС1СДокументооборот.ДоступенФункционалВерсииСервиса("1.2.8.1.CORP") Тогда
				Элементы.СоздатьПисьмо.Видимость = Ложь;
			КонецЕсли;
			// Принятие задач к исполнению.
			Если Не ИнтеграцияС1СДокументооборот.ДоступенФункционалВерсииСервиса("1.2.7.3.CORP") Тогда
				Элементы.ПринятьКИсполнению.Видимость = Ложь;
			КонецЕсли;
			НастройкиДокументооборота = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьНастройки();
			ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи = 
				НастройкиДокументооборота.ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи;
			ФактическийИсполнительЗадач = НастройкиДокументооборота.ФактическийИсполнительЗадач;
			Если ФактическийИсполнительЗадач <> "taskPerformer" Тогда
				ТекущийПользовательДО = ИнтеграцияС1СДокументооборотПовтИсп.ТекущийПользовательДокументооборота();
				Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(
					ЭтаФорма, ТекущийПользовательДО, "ТекущийПользователь");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьОформлениеЗадач(УсловноеОформление)

	// Установка оформления для непринятых задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задачи.ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задачи.Группировка");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задачи.Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.НеПринятыеКИсполнениюЗадачи.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ЗадачиЗадача");
	
	// Установка оформления для просроченных задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задачи.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задачи.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задачи.Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ЗадачиСрокИсполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	ОбновитьСписокЗадачНаСервере();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАвтообновления()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Автообновление", Автообновление);
	ПараметрыФормы.Вставить("ПериодАвтообновления", ПериодАвтообновления);
	
	Оповещение = Новый ОписаниеОповещения("НастройкаАвтообновленияЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.НастройкаАвтообновления",
		ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАвтообновленияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Автообновление = Результат.Автообновление;
	ПериодАвтообновления = Результат.ПериодАвтообновления;
	
	ОтключитьОбработчикОжидания("Автообновление");
	
	МассивСтруктур = Новый Массив;
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ИнтеграцияС1СДокументооборот");
	Элемент.Вставить("Настройка", "Автообновление");
	Элемент.Вставить("Значение", Автообновление);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ИнтеграцияС1СДокументооборот");
	Элемент.Вставить("Настройка", "ПериодАвтообновления");
	Элемент.Вставить("Значение", ПериодАвтообновления);
	МассивСтруктур.Добавить(Элемент);
	
	ИнтеграцияС1СДокументооборотКлиентПереопределяемый.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	
	Если Автообновление Тогда
		ПодключитьОбработчикОжидания("Автообновление", ПериодАвтообновления);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПринятьЗадачиКИсполнению()
	
	Модифицированность = Ложь;
	МассивСтрок = Элементы.Задачи.ВыделенныеСтроки;
	Если МассивСтрок.Количество() <> 0 Тогда
		МассивЗадачДО = Новый Массив;
		Для каждого Элемент из МассивСтрок Цикл
			СтрокаЗадачи = Задачи.НайтиПоИдентификатору(Элемент);
			Если ЗначениеЗаполнено(СтрокаЗадачи.ЗадачаID) Тогда
				МассивЗадачДО.Добавить(СтрокаЗадачи.ЗадачаID);
			КонецЕсли;
		КонецЦикла;
		Если МассивЗадачДО.Количество() > 0 Тогда
			Попытка
				Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
				ИнтеграцияС1СДокументооборот.ПринятьЗадачуКИсполнению(Прокси, МассивЗадачДО);
			Исключение
				ОбработатьИсключение(ИнформацияОбОшибке());
				Возврат;
			КонецПопытки;
			ОбновитьСписокЗадачЧастичноНаСервере();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадачЧастично()
	
	ОбновитьСписокЗадачЧастичноНаСервере();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗадачи(Прокси, Выполненные)
	
	СписокУсловий = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "byUser";
	Условие.value = Истина;
	СписокУсловий.conditions.Добавить(Условие);
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "withExecuted";
	Условие.value = Выполненные;
	СписокУсловий.conditions.Добавить(Условие);
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "withDelayed";
	Условие.value = Ложь;
	СписокУсловий.conditions.Добавить(Условие);
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "typed";
	Условие.value = Истина;
	СписокУсловий.conditions.Добавить(Условие);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
	Запрос.type = "DMBusinessProcessTask";
	Запрос.query = СписокУсловий;
	
	Ответ = ИнтеграцияС1СДокументооборот.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ.items;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокЗадач(ЗадачиXDTO)
	
	ТекущаяЗадача = Элементы.Задачи.ТекущаяСтрока;
	СледующаяЗадача = Неопределено;
	ПредыдущаяЗадача = Неопределено;
	Если ТекущаяЗадача <> Неопределено Тогда
		СтрокаТекущейЗадачи = Задачи.НайтиПоИдентификатору(ТекущаяЗадача);
		Если СтрокаТекущейЗадачи = Неопределено Тогда
			ТекущаяЗадача = Неопределено;
		Иначе
			Если СтрокаТекущейЗадачи.ЗадачаID <> "" Тогда
				СтрокаСледующейЗадачи = Задачи.НайтиПоИдентификатору(ТекущаяЗадача + 1);
				Если СтрокаСледующейЗадачи <> Неопределено Тогда
					СледующаяЗадача = СтрокаСледующейЗадачи.ЗадачаID;
				КонецЕсли;
				СтрокаПредыдущейЗадачи = Задачи.НайтиПоИдентификатору(ТекущаяЗадача - 1);
				Если СтрокаПредыдущейЗадачи <> Неопределено Тогда
					ПредыдущаяЗадача = СтрокаПредыдущейЗадачи.ЗадачаID;
				КонецЕсли;
			КонецЕсли;
			ТекущаяЗадача = СтрокаТекущейЗадачи.ЗадачаID;
		КонецЕсли;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("Задачи");
	
	ТаблицаЗадач = новый ТаблицаЗначений;
	Для каждого Колонка из Дерево.Колонки Цикл
		ТаблицаЗадач.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	Для каждого ЗадачаXDTO из ЗадачиXDTO Цикл
		СтрокаЗадачи = ТаблицаЗадач.Добавить();
		ЗаполнитьСтрокуЗадачиXDTO(СтрокаЗадачи, ЗадачаXDTO.object);
	КонецЦикла;
	Дерево.Строки.Очистить();
	
	Если ЗначениеЗаполнено(РежимГруппировки) Тогда
		Элементы.Задачи.Отображение = ОтображениеТаблицы.Дерево;
		ТаблицаГруппировок = ТаблицаЗадач.Скопировать();
    	ТаблицаГруппировок.Свернуть(РежимГруппировки);
		Для каждого СтрокаГруппировки из ТаблицаГруппировок Цикл
			СтрокаДерева = Дерево.Строки.Добавить();
			СтрокаДерева.Задача = СтрокаГруппировки[РежимГруппировки];
			СтрокаДерева.КартинкаЗадачи = 2;
			СтрокаДерева.Важность = 1;
			СтрокаДерева.Группировка = Истина;
			СтрокиГруппировки = ТаблицаЗадач.НайтиСтроки(Новый Структура(РежимГруппировки,
				СтрокаГруппировки[РежимГруппировки]));
			Для каждого Строка из СтрокиГруппировки Цикл
				СтрокаЭлемента = СтрокаДерева.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЭлемента,Строка);
				СтрокаДерева.Строки.Сортировать("СрокИсполнения УБЫВ, Задача");
			КонецЦикла;
		КонецЦикла;
		Дерево.Строки.Сортировать("Задача");
	Иначе
		Элементы.Задачи.Отображение = ОтображениеТаблицы.Список;
		Для каждого Строка из ТаблицаЗадач Цикл
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,Строка);
		КонецЦикла;
		Дерево.Строки.Сортировать("СрокИсполнения УБЫВ, Задача");
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "Задачи");
	
	ТаблицаЗадачСсылка = ПоместитьВоВременноеХранилище(ТаблицаЗадач, УникальныйИдентификатор);
	
	УстановитьТекущуюСтроку(ТекущаяЗадача, СледующаяЗадача, ПредыдущаяЗадача);
	
	ЗаполнитьПоляЧислаЗадач();
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьСтрокуЗадачиXDTO(СтрокаЗадачи, ЗадачаXDTO)
	
	Важность = 1;
	Если ЗадачаXDTO.importance.objectId.id = "Низкая" Тогда
		Важность = 0;
	ИначеЕсли ЗадачаXDTO.importance.objectId.id = "Обычная" Тогда
		Важность = 1;
	ИначеЕсли ЗадачаXDTO.importance.objectId.id = "Высокая" Тогда 
		Важность = 2;
	КонецЕсли;
	
	СтрокаЗадачи.Важность = Важность;
	СтрокаЗадачи.ВажностьСтрокой = ЗадачаXDTO.importance.name;
	СтрокаЗадачи.КартинкаЗадачи = ?(ЗадачаXDTO.executed,1,0);
	СтрокаЗадачи.Описание = ЗадачаXDTO.description;
	СтрокаЗадачи.Выполнена = ЗадачаXDTO.executed;
	СтрокаЗадачи.ТочкаМаршрута = ЗадачаXDTO.businessProcessStep;
	СтрокаЗадачи.ТочкаМаршрутаКратко = КраткоеИмяТочкиМаршрута(ЗадачаXDTO.parentBusinessProcess.objectId.type, 
		ЗадачаXDTO.businessProcessStep);
	СтрокаЗадачи.СрокИсполнения = ЗадачаXDTO.dueDate;
	СтрокаЗадачи.Записана = ЗадачаXDTO.beginDate;
	СтрокаЗадачи.Автор = ЗадачаXDTO.author.name;
	СтрокаЗадачи.ПринятаКИсполнению = ЗадачаXDTO.accepted;
	
	Если ЗадачаXDTO.Свойства().Получить("iterationNumber") = Неопределено Тогда
		СтрокаЗадачи.НомерИтерации = 0;
	Иначе
		СтрокаЗадачи.НомерИтерации = ЗадачаXDTO.iterationNumber;
	КонецЕсли;
	
	ИсполнительXDTO = ЗадачаXDTO.performer;
	Если ИсполнительXDTO.Установлено("user") Тогда
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,
			ИсполнительXDTO.user, "Исполнитель")
	ИначеЕсли ИсполнительXDTO.Установлено("role") Тогда
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,
			ИсполнительXDTO.role, "Исполнитель")
	КонецЕсли;
	
	ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи, ЗадачаXDTO.parentBusinessProcess, "Процесс");
	ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи, ЗадачаXDTO, "Задача");
	
	СтрокаЗадачи.Предметы = Новый ТаблицаЗначений;
	СтрокаЗадачи.Предметы.Колонки.Добавить("Наименование");
	СтрокаЗадачи.Предметы.Колонки.Добавить("ID");
	СтрокаЗадачи.Предметы.Колонки.Добавить("Тип");
	СтрокаЗадачи.Предметы.Колонки.Добавить("РольПредмета");
	СтрокаЗадачи.Предметы.Колонки.Добавить("Расширение");
	СтрокаЗадачи.Предметы.Колонки.Добавить("СвязанныйОбъектТип");
	СтрокаЗадачи.Предметы.Колонки.Добавить("СвязанныйОбъектID");
	СтрокаЗадачи.Предметы.Колонки.Добавить("ИмяПредмета");
	
	// Получим предмет(ы) задачи.
	Если ДоступнаМультипредметность Тогда
		Если ЗадачаXDTO.Свойства().Получить("targets") <> Неопределено
			И ЗадачаXDTO.Установлено("targets") Тогда
			Для каждого СтрокаПредметаXDTO Из ЗадачаXDTO.targets.items Цикл
				СтрокаПредмета = СтрокаЗадачи.Предметы.Добавить();
				СтрокаПредмета.ИмяПредмета = СтрокаПредметаXDTO.name;
				СтрокаПредмета.РольПредмета = СтрокаПредметаXDTO.role.objectId.id;
				ПредметXDTO = СтрокаПредметаXDTO.target;
				СтрокаПредмета.Наименование = ПредметXDTO.name;
				СтрокаПредмета.ID = ПредметXDTO.objectId.id;
				СтрокаПредмета.Тип = ПредметXDTO.objectId.type;
				Если СтрокаПредмета.Тип = "DMFile" // для файлов сервис возвращает расширение
					И ПредметXDTO.Установлено("extension") Тогда
					СтрокаПредмета.Расширение = ПредметXDTO.extension;
				КонецЕсли;
				Если ПредметXDTO.Установлено("externalObject") Тогда // объект ИС
					СтрокаПредмета.СвязанныйОбъектID = ПредметXDTO.externalObject.id;
					СтрокаПредмета.СвязанныйОбъектТип = ПредметXDTO.externalObject.type;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе // мультипредметность не поддерживается
		Если ЗадачаXDTO.Установлено("target") Тогда
			ПредметXDTO = ЗадачаXDTO.target;
			СтрокаПредмета = СтрокаЗадачи.Предметы.Добавить();
			СтрокаПредмета.Наименование = ПредметXDTO.name;
			СтрокаПредмета.ID = ПредметXDTO.objectId.id;
			СтрокаПредмета.Тип = ПредметXDTO.objectId.type;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КраткоеИмяТочкиМаршрута(ПроцессТип, ПолноеИмя)
	
	Если ПроцессТип = "DMBusinessProcessApproval" Тогда
		Если ПолноеИмя = "Ознакомиться с результатом согласования" Тогда
			КраткоеИмя = "Ознакомиться";
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessOrder" Тогда
		Если ПолноеИмя = "Контролировать поручение" Тогда
			КраткоеИмя = "Контролировать";
		ИначеЕсли ПолноеИмя = "Проверить поручение" Тогда
			КраткоеИмя = "Проверить";
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessPerformance" Тогда
		Если ПолноеИмя = "Ответственное исполнение" Тогда
			КраткоеИмя = "ОтветственноеИсполнение";
		ИначеЕсли ПолноеИмя = "Контролировать исполнение" Тогда
			КраткоеИмя = "Контролировать";
		ИначеЕсли ПолноеИмя = "Проверить исполнение" Тогда
			КраткоеИмя = "Проверить";
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessRegistration" Тогда
		Если ПолноеИмя = "Ознакомиться с регистрацией" Тогда
			КраткоеИмя = "Ознакомиться";
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" Тогда
		Если Найти(ПолноеИмя, "Ознакомиться с результатом утверждения") <> 0 Тогда
			КраткоеИмя = "Ознакомиться";
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessConsideration" Тогда
		Если ПолноеИмя = "Обработать резолюцию" Тогда
			КраткоеИмя = "Ознакомиться";
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMComplexBusinessProcess" Тогда
		Если ПолноеИмя = "Контролировать ход процесса" Тогда
			КраткоеИмя = "Контролировать";
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessIncomingDocumentProcessing" Тогда
		Если ПолноеИмя = "Исполнение \ ознакомление" Тогда
			КраткоеИмя = "ИсполнениеОзнакомление";
		ИначеЕсли ПолноеИмя = "В дело" Тогда
			КраткоеИмя = "ВДело";
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessInternalDocumentProcessing" Тогда
		Если ПолноеИмя = "Рассмотрение" Тогда
			КраткоеИмя = "ВложенныйПроцесс1";
		ИначеЕсли ПолноеИмя = "Исполнение \ ознакомление" Тогда
			КраткоеИмя = "ВложенныйПроцесс2";
		ИначеЕсли ПолноеИмя = "В дело" Тогда
			КраткоеИмя = "ВложенныйПроцесс3";
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessIssuesSolution" Тогда
		Если ПолноеИмя = "Рассмотреть вопрос" Тогда
			КраткоеИмя = "РассмотрениеИнициатором";
		ИначеЕсли ПолноеИмя = "Ознакомиться с результатом рассмотрения" Тогда
			КраткоеИмя = "ОзнакомлениеСРезультатомРассмотрения";
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessInvitation" Тогда
		Если ПолноеИмя = "Пригласить" Тогда
			КраткоеИмя = "Пригласить";
		ИначеЕсли ПолноеИмя = "Ознакомиться с результатом приглашения" Тогда
			КраткоеИмя = "Ознакомиться";
		ИначеЕсли ПолноеИмя = "Оповестить о результатах приглашения" Тогда
			КраткоеИмя = "Оповестить";
		КонецЕсли;
	Иначе
		КраткоеИмя = ПолноеИмя;
	КонецЕсли;
	
	Возврат КраткоеИмя;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокЗадачНаСервере()
	
	Попытка
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		ЗадачиXDTO = ПолучитьЗадачи(Прокси, Ложь);
		ЗаполнитьСписокЗадач(ЗадачиXDTO);
	Исключение
		ОбработатьИсключение(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадачЧастичноНаСервере()
	
	Если НЕ ЗначениеЗаполнено(ТаблицаЗадачСсылка) Тогда
		ОбновитьСписокЗадачНаСервере();
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Попытка
		ЗадачиXDTO = ПолучитьЗадачи(Прокси, Ложь);
	Исключение
		ОбработатьИсключение(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	ТаблицаЗадач = ПолучитьИзВременногоХранилища(ТаблицаЗадачСсылка);
	ЗадачиКУдалению = ТаблицаЗадач.ВыгрузитьКолонку("ЗадачаID");
	
	Для каждого ЗадачаXDTO из ЗадачиXDTO Цикл
		СтрокиЗадач = ТаблицаЗадач.НайтиСтроки(Новый Структура("ЗадачаID",ЗадачаXDTO.object.objectID.id));
		Если СтрокиЗадач.Количество() > 0 Тогда
			СтрокаЗадачи = СтрокиЗадач[0];
			ЗадачиКУдалению.Удалить(ЗадачиКУдалению.Найти(ЗадачаXDTO.object.objectID.id));
		Иначе
			СтрокаЗадачи = ТаблицаЗадач.Добавить();
		КонецЕсли;
		ЗаполнитьСтрокуЗадачиXDTO(СтрокаЗадачи,ЗадачаXDTO.object);
	КонецЦикла;
	
	Для каждого УдаляемаяЗадача из ЗадачиКУдалению Цикл
		СтрокиЗадач = ТаблицаЗадач.НайтиСтроки(Новый Структура("ЗадачаID",УдаляемаяЗадача));
		Если СтрокиЗадач.Количество() > 0 Тогда
			ТаблицаЗадач.Удалить(СтрокиЗадач[0]);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗадачСсылка = ПоместитьВоВременноеХранилище(ТаблицаЗадач, УникальныйИдентификатор);
	СгруппироватьПоКолонкеНаСервере();
	
	ЗаполнитьПоляЧислаЗадач();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляЧислаЗадач()
	
	Просрочено = 0;
	НеПринято = 0;
	ТекущаяДата = ТекущаяДатаСеанса();
	ТаблицаЗадач = ПолучитьИзВременногоХранилища(ТаблицаЗадачСсылка);
	НеВыполненныеЗадачи = ТаблицаЗадач.НайтиСтроки(Новый Структура("Выполнена", Ложь));
	
	Для каждого СтрокаЗадачи из НеВыполненныеЗадачи Цикл
		Если ЗначениеЗаполнено(СтрокаЗадачи.СрокИсполнения) И СтрокаЗадачи.СрокИсполнения < ТекущаяДата Тогда
			Просрочено = Просрочено + 1;
		КонецЕсли;
		Если НЕ СтрокаЗадачи.ПринятаКИсполнению Тогда
			НеПринято = НеПринято + 1;
		КонецЕсли;
	КонецЦикла;
	
	ВсеЗадачи = ТаблицаЗадач.НайтиСтроки(Новый Структура("Группировка", Неопределено));
	ЗадачиВсего = ВсеЗадачи.Количество();
	ЗадачиПросроченные = Просрочено;
	ЗадачиНовые = НеПринято;
	
	Заголовок =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документооборот: задачи мне (Новых: %1 / Просроченных: %2 / Всего: %3)'"),
		ЗадачиНовые, ЗадачиПросроченные, ЗадачиВсего);

	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьОбъектныйРеквизит(Приемник, Источник, ИмяРеквизита)
	
	Если Источник <> Неопределено Тогда
		Приемник[ИмяРеквизита] = Источник.name;
		Приемник[ИмяРеквизита + "ID"] = Источник.objectId.id;
		Приемник[ИмяРеквизита + "Тип"] = Источник.objectId.type;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОбновитьСписокЗадач(Результат, Параметры) Экспорт

	Обновить(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьДетальныеСведения()
	
	АктуализироватьДетальныеСведения(Элементы.Задачи.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДетальныеСведения(СтрокаЗадачи)
	
	Комментарий = "";
	
	Если СтрокаЗадачи <> Неопределено
		И НЕ СтрокаЗадачи.Группировка
		И ЗначениеЗаполнено(СтрокаЗадачи.ЗадачаId) Тогда
		
		// Соберем уже известные реквизиты задачи для получения детальных сведений на сервере.
		РеквизитыЗадачи = Новый Структура;
		РеквизитыЗадачи.Вставить("Задача", СтрокаЗадачи.Задача);
		РеквизитыЗадачи.Вставить("ЗадачаТип", СтрокаЗадачи.ЗадачаТип);
		РеквизитыЗадачи.Вставить("ЗадачаId", СтрокаЗадачи.ЗадачаId);
		РеквизитыЗадачи.Вставить("Процесс", СтрокаЗадачи.Процесс);
		РеквизитыЗадачи.Вставить("ПроцессТип", СтрокаЗадачи.ПроцессТип);
		РеквизитыЗадачи.Вставить("ПроцессId", СтрокаЗадачи.ПроцессId);
		РеквизитыЗадачи.Вставить("Описание", СтрокаЗадачи.Описание);
		РеквизитыЗадачи.Вставить("Исполнитель", СтрокаЗадачи.Исполнитель);
		РеквизитыЗадачи.Вставить("Выполнена", СтрокаЗадачи.Выполнена);
		РеквизитыЗадачи.Вставить("ТочкаМаршрутаКратко", СтрокаЗадачи.ТочкаМаршрутаКратко);
		РеквизитыЗадачи.Вставить("НомерИтерации", СтрокаЗадачи.НомерИтерации);
		Предметы = Новый Массив;
		Для каждого СтрокаПредмета из СтрокаЗадачи.Предметы Цикл
			Предмет = Новый Структура;
			Предмет.Вставить("ИмяПредмета", СтрокаПредмета.ИмяПредмета);
			Предмет.Вставить("РольПредмета", СтрокаПредмета.РольПредмета);
			Предмет.Вставить("Наименование", СтрокаПредмета.Наименование);
			Предмет.Вставить("Тип", СтрокаПредмета.Тип);
			Предмет.Вставить("ID", СтрокаПредмета.ID);
			Предмет.Вставить("Расширение", СтрокаПредмета.Расширение);
			Предмет.Вставить("СвязанныйОбъектТип", СтрокаПредмета.СвязанныйОбъектТип);
			Предмет.Вставить("СвязанныйОбъектID", СтрокаПредмета.СвязанныйОбъектID);
			Предметы.Добавить(Предмет);
		КонецЦикла;
		РеквизитыЗадачи.Вставить("Предметы", Предметы);
		
		АктуализацияТекущейСтроки = (СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные);
		ДетальныеСведенияЗадачи = Неопределено;
		
		// Возможно, кэша нет или он устарел.
		Если Не ЗначениеЗаполнено(СтрокаЗадачи.ДатаПолученияДетальныхСведений)
			Или ТекущаяДата() - СтрокаЗадачи.ДатаПолученияДетальныхСведений > 5 * 60 Тогда // Использование оправдано: расчет длительности.
			
			ДетальныеСведенияЗадачи = ПолучитьДетальныеСведенияНаСервере(РеквизитыЗадачи, АктуализацияТекущейСтроки);
			Если ДетальныеСведенияЗадачи = Неопределено
				Или СтрокаЗадачи = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ДетальныеСведенияОЗадачах.Вставить(СтрокаЗадачи.ЗадачаId, ДетальныеСведенияЗадачи);
			СтрокаЗадачи.ДатаПолученияДетальныхСведений = ТекущаяДата(); // Использование оправдано: расчет длительности.
			
		КонецЕсли;
		
		Если АктуализацияТекущейСтроки и ДетальныеСведенияЗадачи = Неопределено Тогда
			ДетальныеСведенияЗадачи = ДетальныеСведенияОЗадачах.Получить(СтрокаЗадачи.ЗадачаId);
		КонецЕсли;
		ОбновитьПредставлениеЗадачиНаСервере(РеквизитыЗадачи, ДетальныеСведенияЗадачи);
		
		Комментарий = СохраненныеКомментарии.Получить(СтрокаЗадачи.ЗадачаId);
		
		ЭлементыДерева = ДеревоПриложений.ПолучитьЭлементы();
		Для Каждого ЭлементДереваВерхнегоУровня ИЗ ЭлементыДерева Цикл
			Элементы.ДеревоПриложений.Развернуть(ЭлементДереваВерхнегоУровня.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
	Иначе
		
		ОбновитьПредставлениеЗадачиНаСервере(Неопределено, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДетальныеСведенияНаСервере(РеквизитыЗадачи, НеобходимоОбновлениеФормы)
	
	Результат = Новый Структура;
	
	Результат.Вставить("HTMLПредставление", "");
	Результат.Вставить("ВыполнитьЗадачуПервая", "");
	Результат.Вставить("ВыполнитьЗадачуВторая", "");
	Результат.Вставить("ВыполнитьЗадачуТретья", "");
	Результат.Вставить("ЦветТекстаПервая", Новый Цвет);
	Результат.Вставить("ЦветТекстаВторая", Новый Цвет);
	Результат.Вставить("ЦветТекстаТретья", Новый Цвет);
	Результат.Вставить("ВключенХронометраж", Ложь);
	Результат.Вставить("ДатаНачалаХронометража", Дата(1, 1, 1));
	Результат.Вставить("ДатаКонцаХронометража", Дата(1, 1, 1));
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Предметы = Новый Массив;
	
	Для каждого СтрокаПредмета из РеквизитыЗадачи.Предметы Цикл
		
		Предмет = Новый Структура;
		Предмет.Вставить("Наименование", СтрокаПредмета.Наименование);
		Предмет.Вставить("ID", СтрокаПредмета.ID);
		Предмет.Вставить("Тип", СтрокаПредмета.Тип);
		Предмет.Вставить("Расширение", СтрокаПредмета.Расширение);
		Предмет.Вставить("КлючСтраницыКоманд", "");
		Предмет.Вставить("Ссылка", Неопределено);
		
		Файлы = Новый Массив;
		
		Если СтрокаПредмета.Тип = "DMFile" Тогда
			// Веб-сервис с мультипредметностью сообщает расширение вместе с коллекцией предметов.
			Если Не ДоступнаМультипредметность Тогда // получим расширение вызовом сервиса.
				МассивКолонок = Новый Массив;
				МассивКолонок.Добавить("extension");
				Попытка
					ОбъектыXDTO = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(
						Прокси, СтрокаПредмета.Тип, СтрокаПредмета.ID, МассивКолонок);
				Исключение
					ОбработатьИсключение(ИнформацияОбОшибке());
					Возврат Неопределено;
				КонецПопытки;
				ОбъектXDTO = ОбъектыXDTO.objects[0];
				Предмет.Расширение = ОбъектXDTO.extension;
			КонецЕсли;
			Предмет.Вставить("Картинка", РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(
					Предмет.Расширение));
			Предмет.Вставить("Представление", СтрокаПредмета.Наименование);
			
		Иначе // объект иного типа, который может иметь приложенные файлы
			Если ДоступнаМультипредметность Тогда
				Предмет.Вставить("Картинка", ИнтеграцияС1СДокументооборотКлиентСервер.КартинкаПоРолиПредмета(
						СтрокаПредмета.РольПредмета));
			Иначе // роль предмета неизвестна, пусть будет основной
				Предмет.Вставить("Картинка", ИнтеграцияС1СДокументооборотКлиентСервер.КартинкаПоРолиПредмета(
						"Основной"));
			КонецЕсли;
			// Получим представление из наименования предмета и его имени в процессе.
			Представление = Предмет.Наименование;
			Если ЗначениеЗаполнено(СтрокаПредмета.ИмяПредмета) Тогда
				Представление = Представление + " (" + СтрокаПредмета.ИмяПредмета + ")";
			КонецЕсли;
			// Найдем связанный объект.
			Если ЗначениеЗаполнено(СтрокаПредмета.СвязанныйОбъектID) Тогда
				СвязанныйОбъект = Новый Структура("id, type", 
					СтрокаПредмета.СвязанныйОбъектID,
					СтрокаПредмета.СвязанныйОбъектТип);
				Предмет.Ссылка = ИнтеграцияС1СДокументооборот.СсылкаПоВнешнемуОбъекту(СвязанныйОбъект);
			КонецЕсли;
			Если ЗначениеЗаполнено(Предмет.Ссылка) Тогда
				// Ситуация, когда права на объект в ДО есть, а в ИС нет, не должна приводить к исключению
				// при выборке задач. При возникновении исключения получим представление из ДО, а пользователь
				// увидит "Нарушение прав доступа" лишь при попытке открыть предмет.
				Попытка
					Предмет.Вставить("Представление", Строка(Предмет.Ссылка));
				Исключение
					Предмет.Вставить("Представление", Представление);
					ЗаписьЖурналаРегистрации(
						ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(
							НСтр("ru = 'Ошибка при получении представления связанного объекта'",
								ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
						УровеньЖурналаРегистрации.Ошибка,,
						Предмет.Ссылка,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			Иначе
				Предмет.Вставить("Представление", Представление);
			КонецЕсли;
			// Получим приложенные файлы.
			Попытка
				СписокФайлов = ИнтеграцияС1СДокументооборотВызовСервера.ФайлыПоВладельцу(
					СтрокаПредмета.ID, СтрокаПредмета.Наименование, СтрокаПредмета.Тип);
			Исключение
				ОбработатьИсключение(ИнформацияОбОшибке());
				Возврат Неопределено;
			КонецПопытки;
			Для каждого ФайлXDTO из СписокФайлов.files Цикл
				Файл = Новый Структура;
				Файл.Вставить("Наименование", ФайлXDTO.name);
				Файл.Вставить("Тип", ФайлXDTO.objectId.type);
				Файл.Вставить("ID", ФайлXDTO.objectId.id);
				Файл.Вставить("Расширение", ФайлXDTO.extension);
				Файл.Вставить("Представление", Файл.Наименование);
				Файл.Вставить("Картинка", 
					РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(ФайлXDTO.extension));
				Файлы.Добавить(Файл);
			КонецЦикла;
		КонецЕсли;
			
		Предмет.Вставить("Файлы", Файлы);
			
		// Получим пункты подменю "Создать на основании".
		СтруктураКоманд = ИнтеграцияС1СДокументооборотВызовСервера.СтруктураКомандСозданияИОткрытия(
			СтрокаПредмета.Тип, СтрокаПредмета.ID);
		Если СтруктураКоманд <> Неопределено Тогда
			КомандыСоздания = Неопределено;
			Если СтруктураКоманд.Свойство("КомандыСоздания", КомандыСоздания) 
				и КомандыСоздания.Количество() > 0 Тогда
				КлючСтраницы = КлючСтраницыКоманд(СтрокаПредмета.Тип, СтруктураКоманд.ВидДокументаID);
				Предмет.Вставить("КлючСтраницыКоманд", КлючСтраницы);
				Предмет.Вставить("КомандыСоздания", КомандыСоздания);
			КонецЕсли;
		КонецЕсли;
		
		Предметы.Добавить(Предмет);
		
	КонецЦикла;
	
	Результат.Вставить("Предметы", Предметы);
		
	// Получим HTML-представление.
	СтрокаПолноеОписаниеЗадачи = РеквизитыЗадачи.Описание;
	
	Если ЗначениеЗаполнено(РеквизитыЗадачи.ПроцессТип) и ЗначениеЗаполнено(РеквизитыЗадачи.ПроцессId) Тогда
		
		Реквизиты = Новый Массив;
		Реквизиты.Добавить("executionComment");
		Попытка
			ОбъектыXDTO = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(
				Прокси, РеквизитыЗадачи.ПроцессТип, РеквизитыЗадачи.ПроцессId, Реквизиты);
		Исключение
			ОбработатьИсключение(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
		ПроцессОбъект = ОбъектыXDTO.objects[0];
	
		Если ПроцессОбъект.Свойства().Получить("executionComment") <> Неопределено Тогда
			Если Не ПустаяСтрока(ПроцессОбъект.executionComment) Тогда
				Если Не ПустаяСтрока(СтрокаПолноеОписаниеЗадачи) Тогда
					СтрокаПолноеОписаниеЗадачи = 	СтрокаПолноеОписаниеЗадачи + Символы.ПС + Символы.ПС;
				КонецЕсли;
				СтрокаПолноеОписаниеЗадачи = СтрокаПолноеОписаниеЗадачи 
				+ Символы.ПС + НСтр("ru = 'История выполнения:'")
				+ Символы.ПС + "------------------------------------"
				+ Символы.ПС + ПроцессОбъект.executionComment;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаПолноеОписаниеЗадачи = СтрЗаменить(СтрокаПолноеОписаниеЗадачи, Символы.ПС, "<br>");
	ТекстHTML = "<html>
	 |<head>  	  	
	 | <style>
	 |  h1 {	 
	 |   font-size: 10pt;	 
	 |	 font-family:Arial; 
	 |  } 
	 |  p {
	 |   font-size: 10pt;	 
	 |	 font-family:Arial; 
	 |  }
	 |	BODY {
	 |	 margin: 0px; 
	 |	 padding: 3px;   	 
	 |	} 
	 | </style>	 
	 |</head>
	 |<body scroll=auto>";
	ТекстHTML = ТекстHTML + "<h1>" + РеквизитыЗадачи.Задача + "</h1>";
	Если ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель) Тогда
		Если СокрЛП(РеквизитыЗадачи.Исполнитель) 
			<> СокрЛП(ИмяПользователя) Тогда
			ОписаниеИсполнителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСТР("ru = 'Кому: %1'"),
				РеквизитыЗадачи.Исполнитель);
			ТекстHTML = ТекстHTML + "<p>" + ОписаниеИсполнителя + "</p>";
		КонецЕсли;
	КонецЕсли;
	Если РеквизитыЗадачи.НомерИтерации <> 0 Тогда
		ИтерацияЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСТР("ru = 'Цикл: %1'"),
			РеквизитыЗадачи.НомерИтерации);
			
		ТекстHTML = ТекстHTML + "<p>" + ИтерацияЗадачи + "</p>";
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаПолноеОписаниеЗадачи) Тогда
		ТекстHTML = ТекстHTML + "<p>" + СтрокаПолноеОписаниеЗадачи + "</p>";
	Иначе
		ТекстHTML = ТекстHTML + "<p><FONT color=""#C0C0C0"">"
			+ НСтр("ru = 'У задачи нет описания.'") + "</FONT></p>";
	КонецЕсли;
	ТекстHTML = ТекстHTML + "</body></html>";
	Результат.HTMLПредставление = ТекстHTML;
	
	// Цвета и заголовки кнопок исполнения.
	СтруктураКнопок = ИнтеграцияС1СДокументооборотВызовСервера.СтруктураИсполненияЗадачи(
		РеквизитыЗадачи.ЗадачаТип, РеквизитыЗадачи.ЗадачаID, РеквизитыЗадачи.ПроцессТип, РеквизитыЗадачи.ПроцессID, 
		РеквизитыЗадачи.ТочкаМаршрутаКратко, РеквизитыЗадачи.Выполнена);
	ИменаЦветаКнопок = Новый Структура("ВыполнитьЗадачуПервая, ВыполнитьЗадачуВторая, ВыполнитьЗадачуТретья",
		"ЦветТекстаПервая", "ЦветТекстаВторая", "ЦветТекстаТретья");
	Для каждого ИмяЦветКнопки из ИменаЦветаКнопок Цикл
		Результат[ИмяЦветКнопки.Ключ] = СтруктураКнопок[ИмяЦветКнопки.Ключ];
		Результат[ИмяЦветКнопки.Значение] = СтруктураКнопок[ИмяЦветКнопки.Значение];
	КонецЦикла;
		
	// Хронометраж.
	Если ДоступенФункционалХронометраж Тогда
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetChronometrationSettingsRequest");
		ОбъектID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(
			Прокси, РеквизитыЗадачи.ЗадачаId, РеквизитыЗадачи.ЗадачаТип);
		Запрос.objects.Добавить(ОбъектID);
		Попытка
			ОтветСервиса = Прокси.execute(Запрос);
		Исключение
			ОбработатьИсключение(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, ОтветСервиса);
		ПараметрыХронометража = ОтветСервиса.settings[0];
		Результат.ВключенХронометраж = ПараметрыХронометража.chronometrationOn;
		Результат.ДатаНачалаХронометража = ПараметрыХронометража.beginDate;
		Результат.ДатаКонцаХронометража = ПараметрыХронометража.endDate;
	КонецЕсли;
	
	Если НеобходимоОбновлениеФормы Тогда
		ОбновитьПредставлениеЗадачиНаСервере(РеквизитыЗадачи, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьКомандыНадОписаниемЗадачи(ДетальныеСведенияЗадачи)
	
	КлючСтраницыКоманд = "";
	
	// На каждой странице - своя кнопка хронометража.
	Если ДетальныеСведенияЗадачи = Неопределено Тогда
		ЭлементПереключитьХронометраж = Элементы.ПереключитьХронометраж;
		ЭлементПереключитьХронометраж.Доступность = Ложь;
	Иначе
		ТекущийПредмет = Неопределено;
		Для каждого Предмет из ДетальныеСведенияЗадачи.Предметы Цикл
			Если Предмет.Тип <> "DMFile" Тогда
				ТекущийПредмет = Предмет;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ТекущийПредмет <> Неопределено Тогда
			КлючСтраницыКоманд = Предмет.КлючСтраницыКоманд;
			ИмяНовойСтраницы = "ГруппаСтраницаКоманд" + КлючСтраницыКоманд;
			// Строим подменю лишь при необходимости.
			Если Элементы.Найти(ИмяНовойСтраницы) = Неопределено Тогда
				ПостроитьПодменюСозданияНаОсновании();
			КонецЕсли;
			ЭлементПереключитьХронометраж = Элементы["ПереключитьХронометраж" + КлючСтраницыКоманд];
			ЭлементПереключитьХронометраж.Доступность = Истина;
			Если ДетальныеСведенияЗадачи.ВключенХронометраж Тогда 
				ЭлементПереключитьХронометраж.Пометка = Истина;
			Иначе
				ЭлементПереключитьХронометраж.Пометка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Элементы.ГруппаСтраницыКоманд.ТекущаяСтраница =
		Элементы["ГруппаСтраницаКоманд" + КлючСтраницыКоманд];

КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеЗадачиНаСервере(РеквизитыЗадачи, ДетальныеСведенияЗадачи)
	
	Элементы.Комментарий.ОтметкаНезаполненного = Ложь;
	
	ОбновитьКомандыНадОписаниемЗадачи(ДетальныеСведенияЗадачи);
	
	Если РеквизитыЗадачи = Неопределено Тогда
		Элементы.ГруппаИсполнениеСтраницыКнопок.ТекущаяСтраница = Элементы.ГруппаИсполнениеНоль;
		Комментарий = "";
		HTMLПредставление = "";
		ДеревоПриложений.ПолучитьЭлементы().Очистить();
		Для каждого КнопкаСоздания из Элементы.ГруппаСоздатьНаОсновании.ПодчиненныеЭлементы Цикл
			Если Лев(КнопкаСоздания.ИмяКоманды, 8) = "Создать_" Тогда
				КнопкаСоздания.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	// Цвета и заголовки кнопок исполнения.
	ИменаЦветаКнопок = Новый Структура("ВыполнитьЗадачуПервая, ВыполнитьЗадачуВторая, ВыполнитьЗадачуТретья",
		"ЦветТекстаПервая", "ЦветТекстаВторая", "ЦветТекстаТретья");
	Если ЗначениеЗаполнено(ДетальныеСведенияЗадачи.ВыполнитьЗадачуТретья) Тогда
		КоличествоКнопок = "Три";
	ИначеЕсли ЗначениеЗаполнено(ДетальныеСведенияЗадачи.ВыполнитьЗадачуВторая) Тогда
		КоличествоКнопок = "Две";
	ИначеЕсли ЗначениеЗаполнено(ДетальныеСведенияЗадачи.ВыполнитьЗадачуПервая) Тогда
		КоличествоКнопок = "Одна";
	Иначе
		КоличествоКнопок = "Ноль";
	КонецЕсли;
	Для каждого ИмяЦветКнопки из ИменаЦветаКнопок Цикл
		Если ЗначениеЗаполнено(ДетальныеСведенияЗадачи[ИмяЦветКнопки.Ключ]) Тогда
			Кнопка = Элементы[КоличествоКнопок + ИмяЦветКнопки.Ключ];
			Кнопка.Заголовок = ДетальныеСведенияЗадачи[ИмяЦветКнопки.Ключ];
			Кнопка.ЦветТекста = ДетальныеСведенияЗадачи[ИмяЦветКнопки.Значение];
		КонецЕсли;
	КонецЦикла;
	Элементы.ГруппаИсполнениеСтраницыКнопок.ТекущаяСтраница = Элементы["ГруппаИсполнение" + КоличествоКнопок];
	
	HTMLПредставление = ДетальныеСведенияЗадачи.HTMLПредставление;
	
	// Заполним дерево приложений.
	Предметы = ДеревоПриложений.ПолучитьЭлементы();
	Предметы.Очистить();
	Для каждого Предмет из ДетальныеСведенияЗадачи.Предметы Цикл
		СтрокаПредмет = Предметы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПредмет, Предмет);
		Файлы = СтрокаПредмет.ПолучитьЭлементы();
		Файлы.Очистить();
		Для каждого Файл из Предмет.Файлы Цикл
 			СтрокаФайл = Файлы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаФайл, Файл);
		КонецЦикла;
	КонецЦикла;
	
	// Для задачи без предметов покажем декорацию.
	ЕстьПредметы = (ДетальныеСведенияЗадачи.Предметы.Количество() > 0);
	Если ЕстьПредметы Тогда
		Если Элементы.ГруппаПриложения.ТекущаяСтраница = Элементы.СтраницаНетПредметов Тогда
			Элементы.ГруппаПриложения.ТекущаяСтраница = Элементы.СтраницаЕстьПредметы;
		КонецЕсли;
	Иначе
		Если Элементы.ГруппаПриложения.ТекущаяСтраница = Элементы.СтраницаЕстьПредметы Тогда
			Элементы.ГруппаПриложения.ТекущаяСтраница = Элементы.СтраницаНетПредметов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ЗадачаТип, ЗадачаID, ПредметId, ДетальныеСведенияЗадачи)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMSetChronometrationSettingsRequest");
	ОбъектID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ЗадачаID, ЗадачаТип);
	Запрос.objects.Добавить(ОбъектID);
	
	Попытка
		ОтветСервиса = Прокси.execute(Запрос);
	Исключение
		ОбработатьИсключение(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, ОтветСервиса);
	
	ПараметрыХронометража = ОтветСервиса.settings[0];
	ДетальныеСведенияЗадачи.ВключенХронометраж = ПараметрыХронометража.chronometrationOn;
	ДетальныеСведенияЗадачи.ДатаНачалаХронометража = ПараметрыХронометража.beginDate;
	ДетальныеСведенияЗадачи.ДатаКонцаХронометража = ПараметрыХронометража.endDate;
	
	ОбновитьКомандыНадОписаниемЗадачи(ДетальныеСведенияЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	Записи = ИнтеграцияС1СДокументооборотВызовСервера.ПереключитьХронометражПоОбъектамДокументооборота(
		ПараметрыОповещения.АктивныеЗаписи);
	
	Для Каждого Запись Из Записи Цикл
		ПараметрыОповещенияЗаписи = Новый Структура;
		ПараметрыОповещенияЗаписи.Вставить("name", Запись.Источник);
		ПараметрыОповещенияЗаписи.Вставить("id", Запись.ИсточникID);
		ПараметрыОповещенияЗаписи.Вставить("type", Запись.ИсточникТип);
		Оповестить("Запись_ДокументооборотТрудозатраты", ПараметрыОповещенияЗаписи, Запись.ИсточникID);
	КонецЦикла;
	
	ДетальныеСведенияЗадачи = ПараметрыОповещения.ДетальныеСведенияЗадачи;
	ПереключитьХронометражСервер(ПараметрыОповещения.ЗадачаТип, ПараметрыОповещения.ЗадачаId, 
		ПараметрыОповещения.ПредметId, ДетальныеСведенияЗадачи);
	Если ДетальныеСведенияЗадачи.ВключенХронометраж Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(ПараметрыОповещения.Задача));
		Состояние(Текст);
	КонецЕсли;
	ДетальныеСведенияОЗадачах.Вставить(ПараметрыОповещения.ЗадачаId, ДетальныеСведенияЗадачи);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатПриглашения(Тип, ID)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("invitationResult");
	ОбъектыXDTO = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(
		Прокси, Тип, ID, Реквизиты);
	Задача = ОбъектыXDTO.objects[0];
	РезультатID = Задача.invitationResult.objectId.Id;
	Возврат РезультатID;

КонецФункции

&НаСервере
Функция КлючСтраницыКоманд(Тип, ВидID)
	
	Если ЗначениеЗаполнено(ВидID) Тогда
		БезопасныйID = СтрЗаменить(СтрЗаменить(СтрЗаменить(ВидID, "_", ""), " ", ""), "-", "");
		Возврат Тип + "_" + БезопасныйID;
	Иначе
		Возврат Тип;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПостроитьПодменюСозданияНаОсновании()
	
	// Соберем источники заполнения (для создания страниц-подменю) и получателей (для добавления кнопок).
	ЗапросИсточникиПолучатели = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Правила.ТипОбъектаДокументооборота КАК ТипОбъектаДокументооборота,
		|	ВЫБОР
		|		КОГДА Правила.ТипОбъектаДокументооборота = ""DMCorrespondent""
		|			ТОГДА """"
		|		КОГДА Реквизиты.ВариантПравилаЗаполненияРеквизитов = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение)
		|			ТОГДА Реквизиты.ИдентификаторЗначенияРеквизита
		|		КОГДА Реквизиты.ВариантПравилаЗаполненияРеквизитов = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.ИзШаблона)
		|			ТОГДА Реквизиты.ШаблонИдентификатор
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ИдентификаторВидаДокумента,
		|	Правила.ТипОбъектаПотребителя КАК ТипОбъектаПотребителя
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК Правила
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом.ПравилаЗаполненияРеквизитовПриВыгрузке КАК Реквизиты
		|ПО
		|	Правила.Ссылка = Реквизиты.Ссылка
		|	И Реквизиты.ИмяРеквизитаОбъектаДокументооборота = ""documentType""
		|ГДЕ
		|	НЕ Правила.ПометкаУдаления
		|ИТОГИ ПО
		|	ТипОбъектаДокументооборота,
		|   ИдентификаторВидаДокумента
		|");
		
	// Элементы, подлежащие копированию.
	ИмяИсходнойСтраницы = "ГруппаСтраницаКоманд";
	ИсходнаяСтраница = Элементы[ИмяИсходнойСтраницы];
	ИмяИсходногоПодменю = "ГруппаСоздатьНаОсновании";
	ИсходноеПодменю = Элементы[ИмяИсходногоПодменю];
	ИмяИсходнойПанели = "ГруппаКоманды";
	ИсходнаяПанель = Элементы[ИмяИсходнойПанели];
	
	ВыборкаТипДО = ЗапросИсточникиПолучатели.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТипДО.Следующий() Цикл
		
		// Обезопасим построение важной формы от возможных проблем с содержимым справочника.
		Если Не ЗначениеЗаполнено(ВыборкаТипДО.ТипОбъектаДокументооборота) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаВидID = ВыборкаТипДО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидID.Следующий() Цикл
			
			КлючСтраницы = КлючСтраницыКоманд(ВыборкаТипДО.ТипОбъектаДокументооборота,
				ВыборкаВидID.ИдентификаторВидаДокумента);
			
			ИмяНовойСтраницы = ИмяИсходнойСтраницы + КлючСтраницы;
			Если Элементы.Найти(ИмяНовойСтраницы) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяНовогоПодменю = ИмяИсходногоПодменю + КлючСтраницы;
			ИмяНовойПанели = ИмяИсходнойПанели + КлючСтраницы;
			
			// Создадим новую страницу.
			НоваяСтраница = Элементы.Добавить(ИмяНовойСтраницы, Тип("ГруппаФормы"), Элементы.ГруппаСтраницыКоманд);
			ЗаполнитьЗначенияСвойств(НоваяСтраница, ИсходнаяСтраница, , "Имя, ПутьКДаннымЗаголовка");
			
			// Создадим новую командную панель.
			НоваяПанель = Элементы.Добавить(ИмяНовойПанели, Тип("ГруппаФормы"), НоваяСтраница);
			ЗаполнитьЗначенияСвойств(НоваяПанель, ИсходнаяПанель, , "Имя");
			
			// Скопируем элементы командной панели, ограничившись двумя уровнямии.
			Для каждого ИсходныйЭлемент из ИсходнаяПанель.ПодчиненныеЭлементы Цикл
				НовыйЭлемент = Элементы.Добавить(ИсходныйЭлемент.Имя + КлючСтраницы, ТипЗнч(ИсходныйЭлемент), НоваяПанель);
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, ИсходныйЭлемент, , "Имя");
				Если ТипЗнч(ИсходныйЭлемент) = Тип("ГруппаФормы") Тогда
					НоваяГруппа = НовыйЭлемент;
					Для каждого ИсходныйЭлементГруппы из ИсходныйЭлемент.ПодчиненныеЭлементы Цикл
						НовыйЭлементГруппы = Элементы.Добавить(ИсходныйЭлементГруппы.Имя + КлючСтраницы, 
							ТипЗнч(ИсходныйЭлементГруппы), НоваяГруппа);
						ЗаполнитьЗначенияСвойств(НовыйЭлементГруппы, ИсходныйЭлементГруппы, , "Имя");
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			// Дополним стандартное подменю создания пунктами, специфичными для этого вида объекта.
			НовоеПодменю = Элементы[ИмяИсходногоПодменю + КлючСтраницы];
			ВыборкаТипПотребителя = ВыборкаВидID.Выбрать();
			Пока ВыборкаТипПотребителя.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаТипПотребителя.ТипОбъектаПотребителя) Тогда
					
					ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ВыборкаТипПотребителя.ТипОбъектаПотребителя);
					Если ОбъектМетаданных = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
						Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Элемент справочника %1'"),
							ОбъектМетаданных.Представление());
					Иначе
						Представление = ОбъектМетаданных.Представление();
					КонецЕсли;
					
					ИмяКоманды = СтрЗаменить(ВыборкаТипПотребителя.ТипОбъектаПотребителя, "_", "__");
					ИмяКоманды = СтрЗаменить(ИмяКоманды, ".", "_");
					ИмяКоманды = "Создать_" + ИмяКоманды;
					
					Если Команды.Найти(ИмяКоманды) = Неопределено Тогда
						КомандаСоздатьСвязанныйОбъект = Команды.Добавить(ИмяКоманды);
						КомандаСоздатьСвязанныйОбъект.Действие = "СоздатьСвязанныйОбъект";
					КонецЕсли;
					
					ИмяЭлемента = ИмяКоманды + КлючСтраницы;
					Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда // страховка от дубликатов правил
						Кнопка = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), НовоеПодменю);
						Кнопка.Заголовок = Представление;
						Кнопка.ИмяКоманды = ИмяКоманды;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуПерваяЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗадачу(1);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуВтораяЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Истина Тогда
		ВыполнитьЗадачу(2);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуТретьяЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Истина Тогда
		ВыполнитьЗадачу(3);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(НомерКнопки)
	 
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено или СтрокаЗадачи.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗадачуЗавершение", ЭтаФорма, НомерКнопки);
		
	Если ФактическийИсполнительЗадач = "userChoice"
		И СтрокаЗадачи.ИсполнительТип = "DMUser"
		И СтрокаЗадачи.ИсполнительID <> ТекущийПользовательID Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Исполнитель", СтрокаЗадачи.Исполнитель);
		ПараметрыФормы.Вставить("ТекущийПользователь", ТекущийПользователь);
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИсполнителяЗадачи",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе // без вопроса
			
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ФактическийИсполнительЗадач);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуЗавершение(ВыбранныйИсполнитель, НомерКнопки) Экспорт
	
	Если ВыбранныйИсполнитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗадачи = Элементы.Задачи.ТекущиеДанные;
	ПредметСсылка = Неопределено;
	
	Если ЗаписатьЗадачу(СтрокаЗадачи.ЗадачаТип,
		СтрокаЗадачи.ЗадачаID,
		Комментарий,
		Истина,
		НомерКнопки,
		СтрокаЗадачи.Предметы,
		ВыбранныйИсполнитель) Тогда
		
		Если ЗначениеЗаполнено(ПредметСсылка) Тогда
			ОповеститьОбИзменении(ПредметСсылка);
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура("name, id, type",
			СтрокаЗадачи.Задача, СтрокаЗадачи.ЗадачаID, СтрокаЗадачи.ЗадачаТип);
		Оповестить("Запись_ДокументооборотЗадача", ПараметрыОповещения, ЭтаФорма);
		Если ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Источник", СтрокаЗадачи.Задача);
			ПараметрыФормы.Вставить("ИсточникID", СтрокаЗадачи.ЗадачаID);
			ПараметрыФормы.Вставить("ИсточникТип", СтрокаЗадачи.ЗадачаТип);
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы", 
				ПараметрыФормы,
				СтрокаЗадачи.ЗадачаID);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьЗадачу(Тип, Идентификатор, Комментарий, ВыполнитьЗадачу, НомерКнопки, Знач ПредметыЗадачи, ВыбранныйИсполнитель)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Попытка
		ОбъектыXDTO = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси, Тип, Идентификатор);
	Исключение
		ОбработатьИсключение(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Задача = ОбъектыXDTO.objects[0];
	
	ЗаполнитьСвойстваОбъектаПоТипуЗадачи(Прокси, Задача, Комментарий, НомерКнопки);
	
	Задача.executed = Задача.executed или ВыполнитьЗадачу;
	Задача.endDate = ТекущаяДатаСеанса();
	Задача.executionComment = Комментарий;
	
	Если ВыбранныйИсполнитель = "currentUser" Тогда
		Задача.performer = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBusinessProcessTaskExecutor");
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси,
			ЭтаФорма,
			"ТекущийПользователь",
			Задача.performer.user,
			"DMUser")
	КонецЕсли;
	
	Ответ = ИнтеграцияС1СДокументооборот.ЗаписатьОбъект(Прокси, Задача);
	
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		Возврат Ложь;
	Иначе
		Если Тип = "DMBusinessProcessApprovalTaskApproval" и ВыполнитьЗадачу Тогда
			НовоеСостояние = Неопределено;
			Если НомерКнопки = 3 Тогда
				НовоеСостояние = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован;
			Иначе
				НаборКолонок = Новый Массив;
				НаборКолонок.Добавить("completed");
				ДанныеПроцесса = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси,
					Задача.parentBusinessProcess.objectId.type,
					Задача.parentBusinessProcess.objectId.id,
					НаборКолонок);
				Если ДанныеПроцесса.objects[0].completed = Истина Тогда
					НовоеСостояние = Перечисления.СостоянияСогласованияВДокументообороте.Согласован;
				КонецЕсли;
			КонецЕсли;
			Если НовоеСостояние <> Неопределено Тогда
				Для Каждого СтрокаПредмета Из ПредметыЗадачи Цикл
					Если (Не ДоступнаМультипредметность Или СтрокаПредмета.РольПредмета = "Основной")
						И ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(СтрокаПредмета.Тип) Тогда
						ИнтеграцияС1СДокументооборотВызовСервера.ПриИзмененииСостоянияСогласования(
							СтрокаПредмета.ID,
							СтрокаПредмета.Тип,
							НовоеСостояние,
							Ложь);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСвойстваОбъектаПоТипуЗадачи(Прокси, Задача, Комментарий, НомерКнопки)
	
	ИмяТипа = Задача.Тип().Имя;
	
	Если ИмяТипа = "DMBusinessProcessOrderTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessApprovalTaskApproval" Тогда
		Ответ = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMApprovalResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = "Согласовано";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, 
				"Согласовано", "DMApprovalResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = "Согласовано с замечаниями";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, 
				"СогласованоСЗамечаниями", "DMApprovalResult");
		ИначеЕсли НомерКнопки = 3 Тогда
			Ответ.name = "Не согласовано";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, 
				"НеСогласовано", "DMApprovalResult");
		КонецЕсли;
		Задача.approvalResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessApprovalTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConfirmationTaskConfirmation" Тогда
		Ответ = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMConfirmationResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = "Утверждено";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, 
				"Утверждено", "DMConfirmationResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = "Не утверждено";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, 
				"НеУтверждено", "DMConfirmationResult");
		КонецЕсли;
		Задача.confirmationResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConfirmationTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessRegistrationTaskRegistration" Тогда
		Ответ = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMRegistrationResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = "Зарегистрировано";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, 
				"Зарегистрировано", "DMRegistrationResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = "Не зарегистрировано";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, 
				"НеЗарегистрировано", "DMRegistrationResult");
		КонецЕсли;
		Задача.registrationResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessRegistrationTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessPerfomanceTaskCheckup" Тогда
		// Для быстрого исполнения из списка задач не будем предусматривать комментарии к исполнению.
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConsiderationTaskAcquaint" Тогда
		Задача.resolution = Комментарий;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessIssuesSolutionTaskAnswer" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessInvitationTaskInvitation" Тогда
		Ответ = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMInvitationResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = "Принято";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, 
				"Принято", "DMInvitationResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = "Не принято";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, 
				"НеПринято", "DMInvitationResult");
		КонецЕсли;
		Задача.invitationResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessInvitationTaskAcquaint" Тогда
		Если НомерКнопки = 1 Тогда
			Задача.invitationAccepted = Истина;
		ИначеЕсли НомерКнопки = 2 Тогда
			Задача.invitationReturned = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИсключение(ИнформацияОбОшибке)
	
	ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ВерсияСервиса = ИнтеграцияС1СДокументооборот.ВерсияСервиса();
	Если ВерсияСервиса = "0.0.0.0" Тогда
		ИмяСобытия = НСтр("ru = 'Интеграция с 1С:Документооборотом'");
		ОбработатьФормуСогласноВерсииСервиса();
	Иначе
		ВызватьИсключение ПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
