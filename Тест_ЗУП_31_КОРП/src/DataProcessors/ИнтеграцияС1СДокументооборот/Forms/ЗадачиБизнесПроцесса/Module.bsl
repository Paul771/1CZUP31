
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// задачи
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
		Если Параметры.Свойство("ВнешнийОбъект") Тогда
			БизнесПроцесс = Параметры.ВнешнийОбъект.presentation;
			БизнесПроцессID = Параметры.ВнешнийОбъект.id;
			БизнесПроцессТип = Параметры.ВнешнийОбъект.type;
			УстановитьВидимостьКолонокЗадач();
			ОбновитьСписокЗадачНаСервере();
		КонецЕсли;
	Иначе
		Обработки.ИнтеграцияС1СДокументооборот.ОбработатьФормуПриНедоступностиФункционалаВерсииСервиса(ЭтаФорма);
		Элементы.ГруппаКоманднаяПанель.Видимость = Ложь;
		Элементы.ЗадачиПроцесса.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьОформлениеЗадач(ЭтаФорма.УсловноеОформление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументооборотЗадача" И Источник = ЭтаФорма Тогда
		ОбновитьСписокЗадачНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачи

&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ЗадачиПроцесса.ТекущиеДанные <> Неопределено Тогда
		Если НЕ Элементы.ЗадачиПроцесса.ТекущиеДанные.Группировка Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("id", Элементы.ЗадачиПроцесса.ТекущиеДанные.ЗадачаID);
			ПараметрыФормы.Вставить("type", Элементы.ЗадачиПроцесса.ТекущиеДанные.ЗадачаТип);
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.Задача", ПараметрыФормы, ЭтаФорма, Элементы.ЗадачиПроцесса.ТекущиеДанные.ЗадачаID);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписокЗадачНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	
	Если Элементы.ЗадачиПроцесса.ТекущиеДанные = Неопределено Тогда
		возврат;
	КонецЕсли;
	
	Если НЕ Элементы.ЗадачиПроцесса.ТекущиеДанные.Группировка Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("id", Элементы.ЗадачиПроцесса.ТекущиеДанные.ЗадачаID);
		ПараметрыФормы.Вставить("type", Элементы.ЗадачиПроцесса.ТекущиеДанные.ЗадачаТип);
		ПараметрыФормы.Вставить("ТипПроцесса",Элементы.ЗадачиПроцесса.ТекущиеДанные.ПроцессТип);
		ПараметрыФормы.Вставить("ТочкаМаршрута",Элементы.ЗадачиПроцесса.ТекущиеДанные.ТочкаМаршрута);
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.Задача", ПараметрыФормы, ЭтаФорма, Элементы.ЗадачиПроцесса.ТекущиеДанные.ЗадачаID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	ПринятьЗадачиКИсполнению();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьТекущуюСтроку(ЗадачаID) 
	
	Если ЗначениеЗаполнено(ЗадачаID) Тогда
		Если Элементы.ЗадачиПроцесса.Отображение = ОтображениеТаблицы.Список Тогда
			СтрокиЗадачи = ЗадачиПроцесса.ПолучитьЭлементы();
			Для каждого СтрокаЗадачи из СтрокиЗадачи Цикл
				Если СтрокаЗадачи.ЗадачаId = ЗадачаID Тогда
					Элементы.ЗадачиПроцесса.ТекущаяСтрока = СтрокаЗадачи.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для каждого ГруппаДерева из ЗадачиПроцесса.ПолучитьЭлементы() Цикл
				СтрокиЗадачи = ГруппаДерева.ПолучитьЭлементы();
				Для каждого СтрокаЗадачи из СтрокиЗадачи Цикл
					Если СтрокаЗадачи.ЗадачаId = ЗадачаID Тогда
						Элементы.ЗадачиПроцесса.ТекущаяСтрока = СтрокаЗадачи.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПринятьЗадачиКИсполнению()
	
	МассивСтрок = Элементы.ЗадачиПроцесса.ВыделенныеСтроки;
	Если МассивСтрок.Количество() <> 0 Тогда
		МассивЗадач = новый Массив;
		Для каждого Элемент из МассивСтрок Цикл
			Если ЗначениеЗаполнено(ЗадачиПроцесса.НайтиПоИдентификатору(Элемент).ЗадачаID) Тогда
				МассивЗадач.Добавить(ЗадачиПроцесса.НайтиПоИдентификатору(Элемент).ЗадачаID);
			КонецЕсли;
		КонецЦикла;
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		ИнтеграцияС1СДокументооборот.ПринятьЗадачуКИсполнению(Прокси, МассивЗадач);
		ОбновитьСписокЗадачНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьОформлениеЗадач(УсловноеОформление)
	
	// установка оформления для просроченных задач
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗадачиПроцесса.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗадачиПроцесса.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = КонецДня(ТекущаяДатаСеанса());
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗадачиПроцесса.Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ЗадачиПроцессаСрокИсполнения");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗадачиПроцесса(Прокси, Выполненные, БизнесПроцессТип, БизнесПроцессID)
	
	СписокУсловий = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "byUser";
	Условие.value = Ложь;
	СписокУсловий.conditions.Добавить(Условие);
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "withExecuted";
	Условие.value = Истина;
	СписокУсловий.conditions.Добавить(Условие);
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "businessProcess";
	Условие.value = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, БизнесПроцессID, БизнесПроцессТип);
	СписокУсловий.conditions.Добавить(Условие);
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "typed";
	Условие.value = Истина;
	СписокУсловий.conditions.Добавить(Условие);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
	Запрос.type = "DMBusinessProcessTask";
	Запрос.query = СписокУсловий;
	
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ.items;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокЗадач(ЗадачиXDTO)
	
	ТекущаяЗадача = Элементы.ЗадачиПроцесса.ТекущаяСтрока;
	Если ТекущаяЗадача <> неопределено Тогда
		ТекущаяЗадача = ЗадачиПроцесса.НайтиПоИдентификатору(ТекущаяЗадача).ЗадачаID;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ЗадачиПроцесса");
	
	ТаблицаЗадач = новый ТаблицаЗначений;
	Для каждого Колонка из Дерево.Колонки Цикл
		ТаблицаЗадач.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	Для каждого ЗадачаXDTO из ЗадачиXDTO Цикл
		СтрокаЗадачи = ТаблицаЗадач.Добавить();
		ЗаполнитьСтрокуЗадачи(СтрокаЗадачи, ЗадачаXDTO.object);
	КонецЦикла;
	
	Дерево.Строки.Очистить();
	
	Если ЗначениеЗаполнено(РежимГруппировки) Тогда
		Элементы.ЗадачиПроцесса.Отображение = ОтображениеТаблицы.Дерево;
		ТаблицаГруппировок = ТаблицаЗадач.Скопировать();
    	ТаблицаГруппировок.Свернуть(РежимГруппировки);
		Для каждого СтрокаГруппировки из ТаблицаГруппировок Цикл
			СтрокаДерева = Дерево.Строки.Добавить();
			СтрокаДерева.Задача = СтрокаГруппировки[РежимГруппировки];
			СтрокаДерева.КартинкаЗадачи = 2;
			СтрокаДерева.Важность = 1;
			СтрокаДерева.Группировка = Истина;
			СтрокиГруппировки = ТаблицаЗадач.НайтиСтроки(новый Структура(РежимГруппировки,СтрокаГруппировки[РежимГруппировки]));
			Для каждого Строка из СтрокиГруппировки Цикл
				СтрокаЭлемента = СтрокаДерева.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЭлемента,Строка);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Элементы.ЗадачиПроцесса.Отображение = ОтображениеТаблицы.Список;
		Для каждого Строка из ТаблицаЗадач Цикл
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,Строка);
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево,"ЗадачиПроцесса");
	ТаблицаЗадачСсылка = ПоместитьВоВременноеХранилище(ТаблицаЗадач,УникальныйИдентификатор);
	УстановитьТекущуюСтроку(ТекущаяЗадача);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонокЗадач()
	
	Если БизнесПроцессТип = "DMBusinessProcessApproval"
		ИЛИ БизнесПроцессТип = "DMBusinessProcessConfirmation" Тогда
		Элементы.ЗадачиПроцессаЗадача.Видимость = Истина;
		Элементы.ЗадачиПроцессаЦикл.Видимость = Истина;
		Элементы.ЗадачиПроцессаРезультат.Видимость = Истина;
		Элементы.ЗадачиПроцессаРецензия.Видимость = Истина;
		Элементы.ЗадачиПроцессаИсполнитель.Видимость = Истина;
		
	ИначеЕсли БизнесПроцессТип = "DMBusinessProcessPerformance" 
		ИЛИ БизнесПроцессТип = "DMBusinessProcessOrder" 
		ИЛИ БизнесПроцессТип = "DMBusinessProcessRegistration" 
		ИЛИ БизнесПроцессТип = "DMBusinessProcessOutgoingDocumentProcessing"
		ИЛИ БизнесПроцессТип = "DMBusinessProcessInternalDocumentProcessing"
		ИЛИ БизнесПроцессТип = "DMBusinessProcessIncomingDocumentProcessing" Тогда
		Элементы.ЗадачиПроцессаЗадача.Видимость = Истина;
		Элементы.ЗадачиПроцессаИсполнительСправа.Видимость = Истина;
		Элементы.ЗадачиПроцессаВыполнена.Видимость = Истина;
		
	ИначеЕсли БизнесПроцессТип = "DMBusinessProcessAcquaintance" Тогда
		Элементы.ЗадачиПроцессаИсполнитель.Видимость = Истина;
		Элементы.ЗадачиПроцессаОзнакомился.Видимость = Истина;
		
	ИначеЕсли БизнесПроцессТип = "DMBusinessProcessConsideration" Тогда
		Элементы.ЗадачиПроцессаИсполнитель.Видимость = Истина;
		Элементы.ЗадачиПроцессаЗадача.Видимость = Истина;
		Элементы.ЗадачиПроцессаВыполнена.Видимость = Истина;
		
	ИначеЕсли БизнесПроцессТип = "DMBusinessProcessIssuesSolution" Тогда
		Элементы.ЗадачиПроцессаЗадача.Видимость = Истина;
		Элементы.ЗадачиПроцессаИсполнительСправа.Видимость = Истина;
		Элементы.ЗадачиПроцессаРецензия.Видимость = Истина;
		
	ИначеЕсли БизнесПроцессТип = "DMBusinessProcessInvitation" Тогда
		Элементы.ЗадачиПроцессаИсполнитель.Видимость = Истина;
		Элементы.ЗадачиПроцессаЦикл.Видимость = Истина;
		Элементы.ЗадачиПроцессаЗадача.Видимость = Истина;
		Элементы.ЗадачиПроцессаРезультат.Видимость = Истина;
		Элементы.ЗадачиПроцессаКомментарий.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьСтрокуЗадачи(СтрокаЗадачи,ЗадачаXDTO)
	
	Важность = 1;
	Если ЗадачаXDTO.importance.objectId.id = "Низкая" Тогда
		Важность = 0;
	ИначеЕсли ЗадачаXDTO.importance.objectId.id = "Обычная" Тогда
		Важность = 1;
	ИначеЕсли ЗадачаXDTO.importance.objectId.id = "Высокая" Тогда 
		Важность = 2;
	КонецЕсли;
	
	СтрокаЗадачи.Важность = Важность;
	СтрокаЗадачи.ВажностьСтрокой = ЗадачаXDTO.importance.name;
	СтрокаЗадачи.КартинкаЗадачи = ?(ЗадачаXDTO.executed,1,0);
	СтрокаЗадачи.Выполнена = ЗадачаXDTO.executed;
	СтрокаЗадачи.ТочкаМаршрута = ЗадачаXDTO.businessProcessStep;
	СтрокаЗадачи.СрокИсполнения = ЗадачаXDTO.dueDate;
	СтрокаЗадачи.Записана = ЗадачаXDTO.beginDate;
	СтрокаЗадачи.Автор = ЗадачаXDTO.author.name;
	СтрокаЗадачи.ПринятаКИсполнению = ЗадачаXDTO.accepted;
	СтрокаЗадачи.Номер = ЗадачаXDTO.number;
	СтрокаЗадачи.Дата = ЗадачаXDTO.beginDate;
	СтрокаЗадачи.Рецензия = ЗадачаXDTO.executionComment;
	СтрокаЗадачи.Комментарий = ЗадачаXDTO.executionComment;
	СтрокаЗадачи.ДатаВыполнения = ЗадачаXDTO.endDate;
	ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,ЗадачаXDTO.performer.user,"Исполнитель");
	ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,ЗадачаXDTO.parentBusinessProcess,"Процесс");
	ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,ЗадачаXDTO.target,"Предмет");
	ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,ЗадачаXDTO,"Задача");
	
	// Заполним строки задач по типу бизнес процесса
	Если БизнесПроцессТип = "DMBusinessProcessApproval" Тогда
    	СтрокаЗадачи.Цикл = ЗадачаXDTO.iterationNumber;
		Если ЗадачаXDTO.objectID.type = "DMBusinessProcessApprovalTaskApproval" Тогда
			ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,ЗадачаXDTO.approvalResult,"Результат");
		КонецЕсли;
	ИначеЕсли БизнесПроцессТип = "DMBusinessProcessConfirmation" Тогда
    	СтрокаЗадачи.Цикл = ЗадачаXDTO.iterationNumber;
		Если ЗадачаXDTO.objectID.type = "DMBusinessProcessConfirmationTaskConfirmation" Тогда
			ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,ЗадачаXDTO.confirmationResult,"Результат");
		КонецЕсли;
	ИначеЕсли БизнесПроцессТип = "DMBusinessProcessInvitation" Тогда
    	СтрокаЗадачи.Цикл = ЗадачаXDTO.iterationNumber;
		Если ЗадачаXDTO.objectID.type = "DMBusinessProcessInvitationTaskInvitation" Тогда
			ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,ЗадачаXDTO.invitationResult,"Результат");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадачНаСервере()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Если ЗначениеЗаполнено(БизнесПроцессID) Тогда
		ЗадачиПроцессаXDTO = ПолучитьЗадачиПроцесса(Прокси, Выполненные, БизнесПроцессТип, БизнесПроцессID);
		ЗаполнитьСписокЗадач(ЗадачиПроцессаXDTO);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьОбъектныйРеквизит(Приемник, Источник, ИмяРеквизита)
	
	Если Источник <> Неопределено Тогда
		Приемник[ИмяРеквизита] = Источник.name;
		Приемник[ИмяРеквизита + "ID"] = Источник.objectId.id;
		Приемник[ИмяРеквизита + "Тип"] = Источник.objectId.type;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
