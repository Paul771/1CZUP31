
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаОжидаетсяПодключение;
	
	ВнешнийОбъект = Параметры.ВнешнийОбъект;
	МетаданныеПотребителя = Параметры.ВнешнийОбъект.Метаданные();
	ИмяПотребителя = ?(МетаданныеПотребителя.Синоним <> "", 
		МетаданныеПотребителя.Синоним, 
		МетаданныеПотребителя.Имя);
		
	// Получим тип и представление создаваемого объекта, если они однозначны.
	Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(ВнешнийОбъект);
	Для Каждого Правило Из Правила Цикл
		Если Не ЗначениеЗаполнено(ТипСоздаваемогоОбъекта) Тогда
			ТипСоздаваемогоОбъекта = Правило.ТипОбъектаДО;
		ИначеЕсли ТипСоздаваемогоОбъекта <> Правило.ТипОбъектаДО Тогда
			ТипСоздаваемогоОбъекта = "";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Правило Из Правила Цикл
		Если Не ЗначениеЗаполнено(ПредставлениеСоздаваемогоОбъекта) Тогда
			ПредставлениеСоздаваемогоОбъекта = Правило.ПредставлениеОбъектаДО;
		ИначеЕсли ПредставлениеСоздаваемогоОбъекта <> Правило.ПредставлениеОбъектаДО Тогда
			ПредставлениеСоздаваемогоОбъекта = "";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПредставлениеСоздаваемогоОбъекта) Тогда
		
		Элементы.ДекорацияОбъектЗаголовок.Заголовок = ПредставлениеСоздаваемогоОбъекта + ":";
		Элементы.ГруппаИнфо.Видимость = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(ТипСоздаваемогоОбъекта) Тогда
		
		Если ТипСоздаваемогоОбъекта = "DMIncomingDocument" Тогда 
			Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Входящий документ:'");
		ИначеЕсли ТипСоздаваемогоОбъекта = "DMOutgoingDocument" Тогда 
			Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Исходящий документ:'");
		ИначеЕсли ТипСоздаваемогоОбъекта = "DMInternalDocument" Тогда
			Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Внутренний документ:'");
		ИначеЕсли ТипСоздаваемогоОбъекта = "DMCorrespondent" Тогда 
			Если ИнтеграцияС1СДокументооборотПовтИсп.ИспользоватьТерминКорреспонденты() Тогда
				Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Корреспондент:'");
			Иначе
				Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Контрагент:'");
			КонецЕсли;
		КонецЕсли;
		Элементы.ГруппаИнфо.Видимость = Ложь;
		
	Иначе // нет подходящих правил
		
		Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Соответствие в 1С:Документообороте'");
		Элементы.ДекорацияИнфо.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не настроено заполнение документа 1С:Документооборота из ""%1""'"), ИмяПотребителя);
		Элементы.ГруппаИнфо.Видимость = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПодключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница <>
		Элементы.СтраницаДокументооборотДоступен Тогда
		Возврат;
	КонецЕсли;
	
	Если (ИмяСобытия = "Запись_ДокументооборотДокумент" 
			Или ИмяСобытия = "Запись_ДокументооборотОбъект")
		И Параметр.Свойство("ВнешнийОбъект")
		И Параметр.ВнешнийОбъект = ВнешнийОбъект Тогда 
		
		ДокументID = Параметр.id;
		ДокументТип = Параметр.type;
		Документ = Параметр.name;
		ДополнитьПредставлениеДокумента();
		
		ОбработатьЗаписьДокумента();
		
	ИначеЕсли ИмяСобытия = "Запись_ДокументооборотБизнесПроцесс" Тогда
		РаскрытыеЭлементы = Новый СписокЗначений;
		ПолучитьМассивРаскрытыхЭлементов(
			Элементы.ДеревоБизнесПроцессовИЗадач,
			ДеревоБизнесПроцессовИЗадач.ПолучитьЭлементы(),
			РаскрытыеЭлементы);
		РаскрытыеЭлементы.Добавить(Параметр.ID);
		ЗагрузитьДеревоБизнесПроцессовИЗадач();
		УстановитьРазвернутостьЭлементовДерева(
			Элементы.ДеревоБизнесПроцессовИЗадач,
			ДеревоБизнесПроцессовИЗадач,
			РаскрытыеЭлементы);
		УстановитьТекущийЭлементВДереве(
			Элементы.ДеревоБизнесПроцессовИЗадач,
			ДеревоБизнесПроцессовИЗадач,
			Параметр.ID);
		
	ИначеЕсли ИмяСобытия = "Запись_ДокументооборотФайл" Тогда
			
		ОбновитьСписокФайловКлиент();
		
	ИначеЕсли ИмяСобытия = "Запись_ДокументооборотИсходящееПисьмо" Тогда
		
		Если Источник = ЭтаФорма Тогда
			ПолучитьЗаполнитьДеревоПисем();
			РазвернутьДеревоПисем();
		ИначеЕсли ЗначениеЗаполнено(Параметр) Тогда
			Если Параметр.ПредметID = ДокументID Тогда
				ПолучитьЗаполнитьДеревоПисем();
				РазвернутьДеревоПисем();
			ИначеЕсли ПисьмоЕстьВСписке(Параметр.ПисьмоОснованиеID) Тогда
				ПолучитьЗаполнитьДеревоПисем();
				РазвернутьДеревоПисем();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Документооборот_ВыбратьЗначениеИзСпискаЗавершение" 
		И Источник = ЭтаФорма Тогда
		
		Если Параметр = "Документ" Тогда
			ОбработатьВыборСвязанногоОбъекта();
			ИнтеграцияС1СДокументооборотКлиент.Оповестить_ДобавлениеСвязи(
				ДокументID,
				ДокументТип,
				Параметры.ВнешнийОбъект); 
			ДополнитьПредставлениеДокумента();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Документооборот_ДобавлениеСвязи" 
		И Параметр.Объект = ВнешнийОбъект Тогда
		
		ПолучитьДанныеДокумента();
		ОбновитьДекорацииДокумента();
		ФайлыЗаполнены = Ложь;
		ДокументыЗаполнены = Ложь;
		ПисьмаЗаполнены = Ложь;
		ЗадачиЗаполнены = Ложь;
		ТрудозатратыЗаполнены = Ложь;
		ПриСменеСтраницыНаКлиенте(Элементы.ГруппаСтраницы.ТекущаяСтраница);
		
	ИначеЕсли ИмяСобытия = "Документооборот_УдалениеСвязи" 
		И Параметр.Объект = ВнешнийОбъект Тогда
		
		Документ = "";
		ДокументID = "";
		ДокументТип = "";
		ФайлыЗаполнены = Ложь;
		ДокументыЗаполнены = Ложь;
		ПисьмаЗаполнены = Ложь;
		ЗадачиЗаполнены = Ложь;
		ТрудозатратыЗаполнены = Ложь;
		ОбновитьДекорацииДокумента();
		ПриСменеСтраницыНаКлиенте(Элементы.ГруппаСтраницы.ТекущаяСтраница);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПриСменеСтраницыНаКлиенте(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтаФорма);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборот.Форма.АвторизацияВ1СДокументооборот";
	 
	ОткрытьФорму(ИмяФормыПараметров,, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектСоздатьНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДекорацияОбъектСоздатьНажатиеЗавершение", ЭтаФорма, ДополнительныеПараметры);
		
	ИнтеграцияС1СДокументооборотКлиент.НачатьСозданиеСвязанногоОбъектаДО(
		ВнешнийОбъект,
		ОписаниеОповещения,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектВыбратьНажатие(Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ЗначениеЗаполнено(ТипСоздаваемогоОбъекта) Тогда
		
		ДекорацияОбъектВыбратьНажатиеПослеВыбораТипа(ТипСоздаваемогоОбъекта, ДополнительныеПараметры);
		
	Иначе // тип неизвестен, предложим выбор пользователю
		
		ДополнительныеПараметры = Новый Структура;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДекорацияОбъектВыбратьНажатиеПослеВыбораТипа", ЭтаФорма, ДополнительныеПараметры);
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выбрать в 1С:Документообороте'"));
		ПараметрыФормы.Вставить("ЗаголовокКоманды", НСтр("ru = 'Выбрать'"));
			
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборТипаОбъектаДокументооборота",
			ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВнешнийОбъект", Параметры.ВнешнийОбъект);
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ДокументТип, ДокументID, Элемент, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектОчиститьНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияОбъектОчиститьНажатиеЗавершение", ЭтаФорма);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Вы действительно хотите очистить соответствие для
					|%1?'"),Строка(Параметры.ВнешнийОбъект));
	
	ИнтеграцияС1СДокументооборотКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса, 
		НСтр("ru='Очистить'"), НСтр("ru='Не очищать'"), КодВозвратаДиалога.Нет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоБизнесПроцессовИЗадач

&НаКлиенте
Процедура ДеревоБизнесПроцессовИЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьТекущуюЗадачуИлиПроцесс();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБизнесПроцессовИЗадачПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьТекущуюЗадачуИлиПроцесс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьВыполненныеПриИзменении(Элемент)
	
	РаскрытыеЭлементы = Новый СписокЗначений;
	ПолучитьМассивРаскрытыхЭлементов(
		Элементы.ДеревоБизнесПроцессовИЗадач,
		ДеревоБизнесПроцессовИЗадач.ПолучитьЭлементы(),
		РаскрытыеЭлементы);
	ЗагрузитьДеревоБизнесПроцессовИЗадач();
	УстановитьРазвернутостьЭлементовДерева(
		Элементы.ДеревоБизнесПроцессовИЗадач,
		ДеревоБизнесПроцессовИЗадач,
		РаскрытыеЭлементы); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокФайлов

&НаКлиенте
Процедура СписокФайловПриАктивизацииСтроки(Элемент)
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СписокФайловПередУдалениемЗавершение", ЭтаФорма);
	
	Если Элементы.СписокФайлов.ВыделенныеСтроки.Количество() = 1 Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пометить ""%1"" на удаление?'"),
			Элементы.СписокФайлов.ТекущиеДанные.Наименование);
	Иначе
		ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?'");
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СоздатьФайлВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания,
	СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка,
	Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	МассивИменФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") 
		И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		СоздатьФайлСДискаПеретаскиванием(ПараметрыПеретаскивания.Значение);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(ФайлПринятый) = Тип("Файл") 
				И ФайлПринятый.ЭтоФайл() Тогда
				СоздатьФайлСДискаПеретаскиванием(ФайлПринятый);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьКарточкуФайлаВыполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСвязей

&НаКлиенте
Процедура ДеревоСвязейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	ОткрытьСвязанныеДанныеСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПриАктивизацииСтроки(Элемент)
	
	Строка = Элемент.ТекущиеДанные;
	
	ДоступностьОткрытия = 
		(Строка <> Неопределено)
		И (Строка.Тип <> "DMRelationType");
	ДоступностьУдаления = ДоступностьОткрытия
		И (Строка.Тип <> "DMFile");
		
	Элементы.ДеревоСвязейОткрыть.Доступность = ДоступностьОткрытия;
	Элементы.ДеревоСвязейОткрытьКонтекст.Доступность = ДоступностьОткрытия;
	Элементы.ДеревоСвязейУдалить.Доступность = ДоступностьУдаления;
	Элементы.ДеревоСвязейУдалитьКонтекст.Доступность = ДоступностьОткрытия;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, 
	Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.Тип = "DMRelationType"
		Или ТекущиеДанные.Тип = "DMFile" Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НачатьУдалениеСвязиЗавершение", ЭтаФорма);
		
	СтрокаТипаСвязи = ТекущиеДанные.ПолучитьРодителя();
	
	ИсходныйДокумент = Новый Структура("ID, Тип, Представление",
		ДокументID, ДокументТип, Документ);
	СвязанныйДокумент = Новый Структура("ID, Тип, Представление",
		ТекущиеДанные.ID, ТекущиеДанные.Тип, ТекущиеДанные.Заголовок);
	ТипСвязи = Новый Структура("ID, Тип, Представление",
		СтрокаТипаСвязи.ID, СтрокаТипаСвязи.Тип, СтрокаТипаСвязи.Заголовок);
	
	ИнтеграцияС1СДокументооборотКлиент.НачатьУдалениеСвязи(
		ИсходныйДокумент,
		СвязанныйДокумент,
		ТипСвязи,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсторияПереписки

&НаКлиенте
Процедура ДеревоПисемВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = ДеревоПисем.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
		ТекущаяСтрока.ПисьмоТип,
		ТекущаяСтрока.ПисьмоID,
		ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВизыСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьВизуСогласования(ЭтаФорма,
		Элементы.ВизыСогласования.ТекущиеДанные);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процессы и задачи

&НаКлиенте
Процедура ОткрытьКарточкуПроцессаЗадачи(Команда)
	
	ОткрытьТекущуюЗадачуИлиПроцесс();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБизнесПроцесс(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.СоздатьБизнесПроцессПоОбъектуДО(
		ДокументID,
		ДокументТип,
		Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокБизнесПроцессовИЗадач(Команда)
	
	РаскрытыеЭлементы = Новый СписокЗначений;
	ПолучитьМассивРаскрытыхЭлементов(
		Элементы.ДеревоБизнесПроцессовИЗадач,
		ДеревоБизнесПроцессовИЗадач.ПолучитьЭлементы(),
		РаскрытыеЭлементы);
	ЗагрузитьДеревоБизнесПроцессовИЗадач();
	УстановитьРазвернутостьЭлементовДерева(
		Элементы.ДеревоБизнесПроцессовИЗадач,
		ДеревоБизнесПроцессовИЗадач,
		РаскрытыеЭлементы); 
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Файлы

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ОткрытьФайлВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайл(Команда)
	
	СоздатьФайлВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.НачатьСохранениеВыделенныхФайлов(СписокФайлов,
		Элементы.СписокФайлов.ВыделенныеСтроки,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписокФайловКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбновитьИзФайлаНаДискеЗавершение", ЭтаФорма);
		
	ИнтеграцияС1СДокументооборотКлиент.ОбновитьИзФайлаНаДиске(
		ТекущиеДанные.ID,
		ТекущиеДанные.Наименование,
		ТекущиеДанные.Расширение,
		УникальныйИдентификатор,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПодписейФайла = ИнтеграцияС1СДокументооборотКлиент.ДанныеПодписейФайла(
		ТекущиеДанные.ID, ТекущиеДанные.ТаблицаПодписей);
	
	ИнтеграцияС1СДокументооборотКлиент.ПодписатьФайл(
		ТекущиеДанные.ID,
		ТекущиеДанные.Наименование,
		ТекущиеДанные.Редактируется,
		ТекущиеДанные.Зашифрован,
		ТекущиеДанные.Описание,
		ДанныеПодписейФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПодписейФайла = ИнтеграцияС1СДокументооборотКлиент.ДанныеПодписейФайла(
		ТекущиеДанные.ID, ТекущиеДанные.ТаблицаПодписей);
		
	СвойстваФайла = Новый Структура;
	
	СвойстваФайла.Вставить("ИмяФайла", ТекущиеДанные.Наименование);
	СвойстваФайла.Вставить("ИдентификаторФайла", ТекущиеДанные.ID);
	СвойстваФайла.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	СвойстваФайла.Вставить("ОписаниеФайла", ТекущиеДанные.Описание);
	СвойстваФайла.Вставить("ДанныеПодписейФайла", ДанныеПодписейФайла);
	
	ИнтеграцияС1СДокументооборотКлиент.НачатьДобавлениеЭПИзФайла(, СвойстваФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.НачатьСохранениеВместеСЭП(
		ТекущиеДанные.ID,
		ТекущиеДанные.Расширение,
		ТекущиеДанные.Наименование,
		ТекущиеДанные.Размер * 1024,
		ТекущиеДанные.ДатаМодификацииУниверсальная,
		УникальныйИдентификатор);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Связи

// Начинает добавление связанного документа.
&НаКлиенте
Процедура ДобавитьСвязь(Команда)
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(КонтрагентID) Тогда
		Условие = Новый Структура;
		Условие.Вставить("Значение", Контрагент);
		Условие.Вставить("ЗначениеID", КонтрагентID);
		Отбор.Вставить("correspondent", Условие);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОрганизацияID) Тогда
		Условие = Новый Структура;
		Условие.Вставить("Значение", Организация);
		Условие.Вставить("ЗначениеID", ОрганизацияID);
		Отбор.Вставить("organization", Условие);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НачатьДобавлениеСвязиЗавершение", ЭтаФорма);
	ИнтеграцияС1СДокументооборотКлиент.НачатьДобавлениеСвязи(
		ДокументID, ДокументТип, Документ,, ОписаниеОповещения, Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвязанныеДанные(Команда)
	
	Строка = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если Строка <> Неопределено Тогда
		ОткрытьСвязанныеДанныеСтроки(Строка);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// История переписки

&НаКлиенте
Процедура ОбновитьПисьма(Команда)
	
	ПолучитьЗаполнитьДеревоПисем();
	РазвернутьДеревоПисем();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПисьмо(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПисем.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
			ТекущиеДанные.ПисьмоТип,
			ТекущиеДанные.ПисьмоID,
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмо(Команда)
	
	ПараметрыФормы = Новый Структура("Предмет", новый Структура);
	ПараметрыФормы.Предмет.Вставить("name", Документ);
	ПараметрыФормы.Предмет.Вставить("id", ДокументID);
	ПараметрыФормы.Предмет.Вставить("type", ДокументТип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящееПисьмо", ПараметрыФормы);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Трудозатраты

&НаКлиенте
Процедура ОбновитьТрудозатраты(Команда)
	
	ЗаполнитьТрудозатраты();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПодключениеЗавершение", ЭтаФорма, Неопределено);
	ИнтеграцияС1СДокументооборотКлиент.ПроверитьПодключение(
		ОписаниеОповещения, ЭтаФорма, "ПроверитьПодключение");
	
КонецПроцедуры

// Вызывается после проверки подключения к ДО и изменяет форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	ОбработатьФормуСогласноВерсииСервиса();
	ПриСменеСтраницыНаКлиенте(Элементы.ГруппаСтраницы.ТекущаяСтраница);
	
КонецПроцедуры

// Изменяет форму согласно доступности сервиса ДО и номеру его версии.
//
&НаСервере
Процедура ОбработатьФормуСогласноВерсииСервиса()
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборот.ВерсияСервиса();
	
	Если ПустаяСтрока(ВерсияСервиса) Тогда // идет подключение
		
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаОжидаетсяПодключение;
		Элементы.СтраницаОжидаетсяПодключение.Видимость = Истина;
		
	Иначе // версия известна
		
		Если ВерсияСервиса = "0.0.0.0" Тогда
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
			Элементы.СтраницаОжидаетсяПодключение.Видимость = Ложь;
			
		Иначе
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
			
			ДоступенФункционалКонтрагенты = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3");
			ДоступенФункционалВложенныеПапки = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3");
			ДоступенФункционалЗадачи = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2");
			Элементы.ПоказыватьВыполненные.Видимость = ДоступенФункционалЗадачи;
			ДоступенФункционалВизы = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.0.5.4");
			ДоступенФункционалРезолюции = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.0.5.4");
			// Хронометраж.
			Элементы.ГруппаТрудозатраты.Видимость = 
				ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP");
			// Результаты выполнения задач.
			Если НЕ ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3") Тогда
				Элементы.ДеревоБизнесПроцессовИЗадачВыполнено.Видимость = Истина;
				Элементы.ДеревоБизнесПроцессовИЗадачКартинка.Видимость = Ложь;
			КонецЕсли;
			// Почта.
			Если НЕ ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.8.1") Тогда
				Элементы.ГруппаИсторияПереписки.Видимость = Ложь;
			КонецЕсли;
			
			ИспользоватьФайловоеХранилище1СДокументооборота = 
				Константы.ИспользоватьФайловоеХранилище1СДокументооборота.Получить();
			ИспользоватьПроцессыИЗадачи1СДокументооборота = 
				Константы.ИспользоватьПроцессыИЗадачи1СДокументооборота.Получить();
			ИспользоватьСвязанныеДокументы1СДокументооборота = 
				Константы.ИспользоватьСвязанныеДокументы1СДокументооборота.Получить();
			ИспользоватьЭлектроннуюПочту1СДокументооборота = 
				Константы.ИспользоватьЭлектроннуюПочту1СДокументооборота.Получить();
			ИспользоватьЕжедневныеОтчеты1СДокументооборота = 
				Константы.ИспользоватьЕжедневныеОтчеты1СДокументооборота.Получить();
			
			ПолучитьДанныеДокумента();
			
			// Сохраненная закладка может быть неактуальной.
			Если ЗначениеЗаполнено(ТекущаяЗакладка) Тогда
				Если Элементы.Найти(ТекущаяЗакладка) = Неопределено Тогда
					ТекущаяЗакладка = "";
				ИначеЕсли ТекущаяЗакладка = "ГруппаФайлы"
					И Не ИспользоватьФайловоеХранилище1СДокументооборота Тогда
					ТекущаяЗакладка = "";
				ИначеЕсли ТекущаяЗакладка = "ГруппаЗадачи"
					И Не ИспользоватьПроцессыИЗадачи1СДокументооборота Тогда
					ТекущаяЗакладка = "";
				ИначеЕсли ТекущаяЗакладка = "ГруппаСвязанныеДокументы"
					И Не ИспользоватьСвязанныеДокументы1СДокументооборота Тогда
					ТекущаяЗакладка = "";
				ИначеЕсли ТекущаяЗакладка = "ГруппаИсторияПереписки"
					И Не ИспользоватьЭлектроннуюПочту1СДокументооборота Тогда
					ТекущаяЗакладка = "";
				ИначеЕсли ТекущаяЗакладка = "ГруппаТрудозатраты"
					И Не ИспользоватьЕжедневныеОтчеты1СДокументооборота Тогда
					ТекущаяЗакладка = "";
				ИначеЕсли Не Элементы[ТекущаяЗакладка].Видимость Тогда
					ТекущаяЗакладка = "";
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущаяЗакладка = "" Тогда
				ТекущаяЗакладка = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
			Иначе
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ТекущаяЗакладка];
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДекорацииДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ПриСменеСтраницыНаКлиенте(ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаФайлы 
		И Элементы.ГруппаФайлы.Видимость Тогда
		
		Если НЕ ФайлыЗаполнены Тогда
			ЗаполнитьДанныеФайлов();
			ФайлыЗаполнены = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаЗадачи 
		И Элементы.ГруппаЗадачи.Видимость Тогда
		
		Если Не ЗадачиЗаполнены Тогда
			ЗагрузитьДеревоБизнесПроцессовИЗадач();
			ЗадачиЗаполнены = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаСвязанныеДокументы 
		И Элементы.ГруппаСвязанныеДокументы.Видимость Тогда
		
		Если НЕ ДокументыЗаполнены Тогда
			ОбновитьДеревоСвязей();
			ДокументыЗаполнены = Истина;
			Если ЗначениеЗаполнено(АдресДляФайловСвязанныхДокументов) Тогда
				ПодключитьОбработчикОжидания("ОбновлениеФайловСвязанныхДокументов", 1, Истина);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаИсторияПереписки 
		И Элементы.ГруппаИсторияПереписки.Видимость Тогда
		
		Если НЕ ПисьмаЗаполнены Тогда
			ПолучитьЗаполнитьДеревоПисем();
			РазвернутьДеревоПисем();
			ПисьмаЗаполнены = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаТрудозатраты 
		И Элементы.ГруппаТрудозатраты.Видимость Тогда
		
		Если НЕ ТрудозатратыЗаполнены Тогда
			ЗаполнитьТрудозатраты();
			ТрудозатратыЗаполнены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяЗакладка = ТекущаяСтраница.Имя;
	
	ДополнитьПредставлениеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТекущейСтраницыНаСервере(ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаФайлы 
		И Элементы.ГруппаФайлы.Видимость Тогда
		
		Если НЕ ФайлыЗаполнены Тогда
			ЗаполнитьДанныеФайлов();
			ФайлыЗаполнены = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаЗадачи 
		И Элементы.ГруппаЗадачи.Видимость Тогда
		
		Если Не ЗадачиЗаполнены Тогда
			ЗагрузитьДеревоБизнесПроцессовИЗадач();
			ЗадачиЗаполнены = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаСвязанныеДокументы 
		И Элементы.ГруппаСвязанныеДокументы.Видимость Тогда
		
		Если НЕ ДокументыЗаполнены Тогда
			ОбновитьДеревоСвязей();
			ДокументыЗаполнены = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаИсторияПереписки 
		И Элементы.ГруппаИсторияПереписки.Видимость Тогда
		
		Если НЕ ПисьмаЗаполнены Тогда
			ПолучитьЗаполнитьДеревоПисем();
			ПисьмаЗаполнены = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаТрудозатраты 
		И Элементы.ГруппаТрудозатраты.Видимость Тогда
		
		Если НЕ ТрудозатратыЗаполнены Тогда
			ЗаполнитьТрудозатраты();
			ТрудозатратыЗаполнены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектСоздатьНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектОчиститьНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	СохраненныйID = ДокументID;
	СохраненныйТип = ДокументТип;
	УдалитьСвязьНаСервере();
	
	ИнтеграцияС1СДокументооборотКлиент.Оповестить_УдалениеСвязи(
		СохраненныйID,
		СохраненныйТип,
		ВнешнийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектВыбратьНажатиеПослеВыбораТипа(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка")
		Или Результат = "" Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = ИнтеграцияС1СДокументооборотКлиентПереопределяемый.ОтборПриВыбореСвязанногоОбъекта(
		ВнешнийОбъект, Результат);
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка(
		Результат,
		"Документ",
		ЭтаФорма,
		Отбор);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборСвязанногоОбъекта()
	
	Если ЗначениеЗаполнено(ДокументID) 
		И ЗначениеЗаполнено(ДокументТип) Тогда // добавление новой связи
		ИнтеграцияС1СДокументооборотВызовСервера.ДобавитьСвязь(
			ДокументID,
			ДокументТип,
			Параметры.ВнешнийОбъект);
	КонецЕсли;
	
	ПолучитьДанныеДокумента();
	
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	
	ФайлыЗаполнены = Ложь;
	ЗадачиЗаполнены = Ложь;
	ДокументыЗаполнены = Ложь;
	ПисьмаЗаполнены = Ложь;
	ТрудозатратыЗаполнены = Ложь;
	
	ЗаполнитьДанныеТекущейСтраницыНаСервере(ТекущаяСтраница);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьДокумента()
	
	ОбновитьДекорацииДокумента();
	Если ИспользоватьПроцессыИЗадачи1СДокументооборота Тогда
		ЗагрузитьДеревоБизнесПроцессовИЗадач();
	КонецЕсли;
	Если ИспользоватьСвязанныеДокументы1СДокументооборота Тогда
		ОбновитьДеревоСвязей();
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументID) Тогда
		РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДобавитьСвязь(
			ДокументID,
			ДокументТип,
			ВнешнийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязьНаСервере()
	
	ИнтеграцияС1СДокументооборотВызовСервера.УдалитьСвязь(
		ДокументID,
		ДокументТип,
		Параметры.ВнешнийОбъект);
	
	ТекущаяСтраница =  Элементы.ГруппаСтраницы.ТекущаяСтраница;
	
	ДокументID = "";
	ДокументТип = "";
	Документ = "";
	СсылкаНаВнешнийОбъект = Неопределено;
	
	Элементы.ГруппаВизы.Видимость = Ложь;
	Элементы.ГруппаРезолюции.Видимость = Ложь;
	
	ОбновитьДекорацииДокумента();
	
	ФайлыЗаполнены = Ложь;
	ЗадачиЗаполнены = Ложь;
	ДокументыЗаполнены = Ложь;
	ПисьмаЗаполнены = Ложь;
	ТрудозатратыЗаполнены = Ложь;
	
	ЗаполнитьДанныеТекущейСтраницыНаСервере(ТекущаяСтраница);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорацииДокумента()
	
	ДокументЗаполнен = ЗначениеЗаполнено(ДокументID);
	
	Элементы.ДекорацияОбъектСоздать.Видимость = НЕ ДокументЗаполнен;
	Элементы.ДекорацияОбъектИли.Видимость = НЕ ДокументЗаполнен;
	Элементы.ДекорацияОбъектВыбрать.Видимость = НЕ ДокументЗаполнен;
	
	Элементы.ДекорацияОбъект.Видимость = ДокументЗаполнен;
	Элементы.ДекорацияОбъектОчистить.Видимость = ДокументЗаполнен;
	Элементы.ДеревоБизнесПроцессовИЗадач.Доступность = ДокументЗаполнен;
	
	Элементы.ДеревоСвязейДобавить.Доступность = ДокументЗаполнен;
	Элементы.ДеревоСвязейОткрыть.Доступность =  ДокументЗаполнен;
	Элементы.ДеревоСвязейУдалить.Доступность =  ДокументЗаполнен;
	
	Элементы.ДеревоСвязейДобавитьКонтекст.Доступность = ДокументЗаполнен;
	Элементы.ДеревоСвязейОткрытьКонтекст.Доступность =  ДокументЗаполнен;
	Элементы.ДеревоСвязейУдалитьКонтекст.Доступность =  ДокументЗаполнен;
	
	Элементы.ДеревоПисемСоздатьПисьмо.Доступность = ДокументЗаполнен;
	Элементы.ДеревоПисемОткрытьПисьмо.Доступность = ДокументЗаполнен;
	Элементы.ДеревоПисемОбновитьПисьма.Доступность = ДокументЗаполнен;
	
	Элементы.РаботыОбновить.Доступность = ДокументЗаполнен;
	
	Если ДокументТип = "DMCorrespondent" Тогда
		Элементы.ГруппаСвязанныеДокументы.Видимость = Ложь;
		Элементы.ГруппаТрудозатраты.Видимость = Ложь;
		Элементы.ДеревоПисемНомер.Видимость = Истина;
		Элементы.ДеревоПисемАдресаты.Видимость = Ложь;
		Элементы.ДеревоПисемПисьмо.Заголовок = НСтр("ru='Документ'");
	Иначе
		Элементы.ГруппаСвязанныеДокументы.Видимость = Истина;
		// хронометраж
		Элементы.ГруппаТрудозатраты.Видимость = 
			ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.КОРП");
		Элементы.ДеревоПисемНомер.Видимость = Ложь;
		Элементы.ДеревоПисемАдресаты.Видимость = Истина;
		Элементы.ДеревоПисемПисьмо.Заголовок = НСтр("ru='Письмо'");
	КонецЕсли;
	
	Модифицированность = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеДокумента()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	ExternalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	ExternalObject.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
	ExternalObject.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
	ExternalObject.name = Строка(ВнешнийОбъект);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
	Запрос.externalObjects.Добавить(ExternalObject);
	Запрос.columnSet.Добавить("name");
	Если ДоступенФункционалВизы Тогда
		Запрос.columnSet.Добавить("visas");
	КонецЕсли;
	Если ДоступенФункционалРезолюции Тогда
		Запрос.columnSet.Добавить("resolutions");
	КонецЕсли;
	
	Результат = Прокси.execute(Запрос);
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Результат, "DMError") Тогда 
		ВызватьИсключение Результат.description;
	КонецЕсли;
		
	ОбъектXDTO = Неопределено;
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Результат, "DMGetObjectListResponse") Тогда
		Если Результат.items.Количество() > 0 Тогда
			ОбъектXDTO = Результат.items[0].object;
		КонецЕсли;
	Иначе // совместимость со старыми версиями сервиса
		Если Результат.documents.Количество() > 0 Тогда
			ОбъектXDTO = Результат.documents[0];
		КонецЕсли;
	КонецЕсли;
		
	Если ОбъектXDTO = Неопределено Тогда
		Элементы.ГруппаРезолюции.Видимость = Ложь;
		Элементы.ГруппаВизы.Видимость = Ложь;
	Иначе
		// Заполним основные реквизиты.
		ДокументID = ОбъектXDTO.objectId.id;
		ДокументТип = ОбъектXDTO.objectId.type;
		Документ = ОбъектXDTO.name;
		// Обработаем резолюции.
		Если ОбъектXDTO.Свойства().Получить("resolutions") <> Неопределено
			И ОбъектXDTO.resolutions.Количество() <> 0 Тогда
			ИнтеграцияС1СДокументооборотВызовСервера.ОбновитьПредставлениеРезолюций(
				ОбъектXDTO.resolutions, РезолюцииHTMLПредставление, Элементы.ГруппаРезолюции);
			Элементы.ГруппаРезолюции.Видимость = Истина;
		Иначе
			Элементы.ГруппаРезолюции.Видимость = Ложь;
		КонецЕсли;
		// Обработаем визы.
		Если ОбъектXDTO.Свойства().Получить("visas") <> Неопределено
			И ОбъектXDTO.visas.Количество() <> 0 Тогда
			ИнтеграцияС1СДокументооборотВызовСервера.ОбновитьВизыСогласования(
				ОбъектXDTO.visas, ВизыСогласования, Элементы.ГруппаВизы);
			Элементы.ГруппаВизы.Видимость = Истина;
		Иначе
			Элементы.ГруппаВизы.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьПредставлениеДокумента()
	
	Если ЗначениеЗаполнено(Документ) Тогда 
		
		Если ДокументТип = "DMIncomingDocument" Тогда 
			Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Входящий документ:'");
		ИначеЕсли ДокументТип = "DMOutgoingDocument" Тогда 
			Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Исходящий документ:'");
		ИначеЕсли ДокументТип = "DMInternalDocument" Тогда
			Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Внутренний документ:'");
		ИначеЕсли ДокументТип = "DMCorrespondent" Тогда
			Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ИспользоватьТерминКорреспонденты() Тогда
				Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Корреспондент:'");
			Иначе
				Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Контрагент:'");
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ГруппаСтраницыСвязанныйОбъект.ТекущаяСтраница =
			Элементы.ГруппаСтраницаЕстьСвязанныйОбъект;
		
	Иначе // нет связанного объекта
			
		Если ЗначениеЗаполнено(ПредставлениеСоздаваемогоОбъекта) Тогда
			Элементы.ДекорацияОбъектЗаголовок.Заголовок = ПредставлениеСоздаваемогоОбъекта + ":";
		Иначе
			Если ТипСоздаваемогоОбъекта = "DMIncomingDocument" Тогда 
				Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Входящий документ:'");
			ИначеЕсли ТипСоздаваемогоОбъекта = "DMOutgoingDocument" Тогда 
				Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Исходящий документ:'");
			ИначеЕсли ТипСоздаваемогоОбъекта = "DMInternalDocument" Тогда
				Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Внутренний документ:'");
			ИначеЕсли ТипСоздаваемогоОбъекта = "DMCorrespondent" Тогда 
				Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ИспользоватьТерминКорреспонденты() Тогда
					Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Корреспондент:'");
				Иначе
					Элементы.ДекорацияОбъектЗаголовок.Заголовок = НСтр("ru = 'Контрагент:'");
				КонецЕсли;
			Иначе // нет подходящих правил
				Элементы.ДекорацияОбъектЗаголовок.Заголовок = 
					НСтр("ru = 'Соответствие в 1С:Документообороте:'");
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ГруппаСтраницыСвязанныйОбъект.ТекущаяСтраница =
			Элементы.ГруппаСтраницаНетСвязанногоОбъекта;
			
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процессы и задачи

&НаСервере
Процедура УстановитьУсловноеОформлениеПроцессовИЗадач()
	
	Если ЭтаФорма.УсловноеОформление.Элементы.Количество() = 3 Тогда
		ЭлементДляУдаления = ЭтаФорма.УсловноеОформление.Элементы[2];
		ЭтаФорма.УсловноеОформление.Элементы.Удалить(ЭлементДляУдаления);
	КонецЕсли;
	
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	Отборы = ЭлементУсловногоОформления.Отбор.Элементы;
	
	ЭлементОтбораДанных = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = 
		Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадач.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = 
		Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадач.Выполнено");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = 
		Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадач.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбораДанных.Использование = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадачНаименование");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадачСрокИсполнения");
		
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоЗадачИзОтветаВебСервиса(СтрокиДереваЗадач, СтрокиОтвета)
	
	ДоступенФункционалРезультатыВыполненияЗадач = 
		ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3");
		
	Для Каждого ОднаСтрокаОтвета Из СтрокиОтвета Цикл
		
		Важность = 1;
		Если ОднаСтрокаОтвета.importance.objectId.id = "Низкая" Тогда
			Важность = 0;
		ИначеЕсли ОднаСтрокаОтвета.importance.objectId.id = "Обычная" Тогда
			Важность = 1;
		ИначеЕсли ОднаСтрокаОтвета.importance.objectId.id = "Высокая" Тогда 
			Важность = 2;
		КонецЕсли;
		
		Если Найти(ОднаСтрокаОтвета.objectId.type, "BusinessProcess") > 0
			И Найти(ОднаСтрокаОтвета.objectId.type, "Task") = 0 Тогда
			
			НоваяСтрока = СтрокиДереваЗадач.Добавить();
			НоваяСтрока.Важность = Важность;
			НоваяСтрока.Выполнено = ЗначениеЗаполнено(ОднаСтрокаОтвета.endDate);
			НоваяСтрока.Наименование = ОднаСтрокаОтвета.name;
			НоваяСтрока.ДатаНачала = ОднаСтрокаОтвета.beginDate;
			НоваяСтрока.Автор = ОднаСтрокаОтвета.author.name;
			НоваяСтрока.Тип = 0;
			НоваяСтрока.DMТип = ОднаСтрокаОтвета.objectId.type;
			НоваяСтрока.DMИд = ОднаСтрокаОтвета.objectId.id;
			
			Если ДоступенФункционалРезультатыВыполненияЗадач Тогда
				НоваяСтрока.Картинка = ИнтеграцияС1СДокументооборот.ИндексКартинкиПометкиЗавершения(
					ОднаСтрокаОтвета.completionMark);
			КонецЕсли;
				
			ПостроитьДеревоЗадачИзОтветаВебСервиса(НоваяСтрока.Строки, ОднаСтрокаОтвета.tasks);
			
		ИначеЕсли Найти(ОднаСтрокаОтвета.objectId.type, "Task") > 0 Тогда
			
			Если ЭтоСлужебнаяЗадача(ОднаСтрокаОтвета) Тогда
				
				ПостроитьДеревоЗадачИзОтветаВебСервиса(СтрокиДереваЗадач, ОднаСтрокаОтвета.businessProcesses);
				
			Иначе
				
				НоваяСтрока = СтрокиДереваЗадач.Добавить();
				НоваяСтрока.Важность = Важность;
				НоваяСтрока.Выполнено = ОднаСтрокаОтвета.executed;
				НоваяСтрока.Наименование = ОднаСтрокаОтвета.name;
				НоваяСтрока.СрокИсполнения = ОднаСтрокаОтвета.dueDate;
				НоваяСтрока.ДатаНачала = ОднаСтрокаОтвета.beginDate;
				
				Если ОднаСтрокаОтвета.performer.Установлено("user") Тогда
					НоваяСтрока.Исполнитель = ОднаСтрокаОтвета.performer.user.name;
				ИначеЕсли ОднаСтрокаОтвета.performer.Установлено("role") Тогда
					НоваяСтрока.Исполнитель = ОднаСтрокаОтвета.performer.role.name;
					Если ОднаСтрокаОтвета.performer.Установлено("mainAddressingObject") Тогда
						НоваяСтрока.Исполнитель = НоваяСтрока.Исполнитель + ", " 
							+ ОднаСтрокаОтвета.performer.mainAddressingObject.name;
					КонецЕсли;
					Если ОднаСтрокаОтвета.Performer.Установлено("secondaryAddressingObject") Тогда
						НоваяСтрока.Исполнитель = НоваяСтрока.Исполнитель + ", " 
							+ ОднаСтрокаОтвета.performer.secondaryAddressingObject.name;
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.Тип = 1;
				НоваяСтрока.DMТип = ОднаСтрокаОтвета.objectId.type;
				НоваяСтрока.DMИд = ОднаСтрокаОтвета.objectId.id;
				НоваяСтрока.ТочкаМаршрута = ОднаСтрокаОтвета.businessProcessStep;
				
				Если ДоступенФункционалРезультатыВыполненияЗадач Тогда
					НоваяСтрока.Картинка = ИнтеграцияС1СДокументооборот.ИндексКартинкиПометкиЗавершения(
						ОднаСтрокаОтвета.executionMark);
					КонецЕсли;
					
				ПостроитьДеревоЗадачИзОтветаВебСервиса(НоваяСтрока.Строки, ОднаСтрокаОтвета.businessProcesses);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущуюЗадачуИлиПроцесс()
	
	ТекущиеДанные = Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектID = ТекущиеДанные.DMИд;
	ОбъектТип = ТекущиеДанные.DMТип;
	
	Если Найти(ТекущиеДанные.DMТип, "Task") > 0 Тогда
		
		ПараметрыФормы = Новый Структура("id, type", ОбъектID, ОбъектТип);
		Если ДоступенФункционалЗадачи Тогда
			ФормаИмя = "Обработка.ИнтеграцияС1СДокументооборот.Форма.Задача";
		Иначе
			ФормаИмя = "Обработка.ИнтеграцияС1СДокументооборот.Форма.КарточкаЗадачи";
		КонецЕсли;
		ОткрытьФорму(ФормаИмя, ПараметрыФормы, Элементы.ДеревоБизнесПроцессовИЗадач, ОбъектID);
		
	Иначе
		
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
			ОбъектТип,
			ОбъектID,
			Элементы.ДеревоБизнесПроцессовИЗадач);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДеревоБизнесПроцессовИЗадач()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetTasksTreeRequest");
	
	Запрос.query = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetTasksTreeQuery");
	
	Target = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	Target.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
	Target.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
	Target.name = Строка(ВнешнийОбъект);

	Запрос.query.externalTarget.Добавить(Target);
	Если Запрос.query.Свойства().Получить("withExecuted") <> Неопределено Тогда
		Запрос.query.withExecuted = ПоказыватьВыполненные;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	ДеревоЗадач = РеквизитФормыВЗначение("ДеревоБизнесПроцессовИЗадач", Тип("ДеревоЗначений"));
	ДеревоЗадач.Строки.Очистить();
	ПостроитьДеревоЗадачИзОтветаВебСервиса(ДеревоЗадач.Строки, Ответ.businessProcesses);
	ЗначениеВРеквизитФормы(ДеревоЗадач, "ДеревоБизнесПроцессовИЗадач");
	УстановитьУсловноеОформлениеПроцессовИЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМассивРаскрытыхЭлементов(ДеревоЭлемент, МассивСтрокОдногоУровня,
		СписокРаскрытыхЭлементов)
	
	Для Каждого СтрокаОдногоУровня Из МассивСтрокОдногоУровня Цикл
		ИдЭлемента = СтрокаОдногоУровня.ПолучитьИдентификатор();
		Если ДеревоЭлемент.Развернут(ИдЭлемента) <> Неопределено 
			И ДеревоЭлемент.Развернут(ИдЭлемента) Тогда
			СписокРаскрытыхЭлементов.Добавить(СтрокаОдногоУровня.DMИд);
		КонецЕсли;
		ПолучитьМассивРаскрытыхЭлементов(
			ДеревоЭлемент,
			СтрокаОдногоУровня.ПолучитьЭлементы(),
			СписокРаскрытыхЭлементов);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазвернутостьЭлементовДерева(ДеревоЭлемент, ДеревоРеквизит,
		СписокЭлементовДляРазвертывания)
	
	Если СписокЭлементовДляРазвертывания <> Неопределено Тогда
		Для Каждого ЭлементСписка Из СписокЭлементовДляРазвертывания Цикл
			Индекс = -1;
			НайтиЭлементВДереве(
				ДеревоБизнесПроцессовИЗадач.ПолучитьЭлементы(),
				ЭлементСписка.Значение,
				Индекс);
			Если Индекс > -1 Тогда
				Если ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьЭлементы().Количество() > 0 Тогда
					ДеревоЭлемент.Развернуть(
						ДеревоБизнесПроцессовИЗадач.НайтиПоИдентификатору(Индекс).ПолучитьИдентификатор(),
						Ложь);
				Иначе
					Если ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьРодителя() <> Неопределено Тогда
						Родитель = ДеревоБизнесПроцессовИЗадач.НайтиПоИдентификатору(Индекс).ПолучитьРодителя();
						ДеревоЭлемент.Развернуть(Родитель.ПолучитьИдентификатор(), Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЭлементВДереве(КоллекцияЭлементовОдногоУровня, ИскомыйЭлемент, Индекс) 
	
	Если КоллекцияЭлементовОдногоУровня.Количество() > 0 Тогда
		Для Каждого ЭлементДерева Из КоллекцияЭлементовОдногоУровня Цикл
			Если ЭлементДерева.DMИд = ИскомыйЭлемент Тогда
				Индекс = ЭлементДерева.ПолучитьИдентификатор();
			Иначе
				НайтиЭлементВДереве(ЭлементДерева.ПолучитьЭлементы(), ИскомыйЭлемент, Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементВДереве(ДеревоЭлемент, ДеревоРеквизит, ТекущийЭлемент) 
	
	Если ТекущийЭлемент <> Неопределено Тогда
		Индекс = -1;
		НайтиЭлементВДереве(ДеревоРеквизит.ПолучитьЭлементы(), ТекущийЭлемент, Индекс);
		Если Индекс > -1 Тогда
			ДеревоЭлемент.ТекущаяСтрока = Индекс;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоСлужебнаяЗадача(Задача)
	
	Служебная = Ложь;
	
	Если Задача.parentBusinessProcess.objectId.type = "DMComplexBusinessProcess" Тогда 
		Если Задача.businessProcessStep = "Выполнить все действия процесса" Тогда
			Служебная = Истина;
		КонецЕсли;
	ИначеЕсли Задача.parentBusinessProcess.objectId.type = "DMBusinessProcessInternalDocumentProcessing" 
			ИЛИ Задача.parentBusinessProcess.objectId.type = "DMBusinessProcessIncomingDocumentProcessing"
			ИЛИ Задача.parentBusinessProcess.objectId.type = "DMBusinessProcessOutgoingDocumentProcessing" Тогда
		Служебная = Истина;
	КонецЕсли;
	
	Возврат Служебная;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Файлы

&НаКлиенте
Процедура СписокФайловПередУдалениемЗавершение(Ответ, ПараметрыОповещения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПометитьНаУдаление(Элементы.СписокФайлов.ВыделенныеСтроки);
		ОбновитьСписокФайловКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокФайлов()
	
	СписокФайлов.Очистить();
	
	Файлы = ИнтеграцияС1СДокументооборотВызовСервера.ФайлыПоОбъектуПотребителю(
		ВнешнийОбъект.УникальныйИдентификатор(),
		Строка(ВнешнийОбъект),
		ВнешнийОбъект.Метаданные().ПолноеИмя());
	
	Для каждого СведенияОФайле Из Файлы.files Цикл
		НоваяСтрока = СписокФайлов.Добавить();
		
		НоваяСтрока.Наименование = СведенияОФайле.name;
		НоваяСтрока.Расширение = СведенияОФайле.extension;
		НоваяСтрока.Описание = СведенияОФайле.description;
		НоваяСтрока.Размер = Формат(СведенияОФайле.size/1024, "ЧЦ=10; ЧН=0");
		НоваяСтрока.ПодписанЭП = СведенияОФайле.signed;
		НоваяСтрока.Автор = СведенияОФайле.author.name;
		НоваяСтрока.ID = СведенияОФайле.objectId.id;
		НоваяСтрока.ДатаСоздания = СведенияОФайле.creationDate;
		НоваяСтрока.ДатаМодификацииУниверсальная = СведенияОФайле.modificationDateUniversal;
		Редактируется = СведенияОФайле.editing;
		Зашифрован = СведенияОФайле.encrypted;
	
		НоваяСтрока.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(
			НоваяСтрока.Расширение);
		
		Для Каждого ПодписьXDTO Из СведенияОФайле.signatures Цикл
			Подпись = НоваяСтрока.ТаблицаПодписей.Добавить();
			
			Подпись.КомуВыданСертификат = ПодписьXDTO.author;
			Подпись.ДатаПодписи = ПодписьXDTO.date;
			Подпись.Комментарий = ПодписьXDTO.comment;
			Подпись.Отпечаток = ПодписьXDTO.thumbprint;
			
			ДвоичныеДанные = ПодписьXDTO.signature;
			Подпись.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			
			ДвоичныеДанныеСертификата = ПодписьXDTO.certificate;
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				Подпись.АдресСертификата = ПоместитьВоВременноеХранилище(
					ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
			Подпись.ИмяФайлаПодписи = ПодписьXDTO.signatureFileName;
			Подпись.УстановившийПодпись = ПодписьXDTO.signer.name;
			Подпись.УстановившийПодписьИд = ПодписьXDTO.signer.objectId.id;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайловКлиент(ИдентификаторФайла = Неопределено)
	
	Если ИдентификаторФайла <> Неопределено Тогда
		ТекущийИдентификаторФайла = ИдентификаторФайла;
	ИначеЕсли Элементы.СписокФайлов.ТекущиеДанные <> Неопределено Тогда
		ТекущийИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.ID;
	КонецЕсли;
	
	ОбновитьСписокФайлов();
	Элементы.СписокФайлов.Обновить();
	
	// восстановим положение в списке
	Для Каждого Строка Из СписокФайлов Цикл
		Если Строка.ID = ТекущийИдентификаторФайла Тогда
			Элементы.СписокФайлов.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайлаВыполнить()
	
	ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект("DMFile", ТекущиеДанные.ID);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьФайл(ТекущиеДанные.ID, ТекущиеДанные.Наименование, 
			ТекущиеДанные.Расширение, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлВыполнить()
	
	ПараметрыОткрытия = Новый Структура("РежимСоздания", 1);
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлВыполнитьЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.СозданиеНовогоФайла",
		ПараметрыОткрытия,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлВыполнитьЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если (ТипЗнч(Результат) = Тип("КодВозвратаДиалога")) 
		Или (Результат = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = 1 Тогда
		СоздатьФайлСДиска();
	ИначеЕсли Результат = 2
		Или Результат = 3 Тогда
		ВыбратьСуществующийФайлВ1СДокументооборот(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДискеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	ОбновитьСписокФайловКлиент();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторКорневойПапкиФайлов1СДокументооборот() 
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторКорневойПапкиФайлов1СДокументооборот = 
		Константы.ИдентификаторКорневойПапкиФайлов1СДокументооборот.Получить();
	Возврат ИдентификаторКорневойПапкиФайлов1СДокументооборот;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьСуществующийФайлВ1СДокументооборот(Результат)
	
	Оповещение = Новый ОписаниеОповещения(
		"ВыбратьСуществующийФайлВ1СДокументооборотЗавершение", ЭтаФорма, Результат);
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборФайла",,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСуществующийФайлВ1СДокументооборотЗавершение(Результат, ПараметрыОповещения) Экспорт

	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Если ПараметрыОповещения = 2 Тогда
			ДобавитьСсылкуНаСуществующийФайл(Результат);
		Иначе
			СкопироватьСуществующийФайл(Результат);
		КонецЕсли;
		ОбновитьСписокФайловКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСсылкуНаСуществующийФайл(ИдентификаторФайла)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAddObjectLinkRequest");
	
	Запрос.ownerObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	Запрос.ownerObject.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
	Запрос.ownerObject.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
	Запрос.ownerObject.name = "";
	
	Запрос.linkedObject = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси,
		ИдентификаторФайла, "DMFile");
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
КонецФункции

&НаСервере
Функция СкопироватьСуществующийФайл(ИдентификаторФайла)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	
	ОбъектID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ИдентификаторФайла, "DMFile");
	Запрос.objectIds.Добавить(ОбъектID);
	
	Запрос.columnSet.Добавить("objectId");
	Запрос.columnSet.Добавить("name");
	Запрос.columnSet.Добавить("binaryData");
	Запрос.columnSet.Добавить("extension");
	Запрос.columnSet.Добавить("modificationDate");
	Запрос.columnSet.Добавить("modificationDateUniversal");
	Запрос.columnSet.Добавить("size");
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	ДанныеФайла = Ответ.objects[0];
	
	МаксРазмерФайла = ИнтеграцияС1СДокументооборотВызовСервера.МаксимальныйРазмерПередаваемогоФайла();
	Если ДанныеФайла.size > МаксРазмерФайла Тогда
		РазмерВМб = ДанныеФайла.size / (1024 * 1024);
		РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
		ВызватьИсключение
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый (%3 Мб).'"),
			ДанныеФайла.name, 
			РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),
			РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	КонецЕсли;
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAddLinkedFileRequest");
	
	Запрос.rootFolderID = ИдентификаторКорневойПапки1СДокументооборот;
	
	Запрос.file = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMFile");
	
	Запрос.file.externalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	Запрос.file.externalObject.name = Строка(ВнешнийОбъект);
	Запрос.file.externalObject.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
	Запрос.file.externalObject.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
	
	Запрос.file.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", "DMFile");
	Запрос.file.binaryData = ДанныеФайла.binaryData;
	Запрос.file.extension = ДанныеФайла.extension;
	Запрос.file.modificationDate = ДанныеФайла.modificationDate;
	Запрос.file.modificationDateUniversal = ДанныеФайла.modificationDateUniversal;
	Запрос.file.name = ДанныеФайла.name;
	Запрос.file.size = ДанныеФайла.size;
	
	Ответ = Прокси.execute(Запрос);
	
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
КонецФункции

&НаСервере
Процедура ПометитьНаУдаление(Знач ВыделенныеСтроки)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMDeleteRequest");
	
	Для Каждого НомерСтроки Из ВыделенныеСтроки Цикл
		Данные = СписокФайлов.НайтиПоИдентификатору(НомерСтроки);
		ОбъектXDTO = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, Данные.ID, "DMFile");
		Запрос.objectIds.Добавить(ОбъектXDTO);
	КонецЦикла;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандСпискаФайлов()
	
	УстановитьДоступностьКоманд(Элементы.СписокФайлов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда 
		
		Элементы.СписокФайловКонтекстноеМенюОткрытьФайл.Доступность = Ложь;
		Элементы.СписокФайловКонтекстноеМенюСохранитьКак.Доступность = Ложь;
		Элементы.СписокФайловКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = Ложь;
		Элементы.СписокФайловКонтекстноеМенюПодписать.Доступность = Ложь;
		Элементы.СписокФайловКонтекстноеМенюДобавитьЭПИзФайла.Доступность = Ложь;
		Элементы.СписокФайловКонтекстноеМенюСохранитьВместеСЭП.Доступность = Ложь;
		
		Элементы.СписокФайловОткрытьФайл.Доступность = Ложь;
		Элементы.СписокФайловСохранитьКак.Доступность = Ложь;
		Элементы.СписокФайловОбновитьИзФайлаНаДиске.Доступность = Ложь;
		Элементы.СписокФайловПодписать.Доступность = Ложь;
		Элементы.СписокФайловДобавитьЭПИзФайла.Доступность = Ложь;
		Элементы.СписокФайловСохранитьВместеСЭП.Доступность = Ложь;
		
	Иначе	
		
		Редактируется = ТекущиеДанные.Редактируется;
		ПодписанЭП = ТекущиеДанные.ПодписанЭП;
		Зашифрован = ТекущиеДанные.Зашифрован;
		
		Элементы.СписокФайловКонтекстноеМенюОткрытьФайл.Доступность = Истина;
		Элементы.СписокФайловКонтекстноеМенюСохранитьКак.Доступность = Истина;
		Элементы.СписокФайловКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = Истина;
		Элементы.СписокФайловКонтекстноеМенюПодписать.Доступность = 
			НЕ Редактируется И НЕ Зашифрован;
		Элементы.СписокФайловКонтекстноеМенюДобавитьЭПИзФайла.Доступность = 
			НЕ Редактируется И НЕ Зашифрован;
		Элементы.СписокФайловКонтекстноеМенюСохранитьВместеСЭП.Доступность = ПодписанЭП;
		
		Элементы.СписокФайловОткрытьФайл.Доступность = Истина;
		Элементы.СписокФайловСохранитьКак.Доступность = Истина;
		Элементы.СписокФайловОбновитьИзФайлаНаДиске.Доступность = Истина;
		Элементы.СписокФайловПодписать.Доступность = 
			НЕ Редактируется И НЕ Зашифрован;
		Элементы.СписокФайловДобавитьЭПИзФайла.Доступность = 
			НЕ Редактируется И НЕ Зашифрован;
		Элементы.СписокФайловСохранитьВместеСЭП.Доступность = ПодписанЭП;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьДанныеФайлов()

	ОбновитьСписокФайлов();
	
	КаталогДляСохраненияДанных = 
		ИнтеграцияС1СДокументооборотВызовСервера.ЛокальныйКаталогФайлов();
	
	НастройкиДО = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьНастройки();
	ИспользоватьЭлектронныеЦифровыеПодписиВБСП = 
		ИнтеграцияС1СДокументооборотВызовСервера.ИспользоватьЭлектронныеЦифровыеПодписи();
	
	Если НастройкиДО.ИспользоватьЭлектронныеЦифровыеПодписи = Ложь Тогда
		Элементы.СписокФайловПодписанЭП.Видимость = Ложь;
		Элементы.СписокФайловСохранитьВместеСЭП.Видимость = Ложь;
		Элементы.СписокФайловКонтекстноеМенюСохранитьВместеСЭП.Видимость = Ложь;
	КонецЕсли;
	
	Если НастройкиДО.ИспользоватьЭлектронныеЦифровыеПодписи = Ложь
		Или ИспользоватьЭлектронныеЦифровыеПодписиВБСП = Ложь Тогда
		Элементы.СписокФайловПодписать.Видимость = Ложь;
		Элементы.СписокФайловКонтекстноеМенюПодписать.Видимость = Ложь;
		Элементы.СписокФайловДобавитьЭПИзФайла.Видимость = Ложь;
		Элементы.СписокФайловКонтекстноеМенюДобавитьЭПИзФайла.Видимость = Ложь;
	КонецЕсли;
	
	ИдентификаторКорневойПапки1СДокументооборот = 
		ПолучитьИдентификаторКорневойПапкиФайлов1СДокументооборот();
	
КонецПроцедуры

&НаКлиенте
// Начало создания файла из файла на диске.
//
Процедура СоздатьФайлСДиска()
	
	Если Не ЗначениеЗаполнено(ИдентификаторКорневойПапки1СДокументооборот) Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Не указана корневая папка для хранения файлов 1С:Документооборота.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения(
		"СоздатьФайлСДискаПослеПодключенияРасширения", ЭтотОбъект, ПараметрыОповещения));

КонецПроцедуры

&НаКлиенте
// Начало создания файла из файла на диске.
//
// Параметры:
//   ПолноеИмяФайла - полное имя файла
//   УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы объекта
//   ID - идентификатор владельца файла в Документообороте
//   Тип - тип XDTO владельца файла в Документообороте
//   Представление - представление владельца файла
//   ОписаниеОповещения - описание оповещения, вызваемого при успешном создании файла
//
Процедура СоздатьФайлСДискаПеретаскиванием(Файл)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПолноеИмяФайла", Файл.ПолноеИмя);
	СоздатьФайлСДискаПослеИнициализацииФайла(Файл, ПараметрыОповещения);

КонецПроцедуры

&НаКлиенте
// Выполняется в ходе создания файла с диска после подключения расширения.
//
Процедура СоздатьФайлСДискаПослеПодключенияРасширения(Подключено, ПараметрыОповещения) Экспорт
	
	Если Подключено Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		ВыборФайла.Показать(Новый ОписаниеОповещения(
			"СоздатьФайлСДискаПослеДиалогаВыбораФайла", ЭтотОбъект, ПараметрыОповещения));
			
	Иначе // веб-клиент без расширения
		
		НачатьПомещениеФайла(Новый ОписаниеОповещения(
			"СоздатьФайлСДискаПослеПомещенияФайлаБезРасширения", ЭтотОбъект, ПараметрыОповещения),,, 
			Истина, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Выполняется в ходе создания файла с диска после диалога выбора файла.
//
Процедура СоздатьФайлСДискаПослеДиалогаВыбораФайла(ВыбранныеФайлы, ПараметрыОповещения) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения.Вставить("ПолноеИмяФайла", ВыбранныеФайлы[0]);
	Файл = Новый Файл;
	Файл.НачатьИнициализацию(Новый ОписаниеОповещения(
		"СоздатьФайлСДискаПослеИнициализацииФайла", ЭтотОбъект, ПараметрыОповещения),
		ПараметрыОповещения.ПолноеИмяФайла);
		
КонецПроцедуры

&НаКлиенте
// Выполняется в ходе создания файла с диска после инициализации файла.
//
Процедура СоздатьФайлСДискаПослеИнициализацииФайла(Файл, ПараметрыОповещения) Экспорт
	
	ПараметрыОповещения.Вставить("Файл", Файл);
	Файл.НачатьПолучениеРазмера(Новый ОписаниеОповещения(
		"СоздатьФайлСДискаПослеПолученияРазмера", ЭтотОбъект, ПараметрыОповещения));
		
КонецПроцедуры

&НаКлиенте
// Выполняется в ходе создания файла с диска после получения размера.
//
Процедура СоздатьФайлСДискаПослеПолученияРазмера(Размер, ПараметрыОповещения) Экспорт
	
	МаксРазмерФайла = ИнтеграцияС1СДокументооборотКлиентПовтИсп.МаксимальныйРазмерПередаваемогоФайла();
	Если Размер > МаксРазмерФайла Тогда
		ВызватьИсключение
			   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый (%3 Мб).'"),
				 ПараметрыОповещения.ПолноеИмяФайла, 
				 РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(Размер / (1024 * 1024)),           
				 РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(МаксРазмерФайла / (1024 * 1024)));
	КонецЕсли;
	
	ПараметрыОповещения.Вставить("Размер", Размер);
	ПараметрыОповещения.Файл.НачатьПолучениеВремениИзменения(Новый ОписаниеОповещения(
		"СоздатьФайлСДискаПослеПолученияВремениИзменения", ЭтотОбъект, ПараметрыОповещения));
		
КонецПроцедуры

&НаКлиенте
// Выполняется в ходе создания файла с диска после получения времени изменения.
//
Процедура СоздатьФайлСДискаПослеПолученияВремениИзменения(ВремяИзменения, ПараметрыОповещения) Экспорт
	
	ПараметрыОповещения.Вставить("ВремяИзменения", ВремяИзменения);
	ПараметрыОповещения.Файл.НачатьПолучениеУниверсальногоВремениИзменения(Новый ОписаниеОповещения(
		"СоздатьФайлСДискаПослеПолученияУниверсальногоВремениИзменения", ЭтотОбъект, ПараметрыОповещения));
		
КонецПроцедуры

&НаКлиенте
// Выполняется в ходе создания файла с диска после получения универсального времени изменения.
//
Процедура СоздатьФайлСДискаПослеПолученияУниверсальногоВремениИзменения(ВремяИзмененияУниверсальное, 
	ПараметрыОповещения) Экспорт
	
	ПараметрыОповещения.Вставить("ВремяИзмененияУниверсальное", ВремяИзмененияУниверсальное);
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПараметрыОповещения.ПолноеИмяФайла, ""));
		
	РазмерВМб = ПараметрыОповещения.Размер / (1024 * 1024);
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
		|Пожалуйста, подождите...'"),
		ПараметрыОповещения.ПолноеИмяФайла,
		РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	Состояние(ТекстПояснения);
		
	НачатьПомещениеФайлов(Новый ОписаниеОповещения(
		"СоздатьФайлСДискаПослеПомещенияФайла", ЭтотОбъект, ПараметрыОповещения),
		ПомещаемыеФайлы, , Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
// Выполняется в ходе создания файла с диска после помещения файла (тонкий и веб с расширением).
//
Процедура СоздатьФайлСДискаПослеПомещенияФайла(ПомещенныеФайлы, ПараметрыОповещения) Экспорт
	
	Состояние();
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения.Вставить("АдресВременногоХранилищаФайла", ПомещенныеФайлы[0].Хранение);
	
	НастройкиДокументооборот = ИнтеграцияС1СДокументооборотКлиентПовтИсп.ПолучитьНастройки();
	Если НастройкиДокументооборот.НужноИзвлечьТекст Тогда
		ПараметрыОповещения.Вставить("Текст", РаботаСФайламиСлужебныйКлиентСервер.ИзвлечьТекст(
			ПараметрыОповещения.ПолноеИмяФайла));
	Иначе
		ПараметрыОповещения.Вставить("Текст", "");
	КонецЕсли;
		
	СоздатьФайлСДискаЗавершение(ПараметрыОповещения);
	
КонецПроцедуры

&НаКлиенте
// Выполняется в ходе создания файла с диска после помещения файла (веб без расширения).
//
Процедура СоздатьФайлСДискаПослеПомещенияФайлаБезРасширения(Помещен, АдресВременногоХранилищаФайла, 
	ВыбранноеИмяФайла, ПараметрыОповещения) Экспорт
	
	Если Не Помещен Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения.Вставить("АдресВременногоХранилищаФайла", АдресВременногоХранилищаФайла);
	ПараметрыОповещения.Вставить("ПолноеИмяФайла", ВыбранноеИмяФайла);
	ПараметрыОповещения.Вставить("Размер", 0);
	ПараметрыОповещения.Вставить("ВремяИзменения", Дата('00010101'));
	ПараметрыОповещения.Вставить("ВремяИзмененияУниверсальное", Дата('00010101'));
	ПараметрыОповещения.Вставить("Текст", "");
	
	СоздатьФайлСДискаЗавершение(ПараметрыОповещения);
		
КонецПроцедуры

&НаКлиенте
// Выполняется в ходе создания файла с диска после помещения файла (универсальное завершение).
//
Процедура СоздатьФайлСДискаЗавершение(ПараметрыОповещения)
	
	// Разберем полный путь на имя и расширение.
	СтруктураИмени = ИнтеграцияС1СДокументооборотКлиентПереопределяемый.РазложитьПолноеИмяФайла(
		ПараметрыОповещения.ПолноеИмяФайла);
	ПараметрыОповещения.Вставить("Расширение", СтруктураИмени.Расширение);
	ПараметрыОповещения.Вставить("Имя", СтруктураИмени.ИмяБезРасширения);
	
	ПараметрыОповещения.Удалить("Файл");
	ИдентификаторСозданногоФайла = СоздатьИзФайлаНаДискеСервер(ПараметрыОповещения);
	Состояние();
	
	ОбновитьСписокФайловКлиент(ИдентификаторСозданногоФайла);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("id", ИдентификаторСозданногоФайла);
	ПараметрыОповещения.Вставить("type", "DMFile");
	ПараметрыОповещения.Вставить("name", СтруктураИмени.ИмяБезРасширения);
	ПараметрыОповещения.Вставить("extension", СтруктураИмени.Расширение);
	Оповестить("Запись_ДокументооборотФайл", Параметры);
	
КонецПроцедуры

&НаСервере
Функция СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAddLinkedFileRequest");
	
	Запрос.rootFolderID = ИдентификаторКорневойПапки1СДокументооборот;
	
	Запрос.file = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMFile");
	
	Запрос.file.externalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	Запрос.file.externalObject.name = Строка(ВнешнийОбъект);
	Запрос.file.externalObject.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
	Запрос.file.externalObject.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
	
	Запрос.file.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", "DMFile");
	Запрос.file.binaryData = ПолучитьИзВременногоХранилища(ПараметрыСоздания.АдресВременногоХранилищаФайла);
	Запрос.file.extension = ПараметрыСоздания.Расширение;
	Запрос.file.modificationDate = ПараметрыСоздания.ВремяИзменения;
	Запрос.file.modificationDateUniversal = ПараметрыСоздания.ВремяИзмененияУниверсальное;
	Запрос.file.name = ПараметрыСоздания.Имя;
	Запрос.file.size = ПараметрыСоздания.Размер;
	
	МаксРазмерФайла = ИнтеграцияС1СДокументооборотВызовСервера.МаксимальныйРазмерПередаваемогоФайла();
	Если ПараметрыСоздания.Размер > МаксРазмерФайла Тогда
		РазмерВМб = ПараметрыСоздания.Размер / (1024 * 1024);
		РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
		ВызватьИсключение
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый (%3 Мб).'"),
			ПараметрыСоздания.Имя, 
			РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),
			РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыСоздания.Текст) Тогда
		Запрос.file.text = ПараметрыСоздания.Текст;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ.file.objectId.id;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Связи

// Открывает текущий связанный документ или его файл.
//
&НаКлиенте
Процедура ОткрытьСвязанныеДанныеСтроки(Строка)
	
	Если Строка.Тип = "DMRelationType" Тогда // объект ИС
		Возврат;
		
	ИначеЕсли Строка.Тип = "DMFile" Тогда // файл
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьФайл(Строка.ID, Строка.Заголовок,
			Строка.Расширение, УникальныйИдентификатор);
			
	Иначе // объект ДО
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(Строка.Тип, Строка.ID, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после добавления связи и обновляет дерево связей.
//
&НаКлиенте
Процедура НачатьДобавлениеСвязиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДеревоСвязей(, Результат.СвязанныйДокумент.ID);
		
	Если ЗначениеЗаполнено(АдресДляФайловСвязанныхДокументов) Тогда
		ПодключитьОбработчикОжидания("ОбновлениеФайловСвязанныхДокументов", 1, Истина);
	КонецЕсли;
		
КонецПроцедуры

// Вызывается после удаления связи и обновляет дерево связей.
//
&НаКлиенте
Процедура НачатьУдалениеСвязиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДеревоСвязей();
	
	Если ЗначениеЗаполнено(АдресДляФайловСвязанныхДокументов) Тогда
		ПодключитьОбработчикОжидания("ОбновлениеФайловСвязанныхДокументов", 1, Истина);
	КонецЕсли;
		
КонецПроцедуры

// Обновляет данные связей документа, получая их заново, если необходимо.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - полученный из ДО документ, или
//              - Неопределено - признак необходимости получить его.
//   ДобавленныйДокумент - Строка - идентификатор документа, чьи файлы нужно обновить, или
//                       - Неопределено - признак необходимости обновить все файлы.
//
&НаСервере
Процедура ОбновитьДеревоСвязей(Знач ОбъектXDTO = Неопределено, ДобавленныйДокумент = Неопределено)
	
	Контрагент = "";
	КонтрагентID = "";
	Организация = "";
	ОрганизацияID = "";
	
	Если Не ЗначениеЗаполнено(ДокументID) Тогда
		ДеревоСвязей.ПолучитьЭлементы().Очистить();
		Элементы.ГруппаСвязанныеДокументы.Заголовок = НСтр("ru = 'Связи'");
		Возврат;
	КонецЕсли;
	
	Если ОбъектXDTO = Неопределено Тогда
		
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(
			Прокси, "DMRetrieveRequest");
		ОбъектИд = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ДокументID, ДокументТип);
		Запрос.objectIds.Добавить(ОбъектИд);
		
		Запрос.columnSet.Добавить("relations");
		Если ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(ДокументТип) Тогда
			Запрос.columnSet.Добавить("correspondent");
			Запрос.columnSet.Добавить("organization");
		КонецЕсли;
		
		Результат = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
		ОбъектXDTO = Результат.objects[0];
		
		// Заполним организацию и контрагента для дальнейшего использования в отборах.
		Если ОбъектXDTO.Свойства().Получить("correspondent") <> Неопределено
			И ОбъектXDTO.Установлено("correspondent") Тогда
			Контрагент = ОбъектXDTO.correspondent.name;
			КонтрагентID = ОбъектXDTO.correspondent.objectId.id;
		КонецЕсли;
		Если ОбъектXDTO.Свойства().Получить("organization") <> Неопределено
			И ОбъектXDTO.Установлено("organization") Тогда
			Организация = ОбъектXDTO.organization.name;
			ОрганизацияID = ОбъектXDTO.organization.objectId.id;
		КонецЕсли;
		
	КонецЕсли;
	
	АдресДляФайловСвязанныхДокументов = Обработки.ИнтеграцияС1СДокументооборот.
		ЗаполнитьДеревоСвязейИНачатьПолучениеФайлов(
			ЭтаФорма,
			ОбъектXDTO,
			Элементы.ГруппаСвязанныеДокументы,
			ДобавленныйДокумент);
	
КонецПроцедуры

// Обновляет файлы связанных документов данными временного хранилища, заполняемыми
// в асинхронном задании, откладывая обновление, если данные еще не готовы.
//
&НаКлиенте
Процедура ОбновлениеФайловСвязанныхДокументов() Экспорт
	
	Если Не ЗначениеЗаполнено(АдресДляФайловСвязанныхДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	// Сохраним текущее положение по ID объекта с учетом типа связи.
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущийID = Неопределено;
		ТекущийТип = Неопределено;
		ТекущийТипСвязи = Неопределено;
	Иначе
		ТекущийID = ТекущиеДанные.ID;
		ТекущийТип = ТекущиеДанные.Тип;
		Если ТекущийТип = "DMRelationType" Тогда
			СтрокаТипаСвязи = ТекущиеДанные;
		ИначеЕсли ТекущийТип = "DMFile" Тогда
			СтрокаТипаСвязи = ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя();
		Иначе
			СтрокаТипаСвязи = ТекущиеДанные.ПолучитьРодителя();
		КонецЕсли;
		ТекущийТипСвязи = СтрокаТипаСвязи.ID;
	КонецЕсли;
	
	Если ОбновлениеФайловСвязанныхДокументовСервер() Тогда // данные еще не готовы
		
		ПодключитьОбработчикОжидания("ОбновлениеФайловСвязанныхДокументов", 1, Истина);
		
	Иначе // данные получены, развернем дерево и восстановим позицию в нем
		
		СтрокиТипСвязи = ДеревоСвязей.ПолучитьЭлементы();
		Для каждого СтрокаТипСвязи из СтрокиТипСвязи Цикл
			
			Идентификатор = СтрокаТипСвязи.ПолучитьИдентификатор();
			Элементы.ДеревоСвязей.Развернуть(Идентификатор, Истина);
			
			Если ТекущийТип = Неопределено Тогда
				Продолжить;
				
			ИначеЕсли ТекущийТип = "DMRelationType" Тогда
				Если СтрокаТипСвязи.ID = ТекущийID Тогда
					Элементы.ДеревоСвязей.ТекущаяСтрока = Идентификатор;
				КонецЕсли;
				
			ИначеЕсли СтрокаТипСвязи.ID = ТекущийТипСвязи Тогда
				
				СтрокиДокумент = СтрокаТипСвязи.ПолучитьЭлементы();
				Для каждого СтрокаДокумент из СтрокиДокумент Цикл
					
					Если ТекущийТип = "DMFile" Тогда
						СтрокиФайл = СтрокиДокумент.ПолучитьЭлементы();
						Для каждого СтрокаФайл из СтрокиФайл Цикл
							Если СтрокаФайл.ID = ТекущийID Тогда
								Элементы.ДеревоСвязей.ТекущаяСтрока = 
									СтрокаФайл.ПолучитьИдентификатор();
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли СтрокаДокумент.ID = ТекущийID Тогда
						Элементы.ДеревоСвязей.ТекущаяСтрока = 
							СтрокаДокумент.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет файлы связанных документов данными временного хранилища, если они готовы.
//
// Возвращаемое значение:
//   Булево - Истина, если требуется повторное обновление, и Ложь, если не требуется.
//
&НаСервере
Функция ОбновлениеФайловСвязанныхДокументовСервер()
	
	Результат = ПолучитьИзВременногоХранилища(АдресДляФайловСвязанныхДокументов);
	Если Результат = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ДеревоСвязей");
	
	Для Каждого СвязанныйДокумент из Результат Цикл
		
		СтруктураПоиска = Новый Структура("ID, Тип",
			СвязанныйДокумент.ID,
			СвязанныйДокумент.Тип);
		СтрокиДокументов = Дерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Для каждого СтрокаДокумента из СтрокиДокументов Цикл
			СтрокаДокумента.Строки.Очистить();
			Для Каждого Файл из СвязанныйДокумент.Файлы Цикл
				СтрокаФайла = СтрокаДокумента.Строки.Добавить();
				СтрокаФайла.ID = Файл.ID;
				СтрокаФайла.Тип = Файл.Тип;
				СтрокаФайла.Заголовок = Файл.Наименование;
				СтрокаФайла.Расширение = Файл.Расширение;
				СтрокаФайла.Картинка = РаботаСФайламиСлужебныйКлиентСервер.
					ПолучитьИндексПиктограммыФайла(СтрокаФайла.Расширение);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоСвязей");
	
	Возврат Ложь;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// История переписки

&НаСервере
Процедура ПолучитьЗаполнитьДеревоПисем()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	СписокУсловий = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetCorrespondenceTreeQuery");
	ПредметXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObject");
	ПредметXDTO.name = "";
	ПредметXDTO.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ДокументID, ДокументТип);
	СписокУсловий.target.Добавить(ПредметXDTO);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetCorrespondenceTreeRequest");
	Запрос.query = СписокУсловий;

	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Дерево = РеквизитФормыВЗначение("ДеревоПисем");
	Дерево.Строки.Очистить();
	Для каждого Элемент из Ответ.followers Цикл
		ЗаполнитьСтрокуДерева(Дерево.Строки, Элемент);
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПисем");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДерева(СтрокиДерева, СтрокаXDTO)
	
	СтрокаДерева = СтрокиДерева.Добавить();
	Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(
		СтрокаДерева,
		СтрокаXDTO.object,
		"Письмо");
	СтрокаДерева.Адресаты = СтрокаXDTO.recipients;
	СтрокаДерева.Дата = СтрокаXDTO.date;
	Если ДокументТип = "DMCorrespondent" Или ДокументТип = "DMOutgoingEMail" Тогда
		Если СтрокаXDTO.Свойства().Получить("regNumber") <> Неопределено Тогда
			СтрокаДерева.Номер = СтрокаXDTO.regNumber;
		КонецЕсли;
		Если СтрокаXDTO.Свойства().Получить("sent") <> Неопределено Тогда
			СтрокаДерева.Отправлен = СтрокаXDTO.sent;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.ПисьмоТип = "DMIncomingEMail" Тогда
		СтрокаДерева.Картинка = 0;
	ИначеЕсли СтрокаДерева.ПисьмоТип = "DMOutgoingEMail" Тогда
		// заполнение свойства sent
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
			Если СтрокаДерева.Отправлен = Истина Тогда
				СтрокаДерева.Картинка = 1 
			Иначе
				СтрокаДерева.Картинка = 3;
			КонецЕсли;
		Иначе
			СтрокаДерева.Картинка = 1;
		КонецЕсли;
	ИначеЕсли ДокументТип = "DMCorrespondent" Тогда
		Если СтрокаДерева.ПисьмоТип = "DMInternalDocument" Тогда
			СтрокаДерева.Картинка = 2;
		ИначеЕсли СтрокаДерева.ПисьмоТип = "DMIncomingDocument" Тогда
			СтрокаДерева.Картинка = 0;
		Иначе
			Если СтрокаДерева.Отправлен Тогда
				СтрокаДерева.Картинка = 1;
			Иначе
				СтрокаДерева.Картинка = 3;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаДерева.Картинка = 2;
	КонецЕсли;
	
	Для каждого Элемент из СтрокаXDTO.followers Цикл
		ЗаполнитьСтрокуДерева(СтрокаДерева.Строки, Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоПисем()
	
	ЭлементыДерева = ДеревоПисем.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.ДеревоПисем.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

 &НаКлиенте
Функция ПисьмоЕстьВСписке(ПисьмоID)
	
	ЭлементыДерева = ДеревоПисем.ПолучитьЭлементы();
	Возврат ПроверитьНаличиеЭлементаДерева(ЭлементыДерева,ПисьмоID);
	
КонецФункции

&НаКлиенте
Функция ПроверитьНаличиеЭлементаДерева(ЭлементыДерева, ПисьмоID)
	
	ПисьмоСуществует = Ложь;
	Для каждого ЭлементДерева из ЭлементыДерева Цикл
		Если ЭлементДерева.ПисьмоID = ПисьмоID Тогда 
			ПисьмоСуществует = Истина;
			Возврат ПисьмоСуществует;
		Иначе
			Подчиненные = ЭлементДерева.ПолучитьЭлементы();
		    ПисьмоСуществует = ПроверитьНаличиеЭлементаДерева(Подчиненные, ПисьмоID)
		КонецЕсли;
	КонецЦикла;

	Возврат ПисьмоСуществует;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Трудозатраты

&НаСервере
Процедура ЗаполнитьТрудозатраты()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	СписокУсловий = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "source";
	
	Условие.value = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ДокументID, ДокументТип);
	
	СписокУсловий.conditions.Добавить(Условие);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
	Запрос.type = "DMActualWork";
	Запрос.query = СписокУсловий;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Работы.Очистить();
	
	Для каждого СтрокаОтвета Из Ответ.items Цикл
		
		Строка = СтрокаОтвета.object;
		
		НоваяСтрока = Работы.Добавить();
		НоваяСтрока.ДатаДобавления = Строка.addDate;
		НоваяСтрока.Начало = Строка.begin;
		НоваяСтрока.Окончание = Строка.end;
		НоваяСтрока.Работа = Строка.description;
		НоваяСтрока.Длительность = Строка.duration / 3600;
		НоваяСтрока.ДлительностьСтр = ИнтеграцияС1СДокументооборотКлиентСервер.ЧислоВСтроку(
			НоваяСтрока.Длительность);
		
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(
			НоваяСтрока, Строка.workType, "ВидРабот", Ложь);
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(
			НоваяСтрока, Строка.project,"Проект", Ложь);
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(
			НоваяСтрока, Строка.projectTask,"ПроектнаяЗадача", Ложь);
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(
			НоваяСтрока, Строка.source, "Источник", Ложь);
		Обработки.ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(
			НоваяСтрока, Строка.user, "Пользователь", Ложь);
		
		НоваяСтрока.ПроектЗадача = ИнтеграцияС1СДокументооборотКлиентСервер.ПредставлениеПроектаЗадачи(
			НоваяСтрока.Проект, НоваяСтрока.ПроектнаяЗадача);
		
	КонецЦикла;
		
	Элементы.РаботыДлительность.ТекстПодвала = Формат(Работы.Итог("Длительность"),"ЧЦ=15; ЧДЦ=2; ЧН=0,00");
	
	Работы.Сортировать("ДатаДобавления");
	
КонецПроцедуры

#КонецОбласти
