#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Объединение и очистка ссылок.

Функция ОбъединитьИОчиститьЗадвоенныеДанныеФизическихЛиц(ПараметрыЗадания, АдресВоВременномХранилище = Неопределено) Экспорт
	
	МассивФизическихЛиц = ПараметрыЗадания.МассивФизическихЛиц;
	РезультатОбъединения = ПараметрыЗадания.РезультатОбъединения;
	ВладелецОставляемыхФИО = ПараметрыЗадания.ВладелецОставляемыхФИО;
	
	ВыполненоБезОшибок = Истина;
	
	// Определение оставляемого физического лица по количеству ссылок в базе данных.
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаСсылок = НайтиПоСсылкам(МассивФизическихЛиц);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТаблицаСсылок.Количество() > 0 Тогда
		
		ТаблицаСИтогами = ТаблицаСсылок.Скопировать();
		ТаблицаСИтогами.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("Число"));
	
		Для каждого СтрокаТаблицыСИтогами Из ТаблицаСИтогами Цикл
		
			ПолноеИмяОбъектаМетаданных = СтрокаТаблицыСИтогами.Метаданные.ПолноеИмя();
			ПозицияТочки = СтрНайти(ПолноеИмяОбъектаМетаданных, ".");
			ВидОбъекта = Лев(ПолноеИмяОбъектаМетаданных, ПозицияТочки - 1);
			
			Коэффициент = 1;
			Если ВидОбъекта = "Документ" Тогда
				
				ДокументОбъект = СтрокаТаблицыСИтогами.Данные.ПолучитьОбъект();
				Для каждого ОбъектДвижений Из ДокументОбъект.Движения Цикл
					Коэффициент = Коэффициент + ОбъектДвижений.Количество();
				КонецЦикла;
				
			КонецЕсли; 
			
			СтрокаТаблицыСИтогами.Счетчик = Коэффициент;
			
		КонецЦикла;
		
		ТаблицаСИтогами.Свернуть("Ссылка", "Счетчик");
		ТаблицаСИтогами.Сортировать("Счетчик УБЫВ");
	
		ОставляемоеФизическоеЛицо = ТаблицаСИтогами[0].Ссылка;
		
	Иначе
		
		ОставляемоеФизическоеЛицо = МассивФизическихЛиц[0];
		
	КонецЕсли;
	
	МассивФизическихЛиц.Удалить(МассивФизическихЛиц.Найти(ОставляемоеФизическоеЛицо));
	
	Попытка
		
		// Заполнение данными оставляемого физического лица.
		
		ФизическоеЛицоОбъект = ОставляемоеФизическоеЛицо.ПолучитьОбъект();
		ФизическоеЛицоОбъект.Заблокировать();
		
		// Снятие пометки удаления
		Если ФизическоеЛицоОбъект.ПометкаУдаления Тогда
			УстановитьПараметрыЗаписиОбъекта(ФизическоеЛицоОбъект);
			ФизическоеЛицоОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		СтрокаДанных = РезультатОбъединения.Строки.Найти("Ссылка", "Поле", Ложь);
		Если СтрокаДанных <> Неопределено Тогда
			
			КоллекцияПолей = СтрокаДанных.Строки;
			Для каждого ДанныеФизическогоЛица Из КоллекцияПолей Цикл
				
				КоллекцияСтрокТабличнойЧасти = ДанныеФизическогоЛица.Строки;
				
				Если КоллекцияСтрокТабличнойЧасти.Количество() = 0 Тогда
					ФизическоеЛицоОбъект[ДанныеФизическогоЛица.Поле] = ДанныеФизическогоЛица.Значение;
				Иначе
					
					ТабличнаяЧастьФизическогоЛица = ФизическоеЛицоОбъект[ДанныеФизическогоЛица.Поле];
					ТабличнаяЧастьФизическогоЛица.Очистить();

					Для каждого ЗаписьТабличнойЧасти Из КоллекцияСтрокТабличнойЧасти Цикл
						
						НоваяСтрокаТабличнойЧасти = ТабличнаяЧастьФизическогоЛица.Добавить();
						Для каждого ЗначениеДанныхСтроки Из ЗаписьТабличнойЧасти.Строки Цикл
							НоваяСтрокаТабличнойЧасти[ЗначениеДанныхСтроки.Поле] = ЗначениеДанныхСтроки.Значение;
						КонецЦикла;
						
					КонецЦикла;

				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьПараметрыЗаписиОбъекта(ФизическоеЛицоОбъект);
		ФизическоеЛицоОбъект.Записать();
		
	Исключение
		
		ДобавитьЗаписьВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные %1'"),
				ОставляемоеФизическоеЛицо),
			ОставляемоеФизическоеЛицо,
			ИнформацияОбОшибке(),
			ВыполненоБезОшибок);
				
	КонецПопытки;
	
	// Заполнение регистров сведений.
		
	Для каждого ОписаниеРегистраСведений Из РезультатОбъединения.Строки Цикл
		
		Если ОписаниеРегистраСведений.Поле = "Ссылка" Тогда
			Продолжить;
		КонецЕсли; 
		
		МетаданныеРегистраСведений = Метаданные.РегистрыСведений.Найти(ОписаниеРегистраСведений.Поле);
		Если МетаданныеРегистраСведений = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Если МетаданныеРегистраСведений.Измерения.Найти("ФизЛицо") = Неопределено Тогда
			ИмяРеквизитаФизическоеЛицо = "ФизическоеЛицо";
		Иначе
			ИмяРеквизитаФизическоеЛицо = "ФизЛицо";
		КонецЕсли;
		
		ЕстьИзмерениеНомерПоПорядку = МетаданныеРегистраСведений.Измерения.Найти("НомерПоПорядку") <> Неопределено;
		
		Попытка
				
			НаборЗаписей = РегистрыСведений[ОписаниеРегистраСведений.Поле].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор[ИмяРеквизитаФизическоеЛицо].Установить(ОставляемоеФизическоеЛицо);
			
			Для каждого ОписаниеЗаписиРегистраСведений Из ОписаниеРегистраСведений.Строки Цикл
				
				НоваяЗапись = НаборЗаписей.Добавить();
				
				Для каждого ОписаниеПоляЗаписи Из ОписаниеЗаписиРегистраСведений.Строки Цикл
					НоваяЗапись[ОписаниеПоляЗаписи.Поле] = ОписаниеПоляЗаписи.Значение;
				КонецЦикла;
				
				НоваяЗапись[ИмяРеквизитаФизическоеЛицо] = ОставляемоеФизическоеЛицо;
				
				Если ЕстьИзмерениеНомерПоПорядку Тогда
					НоваяЗапись.НомерПоПорядку = НаборЗаписей.Количество();
				КонецЕсли; 
				
			КонецЦикла;
			
			УстановитьПараметрыЗаписиОбъекта(НаборЗаписей);
			
			НаборЗаписей.Записать();
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			ДобавитьЗаписьВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось сохранить данные регистра сведений %1'"),
					ОписаниеРегистраСведений.Поле),
				ОставляемоеФизическоеЛицо,
				Инфо.Причина,
				ВыполненоБезОшибок);
					
			ВыполненоБезОшибок = Ложь;
			
		КонецПопытки;
			
	КонецЦикла;
	
	// Обработка регистра ФИОФизическихЛиц.
	
	Если ВладелецОставляемыхФИО <> Неопределено И ВладелецОставляемыхФИО <> ОставляемоеФизическоеЛицо Тогда
		
		Попытка
		
			НаборЗаписей = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ОставляемоеФизическоеЛицо);
			
			ОставляемыйНаборЗаписей = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
			ОставляемыйНаборЗаписей.Отбор.ФизическоеЛицо.Установить(ВладелецОставляемыхФИО);
			ОставляемыйНаборЗаписей.Прочитать();
			
			Для каждого ЗаписьОставляемогоНабора Из ОставляемыйНаборЗаписей Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьОставляемогоНабора);
				НоваяЗапись.ФизическоеЛицо = ОставляемоеФизическоеЛицо;
			КонецЦикла;
		
			УстановитьПараметрыЗаписиОбъекта(НаборЗаписей);
			
			НаборЗаписей.Записать();
			
		Исключение
			
			ДобавитьЗаписьВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось сохранить историю изменения ФИО %1'"),
					ОставляемоеФизическоеЛицо),
				ОставляемоеФизическоеЛицо,
				ИнформацияОбОшибке(),
				ВыполненоБезОшибок);
					
			ВыполненоБезОшибок = Ложь;
			
		КонецПопытки;
		
	КонецЕсли; 
		
	// Замена оставшихся ссылок
		
	ОбъектыИсключаемыеИзОчистки = ИсключаемыеИзОчистки();
		
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаСсылок = НайтиПоСсылкам(МассивФизическихЛиц);
	УстановитьПривилегированныйРежим(Ложь);
	Для каждого СтрокаТаблицыСсылок Из ТаблицаСсылок Цикл
			
		Если ОбъектыИсключаемыеИзОчистки.Найти(СтрокаТаблицыСсылок.Метаданные.ПолноеИмя()) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
			
		Если НЕ ЗаменитьСсылкиВСтрокеСОбъектом(СтрокаТаблицыСсылок, ОставляемоеФизическоеЛицо) Тогда
			ВыполненоБезОшибок = Ложь;
		КонецЕсли;
			
	КонецЦикла;
	
	// Удаление "лишних" физических лиц.
	Если ВыполненоБезОшибок Тогда
		
		Для каждого УдаляемоеФизическоеЛицо Из МассивФизическихЛиц Цикл
				
			Попытка
				
				УдаляемоеФизическоеЛицоОбъект = УдаляемоеФизическоеЛицо.ПолучитьОбъект();
				УдаляемоеФизическоеЛицоОбъект.Заблокировать();
				УдаляемоеФизическоеЛицоОбъект.ПометкаУдаления = Истина;
				УстановитьПараметрыЗаписиОбъекта(УдаляемоеФизическоеЛицоОбъект);
				УдаляемоеФизическоеЛицоОбъект.Записать();
				
			Исключение
				
				ДобавитьЗаписьВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось установить пометку удаления %1'"),
						УдаляемоеФизическоеЛицо),
					УдаляемоеФизическоеЛицо,
					ИнформацияОбОшибке(),
					ВыполненоБезОшибок);
				
			КонецПопытки;
				
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		
		НаборЗаписейТекущихКадровыхДанных = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
		НаборЗаписейТекущихКадровыхДанных.Отбор.ФизическоеЛицо.Установить(ОставляемоеФизическоеЛицо);
		НаборЗаписейТекущихКадровыхДанных.Прочитать();
		
		УстановитьПараметрыЗаписиОбъекта(НаборЗаписейТекущихКадровыхДанных);
		НаборЗаписейТекущихКадровыхДанных.Записать();
		
	Исключение
		
		ДобавитьЗаписьВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить информацию об основном месте работы %1'"),
				ОставляемоеФизическоеЛицо),
			ОставляемоеФизическоеЛицо,
			ИнформацияОбОшибке(),
			ВыполненоБезОшибок);
			
	КонецПопытки;
	
	ДанныеОставляемогоФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, ОставляемоеФизическоеЛицо, "Наименование,ФИО,Фамилия,Имя,Отчество,УточнениеНаименования");
	Если ДанныеОставляемогоФизическогоЛица.Количество() > 0 Тогда
		
		СтрокаДанных = ДанныеОставляемогоФизическогоЛица[0];
		НовоеНаименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
			СтрокаДанных.Фамилия, СтрокаДанных.Имя, СтрокаДанных.Отчество, СтрокаДанных.УточнениеНаименования);
		ФИО = Строка(СтрокаДанных.Фамилия) + " " + Строка(СтрокаДанных.Имя) + " " + Строка(СтрокаДанных.Отчество);

		Если СтрокаДанных.Наименование <> НовоеНаименование
			ИЛИ СтрокаДанных.ФИО <> ФИО Тогда
			
			Попытка
				
				ФизическоеЛицоОбъект = ОставляемоеФизическоеЛицо.ПолучитьОбъект();
				ФизическоеЛицоОбъект.Заблокировать();
				УстановитьПараметрыЗаписиОбъекта(ФизическоеЛицоОбъект);
				ФизическоеЛицоОбъект.ФИО = ФИО;
				ФизическоеЛицоОбъект.Наименование = НовоеНаименование;
				ФизическоеЛицоОбъект.Записать();
				
			Исключение
				
				ДобавитьЗаписьВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обновить наименование %1'"),
						ОставляемоеФизическоеЛицо),
					ОставляемоеФизическоеЛицо,
					ИнформацияОбОшибке(),
					ВыполненоБезОшибок);
					
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОставляемоеФизическоеЛицо;
	ПараметрыПолученияСотрудников.КадровыеДанные = "Наименование,Фамилия,Имя,Отчество,УточнениеНаименования";
	
	ДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолученияСотрудников);
	
	Для каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		
		НовоеНаименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
			ДанныеСотрудника.Фамилия, ДанныеСотрудника.Имя, ДанныеСотрудника.Отчество, ДанныеСотрудника.УточнениеНаименования);
			
		Если ДанныеСотрудника.Наименование <> НовоеНаименование Тогда
			
			Попытка
				
				СотрудникОбъект = ДанныеСотрудника.Сотрудник.ПолучитьОбъект();
				СотрудникОбъект.Заблокировать();
				УстановитьПараметрыЗаписиОбъекта(СотрудникОбъект);
				СотрудникОбъект.Наименование = НовоеНаименование;
				СотрудникОбъект.Записать();
			
			Исключение
				
				ДобавитьЗаписьВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обновить наименование сотрудника %1'"),
						ДанныеСотрудника.Сотрудник),
					ДанныеСотрудника.Сотрудник,
					ИнформацияОбОшибке(),
					ВыполненоБезОшибок);
					
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		ПоместитьВоВременноеХранилище(ВыполненоБезОшибок, АдресВоВременномХранилище);
	КонецЕсли;
	
	Возврат ВыполненоБезОшибок;
	
КонецФункции

Функция ИсключаемыеИзОчистки()
	
	МассивИсключаемыхИзОчистки = Новый Массив;
	
	МассивИсключаемыхИзОчистки.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.ПолноеИмя());
	МассивИсключаемыхИзОчистки.Добавить(Метаданные.РегистрыСведений.ГруппыЗначенийДоступа.ПолноеИмя());
	МассивИсключаемыхИзОчистки.Добавить(Метаданные.РегистрыСведений.ФИОФизическихЛиц.ПолноеИмя());
	МассивИсключаемыхИзОчистки.Добавить(Метаданные.РегистрыСведений.НаборыЗначенийДоступа.ПолноеИмя());
	
	МассивСравниваемыхРегистровСведений = ОписаниеСравниваемыхРегистровСведений();
	Для каждого ОписаниеРегистра Из МассивСравниваемыхРегистровСведений Цикл
		МассивИсключаемыхИзОчистки.Добавить(Метаданные.РегистрыСведений[ОписаниеРегистра.ИмяРегистра].ПолноеИмя());
	КонецЦикла;
	
	Возврат МассивИсключаемыхИзОчистки;
	
КонецФункции

Функция ОписаниеСравниваемыхСправочников() Экспорт
	
	МассивОписаний = Новый Массив;
	
	МассивОписаний.Добавить(Новый Структура("ИмяСправочника,ИмяКлючевогоРеквизита", "ОбразованиеФизическихЛиц"));
	МассивОписаний.Добавить(Новый Структура("ИмяСправочника,ИмяКлючевогоРеквизита", "РодственникиФизическихЛиц"));
	
	Возврат МассивОписаний;
	
КонецФункции

Функция ОписаниеСравниваемыхРегистровСведений() Экспорт
	
	МассивИменРегистровСведений = Новый Массив;
	
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "ВоинскийУчет"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "ГражданствоФизическихЛиц"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "ДокументыФизическихЛиц"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "ДоходыПредыдущегоМестаРаботыНДФЛ"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "ЗнаниеЯзыковФизическихЛиц", "Язык"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "НаградыФизическихЛиц"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "ПрофессииФизическихЛиц", "Профессия"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "ПроцентыСевернойНадбавкиФизическихЛиц"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "СведенияОбИнвалидностиФизическихЛиц"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "СостоянияВБракеФизическихЛиц"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "СтажиФизическихЛиц", "ВидСтажа"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "СтатусФизическихЛицКакНалогоплательщиковНДФЛ"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "СтатусыЗастрахованныхФизическихЛиц"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "ТрудоваяДеятельностьФизическихЛиц"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "УченыеЗванияФизическихЛиц"));
	МассивИменРегистровСведений.Добавить(Новый Структура("ИмяРегистра,ИмяКлючевогоРеквизита", "УченыеСтепениФизическихЛиц"));
	
	Возврат МассивИменРегистровСведений;
	
КонецФункции

Функция ЗаменитьСсылкиВСтрокеСОбъектом(СтрокаСОбъектом, СсылкаЗамены)
	
	МеняемаяСсылка = СтрокаСОбъектом.Ссылка;
	МетаданныеОбъекта = СтрокаСОбъектом.Метаданные;
	
	ВыполненоБезОшибок = Истина;
	
	Попытка
	
		СсылкаНаИзменяемыйОбъект = Неопределено;
		
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта)
			ИЛИ ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта)
			ИЛИ ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеОбъекта)
			ИЛИ ОбщегоНазначения.ЭтоЗадача(МетаданныеОбъекта)
			ИЛИ ОбщегоНазначения.ЭтоБизнесПроцесс(МетаданныеОбъекта) Тогда
			
			ИзменяемыйОбъект = СтрокаСОбъектом.Данные.ПолучитьОбъект();
			ИзменяемыйОбъект.Заблокировать();
			
			СсылкаНаИзменяемыйОбъект = СтрокаСОбъектом.Данные;
			
			ЗаменитьСсылкиВКоллекцииРеквизитов(ИзменяемыйОбъект, МетаданныеОбъекта.СтандартныеРеквизиты, МеняемаяСсылка, СсылкаЗамены);
			ЗаменитьСсылкиВКоллекцииРеквизитов(ИзменяемыйОбъект, МетаданныеОбъекта.Реквизиты, МеняемаяСсылка, СсылкаЗамены);
			
			Для каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
				Для каждого СтрокаТабличнойЧасти Из ИзменяемыйОбъект[ТабличнаяЧасть.Имя] Цикл
					ЗаменитьСсылкиВКоллекцииРеквизитов(СтрокаТабличнойЧасти, ТабличнаяЧасть.Реквизиты, МеняемаяСсылка, СсылкаЗамены);
				КонецЦикла;
			КонецЦикла;
			
			УстановитьПараметрыЗаписиОбъекта(ИзменяемыйОбъект);
			
			Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
				ИзменяемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
			Иначе
				ИзменяемыйОбъект.Записать();
			КонецЕсли;
			
			Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
				
				Для каждого РегистрыРегистратора Из МетаданныеОбъекта.Движения Цикл
					
					ЭтоРегистрБухгалтерии = Ложь;
					Если ОбщегоНазначения.ЭтоРегистрСведений(РегистрыРегистратора) Тогда
						ИзменяемыйРегистр = РегистрыСведений[РегистрыРегистратора.Имя].СоздатьНаборЗаписей();
					ИначеЕсли ОбщегоНазначения.ЭтоРегистрНакопления(РегистрыРегистратора) Тогда
						ИзменяемыйРегистр = РегистрыНакопления[РегистрыРегистратора.Имя].СоздатьНаборЗаписей();
					ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(РегистрыРегистратора) Тогда
						ИзменяемыйРегистр = РегистрыБухгалтерии[РегистрыРегистратора.Имя].СоздатьНаборЗаписей();
						ЭтоРегистрБухгалтерии = Истина;
					Иначе
						ИзменяемыйРегистр = РегистрыРасчета[РегистрыРегистратора.Имя].СоздатьНаборЗаписей();
					КонецЕсли; 
					
					ИзменяемыйРегистр.Отбор.Регистратор.Установить(СтрокаСОбъектом.Данные);
					ИзменяемыйРегистр.Прочитать();
					
					Для каждого ЗаписьНабора Из ИзменяемыйРегистр Цикл
						
						Если ЭтоРегистрБухгалтерии Тогда
							ЗаменитьСсылкиВКоллекцииСтандартныхРеквизитовРегистровБухгалтерии(ЗаписьНабора, РегистрыРегистратора.СтандартныеРеквизиты, МеняемаяСсылка, СсылкаЗамены);
						Иначе
							ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНабора, РегистрыРегистратора.СтандартныеРеквизиты, МеняемаяСсылка, СсылкаЗамены);
						КонецЕсли;
						
						ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНабора, РегистрыРегистратора.Реквизиты, МеняемаяСсылка, СсылкаЗамены);
						ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНабора, РегистрыРегистратора.Измерения, МеняемаяСсылка, СсылкаЗамены);
						ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНабора, РегистрыРегистратора.Ресурсы, МеняемаяСсылка, СсылкаЗамены);
					КонецЦикла;
					
					УстановитьПараметрыЗаписиОбъекта(ИзменяемыйРегистр);
					
					ИзменяемыйРегистр.Записать();
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта)
			И Метаданные.РегистрыСведений[МетаданныеОбъекта.Имя].РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			
			ИзменяемыйОбъект = РегистрыСведений[МетаданныеОбъекта.Имя].СоздатьНаборЗаписей();
			СохраняемыйОбъект = РегистрыСведений[МетаданныеОбъекта.Имя].СоздатьНаборЗаписей();
			
			Если Метаданные.РегистрыСведений[МетаданныеОбъекта.Имя].ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				ИзменяемыйОбъект.Отбор.Период.Установить(СтрокаСОбъектом.Данные.Период);
				СохраняемыйОбъект.Отбор.Период.Установить(СтрокаСОбъектом.Данные.Период);
			КонецЕсли; 
			Для каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				
				ИзменяемыйОбъект.Отбор[Измерение.Имя].Установить(СтрокаСОбъектом.Данные[Измерение.Имя]);
				
				Если Измерение.Тип.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) 
					И СтрокаСОбъектом.Данные[Измерение.Имя] = МеняемаяСсылка Тогда
					
					СохраняемыйОбъект.Отбор[Измерение.Имя].Установить(СсылкаЗамены);
					
				Иначе
					СохраняемыйОбъект.Отбор[Измерение.Имя].Установить(СтрокаСОбъектом.Данные[Измерение.Имя]);
				КонецЕсли;
				
			КонецЦикла;
			ИзменяемыйОбъект.Прочитать();
			
			Для каждого ЗаписьНабора Из ИзменяемыйОбъект Цикл
				
				ЗаписьНовогоНабора = СохраняемыйОбъект.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНовогоНабора, ЗаписьНабора);
				
				ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНовогоНабора, МетаданныеОбъекта.СтандартныеРеквизиты, МеняемаяСсылка, СсылкаЗамены);
				ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНовогоНабора, МетаданныеОбъекта.Реквизиты, МеняемаяСсылка, СсылкаЗамены);
				ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНовогоНабора, МетаданныеОбъекта.Измерения, МеняемаяСсылка, СсылкаЗамены);
				ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНовогоНабора, МетаданныеОбъекта.Ресурсы, МеняемаяСсылка, СсылкаЗамены);
				
			КонецЦикла;
			
			УстановитьПараметрыЗаписиОбъекта(СохраняемыйОбъект);
			СохраняемыйОбъект.Записать();
			
			ИзменяемыйОбъект.Очистить();
			УстановитьПараметрыЗаписиОбъекта(ИзменяемыйОбъект);
			ИзменяемыйОбъект.Записать();
			
		КонецЕсли; 
	
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ДобавитьЗаписьВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось произвести замену ссылок в %1'"),
				МетаданныеОбъекта.ПолноеИмя())
				+ ?(СсылкаНаИзменяемыйОбъект = Неопределено, "", " (" + СсылкаНаИзменяемыйОбъект + ")"),
			СсылкаНаИзменяемыйОбъект,
			Инфо.Причина,
			ВыполненоБезОшибок);
			
	КонецПопытки;
	
	Возврат ВыполненоБезОшибок;
	
КонецФункции

Процедура ЗаменитьСсылкиВКоллекцииСтандартныхРеквизитовРегистровБухгалтерии(ИзменяемыйОбъект, КоллекцияРеквизитов, МеняемаяСсылка, СсылкаЗамены)
	
	Для каждого Реквизит Из КоллекцияРеквизитов Цикл
		
		Если Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
			
			Если СтрНайти(Реквизит.Имя, "Субконто") > 0 Тогда
				
				Для каждого ОписаниеЗначенияСубконто Из ИзменяемыйОбъект.СубконтоДТ Цикл
					Если ОписаниеЗначенияСубконто.Значение = МеняемаяСсылка Тогда
						ИзменяемыйОбъект.СубконтоДТ.Вставить(ОписаниеЗначенияСубконто.Ключ, СсылкаЗамены);
					КонецЕсли;
				КонецЦикла;
				
				Для каждого ОписаниеЗначенияСубконто Из ИзменяемыйОбъект.СубконтоКТ Цикл
					Если ОписаниеЗначенияСубконто.Значение = МеняемаяСсылка Тогда
						ИзменяемыйОбъект.СубконтоКТ.Вставить(ОписаниеЗначенияСубконто.Ключ, СсылкаЗамены);
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				Если ИзменяемыйОбъект[Реквизит.Имя] = МеняемаяСсылка Тогда
					ИзменяемыйОбъект[Реквизит.Имя] = СсылкаЗамены;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСсылкиВКоллекцииРеквизитов(ИзменяемыйОбъект, КоллекцияРеквизитов, МеняемаяСсылка, СсылкаЗамены)
	
	Для каждого Реквизит Из КоллекцияРеквизитов Цикл
		
		Если Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) 
			И ИзменяемыйОбъект[Реквизит.Имя] = МеняемаяСсылка Тогда
			
			ИзменяемыйОбъект[Реквизит.Имя] = СсылкаЗамены;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрыЗаписиОбъекта(ЗаписываемыйОбъект)
	
	ЗаписываемыйОбъект.ОбменДанными.Загрузка = Истина;
	ЗаписываемыйОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
КонецПроцедуры

Процедура ДобавитьЗаписьВЖурналРегистрации(ПредставлениеПроблемы, КлючДанных, ОписаниеОшибки, ВыполненоБезОшибок)
	
	ВыполненоБезОшибок = Ложь;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ПредставлениеПроблемы	+ ". " + ОписаниеОшибки.Описание,
	    КлючДанных);
				
КонецПроцедуры

// Методы обработки данных форм.

Процедура ЗаполнитьРезультат(ДеревоСравнения, Результат, НайденныеДубли) Экспорт
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	ЗаполнитьРезультатПоКоллекции(Результат, ДеревоСравнения.ПолучитьЭлементы(), 0, МассивУдаляемыхСтрок, НайденныеДубли);
	
	Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		УдаляемаяСтрока.ПолучитьЭлементы().Очистить();
	КонецЦикла;
	
	Для каждого Строка0Уровня Из ДеревоСравнения.ПолучитьЭлементы() Цикл
		Если Строка0Уровня.ПолучитьЭлементы().Количество() = 0 Тогда
			МассивУдаляемыхСтрок.Добавить(Строка0Уровня);
		КонецЕсли; 
	КонецЦикла;
	
	УдалитьСтроки(МассивУдаляемыхСтрок, ДеревоСравнения);
	
	ПочиститьРезультат(Результат);
	
КонецПроцедуры

Процедура ПочиститьРезультат(Результат)
	
	КоллекцияПолейРезультат = Результат.ПолучитьЭлементы();
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для каждого ЭлементКоллекции Из КоллекцияПолейРезультат Цикл
		
		Если ЭлементКоллекции.Поле = "Ссылка" Тогда
			
			Для каждого СтрокаКоллекцииСсылка Из ЭлементКоллекции.ПолучитьЭлементы() Цикл
				
				Если СтрокаКоллекцииСсылка.ПолучитьЭлементы().Количество() > 0 Тогда
					
					Продолжить;
					
				КонецЕсли; 
				
				Если НЕ ЗначениеЗаполнено(СтрокаКоллекцииСсылка.Значение) Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаКоллекцииСсылка);
				КонецЕсли; 
				
			КонецЦикла;
			
		Иначе
			
			Если ЭлементКоллекции.ПолучитьЭлементы().Количество() = 0 Тогда
				МассивУдаляемыхСтрок.Добавить(ЭлементКоллекции);
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		
		Родитель = УдаляемаяСтрока.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда
			
			КоллекцияСтрокРодителя = Результат.ПолучитьЭлементы();
			
		Иначе
			
			КоллекцияСтрокРодителя = Родитель.ПолучитьЭлементы();
			
		КонецЕсли; 
		
		КоллекцияСтрокРодителя.Удалить(КоллекцияСтрокРодителя.Индекс(УдаляемаяСтрока));
			
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСтроки(МассивУдаляемыхСтрок, ДеревоСравнения)
	
	МассивСтрокРодителей = Новый Массив;
	
	Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		
		Родитель = УдаляемаяСтрока.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда
			
			КоллекцияСтрокРодителя = ДеревоСравнения.ПолучитьЭлементы();
			
		Иначе
			
			КоллекцияСтрокРодителя = Родитель.ПолучитьЭлементы();
			
			Если МассивСтрокРодителей.Найти(Родитель) = Неопределено Тогда
				
				МассивСтрокРодителей.Добавить(Родитель);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если УдаляемаяСтрока.ПолучитьЭлементы().Количество() = 0 Тогда
			КоллекцияСтрокРодителя.Удалить(КоллекцияСтрокРодителя.Индекс(УдаляемаяСтрока));
		КонецЕсли;
			
	КонецЦикла;
	
	Если МассивСтрокРодителей.Количество() > 0 Тогда
		УдалитьСтроки(МассивСтрокРодителей, ДеревоСравнения);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьРезультатПоКоллекции(Родитель, Коллекция, Уровень, МассивУдаляемыхСтрок, НайденныеДубли)
	
	Если Уровень > 2 Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого ЭлементКоллекции Из Коллекция Цикл
		
		СтрокаОбрабатывается = Ложь;
		
		Если Уровень = 1 Тогда
			Если ЭлементКоллекции.ПолучитьРодителя().Поле = "Ссылка" Тогда
				Если ЭлементКоллекции.ПолучитьЭлементы().Количество() = 0 Тогда
					СтрокаОбрабатывается = Истина;
				КонецЕсли;
			Иначе
				СтрокаОбрабатывается = Истина;
			КонецЕсли;
			
		ИначеЕсли Уровень = 2
			И ЭлементКоллекции.ПолучитьРодителя().ПолучитьРодителя().Поле = "Ссылка" Тогда
			
			СтрокаОбрабатывается = Истина;
			
		ИначеЕсли Уровень = 0
			И ЭлементКоллекции.Поле = "Ссылка" Тогда
			
			СтрокаОбрабатывается = Истина;
			
		КонецЕсли;
		
		Если Уровень < 2 ИЛИ СтрокаОбрабатывается Тогда
			НоваяСтрокаРезультата = Родитель.ПолучитьЭлементы().Добавить();
			НоваяСтрокаРезультата.Поле = ЭлементКоллекции.Поле;
			Если ЭлементКоллекции.Поле = "Ссылка" Тогда
				НоваяСтрокаРезультата.Представление = НСтр("ru='Личные данные'");
			Иначе
				НоваяСтрокаРезультата.Представление = ЭлементКоллекции.Представление;
			КонецЕсли;
		КонецЕсли; 
		
		Если СтрокаОбрабатывается Тогда
			
			ПервоеЗаполненное = Неопределено;
			НайденныеЗначения = Новый Массив;
			Для ИндексФизическогоЛица = 0 По НайденныеДубли.Количество() - 1 Цикл
				
				ЗначениеПоля = ЭлементКоллекции["Поле" + ИндексФизическогоЛица];
				Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
					Продолжить;
				КонецЕсли; 
				
				Если ЭлементКоллекции["ПолеПометка" + ИндексФизическогоЛица] Тогда
					ПервоеЗаполненное = ИндексФизическогоЛица;
				КонецЕсли; 
				
				Если ПервоеЗаполненное = Неопределено Тогда
					ПервоеЗаполненное = ИндексФизическогоЛица;
					ЭлементКоллекции["ДоступенДляВыбора" + ПервоеЗаполненное] = Истина;
				Иначе
					ЭлементКоллекции["ДоступенДляВыбора" + ИндексФизическогоЛица] = Истина;
				КонецЕсли;
				
				Если НайденныеЗначения.Найти(ЗначениеПоля) = Неопределено Тогда
					НайденныеЗначения.Добавить(ЗначениеПоля);
				КонецЕсли; 
				
			КонецЦикла;
			
			Если ПервоеЗаполненное <> Неопределено Тогда
				ЗаполнитьСтрокуРезультата(НоваяСтрокаРезультата, ЭлементКоллекции, ПервоеЗаполненное);
				ЭлементКоллекции["ПолеПометка" + ПервоеЗаполненное] = Истина;
				ЭлементКоллекции["ДоступенДляВыбора" + ПервоеЗаполненное] = НайденныеЗначения.Количество() > 1;
			КонецЕсли; 
			
			Если НайденныеЗначения.Количество() < 2 Тогда
				МассивУдаляемыхСтрок.Добавить(ЭлементКоллекции);
			КонецЕсли; 
			
		КонецЕсли; 
		
		ЗаполнитьРезультатПоКоллекции(НоваяСтрокаРезультата, ЭлементКоллекции.ПолучитьЭлементы(), Уровень + 1, МассивУдаляемыхСтрок, НайденныеДубли);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуРезультата(СтрокаРезультата, СтрокаКоллекции, ИндексФизическогоЛица) Экспорт
	
	Если СтрокаРезультата.Поле = "Ссылка" Тогда
		СтрокаРезультата.Значение = "";
	Иначе
		СтрокаРезультата.Значение = СтрокаКоллекции["Поле" + ИндексФизическогоЛица];
	КонецЕсли; 
		
	Если СтрокаРезультата.ПолучитьРодителя() <> Неопределено Тогда
		
		Для каждого ПодстрокаСтрокиКоллекции Из СтрокаКоллекции.ПолучитьЭлементы() Цикл
			
			ПодстрокаСтрокиРезультата = Неопределено;
			Для каждого СтрокаКоллекцииСтрокаРезультата Из СтрокаРезультата.ПолучитьЭлементы() Цикл
				Если СтрокаКоллекцииСтрокаРезультата.Поле = ПодстрокаСтрокиКоллекции.Поле Тогда
					ПодстрокаСтрокиРезультата = СтрокаКоллекцииСтрокаРезультата;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПодстрокаСтрокиРезультата = Неопределено Тогда
				ПодстрокаСтрокиРезультата = СтрокаРезультата.ПолучитьЭлементы().Добавить();
				ПодстрокаСтрокиРезультата.Поле = ПодстрокаСтрокиКоллекции.Поле;
				ПодстрокаСтрокиРезультата.Представление = ПодстрокаСтрокиКоллекции.Представление;
			КонецЕсли; 
			
			ПодстрокаСтрокиРезультата.Значение = ПодстрокаСтрокиКоллекции["Поле" + ИндексФизическогоЛица];
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Функция АдресКоллекцииВХранилище(Форма, ИмяКоллекции) Экспорт
	
	РеквизитыКоллекции = Форма.ПолучитьРеквизиты(ИмяКоллекции);
	
	КлючиСтруктуры = "Строки";
	Для каждого РеквизитКоллекции Из РеквизитыКоллекции Цикл
		КлючиСтруктуры = КлючиСтруктуры + "," + РеквизитКоллекции.Имя;
	КонецЦикла;
	
	СохраняемаяКоллекция = КоллекцияВМассиве(Форма[ИмяКоллекции].ПолучитьЭлементы(), КлючиСтруктуры);
	
	Возврат ПоместитьВоВременноеХранилище(СохраняемаяКоллекция, Форма.УникальныйИдентификатор);
	
КонецФункции

Функция КоллекцияВМассиве(Коллекция, КлючиСтруктуры)
	
	ВозвращаемаяКоллекция = Новый Массив;
	
	Для каждого СтрокаКоллекции Из Коллекция Цикл
		
		СтруктураСтроки = Новый Структура(КлючиСтруктуры);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаКоллекции);
		СтруктураСтроки.Строки = КоллекцияВМассиве(СтрокаКоллекции.ПолучитьЭлементы(), КлючиСтруктуры);
		
		ВозвращаемаяКоллекция.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат ВозвращаемаяКоллекция;
	
КонецФункции

Процедура ИзменитьРеквизитыФормы(Форма, КоличествоДублей, РеквизитыДеревоСравнения = "ДеревоСравнения") Экспорт
	
	МассивРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	ИменаРеквизитовДеревоСравнения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РеквизитыДеревоСравнения);
	
	Для каждого ИмяРеквизитаДеревоСравнения Из ИменаРеквизитовДеревоСравнения Цикл
		
		МассивРеквизитовДеревоСравнения = Форма.ПолучитьРеквизиты(ИмяРеквизитаДеревоСравнения);
		
		Для каждого РеквизитДеревоСравнения Из МассивРеквизитовДеревоСравнения Цикл
			Если РеквизитДеревоСравнения.Имя = "Поле" ИЛИ РеквизитДеревоСравнения.Имя = "Представление" Тогда
				Продолжить;
			КонецЕсли; 
			МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизитаДеревоСравнения + "." + РеквизитДеревоСравнения.Имя);
		КонецЦикла;
		
		Для Индекс = 0 По КоличествоДублей - 1 Цикл
			
			ИндексРеквизита = МассивУдаляемыхРеквизитов.Найти(ИмяРеквизитаДеревоСравнения + ".Поле" + Индекс);
			Если ИндексРеквизита = Неопределено Тогда
				Реквизит  = Новый РеквизитФормы("Поле" + Индекс, Новый ОписаниеТипов(), ИмяРеквизитаДеревоСравнения);
				МассивРеквизитов.Добавить(Реквизит);
			Иначе
				МассивУдаляемыхРеквизитов.Удалить(ИндексРеквизита);
			КонецЕсли; 
			
			ИндексРеквизита = МассивУдаляемыхРеквизитов.Найти(ИмяРеквизитаДеревоСравнения + ".ПолеПометка" + Индекс);
			Если ИндексРеквизита = Неопределено Тогда
				Реквизит  = Новый РеквизитФормы("ПолеПометка" + Индекс, Новый ОписаниеТипов("Булево"), ИмяРеквизитаДеревоСравнения);
				МассивРеквизитов.Добавить(Реквизит);
			Иначе
				МассивУдаляемыхРеквизитов.Удалить(ИндексРеквизита);
			КонецЕсли; 
			
			ИндексРеквизита = МассивУдаляемыхРеквизитов.Найти(ИмяРеквизитаДеревоСравнения + ".ДоступенДляВыбора" + Индекс);
			Если ИндексРеквизита = Неопределено Тогда
				Реквизит  = Новый РеквизитФормы("ДоступенДляВыбора" + Индекс, Новый ОписаниеТипов("Булево"), ИмяРеквизитаДеревоСравнения);
				МассивРеквизитов.Добавить(Реквизит);
			Иначе
				МассивУдаляемыхРеквизитов.Удалить(ИндексРеквизита);
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(МассивРеквизитов, МассивУдаляемыхРеквизитов);
	
КонецПроцедуры

Процедура ЗаполнитьКоллекцию(Коллекция, ДанныеЗаполнения) Экспорт
	
	Для каждого ДанноеЗаполнения Из ДанныеЗаполнения Цикл
		
		ДобавляемаяСтрока = Коллекция.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемаяСтрока, ДанноеЗаполнения);
		
		ЗаполнитьКоллекцию(ДобавляемаяСтрока.ПолучитьЭлементы(), ДанноеЗаполнения.Строки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли