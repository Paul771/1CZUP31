
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСпискаСотрудников = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СозданиеПользователейФизическихЛиц", "НастройкиСпискаСотрудников");
	Если НастройкиСпискаСотрудников <> Неопределено Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиСпискаСотрудников);
	КонецЕсли;
	
	НастройкиПользователей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СозданиеПользователейФизическихЛиц", "НастройкиПользователей");
	Если ЗначениеЗаполнено(НастройкиПользователей) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиПользователей);
		ГруппыДоступа.ЗагрузитьЗначения(НастройкиПользователей.ВыбранныеГруппыДоступа);
	Иначе
		УстановитьНастройкиПользователейПоУмолчанию();
	КонецЕсли;
	
	НастройкиСообщений = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СозданиеПользователейФизическихЛиц", "НастройкиСообщений");
	Если ЗначениеЗаполнено(НастройкиСообщений) Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиСообщений);
	Иначе 
		ЗаполнитьШаблонУведомления();
	КонецЕсли;
	
	ЗаполнитьДеревоПодразделений();
	
	ЗаполнитьСписокСотрудников();
	
	УстановитьВидимостьЭлементов(ЭтотОбъект);
	
	ПроверитьНаличиеСвязанныхПользователейИФизическихЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПодбиратьПользователейПриОткрытии Тогда 
		ПодключитьОбработчикОжидания("ОткрытьФормуПодбораПользователей", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсточникВыбора.ИмяФормы, ".");
	СуффиксФормыИсточника = ВРег(ЧастиИмени[ЧастиИмени.Количество() - 1]);

	Если СуффиксФормыИсточника = ВРег("НастройкиПользователей") Тогда
		ОбработкаИзмененияНастроекПользователейНаСервере(ВыбранноеЗначение);
	ИначеЕсли СуффиксФормыИсточника = ВРег("НастройкиСообщений") Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбранноеЗначение);
		СохранитьНастройкиНаСервере("НастройкиСообщений", ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановленыФизическиеЛицаПользователей" И Источник = ЭтотОбъект Тогда 
		ЗаполнитьСписокСотрудников();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ЗаполнитьСписокСотрудников();
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияСотрудниковПриИзменении(Элемент)
	
	ЗаполнитьСписокСотрудников();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПользовательНеСозданНажатие(Элемент)
	
	Отбор = Новый Структура("Ссылка", ДоступныеДляВыбораПользователи());
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормы.Вставить("Отбор", Отбор);
		
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.Сотрудники);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОбновитьИнформациюОСотруднике();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СотрудникиПользовательОС" Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Сотрудник);
		ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если НЕ ВебКлиент Тогда
		ОткрытьФорму("Справочник.Пользователи.Форма.ВыборПользователяОперационнойСистемы", , Элемент);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		УстановитьФизическоеЛицоПользователя(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкиПользователей(Команда)
	
	НастройкиПользователей = СамообслуживаниеСотрудниковКлиентСервер.ОписаниеНастроекСозданияПользователей();
	ЗаполнитьЗначенияСвойств(НастройкиПользователей, ЭтотОбъект);
	НастройкиПользователей.ВыбранныеГруппыДоступа = ГруппыДоступа.ВыгрузитьЗначения();
	
	ПараметрыФормы = Новый Структура("НастройкиПользователей", НастройкиПользователей);
	
	ОткрытьФорму("Обработка.СозданиеПользователейФизическихЛиц.Форма.НастройкиПользователей", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУведомлений(Команда)
	
	НастройкиСообщений = СамообслуживаниеСотрудниковКлиентСервер.ОписаниеНастроекОтправкиУведомлений();
	ЗаполнитьЗначенияСвойств(НастройкиСообщений, ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("НастройкиСообщений", НастройкиСообщений);
	
	ОткрытьФорму("Обработка.СозданиеПользователейФизическихЛиц.Форма.НастройкиСообщений", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПользователей(Команда)
	
	СоздатьПользователейФизическихЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПользователя(Команда)
	
	СоздатьПользователейФизическихЛиц(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьУведомление(Команда)
	
	ОтправитьСообщенияПользователям();
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВходВПрограмму(Команда)
	
	УстановитьАутентификациюПользователей(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьВходВПрограмму(Команда)
	
	УстановитьАутентификациюПользователей(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПользователяВГруппыДоступа(Команда)
	
	ДобавитьПользователяВГруппыДоступаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПользователей(Команда)
	
	Если Не ОткрытьФормуПодбораПользователей() Тогда 
		ТекстСообщения = НСтр("ru = 'Соответствия между пользователями и сотрудниками не найдены.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокСотрудников()
	
	Сотрудники.Очистить();
	
	ДатаПолученияДанных = ?(КатегорияСотрудников = 1, ТекущаяДатаСеанса(), '00010101');
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода = ДатаПолученияДанных;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ДатаПолученияДанных;
	ПараметрыПолученияСотрудников.КадровыеДанные = "ФизическоеЛицо,Фамилия,Имя,Отчество,ДатаУвольнения";
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолученияСотрудников);
	
	РаботающиеФизическиеЛица = Новый Соответствие;
	
	УникальныеФизическиеЛица = Новый Соответствие;
	СписокФизическихЛиц = Новый Массив;
	
	УникальныеСотрудники = Новый Соответствие;
	СписокСотрудников = Новый Массив;
	
	Для Каждого ДанныеСотрудника Из СотрудникиОрганизации Цикл
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.ДатаУвольнения) Тогда 
			РаботающиеФизическиеЛица.Вставить(ДанныеСотрудника.ФизическоеЛицо, Истина);
		КонецЕсли;
		Если УникальныеФизическиеЛица[ДанныеСотрудника.ФизическоеЛицо] = Неопределено Тогда 
			УникальныеФизическиеЛица.Вставить(ДанныеСотрудника.ФизическоеЛицо, Истина);
			СписокФизическихЛиц.Добавить(ДанныеСотрудника.ФизическоеЛицо);
		КонецЕсли;	
		Если УникальныеСотрудники[ДанныеСотрудника.Сотрудник] = Неопределено Тогда 
			УникальныеСотрудники.Вставить(ДанныеСотрудника.Сотрудник, Истина);
			СписокСотрудников.Добавить(ДанныеСотрудника.Сотрудник);
		КонецЕсли;	
	КонецЦикла;
	
	МестоСотрудниковВСтруктуреПредприятия = ОрганизационнаяСтруктура.МестоСотрудниковВСтруктуреПредприятия(Ложь, СписокСотрудников, ТекущаяДатаСеанса());
	ПользователиФизическихЛиц = СамообслуживаниеСотрудников.ПользователиФизическихЛиц(СписокФизическихЛиц);
	
	СписокПользователей = Новый Массив;
	Для Каждого КлючИЗначение Из ПользователиФизическихЛиц Цикл 
		Для Каждого ОписаниеПользователя Из КлючИЗначение.Значение Цикл 
			СписокПользователей.Добавить(ОписаниеПользователя.Пользователь);
		КонецЦикла;
	КонецЦикла;
	ГруппыДоступаПользователей = СамообслуживаниеСотрудников.ГруппыДоступаПользователей(СписокПользователей);
	
	ВидКонтактнойИнформации = ?(ЗначениеЗаполнено(ВидАдресаЭлектроннойПочты), ВидАдресаЭлектроннойПочты, Неопределено);
	ЭлектронныеАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(СписокФизическихЛиц, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВидКонтактнойИнформации);
	
	ДатыОтправкиСообщений = ДатыОтправкиСообщенийСотрудникам(СписокФизическихЛиц);
	
	ОтборПоПодразделению = ЗначениеЗаполнено(Подразделение);
	Если ОтборПоПодразделению Тогда 
		ДанныеПодразделения = Неопределено;
		ПолучитьДанныеПодразделения(СтруктураПредприятия, Подразделение, ДанныеПодразделения);
		ПодчиненныеПодразделения = Новый Соответствие;
		ПодчиненныеПодразделения.Вставить(ДанныеПодразделения.Подразделение, Истина);
		ЗаполнитьПодчиненныеПодразделения(ДанныеПодразделения, ПодчиненныеПодразделения);
	КонецЕсли;
	
	Для Каждого ДанныеСотрудника Из СотрудникиОрганизации Цикл 
		
		Уволен = РаботающиеФизическиеЛица[ДанныеСотрудника.ФизическоеЛицо] = Неопределено;
		Если КатегорияСотрудников = 2 И Не Уволен Тогда 
			Продолжить;
		КонецЕсли;
		
		ПодразделениеСотрудника = МестоСотрудниковВСтруктуреПредприятия[ДанныеСотрудника.Сотрудник];
		Если ОтборПоПодразделению И ПодчиненныеПодразделения[ПодразделениеСотрудника] = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивПользователей = ПользователиФизическихЛиц[ДанныеСотрудника.ФизическоеЛицо];
		Если КатегорияСотрудников = 1 И МассивПользователей <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Сотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСотрудника);
		
		НоваяСтрока.Подразделение = ПодразделениеСотрудника;
		
		Если МассивПользователей <> Неопределено Тогда
			
			ОписаниеПользователя = МассивПользователей[0];
			НоваяСтрока.Пользователь = ОписаниеПользователя.Пользователь;
			НоваяСтрока.ВходРазрешен = Не ОписаниеПользователя.Недействителен;
			НоваяСтрока.ИдентификаторПользователяИБ = ОписаниеПользователя.ИдентификаторПользователяИБ;
			
			ПрочитанныеСвойства = Пользователи.СвойстваПользователяИБ(ОписаниеПользователя.ИдентификаторПользователяИБ);
			Если ПрочитанныеСвойства <> Неопределено Тогда
				НоваяСтрока.ПользовательОС = ПрочитанныеСвойства.ПользовательОС;
			КонецЕсли;
			
			МассивГруппДоступа = ГруппыДоступаПользователей[ОписаниеПользователя.Пользователь];
			Если МассивГруппДоступа = Неопределено Тогда 
				МассивГруппДоступа = Новый Массив;
			КонецЕсли;
			НоваяСтрока.ГруппыДоступа = Новый ФиксированныйМассив(МассивГруппДоступа);
			
		КонецЕсли;
		
		ДанныеЭлектронногоАдреса = ЭлектронныеАдреса.Найти(ДанныеСотрудника.ФизическоеЛицо, "Объект");
		Если ДанныеЭлектронногоАдреса <> Неопределено Тогда 
			НоваяСтрока.АдресЭлектроннойПочты = ДанныеЭлектронногоАдреса.Представление;
		КонецЕсли;
		
		НоваяСтрока.ДатаОтправки = ДатыОтправкиСообщений[ДанныеСотрудника.ФизическоеЛицо];
		
		НоваяСтрока.Уволен = Уволен;
		
		УстановитьКартинкуСтрокиСотрудника(НоваяСтрока);
		
	КонецЦикла;
	
	Сотрудники.Сортировать("Сотрудник, Подразделение");
	
	НастройкиСпискаСотрудников = Новый Структура("Подразделение, КатегорияСотрудников");
	ЗаполнитьЗначенияСвойств(НастройкиСпискаСотрудников, ЭтотОбъект);
	СохранитьНастройкиНаСервере("НастройкиСпискаСотрудников", НастройкиСпискаСотрудников);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПользователейФизическихЛиц(ТолькоВыделенныеСтроки = Ложь)
	
	НастройкиПользователей = СамообслуживаниеСотрудниковКлиентСервер.ОписаниеНастроекСозданияПользователей();
	ЗаполнитьЗначенияСвойств(НастройкиПользователей, ЭтотОбъект);
	
	НастройкиСообщений = СамообслуживаниеСотрудниковКлиентСервер.ОписаниеНастроекОтправкиУведомлений();
	ЗаполнитьЗначенияСвойств(НастройкиСообщений, ЭтотОбъект);
	
	СозданныеПользователи = Новый Соответствие;
	
	СтрокиКоллекции = ?(ТолькоВыделенныеСтроки, Элементы.Сотрудники.ВыделенныеСтроки, Сотрудники);
	
	Для Каждого СтрокаКоллекции Из СтрокиКоллекции Цикл 
		
		ДанныеСотрудника = ?(ТолькоВыделенныеСтроки, Сотрудники.НайтиПоИдентификатору(СтрокаКоллекции), СтрокаКоллекции);
		
		Если ЗначениеЗаполнено(ДанныеСотрудника.Пользователь) Тогда 
			Продолжить;
		КонецЕсли;
		
		ПользовательФизическогоЛица = СозданныеПользователи[ДанныеСотрудника.ФизическоеЛицо];
		Если ПользовательФизическогоЛица <> Неопределено Тогда 
			ДанныеСотрудника.Пользователь = ПользовательФизическогоЛица;
			Продолжить;
		КонецЕсли;
		
		ДанныеСотрудника.Пользователь = СамообслуживаниеСотрудников.НовыйПользователь(ДанныеСотрудника, НастройкиПользователей, НастройкиСообщений);
		СозданныеПользователи.Вставить(ДанныеСотрудника.ФизическоеЛицо, ДанныеСотрудника.Пользователь);
		
	КонецЦикла;
	
	Для Каждого ГруппаДоступа Из ГруппыДоступа Цикл
		ГруппаДоступаОбъект = ГруппаДоступа.Значение.ПолучитьОбъект();
		Для Каждого КлючИЗначение Из СозданныеПользователи Цикл 
			ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = КлючИЗначение.Значение;
		КонецЦикла;
		ГруппаДоступаОбъект.Записать();
	КонецЦикла;
	
	ЗаполнитьСписокСотрудников();
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщенияПользователям()
	
	НастройкиСообщений = СамообслуживаниеСотрудниковКлиентСервер.ОписаниеНастроекОтправкиУведомлений();
	ЗаполнитьЗначенияСвойств(НастройкиСообщений, ЭтотОбъект);
	
	Для Каждого ИдентификаторСтроки Из Элементы.Сотрудники.ВыделенныеСтроки Цикл 
		ДанныеСотрудника = Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.Пользователь) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для работника %1 нет данных о пользователе информационной базы'"), ДанныеСотрудника.ФизическоеЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.АдресЭлектроннойПочты) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для работника %1 не указан адрес электронной почты'"), ДанныеСотрудника.ФизическоеЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;	
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеСотрудника.ИдентификаторПользователяИБ) Тогда 
			ОбновляемыеСвойства = Новый Структура("Пароль", СамообслуживаниеСотрудников.СлучайныйПароль());
			СоздатьНовогоПользователяИБ = Ложь;
			ОписаниеОшибки = "";
			ПользовательИБ = Неопределено;
			
			Если НЕ Пользователи.ЗаписатьПользователяИБ(
				ДанныеСотрудника.ИдентификаторПользователяИБ,
				ОбновляемыеСвойства,
				СоздатьНовогоПользователяИБ,
				ОписаниеОшибки,
				ПользовательИБ) Тогда
				
				ВызватьИсключение ОписаниеОшибки;
			КонецЕсли;
			
			ТекстПисьма = СамообслуживаниеСотрудников.ТекстПисьмаУведомления(ПользовательИБ.Имя, ОбновляемыеСвойства.Пароль, НастройкиСообщений);
			СамообслуживаниеСотрудников.ОтправитьСообщениеПользователю(ДанныеСотрудника, ТекстПисьма, НастройкиСообщений);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСписокСотрудников();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШаблонУведомления()
	
	НастройкиУведомленийПоУмолчанию = СамообслуживаниеСотрудниковКлиентСервер.НастройкиОтправкиУведомленийПоУмолчанию();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиУведомленийПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Функция ДатыОтправкиСообщенийСотрудникам(СписокФизическихЛиц)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДатыОтправкиСообщенийСотрудникам.ФизическоеЛицо,
	               |	ДатыОтправкиСообщенийСотрудникам.ДатаОтправки
	               |ИЗ
	               |	РегистрСведений.ДатыОтправкиСообщенийСотрудникам КАК ДатыОтправкиСообщенийСотрудникам
	               |ГДЕ
	               |	ДатыОтправкиСообщенийСотрудникам.ФизическоеЛицо В(&СписокФизическихЛиц)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатыОтправкиСообщений = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл 
		ДатыОтправкиСообщений.Вставить(Выборка.ФизическоеЛицо, Выборка.ДатаОтправки);
	КонецЦикла;
	
	Возврат ДатыОтправкиСообщений;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(КлючНастроек, Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СозданиеПользователейФизическихЛиц", КлючНастроек, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАутентификациюПользователей(ВходВПрограммуРазрешен)
	
	Для Каждого ИдентификаторСтроки Из Элементы.Сотрудники.ВыделенныеСтроки Цикл 
		
		ДанныеСотрудника = Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.Пользователь) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для работника %1 нет данных о пользователе информационной базы'"), ДанныеСотрудника.ФизическоеЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;	
		КонецЕсли;
		
		СамообслуживаниеСотрудников.УстановитьАутентификациюПользователя(ДанныеСотрудника.Пользователь, ВходВПрограммуРазрешен);
		
	КонецЦикла;
	
	ЗаполнитьСписокСотрудников();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементов(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "СотрудникиПользовательОС", "Видимость", Форма.АутентификацияОС);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиПользователейПоУмолчанию()
	
	АутентификацияСтандартная = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПодразделений()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураПредприятия.Ссылка КАК Подразделение
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |ИТОГИ ПО
	               |	Ссылка ИЕРАРХИЯ";
				   
	ДеревоПодразделений = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДополнитьДеревоПодразделений(ДеревоПодразделений, СтруктураПредприятия);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьДеревоПодразделений(ДеревоИсточник, ДеревоПриемник)
	
	СтрокиПриемника = ДеревоПриемник.ПолучитьЭлементы();
	
	Для Каждого СтрокаИсточника Из ДеревоИсточник.Строки Цикл
		
		Если ТипЗнч(ДеревоПриемник) = Тип("ДанныеФормыЭлементДерева") И ДеревоПриемник.Подразделение = СтрокаИсточника.Подразделение Тогда 
			
			ДополнитьДеревоПодразделений(СтрокаИсточника, ДеревоПриемник);
			
		Иначе
			
			СтрокаПриемника = СтрокиПриемника.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
			ДополнитьДеревоПодразделений(СтрокаИсточника, СтрокаПриемника);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПодразделения(ДеревоПодразделений, Подразделение, ДанныеПодразделения)
	
	Если ДанныеПодразделения <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокиПодразделений = ДеревоПодразделений.ПолучитьЭлементы();
	
	Для Каждого СтрокаПодразделения Из СтрокиПодразделений Цикл
		Если СтрокаПодразделения.Подразделение = Подразделение Тогда 
			ДанныеПодразделения = СтрокаПодразделения;
			Прервать;
		КонецЕсли;
		ПолучитьДанныеПодразделения(СтрокаПодразделения, Подразделение, ДанныеПодразделения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеПодразделения(ДанныеПодразделения, ПодчиненныеПодразделения)
	
	СтрокиПодразделений = ДанныеПодразделения.ПолучитьЭлементы();
	Для Каждого СтрокаПодразделения Из СтрокиПодразделений Цикл
		ПодчиненныеПодразделения.Вставить(СтрокаПодразделения.Подразделение, Истина);
	    ЗаполнитьПодчиненныеПодразделения(СтрокаПодразделения, ПодчиненныеПодразделения)
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступныеДляВыбораПользователи()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	НЕ Пользователи.ПометкаУдаления
	               |	И НЕ Пользователи.Недействителен
	               |	И Пользователи.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
				   
	ДоступныеПользователи = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДоступныеПользователи.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ДоступныеПользователи;
	
КонецФункции

&НаСервере
Процедура УстановитьФизическоеЛицоПользователя(Пользователь)
	
	СтрокаСотрудника = Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	ПользовательОбъект = Пользователь.ПолучитьОбъект();
	ПользовательОбъект.ФизическоеЛицо = СтрокаСотрудника.ФизическоеЛицо;
	ПользовательОбъект.Записать();
	
	ПрочитанныеСвойства = Пользователи.СвойстваПользователяИБ(ПользовательОбъект.ИдентификаторПользователяИБ);
	
	СписокПользователей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователь);
	ГруппыДоступаПользователей = СамообслуживаниеСотрудников.ГруппыДоступаПользователей(СписокПользователей);
	
	СтрокиФизическогоЛица = Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", СтрокаСотрудника.ФизическоеЛицо));
	
	Для Каждого СтрокаФизическогоЛица Из СтрокиФизическогоЛица Цикл
		
		СтрокаФизическогоЛица.Пользователь = Пользователь;
		СтрокаФизическогоЛица.ВходРазрешен = Не ПользовательОбъект.Недействителен;
		СтрокаФизическогоЛица.ИдентификаторПользователяИБ = ПользовательОбъект.ИдентификаторПользователяИБ;
		
		Если ПрочитанныеСвойства <> Неопределено Тогда
			СтрокаФизическогоЛица.ПользовательОС = ПрочитанныеСвойства.ПользовательОС;
		КонецЕсли;
		
		МассивГруппДоступа = ГруппыДоступаПользователей[Пользователь];
		Если МассивГруппДоступа = Неопределено Тогда 
			МассивГруппДоступа = Новый Массив;
		КонецЕсли;
		СтрокаФизическогоЛица.ГруппыДоступа = Новый ФиксированныйМассив(МассивГруппДоступа);
		
		УстановитьКартинкуСтрокиСотрудника(СтрокаФизическогоЛица);
		
	КонецЦикла;
	
	ОбновитьИнформациюОСотруднике();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОСотруднике()
	
	СтрокаСотрудника = Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	ПользовательСоздан = ЗначениеЗаполнено(СтрокаСотрудника.Пользователь);
	
	ДанныеСотрудникаПодразделение = СтрокаСотрудника.Подразделение;
	ДанныеСотрудникаПользователь = СтрокаСотрудника.Пользователь;
	ДанныеСотрудникаВходРазрешен = ?(СтрокаСотрудника.ВходРазрешен, НСтр("ru = 'Вход в программу разрешен'"), НСтр("ru = 'Вход в программу запрещен'"));
	ДанныеСотрудникаУволен = ?(СтрокаСотрудника.Уволен, НСтр("ru = 'Работник уволен'"), Неопределено);
	Элементы.СтраницыПользователь.ТекущаяСтраница = ?(ПользовательСоздан, Элементы.СтраницаПользователь, Элементы.СтраницаПользовательНеСоздан);
	
	МассивГруппДоступа = Новый Массив;
	
	Если ПользовательСоздан И Не Пользователи.ЭтоПолноправныйПользователь(СтрокаСотрудника.Пользователь) Тогда
		Для Каждого ГруппаДоступа Из ГруппыДоступа Цикл 
			Если СтрокаСотрудника.ГруппыДоступа.Найти(ГруппаДоступа.Значение) = Неопределено Тогда 
				МассивГруппДоступа.Добавить(ГруппаДоступа.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПользовательСоздан И МассивГруппДоступа.Количество() > 0 Тогда 
		ТекстНадписи = "";
		Для Каждого ГруппаДоступа Из МассивГруппДоступа Цикл 
			ТекстНадписи = ТекстНадписи + ?(ТекстНадписи = "", "", Символы.ПС) + ГруппаДоступа;
		КонецЦикла;
		Элементы.НадписьГруппыДоступа.Заголовок = ТекстНадписи;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаДобавитьПользователяВГруппыДоступа", "Видимость", ПользовательСоздан И МассивГруппДоступа.Количество() > 0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуСтрокиСотрудника(СтрокаСотрудника)
	
	СтрокаСотрудника.Картинка = Неопределено;
	
	Если ЗначениеЗаполнено(СтрокаСотрудника.Пользователь) Тогда
		ПользовательВходитВоВсеГруппы = Истина;
		Для Каждого ГруппаДоступа Из ГруппыДоступа Цикл 
			Если СтрокаСотрудника.ГруппыДоступа.Найти(ГруппаДоступа.Значение) = Неопределено Тогда 
				ПользовательВходитВоВсеГруппы = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ПользовательВходитВоВсеГруппы И Пользователи.ЭтоПолноправныйПользователь(СтрокаСотрудника.Пользователь) Тогда 
			ПользовательВходитВоВсеГруппы = Истина;
		КонецЕсли;
		СтрокаСотрудника.Картинка = ?(ПользовательВходитВоВсеГруппы, БиблиотекаКартинок.СостояниеПользователя02, БиблиотекаКартинок.Предупреждение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаИзмененияНастроекПользователейНаСервере(НастройкиПользователей)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиПользователей);
	ГруппыДоступа.ЗагрузитьЗначения(НастройкиПользователей.ВыбранныеГруппыДоступа);
	УстановитьВидимостьЭлементов(ЭтотОбъект);
	ОбновитьИнформациюОСотруднике();
	
	Для Каждого СтрокаСотрудника Из Сотрудники Цикл 
		УстановитьКартинкуСтрокиСотрудника(СтрокаСотрудника);
	КонецЦикла;
	
	СохранитьНастройкиНаСервере("НастройкиПользователей", НастройкиПользователей);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПользователяВГруппыДоступаНаСервере()
	
	СтрокаСотрудника = Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	МассивГруппДоступа = Новый Массив(СтрокаСотрудника.ГруппыДоступа);
		
	Для Каждого ГруппаДоступа Из ГруппыДоступа Цикл 
		Если СтрокаСотрудника.ГруппыДоступа.Найти(ГруппаДоступа.Значение) = Неопределено Тогда 
			ГруппаДоступаОбъект = ГруппаДоступа.Значение.ПолучитьОбъект();
			ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = СтрокаСотрудника.Пользователь;
			ГруппаДоступаОбъект.Записать();
			МассивГруппДоступа.Добавить(ГруппаДоступа.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СтрокиФизическогоЛица = Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", СтрокаСотрудника.ФизическоеЛицо));
	Для Каждого СтрокаФизическогоЛица Из СтрокиФизическогоЛица Цикл
		СтрокаФизическогоЛица.ГруппыДоступа = Новый ФиксированныйМассив(МассивГруппДоступа);
		УстановитьКартинкуСтрокиСотрудника(СтрокаФизическогоЛица);
	КонецЦикла;
	
	ОбновитьИнформациюОСотруднике();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеСвязанныхПользователейИФизическихЛиц()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИСТИНА КАК ЗначениеИстина
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |		ПО Пользователи.ФизическоеЛицо = ФизическиеЛица.Ссылка";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ПодбиратьПользователейПриОткрытии = РезультатЗапроса.Пустой();
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьФормуПодбораПользователей()
	
	ФизическиеЛицаПользователей = ФизическиеЛицаПользователей();
	
	Если ФизическиеЛицаПользователей.Количество() = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ФизическиеЛицаПользователей", ФизическиеЛицаПользователей);
	ОткрытьФорму("Обработка.СозданиеПользователейФизическихЛиц.Форма.ПодборПользователей", ПараметрыФормы, ЭтотОбъект);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ФизическиеЛицаПользователей()
	
	ФизическиеЛицаПользователей = Новый Соответствие;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ТекущаяДатаСеанса();
	ПараметрыПолученияСотрудников.КадровыеДанные = "ФИОПолные,Фамилия,Имя,Отчество";
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
	ИменаПользователей = Новый Массив;
	ФизическиеЛица = Новый Соответствие;
	
	Для Каждого СтрокаСотрудника Из СотрудникиОрганизации Цикл 
		
		ФИОСокращенные = СтрокаСотрудника.Фамилия + Лев(СтрокаСотрудника.Имя, 1) + Лев(СтрокаСотрудника.Отчество, 1);
		
		ИменаПользователей.Добавить(СтрокаСотрудника.ФИОПолные);
		ИменаПользователей.Добавить(ФИОСокращенные);
		
		ФизическиеЛица.Вставить(СтрокаСотрудника.ФИОПолные, СтрокаСотрудника.ФизическоеЛицо);
		ФизическиеЛица.Вставить(ФИОСокращенные, СтрокаСотрудника.ФизическоеЛицо);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИменаПользователей", ИменаПользователей);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Пользователи.Наименование,
	               |	Пользователи.Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |		ПО Пользователи.ФизическоеЛицо = ФизическиеЛица.Ссылка
	               |ГДЕ
	               |	Пользователи.Наименование В(&ИменаПользователей)
	               |	И ФизическиеЛица.Ссылка ЕСТЬ NULL ";
				  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ФизическиеЛицаПользователей.Вставить(Выборка.Ссылка, ФизическиеЛица[Выборка.Наименование]);
	КонецЦикла;
	
	Возврат ФизическиеЛицаПользователей;
	
КонецФункции

#КонецОбласти
