
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФизическоеЛицо = СамообслуживаниеСотрудников.ФизическоеЛицоПользователя();
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда 
		Элементы.СамообслуживаниеСтраницы.ТекущаяСтраница = Элементы.СамообслуживаниеНеДоступноСтраница;
		Возврат;
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "Наименование");
	
	УстановитьПериодыОтчетовПоУмолчанию();
	
	ПроинициализироватьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МесяцГрафикаРаботыСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "МесяцГрафикаРаботы", "МесяцГрафикаРаботыСтрокой");
	МесяцГрафикаРаботыПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцГрафикаРаботыСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцГрафикаРаботыСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "МесяцГрафикаРаботы", "МесяцГрафикаРаботыСтрокой", Ложь, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцГрафикаРаботыСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт

	МесяцГрафикаРаботыПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцГрафикаРаботыСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "МесяцГрафикаРаботы", "МесяцГрафикаРаботыСтрокой", Направление);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцГрафикаРаботыПриИзменении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцГрафикаРаботыПриИзменении()
	
	МесяцГрафикаРаботыПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцГрафикаРаботыСтрокойАвтоПодбор(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцГрафикаРаботыСтрокойОкончаниеВводаТекста(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцРасчетногоЛисткаСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "МесяцРасчетногоЛистка", "МесяцРасчетногоЛисткаСтрокой");
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцРасчетногоЛисткаПриИзменении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцРасчетногоЛисткаСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцРасчетногоЛисткаСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "МесяцРасчетногоЛистка", "МесяцРасчетногоЛисткаСтрокой", Ложь, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцРасчетногоЛисткаСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт

	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцРасчетногоЛисткаПриИзменении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцРасчетногоЛисткаСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "МесяцРасчетногоЛистка", "МесяцРасчетногоЛисткаСтрокой", Направление);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцРасчетногоЛисткаПриИзменении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцРасчетногоЛисткаПриИзменении()
	
	МесяцРасчетногоЛисткаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцРасчетногоЛисткаСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцРасчетногоЛисткаСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОстаткаОтпускаПриИзменении(Элемент)
	
	СформироватьСправкуПоОтпускамСотрудника();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтраницы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГрафикРаботыСтраница Тогда 
		СформироватьФормуГрафикаРаботыСотрудника();
	ИначеЕсли ТекущаяСтраница = Элементы.РасчетныйЛистокСтраница Тогда 
		СформироватьФормуРасчетногоЛистка();
	ИначеЕсли ТекущаяСтраница = Элементы.ОстатокОтпускаСтраница Тогда 
		СформироватьСправкуПоОтпускамСотрудника();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеЛьготы

&НаКлиенте
Процедура ДоступныеЛьготыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не ПревышенРазмерЛимита() Тогда 
		ВыбратьЛьготуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыбранныеЛьготы

&НаКлиенте
Процедура ВыбранныеЛьготыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОтменитьВыборЛьготыНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПечатьГрафикРаботы(Команда)
	
	ПечатьТабличногоДокумента(ТабличныйДокументГрафикРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРасчетныйЛисток(Команда)
	
	ПечатьТабличногоДокумента(ТабличныйДокументРасчетныйЛисток);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОстатокОтпуска(Команда)
	
	ПечатьТабличногоДокумента(ТабличныйДокументОстатокОтпуска);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНеправильныхДанных(Команда)
	
	ЗначенияЗаполнения = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.СообщениеОНеправильныхДанныхСотрудника.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЛьготу(Команда)
	
	Если Не ПревышенРазмерЛимита() Тогда 
		ВыбратьЛьготуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыборЛьготы(Команда)
	
	ОтменитьВыборЛьготыНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроинициализироватьФорму()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", ФизическоеЛицо);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбразованиеФизическихЛиц.ВидОбразования,
		|	ОбразованиеФизическихЛиц.ВидДополнительногоОбучения,
		|	ОбразованиеФизическихЛиц.УчебноеЗаведение,
		|	ОбразованиеФизическихЛиц.Окончание,
		|	ОбразованиеФизическихЛиц.Специальность,
		|	ОбразованиеФизическихЛиц.Квалификация
		|ИЗ
		|	Справочник.ОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛиц
		|ГДЕ
		|	ОбразованиеФизическихЛиц.Владелец = &Владелец";
	ЗаписиОбОбразовании = Запрос.Выполнить().Выгрузить();

	ФизическоеЛицоОбразованиеТекст = Справочники.ОбразованиеФизическихЛиц.ПредставлениеСведенийОбОбразовании(ЗаписиОбОбразовании);
	Если Не ЗначениеЗаполнено(ФизическоеЛицоОбразованиеТекст) Тогда 
		ФизическоеЛицоОбразованиеТекст = "<" + НСтр("ru = 'не указано'") + ">";
	КонецЕсли;
	
	ДокументУдостоверяющийЛичность = РегистрыСведений.ДокументыФизическихЛиц.ДокументУдостоверяющийЛичностьФизлица(ФизическоеЛицо, ТекущаяДатаСеанса());
	Если Не ЗначениеЗаполнено(ДокументУдостоверяющийЛичность) Тогда 
		ДокументУдостоверяющийЛичность = "<" + НСтр("ru = 'не указано'") + ">";
	КонецЕсли;
	
	СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, СписокФизическихЛиц, "СостояниеВБраке, АдресМестаПроживанияПредставление, ТелефонМобильныйПредставление");
	Если КадровыеДанные.Количество() > 0 Тогда
		СостояниеВБраке = КадровыеДанные[0].СостояниеВБраке;
		АдресМестаПроживания = КадровыеДанные[0].АдресМестаПроживанияПредставление;
		Если Не ЗначениеЗаполнено(АдресМестаПроживания) Тогда 
			АдресМестаПроживания = "<" + НСтр("ru = 'не указано'") + ">";
		КонецЕсли;
		МобильныйТелефон = КадровыеДанные[0].ТелефонМобильныйПредставление;
		Если Не ЗначениеЗаполнено(МобильныйТелефон) Тогда 
			МобильныйТелефон = "<" + НСтр("ru = 'не указано'") + ">";
		КонецЕсли;
	КонецЕсли;
	
	СведенияОСемье = Документы.ЛистокСообщенияДляВоенкомата.СведенияОСоставеСемьи(ФизическоеЛицо);
	СоставСемьи = СведенияОСемье.СоставСемьиПолный;
	Если Не ЗначениеЗаполнено(СоставСемьи) Тогда 
		СоставСемьи = "<" + НСтр("ru = 'не указано'") + ">";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда 
		АдресФотографии = КадровыйУчетРасширенный.АдресФотографииФизическогоЛица(ФизическоеЛицо);		
	КонецЕсли;
	
	ПрочитатьДанныеЛьгот();
	
	УстановитьОтображениеНадписиДатаИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТабличногоДокумента(ТабличныйДокумент)
	
	ИмяОбласти = "Документ_1";
	
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(ФизическоеЛицо, ИмяОбласти);
	
	НомерСтрокиОкончание = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(1, , НомерСтрокиОкончание, ).Имя = ИмяОбласти;
	
	ТабличныеДокументы = Новый СписокЗначений;
	ТабличныеДокументы.Добавить(ТабличныйДокумент);
	
	УправлениеПечатьюКлиент.РаспечататьТабличныеДокументы(ТабличныеДокументы, ОбъектыПечати, Ложь, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцГрафикаРаботыПриИзменении()
	
	СформироватьФормуГрафикаРаботыСотрудника();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцРасчетногоЛисткаПриИзменении()
	
	СформироватьФормуРасчетногоЛистка();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодыОтчетовПоУмолчанию()
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	МесяцГрафикаРаботы = ДобавитьМесяц(НачалоМесяца(ДатаСеанса), 5);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "МесяцГрафикаРаботы", "МесяцГрафикаРаботыСтрокой");
	
	МесяцРасчетногоЛистка = ДобавитьМесяц(НачалоМесяца(ДатаСеанса), -1);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "МесяцРасчетногоЛистка", "МесяцРасчетногоЛисткаСтрокой");
	
	ДатаОстаткаОтпуска = ДатаСеанса;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьФормуГрафикаРаботыСотрудника()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если МесяцГрафикаРаботы < НачалоМесяца(ТекущаяДатаСеанса())  Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранная дата меньше текущей.'"), , "МесяцГрафикаРаботыСтрокой");
		Возврат;
	КонецЕсли;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.СамообслуживаниеСотрудников.ПФ_MXL_ГрафикРаботыСотрудника");
	
	ТабличныйДокументГрафикРаботы.Очистить();
	
	ТабличныйДокументГрафикРаботы.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокументГрафикРаботы.Автомасштаб = Истина;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок|Месяц");
	ОбластьДниМесяца = Макет.ПолучитьОбласть("ДниМесяца|Месяц");
	ОбластьДниНедели = Макет.ПолучитьОбласть("ДниНедели|Месяц");
	
	ДанныеДляПечати = ДанныеДляПечатиГрафикаРаботыСотрудникаЗаМесяц();
	
	Выборка = ДанныеДляПечати.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		Если ТабличныйДокументГрафикРаботы.ВысотаТаблицы > 0 Тогда 
			ТабличныйДокументГрафикРаботы.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьШапка.Параметры.Сотрудник = Выборка.ФИОПолные;
		ОбластьШапка.Параметры.Период = Формат(ТекущаяДатаСеанса(), "ДФ=""ММММ гггг""") + " - " + МесяцГрафикаРаботыСтрокой;
		
		ТабличныйДокументГрафикРаботы.Вывести(ОбластьШапка);
		
		КоличествоМесяцев = 0;
			
		Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
			
			ДанныеМесяца = Новый ТабличныйДокумент;
			ДанныеМесяца.ОриентацияСтраницы = ТабличныйДокументГрафикРаботы.ОриентацияСтраницы;
			ДанныеМесяца.АвтоМасштаб = ТабличныйДокументГрафикРаботы.АвтоМасштаб;
			
			ОбластьЗаголовок.Параметры.Месяц = Формат(Выборка.Месяц, "ДФ=""ММММ гггг""");
			ДанныеМесяца.Вывести(ОбластьЗаголовок);
			ДанныеМесяца.Вывести(ОбластьДниНедели);
			
			КоличествоНедель = 0;
			
			Пока Выборка.Следующий() Цикл
				
				ПоследнийДеньМесяца = КонецДня(Выборка.Дата) = КонецМесяца(Выборка.Дата);
				НомерДняНедели = ДеньНедели(Выборка.Дата);
				
				ОбластьДниМесяца.Параметры["Дата" + НомерДняНедели] = День(Выборка.Дата);
				
				Если Выборка.Часов <> 0 Тогда 
					ОбластьДниМесяца.Область(1, НомерДняНедели + 1, 1, НомерДняНедели + 1).Узор = ТипУзораТабличногоДокумента.Узор14;
				КонецЕсли;
				
				Если НомерДняНедели = 7 Или ПоследнийДеньМесяца Тогда
					ДанныеМесяца.Вывести(ОбластьДниМесяца);
					ОчиститьОбластьЯчеек(ОбластьДниМесяца);
					КоличествоНедель = КоличествоНедель + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			Пока КоличествоНедель < 6 Цикл  
				ДанныеМесяца.Вывести(ОбластьДниМесяца);
				КоличествоНедель = КоличествоНедель + 1;
			КонецЦикла;
			
			ОбластьДанныеМесяца = ДанныеМесяца.ПолучитьОбласть(1, 1, 8, 8);
			Если КоличествоМесяцев % 3 = 0 Тогда 
				ТабличныйДокументГрафикРаботы.Вывести(ОбластьПустаяСтрока);
				ТабличныйДокументГрафикРаботы.Вывести(ОбластьДанныеМесяца);
			Иначе 
				ТабличныйДокументГрафикРаботы.Присоединить(ОбластьДанныеМесяца);
			КонецЕсли;
			
			КоличествоМесяцев = КоличествоМесяцев + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДляПечатиГрафикаРаботыСотрудникаЗаМесяц()

	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДатаСеанса));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(МесяцГрафикаРаботы));
	Запрос.УстановитьПараметр("ДатаОтчета", ДатаСеанса);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Выходной", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни"));
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.УстановитьПараметр("Сверхурочные", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	Запрос.УстановитьПараметр("Явка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	Запрос.УстановитьПараметр("ВечерниеЧасы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы"));
	Запрос.УстановитьПараметр("НочныеЧасы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы"));
	Запрос.УстановитьПараметр("ПолучатьПлановоеВремяЗаПолныйМесяц", Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&ДатаНачала КАК ДатаНачала,
	               |	&ДатаОкончания КАК ДатаОкончания,
	               |	&ДатаОтчета КАК Период,
	               |	Сотрудники.Ссылка КАК Сотрудник
	               |ПОМЕСТИТЬ ВТСотрудники
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
				   
	Запрос.Выполнить();		
					   			   
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "ФИОПолные");
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(
		Запрос.МенеджерВременныхТаблиц, 
		НачалоМесяца(ДатаСеанса), 
		КонецМесяца(МесяцГрафикаРаботы),
		"МЕСЯЦ",
		"МЕСЯЦ",
		"ВТМесяцы");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ДатаНачала > Месяцы.Месяц
	|			ТОГДА &ДатаНачала
	|		ИНАЧЕ Месяцы.Месяц
	|	КОНЕЦ КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(Месяцы.Месяц, МЕСЯЦ) КАК ДатаОкончания,
	|	&ДатаОтчета КАК ДатаАктуальности,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Месяцы.Месяц
	|ПОМЕСТИТЬ ВТСотрудникиМесяцы
	|ИЗ
	|	ВТСотрудники КАК Сотрудники,
	|	ВТМесяцы КАК Месяцы";
	
	Запрос.Выполнить();
	
	ПараметрыПолученияДанныхУчетаВремени = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	ПараметрыПолученияДанныхУчетаВремени.ИмяВТСотрудники = "ВТСотрудникиМесяцы";
	
	УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияДанныхУчетаВремени);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановоеВремя.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	ПлановоеВремя.ДатаАктуальности,
	|	ПлановоеВремя.Дата КАК Дата,
	|	НАЧАЛОПЕРИОДА(ПлановоеВремя.Дата, МЕСЯЦ) КАК Месяц,
	|	СУММА(ПлановоеВремя.ЧасыПлан) КАК Часов
	|ИЗ
	|	ВТПлановоеВремя КАК ПлановоеВремя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ПлановоеВремя.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И (НЕ ПлановоеВремя.Дата ЕСТЬ NULL )
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановоеВремя.Сотрудник,
	|	КадровыеДанныеСотрудников.ФИОПолные,
	|	ПлановоеВремя.ДатаАктуальности,
	|	ПлановоеВремя.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Дата";
				   
	
	ДанныеДляПечати = Запрос.Выполнить();
	
	Возврат ДанныеДляПечати;
	
КонецФункции

&НаСервере
Процедура ОчиститьОбластьЯчеек(ОбластьЯчеек)
	
	КоличествоПараметров = ОбластьЯчеек.Параметры.Количество();
	
	Для ИндексПараметра = 0 По КоличествоПараметров - 1 Цикл  
		ОбластьЯчеек.Параметры.Установить(ИндексПараметра, Неопределено);
	КонецЦикла;
	
	ОбластьЯчеек.Область(1, 1, ОбластьЯчеек.ВысотаТаблицы, ОбластьЯчеек.ШиринаТаблицы).Узор = ТипУзораТабличногоДокумента.БезУзора;
	
КонецПроцедуры                       

&НаСервере
Процедура СформироватьФормуРасчетногоЛистка()
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачалоПериода = НачалоМесяца(МесяцРасчетногоЛистка);
	ОкончаниеПериода = КонецМесяца(МесяцРасчетногоЛистка);
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ОкончаниеПериода;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация";
	
	ДанныеФизическихЛиц = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
	Если ДанныеФизическихЛиц.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	КадровыеДанные = ДанныеФизическихЛиц[0];
	ДокументРезультат = Отчеты.АнализНачисленийИУдержаний.РасчетныйЛисток(ФизическиеЛица, КадровыеДанные.Организация, ОкончаниеПериода);
	
	ТабличныйДокументРасчетныйЛисток.Очистить();
	ТабличныйДокументРасчетныйЛисток.ТекущаяОбласть = ТабличныйДокументРасчетныйЛисток.Область(1, 1, 1, 1);
	ТабличныйДокументРасчетныйЛисток.Вывести(ДокументРезультат);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСправкуПоОтпускамСотрудника()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокументОстатокОтпуска.Очистить();
	
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ФизическиеЛица, Ложь, Неопределено, ТекущаяДатаСеанса());
	
	Если ОсновныеСотрудники.Количество() > 0 Тогда 
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновныеСотрудники[0].Сотрудник);
		ТабДокумент = ОстаткиОтпусков.СправкаПоОтпускамСотрудника(СписокСотрудников, ДатаОстаткаОтпуска);
		ТабличныйДокументОстатокОтпуска.Вывести(ТабДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеЛьгот()
	
	ИспользоватьЛьготы = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеЛьготыСотрудников");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЛьготыСтраница", "Видимость", ИспользоватьЛьготы);
	
	ТекущиеЛьготы = Новый ФиксированныйМассив(Новый Массив);
	
	Если Не ИспользоватьЛьготы Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПолученияДанных = ТекущаяДатаСеанса();
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода = ДатаПолученияДанных;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ДатаПолученияДанных;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация, Подразделение, Должность, ДолжностьПоШтатномуРасписанию";
	
	ДанныеФизическихЛиц = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
	ТаблицаОписанийПозиций = ЛьготыСотрудников.ТаблицаОписанийПозиций();
	
	Для Каждого ДанныеФизическогоЛица Из ДанныеФизическихЛиц Цикл 
	
		НоваяСтрока = ТаблицаОписанийПозиций.Добавить();
		НоваяСтрока.Организация = ДанныеФизическогоЛица.Организация;
		НоваяСтрока.Подразделение = ДанныеФизическогоЛица.Подразделение;
		НоваяСтрока.Должность = ДанныеФизическогоЛица.Должность;
		НоваяСтрока.Позиция = ДанныеФизическогоЛица.ДолжностьПоШтатномуРасписанию;
		
	КонецЦикла;
	
	Запрос = ЛьготыСотрудников.ЗапросДанныеЛимитовЛьготПозиций(ТаблицаОписанийПозиций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеЛимитов = Новый Соответствие;
	
	ИспользоватьЛимит = Истина;
	РазмерЛимита = 0;
	ДоступныВсеЛьготы = Ложь;
	
	Пока Выборка.Следующий() Цикл
		ДанныеЛимита = ЛьготыСотрудников.СтруктураДанныхЛимита();
		ЗаполнитьЗначенияСвойств(ДанныеЛимита, Выборка);
		ДанныеЛимитов.Вставить(Выборка.Позиция, ДанныеЛимита); 
	КонецЦикла;
	
	Для Каждого ДанныеФизическогоЛица Из ДанныеФизическихЛиц Цикл
		
		ДанныеЛимита = ДанныеЛимитов[ДанныеФизическогоЛица.ДолжностьПоШтатномуРасписанию];
		Если ДанныеЛимита = Неопределено Или Не ДанныеЛимита.ИспользоватьЛимит Тогда 
			ИспользоватьЛимит = Ложь;
			РазмерЛимита = 0;
		КонецЕсли;
		
		Если ИспользоватьЛимит Тогда 
			РазмерЛимита = Макс(РазмерЛимита, ДанныеЛимита.КоличествоБаллов);
		КонецЕсли;
		
		Если ДанныеЛимита <> Неопределено И ДанныеЛимита.ДоступныВсеЛьготы Тогда
			ДоступныВсеЛьготы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЛимитСотрудника", "Видимость", ИспользоватьЛимит);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РазмерПакетаЛьготИндикатор", "МаксимальноеЗначение", РазмерЛимита);
	
	ДоступныеЛьготы.Очистить();
	ВыбранныеЛьготы.Очистить();
	
	МассивВыбранныхЛьгот = ЛьготыСотрудников.ЛьготыФизическогоЛица(ДобавитьМесяц(НачалоМесяца(ДатаПолученияДанных), 1), ФизическоеЛицо);
	Если МассивВыбранныхЛьгот = Неопределено Тогда 
		МассивВыбранныхЛьгот = Новый Массив;
	КонецЕсли;
	
	МассивТекущихЛьгот = ЛьготыСотрудников.ЛьготыФизическогоЛица(НачалоМесяца(ДатаПолученияДанных), ФизическоеЛицо);
	Если МассивТекущихЛьгот = Неопределено Тогда 
		МассивТекущихЛьгот = Новый Массив;
	КонецЕсли;
	ТекущиеЛьготы = Новый ФиксированныйМассив(МассивТекущихЛьгот);
	
	Если ДоступныВсеЛьготы Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Начисления.Ссылка,
		               |	Начисления.Наименование,
		               |	Начисления.КоличествоБаллов
		               |ИЗ
		               |	ПланВидовРасчета.Начисления КАК Начисления
		               |ГДЕ
		               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыбираемаяСотрудникомЛьгота)
		               |	И НЕ Начисления.ПометкаУдаления
		               |	И НЕ Начисления.ВАрхиве";
					   
		МассивДоступныхЛьгот = Новый Массив;
		РеквизитыЛьгот = Новый Соответствие;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			МассивДоступныхЛьгот.Добавить(Выборка.Ссылка);
			РеквизитыЛьготы = Новый Структура("Наименование, КоличествоБаллов", Выборка.Наименование, Выборка.КоличествоБаллов);
			РеквизитыЛьгот.Вставить(Выборка.Ссылка, РеквизитыЛьготы);
		КонецЦикла;
		
	Иначе 
		
		Запрос = ЛьготыСотрудников.ЗапросДанныеЛьгот(ТаблицаОписанийПозиций);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		МассивДоступныхЛьгот = Новый Массив;
		УникальныеЛьготы = Новый Соответствие;
		
		Выборка = РезультатыЗапроса[6].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если УникальныеЛьготы[Выборка.Льгота] <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			МассивДоступныхЛьгот.Добавить(Выборка.Льгота);
			УникальныеЛьготы.Вставить(Выборка.Льгота, Истина);
		КонецЦикла;
	
		РеквизитыЛьгот = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДоступныхЛьгот, "Наименование, КоличествоБаллов");
		
	КонецЕсли;
	
	Для Каждого Льгота Из МассивВыбранныхЛьгот Цикл 
		
		РеквизитыЛьготы = РеквизитыЛьгот[Льгота];
		Если РеквизитыЛьготы = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ВыбранныеЛьготы.Добавить();
		НоваяСтрока.Льгота = Льгота;
		НоваяСтрока.Наименование = РеквизитыЛьготы.Наименование;
		НоваяСтрока.Стоимость = РеквизитыЛьготы.КоличествоБаллов;
		
	КонецЦикла;
	
	Для Каждого Льгота Из МассивДоступныхЛьгот Цикл
		
		Если МассивВыбранныхЛьгот.Найти(Льгота) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		РеквизитыЛьготы = РеквизитыЛьгот[Льгота];
		Если РеквизитыЛьготы = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДоступныеЛьготы.Добавить();
		НоваяСтрока.Льгота = Льгота;
		НоваяСтрока.Наименование = РеквизитыЛьготы.Наименование;
		НоваяСтрока.Стоимость = РеквизитыЛьготы.КоличествоБаллов;
		
	КонецЦикла;
	
	ДоступныеЛьготы.Сортировать("Наименование");
	ВыбранныеЛьготы.Сортировать("Наименование");
	
	РазмерПакетаЛьгот = ВыбранныеЛьготы.Итог("Стоимость");
	
	УстановитьТекстПодсказкиИндикатораРазмераПакетаЛьгот();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеНадписиДатаИзменения()
	
	ПакетЛьготИзменен = Ложь;
	
	Если ТекущиеЛьготы.Количество() <> ВыбранныеЛьготы.Количество() Тогда 
		ПакетЛьготИзменен = Истина;
	КонецЕсли;
	
	Если Не ПакетЛьготИзменен Тогда 
		Для Каждого ДанныеЛьготы Из ВыбранныеЛьготы Цикл
			Если ТекущиеЛьготы.Найти(ДанныеЛьготы.Льгота) = Неопределено Тогда 
				ПакетЛьготИзменен = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьДатаИзменения", "Видимость", ПакетЛьготИзменен);
	
	ДатаИзменения = Формат(ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()), 1), "ДЛФ=ДД");
	ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Изменения вступят в силу с %1'"), ДатаИзменения);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьДатаИзменения", "Заголовок", ТекстНадписи);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПодсказкиИндикатораРазмераПакетаЛьгот()
	
	ТекстПодсказки = "" + РазмерПакетаЛьгот + "/" + РазмерЛимита;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РазмерПакетаЛьготИндикатор", "Подсказка", ТекстПодсказки);
	
	Если РазмерПакетаЛьгот = 0 Тогда 
		
		ШаблонПодсказки = НСтр("ru = 'Лимит %1, льготы не выбраны'");
		
		ПредставлениеРазмераЛимита = ПредставлениеКоличестваБаллов(РазмерЛимита);
		
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодсказки, ПредставлениеРазмераЛимита);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЛимитСотрудника", "Подсказка", ТекстНадписи);
		
	Иначе
		
		ШаблонПодсказки = НСтр("ru = 'Лимит %1, выбрано льгот на %2, осталось %3'");
		
		ПредставлениеРазмераЛимита = ПредставлениеКоличестваБаллов(РазмерЛимита);
		ПредставлениеРазмераПакетаЛьгот = ПредставлениеКоличестваБаллов(РазмерПакетаЛьгот);
		ПредставлениеОстаткаЛимита = ПредставлениеКоличестваБаллов(РазмерЛимита - РазмерПакетаЛьгот);
		
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодсказки, ПредставлениеРазмераЛимита, ПредставлениеРазмераПакетаЛьгот, ПредставлениеОстаткаЛимита);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЛимитСотрудника", "Подсказка", ТекстНадписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеКоличестваБаллов(КоличествоБаллов)
	
	ПоследняяЦифра = Прав(КоличествоБаллов, 1);
	Если СтрНайти("0,5,6,7,8,9", ПоследняяЦифра) <> 0 Тогда 
		КоличествоБалловШаблон = НСтр("ru = '%1 баллов'");
	Иначе 
		ПоследниеДвеЦифры = Прав(КоличествоБаллов, 2);
		ПоследниеДвеЦифры = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПоследниеДвеЦифры, 2, "0");
		Если ПоследняяЦифра = "1" Тогда 
			КоличествоБалловШаблон = ?(ПоследниеДвеЦифры = "11", НСтр("ru = '%1 баллов'"), НСтр("ru = '%1 балл'"));
		Иначе
			КоличествоБалловШаблон = ?(Найти("12,13,14", ПоследниеДвеЦифры) = 0, НСтр("ru = '%1 балла'"), НСтр("ru = '%1 баллов'"));
		КонецЕсли;
	КонецЕсли;
	КоличествоБалловТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КоличествоБалловШаблон, КоличествоБаллов);
	
	Возврат КоличествоБалловТекст;
	
КонецФункции

&НаСервере
Процедура ВыбратьЛьготуНаСервере()
	
	ИдентификаторТекущейСтроки = Элементы.ДоступныеЛьготы.ТекущаяСтрока;
	Если ИдентификаторТекущейСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеЛьготы = ДоступныеЛьготы.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	НоваяСтрока = ВыбранныеЛьготы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЛьготы);
	
	ВыбранныеЛьготы.Сортировать("Наименование");
	
	ДоступныеЛьготы.Удалить(ДанныеЛьготы);
	
	РазмерПакетаЛьгот = ВыбранныеЛьготы.Итог("Стоимость");
	
	УстановитьТекстПодсказкиИндикатораРазмераПакетаЛьгот();
	
	ЗаписатьВыбранныеЛьготы();
	
	УстановитьОтображениеНадписиДатаИзменения();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыборЛьготыНаСервере()
	
	ИдентификаторТекущейСтроки = Элементы.ВыбранныеЛьготы.ТекущаяСтрока;
	Если ИдентификаторТекущейСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеЛьготы = ВыбранныеЛьготы.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	НоваяСтрока = ДоступныеЛьготы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЛьготы);
	
	ДоступныеЛьготы.Сортировать("Наименование");
	
	ВыбранныеЛьготы.Удалить(ДанныеЛьготы);
	
	РазмерПакетаЛьгот = ВыбранныеЛьготы.Итог("Стоимость");
	
	УстановитьТекстПодсказкиИндикатораРазмераПакетаЛьгот();
	
	ЗаписатьВыбранныеЛьготы();
	
	УстановитьОтображениеНадписиДатаИзменения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВыбранныеЛьготы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаИзменения = ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()), 1);
	
	НаборЗаписей = РегистрыСведений.ИндивидуальныеЛьготыФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Дата.Установить(ДатаИзменения);
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	
	Для Каждого ДанныеВыбраннойЛьготы Из ВыбранныеЛьготы Цикл 
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Дата = ДатаИзменения;
		НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
	    НоваяЗапись.Льгота = ДанныеВыбраннойЛьготы.Льгота;
	КонецЦикла;
	
	Если НаборЗаписей.Количество() = 0 Тогда 
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Дата = ДатаИзменения;
		НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ПревышенРазмерЛимита()
	
	Если Не ИспользоватьЛимит Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДоступныеЛьготы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ПревышенЛимит = (ТекущиеДанные.Стоимость + РазмерПакетаЛьгот) > РазмерЛимита;
	
	Если ПревышенЛимит Тогда 
		ТекстСообщения = НСтр("ru = 'Превышен доступный лимит пакета льгот.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "РазмерПакетаЛьгот");
	КонецЕсли;
	
	Возврат ПревышенЛимит;
	
КонецФункции

#КонецОбласти
