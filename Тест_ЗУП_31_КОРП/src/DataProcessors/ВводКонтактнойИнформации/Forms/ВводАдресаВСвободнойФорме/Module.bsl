// Форма параметризуется:
//
//      Заголовок     - Строка  - заголовок формы.
//      ЗначенияПолей - Строка  - сериализованное значение контактной информации или пустая строка для 
//                                ввода нового.
//      Представление - Строка  - представление адреса (используется только при работе со старыми данными).
//      ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - описание того, что мы
//                                редактируем.
//      Комментарий  - Строка   - необязательный комментарий, для подстановки в поле "Комментарий".
//
//      ВозвращатьСписокЗначений - Булево - необязательный флаг того, что возвращаемое значение поля.
//                                 КонтактнаяИнформация будет иметь тип СписокЗначений (совместимость).
//
//  Результат выбора:
//      Структура - поля:
//          * КонтактнаяИнформация   - Строка - XML контактной информации.
//          * Представление          - Строка - Представление.
//          * Комментарий            - Строка - Комментарий.
//          * ВведеноВСвободнойФорме - Булево - флаг ввода.
//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("ОткрытаПоСценарию") Тогда
		ВызватьИсключение НСтр("ru = 'Обработка не предназначена для непосредственного использования.'");
	КонецЕсли;
	
	// Настройки формы
	ЭтоТакси = КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Такси; // Группа команд "все действия" зависит от интерфейса.
	
	Параметры.Свойство("ВозвращатьСписокЗначений", ВозвращатьСписокЗначений);
	// Внутренняя инициализация
	ЦветФонаУправляющегоПоля = ЦветаСтиля.ФонУправляющегоПоля;
	ЦветФонаФормы            = ЦветаСтиля.ЦветФонаФормы;
	АвтоЦвет                 = Новый Цвет;
	
	ОсновнаяСтрана = ОсновнаяСтрана();

	ВидКонтактнойИнформации = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(Параметры.ВидКонтактнойИнформации);
	
	Если ВидКонтактнойИнформации.ХранитьИсториюИзменений Тогда
		Если Параметры.Свойство("ДействуетС") И Параметры.Свойство("ДействуетДо") Тогда
			ОтобразитьИнформациюОДатахДействияАдреса(Параметры.ДействуетС, Параметры.ДействуетДо);
		КонецЕсли;
		Если Параметры.Свойство("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов") Тогда
			Для каждого СтрокаКИ Из Параметры.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				НоваяСтрока = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКИ);
			КонецЦикла;
		Иначе
			Элементы.ИсторияИзменений.Видимость = Ложь;
			Элементы.ПоказатьИсториюВсеДействия.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ИсторияИзменений.Видимость = Ложь;
		Элементы.ПоказатьИсториюВсеДействия.Видимость = Ложь;
	КонецЕсли;
	
	ВидКонтактнойИнформации.Вставить("Ссылка", Параметры.ВидКонтактнойИнформации);
	
	Заголовок = ?(ПустаяСтрока(Параметры.Заголовок),
		Строка(УправлениеКонтактнойИнформациейСлужебный.ТипВидаКонтактнойИнформации(ВидКонтактнойИнформации)),
		Параметры.Заголовок);
	
	СкрыватьНеактуальныеАдреса  = ВидКонтактнойИнформации.СкрыватьНеактуальныеАдреса;
	ТолькоНациональныйАдрес     = ВидКонтактнойИнформации.ТолькоНациональныйАдрес;
	ТипКонтактнойИнформации     = ВидКонтактнойИнформации.Тип;
	
	// Пытаемся заполнить из параметров.
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Параметры.ЗначенияПолей) 
			И ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		РезультатыЧтения = Новый Структура;
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Параметры.ЗначенияПолей, ТипКонтактнойИнформации, РезультатыЧтения);
		Если РезультатыЧтения.Свойство("ТекстОшибки") Тогда
			// Распознали с ошибками, сообщим при открытии.
			ТекстПредупрежденияПриОткрытии = РезультатыЧтения.ТекстОшибки;
			XDTOКонтактная.Представление = Параметры.Представление;
			XDTOКонтактная.Состав.Страна = Строка(ОсновнаяСтрана);
		КонецЕсли;
	Иначе
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Параметры.ЗначенияПолей, Параметры.Представление, );
		Если Параметры.Свойство("Страна") И ЗначениеЗаполнено(Параметры.Страна) Тогда 
			Если ТипЗнч(Параметры.Страна) = ТипЗнч(Справочники.СтраныМира.ПустаяСсылка()) Тогда
				XDTOКонтактная.Состав.Страна = Параметры.Страна.Наименование;
			Иначе
				XDTOКонтактная.Состав.Страна = Строка(Параметры.Страна);
			КонецЕсли;
		Иначе
			XDTOКонтактная.Состав.Страна = ОсновнаяСтрана.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Комментарий <> Неопределено Тогда
		// Ставим новый комментарий, иначе он придет из информации.
		XDTOКонтактная.Комментарий = Параметры.Комментарий;
	КонецЕсли;
	
	ЗначениеРеквизитовПоКонтактнойИнформации(ЭтотОбъект, XDTOКонтактная);
	
	Если ЗначениеЗаполнено(Страна) Тогда
		КодСтраны = Страна.Код;
	Иначе
		Страна    = ОсновнаяСтрана;
		КодСтраны = ОсновнаяСтрана.Код;
	КонецЕсли;
	
	Если ТолькоНациональныйАдрес Тогда
		Элементы.Страна.Доступность = Ложь;
		Элементы.Страна.ЦветФона = АвтоЦвет;
		// Проверяем на корректность
		Если Страна <> ОсновнаяСтрана Тогда
			// Считаем адрес российским
			ПредставлениеАдресаИзменено = Истина;
			ТекстПредупрежденияПриОткрытии = НСтр("ru = 'Адрес введен некорректно: допускается ввод только национальных адресов. Значение поля ""Страна"" было изменено, необходимо проверить остальные поля.'"); 
			ПолеПредупрежденияПриОткрытии = "Страна";
			Модифицированность = Истина;
		КонецЕсли;
		Страна = ОсновнаяСтрана;
	КонецЕсли;
	
	ОпределитьОтображениеЭлементовНаФорме(ЭтоТакси);
	
	Элементы.АдресСтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Комментарий);
	
	УстановитьКлючИспользованияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбработкаИзмененияСтраныКлиент();
	Если ЗначениеЗаполнено(ТекстПредупрежденияПриОткрытии) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупрежденияПриОткрытии,, ПолеПредупрежденияПриОткрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПодтвердитьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтранаПриИзменении(Элемент)
	ОбработкаИзмененияСтраныКлиент();
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
#Если ВебКлиент Тогда
	// Обход особенности платформы.
	Элемент.ОбновитьТекстРедактирования();
#КонецЕсли

	// Выводим всегда представление.
	Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.АдресСтраницаПредставление;
КонецПроцедуры

&НаКлиенте
Процедура СтранаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		// Формирование списка быстрого выбора.
		Если ПустаяСтрока(Текст) Тогда
			ДанныеВыбора = Новый СписокЗначений;
		КонецЕсли;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтранаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
#Если ВебКлиент Тогда
	// Обход особенности платформы.
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора         = Новый СписокЗначений;
	ДанныеВыбора.Добавить(Страна);
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура СтранаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.СтранаМираОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеИностранногоАдресаПриИзменении(Элемент)
	ПредставлениеАдресаИзменено = Истина;
	ПредставлениеАдресаПриИзмененииСервер();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	ПодтвердитьИЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАдрес(Команда)
	
	ОчиститьАдресКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзменений(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Контекст", КонтекстФормыКлиент());
	
	ОписаниеДополнительныхРеквизитов = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	СписокКонтактнойИнформации = ЗаполнитьСписокКонтактнойИнформации(ВидКонтактнойИнформации.Ссылка, ОписаниеДополнительныхРеквизитов, ДополнительныеПараметры.Контекст);
	
	ПараметрыФормы = Новый Структура("СписокКонтактнойИнформации", СписокКонтактнойИнформации);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
	
	ОповещениеОЗакрытие = Новый ОписаниеОповещения("ПослеЗакрытияФормыИстории", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ИсторияКонтактнойИнформации", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытие);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНаЯндексКарты(Команда)
	УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(ПредставлениеАдреса, "Яндекс.Карты");
КонецПроцедуры

&НаКлиенте
Процедура АдресНаGoogleMaps(Команда)
	УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(ПредставлениеАдреса, "GoogleMaps");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	Элементы.АдресСтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Модифицированность Тогда // При немодифицированности работает как "отмена".
		Контекст = КонтекстФормыКлиент();
		Результат = РезультатаВыбораПоОбновлениюФлагов(Контекст, ВозвращатьСписокЗначений);
		
		// Флаги вида были прочитаны заново.
		ВидКонтактнойИнформации = Контекст.ВидКонтактнойИнформации;
		
		Если ВидКонтактнойИнформации.ПроверятьКорректность
			И Результат.ОшибкиЗаполнения.Количество() > 0 Тогда
				СообщитьОбОшибкахЗаполнения(Результат.ОшибкиЗаполнения, Ложь);
					Возврат;
		КонецЕсли;
		
		Результат = Результат.ДанныеВыбора;
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов", КонтактнаяИнформацияОписаниеДополнительныхРеквизитов);
		КонецЕсли;
		
		СброситьМодифицированностьПриВыборе();
#Если ВебКлиент Тогда
		ФлагЗакрытия = ЗакрыватьПриВыборе;
		ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(Результат);
		ЗакрыватьПриВыборе = ФлагЗакрытия;
#Иначе
		ОповеститьОВыборе(Результат);
#КонецЕсли
		СохранитьСостояниеФормы();
		
	ИначеЕсли Комментарий <> КопияКомментария Тогда
		// Изменен только комментарий, пробуем вернуть обновленное.
		Результат = РезультатВыбораТолькоКомментария(Параметры.ЗначенияПолей, Параметры.Представление, Комментарий);
		Результат = Результат.ДанныеВыбора;
		
		СброситьМодифицированностьПриВыборе();
#Если ВебКлиент Тогда
		ФлагЗакрытия = ЗакрыватьПриВыборе;
		ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(Результат);
		ЗакрыватьПриВыборе = ФлагЗакрытия;
#Иначе
		ОповеститьОВыборе(Результат);
#КонецЕсли
		СохранитьСостояниеФормы();
		
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Если (МодальныйРежим Или ЗакрыватьПриВыборе) И Открыта() Тогда
		СброситьМодифицированностьПриВыборе();
		СохранитьСостояниеФормы();
		Закрыть(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыИстории(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации.Ссылка);
	НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	
	ИмяРеквизита = "";
	Для Каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
		Если НЕ СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
			ИмяРеквизита = СтрокаКонтактнойИнформации.ИмяРеквизита;
		КонецЕсли;
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Удалить(СтрокаКонтактнойИнформации);
	КонецЦикла;
	
	ЭтоИсторическаяКонтактнаяИнформация = Ложь;
	ПараметрыОбновления = Новый Структура;
	Для Каждого СтрокаКонтактнойИнформации Из Результат Цикл
		ДанныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаКонтактнойИнформации);
		Если НЕ СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
			ДанныеСтроки.ИмяРеквизита = ИмяРеквизита;
			Контекст = ДополнительныеПараметры.Контекст;
			Если СтрСравнить(Контекст.ПредставлениеАдреса, СтрокаКонтактнойИнформации.Представление) <> 0 Тогда
				ПерезаполнитьФормуВводаАдреса(Контекст, СтрокаКонтактнойИнформации.ЗначенияПолей, СтрокаКонтактнойИнформации.Тип);
				КонтекстФормыКлиент(Контекст);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСостояниеФормы()
	УстановитьКлючИспользованияФормы();
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СброситьМодифицированностьПриВыборе()
	Модифицированность = Ложь;
	КопияКомментария   = Комментарий;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатВыбора(Контекст, ВозвращатьСписокЗначений = Ложь)
	XDTOИнформация = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
	Результат      = Новый Структура("ДанныеВыбора, ОшибкиЗаполнения");
	
	Если ВозвращатьСписокЗначений Тогда
		ДанныеВыбора = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(XDTOИнформация);
		ДанныеВыбора = ДанныеВыбора.ЗначенияПолей;
	ИначеЕсли Контекст.Страна = Контекст.ОсновнаяСтрана И ПустаяСтрока(XDTOИнформация.Представление) Тогда
		ДанныеВыбора = "";
	Иначе
		ДанныеВыбора = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(XDTOИнформация);
	КонецЕсли;
	
	Результат.ДанныеВыбора = Новый Структура;
	Результат.ДанныеВыбора.Вставить("КонтактнаяИнформация", ДанныеВыбора);
	Результат.ДанныеВыбора.Вставить("Представление", XDTOИнформация.Представление);
	Результат.ДанныеВыбора.Вставить("Комментарий", XDTOИнформация.Комментарий);
	Результат.ДанныеВыбора.Вставить("ВведеноВСвободнойФорме",
		УправлениеКонтактнойИнформациейСлужебный.АдресВведенВСвободнойФорме(XDTOИнформация));
	
	Результат.ОшибкиЗаполнения = Новый СписокЗначений;
	
	Если Контекст.ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес 
		И Контекст.ВидКонтактнойИнформации.РедактированиеТолькоВДиалоге Тогда
			АдресВВидеГиперссылки = Истина;
	Иначе
			АдресВВидеГиперссылки = Ложь;
	КонецЕсли;
	Результат.ДанныеВыбора.Вставить("АдресВВидеГиперссылки", АдресВВидеГиперссылки);
	
	// Подавляем перенос строк в возвращаемом отдельно представлении.
	Результат.ДанныеВыбора.Представление = СокрЛП(СтрЗаменить(Результат.ДанныеВыбора.Представление, Символы.ПС, " "));
	Результат.ДанныеВыбора.Вставить("Вид", Контекст.ВидКонтактнойИнформации.Ссылка);
	Результат.ДанныеВыбора.Вставить("Тип", Контекст.ВидКонтактнойИнформации.Тип);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПерезаполнитьФормуВводаАдреса(Контекст, ЗначенияПолей, ТипКонтактнойИнформации)

	РезультатыЧтения = "";
	XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, ТипКонтактнойИнформации, РезультатыЧтения);
	ЗначениеРеквизитовПоКонтактнойИнформации(Контекст, XDTOКонтактная);
	Возврат РезультатыЧтения;

КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьСписокКонтактнойИнформации(ВидКонтактнойИнформации, КонтактнаяИнформацияОписаниеДополнительныхРеквизитов, Контекст)

	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
	НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	
	СписокКонтактнойИнформации = Новый Массив;
	Для каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
		КонтактнаяИнформация = Новый Структура("Представление, ЗначенияПолей, ДействуетС");
		Если СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
			ЗаполнитьЗначенияСвойств(КонтактнаяИнформация, СтрокаКонтактнойИнформации);
		Иначе
			XDTOИнформация = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
			ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(XDTOИнформация);
			Если СтрСравнить(СтрокаКонтактнойИнформации.ЗначенияПолей, ЗначенияПолей) <> 0 Тогда
				Если СтрокаКонтактнойИнформации.ДействуетС < НачалоДня(ТекущаяДатаСеанса()) Тогда
					// старое значение
					ЗаполнитьЗначенияСвойств(КонтактнаяИнформация, СтрокаКонтактнойИнформации);
					СписокКонтактнойИнформации.Добавить(КонтактнаяИнформация);
					// новое значение
					КонтактнаяИнформация = Новый Структура("Представление, ЗначенияПолей, ДействуетС");
					КонтактнаяИнформация.Представление = Контекст.ПредставлениеАдреса;
					КонтактнаяИнформация.ЗначенияПолей = ЗначенияПолей;
					КонтактнаяИнформация.ДействуетС = ТекущаяДатаСеанса();
				Иначе
					КонтактнаяИнформация.Представление = Контекст.ПредставлениеАдреса;
					КонтактнаяИнформация.ЗначенияПолей = ЗначенияПолей;
					КонтактнаяИнформация.ДействуетС = ТекущаяДатаСеанса();
				КонецЕсли;
			Иначе
				ЗаполнитьЗначенияСвойств(КонтактнаяИнформация, СтрокаКонтактнойИнформации);
			КонецЕсли;
		КонецЕсли;
		
		СписокКонтактнойИнформации.Добавить(КонтактнаяИнформация);
	КонецЦикла;
	
	Возврат СписокКонтактнойИнформации;
КонецФункции

&НаСервере
Функция РезультатВыбораТолькоКомментария(КонтактнаяИнфо, Представление, Комментарий)
	
	Если ПустаяСтрока(КонтактнаяИнфо) Тогда
		НоваяКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO("");
		НоваяКонтактная.Комментарий = Комментарий;
		НоваяКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(НоваяКонтактная);
		АдресВведенВСвободнойФорме = Ложь;
		
	ИначеЕсли УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(КонтактнаяИнфо) Тогда
		// Копия
		НоваяКонтактная = КонтактнаяИнфо;
		// Модифицируем значение "НоваяКонтактная".
		УправлениеКонтактнойИнформацией.УстановитьКомментарийКонтактнойИнформации(НоваяКонтактная, Комментарий);
		АдресВведенВСвободнойФорме = УправлениеКонтактнойИнформациейСлужебный.АдресВведенВСвободнойФорме(КонтактнаяИнфо);
		
	Иначе
		НоваяКонтактная = КонтактнаяИнфо;
		АдресВведенВСвободнойФорме = Ложь;
	КонецЕсли;
	
	Результат = Новый Структура("ДанныеВыбора, ОшибкиЗаполнения", Новый Структура, Новый СписокЗначений);
	Результат.ДанныеВыбора.Вставить("КонтактнаяИнформация", НоваяКонтактная);
	Результат.ДанныеВыбора.Вставить("Представление", Представление);
	Результат.ДанныеВыбора.Вставить("Комментарий", Комментарий);
	Результат.ДанныеВыбора.Вставить("ВведеноВСвободнойФорме", АдресВведенВСвободнойФорме);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОбработкаИзмененияСтраныКлиент()
	
	ЭтоНациональныйАдрес = (Страна = ОсновнаяСтрана);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображениеЭлементовНаФорме(ЭтоТакси)
	
	// По умолчанию выводим представление.
	Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.АдресСтраницаПредставление;
	
	Если ЭтоТакси Тогда
		Элементы.ФормаВсеДействия.Видимость = Ложь;
	Иначе
		Элементы.ФормаОчиститьАдрес.Видимость          = Ложь;
		Элементы.ИзменитьФорму.Видимость               = Ложь;
		Элементы.ФормаВводАдресаПоказать.Видимость     = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеАдреса(Контекст, XDTOКонтактная = Неопределено)
	
	// Код страны ставим всегда
	Если ТипЗнч(Контекст.Страна) = Тип("СправочникСсылка.СтраныМира") Тогда
		Контекст.КодСтраны = Контекст.Страна.Код
	Иначе
		Контекст.КодСтраны = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗначениеРеквизитовПоКонтактнойИнформации(Контекст, РедактируемаяИнформация)
	
	ДанныеАдреса = РедактируемаяИнформация.Состав;
	
	// Общие реквизиты
	Контекст.ПредставлениеАдреса = РедактируемаяИнформация.Представление;
	Контекст.Комментарий         = РедактируемаяИнформация.Комментарий;
	
	// Копия комментария для анализа измененности.
	Контекст.КопияКомментария = Контекст.Комментарий;
	
	// Страна по наименованию
	НаименованиеСтраны = СокрЛП(ДанныеАдреса.Страна);
	Если ПустаяСтрока(НаименованиеСтраны) Тогда
		Контекст.Страна = Справочники.СтраныМира.ПустаяСсылка();
	Иначе
		
		СсылкаНаОсновнуюСтрану = ОсновнаяСтрана();
		
		Если ВРЕГ(НаименованиеСтраны) = ВРЕГ(СокрЛП(СсылкаНаОсновнуюСтрану.Наименование)) Тогда
			Контекст.Страна    = СсылкаНаОсновнуюСтрану;
			Контекст.КодСтраны = СсылкаНаОсновнуюСтрану.Код;
		Иначе
			ДанныеСтраны = Справочники.СтраныМира.ДанныеСтраныМира(, НаименованиеСтраны);
			Если ДанныеСтраны = Неопределено Тогда
				// Не нашли ни в справочнике, ни в классификаторе.
				Контекст.Страна    = Неопределено;
				Контекст.КодСтраны = Неопределено;
			Иначе
				Контекст.Страна    = ДанныеСтраны.Ссылка;
				Контекст.КодСтраны = ДанныеСтраны.Код;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст)
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Комментарий = Контекст.Комментарий;
	
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Адрес = Результат.Состав;
	
	Адрес.Страна = Строка(Контекст.Страна);
	Если ВРег(Контекст.Страна) <> ВРег(Контекст.ОсновнаяСтрана.Наименование) Тогда
		Результат.Представление = Контекст.ПредставлениеАдреса;
		Если Контекст.ВидКонтактнойИнформации.ВключатьСтрануВПредставление
			И СтрНачинаетсяС(ВРЕГ(Контекст.ПредставлениеАдреса), ВРег(Контекст.Страна)) Тогда
			Адрес.Состав = Сред(Контекст.ПредставлениеАдреса, СтрДлина(Контекст.Страна) + 2);
		Иначе
			Адрес.Состав = Контекст.ПредставлениеАдреса;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	// Представление и свободный ввод адреса.
	Результат.Представление    = СокрЛП(Контекст.ПредставлениеАдреса);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция РезультатаВыбораПоОбновлениюФлагов(Контекст, ВозвращатьСписокЗначений = Ложь)
	// Обновляем некоторые флаги
	ЗначениеФлагов = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(Контекст.ВидКонтактнойИнформации.Ссылка);
	
	Контекст.ВидКонтактнойИнформации.ТолькоНациональныйАдрес = ЗначениеФлагов.ТолькоНациональныйАдрес;
	Контекст.ВидКонтактнойИнформации.ПроверятьКорректность   = ЗначениеФлагов.ПроверятьКорректность;

	Возврат РезультатВыбора(Контекст, ВозвращатьСписокЗначений);
КонецФункции

&НаСервере
Процедура УдалитьГруппуЭлементов(Группа)
	Пока Группа.ПодчиненныеЭлементы.Количество()>0 Цикл
		Элемент = Группа.ПодчиненныеЭлементы[0];
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УдалитьГруппуЭлементов(Элемент);
		КонецЕсли;
		Элементы.Удалить(Элемент);
	КонецЦикла;
	Элементы.Удалить(Группа);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИнформациюОДатахДействияАдреса(ДействуетС, ДействуетДо)
	
	Если ЗначениеЗаполнено(ДействуетДо) И ЗначениеЗаполнено(ДействуетС)Тогда
		Если НачалоДня(ДействуетДо - 10) = НачалоДня(ДействуетС) Тогда
			ТекстИсторическийАдрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Адрес действовал только %1'"), Формат(ДействуетС, "ДЛФ=DD"));
		Иначе
			ТекстИсторическийАдрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Адрес действовал с %1 по %2 (включительно)'"), Формат(ДействуетС, "ДЛФ=DD"), Формат(ДействуетДо - 10, "ДЛФ=DD"));
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДействуетС) И ЗначениеЗаполнено(ДействуетДо) Тогда
		ТекстИсторическийАдрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Адрес действовал до %1 (включительно)'"), Формат(ДействуетДо - 10, "ДЛФ=DD"));
	Иначе
		ТекстИсторическийАдрес = НСтр("ru = 'Адрес действует в настоящие время'");
	КонецЕсли;
	ИсторическийАдрес = ТекстИсторическийАдрес;
	Элементы.ПоказатьИсториюВсеДействия.Видимость = Ложь;
	Элементы.ИсторияИзменений.Видимость = Ложь;
	Элементы.ГруппаИсторическийАдрес.Видимость = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахЗаполнения(СписокОшибок, ПредупреждатьОбОтсутствии, ТребуетсяОбновление = Ложь)
	
	ОчиститьСообщения();
	
	КоличествоОшибок = СписокОшибок.Количество();
	Если КоличествоОшибок = 0 И ПредупреждатьОбОтсутствии Тогда
		// Нет ошибок
		Если ТребуетсяОбновление Тогда
				СообщениеОПроверкеАдреса = НСтр("ru='Адрес введен корректно, но адресные сведения, загруженные в программу,
				|давно не обновлялись. Рекомендуется выполнить обновление и повторить проверку адреса заново.
				|Для обновления адресного классификатора необходимо обратиться к администратору.'");
				ПоказатьПредупреждение(, СообщениеОПроверкеАдреса);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Адрес введен корректно.'"));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Сообщаем список с привязкой к полям.
	Для Каждого Элемент Из СписокОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Элемент.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАдресКлиент()
	
	Контекст = КонтекстФормыКлиент();
	ОчиститьАдресСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОчиститьАдресСервер(Контекст)
	
	Контекст.ПредставлениеАдреса = "";
	Контекст.Комментарий = "";
	Контекст.Индекс = Неопределено;
	
	XDTOКонтактнаяИнфо = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
	ЗаполнитьПредставлениеАдреса(Контекст, XDTOКонтактнаяИнфо);
	
	// Очищаем непосредственно на форме, в контексте уже очищено.
КонецПроцедуры

&НаСервере
Процедура УстановитьКлючИспользованияФормы()
	КлючСохраненияПоложенияОкна = Строка(Страна);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////

// Преобразовываем Реквизиты формы <-> Структура
//
&НаКлиенте
Функция КонтекстФормыКлиент(НовыеДанные = Неопределено)
	
	СписокРеквизитов = "ВидКонтактнойИнформации,
		|Страна, КодСтраны, ОсновнаяСтрана, СкрыватьНеактуальныеАдреса,
		|Индекс, ПредставлениеАдреса, Комментарий, КопияКомментария,
		| ПредставлениеАдресаИзменено, Модифицированность";
		
	Если НовыеДанные = Неопределено Тогда
		// Читаем
		Результат = Новый Структура(СписокРеквизитов);
		ЗаполнитьЗначенияСвойств(Результат, ЭтотОбъект, СписокРеквизитов);
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеДанные, СписокРеквизитов);
	
	Возврат НовыеДанные;
КонецФункции

// Представление разрешено менять только при вводе в режиме ввода в свободной форме.
// Поэтому необходимо привести остальные поля к измененному представлению.
// Страну не трогаем, режим свободного ввода возможен только в России.
//
&НаСервере
Процедура ПредставлениеАдресаПриИзмененииСервер()
	
	Если Страна = ОсновнаяСтрана Тогда
		// Пытаемся разобрать заново
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(ПредставлениеАдреса, ВидКонтактнойИнформации);
		XDTOКонтактная.Представление = ПредставлениеАдреса;
		XDTOКонтактная.Комментарий   = Комментарий;
		
		// И проставляем в реквизиты, кроме страны и представления.
		ТекущееПредставление = ПредставлениеАдреса;
		ТекущаяСтрана        = Страна;
		
		ОчиститьАдресСервер(ЭтотОбъект);
		
		// Возможно будет отключен свободного ввода.
		ЗначениеРеквизитовПоКонтактнойИнформации(ЭтотОбъект, XDTOКонтактная);
		
		ПредставлениеАдреса = ТекущееПредставление;
		Страна              = ТекущаяСтрана;
	КонецЕсли;
	
	// Включаем режим свободного ввода принудительно.
	РазрешитьВводАдресаВСвободнойФорме = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОсновнаяСтрана()
	
	Если Метаданные.ОбщиеМодули.Найти("РаботаСАдресами") <> Неопределено Тогда
		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
		Возврат МодульРаботаСАдресами.ОсновнаяСтрана();
	КонецЕсли;
	
	Возврат Справочники.СтраныМира.ПустаяСсылка();

КонецФункции

#КонецОбласти
