
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДополнитьФорму();
	ПрочитатьНастройкиРаспределения();
	ПрочитатьЗначенияКритериевОценкиПозиций();
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	ПередЗакрытиемНаСервере(Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьПозицииШтатногоРасписанияПриИзменении(Элемент)
	
	ПоказыватьПозицииШтатногоРасписанияПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВесПозиций

&НаКлиенте
Процедура ВесПозицийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВесПозицийОрганизация" Тогда
		ТекущиеДанные = Элементы.ВесПозиций.ТекущиеДанные;
		ПоказатьЗначение(, ТекущиеДанные.Позиция);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеКритерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВесПозиций.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		КоличествоБаллов = 0;
		Для Сч = 1 По КоличествоКритериев Цикл 
			КоличествоБаллов = КоличествоБаллов + ТекущиеДанные[ИмяКолонкиКритерия(Сч)] * ДанныеКритериев[Сч].Вес;
		КонецЦикла;
		ТекущиеДанные.КоличествоБаллов = КоличествоБаллов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесПозицийРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.КритерииОценкиПозицийШтатногоРасписания.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Распределить(Команда)
	
	РаспределитьПозицииПоГрейдам();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГрейды(Команда)
	
	Если ГрейдыСозданы() Тогда 
		ТекстВопроса = НСтр("ru = 'Справочник Грейды не пустой. Будут созданы дополнительные элементы справочника. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("СоздатьГрейдыЗавершение", ЭтотОбъект);		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе 
		СоздатьГрейдыЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГрейдыЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	СоздатьГрейдыНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДополнитьФорму()
	
	// Добавление реквизитов
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтотОбъект, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтотОбъект, МассивИменРеквизитовФормы, "ВесПозиций");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КритерииОценкиПозиций.Ссылка,
	               |	КритерииОценкиПозиций.Наименование КАК Наименование,
	               |	КритерииОценкиПозиций.Вес
	               |ИЗ
	               |	Справочник.КритерииОценкиПозицийШтатногоРасписания КАК КритерииОценкиПозиций
	               |ГДЕ
	               |	НЕ КритерииОценкиПозиций.ВАрхиве
	               |	И НЕ КритерииОценкиПозиций.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоКритериев = Выборка.Количество();
	
	НомераКолонок = Новый Соответствие;
	КритерииОценки = Новый Соответствие;
	
	Сч = 1;
	ДобавляемыеРеквизиты = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ПредставлениеВеса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'вес %1'"), Выборка.Вес);
		Наименование = Выборка.Наименование + " (" + ПредставлениеВеса + ")";
		ЗначениеКритерияРеквизит = Новый РеквизитФормы(
			ИмяКолонкиКритерия(Сч), Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)), "ВесПозиций", Наименование);
		ДобавляемыеРеквизиты.Добавить(ЗначениеКритерияРеквизит);
		
		НомераКолонок.Вставить(Выборка.Ссылка, Сч);
		КритерииОценки.Вставить(Сч, Новый Структура("Критерий, Вес", Выборка.Ссылка, Выборка.Вес));
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	НомераКолонокКритериев = Новый ФиксированноеСоответствие(НомераКолонок);
	ДанныеКритериев = Новый ФиксированноеСоответствие(КритерииОценки);
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(ЭтотОбъект, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	// Добавление элементов формы
	Для Сч = 1 По КоличествоКритериев Цикл
		Если Элементы.Найти("ВесПозиций" + ИмяКолонкиКритерия(Сч)) = Неопределено Тогда 
			Значение = Элементы.Добавить("ВесПозиций" + ИмяКолонкиКритерия(Сч), Тип("ПолеФормы"), Элементы.ВесПозиций);
			Значение.Вид = ВидПоляФормы.ПолеВвода;
			Значение.ПутьКДанным = "ВесПозиций." + ИмяКолонкиКритерия(Сч);
			Значение.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
			Значение.ОтображатьВШапке = Истина;
			Значение.Ширина = 15;
			Значение.УстановитьДействие("ПриИзменении", "Подключаемый_ЗначениеКритерияПриИзменении");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗначенияКритериевОценкиПозиций()
	
	ЭтоПозиции = ПоказыватьПозицииШтатногоРасписания = 1;
	КлючНастроек = КлючРезультатаРаспределения(ЭтоПозиции);
	
	ГрейдыПозиций = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СозданиеГрейдов", КлючНастроек);
	Если ГрейдыПозиций = Неопределено Тогда 
		ГрейдыПозиций = Новый Соответствие;
	КонецЕсли;
	
	ВесПозиций.Очистить();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТПозиции(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Позиции.Организация КАК Организация,
	               |	Позиции.Позиция КАК Позиция,
	               |	Позиции.ПорядокПодразделения КАК ПорядокПодразделения,
	               |	Позиции.ПорядокДолжности КАК ПорядокДолжности,
	               |	ЕСТЬNULL(ОценкаПозиций.КритерийОценки.Вес, 0) * ЕСТЬNULL(ОценкаПозиций.Значение, 0) КАК КоличествоБалловКритерия,
	               |	ЕСТЬNULL(ОценкаПозиций.КритерийОценки, ЗНАЧЕНИЕ(Справочник.КритерииОценкиПозицийШтатногоРасписания.ПустаяСсылка)) КАК КритерийОценки,
	               |	ЕСТЬNULL(ОценкаПозиций.Значение, 0) КАК Значение
	               |ИЗ
	               |	ВТПозиции КАК Позиции
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОценкаПозицийШтатногоРасписанияПоКритериям КАК ОценкаПозиций
	               |		ПО Позиции.Позиция = ОценкаПозиций.Позиция
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Позиции.Организация.Наименование,
	               |	ПорядокПодразделения,
	               |	ПорядокДолжности,
	               |	Позиции.Позиция.Наименование";
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	
	Пока Выборка.СледующийПоЗначениюПоля("Позиция") Цикл
		НоваяСтрока = ВесПозиций.Добавить();
		НоваяСтрока.Грейд = ГрейдыПозиций[Выборка.Позиция];
		Пока Выборка.Следующий() Цикл 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НомерКолонки = НомераКолонокКритериев.Получить(Выборка.КритерийОценки);
			Если НомерКолонки <> Неопределено Тогда 
				НоваяСтрока[ИмяКолонкиКритерия(НомерКолонки)] = Выборка.Значение;
				НоваяСтрока.КоличествоБаллов = НоваяСтрока.КоличествоБаллов + Выборка.КоличествоБалловКритерия;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(КоличествоГрейдов) Тогда 
		КоличествоГрейдов = Окр(ВесПозиций.Количество() / 5, 0);
		КоличествоГрейдов = Макс(2, Мин(20, КоличествоГрейдов));
	КонецЕсли;
	
	Если ГрейдыПозиций.Количество() > 0 Тогда 
		ВесПозиций.Сортировать("Грейд Убыв");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПозицииПоГрейдам()
	
	СохранитьОценкиПозиций();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокПозиций", ОбщегоНазначения.ВыгрузитьКолонку(ВесПозиций, "Позиция"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОценкаПозиций.Позиция,
	               |	СУММА(ОценкаПозиций.КритерийОценки.Вес * ОценкаПозиций.Значение) КАК ВесПозиции
	               |ИЗ
	               |	РегистрСведений.ОценкаПозицийШтатногоРасписанияПоКритериям КАК ОценкаПозиций
	               |ГДЕ
	               |	ОценкаПозиций.Позиция В(&СписокПозиций)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОценкаПозиций.Позиция";
				   
	ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПозиций.Сортировать("ВесПозиции");
	
	ТаблицаШагов = Новый ТаблицаЗначений;
	ТаблицаШагов.Колонки.Добавить("ВесПозиции", Новый ОписаниеТипов("Число"));
	ТаблицаШагов.Колонки.Добавить("Шаг", Новый ОписаниеТипов("Число"));
	
	ВесПредыдущейПозиции = Неопределено;
	Для Каждого СтрокаПозиции Из ТаблицаПозиций Цикл 
		Если ВесПредыдущейПозиции <> Неопределено Тогда 
			НоваяСтрока = ТаблицаШагов.Добавить();
			НоваяСтрока.ВесПозиции = СтрокаПозиции.ВесПозиции;
			НоваяСтрока.Шаг = СтрокаПозиции.ВесПозиции - ВесПредыдущейПозиции;
		КонецЕсли;
		ВесПредыдущейПозиции = СтрокаПозиции.ВесПозиции;
	КонецЦикла;
	
	ТаблицаШагов.Сортировать("Шаг Убыв, ВесПозиции Убыв");
	
	КоличествоШагов = Мин(КоличествоГрейдов - 1, ТаблицаШагов.Количество());
	КоличествоШагов = Макс(0, КоличествоШагов);
	
	ТаблицаГрейдов = Новый ТаблицаЗначений;
	ТаблицаГрейдов.Колонки.Добавить("ВесПозиции", Новый ОписаниеТипов("Число"));
	
	Для Сч = 1 По КоличествоШагов Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаГрейдов.Добавить(), ТаблицаШагов[Сч-1]);
	КонецЦикла;
	
	ТаблицаГрейдов.Сортировать("ВесПозиции");
	
	ВерхняяГраница = ?(ТаблицаГрейдов.Количество() > 0, ТаблицаГрейдов[КоличествоШагов-1].ВесПозиции, 0);
	
	ГрейдыПозиций = Новый Соответствие;	
		
	Для Каждого СтрокаПозиции Из ТаблицаПозиций Цикл 
		
		Если СтрокаПозиции.ВесПозиции >= ВерхняяГраница Тогда 
			ИндексГрейда = КоличествоШагов + 1;
			ГрейдыПозиций.Вставить(СтрокаПозиции.Позиция, ИндексГрейда); 
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДанныеГрейда Из ТаблицаГрейдов Цикл 
			Если ДанныеГрейда.ВесПозиции > СтрокаПозиции.ВесПозиции Тогда
				ИндексГрейда = ТаблицаГрейдов.Индекс(ДанныеГрейда) + 1;
				ГрейдыПозиций.Вставить(СтрокаПозиции.Позиция, ИндексГрейда); 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	
	
	Для Каждого ДанныеПозиции Из ВесПозиций Цикл
		ИндексГрейда = ГрейдыПозиций[ДанныеПозиции.Позиция];
		ДанныеПозиции.Грейд = ?(ИндексГрейда = Неопределено, 0, ИндексГрейда);
	КонецЦикла;
	
	ВесПозиций.Сортировать("Грейд Убыв");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТПозиции(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПоказыватьПозицииШтатногоРасписания = 0 Тогда 
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		               |	Должности.Ссылка КАК Позиция,
		               |	0 КАК ПорядокПодразделения,
		               |	Должности.РеквизитДопУпорядочивания КАК ПорядокДолжности
		               |ПОМЕСТИТЬ ВТПозиции
		               |ИЗ
		               |	Справочник.Должности КАК Должности
		               |ГДЕ
		               |	НЕ Должности.ПометкаУдаления";
					   
	Иначе 
					   
		Запрос.Текст = "ВЫБРАТЬ
		               |	ШтатноеРасписание.Владелец КАК Организация,
		               |	ШтатноеРасписание.Ссылка КАК Позиция,
		               |	ШтатноеРасписание.Подразделение.РеквизитДопУпорядочиванияИерархического КАК ПорядокПодразделения,
		               |	ШтатноеРасписание.Должность.РеквизитДопУпорядочивания КАК ПорядокДолжности
		               |ПОМЕСТИТЬ ВТПозиции
		               |ИЗ
		               |	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		               |ГДЕ
		               |	НЕ ШтатноеРасписание.Закрыта
		               |	И НЕ ШтатноеРасписание.ПометкаУдаления
		               |	И НЕ ШтатноеРасписание.ГруппаПозицийПодразделения";
				   
	КонецЕсли;			   
				   
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере(Отказ, СтандартнаяОбработка)
	
	СохранитьОценкиПозиций();
	СохранитьРезультатРаспределения();
	СохранитьНастройкиРаспределения();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьОценкиПозиций()
	
	Для Каждого ДанныеПозиции Из ВесПозиций Цикл
		
		НаборЗаписей = РегистрыСведений.ОценкаПозицийШтатногоРасписанияПоКритериям.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Позиция.Установить(ДанныеПозиции.Позиция);
		
		Для НомерКолонки = 1 По КоличествоКритериев Цикл 
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Позиция = ДанныеПозиции.Позиция;
			НоваяЗапись.КритерийОценки = ДанныеКритериев[НомерКолонки].Критерий;
			НоваяЗапись.Значение = ДанныеПозиции[ИмяКолонкиКритерия(НомерКолонки)];
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатРаспределения()
	
	ГрейдыПозиций = Новый Соответствие;
	Для Каждого ДанныеПозиции Из ВесПозиций Цикл
		Если ЗначениеЗаполнено(ДанныеПозиции.Грейд) Тогда 
			ГрейдыПозиций.Вставить(ДанныеПозиции.Позиция, ДанныеПозиции.Грейд);
		КонецЕсли;
	КонецЦикла;
	
	ЭтоПозиции = ?(ВесПозиций.Количество() > 0, ТипЗнч(ВесПозиций[0].Позиция) = Тип("СправочникСсылка.ШтатноеРасписание"), Ложь);
	КлючНастроек = КлючРезультатаРаспределения(ЭтоПозиции);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СозданиеГрейдов", КлючНастроек, ГрейдыПозиций);
	
КонецПроцедуры

&НаСервере
Функция КлючРезультатаРаспределения(ЭтоПозиции)
	
	Возврат ?(ЭтоПозиции, "РезультатРаспределенияПозиций", "РезультатРаспределенияДолжностей");
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиРаспределения()
	
	НастройкиРаспределения = Новый Структура("ПоказыватьПозицииШтатногоРасписания, КоличествоГрейдов");
	НастройкиРаспределения.ПоказыватьПозицииШтатногоРасписания = ПоказыватьПозицииШтатногоРасписания;
	НастройкиРаспределения.КоличествоГрейдов = КоличествоГрейдов;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СозданиеГрейдов", "НастройкиРаспределения", НастройкиРаспределения);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиРаспределения()
	
	НастройкиРаспределения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СозданиеГрейдов", "НастройкиРаспределения");
	Если НастройкиРаспределения <> Неопределено Тогда 
		ПоказыватьПозицииШтатногоРасписания = НастройкиРаспределения.ПоказыватьПозицииШтатногоРасписания;
		КоличествоГрейдов = НастройкиРаспределения.КоличествоГрейдов;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьГрейдыНаСервере()
	
	МассивГрейдов = ОбщегоНазначения.ВыгрузитьКолонку(ВесПозиций, "Грейд", Истина);
	СозданныеГрейды = Новый Соответствие;
	
	КоличествоГрейдов = МассивГрейдов.Количество();
	
	Для Сч = 1 По КоличествоГрейдов Цикл 
		
		ИндексГрейда = МассивГрейдов[КоличествоГрейдов - Сч];
		
		Если ИндексГрейда = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ГрейдОбъект = Справочники.Грейды.СоздатьЭлемент();
		ГрейдОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Грейд %1'"), ИндексГрейда);
		ГрейдОбъект.Записать();
		
		СозданныеГрейды.Вставить(ИндексГрейда, ГрейдОбъект.Ссылка);
		
	КонецЦикла;
	
	// Если используется штатное расписание, а в списке отображаются должности - заполняем грейд в позициях 
	// штатного расписания аналогично должностям.
	ПозицииДолжностей = Новый Соответствие;
	
	ИспользуетсяШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	Если ИспользуетсяШтатноеРасписание И ПоказыватьПозицииШтатногоРасписания = 0 Тогда 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СписокДолжностей", ОбщегоНазначения.ВыгрузитьКолонку(ВесПозиций, "Позиция"));
		
	    Запрос.Текст = "ВЫБРАТЬ
	                   |	ШтатноеРасписание.Должность КАК Должность,
	                   |	ШтатноеРасписание.Ссылка
	                   |ИЗ
	                   |	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	                   |ГДЕ
	                   |	ШтатноеРасписание.Должность В(&СписокДолжностей)
	                   |
	                   |УПОРЯДОЧИТЬ ПО
	                   |	Должность";
	
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("Должность") Цикл 
			МассивПозиций = Новый Массив;
			Пока Выборка.Следующий() Цикл 
				МассивПозиций.Добавить(Выборка.Ссылка);
			КонецЦикла;
			ПозицииДолжностей.Вставить(Выборка.Должность, МассивПозиций);
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ДанныеПозиции Из ВесПозиций Цикл 
		
		Если ДанныеПозиции.Грейд = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ГрейдыПозиций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Позиция.Установить(ДанныеПозиции.Позиция);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Грейд = СозданныеГрейды[ДанныеПозиции.Грейд];
		НоваяЗапись.Позиция = ДанныеПозиции.Позиция;
		НаборЗаписей.Записать();
		
		// Если используется штатное расписание, а в списке отображаются должности - заполняем грейд в позициях 
		// штатного расписания аналогично должностям.
		Если ИспользуетсяШтатноеРасписание И ПоказыватьПозицииШтатногоРасписания = 0 Тогда
			МассивПозиций = ПозицииДолжностей[ДанныеПозиции.Позиция];
			Если МассивПозиций <> Неопределено Тогда 
				Для Каждого Позиция Из МассивПозиций Цикл 
					НаборЗаписей = РегистрыСведений.ГрейдыПозиций.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Позиция.Установить(Позиция);
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Грейд = СозданныеГрейды[ДанныеПозиции.Грейд];
					НоваяЗапись.Позиция = Позиция;
					НаборЗаписей.Записать();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказыватьПозицииШтатногоРасписанияПриИзмененииНаСервере()
	
	СохранитьОценкиПозиций();
	СохранитьРезультатРаспределения();
	ПрочитатьЗначенияКритериевОценкиПозиций();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементов()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ПоказыватьПозицииШтатногоРасписания", "Видимость", ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиКритерия(НомерКолонки)
	
	Возврат "ЗначениеКритерия" + НомерКолонки;

КонецФункции

&НаСервереБезКонтекста
Функция ГрейдыСозданы()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Грейды.Ссылка
	               |ИЗ
	               |	Справочник.Грейды КАК Грейды";
				   
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти
