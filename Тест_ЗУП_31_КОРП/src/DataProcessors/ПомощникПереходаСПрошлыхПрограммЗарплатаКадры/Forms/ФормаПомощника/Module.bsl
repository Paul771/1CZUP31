
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользуетсяБазоваяВерсия = ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации();
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИспользуетсяВебКлиент = НЕ ПустаяСтрока(СистемнаяИнформация.ИнформацияПрограммыПросмотра);
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	ИнициализацияПомощника();
	
	ЗаголовокТекущейСтраницы = ЗаголовокСтраницы(ЭтаФорма);
	ОбновитьКнопки(ЭтаФорма);
			
КонецПроцедуры

Процедура ИнициализацияПомощника()

	ПереносИзИБНеДоступен = ИспользуетсяБазоваяВерсия Или ИспользуетсяВебКлиент Или РазделениеВключено;
	ПереносДанныхЧерезФайл = ?(ПереносИзИБНеДоступен,1,0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПереносИзИБНедоступен",
		"Видимость",
		ПереносИзИБНеДоступен);
	
	ЗаголовокПомощникНачало = НСтр("ru = 'Помощник предназначен для переноса из прошлых программ сведений о стаже ПФР для автоматического формирования сведений о стаже по форме СЗВ-СТАЖ за 2017 год.'");
	ИнформационнаяНадписьПомощникНачало = НСтр("ru = 'ВНИМАНИЕ! Перенос сведений о стаже ПФР из прошлой программы имеет смысл выполнять только в том случае, если был выполнен рекомендованный перенос данных из прошлых программ и месяц начала эксплуатации позднее 01 января 2017 года.'");
	ИнформационнаяНадписьПереносИзИБНевозможен = НСтр("ru = 'Файлы для загрузки формируются в прошлой программе с использованием Помощника выгрузки.'");
	
	МесяцНачалаЭксплуатацииИзИБ = Дата(0001,1,1);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачальнаяШтатнаяРасстановка.Месяц КАК Месяц
	|ИЗ
	|	Документ.НачальнаяШтатнаяРасстановка КАК НачальнаяШтатнаяРасстановка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Месяц < Дата(2017,1,1) Тогда
			Продолжить;
		Иначе
			МесяцНачалаЭксплуатацииИзИБ = Выборка.Месяц;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(МесяцНачалаЭксплуатацииИзИБ) Тогда
		Объект.МесяцНачалаЭксплуатации = Дата(2017,11,1);
		ИнформационнаяНадписьРезультатАнализаИБ = НСтр("ru = 'Перенос данных из прошлых программ не выполнялся.'");
	Иначе
		Объект.МесяцНачалаЭксплуатации = МесяцНачалаЭксплуатацииИзИБ;
		ИнформационнаяНадписьРезультатАнализаИБ = "";
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачалаЭксплуатации", "МесяцНачалаЭксплуатацииСтрокой");
	
	ПорядокСтраниц   = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкам(ЭтаФорма));
	ЗаголовкиСтраниц = Новый ФиксированнаяСтруктура(ЗаголовкиСтраницПомощника());
	
	ОписаниеЭтапов = Новый Соответствие;
	ОписаниеЭтапов.Вставить(1, "Подключение");
	ОписаниеЭтапов.Вставить(2, "Выгрузка");
	ОписаниеЭтапов.Вставить(3, "Загрузка");
	
	Этапы = Новый ФиксированноеСоответствие(ОписаниеЭтапов);
	
КонецПроцедуры


#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцНачалаЭксплуатации", "МесяцНачалаЭксплуатацииСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцНачалаЭксплуатации", "МесяцНачалаЭксплуатацииСтрокой", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцНачалаЭксплуатации", "МесяцНачалаЭксплуатацииСтрокой", Направление);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеПротокола

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализацияСообщенийКодов(Форма)
	
	ОписанияСообщений = Новый Соответствие;
	
	ОписанияСообщений.Вставить(2,  Нстр("ru = 'Не удалось произвести подключение к информационной базе:'"));
	ОписанияСообщений.Вставить(3,  НСтр("ru = 'Ошибка создания COM-объекта. Обратитесь к администратору информационной системы.'"));
	ОписанияСообщений.Вставить(4,  НСтр("ru = 'Возможно, пользователь отменил подключение к информационной базе, либо была попытка немонопольного подключения.'"));
	ОписанияСообщений.Вставить(5,  Нстр("ru = 'Не удалось загрузить правила переноса данных:'"));
	ОписанияСообщений.Вставить(6,  Нстр("ru = 'Возможно, в правилах конвертации ошибка. Обратитесь в техническую поддержку.'"));
	ОписанияСообщений.Вставить(7,  Нстр("ru = 'Перенос данных завершился аварийно:'"));
	ОписанияСообщений.Вставить(8,  Нстр("ru = 'Воспользуйтесь вариантом загрузки данных из файла, предварительно сформировав его в информационной базе, из которой производится перенос данных.'"));
	ОписанияСообщений.Вставить(9,  Нстр("ru = 'Не удалось получить данные для загрузки.'"));
	ОписанияСообщений.Вставить(10,  Нстр("ru = 'Рекомендуется обновить релиз конфигурации информационной базы, из которой производится перенос данных.'"));
	ОписанияСообщений.Вставить(11,  Нстр("ru = 'Не записан файл с правилами переноса на диск:'"));
	ОписанияСообщений.Вставить(12,  Нстр("ru = 'Возможно, у пользователя нет прав на запись файлов в каталог с ИБ.'"));
	ОписанияСообщений.Вставить(13,  Нстр("ru = 'Не удалось выгрузить данные'"));
	ОписанияСообщений.Вставить(14,  Нстр("ru = 'Посмотрите список ошибок в конфигурации, из которой выгружались данные.'"));
	ОписанияСообщений.Вставить(15,  Нстр("ru = 'Ошибка создания COM-объекта. Обратитесь к администратору информационной системы. Для выполнения переноса данных на компьютере должна быть установлена полная версия 1С:Предприятия.'"));
	
	Форма.ОписанияСообщений = Новый ФиксированноеСоответствие(ОписанияСообщений);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗафиксироватьОшибкуИСообщить(Форма, КодТекстОшибки, КодРекомендации, СообщатьПользователю = Истина, ИнформацияОбОшибке = Неопределено)
	
	Если Форма.ОписанияСообщений = Неопределено Тогда
		ИнициализацияСообщенийКодов(Форма);
	КонецЕсли;
	
	Если ТипЗнч(КодТекстОшибки) = Тип("Строка") Тогда
		ТекстОшибки  = ?(ЗначениеЗаполнено(КодТекстОшибки),КодТекстОшибки,Неопределено);
	Иначе
		ТекстОшибки  = Форма.ОписанияСообщений.Получить(КодТекстОшибки);	
	КонецЕсли;
	
	Если ТекстОшибки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстРекомендации = Форма.ОписанияСообщений.Получить(КодРекомендации);
	
	Описание = "";
	Пока ИнформацияОбОшибке <> Неопределено Цикл
		Описание = Описание + Символы.ПС + ИнформацияОбОшибке.Описание;
		ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
	КонецЦикла;
	ТекстОшибки = ТекстОшибки + " " + Описание;
	
	Если СообщатьПользователю Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
	КонецЕсли;
	
	Этап = Форма.ЭтапКонвертации;
	
	Если НЕ ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяОшибка = Форма.ТаблицаОшибок.Добавить();
	НоваяОшибка.Этап			= Этап;
	НоваяОшибка.Ошибка			= ТекстОшибки;
	НоваяОшибка.Рекомендации	= ?(ТекстРекомендации = Неопределено,"",ТекстРекомендации);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьВременныеФайлыИзКаталога(КаталогСФайлами)
	
	Попытка
		УдалитьФайлы(КаталогСФайлами);
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Функция РазобратьПротоколВыгрузки(ФайлПротокола, ТекстОшибок)
	
	ЕстьОшибки = Ложь;
	Для Номер = 1 По ФайлПротокола.КоличествоСтрок() Цикл
		
		СтрокаРезультата = ФайлПротокола.ПолучитьСтроку(Номер);
		
		Если (ПустаяСтрока(СтрокаРезультата) И Не ЕстьОшибки)
			Или СтрНайти(СтрокаРезультата, "Начало выгрузки") = 1
			Или СтрНайти(СтрокаРезультата, "Окончание выгрузки") = 1
			Или СтрНайти(СтрокаРезультата, "Выгружено объектов") = 1
			Или СтрНайти(СтрокаРезультата, "Ошибка.") = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибки = Истина;
		Если Не ПустаяСтрока(ТекстОшибок) Тогда
			ТекстОшибок = ТекстОшибок + Символы.ПС;
		КонецЕсли;
		ТекстОшибок = ТекстОшибок + СтрокаРезультата;
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция МакетОбработки(ИмяМакета)
	
	Возврат Обработки.ПомощникПереходаСПрошлыхПрограммЗарплатаКадры.ПолучитьМакет(ИмяМакета); 
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСписокИБ8()
	
	ТаблицаПути.Очистить();
	
	КаталогДанныхПользователя = "";
	
	#Если ВебКлиент Тогда
		
		КаталогДанныхПользователя = Вычислить("РабочийКаталогДанныхПользователя()");
		КаталогДанныхПользователя = Сред(КаталогДанныхПользователя, 1, СтрНайти(КаталогДанныхПользователя, "Roaming") + 6);
		
	#Иначе
		
		Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
			КаталогДанныхПользователя = Вычислить("РабочийКаталогДанныхПользователя()");
			КаталогДанныхПользователя = Сред(КаталогДанныхПользователя, 1, СтрНайти(КаталогДанныхПользователя, "Roaming") + 6);
		Иначе
			Оболочка = Новый COMОбъект("WScript.Shell");
			КаталогДанныхПользователя = Оболочка.ExpandEnvironmentStrings("%APPDATA%");
		КонецЕсли;
		
	#КонецЕсли
	
	Если НЕ ЗначениеЗаполнено(КаталогДанныхПользователя) Тогда
		Возврат;
	КонецЕсли;
	
	ЛокальныеИБ	= КаталогДанныхПользователя + "\1C\1CEStart\ibases.v8i";
	ОбщиеИБ		= КаталогДанныхПользователя + "\1C\1CEStart\ibases.v8l";
	
	Файл = Новый Файл(ЛокальныеИБ);
	Если Файл.Существует() Тогда
		ПрочитатьСписокБаз(ЛокальныеИБ);
	КонецЕсли;
	
	Файл = Новый Файл(ОбщиеИБ);
	Если Файл.Существует() Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ОбщиеИБ);
		Для НомерСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
			ОбщаяИБ = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
			Файл = Новый Файл(ОбщаяИБ);
			Если Файл.Существует() Тогда
				ПрочитатьСписокБаз(ОбщаяИБ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПути.Сортировать("Имя");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСписокБаз(ПутьКФайлу)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлу);
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		ИмяИБ	= "";
		ПутьИБ	= "";
		Папка	= "";
		
		ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		Если Лев(ТекущаяСтрока,1) = "[" И Прав(ТекущаяСтрока,1) = "]" Тогда
			ИмяИБ = Сред(ТекущаяСтрока,2,СтрДлина(ТекущаяСтрока)-2);
			НомерСтроки = НомерСтроки + 1;
			ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
			Если СтрНайти(ТекущаяСтрока, "Connect=File=") <> 0 Тогда
				ПутьИБ = Сред(ТекущаяСтрока, 9, СтрДлина(ТекущаяСтрока)- 9);
				
				НоваяСтрока = ТаблицаПути.Добавить();
				НоваяСтрока.Имя		= ИмяИБ;
				НоваяСтрока.Путь	= ПутьИБ;
				
			ИначеЕсли СтрНайти(ТекущаяСтрока, "Connect=Srvr=") <> 0 Тогда
				ПутьИБ = Сред(ТекущаяСтрока, 9, СтрДлина(ТекущаяСтрока)- 9);
				
				НоваяСтрока = ТаблицаПути.Добавить();
				НоваяСтрока.Имя		= ИмяИБ;
				НоваяСтрока.Путь	= ПутьИБ;
				
			КонецЕсли;
			
			Если НомерСтроки >= КоличествоСтрок Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуПриСменеСтраницы()
	
	ЗаголовокТекущейСтраницы = ЗаголовокСтраницы(ЭтаФорма);
	ОбновитьКнопки(ЭтаФорма);   
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКнопки(Форма)
	
	ТекущаяСтраницаИмя = Форма.Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница.Имя;
	ИндексСтраницы = Форма.ПорядокСтраниц.Найти(ТекущаяСтраницаИмя);
	Если ИндексСтраницы = Неопределено Тогда
		ИндексСтраницы = 0;
	КонецЕсли;
	
	Форма.Элементы.Назад.Доступность  = (ИндексСтраницы > 0);
	
	ПоследняяСтраница = Не (ИндексСтраницы < (Форма.ПорядокСтраниц.Количество() - 1));
	
	Форма.Элементы.Вперед.Доступность = Не ПоследняяСтраница;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокСтраницы(Форма) Экспорт

	ТекущаяСтраницаИмя = Форма.Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница.Имя;
	Если Форма.ЗаголовкиСтраниц.Свойство(ТекущаяСтраницаИмя) Тогда
		Возврат Форма.ЗаголовкиСтраниц[ТекущаяСтраницаИмя];
	КонецЕсли;
	
	Возврат "";

КонецФункции

&НаСервере
Функция ЗаголовкиСтраницПомощника()

	СтруктураСтраниц = Новый Структура;
	СтруктураСтраниц.Вставить("ПомощникНачало", НСтр("ru = 'Начало...'"));
	СтруктураСтраниц.Вставить("ПереносДанныхНачало", НСтр("ru = 'Выбор варианта переноса данных'"));
	СтруктураСтраниц.Вставить("ПереносДанныхИзИБ", НСтр("ru = 'Выбор информационной базы для переноса данных'"));
	СтруктураСтраниц.Вставить("ПереносДанныхИзИБНастройки", НСтр("ru = 'Настройки переноса данных'"));
	СтруктураСтраниц.Вставить("ВыгрузкаЗагрузкаДанныхИзИБ", НСтр("ru = 'Перенос данных из информационной базы'"));
	СтруктураСтраниц.Вставить("ЗагрузкаДанныхИзФайла", НСтр("ru = 'Загрузка данных из файлов'"));
	
	Возврат СтруктураСтраниц;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПорядокСтраницПоНастройкам(Форма)
	
	Элементы = Форма.Элементы;
	ПорядокСтраниц = Новый Массив;
	
	ПереносИзИБДоступен = Не (Форма.ИспользуетсяБазоваяВерсия Или Форма.ИспользуетсяВебКлиент Или Форма.РазделениеВключено);
	
	ПорядокСтраниц.Добавить("ПомощникНачало");
	Если ПереносИзИБДоступен Тогда
		ПорядокСтраниц.Добавить("ПереносДанныхНачало");
	КонецЕсли;
	
	Если Форма.ПереносДанныхЧерезФайл = 0 Тогда
		ПорядокСтраниц.Добавить("ПереносДанныхИзИБ");
		ПорядокСтраниц.Добавить("ПереносДанныхИзИБНастройки");
		ПорядокСтраниц.Добавить("ВыгрузкаЗагрузкаДанныхИзИБ");
	Иначе
		ПорядокСтраниц.Добавить("ЗагрузкаДанныхИзФайла");
	КонецЕсли;
	
	Возврат ПорядокСтраниц;
	
КонецФункции

&НаКлиенте
Процедура Перерисовать(Этап, Состояние = "Ошибка", ОднаКартинка = Ложь)
	
	ИмяЗакладки = "НеВыполняется";
	Если Состояние = "ВОчереди" Тогда
		НомерСостояния = 1;
		
	ИначеЕсли Состояние = "Выполняется" Тогда
		НомерСостояния = 2;
		ИмяЗакладки = "Выполняется";
		
	ИначеЕсли Состояние = "Ошибка" Тогда
		НомерСостояния = 3;
		ИмяЗакладки = "Выполнено";
		
	ИначеЕсли Состояние = "Успех" Тогда
		НомерСостояния = 4;
		ИмяЗакладки = "Выполнено";
		
	Иначе
		НомерСостояния = 3;
		ИмяЗакладки = "Выполнено";
		
	КонецЕсли;
	
	Если ОднаКартинка Тогда
		
		ЭтапСтрока = Этапы.Получить(Этап);
		Элементы[ЭтапСтрока].ТекущаяСтраница    = Элементы[ЭтапСтрока + НомерСостояния];
		Элементы[ЭтапСтрока + "Надпись"].ТекущаяСтраница = Элементы[ЭтапСтрока + "Надпись" + ИмяЗакладки];
		
	Иначе
		
		Для НомерКартинки = Этап По Этапы.Количество() Цикл
			ЭтапСтрока = Этапы.Получить(НомерКартинки);
			Элементы[ЭтапСтрока].ТекущаяСтраница    = Элементы[ЭтапСтрока + НомерСостояния];
			Элементы[ЭтапСтрока + "Надпись"].ТекущаяСтраница = Элементы[ЭтапСтрока + "Надпись" + ИмяЗакладки];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьОтчетОбОшибках()
	
	ОтчетОбОшибках = Новый ТабличныйДокумент;
	ПодготовитьОтчетОбОшибкахСервер(ОтчетОбОшибках);
	ОтчетОбОшибках.ТолькоПросмотр		= Истина;
	ОтчетОбОшибках.ОтображатьЗаголовки	= Ложь;
	ОтчетОбОшибках.ОтображатьСетку		= Ложь;
	ОтчетОбОшибках.Показать(НСтр("ru='Список ошибок'"));
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОтчетОбОшибкахСервер(ОтчетОбОшибках)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПомощникПереходаСПрошлыхПрограммЗарплатаКадры.СписокОшибок");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Если ПереносДанныхЧерезФайл = 0 Тогда
		ОбластьШапка.Параметры.ИмяИБ = ИмяИБ;
		ОбластьШапка.Параметры.ПутьКИБ = ПутьКИБ;
	Иначе
		ОбластьШапка.Параметры.ИмяИБ = Нстр("ru = 'Загрузка из файлов'");
		ОбластьШапка.Параметры.ПутьКИБ = КаталогСФайлами;
	КонецЕсли;
	
	ОтчетОбОшибках.Вывести(ОбластьШапка);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		ОбластьСтрока.Параметры.Этап = СтрокаТаблицы.Этап;
		ОбластьСтрока.Параметры.Ошибка = СтрокаТаблицы.Ошибка;
		ОбластьСтрока.Параметры.Рекомендации = СтрокаТаблицы.Рекомендации;
		ОбластьСтрока.Параметры.Расшифровка = СтрокаТаблицы.Расшифровка;
		
		ОтчетОбОшибках.Вывести(ОбластьСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлы(ИмяМакета)
	
	ДополнительныеПараметры = Новый Структура("ИмяМакета", ИмяМакета);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресМакетаВоВременномХранилище(ИмяМакета, УникальныйИдентификатор)
	
	Возврат ПоместитьВоВременноеХранилище(МакетОбработки(ИмяМакета), УникальныйИдентификатор);  
	
КонецФункции

&НаКлиенте
Процедура ПодключениеРасширенияРаботыСФайламиЗавершение(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ИмяМакета = ДополнительныеПараметры.ИмяМакета;
	АдресФайла = АдресМакетаВоВременномХранилище(ИмяМакета, ЭтаФорма.УникальныйИдентификатор);
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		
		ДиалогВыбораФайла				= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайла.Заголовок		= "Укажите каталог для сохранения помощника выгрузки данных";
		
		ДополнительныеПараметры.Вставить("АдресФайла", АдресФайла);
		ДополнительныеПараметры.Вставить("ИмяМакета", ИмяМакета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеФайловВыборКаталогаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
		
	Иначе
		
		Попытка
			
			ПолучитьФайл(АдресФайла, ИмяМакета + ".epf", Истина);
			Состояние(НСтр("ru = 'Файл обработки выгрузки успешно сохранен'"), , АдресФайла);
			
		Исключение
			ШаблонСообщения = НСтр("ru = 'При записи файла возникла ошибка
			|%1'");
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписатьОшибкуВЖурнал(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеФайловВыборКаталогаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество()>0 Тогда
		
		Каталог      = ВыбранныеФайлы.Получить(0);
		АдресФайла  = ДополнительныеПараметры.АдресФайла;
		ИмяМакета   = ДополнительныеПараметры.ИмяМакета;
		
		ПередаваемыеФайлы = Новый Массив;
		ПереданныеФайлы   = Новый Массив;
		МассивВызовов     = Новый Массив;
		
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(Каталог + "\" + ИмяМакета + ".epf", АдресФайла);			
		ПередаваемыеФайлы.Добавить(ОписаниеФайла);
		
		МассивВызовов.Добавить(Новый Массив);
		
		МассивВызовов[0].Добавить("ПолучитьФайлы");
		МассивВызовов[0].Добавить(ПередаваемыеФайлы);
		МассивВызовов[0].Добавить(ПереданныеФайлы);
		МассивВызовов[0].Добавить("");
		МассивВызовов[0].Добавить(Ложь);
		
		ДополнительныеПараметры.Вставить("ПередаваемыеФайлы", ПередаваемыеФайлы);
		ДополнительныеПараметры.Вставить("Каталог", Каталог);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеФайловЗапросРазрешенийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьЗапросРазрешенияПользователя(ОписаниеОповещения, МассивВызовов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеФайловЗапросРазрешенийЗавершение(РазрешенияПолучены, ДополнительныеПараметры) Экспорт
	
	Если РазрешенияПолучены Тогда
		
		ПередаваемыеФайлы = ДополнительныеПараметры.ПередаваемыеФайлы;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПолучениеФайлов(ОписаниеОповещения, ПередаваемыеФайлы, ДополнительныеПараметры.Каталог, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеФайловЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ИмяМакета   = ДополнительныеПараметры.ИмяМакета;
	Каталог     = ДополнительныеПараметры.Каталог;
	АдресФайла  = ДополнительныеПараметры.АдресФайла;
	
	ШаблонСообщения = НСтр("ru = 'Помощник выгрузки %1 записан в каталог: %2'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
	                 ИмяМакета + ".epf", Каталог);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	УдалитьИзВременногоХранилища(АдресФайла);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОшибкуВЖурнал(ТекстСообщения)

	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Перенос данных из ИБ 1С 7'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,, 
		ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыСтраницыПослеПодключенияРасширения(Подключено, ДополнительныеПараметры) Экспорт
	
	РасширениеПодключено = Подключено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КаталогСФайлами",
		"Видимость",
		Подключено);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокФайловКомандаОбновитьСписокФайлов",
		"Видимость",
		Подключено);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВыборФайлаИнструкцияЗагрузки",
		"Видимость",
		Не Подключено);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ТаблицаПутиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаПути.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПутьКИБ	= Элементы.ТаблицаПути.ТекущиеДанные.Путь;
	ИмяИБ	= Элементы.ТаблицаПути.ТекущиеДанные.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереносДанныхЧерезИБПриИзменении(Элемент)
	
	ПорядокСтраниц   = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкам(ЭтаФорма));
	ОбновитьКнопки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереносДанныхЧерезФайлПриИзменении(Элемент)
	
	ПорядокСтраниц   = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкам(ЭтаФорма));
	ОбновитьКнопки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОшибкиНажатие(Элемент)
	
	ПодготовитьОтчетОбОшибках();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСФайламиПриИзменении(Элемент)
	
	Если ПустаяСтрока(КаталогСФайлами) Тогда
		ИнформационнаяНадписьКаталог = "";
		Возврат;
	КонецЕсли;
	ПроверитьКаталогСФайламиПослеВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСФайламиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Заголовок = НСтр("ru='Выберите каталог с файлами для загрузки'");
	ДиалогВыбораКаталога.Каталог = КаталогСФайлами;
	ДиалогВыбораКаталога.Показать(Новый ОписаниеОповещения("КаталогСФайламиПослеВыбора", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбслуживанияВыбораФайловЗагрузки

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗагрузкиФайлов()
	
	Параметры = Новый Структура("
	|ПолноеИмяФайлаИнструкции,
	|ВыполняетсяЗагрузкаИБ,
	|ВыполняетсяЗагрузкаФайлов");
	
	Параметры.ВыполняетсяЗагрузкаИБ = Ложь;
	Параметры.ВыполняетсяЗагрузкаФайлов = Ложь;
	
	Возврат Параметры;
	
КонецФункции

&НаКлиенте
Процедура КаталогСФайламиПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КаталогСФайлами = ВыбранныеФайлы[0];
	
	ПроверитьКаталогСФайламиПослеВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКаталогСФайламиПослеВыбора(ДополнительныеПараметры = Неопределено)

	Элементы.СтраницыРезультатФайл.ТекущаяСтраница = Элементы.ПроцессФайл;
	ЭтапКонвертации = "";
	
	// в выбранном каталоге должен быть файл с именем "ИнструкцияЗагрузки.txt"
	ПолноеИмяФайлаИнструкции = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогСФайлами, "ИнструкцияЗагрузки.txt");
	ФайлНаДиске = Новый Файл(ПолноеИмяФайлаИнструкции);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ПараметрыЗагрузкиФайлов();
	КонецЕсли;	
	
	ДополнительныеПараметры.ПолноеИмяФайлаИнструкции = ПолноеИмяФайлаИнструкции;
	Оповещение = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаИнструкцииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);	

КонецПроцедуры


&НаКлиенте
Процедура ПроверкаСуществованияФайлаИнструкцииЗавершение(ФайлСуществует, ДополнительныеПараметры) Экспорт
	
	Если Не ФайлСуществует Тогда
		ТекстПредупреждения = НСтр("ru = 'ВНИМАНИЕ! В выбранном каталоге отсутствуют файлы для загрузки. Проверьте правильность указания каталога с файлами для загрузки.'");
		ИнформационнаяНадписьКаталог = ТекстПредупреждения;
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		
		ИнформационнаяНадписьКаталог = "";
		ЗаполнитьТаблицуФайловЗагрузки(ДополнительныеПараметры);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответсвиеИнструкцииЗагрузкиИФайловВКаталоге(ДополнительныеПараметры)
	
	// Максимальное количество файлов в инструкции
	МаксимальноеКолФайлов = 50;
	КоличествоФайлов = ТаблицаФайловЗагрузки.Количество();
	
	Если КоличествоФайлов > МаксимальноеКолФайлов Тогда
		ТекстПредупреждения = НСтр("ru = 'ВНИМАНИЕ! В инструкции для загрузки превышено максимальное количество файлов.'");
		ИнформационнаяНадписьКаталог = ТекстПредупреждения;
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		// файл с инструкцией существует, получим имена файлов из каталога и сравним их с инструкцией
		Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПоискаФайлов", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПоискФайлов(Оповещение, КаталогСФайлами, "*.xml");
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьРезультатПоискаФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстПредупреждения = "";
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В каталоге «%1» не найдено файлов для загрузки.'"), КаталогСФайлами);
		
	Иначе
		
		ИменаФайлов = Новый Массив;
		Для каждого ОписаниеФайла Из НайденныеФайлы Цикл
			ИменаФайлов.Добавить(ОписаниеФайла.Имя);
		КонецЦикла;
		
		ИменаФайловИзИнструкции = Новый Массив;
		ТекстОписаниеСведений = "";
		Для каждого ЭлементКоллекции Из ТаблицаФайловЗагрузки Цикл
			Если ИменаФайлов.Найти(ЭлементКоллекции.ИмяФайла) = Неопределено Тогда
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В каталоге «%1» отсутствуют файлы, указанные в инструкции для загрузки.'"), КаталогСФайлами);
			КонецЕсли;
			ТекстОписаниеСведений = ТекстОписаниеСведений + Символы.ПС + ЭлементКоллекции.ОписаниеФайла;
		КонецЦикла;
		
	КонецЕсли;
	
	ЕстьОшибки = Не ПустаяСтрока(ТекстПредупреждения);
	Если ЕстьОшибки Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'В выбранном каталоге присутствуют следующие сведения для загрузки:'");
		ТекстПредупреждения = ТекстПредупреждения + ТекстОписаниеСведений;	
	КонецЕсли;
	
	ИнформационнаяНадписьКаталог = ТекстПредупреждения;
	
	Если Не ЕстьОшибки И ДополнительныеПараметры.ВыполняетсяЗагрузкаФайлов Тогда
		ЗагрузитьФайлыПереносаИзКаталога(КаталогСФайлами);	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьТаблицуФайловЗагрузки(ДополнительныеПараметры)

	ТаблицаФайловЗагрузки.Очистить();
	ПротоколЗагрузки = Новый ТекстовыйДокумент;
	
	ПолноеИмяФайлаИнструкции = ДополнительныеПараметры.ПолноеИмяФайлаИнструкции;
	ДополнительныеПараметры.Вставить("ПротоколЗагрузки", ПротоколЗагрузки);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьТаблицуФайловЗагрузкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПротоколЗагрузки.НачатьЧтение(Оповещение,ПолноеИмяФайлаИнструкции);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуФайловЗагрузкиЗавершение(ДополнительныеПараметры) Экспорт

	ПротоколЗагрузки = ДополнительныеПараметры.ПротоколЗагрузки;
	
	КоличествоФайлов = ПротоколЗагрузки.КоличествоСтрок();
	
	ИндексФайла = 0;
	Для Сч = 1 По КоличествоФайлов Цикл
		ИмяФайлаДляЗагрузки = ПротоколЗагрузки.ПолучитьСтроку(Сч);
		Если ПустаяСтрока(ИмяФайлаДляЗагрузки) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаФайловЗагрузки.Добавить();
		НоваяСтрока.Номер = ИндексФайла;
		НоваяСтрока.ИмяФайла = ИмяФайлаДляЗагрузки;
		НоваяСтрока.ОписаниеФайла = ИмяФайлаДляЗагрузки;
		ИндексФайла = ИндексФайла + 1;
	КонецЦикла;
	
	Если ДополнительныеПараметры.ВыполняетсяЗагрузкаИБ Тогда
		ЗагрузитьФайлыПереносаИзКаталога(КаталогВыгрузкиЗагрузки);
	Иначе
		ПроверитьСоответсвиеИнструкцииЗагрузкиИФайловВКаталоге(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлыИзКаталогаПослеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ИнформационнаяНадписьКаталог = "";
		ОписаниеВыбранногоФайла = Неопределено;
		Возврат;
	КонецЕсли;
	
	ОписаниеВыбранногоФайла = Новый ОписаниеПередаваемогоФайла(ВыбранноеИмяФайла, Адрес);
	
	ШаблонСообщения = НСтр("ru = 'Выбран файл:  %1'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОписаниеВыбранногоФайла.Имя);
	ИнформационнаяНадписьКаталог = ТекстСообщения;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	КаталогВыгрузкиЗагрузки = "";
	ТаблицаОшибок.Очистить();
	
	Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница	= Элементы.СтраницаЗаголовокПереносВыполняется;
	Элементы.СтраницыРезультат.ТекущаяСтраница			= Элементы.Процесс;
	
	Перерисовать(1, "ВОчереди");
	
	НетОшибок = ВыгрузкаИнформационнойБазыНеБазовая();
	
	Если НетОшибок Тогда
		
		ПолноеИмяФайлаИнструкции = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, "ИнструкцияЗагрузки.txt");
		ДополнительныеПараметры  = ПараметрыЗагрузкиФайлов();
		ДополнительныеПараметры.ВыполняетсяЗагрузкаИБ = Истина;
		ДополнительныеПараметры.ПолноеИмяФайлаИнструкции = ПолноеИмяФайлаИнструкции;
		ЗаполнитьТаблицуФайловЗагрузки(ДополнительныеПараметры);
		
	Иначе
		
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница = Элементы.СтраницаЗаголовокПереносЗавершен;
		Элементы.СтраницыРезультат.ТекущаяСтраница        = Элементы.Ошибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзФайлов(Команда)
	
	Если РасширениеПодключено Тогда
		
		Если ПустаяСтрока(КаталогСФайлами) Тогда
			ТекстПредупреждения = НСтр("ru = 'Не указан каталог с файлами для загрузки.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		Элементы.СтраницыРезультатФайл.ТекущаяСтраница = Элементы.ПроцессФайл;
		
		ТаблицаОшибок.Очистить();
		ПроверитьФайлыЗагрузить();
		
	Иначе
		
		Если ОписаниеВыбранногоФайла = Неопределено Тогда
			ТекстПредупреждения = НСтр("ru = 'Не выбран файл для загрузки.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;	
		КонецЕсли;
		
		ЭтапКонвертации = НСтр("ru = 'Загрузка файла'");
		
		РезультатВыполнения = ЗагрузитьВыбранныйФайлНаСервере();
		
		Если Не ПустаяСтрока(РезультатВыполнения) Тогда
			ЗафиксироватьОшибкуИСообщить(ЭтаФорма, РезультатВыполнения, 0, Ложь);
			ЗагрузитьФайлыПереносаЗавершение(Ложь);
			Возврат;
		КонецЕсли;
		
		ЗагрузитьФайлыПереносаЗавершение(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВерсиюКомпоненты(Команда)
	
	ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель();
	
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	
	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница.Имя;
	ОбработатьКомандуСменыСтраницы(1);
	ВыполнитьДействияПослеСменыСтраницы(ТекущаяСтраницаИмя);
	ОбновитьФормуПриСменеСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница.Имя;
	ОбработатьКомандуСменыСтраницы(-1);
	ВыполнитьДействияПослеСменыСтраницы(ТекущаяСтраницаИмя);
	ОбновитьФормуПриСменеСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОбработкуВыгрузки(Команда)
	
	ЗаписатьФайлы("ОбработкаВыгрузкиЗаписиСтажаПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуПомощника(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьСписокФайлов(Команда)
	
	Если ПустаяСтрока(КаталогСФайлами) Тогда
		Возврат;
	КонецЕсли;
	ПроверитьКаталогСФайламиПослеВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляЗагрузки(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьФайлыИзКаталогаПослеПомещенияФайла", ЭтотОбъект);
	НачатьПомещениеФайла(Обработчик, , , Истина, УникальныйИдентификатор);	
	
КонецПроцедуры


#КонецОбласти

#Область ПроцедурыИФункцииОбслуживанияВыгрузкиЗагрузки

&НаКлиенте
Функция ВыгрузкаИнформационнойБазыНеБазовая()
	
	ЭтапКонвертации = Нстр("ru = 'Подключение к информационной базе'");
	Перерисовать(1, "Выполняется", Истина);
	
	ИмяCOMСоединителя = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИмяCOMСоединителя;
	ИБИсточникФайловая = (СтрНайти(ВРег(ПутьКИБ), "FILE=") > 0);
	
	// создание соединения
	Попытка
		ИБИсточник = Новый COMObject(ИмяCOMСоединителя);
	Исключение
		
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 2, 15,,ИнформацияОбОшибке());
		ИБИсточник = "";
		Перерисовать(1);
		Возврат Ложь;
		
	КонецПопытки;
	
	СтрокаПодключения = ПутьКИБ;
	Если ЗначениеЗаполнено(Пользователь) Тогда
		СтрокаПодключения = СтрокаПодключения + ";Usr=""" + Пользователь + """";
	КонецЕсли;
	Если ЗначениеЗаполнено(Пароль) Тогда
		СтрокаПодключения = СтрокаПодключения + ";Pwd=""" + Пароль + """";
	КонецЕсли;
	
	Попытка
		ИБИсточник = ИБИсточник.connect(СтрокаПодключения);
	Исключение
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 2, 4,,ИнформацияОбОшибке());
		ИБИсточник = "";
		Перерисовать(1);
		Возврат Ложь;
	КонецПопытки;
	
	УИД = Новый УникальныйИдентификатор;
	КаталогВыгрузкиЗагрузки		= КаталогВременныхФайлов() + "ПереносДанных" + УИД + "\";  
	СоздатьКаталог(КаталогВыгрузкиЗагрузки);
	
	// двоичные данные обработки выгрузки
	ДвоичныеДанныеОбработкаВыгрузки = МакетОбработки("ОбработкаВыгрузкиЗаписиСтажаПФР");
	
	// макет правил обслуживания запуска обработки выгрузки
	ДвоичныеДанныеПравила = МакетОбработки("ПравилаОбслуживанияВыгрузкиДанных");
	
	ИмяФайлаОбработкиВыгрузки 				= ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, "ОбработкаВыгрузки.epf");
	ИмяФайлаПравилОбслуживанияВыгрузки 		= ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, "ПравилаОбслуживанияВыгрузки.xml");
	ИмяФайлаПротоколаОбслуживанияВыгрузки 	= ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, "ПротоколОбслуживанияВыгрузки.txt");
	ИмяФайлаОбслуживанияВыгрузки 			= ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, "ОбслуживаниеВыгрузки.xml");
	
	ДвоичныеДанныеОбработкаВыгрузки.Записать(ИмяФайлаОбработкиВыгрузки);
	ДвоичныеДанныеПравила.Записать(ИмяФайлаПравилОбслуживанияВыгрузки);
	
	// Шаг № 2 выгрузка данных
	ЭтапКонвертации = Нстр("ru = 'Выгрузка данных'");
	Перерисовать(2, "Выполняется", Истина);
	
	Попытка
		
		ПараметрыПравил = Новый Структура;
		ПараметрыПравил.Вставить("КаталогДляВыгрузки", КаталогВыгрузкиЗагрузки);
		ПараметрыПравил.Вставить("МесяцНачалаЭксплуатации", НачалоМесяца(Объект.МесяцНачалаЭксплуатации));
		ПараметрыПравил.Вставить("ИмяФайлаОбработки", ИмяФайлаОбработкиВыгрузки);
		
		ОбработкаОбмена = ИБИсточник.Обработки.УниверсальныйОбменДаннымиXML.Создать();
		ОбработкаОбмена.РежимОбмена												= "Выгрузка";
		ОбработкаОбмена.НеВыводитьНикакихИнформационныхСообщенийПользователю	= Истина;
		ОбработкаОбмена.ИмяФайлаПравилОбмена									= ИмяФайлаПравилОбслуживанияВыгрузки;
		ОбработкаОбмена.ИмяФайлаПротоколаОбмена									= ИмяФайлаПротоколаОбслуживанияВыгрузки;
		ОбработкаОбмена.ЗагрузитьПравилаОбмена();
		
		ЗаполнитьЗначенияСвойств(ОбработкаОбмена.Параметры, ПараметрыПравил);
		
	Исключение
		
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 5, 6,,ИнформацияОбОшибке());
		
		ИБИсточник = "";
		Перерисовать(2);
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		Возврат Ложь;
		
	КонецПопытки;
	
	
	Попытка
		
		ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбслуживанияВыгрузки;
		ОбработкаОбмена.ВыполнитьВыгрузку();
		
		// выполним анализ протокола обслуживания выгрузки
		ФайлПротокола = Новый ТекстовыйДокумент;
		ФайлПротокола.Прочитать(ИмяФайлаПротоколаОбслуживанияВыгрузки);
		ТекстОшибок = "";
		ЕстьОшибки = РазобратьПротоколВыгрузки(ФайлПротокола, ТекстОшибок);
		Если ЕстьОшибки Тогда
			
			ЗафиксироватьОшибкуИСообщить(ЭтаФорма, ТекстОшибок, 6, Ложь);
			УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
			
			Перерисовать(2);
			
			Возврат Ложь;
			
		КонецЕсли;
		
		
	Исключение
		
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 7, 8, Ложь, ИнформацияОбОшибке());
		
		ИБИсточник = "";
		Перерисовать(2);
		
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаОбработкиВыгрузки);
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаПравилОбслуживанияВыгрузки);
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаПротоколаОбслуживанияВыгрузки);
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаОбслуживанияВыгрузки);
	
	ИБИсточник = "";
	
	Перерисовать(2, "Успех", Истина);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьФайлыПереносаИзКаталога(КаталогСФайламиДляЗагрузки)
	
	Если ПереносДанныхЧерезФайл = 0 Тогда
		// Шаг № 3 инициализация обмена и загрузка данных.
		ЭтапКонвертации = НСтр("ru = 'Загрузка данных'");
		Перерисовать(3, "Выполняется", Истина);
	КонецЕсли;	
	
	Если СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		
		Для Индекс = 0 По ТаблицаФайловЗагрузки.Количество() - 1 Цикл
			
			ЭтапКонвертации = "Загрузка данных: " + ТаблицаФайловЗагрузки[Индекс].ОписаниеФайла;
			ОбработкаПрерыванияПользователя();
			ОбновитьОтображениеДанных();
			
			РезультатВыполнения = ВыполнитьЗагрузкуФайлаНаСервере(ТаблицаФайловЗагрузки[Индекс].ИмяФайла, КаталогСФайламиДляЗагрузки);
			
			Если Не ПустаяСтрока(РезультатВыполнения) Тогда
				ЗафиксироватьОшибкуИСообщить(ЭтаФорма, РезультатВыполнения, 0, Ложь);
				ЗагрузитьФайлыПереносаЗавершение(Ложь);
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗагрузитьФайлыПереносаЗавершение(Истина);
		
	ИначеЕсли ИспользуетсяВебКлиент Тогда
		
		ЗагрузитьФайлыПереносаКСВебКлиент(КаталогСФайламиДляЗагрузки);
		
	Иначе	
		
		ЗагрузитьФайлыПереносаКС(КаталогСФайламиДляЗагрузки);
		
	КонецЕсли;	

КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьФайлыПереносаКСВебКлиент(КаталогСФайламиДляЗагрузки)
	
	ОписаниеЭтапа = ТаблицаФайловЗагрузки[0].ОписаниеФайла;
	ИмяФайлаДанных = ТаблицаФайловЗагрузки[0].ИмяФайла;
	
	ЭтапКонвертации = "Загрузка данных: " + ОписаниеЭтапа;
	ПолноеИмяФайлаДанных = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогСФайламиДляЗагрузки, ИмяФайлаДанных);
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьФайлПереносаПослеПомещенияФайла", ЭтотОбъект);
	НачатьСозданиеДвоичныхДанныхИзФайла(Обработчик,ПолноеИмяФайлаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлПереносаПослеПомещенияФайла(ДвоичныеДанные, ДополнительныеПараметры) Экспорт
	
	АдресаЧастейФайла = Новый Массив;
	АдресаЧастейФайла.Добавить(ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор));
	РезультатВыполнения = ПолучитьИЗагрузитьФайлПереносаНаСервере(АдресаЧастейФайла);
	Если Не ПустаяСтрока(РезультатВыполнения) Тогда
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, РезультатВыполнения, 0, Ложь);
		ЗагрузитьФайлыПереносаЗавершение(Ложь);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьФайлыПереносаЗавершение(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыПереносаКС(КаталогСФайламиДляЗагрузки)
	
	Для ИндексФайла = 0 По ТаблицаФайловЗагрузки.Количество() - 1 Цикл
		
		ОписаниеЭтапа = ТаблицаФайловЗагрузки[ИндексФайла].ОписаниеФайла;
		ИмяФайлаДанных = ТаблицаФайловЗагрузки[ИндексФайла].ИмяФайла;
		
		ЭтапКонвертации = "Загрузка данных: " + ОписаниеЭтапа;
		ОбработкаПрерыванияПользователя();
		ОбновитьОтображениеДанных();
		
		ПолноеИмяФайлаДанных = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогСФайламиДляЗагрузки, ИмяФайлаДанных);
		
		#Если Не ВебКлиент Тогда
			ЧастиФайла = РазделитьФайл(ПолноеИмяФайлаДанных, 524288000);   
		#Иначе
			ЧастиФайла  = Новый Массив;
		#КонецЕсли
		
		АдресаЧастейФайла = Новый Массив;
		Для Каждого ЧастьФайла Из ЧастиФайла Цикл
			АдресаЧастейФайла.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ЧастьФайла), УникальныйИдентификатор));
			УдалитьВременныеФайлыИзКаталога(ЧастьФайла);
		КонецЦикла;
		
		РезультатВыполнения = ПолучитьИЗагрузитьФайлПереносаНаСервере(АдресаЧастейФайла);
		
		Если Не ПустаяСтрока(РезультатВыполнения) Тогда
			ЗафиксироватьОшибкуИСообщить(ЭтаФорма, РезультатВыполнения, 0, Ложь);
			ЗагрузитьФайлыПереносаЗавершение(Ложь);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьФайлыПереносаЗавершение(Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИЗагрузитьФайлПереносаНаСервере(АдресаЧастейФайла)

	ИменаЧастей = Новый Массив;
	
	Для каждого АдресФайла Из АдресаЧастейФайла Цикл
	
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ИменаЧастей.Добавить(ИмяВременногоФайла);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		УдалитьИзВременногоХранилища(АдресФайла);
	
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ОбъединитьФайлы(ИменаЧастей, ИмяВременногоФайла);
	Для каждого ИмяЧастиФайла Из ИменаЧастей Цикл
		УдалитьВременныеФайлыИзКаталога(ИмяЧастиФайла);
	КонецЦикла;
	
	РезультатВыполнения = ВыполнитьЗагрузкуФайлаНаСервере(ИмяВременногоФайла);
	УдалитьВременныеФайлыИзКаталога(ИмяВременногоФайла);
	
	Возврат РезультатВыполнения;

КонецФункции 

&НаСервере
Функция ЗагрузитьВыбранныйФайлНаСервере()

	// Получим данные из временного хранилища и запишем их на диск.
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ДанныеФайла = ПолучитьИзВременногоХранилища(ОписаниеВыбранногоФайла.Хранение);
	ДанныеФайла.Записать(ИмяВременногоФайла);
	
	РезультатВыполнения = ВыполнитьЗагрузкуФайлаНаСервере(ИмяВременногоФайла);
	УдалитьВременныеФайлыИзКаталога(ИмяВременногоФайла);
	
	Возврат РезультатВыполнения;

КонецФункции

&НаСервере
Функция ВыполнитьЗагрузкуФайлаНаСервере(ИмяФайлаДанных, КаталогСФайлами = "")
	
	ИмяФайлаПравилаЗагрузки = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеПравилаЗагрузки = МакетОбработки("ПравилаЗагрузкиДанныхЗаписиСтажаПФР");
	ДвоичныеДанныеПравилаЗагрузки.Записать(ИмяФайлаПравилаЗагрузки);
	
	ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.РежимОбмена = "Загрузка";
	ОбработкаОбмена.БезопаснаяЗагрузка   = Истина;
	ОбработкаОбмена.ИмяФайлаПравилОбмена = ИмяФайлаПравилаЗагрузки;
	ОбработкаОбмена.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
	
	РезультатЗагрузки = "";
	Если ПустаяСтрока(КаталогСФайлами) Тогда
		ИмяФайлаОбмена = ИмяФайлаДанных;
	Иначе
		ИмяФайлаОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогСФайлами, ИмяФайлаДанных);
	КонецЕсли;
	ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;

	Попытка
		
		ОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
		
	Исключение
		
		УдалитьВременныеФайлыИзКаталога(ИмяФайлаПравилаЗагрузки);
		
		РезультатЗагрузки = НСтр("ru = 'При чтении данных произошла ошибка:'") + Символы.ПС
		+ ОписаниеОшибки()+ Символы.ПС 
		+ НСтр("ru = 'Ошибка в формате файла данных.'");
		
		Возврат РезультатЗагрузки;
		
	КонецПопытки;
	
	Если НЕ ОбработкаОбмена.мБылиПрочитаныПравилаОбменаПриЗагрузке Тогда
		
		РезультатЗагрузки = НСтр("ru = 'При чтении правил обмена данными произошла ошибка.'");
		
	Иначе
		
		ОбработкаОбмена.ВыполнитьЗагрузку();
		Если ОбработкаОбмена.ФлагОшибки Тогда
			Если ТипЗнч(ОбработкаОбмена.Данные) = Тип("Строка") Тогда
				РезультатЗагрузки = ОбработкаОбмена.Данные;
			Иначе
				РезультатЗагрузки = НСтр("ru = 'Не удалось произвести загрузку данных. Проверьте служебные сообщения в окне сообщений.'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаПравилаЗагрузки);
	
	Возврат РезультатЗагрузки;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьФайлыПереносаЗавершение(ЗагрузкаВыполнена)
	
	УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
	
	Если ПереносДанныхЧерезФайл = 1 Тогда
		
		Если ЗагрузкаВыполнена Тогда
			Элементы.СтраницыРезультатФайл.ТекущаяСтраница	= Элементы.УспехФайл;
			Элементы.ЗагрузитьФайлы.Доступность		= Ложь;
		Иначе
			Элементы.СтраницыРезультатФайл.ТекущаяСтраница		= Элементы.ОшибкиФайл;
		КонецЕсли;
		
	Иначе	
		Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница	= Элементы.СтраницаЗаголовокПереносЗавершен;
		Если ЗагрузкаВыполнена Тогда
			Перерисовать(3, "Успех", Истина);
			Элементы.СтраницыРезультат.ТекущаяСтраница	= Элементы.Успех;
			Элементы.ЗагрузитьДанные.Доступность		= Ложь;
		Иначе
			Элементы.СтраницыРезультат.ТекущаяСтраница		= Элементы.Ошибки;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьКнопки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФайлыЗагрузить()

	Если Не ЗначениеЗаполнено(КаталогСФайлами) Тогда
		
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ПараметрыЗагрузкиФайлов();
	ДополнительныеПараметры.ВыполняетсяЗагрузкаФайлов = Истина;
	ПроверитьКаталогСФайламиПослеВыбора(ДополнительныеПараметры);

КонецПроцедуры


#КонецОбласти

#Область ОбслуживаниеПереходовПоСтраницам

&НаКлиенте
Процедура ВыполнитьДействияПослеСменыСтраницы(БылаСтраницаИмя)
	
	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница.Имя;
	
	Если ТекущаяСтраницаИмя = "ПереносДанныхИзИБ" И БылаСтраницаИмя = "ПереносДанныхНачало" Тогда
		
		ПолучитьСписокИБ8();
				
		Если Не ЗначениеЗаполнено(Объект.МесяцНачалаЭксплуатации) Тогда
			Объект.МесяцНачалаЭксплуатации = Дата(2017,11,1);
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачалаЭксплуатации", "МесяцНачалаЭксплуатацииСтрокой");
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраницаИмя = "ВыгрузкаЗагрузкаДанныхИзИБ" Тогда
		
		Перерисовать(1, "ВОчереди");
		Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница	= Элементы.СтраницаЗаголовокПереносНеНачат;
		Элементы.СтраницыРезультат.ТекущаяСтраница			= Элементы.Процесс;
		ЭтапКонвертации = "";
		
	ИначеЕсли ТекущаяСтраницаИмя = "ЗагрузкаДанныхИзФайла" Тогда
		
		ТекстСообщения = НСтр("ru = 'Для загрузки файлов рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
		Обработчик = Новый ОписаниеОповещения("ПослеСменыСтраницыПослеПодключенияРасширения", ЭтотОбъект);
		ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик, ТекстСообщения);
		
		Элементы.СтраницыРезультатФайл.ТекущаяСтраница			= Элементы.ПроцессФайл;
		ЭтапКонвертации = "";
		
	ИначеЕсли ТекущаяСтраницаИмя = "ПереносДанныхНачало" Тогда
		//  вернулись на первую страницу, сбрасываем информацию о выполненном переносе
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуСменыСтраницы(Направление) Экспорт
	
	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница.Имя;
	ИндексСтраницы = ПорядокСтраниц.Найти(ТекущаяСтраницаИмя);
	Если ИндексСтраницы = Неопределено Тогда
		ИндексНовойСтраницы = 0;
	Иначе
		ИндексНовойСтраницы = ИндексСтраницы + Направление;
	КонецЕсли;
	
	Если ИндексНовойСтраницы > ПорядокСтраниц.ВГраница() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИндексНовойСтраницы < 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтраницаИмя = ПорядокСтраниц.Получить(ИндексНовойСтраницы);
	Если НоваяСтраницаИмя <> Неопределено Тогда
		НоваяСтраница = Элементы.Найти(НоваяСтраницаИмя); 
		Если НоваяСтраница <> Неопределено Тогда          
			Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница = НоваяСтраница;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры




#КонецОбласти




