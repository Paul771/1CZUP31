#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем МенеджерВременныхТаблиц;
Перем ОписаниеРасчитываемогоНабораНачислений;
Перем ОписаниеРасчитываемогоНабораУдержаний;
Перем МенеджерДанныхУчетаВремени;
Перем МенеджерКадровогоУчета;

Перем РасчетНачисленийИнициализирован;
Перем РасчитываемыйНаборНачисленийПустой;
Перем ВыполненныеОчередностиКаскадногоРасчетаНачислений;

Перем ВыполнятьКаскадноеНормированиеБазыНачислений;
Перем БазовыеЗаписиНачисленийНормируемыеКаскадно;
Перем КоэффициентыЗаписейКаскадногоРасчетаБазыНачислений;
Перем ЗависимостиКаскадногоРасчетаНачислений;

Перем РасчетУдержанийИнициализирован;
Перем РасчитываемыйНаборУдержанйПустой;

Перем ВыполнятьКаскадноеНормированиеБазыУдержаний;
Перем БазовыеЗаписиУдержанийНормируемыеКаскадно;
Перем КоэффициентыЗаписейКаскадногоРасчетаБазыУдержаний;
Перем ЗависимостиКаскадногоРасчетаУдержаний;
Перем ВыполненныеОчередностиКаскадногоРасчетаУдержаний;

Перем ТаблицыКУничтожению;
Перем УдерживаеимыеТаблицыРасчетаНачислений;
Перем УдерживаеимыеТаблицыРасчетаУдержаний;

#КонецОбласти

Процедура УстановитьРасчитывемыйНаборНачислений(УстанавливаемыйМенеджреВременныхТаблицы, ОписаниеУстанавливаемогоНабораНачислений, УстанавливаемеыйМенеджерДанныхУчетаВремени = Неопределено, УстанавливаемыйМенеджерКадровогоУчета = Неопределено) Экспорт
	МенеджерВременныхТаблиц = УстанавливаемыйМенеджреВременныхТаблицы;
	ОписаниеРасчитываемогоНабораНачислений = ОписаниеУстанавливаемогоНабораНачислений;
	
	Если РасчетНачисленийИнициализирован Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУничтожению);
		ТаблицыКУничтожению.Очистить();
		
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдерживаеимыеТаблицыРасчетаНачислений);
		УдерживаеимыеТаблицыРасчетаНачислений.Очистить();	
	КонецЕсли;	
	
	Если УстанавливаемеыйМенеджерДанныхУчетаВремени = Неопределено Тогда
		МенеджерДанныхУчетаВремени = УчетРабочегоВремениРасширенный.СоздатьМенеджерДанных(МенеджерВременныхТаблиц, ТекущаяДатаСеанса());
	Иначе
		МенеджерДанныхУчетаВремени = УстанавливаемеыйМенеджерДанныхУчетаВремени;
	КонецЕсли;
	
	Если УстанавливаемыйМенеджерКадровогоУчета = Неопределено Тогда
		МенеджерКадровогоУчета = КадровыйУчет;
	Иначе
		МенеджерКадровогоУчета = УстанавливаемыйМенеджерКадровогоУчета;
	КонецЕсли;
	
	ИнициализироватьРасчетБазыНачислений();
КонецПроцедуры	

Процедура УстановитьРасчитывемыйНаборУдержаний(УстанавливаемыйМенеджреВременныхТаблицы, ОписаниеУстанавливаемогоНабораУдержаний, УстанавливаемеыйМенеджерДанныхУчетаВремени = Неопределено, УстанавливаемыйМенеджерКадровогоУчета = Неопределено) Экспорт
	МенеджерВременныхТаблиц = УстанавливаемыйМенеджреВременныхТаблицы;
	ОписаниеРасчитываемогоНабораУдержаний = ОписаниеУстанавливаемогоНабораУдержаний;
	
	Если РасчетУдержанийИнициализирован Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУничтожению);
		ТаблицыКУничтожению.Очистить();
		
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдерживаеимыеТаблицыРасчетаУдержаний);
		УдерживаеимыеТаблицыРасчетаУдержаний.Очистить();	
	КонецЕсли;	
	
	Если УстанавливаемеыйМенеджерДанныхУчетаВремени = Неопределено Тогда
		МенеджерДанныхУчетаВремени = УчетРабочегоВремениРасширенный.СоздатьМенеджерДанных(МенеджерВременныхТаблиц, ТекущаяДатаСеанса());
	Иначе
		МенеджерДанныхУчетаВремени = УстанавливаемеыйМенеджерДанныхУчетаВремени;
	КонецЕсли;
	
	Если УстанавливаемыйМенеджерКадровогоУчета = Неопределено Тогда
		МенеджерКадровогоУчета = КадровыйУчет;
	Иначе
		МенеджерКадровогоУчета = УстанавливаемыйМенеджерКадровогоУчета;
	КонецЕсли;
	
	ИнициализироватьРасчетУжержаний();
КонецПроцедуры	

Процедура ИнициализироватьРасчетБазыНачислений() 
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, ОписаниеРасчитываемогоНабораНачислений.ИмяВТРасчитываемыеЗаписи) Тогда
		РасчитываемыйНаборНачисленийПустой = Истина;
		РасчетНачисленийИнициализирован = Истина;
		МенеджерКадровогоУчета = Неопределено; 
		МенеджерДанныхУчетаВремени = Неопределено;
		
		Возврат;
	КонецЕсли;	
		
	ОписаниеОтбора = ОписаниеОтбораВТБазовыеЗаписи();
	ОписаниеОтбора.ИмяВТОсновныеЗаписи = ОписаниеРасчитываемогоНабораНачислений.ИмяВТРасчитываемыеЗаписи;
	ОписаниеОтбора.ИмяТаблицыВедущиеВидыРасчета = ОписаниеРасчитываемогоНабораНачислений.ИмяТаблицыбазовыеЗаписи;
		
	ЗаполнитьОтборБазовыхЗаписейНачислений(ОписаниеОтбора);	
	
	ОписаниеВТБазовыеЗаписиРезультат = ОписаниеВТБазовыеЗаписиРезультат();
	ОписаниеВТБазовыеЗаписиРезультат.ИмяВТРезультат = "ВТБазовыеЗаписиНачислений";
	ОписаниеВТБазовыеЗаписиРезультат.КлючевыеПоля.Вставить("БазовыйПериодНачало", "БазовыйПериодОсновнойЗаписиНачало");
	ОписаниеВТБазовыеЗаписиРезультат.КлючевыеПоля.Вставить("БазовыйПериодКонец", "БазовыйПериодОсновнойЗаписиКонец");

	ОписаниеВТБазовыеЗаписиРезультат.ВыражениеПоляНеобходимоНормировать = 
	"	ВЫБОР
	|		КОГДА НЕ(БазовыеЗаписи.ПериодДействияНачало МЕЖДУ ОсновныеЗаписи.БазовыйПериодНачало И ОсновныеЗаписи.БазовыйПериодКонец)
	|				ИЛИ НЕ(БазовыеЗаписи.ПериодДействияКонец МЕЖДУ ОсновныеЗаписи.БазовыйПериодНачало И ОсновныеЗаписи.БазовыйПериодКонец)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	ОписаниеВТБазовыеЗаписиРезультат.Индексы.Добавить("Регистратор");
	ОписаниеВТБазовыеЗаписиРезультат.Индексы.Добавить("НомерСтроки");

	СоздатьВТБазовыеЗаписи(ОписаниеОтбора, ОписаниеВТБазовыеЗаписиРезультат, ОписаниеРасчитываемогоНабораНачислений.ОписаниеТекущегоНабораРегистраНачисления);
	УдерживаеимыеТаблицыРасчетаНачислений.Добавить("ВТБазовыеЗаписиНачислений");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеНеобходмыхДанных = ОписаниеНеобходмыхДанных();
	ЗаполнитьОписаниеНеобходмыхДанныхПоВТБазовыеЗаписи(ОписаниеВТБазовыеЗаписиРезультат.ИмяВТРезультат, ОписаниеНеобходмыхДанных);
		
	Если ОписаниеНеобходмыхДанных.НеобходимоПолучатьФПДБазовыхЗаписей 
		Или ОписаниеНеобходмыхДанных.НеобходимоКорректироватьПериодБазовыхЗаписей Тогда
	
		СоздатьВТБазовыеЗаписиПериоды(ОписаниеНеобходмыхДанных, ОписаниеРасчитываемогоНабораНачислений.ОписаниеТекущегоНабораРегистраНачисления, ОписаниеВТБазовыеЗаписиРезультат.ИмяВТРезультат, "ВТБазовыеЗаписиНачисленийПериоды");
		ИмяВТБазовыеЗаписиНачисленийПериоды = "ВТБазовыеЗаписиНачисленийПериоды";
		УдерживаеимыеТаблицыРасчетаНачислений.Добавить("ВТБазовыеЗаписиНачисленийПериоды");
	Иначе
		ИмяВТБазовыеЗаписиНачисленийПериоды = ОписаниеВТБазовыеЗаписиРезультат.ИмяВТРезультат;
	КонецЕсли;	

	ВедущиеЗаписиДляКаскадногоНормирования = Неопределено;
	Если ОписаниеНеобходмыхДанных.НеобходимоНормироватьЗаписиКаскадно Тогда
		ДанныеКаскадногоНормирования = ДанныеКаскадногоНормирования(ИмяВТБазовыеЗаписиНачисленийПериоды, ОписаниеРасчитываемогоНабораНачислений.ОписаниеТекущегоНабораРегистраНачисления);	
		
		БазовыеЗаписиНачисленийНормируемыеКаскадно = ДанныеКаскадногоНормирования.ЗаписиНормируемыеКаскадно;
		ВедущиеЗаписиДляКаскадногоНормирования = ДанныеКаскадногоНормирования.ЗаписиВедущихНачислений;
		ВыполнятьКаскадноеНормированиеБазыНачислений = Истина;
	КонецЕсли;
	
	Если ОписаниеНеобходмыхДанных.НеобходимоНормироватьЗаписи Тогда
		СоздатьВТКоэффициентыНормированияПоВремени(ИмяВТБазовыеЗаписиНачисленийПериоды, ВедущиеЗаписиДляКаскадногоНормирования, МенеджерДанныхУчетаВремени, "ВТКоэффицентыБазовыхЗаписейНачисленийПоВремени");
	Иначе
		СоздатьВТКоэффициентыНормированияПоВремениПустая("ВТКоэффицентыБазовыхЗаписейНачисленийПоВремени");
	КонецЕсли;	
	УдерживаеимыеТаблицыРасчетаНачислений.Добавить("ВТКоэффицентыБазовыхЗаписейНачисленийПоВремени");
		
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ ВТКоэффицентыБазовыхЗаписейНачисленийПоВремени КАК БазовыеЗаписиКоэффициентыПоВремени ГДЕ БазовыеЗаписиКоэффициентыПоВремени.ВедущаяЗаписьКаскадногоРасчета");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КоэффициентыЗаписейКаскадногоРасчетаБазыНачислений = Запрос.Выполнить().Выгрузить();
	
	Если ОписаниеНеобходмыхДанных.НеобходимоНормироватьЗаписиКаскадно Тогда
		ОтборЗависимыхВидовРасчета = БазовыеЗаписиНачисленийНормируемыеКаскадно.ВыгрузитьКолонку("ВидРасчета");
		ОтборЗависимыхВидовРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборЗависимыхВидовРасчета);
		ОтборБазовыхВидовРасчета = КоэффициентыЗаписейКаскадногоРасчетаБазыНачислений.ВыгрузитьКолонку("ВидРасчета");
		ОтборБазовыхВидовРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборБазовыхВидовРасчета);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборБазовыхВидовРасчета, ОтборЗависимыхВидовРасчета, Истина);
		
		ЗависимостиКаскадногоРасчетаНачислений = ЗависимоститиНачислений("ПланВидовРасчета.Начисления.БазовыеВидыРасчета", ОтборЗависимыхВидовРасчета, ОтборБазовыхВидовРасчета);
	КонецЕсли;	
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУничтожению);
	ТаблицыКУничтожению.Очистить();
	
	РасчетНачисленийИнициализирован = Истина;
	
	МенеджерКадровогоУчета = Неопределено;
	МенеджерДанныхУчетаВремени = Неопределено;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры	

Процедура ЗавершитьРасчетБазы() Экспорт
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУничтожению);
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдерживаеимыеТаблицыРасчетаНачислений);
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдерживаеимыеТаблицыРасчетаУдержаний);
	
	ТаблицыКУничтожению.Очистить();
	УдерживаеимыеТаблицыРасчетаНачислений.Очистить();
	УдерживаеимыеТаблицыРасчетаУдержаний.Очистить();
	
	РасчетНачисленийИнициализирован = Ложь;
	РасчетУдержанийИнициализирован = Ложь;
КонецПроцедуры	

Процедура ИнициализироватьРасчетУжержаний() 
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, ОписаниеРасчитываемогоНабораУдержаний.ИмяВТРасчитываемыеЗаписи) Тогда
		РасчитываемыйНаборУдержанйПустой = Истина;
		РасчетУдержанийИнициализирован = Истина;
		МенеджерКадровогоУчета = Неопределено; 
		МенеджерДанныхУчетаВремени = Неопределено;
		
		Возврат;
	КонецЕсли;	
		
	ОписаниеОтбора = ОписаниеОтбораВТБазовыеЗаписи();
	ОписаниеОтбора.ИмяВТОсновныеЗаписи = ОписаниеРасчитываемогоНабораУдержаний.ИмяВТРасчитываемыеЗаписи;
	ОписаниеОтбора.ИмяТаблицыВедущиеВидыРасчета = ОписаниеРасчитываемогоНабораУдержаний.ИмяТаблицыбазовыеЗаписи;
		
	ЗаполнитьОтборБазовыхЗаписеУдержаний(ОписаниеОтбора);	
	
	ОписаниеВТБазовыеЗаписиРезультат = ОписаниеВТБазовыеЗаписиРезультат();
	ОписаниеВТБазовыеЗаписиРезультат.ИмяВТРезультат = "ВТБазовыеЗаписиУдержаний";
	ОписаниеВТБазовыеЗаписиРезультат.КлючевыеПоля.Вставить("БазовыйПериодНачало", "БазовыйПериодОсновнойЗаписиНачало");
	ОписаниеВТБазовыеЗаписиРезультат.КлючевыеПоля.Вставить("БазовыйПериодКонец", "БазовыйПериодОсновнойЗаписиКонец");

	ТекстУсловия = "ОсновныеЗаписи.БазовыйПериодНачало МЕЖДУ БазовыеЗаписи.ПериодДействияНачало И БазовыеЗаписи.ПериодДействияКонец
					|	ИЛИ БазовыеЗаписи.ПериодДействияНачало МЕЖДУ ОсновныеЗаписи.БазовыйПериодНачало И ОсновныеЗаписи.БазовыйПериодКонец";	
	
	ОписаниеВТБазовыеЗаписиРезультат.ВыражениеПоляНеобходимоНормировать = 
	"	ВЫБОР 
	|		КОГДА (ОсновныеЗаписи.БазовыйПериодНачало МЕЖДУ БазовыеЗаписи.ПериодДействияНачало И БазовыеЗаписи.ПериодДействияКонец
	|			ИЛИ БазовыеЗаписи.ПериодДействияНачало МЕЖДУ ОсновныеЗаписи.БазовыйПериодНачало И ОсновныеЗаписи.БазовыйПериодКонец)
	|		 И (НЕ (БазовыеЗаписи.ПериодДействияНачало МЕЖДУ ОсновныеЗаписи.БазовыйПериодНачало И ОсновныеЗаписи.БазовыйПериодКонец)
	|				ИЛИ НЕ (БазовыеЗаписи.ПериодДействияКонец МЕЖДУ ОсновныеЗаписи.БазовыйПериодНачало И ОсновныеЗаписи.БазовыйПериодКонец))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	ОписаниеВТБазовыеЗаписиРезультат.Индексы.Добавить("Регистратор");
	ОписаниеВТБазовыеЗаписиРезультат.Индексы.Добавить("НомерСтроки");

	СоздатьВТБазовыеЗаписи(ОписаниеОтбора, ОписаниеВТБазовыеЗаписиРезультат, ОписаниеРасчитываемогоНабораУдержаний.ОписаниеТекущегоНабораРегистраНачисления);
	УдерживаеимыеТаблицыРасчетаУдержаний.Добавить("ВТБазовыеЗаписиУдержаний");
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеНеобходмыхДанных = ОписаниеНеобходмыхДанных();
	ЗаполнитьОписаниеНеобходмыхДанныхПоВТБазовыеЗаписи(ОписаниеВТБазовыеЗаписиРезультат.ИмяВТРезультат, ОписаниеНеобходмыхДанных);
	
	Если ОписаниеНеобходмыхДанных.НеобходимоПолучатьФПДБазовыхЗаписей 
		Или ОписаниеНеобходмыхДанных.НеобходимоКорректироватьПериодБазовыхЗаписей Тогда
	
		СоздатьВТБазовыеЗаписиПериоды(ОписаниеНеобходмыхДанных, ОписаниеРасчитываемогоНабораУдержаний.ОписаниеТекущегоНабораРегистраНачисления, ОписаниеВТБазовыеЗаписиРезультат.ИмяВТРезультат, "ВТБазовыеЗаписиУдержанийПериоды");
		ИмяВТБазовыеЗаписиУдержанийПериоды = "ВТБазовыеЗаписиУдержанийПериоды";
		УдерживаеимыеТаблицыРасчетаУдержаний.Добавить("ВТБазовыеЗаписиУдержанийПериоды");
	Иначе
		ИмяВТБазовыеЗаписиУдержанийПериоды = ОписаниеВТБазовыеЗаписиРезультат.ИмяВТРезультат;
	КонецЕсли;	
	
	ВедущиеЗаписиДляКаскадногоНормирования = Неопределено;
	Если ОписаниеНеобходмыхДанных.НеобходимоНормироватьЗаписиКаскадно Тогда
		ДанныеКаскадногоНормирования = ДанныеКаскадногоНормирования(ИмяВТБазовыеЗаписиУдержанийПериоды, ОписаниеРасчитываемогоНабораУдержаний.ОписаниеТекущегоНабораРегистраНачисления);	
		
		БазовыеЗаписиУдержанийНормируемыеКаскадно = ДанныеКаскадногоНормирования.ЗаписиНормируемыеКаскадно;
		ВедущиеЗаписиДляКаскадногоНормирования = ДанныеКаскадногоНормирования.ЗаписиВедущихНачислений;
		ВыполнятьКаскадноеНормированиеБазыУдержаний = Истина;
	КонецЕсли;
	
	Если ОписаниеНеобходмыхДанных.НеобходимоНормироватьЗаписи Тогда
		СоздатьВТКоэффициентыНормированияПоВремени(ИмяВТБазовыеЗаписиУдержанийПериоды, ВедущиеЗаписиДляКаскадногоНормирования, МенеджерДанныхУчетаВремени, "ВТКоэффицентыБазовыхЗаписейУдержанийПоВремени");
	Иначе
		СоздатьВТКоэффициентыНормированияПоВремениПустая("ВТКоэффицентыБазовыхЗаписейУдержанийПоВремени");
	КонецЕсли;	
	УдерживаеимыеТаблицыРасчетаУдержаний.Добавить("ВТКоэффицентыБазовыхЗаписейУдержанийПоВремени");
			
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ ВТКоэффицентыБазовыхЗаписейУдержанийПоВремени КАК БазовыеЗаписиКоэффициентыПоВремени ГДЕ БазовыеЗаписиКоэффициентыПоВремени.ВедущаяЗаписьКаскадногоРасчета");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КоэффициентыЗаписейКаскадногоРасчетаБазыУдержаний = Запрос.Выполнить().Выгрузить();
	
	Если ОписаниеНеобходмыхДанных.НеобходимоНормироватьЗаписиКаскадно Тогда
		ОтборЗависимыхВидовРасчета = БазовыеЗаписиУдержанийНормируемыеКаскадно.ВыгрузитьКолонку("ВидРасчета");
		ОтборЗависимыхВидовРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборЗависимыхВидовРасчета);
		ОтборБазовыхВидовРасчета = КоэффициентыЗаписейКаскадногоРасчетаБазыУдержаний.ВыгрузитьКолонку("ВидРасчета");
		ОтборБазовыхВидовРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборБазовыхВидовРасчета);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборБазовыхВидовРасчета, ОтборЗависимыхВидовРасчета, Истина);
		
		ЗависимостиКаскадногоРасчетаУдержаний = ЗависимоститиНачислений("ПланВидовРасчета.Начисления.БазовыеВидыРасчета", ОтборЗависимыхВидовРасчета, ОтборБазовыхВидовРасчета);
	КонецЕсли;	
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУничтожению);
	ТаблицыКУничтожению.Очистить();
	
	РасчетУдержанийИнициализирован = Истина;
	
	// Очистим ссылки на менеджер кадрового учета и менеджер учета времени, т.к. могут возникнуть циклические ссылки.
	МенеджерКадровогоУчета = Неопределено;
	МенеджерДанныхУчетаВремени = Неопределено;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры	

Процедура СоздатьВТРасчетнаяБазаНачислений(РезультатыРасчетаБазовыхНачислений = Неопределено, ОчередностьРасчета = Неопределено, ИмяВТРезультат = "ВТРасчетнаяБазаНачислений") Экспорт
	Если Не РасчетНачисленийИнициализирован Тогда
		ИнициализироватьРасчетБазыНачислений();
	КонецЕсли;
	
	Если РасчитываемыйНаборНачисленийПустой Тогда
		СоздатьВТРасчетнаяБазаНачисленийПустая(ИмяВТРезультат);
		Возврат;
	КонецЕсли;	
	
	Если РезультатыРасчетаБазовыхНачислений <> Неопределено И ВыполнятьКаскадноеНормированиеБазыНачислений Тогда 		
		РезультатыРасчетаБазовыхНачислений.Индексы.Добавить("Регистратор, НомерСтроки");
		УточнитьРезультатыВедущихЗаписейКаскадногоНормирования(БазовыеЗаписиНачисленийНормируемыеКаскадно, РезультатыРасчетаБазовыхНачислений);
		УточнитьРезультатыВедущихЗаписейКаскадногоНормирования(КоэффициентыЗаписейКаскадногоРасчетаБазыНачислений, РезультатыРасчетаБазовыхНачислений);
	КонецЕсли;	
	
	Если ОчередностьРасчета = Неопределено Тогда
		ОчередностьКаскадногоНормирования = МаксимальнаяОчередностьНачислений();
	Иначе
		ОчередностьКаскадногоНормирования = ОчередностьРасчета - 1;
	КонецЕсли;	
	
	Если ВыполнятьКаскадноеНормированиеБазыНачислений Тогда
		Для ТекущаяОчередность = 1 По ОчередностьКаскадногоНормирования Цикл
			Если ВыполненныеОчередностиКаскадногоРасчетаНачислений[ТекущаяОчередность] <>  Истина Тогда
				РасчитатьКоэффциентЗаписейНормируемыхКаскадно(БазовыеЗаписиНачисленийНормируемыеКаскадно, КоэффициентыЗаписейКаскадногоРасчетаБазыНачислений, ЗависимостиКаскадногоРасчетаНачислений, ТекущаяОчередность);
				ВыполненныеОчередностиКаскадногоРасчетаНачислений.Вставить(ТекущаяОчередность, Истина);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если РезультатыРасчетаБазовыхНачислений = Неопределено Тогда
		СоздатьВТРезультатРасчетаБазовыхЗаписейПустая();
	Иначе
		СоздатьВТРезультатРасчетаБазовыхЗаписей(РезультатыРасчетаБазовыхНачислений);
	КонецЕсли;
	ТаблицыКУничтожению.Добавить("ВТРезультатРасчетаБазовыхЗаписей");
	
	Если ВыполнятьКаскадноеНормированиеБазыНачислений Тогда
		СоздатьВТКоэффициентыКаскадноНормируемыхЗаписей(БазовыеЗаписиНачисленийНормируемыеКаскадно);
	Иначе
		СоздатьВТКоэффициентыКаскадноНормируемыхЗаписейПустая();
	КонецЕсли;	
	ТаблицыКУничтожению.Добавить("ВТКоэффициентыКаскадноНормируемыхЗаписей");

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеЗаписи.НомерСтроки КАК НомерСтроки,
	|	ОсновныеЗаписи.Регистратор КАК Регистратор,
	|	БазовыеЗаписи.Регистратор КАК РегистраторРазрез,
	|	БазовыеЗаписи.НомерСтроки КАК НомерСтрокиРазрез,
	|	БазовыеЗаписи.ИдентификаторСтроки КАК ИдентификаторСтрокиРазрез,
	|	БазовыеЗаписи.ПериодРегистрации КАК ПериодРегистрацииРазрез,
	|	БазовыеЗаписи.Сотрудник КАК СотрудникРазрез,
	|	БазовыеЗаписи.ВидРасчета КАК ВидРасчетаРазрез,
	|	БазовыеЗаписи.ГоловнаяОрганизация КАК ГоловнаяОрганизацияРазрез,
	|	СУММА(ВЫБОР
	|			КОГДА РезультатРасчетаБазовыхЗаписей.Результат ЕСТЬ NULL
	|				ТОГДА ВЫРАЗИТЬ(БазовыеЗаписи.Результат КАК ЧИСЛО(31, 8))
	|			ИНАЧЕ ВЫРАЗИТЬ(РезультатРасчетаБазовыхЗаписей.Результат КАК ЧИСЛО(31, 8))
	|		КОНЕЦ * ВЫБОР
	|			КОГДА НЕ БазовыеЗаписи.НеобходимоНормировать
	|				ТОГДА 1
	|			КОГДА БазовыеЗаписи.НормироватьКаскадно
	|				ТОГДА ВЫРАЗИТЬ(КоэффициентыКаскадноНормируемыхЗаписей.Коэффициент КАК ЧИСЛО(31, 8))
	|			ИНАЧЕ ВЫРАЗИТЬ(КоэффицентыБазовыхЗаписейНачисленийПоВремени.Коэффициент КАК ЧИСЛО(31, 8))
	|		КОНЕЦ) КАК РезультатБаза
	|ПОМЕСТИТЬ ВТРасчетнаяБазаНачислений
	|ИЗ
	|	ВТОсновныеЗаписи КАК ОсновныеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК БазовыеВидыРасчета
	|		ПО ОсновныеЗаписи.ВидРасчета = БазовыеВидыРасчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБазовыеЗаписиНачислений КАК БазовыеЗаписи
	|		ПО ОсновныеЗаписи.Сотрудник = БазовыеЗаписи.Сотрудник
	|			И ОсновныеЗаписи.БазовыйПериодНачало = БазовыеЗаписи.БазовыйПериодОсновнойЗаписиНачало
	|			И ОсновныеЗаписи.БазовыйПериодКонец = БазовыеЗаписи.БазовыйПериодОсновнойЗаписиКонец
	|			И (БазовыеВидыРасчета.ВидРасчета = БазовыеЗаписи.ВидРасчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффицентыБазовыхЗаписейНачисленийПоВремени КАК КоэффицентыБазовыхЗаписейНачисленийПоВремени
	|		ПО (БазовыеЗаписи.Регистратор = КоэффицентыБазовыхЗаписейНачисленийПоВремени.Регистратор)
	|			И (БазовыеЗаписи.НомерСтроки = КоэффицентыБазовыхЗаписейНачисленийПоВремени.НомерСтроки)
	|			И (БазовыеЗаписи.НеобходимоНормировать)
	|			И (НЕ БазовыеЗаписи.НормироватьКаскадно)
	|			И (НЕ КоэффицентыБазовыхЗаписейНачисленийПоВремени.ВедущаяЗаписьКаскадногоРасчета)
	|			И (КоэффицентыБазовыхЗаписейНачисленийПоВремени.БазовыйПериодОсновнойЗаписиНачало = БазовыеЗаписи.БазовыйПериодОсновнойЗаписиНачало)
	|			И (КоэффицентыБазовыхЗаписейНачисленийПоВремени.БазовыйПериодОсновнойЗаписиКонец = БазовыеЗаписи.БазовыйПериодОсновнойЗаписиКонец)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыКаскадноНормируемыхЗаписей КАК КоэффициентыКаскадноНормируемыхЗаписей
	|		ПО (БазовыеЗаписи.Регистратор = КоэффициентыКаскадноНормируемыхЗаписей.Регистратор)
	|			И (БазовыеЗаписи.НомерСтроки = КоэффициентыКаскадноНормируемыхЗаписей.НомерСтроки)
	|			И (БазовыеЗаписи.НеобходимоНормировать)
	|			И (БазовыеЗаписи.НормироватьКаскадно)
	|			И (КоэффициентыКаскадноНормируемыхЗаписей.БазовыйПериодОсновнойЗаписиНачало = БазовыеЗаписи.БазовыйПериодОсновнойЗаписиНачало)
	|			И (КоэффициентыКаскадноНормируемыхЗаписей.БазовыйПериодОсновнойЗаписиКонец = БазовыеЗаписи.БазовыйПериодОсновнойЗаписиКонец)
	|			И (КоэффициентыКаскадноНормируемыхЗаписей.ПериодДействияНачало МЕЖДУ БазовыеЗаписи.БазовыйПериодОсновнойЗаписиНачало И БазовыеЗаписи.БазовыйПериодОсновнойЗаписиКонец)
	|			И (КоэффициентыКаскадноНормируемыхЗаписей.ПериодДействияКонец МЕЖДУ БазовыеЗаписи.БазовыйПериодОсновнойЗаписиНачало И БазовыеЗаписи.БазовыйПериодОсновнойЗаписиКонец)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезультатРасчетаБазовыхЗаписей КАК РезультатРасчетаБазовыхЗаписей
	|		ПО (БазовыеЗаписи.Регистратор = РезультатРасчетаБазовыхЗаписей.Регистратор)
	|			И (БазовыеЗаписи.НомерСтроки = РезультатРасчетаБазовыхЗаписей.НомерСтроки)
	|ГДЕ
	|	&УсловиеОчередностьРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	БазовыеЗаписи.Регистратор,
	|	БазовыеЗаписи.НомерСтроки,
	|	БазовыеЗаписи.ИдентификаторСтроки,
	|	БазовыеЗаписи.ПериодРегистрации,
	|	БазовыеЗаписи.Сотрудник,
	|	БазовыеЗаписи.ВидРасчета,
	|	БазовыеЗаписи.ГоловнаяОрганизация,
	|	ОсновныеЗаписи.Регистратор,
	|	ОсновныеЗаписи.НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОсновныеЗаписи", ОписаниеРасчитываемогоНабораНачислений.ИмяВТРасчитываемыеЗаписи);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРасчетнаяБазаНачислений", ИмяВТРезультат);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПланВидовРасчета.Начисления.БазовыеВидыРасчета", ОписаниеРасчитываемогоНабораНачислений.ИмяТаблицыБазовыеЗаписи);


	Если ОчередностьРасчета = Неопределено Тогда
		ТекстУсловияОчередностьРасчета = "ИСТИНА";
	Иначе
		ТекстУсловияОчередностьРасчета = "ОсновныеЗаписи." + ОписаниеРасчитываемогоНабораНачислений.ИмяПоляОчередностьРасчета + " = &ОчередностьРасчета";
		Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОчередностьРасчета", ТекстУсловияОчередностьРасчета);
	
	Запрос.Выполнить();	
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУничтожению);
	ТаблицыКУничтожению.Очистить();
КонецПроцедуры	

Процедура СоздатьВТРасчетнаяБазаУдержаний(ОчередностьРасчета = Неопределено, ИмяВТРезультат = "ВТРасчетнаяБазаУдержаний") Экспорт
	Если Не РасчетУдержанийИнициализирован Тогда
		ИнициализироватьРасчетУжержаний();
	КонецЕсли;
	
	Если РасчитываемыйНаборУдержанйПустой Тогда
		СоздатьВТРасчетнаяБазаУдержаниййПустая(ИмяВТРезультат);
		Возврат;
	КонецЕсли;	
		
	ОчередностьКаскадногоНормирования = МаксимальнаяОчередностьНачислений();
	
	Если ВыполнятьКаскадноеНормированиеБазыУдержаний Тогда
		Для ТекущаяОчередность = 1 По ОчередностьКаскадногоНормирования Цикл
			Если ВыполненныеОчередностиКаскадногоРасчетаНачислений[ТекущаяОчередность] <>  Истина Тогда
				РасчитатьКоэффциентЗаписейНормируемыхКаскадно(БазовыеЗаписиУдержанийНормируемыеКаскадно, КоэффициентыЗаписейКаскадногоРасчетаБазыУдержаний, ЗависимостиКаскадногоРасчетаУдержаний, ТекущаяОчередность);
				ВыполненныеОчередностиКаскадногоРасчетаУдержаний.Вставить(ТекущаяОчередность, Истина);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
		
	Если ВыполнятьКаскадноеНормированиеБазыУдержаний Тогда
		СоздатьВТКоэффициентыКаскадноНормируемыхЗаписей(БазовыеЗаписиУдержанийНормируемыеКаскадно);
	Иначе
		СоздатьВТКоэффициентыКаскадноНормируемыхЗаписейПустая();
	КонецЕсли;	
	ТаблицыКУничтожению.Добавить("ВТКоэффициентыКаскадноНормируемыхЗаписей");

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеЗаписи.НомерСтроки КАК НомерСтроки,
	|	ОсновныеЗаписи.Регистратор КАК Регистратор,
	|	БазовыеЗаписи.Регистратор КАК РегистраторРазрез,
	|	БазовыеЗаписи.НомерСтроки КАК НомерСтрокиРазрез,
	|	БазовыеЗаписи.ИдентификаторСтроки КАК ИдентификаторСтрокиРазрез,
	|	БазовыеЗаписи.ПериодРегистрации КАК ПериодРегистрацииРазрез,
	|	БазовыеЗаписи.Сотрудник КАК СотрудникРазрез,
	|	БазовыеЗаписи.ВидРасчета КАК ВидРасчетаРазрез,
	|	БазовыеЗаписи.ГоловнаяОрганизация КАК ГоловнаяОрганизацияРазрез,
	|	СУММА((ВЫРАЗИТЬ(БазовыеЗаписи.Результат КАК ЧИСЛО(31, 8))) * ВЫБОР
	|			КОГДА БазовыеЗаписи.НеобходимоНормировать
	|					И БазовыеЗаписи.НормироватьКаскадно
	|				ТОГДА ВЫРАЗИТЬ(КоэффициентыКаскадноНормируемыхЗаписей.Коэффициент КАК ЧИСЛО(31, 8))
	|			КОГДА БазовыеЗаписи.НеобходимоНормировать
	|				ТОГДА ВЫРАЗИТЬ(КоэффицентыБазовыхЗаписейУдержанийПоВремени.Коэффициент КАК ЧИСЛО(31, 8))
	|			КОГДА ОсновныеЗаписи.МесяцУдержания = БазовыеЗаписи.ПериодДействия
	|				ТОГДА ВЫБОР
	|						КОГДА ОсновныеЗаписи.БазовыйПериодНачало > БазовыеЗаписи.ПериодДействияНачало
	|								ИЛИ ОсновныеЗаписи.БазовыйПериодКонец < БазовыеЗаписи.ПериодДействияКонец
	|							ТОГДА 0
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			КОГДА ОсновныеЗаписи.МесяцУдержания < БазовыеЗаписи.ПериодДействия
	|				ТОГДА ВЫБОР
	|						КОГДА КОНЕЦПЕРИОДА(ОсновныеЗаписи.БазовыйПериодКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(ОсновныеЗаписи.БазовыйПериодКонец, МЕСЯЦ)
	|							ТОГДА 0
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			КОГДА ОсновныеЗаписи.МесяцУдержания > БазовыеЗаписи.ПериодДействия
	|				ТОГДА ВЫБОР
	|						КОГДА ОсновныеЗаписи.БазовыйПериодНачало > НАЧАЛОПЕРИОДА(ОсновныеЗаписи.БазовыйПериодНачало, МЕСЯЦ)
	|							ТОГДА 0
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РезультатБаза
	|ПОМЕСТИТЬ ВТРасчетнаяБазаУдержаний
	|ИЗ
	|	ВТОсновныеЗаписи КАК ОсновныеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.БазовыеВидыРасчета КАК БазовыеВидыРасчета
	|		ПО ОсновныеЗаписи.ВидРасчета = БазовыеВидыРасчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБазовыеЗаписиУдержаний КАК БазовыеЗаписи
	|		ПО ОсновныеЗаписи.Организация = БазовыеЗаписи.ГоловнаяОрганизация
	|			И ОсновныеЗаписи.ФизическоеЛицо = БазовыеЗаписи.ФизическоеЛицо
	|			И (ВЫБОР
	|				КОГДА ОсновныеЗаписи.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|					ТОГДА ОсновныеЗаписи.Сотрудник = БазовыеЗаписи.Сотрудник
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И ОсновныеЗаписи.БазовыйПериодНачало = БазовыеЗаписи.БазовыйПериодОсновнойЗаписиНачало
	|			И ОсновныеЗаписи.БазовыйПериодКонец = БазовыеЗаписи.БазовыйПериодОсновнойЗаписиКонец
	|			И (БазовыеВидыРасчета.ВидРасчета = БазовыеЗаписи.ВидРасчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффицентыБазовыхЗаписейУдержанийПоВремени КАК КоэффицентыБазовыхЗаписейУдержанийПоВремени
	|		ПО (БазовыеЗаписи.Регистратор = КоэффицентыБазовыхЗаписейУдержанийПоВремени.Регистратор)
	|			И (БазовыеЗаписи.НомерСтроки = КоэффицентыБазовыхЗаписейУдержанийПоВремени.НомерСтроки)
	|			И (БазовыеЗаписи.НеобходимоНормировать)
	|			И (НЕ БазовыеЗаписи.НормироватьКаскадно)
	|			И (НЕ КоэффицентыБазовыхЗаписейУдержанийПоВремени.ВедущаяЗаписьКаскадногоРасчета)
	|			И (КоэффицентыБазовыхЗаписейУдержанийПоВремени.БазовыйПериодОсновнойЗаписиНачало = БазовыеЗаписи.БазовыйПериодОсновнойЗаписиНачало)
	|			И (КоэффицентыБазовыхЗаписейУдержанийПоВремени.БазовыйПериодОсновнойЗаписиКонец = БазовыеЗаписи.БазовыйПериодОсновнойЗаписиКонец)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыКаскадноНормируемыхЗаписей КАК КоэффициентыКаскадноНормируемыхЗаписей
	|		ПО (БазовыеЗаписи.Регистратор = КоэффициентыКаскадноНормируемыхЗаписей.Регистратор)
	|			И (БазовыеЗаписи.НомерСтроки = КоэффициентыКаскадноНормируемыхЗаписей.НомерСтроки)
	|			И (БазовыеЗаписи.НеобходимоНормировать)
	|			И (БазовыеЗаписи.НормироватьКаскадно)
	|			И (КоэффициентыКаскадноНормируемыхЗаписей.БазовыйПериодОсновнойЗаписиНачало = БазовыеЗаписи.БазовыйПериодОсновнойЗаписиНачало)
	|			И (КоэффициентыКаскадноНормируемыхЗаписей.БазовыйПериодОсновнойЗаписиКонец = БазовыеЗаписи.БазовыйПериодОсновнойЗаписиКонец)
	|			И (КоэффициентыКаскадноНормируемыхЗаписей.ПериодДействияНачало МЕЖДУ БазовыеЗаписи.БазовыйПериодОсновнойЗаписиНачало И БазовыеЗаписи.БазовыйПериодОсновнойЗаписиКонец)
	|			И (КоэффициентыКаскадноНормируемыхЗаписей.ПериодДействияКонец МЕЖДУ БазовыеЗаписи.БазовыйПериодОсновнойЗаписиНачало И БазовыеЗаписи.БазовыйПериодОсновнойЗаписиКонец)
	|ГДЕ
	|	&УсловиеОчередностьРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	БазовыеЗаписи.Регистратор,
	|	БазовыеЗаписи.НомерСтроки,
	|	БазовыеЗаписи.ИдентификаторСтроки,
	|	БазовыеЗаписи.ПериодРегистрации,
	|	БазовыеЗаписи.Сотрудник,
	|	БазовыеЗаписи.ВидРасчета,
	|	БазовыеЗаписи.ГоловнаяОрганизация,
	|	ОсновныеЗаписи.Регистратор,
	|	ОсновныеЗаписи.НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОсновныеЗаписи", ОписаниеРасчитываемогоНабораУдержаний.ИмяВТРасчитываемыеЗаписи);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРасчетнаяБазаНачислений", ИмяВТРезультат);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПланВидовРасчета.Удержания.БазовыеВидыРасчета", ОписаниеРасчитываемогоНабораУдержаний.ИмяТаблицыБазовыеЗаписи);

	Если ОчередностьРасчета = Неопределено Тогда
		ТекстУсловияОчередностьРасчета = "ИСТИНА";
	Иначе
		ТекстУсловияОчередностьРасчета = "ОсновныеЗаписи." + ОписаниеРасчитываемогоНабораНачислений.ИмяПоляОчередностьРасчета + " = &ОчередностьРасчета";
		Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОчередностьРасчета", ТекстУсловияОчередностьРасчета);
	
	Запрос.Выполнить();	
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУничтожению);
	ТаблицыКУничтожению.Очистить();
КонецПроцедуры	

Процедура СоздатьВТРасчетнаяБазаНачисленийПустая(ИмяВТРезультат)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.Регистратор КАК РегистраторРазрез,
	|	Начисления.НомерСтроки КАК НомерСтрокиРазрез,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтрокиРазрез,
	|	Начисления.ПериодРегистрации КАК ПериодРегистрацииРазрез,
	|	Начисления.Сотрудник КАК СотрудникРазрез,
	|	Начисления.ВидРасчета КАК ВидРасчетаРазрез,
	|	Начисления.ГоловнаяОрганизация КАК ГоловнаяОрганизацияРазрез,
	|	0 КАК РезультатБаза
	|ПОМЕСТИТЬ ВТРасчетнаяБазаНачислений
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	ЛОЖЬ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРасчетнаяБазаНачислений", ИмяВТРезультат);

	Запрос.Выполнить();	
КонецПроцедуры	

Процедура СоздатьВТРасчетнаяБазаУдержаниййПустая(ИмяВТРезультат)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.Регистратор КАК РегистраторРазрез,
	|	Начисления.НомерСтроки КАК НомерСтрокиРазрез,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтрокиРазрез,
	|	Начисления.ПериодРегистрации КАК ПериодРегистрацииРазрез,
	|	Начисления.Сотрудник КАК СотрудникРазрез,
	|	Начисления.ВидРасчета КАК ВидРасчетаРазрез,
	|	Начисления.ГоловнаяОрганизация КАК ГоловнаяОрганизацияРазрез,
	|	0 КАК РезультатБаза
	|ПОМЕСТИТЬ ВТРасчетнаяБазаНачислений
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	ЛОЖЬ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРасчетнаяБазаНачислений", ИмяВТРезультат);

	Запрос.Выполнить();	
КонецПроцедуры	

Процедура СоздатьВТРезультатРасчетаБазовыхЗаписей(РезультатыРасчетаБазовыхНачислений)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("РезультатыРасчетаБазовыхНачислений", РезультатыРасчетаБазовыхНачислений);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатыРасчетаБазовыхНачислений.Регистратор КАК Регистратор,
	|	РезультатыРасчетаБазовыхНачислений.НомерСтроки КАК НомерСтроки,
	|	РезультатыРасчетаБазовыхНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
	|	РезультатыРасчетаБазовыхНачислений.ПериодДействияКонец КАК ПериодДействияКонец,
	|	РезультатыРасчетаБазовыхНачислений.Результат КАК Результат
	|ПОМЕСТИТЬ ВТРезультатРасчетаБазовыхЗаписей
	|ИЗ
	|	&РезультатыРасчетаБазовыхНачислений КАК РезультатыРасчетаБазовыхНачислений";
	
	Запрос.Выполнить();
КонецПроцедуры	

Процедура СоздатьВТРезультатРасчетаБазовыхЗаписейПустая()
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.Результат КАК Результат
	|ПОМЕСТИТЬ ВТРезультатРасчетаБазовыхЗаписей
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	ЛОЖЬ";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТКоэффициентыКаскадноНормируемыхЗаписей(КоэффициентыКаскадноНормируемыхЗаписей)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КоэффициентыКаскадноНормируемыхЗаписей", КоэффициентыКаскадноНормируемыхЗаписей);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КоэффициентыКаскадноНормируемыхЗаписей.Регистратор КАК Регистратор,
	|	КоэффициентыКаскадноНормируемыхЗаписей.НомерСтроки КАК НомерСтроки,
	|	КоэффициентыКаскадноНормируемыхЗаписей.ПериодДействияНачало КАК ПериодДействияНачало,
	|	КоэффициентыКаскадноНормируемыхЗаписей.ПериодДействияКонец КАК ПериодДействияКонец,
	|	КоэффициентыКаскадноНормируемыхЗаписей.БазовыйПериодОсновнойЗаписиНачало КАК БазовыйПериодОсновнойЗаписиНачало,
	|	КоэффициентыКаскадноНормируемыхЗаписей.БазовыйПериодОсновнойЗаписиКонец КАК БазовыйПериодОсновнойЗаписиКонец,
	|	КоэффициентыКаскадноНормируемыхЗаписей.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ ВТКоэффициентыКаскадноНормируемыхЗаписей
	|ИЗ
	|	&КоэффициентыКаскадноНормируемыхЗаписей КАК КоэффициентыКаскадноНормируемыхЗаписей
	|ГДЕ
	|	НЕ КоэффициентыКаскадноНормируемыхЗаписей.БазоваяДляКаскадноНормиреумойЗаписи";
	
	Запрос.Выполнить();
КонецПроцедуры	

Процедура СоздатьВТКоэффициентыКаскадноНормируемыхЗаписейПустая()
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК БазовыйПериодОсновнойЗаписиНачало,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК БазовыйПериодОсновнойЗаписиКонец,
	|	0 КАК Коэффициент
	|ПОМЕСТИТЬ ВТКоэффициентыКаскадноНормируемыхЗаписей
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	ЛОЖЬ";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция МаксимальнаяОчередностьНачислений()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(Начисления.ОчередностьРасчета) КАК ОчередностьРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОчередностьРасчета;
	Иначе
		Возврат 0;
	КонецЕсли;		
КонецФункции	

Процедура УточнитьРезультатыВедущихЗаписейКаскадногоНормирования(ЗаписиНормируемыеКаскадно, РезультатыРасчетаБазовыхНачислений)
	СтруктураПоиска = Новый Структура("Регистратор, НомерСтроки");
	
	Для Каждого ВедущаяЗапись Из ЗаписиНормируемыеКаскадно Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВедущаяЗапись);
		НайденныеСтроки = РезультатыРасчетаБазовыхНачислений.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ВедущаяЗапись.Результат = НайденныеСтроки[0].Результат;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьОтборБазовыхЗаписейНачислений(ОписаниеОтбора)
	ОписаниеОтбора.БазовыеИзмерения.Вставить("Сотрудник", "Сотрудник");	
	
	// условие на период регистрации
	ТекстУсловия = "БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.ПериодРегистрации
					|	ИЛИ БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.БазовыйПериодКонец";							
	ОписаниеОтбора.Условия.Добавить(ТекстУсловия);	
	
	// условие на период действия
	ТекстУсловия = "БазовыеЗаписи.ПериодДействия >= НАЧАЛОПЕРИОДА(ОсновныеЗаписи.БазовыйПериодНачало, МЕСЯЦ)";				
	ОписаниеОтбора.Условия.Добавить(ТекстУсловия);	
	ТекстУсловия = "БазовыеЗаписи.ПериодДействия <= ОсновныеЗаписи.БазовыйПериодКонец";			
	ОписаниеОтбора.Условия.Добавить(ТекстУсловия);
	
	// условие на конкретные даты базовых начислений	
	ТекстУсловия = "ОсновныеЗаписи.БазовыйПериодНачало МЕЖДУ БазовыеЗаписи.ПериодДействияНачало И БазовыеЗаписи.ПериодДействияКонец
					|	ИЛИ БазовыеЗаписи.ПериодДействияНачало МЕЖДУ ОсновныеЗаписи.БазовыйПериодНачало И ОсновныеЗаписи.БазовыйПериодКонец";				
	ОписаниеОтбора.Условия.Добавить(ТекстУсловия);

КонецПроцедуры	

Процедура ЗаполнитьОтборБазовыхЗаписеУдержаний(ОписаниеОтбора)
	ОписаниеОтбора.БазовыеИзмерения.Вставить("ФизическоеЛицо", "ФизическоеЛицо");	
	ОписаниеОтбора.БазовыеИзмерения.Вставить("Организация", "ГоловнаяОрганизация");	
	
	// условие на период регистрации
	ТекстУсловия = "БазовыеЗаписи.ПериодРегистрации = ОсновныеЗаписи.МесяцУдержания";						
	ОписаниеОтбора.Условия.Добавить(ТекстУсловия);
	
	ТекстУсловия = "ВЫБОР
					|	КОГДА ОсновныеЗаписи.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
					|		ТОГДА ОсновныеЗаписи.Сотрудник = БазовыеЗаписи.Сотрудник
					|	ИНАЧЕ ИСТИНА
					|КОНЕЦ";						
	ОписаниеОтбора.Условия.Добавить(ТекстУсловия);
КонецПроцедуры	

Функция ОписаниеОтбораВТБазовыеЗаписи()
	ОписаниеОтбора = Новый Структура;
	ОписаниеОтбора.Вставить("ИмяВТОсновныеЗаписи", "ВТОсновныеЗаписи");
	ОписаниеОтбора.Вставить("ИмяТаблицыВедущиеВидыРасчета");
	ОписаниеОтбора.Вставить("БазовыеИзмерения", Новый Соответствие);
	ОписаниеОтбора.Вставить("Условия", Новый Массив);
	
	Возврат ОписаниеОтбора	
КонецФункции	

Функция ОписаниеВТБазовыеЗаписиРезультат()
	ОписаниеРезультата = Новый Структура;
	ОписаниеРезультата.Вставить("ИмяВТРезультат", "ВТБазовыеЗаписи");
	ОписаниеРезультата.Вставить("Индексы", Новый Массив);
	ОписаниеРезультата.Вставить("КлючевыеПоля", Новый Соответствие);	
	ОписаниеРезультата.Вставить("ВыражениеПоляНеобходимоНормировать");
	
	Возврат ОписаниеРезультата;
КонецФункции	
	
Процедура СоздатьВТБазовыеЗаписи(ОписаниеОтбораБазовыхЗаписей, ОписаниеВТРезультат, ОписаниеНабораТеукщегоРегистратора = Неопределено)		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазовыеЗаписи.Регистратор КАК Регистратор,
	|	БазовыеЗаписи.НомерСтроки КАК НомерСтроки,
	|	БазовыеЗаписи.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	БазовыеЗаписи.ПериодРегистрации КАК ПериодРегистрации,
	|	БазовыеЗаписи.ПериодДействия КАК ПериодДействия,
	|	БазовыеЗаписи.ПериодДействияНачало КАК ПериодДействияНачало,
	|	БазовыеЗаписи.ПериодДействияКонец КАК ПериодДействияКонец,
	|	БазовыеЗаписи.ВидРасчета КАК ВидРасчета,
	|	&НеобходимоНормировать КАК НеобходимоНормировать,
	|	БазовыеЗаписи.ВидРасчета.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ВидРасчета.ЕстьВытесняющиеНачисления
	|				И (НЕ БазовыеЗаписи.ВидРасчета.ТребуетсяРасчетБазы
	|					ИЛИ НЕ БазовыеЗаписи.ВидРасчета.ПериодДействияБазовый)
	|			ТОГДА ИСТИНА
	|		КОГДА БазовыеЗаписи.ВидРасчета.ТребуетсяРасчетБазы
	|				И БазовыеЗаписи.ВидРасчета.ЕстьВытесняющиеНачисления
	|				И (БазовыеЗаписи.ПериодДействия <> НАЧАЛОПЕРИОДА(БазовыеЗаписи.БазовыйПериодНачало, МЕСЯЦ)
	|					ИЛИ БазовыеЗаписи.ПериодДействия = НАЧАЛОПЕРИОДА(БазовыеЗаписи.БазовыйПериодКонец, МЕСЯЦ))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьВытесняющиеНачисления,
	|	БазовыеЗаписи.Сотрудник КАК Сотрудник,
	|	БазовыеЗаписи.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БазовыеЗаписи.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	БазовыеЗаписи.ГоловнойСотрудник КАК ГоловнойСотрудник,
	|	БазовыеЗаписи.Результат КАК Результат,
	|	БазовыеЗаписи.ГрафикРаботы КАК ГрафикРаботы,
	|	БазовыеЗаписи.ОбщийГрафик КАК ОбщийГрафик,
	|	БазовыеЗаписи.ВремяВЧасах КАК ВремяВЧасах,
	|	БазовыеЗаписи.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ВидРасчета.ТребуетсяРасчетБазы
	|				И БазовыеЗаписи.ПериодДействия = НАЧАЛОПЕРИОДА(БазовыеЗаписи.БазовыйПериодНачало, МЕСЯЦ)
	|				И БазовыеЗаписи.ПериодДействия = НАЧАЛОПЕРИОДА(БазовыеЗаписи.БазовыйПериодКонец, МЕСЯЦ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НормироватьКаскадно,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.Регистратор = &РегистраторТекущегоНабора
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаписьТекущегоНабора,
	|	БазовыеЗаписи.ВидРасчета.ПериодДействияБазовый КАК ПериодДействияБазовый,
	|	БазовыеЗаписи.ВидРасчета.ОчередностьРасчета КАК ОчередностьРасчета
	|ИЗ
	|	ВТОсновныеЗаписи КАК ОсновныеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК БазовыеЗаписи
	|		ПО (&УсловиеСвязиСБазовымиЗаписями)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицыБазовыхВР КАК БазовыеВидыРасчета
	|		ПО (БазовыеВидыРасчета.ВидРасчета = БазовыеЗаписи.ВидРасчета)
	|			И (БазовыеВидыРасчета.Ссылка = ОсновныеЗаписи.ВидРасчета)";
	
	Если ОписаниеНабораТеукщегоРегистратора <> Неопределено Тогда
		ЧастиЗапроса = Новый Массив;
		ЧастиЗапроса.Добавить(Запрос.Текст);
		
		ТекстЗапросаКТаблицеТекущегоНабора = СтрЗаменить(Запрос.Текст, "РегистрРасчета.Начисления", ОписаниеНабораТеукщегоРегистратора.ИмяВТРегистрРасчета);
		ЧастиЗапроса.Добавить(ТекстЗапросаКТаблицеТекущегоНабора);
		
		Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	КонецЕсли;	
		
	ЧастиУсловий = Новый Массив;
	Для Каждого Измерение Из ОписаниеОтбораБазовыхЗаписей.БазовыеИзмерения Цикл
		ЧастиУсловий.Добавить("ОсновныеЗаписи." + Измерение.Ключ + " = БазовыеЗаписи." + Измерение.Значение);
	КонецЦикла;	
	
	Для Каждого ТекущееУсловие Из ОписаниеОтбораБазовыхЗаписей.Условия Цикл
		ЧастиУсловий.Добавить("(" + ТекущееУсловие + ")");
	КонецЦикла;
		
	ТекстУсловияСвязи = СтрСоединить(ЧастиУсловий, Символы.ПС + " И "); 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОсновныеЗаписи", ОписаниеОтбораБазовыхЗаписей.ИмяВТОсновныеЗаписи);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСвязиСБазовымиЗаписями", ТекстУсловияСвязи);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицыБазовыхВР", ОписаниеОтбораБазовыхЗаписей.ИмяТаблицыВедущиеВидыРасчета);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НеобходимоНормировать", ОписаниеВТРезультат.ВыражениеПоляНеобходимоНормировать);
		
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	ЗапросПакета = Схема.ПакетЗапросов[0];
					
	ЗапросПакета.ТаблицаДляПомещения = ОписаниеВТРезультат.ИмяВТРезультат;
	
	ДобавитьКлючевыеПоляВЗапрос(ЗапросПакета, ОписаниеВТРезультат.КлючевыеПоля, "ОсновныеЗаписи");
	
	Для Каждого Индекс Из ОписаниеВТРезультат.Индексы Цикл
		ЗапросПакета.Индекс.Добавить(Индекс);	
	КонецЦикла;	
	
	ЧастиУсловий.Добавить("БазовыеЗаписи.Регистратор <> &Регистратор");

	// Учтем сценарий внетранзакционного расчета начислений, когда данные текущего набора регистра расчета
	// храняться во временной таблице.
	Если ОписаниеНабораТеукщегоРегистратора <> Неопределено Тогда
		ЗапросПакета.Операторы[0].Отбор.Добавить("БазовыеЗаписи.Регистратор <> &Регистратор");
		Запрос.УстановитьПараметр("Регистратор", ОписаниеНабораТеукщегоРегистратора.ИсключаемыйРегистратор);
		Запрос.УстановитьПараметр("РегистраторТекущегоНабора", ОписаниеНабораТеукщегоРегистратора.Регистратор);
	Иначе
		Запрос.УстановитьПараметр("Регистратор", Неопределено);	
		Запрос.УстановитьПараметр("РегистраторТекущегоНабора", Неопределено);	
	КонецЕсли;	
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	Запрос.Выполнить();
КонецПроцедуры

Процедура СоздатьВТФПДБазовыхЗаписей(ОписаниеНеобходмыхДанных, ОписаниеНабораТеукщегоРегистратора = Неопределено, ИмяВТБазовыеЗаписи = "ВТБазовыеЗаписи", ИмяВТРезультат = "ВТФПДБазовыхЗаписей")
	ОбщегоНазначенияКлиентСервер.Проверить(
		ОписаниеНабораТеукщегоРегистратора <> Неопределено Или Не ОписаниеНеобходмыхДанных.НеобходимФПДДляЗаписейТекущегоНабора,
		НСтр("ru = 'Расчет базы начислений (удержаний) – не задано описание текущего набора регистра'"));
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			
	Если Не ОписаниеНеобходмыхДанных.НеобходимоПолучатьФПДБазовыхЗаписей Тогда	
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	НЕОПРЕДЕЛЕНО КАК Регистратор,
		|	0 КАК НомерСтроки,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодДействияНачало,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодДействияКонец";
			
		Схема = Новый СхемаЗапроса;
		Схема.УстановитьТекстЗапроса(Запрос.Текст);
		Схема.ПакетЗапросов[0].ТаблицаДляПомещения = ИмяВТРезультат;
		
		Запрос.Текст = Схема.ПолучитьТекстЗапроса();
		Запрос.Выполнить();
		
		Возврат;
	КонецЕсли;	
	
	ПолучатьФПДИзВременнойТаблицы = ОписаниеНеобходмыхДанных.НеобходимФПДДляЗаписейТекущегоНабора;
	ПолучатьФПДИзОсновнойТаблицы = ОписаниеНеобходмыхДанных.ПолучатьФПДДляЗаписейОсновнойТаблицыРегистра;
	ИмяВТОтборЗаписейФПД = ИмяВТБазовыеЗаписи;
	
	ТекстУсловияОтборФПДВременнаяТаблица = "ИСТИНА";
	ТекстУсловияОтборФПДОснованаяТаблица = "ИСТИНА";
	
	Если ОписаниеНеобходмыхДанных.НеобходимФПДДляЗаписейТекущегоНабора И ОписаниеНеобходмыхДанных.ПолучатьФПДДляЗаписейОсновнойТаблицыРегистра Тогда
		ПолучатьФПДИзВременнойТаблицы = Истина;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазовыеЗаписи.Регистратор КАК Регистратор,
		|	БазовыеЗаписи.НомерСтроки КАК НомерСтроки,
		|	БазовыеЗаписи.НеобходимоНормировать КАК НеобходимоНормировать,
		|	БазовыеЗаписи.ЕстьВытесняющиеНачисления КАК ЕстьВытесняющиеНачисления,
		|	ВЫБОР
		|		КОГДА ФПД.НомерСтроки ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИсточникФПДВременнаяТаблица
		|ПОМЕСТИТЬ ВТБазовыеЗаписиИсточникФПД
		|ИЗ
		|	#ВТБазовыеЗаписи КАК БазовыеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК ФПД
		|		ПО (ФПД.Регистратор = БазовыеЗаписи.Регистратор)
		|			И (ФПД.НомерСтроки = БазовыеЗаписи.НомерСтроки)
		|ГДЕ
		|	БазовыеЗаписи.НеобходимоНормировать
		|	И БазовыеЗаписи.ЕстьВытесняющиеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	БазовыеЗаписиИсточникФПД.Регистратор КАК Регистратор
		|ИЗ
		|	ВТБазовыеЗаписиИсточникФПД КАК БазовыеЗаписиИсточникФПД";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТБазовыеЗаписи", ИмяВТБазовыеЗаписи);
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			ПолучатьФПДИзОсновнойТаблицы = Истина;
			ИмяВТОтборЗаписейФПД = "ВТБазовыеЗаписиИсточникФПД";
			
			ТекстУсловияОтборФПДВременнаяТаблица = "БазовыеЗаписи.ИсточникФПДВременнаяТаблица";
			ТекстУсловияОтборФПДОснованаяТаблица = "НЕ БазовыеЗаписи.ИсточникФПДВременнаяТаблица";
		Иначе
			ПолучатьФПДИзОсновнойТаблицы = Ложь;	
		КонецЕсли;	
		
		ТаблицыКУничтожению.Добавить("ВТБазовыеЗаписиИсточникФПД");
	КонецЕсли;	
	
	
	ЗапросыОбъединения = Новый Массив;
	УстановленаВременнаяТаблицаДляПомщения = Ложь;
	Если ПолучатьФПДИзОсновнойТаблицы Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	БазовыеЗаписиФПД.Регистратор КАК Регистратор,
		|	БазовыеЗаписиФПД.НомерСтроки КАК НомерСтроки,
		|	БазовыеЗаписиФПД.ПериодДействияНачало КАК ПериодДействияНачало,
		|	БазовыеЗаписиФПД.ПериодДействияКонец КАК ПериодДействияКонец
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			(Регистратор, НомерСтроки) В
		|				(ВЫБРАТЬ
		|					БазовыеЗаписи.Регистратор,
		|					БазовыеЗаписи.НомерСтроки
		|				ИЗ
		|					#ВТБазовыеЗаписи КАК БазовыеЗаписи
		|				ГДЕ
		|					&УсловияОтборФПДОснованаяТаблица
		|					И БазовыеЗаписи.НеобходимоНормировать
		|					И БазовыеЗаписи.ЕстьВытесняющиеНачисления)) КАК БазовыеЗаписиФПД";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияОтборФПДОснованаяТаблица", ТекстУсловияОтборФПДОснованаяТаблица);
		
		ЗапросыОбъединения.Добавить(ТекстЗапроса);
		УстановленаВременнаяТаблицаДляПомщения = Истина;
	КонецЕсли;
		
	Если ПолучатьФПДИзВременнойТаблицы Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	БазовыеЗаписиФПД.Регистратор КАК Регистратор,
		|	БазовыеЗаписиФПД.НомерСтроки КАК НомерСтроки,
		|	БазовыеЗаписиФПД.ПериодДействияНачало КАК ПериодДействияНачало,
		|	БазовыеЗаписиФПД.ПериодДействияКонец КАК ПериодДействияКонец
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК БазовыеЗаписиФПД
		|ГДЕ
		|	(БазовыеЗаписиФПД.Регистратор, БазовыеЗаписиФПД.НомерСтроки) В
		|			(ВЫБРАТЬ
		|				БазовыеЗаписи.Регистратор,
		|				БазовыеЗаписи.НомерСтроки
		|			ИЗ
		|				#ВТБазовыеЗаписи КАК БазовыеЗаписи
		|			ГДЕ
		|				&УсловиеОтборФПДВременнаяТаблица
		|				И БазовыеЗаписи.НеобходимоНормировать
		|				И БазовыеЗаписи.ЕстьВытесняющиеНачисления)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТРегистрРасчета_Начисления_ФактическийПериодДействия", ОписаниеНабораТеукщегоРегистратора.ИмяВТРегистрРасчетаФПД);   
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтборФПДВременнаяТаблица", ТекстУсловияОтборФПДВременнаяТаблица);
		ЗапросыОбъединения.Добавить(ТекстЗапроса);
	КонецЕсли;
		
	Запрос.Текст = СтрСоединить(ЗапросыОбъединения, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТБазовыеЗаписи", ИмяВТОтборЗаписейФПД);
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	Схема.ПакетЗапросов[0].ТаблицаДляПомещения = ИмяВТРезультат;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	Запрос.Выполнить();
КонецПроцедуры	

Процедура СоздатьВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц(ОписаниеНеобходмыхДанных, МенеджерКадровогоУчета = Неопределено, ИмяВТБазовыеЗаписи = "ВТБазовыеЗаписи", ИмяВТРезультат = "ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц")
	Если МенеджерКадровогоУчета = Неопределено Тогда
		МенеджерКадровогоУчета = КадровыйУчет;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ОписаниеНеобходмыхДанных.НеобходимоКорректироватьПериодБазовыхЗаписей Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазовыеЗаписи.Сотрудник КАК Сотрудник,
		|	БазовыеЗаписи.ПериодДействия КАК Период,
		|	БазовыеЗаписи.ПериодДействияНачало КАК ДатаНачала,
		|	БазовыеЗаписи.ПериодДействияКонец КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|ИЗ
		|	ВТБазовыеЗаписи КАК БазовыеЗаписи
		|ГДЕ
		|	БазовыеЗаписи.НеобходимоНормировать
		|	И БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБазовыеЗаписи", ИмяВТБазовыеЗаписи);
		Запрос.Выполнить();
		
		ТаблицыКУничтожению.Добавить("ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц");
		
		РасчетЗарплатыРасширенный.СоздатьВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц(МенеджерВременныхТаблиц, "ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц", МенеджерКадровогоУчета);
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц";
		
		Запрос.Выполнить();
	КонецЕсли;
КонецПроцедуры	
	
Процедура СоздатьВТБазовыеЗаписиПериоды(ОписаниеНеобходмыхДанных, ОписаниеТекущегоНабораРегистраНачисления = Неопределено, ИмяВТБазовыеЗаписи = "ВТБазовыеЗаписи", ИмяВТРезультат = "ВТБазовыеЗаписиПериоды")	
	СоздатьВТФПДБазовыхЗаписей(ОписаниеНеобходмыхДанных, ОписаниеТекущегоНабораРегистраНачисления, ИмяВТБазовыеЗаписи);
	ТаблицыКУничтожению.Добавить("ВТФПДБазовыхЗаписей");

	СоздатьВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц(ОписаниеНеобходмыхДанных, МенеджерКадровогоУчета, ИмяВТБазовыеЗаписи);
	ТаблицыКУничтожению.Добавить("ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =    
	"ВЫБРАТЬ
	|	БазовыеЗаписи.*,
	|	ВЫБОР
	|		КОГДА ДатыНачала.ДатаНачала ЕСТЬ NULL
	|				И ПериодыДействияБазовыхЗаписей.ПериодДействияНачало ЕСТЬ NULL
	|			ТОГДА БазовыеЗаписи.ПериодДействияНачало
	|		КОГДА ДатыНачала.ДатаНачала ЕСТЬ NULL
	|			ТОГДА ПериодыДействияБазовыхЗаписей.ПериодДействияНачало
	|		ИНАЧЕ ДатыНачала.ДатаНачала
	|	КОНЕЦ КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА ДатыОкончания.ДатаОкончания ЕСТЬ NULL
	|				И ПериодыДействияБазовыхЗаписей.ПериодДействияКонец ЕСТЬ NULL
	|			ТОГДА БазовыеЗаписи.ПериодДействияКонец
	|		КОГДА ДатыОкончания.ДатаОкончания ЕСТЬ NULL
	|			ТОГДА ПериодыДействияБазовыхЗаписей.ПериодДействияКонец
	|		ИНАЧЕ ДатыОкончания.ДатаОкончания
	|	КОНЕЦ КАК ПериодДействияКонец
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	#ВТБазовыеЗаписи КАК БазовыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФПДБазовыхЗаписей КАК ПериодыДействияБазовыхЗаписей
	|		ПО (ПериодыДействияБазовыхЗаписей.Регистратор = БазовыеЗаписи.Регистратор)
	|			И (ПериодыДействияБазовыхЗаписей.НомерСтроки = БазовыеЗаписи.НомерСтроки)
	|			И БазовыеЗаписи.НеобходимоНормировать
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК ДатыНачала
	|		ПО (ДатыНачала.Сотрудник = БазовыеЗаписи.Сотрудник)
	|			И (ДатыНачала.ДатаНачала МЕЖДУ ПериодыДействияБазовыхЗаписей.ПериодДействияНачало И ПериодыДействияБазовыхЗаписей.ПериодДействияКонец)
	|			И (БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц)
	|			И (БазовыеЗаписи.НеобходимоНормировать)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК ДатыОкончания
	|		ПО (ДатыОкончания.Сотрудник = БазовыеЗаписи.Сотрудник)
	|			И (ДатыОкончания.ДатаОкончания МЕЖДУ ПериодыДействияБазовыхЗаписей.ПериодДействияНачало И ПериодыДействияБазовыхЗаписей.ПериодДействияКонец)
	|			И (БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц)
	|			И (БазовыеЗаписи.НеобходимоНормировать)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТБазовыеЗаписи", ИмяВТБазовыеЗаписи);

	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУничтожению);
	ТаблицыКУничтожению.Очистить();
	
КонецПроцедуры	

Процедура СоздатьВТКоэффициентыНормированияПоВремени(ИмяВТБазовыеЗаписиПериоды, ВедущиеЗаписиКаскадноНормируемыхНачислений = Неопределено, МенеджерДанныхУчетаВремени = Неопределено, ИмяВТРезультат = "ВТКоэффициентаНормированияПоВремени")
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВедущиеЗаписи", ВедущиеЗаписиКаскадноНормируемыхНачислений);
	Если ВедущиеЗаписиКаскадноНормируемыхНачислений = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ВедущиеЗаписи.Регистратор КАК Регистратор,
		|	ВедущиеЗаписи.НомерСтроки КАК НомерСтроки,
		|	ВедущиеЗаписи.ВидРасчета КАК ВидРасчета,
		|	ВедущиеЗаписи.Сотрудник КАК Сотрудник,
		|	ВедущиеЗаписи.Результат КАК Результат,
		|	ВедущиеЗаписи.ПериодДействия КАК ПериодДействия,
		|	ВедущиеЗаписи.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ВедущиеЗаписи.ПериодДействияКонец КАК ПериодДействияКонец,
		|	ВедущиеЗаписи.ГрафикРаботы КАК ГрафикРаботы,
		|	ВедущиеЗаписи.ОбщийГрафик КАК ОбщийГрафик,
		|	ВедущиеЗаписи.ВремяВЧасах КАК ВремяВЧасах,
		|	0 КАК ОчередностьРасчета,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодРегистрацииВремени,
		|	ЛОЖЬ КАК НеобходимоНормировать,
		|	ЛОЖЬ КАК НормироватьКаскадно
		|ПОМЕСТИТЬ ВТВедущиеЗаписиКаскадноНормируемыхНачислений
		|ИЗ
		|	РегистрРасчета.Начисления КАК ВедущиеЗаписи
		|ГДЕ
		|	ЛОЖЬ";
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВедущиеЗаписи.Регистратор КАК Регистратор,
		|	ВедущиеЗаписи.НомерСтроки КАК НомерСтроки,
		|	ВедущиеЗаписи.ВидРасчета КАК ВидРасчета,
		|	ВедущиеЗаписи.Сотрудник КАК Сотрудник,
		|	ВедущиеЗаписи.Результат КАК Результат,
		|	ВедущиеЗаписи.ПериодДействия КАК ПериодДействия,
		|	ВедущиеЗаписи.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ВедущиеЗаписи.ПериодДействияКонец КАК ПериодДействияКонец,
		|	ВедущиеЗаписи.ГрафикРаботы КАК ГрафикРаботы,
		|	ВедущиеЗаписи.ОбщийГрафик КАК ОбщийГрафик,
		|	ВедущиеЗаписи.ВремяВЧасах КАК ВремяВЧасах,
		|	ВедущиеЗаписи.ОчередностьРасчета КАК ОчередностьРасчета,
		|	ВедущиеЗаписи.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|	ВедущиеЗаписи.НеобходимоНормировать КАК НеобходимоНормировать,
		|	ВедущиеЗаписи.НормироватьКаскадно КАК НормироватьКаскадно
		|ПОМЕСТИТЬ ВТВедущиеЗаписиКаскадноНормируемыхНачислений
		|ИЗ
		|	&ВедущиеЗаписи КАК ВедущиеЗаписи";
	КонецЕсли;	
	Запрос.Выполнить();
	
	ТаблицыКУничтожению.Добавить("ВТВедущиеЗаписиКаскадноНормируемыхНачислений");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.Регистратор КАК Регистратор,
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.НомерСтроки КАК НомерСтроки,
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.ВидРасчета КАК ВидРасчета,
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.Сотрудник КАК Сотрудник,
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.Результат КАК Результат,
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.ПериодДействия КАК ПериодДействия,
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК БазовыйПериодОсновнойЗаписиНачало,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК БазовыйПериодОсновнойЗаписиКонец,
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.ГрафикРаботы КАК ГрафикРаботы,
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.ОбщийГрафик КАК ОбщийГрафик,
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.ВремяВЧасах КАК ВремяВЧасах,
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.ОчередностьРасчета КАК ОчередностьРасчета,
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.НеобходимоНормировать КАК НеобходимоНормировать,
	|	ВедущиеЗаписиКаскадноНормируемыхНачислений.НормироватьКаскадно КАК НормироватьКаскадно,
	|	ИСТИНА КАК ВедущаяЗаписьКаскадногоРасчета,
	|	ИСТИНА КАК ИспользоватьПриРасчетеИтога,
	|	ИСТИНА КАК ИспользоватьПриРасчетеКоэффициента
	|ПОМЕСТИТЬ ВТИсточникДанныхУчетаВремени
	|ИЗ
	|	ВТВедущиеЗаписиКаскадноНормируемыхНачислений КАК ВедущиеЗаписиКаскадноНормируемыхНачислений
	|ГДЕ
	|	НЕ ВедущиеЗаписиКаскадноНормируемыхНачислений.НормироватьКаскадно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазовыеЗаписиПериоды.Регистратор,
	|	БазовыеЗаписиПериоды.НомерСтроки,
	|	БазовыеЗаписиПериоды.ВидРасчета,
	|	БазовыеЗаписиПериоды.Сотрудник,
	|	БазовыеЗаписиПериоды.Результат,
	|	БазовыеЗаписиПериоды.ПериодДействия,
	|	БазовыеЗаписиПериоды.ПериодДействияНачало,
	|	БазовыеЗаписиПериоды.ПериодДействияКонец,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	БазовыеЗаписиПериоды.ГрафикРаботы,
	|	БазовыеЗаписиПериоды.ОбщийГрафик,
	|	БазовыеЗаписиПериоды.ВремяВЧасах,
	|	БазовыеЗаписиПериоды.ОчередностьРасчета,
	|	БазовыеЗаписиПериоды.ПериодРегистрацииВремени,
	|	БазовыеЗаписиПериоды.НеобходимоНормировать,
	|	БазовыеЗаписиПериоды.НормироватьКаскадно,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	ВТБазовыеЗаписиПериоды КАК БазовыеЗаписиПериоды
	|ГДЕ
	|	БазовыеЗаписиПериоды.НеобходимоНормировать
	|	И НЕ БазовыеЗаписиПериоды.НормироватьКаскадно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазовыеЗаписиПериоды.Регистратор,
	|	БазовыеЗаписиПериоды.НомерСтроки,
	|	БазовыеЗаписиПериоды.ВидРасчета,
	|	БазовыеЗаписиПериоды.Сотрудник,
	|	БазовыеЗаписиПериоды.Результат,
	|	БазовыеЗаписиПериоды.ПериодДействия,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписиПериоды.БазовыйПериодОсновнойЗаписиНачало > БазовыеЗаписиПериоды.ПериодДействияНачало
	|			ТОГДА БазовыеЗаписиПериоды.БазовыйПериодОсновнойЗаписиНачало
	|		ИНАЧЕ БазовыеЗаписиПериоды.ПериодДействияНачало
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписиПериоды.БазовыйПериодОсновнойЗаписиКонец < БазовыеЗаписиПериоды.ПериодДействияКонец
	|			ТОГДА БазовыеЗаписиПериоды.БазовыйПериодОсновнойЗаписиКонец
	|		ИНАЧЕ БазовыеЗаписиПериоды.ПериодДействияКонец
	|	КОНЕЦ,
	|	БазовыеЗаписиПериоды.БазовыйПериодОсновнойЗаписиНачало,
	|	БазовыеЗаписиПериоды.БазовыйПериодОсновнойЗаписиКонец,
	|	БазовыеЗаписиПериоды.ГрафикРаботы,
	|	БазовыеЗаписиПериоды.ОбщийГрафик,
	|	БазовыеЗаписиПериоды.ВремяВЧасах,
	|	БазовыеЗаписиПериоды.ОчередностьРасчета,
	|	БазовыеЗаписиПериоды.ПериодРегистрацииВремени,
	|	БазовыеЗаписиПериоды.НеобходимоНормировать,
	|	БазовыеЗаписиПериоды.НормироватьКаскадно,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	ВТБазовыеЗаписиПериоды КАК БазовыеЗаписиПериоды
	|ГДЕ
	|	БазовыеЗаписиПериоды.НеобходимоНормировать
	|	И НЕ БазовыеЗаписиПериоды.НормироватьКаскадно
	|	И (БазовыеЗаписиПериоды.БазовыйПериодОсновнойЗаписиНачало МЕЖДУ БазовыеЗаписиПериоды.ПериодДействияНачало И БазовыеЗаписиПериоды.ПериодДействияКонец
	|			ИЛИ БазовыеЗаписиПериоды.ПериодДействияНачало МЕЖДУ БазовыеЗаписиПериоды.БазовыйПериодОсновнойЗаписиНачало И БазовыеЗаписиПериоды.БазовыйПериодОсновнойЗаписиКонец)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБазовыеЗаписиПериоды", ИмяВТБазовыеЗаписиПериоды);
	
	ТаблицыКУничтожению.Добавить("ВТИсточникДанныхУчетаВремени");
	
	Запрос.Выполнить();
	
	ОписаниеФильтраДанныхВремени = МенеджерДанныхУчетаВремени.ОписаниеФильтраВТЗарегистрированноеВремяПоНаборамВидовВремени();
	ОписаниеФильтраДанныхВремени.ИмяТаблицы = "ВТИсточникДанныхУчетаВремени";
	ОписаниеФильтраДанныхВремени.ИмяПоляИсточникДанных = "ГрафикРаботы";
	ОписаниеФильтраДанныхВремени.ИмяПоляПериодРегистрацииВремени = "ПериодРегистрацииВремени";
	ОписаниеФильтраДанныхВремени.ИмяПоляОбщийГрафик = "ОбщийГрафик";
	ОписаниеФильтраДанныхВремени.ИмяПоляМесяц = "ПериодДействия";
	ОписаниеФильтраДанныхВремени.ИмяПоляДатаНачала = "ПериодДействияНачало";
	ОписаниеФильтраДанныхВремени.ИмяПоляДатаОкончания = "ПериодДействияКонец";
	ОписаниеФильтраДанныхВремени.ИмяПоляКлючНабораВидовВремени = "ВидРасчета";

	ОписаниеФильтраДанныхВремени.КлючевыеПоля.Добавить("Регистратор");
	ОписаниеФильтраДанныхВремени.КлючевыеПоля.Добавить("НомерСтроки");
	ОписаниеФильтраДанныхВремени.КлючевыеПоля.Добавить("ВидРасчета");
	ОписаниеФильтраДанныхВремени.КлючевыеПоля.Добавить("Сотрудник");
	ОписаниеФильтраДанныхВремени.КлючевыеПоля.Добавить("ПериодДействия");
	ОписаниеФильтраДанныхВремени.КлючевыеПоля.Добавить("ПериодДействияНачало");
	ОписаниеФильтраДанныхВремени.КлючевыеПоля.Добавить("ПериодДействияКонец");
	ОписаниеФильтраДанныхВремени.КлючевыеПоля.Добавить("ВремяВЧасах");
	ОписаниеФильтраДанныхВремени.КлючевыеПоля.Добавить("Результат");
	ОписаниеФильтраДанныхВремени.КлючевыеПоля.Добавить("ВедущаяЗаписьКаскадногоРасчета");
	ОписаниеФильтраДанныхВремени.КлючевыеПоля.Добавить("ИспользоватьПриРасчетеИтога");
	ОписаниеФильтраДанныхВремени.КлючевыеПоля.Добавить("ИспользоватьПриРасчетеКоэффициента");
	ОписаниеФильтраДанныхВремени.КлючевыеПоля.Добавить("БазовыйПериодОсновнойЗаписиНачало");
	ОписаниеФильтраДанныхВремени.КлючевыеПоля.Добавить("БазовыйПериодОсновнойЗаписиКонец");
	
	ОписаниеНаборовВидовВремени =  МенеджерДанныхУчетаВремени.ОписаниеТаблицыНаборовВидовВремени();
	ОписаниеНаборовВидовВремени.ИмяТаблицы = "ПланВидовРасчета.Начисления.ВидыВремени";
	ОписаниеНаборовВидовВремени.ИмяПоляКлюч = "Ссылка";
	ОписаниеНаборовВидовВремени.ИмяПоляВидВремени = "ВидВремени";
	ОписаниеНаборовВидовВремени.ИмяПоляУчитыватьТолькоПраздники = "ОпределяющийЗаПраздничныеДни";
	
	МенеджерДанныхУчетаВремени.СоздатьВТЗарегистрированноеВремяПоНаборамВидовВремени(ОписаниеФильтраДанныхВремени, ОписаниеНаборовВидовВремени, "ВТВремяПоБазовымЗаписям");
	ТаблицыКУничтожению.Добавить("ВТВремяПоБазовымЗаписям");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВремяПоБазовымЗаписям.Регистратор КАК Регистратор,
	|	ВремяПоБазовымЗаписям.НомерСтроки КАК НомерСтроки,
	|	ВремяПоБазовымЗаписям.ВедущаяЗаписьКаскадногоРасчета КАК ВедущаяЗаписьКаскадногоРасчета,
	|	СУММА(ВЫБОР
	|			КОГДА ВремяПоБазовымЗаписям.ВремяВЧасах
	|				ТОГДА ВремяПоБазовымЗаписям.Часов
	|			ИНАЧЕ ВремяПоБазовымЗаписям.Дней
	|		КОНЕЦ) КАК Время
	|ПОМЕСТИТЬ ВТБазовыеЗаписиВремяИтог
	|ИЗ
	|	ВТВремяПоБазовымЗаписям КАК ВремяПоБазовымЗаписям
	|ГДЕ
	|	ВремяПоБазовымЗаписям.ИспользоватьПриРасчетеИтога
	|
	|СГРУППИРОВАТЬ ПО
	|	ВремяПоБазовымЗаписям.Регистратор,
	|	ВремяПоБазовымЗаписям.НомерСтроки,
	|	ВремяПоБазовымЗаписям.ВедущаяЗаписьКаскадногоРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремяПоБазовымЗаписям.Регистратор КАК Регистратор,
	|	ВремяПоБазовымЗаписям.НомерСтроки КАК НомерСтроки,
	|	ВремяПоБазовымЗаписям.ВидРасчета КАК ВидРасчета,
	|	ВремяПоБазовымЗаписям.Сотрудник КАК Сотрудник,
	|	ВремяПоБазовымЗаписям.ПериодДействия КАК ПериодДействия,
	|	ВремяПоБазовымЗаписям.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ВремяПоБазовымЗаписям.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ВремяПоБазовымЗаписям.БазовыйПериодОсновнойЗаписиНачало КАК БазовыйПериодОсновнойЗаписиНачало,
	|	ВремяПоБазовымЗаписям.БазовыйПериодОсновнойЗаписиКонец КАК БазовыйПериодОсновнойЗаписиКонец,
	|	ВремяПоБазовымЗаписям.ВедущаяЗаписьКаскадногоРасчета КАК ВедущаяЗаписьКаскадногоРасчета,
	|	ВремяПоБазовымЗаписям.Результат КАК Результат,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписиВремяИтог.Время = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВремяПоБазовымЗаписям.ВремяВЧасах
	|					ТОГДА ВЫРАЗИТЬ(ВремяПоБазовымЗаписям.Часов КАК ЧИСЛО(31, 8))
	|				ИНАЧЕ ВЫРАЗИТЬ(ВремяПоБазовымЗаписям.Дней КАК ЧИСЛО(31, 8))
	|			КОНЕЦ / (ВЫРАЗИТЬ(БазовыеЗаписиВремяИтог.Время КАК ЧИСЛО(31, 8)))
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ ВТБазовыеЗаписиКоэффициентыПоВремени
	|ИЗ
	|	ВТВремяПоБазовымЗаписям КАК ВремяПоБазовымЗаписям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыеЗаписиВремяИтог КАК БазовыеЗаписиВремяИтог
	|		ПО ВремяПоБазовымЗаписям.Регистратор = БазовыеЗаписиВремяИтог.Регистратор
	|			И ВремяПоБазовымЗаписям.НомерСтроки = БазовыеЗаписиВремяИтог.НомерСтроки
	|			И ВремяПоБазовымЗаписям.ВедущаяЗаписьКаскадногоРасчета = БазовыеЗаписиВремяИтог.ВедущаяЗаписьКаскадногоРасчета
	|ГДЕ
	|	ВремяПоБазовымЗаписям.ИспользоватьПриРасчетеКоэффициента";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБазовыеЗаписиКоэффициентыПоВремени", ИмяВТРезультат);
	
	Запрос.Выполнить();
	ТаблицыКУничтожению.Добавить("ВТБазовыеЗаписиВремяИтог");
	
КонецПроцедуры	

Процедура СоздатьВТКоэффициентыНормированияПоВремениПустая(ИмяВТРезультат = "ВТКоэффициентаНормированияПоВремени")
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК БазовыйПериодОсновнойЗаписиНачало,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК БазовыйПериодОсновнойЗаписиКонец,
	|	ЛОЖЬ КАК ВедущаяЗаписьКаскадногоРасчета,
	|	0 КАК Результат,
	|	0 КАК Коэффициент
	|ПОМЕСТИТЬ ВТБазовыеЗаписиКоэффициентыПоВремени
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	ЛОЖЬ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБазовыеЗаписиКоэффициентыПоВремени", ИмяВТРезультат);
	
	Запрос.Выполнить();
КонецПроцедуры	

Процедура ДобавитьКлючевыеПоляВЗапрос(ЗапросПакета, КлючевыеПоля, ПсевдонимТаблицы)
	ИндексКолонки = ЗапросПакета.Колонки.Количество();
	Для Каждого ОписаниеКлючевогоПоля Из КлючевыеПоля Цикл		
		Для Каждого Оператор Из ЗапросПакета.Операторы Цикл
			ИсточникОператораВыбрать = Оператор.Источники.НайтиПоПсевдониму(ПсевдонимТаблицы);
			
			Если ТипЗнч(ИсточникОператораВыбрать.Источник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
				Если ИсточникОператораВыбрать.Источник.ДоступныеПоля.Найти(ОписаниеКлючевогоПоля.Ключ) = Неопределено Тогда
					ИсточникОператораВыбрать.Источник.ДоступныеПоля.Добавить(ОписаниеКлючевогоПоля.Ключ);
				КонецЕсли;
			КонецЕсли;	
					
			Оператор.ВыбираемыеПоля.Добавить(ПсевдонимТаблицы + "." + ОписаниеКлючевогоПоля.Ключ, ИндексКолонки);
		КонецЦикла;	
		
		ЗапросПакета.Колонки[ИндексКолонки].Псевдоним = ОписаниеКлючевогоПоля.Значение;
		ИндексКолонки = ИндексКолонки + 1;
	КонецЦикла;	
КонецПроцедуры	

Функция ОписаниеНеобходмыхДанных()
	ОписаниеНеобходмыхДанных = Новый Структура;
	ОписаниеНеобходмыхДанных.Вставить("НеобходимоНормироватьЗаписи", Ложь);
	ОписаниеНеобходмыхДанных.Вставить("НеобходимоНормироватьЗаписиКаскадно", Ложь);
	ОписаниеНеобходмыхДанных.Вставить("НеобходимоНормироватьЗаписиПоДаннымУчетаВремени", Ложь);
	ОписаниеНеобходмыхДанных.Вставить("НеобходимоКорректироватьПериодБазовыхЗаписей", Ложь);
	ОписаниеНеобходмыхДанных.Вставить("НеобходимоПолучатьФПДБазовыхЗаписей", Ложь);
	ОписаниеНеобходмыхДанных.Вставить("НеобходимФПДДляЗаписейТекущегоНабора", Ложь);
	ОписаниеНеобходмыхДанных.Вставить("ПолучатьФПДДляЗаписейОсновнойТаблицыРегистра", Ложь);
	
	Возврат ОписаниеНеобходмыхДанных;
КонецФункции	

Функция ДанныеКаскадногоНормирования(ИмяВТБазовыеЗаписиПериоды, ОписаниеНабораТекущегоРегистратора)	
	ОписаниеОтбора = ОписаниеОтбораВТБазовыеЗаписи();
	ОписаниеОтбора.ИмяВТОсновныеЗаписи = ИмяВТБазовыеЗаписиПериоды;
	ОписаниеОтбора.ИмяТаблицыВедущиеВидыРасчета = "ПланВидовРасчета.Начисления.ВедущиеВидыРасчета";
	
	ЗаполнитьОтборВедущихЗаписейНачисленийДляКаскадногоНормирования(ОписаниеОтбора);
	
	ОписаниеВТРезультатВедущийЗаписи = ОписаниеВТБазовыеЗаписиРезультат();
	ОписаниеВТРезультатВедущийЗаписи.ИмяВТРезультат = "ВТВедущиеЗаписиКаскадногоРасчетаНачислений";
	ОписаниеВТРезультатВедущийЗаписи.ВыражениеПоляНеобходимоНормировать = "ИСТИНА";
		
	СоздатьВТБазовыеЗаписи(ОписаниеОтбора, ОписаниеВТРезультатВедущийЗаписи, ОписаниеНабораТекущегоРегистратора);
	ТаблицыКУничтожению.Добавить("ВТВедущиеЗаписиКаскадногоРасчетаНачислений");
	
	НеобходимыеДанные = ОписаниеНеобходмыхДанных();             
	НеобходимыеДанные.НеобходимоКорректироватьПериодБазовыхЗаписей = Истина;
	НеобходимыеДанные.НеобходимоПолучатьФПДБазовыхЗаписей = Истина;
	НеобходимыеДанные.ПолучатьФПДДляЗаписейОсновнойТаблицыРегистра = Истина;
	НеобходимыеДанные.НеобходимФПДДляЗаписейТекущегоНабора = ОписаниеНабораТекущегоРегистратора <> Неопределено;
	
	СоздатьВТБазовыеЗаписиПериоды(НеобходимыеДанные, ОписаниеНабораТекущегоРегистратора, ОписаниеВТРезультатВедущийЗаписи.ИмяВТРезультат , "ВТВедущиеЗаписиКаскадногоРасчетаНачисленийПериоды");
	ТаблицыКУничтожению.Добавить("ВТВедущиеЗаписиКаскадногоРасчетаНачисленийПериоды");
		
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ " + ИмяВТБазовыеЗаписиПериоды + " ГДЕ НеобходимоНормировать И НормироватьКаскадно");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗаписиНачисленийНормируемыеКаскадно = Запрос.Выполнить().Выгрузить();
	ЗаписиНачисленийНормируемыеКаскадно.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
		
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ ВТВедущиеЗаписиКаскадногоРасчетаНачисленийПериоды");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗаписиВедущихНачислений = Запрос.Выполнить().Выгрузить(); 
	
	РазбитьЗаписиНормируемыеКаскадно(ЗаписиНачисленийНормируемыеКаскадно);	
	РазбитьЗаписиВедущихНачислений(ЗаписиВедущихНачислений, ЗаписиНачисленийНормируемыеКаскадно);

	ЗаписиНачисленийНормируемыеКаскадно.Колонки.Добавить("БазоваяДляКаскадноНормиреумойЗаписи", Новый ОписаниеТипов("Булево"));
	
    // Дополнит таблицу каскадно нормруемых записей
	// ведущими записями, которые сами нужно нормировать каскадно.
	ВедущиеЗаписиНормируемыеКаскадно = ЗаписиВедущихНачислений.НайтиСтроки(Новый Структура("НормироватьКаскадно", Истина));
	
	Для Каждого ВедущаяЗапись Из ВедущиеЗаписиНормируемыеКаскадно Цикл
		НоваяНормируемаяЗапись = ЗаписиНачисленийНормируемыеКаскадно.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяНормируемаяЗапись, ВедущаяЗапись);
		НоваяНормируемаяЗапись.БазоваяДляКаскадноНормиреумойЗаписи = Истина;
	КонецЦикла;	
	
	Результат = Новый Структура("ЗаписиНормируемыеКаскадно, ЗаписиВедущихНачислений");
	Результат.ЗаписиНормируемыеКаскадно = ЗаписиНачисленийНормируемыеКаскадно;
	Результат.ЗаписиВедущихНачислений =  ЗаписиВедущихНачислений;
	
	Возврат Результат;
КонецФункции	

Процедура РасчитатьКоэффциентЗаписейНормируемыхКаскадно(ЗаписиНормируемыеКаскадно, КоэффициентыВедущихЗаписей, ЗависимостиПоБазе, ОчередностьРасчета = Неопределено)
	ЗаписиНормируемыеКаскадно.Колонки.Добавить("БазаРаспределения", Новый ОписаниеТипов("Число"));
		
	Если ОчередностьРасчета = Неопределено Тогда
		НормируемыеЗаписиОчередности = ЗаписиНормируемыеКаскадно;
	Иначе
		НормируемыеЗаписиОчередности = ЗаписиНормируемыеКаскадно.НайтиСтроки(Новый Структура("ОчередностьРасчета", ОчередностьРасчета));
	КонецЕсли;	
	
	СтруктураПоискаВедущихЗаписей = Новый Структура("Сотрудник, ПериодДействия, ВидРасчета");
	СтруктураПоискаВедущихЗаписейНомируемыхКаскадно = Новый Структура("Сотрудник, ПериодДействия, ВидРасчета, БазоваяДляКаскадноНормиреумойЗаписи");
	
	Для Каждого НормируемаяЗапись Из НормируемыеЗаписиОчередности Цикл
		БазовыеВидыРасчета = ЗависимостиПоБазе[НормируемаяЗапись.ВидРасчета];
		Если БазовыеВидыРасчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаВедущихЗаписей, НормируемаяЗапись);	
		ЗаполнитьЗначенияСвойств(СтруктураПоискаВедущихЗаписейНомируемыхКаскадно, НормируемаяЗапись);	
		СтруктураПоискаВедущихЗаписейНомируемыхКаскадно.БазоваяДляКаскадноНормиреумойЗаписи = Истина;
		
		Для Каждого ОписаниеБазовогоВидаРасчета Из БазовыеВидыРасчета Цикл
			СтруктураПоискаВедущихЗаписей.ВидРасчета = ОписаниеБазовогоВидаРасчета.ВидРасчета;
			СтруктураПоискаВедущихЗаписейНомируемыхКаскадно.ВидРасчета = ОписаниеБазовогоВидаРасчета.ВидРасчета;
			
			Если ОписаниеБазовогоВидаРасчета.НормироватьКаскадно Тогда
				БазовыеЗаписи = ЗаписиНормируемыеКаскадно.НайтиСтроки(СтруктураПоискаВедущихЗаписейНомируемыхКаскадно);		
			Иначе
				БазовыеЗаписи = КоэффициентыВедущихЗаписей.НайтиСтроки(СтруктураПоискаВедущихЗаписей);	
			КонецЕсли;	
			
			Для Каждого ТекущаяБазоваяЗапись Из БазовыеЗаписи Цикл
				Если ДатаВходитВПериодДействия(ТекущаяБазоваяЗапись.ПериодДействияНачало, НормируемаяЗапись) 
					И ДатаВходитВПериодДействия(ТекущаяБазоваяЗапись.ПериодДействияКонец, НормируемаяЗапись) Тогда
					
					НормируемаяЗапись.БазаРаспределения = НормируемаяЗапись.БазаРаспределения + ТекущаяБазоваяЗапись.Результат * ТекущаяБазоваяЗапись.Коэффициент;
				КонецЕсли;					
			КонецЦикла;				
		КонецЦикла;			
	КонецЦикла;	
	
	НормируемыеЗаписиИтоги = ЗаписиНормируемыеКаскадно.Скопировать(, "Регистратор, НомерСтроки, БазаРаспределения, БазоваяДляКаскадноНормиреумойЗаписи, БазовыйПериодОсновнойЗаписиНачало, БазовыйПериодОсновнойЗаписиКонец");
	НормируемыеЗаписиИтоги.Свернуть("Регистратор, НомерСтроки, БазоваяДляКаскадноНормиреумойЗаписи, БазовыйПериодОсновнойЗаписиНачало, БазовыйПериодОсновнойЗаписиКонец", "БазаРаспределения");
	НормируемыеЗаписиИтоги.Индексы.Добавить("Регистратор, НомерСтроки, БазоваяДляКаскадноНормиреумойЗаписи, БазовыйПериодОсновнойЗаписиНачало, БазовыйПериодОсновнойЗаписиКонец");
	СтруктураПоискаИтогов = Новый Структура("Регистратор, НомерСтроки, БазоваяДляКаскадноНормиреумойЗаписи, БазовыйПериодОсновнойЗаписиНачало, БазовыйПериодОсновнойЗаписиКонец");
	
	Для Каждого НормируемаяЗапись Из НормируемыеЗаписиОчередности Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаИтогов, НормируемаяЗапись);
		СтрокаИтогов = НормируемыеЗаписиИтоги.НайтиСтроки(СтруктураПоискаИтогов)[0];
		
		НормируемаяЗапись.Коэффициент = ?(СтрокаИтогов.БазаРаспределения = 0, 0, НормируемаяЗапись.БазаРаспределения / СтрокаИтогов.БазаРаспределения);
	КонецЦикла;	
		
	ЗаписиНормируемыеКаскадно.Колонки.Удалить("БазаРаспределения");
КонецПроцедуры	

Процедура ЗаполнитьОтборВедущихЗаписейНачисленийДляКаскадногоНормирования(ОписаниеОтбора)
	ОписаниеОтбора.БазовыеИзмерения.Вставить("Сотрудник", "Сотрудник");	
		
	// условие на период регистрации
	ТекстУсловия = "БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.ПериодРегистрации
					|	ИЛИ БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.ПериодДействияКонец";							
	ОписаниеОтбора.Условия.Добавить(ТекстУсловия);	
	
	// условие на период действия
	ТекстУсловия = "БазовыеЗаписи.ПериодДействия >= НАЧАЛОПЕРИОДА(ОсновныеЗаписи.ПериодДействияНачало, МЕСЯЦ)";				
	ОписаниеОтбора.Условия.Добавить(ТекстУсловия);	
	ТекстУсловия = "БазовыеЗаписи.ПериодДействия <= ОсновныеЗаписи.ПериодДействияКонец";				
	ОписаниеОтбора.Условия.Добавить(ТекстУсловия);
	
	ОписаниеОтбора.Условия.Добавить("ОсновныеЗаписи.НормироватьКаскадно");
	ОписаниеОтбора.Условия.Добавить("ОсновныеЗаписи.НеобходимоНормировать");
КонецПроцедуры

Процедура РазбитьЗаписиНормируемыеКаскадно(ЗаписиНормируемыеКаскадно)
	ИндексПоследнейОбрабатываемойСтроки = ЗаписиНормируемыеКаскадно.Количество() - 1;
	ИндексСледущейОбрабатываемойСтроки = 0;
	
	Пока ИндексСледущейОбрабатываемойСтроки <= ИндексПоследнейОбрабатываемойСтроки Цикл
		ТекущаяСтрока = ЗаписиНормируемыеКаскадно[ИндексСледущейОбрабатываемойСтроки];
		Если ТекущаяСтрока.ПериодДействияНачало < ТекущаяСтрока.БазовыйПериодОсновнойЗаписиНачало Тогда
			НоваяСтрока = ЗаписиНормируемыеКаскадно.Вставить(ИндексСледущейОбрабатываемойСтроки + 1);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			ТекущаяСтрока.ПериодДействияКонец = НачалоДня(ТекущаяСтрока.БазовыйПериодОсновнойЗаписиНачало - 86400);
			НоваяСтрока.ПериодДействияНачало = ТекущаяСтрока.БазовыйПериодОсновнойЗаписиНачало;
			ТекущаяСтрока = НоваяСтрока;
			ИндексСледущейОбрабатываемойСтроки = ИндексСледущейОбрабатываемойСтроки + 1;
			ИндексПоследнейОбрабатываемойСтроки = ИндексПоследнейОбрабатываемойСтроки + 1;
		КонецЕсли;
		Если ТекущаяСтрока.ПериодДействияКонец > ТекущаяСтрока.БазовыйПериодОсновнойЗаписиКонец Тогда
			НоваяСтрока = ЗаписиНормируемыеКаскадно.Вставить(ИндексСледущейОбрабатываемойСтроки + 1);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			ТекущаяСтрока.ПериодДействияКонец = НачалоДня(ТекущаяСтрока.БазовыйПериодОсновнойЗаписиКонец);
			НоваяСтрока.ПериодДействияНачало = НачалоДня(ТекущаяСтрока.БазовыйПериодОсновнойЗаписиКонец + 86400);
			ТекущаяСтрока = НоваяСтрока;
			ИндексСледущейОбрабатываемойСтроки = ИндексСледущейОбрабатываемойСтроки + 1;
			ИндексПоследнейОбрабатываемойСтроки = ИндексПоследнейОбрабатываемойСтроки + 1;
		КонецЕсли;

		ИндексСледущейОбрабатываемойСтроки = ИндексСледущейОбрабатываемойСтроки + 1;
	КонецЦикла;
КонецПроцедуры	

Процедура РазбитьЗаписиВедущихНачислений(ЗаписиВедущихНачислений, ЗаписиНачисленийНормируемыхКаскадно)
	ЗаписиНачисленийНормируемыхКаскадно.Индексы.Добавить("Сотрудник, ПериодДействия");
	ЗаписиНачисленийНормируемыхКаскадно.Индексы.Добавить("ВидРасчета");
	
	ЗаписиВедущихНачислений.Индексы.Добавить("Сотрудник, ПериодДействия");
	ЗаписиВедущихНачислений.Индексы.Добавить("ВидРасчета");
	
	ОтборЗависимыхВидовРасчета = ЗаписиНачисленийНормируемыхКаскадно.ВыгрузитьКолонку("ВидРасчета");
	ОтборЗависимыхВидовРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборЗависимыхВидовРасчета);	
	
	ОтборВедущихВидовРасчета = ЗаписиВедущихНачислений.ВыгрузитьКолонку("ВидРасчета");
	ОтборВедущихВидовРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборВедущихВидовРасчета);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборЗависимыхВидовРасчета, ОтборВедущихВидовРасчета);
	
	Зависимости = ЗависимоститиНачислений("ПланВидовРасчета.Начисления.ВедущиеВидыРасчета", ОтборЗависимыхВидовРасчета, ОтборВедущихВидовРасчета);
		
	ДатыРазбиенияНачислений = Новый ТаблицаЗначений;
	ДатыРазбиенияНачислений.Колонки.Добавить("Регистратор");
	ДатыРазбиенияНачислений.Колонки.Добавить("НомерСтроки");
	ДатыРазбиенияНачислений.Колонки.Добавить("Дата");
	
	ОтборСтрок = Новый Структура("ВидРасчета");
	Для Каждого ЗависимостиТекущегоВидаРасчета Из Зависимости Цикл
		ОтборСтрок.ВидРасчета = ЗависимостиТекущегоВидаРасчета.Ключ;
		
		// заполним даты изменения зависмых записей
		ДатыЗависимыхНачислений = Новый ТаблицаЗначений;
		ДатыЗависимыхНачислений.Колонки.Добавить("Дата");
		ДатыЗависимыхНачислений.Колонки.Добавить("Сотрудник");
		ДатыЗависимыхНачислений.Колонки.Добавить("ПериодДействия");

		НормируемыеЗаписи = ЗаписиНачисленийНормируемыхКаскадно.НайтиСтроки(ОтборСтрок);
		Для Каждого ЗаписьНачисления Из НормируемыеЗаписи Цикл
			ДобавитьСтрокиТаблицыДатЗависимыхЗаписей(ДатыЗависимыхНачислений, ЗаписьНачисления, "ПериодДействияНачало", "ПериодДействияКонец");	
		КонецЦикла;	
		
		ЗависимыеЗаписи = ЗаписиВедущихНачислений.НайтиСтроки(ОтборСтрок);
		Для Каждого ЗаписьНачисления Из ЗависимыеЗаписи Цикл
			ДобавитьСтрокиТаблицыДатЗависимыхЗаписей(ДатыЗависимыхНачислений, ЗаписьНачисления, "ПериодДействияНачало", "ПериодДействияКонец");		
		КонецЦикла;	
		
		// теперь определим даты разбиения ведущих начислений
		ДатыЗависимыхНачислений.Свернуть("Дата, Сотрудник, ПериодДействия");
		
		ЗаполнитьДатыРазбиенияВедущихНачислений(ДатыРазбиенияНачислений, ЗаписиВедущихНачислений, ДатыЗависимыхНачислений, ЗависимостиТекущегоВидаРасчета.Значение);
	КонецЦикла;	
	
	РазбитьСтрокиНачислений(ЗаписиВедущихНачислений, ДатыРазбиенияНачислений); 	
КонецПроцедуры	

Процедура ЗаполнитьДатыРазбиенияВедущихНачислений(ДатыРазбиенияВедущихНачислений, ЗаписиВедущихНачислений, ДатыЗависимыхНачилений, ВедущиеВидыРасчета)
	ОтборСтрокТаблицыРазбиения = Новый Структура("Сотрудник, ПериодДействия");
	Для Каждого ОписаниеВедущегоВидаРасчета Из ВедущиеВидыРасчета Цикл 
		ВедущиеЗаписи = ЗаписиВедущихНачислений.НайтиСтроки(Новый Структура("ВидРасчета", ОписаниеВедущегоВидаРасчета.ВидРасчета));
		Для Каждого ТекущаяЗаписьНачислений Из ВедущиеЗаписи Цикл
			ЗаполнитьЗначенияСвойств(ОтборСтрокТаблицыРазбиения, ТекущаяЗаписьНачислений);
			ДатыЗависимыхНачисленийПоСотрудникПериоду = ДатыЗависимыхНачилений.НайтиСтроки(ОтборСтрокТаблицыРазбиения);
			
			Для Каждого СтрокаТаблицыДатЗависимыхНачилений Из ДатыЗависимыхНачисленийПоСотрудникПериоду Цикл
				Если ДатаВходитВПериодДействия(СтрокаТаблицыДатЗависимыхНачилений.Дата, ТекущаяЗаписьНачислений) 
					И НачалоДня(ТекущаяЗаписьНачислений.ПериодДействияНачало) <> СтрокаТаблицыДатЗависимыхНачилений.Дата Тогда
					
					СтрокаТаблицыРабиения = ДатыРазбиенияВедущихНачислений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРабиения, ТекущаяЗаписьНачислений);
					СтрокаТаблицыРабиения.Дата = СтрокаТаблицыДатЗависимыхНачилений.Дата;
				КонецЕсли;
			КонецЦикла;			
		КонецЦикла;	
	КонецЦикла;		
КонецПроцедуры	

Функция ДатаВходитВПериодДействия(Дата, ЗаписьНачисления)
	Возврат НачалоДня(ЗаписьНачисления.ПериодДействияНачало) <= НачалоДня(Дата) И НачалоДня(ЗаписьНачисления.ПериодДействияКонец) >= НачалоДня(Дата);	
КонецФункции	
	
Процедура РазбитьСтрокиНачислений(РабиваемыеЗаписиНачислений, ДатыРазбиенияНачислений)		
	Если ДатыРазбиенияНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ДатыРазбиенияНачислений.Свернуть("Регистратор, НомерСтроки, Дата");
	ДатыРазбиенияНачислений.Сортировать("Регистратор, НомерСтроки, Дата", Новый СравнениеЗначений);
	
	РабиваемыеЗаписиНачислений.Сортировать("Регистратор, НомерСтроки, ПериодДействияНачало", Новый СравнениеЗначений);
	
	ИндексТекущейСтрокиТаблицыРазбиения = 0;
	ИндексПоследнейОбрабатывамойСтрокиРазбиваемыхЗаеисей = РабиваемыеЗаписиНачислений.Количество() - 1;
	ИндексСледущейСтрокиРазбиваемыхЗаписей = 0;
	
	Пока ИндексСледущейСтрокиРазбиваемыхЗаписей <= ИндексПоследнейОбрабатывамойСтрокиРазбиваемыхЗаеисей 
		И ИндексТекущейСтрокиТаблицыРазбиения < ДатыРазбиенияНачислений.Количество() Цикл
		// Спозиционируемся на первоей строке таблицы дат разбиения соответсвущей текущей строке таблицы зависимых
		// тут используется свойчтво что обе таблицы отсортированы по одним и тем же полям,
		// по сути реализован алгоритм соединения сляением, при этом будем учитвать то
		// что в таблице ЗависимыеЗаписи - есть все значения ключей
		// а в таблице ДатыРазбиенияНачислений не все.
		ТекущаяСтрокаРазбиваемыхЗаписей = РабиваемыеЗаписиНачислений[ИндексСледущейСтрокиРазбиваемыхЗаписей];
		ТекущаяСтрокаТаблицыРазбиения = ДатыРазбиенияНачислений[ИндексТекущейСтрокиТаблицыРазбиения];
		
		Если ТекущаяСтрокаТаблицыРазбиения.Регистратор <> ТекущаяСтрокаРазбиваемыхЗаписей.Регистратор 
			Или ТекущаяСтрокаТаблицыРазбиения.НомерСтроки <> ТекущаяСтрокаРазбиваемыхЗаписей.НомерСтроки  
			Или ТекущаяСтрокаРазбиваемыхЗаписей.ПериодДействияКонец < ТекущаяСтрокаТаблицыРазбиения.Дата Тогда
			
			ИндексСледущейСтрокиРазбиваемыхЗаписей = ИндексСледущейСтрокиРазбиваемыхЗаписей + 1;
			Продолжить;
		КонецЕсли;	
		 
		Пока ТекущаяСтрокаТаблицыРазбиения.Регистратор = ТекущаяСтрокаРазбиваемыхЗаписей.Регистратор
			И ТекущаяСтрокаТаблицыРазбиения.НомерСтроки = ТекущаяСтрокаРазбиваемыхЗаписей.НомерСтроки 
			И ТекущаяСтрокаРазбиваемыхЗаписей.ПериодДействияКонец >= ТекущаяСтрокаТаблицыРазбиения.Дата  Цикл
			
			НоваяСтрокаРазбиваемыхЗаписей = РабиваемыеЗаписиНачислений.Вставить(ИндексСледущейСтрокиРазбиваемыхЗаписей + 1);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРазбиваемыхЗаписей, ТекущаяСтрокаРазбиваемыхЗаписей);
			
			ТекущаяСтрокаРазбиваемыхЗаписей.ПериодДействияКонец = ТекущаяСтрокаТаблицыРазбиения.Дата - 86400;
			НоваяСтрокаРазбиваемыхЗаписей.ПериодДействияНачало = ТекущаяСтрокаТаблицыРазбиения.Дата;		
			
			ТекущаяСтрокаРазбиваемыхЗаписей = НоваяСтрокаРазбиваемыхЗаписей;
				
			ИндексСледущейСтрокиРазбиваемыхЗаписей = ИндексСледущейСтрокиРазбиваемыхЗаписей + 1;
			ИндексПоследнейОбрабатывамойСтрокиРазбиваемыхЗаеисей = ИндексПоследнейОбрабатывамойСтрокиРазбиваемыхЗаеисей + 1;
			
			Если ИндексТекущейСтрокиТаблицыРазбиения < ДатыРазбиенияНачислений.Количество() - 1 Тогда
				ИндексТекущейСтрокиТаблицыРазбиения = ИндексТекущейСтрокиТаблицыРазбиения + 1;
				ТекущаяСтрокаТаблицыРазбиения = ДатыРазбиенияНачислений[ИндексТекущейСтрокиТаблицыРазбиения];
			Иначе
				ИндексТекущейСтрокиТаблицыРазбиения = ИндексТекущейСтрокиТаблицыРазбиения + 1;
				Прервать;
			КонецЕсли;			
		КонецЦикла;	
		
		ИндексСледущейСтрокиРазбиваемыхЗаписей = ИндексСледущейСтрокиРазбиваемыхЗаписей + 1;
	КонецЦикла;	
КонецПроцедуры	

Процедура ДобавитьСтрокиТаблицыДатЗависимыхЗаписей(ДатыВедущихЗаписей, ВедущаяЗапись, ИмяПоляДатаНачала = "ПериодДействияНачало", ИмяПоляДатаОкончания = "ПериодДействияКонец")
	СтрокаТаблицыДатВедущихНачислений = ДатыВедущихЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицыДатВедущихНачислений, ВедущаяЗапись);
	СтрокаТаблицыДатВедущихНачислений.Дата = НачалоДня(ВедущаяЗапись[ИмяПоляДатаНачала]);
	
	СтрокаТаблицыДатВедущихНачислений = ДатыВедущихЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицыДатВедущихНачислений, ВедущаяЗапись);
	СтрокаТаблицыДатВедущихНачислений.Дата = КонецДня(ВедущаяЗапись[ИмяПоляДатаОкончания]) + 1;	
КонецПроцедуры	

Функция ЗависимоститиНачислений(ИмяТаблицыЗависмыеВидыРасчета, ОтборЗависимыхВидовРасчета = Неопределено, ОтборВедущихВидовРасчета = Неопределено)			
	ЗависимоститиНачислений = Новый Соответствие;		
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияВедущиеВидыРасчета.Ссылка КАК ВидРасчета,
	|	НачисленияВедущиеВидыРасчета.ВидРасчета КАК ВедущийВидРасчета,
	|	Начисления.ПериодДействияБазовый
	|		И Начисления.ТребуетсяРасчетБазы КАК НормироватьКаскадно
	|ИЗ
	|	ВТВедущиеВидыРасчета КАК НачисленияВедущиеВидыРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияВедущиеВидыРасчета.ВидРасчета = Начисления.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидРасчета";	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВедущиеВидыРасчета", ИмяТаблицыЗависмыеВидыРасчета);
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	
	Если ОтборЗависимыхВидовРасчета <> Неопределено Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("НачисленияВедущиеВидыРасчета.Ссылка В(&ОтборЗависимыхВидовРасчета)");
		Запрос.УстановитьПараметр("ОтборЗависимыхВидовРасчета", ОтборЗависимыхВидовРасчета);
	КонецЕсли;
	
	Если ОтборВедущихВидовРасчета <> Неопределено Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("НачисленияВедущиеВидыРасчета.ВидРасчета В(&ОтборВедущихНачислений)");
		Запрос.УстановитьПараметр("ОтборВедущихНачислений", ОтборВедущихВидовРасчета);
	КонецЕсли;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
		ВедущиеВидыРасчета = Новый Массив;
		ЗависимоститиНачислений.Вставить(Выборка.ВидРасчета, ВедущиеВидыРасчета);
		
		Пока Выборка.Следующий() Цикл
			ОписаниеВедущегоВидаРасчета = Новый Структура("ВидРасчета, НормироватьКаскадно");
			ОписаниеВедущегоВидаРасчета.ВидРасчета = Выборка.ВедущийВидРасчета;
			ОписаниеВедущегоВидаРасчета.НормироватьКаскадно = Выборка.НормироватьКаскадно;
			ВедущиеВидыРасчета.Добавить(ОписаниеВедущегоВидаРасчета);	
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат ЗависимоститиНачислений;
КонецФункции	

Процедура ЗаполнитьОписаниеНеобходмыхДанныхПоВТБазовыеЗаписи(ИмяВТбазовыеЗаписи, ОписаниеНеобходмыхДанных)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(БазовыеЗаписи.НеобходимоНормировать), ЛОЖЬ) КАК НеобходимоНормировать,
	|	ЕСТЬNULL(МАКСИМУМ(БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц), ЛОЖЬ) КАК НеобходимоКорректироватьПериодБазовыхЗаписей,
	|	ЕСТЬNULL(МАКСИМУМ(БазовыеЗаписи.ЕстьВытесняющиеНачисления), ЛОЖЬ) КАК НеобходимоПолучатьФПДБазовыхЗаписей,
	|	ЕСТЬNULL(МАКСИМУМ(БазовыеЗаписи.НормироватьКаскадно), ЛОЖЬ) КАК НеобходимоНормироватьЗаписиКаскадно,
	|	ЕСТЬNULL(МАКСИМУМ(НЕ БазовыеЗаписи.НормироватьКаскадно), ЛОЖЬ) КАК НеобходимоНормироватьЗаписиПоДаннымУчетаВремени,
	|	ЕСТЬNULL(МАКСИМУМ(БазовыеЗаписи.ЗаписьТекущегоНабора
	|				И БазовыеЗаписи.ЕстьВытесняющиеНачисления), ЛОЖЬ) КАК НеобходимФПДДляЗаписейТекущегоНабора,
	|	ЕСТЬNULL(МАКСИМУМ(НЕ БазовыеЗаписи.ЗаписьТекущегоНабора
	|				И БазовыеЗаписи.ЕстьВытесняющиеНачисления), ЛОЖЬ) КАК ПолучатьФПДДляЗаписейОсновнойТаблицыРегистра
	|ИЗ
	|	ВТБазовыеЗаписи КАК БазовыеЗаписи
	|ГДЕ
	|	БазовыеЗаписи.НеобходимоНормировать";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБазовыеЗаписи", ИмяВТбазовыеЗаписи);
			
	// Определим какие дополнительные шаги алгоритма для расчета базы нам необходимо выполнять
	// 1) есть ли вообще записи которые нужно нормировать
	// 2) есть ли записи которые нужно нормировать по данным учета времени
	// 3) есть ли записи, которые нужно нормировать каскадно
	// 4) есть ли записи для нормирования которых нужно получать ФПД
	// 5) есть ли записи для нормирования которых нужно выполянть корректировку периода с учетом дат приема и увольнения.
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.НеобходимоНормировать Тогда
			ОписаниеНеобходмыхДанных.НеобходимоНормироватьЗаписи = Истина;
			ОписаниеНеобходмыхДанных.НеобходимоНормироватьЗаписиКаскадно = Выборка.НеобходимоНормироватьЗаписиКаскадно;
			ОписаниеНеобходмыхДанных.НеобходимоНормироватьЗаписиПоДаннымУчетаВремени = Выборка.НеобходимоНормироватьЗаписиПоДаннымУчетаВремени;
			ОписаниеНеобходмыхДанных.НеобходимоПолучатьФПДБазовыхЗаписей = Выборка.НеобходимоПолучатьФПДБазовыхЗаписей;
			ОписаниеНеобходмыхДанных.НеобходимоКорректироватьПериодБазовыхЗаписей = Выборка.НеобходимоКорректироватьПериодБазовыхЗаписей;
			ОписаниеНеобходмыхДанных.НеобходимФПДДляЗаписейТекущегоНабора = Выборка.НеобходимФПДДляЗаписейТекущегоНабора;
			ОписаниеНеобходмыхДанных.ПолучатьФПДДляЗаписейОсновнойТаблицыРегистра = Выборка.ПолучатьФПДДляЗаписейОсновнойТаблицыРегистра;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	
	
#Область Инициализация

ТаблицыКУничтожению = Новый Массив;
УдерживаеимыеТаблицыРасчетаНачислений = Новый Массив;
УдерживаеимыеТаблицыРасчетаУдержаний = Новый Массив;

ВыполнятьКаскадноеНормированиеБазыНачислений = Ложь;
РасчетНачисленийИнициализирован = Ложь;
РасчитываемыйНаборНачисленийПустой = Ложь;
ВыполненныеОчередностиКаскадногоРасчетаНачислений = Новый Соответствие;

ВыполнятьКаскадноеНормированиеБазыУдержаний = Ложь;
РасчетУдержанийИнициализирован = Ложь;
РасчитываемыйНаборУдержанйПустой = Ложь;
ВыполненныеОчередностиКаскадногоРасчетаУдержаний = Новый Соответствие;

#КонецОбласти

#КонецЕсли

