#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Считывает и обрабатывает файлы с данными для загрузки в соответствии с описанием их принадлежности.
//
// Параметры:
//  ОписанияОбъектов - Массив - содержащий структуры со сведениями о типе объектов, параметрах загрузки,
//    а также адреса помещенных во временное хранилище файлов с данными.
//    См. функцию ПодборПерсоналаКлиентСервер.НовоеОписаниеОбъекта.
//  ДополнительныеПараметры - Структура - содержащая имена ранее созданных на сервере временных файлов,
//    а также период начала переноса данных.
//
// Возвращаемое значение:
//  Структура - структура с полями:
//    АдресОписанийИОбъектов - Строка - адрес временного хранилища описаний и объектов.
//    КлючиОписаний - Массив - ключи считанных типов объектов.
//
Функция ПодготовитьОбъектыПоОписаниям(ОписанияОбъектов, ДополнительныеПараметры) Экспорт
	
	ИменаВременныхФайлов = ДополнительныеПараметры.ИменаВременныхФайлов;
	УникальныйИдентификатор = ДополнительныеПараметры.УникальныйИдентификатор;
	МесяцНачалаПереноса = ДополнительныеПараметры.МесяцНачалаПереноса;
	
	УдалитьВременныеФайлы(ИменаВременныхФайлов);
	
	ОписанияИОбъекты = Новый Соответствие;
	КлючиОписаний = Новый Массив;
	
	Для Каждого Описание Из ОписанияОбъектов Цикл
		
		ПомещенныеФайлы = Описание.ОписаниеФайлов;
		ОбъектыПоОписанию = НоваяТаблицаОбъектыПоОписанию(Описание.ОписаниеТипа);
		Описание.ОписаниеФайлов = Новый Массив;
		ВнутренниеИдентификаторы = Новый Массив;
		
		Для Каждого ФайлВХранилище Из ПомещенныеФайлы Цикл
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
			ИменаВременныхФайлов.Добавить(ИмяВременногоФайла);
			
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ФайлВХранилище.Хранение);
			ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
			
			УдалитьИзВременногоХранилища(ФайлВХранилище.Хранение);
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
			
			ДанныеEStaff = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			
			Если Описание.ВОдномФайле Тогда
				ДополнитьТаблицуОбъектовОбщимиДанными(ОбъектыПоОписанию, ДанныеEStaff, Описание, ИмяВременногоФайла);
			Иначе
				
				ОбъектEStaff = ОбъектXDTOВСтруктуру(ДанныеEStaff, Описание.ИменаСвойств);
				ВнутреннийИдентификатор = ОбъектEStaff[Описание.ИмяСвойстваИдентификатор];
				
				Если ВнутренниеИдентификаторы.Найти(ВнутреннийИдентификатор) = Неопределено Тогда
					
					ВнутренниеИдентификаторы.Добавить(ВнутреннийИдентификатор);
					
					НоваяСтрокаОбъекта = ОбъектыПоОписанию.Добавить();
					НоваяСтрокаОбъекта.ВнутреннийИдентификатор = ВнутреннийИдентификатор;
					НоваяСтрокаОбъекта.Идентификатор = ИдентификаторПолный(Описание.Ключ, ОбъектEStaff[Описание.ИмяСвойстваИдентификатор]);
					НоваяСтрокаОбъекта.Наименование = ОбъектEStaff[Описание.ИмяСвойстваНаименование];
					НоваяСтрокаОбъекта.ИмяФайлаХранения = ИмяВременногоФайла;
					НоваяСтрокаОбъекта.Создается = Истина;
					НоваяСтрокаОбъекта.Заполняется = Истина;
					
					Если Описание.Иерархический Тогда
						НоваяСтрокаОбъекта.ИдентификаторРодителя = ИдентификаторПолный(Описание.Ключ, ОбъектEStaff.parent_id);
					КонецЕсли;
					
					НоваяСтрокаОбъекта.Объект = ОбъектEStaff;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОтфильтроватьОбъекты(ОбъектыПоОписанию, Описание, ОписанияИОбъекты, МесяцНачалаПереноса);
		ДополнитьОбъекты(ОбъектыПоОписанию, Описание, ОписанияИОбъекты);
		
		ОбъектыПоОписанию.Сортировать("ИдентификаторРодителя, Идентификатор");
		
		ОписанияИОбъекты.Вставить(Описание.Ключ, Новый Структура("Описание, Объекты", Описание, ОбъектыПоОписанию));
		
		Если ОбъектыПоОписанию.Количество() > 0 Тогда
			КлючиОписаний.Добавить(Описание.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	АдресОписанийИОбъектов = ПоместитьВоВременноеХранилище(ОписанияИОбъекты, УникальныйИдентификатор);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресОписанийИОбъектов", АдресОписанийИОбъектов);
	Результат.Вставить("КлючиОписаний", ОбщегоНазначения.ФиксированныеДанные(КлючиОписаний));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИмпортОбъектов

// Выполняет преобразование объекта XDTO в структуру с данными.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Значение, которое необходимо преобразовать.
//  ИменаСвойств - Строка - имена свойств, которые нужно учесть.
//
// Возвращаемое значение:
//  Структура - Структура, имитирующая объект XDTO.
//
Функция ОбъектXDTOВСтруктуру(ОбъектXDTO, ИменаСвойств = "")
	
	Приемник = Новый Структура;
	СписокСвойств = Новый Массив;
	
	Если Не ПустаяСтрока(ИменаСвойств) Тогда
		
		Приемник = Новый Структура(ИменаСвойств);
		СписокСвойств = СтрокаВМассивСлов(ИменаСвойств);
		
	КонецЕсли;
	
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		
		Если СписокСвойств.Количество() > 0
			И СписокСвойств.Найти(Свойство.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СвойствоXDTOВЭлементСтруктуры(ОбъектXDTO, Свойство, Приемник);
		
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(Приемник)
	
КонецФункции

Процедура СвойствоXDTOВЭлементСтруктуры(Источник, Свойство, Приемник)
	
	Если Не Источник.Установлено(Свойство) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСвойства = Свойство.Имя;
	
	Попытка
		
		Если ТипЗнч(Источник[ИмяСвойства]) = Тип("СписокXDTO") Тогда
			
			ЗначенияСписка = Новый Массив;
			
			Для Каждого Значение Из Источник[ИмяСвойства] Цикл
				
				Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
					
					ЗначениеОбъекта = Новый Структура();
					
					Для Каждого ПодСвойство Из Значение.Свойства() Цикл
						СвойствоXDTOВЭлементСтруктуры(Значение, ПодСвойство, ЗначениеОбъекта);
					КонецЦикла;
					
					ЗначенияСписка.Добавить(ЗначениеОбъекта);
					
				Иначе
					ЗначенияСписка.Добавить(Значение);
				КонецЕсли;
				
			КонецЦикла;
			
			Приемник.Вставить(ИмяСвойства, ЗначенияСписка);
			
			Возврат;
			
		Иначе
			
			ЗначениеXDTO = Источник.ПолучитьXDTO(Свойство);
			
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеXDTO) = Тип("ЗначениеXDTO") Тогда
			
			Приемник.Вставить(ИмяСвойства, ЗначениеXDTO.Значение);
			
		ИначеЕсли ТипЗнч(ЗначениеXDTO) = Тип("ОбъектXDTO") Тогда
			
			Приемник.Вставить(ИмяСвойства, Новый Структура);
			
			Для Каждого ПодСвойство Из ЗначениеXDTO.Свойства() Цикл
				СвойствоXDTOВЭлементСтруктуры(ЗначениеXDTO, ПодСвойство, Приемник[ИмяСвойства]);
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка чтения объекта XDTO, имя свойства: <%1>.'"), ИмяСвойства)
			+ Символы.ПС + Символы.ПС + ПредставлениеОшибки;
			
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Фильтрует импортируемые объекты по заданному алгоритму или указанным реквизитам источника.
// См. свойство ФильтруетсяПо в описаниях объектов формируемых в процедуре ОписанияЗагружаемыхОбъектов.
//
// Параметры:
//  ДанныеОбъектов - ТаблицаЗначений - таблица с данными импортируемых объектов одного типа.
//    См. функцию НоваяТаблицаОбъектыПоОписанию.
//  Описание - Структура - содержащая сведения о типе объектов и параметрах загрузки.
//    См. функцию ПодборПерсоналаКлиентСервер.НовоеОписаниеОбъекта.
//  ОписанияИОбъекты - Соответствие - ключ содержит Ключ типа объектов, значение структуру с данными 
//    всех объектов и их описаниями.
//  ДатаНачалаПереноса - Дата - Необязательный. Если задан, то будут импортированы вакансии, у которых "Дата открытия" 
//    в указанном месяце или позже, а также кандидаты только по этим вакансиям.
//
Процедура ОтфильтроватьОбъекты(ДанныеОбъектов, Описание, ОписанияИОбъекты, ДатаНачалаПереноса = '00010101')
	
	Если Описание.Ключ = КлючОрганизации() Тогда
		ОтфильтроватьОрганизации(ДанныеОбъектов);
		Возврат;
	ИначеЕсли Описание.Ключ = КлючПодразделения() Тогда
		ОтфильтроватьПодразделения(ДанныеОбъектов);
		Возврат;
	ИначеЕсли Описание.Ключ = КлючВакансии() Тогда
		ОтфильтроватьВакансии(ДанныеОбъектов, ДатаНачалаПереноса);
		Возврат;
	ИначеЕсли Описание.Ключ = КлючФизическогоЛица() Тогда
		ОтфильтроватьФизическихЛиц(ДанныеОбъектов);
		Возврат;
	ИначеЕсли Описание.Ключ = КлючКандидата() Тогда
		ОтфильтроватьКандидатов(ДанныеОбъектов, ОписанияИОбъекты, ДатаНачалаПереноса);
		Возврат;
	ИначеЕсли Описание.Ключ = КлючЯзыка() Тогда
		ОтфильтроватьЯзыки(ДанныеОбъектов);
	КонецЕсли;
	
	ФильтруетсяПо = Описание.ФильтруетсяПо;
	Если ПустаяСтрока(ФильтруетсяПо) 
		Или ДанныеОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВстречающиесяИдентификаторы = Новый Массив;
	
	ПутиКСвойствамОбъектов = СтрРазделить(ФильтруетсяПо, ",");
	Для Каждого ПутьКСвойству Из ПутиКСвойствамОбъектов Цикл
		
		ЧастиПути = СтрРазделить(ПутьКСвойству, ".");
		КлючОбъекта = ЧастиПути[0];
		ИмяСвойства = ЧастиПути[1];
		
		ИмяСвойстваКоллекции = "";
		Если ЧастиПути.Количество() = 4 Тогда
			ИмяКоллекции = ЧастиПути[2];
			ИмяСвойстваКоллекции = ЧастиПути[3];
		КонецЕсли;
		
		ОписаниеИОбъектыПоКлючу = ОписанияИОбъекты.Получить(КлючОбъекта);
		ДанныеОбъектовИсточников = ОписаниеИОбъектыПоКлючу.Объекты;
		
		Для Каждого ДанныеОбъекта Из ДанныеОбъектовИсточников Цикл
			
			Если Не ПустаяСтрока(ИмяСвойстваКоллекции) Тогда
				
				ДанныеДляЭкспорта = ДанныеОбъекта.Объект[ИмяСвойства];
				
				Если ЗначениеЗаполнено(ДанныеДляЭкспорта) Тогда
					
					Для Каждого СтрокаКоллекции Из ЗначениеВМассиве(ДанныеДляЭкспорта[ИмяКоллекции]) Цикл
						
						Идентификатор = СтрокаКоллекции[ИмяСвойстваКоллекции];
						Если Не ПустаяСтрока(Идентификатор) Тогда
							ВстречающиесяИдентификаторы.Добавить(Идентификатор);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				Идентификатор = ДанныеОбъекта.Объект[ИмяСвойства];
				Если Не ПустаяСтрока(Идентификатор) Тогда 
					ВстречающиесяИдентификаторы.Добавить(Идентификатор);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВстречающиесяИдентификаторы.Количество()= 0 Тогда
		ДанныеОбъектов.Очистить();
		Возврат;
	КонецЕсли;
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		Если ВстречающиесяИдентификаторы.Найти(ДанныеОбъекта.ВнутреннийИдентификатор) = Неопределено Тогда
			УдаляемыеСтроки.Добавить(ДанныеОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ДанныеОбъектов.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Дополняет состав импортируемых объектов по заданному алгоритму.
//
// Параметры:
//  ДанныеОбъектов - ТаблицаЗначений - таблица с данными импортируемых объектов одного типа. 
//    См. функцию НоваяТаблицаОбъектыПоОписанию.
//  Описание - Структура - содержащая сведения о типе объектов и параметрах загрузки.
//    См. функцию ПодборПерсоналаКлиентСервер.НовоеОписаниеОбъекта.
//  ОписанияИОбъекты - Соответствие - ключ содержит Ключ типа объектов, значение структуру с данными 
//    всех объектов и их описаниями.
//
Процедура ДополнитьОбъекты(ДанныеОбъектов, Описание, ОписанияИОбъекты)
	
	Если Описание.Ключ = КлючКандидата() Тогда
		ДополнитьКандидатов(ДанныеОбъектов);
	ИначеЕсли Описание.Ключ = КлючПользователя() Тогда
		ДополнитьПользователей(ДанныеОбъектов, Описание, ОписанияИОбъекты);
	ИначеЕсли Описание.Ключ = КлючГруппыДоступа() Тогда
		ДополнитьГруппыДоступа(ДанныеОбъектов, Описание, ОписанияИОбъекты);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция КлючОрганизации()
	Возврат ПереносДанныхEStaffКлиентСервер.КлючОрганизации();
КонецФункции

Функция КлючПодразделения()
	Возврат ПереносДанныхEStaffКлиентСервер.КлючПодразделения();
КонецФункции

Функция КлючПозиции()
	Возврат ПереносДанныхEStaffКлиентСервер.КлючПозиции();
КонецФункции

Функция КлючПользователя()
	Возврат ПереносДанныхEStaffКлиентСервер.КлючПользователя();
КонецФункции

Функция КлючГруппыДоступа()
	Возврат ПереносДанныхEStaffКлиентСервер.КлючГруппыДоступа();
КонецФункции

Функция КлючВакансии()
	Возврат ПереносДанныхEStaffКлиентСервер.КлючВакансии();
КонецФункции

Функция КлючФизическогоЛица()
	Возврат ПереносДанныхEStaffКлиентСервер.КлючФизическогоЛица();
КонецФункции

Функция КлючКандидата()
	Возврат ПереносДанныхEStaffКлиентСервер.КлючКандидата();
КонецФункции

Функция КлючИсточникаИнформации()
	Возврат ПереносДанныхEStaffКлиентСервер.КлючИсточникаИнформации();
КонецФункции

Функция КлючПричиныОткрытия()
	Возврат ПереносДанныхEStaffКлиентСервер.КлючПричиныОткрытия();
КонецФункции

Функция КлючВалюты()
	Возврат ПереносДанныхEStaffКлиентСервер.КлючВалюты();
КонецФункции

Функция КлючЯзыка()
	Возврат ПереносДанныхEStaffКлиентСервер.КлючЯзыка();
КонецФункции

Функция КлючСтраны()
	Возврат ПереносДанныхEStaffКлиентСервер.КлючСтраны();
КонецФункции

Функция НоваяТаблицаОбъектыПоОписанию(ОписаниеТипа)
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Таблица.Колонки.Добавить("ИдентификаторРодителя", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Таблица.Колонки.Добавить("ВнутреннийИдентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Таблица.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Таблица.Колонки.Добавить("Объект", Новый ОписаниеТипов("ФиксированнаяСтруктура"));
	Таблица.Колонки.Добавить("ОбъектСсылка", ОписаниеТипа);
	Таблица.Колонки.Добавить("Создается", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Заполняется", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ИмяФайлаХранения", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	Возврат Таблица;
	
КонецФункции

Функция ИдентификаторПолный(КлючОбъекта, Идентификатор)
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат СтрШаблон("%1-%2", КлючОбъекта, Идентификатор);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьТаблицуОбъектовОбщимиДанными(ОбъектыПоОписанию, ОбщиеДанные, Описание, ИмяФайлаХранения)
	
	Если ОбъектыПоОписанию.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗагружаемыеДанные = ОбъектXDTOВСтруктуру(ОбщиеДанные);
	ЗагружаемыеОбъекты = Новый Массив;
	
	Для Каждого КлючИЗначение Из ЗагружаемыеДанные Цикл
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ФиксированныйМассив") Тогда
			ЗагружаемыеОбъекты = Новый Массив(КлючИЗначение.Значение);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЗагружаемыйОбъект Из ЗагружаемыеОбъекты Цикл
		
		СтруктураДанных = Новый Структура(Описание.ИменаСвойств);
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ЗагружаемыйОбъект);
		
		НоваяСтрокаОбъекта = ОбъектыПоОписанию.Добавить();
		НоваяСтрокаОбъекта.ВнутреннийИдентификатор = СтруктураДанных[Описание.ИмяСвойстваИдентификатор];
		НоваяСтрокаОбъекта.Идентификатор = ИдентификаторПолный(Описание.Ключ, СтруктураДанных[Описание.ИмяСвойстваИдентификатор]);
		НоваяСтрокаОбъекта.Наименование = СтруктураДанных[Описание.ИмяСвойстваНаименование];
		НоваяСтрокаОбъекта.Объект = Новый ФиксированнаяСтруктура(СтруктураДанных);
		НоваяСтрокаОбъекта.ИмяФайлаХранения = ИмяФайлаХранения;
		НоваяСтрокаОбъекта.Создается = Истина;
		НоваяСтрокаОбъекта.Заполняется = Истина;
		
		Если Описание.Иерархический Тогда
			НоваяСтрокаОбъекта.ИдентификаторРодителя = ИдентификаторПолный(Описание.Ключ, СтруктураДанных.parent_id);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область РаботаСФайламиИКаталогами

Процедура УдалитьВременныеФайлы(ИменаВременныхФайлов) Экспорт
	
	Если Не ЗначениеЗаполнено(ИменаВременныхФайлов) Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеИмена = Новый Массив;
	Для Каждого ПолноеИмяФайла Из ИменаВременныхФайлов Цикл
		
		Попытка
			
			ФайлНаДиске = Новый Файл(ПолноеИмяФайла.Значение);
			Если ФайлНаДиске.Существует() Тогда
				УдалитьФайлы(ФайлНаДиске);
			КонецЕсли;
			
			УдаляемыеИмена.Добавить(ПолноеИмяФайла);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(СобытиеУдалениеВременногоФайла(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого УдаляемоеИмя Из УдаляемыеИмена Цикл
		ИменаВременныхФайлов.Удалить(УдаляемоеИмя);
	КонецЦикла;
	
КонецПроцедуры

Функция СобытиеУдалениеВременногоФайла()
	
	Возврат НСтр("ru = 'Перенос данных из E-Staff Рекрутер.Удаление временного файла'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СодержимоеФайлаСценариев(КаталогФайлов, Порядок = 1) Экспорт
	
	ДокументXML = ПолучитьМакет("СценарийЭкспортаXML");
	
	ТекстФорматаXML = ДокументXML.ПолучитьТекст();
	ТекстФорматаXML = СтрЗаменить(ТекстФорматаXML, "Порядок", Порядок);
	ТекстФорматаXML = СтрЗаменить(ТекстФорматаXML, "КаталогФайлов", КаталогФайлов);
	
	Возврат ТекстФорматаXML;
	
КонецФункции

Функция ФайлСценариевДополнен(СодержимоеФайла, КаталогФайлов) Экспорт
	
	ИндексУзла = 0;
	ФайлДополнен = Ложь;
	
	ДеревоСценария = ЗарплатаКадры.ЗагрузитьXMLВДокументDOM(СодержимоеФайла);
	УзлыИдентификаторовСценария = ДеревоСценария.ДочерниеУзлы[0].ПолучитьЭлементыПоИмени("id");
	
	Если УзлыИдентификаторовСценария.Количество() > 0 Тогда 
		
		Для Каждого Узел Из УзлыИдентификаторовСценария Цикл
			
			Если Узел.ТекстовоеСодержимое = "export_scenario_1c" Тогда
				ФайлДополнен = Истина;
				Прервать;
			КонецЕсли;
			
			ИндексУзла = ИндексУзла + 1;
			
		КонецЦикла;
		
		Если Не ФайлДополнен Тогда
			ИмпортироватьУзелТиповогоСценария(ДеревоСценария, ИндексУзла, СодержимоеФайла, КаталогФайлов, ФайлДополнен);
		КонецЕсли;
		
	Иначе
		ИмпортироватьУзелТиповогоСценария(ДеревоСценария, ИндексУзла, СодержимоеФайла, КаталогФайлов, ФайлДополнен);
	КонецЕсли;
	
	Возврат ФайлДополнен;
	
КонецФункции

Процедура ИмпортироватьУзелТиповогоСценария(ДеревоСценария, ИндексУзла, СодержимоеФайла, КаталогФайлов, ФайлДополнен)
	
	УзелСценариев = ДеревоСценария.ДочерниеУзлы[0];
	
	СодержимоеИсходногоФайла = СодержимоеФайлаСценариев(КаталогФайлов, ИндексУзла + 1);
	ДеревоСценарияИсходное = ЗарплатаКадры.ЗагрузитьXMLВДокументDOM(СодержимоеИсходногоФайла);
	
	УзелСценарияИсходного = ДеревоСценарияИсходное.ДочерниеУзлы[0].ПолучитьЭлементыПоИмени("export_scenario")[0];
	
	УзелСценария = ДеревоСценария.ИмпортироватьУзел(УзелСценарияИсходного, Истина);
	УзелСценариев.ДобавитьДочерний(УзелСценария);
	
	Попытка
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("windows-1251");
		
		ЗаписьДом = Новый ЗаписьDOM;
		ЗаписьДом.Записать(ДеревоСценария, ЗаписьXML);
		
		СодержимоеФайла = ЗаписьXML.Закрыть();
		
		ФайлДополнен = Истина;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СопоставлениеОбъектов

Функция ТаблицаСоответствияОбъектов(ОписаниеИОбъекты) Экспорт
	
	Описание = ОписаниеИОбъекты.Описание;
	
	Если Описание.Ключ = КлючВакансии() Тогда
		Возврат СопоставитьВакансии(ОписаниеИОбъекты);
	ИначеЕсли Описание.Ключ = КлючФизическогоЛица() Тогда
		Возврат СопоставитьФизическихЛиц(ОписаниеИОбъекты);
	ИначеЕсли Описание.Ключ = КлючКандидата() Тогда
		Возврат СопоставитьКандидатов(ОписаниеИОбъекты);
	ИначеЕсли Описание.Ключ = КлючИсточникаИнформации() Тогда
		Возврат СопоставитьИсточникиИнформации(ОписаниеИОбъекты);
	Иначе
		Возврат СопоставитьОбъектыСистем(ОписаниеИОбъекты);
	КонецЕсли;
	
КонецФункции

Процедура СохранитьТаблицуСоответствий(ТаблицаСоответствия, АдресОписанийИОбъектов, КлючОписания) Экспорт
	
	ОписанияИОбъекты = ПолучитьИзВременногоХранилища(АдресОписанийИОбъектов);
	ОписаниеИОбъектыПоКлючу = ОписанияИОбъекты[КлючОписания];
	ОбъектыПоКлючу = ОписаниеИОбъектыПоКлючу.Объекты;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСоответствия Цикл
		
		СтрокаОбъекта = ОбъектыПоКлючу.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		ЗаполнитьЗначенияСвойств(СтрокаОбъекта, СтрокаТаблицы, "ОбъектСсылка,Создается,Заполняется");
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ОписанияИОбъекты, АдресОписанийИОбъектов);
	
КонецПроцедуры

Функция СопоставитьОбъектыСистем(ОписаниеИОбъекты)
	
	Описание = ОписаниеИОбъекты.Описание;
	ИмяТаблицы = Описание.ИмяТаблицы;
	
	ТаблицаСоответствия = ОписаниеИОбъекты.Объекты.Скопировать(, "Идентификатор,ВнутреннийИдентификатор,Наименование,ОбъектСсылка,Создается,Заполняется");
	
	Запрос = НовыйЗапросСопоставления(ИмяТаблицы, ТаблицаСоответствия);
	Запрос.Текст = ТекстЗапросаИтоговый(ТекстЗапросаСопоставленияОбъектов(Описание), ИмяТаблицы);
	
	Результат = Запрос.Выполнить();
	ВыборкаСсылок = Результат.Выбрать();
	
	ЗаполнитьКолонкиТаблицы(ВыборкаСсылок, ТаблицаСоответствия);
	
	ТаблицаСоответствия.Колонки.Удалить("ВнутреннийИдентификатор");
	
	Возврат ТаблицаСоответствия;
	
КонецФункции

Функция СопоставитьВакансии(ОписаниеИОбъекты)
	
	Описание = ОписаниеИОбъекты.Описание;
	ИмяТаблицы = Описание.ИмяТаблицы;
	
	ТаблицаСоответствия = ОписаниеИОбъекты.Объекты.Скопировать(, "Идентификатор,Наименование,ОбъектСсылка,Объект,Создается,Заполняется");
	ТаблицаСоответствия.Колонки.Добавить("ДатаОткрытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Для Каждого СтрокаТаблицы Из ТаблицаСоответствия Цикл
		
		Объект = СтрокаТаблицы.Объект;
		СтрокаТаблицы.ДатаОткрытия = ДатаСтрокойВДату(Объект.start_date);
		
	КонецЦикла;
	
	ТаблицаСоответствия.Колонки.Удалить("Объект");
	
	Запрос = НовыйЗапросСопоставления(ИмяТаблицы, ТаблицаСоответствия);
	Запрос.Текст = ТекстЗапросаИтоговый(ТекстЗапросаСопоставленияВакансий(), ИмяТаблицы);
	
	Результат = Запрос.Выполнить();
	ВыборкаСсылок = Результат.Выбрать();
	
	ЗаполнитьКолонкиТаблицы(ВыборкаСсылок, ТаблицаСоответствия);
	
	ТаблицаСоответствия.Колонки.Удалить("ДатаОткрытия");
	
	Возврат ТаблицаСоответствия;
	
КонецФункции

Функция СопоставитьФизическихЛиц(ОписаниеИОбъекты)
	
	Описание = ОписаниеИОбъекты.Описание;
	ИмяТаблицы = Описание.ИмяТаблицы;
	
	ТаблицаСоответствия = ОписаниеИОбъекты.Объекты.Скопировать(, "Идентификатор,Наименование,ОбъектСсылка,Объект,Создается,Заполняется");
	ТаблицаСоответствия.Колонки.Добавить("Фамилия", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСоответствия.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСоответствия.Колонки.Добавить("Телефон", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаСоответствия.Колонки.Добавить("email", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	Для Каждого СтрокаТаблицы Из ТаблицаСоответствия Цикл
		
		Объект = СтрокаТаблицы.Объект;
		
		СтрокаТаблицы.email = Объект.email;
		СтрокаТаблицы.Телефон = Объект.mobile_phone;
		СтрокаТаблицы.Фамилия = Объект.lastname;
		СтрокаТаблицы.Имя = Объект.firstname;
		
	КонецЦикла;
	
	ТаблицаСоответствия.Колонки.Удалить("Объект");
	
	Запрос = НовыйЗапросСопоставления(ИмяТаблицы, ТаблицаСоответствия);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	|	&ТекущаяДатаСеанса КАК Период
	|ПОМЕСТИТЬ ВТСписокФизическихЛиц
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	НЕ ФизическиеЛица.ПометкаУдаления";
	
	Запрос.Выполнить();
	
	КадровыеДанные = "Фамилия,Имя,EmailПредставление,ТелефонМобильныйПредставление";
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц, "ВТСписокФизическихЛиц");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВТ, Истина, КадровыеДанные);
	
	Запрос.Текст = ТекстЗапросаСопоставленияФизическихЛиц(ИмяТаблицы);
	
	Результат = Запрос.Выполнить();
	ВыборкаСсылок = Результат.Выбрать();
	
	ЗаполнитьКолонкиТаблицы(ВыборкаСсылок, ТаблицаСоответствия);
	
	ТаблицаСоответствия.Колонки.Удалить("email");
	ТаблицаСоответствия.Колонки.Удалить("Телефон");
	ТаблицаСоответствия.Колонки.Удалить("Фамилия");
	ТаблицаСоответствия.Колонки.Удалить("Имя");
	
	Возврат ТаблицаСоответствия;
	
КонецФункции

Функция СопоставитьКандидатов(ОписаниеИОбъекты)
	
	Описание = ОписаниеИОбъекты.Описание;
	ИмяТаблицы = Описание.ИмяТаблицы;
	
	ТаблицаСоответствия = ОписаниеИОбъекты.Объекты.СкопироватьКолонки("Идентификатор,Наименование,ОбъектСсылка,Создается,Заполняется");
	ТаблицаСоответствия.Колонки.Добавить("ИдентификаторФизическогоЛица", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСоответствия.Колонки.Добавить("ИдентификаторВакансии", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Для Каждого ДанныеОбъекта Из ОписаниеИОбъекты.Объекты Цикл
		
		ЧастиИдентификатора = ЧастиИдентификатораКандидата(ДанныеОбъекта.Идентификатор);
		
		СтрокаТаблицы = ТаблицаСоответствия.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеОбъекта);
		
		СтрокаТаблицы.ИдентификаторФизическогоЛица = ЧастиИдентификатора.ИдентификаторФизическогоЛица;
		СтрокаТаблицы.ИдентификаторВакансии = ЧастиИдентификатора.ИдентификаторВакансии;
		
	КонецЦикла;
	
	Запрос = НовыйЗапросСопоставления(ИмяТаблицы, ТаблицаСоответствия);
	Запрос.Текст = ТекстЗапросаИтоговый(ТекстЗапросаСопоставленияКандидатов(), ИмяТаблицы);
	
	Результат = Запрос.Выполнить();
	ВыборкаСсылок = Результат.Выбрать();
	
	ЗаполнитьКолонкиТаблицы(ВыборкаСсылок, ТаблицаСоответствия);
	
	ТаблицаСоответствия.Колонки.Удалить("ИдентификаторФизическогоЛица");
	ТаблицаСоответствия.Колонки.Удалить("ИдентификаторВакансии");
	
	Возврат ТаблицаСоответствия;
	
КонецФункции

Функция СопоставитьИсточникиИнформации(ОписаниеИОбъекты)
	
	Описание = ОписаниеИОбъекты.Описание;
	ИмяТаблицы = Описание.ИмяТаблицы;
	
	ТаблицаСоответствия = ОписаниеИОбъекты.Объекты.Скопировать(, "Идентификатор,Наименование,ОбъектСсылка,Создается,Заполняется");
	
	ВнутренниеНаименования = Новый Структура;
	
	СайтHeadHunter = ИнтеграцияРекрутинговыхСайтовКлиентСервер.HeadHunter();
	СайтRabota = ИнтеграцияРекрутинговыхСайтовКлиентСервер.Rabota();
	СайтSuperJob = ИнтеграцияРекрутинговыхСайтовКлиентСервер.SuperJob();
	
	ВнутренниеНаименования.Вставить("HeadHunter", СайтHeadHunter.Наименование);
	ВнутренниеНаименования.Вставить("Rabota", СайтRabota.Наименование);
	ВнутренниеНаименования.Вставить("SuperJob", СайтSuperJob.Наименование);
	
	Для Каждого СтрокаТаблицы Из ТаблицаСоответствия Цикл
		СтрокаТаблицы.Наименование = УточненноеНаименованиеИсточникаИнформации(СтрокаТаблицы.Наименование, ВнутренниеНаименования);
	КонецЦикла;
	
	Запрос = НовыйЗапросСопоставления(ИмяТаблицы, ТаблицаСоответствия);
	Запрос.Текст = ТекстЗапросаИтоговый(ТекстЗапросаСопоставленияОбъектов(ОписаниеИОбъекты.Описание), ИмяТаблицы);
	
	Результат = Запрос.Выполнить();
	ВыборкаСсылок = Результат.Выбрать();
	
	ЗаполнитьКолонкиТаблицы(ВыборкаСсылок, ТаблицаСоответствия);
	
	Возврат ТаблицаСоответствия;
	
КонецФункции

Функция ПолноеИмяТаблицы(ИмяТаблицы)
	
	Возврат "Справочник." + ИмяТаблицы;
	
КонецФункции

Функция НовыйЗапросСопоставления(ИмяТаблицы, ТаблицаОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПустоеЗначение", Справочники[ИмяТаблицы].ПустаяСсылка());
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	
	Возврат Запрос;
	
КонецФункции

Функция ТекстВТОбъектыСопоставления()
	
	Текст = "ВЫБРАТЬ
	|	ТаблицаОбъектов.Идентификатор КАК Идентификатор,
	|	ТаблицаОбъектов.Наименование КАК Наименование,
	|	ТаблицаОбъектов.ОбъектСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТОбъектыСопоставления
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов";
	
	Возврат Текст;
	
КонецФункции

Функция ТекстВТОбъектыСопоставленияВалюты()
	
	Текст = "ВЫБРАТЬ
	|	ТаблицаОбъектов.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА ТаблицаОбъектов.ВнутреннийИдентификатор = ""RUR""
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ТаблицаОбъектов.ВнутреннийИдентификатор
	|	КОНЕЦ КАК Наименование,
	|	ТаблицаОбъектов.ОбъектСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТОбъектыСопоставления
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов";
	
	Возврат Текст;
	
КонецФункции

Функция ТекстЗапросаСопоставленияОбъектов(Описание)
	
	СтрокаСоединения = ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если Описание.Ключ = КлючВалюты() Тогда
		ТекстВТ = ТекстВТОбъектыСопоставленияВалюты();
	Иначе
		ТекстВТ = ТекстВТОбъектыСопоставления();
	КонецЕсли;
	
	ТекстЗапроса = ТекстВТ + СтрокаСоединения + "ВЫБРАТЬ
	|	МАКСИМУМ(ИдентификаторыEStaff.ОбъектСсылка) КАК Ссылка,
	|	ОбъектыСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТОбъектыПоИдентификаторам
	|ИЗ
	|	ВТОбъектыСопоставления КАК ОбъектыСопоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыEStaff КАК ИдентификаторыEStaff
	|		ПО ОбъектыСопоставления.Идентификатор = ИдентификаторыEStaff.ИдентификаторОбъекта
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Таблица.Ссылка) КАК Ссылка,
	|	ОбъектыСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТОбъектыПоНаименованиям
	|ИЗ
	|	ВТОбъектыСопоставления КАК ОбъектыСопоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицы КАК Таблица
	|		ПО ОбъектыСопоставления.Наименование = Таблица.Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыСопоставления.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА НЕ ОбъектыПоИдентификаторам.Ссылка ЕСТЬ NULL
	|			ТОГДА ОбъектыПоИдентификаторам.Ссылка
	|		КОГДА НЕ ОбъектыПоНаименованиям.Ссылка ЕСТЬ NULL
	|			ТОГДА ОбъектыПоНаименованиям.Ссылка
	|		ИНАЧЕ ОбъектыСопоставления.Ссылка
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ВТСсылкиПоИдентификаторам
	|ИЗ
	|	ВТОбъектыСопоставления КАК ОбъектыСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыПоИдентификаторам КАК ОбъектыПоИдентификаторам
	|		ПО ОбъектыСопоставления.Идентификатор = ОбъектыПоИдентификаторам.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыПоНаименованиям КАК ОбъектыПоНаименованиям
	|		ПО ОбъектыСопоставления.Идентификатор = ОбъектыПоНаименованиям.Идентификатор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСопоставленияВакансий()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТаблицаОбъектов.Идентификатор КАК Идентификатор,
	|	ТаблицаОбъектов.Наименование КАК Наименование,
	|	ТаблицаОбъектов.ДатаОткрытия КАК ДатаОткрытия,
	|	ТаблицаОбъектов.ОбъектСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТОбъектыСопоставления
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ИдентификаторыEStaff.ОбъектСсылка) КАК Ссылка,
	|	ОбъектыСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТОбъектыПоИдентификаторам
	|ИЗ
	|	ВТОбъектыСопоставления КАК ОбъектыСопоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыEStaff КАК ИдентификаторыEStaff
	|		ПО ОбъектыСопоставления.Идентификатор = ИдентификаторыEStaff.ИдентификаторОбъекта
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Вакансии.Ссылка) КАК Ссылка,
	|	ОбъектыСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТОбъектыПоРеквизитам
	|ИЗ
	|	ВТОбъектыСопоставления КАК ОбъектыСопоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Вакансии КАК Вакансии
	|		ПО ОбъектыСопоставления.Наименование = Вакансии.Наименование
	|			И ОбъектыСопоставления.ДатаОткрытия = Вакансии.ДатаОткрытия
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыСопоставления.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА НЕ ОбъектыПоИдентификаторам.Ссылка ЕСТЬ NULL
	|			ТОГДА ОбъектыПоИдентификаторам.Ссылка
	|		КОГДА НЕ ОбъектыПоРеквизитам.Ссылка ЕСТЬ NULL
	|			ТОГДА ОбъектыПоРеквизитам.Ссылка
	|		ИНАЧЕ ОбъектыСопоставления.Ссылка
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ВТСсылкиПоИдентификаторам
	|ИЗ
	|	ВТОбъектыСопоставления КАК ОбъектыСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыПоИдентификаторам КАК ОбъектыПоИдентификаторам
	|		ПО ОбъектыСопоставления.Идентификатор = ОбъектыПоИдентификаторам.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыПоРеквизитам КАК ОбъектыПоРеквизитам
	|		ПО ОбъектыСопоставления.Идентификатор = ОбъектыПоРеквизитам.Идентификатор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСопоставленияФизическихЛиц(ИмяТаблицы)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТаблицаОбъектов.Фамилия КАК Фамилия,
	|	ТаблицаОбъектов.Имя КАК Имя,
	|	ТаблицаОбъектов.email КАК email,
	|	ТаблицаОбъектов.Телефон КАК Телефон,
	|	ТаблицаОбъектов.Идентификатор КАК Идентификатор,
	|	ТаблицаОбъектов.ОбъектСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТОбъектыСопоставления
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ИдентификаторыEStaff.ОбъектСсылка) КАК Ссылка,
	|	ОбъектыСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТОбъектыПоИдентификаторам
	|ИЗ
	|	ВТОбъектыСопоставления КАК ОбъектыСопоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыEStaff КАК ИдентификаторыEStaff
	|		ПО ОбъектыСопоставления.Идентификатор = ИдентификаторыEStaff.ИдентификаторОбъекта
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадровыеДанные.Фамилия КАК Фамилия,
	|	КадровыеДанные.Имя КАК Имя,
	|	КадровыеДанные.EmailПредставление КАК email,
	|	КадровыеДанные.ТелефонМобильныйПредставление КАК Телефон,
	|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТКадровыеДанные
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадровыеДанныеФизическихЛиц.ФизическоеЛицо) КАК Ссылка,
	|	ОбъектыСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТОбъектыПоПочте
	|ИЗ
	|	ВТОбъектыСопоставления КАК ОбъектыСопоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанные КАК КадровыеДанныеФизическихЛиц
	|		ПО ОбъектыСопоставления.email = КадровыеДанныеФизическихЛиц.email
	|			И (ОбъектыСопоставления.email <> """")
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадровыеДанныеФизическихЛиц.ФизическоеЛицо) КАК Ссылка,
	|	ОбъектыСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТОбъектыПоТелефонуИФамилии
	|ИЗ
	|	ВТОбъектыСопоставления КАК ОбъектыСопоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанные КАК КадровыеДанныеФизическихЛиц
	|		ПО ОбъектыСопоставления.Фамилия = КадровыеДанныеФизическихЛиц.Фамилия
	|			И ОбъектыСопоставления.Имя = КадровыеДанныеФизическихЛиц.Имя
	|			И ОбъектыСопоставления.Телефон = КадровыеДанныеФизическихЛиц.Телефон
	|			И (ОбъектыСопоставления.Телефон <> """")
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадровыеДанныеФизическихЛиц.ФизическоеЛицо) КАК Ссылка,
	|	ОбъектыСопоставления.Идентификатор КАК Идентификатор,
	|	КОЛИЧЕСТВО(КадровыеДанныеФизическихЛиц.ФизическоеЛицо) КАК КоличествоОднофамильцев
	|ПОМЕСТИТЬ ВТОбъектыПоФамилииИИмени
	|ИЗ
	|	ВТОбъектыСопоставления КАК ОбъектыСопоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанные КАК КадровыеДанныеФизическихЛиц
	|		ПО ОбъектыСопоставления.Фамилия = КадровыеДанныеФизическихЛиц.Фамилия
	|			И ОбъектыСопоставления.Имя = КадровыеДанныеФизическихЛиц.Имя
	|			И (ОбъектыСопоставления.Имя <> """")
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыСопоставления.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА НЕ ОбъектыПоИдентификаторам.Ссылка ЕСТЬ NULL
	|			ТОГДА ОбъектыПоИдентификаторам.Ссылка
	|		КОГДА НЕ ОбъектыПоПочте.Ссылка ЕСТЬ NULL
	|			ТОГДА ОбъектыПоПочте.Ссылка
	|		КОГДА НЕ ОбъектыПоТелефону.Ссылка ЕСТЬ NULL
	|			ТОГДА ОбъектыПоТелефону.Ссылка
	|		КОГДА НЕ ОбъектыПоФамилииИИмени.Ссылка ЕСТЬ NULL
	|				И ОбъектыПоФамилииИИмени.КоличествоОднофамильцев = 1
	|			ТОГДА ОбъектыПоФамилииИИмени.Ссылка
	|		ИНАЧЕ ОбъектыСопоставления.Ссылка
	|	КОНЕЦ КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ОбъектыПоФамилииИИмени.Ссылка ЕСТЬ NULL
	|				И ОбъектыПоФамилииИИмени.КоличествоОднофамильцев > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОднофамильцы
	|ПОМЕСТИТЬ ВТСсылкиПоИдентификаторам
	|ИЗ
	|	ВТОбъектыСопоставления КАК ОбъектыСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыПоИдентификаторам КАК ОбъектыПоИдентификаторам
	|		ПО ОбъектыСопоставления.Идентификатор = ОбъектыПоИдентификаторам.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыПоПочте КАК ОбъектыПоПочте
	|		ПО ОбъектыСопоставления.Идентификатор = ОбъектыПоПочте.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыПоТелефонуИФамилии КАК ОбъектыПоТелефону
	|		ПО ОбъектыСопоставления.Идентификатор = ОбъектыПоТелефону.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыПоФамилииИИмени КАК ОбъектыПоФамилииИИмени
	|		ПО ОбъектыСопоставления.Идентификатор = ОбъектыПоФамилииИИмени.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СсылкиПоИдентификаторам.Идентификатор КАК Идентификатор,
	|	СсылкиПоИдентификаторам.Ссылка КАК ОбъектСсылка,
	|	ВЫБОР
	|		КОГДА СсылкиПоИдентификаторам.Ссылка = &ПустоеЗначение
	|				И НЕ СсылкиПоИдентификаторам.ЕстьОднофамильцы
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Создается,
	|	ВЫБОР
	|		КОГДА Таблица.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Заполняется
	|ИЗ
	|	ВТСсылкиПоИдентификаторам КАК СсылкиПоИдентификаторам
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ИмяТаблицы КАК Таблица
	|		ПО СсылкиПоИдентификаторам.Ссылка = Таблица.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", ПолноеИмяТаблицы(ИмяТаблицы));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСопоставленияКандидатов()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТаблицаОбъектов.Идентификатор КАК Идентификатор,
	|	ТаблицаОбъектов.ИдентификаторВакансии КАК ИдентификаторВакансии,
	|	ТаблицаОбъектов.ИдентификаторФизическогоЛица КАК ИдентификаторФизическогоЛица,
	|	ТаблицаОбъектов.ОбъектСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТОбъектыСопоставления
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ИдентификаторыEStaff.ОбъектСсылка) КАК Ссылка,
	|	ОбъектыСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТОбъектыПоИдентификаторам
	|ИЗ
	|	ВТОбъектыСопоставления КАК ОбъектыСопоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыEStaff КАК ИдентификаторыEStaff
	|		ПО ОбъектыСопоставления.Идентификатор = ИдентификаторыEStaff.ИдентификаторОбъекта
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыСопоставления.Идентификатор КАК Идентификатор,
	|	ИдентификаторыВакансий.ОбъектСсылка КАК Вакансия,
	|	ИдентификаторыФизическихЛиц.ОбъектСсылка КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТВладельцыОбъектов
	|ИЗ
	|	ВТОбъектыСопоставления КАК ОбъектыСопоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыEStaff КАК ИдентификаторыВакансий
	|		ПО ОбъектыСопоставления.ИдентификаторВакансии = ИдентификаторыВакансий.ИдентификаторОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыEStaff КАК ИдентификаторыФизическихЛиц
	|		ПО ОбъектыСопоставления.ИдентификаторФизическогоЛица = ИдентификаторыФизическихЛиц.ИдентификаторОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Кандидаты.Ссылка КАК Ссылка,
	|	ВладельцыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТОбъектыПоВладельцам
	|ИЗ
	|	ВТВладельцыОбъектов КАК ВладельцыОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Кандидаты КАК Кандидаты
	|		ПО ВладельцыОбъектов.Вакансия = Кандидаты.Вакансия
	|			И ВладельцыОбъектов.ФизическоеЛицо = Кандидаты.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВладельцыОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыСопоставления.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА НЕ ОбъектыПоИдентификаторам.Ссылка ЕСТЬ NULL
	|			ТОГДА ОбъектыПоИдентификаторам.Ссылка
	|		КОГДА НЕ ОбъектыПоВладельцам.Ссылка ЕСТЬ NULL
	|			ТОГДА ОбъектыПоВладельцам.Ссылка
	|		ИНАЧЕ ОбъектыСопоставления.Ссылка
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ВТСсылкиПоИдентификаторам
	|ИЗ
	|	ВТОбъектыСопоставления КАК ОбъектыСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыПоИдентификаторам КАК ОбъектыПоИдентификаторам
	|		ПО ОбъектыСопоставления.Идентификатор = ОбъектыПоИдентификаторам.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыПоВладельцам КАК ОбъектыПоВладельцам
	|		ПО ОбъектыСопоставления.Идентификатор = ОбъектыПоВладельцам.Идентификатор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИтоговый(Знач ТекстЗапроса, ИмяТаблицы)
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СсылкиПоИдентификаторам.Идентификатор КАК Идентификатор,
	|	СсылкиПоИдентификаторам.Ссылка КАК ОбъектСсылка,
	|	ВЫБОР
	|		КОГДА СсылкиПоИдентификаторам.Ссылка = &ПустоеЗначение
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Создается,
	|	ВЫБОР
	|		КОГДА Таблица.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Заполняется
	|ИЗ
	|	ВТСсылкиПоИдентификаторам КАК СсылкиПоИдентификаторам
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ИмяТаблицы КАК Таблица
	|		ПО СсылкиПоИдентификаторам.Ссылка = Таблица.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", ПолноеИмяТаблицы(ИмяТаблицы));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьКолонкиТаблицы(ВыборкаИсточник, ТаблицаЗаполнения)
	
	Пока ВыборкаИсточник.Следующий() Цикл
		
		СтрокаСоответствия = ТаблицаЗаполнения.Найти(ВыборкаИсточник.Идентификатор, "Идентификатор");
		ЗаполнитьЗначенияСвойств(СтрокаСоответствия, ВыборкаИсточник, "ОбъектСсылка,Создается,Заполняется");
		
	КонецЦикла;
	
КонецПроцедуры

Функция УточненноеНаименованиеИсточникаИнформации(Наименование, ВнутренниеНаименования)
	
	УточненноеНаименование = Наименование;
	
	Если Наименование = "hh.ru" Тогда
		УточненноеНаименование = ВнутренниеНаименования.HeadHunter;
	ИначеЕсли Наименование = "rabota.ru" Тогда
		УточненноеНаименование = ВнутренниеНаименования.Rabota;
	ИначеЕсли Наименование = "superjob.ru" Тогда
		УточненноеНаименование = ВнутренниеНаименования.SuperJob;
	КонецЕсли;
	
	Возврат УточненноеНаименование;
	
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

Процедура ЗаписатьСопоставленныеДанные(Параметры, АдресХранилища) Экспорт
	
	ОписанияИОбъекты = Параметры.ОписанияИОбъекты;
	ОрганизацияПоУмолчанию = Параметры.ОрганизацияПоУмолчанию;
	
	КоличествоСозданных = 0;
	КоличествоПропущенных = 0;
	КоличествоПропущенныхСОшибкой = 0;
	
	ДанныеПрогресса = НачальныеДанныеПрогресса(ОписанияИОбъекты);
	
	ПорядокЗаписиОбъектов = Новый ТаблицаЗначений;
	ПорядокЗаписиОбъектов.Колонки.Добавить("КлючОписания", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ПорядокЗаписиОбъектов.Колонки.Добавить("ПорядокЗаписи", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	
	Для Каждого ОписаниеИОбъектыПоКлючу Из ОписанияИОбъекты Цикл
		
		ОписаниеИОбъекты = ОписаниеИОбъектыПоКлючу.Значение;
		Описание = ОписаниеИОбъекты.Описание;
		
		НоваяСтрока = ПорядокЗаписиОбъектов.Добавить();
		НоваяСтрока.КлючОписания = ОписаниеИОбъектыПоКлючу.Ключ;
		НоваяСтрока.ПорядокЗаписи = Описание.ПорядокЗаписи;
		
	КонецЦикла;
	
	ПорядокЗаписиОбъектов.Сортировать("ПорядокЗаписи");
	
	Для Каждого СтрокаТаблицы Из ПорядокЗаписиОбъектов Цикл
		
		КлючОписания = СтрокаТаблицы.КлючОписания;
		
		ОписаниеИОбъектыПоКлючу = ОписанияИОбъекты.Получить(КлючОписания);
		Описание = ОписаниеИОбъектыПоКлючу.Описание;
		ДанныеОбъектов = ОписаниеИОбъектыПоКлючу.Объекты;
		
		Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
			
			Отказ = Ложь;
			
			Если Не ДанныеОбъекта.Создается И Не ДанныеОбъекта.Заполняется Тогда
				
				КоличествоПропущенных = КоличествоПропущенных + 1;
				
			Иначе
				
				ИмяТаблицы = Описание.ИмяТаблицы;
				
				Если КлючОписания = КлючОрганизации() Тогда
					ЗаписатьОрганизацию(ДанныеОбъекта, ИмяТаблицы, Отказ);
				ИначеЕсли КлючОписания = КлючПодразделения() Тогда
					ЗаписатьПодразделение(ДанныеОбъекта, ИмяТаблицы, ОрганизацияПоУмолчанию, Отказ);
				ИначеЕсли КлючОписания = КлючПозиции() Тогда
					ЗаписатьПозицию(ДанныеОбъекта, ИмяТаблицы, Отказ);
				ИначеЕсли КлючОписания = КлючВакансии() Тогда
					ЗаписатьВакансию(ДанныеОбъекта, ИмяТаблицы, Отказ);
				ИначеЕсли КлючОписания = КлючФизическогоЛица() Тогда
					ЗаписатьФизическоеЛицо(ДанныеОбъекта, ИмяТаблицы, Отказ);
				ИначеЕсли КлючОписания = КлючКандидата() Тогда
					ЗаписатьКандидата(ДанныеОбъекта, ИмяТаблицы, Отказ);
				ИначеЕсли КлючОписания = КлючПричиныОткрытия() Тогда
					ЗаписатьПричинуОткрытияВакансии(ДанныеОбъекта, ИмяТаблицы, Отказ);
				ИначеЕсли КлючОписания = КлючИсточникаИнформации() Тогда
					ЗаписатьИсточникИнформации(ДанныеОбъекта, ИмяТаблицы, Отказ);
				ИначеЕсли КлючОписания = КлючВалюты() Тогда
					ЗаписатьВалюту(ДанныеОбъекта, ИмяТаблицы, Отказ);
				ИначеЕсли КлючОписания = КлючЯзыка() Тогда
					ЗаписатьЯзык(ДанныеОбъекта, ИмяТаблицы, Отказ);
				ИначеЕсли КлючОписания = КлючСтраны() Тогда
					ЗаписатьСтрану(ДанныеОбъекта, ИмяТаблицы, Отказ);
				Иначе
					ЗаписатьЭлементСправочника(ДанныеОбъекта, ИмяТаблицы, Отказ);
				КонецЕсли;
				
				Если Отказ Тогда
					КоличествоПропущенныхСОшибкой = КоличествоПропущенныхСОшибкой + 1;
				Иначе
					КоличествоСозданных = КоличествоСозданных + 1;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не Отказ И ЗначениеЗаполнено(ДанныеОбъекта.ОбъектСсылка) Тогда
				ЗаписатьИдентификаторОбъекта(ДанныеОбъекта.ОбъектСсылка, ДанныеОбъекта.Идентификатор);
			КонецЕсли;
			
			Если КлючОписания = КлючОрганизации() Тогда
				ДанныеПрогресса.ОбработаноОрганизаций = ДанныеПрогресса.ОбработаноОрганизаций + 1;
			ИначеЕсли КлючОписания = КлючПодразделения() Тогда
				ДанныеПрогресса.ОбработаноПодразделений = ДанныеПрогресса.ОбработаноПодразделений + 1;
			ИначеЕсли КлючОписания = КлючПозиции() Тогда
				ДанныеПрогресса.ОбработаноПозиций = ДанныеПрогресса.ОбработаноПозиций + 1;
			ИначеЕсли КлючОписания = КлючВакансии() 
				Или КлючОписания = КлючКандидата() Тогда
				ДанныеПрогресса.ОбработаноКандидатовИВакансий = ДанныеПрогресса.ОбработаноКандидатовИВакансий + 1;
			Иначе
				ДанныеПрогресса.ОбработаноПрочих = ДанныеПрогресса.ОбработаноПрочих + 1;
			КонецЕсли;
			
			ДлительныеОперации.СообщитьПрогресс(, ТекстПрогресса(ДанныеПрогресса));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Всего = КоличествоСозданных + КоличествоПропущенных + КоличествоПропущенныхСОшибкой;
	Результат = Новый Структура;
	
	Результат.Вставить("Всего", 		Всего);
	Результат.Вставить("Создано", 		КоличествоСозданных);
	Результат.Вставить("Пропущено", 		КоличествоПропущенных);
	Результат.Вставить("ПропущеноСОшибкой", КоличествоПропущенныхСОшибкой);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция НачальныеДанныеПрогресса(ОписанияИОбъекты)
	
	ДанныеПрогресса = Новый Структура;
	
	КоличествоОрганизаций = 0;
	КоличествоПодразделений = 0;
	КоличествоПозиций = 0;
	КоличествоКандидатовИВакансий = 0;
	КоличествоПрочих = 0;
	
	Для Каждого ОписаниеИОбъектыПоКлючу Из ОписанияИОбъекты Цикл
		
		ОписаниеИОбъекты = ОписаниеИОбъектыПоКлючу.Значение;
		ДанныеОбъектов = ОписаниеИОбъекты.Объекты;
		
		Если ОписаниеИОбъектыПоКлючу.Ключ = КлючОрганизации() Тогда
			КоличествоОрганизаций = ДанныеОбъектов.Количество();
		ИначеЕсли ОписаниеИОбъектыПоКлючу.Ключ = КлючПодразделения() Тогда
			КоличествоПодразделений = ДанныеОбъектов.Количество();
		ИначеЕсли ОписаниеИОбъектыПоКлючу.Ключ = КлючПозиции() Тогда
			КоличествоПозиций = ДанныеОбъектов.Количество();
		ИначеЕсли ОписаниеИОбъектыПоКлючу.Ключ = КлючВакансии() 
			Или ОписаниеИОбъектыПоКлючу.Ключ = КлючКандидата() Тогда
			КоличествоКандидатовИВакансий = КоличествоКандидатовИВакансий + ДанныеОбъектов.Количество();
		Иначе
			КоличествоПрочих = КоличествоПрочих + ДанныеОбъектов.Количество();
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПрогресса.Вставить("КоличествоОрганизаций", КоличествоОрганизаций);
	ДанныеПрогресса.Вставить("КоличествоПодразделений", КоличествоПодразделений);
	ДанныеПрогресса.Вставить("КоличествоПозиций", КоличествоПозиций);
	ДанныеПрогресса.Вставить("КоличествоКандидатовИВакансий", КоличествоКандидатовИВакансий);
	ДанныеПрогресса.Вставить("КоличествоПрочих", КоличествоПрочих);
	
	ДанныеПрогресса.Вставить("ОбработаноОрганизаций", 0);
	ДанныеПрогресса.Вставить("ОбработаноПодразделений", 0);
	ДанныеПрогресса.Вставить("ОбработаноПозиций", 0);
	ДанныеПрогресса.Вставить("ОбработаноКандидатовИВакансий", 0);
	ДанныеПрогресса.Вставить("ОбработаноПрочих", 0);
	
	Возврат ДанныеПрогресса;
	
КонецФункции

Функция ТекстПрогресса(ДанныеПрогресса)
	
	ШаблонТекста = НСтр("ru='Выполняется загрузка данных. Данная операция может занять длительное время.
		|Пожалуйста, подождите...
		|
		|Общие справочники (%1/%2)
		|Организации (%3/%4)
		|Подразделения (%5/%6)
		|Штатное расписание (%7/%8)
		|Кандидаты и вакансии (%9/%10)'");
	
	Текст = СтрШаблон(ШаблонТекста, ДанныеПрогресса.ОбработаноПрочих, ДанныеПрогресса.КоличествоПрочих,
		ДанныеПрогресса.ОбработаноОрганизаций, ДанныеПрогресса.КоличествоОрганизаций,
		ДанныеПрогресса.ОбработаноПодразделений, ДанныеПрогресса.КоличествоПодразделений,
		ДанныеПрогресса.ОбработаноПозиций, ДанныеПрогресса.КоличествоПозиций,
		ДанныеПрогресса.ОбработаноКандидатовИВакансий, ДанныеПрогресса.КоличествоКандидатовИВакансий);
		
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область ЗаписьНовыхОбъектов

Функция НовыйСправочникОбъект(ДанныеОбъекта, ИмяТаблицы)
	
	Объект = Справочники[ИмяТаблицы].СоздатьЭлемент();
	
	Если Не ДанныеОбъекта.Создается И ДанныеОбъекта.Заполняется Тогда
		Объект.УстановитьСсылкуНового(ДанныеОбъекта.ОбъектСсылка);
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции

Функция СтруктураКИ()
	
	Возврат Новый Структура("ЗначенияПолей, ВидИнформации, ТипИнформации");
	
КонецФункции

Функция СтруктураОбразованиеEStaff()
	Возврат Новый Структура("end_year,org_name,speciality_name,is_secondary,comment");
КонецФункции

Функция СтруктураТрудоваяДеятельностьEStaff()
	Возврат Новый Структура("start_date,end_date,org_name,position_name,comment");
КонецФункции

Функция СтруктураЗнаниеЯзыкаEStaff()
	Возврат Новый Структура("type_id,level_id,comment,date");
КонецФункции

Функция СтруктураПубликацииEStaff()
	Возврат Новый Структура("site_id,eid");
КонецФункции

Функция СтруктураВложенияEStaff()
	Возврат Новый Структура("id,type_id,name,date,content_type,data,file_name,text");
КонецФункции

Функция СтруктураОтборНаВакансию()
	Возврат Новый Структура("start_date,state_id,state_date");
КонецФункции

Функция ВидОбразованияПоИдентификатору(Идентификатор)
	
	ВидОбразования = Неопределено;
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		
		Если Идентификатор = "1" Тогда
			ВидОбразования = Справочники.ВидыОбразованияФизическихЛиц.СреднееПолноеОбщееОбразование;
		ИначеЕсли Идентификатор = "2" Тогда
			ВидОбразования = Справочники.ВидыОбразованияФизическихЛиц.СреднееПрофессиональноеОбразование;
		ИначеЕсли Идентификатор = "3" Тогда
			ВидОбразования = Справочники.ВидыОбразованияФизическихЛиц.НеполноеВысшееОбразование;
		Иначе
			ВидОбразования = Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразование;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидОбразования;
	
КонецФункции

Функция ПолФизическогоЛицаПоИдентификатору(Идентификатор)
	
	Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
	
	Если Идентификатор = "1" Тогда
		Пол = Перечисления.ПолФизическогоЛица.Женский;
	ИначеЕсли Идентификатор = "0" Тогда
		Пол = Перечисления.ПолФизическогоЛица.Мужской;
	КонецЕсли;
	
	Возврат Пол;
	
КонецФункции

Функция СпособНабораПоИдентификатору(Идентификатор)
	
	Если ЗначениеЗаполнено(Идентификатор) И Идентификатор = "selection" Тогда
		СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.МассовыйНабор;
	Иначе
		СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.ЕдиничныйНабор;
	КонецЕсли;
	
	Возврат СпособНабора;
	
КонецФункции

Функция СложностьВакансииПоИдентификатору(Идентификатор)
	
	ЗначениеСложности = Неопределено;
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		ЗначениеСложности = СтрокаВЧисло(Идентификатор);
	КонецЕсли;
	Возврат ?(ЗначениеСложности = Неопределено, 1, ?(ЗначениеСложности > 3, 3, ЗначениеСложности));
	
КонецФункции

Функция ПриоритетВакансииПоИдентификатору(Идентификатор)
	
	ЗначениеПриоритета = Перечисления.Приоритет.Средний;
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		
		ЗначениеПриоритетаЧислом = СтрокаВЧисло(Идентификатор);
		Если ЗначениеПриоритетаЧислом = 1 Тогда
			ЗначениеПриоритета = Перечисления.Приоритет.Высокий;
		ИначеЕсли ЗначениеПриоритетаЧислом = 3 Тогда
			ЗначениеПриоритета = Перечисления.Приоритет.Низкий;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеПриоритета;
	
КонецФункции

Функция СостояниеВакансииПоИдентификатору(Идентификатор)
	
	Состояние = Перечисления.СостоянияВакансии.Открыта;
	
	Если Идентификатор = "vacancy_closed" Или Идентификатор = "vacancy_closed_by_rr" Тогда
		Состояние = Перечисления.СостоянияВакансии.Закрыта;
	ИначеЕсли Идентификатор = "suspended" Тогда
		Состояние = Перечисления.СостоянияВакансии.Приостановлена;
	ИначеЕсли Идентификатор = "vacancy_cancelled" Тогда
		Состояние = Перечисления.СостоянияВакансии.Отменена;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СайтПубликацииПоИдентификатору(Идентификатор)
	
	Сайт = Справочники.ИсточникиИнформацииОКандидатах.ПустаяСсылка();
	
	Если Идентификатор = "hh" Тогда
		Сайт = ИнтеграцияРекрутинговыхСайтовКлиентСервер.HeadHunter();
	ИначеЕсли Идентификатор = "superjob" Тогда
		Сайт = ИнтеграцияРекрутинговыхСайтовКлиентСервер.SuperJob();
	ИначеЕсли Идентификатор = "rabota" Тогда
		Сайт = ИнтеграцияРекрутинговыхСайтовКлиентСервер.Rabota();
	КонецЕсли;
	
	Возврат Сайт;
	
КонецФункции

Функция СтепеньЗнанияЯзыкаПоИдентификатору(Идентификатор)
	
	СтепеньЗнания = Справочники.СтепениЗнанияЯзыка.ПустаяСсылка();
	НаименованияСтепени = Новый Массив;
	
	Если Идентификатор = "1" Или Идентификатор = "2" Тогда
		
		НаименованияСтепени.Добавить(Справочники.СтепениЗнанияЯзыка.НаименованиеСтепениЧитаетИПереводит());
		
		Если Идентификатор = "1" Тогда
			НаименованияСтепени.Добавить(НСтр("ru='начальный'"));
		ИначеЕсли Идентификатор = "2" Тогда
			НаименованияСтепени.Добавить(НСтр("ru='средний'"));
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "3" Тогда
		
		НаименованияСтепени.Добавить(Справочники.СтепениЗнанияЯзыка.НаименованиеСтепениЧитаетИОбъясняется());
		НаименованияСтепени.Добавить(НСтр("ru='уверенный'"));
		
	ИначеЕсли Идентификатор = "4" Тогда
		
		НаименованияСтепени.Добавить(Справочники.СтепениЗнанияЯзыка.НаименованиеСтепениВладеетСвободно());
		НаименованияСтепени.Добавить(НСтр("ru='свободный'"));
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименования", НаименованияСтепени);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтепениЗнанияЯзыка.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтепениЗнанияЯзыка КАК СтепениЗнанияЯзыка
	|ГДЕ
	|	СтепениЗнанияЯзыка.Наименование В(&Наименования)
	|	И НЕ СтепениЗнанияЯзыка.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтепеньЗнания = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СтепеньЗнания;
	
КонецФункции

Функция ЧастиИдентификатораКандидата(Идентификатор)
	
	ЧастиИдентификатора = СтрРазделить(Идентификатор, "/");
	
	Идентификаторы = Новый Структура;
	Идентификаторы.Вставить("ИдентификаторФизическогоЛица", ЧастиИдентификатора[0]);
	Идентификаторы.Вставить("ИдентификаторВакансии", ЧастиИдентификатора[1]);
	
	Возврат Идентификаторы;
	
КонецФункции

Функция ПредполагаемыйДоходПоВакансии(ДанныеДляЭкспорта, ДатаОткрытияВакансии)
	
	ПредполагаемыйДоход = 0;
	
	Если ЗначениеЗаполнено(ДанныеДляЭкспорта.salary) Тогда 
		ПредполагаемыйДоход = СтрокаВЧисло(ДанныеДляЭкспорта.salary);
	ИначеЕсли ЗначениеЗаполнено(ДанныеДляЭкспорта.max_salary) Тогда
		ПредполагаемыйДоход = СтрокаВЧисло(ДанныеДляЭкспорта.max_salary);
	ИначеЕсли ЗначениеЗаполнено(ДанныеДляЭкспорта.min_salary) Тогда
		ПредполагаемыйДоход = СтрокаВЧисло(ДанныеДляЭкспорта.min_salary);
	КонецЕсли;
	
	ИдентификаторВалюты = ДанныеДляЭкспорта.salary_currency_id;
	Если ЗначениеЗаполнено(ИдентификаторВалюты) Тогда
		
		ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
		Валюта = ОбъектПоИдентификатору(КлючВалюты(), ИдентификаторВалюты);
		
		Если ЗначениеЗаполнено(Валюта) И Валюта <> ВалютаУчета Тогда
			ПредполагаемыйДоход = РаботаСКурсамиВалют.ПересчитатьВВалюту(ПредполагаемыйДоход, Валюта, ВалютаУчета, ДатаОткрытияВакансии);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредполагаемыйДоход;
	
КонецФункции

Функция ЗаявительПоВакансии(ДанныеДляЭкспорта)
	
	Заявитель = Справочники.Пользователи.ПустаяСсылка();
	
	ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ДанныеКонтактныхЛиц = ДанныеДляЭкспорта.rr_persons;
	
	Если ЗначениеЗаполнено(ДанныеКонтактныхЛиц) Тогда
		
		ЗаписиКонтактныхЛиц = ЗначениеВМассиве(ДанныеДляЭкспорта.rr_persons["rr_person"]);
		Для Каждого ЗаписьКонтактногоЛица Из ЗаписиКонтактныхЛиц Цикл
			
			ИдентификаторФизическогоЛица = ЗаписьКонтактногоЛица.person_id;
			ФизическоеЛицо = ОбъектПоИдентификатору(КлючФизическогоЛица(), ИдентификаторФизическогоЛица);
			
			Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.Недействителен КАК Недействителен,
		|	Пользователи.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Недействителен УБЫВ,
		|	ПометкаУдаления УБЫВ";
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Заявитель = Выборка.Пользователь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Заявитель;
	
КонецФункции

Функция НаименованиеКандидата(ДанныеДляЭкспорта) 
	
	ФИО = Новый Структура("Фамилия, Имя, Отчество", 
		ДанныеДляЭкспорта.lastname, 
		ДанныеДляЭкспорта.firstname, 
		ДанныеДляЭкспорта.middlename);
		
	Возврат Справочники.Кандидаты.НаименованиеКандидата(ФИО);
	
КонецФункции

Функция ОжидаемыйДоходКандидата(ДанныеДляЭкспорта, ДатаРегистрации)
	
	ОжидаемыйДоход = 0;
	
	Если ЗначениеЗаполнено(ДанныеДляЭкспорта.salary) Тогда
		ОжидаемыйДоход = СтрокаВЧисло(ДанныеДляЭкспорта.salary);
	КонецЕсли;
	
	ИдентификаторВалюты = ДанныеДляЭкспорта.salary_currency_id;
	Если ЗначениеЗаполнено(ИдентификаторВалюты) Тогда
		
		ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
		Валюта = ОбъектПоИдентификатору(КлючВалюты(), ИдентификаторВалюты);
		
		Если ЗначениеЗаполнено(Валюта) И Валюта <> ВалютаУчета Тогда
			ОжидаемыйДоход = РаботаСКурсамиВалют.ПересчитатьВВалюту(ОжидаемыйДоход, Валюта, ВалютаУчета, ДатаРегистрации);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОжидаемыйДоход;
	
КонецФункции

Процедура ЗаполнитьРезюмеКандидата(Объект, ДанныеДляЭкспорта)
	
	Если ЗначениеЗаполнено(ДанныеДляЭкспорта.children_num) Тогда
		
		ТекстОписания = СтрШаблон(НСтр("ru = 'Дети: %1'"), ДанныеДляЭкспорта.children_num);
		
		СтруктураРезюме = ПодборПерсоналаКлиентСервер.СтруктураHTMLРезюме();
		СтруктураРезюме.HTML = ПодборПерсонала.ТекстВHTML(ТекстОписания);
		
		Объект.Резюме = Новый ХранилищеЗначения(СтруктураРезюме);
		Объект.РезюмеТекст = Новый ХранилищеЗначения(ТекстОписания);
		
		Объект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРейтингКандидата(Объект, ДанныеДляЭкспорта)
	
	Если ЗначениеЗаполнено(ДанныеДляЭкспорта.rating) 
		И ЗначениеЗаполнено(Объект.Ответственный) Тогда
		
		Объект.Рейтинг = СтрокаВЧисло(ДанныеДляЭкспорта.rating);
		
		СтрокаОценки = Объект.Оценки.Добавить();
		СтрокаОценки.Оценка = Объект.Рейтинг;
		СтрокаОценки.Пользователь = Объект.Ответственный;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРешениеПоКандидату(Объект, ДанныеДляЭкспорта)
	
	Если ЗначениеЗаполнено(ДанныеДляЭкспорта.state_id) Тогда
		
		Объект.ДатаРешения = ДатаСтрокойВДату(ДанныеДляЭкспорта.state_date);
		
		СтадииСостоянияСогласовано = Новый Массив;
		СтадииСостоянияСогласовано.Добавить("job_offer:succeeded");
		СтадииСостоянияСогласовано.Добавить("phone_interview:succeeded");
		СтадииСостоянияСогласовано.Добавить("interview:succeeded");
		СтадииСостоянияСогласовано.Добавить("rr_interview:succeeded");
		СтадииСостоянияСогласовано.Добавить("video_interview_poll:succeeded");
		СтадииСостоянияСогласовано.Добавить("group_interview_result:succeeded");
		СтадииСостоянияСогласовано.Добавить("hire");
		СтадииСостоянияСогласовано.Добавить("hire_paper");
		
		СтадииСостоянияОтклонено = Новый Массив;
		СтадииСостоянияОтклонено.Добавить("job_offer:failed");
		СтадииСостоянияОтклонено.Добавить("security_check:failed");
		СтадииСостоянияОтклонено.Добавить("reject");
		СтадииСостоянияОтклонено.Добавить("rr_reject");
		СтадииСостоянияОтклонено.Добавить("self_reject");
		СтадииСостоянияОтклонено.Добавить("vacancy_close");
		СтадииСостоянияОтклонено.Добавить("vacancy_cancel");
		СтадииСостоянияОтклонено.Добавить("candidate_phone_call:failed");
		СтадииСостоянияОтклонено.Добавить("phone_interview:failed");
		СтадииСостоянияОтклонено.Добавить("blacklist");
		СтадииСостоянияОтклонено.Добавить("interview:failed");
		СтадииСостоянияОтклонено.Добавить("rr_interview:failed");
		СтадииСостоянияОтклонено.Добавить("video_interview_poll:failed");
		СтадииСостоянияОтклонено.Добавить("group_interview_result:failed");
		
		СтадииПричиныСамоотвод = Новый Массив;
		СтадииПричиныСамоотвод.Добавить("candidate_phone_call:withdrawn");
		СтадииПричиныСамоотвод.Добавить("phone_interview:withdrawn");
		СтадииПричиныСамоотвод.Добавить("interview:withdrawn");
		СтадииПричиныСамоотвод.Добавить("rr_interview:withdrawn");
		СтадииПричиныСамоотвод.Добавить("group_interview_result:withdrawn");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтадииСостоянияОтклонено, СтадииПричиныСамоотвод);
		
		Если СтадииСостоянияСогласовано.Найти(ДанныеДляЭкспорта.state_id) <> Неопределено Тогда
			Объект.Состояние = Перечисления.СостоянияСогласования.Согласовано;
		ИначеЕсли СтадииСостоянияОтклонено.Найти(ДанныеДляЭкспорта.state_id) <> Неопределено Тогда
			Объект.Состояние = Перечисления.СостоянияСогласования.Отклонено;
		Иначе
			Объект.Состояние = Перечисления.СостоянияСогласования.Рассматривается;
		КонецЕсли;
		
		Если Объект.Состояние = Перечисления.СостоянияСогласования.Отклонено Тогда
			
			НаименованиеПричины = "";
			Если СтадииПричиныСамоотвод.Найти(ДанныеДляЭкспорта.state_id) <> Неопределено Тогда
				НаименованиеПричины = Справочники.ПричиныОтклоненияКандидатов.НаименованиеПричиныСамоотвода();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НаименованиеПричины) Тогда
				Объект.ПричинаОтклонения = Справочники.ПричиныОтклоненияКандидатов.НайтиПоНаименованию(НаименованиеПричины);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьКомментарийКандидата(Объект, ДанныеДляЭкспорта)
	
	Если ЗначениеЗаполнено(ДанныеДляЭкспорта.last_comment) Тогда
		
		НаборЗаписей = РегистрыСведений.КомментарииКандидатов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Кандидат.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			ПериодЗаписи = ?(ЗначениеЗаполнено(Объект.ДатаРешения), Объект.ДатаРешения, Объект.ДатаРегистрации);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период = ПериодЗаписи;
			НоваяЗапись.Кандидат = Объект.Ссылка;
			НоваяЗапись.Пользователь = Объект.Ответственный;
			НоваяЗапись.Комментарий = ДанныеДляЭкспорта.last_comment;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИдентификаторОбъекта(ОбъектСсылка, ИдентификаторОбъекта)
	
	НаборЗаписей = РегистрыСведений.ИдентификаторыEStaff.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторОбъекта.Установить(ИдентификаторОбъекта);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ИдентификаторОбъекта = ИдентификаторОбъекта;
	НоваяЗапись.ОбъектСсылка = ОбъектСсылка;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ЗаписатьСправочникОбъект(Объект)
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
	Возврат Объект.Ссылка;
	
КонецФункции

Процедура ЗаписатьДанныеОБраке(ОбъектСсылка, ИдентификаторСтатусаВБраке)
	
	Если Не ЗначениеЗаполнено(ИдентификаторСтатусаВБраке) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторСтатусаВБраке = "2" Тогда // женат
		КодЗначения = 2;
	ИначеЕсли ИдентификаторСтатусаВБраке = "3" Тогда // разведен
		КодЗначения = 5;
	ИначеЕсли ИдентификаторСтатусаВБраке = "4" Тогда // незарегистрированный брак
		КодЗначения = 3;
	Иначе
		КодЗначения = 1; // не женат
	КонецЕсли;
	
	СостояниеВБраке = Справочники.СостояниеВБраке.НайтиПоКоду(КодЗначения);
	
	НаборЗаписей = РегистрыСведений.СостоянияВБракеФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ОбъектСсылка);
	НаборЗаписей.Прочитать();
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	НоваяЗапись.ФизическоеЛицо = ОбъектСсылка;
	НоваяЗапись.СостояниеВБраке = СостояниеВБраке;
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаписатьДанныеОГражданстве(ОбъектСсылка, ИдентификаторСтраны)
	
	Если Не ЗначениеЗаполнено(ОбъектСсылка)
		Или Не ЗначениеЗаполнено(ИдентификаторСтраны) Тогда
		Возврат;
	КонецЕсли;
	
	Страна = ОбъектПоИдентификатору(КлючСтраны(), ИдентификаторСтраны);
	
	Если Не ЗначениеЗаполнено(Страна) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ОбъектСсылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
		НоваяЗапись.ФизическоеЛицо = ОбъектСсылка;
		НоваяЗапись.Страна = Страна;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеОбОбразовании(ОбъектСсылка, ДанныеДляЭкспорта)
	
	ИдентификаторОбразования = ДанныеДляЭкспорта.educ_type_id;
	ВидОбразованияПоУмолчания = ВидОбразованияПоИдентификатору(ИдентификаторОбразования);
	
	Образование = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеДляЭкспорта.prev_educations) Тогда
		
		ЗаписиОбразования = ЗначениеВМассиве(ДанныеДляЭкспорта.prev_educations["prev_education"]);
		
		СведенияОбОбразовании = Справочники.Кандидаты.СтруктураОбразование();
		Для Каждого ЗаписьОбразования Из ЗаписиОбразования Цикл
			
			СтруктураСведений = СтруктураОбразованиеEStaff();
			ЗаполнитьЗначенияСвойств(СтруктураСведений, ЗаписьОбразования);
			
			СведенияОбОбразовании.УчебноеЗаведение = СтруктураСведений.org_name;
			СведенияОбОбразовании.Окончание = СтрокаВЧисло(СтруктураСведений.end_year);
			СведенияОбОбразовании.Специальность = СтруктураСведений.speciality_name;
			
			Если СтруктураСведений.is_secondary = Истина
				И ВидОбразованияПоУмолчания = Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразование Тогда
				
				СведенияОбОбразовании.ВидОбразования = Справочники.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование;
				СведенияОбОбразовании.ВидДополнительногоОбучения = Перечисления.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации;
				
			Иначе
				СведенияОбОбразовании.ВидОбразования = ВидОбразованияПоУмолчания;
			КонецЕсли;
			
			Образование.Добавить(СведенияОбОбразовании);
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ВидОбразованияПоУмолчания) Тогда
		
		СведенияОбОбразовании = Справочники.Кандидаты.СтруктураОбразование();
		СведенияОбОбразовании.ВидОбразования = ВидОбразованияПоУмолчания;
		
		Образование.Добавить(СведенияОбОбразовании);
		
	КонецЕсли;
	
	ДанныеОбОбразовании = Справочники.Кандидаты.ПодготовитьДанныеОбОбразовании(Образование);
	КадровыйУчетРасширенный.ЗаписатьДанныеОбОбразовании(ОбъектСсылка, ДанныеОбОбразовании);
	
КонецПроцедуры

Процедура ЗаписатьДанныеОТрудовойДеятельности(ОбъектСсылка, ДанныеДляЭкспорта)
	
	Если Не ЗначениеЗаполнено(ДанныеДляЭкспорта.prev_jobs) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписиТрудовойДеятельности = ЗначениеВМассиве(ДанныеДляЭкспорта.prev_jobs["prev_job"]);
	
	НаборЗаписей = РегистрыСведений.ТрудоваяДеятельностьФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ОбъектСсылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Для Каждого ЗаписьТрудовойДеятельности Из ЗаписиТрудовойДеятельности Цикл
			
			СтруктураСведений = СтруктураТрудоваяДеятельностьEStaff();
			ЗаполнитьЗначенияСвойств(СтруктураСведений, ЗаписьТрудовойДеятельности);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ФизическоеЛицо = ОбъектСсылка;
			НоваяЗапись.Организация = СтруктураСведений.org_name;
			НоваяЗапись.ДатаНачала = ДатаСтрокойВДату(СтруктураСведений.start_date);
			НоваяЗапись.ДатаОкончания = ДатаСтрокойВДату(СтруктураСведений.end_date);
			НоваяЗапись.Должность = СтруктураСведений.position_name;
			НоваяЗапись.Обязанности = СтруктураСведений.comment;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеОЗнанияхЯзыков(ОбъектСсылка, ДанныеДляЭкспорта)
	
	Если Не ЗначениеЗаполнено(ДанныеДляЭкспорта.skills) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ОбъектСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗнаниеЯзыковФизическихЛиц.Язык КАК Язык
	|ИЗ
	|	РегистрСведений.ЗнаниеЯзыковФизическихЛиц КАК ЗнаниеЯзыковФизическихЛиц
	|ГДЕ
	|	ЗнаниеЯзыковФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗнанияЯзыков = Новый Массив;
	
	СведенияОЗнанииЯзыка = Справочники.Кандидаты.СтруктураЗнаниеЯзыков();
	ЗаписиЗнанияЯзыков = ЗначениеВМассиве(ДанныеДляЭкспорта.skills["skill"]);
	
	Для Каждого ЗаписьЗнанияЯзыка Из ЗаписиЗнанияЯзыков Цикл
		
		СтруктураСведений = СтруктураЗнаниеЯзыкаEStaff();
		ЗаполнитьЗначенияСвойств(СтруктураСведений, ЗаписьЗнанияЯзыка);
		
		Язык = ОбъектПоИдентификатору(КлючЯзыка(), СтруктураСведений.type_id);
		
		Если ЗначениеЗаполнено(Язык) Тогда
			
			СведенияОЗнанииЯзыка.Язык = Язык;
			СведенияОЗнанииЯзыка.СтепеньЗнанияЯзыка = СтепеньЗнанияЯзыкаПоИдентификатору(СтруктураСведений.level_id);
			
			ЗнанияЯзыков.Добавить(СведенияОЗнанииЯзыка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеОЗнанияхЯзыков = Справочники.Кандидаты.ПодготовитьДанныеОЗнанияхЯзыков(ЗнанияЯзыков);
	КадровыйУчетРасширенный.ЗаписатьДанныеОЗнанииЯзыков(ОбъектСсылка, ДанныеОЗнанияхЯзыков);
	
КонецПроцедуры

Процедура ЗаписатьВложенияКандидата(ФизическоеЛицо, ДанныеОбъекта, ЭтоОсновнойКандидат)
	
	Кандидат = ДанныеОбъекта.ОбъектСсылка;
	ИмяФайлаХранения = ДанныеОбъекта.ИмяФайлаХранения;
	
	ОбновлятьФотографию = ПустаяСтрока(КадровыйУчетРасширенный.АдресФотографииФизическогоЛица(ФизическоеЛицо));
	ДобавлятьДокументы = ЭтоОсновнойКандидат;
	
	Если Не ОбновлятьФотографию И Не ДобавлятьДокументы Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаХранения);
	
	ДанныеEStaff = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Для Каждого Свойство Из ДанныеEStaff.Свойства() Цикл
		
		Если Свойство.Имя = "attachments" Тогда
			
			СтруктураСВложениями = Новый Структура();
			СвойствоXDTOВЭлементСтруктуры(ДанныеEStaff, Свойство, СтруктураСВложениями);
			
			ДанныеОВложений = СтруктураСВложениями["attachments"];
			ЗаписиВложений = ЗначениеВМассиве(ДанныеОВложений["attachment"]);
			ИндексЗаписи = 0;
			
			ЗначениеСвойства = ДанныеEStaff["attachments"]["attachment"];
			
			Для Каждого ЗаписьВложения Из ЗаписиВложений Цикл
				
				Вложение = СтруктураВложенияEStaff();
				ЗаполнитьЗначенияСвойств(Вложение, ЗаписьВложения);
				
				Если ОбновлятьФотографию И Вложение.type_id = "photo" Тогда
					
					ЗаписьФотографии = ЗначениеСвойства;
					Если ТипЗнч(ЗаписьФотографии) = Тип("СписокXDTO") Тогда
						ЗаписьФотографии = ЗаписьФотографии.ПолучитьXDTO(ИндексЗаписи);
					КонецЕсли;
					
					ФотографияСтрокой = ЗаписьФотографии["data"].Последовательность().ПолучитьТекст(0);
					ДвоичныеДанные = Base64Значение(ФотографияСтрокой);
					
					Фото = Новый Картинка(ДвоичныеДанные);
					АдресФотографии = ПоместитьВоВременноеХранилище(Фото);
					КадровыйУчетРасширенный.ЗаписатьФотографию(ФизическоеЛицо, АдресФотографии);
					
				ИначеЕсли ДобавлятьДокументы 
					И (Вложение.type_id = "cover_letter" 
					Или Вложение.type_id = "resume"
					Или Вложение.type_id = "add_comment") Тогда
					
					Расширение = "html";
					ИмяБезРасширения = Вложение["name"];
					
					Если Не ЗначениеЗаполнено(ИмяБезРасширения) Тогда
						
						Если Вложение.type_id = "cover_letter" Тогда
							ИмяБезРасширения = НСтр("ru = 'Сопроводительное письмо'");
						ИначеЕсли Вложение.type_id = "resume" Тогда
							ИмяБезРасширения = НСтр("ru = 'Резюме'");
						Иначе
							ИмяБезРасширения = НСтр("ru = 'Заметка'");
						КонецЕсли;
						
					КонецЕсли;
						
					ДокументСтрокой = "";
					Если ТипЗнч(Вложение.text) = Тип("Структура") Тогда
						
						ЗаписьДокумента = ЗначениеСвойства;
						Если ТипЗнч(ЗаписьДокумента) = Тип("СписокXDTO") Тогда
							ЗаписьДокумента = ЗаписьДокумента.ПолучитьXDTO(ИндексЗаписи);
						КонецЕсли;
						ДокументСтрокой = ЗаписьДокумента["text"].Последовательность().ПолучитьТекст(0);
						
					Иначе
						ДокументСтрокой = Вложение.text;
					КонецЕсли;
					
					Если Не ПустаяСтрока(ДокументСтрокой) Тогда
						
						ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(ДокументСтрокой, "windows-1251");
						АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
						
						ПараметрыФайла = Новый Структура("Автор, ВремяИзмененияУниверсальное");
						ПараметрыФайла.Вставить("ВладелецФайлов", Кандидат);
						ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
						ПараметрыФайла.Вставить("РасширениеБезТочки", Расширение);
						
						РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВременногоХранилищаФайла);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ИндексЗаписи = ИндексЗаписи + 1;
				
			КонецЦикла;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСостоянияВакансии(ОбъектСсылка, ДанныеДляЭкспорта)
	
	НаборЗаписей = РегистрыСведений.СостоянияВакансий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Вакансия.Установить(ОбъектСсылка);
	НаборЗаписей.Прочитать();
	
	Если ЗначениеЗаполнено(ДанныеДляЭкспорта.start_date) Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ДатаСтрокойВДату(ДанныеДляЭкспорта.start_date);
		НоваяЗапись.Вакансия = ОбъектСсылка;
		НоваяЗапись.Состояние = Перечисления.СостоянияВакансии.Открыта;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка.Состояние)
		И (ОбъектСсылка.Состояние <> Перечисления.СостоянияВакансии.Открыта 
			Или НаборЗаписей.Количество() = 0) Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ДатаСтрокойВДату(ДанныеДляЭкспорта.state_date);
		НоваяЗапись.Вакансия = ОбъектСсылка;
		НоваяЗапись.Состояние = ОбъектСсылка.Состояние;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляЭкспорта.close_date) 
		И ОбъектСсылка.Состояние <> Перечисления.СостоянияВакансии.Закрыта Тогда
		
		ДатаЗакрытия = ДатаСтрокойВДату(ДанныеДляЭкспорта.close_date);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ДатаЗакрытия;
		НоваяЗапись.Вакансия = ОбъектСсылка;
		НоваяЗапись.Состояние = Перечисления.СостоянияВакансии.Закрыта;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаписатьПубликацииВакансии(ОбъектСсылка, ДанныеДляЭкспорта)
	
	ДанныеОПубликациях = Новый Массив;
	Если Не ЗначениеЗаполнено(ДанныеДляЭкспорта) 
		Или Не ДанныеДляЭкспорта.Свойство("target_sites", ДанныеОПубликациях) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ПубликацияВакансий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Вакансия.Установить(ОбъектСсылка);
	НаборЗаписей.Прочитать();
	
	ЗаписиПубликаций = ЗначениеВМассиве(ДанныеОПубликациях["target_site"]);
	
	Для Каждого ЗаписьПубликации Из ЗаписиПубликаций Цикл
		
		Публикация = СтруктураПубликацииEStaff();
		ЗаполнитьЗначенияСвойств(Публикация, ЗаписьПубликации);
		
		Если ЗначениеЗаполнено(Публикация.eid)
			И (Публикация.site_id = "hh"
			Или Публикация.site_id = "superjob"
			Или Публикация.site_id = "rabota") Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Вакансия = ОбъектСсылка;
			НоваяЗапись.МестоПубликации = СайтПубликацииПоИдентификатору(Публикация.site_id);
			НоваяЗапись.ИдентификаторВакансии = Публикация.eid;
			
			РегистрыСведений.ПубликацияВакансий.ЗаполнитьАдресПубликацииЗаписи(НоваяЗапись);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция СобытиеЖурнала()
	
	Возврат НСтр("ru = 'Перенос данных из E-Staff Рекрутер.Запись объектов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурнал(ПредставлениеОшибки, Отказ = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурнала(), 
		УровеньЖурналаРегистрации.Ошибка, , , ПредставлениеОшибки);
		
	Отказ = Истина;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуЗаписиЭлементаСправочникаВЖурнал(ДанныеОбъекта, Отказ)
	
	МетаданныеОбъекта = ДанныеОбъекта.ОбъектСсылка.Метаданные();
	
	Представление = МетаданныеОбъекта.Синоним;
	МенеджерОбъекта = Справочники[МетаданныеОбъекта.Имя];
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не найден элемент ""%1"" справочника ""%2""'"), ДанныеОбъекта.Наименование, Представление);
	
	ЗаписатьОшибкуВЖурнал(ТекстОшибки, Отказ);
	
КонецПроцедуры

#Область ЗаписьСправочников

Процедура ЗаписатьЭлементСправочника(ДанныеОбъекта, ИмяТаблицы, Отказ)
	
	ЭлементСправочника = НовыйСправочникОбъект(ДанныеОбъекта, ИмяТаблицы);
	ЭлементСправочника.Наименование = ДанныеОбъекта.Наименование;
	
	ДанныеОбъекта.ОбъектСсылка = ЗаписатьСправочникОбъект(ЭлементСправочника);
	
КонецПроцедуры

Процедура ЗаписатьОрганизацию(ДанныеОбъекта, ИмяТаблицы, Отказ)
	
	Объект = ДанныеОбъекта.Объект;
	Организация = НовыйСправочникОбъект(ДанныеОбъекта, ИмяТаблицы);
	
	Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Организация.Наименование = ДанныеОбъекта.Наименование;
	Организация.НаименованиеСокращенное = Объект.alt_name;
	Организация.НаименованиеПолное = Объект.full_name;
	Организация.ИНН = Объект.inn;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
	
	Если ЗначениеЗаполнено(Объект.address) Тогда
		
		СтрокаКИ = КонтактнаяИнформация.Добавить();
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Объект.address, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		СтрокаКИ.Представление = Объект.address;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.legal_address) Тогда
		
		СтрокаКИ = КонтактнаяИнформация.Добавить();
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Объект.legal_address, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		СтрокаКИ.Представление = Объект.legal_address;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.phone) Тогда
		
		СтрокаКИ = КонтактнаяИнформация.Добавить();
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Объект.phone, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
		СтрокаКИ.Представление = Объект.phone;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.email) Тогда
		
		СтрокаКИ = КонтактнаяИнформация.Добавить();
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Объект.email, Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
		СтрокаКИ.Представление = Объект.email;
		
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(Организация, КонтактнаяИнформация);
	
	ДанныеОбъекта.ОбъектСсылка = ЗаписатьСправочникОбъект(Организация);
	
КонецПроцедуры

Процедура ЗаписатьПодразделение(ДанныеОбъекта, ИмяТаблицы, ОрганизацияПоУмолчанию, Отказ)
	
	Объект = ДанныеОбъекта.Объект;
	Подразделение = НовыйСправочникОбъект(ДанныеОбъекта, ИмяТаблицы);
	
	ИдентификаторРодителя = ДанныеОбъекта.ИдентификаторРодителя;
	ИдентификаторВладельца = Объект.org_id;
	
	Если ЗначениеЗаполнено(ИдентификаторРодителя) Тогда
		Подразделение.Родитель = ОбъектПоПолномуИдентификатору(ИдентификаторРодителя);
	КонецЕсли;
	
	Организация = Неопределено;
	Если ЗначениеЗаполнено(ИдентификаторВладельца) Тогда
		Организация = ОбъектПоИдентификатору(КлючОрганизации(), ИдентификаторВладельца);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ?(ЗначениеЗаполнено(ОрганизацияПоУмолчанию), ОрганизацияПоУмолчанию, ОрганизацияПоУмолчанию());
	КонецЕсли;
	
	Подразделение.Владелец = Организация;
	Подразделение.Наименование = ДанныеОбъекта.Наименование;
	Подразделение.УстановитьНовыйКод();
	
	Если ЗначениеЗаполнено(Объект.start_date) Тогда
		Подразделение.Сформировано = Истина;
		Подразделение.ДатаСоздания = ДатаСтрокойВДату(Объект.start_date);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.end_date) Тогда
		Подразделение.Расформировано = Истина;
		Подразделение.ДатаРасформирования = ДатаСтрокойВДату(Объект.end_date);
	КонецЕсли;
	
	ДанныеОбъекта.ОбъектСсылка = ЗаписатьСправочникОбъект(Подразделение);
	
КонецПроцедуры

Процедура ЗаписатьПозицию(ДанныеОбъекта, ИмяТаблицы, Отказ)
	
	Объект = ДанныеОбъекта.Объект;
	Позиция = НовыйСправочникОбъект(ДанныеОбъекта, ИмяТаблицы);
	
	ИдентификаторПодразделения = Объект.division_id;
	Если ЗначениеЗаполнено(ИдентификаторПодразделения) Тогда
		Позиция.Подразделение = ОбъектПоИдентификатору(КлючПодразделения(), ИдентификаторПодразделения);
	КонецЕсли;
	
	Позиция.Наименование = ДанныеОбъекта.Наименование;
	Позиция.Владелец = Позиция.Подразделение.Владелец;
	Позиция.КоличествоСтавок = 1;
	
	Если ЗначениеЗаполнено(Объект.start_date) Тогда
		Позиция.Утверждена = Истина;
		Позиция.ДатаУтверждения = ДатаСтрокойВДату(Объект.start_date);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.end_date) Тогда
		Позиция.Закрыта = Истина;
		Позиция.ДатаЗакрытия = ДатаСтрокойВДату(Объект.end_date);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Позиция.Должность) Тогда
		
		Должность = Справочники.Должности.НайтиПоНаименованию(Позиция.Наименование);
		Если Не ЗначениеЗаполнено(Должность) Тогда
			
			Должность = Справочники.Должности.СоздатьЭлемент();
			
			Должность.Наименование = Позиция.Наименование;
			Должность.ВведенаВШтатноеРасписание = Позиция.Утверждена;
			Должность.ДатаВвода = Позиция.ДатаУтверждения;
			Должность.ИсключенаИзШтатногоРасписания = Позиция.Закрыта;
			Должность.ДатаИсключения = Позиция.ДатаЗакрытия;
			
			Должность.Записать();
			
		КонецЕсли;
		
		Позиция.Должность = Должность.Ссылка;
		
	КонецЕсли;
	
	ДанныеОбъекта.ОбъектСсылка = ЗаписатьСправочникОбъект(Позиция);
	
КонецПроцедуры

Процедура ЗаписатьВакансию(ДанныеОбъекта, ИмяТаблицы, Отказ)
	
	Объект = ДанныеОбъекта.Объект;
	Вакансия = НовыйСправочникОбъект(ДанныеОбъекта, ИмяТаблицы);
	ЗаписьНового = Вакансия.ЭтоНовый();
	
	ИдентификаторПозиции = Объект.position_id;
	Если ЗначениеЗаполнено(ИдентификаторПозиции) Тогда
		
		Вакансия.Позиция = ОбъектПоИдентификатору(КлючПозиции(), ИдентификаторПозиции);
		Если ЗначениеЗаполнено(Вакансия.Позиция) Тогда
			
			ДанныеПозиции = Справочники.ШтатноеРасписание.ДанныеПозицииШтатногоРасписания(Вакансия.Позиция);
			
			Вакансия.Подразделение = ДанныеПозиции.МестоВСтруктуреПредприятия;
			Вакансия.Должность = ДанныеПозиции.Должность;
			Вакансия.НазначениеНабора = Перечисления.НазначениеНабораПерсоналаНаВакансию.ПозицияШтатногоРасписания;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Вакансия.ДатаОткрытия = ДатаСтрокойВДату(Объект.start_date);
	
	ИдентификаторПричиныОткрытия = Объект.reason_id;
	Если ЗначениеЗаполнено(ИдентификаторПричиныОткрытия) Тогда
		Вакансия.ПричинаОткрытия = ОбъектПоИдентификатору(КлючПричиныОткрытия(), ИдентификаторПричиныОткрытия);
	КонецЕсли;
	
	ИдентификаторПользователя = Объект.user_id;
	Если ЗначениеЗаполнено(ИдентификаторПользователя) Тогда
		Вакансия.Ответственный = ОбъектПоИдентификатору(КлючПользователя(), ИдентификаторПользователя);
	КонецЕсли;
	
	Вакансия.СпособНабора = СпособНабораПоИдентификатору(Объект.recruit_type_id);
	Вакансия.Сложность = СложностьВакансииПоИдентификатору(Объект.difficulty_level_id);
	Вакансия.Приоритет = ПриоритетВакансииПоИдентификатору(Объект.priority_id);
	Вакансия.ПредполагаемыйДоход = ПредполагаемыйДоходПоВакансии(Объект, Вакансия.ДатаОткрытия);
	Вакансия.ПланируемаяДатаЗакрытия = ДатаСтрокойВДату(Объект.req_close_date);
	Вакансия.Состояние = СостояниеВакансииПоИдентификатору(Объект.state_id);
	Вакансия.ДатаСостояния = ДатаСтрокойВДату(Объект.state_date);
	Вакансия.Заявитель = ЗаявительПоВакансии(Объект);
	Вакансия.Примечание = Объект.comment;
	
	Если ЗначениеЗаполнено(Объект.inet_data) Тогда
		
		СтруктураОписания = Новый Структура("comment_req,comment_duty,comment_cond");
		ЗаполнитьЗначенияСвойств(СтруктураОписания, Объект.inet_data);
		
		Вакансия.Требования = СтруктураОписания.comment_req;
		Вакансия.Обязанности = СтруктураОписания.comment_duty;
		Вакансия.Условия = СтруктураОписания.comment_cond;
		
	КонецЕсли;
	
	Вакансия.УстановитьНовыйКод();
	
	Если Не ЗначениеЗаполнено(Вакансия.Должность) Тогда
		Вакансия.УточнениеНаименования = Объект.name;
	КонецЕсли;
	ПодборПерсоналаКлиентСервер.ЗаполнитьНаименованиеВакансии(Вакансия);
	
	ДанныеОбъекта.ОбъектСсылка = ЗаписатьСправочникОбъект(Вакансия);
	
	ЗаписатьСостоянияВакансии(ДанныеОбъекта.ОбъектСсылка, Объект);
	ЗаписатьПубликацииВакансии(ДанныеОбъекта.ОбъектСсылка, Объект.inet_data);
	
КонецПроцедуры

Процедура ЗаписатьФизическоеЛицо(ДанныеОбъекта, ИмяТаблицы, Отказ)
	
	Объект = ДанныеОбъекта.Объект;
	
	ФИО = Новый Структура("Фамилия, Имя, Отчество", Объект.lastname, Объект.firstname, Объект.middlename);
	ДанныеФизическогоЛица = Новый Структура();
	
	ДанныеФизическогоЛица.Вставить("ДатаРождения", ДатаСтрокойВДату(Объект.birth_date));
	ДанныеФизическогоЛица.Вставить("Пол", ПолФизическогоЛицаПоИдентификатору(Объект.gender_id));
	ДанныеФизическогоЛица.Вставить("ДатаРегистрации", ДатаСтрокойВДату(Объект.creation_date));
	
	ИдентификаторГруппыДоступа = Объект.group_id;
	Если ЗначениеЗаполнено(ИдентификаторГруппыДоступа) Тогда
		ДанныеФизическогоЛица.Вставить("ГруппаДоступа", ОбъектПоИдентификатору(КлючГруппыДоступа(), ИдентификаторГруппыДоступа));
	КонецЕсли;
	
	КонтактнаяИнформация = Новый Массив();
	
	Если ЗначениеЗаполнено(Объект.address) Тогда
		
		ДанныеКИ = СтруктураКИ();
		ДанныеКИ.ВидИнформации = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
		ДанныеКИ.ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ДанныеКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Объект.address, Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
		КонтактнаяИнформация.Добавить(ДанныеКИ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.work_phone) Тогда
		
		ДанныеКИ = СтруктураКИ();
		ДанныеКИ.ВидИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
		ДанныеКИ.ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ДанныеКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Объект.work_phone, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
		КонтактнаяИнформация.Добавить(ДанныеКИ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.mobile_phone) Тогда
		
		ДанныеКИ = СтруктураКИ();
		ДанныеКИ.ВидИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
		ДанныеКИ.ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ДанныеКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Объект.mobile_phone, Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
		КонтактнаяИнформация.Добавить(ДанныеКИ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.home_phone) Тогда
		
		ДанныеКИ = СтруктураКИ();
		ДанныеКИ.ВидИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
		ДанныеКИ.ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ДанныеКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Объект.home_phone, Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
		КонтактнаяИнформация.Добавить(ДанныеКИ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.email) Тогда
		
		ДанныеКИ = СтруктураКИ();
		ДанныеКИ.ВидИнформации = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
		ДанныеКИ.ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ДанныеКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Объект.email, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
		КонтактнаяИнформация.Добавить(ДанныеКИ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.email2) Тогда
		
		ДанныеКИ = СтруктураКИ();
		ДанныеКИ.ВидИнформации = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
		ДанныеКИ.ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ДанныеКИ.ЗначенияПолей =  УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Объект.email2, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
		КонтактнаяИнформация.Добавить(ДанныеКИ);
		
	КонецЕсли;
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		ДанныеФизическогоЛица.Вставить("КонтактнаяИнформация", КонтактнаяИнформация);
	КонецЕсли;
	
	ФизическоеЛицо = КадровыйУчет.НовоеФизическоеЛицо(ФИО, ДанныеФизическогоЛица);
	
	ДанныеОбъекта.ОбъектСсылка = ФизическоеЛицо.Ссылка;
	
	ЗаписатьДанныеОБраке(ДанныеОбъекта.ОбъектСсылка, Объект.marital_status_id);
	ЗаписатьДанныеОбОбразовании(ДанныеОбъекта.ОбъектСсылка, Объект);
	
КонецПроцедуры

Процедура ЗаписатьКандидата(ДанныеОбъекта, ИмяТаблицы, Отказ)
	
	Объект = ДанныеОбъекта.Объект;
	Идентификатор = ДанныеОбъекта.Идентификатор;
	ВнутреннийИдентификатор = ДанныеОбъекта.ВнутреннийИдентификатор;
	
	Кандидат = НовыйСправочникОбъект(ДанныеОбъекта, ИмяТаблицы);
	Кандидат.УстановитьНовыйКод();
	
	ЧастиИдентификатора = ЧастиИдентификатораКандидата(Идентификатор);
	Если ЗначениеЗаполнено(Объект.person_id) Тогда 
		ИдентификаторФизическогоЛица = ИдентификаторПолный(КлючФизическогоЛица(), Объект.person_id);
	Иначе
		ИдентификаторФизическогоЛица = ЧастиИдентификатора.ИдентификаторФизическогоЛица;
	КонецЕсли;
	ИдентификаторВакансии = ЧастиИдентификатора.ИдентификаторВакансии;
	
	Если ЗначениеЗаполнено(ИдентификаторВакансии) Тогда
		
		Кандидат.Вакансия = СсылкаПоПолномуИдентификатору(ИдентификаторВакансии, "Вакансии");
		
	КонецЕсли;
	
	Кандидат.ФизическоеЛицо = ОбъектПоПолномуИдентификатору(ИдентификаторФизическогоЛица);
	Кандидат.ИсточникИнформации = ОбъектПоИдентификатору(КлючИсточникаИнформации(), Объект.source_id);
	Кандидат.ДатаРегистрации = ДатаСтрокойВДату(?(ЗначениеЗаполнено(Объект.start_date), Объект.start_date, Объект.creation_date));
	
	Если ЗначениеЗаполнено(Кандидат.Вакансия) Тогда
		
		ДанныеВакансии = Справочники.Вакансии.ДанныеВакансии(Кандидат.Вакансия);
		ДанныеПозиции = Справочники.ШтатноеРасписание.ДанныеПозицииШтатногоРасписания(ДанныеВакансии.Позиция);
		
		Кандидат.Позиция = ДанныеВакансии.Позиция;
		Кандидат.Подразделение = ДанныеПозиции.МестоВСтруктуреПредприятия;
		
	КонецЕсли;
	
	Кандидат.Наименование = НаименованиеКандидата(Объект);
	Кандидат.ОжидаемыйДоход = ОжидаемыйДоходКандидата(Объект, Кандидат.ДатаРегистрации);
	
	ИдентификаторПользователя = Объект.user_id;
	Если ЗначениеЗаполнено(ИдентификаторПользователя) Тогда
		Кандидат.Ответственный = ОбъектПоИдентификатору(КлючПользователя(), ИдентификаторПользователя);
	КонецЕсли;
	
	ЗаполнитьРезюмеКандидата(Кандидат, Объект);
	ЗаполнитьРейтингКандидата(Кандидат, Объект);
	ЗаполнитьРешениеПоКандидату(Кандидат, Объект);
	
	ДанныеОбъекта.ОбъектСсылка = ЗаписатьСправочникОбъект(Кандидат);
	ЭтоОсновнойКандидат = ЭтоОсновнойКандидат(Объект, ИдентификаторВакансии);
	
	Если ЭтоОсновнойКандидат Тогда
		ЗаписатьКомментарийКандидата(Кандидат, Объект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Кандидат.ФизическоеЛицо) Тогда
		
		ЗаписатьДанныеОГражданстве(Кандидат.ФизическоеЛицо, Объект.citizenship_id);
		ЗаписатьДанныеОЗнанияхЯзыков(Кандидат.ФизическоеЛицо, Объект);
		ЗаписатьДанныеОТрудовойДеятельности(Кандидат.ФизическоеЛицо, Объект);
		ЗаписатьВложенияКандидата(Кандидат.ФизическоеЛицо, ДанныеОбъекта, ЭтоОсновнойКандидат);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьКлассификаторов

Процедура ЗаписатьПричинуОткрытияВакансии(ДанныеОбъекта, ИмяТаблицы, Отказ)
	
	Объект = ДанныеОбъекта.Объект;
	ПричинаОткрытия = НовыйСправочникОбъект(ДанныеОбъекта, ИмяТаблицы);
	
	ПричинаОткрытия.Наименование = Объект.name;
	ПричинаОткрытия.РеквизитДопУпорядочивания = СтрокаВЧисло(Объект.order_index);
	
	ДанныеОбъекта.ОбъектСсылка = ЗаписатьСправочникОбъект(ПричинаОткрытия);
	
КонецПроцедуры

Процедура ЗаписатьИсточникИнформации(ДанныеОбъекта, ИмяТаблицы, Отказ)
	
	Объект = ДанныеОбъекта.Объект;
	ИсточникИнформации = НовыйСправочникОбъект(ДанныеОбъекта, ИмяТаблицы);
	
	ИсточникИнформации.Наименование = Объект.name;
	
	ДанныеОбъекта.ОбъектСсылка = ЗаписатьСправочникОбъект(ИсточникИнформации);
	
КонецПроцедуры

Процедура ЗаписатьВалюту(ДанныеОбъекта, ИмяТаблицы, Отказ)
	
	ВнутреннийИдентификатор = ДанныеОбъекта.ВнутреннийИдентификатор;
	
	КодВалюты = "";
	КлассификаторXML = Обработки.ЗагрузкаКурсовВалют.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Для Каждого ЗаписьОКВ Из КлассификаторТаблица Цикл
		
		Если ЗаписьОКВ.CodeSymbol = ВнутреннийИдентификатор Тогда
			КодВалюты = ЗаписьОКВ.Code;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КодВалюты) Тогда
		ДанныеОбъекта.ОбъектСсылка = РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(ЗначениеВМассиве(КодВалюты));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ОбъектСсылка) Тогда
		ЗаписатьОшибкуЗаписиЭлементаСправочникаВЖурнал(ДанныеОбъекта, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЯзык(ДанныеОбъекта, ИмяТаблицы, Отказ)
	
	КлассификаторЯзыков = Новый ТаблицаЗначений;
	ДанныеОбъекта.ОбъектСсылка = КадровыйУчетРасширенный.НовыйЯзык(ДанныеОбъекта.Наименование, КлассификаторЯзыков);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ОбъектСсылка) Тогда
		ЗаписатьОшибкуЗаписиЭлементаСправочникаВЖурнал(ДанныеОбъекта, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСтрану(ДанныеОбъекта, ИмяТаблицы, Отказ)
	
	ДанныеОбъекта.ОбъектСсылка = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(ДанныеОбъекта.Наименование);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ОбъектСсылка) Тогда
		ЗаписатьОшибкуЗаписиЭлементаСправочникаВЖурнал(ДанныеОбъекта, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ОтфильтроватьВакансии(ДанныеОбъектов, ДатаНачалаПереноса)
	
	Если ДатаНачалаПереноса = '00010101' Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъектовОтфильтрованная = ДанныеОбъектов.СкопироватьКолонки();
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		Объект = ДанныеОбъекта.Объект;
		Если ДатаСтрокойВДату(Объект.start_date) < ДатаНачалаПереноса Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ДанныеОбъектовОтфильтрованная.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеОбъекта);
		
	КонецЦикла;
	
	ДанныеОбъектов = ДанныеОбъектовОтфильтрованная;
	
КонецПроцедуры

Процедура ОтфильтроватьФизическихЛиц(ДанныеОбъектов)
	
	ДанныеОбъектовОтфильтрованная = ДанныеОбъектов.СкопироватьКолонки();
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		Объект = ДанныеОбъекта.Объект;
		Если Объект.is_candidate <> "1" И Не ЗначениеЗаполнено(Объект.candidate_id) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ДанныеОбъектовОтфильтрованная.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеОбъекта);
		
	КонецЦикла;
	
	ДанныеОбъектов = ДанныеОбъектовОтфильтрованная;
	
КонецПроцедуры

Процедура ОтфильтроватьКандидатов(ДанныеОбъектов, ОписанияИОбъекты, ДатаНачалаПереноса)
	
	Если ДатаНачалаПереноса = '00010101' Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеИОбъектыПоКлючу = ОписанияИОбъекты.Получить(КлючВакансии());
	ДанныеОбъектовВакансий = ОписаниеИОбъектыПоКлючу.Объекты;
	ИдентификаторыВакансий = ВстречающиесяИдентификаторы(ДанныеОбъектовВакансий);
	
	ДанныеОбъектовОтфильтрованная = ДанныеОбъектов.СкопироватьКолонки();
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		Объект = ДанныеОбъекта.Объект;
		
		Если Не ЗначениеЗаполнено(Объект.spots) Тогда
			
			Если ДатаСтрокойВДату(Объект.creation_date) < ДатаНачалаПереноса Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = ДанныеОбъектовОтфильтрованная.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеОбъекта);
			
		Иначе
			
			СведенияОКандидатеНаВакансии = ЗначениеВМассиве(ДанныеОбъекта.Объект.spots["spot"]);
			СведенияОтобранныеПоВакансиям = Новый Массив;
			
			Для Каждого СтрокаСведений Из СведенияОКандидатеНаВакансии Цикл
				
				ДатаОтбораНаВакансию = Неопределено;
				Если СтрокаСведений.Свойство("start_date", ДатаОтбораНаВакансию) И ЗначениеЗаполнено(ДатаОтбораНаВакансию) Тогда
					
					Если ДатаСтрокойВДату(ДатаОтбораНаВакансию) < ДатаНачалаПереноса Тогда
						Продолжить;
					КонецЕсли;
					
					СведенияОтобранныеПоВакансиям.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаСведений));
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СведенияОтобранныеПоВакансиям.Количество() > 0 Тогда
				
				СтрокаТаблицы = ДанныеОбъектовОтфильтрованная.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеОбъекта);
				
				НовыйОбъект = Новый Структура(СтрокаТаблицы.Объект);
				НовыйОбъект.spots = Новый Структура(СтрокаТаблицы.Объект.spots);
				НовыйОбъект.spots["spot"] = СведенияОтобранныеПоВакансиям;
				
				СтрокаТаблицы.Объект = ОбщегоНазначения.ФиксированныеДанные(НовыйОбъект);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеОбъектов = ДанныеОбъектовОтфильтрованная;
	ИдентификаторыФизическихЛиц = Новый Массив;
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.Объект.person_id) Тогда
			ИдентификаторФизическогоЛица = ДанныеОбъекта.Объект.person_id;
		Иначе
			ИдентификаторФизическогоЛица = ДанныеОбъекта.ВнутреннийИдентификатор;
		КонецЕсли;
		ИдентификаторыФизическихЛиц.Добавить(ИдентификаторФизическогоЛица);
		
	КонецЦикла;
	
	// Отфильтровываем физических лиц с учетом оставшихся кандидатов.
	ОписаниеИОбъектыПоКлючу = ОписанияИОбъекты.Получить(КлючФизическогоЛица());
	ДанныеОбъектовФизическихЛиц = ОписаниеИОбъектыПоКлючу.Объекты;
	
	ДанныеОбъектовФизическихЛицОтфильтрованная = ДанныеОбъектовФизическихЛиц.СкопироватьКолонки();
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектовФизическихЛиц Цикл
		
		ИдентификаторФизическогоЛица = ДанныеОбъекта.ВнутреннийИдентификатор;
		
		Если ИдентификаторыФизическихЛиц.Найти(ИдентификаторФизическогоЛица) <> Неопределено Тогда
			
			СтрокаТаблицы = ДанныеОбъектовФизическихЛицОтфильтрованная.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеОбъекта);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеИОбъектыПоКлючу.Объекты = ДанныеОбъектовФизическихЛицОтфильтрованная;
	ОписанияИОбъекты.Вставить(КлючФизическогоЛица(), ОписаниеИОбъектыПоКлючу);
	
КонецПроцедуры

Процедура ОтфильтроватьОрганизации(ДанныеОбъектов)
	
	ДанныеОбъектовОтфильтрованная = ДанныеОбъектов.СкопироватьКолонки();
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		Объект = ДанныеОбъекта.Объект;
		Если Объект.is_own_org <> "1" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ДанныеОбъектовОтфильтрованная.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеОбъекта);
		
	КонецЦикла;
	
	ДанныеОбъектов = ДанныеОбъектовОтфильтрованная;
	
КонецПроцедуры

Процедура ОтфильтроватьПодразделения(ДанныеОбъектов)
	
	ДанныеОбъектовОтфильтрованная = ДанныеОбъектов.СкопироватьКолонки();
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		Объект = ДанныеОбъекта.Объект;
		Если Объект.is_org = "1" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ДанныеОбъектовОтфильтрованная.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеОбъекта);
		
	КонецЦикла;
	
	ДанныеОбъектов = ДанныеОбъектовОтфильтрованная;
	
КонецПроцедуры

Процедура ОтфильтроватьЯзыки(ДанныеОбъектов)
	
	ДанныеОбъектовОтфильтрованная = ДанныеОбъектов.СкопироватьКолонки();
	ИдентификаторРодителя = ИдентификаторПолный(КлючЯзыка(), "language");
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		Если ДанныеОбъекта.ИдентификаторРодителя <> ИдентификаторРодителя Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ДанныеОбъектовОтфильтрованная.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеОбъекта);
		
	КонецЦикла;
	
	ДанныеОбъектов = ДанныеОбъектовОтфильтрованная;
	
КонецПроцедуры

Процедура ДополнитьКандидатов(ДанныеОбъектов)
	
	ДанныеОбъектовДополненная = ДанныеОбъектов.СкопироватьКолонки();
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		Объект = ДанныеОбъекта.Объект;
		ИдентификаторФизическогоЛица = ИдентификаторПолный(КлючФизическогоЛица(), ДанныеОбъекта.ВнутреннийИдентификатор);
		
		Если Не ЗначениеЗаполнено(Объект.spots) Тогда
			Продолжить;
		КонецЕсли;
		
		СведенияОКандидатеНаВакансии = ЗначениеВМассиве(Объект.spots["spot"]);
		
		Для Каждого ЗаписьСведений Из СведенияОКандидатеНаВакансии Цикл
			
			ИдентификаторВакансии = ИдентификаторПолный(КлючВакансии(), ЗаписьСведений.vacancy_id);
			
			СтрокаТаблицы = ДанныеОбъектовДополненная.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеОбъекта);
			
			СтруктураСведений = СтруктураОтборНаВакансию();
			ЗаполнитьЗначенияСвойств(СтруктураСведений, ЗаписьСведений);
			
			НовыйОбъект = Новый Структура(СтрокаТаблицы.Объект);
			НовыйОбъект.start_date = СтруктураСведений.start_date;
			НовыйОбъект.state_id = СтруктураСведений.state_id;
			НовыйОбъект.state_date = СтруктураСведений.state_date;
			
			СтрокаТаблицы.Объект = ОбщегоНазначения.ФиксированныеДанные(НовыйОбъект);
			СтрокаТаблицы.Идентификатор = СтрШаблон("%1/%2", ИдентификаторФизическогоЛица, ИдентификаторВакансии);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеОбъектов = ДанныеОбъектовДополненная;
	
КонецПроцедуры

Процедура ДополнитьПользователей(ДанныеОбъектов, Описание, ОписанияИОбъекты)
	
	ИмяСвойства = "user_id";
	
	ОписаниеИОбъектыПоКлючу = ОписанияИОбъекты.Получить(КлючКандидата());
	ДанныеОбъектовИсточников = ОписаниеИОбъектыПоКлючу.Объекты;
	ИдентификаторыИзКандидатов = ВстречающиесяЗначения(ДанныеОбъектовИсточников, ИмяСвойства);
	
	Для Каждого ИдентификаторИзИсточников Из ИдентификаторыИзКандидатов Цикл
		
		НоваяСтрокаОбъекта = ДанныеОбъектов.Добавить();
		НоваяСтрокаОбъекта.ВнутреннийИдентификатор = ИдентификаторИзИсточников.Ключ;
		НоваяСтрокаОбъекта.Идентификатор = ИдентификаторПолный(Описание.Ключ, ИдентификаторИзИсточников.Ключ);
		НоваяСтрокаОбъекта.Наименование = НаименованиеПоИсточникам(ИдентификаторИзИсточников.Значение, НСтр("ru = 'Рекрутер кандидатов: %1'"));
		НоваяСтрокаОбъекта.Объект = ПростойОбъект(НоваяСтрокаОбъекта.ВнутреннийИдентификатор, НоваяСтрокаОбъекта.Наименование);
		
	КонецЦикла;
	
	ОписаниеИОбъектыПоКлючу = ОписанияИОбъекты.Получить(КлючВакансии());
	ДанныеОбъектовИсточников = ОписаниеИОбъектыПоКлючу.Объекты;
	ИдентификаторыИзВакансий = ВстречающиесяЗначения(ДанныеОбъектовИсточников, ИмяСвойства);
	
	НеУчтенныеИдентификаторы = Новый Соответствие;
	Для Каждого ИдентификаторИзИсточников Из ИдентификаторыИзВакансий Цикл
		Если ИдентификаторыИзКандидатов.Получить(ИдентификаторИзИсточников.Ключ) = Неопределено Тогда
			НеУчтенныеИдентификаторы.Вставить(ИдентификаторИзИсточников.Ключ, ИдентификаторИзИсточников.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИдентификаторИзИсточников Из НеУчтенныеИдентификаторы Цикл
		
		НоваяСтрокаОбъекта = ДанныеОбъектов.Добавить();
		НоваяСтрокаОбъекта.ВнутреннийИдентификатор = ИдентификаторИзИсточников.Ключ;
		НоваяСтрокаОбъекта.Идентификатор = ИдентификаторПолный(Описание.Ключ, ИдентификаторИзИсточников.Ключ);
		НоваяСтрокаОбъекта.Наименование = НаименованиеПоИсточникам(ИдентификаторИзИсточников.Значение, НСтр("ru = 'Ответственный по вакансиям: %1'"));
		НоваяСтрокаОбъекта.Объект = ПростойОбъект(НоваяСтрокаОбъекта.ВнутреннийИдентификатор, НоваяСтрокаОбъекта.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьГруппыДоступа(ДанныеОбъектов, Описание, ОписанияИОбъекты)
	
	ИмяСвойства = "group_id";
	
	ОписаниеИОбъектыПоКлючу = ОписанияИОбъекты.Получить(КлючФизическогоЛица());
	ДанныеОбъектовИсточников = ОписаниеИОбъектыПоКлючу.Объекты;
	ИдентификаторыИзКандидатов = ВстречающиесяЗначения(ДанныеОбъектовИсточников, ИмяСвойства);
	
	Для Каждого ИдентификаторИзИсточников Из ИдентификаторыИзКандидатов Цикл
		
		НоваяСтрокаОбъекта = ДанныеОбъектов.Добавить();
		НоваяСтрокаОбъекта.ВнутреннийИдентификатор = ИдентификаторИзИсточников.Ключ;
		НоваяСтрокаОбъекта.Идентификатор = ИдентификаторПолный(Описание.Ключ, ИдентификаторИзИсточников.Ключ);
		НоваяСтрокаОбъекта.Наименование = НаименованиеПоИсточникам(ИдентификаторИзИсточников.Значение, НСтр("ru = 'Группа лиц: %1'"));
		НоваяСтрокаОбъекта.Объект = ПростойОбъект(НоваяСтрокаОбъекта.ВнутреннийИдентификатор, НоваяСтрокаОбъекта.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НаименованиеПоИсточникам(Источники, ШаблонНаименования)
	
	НаименованиеПоИсточникам = "";
	
	КолВоИсточников = Источники.Количество();
	МинЧислоИсточников = Мин(КолВоИсточников, 2);
	ПредставлениеСписка = "";
	
	НомерИсточника = 1;
	Пока НомерИсточника <= МинЧислоИсточников Цикл
		
		Если НомерИсточника = 1 Тогда
			Шаблон = "%1%2";
		Иначе
			Шаблон = "%1, %2";
		КонецЕсли;
		
		ПредставлениеСписка = СтрШаблон(Шаблон, ПредставлениеСписка, Источники[НомерИсточника - 1]);
		НомерИсточника = НомерИсточника + 1;
		
	КонецЦикла;
	
	Если КолВоИсточников > 2 Тогда
		ПредставлениеСписка = СтрШаблон(НСтр("ru = '%1 и еще: %2'"), ПредставлениеСписка, КолВоИсточников - 2);
	КонецЕсли;
	
	Возврат СтрШаблон(ШаблонНаименования, ПредставлениеСписка);
	
КонецФункции

Функция ВстречающиесяЗначения(ДанныеОбъектов, ИмяСвойства)
	
	ВстречающиесяЗначения = Новый Соответствие;
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		Значение = ДанныеОбъекта.Объект[ИмяСвойства];
		Если Не ПустаяСтрока(Значение) Тогда
			
			НаименованияИсточников = ВстречающиесяЗначения.Получить(Значение);
			Если НаименованияИсточников = Неопределено Тогда
				НаименованияИсточников = Новый Массив;
			КонецЕсли;
			НаименованияИсточников.Добавить(ДанныеОбъекта.Наименование);
			
			ВстречающиесяЗначения.Вставить(Значение, НаименованияИсточников);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВстречающиесяЗначения;
	
КонецФункции

Функция ВстречающиесяИдентификаторы(ДанныеОбъектов)
	
	ВстречающиесяИдентификаторы = Новый Массив;
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		ВстречающиесяИдентификаторы.Добавить(ДанныеОбъекта.ВнутреннийИдентификатор);
	КонецЦикла;
	
	Возврат ВстречающиесяИдентификаторы;
	
КонецФункции

Функция ПростойОбъект(Идентификатор, Наименование)
	
	Возврат Новый Структура("id, name", Идентификатор, Наименование);
	
КонецФункции

Функция ОбъектПоПолномуИдентификатору(Идентификатор)
	
	Возврат РегистрыСведений.ИдентификаторыEStaff.ОбъектПоИдентификатору(Идентификатор);
	
КонецФункции

Функция ОбъектПоИдентификатору(КлючОбъекта, Идентификатор)
	
	Возврат ОбъектПоПолномуИдентификатору(ИдентификаторПолный(КлючОбъекта, Идентификатор));
	
КонецФункции

Функция СсылкаПоПолномуИдентификатору(ИдентификаторОбъекта, ИмяТаблицы)
	
	ОбъектСсылка = ОбъектПоПолномуИдентификатору(ИдентификаторОбъекта);
	
	Если Не ЗначениеЗаполнено(ОбъектСсылка) Тогда
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник." + ИмяТаблицы);
		ОбъектСсылка = Менеджер.ПолучитьСсылку();
		
		ЗаписатьИдентификаторОбъекта(ОбъектСсылка, ИдентификаторОбъекта);
		
	КонецЕсли;
	
	Возврат ОбъектСсылка;
	
КонецФункции

Функция ДатаСтрокойВДату(Знач Значение)
	
	Если ЗначениеЗаполнено(Значение) И СтрДлина(Значение) > 12 Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	
	Результат = СтрЗаменить(Значение, "-", "");
	Результат = СтрЗаменить(Результат, " ", "");
	Результат = СтрЗаменить(Результат, Символы.НПП, "");
	
	Возврат ?(ЗначениеЗаполнено(Результат), Дата(Результат), Дата(1, 1, 1));
	
КонецФункции

Функция СтрокаВЧисло(Знач Значение)
	
	Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение);
	
КонецФункции

Функция СтрокаВМассивСлов(Знач Значение)
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Значение, "," + Символы.ПС);
	
КонецФункции

Функция ЗначениеВМассиве(Знач Значение)
	
	Если ТипЗнч(Значение) <> Тип("ФиксированныйМассив") 
		И ТипЗнч(Значение) <> Тип("Массив") Тогда
		Значение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ОрганизацияПоУмолчанию()
	
	НаименованиеОрганизации = НСтр("ru = 'Организация по умолчанию'");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", НаименованиеОрганизации);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Наименование = &Наименование";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	Иначе
		
		Организация = Справочники.Организации.СоздатьЭлемент();
		Организация.Наименование = НаименованиеОрганизации;
		Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		
		Возврат ЗаписатьСправочникОбъект(Организация);
		
	КонецЕсли;
	
КонецФункции

Функция ЭтоОсновнойКандидат(ДанныеДляЭкспорта, ИдентификаторТекущейВакансии)
	
	ЭтоОсновнойКандидат = Истина;
	
	Если ЗначениеЗаполнено(ДанныеДляЭкспорта.spots) Тогда
		
		СведенияОВакансиях = ЗначениеВМассиве(ДанныеДляЭкспорта.spots["spot"]);
		КолВо = СведенияОВакансиях.Количество();
		
		Если КолВо > 1 Тогда
			
			ИдентификаторВакансии = ИдентификаторПолный(КлючВакансии(), СведенияОВакансиях[КолВо - 1].vacancy_id);
			Если ИдентификаторВакансии <> ИдентификаторТекущейВакансии Тогда
				ЭтоОсновнойКандидат = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоОсновнойКандидат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
