
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормы();
	УстановитьОрганизациюПоУмолчанию();
	УстановитьПодсказкиВвода();
	СценарийЗагрузкиДанныхИзEStaff();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПорядковыйНомерПерехода(1);
	УстановитьДоступностьОрганизацииПоУмолчанию();
	
	Если Не ЗначениеЗаполнено(МесяцНачалаПереноса) Тогда
		МесяцНачалаПереноса = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "МесяцНачалаПереноса", "МесяцНачалаПереносаСтрокой");
	
	ОповещениеВопроса = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОповещениеВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере(ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогПрограммыEStaffНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КаталогСФайламиНачалоВыбора(ДанныеВыбора, Элемент.Имя, НСтр("ru = 'Выберите каталог программы E-Staff Рекрутер'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСДаннымиСправочниковНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КаталогСФайламиНачалоВыбора(ДанныеВыбора, Элемент.Имя, НСтр("ru = 'Выберите каталог c данными справочников'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьСтруктуруПредприятияПриИзменении(Элемент)
	
	УстановитьДоступностьОрганизацииПоУмолчанию();
	
КонецПроцедуры

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура МесяцНачалаПереносаСтрокойПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "МесяцНачалаПереноса", "МесяцНачалаПереносаСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаПереносаСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "МесяцНачалаПереноса", "МесяцНачалаПереносаСтрокой", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаПереносаСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "МесяцНачалаПереноса", "МесяцНачалаПереносаСтрокой", Направление);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаПереносаСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаПереносаСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если ПорядковыйНомерПерехода < 6 Тогда
		ПерейтиДалее();
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ПерейтиНазад();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиКаталогПрограммы(Команда)
	
	ВозможныеКаталоги  = ВозможныеКаталогиУстановкиПрограммы();
	
	Для Каждого КаталогУстановки Из ВозможныеКаталоги Цикл
		
		КаталогНаДиске = Новый Файл(КаталогУстановки);
		Если КаталогНаДиске.Существует() Тогда
			
			КаталогПрограммыEStaff = КаталогУстановки;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(КаталогПрограммыEStaff) Тогда
		
		ТекстСообщения = НСтр("ru = 'Каталог программы E-Staff Рекрутер не найден.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "КаталогПрограммыEStaff");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПоставляемаяЧасть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Закрыть();
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.Страницы.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	
	НастроитьКнопкиКоманднойПанели();
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			РезультатВычисления = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			РезультатВычисления = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределяемаяЧасть

#Область ПроцедурыИФункцииОбработки

#Область УправлениеФормой

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	УстановитьВидимостьКомандыПоискаКаталогаПрограммы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандыПоискаКаталогаПрограммы()
	
	ИскатьКаталогПрограммы = (ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент()
		Или ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент());
		
	Элементы.НайтиКаталогПрограммы.Видимость = ИскатьКаталогПрограммы;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗагрузкаВыполнена(Выполнена = Истина, БезОшибок = Истина)
	
	Если Выполнена И БезОшибок Тогда
		Элементы.ТекстЗагрузкаВыполнена.Заголовок = НСтр("ru = 'Данные загружены. Для продолжения работы с программой нажмите «Готово».'");
	ИначеЕсли Не Выполнена Тогда
		УстановитьТекстЗагрузкаЗавершенаСОшибкой();
	Иначе
		УстановитьТекстЗагрузкаВыполненаСОшибками();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗагрузкаЗавершенаСОшибкой()
	
	Элемент = Элементы.ТекстЗагрузкаВыполнена;
	
	ТекстНадписиНачало = НСтр("ru = 'При загрузке произошла ошибка (см.'") + " ";
	ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'Журнал регистрации'"), , ЦветаСтиля.ГиперссылкаЦвет, , "ОткрытьЖурналРегистрации");
	ТекстНадписиОкончание = НСтр("ru = '). Для завершения нажмите «Готово».'");
	
	ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ТекстНадписиОкончание);
	
	Элемент.Заголовок = ТекстНадписи;
	Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОткрытьЖурналРегистрации");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗагрузкаВыполненаСОшибками()
	
	Элемент = Элементы.ТекстЗагрузкаВыполнена;
	
	ТекстНадписиНачало = НСтр("ru = 'Данные загружены, но при загрузке произошли ошибки (см.'") + " ";
	ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'Журнал регистрации'"), , ЦветаСтиля.ГиперссылкаЦвет, , "ОткрытьЖурналРегистрации");
	ТекстНадписиОкончание = НСтр("ru = '). Для завершения нажмите «Готово».'");
	
	ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ТекстНадписиОкончание);
	
	Элемент.Заголовок = ТекстНадписи;
	Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОткрытьЖурналРегистрации");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьЖурналРегистрации(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьОрганизацииПоУмолчанию()
	
	Элементы.ОрганизацияПоУмолчаниюГруппа.Доступность = ОбновлятьСтруктуруПредприятия;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкиВвода()
	
	СисИнфо = Новый СистемнаяИнформация();
	Если (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86) Или (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
		Элементы.КаталогПрограммыEStaff.ПодсказкаВвода = "C:\Program Files\EStaff";
	КонецЕсли;
	
	ПримерИмениКаталогаСФайлами = "C:\Users\%UserName%\Documents\EStaff";
	Элементы.КаталогСДаннымиСправочников.ПодсказкаВвода = ПримерИмениКаталогаСФайлами;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкиКоманднойПанели()
	
	ЭтоНачальнаяСтраница = (Элементы.Страницы.ТекущаяСтраница = Элементы.Начало);
	ЭтоСтраницаЗагрузки = (Элементы.Страницы.ТекущаяСтраница = Элементы.ЗагрузкаДанных);
	ЭтоСтраницаЗавершения = (Элементы.Страницы.ТекущаяСтраница = Элементы.Окончание);
	
	Элементы.КнопкаОтмена.Видимость = Не ЭтоСтраницаЗавершения;
	Элементы.КнопкаДалее.Видимость = Не ЭтоСтраницаЗагрузки;
	Элементы.КнопкаНазад.Видимость = Не ЭтоНачальнаяСтраница И Не ЭтоСтраницаЗагрузки И Не ЭтоСтраницаЗавершения;
	
	Элементы.КнопкаДалее.Заголовок = ?(ЭтоСтраницаЗавершения, НСтр("ru = 'Готово'"), НСтр("ru = 'Далее >'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиДалее()
	
	ИзменитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНазад()
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		
		ТекстИсключения = НСтр("ru = 'Не подключено расширение работы с файлами. Дальнейшая работа не возможна.'");
		ПоказатьПредупреждение(, ТекстИсключения);
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайламиИКаталогами

&НаКлиенте
Функция ВозможныеКаталогиУстановкиПрограммы()
	
	Каталоги = Новый Массив;
	Каталоги.Добавить("C:\Program Files\EStaff");
	Каталоги.Добавить("C:\Program Files\EStaff_Server");
	Каталоги.Добавить("C:\Program Files (x86)\EStaff");
	Каталоги.Добавить("C:\Program Files (x86)\EStaff_Server");
	
	Возврат Каталоги;
	
КонецФункции

&НаКлиенте
Процедура КаталогСФайламиНачалоВыбора(ДанныеВыбора, ИмяКаталога, Заголовок)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Заголовок = Заголовок;
	
	Если Не ПустаяСтрока(ЭтотОбъект[ИмяКаталога]) Тогда
		ДиалогВыбора.Каталог = ЭтотОбъект[ИмяКаталога];
	КонецЕсли;
	
	Если ДиалогВыбора.Выбрать() Тогда
		ЭтотОбъект[ИмяКаталога] = ДиалогВыбора.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СценарийВыгрузкиЗаписан()
	
	СценарийВыгрузкиЗаписан = Ложь;
	КаталогСценариев = СтрШаблон("%1\data_rcr\obj\xml", КаталогПрограммыEStaff);
	
	КаталогНаДиске = Новый Файл(КаталогСценариев);
	Если КаталогНаДиске.Существует() И Не КаталогНаДиске.ПолучитьТолькоЧтение() Тогда
		
		ФайлСценариев = СтрШаблон("%1\export_scenarios.xml", КаталогСценариев);
		
		ФайлНаДиске = Новый Файл(ФайлСценариев);
		Если Не ФайлНаДиске.Существует() Тогда
			
			ТекстовыйДокумент = Новый ТекстовыйДокумент();
			ТекстовыйДокумент.УстановитьТекст(СодержимоеФайлаСценариев(КаталогСДаннымиСправочников));
			ТекстовыйДокумент.Записать(ФайлСценариев, "windows-1251");
			
		Иначе
			
			ТекстовыйДокумент = Новый ТекстовыйДокумент();
			ТекстовыйДокумент.Прочитать(ФайлСценариев,"windows-1251");
			ТекстФорматаXML = ТекстовыйДокумент.ПолучитьТекст();
			
			ТекстФайлаСценариев = ТекстФорматаXML;
			Если ФайлСценариевДополнен(ТекстФайлаСценариев, КаталогСДаннымиСправочников)
				И ТекстФайлаСценариев <> ТекстФорматаXML Тогда
				
				ТекстовыйДокумент.УстановитьТекст(ТекстФайлаСценариев);
				ТекстовыйДокумент.Записать(ФайлСценариев, "windows-1251");
				
			КонецЕсли;
			
		КонецЕсли;
		
		СценарийВыгрузкиЗаписан = Истина;
		
	КонецЕсли;
	
	Возврат СценарийВыгрузкиЗаписан;
	
КонецФункции

&НаСервере
Функция СодержимоеФайлаСценариев(КаталогФайлов)
	
	Возврат Обработки.ПереносДанныхEStaff.СодержимоеФайлаСценариев(КаталогФайлов);
	
КонецФункции

&НаСервере
Функция ФайлСценариевДополнен(ТекстФорматаXML, КаталогФайлов)
	
	Возврат Обработки.ПереносДанныхEStaff.ФайлСценариевДополнен(ТекстФорматаXML, КаталогФайлов);
	
КонецФункции

&НаКлиенте
Функция ФайлыВКаталогах()
	
	КаталогПоиска = КаталогСДаннымиСправочников;
	
	ФайлыВКаталогах = Новый Структура;
	ФайлыВКаталогах.Вставить("ФайлыВакансийНеНайдены", ПереносДанныхEStaffКлиент.ФайловОбъектовНет(КаталогПоиска, ПереносДанныхEStaffКлиентСервер.КлючВакансии()));
	ФайлыВКаталогах.Вставить("ФайлыКандидатовНеНайдены", ПереносДанныхEStaffКлиент.ФайловОбъектовНет(КаталогПоиска, ПереносДанныхEStaffКлиентСервер.КлючКандидата()));
	ФайлыВКаталогах.Вставить("ФайлыФизическихЛицНеНайдены", ПереносДанныхEStaffКлиент.ФайловОбъектовНет(КаталогПоиска, ПереносДанныхEStaffКлиентСервер.КлючФизическогоЛица()));
	ФайлыВКаталогах.Вставить("ФайлыОбщихДанныхНеНайдены", ПереносДанныхEStaffКлиент.ФайловОбъектовНет(КаталогПоиска, ПереносДанныхEStaffКлиентСервер.КлючСтраны()));
	
	Возврат ФайлыВКаталогах;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПодготовитьЗагружаемыеДанные()
	
	ОписанияОбъектов = ПереносДанныхEStaffКлиентСервер.ОписанияЗагружаемыхОбъектов();
	КаталогПоиска = КаталогСДаннымиСправочников;
	ИменаФайлов = Новый Массив;
	
	Для Каждого Описание Из ОписанияОбъектов Цикл
		
		Файлы = ПереносДанныхEStaffКлиент.ФайлыПоОписаниюОбъекта(Описание, КаталогПоиска);
		Если Файлы.Количество() > 0 Тогда
			
			ПомещаемыеФайлы = Новый Массив;
			ПомещенныеФайлы = Новый Массив;
			
			Для Каждого Файл Из Файлы Цикл
				
				Если ИменаФайлов.Найти(Файл.ИмяБезРасширения) = Неопределено Тогда
					ИменаФайлов.Добавить(Файл.ИмяБезРасширения);
					ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя));
				КонецЕсли;
			
			КонецЦикла;
			
			ФайлыПомещены = ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор);
			Если ФайлыПомещены Тогда
				Описание.ОписаниеФайлов = ПомещенныеФайлы;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПодготовитьОбъектыПоОписаниям(ОписанияОбъектов);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОбъектыПоОписаниям(ОписанияОбъектов)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИменаВременныхФайлов", ИменаВременныхФайлов);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("МесяцНачалаПереноса", МесяцНачалаПереноса);
	
	Результат = Обработки.ПереносДанныхEStaff.ПодготовитьОбъектыПоОписаниям(ОписанияОбъектов, ДополнительныеПараметры);
	
	КлючиОписанийОбъектов = Результат.КлючиОписаний;
	АдресОписанийИОбъектов = Результат.АдресОписанийИОбъектов;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьОбъектыОдногоТипа(ДополнительныеПараметры)
	
	КлючиОписаний = ДополнительныеПараметры.КлючиОписаний;
	
	Если КлючиОписаний.Количество() = 0 Тогда
		ПерейтиДалее();
		Возврат;
	КонецЕсли;
	
	Ключ = КлючиОписаний[0];
	КлючиОписаний.Удалить(0);
	
	ОткрыватьФормуСопоставления = Ложь;
	АдресТаблицыСоответствия = "";
	
	СопоставитьОбъектыНаСервере(Ключ, ОткрыватьФормуСопоставления, АдресТаблицыСоответствия);
	
	Если ОткрыватьФормуСопоставления Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОставшиесяКлючиОписаний", КлючиОписаний);
		ДополнительныеПараметры.Вставить("АдресТаблицыСоответствия", АдресТаблицыСоответствия);
		
		ПоказатьФормуСопоставления(Ключ, АдресОписанийИОбъектов, ДополнительныеПараметры);
		
	Иначе
		
		СопоставитьОбъектыОдногоТипа(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьОбъектыНаСервере(КлючОписания, ОткрыватьФормуСопоставления, АдресТаблицыСоответствия)
	
	ОписанияИОбъекты = ПолучитьИзВременногоХранилища(АдресОписанийИОбъектов);
	ОписаниеИОбъектыПоКлючу = ОписанияИОбъекты[КлючОписания];
	Описание = ОписаниеИОбъектыПоКлючу.Описание;
	
	ТаблицаСоответствия = Обработки.ПереносДанныхEStaff.ТаблицаСоответствияОбъектов(ОписаниеИОбъектыПоКлючу);
	
	ОткрыватьФормуСопоставления = Описание.СопоставляетсяПользователем;
	
	Если Не ОткрыватьФормуСопоставления Тогда
		Обработки.ПереносДанныхEStaff.СохранитьТаблицуСоответствий(ТаблицаСоответствия, АдресОписанийИОбъектов, КлючОписания);
	Иначе
		АдресТаблицыСоответствия = ПоместитьВоВременноеХранилище(ТаблицаСоответствия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуСопоставления(КлючОписания, АдресОписанийИОбъектов, ДополнительныеПараметры)
	
	СоздаватьНовые = Истина;
	
	Если Не ОбновлятьСтруктуруПредприятия 
		И (КлючОписания = ПереносДанныхEStaffКлиентСервер.КлючОрганизации() 
		Или КлючОписания = ПереносДанныхEStaffКлиентСервер.КлючПодразделения()
		Или КлючОписания = ПереносДанныхEStaffКлиентСервер.КлючПозиции()) Тогда
		СоздаватьНовые = Ложь;
	КонецЕсли;
	
	Если Не ОбновлятьФизическихЛиц 
		И КлючОписания = ПереносДанныхEStaffКлиентСервер.КлючФизическогоЛица() Тогда
		СоздаватьНовые = Ложь;
	КонецЕсли;
	
	Если КлючОписания = ПереносДанныхEStaffКлиентСервер.КлючПользователя() Тогда
		СоздаватьНовые = Ложь;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючОписания", КлючОписания);
	ПараметрыФормы.Вставить("АдресОписанийИОбъектов", АдресОписанийИОбъектов);
	ПараметрыФормы.Вставить("АдресТаблицыСоответствия", ДополнительныеПараметры.АдресТаблицыСоответствия);
	ПараметрыФормы.Вставить("СоздаватьНовые", СоздаватьНовые);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КлючиОписаний", ДополнительныеПараметры.ОставшиесяКлючиОписаний);
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеПоказаФормыСопоставления", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("Обработка.ПереносДанныхEStaff.Форма.СопоставлениеОбъектов", ПараметрыФормы, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПоказаФормыСопоставления(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Свойство("ВернутьсяВНачало") Тогда
		
		ПерейтиНазад();
		
	Иначе
		СопоставитьОбъектыОдногоТипа(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьСоответствиеОбъектам()
	
	Если ЗначениеЗаполнено(КлючиОписанийОбъектов) Тогда
		Ключи = Новый Массив(КлючиОписанийОбъектов);
		СопоставитьОбъектыОдногоТипа(Новый Структура("КлючиОписаний", Ключи));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОрганизациюПоУмолчанию()
	
	ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗапуститьНаСервере(Отказ)
	
	ПараметрыЗадания = Новый Структура;
	
	ПараметрыЗадания.Вставить("ОписанияИОбъекты", ПолучитьИзВременногоХранилища(АдресОписанийИОбъектов));
	ПараметрыЗадания.Вставить("ОрганизацияПоУмолчанию", ОрганизацияПоУмолчанию);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Запись объектов'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПереносДанныхEStaff.ЗаписатьСопоставленныеДанные",
		ПараметрыЗадания,
		ПараметрыВыполнения);
		
	Если Результат = Неопределено Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторЗадания     = Результат.ИдентификаторЗадания;
	АдресВременногоХранилища = Результат.АдресРезультата;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		// Фоновое задание аварийно отменилось.
		ЗаписатьОшибкуВЖурнал(НСтр("ru = 'Фоновое задание аварийно отменилось.'"));
		ПерейтиНазад();
		
	ИначеЕсли Результат.Статус = "Отменено" Тогда
		
		ЗаписатьОшибкуВЖурнал(Результат.ПодробноеПредставлениеОшибки);
		ПерейтиНазад();
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ЗаписатьОшибкуВЖурнал(Результат.ПодробноеПредставлениеОшибки);
		УстановитьТекстЗагрузкаВыполнена(Ложь);
		ПерейтиДалее();
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		Если ПолучитьИзВременногоХранилища(Результат.АдресРезультата).ПропущеноСОшибкой > 0 Тогда
			УстановитьТекстЗагрузкаВыполнена(Истина, Ложь);
		КонецЕсли;
		
		ПерейтиДалее();
		
	Иначе
		
		ПерейтиДалее();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Прогресс.Прогресс <> Неопределено Тогда
		СтруктураПрогресса = Прогресс.Прогресс;
		ТекстПрогресс = СтруктураПрогресса.Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере(Знач ИдентификаторОтменяемогоЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторОтменяемогоЗадания);
	Обработки.ПереносДанныхEStaff.УдалитьВременныеФайлы(ИменаВременныхФайлов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОшибкуВЖурнал(ПодробноеПредставлениеОшибки)
	
	Обработки.ПереносДанныхEStaff.ЗаписатьОшибкуВЖурнал(ПодробноеПредставлениеОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПереходов

&НаКлиенте
Функция Подключаемый_СценарийЭкспорта_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	СценарийЗаписан = СценарийВыгрузкиЗаписан();
	
	ПропуститьСтраницу = СценарийЗаписан;
	Элементы.ПредупреждениеЭкспортаДанныхГруппа.Видимость = СценарийЗаписан;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверкаПройдена_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если Не ЭтоПереходДалее Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ФайлыВКаталогах = ФайлыВКаталогах();
	
	Если ФайлыВКаталогах.ФайлыВакансийНеНайдены Тогда
		
		ТекстСообщения = НСтр("ru = 'Файлы с данными о вакансиях не найдены.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Если ФайлыВКаталогах.ФайлыФизическихЛицНеНайдены Тогда
		
		ТекстСообщения = НСтр("ru = 'Файлы с данными о физических лицах не найдены. Пример файла: person-0x5809E0E97CEB792F.xml
			|Убедитесь, что файлы выгружены и находятся в указанных каталогах.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		
	КонецЕсли;
	
	Если ФайлыВКаталогах.ФайлыКандидатовНеНайдены Тогда
		
		ТекстСообщения = НСтр("ru = 'Файлы с данными о кандидатах не найдены. Пример файла: candidate-0x5809E0E97CEB792F.xml
			|Убедитесь, что файлы выгружены и находятся в указанных каталогах.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		
	КонецЕсли;
	
	Если ФайлыВКаталогах.ФайлыОбщихДанныхНеНайдены Тогда
		
		ТекстСообщения = НСтр("ru = 'Файлы с данными общих справочников не найдены. Не все реквизиты вакансий и кандидатов будут заполнены.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверкаПройдена_ПриПереходеДалее(Отказ)
	
	ПодготовитьЗагружаемыеДанные();
	ЗадатьСоответствиеОбъектам();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ЗагрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ИдентификаторЗадания = Неопределено;
	
	Результат = ФоновоеЗаданиеЗапуститьНаСервере(Отказ);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат.Статус = "Выполняется" Тогда
		
		ПерейтиДалее = Ложь;
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ВыводитьСообщения    = Истина;
		
		ПараметрыОжидания.ВыводитьПрогрессВыполнения     = Истина;
		ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполненияФоновогоЗадания", ЭтотОбъект);
		ПараметрыОжидания.Интервал                       = 1;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеФоновогоЗадания", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОповещениеОЗавершении, ПараметрыОжидания);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ЗаписатьОшибкуВЖурнал(Результат.ПодробноеПредставлениеОшибки);
		УстановитьТекстЗагрузкаВыполнена(Ложь);
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		Если ПолучитьИзВременногоХранилища(Результат.АдресРезультата).ПропущеноСОшибкой > 0 Тогда
			УстановитьТекстЗагрузкаВыполнена(Истина, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ТаблицаПереходов

&НаСервере
Процедура СценарийЗагрузкиДанныхИзEStaff()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "Начало");
	ТаблицаПереходовНоваяСтрока(2, "ЭкспортОбщихДанных");
	ТаблицаПереходовНоваяСтрока(3, "СценарийЭкспорта", , "СценарийЭкспорта_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(4, "ЭкспортДанныхПоСценарию");
	ТаблицаПереходовНоваяСтрока(5, "ПроверкаПройдена", , "ПроверкаПройдена_ПриОткрытии", "ПроверкаПройдена_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(6, "СопоставлениеОбъектов");
	ТаблицаПереходовНоваяСтрока(7, "ЗагрузкаДанных", , , , , Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(8, "Окончание");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти