
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("ОрганизацияСсылка") Тогда
		ВызватьИсключение НСтр("ru='Обработка не предназначена для непосредственного использования.'");
	КонецЕсли;
	
	Объект.Организация = Параметры.ОрганизацияСсылка;
	Заголовок = Строка(Параметры.ОрганизацияСсылка) + " (" + НСтр("ru='Настройки'") + ")";
	ЗаполнитьСведения();
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УсловияМедицинскогоСтрахования) Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ПриПолученииДанныхНаСервере();
	
	Если Параметры.Свойство("СтраховаяКомпания") И ЗначениеЗаполнено(Параметры.СтраховаяКомпания)
		И СтраховыеКомпании.НайтиПоЗначению(Параметры.СтраховаяКомпания) <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраховыеКомпании", "Видимость", Ложь);
		Объект.СтраховаяКомпания = Параметры.СтраховаяКомпания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Объект.СтраховаяКомпания) Тогда
		Элементы.СтраховыеКомпании.ТекущаяСтрока = Объект.СтраховаяКомпания;
		ПодготовитьШкалуВозраста(ПредыдущаяСтраховаяКомпания, Объект.СтраховаяКомпания);
		
		УстановитьОтборТаблиц(Объект.СтраховаяКомпания);
		
		ДобавитьСтрокиШкалыВозраста(ШкалаВозраста);
		СформироватьПредставлениеИнтервалаШкалыВозраста(ШкалаВозраста);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПериодаСтрахованияПриИзменении(Элемент)
	
	СтраховаяКомпания = Неопределено;
	ТекущиеДанныеСК = Элементы.СтраховыеКомпании.ТекущиеДанные;
	Если ТекущиеДанныеСК = Неопределено Тогда
		СтраховаяКомпания = Элементы.СтраховыеКомпании.ТекущаяСтрока;
	Иначе
		СтраховаяКомпания = ТекущиеДанныеСК.Значение;
	КонецЕсли;
	Если СтраховаяКомпания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("СтраховаяКомпания", СтраховаяКомпания);
	НайденныеСтроки = ПериодыСтрахования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаПериода = ПериодыСтрахования.Добавить();
		СтрокаПериода.СтраховаяКомпания = СтраховаяКомпания;
	Иначе
		СтрокаПериода = НайденныеСтроки[0];
	КонецЕсли;
	
	СтрокаПериода.НачалоПериодаСтрахования = Объект.ДатаНачалаСтрахования;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаСтрахованияПриИзменении(Элемент)
	
	СтраховаяКомпания = Неопределено;
	ТекущиеДанныеСК = Элементы.СтраховыеКомпании.ТекущиеДанные;
	Если ТекущиеДанныеСК = Неопределено Тогда
		СтраховаяКомпания = Элементы.СтраховыеКомпании.ТекущаяСтрока;
	Иначе
		СтраховаяКомпания = ТекущиеДанныеСК.Значение;
	КонецЕсли;
	Если СтраховаяКомпания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("СтраховаяКомпания", СтраховаяКомпания);
	НайденныеСтроки = ПериодыСтрахования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаПериода = ПериодыСтрахования.Добавить();
		СтрокаПериода.СтраховаяКомпания = СтраховаяКомпания;
	Иначе
		СтрокаПериода = НайденныеСтроки[0];
	КонецЕсли;
	
	СтрокаПериода.ОкончаниеПериодаСтрахования = Объект.ДатаОкончанияСтрахования;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенкомПриИзменении(Элемент)
	
	СтрокаНастройки = СтрокаНастройкиСтраховойКомпании();
	Если СтрокаНастройки <> Неопределено Тогда
		СтрокаНастройки.ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком = ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СдвигДатыПрикрепленияПриИзменении(Элемент)
	
	СтрокаНастройки = СтрокаНастройкиСтраховойКомпании();
	Если СтрокаНастройки <> Неопределено Тогда
		СтрокаНастройки.СдвигДатыПрикрепления = СдвигДатыПрикрепления;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтраховыеКомпании

&НаКлиенте
Процедура СтраховыеКомпанииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанныеСК = Элементы.СтраховыеКомпании.ТекущиеДанные;
	Если ТекущиеДанныеСК = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанныеСК.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("СтраховаяКомпания", ТекущиеДанныеСК.Значение);
	НайденныеСтроки = ПериодыСтрахования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрокаПериода = ПериодыСтрахования.Добавить();
		НоваяСтрокаПериода.СтраховаяКомпания = ТекущиеДанныеСК.Значение;
	КонецЕсли;
	
	УстановитьОтборТаблиц(ТекущиеДанныеСК.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховыеКомпанииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанныеСК = Элементы.СтраховыеКомпании.ТекущиеДанные;
	Если ТекущиеДанныеСК = Неопределено Тогда
		СтраховаяКомпания = Неопределено;
	Иначе
		СтраховаяКомпания = ТекущиеДанныеСК.Значение;
	КонецЕсли;
	
	ПодготовитьШкалуВозраста(ПредыдущаяСтраховаяКомпания, СтраховаяКомпания);
	
	УстановитьОтборТаблиц(СтраховаяКомпания);
	
	ДобавитьСтрокиШкалыВозраста(ШкалаВозраста);
	СформироватьПредставлениеИнтервалаШкалыВозраста(ШкалаВозраста);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрограммыМедицинскогоСтрахования

&НаКлиенте
Процедура ПрограммыМедицинскогоСтрахованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	СтраховаяКомпания = Неопределено;
	ТекущиеДанныеСК = Элементы.СтраховыеКомпании.ТекущиеДанные;
	Если ТекущиеДанныеСК = Неопределено Тогда
		СтраховаяКомпания = Элементы.СтраховыеКомпании.ТекущаяСтрока;
	Иначе
		СтраховаяКомпания = ТекущиеДанныеСК.Значение;
	КонецЕсли;
	Если СтраховаяКомпания = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеПрограмм = Элемент.ТекущиеДанные;
	Если ТекущиеДанныеПрограмм = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанныеПрограмм.СтраховаяКомпания = СтраховаяКомпания;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАдресаРассылки

&НаКлиенте
Процедура АдресаРассылкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	СтраховаяКомпания = Неопределено;
	ТекущиеДанныеСК = Элементы.СтраховыеКомпании.ТекущиеДанные;
	Если ТекущиеДанныеСК = Неопределено Тогда
		СтраховаяКомпания = Элементы.СтраховыеКомпании.ТекущаяСтрока;
	Иначе
		СтраховаяКомпания = ТекущиеДанныеСК.Значение;
	КонецЕсли;
	Если СтраховаяКомпания = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеАдресов = Элемент.ТекущиеДанные;
	Если ТекущиеДанныеАдресов = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанныеАдресов.СтраховаяКомпания = СтраховаяКомпания;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШкалаВозраста

&НаКлиенте
Процедура ШкалаВозрастаЗначениеОтПриИзменении(Элемент)
	
	СформироватьПредставлениеИнтервалаШкалыВозраста(ШкалаВозраста);
	
КонецПроцедуры

&НаКлиенте
Процедура ШкалаВозрастаЗначениеДоПриИзменении(Элемент)
	
	СформироватьПредставлениеИнтервалаШкалыВозраста(ШкалаВозраста);
	
КонецПроцедуры

&НаКлиенте
Процедура ШкалаВозрастаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	УпорядочитьСтрокиШкалыВозраста(ТекущийЭлемент.ТекущиеДанные);
	СкорректироватьСоседниеСтрокиШкалыВозраста(ТекущийЭлемент.ТекущиеДанные);
	ДобавитьСтрокиШкалыВозраста(ШкалаВозраста);
	СкорректироватьИнтервалыШкалыВозраста();
	
КонецПроцедуры

&НаКлиенте
Процедура ШкалаВозрастаПослеУдаления(Элемент)
	
	ДобавитьСтрокиШкалыВозраста(ШкалаВозраста);
	СкорректироватьИнтервалыШкалыВозраста();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ЗаписатьИЗакрытьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьНаКлиенте();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСведения()
	
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	СтраховыеКомпании.Очистить();
	
	// Настройки страховой компании
	ПериодыСтрахования.Очистить();
	НастройкиСтраховыхКомпаний.Очистить();
	Объект.ДатаНачалаСтрахования = Неопределено;
	Объект.ДатаОкончанияСтрахования = Неопределено;
	
	НаборЗаписей = РегистрыСведений.УсловияМедицинскогоСтрахования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	НаборЗаписей.Прочитать();
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		Если СтраховыеКомпании.НайтиПоЗначению(ЗаписьНабора.СтраховаяКомпания) = Неопределено Тогда
			СтраховыеКомпании.Добавить(ЗаписьНабора.СтраховаяКомпания);
		КонецЕсли;
		НоваяСтрока = ПериодыСтрахования.Добавить();
		НоваяСтрока.СтраховаяКомпания = ЗаписьНабора.СтраховаяКомпания;
		НоваяСтрока.НачалоПериодаСтрахования = ЗаписьНабора.НачалоПериодаСтрахования;
		НоваяСтрока.ОкончаниеПериодаСтрахования = ЗаписьНабора.ОкончаниеПериодаСтрахования;
		
		НоваяСтрока = НастройкиСтраховыхКомпаний.Добавить();
		НоваяСтрока.СтраховаяКомпания = ЗаписьНабора.СтраховаяКомпания;
		НоваяСтрока.ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком = ЗаписьНабора.ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком;
		НоваяСтрока.СдвигДатыПрикрепления = ЗаписьНабора.СдвигДатыПрикрепления;
	КонецЦикла;
	
	// Программы страхования
	ПрограммыМедицинскогоСтрахования.Очистить();
	
	НаборЗаписей = РегистрыСведений.ПрограммыМедицинскогоСтрахованияПоУмолчанию.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	НаборЗаписей.Прочитать();
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		СтраховаяКомпанияЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьНабора.ПрограммаСтрахования, "СтраховаяКомпания");
		Если СтраховыеКомпании.НайтиПоЗначению(СтраховаяКомпанияЗаписи) = Неопределено Тогда
			СтраховыеКомпании.Добавить(СтраховаяКомпанияЗаписи);
		КонецЕсли;
		НоваяСтрока = ПрограммыМедицинскогоСтрахования.Добавить();
		НоваяСтрока.СтраховаяКомпания = СтраховаяКомпанияЗаписи;
		НоваяСтрока.ПрограммаСтрахования = ЗаписьНабора.ПрограммаСтрахования;
	КонецЦикла;
	
	// Адреса рассылки
	АдресаРассылки.Очистить();
	
	НаборЗаписей = РегистрыСведений.АдресаОтправкиУведомленийСтраховыхКомпаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	НаборЗаписей.Прочитать();
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		Если СтраховыеКомпании.НайтиПоЗначению(ЗаписьНабора.СтраховаяКомпания) = Неопределено Тогда
			СтраховыеКомпании.Добавить(ЗаписьНабора.СтраховаяКомпания);
		КонецЕсли;
		НоваяСтрока = АдресаРассылки.Добавить();
		НоваяСтрока.СтраховаяКомпания = ЗаписьНабора.СтраховаяКомпания;
		НоваяСтрока.Email = ЗаписьНабора.Email;
	КонецЦикла;
	
	// Шкала возраста
	ШкалыВозрастов.Очистить();
	
	НаборЗаписей = РегистрыСведений.ВозрастныеКоэффициентыСтраховыхКомпаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	НаборЗаписей.Прочитать();
	ТаблицаШкалы = НаборЗаписей.Выгрузить();
	ТаблицаШкалы.Сортировать("ИндексСтроки");
	
	ТекСтраховаяКомпания = Неопределено;
	Для Каждого ТекСтрока Из ТаблицаШкалы Цикл 
		
		Если ТекСтраховаяКомпания <> ТекСтрока.СтраховаяКомпания Тогда
			ТекСтраховаяКомпания = ТекСтрока.СтраховаяКомпания;
			ЗначениеДоПредыдущее = 0;
		КонецЕсли;
		
		Если СтраховыеКомпании.НайтиПоЗначению(ТекСтрока.СтраховаяКомпания) = Неопределено Тогда
			СтраховыеКомпании.Добавить(ТекСтрока.СтраховаяКомпания);
		КонецЕсли;
		
		НоваяСтрока = ШкалыВозрастов.Добавить();
		НоваяСтрока.СтраховаяКомпания = ТекСтрока.СтраховаяКомпания;
		НоваяСтрока.ЗначениеОт = ЗначениеДоПредыдущее;
		НоваяСтрока.ЗначениеДо = ТекСтрока.ВерхняяГраницаИнтервалаВозраста;
		НоваяСтрока.ЗначениеПоказателя = ТекСтрока.ЗначениеПоказателя;
		
		ЗначениеДоПредыдущее = НоваяСтрока.ЗначениеДо + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте()
	
	ТекущиеДанныеСК = Элементы.СтраховыеКомпании.ТекущиеДанные;
	Если ТекущиеДанныеСК = Неопределено Тогда
		СтраховаяКомпания = Элементы.СтраховыеКомпании.ТекущаяСтрока;
	Иначе
		СтраховаяКомпания = ТекущиеДанныеСК.Значение;
	КонецЕсли;
	
	ПодготовитьШкалуВозраста(ПредыдущаяСтраховаяКомпания, СтраховаяКомпания);
	
	// Проверка заполнения шкалы оценки.
	Если Не ШкалаВозрастаЗаполненаПравильно() Тогда 
		Оповещение = Новый ОписаниеОповещения("ОбработатьОтветОКорректировкеШкалыВозраста", ЭтаФорма);
		ТекстВопроса = НСтр("ru = 'Обнаружены неверно заполненные интервалы шкалы. Скорректировать значения интервалов автоматически?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	ЗаписатьНаСервере();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	// Настройки страховой компании
	НаборЗаписей = РегистрыСведений.УсловияМедицинскогоСтрахования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	Для Каждого СтрокаТаблицы Из ПериодыСтрахования Цикл
		Если СтраховыеКомпании.НайтиПоЗначению(СтрокаТаблицы.СтраховаяКомпания) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписьНайдена = Ложь;
		Для каждого НайденнаяЗаписьНабора Из НаборЗаписей Цикл
			Если НайденнаяЗаписьНабора.Организация = Объект.Организация И НайденнаяЗаписьНабора.СтраховаяКомпания = СтрокаТаблицы.СтраховаяКомпания Тогда
				ЗаписьНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаписьНайдена Тогда
			ЗаписьНабора = НайденнаяЗаписьНабора;
		Иначе
			ЗаписьНабора = НаборЗаписей.Добавить();
		КонецЕсли;
		ЗаписьНабора.Организация = Объект.Организация;
		ЗаписьНабора.СтраховаяКомпания = СтрокаТаблицы.СтраховаяКомпания;
		ЗаписьНабора.НачалоПериодаСтрахования = СтрокаТаблицы.НачалоПериодаСтрахования;
		ЗаписьНабора.ОкончаниеПериодаСтрахования = СтрокаТаблицы.ОкончаниеПериодаСтрахования;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из НастройкиСтраховыхКомпаний Цикл
		Если СтраховыеКомпании.НайтиПоЗначению(СтрокаТаблицы.СтраховаяКомпания) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписьНайдена = Ложь;
		Для каждого НайденнаяЗаписьНабора Из НаборЗаписей Цикл
			Если НайденнаяЗаписьНабора.Организация = Объект.Организация И НайденнаяЗаписьНабора.СтраховаяКомпания = СтрокаТаблицы.СтраховаяКомпания Тогда
				ЗаписьНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаписьНайдена Тогда
			ЗаписьНабора = НайденнаяЗаписьНабора;
		Иначе
			ЗаписьНабора = НаборЗаписей.Добавить();
		КонецЕсли;
		ЗаписьНабора.Организация = Объект.Организация;
		ЗаписьНабора.СтраховаяКомпания = СтрокаТаблицы.СтраховаяКомпания;
		ЗаписьНабора.ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком = СтрокаТаблицы.ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком;
		ЗаписьНабора.СдвигДатыПрикрепления = СтрокаТаблицы.СдвигДатыПрикрепления;
	КонецЦикла;
	НаборЗаписей.Записать();
	
	// Программы страхования
	НаборЗаписей = РегистрыСведений.ПрограммыМедицинскогоСтрахованияПоУмолчанию.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	Для каждого СтрокаТаблицы Из ПрограммыМедицинскогоСтрахования Цикл
		Если СтраховыеКомпании.НайтиПоЗначению(СтрокаТаблицы.СтраховаяКомпания) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Организация = Объект.Организация;
		ЗаписьНабора.ПрограммаСтрахования = СтрокаТаблицы.ПрограммаСтрахования;
	КонецЦикла;
	НаборЗаписей.Записать();
	
	// Адреса рассылки
	НаборЗаписей = РегистрыСведений.АдресаОтправкиУведомленийСтраховыхКомпаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	Для каждого СтрокаТаблицы Из АдресаРассылки Цикл
		Если СтраховыеКомпании.НайтиПоЗначению(СтрокаТаблицы.СтраховаяКомпания) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Организация = Объект.Организация;
		ЗаписьНабора.СтраховаяКомпания = СтрокаТаблицы.СтраховаяКомпания;
		ЗаписьНабора.Email = СтрокаТаблицы.Email;
	КонецЦикла;
	НаборЗаписей.Записать();
	
	// Шкала возраста
	НаборЗаписей = РегистрыСведений.ВозрастныеКоэффициентыСтраховыхКомпаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	ПерваяСтрока = Истина;
	НомерСтроки = 0;
	Для Каждого ТекСтрока Из ШкалыВозрастов Цикл
		Если СтраховыеКомпании.НайтиПоЗначению(ТекСтрока.СтраховаяКомпания) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
		Если ПерваяСтрока Тогда 
			ПерваяСтрока = Ложь;
			Если ТекСтрока.ЗначениеОт <> 0 Тогда 
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.Организация = Объект.Организация;
				ЗаписьНабора.СтраховаяКомпания = ТекСтрока.СтраховаяКомпания;
				ЗаписьНабора.ВерхняяГраницаИнтервалаВозраста = ТекСтрока.ЗначениеОт;
				ЗаписьНабора.ЗначениеПоказателя = 0;
				ЗаписьНабора.ИндексСтроки = НомерСтроки;
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЕсли;
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Организация = Объект.Организация;
		ЗаписьНабора.СтраховаяКомпания = ТекСтрока.СтраховаяКомпания;
		ЗаписьНабора.ВерхняяГраницаИнтервалаВозраста = ТекСтрока.ЗначениеДо;
		ЗаписьНабора.ЗначениеПоказателя = ТекСтрока.ЗначениеПоказателя;
		ЗаписьНабора.ИндексСтроки = НомерСтроки;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗаписатьНаКлиенте();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТаблиц(СтраховаяКомпания)
	
	ТолькоПросмотрЭлементов = Не ЗначениеЗаполнено(СтраховаяКомпания);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НачалоПериодаСтрахования", "ТолькоПросмотр", ТолькоПросмотрЭлементов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОкончаниеПериодаСтрахования", "ТолькоПросмотр", ТолькоПросмотрЭлементов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПрограммыМедицинскогоСтрахования", "ТолькоПросмотр", ТолькоПросмотрЭлементов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресаРассылки", "ТолькоПросмотр", ТолькоПросмотрЭлементов);
	
	ПараметрыОтбора = Новый ФиксированнаяСтруктура("СтраховаяКомпания", СтраховаяКомпания);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПрограммыМедицинскогоСтрахования", "ОтборСтрок", ПараметрыОтбора);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресаРассылки", "ОтборСтрок", ПараметрыОтбора);
	
	ПараметрыОтбора = Новый Структура("СтраховаяКомпания", СтраховаяКомпания);
	НайденныеСтроки = ПериодыСтрахования.НайтиСтроки(ПараметрыОтбора);
	Для Каждого НайденныйПериод Из НайденныеСтроки Цикл
		Объект.ДатаНачалаСтрахования = НайденныйПериод.НачалоПериодаСтрахования;
		Объект.ДатаОкончанияСтрахования = НайденныйПериод.ОкончаниеПериодаСтрахования;
	КонецЦикла;
	
	ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком = Ложь;
	СдвигДатыПрикрепления = 0;
	ВестиУчетРасходов = Ложь;
	НайденныеСтроки = НастройкиСтраховыхКомпаний.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаНастройки Из НайденныеСтроки Цикл
		ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком = СтрокаНастройки.ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком;
		СдвигДатыПрикрепления = СтрокаНастройки.СдвигДатыПрикрепления;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаНастройкиСтраховойКомпании()
	
	СтраховаяКомпания = Неопределено;
	ТекущиеДанныеСК = Элементы.СтраховыеКомпании.ТекущиеДанные;
	Если ТекущиеДанныеСК = Неопределено Тогда
		СтраховаяКомпания = Элементы.СтраховыеКомпании.ТекущаяСтрока;
	Иначе
		СтраховаяКомпания = ТекущиеДанныеСК.Значение;
	КонецЕсли;
	Если СтраховаяКомпания = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("СтраховаяКомпания", СтраховаяКомпания);
	НайденныеСтроки = НастройкиСтраховыхКомпаний.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаНастройки = НастройкиСтраховыхКомпаний.Добавить();
		СтрокаНастройки.СтраховаяКомпания = СтраховаяКомпания;
	Иначе
		СтрокаНастройки = НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат СтрокаНастройки;
	
КонецФункции

#Область ШкалаВозраста

&НаКлиенте
Процедура СформироватьПредставлениеИнтервалаШкалыВозраста(ТаблицаИнтервалов)
	
	Для Каждого ТекСтрока Из ТаблицаИнтервалов Цикл 
		
		Если ТекСтрока.ЗначениеОт = 0 И ТекСтрока.ЗначениеДо = 0 Тогда 
			ПредставлениеОт = НСтр("ru = 'от'");
			ПредставлениеДо = НСтр("ru = 'до'");
		ИначеЕсли ТекСтрока.ЗначениеОт = 0 И ТекСтрока.ЗначениеДо <> 0 Тогда
			ПредставлениеОт = "";
			ПредставлениеДо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'до %1'"), ТекСтрока.ЗначениеДо);
		ИначеЕсли ТекСтрока.ЗначениеОт <> 0 И ТекСтрока.ЗначениеДо = 0 Тогда
			ПредставлениеОт = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'свыше %1'"), ТекСтрока.ЗначениеОт);
			ПредставлениеДо = "";
		Иначе
			ПредставлениеОт = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'от %1'"), ТекСтрока.ЗначениеОт);
			ПредставлениеДо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'до %1'"), ТекСтрока.ЗначениеДо);
		КонецЕсли;
		
		ТекСтрока.ПредставлениеОт = ПредставлениеОт;
		ТекСтрока.ПредставлениеДо = ПредставлениеДо;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УпорядочитьСтрокиШкалыВозраста(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяПозиция = ШкалаВозраста.Индекс(ТекущиеДанные);
	НоваяПозиция = 0;
	
	Для Каждого ТекСтрока Из ШкалаВозраста Цикл 
		Если НоваяПозиция <> ТекущаяПозиция И ТекСтрока.ЗначениеОт >= ТекущиеДанные.ЗначениеОт Тогда 
			Прервать;
		КонецЕсли;
		НоваяПозиция = НоваяПозиция + 1;
	КонецЦикла;
	
	Сдвиг = ?(НоваяПозиция < ТекущаяПозиция, НоваяПозиция - ТекущаяПозиция, НоваяПозиция - ТекущаяПозиция - 1);
	ШкалаВозраста.Сдвинуть(ТекущаяПозиция, Сдвиг);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокиШкалыВозраста(ШкалаВозраста)
	
	КоличествоСтрок = ШкалаВозраста.Количество();
	Если КоличествоСтрок = 0 Тогда 
		НоваяСтрока = ШкалаВозраста.Добавить();
	ИначеЕсли ШкалаВозраста[КоличествоСтрок-1].ЗначениеДо <> 0 
		И ШкалаВозраста[КоличествоСтрок-1].ЗначениеДо > ШкалаВозраста[КоличествоСтрок-1].ЗначениеОт Тогда  
		НоваяСтрока = ШкалаВозраста.Добавить();
		НоваяСтрока.ЗначениеОт = ШкалаВозраста[КоличествоСтрок-1].ЗначениеДо;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьСоседниеСтрокиШкалыВозраста(ТекущиеДанные);
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЗначениеДо <= ТекущиеДанные.ЗначениеОт Тогда
		ТекущиеДанные.ЗначениеДо = 0;
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = ШкалаВозраста.Количество();
	ИндексСтроки = ШкалаВозраста.Индекс(ТекущиеДанные);
	
	Если ИндексСтроки = (КоличествоСтрок - 1) Тогда 
		Возврат;
	КонецЕсли;
	
	СледующаяСтрока = ШкалаВозраста[ИндексСтроки+1];
	СледующаяСтрока.ЗначениеОт = ТекущиеДанные.ЗначениеДо + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьИнтервалыШкалыВозраста()
	
	НижняяГраница = Неопределено;
	КоличествоСтрок = ШкалаВозраста.Количество();
	
	Для Сч = 1 По КоличествоСтрок Цикл 
		
		ИндексСтроки = КоличествоСтрок - Сч;
		ТекСтрока = ШкалаВозраста[ИндексСтроки];
		
		Если НижняяГраница <> Неопределено И НижняяГраница <> ТекСтрока.ЗначениеДо + 1 Тогда 
			ТекСтрока.ЗначениеДо = НижняяГраница - 1;
		КонецЕсли;
		
		Если НижняяГраница = Неопределено И ТекСтрока.ЗначениеОт = ТекСтрока.ЗначениеДо Тогда 
			ТекСтрока.ЗначениеДо = 0;
		КонецЕсли;
		
		Если (ТекСтрока.ЗначениеОт > ТекСтрока.ЗначениеДо И ТекСтрока.ЗначениеДо <> 0) 
			Или (ТекСтрока.ЗначениеОт = ТекСтрока.ЗначениеДо И ТекСтрока.ЗначениеОт <> 0) Тогда
			ШкалаВозраста.Удалить(ТекСтрока);
			Продолжить;
		КонецЕсли;
		
		НижняяГраница = ТекСтрока.ЗначениеОт;
		
	КонецЦикла;
	
	// В первой строке может быть нулевое значение До, только если это единственная строка.
	Пока ШкалаВозраста.Количество() > 1 Цикл 
		Если ШкалаВозраста[0].ЗначениеДо <> 0 Тогда 
			Прервать;
		КонецЕсли;
		ШкалаВозраста.Удалить(0);
	КонецЦикла;
	
	СформироватьПредставлениеИнтервалаШкалыВозраста(ШкалаВозраста);
	
КонецПроцедуры

&НаКлиенте
Функция ШкалаВозрастаЗаполненаПравильно()
	
	Отказ = Ложь;
	
	НижняяГраница = Неопределено;
	КоличествоСтрок = ШкалаВозраста.Количество();
	
	Если КоличествоСтрок > 1 И ШкалаВозраста[0].ЗначениеДо = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Значение ""До"" в строке 1 равно 0'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ШкалаВозраста[0].ЗначениеДо", , Отказ);
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрок Цикл 
		
		ИндексСтроки = КоличествоСтрок - Сч;
		ТекСтрока = ШкалаВозраста[ИндексСтроки];
		
		Если ТекСтрока.ЗначениеДо <= ТекСтрока.ЗначениеОт И ТекСтрока.ЗначениеДо <> 0 Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке %1 значение ""До"" меньше или равно значению ""От""'"), ИндексСтроки + 1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ШкалаВозраста[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].ЗначениеДо", , Отказ);
		КонецЕсли;
		
		Если НижняяГраница <> Неопределено И НижняяГраница <> ТекСтрока.ЗначениеДо + 1 Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Значение ""До"" строки %1 не равно значению ""От"" строки %2'"), ИндексСтроки + 1, ИндексСтроки + 2);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ШкалаВозраста[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].ЗначениеДо", , Отказ);
		КонецЕсли;
		
		НижняяГраница = ТекСтрока.ЗначениеОт;
		
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтветОКорректировкеШкалыВозраста(Результат, Параметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	СкорректироватьИнтервалыШкалыВозраста();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьШкалуВозраста(ПредыдущаяСтраховаяКомпания, СтраховаяКомпания)
	
	// Перенесем данные шкалы по предыдущей страховой компании
	ОтборСтрок = Новый Структура("СтраховаяКомпания", ПредыдущаяСтраховаяКомпания);
	СтрокиДляУдаления = ШкалыВозрастов.НайтиСтроки(ОтборСтрок);
	Для Каждого УдаляемаяСтрока Из СтрокиДляУдаления Цикл
		ШкалыВозрастов.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Для Каждого СтрокаШкалы Из ШкалаВозраста Цикл
		НоваяСтрока = ШкалыВозрастов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаШкалы);
		НоваяСтрока.СтраховаяКомпания = ПредыдущаяСтраховаяКомпания;
	КонецЦикла;
	
	// Заполним данные шкалы по выбранной страховой компании
	ШкалаВозраста.Очистить();
	ОтборСтрок = Новый Структура("СтраховаяКомпания", СтраховаяКомпания);
	СтрокиШкалы = ШкалыВозрастов.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаШкалы Из СтрокиШкалы Цикл
		НоваяСтрока = ШкалаВозраста.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаШкалы);
	КонецЦикла;
	
	ПредыдущаяСтраховаяКомпания = СтраховаяКомпания;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти