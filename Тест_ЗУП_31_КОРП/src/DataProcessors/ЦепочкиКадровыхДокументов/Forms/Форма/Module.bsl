#Область ОписаниеПеременных

Перем Макет;
Перем ТабДокумент;
Перем ОткрытыеУровни;
Перем ПерваяСтрока;

#КонецОбласти

// ВидСвязи = 0 (master-slave, подчиненные документы, уровень подчиненного больше уровня основного на +1
// ВидСвязи = 1 (братская-основание, документы равнозначны, имеют один и тот же уровень
// ВидСвязи = 2 (братская-исправление, документы равнозначны, имеют один и тот же уровень.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ТекущийДокумент", ЗамещениеДокументОснование);
	
	Если Параметры.Свойство("СформироватьПриОткрытии") Тогда
		Если Параметры.СформироватьПриОткрытии Тогда
			СформироватьНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	СформироватьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСвязьСОснованием(Команда)
	
	Если ОтменитьСвязьНаСервере() Тогда
		СформироватьНаСервере();
		ЦепочкиДокументовКлиент.ОповеститьЗаписанПодчиненныйДокумент(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьНаСервере()
	
	ЗаполнитьТаблицуСвязей();
	
	СформироватьОтчет();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСвязей()

	ТаблицаСвязей.Очистить();
	
	АнализируемыеДокументы = Новый Массив;
	АнализируемыеДокументы.Добавить(ЗамещениеДокументОснование);
	
	СчетчикИтераций = 1;
	
	Пока АнализируемыеДокументы.Количество() > 0 И СчетчикИтераций < 100 Цикл
		
		НовыеДокументы = Новый Массив;
		
		Основания = ЦепочкиДокументов.ДокументыОснования(АнализируемыеДокументы);
		Для каждого СтрокаОснование Из Основания Цикл
			Если ТаблицаСвязей.НайтиСтроки(Новый Структура("Основание, Подчиненный", СтрокаОснование.Основание, СтрокаОснование.Подчиненный)).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСвязь = ТаблицаСвязей.Добавить();
			НоваяСвязь.Основание = СтрокаОснование.Основание;
			НоваяСвязь.СотрудникОснованияФамилияИО = СтрокаОснование.СотрудникОснованияФамилияИО;
			НоваяСвязь.Подчиненный = СтрокаОснование.Подчиненный;
			НоваяСвязь.СотрудникПодчиненногоФамилияИО = СтрокаОснование.СотрудникПодчиненногоФамилияИО;
			НоваяСвязь.ВидСвязи = 0;
			НовыеДокументы.Добавить(СтрокаОснование.Основание);
		КонецЦикла;
		
		Подчиненные = ЦепочкиДокументов.ПодчиненныеДокументы(АнализируемыеДокументы);
		Для каждого СтрокаПодчиненных Из Подчиненные Цикл
			Если ТаблицаСвязей.НайтиСтроки(Новый Структура("Основание, Подчиненный", СтрокаПодчиненных.Основание, СтрокаПодчиненных.Подчиненный)).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСвязь = ТаблицаСвязей.Добавить();
			НоваяСвязь.Основание = СтрокаПодчиненных.Основание;
			НоваяСвязь.СотрудникОснованияФамилияИО = СтрокаПодчиненных.СотрудникОснованияФамилияИО;
			НоваяСвязь.Подчиненный = СтрокаПодчиненных.Подчиненный;
			НоваяСвязь.СотрудникПодчиненногоФамилияИО = СтрокаПодчиненных.СотрудникПодчиненногоФамилияИО;
			НоваяСвязь.ВидСвязи = 0;
			НовыеДокументы.Добавить(СтрокаПодчиненных.Подчиненный);
		КонецЦикла;
		
		АнализируемыеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(НовыеДокументы);
		
		СчетчикИтераций = СчетчикИтераций + 1;
		
	КонецЦикла; 
	
	ДополнитьОснованиями();
	
	ДополнитьИсправлениями();
	
	СортироватьТаблицу();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьОснованиями()
	
	МассивДляАнализа = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДляАнализа, ТаблицаСвязей.Выгрузить().ВыгрузитьКолонку("Основание"), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДляАнализа, ТаблицаСвязей.Выгрузить().ВыгрузитьКолонку("Подчиненный"), Истина);
	
	МаксимумИтераций = 10;
	НомерИтерации = 1;
	
	ТаблицаРезультата = ПустаяТаблицаСвязей();
	
	Пока МассивДляАнализа.Количество() > 0 И НомерИтерации <= МаксимумИтераций Цикл
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("АнализируемыеДокументы", МассивДляАнализа);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВозвратИзДекрета.Подчиненный КАК Подчиненный,
			|	ВозвратИзДекрета.Основание КАК Основание,
			|	ВозвратИзДекрета.Подчиненный.ОсновнойСотрудник КАК ПодчиненныйСотрудник,
			|	ВозвратИзДекрета.Основание.ОсновнойСотрудник КАК ОснованиеСотрудник
			|ИЗ
			|	(ВЫБРАТЬ
			|		МАКСИМУМ(ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка) КАК Подчиненный,
			|		ВЫРАЗИТЬ(ВозвратИзОтпускаПоУходуЗаРебенком.ДокументОснование КАК Документ.ОтпускПоУходуЗаРебенком) КАК Основание
			|	ИЗ
			|		Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ВозвратИзОтпускаПоУходуЗаРебенком
			|	ГДЕ
			|		ВозвратИзОтпускаПоУходуЗаРебенком.ДокументОснование В(&АнализируемыеДокументы)
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ВозвратИзОтпускаПоУходуЗаРебенком.ДокументОснование) КАК ВозвратИзДекрета
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	БольничныеЛисты.Подчиненный,
			|	БольничныеЛисты.Основание,
			|	БольничныеЛисты.Подчиненный.Сотрудник,
			|	БольничныеЛисты.Основание.Сотрудник
			|ИЗ
			|	(ВЫБРАТЬ
			|		МАКСИМУМ(БольничныйЛист.Ссылка) КАК Подчиненный,
			|		ВЫРАЗИТЬ(БольничныйЛист.ПервичныйБольничныйЛист КАК Документ.БольничныйЛист) КАК Основание
			|	ИЗ
			|		Документ.БольничныйЛист КАК БольничныйЛист
			|	ГДЕ
			|		БольничныйЛист.ПервичныйБольничныйЛист В(&АнализируемыеДокументы)
			|	
			|	СГРУППИРОВАТЬ ПО
			|		БольничныйЛист.ПервичныйБольничныйЛист) КАК БольничныеЛисты";
			
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ТаблицаРезультатаЗапроса = РезультатЗапроса.Выгрузить();
		
		МассивДляАнализа = ТаблицаРезультатаЗапроса.ВыгрузитьКолонку("Подчиненный");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРезультатаЗапроса, ТаблицаРезультата);
		
		НомерИтерации = НомерИтерации + 1;
	КонецЦикла;
	
	ДополнитьТаблицуСвязей(ТаблицаРезультата, 1);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИсправлениями()
	
	МассивДляАнализа = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДляАнализа, ТаблицаСвязей.Выгрузить().ВыгрузитьКолонку("Основание"), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДляАнализа, ТаблицаСвязей.Выгрузить().ВыгрузитьКолонку("Подчиненный"), Истина);
	
	МаксимумИтераций = 10;
	НомерИтерации = 1;
	
	ТаблицаРезультата = ПустаяТаблицаСвязей();
	
	Пока МассивДляАнализа.Количество() > 0 И НомерИтерации <= МаксимумИтераций Цикл
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("АнализируемыеДокументы", МассивДляАнализа);
		
		ПервыйЗапрос = Истина;

		Для каждого АнализируемыйТипДокумента Из Метаданные.ОпределяемыеТипы.ЦепочкиДокументовОснования.Тип.Типы() Цикл
			ДополнитьТекстЗапросаВТДокументы(Запрос, АнализируемыйТипДокумента, ПервыйЗапрос);
			ПервыйЗапрос = Ложь;
		КонецЦикла; 
		Для каждого АнализируемыйТипДокумента Из Метаданные.ОпределяемыеТипы.ЦепочкиДокументовПодчиненные.Тип.Типы() Цикл
			ДополнитьТекстЗапросаВТДокументы(Запрос, АнализируемыйТипДокумента, ПервыйЗапрос);
			ПервыйЗапрос = Ложь;
		КонецЦикла; 
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ТаблицаРезультатаЗапроса = РезультатЗапроса.Выгрузить();
		
		МассивДляАнализа = ТаблицаРезультатаЗапроса.ВыгрузитьКолонку("Подчиненный");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРезультатаЗапроса, ТаблицаРезультата);
		
		НомерИтерации = НомерИтерации + 1;
		
	КонецЦикла;
	
	ДополнитьТаблицуСвязей(ТаблицаРезультата, 2);
	
КонецПроцедуры

&НаСервере
Процедура СортироватьТаблицу()

	Если ТаблицаСвязей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УровниДокументов = Новый Соответствие;
	ОпределенУровеньВсемДокументам = Ложь;
	
	УстановитьУровниПервойСтроки(УровниДокументов, ТаблицаСвязей);
	
	МаксимумИтераций = 10;
	НомерИтерации = 1;
	
	Пока НЕ ОпределенУровеньВсемДокументам И НомерИтерации <= МаксимумИтераций Цикл
	
		// Нумеруем уровни
		Для каждого СтрокаСвязи Из ТаблицаСвязей Цикл
		
			УровеньОсновного = УровниДокументов.Получить(СтрокаСвязи.Основание);
			УровеньПодчиненного = УровниДокументов.Получить(СтрокаСвязи.Подчиненный);
			
			Если УровеньОсновного = Неопределено И УровеньПодчиненного = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РазницаУровней = ?(СтрокаСвязи.ВидСвязи = 0, 1,0);
			
			Если УровеньОсновного <> Неопределено И УровеньПодчиненного <> Неопределено Тогда
				Если УровеньПодчиненного - УровеньОсновного = РазницаУровней Тогда
					Продолжить;
				Иначе
					ВызватьИсключение(НСтр("ru = 'Зациклены связи документов.'"));
				КонецЕсли;
			КонецЕсли;
			
			Если УровеньОсновного <> Неопределено Тогда
				УровниДокументов[СтрокаСвязи.Подчиненный] = УровеньОсновного + РазницаУровней;
			Иначе
				УровниДокументов[СтрокаСвязи.Основание] = УровеньПодчиненного - РазницаУровней;
			КонецЕсли;
			
		КонецЦикла; 
		
		ОпределенУровеньВсемДокументам = Истина;
		Для каждого УровеньДокумента Из УровниДокументов Цикл
			Если УровеньДокумента.Значение = Неопределено Тогда
				ОпределенУровеньВсемДокументам = Ложь;
			КонецЕсли; 
		КонецЦикла; 
		
		НомерИтерации = НомерИтерации + 1;
		
	КонецЦикла;
	
	// Означиваем
	Для каждого СтрокаСвязи Из ТаблицаСвязей Цикл
		СтрокаСвязи.ОснованиеУровень = УровниДокументов[СтрокаСвязи.Основание];
		СтрокаСвязи.ПодчиненныйУровень = УровниДокументов[СтрокаСвязи.Подчиненный];
	КонецЦикла;
	
	ТаблицаСвязей.Сортировать("ОснованиеУровень, Основание, ПодчиненныйУровень, Подчиненный");
	
КонецПроцедуры

#Область ВыводОтчета

&НаСервере
Процедура СформироватьОтчет()

	ДобавитьНулевуюЗапись();
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Связи_Документов";
	ТабДокумент.Защита = Ложь;
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	
	ОткрытыеУровни = Новый Массив;
	
	Если ТаблицаСвязей.Количество() > 0 Тогда
		ПодчиненныеДокументы = ТаблицаСвязей.НайтиСтроки(Новый Структура("Основание", ТаблицаСвязей[0].Основание));
		
		ОбластьВерхнийМикроОтступ = Макет.ПолучитьОбласть("ВерхнийМикроОтступ");
		ТабДокумент.Вывести(ОбластьВерхнийМикроОтступ);
		ПерваяСтрока = Истина;
		
		ВывестиОтчет(ПодчиненныеДокументы, 0);
	КонецЕсли; 
	
	ПолеОтчета.Очистить();
	ПолеОтчета.Вывести(ТабДокумент);
	
	УдалитьНулевуюЗапись();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиОтчет(СтрокиСвязей, НомерУровня)
	
	ОбластьСущность = Макет.ПолучитьОбласть("Строка4|Сущность");
	
	Если ОткрытыеУровни.Найти(НомерУровня) = Неопределено Тогда
		ОткрытыеУровни.Добавить(НомерУровня);
	КонецЕсли;
	
	Для каждого СтрокаСвязей Из СтрокиСвязей Цикл
		
		ЭтоПоследнийВертикальныйЭлемент = (СтрокиСвязей.Количество() = СтрокиСвязей.Найти(СтрокаСвязей) + 1);
		
		Если СтрокаСвязей.ВидСвязи = 0 Тогда
			ВывестиВертикальныйОтступ(НомерУровня);
			ВывестиГоризонтальныйОтступ(НомерУровня, ЭтоПоследнийВертикальныйЭлемент);
		Иначе
			ПрисоединитьГоризонтальныйОтступ();
		КонецЕсли;
		
		// Вывод области документа.
		ОбластьСущность.Параметры.СотрудникИО = СтрокаСвязей.СотрудникПодчиненногоФамилияИО;
		ОбластьСущность.Параметры.СтрокаПериода = СтрокаПериодаНаПечать(СтрокаСвязей.Подчиненный);
		ОбластьСущность.Параметры.ПредставлениеДокумента = ПредставлениеДокументаНаПечать(СтрокаСвязей.Подчиненный);
		ОбластьСущность.Параметры.ДокументСсылка = СтрокаСвязей.Подчиненный;
		
		Если СтрокаСвязей.Подчиненный = ЗамещениеДокументОснование Тогда
			ОбластьСущность.Область().ЦветФона = Новый Цвет(255, 250, 217);
		ИначеЕсли СтрокаСвязей.ВидСвязи = 1 Тогда
			ОбластьСущность.Область().ЦветФона = Новый Цвет(220, 245, 255);
		ИначеЕсли ЭтоИсправленныйДокумент(СтрокаСвязей.Подчиненный) Тогда
			ОбластьСущность.Область().ЦветФона = Новый Цвет(220, 220, 220);
		Иначе
			ОбластьСущность.Область().ЦветФона = Новый Цвет(255, 255, 255);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьСущность);
		
		Если ЭтоПоследнийВертикальныйЭлемент Тогда
			УдалитьОткрытыйУровень(НомерУровня);
		КонецЕсли;
		
		// Вывод подчиненных объектов этого документа.
		ПодчиненныеПодчиненного = ТаблицаСвязей.НайтиСтроки(Новый Структура("Основание", СтрокаСвязей.Подчиненный));
		ВывестиОтчет(ПодчиненныеПодчиненного, НомерУровня + 1);
		
	КонецЦикла; 
	
	УдалитьОткрытыйУровень(НомерУровня);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиВертикальныйОтступ(Количество)
	
	Если ПерваяСтрока Тогда
		ПерваяСтрока = Ложь;
	Иначе
		ОбластьЛевыйОтступ = Макет.ПолучитьОбласть("Строка2|ЛевыйМикроОтступ");
		ТабДокумент.Вывести(ОбластьЛевыйОтступ);
	КонецЕсли;
	
	ВывестиСтрокуВТабличныйДокумент(Количество, "Строка2");

КонецПроцедуры

&НаСервере
Процедура ВывестиГоризонтальныйОтступ(Количество, ЭтоПоследнийВертикальныйЭлемент)
	
	ОбластьЛевыйОтступ = Макет.ПолучитьОбласть("Строка4|ЛевыйМикроОтступ");
	ТабДокумент.Вывести(ОбластьЛевыйОтступ);
	
	ВывестиСтрокуВТабличныйДокумент(Количество, "Строка4", ЭтоПоследнийВертикальныйЭлемент);
	
КонецПроцедуры

&НаСервере
Процедура ПрисоединитьГоризонтальныйОтступ()

	ОбластьОтступ = Макет.ПолучитьОбласть("Строка4|ЧертаТотЖеУровень");
	ТабДокумент.Присоединить(ОбластьОтступ);

КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуВТабличныйДокумент(Количество, ИмяСтроки, ЭтоПоследнийВертикальныйЭлемент = Ложь)

	ОбластьПустойОтступ = Макет.ПолучитьОбласть(ИмяСтроки + "|ПустойОтступ");
	Если ЭтоПоследнийВертикальныйЭлемент Тогда
		ОбластьЧертаОтступПоследняя = Макет.ПолучитьОбласть(ИмяСтроки + "|ЧертаОтступПоследняя");
	Иначе
		ОбластьЧертаОтступПоследняя = Макет.ПолучитьОбласть(ИмяСтроки + "|ЧертаОтступ");
	КонецЕсли;
	ОбластьЧертаОтступПромежуточная = Макет.ПолучитьОбласть(ИмяСтроки + "|ЧертаОтступПромежуточная");
	
	Для Сч=1 По Количество Цикл
		Если Сч = 0 ИЛИ ОткрытыеУровни.Найти(Сч) = Неопределено Тогда
			ОбластьОтступ = ОбластьПустойОтступ;
		Иначе
			Если Сч = Количество Тогда
				ОбластьОтступ = ОбластьЧертаОтступПоследняя;
			Иначе
				ОбластьОтступ = ОбластьЧертаОтступПромежуточная;
			КонецЕсли;
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьОтступ);
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ДобавитьНулевуюЗапись()

	Если ТаблицаСвязей.Количество() > 0 Тогда
		ПервыйДокумент = ТаблицаСвязей[0].Основание;
		ПервыйДокументУровень = ТаблицаСвязей[0].ОснованиеУровень;
		СотрудникИО = ТаблицаСвязей[0].СотрудникОснованияФамилияИО;
		НоваяСвязь = ТаблицаСвязей.Вставить(0);
		НоваяСвязь.Основание = Неопределено;
		НоваяСвязь.ОснованиеУровень = -1;
		НоваяСвязь.Подчиненный = ПервыйДокумент;
		НоваяСвязь.ПодчиненныйУровень = ПервыйДокументУровень;
		НоваяСвязь.СотрудникПодчиненногоФамилияИО = СотрудникИО;
		НоваяСвязь.ВидСвязи = 0;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьНулевуюЗапись()
	
	Если ТаблицаСвязей.Количество() > 0 Тогда
		ТаблицаСвязей.Удалить(0);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ЭтоИсправленныйДокумент(ДокументСсылка)

	ЭтоИсправленныйДокумент = Ложь;
	
	НайденныеСтроки = ТаблицаСвязей.НайтиСтроки(Новый Структура("Основание", ДокументСсылка));
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.ВидСвязи = 2 Тогда
			ЭтоИсправленныйДокумент = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ЭтоИсправленныйДокумент;

КонецФункции

&НаСервере
Функция ПредставлениеДокументаНаПечать(ДокументНаПечать)

	ВидДок = ДокументНаПечать.Метаданные().Синоним;
	НомерДок = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументНаПечать.Номер);
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 №%2'"), ВидДок, НомерДок);

КонецФункции

&НаСервере
Функция СтрокаПериодаНаПечать(ДокументНаПечать)

	ОписаниеДокумента = ЦепочкиДокументов.ОписаниеДокументовЗамещения(ДокументНаПечать);
	
	СтрокаРеквизитов = "";
	Если ОписаниеДокумента.ИмяРеквизитаДатаНачалаСобытия <> Неопределено Тогда
		СтрокаРеквизитов = СтрокаРеквизитов + ОписаниеДокумента.ИмяРеквизитаДатаНачалаСобытия;
	КонецЕсли;
	Если ОписаниеДокумента.ИмяРеквизитаДатаОкончанияСобытия <> Неопределено Тогда
		СтрокаРеквизитов = СтрокаРеквизитов + ?(ПустаяСтрока(СтрокаРеквизитов), "", ",") + ОписаниеДокумента.ИмяРеквизитаДатаОкончанияСобытия;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументНаПечать, СтрокаРеквизитов);
	
	ДатаНачала = ?(ОписаниеДокумента.ИмяРеквизитаДатаНачалаСобытия <> Неопределено, ЗначенияРеквизитов[ОписаниеДокумента.ИмяРеквизитаДатаНачалаСобытия], '00010101');
	ДатаОкончания = ?(ОписаниеДокумента.ИмяРеквизитаДатаОкончанияСобытия <> Неопределено, ЗначенияРеквизитов[ОписаниеДокумента.ИмяРеквизитаДатаОкончанияСобытия], '00010101');
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		СтрокаПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'с %1 по %2'"),
			Формат(ДатаНачала, "ДЛФ=D"),
			Формат(ДатаОкончания, "ДЛФ=D"));
	ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
		СтрокаПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'с %1'"),
			Формат(ДатаНачала, "ДЛФ=D"));
	Иначе
		СтрокаПериода = "";
	КонецЕсли;
	
	Возврат СтрокаПериода;

КонецФункции

&НаСервере
Функция ОтменитьСвязьНаСервере()

	ОтменаПроведена = Ложь;
	
	ТекущаяОбласть = Элементы.ПолеОтчета.ТекущаяОбласть;
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат ОтменаПроведена;
	КонецЕсли;
	
	ДокументРасшифровка = ТекущаяОбласть.Расшифровка;
	Если Не ЗначениеЗаполнено(ДокументРасшифровка) Тогда
		Возврат ОтменаПроведена;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	НайденныеСтроки = ТаблицаСвязей.НайтиСтроки(Новый Структура("Подчиненный", ДокументРасшифровка));
	Для каждого НайденнаяСтрока Из  НайденныеСтроки Цикл
		Если НайденнаяСтрока.ВидСвязи <> 0 Тогда
			Продолжить;
		КонецЕсли;
		// Отменяем связь с основанием.
		НаборЗаписей = РегистрыСведений.ЦепочкиДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Основание.Установить(НайденнаяСтрока.Основание);
		НаборЗаписей.Отбор.Подчиненный.Установить(НайденнаяСтрока.Подчиненный);
		НаборЗаписей.Записать(Истина);
		ОтменаПроведена = Истина;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОтменаПроведена;
	
КонецФункции

&НаСервере
Процедура УдалитьОткрытыйУровень(НомерУровня)

	ИндексУровня = ОткрытыеУровни.Найти(НомерУровня);
	Если ИндексУровня <> Неопределено Тогда
		ОткрытыеУровни.Удалить(ИндексУровня);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТекстЗапросаВТДокументы(Запрос, АнализируемыйТипДокумента, ПервыйЗапрос)

	ИмяДокумента = Метаданные.НайтиПоТипу(АнализируемыйТипДокумента).Имя;
	ОписаниеДокумента = Документы[ИмяДокумента].ОписаниеДокумента();
	
	Если ПервыйЗапрос Тогда
		ТекстЗапроса = "";
	Иначе
		ТекстЗапроса =
			"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ЗапросДокументов.Подчиненный КАК Подчиненный,
		|	ЗапросДокументов.Основание КАК Основание,
		|	ЗапросДокументов.Подчиненный.%ИмяРеквизитаСотрудник% КАК ПодчиненныйСотрудник,
		|	ЗапросДокументов.Основание.%ИмяРеквизитаСотрудник% КАК ОснованиеСотрудник
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(%ИмяДокумента%.Ссылка) КАК Подчиненный,
		|		%ИмяДокумента%.ИсправленныйДокумент КАК Основание
		|	ИЗ
		|		Документ.%ИмяДокумента% КАК %ИмяДокумента%
		|	ГДЕ
		|		%ИмяДокумента%.ИсправленныйДокумент В(&АнализируемыеДокументы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		%ИмяДокумента%.ИсправленныйДокумент) КАК ЗапросДокументов";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ИмяДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРеквизитаСотрудник%", ОписаниеДокумента.ИмяРеквизитаСотрудник);
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;

КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуСвязей(ТаблицаРезультата, НомерСвязи)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаРезультата", ТаблицаРезультата);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаРезультата.Подчиненный,
		|	ТаблицаРезультата.Основание,
		|	ТаблицаРезультата.ПодчиненныйСотрудник,
		|	ТаблицаРезультата.ОснованиеСотрудник
		|ПОМЕСТИТЬ ВТДокументы
		|ИЗ
		|	&ТаблицаРезультата КАК ТаблицаРезультата";
	
	Запрос.Текст = Запрос.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТДокументы.ПодчиненныйСотрудник КАК Сотрудник,
		|	&Период КАК Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТДокументы КАК ВТДокументы
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТДокументы.ОснованиеСотрудник,
		|	&Период
		|ИЗ
		|	ВТДокументы КАК ВТДокументы";
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "ФамилияИО");
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТДокументы.Основание,
		|	ВТДокументы.Подчиненный,
		|	ЕСТЬNULL(Сотрудники.ФамилияИО, """") КАК СотрудникОснованияФамилияИО,
		|	ЕСТЬNULL(СотрудникиДругие.ФамилияИО, """") КАК СотрудникПодчиненногоФамилияИО
		|ИЗ
		|	ВТДокументы КАК ВТДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК Сотрудники
		|		ПО ВТДокументы.ПодчиненныйСотрудник = Сотрудники.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК СотрудникиДругие
		|		ПО ВТДокументы.ОснованиеСотрудник = СотрудникиДругие.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСвязь = ТаблицаСвязей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСвязь, Выборка);
		НоваяСвязь.ВидСвязи = НомерСвязи;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПустаяТаблицаСвязей()

	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Подчиненный", Документы.ТипВсеСсылки());
	ТаблицаРезультата.Колонки.Добавить("Основание", Документы.ТипВсеСсылки());
	ТаблицаРезультата.Колонки.Добавить("ПодчиненныйСотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаРезультата.Колонки.Добавить("ОснованиеСотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Возврат ТаблицаРезультата;

КонецФункции

&НаСервере
Процедура УстановитьУровниПервойСтроки(УровниДокументов, ТаблицаСвязей)

	Если ТаблицаСвязей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСвязи = ТаблицаСвязей[0];
	
	УровниДокументов[СтрокаСвязи.Основание] = 0;
	УровниДокументов[СтрокаСвязи.Подчиненный] = ?(СтрокаСвязи.ВидСвязи = 0, 1,0);
		
КонецПроцедуры

#КонецОбласти