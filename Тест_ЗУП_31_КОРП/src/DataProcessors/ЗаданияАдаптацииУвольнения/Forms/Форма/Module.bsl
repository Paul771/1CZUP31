
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияДляЗаполнения  = Новый Структура("Организация", "Организация");
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ЗарплатаКадры.ПерваяДоступнаяОрганизация();
	КонецЕсли;
	
	УстановитьОтборы();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗадачаИсполнителя" Тогда
		Элементы.ЗадачиАдаптацииУвольнения.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборСписка(ЗадачиАдаптацииУвольнения, Новый Структура("Организация", Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятиеПриИзменении(Элемент)
	
	УстановитьОтборСписка(ЗадачиАдаптацииУвольнения, Новый Структура("Мероприятие", Мероприятие));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьВыполненныеПриИзменении(Элемент)
	
	УстановитьОтборСписка(ЗадачиАдаптацииУвольнения, Новый Структура("ПоказыватьВыполненные", ПоказыватьВыполненные));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОтложенныеПриИзменении(Элемент)
	
	УстановитьОтборСписка(ЗадачиАдаптацииУвольнения, Новый Структура("ПоказыватьОтложенные", ПоказыватьОтложенные));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОстановленныеПриИзменении(Элемент)
	
	УстановитьОтборСписка(ЗадачиАдаптацииУвольнения, Новый Структура("ПоказыватьОстановленные", ПоказыватьОстановленные));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиАдаптацииУвольнения

&НаКлиенте
Процедура ЗадачиАдаптацииУвольненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Задача) И Не ТекущиеДанные.Отложена Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Задача);
	Иначе
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Задание);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьВыделенные(Команда)
	
	ВыполнитьЗадачи(Элементы.ЗадачиАдаптацииУвольнения.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенные(Команда)
	
	ВыполнитьЗадачи(Элементы.ЗадачиАдаптацииУвольнения.ВыделенныеСтроки, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборы()
	
	Отборы = Новый Структура;
	Отборы.Вставить("Организация", Организация);
	Отборы.Вставить("Мероприятие", Мероприятие);
	Отборы.Вставить("ПоказыватьВыполненные", ПоказыватьВыполненные);
	Отборы.Вставить("ПоказыватьОтложенные", ПоказыватьОтложенные);
	Отборы.Вставить("ПоказыватьОстановленные", ПоказыватьОстановленные);
	
	УстановитьОтборСписка(ЗадачиАдаптацииУвольнения, Отборы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСписка(ЗадачиАдаптацииУвольнения, Отборы)
	
	Если Отборы.Свойство("Организация") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиАдаптацииУвольнения, "Организация", Отборы.Организация,,, ЗначениеЗаполнено(Отборы.Организация));
	КонецЕсли;
	
	Если Отборы.Свойство("Мероприятие") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиАдаптацииУвольнения, "Мероприятие", Отборы.Мероприятие,,, ЗначениеЗаполнено(Отборы.Мероприятие));
	КонецЕсли;
	
	Если Отборы.Свойство("ПоказыватьВыполненные") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиАдаптацииУвольнения, "Выполнена", Ложь,,, Не Отборы.ПоказыватьВыполненные);
	КонецЕсли;
	
	Если Отборы.Свойство("ПоказыватьОтложенные") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиАдаптацииУвольнения, "Отложена", Ложь,,, Не Отборы.ПоказыватьОтложенные);
	КонецЕсли;
	
	Если Отборы.Свойство("ПоказыватьОстановленные") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиАдаптацииУвольнения, "Остановлена", Ложь,,, Не Отборы.ПоказыватьОстановленные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = ЗадачиАдаптацииУвольнения.УсловноеОформление.Элементы.Добавить();
	Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗавершенныйБизнесПроцесс);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор, "Выполнена", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачи(ИдентификаторыВыделенныхСтрок, ЗаданияВыполнены = Истина)
	
	Задачи = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыВыделенныхСтрок Цикл
		
		ДанныеСтроки = Элементы.ЗадачиАдаптацииУвольнения.ДанныеСтроки(ИдентификаторСтроки);
			
		Если Не ДанныеСтроки.Отложена 
			И Не ДанныеСтроки.Выполнена 
			И Не ДанныеСтроки.Остановлена Тогда
			Задачи.Добавить(ДанныеСтроки.Задача);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Задачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("Задачи, ЗаданияВыполнены, ТребуетсяРезультатВыполнения", 
		Задачи, ЗаданияВыполнены, Ложь);
	
	Если ЗаданияВыполнены Тогда
		ВыполнитьЗадачиЗавершение("", ДопПараметры);
	Иначе
		ДопПараметры.ТребуетсяРезультатВыполнения = Истина;
		Обработчик = Новый ОписаниеОповещения("ВыполнитьЗадачиЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВводСтроки(Обработчик, , НСтр("ru = 'Укажите причину отклонения'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачиЗавершение(РезультатВвода, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатВвода) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачиНаСервере(РезультатВвода, ДопПараметры);
	
	Элементы.ЗадачиАдаптацииУвольнения.Обновить();
	ОповеститьОбИзменении(Тип("ЗадачаСсылка.ЗадачаИсполнителя"));
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачиНаСервере(РезультатВыполнения, ПараметрыВыполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Задача Из ПараметрыВыполнения.Задачи Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Задача);
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			
			Задание = ЗадачаОбъект.БизнесПроцесс;
			ЗаблокироватьДанныеДляРедактирования(Задание);
			ЗаданиеОбъект = Задание.ПолучитьОбъект();
			
			ЗаданиеОбъект.Выполнено = ПараметрыВыполнения.ЗаданияВыполнены;
			ЗаданиеОбъект.Записать();
			
			ЗадачаОбъект.РезультатВыполнения = РезультатВыполнения;
			ЗадачаОбъект.ВыполнитьЗадачу();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ИмяДействия = ?(ПараметрыВыполнения.ЗаданияВыполнены, НСтр("ru = 'выполнить'"), НСтр("ru = 'отменить'"));
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось %1 задачу ""%2"" по причине:
				|%3'"), ИмяДействия, Задача, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Задача);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
