
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Заголовок", Заголовок);
	Параметры.Свойство("ВидЗаявки", ВидЗаявки);
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	ДополнитьФорму(ВидЗаявки);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СотрудникиКартинка" Тогда 
		ПоказатьЗначение(, Элементы.Сотрудники.ТекущиеДанные.ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	СтруктураОтбора = Новый Структура("ДатаПримененияОтбора", ДатаСеанса);
	ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	
	КадровыйУчетКлиент.ВыбратьФизическихЛицОрганизации(Элементы.Сотрудники, Организация, Истина, , АдресСпискаПодобранныхСотрудников(), , ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявки(Команда)
	
	Если Не ЗначениеЗаполнено(ВидЗаявки) Тогда 
		Возврат;
	КонецЕсли;
	
	СоздатьЗаявкиНаСервере();
	
	ОповеститьОбИзменении(Тип("ДокументСсылка." + ВидЗаявки));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДополнитьФорму(ВидЗаявки)
	
	ТипДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Если ВидЗаявки = "ЗаявкаНаКомандировку" Тогда 
		
		// Добавление реквизитов
		ДобавляемыеРеквизиты = Новый Массив;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДатаНачала", ТипДата, "Сотрудники", НСтр("ru = 'Начало'")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДатаОкончания", ТипДата, "Сотрудники", НСтр("ru = 'Окончание'")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("МестоНазначения", Новый ОписаниеТипов("Строка"), "Сотрудники", НСтр("ru = 'Место назначения'")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОрганизацияНазначения", Новый ОписаниеТипов("Строка"), "Сотрудники", НСтр("ru = 'Организация назначения'")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Цель", Новый ОписаниеТипов("Строка"), "Сотрудники", НСтр("ru = 'Цель'")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументСсылка", Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаКомандировку"), "Сотрудники"));
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтотОбъект, МассивИменРеквизитовФормы, "Сотрудники");
		
		ЗарплатаКадры.ИзменитьРеквизитыФормы(ЭтотОбъект, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
		
		// Добавление элементов формы
		Если Элементы.Найти("СотрудникиДатаНачала") = Неопределено Тогда 
			ЭлементДатаНачала = Элементы.Добавить("СотрудникиДатаНачала", Тип("ПолеФормы"), Элементы.Сотрудники);
			ЭлементДатаНачала.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементДатаНачала.ПутьКДанным = "Сотрудники.ДатаНачала";
			ЭлементДатаНачала.Ширина = 10;
			ЭлементДатаНачала.РастягиватьПоГоризонтали = Ложь;
			ЭлементДатаНачала.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		Если Элементы.Найти("СотрудникиДатаОкончания") = Неопределено Тогда 
			ЭлементДатаОкончания = Элементы.Добавить("СотрудникиДатаОкончания", Тип("ПолеФормы"), Элементы.Сотрудники);
			ЭлементДатаОкончания.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементДатаОкончания.ПутьКДанным = "Сотрудники.ДатаОкончания";
			ЭлементДатаОкончания.Ширина = 10;
			ЭлементДатаОкончания.РастягиватьПоГоризонтали = Ложь;
			ЭлементДатаОкончания.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		Если Элементы.Найти("СотрудникиМестоНазначения") = Неопределено Тогда 
			ЭлементМестоНазначения = Элементы.Добавить("СотрудникиМестоНазначения", Тип("ПолеФормы"), Элементы.Сотрудники);
			ЭлементМестоНазначения.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементМестоНазначения.ПутьКДанным = "Сотрудники.МестоНазначения";
			ЭлементМестоНазначения.Ширина = 20;
			ЭлементМестоНазначения.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;
		
		Если Элементы.Найти("СотрудникиОрганизацияНазначения") = Неопределено Тогда 
			ЭлементОрганизацияНазначения = Элементы.Добавить("СотрудникиОрганизацияНазначения", Тип("ПолеФормы"), Элементы.Сотрудники);
			ЭлементОрганизацияНазначения.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементОрганизацияНазначения.ПутьКДанным = "Сотрудники.ОрганизацияНазначения";
			ЭлементОрганизацияНазначения.Ширина = 20;
			ЭлементОрганизацияНазначения.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;
		
		Если Элементы.Найти("СотрудникиЦель") = Неопределено Тогда 
			ЭлементЦель = Элементы.Добавить("СотрудникиЦель", Тип("ПолеФормы"), Элементы.Сотрудники);
			ЭлементЦель.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементЦель.ПутьКДанным = "Сотрудники.Цель";
			ЭлементЦель.Ширина = 20;
			ЭлементЦель.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;
		
	ИначеЕсли ВидЗаявки = "ЗаявкаНаОтпуск" Тогда
		
		// Добавление реквизитов
		ДобавляемыеРеквизиты = Новый Массив;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДатаНачала", ТипДата, "Сотрудники", НСтр("ru = 'Начало'")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДатаОкончания", ТипДата, "Сотрудники", НСтр("ru = 'Окончание'")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОписаниеОтпуска", Новый ОписаниеТипов("Строка"), "Сотрудники", НСтр("ru = 'Описание отпуска'")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КоличествоДней", Новый ОписаниеТипов("Число"), "Сотрудники"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументСсылка", Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаОтпуск"), "Сотрудники"));
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтотОбъект, МассивИменРеквизитовФормы, "Сотрудники");
		
		ЗарплатаКадры.ИзменитьРеквизитыФормы(ЭтотОбъект, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
		
		// Добавление элементов формы
		Если Элементы.Найти("СотрудникиДатаНачала") = Неопределено Тогда 
			ЭлементДатаНачала = Элементы.Добавить("СотрудникиДатаНачала", Тип("ПолеФормы"), Элементы.Сотрудники);
			ЭлементДатаНачала.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементДатаНачала.ПутьКДанным = "Сотрудники.ДатаНачала";
			ЭлементДатаНачала.Ширина = 10;
			ЭлементДатаНачала.РастягиватьПоГоризонтали = Ложь;
			ЭлементДатаНачала.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		Если Элементы.Найти("СотрудникиДатаОкончания") = Неопределено Тогда 
			ЭлементДатаОкончания = Элементы.Добавить("СотрудникиДатаОкончания", Тип("ПолеФормы"), Элементы.Сотрудники);
			ЭлементДатаОкончания.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементДатаОкончания.ПутьКДанным = "Сотрудники.ДатаОкончания";
			ЭлементДатаОкончания.Ширина = 10;
			ЭлементДатаОкончания.РастягиватьПоГоризонтали = Ложь;
			ЭлементДатаОкончания.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		Если Элементы.Найти("СотрудникиОписаниеОтпуска") = Неопределено Тогда 
			ЭлементОписаниеОтпуска = Элементы.Добавить("СотрудникиОписаниеОтпуска", Тип("ПолеФормы"), Элементы.Сотрудники);
			ЭлементОписаниеОтпуска.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементОписаниеОтпуска.ПутьКДанным = "Сотрудники.ОписаниеОтпуска";
			ЭлементОписаниеОтпуска.Ширина = 40;
			ЭлементОписаниеОтпуска.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(ОбщегоНазначения.ВыгрузитьКолонку(Сотрудники, "ФизическоеЛицо"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура СотрудникиОбработкаВыбораНаСервере(ФизическиеЛица)
	
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл 
		Сотрудники.Добавить().ФизическоеЛицо = ФизическоеЛицо;
	КонецЦикла;
	
	Сотрудники.Сортировать("ФизическоеЛицо");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаявкиНаСервере()
	
	Отказ = Ложь;
	ПроверитьЗаполнениеФормы(Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВидЗаявки = "ЗаявкаНаОтпуск" Тогда
		ЗаполнитьКоличествоДнейОтпуска();
	КонецЕсли;
	
	Для Каждого СтрокаФизическогоЛица Из Сотрудники Цикл 
		
		ДокументОбъект = ?(ЗначениеЗаполнено(СтрокаФизическогоЛица.ДокументСсылка), 
			СтрокаФизическогоЛица.ДокументСсылка.ПолучитьОбъект(), Документы[ВидЗаявки].СоздатьДокумент());
		
		ЗаполняемыеЗначения = Новый Структура("Ответственный", Справочники.Пользователи.ПустаяСсылка());
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения);
		
		ЗаполняемыеЗначения.Вставить("Дата", ДатаСеанса);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗаполняемыеЗначения);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаФизическогоЛица);
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		СтрокаФизическогоЛица.ДокументСсылка = ДокументОбъект.Ссылка;
		СтрокаФизическогоЛица.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заявки успешно созданы.'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоДнейОтпуска()
	
	СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(Сотрудники, "ФизическоеЛицо");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, Ложь, Неопределено, ДатаСеанса);
	
	ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаСотрудника Из ТаблицаСотрудников Цикл 
		Отбор = Новый Структура("ФизическоеЛицо", СтрокаСотрудника.ФизическоеЛицо);
		СтрокаФизическогоЛица = Сотрудники.НайтиСтроки(Отбор)[0];
		ЗаполнитьЗначенияСвойств(СтрокаСотрудника, СтрокаФизическогоЛица, "ДатаНачала, ДатаОкончания");
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСотрудников.Сотрудник КАК ГрафикРаботы,
	               |	ТаблицаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ТаблицаСотрудников.ДатаНачала КАК НачалоПериода,
	               |	ТаблицаСотрудников.ДатаОкончания КАК ОкончаниеПериода
	               |ПОМЕСТИТЬ ВТПериодыГрафиков
	               |ИЗ
	               |	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.Выполнить();
	
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеПроизводственногоКалендаряПоГрафикам(Запрос.МенеджерВременныхТаблиц);
	
	ОписаниеВидаОтпуска = ОстаткиОтпусков.ОписаниеВидаОтпуска(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.УстановитьПараметр("ПоКалендарнымДням", ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням);
	Запрос.УстановитьПараметр("БезУчетаПраздников", ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПериодыГрафиков.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ПериодыГрафиков.НачалоПериода КАК ДатаНачала,
	               |	ПериодыГрафиков.ОкончаниеПериода КАК ДатаОкончания,
	               |	ВЫБОР
	               |		КОГДА &ПоКалендарнымДням
	               |			ТОГДА ВЫБОР
	               |					КОГДА &БезУчетаПраздников
	               |						ТОГДА ДанныеКалендаря.ДнейКалендарныхБезУчетаПраздников
	               |					ИНАЧЕ ДанныеКалендаря.ДнейКалендарных
	               |				КОНЕЦ
	               |		ИНАЧЕ ДанныеКалендаря.ДнейПоШестидневке
	               |	КОНЕЦ КАК ДлительностьИнтервала
	               |ИЗ
	               |	ВТДанныеПроизводственногоКалендаряПоГрафикам КАК ДанныеКалендаря
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыГрафиков КАК ПериодыГрафиков
	               |		ПО ДанныеКалендаря.ГрафикРаботы = ПериодыГрафиков.ГрафикРаботы
	               |			И ДанныеКалендаря.НачалоПериода = ПериодыГрафиков.НачалоПериода
	               |			И ДанныеКалендаря.ОкончаниеПериода = ПериодыГрафиков.ОкончаниеПериода";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отбор = Новый Структура("ФизическоеЛицо, ДатаНачала, ДатаОкончания");
	
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		СтрокаФизическогоЛица = Сотрудники.НайтиСтроки(Отбор)[0];
		СтрокаФизическогоЛица.КоличествоДней = Выборка.ДлительностьИнтервала;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеФормы(Отказ)
	
	Для Каждого СтрокаФизическогоЛица Из Сотрудники Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаФизическогоЛица.ФизическоеЛицо) Тогда
			ИндексСтроки = Сотрудники.Индекс(СтрокаФизическогоЛица);
			ТекстСообщения = НСтр("ru = 'Не указан сотрудник.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Сотрудники[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].ФизическоеЛицо", , Отказ);
			Продолжить;
		КонецЕсли;	
		
		Если ВидЗаявки = "ЗаявкаНаКомандировку" Или ВидЗаявки = "ЗаявкаНаОтпуск" Тогда 
			
			Если Не ЗначениеЗаполнено(СтрокаФизическогоЛица.ДатаНачала) Тогда
				ИндексСтроки = Сотрудники.Индекс(СтрокаФизическогоЛица);
				ТекстСообщения = НСтр("ru = 'Работник %1: не указана дата начала.'");
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаФизическогоЛица.ФизическоеЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Сотрудники[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].ДатаНачала", , Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаФизическогоЛица.ДатаОкончания) Тогда
				ИндексСтроки = Сотрудники.Индекс(СтрокаФизическогоЛица);
				ТекстСообщения = НСтр("ru = 'Работник %1: не указана дата окончания.'");
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаФизическогоЛица.ФизическоеЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Сотрудники[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].ДатаОкончания", , Отказ);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаФизическогоЛица.ДатаНачала) И ЗначениеЗаполнено(СтрокаФизическогоЛица.ДатаОкончания) 
				И СтрокаФизическогоЛица.ДатаНачала > СтрокаФизическогоЛица.ДатаОкончания Тогда
				ИндексСтроки = Сотрудники.Индекс(СтрокаФизическогоЛица);
				ТекстСообщения = НСтр("ru = 'Работник %1: дата начала больше даты окончания.'");
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаФизическогоЛица.ФизическоеЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Сотрудники[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].ДатаНачала", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	Диалог.Фильтр = "Документы Excel(*.xls)|*.xls|Документы Excel 2007(*.xlsx)|*.xlsx";
	Диалог.ПроверятьСуществованиеФайла = Истина; 
	Диалог.ПолноеИмяФайла = ""; 
	Диалог.МножественныйВыбор = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзExcelЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcelЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось загрузить данные из файла Excel.
		                               |Убедитесь, что программа Microsoft Excel установлена.
		                               |Подробности:'")
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	COMОбъект.AutomationSecurity = 3;
	
	Попытка
		Workbook 	= COMОбъект.Workbooks.Open(ВыбранныеФайлы[0],,Истина,,,,,,,,Ложь);
		Sheet 		= Workbook.Worksheets(1);
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось прочитать данные из файла. Подробности:'") + " "
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	ДанныеФизическихЛиц = Новый Соответствие;
	
	КолонкиДанных = Новый Соответствие;
	
	Если ВидЗаявки = "ЗаявкаНаКомандировку" Тогда 
		
		КолонкиДанных.Вставить(2, "ДатаНачала");
		КолонкиДанных.Вставить(3, "ДатаОкончания");
		КолонкиДанных.Вставить(4, "МестоНазначения");
		КолонкиДанных.Вставить(5, "ОрганизацияНазначения");
		КолонкиДанных.Вставить(6, "Цель");
		
	ИначеЕсли ВидЗаявки = "ЗаявкаНаОтпуск" Тогда
		
		КолонкиДанных.Вставить(2, "ДатаНачала");
		КолонкиДанных.Вставить(3, "ДатаОкончания");
		КолонкиДанных.Вставить(4, "ОписаниеОтпуска");
		
	КонецЕсли;
	
	// Загрузка данных
	Попытка
	
		КоличествоСтрок 	= Sheet.Cells(1,1).SpecialCells(11).Row;
		КоличествоКолонок 	= Sheet.Cells(1,1).SpecialCells(11).Column;
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл 
			
			ДанныеФизическогоЛица = Новый Структура;
			
			Для НомерКолонки = 2 По КоличествоКолонок Цикл 
				
				ИмяКолонки = КолонкиДанных[НомерКолонки];
				Если ИмяКолонки = Неопределено Тогда 
					Прервать;
				КонецЕсли;
				
				ЗначениеКолонки = Sheet.Cells(НомерСтроки, НомерКолонки).Value;
				ДанныеФизическогоЛица.Вставить(ИмяКолонки, ЗначениеКолонки);
				
			КонецЦикла;
			
			ФИОПолные = СокрЛП(Sheet.Cells(НомерСтроки, 1).Value);
			ДанныеФизическихЛиц.Вставить(ФИОПолные, ДанныеФизическогоЛица);
			
		КонецЦикла;
		
		Workbook.Close(0);
		
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось прочитать данные из файла. Подробности:'") + " "
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	COMОбъект.Quit();
	COMОбъект = 0;
	
	ЗагрузитьИзExcelНаСервере(ДанныеФизическихЛиц);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзExcelНаСервере(ДанныеФизическихЛиц)
	
	КадровыеДанные = "ФИОПолные";
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ДатаСеанса;
	ПараметрыПолученияСотрудников.КадровыеДанные = КадровыеДанные;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПолученияСотрудников.Отборы, "ФИОПолные", "В", ОбщегоНазначения.ВыгрузитьКолонку(ДанныеФизическихЛиц, "Ключ"));
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
	СотрудникиОрганизации.Свернуть("ФизическоеЛицо, ФИОПолные");
	
	Для Каждого КлючИЗначение Из ДанныеФизическихЛиц Цикл 
		
		СтрокаФизическогоЛица = СотрудникиОрганизации.Найти(КлючИЗначение.Ключ, "ФИОПолные");
		Если СтрокаФизическогоЛица = Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден сотрудник %1'"), КлючИЗначение.Ключ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Сотрудники.Добавить();
		НоваяСтрока.ФизическоеЛицо = СтрокаФизическогоЛица.ФизическоеЛицо;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Сотрудники.Сортировать("ФизическоеЛицо");
	
КонецПроцедуры

#КонецОбласти
