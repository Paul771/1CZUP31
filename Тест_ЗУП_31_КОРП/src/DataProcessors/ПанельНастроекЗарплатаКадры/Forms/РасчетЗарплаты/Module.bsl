
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиПрограммыБюджетногоУчреждения = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
	РаботаВБюджетномУчреждении = НастройкиПрограммыБюджетногоУчреждения.РаботаВБюджетномУчреждении;
	ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы = ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы")
		И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы");
	
	УчетПоСтатьямФинансированияЗарплата.ДополнитьФормуНастройкаРасчетаЗарплаты(ЭтаФорма);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Модуль.ДополнитьФормуНастройкаРасчетаЗарплаты(ЭтотОбъект);
	КонецЕсли;
	
	ПрочитатьНастройки();
	
	ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТрудаПоСреднегодовомуЗначению = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению;
	ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТрудаПустаяСсылка = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПустаяСсылка();
	                                                                        	
	ИспользоватьСтатьиФинансированияОписание = НСтр("ru = 'Возможность учета по статьям финансирования рекомендуется использовать некоммерческим организациям и унитарным предприятиям любого уровня только при наличии целевого финансирования.'");
	ИспользоватьИФООписание = НСтр("ru = 'Ведение учета в разрезе источников финансового обеспечения (ИФО), указание ИФО будет доступно в статье финансирования.'");
	Элементы.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферыОписание.Ширина = ?(РаботаВБюджетномУчреждении,70,35);
	Элементы.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферыОписание.Высота = ?(РаботаВБюджетномУчреждении,2,5);
	Если РаботаВБюджетномУчреждении Тогда
		Элементы.НастройкиРасчетаЗарплатыИспользоватьТарифныеСеткиПриРасчетеЗарплаты.Заголовок = НСтр("ru = 'Используются ПКГ и ПКУ'");
		Элементы.Декорация10.Заголовок = НСтр("ru = 'Использование профессиональных квалификационных групп и уровней при описании позиции штатного расписания и при расчете заработной платы.'");
		ИспользоватьВедомостиДляВыплатыПрочихДоходовОписание = 
			НСтр("ru = 'Использование профессиональных квалификационных групп и уровней при описании позиции штатного расписания и при расчете заработной платы.'");
	Иначе
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
			Элементы.Декорация10.Заголовок = НСтр("ru = 'Использование разрядов (квалификационных категорий) сотрудников и тарифных групп при расчете заработной платы.'");
		КонецЕсли;
	КонецЕсли;
	
	РазрешеноИзменениеПКУВКадровыхДокументахИнфоНадпись = НСтр("ru = 'Изменение профессиональных квалификационных уровней в кадровых документах.'");
	
	ИспользоватьКвалификационнуюНадбавкуОписание = НСтр("ru = 'Использование квалификационных категорий и квалификационных надбавок можно включить на форме Настройка начислений и удержаний.'");
	
	ОписаниеГруппНастроек = Новый ФиксированнаяСтруктура(Обработки.ПанельНастроекЗарплатаКадры.ОписаниеГруппНастроек());
	
	ОбновитьФормуПоНастройкам(Параметры.ПрочиеНастройки);
	
	УстановитьСвойстваЭлементовНастроекУчетаВремени(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ТребуетсяОбновлениеИнтерфейса Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	Оповестить("НастройкаРасчетаЗарплатыЗаписана",,ЭтаФорма.ВладелецФормы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоНастройкам(ПрочиеНастройки)

	ОбновитьФормуПоНастройкеИспользоватьНачислениеЗарплаты(ЭтаФорма);
	ОбновитьФормуПоНастройкеИспользоватьСтатьиФинансирования(ЭтаФорма);
	ОбновитьДоступностьНастроекОтчетаМониторингаРаботниковСоциальнойСферы(ЭтаФорма);
	ОбновитьФормуПоНастройкеИспользоватьТарифныеСеткиПриРасчетеЗарплаты(ЭтаФорма);
	ОбновитьФормуПоНастройкамНезарплатныхДоходов(ЭтаФорма);
	
	// Определяем отображается ли глобальная настройка по отключению всей библиотеки.
	// Если отображается, то отдельно настройку использования расчета зарплаты не показываем.
	ДоступностьУстановкиИспользованияКадровогоУчетаИРасчетаЗарплаты = Ложь;
	ЗарплатаКадрыРасширенныйПереопределяемый.ОпределитьДоступностьУстановкиИспользованияЗарплатаКадры(ДоступностьУстановкиИспользованияКадровогоУчетаИРасчетаЗарплаты);
	
	Если ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации() Тогда
		
		ИспользоватьИндексациюЗаработкаИнфоТекст = НСтр("ru = 'Индексация (повышение) заработка сотрудников выполняется в целом по организации (структурному подразделению) и учитывается при расчете среднего заработка.'");
		
		Если ПрочиеНастройки Тогда
			
			Для каждого ГруппаНастроекКлючИЗначение Из ОписаниеГруппНастроек Цикл
				Если ГруппаНастроекКлючИЗначение.Значение Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					ГруппаНастроекКлючИЗначение.Ключ,
					"Видимость",
					Ложь);
				КонецЕсли;
			КонецЦикла;
			
			Элементы.РедактированиеПрочихНастроекРасчетаЗарплаты.Видимость = Ложь;
			
			Если ДоступностьУстановкиИспользованияКадровогоУчетаИРасчетаЗарплаты Тогда
				Элементы.ГруппаИспользоватьРасчетЗарплаты.Видимость = Ложь;
			Иначе
				Элементы.ГруппаИспользоватьРасчетЗарплаты.Видимость = НЕ РаботаВБюджетномУчреждении;	
			КонецЕсли;
			
		Иначе
			
			Для каждого ГруппаНастроекКлючИЗначение Из ОписаниеГруппНастроек Цикл
				Если Не ГруппаНастроекКлючИЗначение.Значение Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					ГруппаНастроекКлючИЗначение.Ключ,
					"Видимость",
					Ложь);
				КонецЕсли;
			КонецЦикла;
			
			Элементы.ГруппаИспользоватьРасчетЗарплаты.Видимость = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ИспользоватьИндексациюЗаработкаИнфоТекст = НСтр("ru = 'Индексация (повышение) заработка сотрудников выполняется в целом по организации (филиалу, структурному подразделению) и учитывается при расчете среднего заработка.'");
		
		Если ДоступностьУстановкиИспользованияКадровогоУчетаИРасчетаЗарплаты Тогда
			Элементы.ГруппаИспользоватьРасчетЗарплаты.Видимость = Ложь;
		Иначе
			Элементы.ГруппаИспользоватьРасчетЗарплаты.Видимость = НЕ РаботаВБюджетномУчреждении;
		КонецЕсли;
		
		Элементы.РедактированиеПрочихНастроекРасчетаЗарплаты.Видимость = Ложь;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					"ГруппаИспользоватьВедомостиДляВыплатыПрочихДоходов",
					"Видимость",
					ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы);
					
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					"ГруппаСтавкиМеждународныхДоговоров",
					"Видимость",
					ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "НастройкаРасчетаЗарплатыЗаписана" И Источник = ЭтаФорма Тогда
		ОбработкаОповещенияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере()
	
	ПрочитатьНастройки();

КонецПроцедуры

&НаКлиенте
Процедура НастройкаНачисленийУдержаний(Команда)
	
	ОткрытьФорму("Обработка.ПанельНастроекЗарплатаКадры.Форма.НастройкаНачисленийУдержаний");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьНачислениеЗарплатыПриИзменении(Элемент)
	
	УстановитьЗначенияЗависимыхНастроекРасчетаЗарплаты();
	
	ЗаписатьНастройкиНаКлиенте("ИспользоватьСтатьиФинансирования,НастройкиСтатистикиПерсонала,НастройкиРасчетаЗарплаты,НастройкиЗаймовСотрудникам,ИспользоватьНачислениеЗарплаты,РассчитыватьДокументыПриРедактировании");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();

	ОбновитьФормуПоНастройкеИспользоватьНачислениеЗарплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьНачислениеЗарплаты(Форма)
	
	Форма.Элементы.ГруппаНастройки.Доступность = Форма.ИспользоватьНачислениеЗарплаты;
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндексациюЗаработкаПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьИндексациюЗаработка = ИспользоватьИндексациюЗаработка;
	НастройкиРасчетаЗарплатыПрежняя.ИспользоватьИндексациюЗаработка = НастройкиРасчетаЗарплаты.ИспользоватьИндексациюЗаработка;
	
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПризыПодаркиПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьПризыПодарки = ИспользоватьПризыПодарки;
	НастройкиРасчетаЗарплатыПрежняя.ИспользоватьПризыПодарки = НастройкиРасчетаЗарплаты.ИспользоватьПризыПодарки;
	
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереноситьДанныеВДругойУчетСреднегоЗаработкаПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ПереноситьДанныеВДругойУчетСреднегоЗаработка = ПереноситьДанныеВДругойУчетСреднегоЗаработка;
	НастройкиРасчетаЗарплатыПрежняя.ПереноситьДанныеВДругойУчетСреднегоЗаработка = НастройкиРасчетаЗарплаты.ПереноситьДанныеВДругойУчетСреднегоЗаработка;
	
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();

КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьНачалоРасчетногоПериодаСреднегоЗаработкаДатойПриемаПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ОграничиватьНачалоРасчетногоПериодаСреднегоЗаработкаДатойПриема = ОграничиватьНачалоРасчетногоПериодаСреднегоЗаработкаДатойПриема;
	НастройкиРасчетаЗарплатыПрежняя.ОграничиватьНачалоРасчетногоПериодаСреднегоЗаработкаДатойПриема = НастройкиРасчетаЗарплаты.ОграничиватьНачалоРасчетногоПериодаСреднегоЗаработкаДатойПриема;
	
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьРасчетЗарплатыПоПодразделениямПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ВыполнятьРасчетЗарплатыПоПодразделениям = Не НеВыполнятьРасчетЗарплатыПоПодразделениям;
	НастройкиРасчетаЗарплатыПрежняя.ВыполнятьРасчетЗарплатыПоПодразделениям = НастройкиРасчетаЗарплаты.ВыполнятьРасчетЗарплатыПоПодразделениям;
	
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьДокументыПриРедактированииПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("РассчитыватьДокументыПриРедактировании");
	РассчитыватьДокументыПриРедактированииПрежняя = РассчитыватьДокументыПриРедактировании;
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРасчетаСтоимостиЕдиницыВремениПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ПорядокРасчетаСтоимостиЕдиницыВремени = ПорядокРасчетаСтоимостиЕдиницыВремени;
	НастройкиРасчетаЗарплатыПрежняя.ПорядокРасчетаСтоимостиЕдиницыВремени = НастройкиРасчетаЗарплаты.ПорядокРасчетаСтоимостиЕдиницыВремени;
	
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНачисленияПоДоговорамПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьНачисленияПоДоговорам = ИспользоватьНачисленияПоДоговорам;
	НастройкиРасчетаЗарплатыПрежняя.ИспользоватьНачисленияПоДоговорам = НастройкиРасчетаЗарплаты.ИспользоватьНачисленияПоДоговорам;
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаймыСотрудникамПриИзменении(Элемент)
	
	НастройкиЗаймовСотрудникамПрежняя.ИспользоватьЗаймыСотрудникам = НастройкиЗаймовСотрудникам.ИспользоватьЗаймыСотрудникам;
	ЗаписатьНастройкиНаКлиенте("НастройкиЗаймовСотрудникам");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегистрациюПрочихДоходовПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьРегистрациюПрочихДоходов = ИспользоватьРегистрациюПрочихДоходов;
	НастройкиРасчетаЗарплатыПрежняя.ИспользоватьРегистрациюПрочихДоходов = НастройкиРасчетаЗарплаты.ИспользоватьРегистрациюПрочихДоходов;
	ОбновитьФормуПоНастройкамНезарплатныхДоходов(ЭтаФорма);
	
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВыплатыБывшимСотрудникамПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьВыплатыБывшимСотрудникам = ИспользоватьВыплатыБывшимСотрудникам;
	НастройкиРасчетаЗарплатыПрежняя.ИспользоватьВыплатыБывшимСотрудникам = НастройкиРасчетаЗарплаты.ИспользоватьВыплатыБывшимСотрудникам;
	ОбновитьФормуПоНастройкамНезарплатныхДоходов(ЭтаФорма);
	
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры


&НаКлиенте
Процедура НастройкиРасчетаЗарплатыИспользоватьТарифныеСеткиПриРасчетеЗарплатыПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьТарифныеСеткиПриРасчетеЗарплаты = ИспользоватьТарифныеСеткиПриРасчетеЗарплаты;
	НастройкиРасчетаЗарплатыПрежняя.ИспользоватьТарифныеСеткиПриРасчетеЗарплаты = НастройкиРасчетаЗарплаты.ИспользоватьТарифныеСеткиПриРасчетеЗарплаты;
	
	УстановитьЗначенияЗависимыхНастроекТарифныхСеток();
	
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьТарифныеСеткиПриРасчетеЗарплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьТарифныеСеткиПриРасчетеЗарплаты(Форма)
	
	Форма.Элементы.ГруппаИзменениеПКУВКадровыхДокументах.Доступность = Форма.ИспользоватьТарифныеСеткиПриРасчетеЗарплаты;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияЗависимыхНастроекТарифныхСеток()
	
	Если Не НастройкиРасчетаЗарплаты.ИспользоватьТарифныеСеткиПриРасчетеЗарплаты Тогда
		
		НастройкиРасчетаЗарплатыПрежняя.РазрешеноИзменениеПКУВКадровыхДокументах = НастройкиРасчетаЗарплаты.РазрешеноИзменениеПКУВКадровыхДокументах;
		НастройкиРасчетаЗарплаты.РазрешеноИзменениеПКУВКадровыхДокументах = Ложь;
		РазрешеноИзменениеПКУВКадровыхДокументах = Ложь;
		
	Иначе 
		
		НастройкиРасчетаЗарплаты.РазрешеноИзменениеПКУВКадровыхДокументах = НастройкиРасчетаЗарплатыПрежняя.РазрешеноИзменениеПКУВКадровыхДокументах;
		РазрешеноИзменениеПКУВКадровыхДокументах = НастройкиРасчетаЗарплатыПрежняя.РазрешеноИзменениеПКУВКадровыхДокументах;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешеноИзменениеПКУВКадровыхДокументахПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.РазрешеноИзменениеПКУВКадровыхДокументах = РазрешеноИзменениеПКУВКадровыхДокументах;
	НастройкиРасчетаЗарплатыПрежняя.РазрешеноИзменениеПКУВКадровыхДокументах = НастройкиРасчетаЗарплаты.РазрешеноИзменениеПКУВКадровыхДокументах;

	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоТарифныхСтавокПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьНесколькоТарифныхСтавок = ИспользоватьНесколькоТарифныхСтавок;
	НастройкиРасчетаЗарплатыПрежняя.ИспользоватьНесколькоТарифныхСтавок = НастройкиРасчетаЗарплаты.ИспользоватьНесколькоТарифныхСтавок;
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКраткосрочныеИзмененияОплатыТрудаВЗависимостиОтВыполняемойРаботыПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьКраткосрочныеИзмененияОплатыТрудаВЗависимостиОтВыполняемойРаботы = ИспользоватьКраткосрочныеИзмененияОплатыТрудаВЗависимостиОтВыполняемойРаботы;
	НастройкиРасчетаЗарплатыПрежняя.ИспользоватьКраткосрочныеИзмененияОплатыТрудаВЗависимостиОтВыполняемойРаботы = НастройкиРасчетаЗарплаты.ИспользоватьКраткосрочныеИзмененияОплатыТрудаВЗависимостиОтВыполняемойРаботы;
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоВидовПлановогоВремениПриИзменении(Элемент)
	
	НастройкиУчетаВремениПрежняя.ИспользоватьНесколькоВидовПлановогоВремени = НастройкиУчетаВремени.ИспользоватьНесколькоВидовПлановогоВремени;
	ЗаписатьНастройкиНаКлиенте("НастройкиУчетаВремени");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьСоответствиеФактическогоВремениПлановомуПриИзменении(Элемент)
	
	НастройкиУчетаВремениПрежняя.ПроверятьСоответствиеФактическогоВремениПлановому = НастройкиУчетаВремени.ПроверятьСоответствиеФактическогоВремениПлановому;
	ЗаписатьНастройкиНаКлиенте("НастройкиУчетаВремени");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйГрафикПриСменеГрафикаРаботыПереключательПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьИндивидуальныйГрафикПриСменеГрафикаРаботы =
		?(ИспользоватьИндивидуальныйГрафикПриСменеГрафикаРаботыПереключатель = 0,Ложь,Истина);
		
	НастройкиРасчетаЗарплатыПрежняя.ИспользоватьИндивидуальныйГрафикПриСменеГрафикаРаботы = 
			НастройкиРасчетаЗарплаты.ИспользоватьИндивидуальныйГрафикПриСменеГрафикаРаботы;
	
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиОграничиватьИспользованиеДокументовПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.АвтоматическиОграничиватьИспользованиеДокументов = АвтоматическиОграничиватьИспользованиеДокументов;
	НастройкиРасчетаЗарплатыПрежняя.АвтоматическиОграничиватьИспользованиеДокументов = НастройкиРасчетаЗарплаты.АвтоматическиОграничиватьИспользованиеДокументов;
	
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСтатьиФинансированияПриИзменении(Элемент)
	
	УстановитьЗначенияЗависимыхНастроекИспользоватьСтатьиФинансирования();
	ИспользоватьСтатьиФинансированияПрежняя = ИспользоватьСтатьиФинансирования;
	
	ЗаписатьНастройкиНаКлиенте("ИспользоватьСтатьиФинансирования");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();

	ОбновитьФормуПоНастройкеИспользоватьСтатьиФинансирования(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьЗаполнениеФинансированияВВедомостяхПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиВзаиморасчетовССотрудниками");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();

КонецПроцедуры

&НаКлиенте
Процедура ПроверятьСоответствиеНачисленийИВыплатПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиВзаиморасчетовССотрудниками");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();

КонецПроцедуры

&НаКлиенте
Процедура РегистрироватьКомпенсациюЗаЗадержкуЗарплатыВДоходахСтраховыхВзносовПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.РегистрироватьКомпенсациюЗаЗадержкуЗарплатыВДоходахСтраховыхВзносов = РегистрироватьКомпенсациюЗаЗадержкуЗарплатыВДоходахСтраховыхВзносов;
	НастройкиРасчетаЗарплатыПрежняя.РегистрироватьКомпенсациюЗаЗадержкуЗарплатыВДоходахСтраховыхВзносов = НастройкиРасчетаЗарплаты.РегистрироватьКомпенсациюЗаЗадержкуЗарплатыВДоходахСтраховыхВзносов;
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнятьДоначислениеПерерасчетЗарплатыОтдельнымДокументомПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ВыполнятьДоначислениеПерерасчетЗарплатыОтдельнымДокументом = ВыполнятьДоначислениеПерерасчетЗарплатыОтдельнымДокументом;
	НастройкиРасчетаЗарплатыПрежняя.ВыполнятьДоначислениеПерерасчетЗарплатыОтдельнымДокументом = НастройкиРасчетаЗарплаты.ВыполнятьДоначислениеПерерасчетЗарплатыОтдельнымДокументом;
	
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферыПриИзменении(Элемент)
	
	УстановитьЗависимыеНастройкиОтчетаМониторингаРаботниковСоциальнойСферы();
	ОбновитьДоступностьНастроекОтчетаМониторингаРаботниковСоциальнойСферы(ЭтаФорма);
	
	Если (НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы И ЗначениеЗаполнено(НастройкиСтатистикиПерсонала.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы))
		Или Не НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы Тогда
		ЗаписатьНастройкиНаКлиенте("НастройкиСтатистикиПерсонала");
		ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкиСтатистикиПерсоналаФормаОтчетностиМониторингаРаботниковСоциальнойСферыПриИзменении(Элемент)
	
	ТекущаяНастройкаИспользования = НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы;
	Если НЕ ЗначениеЗаполнено(НастройкиСтатистикиПерсонала.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы = Ложь;
	КонецЕсли;
	ЗаписатьНастройкиНаКлиенте("НастройкиСтатистикиПерсонала");
	НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы = ТекущаяНастройкаИспользования;
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияЗависимыхНастроекИспользоватьСтатьиФинансирования()
	
	Если ИспользоватьСтатьиФинансирования Тогда
		НастройкиВзаиморасчетовССотрудниками.ПроверятьЗаполнениеФинансированияВВедомостях = НастройкиВзаиморасчетовССотрудникамиПрежняя.ПроверятьЗаполнениеФинансированияВВедомостях;
		НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы = НастройкиСтатистикиПерсоналаПрежняя.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы;
	Иначе
		НастройкиВзаиморасчетовССотрудникамиПрежняя.ПроверятьЗаполнениеФинансированияВВедомостях = НастройкиВзаиморасчетовССотрудниками.ПроверятьЗаполнениеФинансированияВВедомостях;
		НастройкиВзаиморасчетовССотрудниками.ПроверятьЗаполнениеФинансированияВВедомостях = Ложь;
		НастройкиСтатистикиПерсоналаПрежняя.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы = НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы;
		НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы = Ложь;
	КонецЕсли;
	УстановитьЗависимыеНастройкиОтчетаМониторингаРаботниковСоциальнойСферы();
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеНастройкиОтчетаМониторингаРаботниковСоциальнойСферы()

	Если НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы Тогда
		НастройкиСтатистикиПерсонала.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы = НастройкиСтатистикиПерсоналаПрежняя.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы;
	Иначе
		НастройкиСтатистикиПерсоналаПрежняя.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы = НастройкиСтатистикиПерсонала.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы;
		НастройкиСтатистикиПерсонала.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы = ПредопределенноеЗначение("Перечисление.ВидыФормМониторингаРаботниковСоциальнойСферы.ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьСтатьиФинансирования(Форма)
	
	ИспользуетсяФинансирование = Форма.РаботаВБюджетномУчреждении ИЛИ Форма.ИспользоватьСтатьиФинансирования;
	
	Форма.Элементы.ГруппаНастройкиСтатистикиПерсонала.Доступность = ИспользуетсяФинансирование;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекОтчетаМониторингаРаботниковСоциальнойСферы(Форма)

	Форма.Элементы.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы.Доступность = Форма.НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы;
	
	Если Форма.Элементы.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы.Доступность Тогда
		Форма.Элементы.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы.АвтоОтметкаНезаполненного = Истина;
		Форма.Элементы.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Форма.НастройкиСтатистикиПерсонала.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы);
	Иначе
		Форма.Элементы.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы.АвтоОтметкаНезаполненного = Ложь;
		Форма.Элементы.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИспользоватьУчетВРазрезеИФОПриИзменении(Элемент)

	ЗаписатьНастройкиНаКлиенте("НастройкиБюджетныхУчреждений");

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИспользоватьГрантыНеоблагаемыеНДФЛПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("ИспользоватьГрантыНеоблагаемыеНДФЛ");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРасчетаЗарплаты(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПолеСортировкиРазделов", 4); 
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("КлючВарианта", "НастройкиПоРазделам");
		
	ОткрытьФорму("Отчет.НастройкиПрограммыЗарплатаКадры.Форма", ПараметрыФормы, ЭтотОбъект, Истина);

КонецПроцедуры


#Область ОбработчикиСобытийТаблицыФормыПоказателиСовокупнойТарифнойСтавки

&НаКлиенте
Процедура ПоказателиСовокупнойТарифнойСтавкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбратьПоказателейСовокупнойТарифнойСтавки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСовокупнойТарифнойСтавкиВыбранныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОтменитьВыборПоказателейСовокупнойТарифнойСтавки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСовокупнойТарифнойСтавкиОтменить(Команда)
	
	ОтменитьВыборПоказателейСовокупнойТарифнойСтавки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСовокупнойТарифнойСтавкиВыбрать(Команда)
	
	ВыбратьПоказателейСовокупнойТарифнойСтавки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПоказателейСовокупнойТарифнойСтавки()
	
	Если Элементы.ПоказателиСовокупнойТарифнойСтавки.ВыделенныеСтроки.Количество() > 0 Тогда
		УстановитьВыборПоказателейСовокупнойТарифнойСтавки(Элементы.ПоказателиСовокупнойТарифнойСтавки.ВыделенныеСтроки, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыборПоказателейСовокупнойТарифнойСтавки()
	
	Если Элементы.ПоказателиСовокупнойТарифнойСтавкиВыбранные.ВыделенныеСтроки.Количество() > 0 Тогда
		УстановитьВыборПоказателейСовокупнойТарифнойСтавки(Элементы.ПоказателиСовокупнойТарифнойСтавкиВыбранные.ВыделенныеСтроки, Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыборПоказателейСовокупнойТарифнойСтавки(СписокЭлементов, ЗначениеВыбора)
	
	Для каждого ИдентификаторЗначения Из СписокЭлементов Цикл
		ЭлементСписка = ПоказателиСовокупнойТарифнойСтавки.НайтиПоИдентификатору(ИдентификаторЗначения);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Выбран = ЗначениеВыбора;
		КонецЕсли; 
	КонецЦикла;
	
	ЗаписатьНастройкиНаКлиенте("ПоказателиСовокупнойТарифнойСтавки");
	
	Элементы.ПоказателиСовокупнойТарифнойСтавки.ОтборСтрок = Новый ФиксированнаяСтруктура("Выбран", Ложь);
	Элементы.ПоказателиСовокупнойТарифнойСтавкиВыбранные.ОтборСтрок = Новый ФиксированнаяСтруктура("Выбран", Истина);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкамНезарплатныхДоходов(Форма)
	
	Если Форма.ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы И Форма.РаботаВБюджетномУчреждении Тогда
		Форма.Элементы.ГруппаИспользоватьВедомостиДляВыплатыПрочихДоходов.Доступность = Форма.ИспользоватьРегистрациюПрочихДоходов
						Или Форма.ИспользоватьВыплатыБывшимСотрудникам;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВедомостиДляВыплатыПрочихДоходовПриИзменении(Элемент)
	
	НастройкиВзаиморасчетовПоПрочимДоходам.ИспользоватьВедомостиДляВыплатыПрочихДоходов = ИспользоватьВедомостиДляВыплатыПрочихДоходов;
	НастройкиВзаиморасчетовПоПрочимДоходамПрежняя.ИспользоватьВедомостиДляВыплатыПрочихДоходов = НастройкиВзаиморасчетовПоПрочимДоходамПрежняя.ИспользоватьВедомостиДляВыплатыПрочихДоходов;
		
	ЗаписатьНастройкиНаКлиенте("НастройкиВзаиморасчетовПоПрочимДоходам");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУчетаВремениИспользоватьРежимыРаботыПриИзменении(Элемент)
	НастройкиУчетаВремениПрежняя.ИспользоватьРежимыРаботы = НастройкиУчетаВремени.ИспользоватьРежимыРаботы;
	ЗаписатьНастройкиНаКлиенте("НастройкиУчетаВремени");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУчетаВремениИспользоватьСменыРаботыПриИзменении(Элемент)
	НастройкиУчетаВремениПрежняя.ИспользоватьСменыРаботы = НастройкиУчетаВремени.ИспользоватьСменыРаботы;
	Если НастройкиУчетаВремени.ИспользоватьСменыРаботы Тогда
		НастройкиУчетаВремени.ИспользоватьРежимыРаботы = Истина;
		НастройкиУчетаВремениПрежняя.ИспользоватьРежимыРаботы = Истина;
	КонецЕсли;	
	УстановитьСвойстваЭлементовНастроекУчетаВремени(ЭтотОбъект);
	ЗаписатьНастройкиНаКлиенте("НастройкиУчетаВремени");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУчетаВремениОтражатьЧасыВДеньНачалаСменыПриИзменении(Элемент)
	НастройкиУчетаВремениПрежняя.ОтражатьЧасыВДеньНачалаСмены = НастройкиУчетаВремени.ОтражатьЧасыВДеньНачалаСмены;
	ЗаписатьНастройкиНаКлиенте("НастройкиУчетаВремени");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлатыПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлаты = ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлаты;
	НастройкиРасчетаЗарплатыПрежняя.ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлаты = НастройкиРасчетаЗарплаты.ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлаты;
	
	ЗаписатьНастройкиНаКлиенте("НастройкиРасчетаЗарплаты");
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуютсяСтавкиМеждународныхДоговоровПриИзменении(Элемент)
	ЗаписатьНастройкиНаКлиенте("ИспользуютсяСтавкиНДФЛМеждународныхДоговоров");
	ИспользуютсяСтавкиНДФЛМеждународныхДоговоровПрежняя = ИспользуютсяСтавкиНДФЛМеждународныхДоговоров;
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьНастройки()

	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	ИспользоватьСтатьиФинансирования = РаботаВБюджетномУчреждении Или Константы.ИспользоватьСтатьиФинансированияЗарплата.Получить();
	ИспользоватьСтатьиФинансированияПрежняя = ИспользоватьСтатьиФинансирования;
	РассчитыватьДокументыПриРедактировании = Константы.РассчитыватьДокументыПриРедактировании.Получить();
	РассчитыватьДокументыПриРедактированииПрежняя = РассчитыватьДокументыПриРедактировании;
	
	Настройки = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	МенеджерЗаписи = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Настройки);
	ЗначениеВРеквизитФормы(МенеджерЗаписи, "НастройкиРасчетаЗарплаты");
	ЗначениеВРеквизитФормы(МенеджерЗаписи, "НастройкиРасчетаЗарплатыПрежняя");
	
	НеВыполнятьРасчетЗарплатыПоПодразделениям = Не НастройкиРасчетаЗарплаты.ВыполнятьРасчетЗарплатыПоПодразделениям;
	
	ИспользоватьИндивидуальныйГрафикПриСменеГрафикаРаботыПереключатель = 
		?(НастройкиРасчетаЗарплаты.ИспользоватьИндивидуальныйГрафикПриСменеГрафикаРаботы,1,0);
		
	СтрокаСвойствНастройкиРасчетаЗарплаты = "ИспользоватьВыплатыБывшимСотрудникам,ИспользоватьИндексациюЗаработка,ИспользоватьНачисленияПоДоговорам,
		|ИспользоватьНесколькоТарифныхСтавок,ИспользоватьПризыПодарки,ИспользоватьРегистрациюПрочихДоходов,
		|ИспользоватьТарифныеСеткиПриРасчетеЗарплаты,ПорядокРасчетаСтоимостиЕдиницыВремени,ИспользоватьКраткосрочныеИзмененияОплатыТрудаВЗависимостиОтВыполняемойРаботы,
		|ПереноситьДанныеВДругойУчетСреднегоЗаработка,ОграничиватьНачалоРасчетногоПериодаСреднегоЗаработкаДатойПриема,
		|РазрешеноИзменениеПКУВКадровыхДокументах,АвтоматическиОграничиватьИспользованиеДокументов,СпособУдержанияИзлишнеНачисленныхОтпускных,
		|ВыполнятьДоначислениеПерерасчетЗарплатыОтдельнымДокументом,РегистрироватьКомпенсациюЗаЗадержкуЗарплатыВДоходахСтраховыхВзносов,
		|ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлаты";
	ЗаполнитьЗначенияСвойств(ЭтаФорма,НастройкиРасчетаЗарплаты,СтрокаСвойствНастройкиРасчетаЗарплаты);
		
	Настройки = РегистрыСведений.НастройкиЗаймовСотрудникам.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиЗаймовСотрудникам");
	
	Настройки = РегистрыСведений.НастройкиВзаиморасчетовССотрудниками.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиВзаиморасчетовССотрудниками");
	ЗначениеВРеквизитФормы(Настройки, "НастройкиВзаиморасчетовССотрудникамиПрежняя");
	
	Настройки = РегистрыСведений.НастройкиСтатистикиПерсонала.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиСтатистикиПерсонала");
	ЗначениеВРеквизитФормы(Настройки, "НастройкиСтатистикиПерсоналаПрежняя");
	
	Настройки = РегистрыСведений.НастройкиУчетаВремени.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиУчетаВремени");
	ЗначениеВРеквизитФормы(Настройки, "НастройкиУчетаВремениПрежняя");
	
	Настройки = РегистрыСведений.НастройкиВзаиморасчетовПоПрочимДоходам.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиВзаиморасчетовПоПрочимДоходам");
	ЗначениеВРеквизитФормы(Настройки, "НастройкиВзаиморасчетовПоПрочимДоходамПрежняя");
	СтрокаСвойствНастройкиВзаиморасчетовПоПрочимДоходам = "ИспользоватьВедомостиДляВыплатыПрочихДоходов";
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиВзаиморасчетовПоПрочимДоходам, СтрокаСвойствНастройкиВзаиморасчетовПоПрочимДоходам);
	
	УчетПоСтатьямФинансированияЗарплата.НастройкиПрограммыВРеквизитыФормы(ЭтаФорма);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Модуль.НастройкиПрограммыВРеквизитыФормы(ЭтотОбъект);
	КонецЕсли;
	
	ПоказателиСовокупнойТарифнойСтавки.Загрузить(ПлановыеНачисленияСотрудников.СоставПоказателейСовокупнойТарифнойСтавки());
	
	Элементы.ПоказателиСовокупнойТарифнойСтавки.ОтборСтрок = Новый ФиксированнаяСтруктура("Выбран", Ложь);
	Элементы.ПоказателиСовокупнойТарифнойСтавкиВыбранные.ОтборСтрок = Новый ФиксированнаяСтруктура("Выбран", Истина);
	
	ИспользуютсяСтавкиНДФЛМеждународныхДоговоров = Константы.ИспользуютсяСтавкиНДФЛМеждународныхДоговоров.Получить();
	ИспользуютсяСтавкиНДФЛМеждународныхДоговоровПрежняя = ИспользуютсяСтавкиНДФЛМеждународныхДоговоров;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиНаСервере(ИмяНастройки)
	
	ПараметрыНастроек = Обработки.ПанельНастроекЗарплатаКадры.ЗаполнитьСтруктуруПараметровНастроек(ИмяНастройки);
		
	ПараметрыНастроек.ИспользоватьНачислениеЗарплаты         = ИспользоватьНачислениеЗарплаты;
	ПараметрыНастроек.НастройкиРасчетаЗарплаты               = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиРасчетаЗарплаты, Метаданные.РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный);
	ПараметрыНастроек.НастройкиЗаймовСотрудникам             = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиЗаймовСотрудникам, Метаданные.РегистрыСведений.НастройкиЗаймовСотрудникам);
	ПараметрыНастроек.НастройкиВзаиморасчетовССотрудниками   = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиВзаиморасчетовССотрудниками, Метаданные.РегистрыСведений.НастройкиВзаиморасчетовССотрудниками);
	ПараметрыНастроек.НастройкиСтатистикиПерсонала           = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиСтатистикиПерсонала, Метаданные.РегистрыСведений.НастройкиСтатистикиПерсонала);
	ПараметрыНастроек.НастройкиУчетаВремени                  = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиУчетаВремени, Метаданные.РегистрыСведений.НастройкиУчетаВремени);
	ПараметрыНастроек.НастройкиВзаиморасчетовПоПрочимДоходам = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиВзаиморасчетовПоПрочимДоходам, Метаданные.РегистрыСведений.НастройкиВзаиморасчетовПоПрочимДоходам);
	
	ПараметрыНастроек.ИспользоватьСтатьиФинансирования       = ИспользоватьСтатьиФинансирования;
	ПараметрыНастроек.РаботаВБюджетномУчреждении             = РаботаВБюджетномУчреждении;  
	ПараметрыНастроек.ПоказателиСовокупнойТарифнойСтавки     = ПоказателиСовокупнойТарифнойСтавки.Выгрузить(Новый Структура("Выбран", Истина), "Показатель");
	ПараметрыНастроек.РассчитыватьДокументыПриРедактировании = РассчитыватьДокументыПриРедактировании;
	ПараметрыНастроек.ИспользуютсяСтавкиНДФЛМеждународныхДоговоров = ИспользуютсяСтавкиНДФЛМеждународныхДоговоров;
	
	УчетПоСтатьямФинансированияЗарплата.ЗначенияСохраняемыхРеквизитовФормыНастройкаПрограммы(ЭтаФорма, ПараметрыНастроек);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Модуль.ЗначенияСохраняемыхРеквизитовФормыНастройкаПрограммы(ЭтотОбъект, ПараметрыНастроек);
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Обработки.ПанельНастроекЗарплатаКадры.ЗаписатьНастройки(ПараметрыНастроек, АдресХранилища);
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиНаКлиенте(ИмяНастройки)
	
	ЗаписатьНастройкиНаСервере(ИмяНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияЗависимыхНастроекРасчетаЗарплаты()
	
	Если Не ИспользоватьНачислениеЗарплаты Тогда
		
		ЗаполнитьЗначенияСвойств(НастройкиРасчетаЗарплатыПрежняя, НастройкиРасчетаЗарплаты);
		ЗаполнитьЗначенияСвойств(НастройкиЗаймовСотрудникамПрежняя, НастройкиЗаймовСотрудникам);
		ЗаполнитьЗначенияСвойств(НастройкиВзаиморасчетовССотрудникамиПрежняя, НастройкиВзаиморасчетовССотрудниками);
		ЗаполнитьЗначенияСвойств(НастройкиСтатистикиПерсоналаПрежняя, НастройкиСтатистикиПерсонала);
		ЗаполнитьЗначенияСвойств(НастройкиУчетаВремениПрежняя, НастройкиУчетаВремени);
		ЗаполнитьЗначенияСвойств(НастройкиВзаиморасчетовПоПрочимДоходамПрежняя, НастройкиВзаиморасчетовПоПрочимДоходам);

		ИспользоватьСтатьиФинансированияПрежняя = ИспользоватьСтатьиФинансирования;
		РассчитыватьДокументыПриРедактированииПрежняя = РассчитыватьДокументыПриРедактировании;
		
		НастройкиРасчетаЗарплаты.ИспользоватьИндексациюЗаработка         = Ложь;
		НастройкиРасчетаЗарплаты.ИспользоватьПризыПодарки                = Ложь;
		НастройкиРасчетаЗарплаты.ИспользоватьНачисленияПоДоговорам       = Ложь;
		НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощь          = Ложь;
		НастройкиРасчетаЗарплаты.ИспользоватьРегистрациюПрочихДоходов    = Ложь;
		НастройкиРасчетаЗарплаты.ИспользоватьВыплатыБывшимСотрудникам    = Ложь;
		НастройкиРасчетаЗарплаты.ВыполнятьРасчетЗарплатыПоПодразделениям = Ложь;
		НастройкиРасчетаЗарплаты.ИспользоватьНесколькоТарифныхСтавок     = Ложь;
		НастройкиРасчетаЗарплаты.ИспользоватьКраткосрочныеИзмененияОплатыТрудаВЗависимостиОтВыполняемойРаботы = Ложь;
		НастройкиРасчетаЗарплаты.ИспользоватьИндивидуальныйГрафикПриСменеГрафикаРаботы  = Ложь;
		НастройкиРасчетаЗарплаты.ПорядокРасчетаСтоимостиЕдиницыВремени = ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТрудаПустаяСсылка;
		НастройкиРасчетаЗарплаты.ПереноситьДанныеВДругойУчетСреднегоЗаработка = Ложь;
		НастройкиРасчетаЗарплаты.ОграничиватьНачалоРасчетногоПериодаСреднегоЗаработкаДатойПриема = Ложь;
		НастройкиРасчетаЗарплаты.АвтоматическиОграничиватьИспользованиеДокументов = Ложь;
		НастройкиРасчетаЗарплаты.ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлаты = Ложь;
		НастройкиРасчетаЗарплаты.СпособУдержанияИзлишнеНачисленныхОтпускных = ПредопределенноеЗначение("Перечисление.СпособыУдержанияИзлишнеНачисленныхОтпускных.ПустаяСсылка");
		
		НастройкиВзаиморасчетовПоПрочимДоходам.ИспользоватьВедомостиДляВыплатыПрочихДоходов = Ложь;
		
		НастройкиЗаймовСотрудникам.ИспользоватьЗаймыСотрудникам = Ложь;
		НеВыполнятьРасчетЗарплатыПоПодразделениям 				= Ложь;
		ИспользоватьСтатьиФинансирования = Ложь;
		РассчитыватьДокументыПриРедактировании = Ложь;
		
		НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы = Ложь;
		НастройкиСтатистикиПерсонала.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы = ФормаОтчетностиМониторингаРаботниковСоциальнойСферыПустоеЗначение;
		
		ИспользуютсяСтавкиНДФЛМеждународныхДоговоров = Ложь;
		
	Иначе
		
		// Восстановим прежние значения зависимых настроек.
		ЗаполнитьЗначенияСвойств(НастройкиРасчетаЗарплаты, НастройкиРасчетаЗарплатыПрежняя);
		ЗаполнитьЗначенияСвойств(НастройкиЗаймовСотрудникам, НастройкиЗаймовСотрудникамПрежняя);
		ЗаполнитьЗначенияСвойств(НастройкиСтатистикиПерсонала, НастройкиСтатистикиПерсоналаПрежняя);
		ЗаполнитьЗначенияСвойств(НастройкиУчетаВремени, НастройкиУчетаВремениПрежняя);
		ЗаполнитьЗначенияСвойств(НастройкиВзаиморасчетовПоПрочимДоходам, НастройкиВзаиморасчетовПоПрочимДоходамПрежняя);
		НеВыполнятьРасчетЗарплатыПоПодразделениям = Не НастройкиРасчетаЗарплаты.ВыполнятьРасчетЗарплатыПоПодразделениям;
		ИспользоватьСтатьиФинансирования = ИспользоватьСтатьиФинансированияПрежняя;
		РассчитыватьДокументыПриРедактировании = РассчитыватьДокументыПриРедактированииПрежняя;
		
		Если Не ЗначениеЗаполнено(НастройкиРасчетаЗарплаты.ПорядокРасчетаСтоимостиЕдиницыВремени) Тогда
			НастройкиРасчетаЗарплаты.ПорядокРасчетаСтоимостиЕдиницыВремени = ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТрудаПоСреднегодовомуЗначению;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиРасчетаЗарплаты, СтрокаСвойствНастройкиРасчетаЗарплаты);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиВзаиморасчетовПоПрочимДоходам, СтрокаСвойствНастройкиВзаиморасчетовПоПрочимДоходам);
	
	УчетПоСтатьямФинансированияЗарплатаКлиент.УстановитьЗначенияЗависимыхНастроекРасчетаЗарплаты(ЭтаФорма, ИспользоватьНачислениеЗарплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияОбновленияИнтерфейса()
	
	ТребуетсяОбновлениеИнтерфейса = Истина;
	
	#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновленияИнтерфейса", 1, Истина);
	#КонецЕсли 
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработчикОжиданияОбновленияИнтерфейса()
	
	ЗарплатаКадрыРасширенныйВызовСервера.ПередОбновлениемИнтерфейса();
	
	ОбновитьИнтерфейс();
	
	ЭтаФорма.ТребуетсяОбновлениеИнтерфейса = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеПрочихНастроекРасчетаЗарплаты(Команда)

	ПараметрыФормы = Новый Структура("ПрочиеНастройки", Истина);
	
	ОткрытьФорму(
		"Обработка.ПанельНастроекЗарплатаКадры.Форма.РасчетЗарплаты",
		ПараметрыФормы,
		ЭтаФорма,
		ЭтаФорма,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваЭлементовНастроекУчетаВремени(Форма)
	Если Форма.НастройкиУчетаВремени.ИспользоватьСменыРаботы Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НастройкиУчетаВремениОтражатьЧасыВДеньНачалаСмены", "Доступность", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НастройкиУчетаВремениОтражатьЧасыВДеньНачалаСмены", "Доступность", Ложь);
	КонецЕсли;	
КонецПроцедуры	

#КонецОбласти
