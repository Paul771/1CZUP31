#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ХешТокенов;
Перем ШаблоныВремени;
Перем ШаблоныДаты;
Перем ШаблоныМеста;
Перем ШаблоныМероприятия;
Перем ШаблонЧасы;
Перем ШаблонМинуты;
Перем ШаблонДатаДни;
Перем ШаблонДатаМесяцы;
Перем ШаблонДатаГоды;
Перем ШаблонДатаГодыКраткие;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Формирует событие.
// 
// Возвращаемое значение:
//  Структура - событие в тексте.
//   * Тип - Строка - тип найденного в тексте события.
//   * Дата - Строка - дата события.
//   * Время - Строка - время события.
//   * Начало - Дата - дата начала события.
//   * Конец - Дата - дата окончания события.
//   * Место - Строка - место проведения события.
//   * Мероприятие - Строка - приуроченное мероприятие.
//   * Текст - Строка - часть текста, соответствующая событию.
//
Функция Событие() Экспорт
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ДатаИсходногоТекста) Тогда
			ДатаИсходногоТекста = ТекущаяДатаСеанса();
		КонецЕсли;
		
		АгрегатныеАннотации = ВыполнитьАнализТекста(ИсходныйТекст, Истина);
		Если АгрегатныеАннотации.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Событие = Неопределено;
		Для Каждого АгрегатнаяАннотация Из АгрегатныеАннотации Цикл
			ДанныеСобытия = ДанныеСобытия(АгрегатнаяАннотация);
			Если Событие = Неопределено Тогда
				Событие = ДанныеСобытия;
			ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Время)
				И (Не ЗначениеЗаполнено(ДанныеСобытия.Дата)
					Или НачалоДня(Событие.Начало) = НачалоДня(ДанныеСобытия.Начало)) Тогда
				Событие.Время = ДанныеСобытия.Время;
				Событие.Начало = НачалоДня(Событие.Начало) + (ДанныеСобытия.Начало - НачалоДня(ДанныеСобытия.Начало));
				Событие.Конец = НачалоДня(Событие.Конец) + (ДанныеСобытия.Конец - НачалоДня(ДанныеСобытия.Конец));
			КонецЕсли;
			Если ЗначениеЗаполнено(Событие.Время)
				Или НачалоДня(Событие.Начало) <> НачалоДня(Событие.Конец) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Событие;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Ошибка при анализе текста: 
				|%1'"),
			ПодробноеПредставлениеОшибки(Инфо));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Анализ текста'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает разрешенный размер разделителя.
//
// Возвращаемое значение:
//  Число - размер разделителя.
//
Функция РазрешенныйРазмерРазделителя()
	
	Возврат 3;
	
КонецФункции

// Формирует структуру аннотации.
//
// Возвращаемое значение:
//  Структура - аннотация.
//
Функция Аннотация()
	
	Аннотация = Новый Структура;
	
	Аннотация.Вставить("Начало");
	Аннотация.Вставить("Конец");
	Аннотация.Вставить("Имя");
	
	Возврат Аннотация;
	
КонецФункции

// Разрешает неоднозначность аннотаций времени и даты.
//
// Параметры:
//  АннотацииВремени - Массив - аннотации времени.
//  АннотацииДаты	 - Массив - аннотации даты.
//
Процедура РазрешитьНеоднозначностьАннотаций(АннотацииВремени, АннотацииДаты)
	
	КоличествоЭлементов = АннотацииВремени.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		АннотацияВремени = АннотацииВремени[КоличествоЭлементов - Индекс];
		ЕстьПересечение = Ложь;
		
		Для Каждого АннотацияДаты Из АннотацииДаты Цикл
			Если (АннотацияДаты.Начало <= АннотацияВремени.Начало
				И АннотацияДаты.Конец >= АннотацияВремени.Конец)
				Или (АннотацияВремени.Начало <= АннотацияДаты.Начало
				И АннотацияВремени.Конец >= АннотацияДаты.Конец)
				Или (АннотацияДаты.Начало <= АннотацияВремени.Начало
				И АннотацияВремени.Начало <= АннотацияДаты.Конец
				И АннотацияДаты.Конец < АннотацияВремени.Конец)
				Или (АннотацияВремени.Начало <= АннотацияДаты.Начало
				И АннотацияДаты.Начало <= АннотацияВремени.Конец
				И АннотацияВремени.Конец < АннотацияДаты.Конец) Тогда
				ЕстьПересечение = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьПересечение Тогда
			АннотацииВремени.Удалить(КоличествоЭлементов - Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сортирует аннотации.
//
// Параметры:
//  Аннотации	 - Массив	 - аннотации.
// 
// Возвращаемое значение:
//  Массив - сортированные аннотации.
//
Функция СортироватьАннотации(Аннотации)
	
	ИндексАннотацийНачало = Новый Соответствие;
	Для Каждого Аннотация Из Аннотации Цикл
		
		ИндексАннотацийКонец = ИндексАннотацийНачало[Аннотация.Начало];
		Если ИндексАннотацийКонец = Неопределено Тогда
			ИндексАннотацийКонец = Новый Соответствие;
			ИндексАннотацийНачало.Вставить(Аннотация.Начало, ИндексАннотацийКонец);
		КонецЕсли;
		
		ИндексАннотацийКонец.Вставить(Аннотация.Конец, Аннотация);
		
	КонецЦикла;
	
	Счетчик = 0;
	Пока ИндексАннотацийНачало.Количество() > 0 Цикл
		
		Ключи = Ключи(ИндексАннотацийНачало);
		МинимальныйИндексНачало = Минимум(Ключи);
		ИндексАннотацийКонец = ИндексАннотацийНачало[МинимальныйИндексНачало];
		
		Пока ИндексАннотацийКонец.Количество() > 0 Цикл
			
			Ключи = Ключи(ИндексАннотацийКонец);
			МинимальныйИндексКонец = Минимум(Ключи);
			Аннотация = ИндексАннотацийКонец[МинимальныйИндексКонец];
			
			Аннотации[Счетчик] = Аннотация;
			Счетчик = Счетчик + 1;
			
			ИндексАннотацийКонец.Удалить(МинимальныйИндексКонец);
			
		КонецЦикла;
		
		ИндексАннотацийНачало.Удалить(МинимальныйИндексНачало);
		
	КонецЦикла;
	
	Возврат Аннотации;
	
КонецФункции

// Разрешает пересечение аннотаций.
//
// Параметры:
//  ПерваяАннотация	 - Структура	 - первая аннотация.
//  ВтораяАннотация	 - Структура	 - вторая аннотация.
// 
// Возвращаемое значение:
//  Структура - исправленная аннотация.
//
Функция ПоправитьПересекающиесяАннотации(ПерваяАннотация, ВтораяАннотация)
	
	Если ПерваяАннотация.Начало <= ВтораяАннотация.Начало
		И ВтораяАннотация.Начало <= ПерваяАннотация.Конец
		И ПерваяАннотация.Конец < ВтораяАннотация.Конец Тогда
		ЧастьДанных = Лев(ПерваяАннотация.Данные, ВтораяАннотация.Начало - ПерваяАннотация.Начало);
		ИсправленнаяАннотация = БазоваяАннотация(ЧастьДанных + ВтораяАннотация.Данные);
		ИсправленнаяАннотация.Начало = ПерваяАннотация.Начало;
		ИсправленнаяАннотация.Конец = ВтораяАннотация.Конец;
		ИсправленнаяАннотация.Имя = ПерваяАннотация.Имя;
		Возврат ИсправленнаяАннотация;
		
	ИначеЕсли ПерваяАннотация.Начало <= ВтораяАннотация.Начало
		И ПерваяАннотация.Конец >= ВтораяАннотация.Конец Тогда
		Возврат ПерваяАннотация;
		
	ИначеЕсли ВтораяАннотация.Начало <= ПерваяАннотация.Начало
		И ВтораяАннотация.Конец >= ПерваяАннотация.Конец Тогда
		Возврат ВтораяАннотация
		
	Иначе
		ИсправленнаяАннотация = БазоваяАннотация(ПерваяАннотация.Данные + " " + ВтораяАннотация.Данные);
		ИсправленнаяАннотация.Начало = Мин(ПерваяАннотация.Начало, ВтораяАннотация.Начало);
		ИсправленнаяАннотация.Конец = Макс(ПерваяАннотация.Конец, ВтораяАннотация.Конец);
		ИсправленнаяАннотация.Имя = ПерваяАннотация.Имя;
		Возврат ИсправленнаяАннотация;
		
	КонецЕсли;
	
КонецФункции

// Получает токены предложения.
//
// Параметры:
//  Предложение	 - Структура	 - предложение.
//  Текст		 - Строка	 - обрабатываемый текст.
// 
// Возвращаемое значение:
//  Массив - токены предложения.
//
Функция ПолучитьТокеныПредложения(Предложение, Текст)
	
	ТокеныПредложения = Новый Массив;
	
	Начало = Предложение.Начало;
	Конец = Предложение.Конец;
	
	Для Каждого Токен Из Токены(Текст) Цикл
		Если Токен.Начало = Начало Тогда
			ТокеныПредложения.Добавить(Токен);
			Пока Токен.Следующий <> Неопределено И Токен.Следующий.Конец <= Конец Цикл
				ТокеныПредложения.Добавить(Токен.Следующий);
				Токен = Токен.Следующий;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТокеныПредложения;
	
КонецФункции

// Соединяет список слов.
//
// Параметры:
//  СписокСлов	 - Массив	 - список слов.
// 
// Возвращаемое значение:
//  Строка - соединенные строки.
//
Функция СоединитьСтроки(СписокСлов)
	
	НовыйСписок = Новый Массив;
	Для Счетчик = 0 По СписокСлов.Количество() - 1 Цикл
		Слово = СписокСлов[Счетчик];
		Если ЗнакиПунктуации().Найти(Слово) <> Неопределено Тогда
			НовыйСписок.Добавить(Слово);
		ИначеЕсли ЭтоЧисло(Слово) Тогда
			Если Счетчик <> 0 И ЭтоСлово(СписокСлов[Счетчик - 1]) Тогда
				НовыйСписок.Добавить(" ");
			КонецЕсли;
			НовыйСписок.Добавить(Слово);
		Иначе
			Если Счетчик <> 0 Тогда
				НовыйСписок.Добавить(" ");
			КонецЕсли;
			НовыйСписок.Добавить(Слово);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(НовыйСписок);
	
КонецФункции

// Создает базовые аннотации.
//
// Параметры:
//  ТокеныПредложения			 - Массив	 - токены предложения.
//  Шаблоны						 - Массив	 - шаблоны.
//  Имя							 - Имя	 - имя аннотации.
//  УпроститьБазовыеАннотации	 - Булево	 - упростить базовые аннотации.
// 
// Возвращаемое значение:
//  Структура - аннотация.
//
Функция СоздатьБазовыеАннотации(ТокеныПредложения, Шаблоны, Имя, УпроститьБазовыеАннотации = Истина)
	
	Аннотации = Новый Массив;
	
	Для Каждого Шаблон Из Шаблоны Цикл
		СловариАннотаций = Соответствует(Шаблон, ТокеныПредложения);
		Если СловариАннотаций <> Неопределено Тогда
			Для Каждого СловарьАннотации Из СловариАннотаций Цикл
				Аннотация = БазоваяАннотация(СоединитьСтроки(СловарьАннотации.Слова));
				Аннотация.Начало = СловарьАннотации.Начало;
				Аннотация.Конец = СловарьАннотации.Конец;
				Аннотация.Имя = Имя;
				Аннотации.Добавить(Аннотация);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если УпроститьБазовыеАннотации Тогда
		Аннотации = УпроститьБазовыеАннотации(Аннотации);
	КонецЕсли;
	
	Возврат Аннотации;
	
КонецФункции

// Выполняет анализ текста.
//
// Параметры:
//  Текст			 - Строка	 - обрабатываемый текст.
//  ВыбратьПервую	 - Булево	 - выбрать первую аннотацию.
// 
// Возвращаемое значение:
//  Массив - агрегатные аннотации.
//
Функция ВыполнитьАнализТекста(Знач Текст, ВыбратьПервую = Истина)
	
	АгрегатныеАннотации = Новый Массив;
	Текст = НормализоватьТекст(Текст);
	Предложения = НайтиПредложения(Текст, Ложь);
	Для Счетчик = 0 По Предложения.Количество() -1 Цикл
		Предложение = Предложения[Счетчик];
		АгрегатнаяАннотация = СоздатьАгрегатнуюАннотацию(Предложение, Текст);
		Если АгрегатнаяАннотация <> Неопределено Тогда
			УточняющиеПредложения = УточняющиеПредложения(Предложения, Счетчик);
			АгрегатнаяАннотация = УточнитьАгрегатнуюАннотацию(АгрегатнаяАннотация, УточняющиеПредложения, Текст);
			АгрегатныеАннотации.Добавить(АгрегатнаяАннотация);
		КонецЕсли;
	КонецЦикла;
	
	Возврат АгрегатныеАннотации;
	
КонецФункции

// Ищет уточняющие предложения.
//
// Параметры:
//  Предложения	 - Массив	 - предложения.
//  Счетчик		 - Число	 - количество уточняющих предложений.
// 
// Возвращаемое значение:
//  Массив - уточняющие предложения.
//
Функция УточняющиеПредложения(Предложения, Знач Счетчик)
	
	ГлубинаАнализа = 2;
	УточняющиеПредложения = Новый Массив;
	КоличествоПредложений = Предложения.Количество();
	Пока ГлубинаАнализа > 0 Цикл
		Счетчик = Счетчик + 1;
		Если Счетчик > КоличествоПредложений - 1 Тогда
			Прервать;
		КонецЕсли;
		УточняющиеПредложения.Добавить(Предложения[Счетчик]);
		ГлубинаАнализа = ГлубинаАнализа - 1;
	КонецЦикла;
	
	Возврат УточняющиеПредложения;
	
КонецФункции

// Уточняет агрегатную аннотацию.
//
// Параметры:
//  АгрегатнаяАннотация	 - Структура	 - агрегатная аннотация.
//  УточняющиеПредложения	 - Массив	 - уточняющие предложения.
//  Текст					 - Строка	 - обрабатываемый текст.
// 
// Возвращаемое значение:
//  Структура - новая агрегатная аннотация.
//
Функция УточнитьАгрегатнуюАннотацию(АгрегатнаяАннотация, УточняющиеПредложения, Текст)
	
	НоваяАгрегатнаяАннотация = АгрегатнаяАннотация;
	Если АгрегатнаяАннотация.Аннотации["Время"] = Неопределено Тогда
		
		АннотацииВремени = Новый Массив;
		Для Каждого Предложение Из УточняющиеПредложения Цикл
			ТокеныПредложения = ПолучитьТокеныПредложения(Предложение, Текст);
			ТекущиеАннотацииВремени = СоздатьБазовыеАннотации(
				ТокеныПредложения,
				ШаблоныВремени(),
				"время",
				Ложь);
			ТекущиеАннотацииДаты = СоздатьБазовыеАннотации(
				ТокеныПредложения,
				ШаблоныДаты(),
				"дата",
				Ложь);
			РазрешитьНеоднозначностьАннотаций(ТекущиеАннотацииВремени, ТекущиеАннотацииДаты);
			ТекущиеАннотацииВремени = УпроститьБазовыеАннотации(ТекущиеАннотацииВремени);
			ТекущиеАннотацииДаты = УпроститьБазовыеАннотации(ТекущиеАннотацииДаты);
			Если ТекущиеАннотацииДаты.Количество() <> 0 Тогда
				ДатаНачала = АннотацияДатаНачала(ТекущиеАннотацииДаты[0], ДатаИсходногоТекста);
				Если НачалоДня(ДатаИсходногоТекста) = НачалоДня(ДатаНачала) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если ТекущиеАннотацииВремени.Количество() <> 0 Тогда
				АннотацииВремени = ТекущиеАннотацииВремени;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если АннотацииВремени.Количество() <> 0 Тогда
			
			АннотацияСловарь = Новый Соответствие;
			Для Каждого ЭлементСловаря Из АгрегатнаяАннотация.Аннотации Цикл
				АннотацияСловарь.Вставить(ЭлементСловаря.Ключ, ЭлементСловаря.Значение);
			КонецЦикла;
			АннотацияСловарь.Вставить("Время", АннотацииВремени);
			Данные = АгрегатнаяАннотация.Данные + " " + Предложение.Данные;
			
			НоваяАгрегатнаяАннотация = АгрегатнаяАннотация(АннотацияСловарь, Данные);
			НоваяАгрегатнаяАннотация.Имя = АгрегатнаяАннотация.Имя;
			Начала = Новый Массив;
			Концы = Новый Массив;
			Для Каждого Аннотации Из Значения(АннотацияСловарь) Цикл
				Для Каждого Аннотация Из Аннотации Цикл
					Начала.Добавить(Аннотация.Начало);
					Концы.Добавить(Аннотация.Конец);
				КонецЦикла;
			КонецЦикла;
			НоваяАгрегатнаяАннотация.Начало = Минимум(Начала);
			НоваяАгрегатнаяАннотация.Конец = Максимум(Концы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НоваяАгрегатнаяАннотация;
	
КонецФункции

// Формирует шаблон.
//
// Параметры:
//  Список1	 - Массив	 - элемент шаблона 1.
//  Список2	 - Массив	 - элемент шаблона 2.
//  Список3	 - Массив	 - элемент шаблона 3.
//  Список4	 - Массив	 - элемент шаблона 4.
//  Список5	 - Массив	 - элемент шаблона 5.
// 
// Возвращаемое значение:
//  Структура - шаблон.
//
Функция Шаблон(Список1, Список2 = Неопределено, Список3 = Неопределено, Список4 = Неопределено, Список5 = Неопределено)
	
	Списки = Новый Массив;
	Списки.Добавить(Список1);
	Если Список2 <> Неопределено Тогда
		Списки.Добавить(Список2);
	КонецЕсли;
	Если Список3 <> Неопределено Тогда
		Списки.Добавить(Список3);
	КонецЕсли;
	Если Список4 <> Неопределено Тогда
		Списки.Добавить(Список4);
	КонецЕсли;
	Если Список5 <> Неопределено Тогда
		Списки.Добавить(Список5);
	КонецЕсли;
	
	Шаблон = Новый Структура;
	
	Шаблон.Вставить("ЭтоШаблон", Истина);
	Шаблон.Вставить("Списки", Списки);
	
	Возврат Шаблон;
	
КонецФункции

// Проверяет токены предложения на соответствие шаблону.
//
// Параметры:
//  Шаблон				 - Структура	 - шаблон.
//  ТокеныПредложения	 - Массив	 - токены предложения.
// 
// Возвращаемое значение:
//  Массив - соответствия шаблону.
//
Функция Соответствует(Шаблон, Знач ТокеныПредложения)
	
	СписокСлов = ИзвлечьСписокСлов(Шаблон.Списки);
	СловариАннотаций = ПолучитьСоответствия(СписокСлов, ТокеныПредложения);
	
	Возврат СловариАннотаций;
	
КонецФункции

// Извлекает списки слов.
//
// Параметры:
//  СпискиДляИзвлечения	 - Массив	 - списки для извлечения.
// 
// Возвращаемое значение:
//  Массив - списки слов.
//
Функция ИзвлечьСписокСлов(СпискиДляИзвлечения)
	
	Списки = Новый Массив;
	Для Каждого Список Из СпискиДляИзвлечения Цикл
		Если ЭтоШаблон(Список) Тогда
			Для Каждого НовыйСписок Из ИзвлечьСписокСлов(Список.Списки) Цикл
				Списки.Добавить(НовыйСписок);
			КонецЦикла;
		Иначе
			Списки.Добавить(Список);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Списки;
	
КонецФункции

// Получает соответствия токенов спискам.
//
// Параметры:
//  Списки	 - Массив	 - списки.
//  Токены	 - Массив	 - токены.
// 
// Возвращаемое значение:
//  Массив - соответствия.
//
Функция ПолучитьСоответствия(Списки, Токены)
	
	ВозможныеСоответствия = Новый Массив;
	Для Каждого Токен Из Токены Цикл
		ВозможныеСоответствия.Добавить(Токен);
	КонецЦикла;
	
	Для Счетчик = 0 По Списки.Количество() - 1 Цикл
		
		ТекущиеСоответствия = Новый Массив;
		Для Каждого Токен Из ВозможныеСоответствия Цикл
			Если Токен <> Неопределено И Списки[Счетчик].Найти(Токен.Лемма) <> Неопределено Тогда
				ТекущиеСоответствия.Добавить(Токен);
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущиеСоответствия.Количество() <> 0 Тогда
			Если Счетчик = Списки.Количество() - 1 Тогда
				ВозможныеСоответствия = Новый Массив;
				Для Каждого Токен Из ТекущиеСоответствия Цикл
					ВозможныеСоответствия.Добавить(Токен);
				КонецЦикла;
			Иначе
				ВозможныеСоответствия = Новый Массив;
				Для Каждого Токен Из ТекущиеСоответствия Цикл
					ВозможныеСоответствия.Добавить(Токен.Следующий);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВозможныеСоответствия.Количество() <> 0 Тогда
		
		Соответствия = Новый Массив;
		Для Каждого Токен Из ВозможныеСоответствия Цикл
			
			Соответствие = Новый Массив;
			Соответствие.Добавить(Токен.Данные);
			Конец = Токен.Конец;
			Начало = 0;
			Если ВозможныеСоответствия.Количество() = 1 Тогда
				Начало = Токен.Начало;
			КонецЕсли;
			
			// Собрать соответствующую последовательность токенов в обратном порядке.
			Счетчик = 0;
			Для Счетчик = 0 По Списки.Количество() - 2 Цикл
				Соответствие.Добавить(Токен.Предыдущий.Данные);
				Токен = Токен.Предыдущий;
				Начало = Токен.Начало;
			КонецЦикла;
			Соответствие = Перевернуть(Соответствие);
			
			СловарьАннотации = Новый Структура;
			СловарьАннотации.Вставить("Слова", Соответствие);
			СловарьАннотации.Вставить("Начало", Начало);
			СловарьАннотации.Вставить("Конец", Конец);
			Соответствия.Добавить(СловарьАннотации);
			
		КонецЦикла;
		
		Возврат Соответствия;
		
	КонецЕсли;
	
КонецФункции

// Определяет тип токена.
//
// Параметры:
//  Токен	 - Структура	 - токен.
// 
// Возвращаемое значение:
//  Строка - тип токена.
//
Функция ТокенТип(Токен)
	
	Если ЭтоЧисло(Токен.Данные) Тогда
		Токен.Тип = "number";
	ИначеЕсли ЭтоСлово(Токен.Данные) Тогда
		Токен.Тип = "word";
	Иначе
		Токен.Тип = "unknown";
	КонецЕсли;
	
	Возврат Токен.Тип;
	
КонецФункции

// Определяет регистр токена.
//
// Параметры:
//  Токен	 - Структура	 - токен.
// 
// Возвращаемое значение:
//  Строка - регистр токена.
//
Функция ТокенРегистр(Токен)
	
	Если Токен.Тип = "number" Или Токен.Тип = "punctuatuion" Или Токен.Тип = "unknown" Тогда
		Токен.Регистр = "unknown";
	ИначеЕсли Токен.Тип = "word" Тогда
		Если Токен.Данные = НРег(Токен.Данные) Тогда
			Токен.Регистр = "lowercase";
		ИначеЕсли Токен.Данные = ВРег(Токен.Данные) Тогда
			Токен.Регистр = "uppercase";
		ИначеЕсли Токен.Данные = ТРег(Токен.Данные) Тогда
			Токен.Регистр = "title";
		Иначе
			Токен.Регистр = "unknown";
		КонецЕсли;
	Иначе
		Токен.Регистр = "unknown";
	КонецЕсли;
	
	Возврат Токен.Регистр;
	
КонецФункции

// Определяет лемму токена.
//
// Параметры:
//  Токен	 - Структура	 - токен.
// 
// Возвращаемое значение:
//  Строка - лемма токена.
//
Функция ТокенЛемма(Токен)
	
	Если Токен.Регистр <> "lowercase" Тогда
		Токен.Лемма = НРег(Токен.Данные);
	Иначе
		Токен.Лемма = Токен.Данные;
	КонецЕсли;
	
	Возврат Токен.Лемма;
	
КонецФункции

// Нормализует текст.
//
// Параметры:
//  Текст	 - Строка	 - обрабатываемый текст.
//
// Возвращаемое значение:
//  Строка - нормализованный текст.
//
Функция НормализоватьТекст(Знач Текст)
	
	// Сокращаем до 1000 символов.
	Текст = ПолучитьОбрабатываемыйТекст(Текст);
	
	// Удаляем символы цитирования и пустые символы по краям строки.
	КодСимволаЦитирования = КодСимвола(">");
	ТекстРезультата = Новый ТекстовыйДокумент;
	Для Индекс = 1 По СтрЧислоСтрок(Текст) Цикл
		
		Строка = СтрПолучитьСтроку(Текст, Индекс);
		Строка = СокрЛП(Строка);
		Пока КодСимвола(Строка) = КодСимвола(">") Цикл
			Строка = Сред(Строка, 2);
			Строка = СокрЛП(Строка);
			Если Не СтрЗаканчиваетсяНа(Строка, ".") Тогда
				Строка = Строка + ".";
			КонецЕсли;
		КонецЦикла;
		ТекстРезультата.ДобавитьСтроку(Строка);
		
	КонецЦикла;
	Текст = ТекстРезультата.ПолучитьТекст();
	Текст = СокрЛП(Текст);
	
	// Исправляем лишние переводы строки.
	ДлинаТекста = СтрДлина(Текст);
	ОбработатьТекст = Истина;
	Пока ОбработатьТекст Цикл
		// При нормализации используется "!", а не ".", во избежании появления лишних дат.
		Текст = СтрЗаменить(Текст, Символы.ПС + Символы.ПС + Символы.ПС, "! ");
		Текст = СтрЗаменить(Текст, Символы.ПС + Символы.ПС, "! ");
		Текст = СтрЗаменить(Текст, "   ", " ");
		Текст = СтрЗаменить(Текст, "  ", " ");
		Текст = СтрЗаменить(Текст, " " + Символы.ПС, Символы.ПС);
		Текст = СтрЗаменить(Текст, "?.", "?");
		Текст = СтрЗаменить(Текст, "?!", "?");
		Текст = СтрЗаменить(Текст, "!.", "!");
		Текст = СтрЗаменить(Текст, "!!", "!");
		Текст = СтрЗаменить(Текст, ".!", ".");
		Текст = СокрЛП(Текст);
		
		ОбработатьТекст = ДлинаТекста <> СтрДлина(Текст);
		ДлинаТекста = СтрДлина(Текст);
		
	КонецЦикла;
	
	Текст = СтрЗаменить(Текст, "Ё", "Е");
	Текст = СтрЗаменить(Текст, "ё", "е");
	
	Возврат Текст;
	
КонецФункции

// Определяет минимальное значение.
//
// Параметры:
//  Значения - Массив	 - значения.
// 
// Возвращаемое значение:
//  Число - минимальное значение.
//
Функция Минимум(Значения)
	
	Минимум = Значения[0];
	Для Каждого Значение Из Значения Цикл
		Минимум = Мин(Минимум, Значение);
	КонецЦикла;
	
	Возврат Минимум;
	
КонецФункции

// Определяет максимальное значение.
//
// Параметры:
//  Значения - Массив	 - значения.
// 
// Возвращаемое значение:
//  Число - максимальное значение.
//
Функция Максимум(Значения)
	
	Максимум = Значения[0];
	Для Каждого Значение Из Значения Цикл
		Максимум = Макс(Максимум, Значение);
	КонецЦикла;
	
	Возврат Максимум;
	
КонецФункции

// Определяет, что переданное значение является шаблоном.
//
// Параметры:
//  Значение - Произвольный	 - значение.
// 
// Возвращаемое значение:
//  Булево - значение является шаблоном.
//
Функция ЭтоШаблон(Значение)
	
	Перем ЭтоШаблон;
	
	Если ТипЗнч(Значение) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Значение.Свойство("ЭтоШаблон", ЭтоШаблон) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭтоШаблон;
	
КонецФункции

// Переворачивает массив.
//
// Параметры:
//  Массив	 - Массив	 - обрабатываемый массив.
// 
// Возвращаемое значение:
//  Массив - перевернутый массив.
//
Функция Перевернуть(Массив)
	
	ПеревернутыйМассив = Новый Массив;
	
	КоличествоЭлементов = Массив.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		ПеревернутыйМассив.Добавить(Массив[КоличествоЭлементов - Индекс]);
	КонецЦикла;
	
	Возврат ПеревернутыйМассив;
	
КонецФункции

// Сортирует массив.
//
// Параметры:
//  Массив	 - Массив	 - обрабатываемый массив.
// 
// Возвращаемое значение:
//  Массив - отсортированный массив.
//
Функция Сортировать(Массив)
	
	Сортировка = Новый СписокЗначений;
	Сортировка.ЗагрузитьЗначения(Массив);
	Сортировка.СортироватьПоЗначению();
	Возврат Сортировка.ВыгрузитьЗначения();
	
КонецФункции

// Формирует массив ключей соответствия.
//
// Параметры:
//  Соответствие - Соответствие	 - обрабатываемое соответствие.
// 
// Возвращаемое значение:
//  Массив - ключи соответствия.
//
Функция Ключи(Соответствие)
	
	Ключи = Новый Массив;
	
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Ключи.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат Ключи;
	
КонецФункции

// Формирует массив значений соответствия.
//
// Параметры:
//  Соответствие - Соответствие	 - обрабатываемое соответствие.
// 
// Возвращаемое значение:
//  Массив - значения соответствия.
//
Функция Значения(Соответствие)
	
	Значения = Новый Массив;
	
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Значения.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат Значения;
	
КонецФункции

// Преобразует значение в строку.
//
// Параметры:
//  Строка	 - Число, Строка	 - строка.
// 
// Возвращаемое значение:
//  Строка - преобразованная строка.
//
Функция ВСтроку(Строка)
	
	Возврат Формат(Строка, "ЧН=0; ЧГ=")
	
КонецФункции

// Формирует текст аннотации.
//
// Параметры:
//  Текст		 - Строка	 - обрабатываемый текст.
//  Аннотация	 - Структура	 - аннотация.
// 
// Возвращаемое значение:
//  Строка - текст аннотации.
//
Функция АннотацияТекст(Текст, Аннотация)
	
	Если Аннотация.Свойство("Данные") Тогда
		Возврат Аннотация.Данные;
	КонецЕсли;
	
	Возврат Сред(Текст, Аннотация.Начало + 1, Аннотация.Конец - Аннотация.Начало + 1);
	
КонецФункции

// Формирует дату начала аннотации.
//
// Параметры:
//  Аннотация	 - Структура	 - аннотация.
//  ДатаТекста	 - Дата	 - дата текста.
// 
// Возвращаемое значение:
//  Дата - дата начала аннотации.
//
Функция АннотацияДатаНачала(Аннотация, ДатаТекста)
	
	Дата = Неопределено;
	
	Если Аннотация = Неопределено Тогда
		Возврат Дата;
	КонецЕсли;
	
	ДатаДень = Неопределено;
	ДатаМесяц = Неопределено;
	ДатаГод = Неопределено;
	Словари = Неопределено;
	// Порядок следования условия определяет приоритет распознавания даты.
	Если АннотацияСоответствуетШаблону(Аннотация, ШаблонДата4(), Словари) Тогда
		// Пример: "03.07.15"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ДатаДень = Токены[0].Лемма;
		ДатаМесяц = Токены[2].Лемма;
		ДатаГод = ГодКраткийВГод(Токены[4].Лемма);
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата3(), Словари) Тогда
		// Пример: "03.07.2015"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ДатаДень = Токены[0].Лемма;
		ДатаМесяц = Токены[2].Лемма;
		ДатаГод = Токены[4].Лемма;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата19(), Словари) Тогда
		// Пример: "03.07"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ДатаДень = Токены[0].Лемма;
		ДатаМесяц = Токены[2].Лемма;
		ДатаГод = НормализованныйГод(ДатаДень, ДатаМесяц, ДатаТекста);
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата11(), Словари) Тогда
		// Пример: "3 марта 2015"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ДатаДень = Строка(ЧислоИзСтроки(Токены[0].Лемма));
		ДатаМесяц = МесяцИзСтроки(Токены[1].Лемма);
		ДатаГод = Токены[2].Лемма;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата10(), Словари) Тогда
		// Пример: "на 3-е марта"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ДатаДень = Строка(ЧислоИзСтроки(Токены[1].Лемма));
		ДатаМесяц = МесяцИзСтроки(Токены[4].Лемма);
		ДатаГод = НормализованныйГод(ДатаДень, ДатаМесяц, ДатаТекста);
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата20(), Словари) Тогда
		// Пример: "двадцать первое октября"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ДатаДень = Строка(ЧислоИзСтроки(Токены[0].Лемма) + ЧислоИзСтроки(Токены[1].Лемма));
		ДатаМесяц = МесяцИзСтроки(Токены[2].Лемма);
		ДатаГод = НормализованныйГод(ДатаДень, ДатаМесяц, ДатаТекста);
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата9(), Словари) Тогда
		// Пример: "на третье марта"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ДатаДень = Строка(ЧислоИзСтроки(Токены[1].Лемма));
		ДатаМесяц = МесяцИзСтроки(Токены[2].Лемма);
		ДатаГод = НормализованныйГод(ДатаДень, ДатаМесяц, ДатаТекста);
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата8(), Словари) Тогда
		// Пример: "третьего марта"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ДатаДень = Строка(ЧислоИзСтроки(Токены[0].Лемма));
		ДатаМесяц = МесяцИзСтроки(Токены[1].Лемма);
		ДатаГод = НормализованныйГод(ДатаДень, ДатаМесяц, ДатаТекста);
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата7(), Словари) Тогда
		// Пример: "3-го марта"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ДатаДень = Строка(ЧислоИзСтроки(Токены[0].Лемма));
		ДатаМесяц = МесяцИзСтроки(Токены[3].Лемма);
		ДатаГод = НормализованныйГод(ДатаДень, ДатаМесяц, ДатаТекста);
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата6(), Словари) Тогда
		// Пример: "3 марта"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ДатаДень = Строка(ЧислоИзСтроки(Токены[0].Лемма));
		ДатаМесяц = МесяцИзСтроки(Токены[1].Лемма);
		ДатаГод = НормализованныйГод(ДатаДень, ДатаМесяц, ДатаТекста);
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата5(), Словари) Тогда
		// Пример: "в марте"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ДатаДень = "01";
		ДатаМесяц = МесяцИзСтроки(Токены[1].Лемма);
		ДатаГод = НормализованныйГод(ДатаДень, ДатаМесяц, ДатаТекста);
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата16(), Словари) Тогда
		// Пример: "через 2-3 дня"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Дата = ИнтервалВремениДата(Токены[1].Лемма, Токены[4].Лемма, ДатаТекста);
		Если Дата <> Неопределено Тогда
			ДатаДень = Формат(Дата, "ДФ=dd");
			ДатаМесяц = Формат(Дата, "ДФ=MM");
			ДатаГод = Формат(Дата, "ДФ=yyyy");
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата15(), Словари)
		Или АннотацияСоответствуетШаблону(Аннотация, ШаблонДата14(), Словари) Тогда
		// Пример: "через 2 дня"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Дата = ИнтервалВремениДата(Токены[1].Лемма, Токены[2].Лемма, ДатаТекста);
		Если Дата <> Неопределено Тогда
			ДатаДень = Формат(Дата, "ДФ=dd");
			ДатаМесяц = Формат(Дата, "ДФ=MM");
			ДатаГод = Формат(Дата, "ДФ=yyyy");
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата13(), Словари) Тогда
		// Пример: "через день"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Дата = ИнтервалВремениДата("1", Токены[1].Лемма, ДатаТекста);
		Если Дата <> Неопределено Тогда
			ДатаДень = Формат(Дата, "ДФ=dd");
			ДатаМесяц = Формат(Дата, "ДФ=MM");
			ДатаГод = Формат(Дата, "ДФ=yyyy");
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата12(), Словари) Тогда
		// Пример: "сегодня"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Дата = ДеньАбстрактныйДата(Токены[0].Лемма, ДатаТекста);
		Если Дата <> Неопределено Тогда
			ДатаДень = Формат(Дата, "ДФ=dd");
			ДатаМесяц = Формат(Дата, "ДФ=MM");
			ДатаГод = Формат(Дата, "ДФ=yyyy");
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата2(), Словари, Ложь)
		Или АннотацияСоответствуетШаблону(Аннотация, ШаблонДата1(), Словари, Ложь) Тогда
		// Пример: "в понедельник"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Дата = ДеньНеделиДата(Токены[1].Лемма, ДатаТекста);
		Если Дата <> Неопределено Тогда
			ДатаДень = Формат(Дата, "ДФ=dd");
			ДатаМесяц = Формат(Дата, "ДФ=MM");
			ДатаГод = Формат(Дата, "ДФ=yyyy");
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонДата17(), Словари, Ложь)
		Или АннотацияСоответствуетШаблону(Аннотация, ШаблонДата18(), Словари, Ложь) Тогда
		// Пример: "на этой неделе", "в этом месяце"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Дата = ИнтервалДата(Токены[1].Лемма, Токены[2].Лемма, ДатаТекста);
		Если Дата <> Неопределено Тогда
			ДатаДень = Формат(Дата, "ДФ=dd");
			ДатаМесяц = Формат(Дата, "ДФ=MM");
			ДатаГод = Формат(Дата, "ДФ=yyyy");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДатаГод <> Неопределено И ДатаМесяц <> Неопределено И ДатаДень <> Неопределено Тогда
		Если СтрДлина(ДатаДень) = 1 Тогда
			ДатаДень = "0" + ДатаДень;
		КонецЕсли;
		Дата = СтрШаблон("%1%2%3", ДатаГод, ДатаМесяц, ДатаДень);
	КонецЕсли;
	
	Возврат Дата;
	
КонецФункции

// Формирует дату конца аннотации.
//
// Параметры:
//  Аннотация	 - Структура	 - аннотация.
//  ДатаТекста	 - Дата	 - дата текста.
// 
// Возвращаемое значение:
//  Дата - дата конца аннотации.
//
Функция АннотацияДатаКонца(Аннотация, ДатаТекста)
	
	Дата = Неопределено;
	
	Если Аннотация = Неопределено Тогда
		Возврат Дата;
	КонецЕсли;
	
	Возврат Дата;
	
КонецФункции

// Формирует время начала аннотации.
//
// Параметры:
//  Аннотация	 - Структура	 - аннотация.
//  ДатаТекста	 - Дата	 - дата текста.
// 
// Возвращаемое значение:
//  Дата - время начала аннотации.
//
Функция АннотацияВремяНачала(Аннотация, ДатаТекста)
	
	Время = Неопределено;
	
	Если Аннотация = Неопределено Тогда
		Возврат Время;
	КонецЕсли;
	
	ВремяЧас = Неопределено;
	ВремяМинута = Неопределено;
	Словари = Неопределено;
	// Порядок следования условия определяет приоритет распознавания времени.
	Если АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя31(), Словари) Тогда
		// Пример: "с 11-00 до 20-00"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ВремяЧас = Токены[1].Лемма;
		ВремяМинута = Токены[3].Лемма;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя4(), Словари) Тогда
		// Пример: "в 10:00 часов"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ВремяЧас = Токены[1].Лемма;
		ВремяМинута = Токены[3].Лемма;;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя3(), Словари) Тогда
		// Пример: "10:00-12:00"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ВремяЧас = Токены[0].Лемма;
		ВремяМинута = Токены[2].Лемма;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя2(), Словари, Ложь) Тогда
		// Пример: "с 10:00"
		НайденоВремяНачала = Ложь;
		Для Каждого Словарь Из Словари Цикл
			Токены = СловарьПолучитьТокены(Словарь);
			Если ПредлогиВремениНачала().Найти(Токены[0].Лемма) = Неопределено Тогда
				// Не является временем начала.
				Продолжить;
			КонецЕсли;
			Если НайденоВремяНачала = Истина Тогда
				// Найдено два времени начала.
				ВремяЧас = Неопределено;
				ВремяМинута = Неопределено;
				Прервать;
			КонецЕсли;
			НайденоВремяНачала = Истина;
			ВремяЧас = Токены[1].Лемма;
			ВремяМинута = Токены[3].Лемма;
		КонецЦикла;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя1(), Словари) Тогда
		// Пример: "10:00"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ВремяЧас = Токены[0].Лемма;
		ВремяМинута = Токены[2].Лемма;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя25(), Словари) Тогда
		// Пример: "через полчаса"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Дата = ДатаТекста + 1800; // 1800 - число секунд в половине часа
		ВремяЧас = Формат(Дата, "ДФ=HH");
		ВремяМинута = Формат(Дата, "ДФ=mm");
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя24(), Словари)
		Или АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя23(), Словари) Тогда
		// Пример: "через 5 минут", "через пять минут"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Минуты = ЧислоИзСтроки(Токены[1].Лемма);
		Если Минуты <> Неопределено Тогда
			Дата = ДатаТекста + Минуты * 60; // 60 - число секунд в минуте
			ВремяЧас = Формат(Дата, "ДФ=HH");
			ВремяМинута = Формат(Дата, "ДФ=mm");
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя22(), Словари) Тогда
		// Пример: "полпервого"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Часы = ЧислоИзСтроки(Токены[0].Лемма);
		Если Часы <> Неопределено Тогда
			Часы = НормализоватьЧас(Часы) - 1;
			ВремяЧас = Строка(Часы);
			ВремяМинута = "30";
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя21(), Словари) Тогда
		// Пример: "в половине первого"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Часы = ЧислоИзСтроки(Токены[2].Лемма);
		Если Часы <> Неопределено Тогда
			Часы = НормализоватьЧас(Часы) - 1;
			ВремяЧас = Строка(Часы);
			ВремяМинута = "30";
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя20(), Словари)
		Или АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя19(), Словари) Тогда
		// Пример: "в час дня", "в час"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ВремяЧас = "13";
		ВремяМинута = "00";
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя18(), Словари)
		Или АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя17(), Словари) Тогда
		// Пример: "в 10 часов дня", "в десять часов дня"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Часы = ЧислоИзСтроки(Токены[1].Лемма);
		Если Часы <> Неопределено Тогда
			Часы = НормализоватьЧас(Часы, Токены[3].Лемма);
			ВремяЧас = Строка(Часы);
			ВремяМинута = "00";
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя16(), Словари)
		Или АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя15(), Словари)
		Или АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя14(), Словари)
		Или АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя13(), Словари) Тогда
		// Пример: "в 5 минут седьмого", "в пять минут седьмого", "в пять минут 7-го", "в 5 минут 5-го".
		Токены = СловарьПолучитьТокены(Словари[0]);
		Минуты = ЧислоИзСтроки(Токены[1].Лемма);
		Часы = ЧислоИзСтроки(Токены[3].Лемма);
		Если Часы <> Неопределено И Минуты <> Неопределено Тогда
			Минуты = Минуты;
			Часы = НормализоватьЧас(Часы);
			ВремяЧас = Строка(Часы);
			ВремяМинута = Строка(Минуты);
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя12(), Словари)
		Или АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя11(), Словари)
		Или АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя10(), Словари)
		Или АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя9(), Словари) Тогда
		// Пример: "без 5 минут 7", "без 5 минут семь", "без пяти минут 7", "без пяти минут семь".
		Токены = СловарьПолучитьТокены(Словари[0]);
		Минуты = ЧислоИзСтроки(Токены[1].Лемма);
		Часы = ЧислоИзСтроки(Токены[3].Лемма);
		Если Часы <> Неопределено И Минуты <> Неопределено Тогда
			Минуты = 60 - Минуты;
			Часы = НормализоватьЧас(Часы) - 1;
			ВремяЧас = Строка(Часы);
			ВремяМинута = Строка(Минуты);
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя28(), Словари) Тогда
		// Пример: "с утра до вечера"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Часы = ЧислоИзСтроки(Токены[1].Лемма);
		Если Часы <> Неопределено Тогда
			Часы = НормализоватьЧас(Часы);
			ВремяЧас = Строка(Часы);
			ВремяМинута = "00";
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя27(), Словари) Тогда
		// Пример: "с утра", "до обеда", "до вечера"
		НайденоВремяНачала = Ложь;
		Для Каждого Словарь Из Словари Цикл
			Токены = СловарьПолучитьТокены(Словарь);
			Если ПредлогиВремениНачала().Найти(Токены[0].Лемма) = Неопределено Тогда
				// Не является временем начала.
				Продолжить;
			КонецЕсли;
			Если НайденоВремяНачала = Истина Тогда
				// Найдено два времени начала.
				ВремяЧас = Неопределено;
				ВремяМинута = Неопределено;
				Прервать;
			КонецЕсли;
			НайденоВремяНачала = Истина;
			Часы = ЧислоИзСтроки(Токены[1].Лемма);
			Если Часы <> Неопределено Тогда
				Часы = НормализоватьЧас(Часы);
				ВремяЧас = Строка(Часы);
				ВремяМинута = "00";
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя8(), Словари)
		Или АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя7(), Словари) Тогда
		// Пример: "в десять часов", "во втором часу"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Часы = ЧислоИзСтроки(Токены[1].Лемма);
		Если Часы <> Неопределено Тогда
			Часы = НормализоватьЧас(Часы);
			ВремяЧас = Строка(Часы);
			ВремяМинута = "00";
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя6(), Словари) Тогда
		// Пример: "с 12 до 16 часов"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ВремяЧас = Токены[1].Лемма;
		ВремяМинута = "00";
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя5(), Словари) Тогда
		// Пример: "в 10 часов"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ВремяЧас = Токены[1].Лемма;
		ВремяМинута = "00";
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя30(), Словари) Тогда
		// Пример: "с 12 до 13"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ВремяЧас = Токены[1].Лемма;;
		ВремяМинута = "00";
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя29(), Словари) Тогда
		// Пример: "с 12"
		НайденоВремяНачала = Ложь;
		Для Каждого Словарь Из Словари Цикл
			Токены = СловарьПолучитьТокены(Словарь);
			Если ПредлогиВремениНачала().Найти(Токены[0].Лемма) = Неопределено Тогда
				// Не является временем начала.
				Продолжить;
			КонецЕсли;
			Если НайденоВремяНачала = Истина Тогда
				// Найдено два времени начала.
				ВремяЧас = Неопределено;
				ВремяМинута = Неопределено;
				Прервать;
			КонецЕсли;
			НайденоВремяНачала = Истина;
			ВремяЧас = Токены[1].Лемма;
			ВремяМинута = "00";
		КонецЦикла;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя32(), Словари)
		Или АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя33(), Словари) Тогда
		// Пример: "без четверти 12", "без четверти двенадцать"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Часы = ЧислоИзСтроки(Токены[2].Лемма);
		Если Часы <> Неопределено Тогда
			Часы = НормализоватьЧас(Часы) - 1;
			ВремяЧас = Строка(Часы);
			ВремяМинута = "45";
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя34(), Словари) Тогда
		// Пример: "утром"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Часы = ЧислоИзСтроки(Токены[0].Лемма);
		Если Часы <> Неопределено Тогда
			Часы = НормализоватьЧас(Часы);
			ВремяЧас = Строка(Часы);
			ВремяМинута = "00";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВремяЧас <> Неопределено И ВремяМинута <> Неопределено Тогда
		Если СтрДлина(ВремяЧас) = 1 Тогда
			ВремяЧас = "0" + ВремяЧас;
		КонецЕсли;
		Если СтрДлина(ВремяМинута) = 1 Тогда
			ВремяМинута = "0" + ВремяМинута;
		КонецЕсли;
		Время = СтрШаблон("%1%2%3", ВремяЧас, ВремяМинута, "00");
	КонецЕсли;
	
	Возврат Время;
	
КонецФункции

// Формирует время конца аннотации.
//
// Параметры:
//  Аннотация	 - Структура	 - аннотация.
//  ДатаТекста	 - Дата	 - дата текста.
// 
// Возвращаемое значение:
//  Дата - время конца аннотации.
//
Функция АннотацияВремяКонца(Аннотация, ДатаТекста)
	
	Время = Неопределено;
	
	Если Аннотация = Неопределено Тогда
		Возврат Время;
	КонецЕсли;
	
	ВремяЧас = Неопределено;
	ВремяМинута = Неопределено;
	Словари = Неопределено;
	Если АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя31(), Словари) Тогда
		// Пример: "с 11-00 до 20-00"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ВремяЧас = Токены[5].Лемма;
		ВремяМинута = Токены[7].Лемма;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя6(), Словари) Тогда
		// Пример: "с 12 до 16 часов"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ВремяЧас = Токены[3].Лемма;
		ВремяМинута = "00";
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя3(), Словари) Тогда
		// Пример: "10:00-12:00"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ВремяЧас = Токены[4].Лемма;
		ВремяМинута = Токены[6].Лемма;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя2(), Словари, Ложь) Тогда
		// Пример: "до 10:00"
		НайденоВремяКонца = Ложь;
		Для Каждого Словарь Из Словари Цикл
			Токены = СловарьПолучитьТокены(Словарь);
			Если ПредлогиВремениКонца().Найти(Токены[0].Лемма) = Неопределено Тогда
				// Не является временем начала.
				Продолжить;
			КонецЕсли;
			Если НайденоВремяКонца = Истина Тогда
				// Найдено два времени начала.
				ВремяЧас = Неопределено;
				ВремяМинута = Неопределено;
				Прервать;
			КонецЕсли;
			НайденоВремяКонца = Истина;
			ВремяЧас = Токены[1].Лемма;
			ВремяМинута = Токены[3].Лемма;
		КонецЦикла;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя28(), Словари) Тогда
		// Пример: "с утра до вечера"
		Токены = СловарьПолучитьТокены(Словари[0]);
		Часы = ЧислоИзСтроки(Токены[3].Лемма);
		Если Часы <> Неопределено Тогда
			Часы = НормализоватьЧас(Часы);
			ВремяЧас = Строка(Часы);
			ВремяМинута = "00";
		КонецЕсли;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя27(), Словари) Тогда
		// Пример: "с утра", "до обеда", "до вечера"
		НайденоВремяКонца = Ложь;
		Для Каждого Словарь Из Словари Цикл
			Токены = СловарьПолучитьТокены(Словарь);
			Если ПредлогиВремениКонца().Найти(Токены[0].Лемма) = Неопределено Тогда
				// Не является временем начала.
				Продолжить;
			КонецЕсли;
			Если НайденоВремяКонца = Истина Тогда
				// Найдено два времени начала.
				ВремяЧас = Неопределено;
				ВремяМинута = Неопределено;
				Прервать;
			КонецЕсли;
			НайденоВремяКонца = Истина;
			Часы = ЧислоИзСтроки(Токены[1].Лемма);
			Если Часы <> Неопределено Тогда
				Часы = НормализоватьЧас(Часы);
				ВремяЧас = Строка(Часы);
				ВремяМинута = "00";
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя30(), Словари) Тогда
		// Пример: "с 12 до 13"
		Токены = СловарьПолучитьТокены(Словари[0]);
		ВремяЧас = Токены[3].Лемма;;
		ВремяМинута = "00";
		
	ИначеЕсли АннотацияСоответствуетШаблону(Аннотация, ШаблонВремя29(), Словари) Тогда
		// Пример: "с 12"
		НайденоВремяКонца = Ложь;
		Для Каждого Словарь Из Словари Цикл
			Токены = СловарьПолучитьТокены(Словарь);
			Если ПредлогиВремениКонца().Найти(Токены[0].Лемма) = Неопределено Тогда
				// Не является временем начала.
				Продолжить;
			КонецЕсли;
			Если НайденоВремяКонца = Истина Тогда
				// Найдено два времени начала.
				ВремяЧас = Неопределено;
				ВремяМинута = Неопределено;
				Прервать;
			КонецЕсли;
			НайденоВремяКонца = Истина;
			ВремяЧас = Токены[1].Лемма;
			ВремяМинута = "00";
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВремяЧас <> Неопределено И ВремяМинута <> Неопределено Тогда
		Если СтрДлина(ВремяЧас) = 1 Тогда
			ВремяЧас = "0" + ВремяЧас;
		КонецЕсли;
		Время = СтрШаблон("%1%2%3", ВремяЧас, ВремяМинута, "00");
	КонецЕсли;
	
	Возврат Время;
	
КонецФункции

// Проверяет, соответствует ли аннотация шаблону.
//
// Параметры:
//  Аннотация			 - Структура - аннотация.
//  Шаблон				 - Структура - шаблон.
//  Словари				 - Массив	 - словари.
//  СтрогоеСоответствие	 - Булево	 - проверять на строгое соответствие.
// 
// Возвращаемое значение:
//  Булево - аннотация соответствует шаблону.
//
Функция АннотацияСоответствуетШаблону(Аннотация, Шаблон, Словари = Неопределено, СтрогоеСоответствие = Истина)
	
	Словари = Соответствует(Шаблон, АннотацияПолучитьТокены(Аннотация));
	
	АннотацияСоответствуетШаблону = Словари <> Неопределено;
	Если АннотацияСоответствуетШаблону И СтрогоеСоответствие Тогда
		АннотацияСоответствуетШаблону = Словари.Количество() = 1;
	КонецЕсли;
	
	Возврат АннотацияСоответствуетШаблону;
	
КонецФункции

// Формирует токены аннотации.
//
// Параметры:
//  Аннотация	 - Структура - аннотация.
// 
// Возвращаемое значение:
//  Массив - токены аннотации.
//
Функция АннотацияПолучитьТокены(Аннотация)
	
	Текст = Аннотация.Данные;
	Предложения = НайтиПредложения(Текст, Истина);
	
	Возврат ПолучитьТокеныПредложения(Предложения[0], Текст);
	
КонецФункции

// Формирует токены словаря.
//
// Параметры:
//  Словарь	 - Структура - словарь.
// 
// Возвращаемое значение:
//  Массив - токены словаря.
//
Функция СловарьПолучитьТокены(Словарь)
	
	Текст = СоединитьСтроки(Словарь.Слова);
	Предложения = НайтиПредложения(Текст, Истина);
	
	Возврат ПолучитьТокеныПредложения(Предложения[0], Текст);
	
КонецФункции

// Определяет дату абстрактного дня.
//
// Параметры:
//  День		 - Строка	 - абстрактный день.
//  ДатаТекста	 - Дата	 - дата текста.
// 
// Возвращаемое значение:
//  Дата - дата абстрактного дня.
//
Функция ДеньАбстрактныйДата(День, ДатаТекста)
	
	Дата = Неопределено;
	Если День = "сегодня" Тогда
		Дата = НачалоДня(ДатаТекста);
	ИначеЕсли День = "завтра" Тогда
		Дата = НачалоДня(ДатаТекста) + 86400; // 86400 - число секунд в сутках
	ИначеЕсли День = "послезавтра" Тогда
		Дата = НачалоДня(ДатаТекста) + 2 * 86400; // 86400 - число секунд в сутках 
	КонецЕсли;
	
	Возврат Дата;
	
КонецФункции

// Преобразует краткий год в год.
//
// Параметры:
//  ГодКраткий	 - Строка	 - краткий год.
// 
// Возвращаемое значение:
//  Строка - год.
//
Функция ГодКраткийВГод(ГодКраткий)
	
	Года19Века = Новый Массив;
	Для Индекс = 95 По 99 Цикл
		Года19Века.Добавить(ВСтроку(Индекс));
	КонецЦикла;
	Век = ?(Года19Века.Найти(ГодКраткий) <> Неопределено, "19", "20");
	
	Год = Век + ГодКраткий;
	
	Возврат Год;
	
КонецФункции

// Определяет дату дня недели.
//
// Параметры:
//  День		 - Строка	 - день недели.
//  ДатаТекста	 - Дата	 - дата текста.
// 
// Возвращаемое значение:
//  Дата - дата дня недели.
//
Функция ДеньНеделиДата(День, ДатаТекста)
	
	Дата = Неопределено;
	Если ДниПонедельник().Найти(День) <> Неопределено
		Или ДниАббревиатурыПонедельник().Найти(День) <> Неопределено Тогда
		ДеньНедели = 1;
	ИначеЕсли ДниВторник().Найти(День) <> Неопределено
		Или ДниАббревиатурыВторник().Найти(День) <> Неопределено Тогда
		ДеньНедели = 2;
	ИначеЕсли ДниСреда().Найти(День) <> Неопределено
		Или ДниАббревиатурыСреда().Найти(День) <> Неопределено Тогда
		ДеньНедели = 3;
	ИначеЕсли ДниЧетверг().Найти(День) <> Неопределено
		Или ДниАббревиатурыЧетверг().Найти(День) <> Неопределено Тогда
		ДеньНедели = 4;
	ИначеЕсли ДниПятница().Найти(День) <> Неопределено
		Или ДниАббревиатурыПятница().Найти(День) <> Неопределено Тогда
		ДеньНедели = 5;
	ИначеЕсли ДниСуббота().Найти(День) <> Неопределено
		Или ДниАббревиатурыСуббота().Найти(День) <> Неопределено Тогда
		ДеньНедели = 6;
	ИначеЕсли ДниВоскресенье().Найти(День) <> Неопределено
		Или ДниАббревиатурыВоскресенье().Найти(День) <> Неопределено Тогда
		ДеньНедели = 7;
	КонецЕсли;
	
	ТекущийДеньНедели = ДеньНедели(ДатаТекста);
	Если ДеньНедели <= ТекущийДеньНедели Тогда
		ДеньНедели = ДеньНедели + 7;
	КонецЕсли;
	
	Дата = НачалоДня(ДатаТекста) + (ДеньНедели - ТекущийДеньНедели) * 86400; // 86400 - число секунд в сутках
	
	Возврат Дата;
	
КонецФункции

// Определяет дату интервала.
//
// Параметры:
//  ИнтервалПрилагательное	 - Строка	 - интервал прилагательное.
//  ИнтервалВремени			 - Строка	 - интервал времени.
//  ДатаТекста				 - Дата	 - дата текста.
// 
// Возвращаемое значение:
//  Дата - дата интервала.
//
Функция ИнтервалДата(ИнтервалПрилагательное, ИнтервалВремени, ДатаТекста)
	
	Дата = Неопределено;
	Если ИнтервалВремениДень().Найти(ИнтервалВремени) <> Неопределено
		И ИнтервалПрилагательноеЭтот().Найти(ИнтервалПрилагательное) <> Неопределено Тогда
		
		// Сегодня.
		Дата = НачалоЧаса(ДатаТекста);
		
	ИначеЕсли ИнтервалВремениДень().Найти(ИнтервалВремени) <> Неопределено
		И ИнтервалПрилагательноеСледующий().Найти(ИнтервалПрилагательное) <> Неопределено Тогда
		
		// Завтра.
		Дата = НачалоДня(ДатаТекста) + 86400;
		
	ИначеЕсли ИнтервалВремениНеделя().Найти(ИнтервалВремени) <> Неопределено
		И ИнтервалПрилагательноеЭтот().Найти(ИнтервалПрилагательное) <> Неопределено Тогда
		
		// Эта пятница.
		ТекущийДеньНедели = ДеньНедели(ДатаТекста);
		Если ТекущийДеньНедели > 5 Тогда
			Дата = НачалоДня(ДатаТекста);
		Иначе
			Дата = НачалоДня(ДатаТекста) + (5 - ТекущийДеньНедели) * 86400;
		КонецЕсли;
		
	ИначеЕсли ИнтервалВремениНеделя().Найти(ИнтервалВремени) <> Неопределено
		И ИнтервалПрилагательноеСледующий().Найти(ИнтервалПрилагательное) <> Неопределено Тогда
		
		// Следующий понедельник.
		ТекущийДеньНедели = ДеньНедели(ДатаТекста);
		Дата = НачалоДня(ДатаТекста) + (8 - ТекущийДеньНедели) * 86400;
		
	ИначеЕсли ИнтервалВремениМесяц().Найти(ИнтервалВремени) <> Неопределено
		И ИнтервалПрилагательноеЭтот().Найти(ИнтервалПрилагательное) <> Неопределено Тогда
		
		// Последний день месяца.
		Дата = НачалоДня(КонецМесяца(ДатаТекста));
		ТекущийДеньНедели = ДеньНедели(Дата);
		Если ТекущийДеньНедели > 5 Тогда
			Дата = Дата + (5 - ТекущийДеньНедели) * 86400;
		КонецЕсли;
		
	ИначеЕсли ИнтервалВремениМесяц().Найти(ИнтервалВремени) <> Неопределено
		И ИнтервалПрилагательноеСледующий().Найти(ИнтервалПрилагательное) <> Неопределено Тогда
		
		// Первый день месяца.
		Дата = НачалоМесяца(ДобавитьМесяц(ДатаТекста, 1));
		ТекущийДеньНедели = ДеньНедели(Дата);
		Если ТекущийДеньНедели > 5 Тогда
			Дата = Дата + (8 - ТекущийДеньНедели) * 86400;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Дата;
	
КонецФункции

// Нормализует час.
//
// Параметры:
//  Час			 - Число	 - час.
//  ВремяСуток	 - Строка	 - время суток.
// 
// Возвращаемое значение:
//  Число - нормализованный час.
//
Функция НормализоватьЧас(Знач Час, ВремяСуток = Неопределено)
	
	Если ВремяСутокДоПолудня().Найти(ВремяСуток) <> Неопределено Тогда
		// Уже нормализован.
	ИначеЕсли ВремяСутокПослеПолудня().Найти(ВремяСуток) <> Неопределено Тогда
		Час = Час + 12;
	Иначе
		Если Час < 9 Тогда
			Час = Час + 12;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Час;
	
КонецФункции

// Формирует число из строки.
//
// Параметры:
//  Строка	 - Строка	 - обрабатываемая строка.
// 
// Возвращаемое значение:
//  Число - число из строки.
//
Функция ЧислоИзСтроки(Строка)
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	Число = ОписаниеТипа.ПривестиЗначение(Строка);
	Если Число <> 0 Или (Число = 0 И (Строка = "0" Или Строка = "00")) Тогда
		Возврат Число;
	КонецЕсли;
	
	Число = Неопределено;
	Если ЧасыСтроки1().Найти(Строка) <> Неопределено
		Или ЧасыПрилагательное1().Найти(Строка) <> Неопределено
		Или ПолчасаПрилагательное1().Найти(Строка) <> Неопределено
		Или ДниПрилагательное1().Найти(Строка) <> Неопределено Тогда
		Число = 1;
	ИначеЕсли ЧасыСтроки2().Найти(Строка) <> Неопределено
		Или ЧасыПрилагательное2().Найти(Строка) <> Неопределено
		Или ПолчасаПрилагательное2().Найти(Строка) <> Неопределено
		Или ДниПрилагательное2().Найти(Строка) <> Неопределено Тогда
		Число = 2;
	ИначеЕсли ЧасыСтроки3().Найти(Строка) <> Неопределено
		Или ЧасыПрилагательное3().Найти(Строка) <> Неопределено
		Или ПолчасаПрилагательное3().Найти(Строка) <> Неопределено
		Или ДниПрилагательное3().Найти(Строка) <> Неопределено Тогда
		Число = 3;
	ИначеЕсли ЧасыСтроки4().Найти(Строка) <> Неопределено
		Или ЧасыПрилагательное4().Найти(Строка) <> Неопределено
		Или ПолчасаПрилагательное4().Найти(Строка) <> Неопределено
		Или ДниПрилагательное4().Найти(Строка) <> Неопределено Тогда
		Число = 4;
	ИначеЕсли ЧасыСтроки5().Найти(Строка) <> Неопределено
		Или ЧасыПрилагательное5().Найти(Строка) <> Неопределено
		Или ПолчасаПрилагательное5().Найти(Строка) <> Неопределено
		Или МинутыСтроки5().Найти(Строка) <> Неопределено
		Или ДниПрилагательное5().Найти(Строка) <> Неопределено Тогда
		Число = 5;
	ИначеЕсли ЧасыСтроки6().Найти(Строка) <> Неопределено
		Или ЧасыПрилагательное6().Найти(Строка) <> Неопределено
		Или ПолчасаПрилагательное6().Найти(Строка) <> Неопределено
		Или ДниПрилагательное6().Найти(Строка) <> Неопределено Тогда
		Число = 6;
	ИначеЕсли ЧасыСтроки7().Найти(Строка) <> Неопределено
		Или ЧасыПрилагательное7().Найти(Строка) <> Неопределено
		Или ПолчасаПрилагательное7().Найти(Строка) <> Неопределено
		Или ДниПрилагательное7().Найти(Строка) <> Неопределено Тогда
		Число = 7;
	ИначеЕсли ЧасыСтроки8().Найти(Строка) <> Неопределено
		Или ЧасыПрилагательное8().Найти(Строка) <> Неопределено
		Или ПолчасаПрилагательное8().Найти(Строка) <> Неопределено
		Или ДниПрилагательное8().Найти(Строка) <> Неопределено Тогда
		Число = 8;
	ИначеЕсли ЧасыСтроки9().Найти(Строка) <> Неопределено
		Или ЧасыПрилагательное9().Найти(Строка) <> Неопределено
		Или ПолчасаПрилагательное9().Найти(Строка) <> Неопределено
		Или ДниПрилагательное9().Найти(Строка) <> Неопределено Тогда
		Число = 9;
	ИначеЕсли ЧасыСтроки10().Найти(Строка) <> Неопределено
		Или ЧасыПрилагательное10().Найти(Строка) <> Неопределено
		Или ПолчасаПрилагательное10().Найти(Строка) <> Неопределено
		Или МинутыСтроки10().Найти(Строка) <> Неопределено
		Или ДниПрилагательное10().Найти(Строка) <> Неопределено Тогда
		Число = 10;
	ИначеЕсли ЧасыСтроки11().Найти(Строка) <> Неопределено
		Или ЧасыПрилагательное11().Найти(Строка) <> Неопределено
		Или ПолчасаПрилагательное11().Найти(Строка) <> Неопределено
		Или ДниПрилагательное11().Найти(Строка) <> Неопределено Тогда
		Число = 11;
	ИначеЕсли ЧасыСтроки12().Найти(Строка) <> Неопределено
		Или ЧасыПрилагательное12().Найти(Строка) <> Неопределено
		Или ПолчасаПрилагательное12().Найти(Строка) <> Неопределено
		Или ДниПрилагательное12().Найти(Строка) <> Неопределено Тогда
		Число = 12;
	ИначеЕсли ДниПрилагательное13().Найти(Строка) <> Неопределено Тогда
		Число = 13;
	ИначеЕсли ДниПрилагательное14().Найти(Строка) <> Неопределено Тогда
		Число = 14;
	ИначеЕсли МинутыСтроки15().Найти(Строка) <> Неопределено
		Или ДниПрилагательное15().Найти(Строка) <> Неопределено Тогда
		Число = 15;
	ИначеЕсли ДниПрилагательное16().Найти(Строка) <> Неопределено Тогда
		Число = 16;
	ИначеЕсли ДниПрилагательное17().Найти(Строка) <> Неопределено Тогда
		Число = 17;
	ИначеЕсли ДниПрилагательное18().Найти(Строка) <> Неопределено Тогда
		Число = 18;
	ИначеЕсли ДниПрилагательное19().Найти(Строка) <> Неопределено Тогда
		Число = 19;
	ИначеЕсли МинутыСтроки20().Найти(Строка) <> Неопределено
		Или ДниПрилагательное20().Найти(Строка) <> Неопределено
		Или ДниДесятки20().Найти(Строка) <> Неопределено Тогда
		Число = 20;
	ИначеЕсли ДниПрилагательное30().Найти(Строка) <> Неопределено
		Или ДниДесятки30().Найти(Строка) <> Неопределено Тогда
		Число = 30;
	ИначеЕсли ВремяСутокЯвноеУтро().Найти(Строка) <> Неопределено
		Или ВремяСутокСамостоятельноеУтро().Найти(Строка) <> Неопределено Тогда
		Число = 9;
	ИначеЕсли ВремяСутокЯвноеОбед().Найти(Строка) <> Неопределено
		Или ВремяСутокСамостоятельноеОбед().Найти(Строка) <> Неопределено Тогда
		Число = 14;
	ИначеЕсли ВремяСутокЯвноеВечер().Найти(Строка) <> Неопределено
		Или ВремяСутокСамостоятельноеВечер().Найти(Строка) <> Неопределено Тогда
		Число = 18;
	КонецЕсли;
	
	Возврат Число;
	
КонецФункции

// Формирует интервал из строки.
//
// Параметры:
//  Строка	 - Строка	 - обрабатываемая строка.
// 
// Возвращаемое значение:
//  Число - интервал из строки.
//
Функция ИнтервалИзСтроки(Строка)
	
	Интервал = Неопределено;
	
	Если ИнтервалВремениДень().Найти(Строка) <> Неопределено Тогда
		Интервал = "день";
	ИначеЕсли ИнтервалВремениНеделя().Найти(Строка) <> Неопределено Тогда
		Интервал = "неделя";
	ИначеЕсли ИнтервалВремениМесяц().Найти(Строка) <> Неопределено Тогда
		Интервал = "месяц";
	КонецЕсли;
	
	Возврат Интервал;
	
КонецФункции

// Формирует месяц из строки.
//
// Параметры:
//  Строка	 - Строка	 - обрабатываемая строка.
// 
// Возвращаемое значение:
//  Число - месяц из строки.
//
Функция МесяцИзСтроки(Строка)
	
	Месяц = Неопределено;
	Если МесяцыЯнварь().Найти(Строка) <> Неопределено Тогда
		Месяц = "01";
	ИначеЕсли МесяцыФевраль().Найти(Строка) <> Неопределено Тогда
		Месяц = "02";
	ИначеЕсли МесяцыМарт().Найти(Строка) <> Неопределено Тогда
		Месяц = "03";
	ИначеЕсли МесяцыАпрель().Найти(Строка) <> Неопределено Тогда
		Месяц = "04";
	ИначеЕсли МесяцыМай().Найти(Строка) <> Неопределено Тогда
		Месяц = "05";
	ИначеЕсли МесяцыИюнь().Найти(Строка) <> Неопределено Тогда
		Месяц = "06";
	ИначеЕсли МесяцыИюль().Найти(Строка) <> Неопределено Тогда
		Месяц = "07";
	ИначеЕсли МесяцыАвгуст().Найти(Строка) <> Неопределено Тогда
		Месяц = "08";
	ИначеЕсли МесяцыСентябрь().Найти(Строка) <> Неопределено Тогда
		Месяц = "09";
	ИначеЕсли МесяцыОктябрь().Найти(Строка) <> Неопределено Тогда
		Месяц = "10";
	ИначеЕсли МесяцыНоябрь().Найти(Строка) <> Неопределено Тогда
		Месяц = "11";
	ИначеЕсли МесяцыДекабрь().Найти(Строка) <> Неопределено Тогда
		Месяц = "12";
	ИначеЕсли МесяцыТекущий().Найти(Строка) <> Неопределено Тогда
		Месяц = Формат(ДатаИсходногоТекста, "ДФ=MM");
	КонецЕсли;
	
	Возврат Месяц;
	
КонецФункции

// Определяет дату интервала времени.
//
// Параметры:
//  КоличествоИнтервалов - Число - количество интервалов.
//  Интервал			 - Строка	 - интервал.
//  ДатаТекста			 - Дата		 - дата текста.
// 
// Возвращаемое значение:
//  Дата - дата интервала времени.
//
Функция ИнтервалВремениДата(Знач КоличествоИнтервалов, Знач Интервал, ДатаТекста)
	
	Дата = Неопределено;
	
	КоличествоИнтервалов = ЧислоИзСтроки(КоличествоИнтервалов);
	Интервал = ИнтервалИзСтроки(Интервал);
	Если КоличествоИнтервалов = Неопределено Или Интервал = Неопределено Тогда
		Возврат Дата;
	КонецЕсли;
	
	Если Интервал ="день" Тогда
		Дата = ДатаТекста + КоличествоИнтервалов * 86400 + 86400; // 86400 - число секунд в сутках 
	ИначеЕсли Интервал = "неделя" Тогда
		Дата = ДатаТекста + КоличествоИнтервалов * 604800; // 604800 - число секунд в неделе
	ИначеЕсли Интервал = "месяц" Тогда
		Дата = ДобавитьМесяц(ДатаТекста, КоличествоИнтервалов);
	КонецЕсли;
	
	Возврат Дата;
	
КонецФункции

// Нормализует год.
//
// Параметры:
//  ДатаДень	 - Строка	 - день даты.
//  ДатаМесяц	 - Строка	 - месяц даты.
//  ДатаТекста	 - Строка	 - год даты.
// 
// Возвращаемое значение:
//  Дата - дата с нормализованным годом.
//
Функция НормализованныйГод(Знач ДатаДень, ДатаМесяц, ДатаТекста)
	
	ДатаГод = Формат(ДатаТекста, "ДФ=yyyy");
	Если СтрДлина(ДатаДень) = 1 Тогда
		ДатаДень = "0" + ДатаДень;
	КонецЕсли;
	Если Дата(СтрШаблон("%1%2%3%4", ДатаГод, ДатаМесяц, ДатаДень, "000000")) < ДатаТекста Тогда
		ДатаГод = ВСтроку(ЧислоИзСтроки(ДатаГод) + 1);
	КонецЕсли;
	
	Возврат ДатаГод;
	
КонецФункции

// Формирует структуру данных события.
//
// Параметры:
//  АгрегатнаяАннотация	 - Структура	 - агрегатная аннотация.
// 
// Возвращаемое значение:
//  Структура - Данные события.
//
Функция ДанныеСобытия(АгрегатнаяАннотация)
	
	АннотацияДаты = Неопределено;
	АннотацияВремени = Неопределено;
	АннотацияМеста = Неопределено;
	
	ДанныеСобытия = Новый Структура;
	ДанныеСобытия.Вставить("Тип", "");
	ДанныеСобытия.Вставить("Дата", "");
	ДанныеСобытия.Вставить("Время", "");
	ДанныеСобытия.Вставить("Начало", Дата(1, 1, 1));
	ДанныеСобытия.Вставить("Конец", Дата(1, 1, 1));
	ДанныеСобытия.Вставить("Место", "");
	ДанныеСобытия.Вставить("Текст", "");
	ДанныеСобытия.Вставить("Мероприятие", "");
	
	ДанныеСобытия.Тип = АгрегатнаяАннотация.Имя;
	ДатаСобытия = Новый Массив;
	ВремяСобытия = Новый Массив;
	МестоСобытия = Новый Массив;
	МероприятиеСобытия = Новый Массив;
	АннотацияДаты = Неопределено;
	АннотацияВремени = Неопределено;
	АннотацияМеста = Неопределено;
	АннотацияМероприятия = Неопределено;
	Для Каждого КлючИЗначение Из АгрегатнаяАннотация.Аннотации Цикл
		Для Каждого Аннотация Из КлючИЗначение.Значение Цикл
			Если КлючИЗначение.Ключ = "Дата" Тогда
				Если АннотацияДаты = Неопределено Тогда
					АннотацияДаты = Аннотация;
				КонецЕсли;
				ДатаСобытия.Добавить(АннотацияТекст(ИсходныйТекст, Аннотация));
			ИначеЕсли КлючИЗначение.Ключ = "Время" Тогда
				Если АннотацияВремени = Неопределено Тогда
					АннотацияВремени = Аннотация;
				КонецЕсли;
				ВремяСобытия.Добавить(АннотацияТекст(ИсходныйТекст, Аннотация));
			ИначеЕсли КлючИЗначение.Ключ = "Место" Тогда
				Если АннотацияМеста = Неопределено Тогда
					АннотацияМеста = Аннотация;
				КонецЕсли;
				МестоСобытия.Добавить(АннотацияТекст(ИсходныйТекст, Аннотация));
			ИначеЕсли КлючИЗначение.Ключ = "Мероприятие" Тогда
				Если АннотацияМероприятия = Неопределено Тогда
					АннотацияМероприятия = Аннотация;
				КонецЕсли;
				МероприятиеСобытия.Добавить(АннотацияТекст(ИсходныйТекст, Аннотация));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ДанныеСобытия.Дата = СтрСоединить(ДатаСобытия, "; ");
	ДанныеСобытия.Время = СтрСоединить(ВремяСобытия, "; ");
	ДанныеСобытия.Место = СтрСоединить(МестоСобытия, "; ");
	ДанныеСобытия.Мероприятие = СтрСоединить(МероприятиеСобытия, "; ");
	ДанныеСобытия.Текст = АгрегатнаяАннотация.Данные;
	
	Если АннотацияДаты <> Неопределено Или АннотацияВремени <> Неопределено Тогда
		
		// Дата события
		ДатаНачала = АннотацияДатаНачала(АннотацияДаты, ДатаИсходногоТекста);
		ДатаКонца = АннотацияДатаКонца(АннотацияДаты, ДатаИсходногоТекста);
		УказанаДата = ДатаНачала <> Неопределено Или ДатаКонца <> Неопределено;
		Если ДатаНачала = Неопределено И ДатаКонца = Неопределено Тогда
			ДатаНачала = Формат(ДатаИсходногоТекста, "ДФ=yyyyMMdd");
			ДатаКонца = ДатаНачала;
		ИначеЕсли ДатаНачала <> Неопределено И ДатаКонца = Неопределено Тогда
			ДатаКонца = ДатаНачала;
		ИначеЕсли ДатаНачала = Неопределено И ДатаКонца <> Неопределено Тогда
			ДатаНачала = ДатаКонца;
		КонецЕсли;
		
		// Время события
		ВремяНачала = АннотацияВремяНачала(АннотацияВремени, ДатаИсходногоТекста);
		ВремяКонца = АннотацияВремяКонца(АннотацияВремени, ДатаИсходногоТекста);
		Если ВремяНачала = Неопределено И ВремяКонца = Неопределено Тогда
			Начало = РаботаСРабочимКалендаремКлиентСервер.КонецПолучаса(ДатаИсходногоТекста);
			ВремяНачала = Формат(Начало, "ДФ=HHmm00");
			Конец = Начало + 3600; // 3600 - число секунд в часе
			ВремяКонца = Формат(Конец, "ДФ=HHmm00");
		ИначеЕсли ВремяНачала <> Неопределено И ВремяКонца = Неопределено Тогда
			Начало = Дата(ДатаНачала + ВремяНачала);
			Конец = Начало + 3600; // 3600 - число секунд в часе
			ВремяКонца = Формат(Конец, "ДФ=HHmm00");
		ИначеЕсли ВремяНачала = Неопределено И ВремяКонца <> Неопределено Тогда
			Конец = Дата(ДатаКонца + ВремяКонца);
			Начало = Конец - 3600; // 3600 - число секунд в часе
			ВремяНачала = Формат(Начало, "ДФ=HHmm00");
		КонецЕсли;
		
		ДанныеСобытия.Начало = Дата(ДатаНачала + ВремяНачала);
		ДанныеСобытия.Конец = Дата(ДатаКонца + ВремяКонца);
		Если Не УказанаДата И ДанныеСобытия.Начало <= ДатаИсходногоТекста Тогда
			ДанныеСобытия.Начало = ДанныеСобытия.Начало + 86400; // 86400 - число секунд в сутках
			ДанныеСобытия.Конец = ДанныеСобытия.Конец + 86400; // 86400 - число секунд в сутках
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеСобытия;
	
КонецФункции

// Формирует массив токенов.
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - массив токенов.
//
Функция Токены(Текст)
	
	Если ХешТокенов = Неопределено Тогда
		ХешТокенов = Новый Соответствие;
	КонецЕсли;
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
	ХешированиеДанных.Добавить(Текст);
	
	Токены = ХешТокенов[ХешированиеДанных.ХешСумма];
	Если Токены = Неопределено Тогда
		Токены = ПолучитьТокены(Текст);
		ХешТокенов.Вставить(ХешированиеДанных.ХешСумма, Токены);
	КонецЕсли;
	
	Возврат Токены;
	
КонецФункции

// Формирует массив титульных токенов.
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - массив титульных токенов.
//
Функция ТитульныйРегистр(Текст)
	
	Возврат НайтиТитульныеТокены(Текст);
	
КонецФункции

// Формирует массив титульных токенов.
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - массив титульных токенов.
Функция НайтиТитульныеТокены(Текст)
	
	ТитульныеТокены = Новый Массив;
	Для Каждого Токен Из Токены(Текст) Цикл
		Если Токен.Регистр = "title" Тогда
			ТитульныеТокены.Добавить(Токен.Лемма);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТитульныеТокены;
	
КонецФункции

// Формирует массив числовых токенов.
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - массив числовых токенов.
//
Функция Числа(Текст)
	
	Возврат НайтиЧисла(Текст);
	
КонецФункции

// Формирует массив числовых токенов.
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - массив числовых токенов.
//
Функция НайтиЧисла(Текст)
	
	ТокеныЧисла = Новый Массив;
	Для Каждого Токен Из Токены(Текст) Цикл
		Если Токен.Тип = "number" Тогда
			ТокеныЧисла.Добавить(Токен.Данные);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТокеныЧисла;
	
КонецФункции

// Формирует массив точек.
//
// Возвращаемое значение:
//  Массив - массив точек.
//
Функция Точка()
	
	Точка = Новый Массив;
	Точка.Добавить(".");
	
	Возврат Точка;
	
КонецФункции

// Формирует массив тире.
//
// Возвращаемое значение:
//  Массив - массив тире.
//
Функция Тире()
	
	Тире = Новый Массив;
	Тире.Добавить(Символ(45));
	Тире.Добавить(Символ(8211));
	Тире.Добавить(Символ(8212));
	
	Возврат Тире;
	
КонецФункции

// Формирует массив запятых.
//
// Возвращаемое значение:
//  Массив - массив запятых.
//
Функция Запятая()
	
	Запятая = Новый Массив;
	Запятая.Добавить(",");
	
	Возврат Запятая;
	
КонецФункции

// Формирует массив двоеточий.
//
// Возвращаемое значение:
//  Массив - массив двоеточий.
//
Функция Двоеточие()
	
	Двоеточие = Новый Массив;
	Двоеточие.Добавить(":");
	
	Возврат Двоеточие;
	
КонецФункции

// Формирует массив предлогов времени.
//
// Возвращаемое значение:
//  Массив - массив предлогов времени.
//
Функция ПредлогиВремени()
	
	ПредлогиВремени = Новый Массив;
	Для Каждого Предлог Из ПредлогиВремениНачала() Цикл
		ПредлогиВремени.Добавить(Предлог);
	КонецЦикла;
	Для Каждого Предлог Из ПредлогиВремениКонца() Цикл
		ПредлогиВремени.Добавить(Предлог);
	КонецЦикла;
	
	Возврат ПредлогиВремени;
	
КонецФункции

// Формирует массив предлогов времени начала.
//
// Возвращаемое значение:
//  Массив - массив предлогов времени начала.
//
Функция ПредлогиВремениНачала()
	
	ПредлогиВремени = Новый Массив;
	ПредлогиВремени.Добавить("в");
	ПредлогиВремени.Добавить("во");
	ПредлогиВремени.Добавить("около");
	ПредлогиВремени.Добавить("после");
	ПредлогиВремени.Добавить("с");
	ПредлогиВремени.Добавить("к");
	ПредлогиВремени.Добавить("через");
	ПредлогиВремени.Добавить("перед");
	ПредлогиВремени.Добавить("на");
	
	Возврат ПредлогиВремени;
	
КонецФункции

// Формирует массив предлогов времени конца.
//
// Возвращаемое значение:
//  Массив - массив предлогов времени конца.
//
Функция ПредлогиВремениКонца()
	
	ПредлогиВремени = Новый Массив;
	ПредлогиВремени.Добавить("до");
	ПредлогиВремени.Добавить("по");
	
	Возврат ПредлогиВремени;
	
КонецФункции

// Формирует массив слов через.
//
// Возвращаемое значение:
//  Массив - массив слов через.
//
Функция Через()
	
	Через = Новый Массив;
	Через.Добавить("через");
	
	Возврат Через;
	
КонецФункции

// Формирует массив слов без.
//
// Возвращаемое значение:
//  Массив - массив слов без.
//
Функция Без()
	
	Без = Новый Массив;
	Без.Добавить("без");
	
	Возврат Без;
	
КонецФункции

// Формирует массив слов четверть.
//
// Возвращаемое значение:
//  Массив - массив слов четверть.
//
Функция Четверть()
	
	Четверть = Новый Массив;
	Четверть.Добавить("четверти");
	
	Возврат Четверть;
	
КонецФункции

// Формирует массив предлогов в.
//
// Возвращаемое значение:
//  Массив - массив предлогов в.
//
Функция В()
	
	ПредлогВ = Новый Массив;
	ПредлогВ.Добавить("в");
	ПредлогВ.Добавить("во");
	
	Возврат ПредлогВ;
	
КонецФункции

// Формирует массив слов явного времени суток.
//
// Возвращаемое значение:
//  Массив - массив слов явного времени суток.
//
Функция ВремяСутокЯвное()
	
	ВремяСутокЯвное = Новый Массив;
	Для Каждого ВремяСуток Из ВремяСутокЯвноеУтро() Цикл
		ВремяСутокЯвное.Добавить(ВремяСуток);
	КонецЦикла;
	Для Каждого ВремяСуток Из ВремяСутокЯвноеОбед() Цикл
		ВремяСутокЯвное.Добавить(ВремяСуток);
	КонецЦикла;
	Для Каждого ВремяСуток Из ВремяСутокЯвноеВечер() Цикл
		ВремяСутокЯвное.Добавить(ВремяСуток);
	КонецЦикла;
	
	Возврат ВремяСутокЯвное;
	
КонецФункции

// Формирует массив слов явного времени суток утро.
//
// Возвращаемое значение:
//  Массив - массив слов явного времени суток утро.
//
Функция ВремяСутокЯвноеУтро()
	
	ВремяСутокЯвноеУтро = Новый Массив;
	ВремяСутокЯвноеУтро.Добавить("утра");
	ВремяСутокЯвноеУтро.Добавить("утру");
	
	Возврат ВремяСутокЯвноеУтро;
	
КонецФункции

// Формирует массив слов явного времени суток обед.
//
// Возвращаемое значение:
//  Массив - массив слов явного времени суток обед.
//
Функция ВремяСутокЯвноеОбед()
	
	ВремяСутокЯвноеОбед = Новый Массив;
	ВремяСутокЯвноеОбед.Добавить("обеда");
	ВремяСутокЯвноеОбед.Добавить("обеду");
	
	Возврат ВремяСутокЯвноеОбед;
	
КонецФункции

// Формирует массив слов явного времени суток вечер.
//
// Возвращаемое значение:
//  Массив - массив слов явного времени суток вечер.
//
Функция ВремяСутокЯвноеВечер()
	
	ВремяСутокЯвноеВечер = Новый Массив;
	ВремяСутокЯвноеВечер.Добавить("вечера");
	ВремяСутокЯвноеВечер.Добавить("вечеру");
	
	Возврат ВремяСутокЯвноеВечер;
	
КонецФункции

// Формирует массив слов самостоятельного времени суток.
//
// Возвращаемое значение:
//  Массив - массив слов самостоятельного времени суток.
//
Функция ВремяСутокСамостоятельное()
	
	ВремяСутокСамостоятельное = Новый Массив;
	Для Каждого ВремяСуток Из ВремяСутокСамостоятельноеУтро() Цикл
		ВремяСутокСамостоятельное.Добавить(ВремяСуток);
	КонецЦикла;
	Для Каждого ВремяСуток Из ВремяСутокСамостоятельноеОбед() Цикл
		ВремяСутокСамостоятельное.Добавить(ВремяСуток);
	КонецЦикла;
	Для Каждого ВремяСуток Из ВремяСутокСамостоятельноеВечер() Цикл
		ВремяСутокСамостоятельное.Добавить(ВремяСуток);
	КонецЦикла;
	
	Возврат ВремяСутокСамостоятельное;
	
КонецФункции

// Формирует массив слов самостоятельного времени суток утро.
//
// Возвращаемое значение:
//  Массив - массив слов самостоятельного времени суток утро.
//
Функция ВремяСутокСамостоятельноеУтро()
	
	ВремяСутокСамостоятельноеУтро = Новый Массив;
	ВремяСутокСамостоятельноеУтро.Добавить("утром");
	
	Возврат ВремяСутокСамостоятельноеУтро;
	
КонецФункции

// Формирует массив слов самостоятельного времени суток обед.
//
// Возвращаемое значение:
//  Массив - массив слов самостоятельного времени суток обед.
//
Функция ВремяСутокСамостоятельноеОбед()
	
	ВремяСутокСамостоятельноеОбед = Новый Массив;
	ВремяСутокСамостоятельноеОбед.Добавить("днем");
	
	Возврат ВремяСутокСамостоятельноеОбед;
	
КонецФункции

// Формирует массив слов самостоятельного времени суток вечер.
//
// Возвращаемое значение:
//  Массив - массив слов самостоятельного времени суток вечер.
//
Функция ВремяСутокСамостоятельноеВечер()
	
	ВремяСутокСамостоятельноеВечер = Новый Массив;
	ВремяСутокСамостоятельноеВечер.Добавить("вечером");
	
	Возврат ВремяСутокСамостоятельноеВечер;
	
КонецФункции

// Формирует массив предлогов на.
//
// Возвращаемое значение:
//  Массив - массив предлогов на.
//
Функция На()
	
	На = Новый Массив;
	На.Добавить("на");
	
	Возврат На;
	
КонецФункции

// Формирует массив окончаний прилагательных.
//
// Возвращаемое значение:
//  Массив - массив окончаний прилагательных.
//
Функция ОкончанияПрилагательного()
	
	ОкончанияПрилагательного = Новый Массив;
	ОкончанияПрилагательного.Добавить("го");
	ОкончанияПрилагательного.Добавить("е");
	
	Возврат ОкончанияПрилагательного;
	
КонецФункции

// Формирует массив меток времени.
//
// Возвращаемое значение:
//  Массив - массив меток времени.
//
Функция МеткиВремени()
	
	МеткиВремени = Новый Массив;
	МеткиВремени.Добавить(":");
	МеткиВремени.Добавить(".");
	МеткиВремени.Добавить(Символ(45));
	МеткиВремени.Добавить(Символ(8211));
	МеткиВремени.Добавить(Символ(8212));
	
	Возврат МеткиВремени;
	
КонецФункции

// Формирует массив меток даты.
//
// Возвращаемое значение:
//  Массив - массив меток даты.
//
Функция МеткиДаты()
	
	МеткиДаты = Новый Массив;
	МеткиДаты.Добавить(".");
	МеткиДаты.Добавить(Символ(45));
	МеткиДаты.Добавить(Символ(8211));
	МеткиДаты.Добавить(Символ(8212));
	
	Возврат МеткиДаты;
	
КонецФункции

// Формирует массив часов.
//
// Возвращаемое значение:
//  Массив - массив часов.
//
Функция Часы()
	
	Если ШаблонЧасы = Неопределено Тогда
		ШаблонЧасы = Новый Массив;
		Для Индекс = 0 По 9 Цикл
			ШаблонЧасы.Добавить("0" + ВСтроку(Индекс));
		КонецЦикла;
		Для Индекс = 1 По 24 Цикл
			ШаблонЧасы.Добавить(ВСтроку(Индекс));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШаблонЧасы;
	
КонецФункции

// Формирует массив минут.
//
// Возвращаемое значение:
//  Массив - массив минут.
//
Функция Минуты() 
	
	Если ШаблонМинуты = Неопределено Тогда
		ШаблонМинуты = Новый Массив;
		Для Индекс = 0 По 9 Цикл
			ШаблонМинуты.Добавить("0" + ВСтроку(Индекс));
		КонецЦикла;
		Для Индекс = 10 По 60 Цикл
			ШаблонМинуты.Добавить(ВСтроку(Индекс));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШаблонМинуты;
	
КонецФункции

// Формирует массив слов часов.
//
// Возвращаемое значение:
//  Массив - массив слов часов.
//
Функция ЧасыСтроки()
	
	ЧасыСтроки = Новый Массив;
	Для Каждого Строка Из ЧасыСтроки1() Цикл
		ЧасыСтроки.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыСтроки2() Цикл
		ЧасыСтроки.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыСтроки3() Цикл
		ЧасыСтроки.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыСтроки4() Цикл
		ЧасыСтроки.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыСтроки5() Цикл
		ЧасыСтроки.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыСтроки6() Цикл
		ЧасыСтроки.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыСтроки7() Цикл
		ЧасыСтроки.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыСтроки8() Цикл
		ЧасыСтроки.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыСтроки9() Цикл
		ЧасыСтроки.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыСтроки10() Цикл
		ЧасыСтроки.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыСтроки11() Цикл
		ЧасыСтроки.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыСтроки12() Цикл
		ЧасыСтроки.Добавить(Строка);
	КонецЦикла;
	
	Возврат ЧасыСтроки;
	
КонецФункции

// Формирует массив слов часа 1.
//
// Возвращаемое значение:
//  Массив - массив слов часа 1.
//
Функция ЧасыСтроки1()
	
	ЧасыСтроки = Новый Массив;
	ЧасыСтроки.Добавить("час");
	ЧасыСтроки.Добавить("часу");
	ЧасыСтроки.Добавить("часа");
	
	Возврат ЧасыСтроки;
	
КонецФункции

// Формирует массив слов часа 2.
//
// Возвращаемое значение:
//  Массив - массив слов часа 2.
//
Функция ЧасыСтроки2()
	
	ЧасыСтроки = Новый Массив;
	ЧасыСтроки.Добавить("два");
	ЧасыСтроки.Добавить("две");
	ЧасыСтроки.Добавить("двух");
	ЧасыСтроки.Добавить("двум");
	ЧасыСтроки.Добавить("пару");
	ЧасыСтроки.Добавить("паре");
	
	Возврат ЧасыСтроки;
	
КонецФункции

// Формирует массив слов часа 3.
//
// Возвращаемое значение:
//  Массив - массив слов часа 3.
//
Функция ЧасыСтроки3()
	
	ЧасыСтроки = Новый Массив;
	ЧасыСтроки.Добавить("три");
	ЧасыСтроки.Добавить("трех");
	ЧасыСтроки.Добавить("трех");
	ЧасыСтроки.Добавить("трем");
	ЧасыСтроки.Добавить("трем");
	
	Возврат ЧасыСтроки;
	
КонецФункции

// Формирует массив слов часа 4.
//
// Возвращаемое значение:
//  Массив - массив слов часа 4.
//
Функция ЧасыСтроки4()
	
	ЧасыСтроки = Новый Массив;
	ЧасыСтроки.Добавить("четыре");
	ЧасыСтроки.Добавить("четырех");
	ЧасыСтроки.Добавить("четырех");
	ЧасыСтроки.Добавить("четырем");
	ЧасыСтроки.Добавить("четырем");
	
	Возврат ЧасыСтроки;
	
КонецФункции

// Формирует массив слов часа 5.
//
// Возвращаемое значение:
//  Массив - массив слов часа 5.
//
Функция ЧасыСтроки5()
	
	ЧасыСтроки = Новый Массив;
	ЧасыСтроки.Добавить("пять");
	ЧасыСтроки.Добавить("пяти");
	
	Возврат ЧасыСтроки;
	
КонецФункции

// Формирует массив слов часа 6.
//
// Возвращаемое значение:
//  Массив - массив слов часа 6.
//
Функция ЧасыСтроки6()
	
	ЧасыСтроки = Новый Массив;
	ЧасыСтроки.Добавить("шесть");
	ЧасыСтроки.Добавить("шести");
	
	Возврат ЧасыСтроки;
	
КонецФункции

// Формирует массив слов часа 7.
//
// Возвращаемое значение:
//  Массив - массив слов часа 7.
//
Функция ЧасыСтроки7()
	
	ЧасыСтроки = Новый Массив;
	ЧасыСтроки.Добавить("семь");
	ЧасыСтроки.Добавить("семи");
	
	Возврат ЧасыСтроки;
	
КонецФункции

// Формирует массив слов часа 8.
//
// Возвращаемое значение:
//  Массив - массив слов часа 8.
//
Функция ЧасыСтроки8()
	
	ЧасыСтроки = Новый Массив;
	ЧасыСтроки.Добавить("восемь");
	ЧасыСтроки.Добавить("восьми");
	
	Возврат ЧасыСтроки;
	
КонецФункции

// Формирует массив слов часа 9.
//
// Возвращаемое значение:
//  Массив - массив слов часа 9.
//
Функция ЧасыСтроки9()
	
	ЧасыСтроки = Новый Массив;
	ЧасыСтроки.Добавить("девять");
	ЧасыСтроки.Добавить("девяти");
	
	Возврат ЧасыСтроки;
	
КонецФункции

// Формирует массив слов часа 10.
//
// Возвращаемое значение:
//  Массив - массив слов часа 10.
//
Функция ЧасыСтроки10()
	
	ЧасыСтроки = Новый Массив;
	ЧасыСтроки.Добавить("десять");
	ЧасыСтроки.Добавить("десяти");
	
	Возврат ЧасыСтроки;
	
КонецФункции

// Формирует массив слов часа 11.
//
// Возвращаемое значение:
//  Массив - массив слов часа 11.
//
Функция ЧасыСтроки11()
	
	ЧасыСтроки = Новый Массив;
	ЧасыСтроки.Добавить("одиннадцать");
	ЧасыСтроки.Добавить("одиннадцати");
	
	Возврат ЧасыСтроки;
	
КонецФункции

// Формирует массив слов часа 12.
//
// Возвращаемое значение:
//  Массив - массив слов часа 12.
//
Функция ЧасыСтроки12()
	
	ЧасыСтроки = Новый Массив;
	ЧасыСтроки.Добавить("двенадцать");
	ЧасыСтроки.Добавить("двенадцати");
	
	Возврат ЧасыСтроки;
	
КонецФункции

// Формирует массив прилагательных часов.
//
// Возвращаемое значение:
//  Массив - массив прилагательных часов.
//
Функция ЧасыПрилагательное()
	
	ЧасыПрилагательное = Новый Массив;
	Для Каждого Строка Из ЧасыПрилагательное1() Цикл
		ЧасыПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыПрилагательное2() Цикл
		ЧасыПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыПрилагательное3() Цикл
		ЧасыПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыПрилагательное4() Цикл
		ЧасыПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыПрилагательное5() Цикл
		ЧасыПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыПрилагательное6() Цикл
		ЧасыПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыПрилагательное7() Цикл
		ЧасыПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыПрилагательное8() Цикл
		ЧасыПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыПрилагательное9() Цикл
		ЧасыПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыПрилагательное10() Цикл
		ЧасыПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыПрилагательное11() Цикл
		ЧасыПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ЧасыПрилагательное12() Цикл
		ЧасыПрилагательное.Добавить(Строка);
	КонецЦикла;
	
	Возврат ЧасыПрилагательное;
	
КонецФункции

// Формирует массив прилагательных часа 1.
//
// Возвращаемое значение:
//  Массив - массив прилагательных часа 1.
//
Функция ЧасыПрилагательное1()
	
	ЧасыПрилагательное = Новый Массив;
	ЧасыПрилагательное.Добавить("первом");
	ЧасыПрилагательное.Добавить("первого");
	
	Возврат ЧасыПрилагательное;
	
КонецФункции

// Формирует массив прилагательных часа 2.
//
// Возвращаемое значение:
//  Массив - массив прилагательных часа 2.
//
Функция ЧасыПрилагательное2()
	
	ЧасыПрилагательное = Новый Массив;
	ЧасыПрилагательное.Добавить("втором");
	ЧасыПрилагательное.Добавить("второго");
	
	Возврат ЧасыПрилагательное;
	
КонецФункции

// Формирует массив прилагательных часа 3.
//
// Возвращаемое значение:
//  Массив - массив прилагательных часа 3.
//
Функция ЧасыПрилагательное3()
	
	ЧасыПрилагательное = Новый Массив;
	ЧасыПрилагательное.Добавить("третьем");
	ЧасыПрилагательное.Добавить("третьего");
	
	Возврат ЧасыПрилагательное;
	
КонецФункции

// Формирует массив прилагательных часа 4.
//
// Возвращаемое значение:
//  Массив - массив прилагательных часа 4.
//
Функция ЧасыПрилагательное4()
	
	ЧасыПрилагательное = Новый Массив;
	ЧасыПрилагательное.Добавить("четыре");
	ЧасыПрилагательное.Добавить("четвертого");
	ЧасыПрилагательное.Добавить("четвертого");
	
	Возврат ЧасыПрилагательное;
	
КонецФункции

// Формирует массив прилагательных часа 5.
//
// Возвращаемое значение:
//  Массив - массив прилагательных часа 5.
//
Функция ЧасыПрилагательное5()
	
	ЧасыПрилагательное = Новый Массив;
	ЧасыПрилагательное.Добавить("пятом");
	ЧасыПрилагательное.Добавить("пятого");
	
	Возврат ЧасыПрилагательное;
	
КонецФункции

// Формирует массив прилагательных часа 6.
//
// Возвращаемое значение:
//  Массив - массив прилагательных часа 6.
//
Функция ЧасыПрилагательное6()
	
	ЧасыПрилагательное = Новый Массив;
	ЧасыПрилагательное.Добавить("шестом");
	ЧасыПрилагательное.Добавить("шестого");
	
	Возврат ЧасыПрилагательное;
	
КонецФункции

// Формирует массив прилагательных часа 7.
//
// Возвращаемое значение:
//  Массив - массив прилагательных часа 7.
//
Функция ЧасыПрилагательное7()
	
	ЧасыПрилагательное = Новый Массив;
	ЧасыПрилагательное.Добавить("седьмом");
	ЧасыПрилагательное.Добавить("седьмого");
	
	Возврат ЧасыПрилагательное;
	
КонецФункции

// Формирует массив прилагательных часа 8.
//
// Возвращаемое значение:
//  Массив - массив прилагательных часа 8.
//
Функция ЧасыПрилагательное8()
	
	ЧасыПрилагательное = Новый Массив;
	ЧасыПрилагательное.Добавить("восьмом");
	ЧасыПрилагательное.Добавить("восьмого");
	
	Возврат ЧасыПрилагательное;
	
КонецФункции

// Формирует массив прилагательных часа 9.
//
// Возвращаемое значение:
//  Массив - массив прилагательных часа 9.
//
Функция ЧасыПрилагательное9()
	
	ЧасыПрилагательное = Новый Массив;
	ЧасыПрилагательное.Добавить("девятом");
	ЧасыПрилагательное.Добавить("девятого");
	
	Возврат ЧасыПрилагательное;
	
КонецФункции

// Формирует массив прилагательных часа 10.
//
// Возвращаемое значение:
//  Массив - массив прилагательных часа 10.
//
Функция ЧасыПрилагательное10()
	
	ЧасыПрилагательное = Новый Массив;
	ЧасыПрилагательное.Добавить("десятом");
	ЧасыПрилагательное.Добавить("десятого");
	
	Возврат ЧасыПрилагательное;
	
КонецФункции

// Формирует массив прилагательных часа 11.
//
// Возвращаемое значение:
//  Массив - массив прилагательных часа 11.
//
Функция ЧасыПрилагательное11()
	
	ЧасыПрилагательное = Новый Массив;
	ЧасыПрилагательное.Добавить("одиннадцатом");
	ЧасыПрилагательное.Добавить("одиннадцатого");
	
	Возврат ЧасыПрилагательное;
	
КонецФункции

// Формирует массив прилагательных часа 12.
//
// Возвращаемое значение:
//  Массив - массив прилагательных часа 12.
//
Функция ЧасыПрилагательное12()
	
	ЧасыПрилагательное = Новый Массив;
	ЧасыПрилагательное.Добавить("двенадцатом");
	ЧасыПрилагательное.Добавить("двенадцатого");
	
	Возврат ЧасыПрилагательное;
	
КонецФункции

// Формирует массив прилагательных дней.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дней.
//
Функция ДниПрилагательное()
	
	ДниПрилагательное = Новый Массив;
	Для Каждого День Из ДниПрилагательное1() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное2() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное3() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное4() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное5() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное6() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное7() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное8() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное9() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное10() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное11() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное12() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное13() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное14() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное15() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное16() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное17() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное18() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное19() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное20() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПрилагательное30() Цикл
		ДниПрилагательное.Добавить(День);
	КонецЦикла;
	
	Возврат ДниПрилагательное;
	
КонецФункции

// Формирует массив прилагательных дня 1.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 1.
//
Функция ДниПрилагательное1()
	
	ДниПрилагательное1 = Новый Массив;
	ДниПрилагательное1.Добавить("первое");
	ДниПрилагательное1.Добавить("первого");
	ДниПрилагательное1.Добавить("первому");
	ДниПрилагательное1.Добавить("первым");
	ДниПрилагательное1.Добавить("первом");
	
	Возврат ДниПрилагательное1;
	
КонецФункции

// Формирует массив прилагательных дня 2.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 2.
//
Функция ДниПрилагательное2()
	
	ДниПрилагательное2 = Новый Массив;
	ДниПрилагательное2.Добавить("второе");
	ДниПрилагательное2.Добавить("второго");
	ДниПрилагательное2.Добавить("второму");
	ДниПрилагательное2.Добавить("вторым");
	ДниПрилагательное2.Добавить("втором");
	
	Возврат ДниПрилагательное2;
	
КонецФункции

// Формирует массив прилагательных дня 3.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 3.
//
Функция ДниПрилагательное3()
	
	ДниПрилагательное = Новый Массив;
	ДниПрилагательное.Добавить("третье");
	ДниПрилагательное.Добавить("третьего");
	ДниПрилагательное.Добавить("третьему");
	ДниПрилагательное.Добавить("третьим");
	ДниПрилагательное.Добавить("третьем");
	
	Возврат ДниПрилагательное;
	
КонецФункции

// Формирует массив прилагательных дня 4.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 4.
//
Функция ДниПрилагательное4()
	
	ДниПрилагательное4 = Новый Массив;
	ДниПрилагательное4.Добавить("четвертое");
	ДниПрилагательное4.Добавить("четвертого");
	ДниПрилагательное4.Добавить("четвертому");
	ДниПрилагательное4.Добавить("четвертым");
	ДниПрилагательное4.Добавить("четвертом");
	
	Возврат ДниПрилагательное4;
	
КонецФункции

// Формирует массив прилагательных дня 5.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 5.
//
Функция ДниПрилагательное5()
	
	ДниПрилагательное5 = Новый Массив;
	ДниПрилагательное5.Добавить("пятое");
	ДниПрилагательное5.Добавить("пятого");
	ДниПрилагательное5.Добавить("пятому");
	ДниПрилагательное5.Добавить("пятым");
	ДниПрилагательное5.Добавить("пятом");
	
	Возврат ДниПрилагательное5;
	
КонецФункции

// Формирует массив прилагательных дня 6.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 6.
//
Функция ДниПрилагательное6()
	
	ДниПрилагательное6 = Новый Массив;
	ДниПрилагательное6.Добавить("шестое");
	ДниПрилагательное6.Добавить("шестого");
	ДниПрилагательное6.Добавить("шестому");
	ДниПрилагательное6.Добавить("шестым");
	ДниПрилагательное6.Добавить("шестом");
	
	Возврат ДниПрилагательное6;
	
КонецФункции

// Формирует массив прилагательных дня 7.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 7.
//
Функция ДниПрилагательное7()
	
	ДниПрилагательное7 = Новый Массив;
	ДниПрилагательное7.Добавить("седьмое");
	ДниПрилагательное7.Добавить("седьмого");
	ДниПрилагательное7.Добавить("седьмому");
	ДниПрилагательное7.Добавить("седьмым");
	ДниПрилагательное7.Добавить("седьмом");
	
	Возврат ДниПрилагательное7;
	
КонецФункции

// Формирует массив прилагательных дня 8.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 8.
//
Функция ДниПрилагательное8()
	
	ДниПрилагательное8 = Новый Массив;
	ДниПрилагательное8.Добавить("восьмое");
	ДниПрилагательное8.Добавить("восьмого");
	ДниПрилагательное8.Добавить("восьмому");
	ДниПрилагательное8.Добавить("восьмым");
	ДниПрилагательное8.Добавить("восьмом");
	
	Возврат ДниПрилагательное8;
	
КонецФункции

// Формирует массив прилагательных дня 9.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 9.
//
Функция ДниПрилагательное9()
	
	ДниПрилагательное9 = Новый Массив;
	ДниПрилагательное9.Добавить("девятое");
	ДниПрилагательное9.Добавить("девятого");
	ДниПрилагательное9.Добавить("девятому");
	ДниПрилагательное9.Добавить("девятым");
	ДниПрилагательное9.Добавить("девятом");
	
	Возврат ДниПрилагательное9;
	
КонецФункции

// Формирует массив прилагательных дня 10.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 10.
//
Функция ДниПрилагательное10()
	
	ДниПрилагательное10 = Новый Массив;
	ДниПрилагательное10.Добавить("десятое");
	ДниПрилагательное10.Добавить("десятого");
	ДниПрилагательное10.Добавить("десятому");
	ДниПрилагательное10.Добавить("десятым");
	ДниПрилагательное10.Добавить("десятом");
	
	Возврат ДниПрилагательное10;
	
КонецФункции

// Формирует массив прилагательных дня 11.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 11.
//
Функция ДниПрилагательное11()
	
	ДниПрилагательное11 = Новый Массив;
	ДниПрилагательное11.Добавить("одиннадцатое");
	ДниПрилагательное11.Добавить("одиннадцатого");
	ДниПрилагательное11.Добавить("одиннадцатому");
	ДниПрилагательное11.Добавить("одиннадцатым");
	ДниПрилагательное11.Добавить("одиннадцатом");
	
	Возврат ДниПрилагательное11;
	
КонецФункции

// Формирует массив прилагательных дня 12.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 12.
//
Функция ДниПрилагательное12()
	
	ДниПрилагательное12 = Новый Массив;
	ДниПрилагательное12.Добавить("двенадцатое");
	ДниПрилагательное12.Добавить("двенадцатого");
	ДниПрилагательное12.Добавить("двенадцатому");
	ДниПрилагательное12.Добавить("двенадцатым");
	ДниПрилагательное12.Добавить("двенадцатом");
	
	Возврат ДниПрилагательное12;
	
КонецФункции

// Формирует массив прилагательных дня 13.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 13.
//
Функция ДниПрилагательное13()
	
	ДниПрилагательное13 = Новый Массив;
	ДниПрилагательное13.Добавить("тринадцатое");
	ДниПрилагательное13.Добавить("тринадцатого");
	ДниПрилагательное13.Добавить("тринадцатому");
	ДниПрилагательное13.Добавить("тринадцатым");
	ДниПрилагательное13.Добавить("тринадцатом");
	
	Возврат ДниПрилагательное13;
	
КонецФункции

// Формирует массив прилагательных дня 14.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 14.
//
Функция ДниПрилагательное14()
	
	ДниПрилагательное14 = Новый Массив;
	ДниПрилагательное14.Добавить("четырнадцатое");
	ДниПрилагательное14.Добавить("четырнадцатого");
	ДниПрилагательное14.Добавить("четырнадцатому");
	ДниПрилагательное14.Добавить("четырнадцатым");
	ДниПрилагательное14.Добавить("четырнадцатом");
	
	Возврат ДниПрилагательное14;
	
КонецФункции

// Формирует массив прилагательных дня 15.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 15.
//
Функция ДниПрилагательное15()
	
	ДниПрилагательное15 = Новый Массив;
	ДниПрилагательное15.Добавить("пятнадцатое");
	ДниПрилагательное15.Добавить("пятнадцатого");
	ДниПрилагательное15.Добавить("пятнадцатому");
	ДниПрилагательное15.Добавить("пятнадцатым");
	ДниПрилагательное15.Добавить("пятнадцатом");
	
	Возврат ДниПрилагательное15;
	
КонецФункции

// Формирует массив прилагательных дня 16.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 16.
//
Функция ДниПрилагательное16()
	
	ДниПрилагательное16 = Новый Массив;
	ДниПрилагательное16.Добавить("шестнадцатое");
	ДниПрилагательное16.Добавить("шестнадцатого");
	ДниПрилагательное16.Добавить("шестнадцатому");
	ДниПрилагательное16.Добавить("шестнадцатым");
	ДниПрилагательное16.Добавить("шестнадцатом");
	
	Возврат ДниПрилагательное16;
	
КонецФункции

// Формирует массив прилагательных дня 17.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 17.
//
Функция ДниПрилагательное17()
	
	ДниПрилагательное17 = Новый Массив;
	ДниПрилагательное17.Добавить("семнадцатое");
	ДниПрилагательное17.Добавить("семнадцатого");
	ДниПрилагательное17.Добавить("семнадцатому");
	ДниПрилагательное17.Добавить("семнадцатым");
	ДниПрилагательное17.Добавить("семнадцатом");
	
	Возврат ДниПрилагательное17;
	
КонецФункции

// Формирует массив прилагательных дня 18.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 18.
//
Функция ДниПрилагательное18()
	
	ДниПрилагательное18 = Новый Массив;
	ДниПрилагательное18.Добавить("восемнадцатое");
	ДниПрилагательное18.Добавить("восемнадцатого");
	ДниПрилагательное18.Добавить("восемнадцатому");
	ДниПрилагательное18.Добавить("восемнадцатым");
	ДниПрилагательное18.Добавить("восемнадцатом");
	
	Возврат ДниПрилагательное18;
	
КонецФункции

// Формирует массив прилагательных дня 19.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 19.
//
Функция ДниПрилагательное19()
	
	ДниПрилагательное19 = Новый Массив;
	ДниПрилагательное19.Добавить("девятнадцатое");
	ДниПрилагательное19.Добавить("девятнадцатого");
	ДниПрилагательное19.Добавить("девятнадцатому");
	ДниПрилагательное19.Добавить("девятнадцатым");
	ДниПрилагательное19.Добавить("девятнадцатом");
	
	Возврат ДниПрилагательное19;
	
КонецФункции

// Формирует массив прилагательных дня 20.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 20.
//
Функция ДниПрилагательное20()
	
	ДниПрилагательное20 = Новый Массив;
	ДниПрилагательное20.Добавить("двадцатое");
	ДниПрилагательное20.Добавить("двадцатого");
	ДниПрилагательное20.Добавить("двадцатому");
	ДниПрилагательное20.Добавить("двадцатым");
	ДниПрилагательное20.Добавить("двадцатом");
	
	Возврат ДниПрилагательное20;
	
КонецФункции

// Формирует массив прилагательных дня 30.
//
// Возвращаемое значение:
//  Массив - массив прилагательных дня 30.
//
Функция ДниПрилагательное30()
	
	ДниПрилагательное30 = Новый Массив;
	ДниПрилагательное30.Добавить("тридцатое");
	ДниПрилагательное30.Добавить("тридцатого");
	ДниПрилагательное30.Добавить("тридцатому");
	ДниПрилагательное30.Добавить("тридцатым");
	ДниПрилагательное30.Добавить("тридцатом");
	
	Возврат ДниПрилагательное30;
	
КонецФункции

// Формирует массив слов дней десятков.
//
// Возвращаемое значение:
//  Массив - массив слов дней десятков.
//
Функция ДниДесятки()
	
	ДниДесятки = Новый Массив;
	Для Каждого Десяток Из ДниДесятки20() Цикл
		ДниДесятки.Добавить(Десяток);
	КонецЦикла;
	Для Каждого Десяток Из ДниДесятки30() Цикл
		ДниДесятки.Добавить(Десяток);
	КонецЦикла;
	
	Возврат ДниДесятки;
	
КонецФункции

// Формирует массив слов дней десятков 20.
//
// Возвращаемое значение:
//  Массив - массив слов дней десятков 20.
//
Функция ДниДесятки20()
	
	ДниДесятки20 = Новый Массив;
	ДниДесятки20.Добавить("двадцать");
	
	Возврат ДниДесятки20;
	
КонецФункции

// Формирует массив слов дней десятков 30.
//
// Возвращаемое значение:
//  Массив - массив слов дней десятков 30.
//
Функция ДниДесятки30()
	
	ДниДесятки30 = Новый Массив;
	ДниДесятки30.Добавить("тридцать");
	
	Возврат ДниДесятки30;
	
КонецФункции

// Формирует массив слов минут.
//
// Возвращаемое значение:
//  Массив - массив слов минут.
//
Функция МинутыСтроки()
	
	МинутыСтроки = Новый Массив;
	Для Каждого Строка Из МинутыСтроки5() Цикл
		МинутыСтроки.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МинутыСтроки10() Цикл
		МинутыСтроки.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МинутыСтроки15() Цикл
		МинутыСтроки.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МинутыСтроки20() Цикл
		МинутыСтроки.Добавить(Строка);
	КонецЦикла;
	
	Возврат МинутыСтроки;
	
КонецФункции

// Формирует массив слов 5 минут.
//
// Возвращаемое значение:
//  Массив - массив слов 5 минут.
//
Функция МинутыСтроки5()
	
	МинутыСтроки = Новый Массив;
	МинутыСтроки.Добавить("пять");
	МинутыСтроки.Добавить("пяти");
	
	Возврат МинутыСтроки;
	
КонецФункции

// Формирует массив слов 10 минут.
//
// Возвращаемое значение:
//  Массив - массив слов 10 минут.
//
Функция МинутыСтроки10()
	
	МинутыСтроки = Новый Массив;
	МинутыСтроки.Добавить("десять");
	МинутыСтроки.Добавить("десяти");
	
	Возврат МинутыСтроки;
	
КонецФункции

// Формирует массив слов 15 минут.
//
// Возвращаемое значение:
//  Массив - массив слов 15 минут.
//
Функция МинутыСтроки15()
	
	МинутыСтроки = Новый Массив;
	МинутыСтроки.Добавить("пятнадцать");
	МинутыСтроки.Добавить("пятнадцати");
	
	Возврат МинутыСтроки;
	
КонецФункции

// Формирует массив слов 20 минут.
//
// Возвращаемое значение:
//  Массив - массив слов 20 минут.
//
Функция МинутыСтроки20()
	
	МинутыСтроки = Новый Массив;
	МинутыСтроки.Добавить("двадцать");
	МинутыСтроки.Добавить("двадцати");
	
	Возврат МинутыСтроки;
	
КонецФункции

// Формирует массив минут.
//
// Возвращаемое значение:
//  Массив - массив минут.
//
Функция МинутыЧисла()
	
	МинутыЧисла = Новый Массив;
	МинутыЧисла.Добавить("5");
	МинутыЧисла.Добавить("10");
	МинутыЧисла.Добавить("15");
	МинутыЧисла.Добавить("20");
	МинутыЧисла.Добавить("25");
	МинутыЧисла.Добавить("30");
	МинутыЧисла.Добавить("35");
	МинутыЧисла.Добавить("40");
	МинутыЧисла.Добавить("45");
	МинутыЧисла.Добавить("45");
	МинутыЧисла.Добавить("50");
	МинутыЧисла.Добавить("55");
	МинутыЧисла.Добавить("60");
	
	Возврат МинутыЧисла;
	
КонецФункции

// Формирует массив слов дней недели.
//
// Возвращаемое значение:
//  Массив - массив слов дней недели.
//
Функция Дни()
	
	// Список дней недели.
	Дни = Новый Массив;
	Для Каждого День Из ДниПонедельник() Цикл
		Дни.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниВторник() Цикл
		Дни.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниСреда() Цикл
		Дни.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниЧетверг() Цикл
		Дни.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниПятница() Цикл
		Дни.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниСуббота() Цикл
		Дни.Добавить(День);
	КонецЦикла;
	Для Каждого День Из ДниВоскресенье() Цикл
		Дни.Добавить(День);
	КонецЦикла;
	
	Возврат Дни;
	
КонецФункции

// Формирует массив слов понедельник.
//
// Возвращаемое значение:
//  Массив - массив слов понедельник.
//
Функция ДниПонедельник()
	
	Дни = Новый Массив;
	Дни.Добавить("понедельник");
	Дни.Добавить("понедельника");
	Дни.Добавить("понедельникам");
	Дни.Добавить("понедельниками");
	Дни.Добавить("понедельниках");
	Дни.Добавить("понедельнике");
	Дни.Добавить("понедельники");
	Дни.Добавить("понедельников");
	Дни.Добавить("понедельником");
	Дни.Добавить("понедельнику");
	
	Возврат Дни;
	
КонецФункции

// Формирует массив слов вторник.
//
// Возвращаемое значение:
//  Массив - массив слов вторник.
//
Функция ДниВторник()
	
	Дни = Новый Массив;
	Дни.Добавить("вторник");
	Дни.Добавить("вторника");
	Дни.Добавить("вторникам");
	Дни.Добавить("вторниками");
	Дни.Добавить("вторниках");
	Дни.Добавить("вторнике");
	Дни.Добавить("вторники");
	Дни.Добавить("вторников");
	Дни.Добавить("вторником");
	Дни.Добавить("вторнику");
	
	Возврат Дни
	
КонецФункции

// Формирует массив слов среда.
//
// Возвращаемое значение:
//  Массив - массив слов среда.
//
Функция ДниСреда()
	
	Дни = Новый Массив;
	Дни.Добавить("среда");
	Дни.Добавить("средам");
	Дни.Добавить("средами");
	Дни.Добавить("средах");
	Дни.Добавить("среде");
	Дни.Добавить("средой");
	Дни.Добавить("средою");
	Дни.Добавить("среду");
	Дни.Добавить("среды");
	
	Возврат Дни
	
КонецФункции

// Формирует массив слов четверг.
//
// Возвращаемое значение:
//  Массив - массив слов четверг.
//
Функция ДниЧетверг()
	
	Дни = Новый Массив;
	Дни.Добавить("четверг");
	Дни.Добавить("четверга");
	Дни.Добавить("четвергам");
	Дни.Добавить("четвергами");
	Дни.Добавить("четвергах");
	Дни.Добавить("четверге");
	Дни.Добавить("четверги");
	Дни.Добавить("четвергов");
	Дни.Добавить("четвергом");
	Дни.Добавить("четвергу");
	
	Возврат Дни
	
КонецФункции

// Формирует массив слов пятница.
//
// Возвращаемое значение:
//  Массив - массив слов пятница.
//
Функция ДниПятница()
	
	Дни = Новый Массив;
	Дни.Добавить("пятниц");
	Дни.Добавить("пятница");
	Дни.Добавить("пятницам");
	Дни.Добавить("пятницами");
	Дни.Добавить("пятницах");
	Дни.Добавить("пятнице");
	Дни.Добавить("пятницей");
	Дни.Добавить("пятницею");
	Дни.Добавить("пятницу");
	Дни.Добавить("пятницы");
	
	Возврат Дни
	
КонецФункции

// Формирует массив слов суббота.
//
// Возвращаемое значение:
//  Массив - массив слов суббота.
//
Функция ДниСуббота()
	
	Дни = Новый Массив;
	Дни.Добавить("суббот");
	Дни.Добавить("суббота");
	Дни.Добавить("субботам");
	Дни.Добавить("субботами");
	Дни.Добавить("субботах");
	Дни.Добавить("субботе");
	Дни.Добавить("субботой");
	Дни.Добавить("субботою");
	Дни.Добавить("субботу");
	Дни.Добавить("субботы");
	
	Возврат Дни
	
КонецФункции

// Формирует массив слов воскресенье.
//
// Возвращаемое значение:
//  Массив - массив слов воскресенье.
//
Функция ДниВоскресенье()
	
	Дни = Новый Массив;
	Дни.Добавить("воскресение");
	Дни.Добавить("воскресением");
	Дни.Добавить("воскресении");
	Дни.Добавить("воскресений");
	Дни.Добавить("воскресению");
	Дни.Добавить("воскресения");
	Дни.Добавить("воскресениям");
	Дни.Добавить("воскресениями");
	Дни.Добавить("воскресениях");
	Дни.Добавить("воскресенье");
	Дни.Добавить("воскресеньем");
	Дни.Добавить("воскресеньи");
	Дни.Добавить("воскресенью");
	Дни.Добавить("воскресенья");
	Дни.Добавить("воскресеньям");
	Дни.Добавить("воскресеньями");
	Дни.Добавить("воскресеньях");
	
	Возврат Дни
	
КонецФункции

// Формирует массив аббревиатур дней недели.
//
// Возвращаемое значение:
//  Массив - массив аббревиатур дней недели.
//
Функция ДниАббревиатуры()
	
	ДниАббревиатуры = Новый Массив;
	Для Каждого Строка Из ДниАббревиатурыПонедельник() Цикл
		ДниАббревиатуры.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ДниАббревиатурыВторник() Цикл
		ДниАббревиатуры.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ДниАббревиатурыСреда() Цикл
		ДниАббревиатуры.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ДниАббревиатурыЧетверг() Цикл
		ДниАббревиатуры.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ДниАббревиатурыПятница() Цикл
		ДниАббревиатуры.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ДниАббревиатурыСуббота() Цикл
		ДниАббревиатуры.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ДниАббревиатурыВоскресенье() Цикл
		ДниАббревиатуры.Добавить(Строка);
	КонецЦикла;
	
	Возврат ДниАббревиатуры;
	
КонецФункции

// Формирует массив аббревиатур понедельник.
//
// Возвращаемое значение:
//  Массив - массив аббревиатур понедельник.
//
Функция ДниАббревиатурыПонедельник()
	
	ДниАббревиатуры = Новый Массив;
	ДниАббревиатуры.Добавить("пн");
	ДниАббревиатуры.Добавить("пон");
	
	Возврат ДниАббревиатуры;
	
КонецФункции

// Формирует массив аббревиатур вторник.
//
// Возвращаемое значение:
//  Массив - массив аббревиатур вторник.
//
Функция ДниАббревиатурыВторник()
	
	ДниАббревиатуры = Новый Массив;
	ДниАббревиатуры.Добавить("вт");
	
	Возврат ДниАббревиатуры;
	
КонецФункции

// Формирует массив аббревиатур среда.
//
// Возвращаемое значение:
//  Массив - массив аббревиатур среда.
//
Функция ДниАббревиатурыСреда()
	
	ДниАббревиатуры = Новый Массив;
	ДниАббревиатуры.Добавить("ср");
	ДниАббревиатуры.Добавить("сред");
	
	Возврат ДниАббревиатуры;
	
КонецФункции

// Формирует массив аббревиатур четверг.
//
// Возвращаемое значение:
//  Массив - массив аббревиатур четверг.
//
Функция ДниАббревиатурыЧетверг()
	
	ДниАббревиатуры = Новый Массив;
	ДниАббревиатуры.Добавить("чт");
	ДниАббревиатуры.Добавить("чет");
	
	Возврат ДниАббревиатуры;
	
КонецФункции

// Формирует массив аббревиатур пятница.
//
// Возвращаемое значение:
//  Массив - массив аббревиатур пятница.
//
Функция ДниАббревиатурыПятница()
	
	ДниАббревиатуры = Новый Массив;
	ДниАббревиатуры.Добавить("пт");
	ДниАббревиатуры.Добавить("птн");
	
	Возврат ДниАббревиатуры;
	
КонецФункции

// Формирует массив аббревиатур суббота.
//
// Возвращаемое значение:
//  Массив - массив аббревиатур суббота.
//
Функция ДниАббревиатурыСуббота()
	
	ДниАббревиатуры = Новый Массив;
	ДниАббревиатуры.Добавить("сб");
	ДниАббревиатуры.Добавить("суб");
	
	Возврат ДниАббревиатуры;
	
КонецФункции

// Формирует массив аббревиатур воскресенье.
//
// Возвращаемое значение:
//  Массив - массив аббревиатур воскресенье.
//
Функция ДниАббревиатурыВоскресенье()
	
	ДниАббревиатуры = Новый Массив;
	ДниАббревиатуры.Добавить("вс");
	ДниАббревиатуры.Добавить("вскр");
	ДниАббревиатуры.Добавить("воскр");
	
	Возврат ДниАббревиатуры;
	
КонецФункции

// Формирует массив абстрактных дней.
//
// Возвращаемое значение:
//  Массив - массив абстрактных дней.
//
Функция ДниАбстрактные()
	
	ДниАбстрактные = Новый Массив;
	ДниАбстрактные.Добавить("сегодня");
	ДниАбстрактные.Добавить("завтра");
	ДниАбстрактные.Добавить("послезавтра");
	
	Возврат ДниАбстрактные;
	
КонецФункции

// Формирует массив подписи час.
//
// Возвращаемое значение:
//  Массив - массив подписи час.
//
Функция ЧасПодпись()
	
	Час = Новый Массив;
	Час.Добавить("час");
	Час.Добавить("часа");
	Час.Добавить("часам");
	Час.Добавить("часами");
	Час.Добавить("часах");
	Час.Добавить("часе");
	Час.Добавить("часов");
	Час.Добавить("часом");
	Час.Добавить("часу");
	
	Возврат Час;
	
КонецФункции

// Формирует массив подписи минута.
//
// Возвращаемое значение:
//  Массив - массив подписи минута.
//
Функция МинутПодпись()
	
	Минут = Новый Массив;
	Минут.Добавить("минут");
	Минут.Добавить("минута");
	Минут.Добавить("минутам");
	Минут.Добавить("минутами");
	Минут.Добавить("минутах");
	Минут.Добавить("минуте");
	Минут.Добавить("минутой");
	Минут.Добавить("минутою");
	Минут.Добавить("минуту");
	Минут.Добавить("минуты");
	Минут.Добавить("мин");
	
	Возврат Минут;
	
КонецФункции

// Формирует массив слов времени суток.
//
// Возвращаемое значение:
//  Массив - массив слов времени суток.
//
Функция ВремяСуток()
	
	ВремяСуток = Новый Массив;
	Для Каждого Строка Из ВремяСутокДоПолудня() Цикл
		ВремяСуток.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ВремяСутокПослеПолудня() Цикл
		ВремяСуток.Добавить(Строка);
	КонецЦикла;
	
	Возврат ВремяСуток;
	
КонецФункции

// Формирует массив слов времени суток до полудня.
//
// Возвращаемое значение:
//  Массив - массив слов времени суток до полудня.
//
Функция ВремяСутокДоПолудня()
	
	ВремяСуток = Новый Массив;
	ВремяСуток.Добавить("утра");
	ВремяСуток.Добавить("утром");
	
	Возврат ВремяСуток;
	
КонецФункции

// Формирует массив слов времени суток после полудня.
//
// Возвращаемое значение:
//  Массив - массив слов времени суток после полудня.
//
Функция ВремяСутокПослеПолудня()
	
	ВремяСуток = Новый Массив;
	ВремяСуток.Добавить("дня");
	ВремяСуток.Добавить("вечера");
	ВремяСуток.Добавить("ночи");
	ВремяСуток.Добавить("днем");
	ВремяСуток.Добавить("вечером");
	ВремяСуток.Добавить("ночью");
	ВремяСуток.Добавить("днем");
	
	Возврат ВремяСуток;
	
КонецФункции

// Формирует массив слов интервала времени.
//
// Возвращаемое значение:
//  Массив - массив слов интервала времени.
//
Функция ИнтервалВремени()
	
	ИнтервалВремени = Новый Массив;
	Для Каждого Строка Из ИнтервалВремениДень() Цикл
		ИнтервалВремени.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ИнтервалВремениНеделя() Цикл
		ИнтервалВремени.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ИнтервалВремениМесяц() Цикл
		ИнтервалВремени.Добавить(Строка);
	КонецЦикла;
	
	Возврат ИнтервалВремени;
	
КонецФункции

// Формирует массив слов интервала времени день.
//
// Возвращаемое значение:
//  Массив - массив слов интервала времени день.
//
Функция ИнтервалВремениДень()
	
	ИнтервалВремени = Новый Массив;
	ИнтервалВремени.Добавить("день");
	ИнтервалВремени.Добавить("дне");
	ИнтервалВремени.Добавить("дней");
	ИнтервалВремени.Добавить("дни");
	ИнтервалВремени.Добавить("дню");
	ИнтервалВремени.Добавить("дня");
	ИнтервалВремени.Добавить("дням");
	ИнтервалВремени.Добавить("днями");
	ИнтервалВремени.Добавить("днях");
	ИнтервалВремени.Добавить("днем");
	
	Возврат ИнтервалВремени;
	
КонецФункции

// Формирует массив слов интервала времени неделя.
//
// Возвращаемое значение:
//  Массив - массив слов интервала времени неделя.
//
Функция ИнтервалВремениНеделя()
	
	ИнтервалВремени = Новый Массив;
	ИнтервалВремени.Добавить("неделе");
	ИнтервалВремени.Добавить("неделей");
	ИнтервалВремени.Добавить("неделею");
	ИнтервалВремени.Добавить("недели");
	ИнтервалВремени.Добавить("недель");
	ИнтервалВремени.Добавить("неделю");
	ИнтервалВремени.Добавить("неделя");
	ИнтервалВремени.Добавить("неделям");
	ИнтервалВремени.Добавить("неделями");
	ИнтервалВремени.Добавить("неделях");
	
	Возврат ИнтервалВремени;
	
КонецФункции

// Формирует массив слов интервала месяц.
//
// Возвращаемое значение:
//  Массив - массив слов интервала месяц.
//
Функция ИнтервалВремениМесяц()
	
	ИнтервалВремени = Новый Массив;
	ИнтервалВремени.Добавить("месяц");
	ИнтервалВремени.Добавить("месяца");
	ИнтервалВремени.Добавить("месяцам");
	ИнтервалВремени.Добавить("месяцами");
	ИнтервалВремени.Добавить("месяцах");
	ИнтервалВремени.Добавить("месяце");
	ИнтервалВремени.Добавить("месяцев");
	ИнтервалВремени.Добавить("месяцем");
	ИнтервалВремени.Добавить("месяцу");
	ИнтервалВремени.Добавить("месяцы");
	
	Возврат ИнтервалВремени;
	
КонецФункции

// Формирует массив слов половина.
//
// Возвращаемое значение:
//  Массив - массив слов половина.
//
Функция ПоловинаСуществительное()
	
	ПоловинаСуществительное = Новый Массив;
	ПоловинаСуществительное.Добавить("половине");
	ПоловинаСуществительное.Добавить("половины");
	
	Возврат ПоловинаСуществительное;
	
КонецФункции

// Формирует массив прилагательных половина.
//
// Возвращаемое значение:
//  Массив - массив прилагательных половина.
//
Функция ПоловинаПрилагательное()
	
	ПоловинаПрилагательное = Новый Массив;
	ПоловинаПрилагательное.Добавить("первой");
	ПоловинаПрилагательное.Добавить("второй");
	
	Возврат ПоловинаПрилагательное;
	
КонецФункции

// Формирует массив прилагательных полчаса.
//
// Возвращаемое значение:
//  Массив - массив прилагательных полчаса.
//
Функция ПолчасаПрилагательное()
	
	ПолчасаПрилагательное = Новый Массив;
	Для Каждого Строка Из ПолчасаПрилагательное1() Цикл
		ПолчасаПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ПолчасаПрилагательное2() Цикл
		ПолчасаПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ПолчасаПрилагательное3() Цикл
		ПолчасаПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ПолчасаПрилагательное4() Цикл
		ПолчасаПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ПолчасаПрилагательное5() Цикл
		ПолчасаПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ПолчасаПрилагательное6() Цикл
		ПолчасаПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ПолчасаПрилагательное7() Цикл
		ПолчасаПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ПолчасаПрилагательное8() Цикл
		ПолчасаПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ПолчасаПрилагательное9() Цикл
		ПолчасаПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ПолчасаПрилагательное10() Цикл
		ПолчасаПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ПолчасаПрилагательное11() Цикл
		ПолчасаПрилагательное.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из ПолчасаПрилагательное12() Цикл
		ПолчасаПрилагательное.Добавить(Строка);
	КонецЦикла;
	
	Возврат ПолчасаПрилагательное;
	
КонецФункции

// Формирует массив прилагательных полчаса 1.
//
// Возвращаемое значение:
//  Массив - массив прилагательных полчаса 1.
//
Функция ПолчасаПрилагательное1()
	
	ПолчасаПрилагательное = Новый Массив;
	ПолчасаПрилагательное.Добавить("полпервого");
	
	Возврат ПолчасаПрилагательное;
	
КонецФункции

// Формирует массив прилагательных полчаса 2.
//
// Возвращаемое значение:
//  Массив - массив прилагательных полчаса 2.
//
Функция ПолчасаПрилагательное2()
	
	ПолчасаПрилагательное = Новый Массив;
	ПолчасаПрилагательное.Добавить("полвторого");
	
	Возврат ПолчасаПрилагательное;
	
КонецФункции

// Формирует массив прилагательных полчаса 3.
//
// Возвращаемое значение:
//  Массив - массив прилагательных полчаса 3.
//
Функция ПолчасаПрилагательное3()
	
	ПолчасаПрилагательное = Новый Массив;
	ПолчасаПрилагательное.Добавить("полтретьего");
	
	Возврат ПолчасаПрилагательное;
	
КонецФункции

// Формирует массив прилагательных полчаса 4.
//
// Возвращаемое значение:
//  Массив - массив прилагательных полчаса 4.
//
Функция ПолчасаПрилагательное4()
	
	ПолчасаПрилагательное = Новый Массив;
	ПолчасаПрилагательное.Добавить("полчетвертого");
	
	Возврат ПолчасаПрилагательное;
	
КонецФункции

// Формирует массив прилагательных полчаса 5.
//
// Возвращаемое значение:
//  Массив - массив прилагательных полчаса 5.
//
Функция ПолчасаПрилагательное5()
	
	ПолчасаПрилагательное = Новый Массив;
	ПолчасаПрилагательное.Добавить("полпятого");
	
	Возврат ПолчасаПрилагательное;
	
КонецФункции

// Формирует массив прилагательных полчаса 6.
//
// Возвращаемое значение:
//  Массив - массив прилагательных полчаса 6.
//
Функция ПолчасаПрилагательное6()
	
	ПолчасаПрилагательное = Новый Массив;
	ПолчасаПрилагательное.Добавить("полшестого");
	
	Возврат ПолчасаПрилагательное;
	
КонецФункции

// Формирует массив прилагательных полчаса 7.
//
// Возвращаемое значение:
//  Массив - массив прилагательных полчаса 7.
//
Функция ПолчасаПрилагательное7()
	
	ПолчасаПрилагательное = Новый Массив;
	ПолчасаПрилагательное.Добавить("полседьмого");
	
	Возврат ПолчасаПрилагательное;
	
КонецФункции

// Формирует массив прилагательных полчаса 8.
//
// Возвращаемое значение:
//  Массив - массив прилагательных полчаса 8.
//
Функция ПолчасаПрилагательное8()
	
	ПолчасаПрилагательное = Новый Массив;
	ПолчасаПрилагательное.Добавить("полвосьмого");
	
	Возврат ПолчасаПрилагательное;
	
КонецФункции

// Формирует массив прилагательных полчаса 9.
//
// Возвращаемое значение:
//  Массив - массив прилагательных полчаса 9.
//
Функция ПолчасаПрилагательное9()
	
	ПолчасаПрилагательное = Новый Массив;
	ПолчасаПрилагательное.Добавить("полдевятого");
	
	Возврат ПолчасаПрилагательное;
	
КонецФункции

// Формирует массив прилагательных полчаса 10.
//
// Возвращаемое значение:
//  Массив - массив прилагательных полчаса 10.
//
Функция ПолчасаПрилагательное10()
	
	ПолчасаПрилагательное = Новый Массив;
	ПолчасаПрилагательное.Добавить("полдесятого");
	
	Возврат ПолчасаПрилагательное;
	
КонецФункции

// Формирует массив прилагательных полчаса 11.
//
// Возвращаемое значение:
//  Массив - массив прилагательных полчаса 11.
//
Функция ПолчасаПрилагательное11()
	
	ПолчасаПрилагательное = Новый Массив;
	ПолчасаПрилагательное.Добавить("полодиннадцатого");
	
	Возврат ПолчасаПрилагательное;
	
КонецФункции

// Формирует массив прилагательных полчаса 12.
//
// Возвращаемое значение:
//  Массив - массив прилагательных полчаса 12.
//
Функция ПолчасаПрилагательное12()
	
	ПолчасаПрилагательное = Новый Массив;

	ПолчасаПрилагательное.Добавить("полдвенадцатого");
	
	Возврат ПолчасаПрилагательное;
	
КонецФункции

// Формирует массив слов полчаса.
//
// Возвращаемое значение:
//  Массив - массив слов полчаса.
//
Функция Полчаса()
	
	Полчаса = Новый Массив;
	Полчаса.Добавить("полчаса");
	
	Возврат Полчаса;
	
КонецФункции

// Формирует массив дней дат.
//
// Возвращаемое значение:
//  Массив - массив дней дат.
//
Функция ДатаДни()
	
	Если ШаблонДатаДни = Неопределено Тогда
		ШаблонДатаДни = Новый Массив;
		Для Индекс = 1 По 9 Цикл
			ШаблонДатаДни.Добавить("0" + ВСтроку(Индекс));
		КонецЦикла;
		Для Индекс = 1 По 31 Цикл
			ШаблонДатаДни.Добавить(ВСтроку(Индекс));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШаблонДатаДни;
	
КонецФункции

// Формирует массив месяцев дат.
//
// Возвращаемое значение:
//  Массив - массив месяцев дат.
//
Функция ДатаМесяцы()
	
	Если ШаблонДатаМесяцы = Неопределено Тогда
		ШаблонДатаМесяцы = Новый Массив;
		Для Индекс = 1 По 9 Цикл
			ШаблонДатаМесяцы.Добавить("0" + ВСтроку(Индекс));
		КонецЦикла;
		Для Индекс = 10 По 12 Цикл
			ШаблонДатаМесяцы.Добавить(ВСтроку(Индекс));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШаблонДатаМесяцы;
	
КонецФункции

// Формирует массив лет дат.
//
// Возвращаемое значение:
//  Массив - массив лет дат.
//
Функция ДатаГоды()
	
	Если ШаблонДатаГоды = Неопределено Тогда
		ШаблонДатаГоды = Новый Массив;
		Для Индекс = 1995 По 2020 Цикл
			ШаблонДатаГоды.Добавить(ВСтроку(Индекс));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШаблонДатаГоды;
	
КонецФункции

// Формирует массив кратких лет дат.
//
// Возвращаемое значение:
//  Массив - массив кратких лет дат.
//
Функция ДатаГодыКраткие()
	
	Если ШаблонДатаГодыКраткие = Неопределено Тогда
		ШаблонДатаГодыКраткие = Новый Массив;
		Для Индекс = 0 По 9 Цикл
			ШаблонДатаГодыКраткие.Добавить("0" + ВСтроку(Индекс));
		КонецЦикла;
		Для Индекс = 10 По 20 Цикл
			ШаблонДатаГодыКраткие.Добавить(ВСтроку(Индекс));
		КонецЦикла;
		Для Индекс = 95 По 99 Цикл
			ШаблонДатаГодыКраткие.Добавить(ВСтроку(Индекс));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШаблонДатаГодыКраткие;
	
КонецФункции

// Формирует массив слов месяц.
//
// Возвращаемое значение:
//  Массив - массив слов месяц.
//
Функция Месяцы()
	
	Месяцы = Новый Массив;
	Для Каждого Строка Из МесяцыЯнварь() Цикл
		Месяцы.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МесяцыФевраль() Цикл
		Месяцы.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МесяцыМарт() Цикл
		Месяцы.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МесяцыАпрель() Цикл
		Месяцы.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МесяцыМай() Цикл
		Месяцы.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МесяцыИюнь() Цикл
		Месяцы.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МесяцыИюль() Цикл
		Месяцы.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МесяцыАвгуст() Цикл
		Месяцы.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МесяцыСентябрь() Цикл
		Месяцы.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МесяцыОктябрь() Цикл
		Месяцы.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МесяцыНоябрь() Цикл
		Месяцы.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МесяцыДекабрь() Цикл
		Месяцы.Добавить(Строка);
	КонецЦикла;
	Для Каждого Строка Из МесяцыТекущий() Цикл
		Месяцы.Добавить(Строка);
	КонецЦикла;
	
	Возврат Месяцы;
	
КонецФункции

// Формирует массив слов месяц январь.
//
// Возвращаемое значение:
//  Массив - массив слов месяц январь.
//
Функция МесяцыЯнварь()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить("январе");
	Месяцы.Добавить("январей");
	Месяцы.Добавить("январи");
	Месяцы.Добавить("январь");
	Месяцы.Добавить("январю");
	Месяцы.Добавить("января");
	Месяцы.Добавить("январям");
	Месяцы.Добавить("январями");
	Месяцы.Добавить("январях");
	Месяцы.Добавить("январем");
	Месяцы.Добавить("янв");
	Месяцы.Добавить("январ");
	
	Возврат Месяцы;
	
КонецФункции

// Формирует массив слов месяц февраль.
//
// Возвращаемое значение:
//  Массив - массив слов месяц февраль.
//
Функция МесяцыФевраль()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить("феврале");
	Месяцы.Добавить("февралей");
	Месяцы.Добавить("феврали");
	Месяцы.Добавить("февраль");
	Месяцы.Добавить("февралю");
	Месяцы.Добавить("февраля");
	Месяцы.Добавить("февралям");
	Месяцы.Добавить("февралями");
	Месяцы.Добавить("февралях");
	Месяцы.Добавить("февралем");
	Месяцы.Добавить("фев");
	Месяцы.Добавить("февр");
	Месяцы.Добавить("феврал");
	
	Возврат Месяцы;
	
КонецФункции

// Формирует массив слов месяц март.
//
// Возвращаемое значение:
//  Массив - массив слов месяц март.
//
Функция МесяцыМарт()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить("март");
	Месяцы.Добавить("марта");
	Месяцы.Добавить("мартам");
	Месяцы.Добавить("мартами");
	Месяцы.Добавить("мартах");
	Месяцы.Добавить("марте");
	Месяцы.Добавить("мартов");
	Месяцы.Добавить("мартом");
	Месяцы.Добавить("марту");
	Месяцы.Добавить("марты");
	Месяцы.Добавить("мар");
	
	Возврат Месяцы;
	
КонецФункции

// Формирует массив слов месяц апрель.
//
// Возвращаемое значение:
//  Массив - массив слов месяц апрель.
//
Функция МесяцыАпрель()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить("апреле");
	Месяцы.Добавить("апрелей");
	Месяцы.Добавить("апрелем");
	Месяцы.Добавить("апрели");
	Месяцы.Добавить("апрель");
	Месяцы.Добавить("апрелю");
	Месяцы.Добавить("апреля");
	Месяцы.Добавить("апрелям");
	Месяцы.Добавить("апрелями");
	Месяцы.Добавить("апрелях");
	Месяцы.Добавить("апр");
	Месяцы.Добавить("апрел");
	
	Возврат Месяцы;
	
КонецФункции

// Формирует массив слов месяц май.
//
// Возвращаемое значение:
//  Массив - массив слов месяц май.
//
Функция МесяцыМай()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить("мае");
	Месяцы.Добавить("маем");
	Месяцы.Добавить("май");
	Месяцы.Добавить("маю");
	Месяцы.Добавить("мая");
	
	Возврат Месяцы;
	
КонецФункции

// Формирует массив слов месяц июнь.
//
// Возвращаемое значение:
//  Массив - массив слов месяц июнь.
//
Функция МесяцыИюнь()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить("июне");
	Месяцы.Добавить("июней");
	Месяцы.Добавить("июнем");
	Месяцы.Добавить("июни");
	Месяцы.Добавить("июнь");
	Месяцы.Добавить("июню");
	Месяцы.Добавить("июня");
	Месяцы.Добавить("июням");
	Месяцы.Добавить("июнями");
	Месяцы.Добавить("июнях");
	Месяцы.Добавить("июн");
	
	Возврат Месяцы;
	
КонецФункции

// Формирует массив слов месяц июль.
//
// Возвращаемое значение:
//  Массив - массив слов месяц июль.
//
Функция МесяцыИюль()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить("июле");
	Месяцы.Добавить("июлей");
	Месяцы.Добавить("июлем");
	Месяцы.Добавить("июли");
	Месяцы.Добавить("июль");
	Месяцы.Добавить("июлю");
	Месяцы.Добавить("июля");
	Месяцы.Добавить("июлям");
	Месяцы.Добавить("июлями");
	Месяцы.Добавить("июлях");
	Месяцы.Добавить("июл");
	
	Возврат Месяцы;
	
КонецФункции

// Формирует массив слов месяц август.
//
// Возвращаемое значение:
//  Массив - массив слов месяц август.
//
Функция МесяцыАвгуст()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить("август");
	Месяцы.Добавить("августа");
	Месяцы.Добавить("августам");
	Месяцы.Добавить("августами");
	Месяцы.Добавить("августах");
	Месяцы.Добавить("августе");
	Месяцы.Добавить("августов");
	Месяцы.Добавить("августом");
	Месяцы.Добавить("августу");
	Месяцы.Добавить("августы");
	Месяцы.Добавить("авг");
	Месяцы.Добавить("авгус");
	
	Возврат Месяцы;
	
КонецФункции

// Формирует массив слов месяц сентябрь.
//
// Возвращаемое значение:
//  Массив - массив слов месяц сентябрь.
//
Функция МесяцыСентябрь()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить("сентябре");
	Месяцы.Добавить("сентябрей");
	Месяцы.Добавить("сентябри");
	Месяцы.Добавить("сентябрь");
	Месяцы.Добавить("сентябрю");
	Месяцы.Добавить("сентября");
	Месяцы.Добавить("сентябрям");
	Месяцы.Добавить("сентябрями");
	Месяцы.Добавить("сентябрях");
	Месяцы.Добавить("сентябрем");
	Месяцы.Добавить("сен");
	Месяцы.Добавить("сент");
	Месяцы.Добавить("сентяб");
	Месяцы.Добавить("сентябр");
	
	Возврат Месяцы;
	
КонецФункции

// Формирует массив слов месяц октябрь.
//
// Возвращаемое значение:
//  Массив - массив слов месяц октябрь.
//
Функция МесяцыОктябрь()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить("октябре");
	Месяцы.Добавить("октябрей");
	Месяцы.Добавить("октябри");
	Месяцы.Добавить("октябрь");
	Месяцы.Добавить("октябрю");
	Месяцы.Добавить("октября");
	Месяцы.Добавить("октябрям");
	Месяцы.Добавить("октябрями");
	Месяцы.Добавить("октябрях");
	Месяцы.Добавить("октябрем");
	Месяцы.Добавить("окт");
	Месяцы.Добавить("октяб");
	Месяцы.Добавить("октябр");
	
	Возврат Месяцы;
	
КонецФункции

// Формирует массив слов месяц ноябрь.
//
// Возвращаемое значение:
//  Массив - массив слов месяц ноябрь.
//
Функция МесяцыНоябрь()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить("ноябре");
	Месяцы.Добавить("ноябрей");
	Месяцы.Добавить("ноябри");
	Месяцы.Добавить("ноябрь");
	Месяцы.Добавить("ноябрю");
	Месяцы.Добавить("ноября");
	Месяцы.Добавить("ноябрям");
	Месяцы.Добавить("ноябрями");
	Месяцы.Добавить("ноябрях");
	Месяцы.Добавить("ноябрем");
	Месяцы.Добавить("ноя");
	Месяцы.Добавить("нояб");
	Месяцы.Добавить("ноябр");
	
	Возврат Месяцы;
	
КонецФункции

// Формирует массив слов месяц декабрь.
//
// Возвращаемое значение:
//  Массив - массив слов месяц декабрь.
//
Функция МесяцыДекабрь()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить("декабре");
	Месяцы.Добавить("декабрей");
	Месяцы.Добавить("декабри");
	Месяцы.Добавить("декабрь");
	Месяцы.Добавить("декабрю");
	Месяцы.Добавить("декабря");
	Месяцы.Добавить("декабрям");
	Месяцы.Добавить("декабрями");
	Месяцы.Добавить("декабрях");
	Месяцы.Добавить("декабрем");
	Месяцы.Добавить("дек");
	Месяцы.Добавить("декаб");
	Месяцы.Добавить("декабр");
	
	Возврат Месяцы;
	
КонецФункции

// Формирует массив слов месяц текущий.
//
// Возвращаемое значение:
//  Массив - массив слов месяц текущий.
//
Функция МесяцыТекущий()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить("число");
	Месяцы.Добавить("числа");
	Месяцы.Добавить("числу");
	Месяцы.Добавить("числом");
	Месяцы.Добавить("числе");
	Месяцы.Добавить("чисел");
	Месяцы.Добавить("числам");
	Месяцы.Добавить("числа");
	Месяцы.Добавить("числами");
	Месяцы.Добавить("числах");
	
	Возврат Месяцы;
	
КонецФункции

// Формирует массив прилагательных интервала.
//
// Возвращаемое значение:
//  Массив - массив прилагательных интервала.
//
Функция ИнтервалПрилагательное()
	
	ИнтервалПрилагательное = Новый Массив;
	Для Каждого Интервал Из ИнтервалПрилагательноеЭтот() Цикл
		ИнтервалПрилагательное.Добавить(Интервал);
	КонецЦикла;
	Для Каждого Интервал Из ИнтервалПрилагательноеСледующий() Цикл
		ИнтервалПрилагательное.Добавить(Интервал);
	КонецЦикла;
	
	Возврат ИнтервалПрилагательное;
	
КонецФункции

// Формирует массив прилагательных интервала этот.
//
// Возвращаемое значение:
//  Массив - массив прилагательных интервала этот.
//
Функция ИнтервалПрилагательноеЭтот()
	
	ИнтервалПрилагательноеЭтот = Новый Массив;
	ИнтервалПрилагательноеЭтот.Добавить("этой");
	ИнтервалПрилагательноеЭтот.Добавить("этом");
	
	Возврат ИнтервалПрилагательноеЭтот;
	
КонецФункции

// Формирует массив прилагательных интервала следующий.
//
// Возвращаемое значение:
//  Массив - массив прилагательных интервала следующий.
//
Функция ИнтервалПрилагательноеСледующий()
	
	ИнтервалПрилагательноеСледующий = Новый Массив;
	ИнтервалПрилагательноеСледующий.Добавить("следующей");
	ИнтервалПрилагательноеСледующий.Добавить("следующем");
	
	Возврат ИнтервалПрилагательноеСледующий;
	
КонецФункции

// Формирует массив аббревиатур места.
//
// Возвращаемое значение:
//  Массив - массив аббревиатур места.
//
Функция АббревиатурыМеста()
	
	АббревиатурыМеста = Новый Массив;
	АббревиатурыМеста.Добавить("г");
	АббревиатурыМеста.Добавить("ул");
	АббревиатурыМеста.Добавить("п");
	АббревиатурыМеста.Добавить("просп");
	АббревиатурыМеста.Добавить("м");
	АббревиатурыМеста.Добавить("ст");
	АббревиатурыМеста.Добавить("корп");
	АббревиатурыМеста.Добавить("ост");
	АббревиатурыМеста.Добавить("о");
	АббревиатурыМеста.Добавить("кв");
	АббревиатурыМеста.Добавить("б");
	АббревиатурыМеста.Добавить("д");
	АббревиатурыМеста.Добавить("бульвар");
	АббревиатурыМеста.Добавить("бульвара");
	АббревиатурыМеста.Добавить("бульваре");
	АббревиатурыМеста.Добавить("бульваром");
	АббревиатурыМеста.Добавить("бульвару");
	АббревиатурыМеста.Добавить("метро");
	АббревиатурыМеста.Добавить("проспект");
	АббревиатурыМеста.Добавить("проспекта");
	АббревиатурыМеста.Добавить("проспекте");
	АббревиатурыМеста.Добавить("проспектом");
	АббревиатурыМеста.Добавить("проспекту");
	АббревиатурыМеста.Добавить("станцией");
	АббревиатурыМеста.Добавить("станцию");
	АббревиатурыМеста.Добавить("станция");
	АббревиатурыМеста.Добавить("корпус");
	АббревиатурыМеста.Добавить("корпусе");
	АббревиатурыМеста.Добавить("офис");
	АббревиатурыМеста.Добавить("офисе");
	АббревиатурыМеста.Добавить("ш");
	АббревиатурыМеста.Добавить("шоссе");
	АббревиатурыМеста.Добавить("пер");
	АббревиатурыМеста.Добавить("переулок");
	АббревиатурыМеста.Добавить("переулке");
	АббревиатурыМеста.Добавить("дом");
	АббревиатурыМеста.Добавить("доме");
	
	// Не используемые аббревиатуры
	// АббревиатурыМеста.Добавить("к");
	
	Возврат АббревиатурыМеста;
	
КонецФункции

// Формирует массив слов адрес.
//
// Возвращаемое значение:
//  Массив - массив слов адрес.
//
Функция Адрес()
	
	Адрес = Новый Массив;
	Адрес.Добавить("адрес");
	Адрес.Добавить("адреса");
	Адрес.Добавить("адресам");
	Адрес.Добавить("адресами");
	Адрес.Добавить("адресах");
	Адрес.Добавить("адресе");
	Адрес.Добавить("адресов");
	Адрес.Добавить("адресом");
	Адрес.Добавить("адресу");
	Адрес.Добавить("адресы");
	
	Возврат Адрес;
	
КонецФункции

// Формирует массив слов встреча.
//
// Возвращаемое значение:
//  Массив - массив слов встреча.
//
Функция Встреча()
	
	Встреча = Новый Массив;
	Встреча.Добавить("встреч");
	Встреча.Добавить("встреча");
	Встреча.Добавить("встречам");
	Встреча.Добавить("встречами");
	Встреча.Добавить("встречах");
	Встреча.Добавить("встрече");
	Встреча.Добавить("встречей");
	Встреча.Добавить("встречею");
	Встреча.Добавить("встречи");
	Встреча.Добавить("встречу");
	Встреча.Добавить("мероприятие");
	Встреча.Добавить("мероприятием");
	Встреча.Добавить("мероприятии");
	Встреча.Добавить("мероприятий");
	Встреча.Добавить("мероприятию");
	Встреча.Добавить("мероприятия");
	Встреча.Добавить("мероприятиям");
	Встреча.Добавить("мероприятиями");
	Встреча.Добавить("мероприятиях");
	Встреча.Добавить("мероприятье");
	Встреча.Добавить("мероприятьем");
	Встреча.Добавить("мероприятьи");
	Встреча.Добавить("мероприятью");
	Встреча.Добавить("мероприятья");
	Встреча.Добавить("мероприятьям");
	Встреча.Добавить("мероприятьями");
	Встреча.Добавить("мероприятьях");
	Встреча.Добавить("митинг");
	Встреча.Добавить("митинга");
	Встреча.Добавить("митингам");
	Встреча.Добавить("митингами");
	Встреча.Добавить("митингах");
	Встреча.Добавить("митинге");
	Встреча.Добавить("митинги");
	Встреча.Добавить("митингов");
	Встреча.Добавить("митингом");
	Встреча.Добавить("митингу");
	Встреча.Добавить("занятие");
	Встреча.Добавить("занятием");
	Встреча.Добавить("занятии");
	Встреча.Добавить("занятий");
	Встреча.Добавить("занятию");
	Встреча.Добавить("занятия");
	Встреча.Добавить("занятиям");
	Встреча.Добавить("занятиями");
	Встреча.Добавить("занятиях");
	Встреча.Добавить("просмотр");
	Встреча.Добавить("просмотре");
	Встреча.Добавить("просмотрах");
	Встреча.Добавить("просмотров");
	Встреча.Добавить("просмотру");
	Встреча.Добавить("просмотром");
	Встреча.Добавить("тренинг");
	Встреча.Добавить("тренинга");
	Встреча.Добавить("тренингу");
	Встреча.Добавить("тренингом");
	Встреча.Добавить("тренинге");
	Встреча.Добавить("тренинги");
	Встреча.Добавить("тренингов");
	Встреча.Добавить("тренингам");
	Встреча.Добавить("тренингами");
	Встреча.Добавить("тренингах");
	Встреча.Добавить("обучение");
	Встреча.Добавить("обучения");
	Встреча.Добавить("обучению");
	Встреча.Добавить("обучением");
	Встреча.Добавить("обучении");
	Встреча.Добавить("обучений");
	Встреча.Добавить("обучениям");
	Встреча.Добавить("обучениями");
	Встреча.Добавить("обучениях");
	
	Возврат Встреча;
	
КонецФункции

// Формирует массив слов решить.
//
// Возвращаемое значение:
//  Массив - массив слов решить.
//
Функция Решить()
	
	Решить = Новый Массив;
	Решить.Добавить("решу");
	Решить.Добавить("решишь");
	Решить.Добавить("решит");
	Решить.Добавить("решим");
	Решить.Добавить("решите");
	Решить.Добавить("решат");
	Решить.Добавить("решил");
	Решить.Добавить("решила");
	Решить.Добавить("решило");
	Решить.Добавить("решили");
	Решить.Добавить("приемом");
	Решить.Добавить("реши");
	
	Возврат Решить;
	
КонецФункции

// Формирует массив слов договориться.
//
// Возвращаемое значение:
//  Массив - массив слов договориться.
//
Функция Договориться()
	
	Договориться = Новый Массив;
	Договориться.Добавить("договорюсь");
	Договориться.Добавить("договоришься");
	Договориться.Добавить("договорится");
	Договориться.Добавить("договоримся");
	Договориться.Добавить("договоритесь");
	Договориться.Добавить("договорятся");
	Договориться.Добавить("договорился");
	Договориться.Добавить("договорилась");
	Договориться.Добавить("договорилось");
	Договориться.Добавить("договорились");
	Договориться.Добавить("договорись");
	Договориться.Добавить("договоритесь");
	
	Возврат Договориться;
	
КонецФункции

// Формирует массив слов прием.
//
// Возвращаемое значение:
//  Массив - массив слов прием.
//
Функция Прием()
	
	Прием = Новый Массив;
	Прием.Добавить("прием");
	Прием.Добавить("приема");
	Прием.Добавить("приему");
	Прием.Добавить("прием");
	Прием.Добавить("приемом");
	Прием.Добавить("приеме");
	Прием.Добавить("приемы");
	Прием.Добавить("приемов");
	Прием.Добавить("приемам");
	Прием.Добавить("приемы");
	Прием.Добавить("приемами");
	Прием.Добавить("приемах");
	
	Возврат Прием;
	
КонецФункции

// Формирует массив слов напомнить.
//
// Возвращаемое значение:
//  Массив - массив слов напомнить.
//
Функция Напомнить()
	
	Напомнить = Новый Массив;
	Напомнить.Добавить("напомню");
	Напомнить.Добавить("напомнишь");
	Напомнить.Добавить("напомнит");
	Напомнить.Добавить("напомним");
	Напомнить.Добавить("напомните");
	Напомнить.Добавить("напомнят");
	Напомнить.Добавить("напомни");
	Напомнить.Добавить("напомните");
	
	Возврат Напомнить;
	
КонецФункции

// Формирует массив слов напоминать.
//
// Возвращаемое значение:
//  Массив - массив слов напоминать.
//
Функция Напоминать()
	
	Напоминать = Новый Массив;
	Напоминать.Добавить("напоминаю");
	Напоминать.Добавить("напоминаешь");
	Напоминать.Добавить("напоминает");
	Напоминать.Добавить("напоминаем");
	Напоминать.Добавить("напоминаете");
	Напоминать.Добавить("напоминают");
	Напоминать.Добавить("напоминай");
	Напоминать.Добавить("напоминайте");
	
	Возврат Напоминать;
	
КонецФункции

// Формирует массив слов сообщить.
//
// Возвращаемое значение:
//  Массив - массив слов сообщить.
//
Функция СловоСообщить()
	
	СловоСообщить = Новый Массив;
	СловоСообщить.Добавить("сообщу");
	СловоСообщить.Добавить("сообщишь");
	СловоСообщить.Добавить("сообщит");
	СловоСообщить.Добавить("сообщим");
	СловоСообщить.Добавить("сообщите");
	СловоСообщить.Добавить("сообщат");
	СловоСообщить.Добавить("сообщи");
	СловоСообщить.Добавить("сообщите");
	
	Возврат СловоСообщить;
	
КонецФункции

// Формирует массив слов встретимся.
//
// Возвращаемое значение:
//  Массив - массив слов встретимся.
//
Функция Встретимся()
	
	Встретимся = Новый Массив;
	Встретимся.Добавить("встретившаяся");
	Встретимся.Добавить("встретившегося");
	Встретимся.Добавить("встретившееся");
	Встретимся.Добавить("встретившейся");
	Встретимся.Добавить("встретившемся");
	Встретимся.Добавить("встретившемуся");
	Встретимся.Добавить("встретившеюся");
	Встретимся.Добавить("встретившиеся");
	Встретимся.Добавить("встретившийся");
	Встретимся.Добавить("встретившимися");
	Встретимся.Добавить("встретившимся");
	Встретимся.Добавить("встретившись");
	Встретимся.Добавить("встретившихся");
	Встретимся.Добавить("встретившуюся");
	Встретимся.Добавить("встретилась");
	Встретимся.Добавить("встретились");
	Встретимся.Добавить("встретилось");
	Встретимся.Добавить("встретился");
	Встретимся.Добавить("встретимся");
	Встретимся.Добавить("встретимтесь");
	Встретимся.Добавить("встретитесь");
	Встретимся.Добавить("встретится");
	Встретимся.Добавить("встретиться");
	Встретимся.Добавить("встретишься");
	Встретимся.Добавить("встреться");
	Встретимся.Добавить("встретьтесь");
	Встретимся.Добавить("встретятся");
	Встретимся.Добавить("встречусь");
	
	Возврат Встретимся;
	
КонецФункции

// Формирует массив слов проводятся.
//
// Возвращаемое значение:
//  Массив - массив слов проводятся.
//
Функция Проводятся()
	
	Проводятся = Новый Массив;
	Проводятся.Добавить("запланировав");
	Проводятся.Добавить("запланировавшая");
	Проводятся.Добавить("запланировавшего");
	Проводятся.Добавить("запланировавшее");
	Проводятся.Добавить("запланировавшей");
	Проводятся.Добавить("запланировавшем");
	Проводятся.Добавить("запланировавшему");
	Проводятся.Добавить("запланировавшею");
	Проводятся.Добавить("запланировавши");
	Проводятся.Добавить("запланировавшие");
	Проводятся.Добавить("запланировавший");
	Проводятся.Добавить("запланировавшим");
	Проводятся.Добавить("запланировавшими");
	Проводятся.Добавить("запланировавших");
	Проводятся.Добавить("запланировавшую");
	Проводятся.Добавить("запланировал");
	Проводятся.Добавить("запланировала");
	Проводятся.Добавить("запланировали");
	Проводятся.Добавить("запланировало");
	Проводятся.Добавить("запланирован");
	Проводятся.Добавить("запланирована");
	Проводятся.Добавить("запланированная");
	Проводятся.Добавить("запланированного");
	Проводятся.Добавить("запланированное");
	Проводятся.Добавить("запланированной");
	Проводятся.Добавить("запланированном");
	Проводятся.Добавить("запланированному");
	Проводятся.Добавить("запланированною");
	Проводятся.Добавить("запланированную");
	Проводятся.Добавить("запланированные");
	Проводятся.Добавить("запланированный");
	Проводятся.Добавить("запланированным");
	Проводятся.Добавить("запланированными");
	Проводятся.Добавить("запланированных");
	Проводятся.Добавить("запланировано");
	Проводятся.Добавить("запланированы");
	Проводятся.Добавить("запланировать");
	Проводятся.Добавить("запланируем");
	Проводятся.Добавить("запланируемте");
	Проводятся.Добавить("запланирует");
	Проводятся.Добавить("запланируете");
	Проводятся.Добавить("запланируешь");
	Проводятся.Добавить("запланируй");
	Проводятся.Добавить("запланируйте");
	Проводятся.Добавить("запланирую");
	Проводятся.Добавить("запланируют");
	Проводятся.Добавить("назначав");
	Проводятся.Добавить("назначавшая");
	Проводятся.Добавить("назначавшего");
	Проводятся.Добавить("назначавшее");
	Проводятся.Добавить("назначавшей");
	Проводятся.Добавить("назначавшем");
	Проводятся.Добавить("назначавшему");
	Проводятся.Добавить("назначавшею");
	Проводятся.Добавить("назначавши");
	Проводятся.Добавить("назначавшие");
	Проводятся.Добавить("назначавший");
	Проводятся.Добавить("назначавшим");
	Проводятся.Добавить("назначавшими");
	Проводятся.Добавить("назначавших");
	Проводятся.Добавить("назначавшую");
	Проводятся.Добавить("назначаем");
	Проводятся.Добавить("назначаема");
	Проводятся.Добавить("назначаемая");
	Проводятся.Добавить("назначаемо");
	Проводятся.Добавить("назначаемого");
	Проводятся.Добавить("назначаемое");
	Проводятся.Добавить("назначаемой");
	Проводятся.Добавить("назначаемом");
	Проводятся.Добавить("назначаемому");
	Проводятся.Добавить("назначаемою");
	Проводятся.Добавить("назначаемую");
	Проводятся.Добавить("назначаемы");
	Проводятся.Добавить("назначаемые");
	Проводятся.Добавить("назначаемый");
	Проводятся.Добавить("назначаемым");
	Проводятся.Добавить("назначаемыми");
	Проводятся.Добавить("назначаемых");
	Проводятся.Добавить("назначает");
	Проводятся.Добавить("назначаете");
	Проводятся.Добавить("назначаешь");
	Проводятся.Добавить("назначай");
	Проводятся.Добавить("назначайте");
	Проводятся.Добавить("назначал");
	Проводятся.Добавить("назначала");
	Проводятся.Добавить("назначали");
	Проводятся.Добавить("назначало");
	Проводятся.Добавить("назначат");
	Проводятся.Добавить("назначать");
	Проводятся.Добавить("назначаю");
	Проводятся.Добавить("назначают");
	Проводятся.Добавить("назначающая");
	Проводятся.Добавить("назначающего");
	Проводятся.Добавить("назначающее");
	Проводятся.Добавить("назначающей");
	Проводятся.Добавить("назначающем");
	Проводятся.Добавить("назначающему");
	Проводятся.Добавить("назначающею");
	Проводятся.Добавить("назначающие");
	Проводятся.Добавить("назначающий");
	Проводятся.Добавить("назначающим");
	Проводятся.Добавить("назначающими");
	Проводятся.Добавить("назначающих");
	Проводятся.Добавить("назначающую");
	Проводятся.Добавить("назначая");
	Проводятся.Добавить("назначен");
	Проводятся.Добавить("назначена");
	Проводятся.Добавить("назначенная");
	Проводятся.Добавить("назначенного");
	Проводятся.Добавить("назначенное");
	Проводятся.Добавить("назначенной");
	Проводятся.Добавить("назначенном");
	Проводятся.Добавить("назначенному");
	Проводятся.Добавить("назначенною");
	Проводятся.Добавить("назначенную");
	Проводятся.Добавить("назначенные");
	Проводятся.Добавить("назначенный");
	Проводятся.Добавить("назначенным");
	Проводятся.Добавить("назначенными");
	Проводятся.Добавить("назначенных");
	Проводятся.Добавить("назначено");
	Проводятся.Добавить("назначены");
	Проводятся.Добавить("назначив");
	Проводятся.Добавить("назначившая");
	Проводятся.Добавить("назначившего");
	Проводятся.Добавить("назначившее");
	Проводятся.Добавить("назначившей");
	Проводятся.Добавить("назначившем");
	Проводятся.Добавить("назначившему");
	Проводятся.Добавить("назначившею");
	Проводятся.Добавить("назначивши");
	Проводятся.Добавить("назначившие");
	Проводятся.Добавить("назначивший");
	Проводятся.Добавить("назначившим");
	Проводятся.Добавить("назначившими");
	Проводятся.Добавить("назначивших");
	Проводятся.Добавить("назначившую");
	Проводятся.Добавить("назначил");
	Проводятся.Добавить("назначила");
	Проводятся.Добавить("назначили");
	Проводятся.Добавить("назначило");
	Проводятся.Добавить("назначим");
	Проводятся.Добавить("назначимте");
	Проводятся.Добавить("назначит");
	Проводятся.Добавить("назначите");
	Проводятся.Добавить("назначить");
	Проводятся.Добавить("назначишь");
	Проводятся.Добавить("назначу");
	Проводятся.Добавить("назначь");
	Проводятся.Добавить("назначьте");
	Проводятся.Добавить("планировав");
	Проводятся.Добавить("планировавшая");
	Проводятся.Добавить("планировавшего");
	Проводятся.Добавить("планировавшее");
	Проводятся.Добавить("планировавшей");
	Проводятся.Добавить("планировавшем");
	Проводятся.Добавить("планировавшему");
	Проводятся.Добавить("планировавшею");
	Проводятся.Добавить("планировавши");
	Проводятся.Добавить("планировавшие");
	Проводятся.Добавить("планировавший");
	Проводятся.Добавить("планировавшим");
	Проводятся.Добавить("планировавшими");
	Проводятся.Добавить("планировавших");
	Проводятся.Добавить("планировавшую");
	Проводятся.Добавить("планировал");
	Проводятся.Добавить("планировала");
	Проводятся.Добавить("планировали");
	Проводятся.Добавить("планировало");
	Проводятся.Добавить("планирован");
	Проводятся.Добавить("планирована");
	Проводятся.Добавить("планированная");
	Проводятся.Добавить("планированного");
	Проводятся.Добавить("планированное");
	Проводятся.Добавить("планированной");
	Проводятся.Добавить("планированном");
	Проводятся.Добавить("планированному");
	Проводятся.Добавить("планированною");
	Проводятся.Добавить("планированную");
	Проводятся.Добавить("планированные");
	Проводятся.Добавить("планированный");
	Проводятся.Добавить("планированным");
	Проводятся.Добавить("планированными");
	Проводятся.Добавить("планированных");
	Проводятся.Добавить("планировано");
	Проводятся.Добавить("планированы");
	Проводятся.Добавить("планировать");
	Проводятся.Добавить("планируем");
	Проводятся.Добавить("планируема");
	Проводятся.Добавить("планируемая");
	Проводятся.Добавить("планируемо");
	Проводятся.Добавить("планируемого");
	Проводятся.Добавить("планируемое");
	Проводятся.Добавить("планируемой");
	Проводятся.Добавить("планируемом");
	Проводятся.Добавить("планируемому");
	Проводятся.Добавить("планируемою");
	Проводятся.Добавить("планируемую");
	Проводятся.Добавить("планируемы");
	Проводятся.Добавить("планируемые");
	Проводятся.Добавить("планируемый");
	Проводятся.Добавить("планируемым");
	Проводятся.Добавить("планируемыми");
	Проводятся.Добавить("планируемых");
	Проводятся.Добавить("планирует");
	Проводятся.Добавить("планируется");
	Проводятся.Добавить("планируете");
	Проводятся.Добавить("планируешь");
	Проводятся.Добавить("планируй");
	Проводятся.Добавить("планируйте");
	Проводятся.Добавить("планирую");
	Проводятся.Добавить("планируют");
	Проводятся.Добавить("планируются");
	Проводятся.Добавить("планирующая");
	Проводятся.Добавить("планирующего");
	Проводятся.Добавить("планирующее");
	Проводятся.Добавить("планирующей");
	Проводятся.Добавить("планирующем");
	Проводятся.Добавить("планирующему");
	Проводятся.Добавить("планирующею");
	Проводятся.Добавить("планирующие");
	Проводятся.Добавить("планирующий");
	Проводятся.Добавить("планирующим");
	Проводятся.Добавить("планирующими");
	Проводятся.Добавить("планирующих");
	Проводятся.Добавить("планирующую");
	Проводятся.Добавить("планируя");
	Проводятся.Добавить("проведена");
	Проводятся.Добавить("проведено");
	Проводятся.Добавить("проведены");
	Проводятся.Добавить("проведи");
	Проводятся.Добавить("проведите");
	Проводятся.Добавить("проведу");
	Проводятся.Добавить("проведут");
	Проводятся.Добавить("проведя");
	Проводятся.Добавить("проведем");
	Проводятся.Добавить("проведемте");
	Проводятся.Добавить("проведен");
	Проводятся.Добавить("проведенная");
	Проводятся.Добавить("проведенного");
	Проводятся.Добавить("проведенное");
	Проводятся.Добавить("проведенной");
	Проводятся.Добавить("проведенном");
	Проводятся.Добавить("проведенному");
	Проводятся.Добавить("проведенною");
	Проводятся.Добавить("проведенную");
	Проводятся.Добавить("проведенные");
	Проводятся.Добавить("проведенный");
	Проводятся.Добавить("проведенным");
	Проводятся.Добавить("проведенными");
	Проводятся.Добавить("проведенных");
	Проводятся.Добавить("проведет");
	Проводятся.Добавить("проведете");
	Проводятся.Добавить("проведешь");
	Проводятся.Добавить("провела");
	Проводятся.Добавить("провели");
	Проводятся.Добавить("провело");
	Проводятся.Добавить("провести");
	Проводятся.Добавить("проводи");
	Проводятся.Добавить("проводив");
	Проводятся.Добавить("проводившая");
	Проводятся.Добавить("проводившего");
	Проводятся.Добавить("проводившее");
	Проводятся.Добавить("проводившей");
	Проводятся.Добавить("проводившем");
	Проводятся.Добавить("проводившему");
	Проводятся.Добавить("проводившею");
	Проводятся.Добавить("проводивши");
	Проводятся.Добавить("проводившие");
	Проводятся.Добавить("проводивший");
	Проводятся.Добавить("проводившим");
	Проводятся.Добавить("проводившими");
	Проводятся.Добавить("проводивших");
	Проводятся.Добавить("проводившую");
	Проводятся.Добавить("проводил");
	Проводятся.Добавить("проводила");
	Проводятся.Добавить("проводили");
	Проводятся.Добавить("проводило");
	Проводятся.Добавить("проводим");
	Проводятся.Добавить("проводима");
	Проводятся.Добавить("проводимая");
	Проводятся.Добавить("проводимо");
	Проводятся.Добавить("проводимого");
	Проводятся.Добавить("проводимое");
	Проводятся.Добавить("проводимой");
	Проводятся.Добавить("проводимом");
	Проводятся.Добавить("проводимому");
	Проводятся.Добавить("проводимою");
	Проводятся.Добавить("проводимую");
	Проводятся.Добавить("проводимы");
	Проводятся.Добавить("проводимые");
	Проводятся.Добавить("проводимый");
	Проводятся.Добавить("проводимым");
	Проводятся.Добавить("проводимыми");
	Проводятся.Добавить("проводимых");
	Проводятся.Добавить("проводит");
	Проводятся.Добавить("проводите");
	Проводятся.Добавить("проводить");
	Проводятся.Добавить("проводишь");
	Проводятся.Добавить("проводя");
	Проводятся.Добавить("проводят");
	Проводятся.Добавить("проводящая");
	Проводятся.Добавить("проводящего");
	Проводятся.Добавить("проводящее");
	Проводятся.Добавить("проводящей");
	Проводятся.Добавить("проводящем");
	Проводятся.Добавить("проводящему");
	Проводятся.Добавить("проводящею");
	Проводятся.Добавить("проводящие");
	Проводятся.Добавить("проводящий");
	Проводятся.Добавить("проводящим");
	Проводятся.Добавить("проводящими");
	Проводятся.Добавить("проводящих");
	Проводятся.Добавить("проводящую");
	Проводятся.Добавить("провожу");
	Проводятся.Добавить("проведшая");
	Проводятся.Добавить("провел");
	
	Возврат Проводятся;
	
КонецФункции

// Формирует ключевые слова мероприятия.
//
// Возвращаемое значение:
//  Массив - Ключевые слова мероприятия.
//
Функция КлючевыеСловаМероприятия()
	
	КлючевыеСловаМероприятия = Новый Массив;
	
	МакетКлючевыеСловаМероприятия = ПолучитьМакет("КлючевыеСловаМероприятия");
	Для НомерСтроки = 1 По МакетКлючевыеСловаМероприятия.КоличествоСтрок() Цикл
		Строка = МакетКлючевыеСловаМероприятия.ПолучитьСтроку(НомерСтроки);
		Для Каждого Слово Из СтрРазделить(Строка, " ") Цикл
			КлючевыеСловаМероприятия.Добавить(Слово);
		КонецЦикла;
	КонецЦикла;
	
	Возврат КлючевыеСловаМероприятия;
	
КонецФункции

// Формирует массив слов вы.
//
// Возвращаемое значение:
//  Массив - массив слов вы.
//
Функция Вы()
	
	Вы = Новый Массив;
	Вы.Добавить("вам");
	Вы.Добавить("вами");
	Вы.Добавить("вас");
	Вы.Добавить("вы");
	
	Возврат Вы;
	
КонецФункции

// Формирует массив слов ждем.
//
// Возвращаемое значение:
//  Массив - массив слов ждем.
//
Функция Ждем()
	
	Ждем = Новый Массив;
	Ждем.Добавить("ждав");
	Ждем.Добавить("ждавшая");
	Ждем.Добавить("ждавшего");
	Ждем.Добавить("ждавшее");
	Ждем.Добавить("ждавшей");
	Ждем.Добавить("ждавшем");
	Ждем.Добавить("ждавшему");
	Ждем.Добавить("ждавшею");
	Ждем.Добавить("ждавши");
	Ждем.Добавить("ждавшие");
	Ждем.Добавить("ждавший");
	Ждем.Добавить("ждавшим");
	Ждем.Добавить("ждавшими");
	Ждем.Добавить("ждавших");
	Ждем.Добавить("ждавшую");
	Ждем.Добавить("ждал");
	Ждем.Добавить("ждала");
	Ждем.Добавить("ждали");
	Ждем.Добавить("ждало");
	Ждем.Добавить("ждать");
	Ждем.Добавить("жди");
	Ждем.Добавить("ждите");
	Ждем.Добавить("жду");
	Ждем.Добавить("ждут");
	Ждем.Добавить("ждущая");
	Ждем.Добавить("ждущего");
	Ждем.Добавить("ждущее");
	Ждем.Добавить("ждущей");
	Ждем.Добавить("ждущем");
	Ждем.Добавить("ждущему");
	Ждем.Добавить("ждущею");
	Ждем.Добавить("ждущие");
	Ждем.Добавить("ждущий");
	Ждем.Добавить("ждущим");
	Ждем.Добавить("ждущими");
	Ждем.Добавить("ждущих");
	Ждем.Добавить("ждущую");
	Ждем.Добавить("ждя");
	Ждем.Добавить("ждем");
	Ждем.Добавить("ждем");
	Ждем.Добавить("ждет");
	Ждем.Добавить("ждет");
	Ждем.Добавить("ждете");
	Ждем.Добавить("ждете");
	Ждем.Добавить("ждешь");
	Ждем.Добавить("ждешь");
	
	Возврат Ждем;
	
КонецФункции

// Формирует массив слов инструмент.
//
// Возвращаемое значение:
//  Массив - массив слов инструмент.
//
Функция Инструмент()
	
	Инструмент = Новый Массив;
	Инструмент.Добавить("скайп");
	Инструмент.Добавить("скайпа");
	Инструмент.Добавить("скайпе");
	Инструмент.Добавить("скайпом");
	Инструмент.Добавить("скайпу");
	Инструмент.Добавить("телефон");
	Инструмент.Добавить("телефона");
	Инструмент.Добавить("телефонам");
	Инструмент.Добавить("телефоне");
	Инструмент.Добавить("телефоном");
	Инструмент.Добавить("телефону");
	
	Возврат Инструмент;
	
КонецФункции

// Формирует массив частиц ли.
//
// Возвращаемое значение:
//  Массив - массив частиц ли.
//
Функция Ли()
	
	Ли = Новый Массив;
	Ли.Добавить("ли");
	
	Возврат Ли;
	
КонецФункции

// Формирует массив слов сможете.
//
// Возвращаемое значение:
//  Массив - массив слов сможете.
//
Функция Сможете()
	
	Сможете = Новый Массив;
	Сможете.Добавить("сможете");
	Сможете.Добавить("сможешь");
	Сможете.Добавить("сможет");
	Сможете.Добавить("смогу");
	Сможете.Добавить("можете");
	Сможете.Добавить("можешь");
	Сможете.Добавить("может");
	Сможете.Добавить("могу");
	
	Возврат Сможете;
	
КонецФункции

// Формирует массив слов давайте.
//
// Возвращаемое значение:
//  Массив - массив слов давайте.
//
Функция Давайте()
	
	Давайте = Новый Массив;
	Давайте.Добавить("давай");
	Давайте.Добавить("давайте");
	
	Возврат Давайте;
	
КонецФункции

// Формирует массив слов окончание.
//
// Возвращаемое значение:
//  Массив - массив слов окончание.
//
Функция Окончание()
	
	Окончание = Новый Массив;
	Окончание.Добавить("начало");
	Окончание.Добавить("окончание");
	Окончание.Добавить("участвовавшая");
	Окончание.Добавить("участвовавшего");
	Окончание.Добавить("участвовавшее");
	Окончание.Добавить("участвовавшей");
	Окончание.Добавить("участвовавшем");
	Окончание.Добавить("участвовавшему");
	Окончание.Добавить("участвовавшею");
	Окончание.Добавить("участвовавши");
	Окончание.Добавить("участвовавшие");
	Окончание.Добавить("участвовавший");
	Окончание.Добавить("участвовавшим");
	Окончание.Добавить("участвовавшими");
	Окончание.Добавить("участвовавших");
	Окончание.Добавить("участвовавшую");
	Окончание.Добавить("участвовал");
	Окончание.Добавить("участвовала");
	Окончание.Добавить("участвовали");
	Окончание.Добавить("участвовало");
	Окончание.Добавить("участвовать");
	Окончание.Добавить("участвуем");
	Окончание.Добавить("участвует");
	Окончание.Добавить("участвуете");
	Окончание.Добавить("участвуешь");
	Окончание.Добавить("участвуй");
	Окончание.Добавить("участвуйте");
	Окончание.Добавить("участвую");
	Окончание.Добавить("участвуют");
	Окончание.Добавить("участвующая");
	Окончание.Добавить("участвующего");
	Окончание.Добавить("участвующее");
	Окончание.Добавить("участвующей");
	Окончание.Добавить("участвующем");
	Окончание.Добавить("участвующему");
	Окончание.Добавить("участвующею");
	Окончание.Добавить("участвующие");
	Окончание.Добавить("участвующий");
	Окончание.Добавить("участвующим");
	Окончание.Добавить("участвующими");
	Окончание.Добавить("участвующих");
	Окончание.Добавить("участвующую");
	Окончание.Добавить("участвуя");
	Окончание.Добавить("участие");
	Окончание.Добавить("участием");
	Окончание.Добавить("участии");
	Окончание.Добавить("участий");
	Окончание.Добавить("участию");
	Окончание.Добавить("участия");
	Окончание.Добавить("участиям");
	Окончание.Добавить("участиями");
	Окончание.Добавить("участиях");
	Окончание.Добавить("участник");
	Окончание.Добавить("участника");
	Окончание.Добавить("участникам");
	Окончание.Добавить("участниками");
	Окончание.Добавить("участниках");
	Окончание.Добавить("участнике");
	Окончание.Добавить("участники");
	Окончание.Добавить("участников");
	Окончание.Добавить("участником");
	Окончание.Добавить("участнику");
	Окончание.Добавить("участье");
	Окончание.Добавить("участьем");
	Окончание.Добавить("участьи");
	Окончание.Добавить("участью");
	Окончание.Добавить("участья");
	Окончание.Добавить("удобно");
	Окончание.Добавить("название");
	
	Возврат Окончание;
	
КонецФункции

// Формирует массив слов приехать.
//
// Возвращаемое значение:
//  Массив - массив слов приехать.
//
Функция Приехать()
	
	Приехать = Новый Массив;
	Приехать.Добавить("приеду");
	Приехать.Добавить("приедешь");
	Приехать.Добавить("приедет");
	Приехать.Добавить("приедет");
	Приехать.Добавить("приедем");
	Приехать.Добавить("приедете");
	Приехать.Добавить("приедут");
	
	Возврат Приехать;
	
КонецФункции

// Формирует массив слов приезжать.
//
// Возвращаемое значение:
//  Массив - массив слов приезжать.
//
Функция Приезжать()
	
	Приезжать = Новый Массив;
	Приезжать.Добавить("приезжаю");
	Приезжать.Добавить("приезжаешь");
	Приезжать.Добавить("приезжает");
	Приезжать.Добавить("приезжаем");
	Приезжать.Добавить("приезжаете");
	Приезжать.Добавить("приезжают");
	Приезжать.Добавить("приезжай");
	Приезжать.Добавить("приезжайте");
	
	Возврат Приезжать;
	
КонецФункции

// Формирует массив слов прибыть.
//
// Возвращаемое значение:
//  Массив - массив слов прибыть.
//
Функция Прибыть()
	
	Прибыть = Новый Массив;
	Прибыть.Добавить("прибуду");
	Прибыть.Добавить("прибудешь");
	Прибыть.Добавить("прибудет");
	Прибыть.Добавить("прибудем");
	Прибыть.Добавить("прибудете");
	Прибыть.Добавить("прибудут");
	Прибыть.Добавить("прибудь");
	Прибыть.Добавить("прибудьте");
	
	Возврат Прибыть;
	
КонецФункции

// Формирует массив слов прибывать.
//
// Возвращаемое значение:
//  Массив - массив слов прибывать.
//
Функция Прибывать()
	
	Прибывать = Новый Массив;
	Прибывать.Добавить("прибываю");
	Прибывать.Добавить("прибываешь");
	Прибывать.Добавить("прибывает");
	Прибывать.Добавить("прибываем");
	Прибывать.Добавить("прибываете");
	Прибывать.Добавить("прибывают");
	Прибывать.Добавить("прибывай");
	Прибывать.Добавить("прибывайте");
	
	Возврат Прибывать;
	
КонецФункции

// Формирует массив слов прийти.
//
// Возвращаемое значение:
//  Массив - массив слов прийти.
//
Функция Прийти()
	
	Прийти = Новый Массив;
	Прийти.Добавить("приду");
	Прийти.Добавить("придешь");
	Прийти.Добавить("придет");
	Прийти.Добавить("придем");
	Прийти.Добавить("придете");
	Прийти.Добавить("придут");
	Прийти.Добавить("приди");
	Прийти.Добавить("придите");
	
	Возврат Прийти;
	
КонецФункции

// Формирует массив слов приходить.
//
// Возвращаемое значение:
//  Массив - массив слов приходить.
//
Функция Приходить()
	
	Приходить = Новый Массив;
	Приходить.Добавить("прихожу");
	Приходить.Добавить("приходишь");
	Приходить.Добавить("приходит");
	Приходить.Добавить("приходим");
	Приходить.Добавить("приходите");
	Приходить.Добавить("приходят");
	Приходить.Добавить("приходи");
	Приходить.Добавить("приходите");
	
	Возврат Приходить;
	
КонецФункции

// Формирует массив слов быть.
//
// Возвращаемое значение:
//  Массив - массив слов быть.
//
Функция Быть()
	
	Быть = Новый Массив;
	Быть.Добавить("буду");
	Быть.Добавить("будешь");
	Быть.Добавить("будет");
	Быть.Добавить("будем");
	Быть.Добавить("будете");
	Быть.Добавить("будут");
	Быть.Добавить("будь");
	Быть.Добавить("будьте");
	
	Возврат Быть;
	
КонецФункции

// Формирует массив слов заходить.
//
// Возвращаемое значение:
//  Массив - массив слов заходить.
//
Функция Заходить()
	
	Заходить = Новый Массив;
	Заходить.Добавить("захожу");
	Заходить.Добавить("заходишь");
	Заходить.Добавить("заходит");
	Заходить.Добавить("заходим");
	Заходить.Добавить("заходите");
	Заходить.Добавить("заходят");
	Заходить.Добавить("заходи");
	Заходить.Добавить("заходите");
	
	Возврат Заходить;
	
КонецФункции

// Формирует массив слов подходить.
//
// Возвращаемое значение:
//  Массив - массив слов подходить.
//
Функция Подходить()
	
	Подходить = Новый Массив;
	Подходить.Добавить("подхожу");
	Подходить.Добавить("подходишь");
	Подходить.Добавить("подходит");
	Подходить.Добавить("подходим");
	Подходить.Добавить("подходите");
	Подходить.Добавить("подходят");
	Подходить.Добавить("подходи");
	Подходить.Добавить("подходите");
	
	Возврат Подходить;
	
КонецФункции

// Формирует массив слов подойти.
//
// Возвращаемое значение:
//  Массив - массив слов подойти.
//
Функция Подойти()
	
	Подойти = Новый Массив;
	Подойти.Добавить("подойду");
	Подойти.Добавить("подойдешь");
	Подойти.Добавить("подойдет");
	Подойти.Добавить("подойдем");
	Подойти.Добавить("подойдете");
	Подойти.Добавить("подойдут");
	Подойти.Добавить("подойди");
	Подойти.Добавить("подойдите");
	
	Возврат Подойти;
	
КонецФункции

// Формирует массив слов зайти.
//
// Возвращаемое значение:
//  Массив - массив слов зайти.
//
Функция Зайти()
	
	Зайти = Новый Массив;
	Зайти.Добавить("зайду");
	Зайти.Добавить("зайдешь");
	Зайти.Добавить("зайдет");
	Зайти.Добавить("зайдем");
	Зайти.Добавить("зайдете");
	Зайти.Добавить("зайдут");
	Зайти.Добавить("зайди");
	Зайти.Добавить("зайдите");
	
	Возврат Зайти;
	
КонецФункции

// Формирует массив слов посетить.
//
// Возвращаемое значение:
//  Массив - массив слов посетить.
//
Функция Посетить()
	
	Посетить = Новый Массив;
	Посетить.Добавить("посещу");
	Посетить.Добавить("посетишь");
	Посетить.Добавить("посетит");
	Посетить.Добавить("посетим");
	Посетить.Добавить("посетите");
	Посетить.Добавить("посетят");
	Посетить.Добавить("посети");
	Посетить.Добавить("посетите");
	
	Возврат Посетить;
	
КонецФункции

// Формирует массив слов посещать.
//
// Возвращаемое значение:
//  Массив - массив слов посещать.
//
Функция Посещать()
	
	Посещать = Новый Массив;
	Посещать.Добавить("посещаю");
	Посещать.Добавить("посещаешь");
	Посещать.Добавить("посещает");
	Посещать.Добавить("посещаем");
	Посещать.Добавить("посещаете");
	Посещать.Добавить("посещают");
	Посещать.Добавить("посещай");
	Посещать.Добавить("посещайте");
	
	Возврат Посещать;
	
КонецФункции

// Формирует массив слов заглянуть.
//
// Возвращаемое значение:
//  Массив - массив слов заглянуть.
//
Функция Заглянуть()
	
	Заглянуть = Новый Массив;
	Заглянуть.Добавить("загляну");
	Заглянуть.Добавить("заглянешь");
	Заглянуть.Добавить("заглянет");
	Заглянуть.Добавить("заглянем");
	Заглянуть.Добавить("заглянете");
	Заглянуть.Добавить("заглянут");
	Заглянуть.Добавить("загляни");
	Заглянуть.Добавить("загляните");
	
	Возврат Заглянуть;
	
КонецФункции

// Формирует массив слов заглядывать.
//
// Возвращаемое значение:
//  Массив - массив слов заглядывать.
//
Функция Заглядывать()
	
	Заглядывать = Новый Массив;
	Заглядывать.Добавить("заглядываю");
	Заглядывать.Добавить("заглядываешь");
	Заглядывать.Добавить("заглядывает");
	Заглядывать.Добавить("заглядываем");
	Заглядывать.Добавить("заглядываете");
	Заглядывать.Добавить("заглядывают");
	Заглядывать.Добавить("заглядывай");
	Заглядывать.Добавить("заглядывайте");
	
	Возврат Заглядывать;
	
КонецФункции

// Формирует шаблон краткого времени. Например, "в 10".
//
// Возвращаемое значение:
//  Массив - шаблон краткого времени.
//
Функция ВремяКраткое()
	
	ВремяКраткое = Шаблон(
		ПредлогиВремени(),
		Часы());
	
	Возврат ВремяКраткое;
	
КонецФункции

// Формирует шаблон краткого времени строкой. Например, "в десять".
//
// Возвращаемое значение:
//  Массив - шаблон краткого времени строкой.
//
Функция ВремяКраткоеСтрокой()
	
	ВремяКраткоеСтрокой = Шаблон(
		ПредлогиВремени(),
		ЧасыСтроки());
	
	Возврат ВремяКраткоеСтрокой;
	
КонецФункции

// Формирует шаблон минут числом. Например, "5 минут".
//
// Возвращаемое значение:
//  Массив - шаблон минут числом.
//
Функция ВремяМинутыЧислом()
	
	ВремяМинутыЧислом = Шаблон(
		МинутыЧисла(),
		МинутПодпись());
	
	Возврат ВремяМинутыЧислом;
	
КонецФункции

// Формирует шаблон минут строкой. Например, "пять минут".
//
// Возвращаемое значение:
//  Массив - шаблон минут строкой.
//
Функция ВремяМинутыСтрокой()
	
	ВремяМинутыСтрокой = Шаблон(
		МинутыСтроки(),
		МинутПодпись());
	
	Возврат ВремяМинутыСтрокой;
	
КонецФункции

// Формирует шаблон без минут числом. Например, "без 5 минут".
//
// Возвращаемое значение:
//  Массив - шаблон без минут числом.
//
Функция ВремяБезМинутыЧислом()
	
	ВремяБезМинутыЧислом = Шаблон(
		Без(),
		ВремяМинутыЧислом());
	
	Возврат ВремяБезМинутыЧислом;
	
КонецФункции

// Формирует шаблон без минут строкой. Например, "без пяти минут".
//
// Возвращаемое значение:
//  Массив - шаблон без минут строкой.
//
Функция ВремяБезМинутыСтрокой()
	
	ВремяБезМинутыСтрокой = Шаблон(
		Без(),
		ВремяМинутыСтрокой());
	
	Возврат ВремяБезМинутыСтрокой;
	
КонецФункции

// Формирует шаблон в минут числом. Например, "в 5 минут".
//
// Возвращаемое значение:
//  Массив - шаблон в минут числом.
//
Функция ВремяВМинутыЧислом()
	
	ВремяВМинутыЧислом = Шаблон(
		В(),
		ВремяМинутыЧислом());
	
	Возврат ВремяВМинутыЧислом;
	
КонецФункции

// Формирует шаблон в минут строкой. Например, "в пять минут".
//
// Возвращаемое значение:
//  Массив - шаблон в минут строкой.
//
Функция ВремяВМинутыСтрокой()
	
	ВремяВМинутыСтрокой = Шаблон(
		В(),
		ВремяМинутыСтрокой());
	
	Возврат ВремяВМинутыСтрокой;
	
КонецФункции

// Формирует шаблон час краткий. Например, "7-го".
//
// Возвращаемое значение:
//  Массив - шаблон час краткий.
//
Функция ВремяЧасКраткое()
	
	ВремяЧасКраткое = Шаблон(
		Часы(),
		МеткиВремени(),
		ОкончанияПрилагательного());
	
	Возврат ВремяЧасКраткое;
	
КонецФункции

// Формирует шаблон полчаса. Например, "в половине".
//
// Возвращаемое значение:
//  Массив - шаблон полчаса.
//
Функция ВремяПолчаса()
	
	ВремяПолчаса = Шаблон(
		ПредлогиВремени(),
		ПоловинаСуществительное());
	
	Возврат ВремяПолчаса;
	
КонецФункции

// Формирует шаблон день месяц. Например, "03.07.".
//
// Возвращаемое значение:
//  Массив - шаблон день месяц.
//
Функция ДатаДеньМесяц()
	
	ДатаДеньМесяц = Шаблон(
		ДатаДни(),
		МеткиДаты(),
		ДатаМесяцы(),
		МеткиДаты());
	
	Возврат ДатаДеньМесяц;
	
КонецФункции

// Формирует шаблон день краткое. Например, "3-е".
//
// Возвращаемое значение:
//  Массив - шаблон день краткое.
//
Функция ДатаДеньКраткое()
	
	ДатаДеньКраткое = Шаблон(
		ДатаДни(),
		МеткиВремени(),
		ОкончанияПрилагательного());
	
	Возврат ДатаДеньКраткое;
	
КонецФункции

// Формирует шаблон улица номер. Например, "Русская 8".
//
// Возвращаемое значение:
//  Массив - шаблон улица номер.
//
Функция УлицаНомер(Текст)
	
	УлицаНомер = Шаблон(
		ТитульныйРегистр(Текст),
		Числа(Текст));
	
	Возврат УлицаНомер;
	
КонецФункции

// Формирует шаблон улица номер запятая. Например, "Русская, 8".
//
// Возвращаемое значение:
//  Массив - шаблон улица номер запятая.
//
Функция УлицаНомерЗапятая(Текст)
	
	УлицаНомерЗапятая = Шаблон(
		ТитульныйРегистр(Текст),
		Запятая(),
		Числа(Текст));
	
	Возврат УлицаНомерЗапятая;
	
КонецФункции

// Формирует шаблон адрес. Например, "адрес:".
//
// Возвращаемое значение:
//  Массив - шаблон адрес.
//
Функция АдресДвоеточие()
	
	АдресДвоеточие = Шаблон(
		Адрес(),
		Двоеточие());
	
	Возврат АдресДвоеточие;
	
КонецФункции

// Формирует шаблон время 1. Например, "10:00".
//
// Возвращаемое значение:
//  Массив - шаблон время 1.
//
Функция ШаблонВремя1()
	
	ШаблонВремя1 = Шаблон(
		Часы(),
		МеткиВремени(),
		Минуты());
	
	Возврат ШаблонВремя1;
	
КонецФункции

// Формирует шаблон время 2. Например, "в 10:00".
//
// Возвращаемое значение:
//  Массив - шаблон время 2.
//
Функция ШаблонВремя2()
	
	ШаблонВремя2 = Шаблон(
		ПредлогиВремени(),
		ШаблонВремя1());
	
	Возврат ШаблонВремя2;
	
КонецФункции

// Формирует шаблон время 3. Например, "10:00-12:00".
//
// Возвращаемое значение:
//  Массив - шаблон время 3.
//
Функция ШаблонВремя3()
	
	ШаблонВремя3 = Шаблон(
		ШаблонВремя1(),
		Тире(),
		ШаблонВремя1());
	
	Возврат ШаблонВремя3;
	
КонецФункции

// Формирует шаблон время 4. Например, "в 10:00 часов".
//
// Возвращаемое значение:
//  Массив - шаблон время 4.
//
Функция ШаблонВремя4()
	
	ШаблонВремя4 = Шаблон(
		ШаблонВремя2(),
		ЧасПодпись());
	
	Возврат ШаблонВремя4;
	
КонецФункции

// Формирует шаблон время 5. Например, "в 10 часов".
//
// Возвращаемое значение:
//  Массив - шаблон время 5.
//
Функция ШаблонВремя5()
	
	ШаблонВремя5 = Шаблон(
		ВремяКраткое(),
		ЧасПодпись());
	
	Возврат ШаблонВремя5;
	
КонецФункции

// Формирует шаблон время 6. Например, "с 12 до 16 часов".
//
// Возвращаемое значение:
//  Массив - шаблон время 6.
//
Функция ШаблонВремя6()
	
	ШаблонВремя6 = Шаблон(
		ВремяКраткое(),
		ШаблонВремя5());
	
	Возврат ШаблонВремя6;
	
КонецФункции

// Формирует шаблон время 7. Например, "в десять часов".
//
// Возвращаемое значение:
//  Массив - шаблон время 7.
//
Функция ШаблонВремя7()
	
	ШаблонВремя7 = Шаблон(
		ВремяКраткоеСтрокой(),
		ЧасПодпись());
	
	Возврат ШаблонВремя7;
	
КонецФункции

// Формирует шаблон время 8. Например, "во втором часу".
//
// Возвращаемое значение:
//  Массив - шаблон время 8.
//
Функция ШаблонВремя8()
	
	ШаблонВремя8 = Шаблон(
		ПредлогиВремени(),
		ЧасыПрилагательное(),
		ЧасПодпись());
	
	Возврат ШаблонВремя8;
	
КонецФункции

// Формирует шаблон время 9. Например, "без 5 минут 7".
//
// Возвращаемое значение:
//  Массив - шаблон время 9.
//
Функция ШаблонВремя9()
	
	ШаблонВремя9 = Шаблон(
		ВремяБезМинутыЧислом(),
		Часы());
	
	Возврат ШаблонВремя9;
	
КонецФункции

// Формирует шаблон время 10. Например, "без 5 минут семь".
//
// Возвращаемое значение:
//  Массив - шаблон время 10.
//
Функция ШаблонВремя10()
	
	ШаблонВремя10 = Шаблон(
		ВремяБезМинутыЧислом(),
		ЧасыСтроки());
	
	Возврат ШаблонВремя10;
	
КонецФункции

// Формирует шаблон время 11. Например, "без пяти минут 7".
//
// Возвращаемое значение:
//  Массив - шаблон время 11.
//
Функция ШаблонВремя11()
	
	ШаблонВремя11 = Шаблон(
		ВремяБезМинутыСтрокой(),
		Часы());
	
	Возврат ШаблонВремя11;
	
КонецФункции

// Формирует шаблон время 12. Например, "без пяти минут семь".
//
// Возвращаемое значение:
//  Массив - шаблон время 12.
//
Функция ШаблонВремя12()
	
	ШаблонВремя12 = Шаблон(
		ВремяБезМинутыСтрокой(),
		ЧасыСтроки());
	
	Возврат ШаблонВремя12;
	
КонецФункции

// Формирует шаблон время 13. Например, "в 5 минут седьмого".
//
// Возвращаемое значение:
//  Массив - шаблон время 13.
//
Функция ШаблонВремя13()
	
	ШаблонВремя13 = Шаблон(
		ВремяВМинутыЧислом(),
		ЧасыПрилагательное());
	
	Возврат ШаблонВремя13;
	
КонецФункции

// Формирует шаблон время 14. Например, "в пять минут седьмого".
//
// Возвращаемое значение:
//  Массив - шаблон время 14.
//
Функция ШаблонВремя14()
	
	ШаблонВремя14 = Шаблон(
		ВремяВМинутыСтрокой(),
		ЧасыПрилагательное());
	
	Возврат ШаблонВремя14;
	
КонецФункции

// Формирует шаблон время 15. Например, "в пять минут 7-го".
//
// Возвращаемое значение:
//  Массив - шаблон время 15.
//
Функция ШаблонВремя15()
	
	ШаблонВремя15 = Шаблон(
		ВремяМинутыСтрокой(),
		ВремяЧасКраткое());
	
	Возврат ШаблонВремя15;
	
КонецФункции

// Формирует шаблон время 16. Например, "в 5 минут 5-го".
//
// Возвращаемое значение:
//  Массив - шаблон время 16.
//
Функция ШаблонВремя16()
	
	ШаблонВремя16 = Шаблон(
		ВремяВМинутыЧислом(),
		ВремяЧасКраткое());
	
	Возврат ШаблонВремя16;
	
КонецФункции

// Формирует шаблон время 17. Например, "в 10 часов дня".
//
// Возвращаемое значение:
//  Массив - шаблон время 17.
//
Функция ШаблонВремя17()
	
	ШаблонВремя17 = Шаблон(
		ШаблонВремя5(),
		ВремяСуток());
	
	Возврат ШаблонВремя17;
	
КонецФункции

// Формирует шаблон время 18. Например, "в десять часов дня".
//
// Возвращаемое значение:
//  Массив - шаблон время 18.
//
Функция ШаблонВремя18()
	
	ШаблонВремя18 = Шаблон(
		ШаблонВремя7(),
		ВремяСуток());
	
	Возврат ШаблонВремя18;
	
КонецФункции

// Формирует шаблон время 19. Например, "в час".
//
// Возвращаемое значение:
//  Массив - шаблон время 19.
//
Функция ШаблонВремя19()
	
	ШаблонВремя19 = Шаблон(
		ПредлогиВремени(),
		ЧасПодпись());
	
	Возврат ШаблонВремя19;
	
КонецФункции

// Формирует шаблон время 20. Например, "в час дня".
//
// Возвращаемое значение:
//  Массив - шаблон время 20.
//
Функция ШаблонВремя20()
	
	ШаблонВремя20 = Шаблон(
		ШаблонВремя19(),
		ВремяСуток());
	
	Возврат ШаблонВремя20;
	
КонецФункции

// Формирует шаблон время 21. Например, "в половине первого".
//
// Возвращаемое значение:
//  Массив - шаблон время 21.
//
Функция ШаблонВремя21()
	
	ШаблонВремя21 = Шаблон(
		ВремяПолчаса(),
		ЧасыПрилагательное());
	
	Возврат ШаблонВремя21;
	
КонецФункции

// Формирует шаблон время 22. Например, "полпервого".
//
// Возвращаемое значение:
//  Массив - шаблон время 22.
//
Функция ШаблонВремя22()
	
	ШаблонВремя22 = Шаблон(
		ПолчасаПрилагательное());
	
	Возврат ШаблонВремя22;
	
КонецФункции

// Формирует шаблон время 23. Например, "через 5 минут".
//
// Возвращаемое значение:
//  Массив - шаблон время 23.
//
Функция ШаблонВремя23()
	
	ШаблонВремя23 = Шаблон(
		Через(),
		ВремяМинутыЧислом());
	
	Возврат ШаблонВремя23;
	
КонецФункции

// Формирует шаблон время 24. Например, "через пять минут".
//
// Возвращаемое значение:
//  Массив - шаблон время 24.
//
Функция ШаблонВремя24()
	
	ШаблонВремя24 = Шаблон(
		Через(),
		ВремяМинутыСтрокой());
	
	Возврат ШаблонВремя24;
	
КонецФункции

// Формирует шаблон время 25. Например, "через полчаса".
//
// Возвращаемое значение:
//  Массив - шаблон время 25.
//
Функция ШаблонВремя25()
	
	ШаблонВремя25 = Шаблон(
		Через(),
		Полчаса());
	
	Возврат ШаблонВремя25;
	
КонецФункции

// Формирует шаблон время 26. Например, "во второй половине дня".
//
// Возвращаемое значение:
//  Массив - шаблон время 26.
//
Функция ШаблонВремя26()
	
	ШаблонВремя26 = Шаблон(
		В(),
		ПоловинаПрилагательное(),
		ПоловинаСуществительное(),
		ИнтервалВремени());
	
	Возврат ШаблонВремя26;
	
КонецФункции

// Формирует шаблон время 27. Например, "с утра", "до обеда", "до вечера".
//
// Возвращаемое значение:
//  Массив - шаблон время 27.
//
Функция ШаблонВремя27()
	
	ШаблонВремя27 = Шаблон(
		ПредлогиВремени(),
		ВремяСутокЯвное());
	
	Возврат ШаблонВремя27;
	
КонецФункции

// Формирует шаблон время 28. Например, "с утра до вечера".
//
// Возвращаемое значение:
//  Массив - шаблон время 28.
//
Функция ШаблонВремя28()
	
	ШаблонВремя28 = Шаблон(
		ШаблонВремя27(),
		ШаблонВремя27());
	
	Возврат ШаблонВремя28;
	
КонецФункции

// Формирует шаблон время 29. Например, "с 12".
//
// Возвращаемое значение:
//  Массив - шаблон время 29.
//
Функция ШаблонВремя29()
	
	ШаблонВремя29 = Шаблон(
		ВремяКраткое());
	
	Возврат ШаблонВремя29;
	
КонецФункции

// Формирует шаблон время 30. Например, "с 12 до 13".
//
// Возвращаемое значение:
//  Массив - шаблон время 30.
//
Функция ШаблонВремя30()
	
	ШаблонВремя30 = Шаблон(
		ШаблонВремя29(),
		ШаблонВремя29());
	
	Возврат ШаблонВремя30;
	
КонецФункции

// Формирует шаблон время 31. Например, "с 11-00 до 20-00".
//
// Возвращаемое значение:
//  Массив - шаблон время 31.
//
Функция ШаблонВремя31()
	
	ШаблонВремя31 = Шаблон(
		ШаблонВремя2(),
		ШаблонВремя2());
	
	Возврат ШаблонВремя31;
	
КонецФункции

// Формирует шаблон время 32. Например, "без четверти 12".
//
// Возвращаемое значение:
//  Массив - шаблон время 32.
//
Функция ШаблонВремя32()
	
	ШаблонВремя32 = Шаблон(
		Без(),
		Четверть(),
		Часы());
	
	Возврат ШаблонВремя32;
	
КонецФункции

// Формирует шаблон время 33. Например, "без четверти двенадцать".
//
// Возвращаемое значение:
//  Массив - шаблон время 33.
//
Функция ШаблонВремя33()
	
	ШаблонВремя33 = Шаблон(
		Без(),
		Четверть(),
		ЧасыСтроки());
	
	Возврат ШаблонВремя33;
	
КонецФункции

// Формирует шаблон время 34. Например, "утром".
//
// Возвращаемое значение:
//  Массив - шаблон время 34.
//
Функция ШаблонВремя34()
	
	ШаблонВремя34 = Шаблон(
		ВремяСутокСамостоятельное());
	
	Возврат ШаблонВремя34;
	
КонецФункции

// Формирует шаблон дата 1. Например, "в понедельник".
//
// Возвращаемое значение:
//  Массив - шаблон дата 1.
//
Функция ШаблонДата1()
	
	ШаблонДата1 = Шаблон(
		ПредлогиВремени(),
		Дни());
	
	Возврат ШаблонДата1;
	
КонецФункции

// Формирует шаблон дата 2. Например, "в пн".
//
// Возвращаемое значение:
//  Массив - шаблон дата 2.
//
Функция ШаблонДата2()
	
	ШаблонДата2 = Шаблон(
		ПредлогиВремени(),
		ДниАббревиатуры());
	
	Возврат ШаблонДата2;
	
КонецФункции

// Формирует шаблон дата 3. Например, "03.07.2015".
//
// Возвращаемое значение:
//  Массив - шаблон дата 3.
//
Функция ШаблонДата3()
	
	ШаблонДата3 = Шаблон(
		ДатаДеньМесяц(),
		ДатаГоды());
	
	Возврат ШаблонДата3;
	
КонецФункции

// Формирует шаблон дата 4. Например, "03.07.15".
//
// Возвращаемое значение:
//  Массив - шаблон дата 4.
//
Функция ШаблонДата4()
	
	ШаблонДата4 = Шаблон(
		ДатаДеньМесяц(),
		ДатаГодыКраткие());
	
	Возврат ШаблонДата4;
	
КонецФункции

// Формирует шаблон дата 5. Например, "в марте".
//
// Возвращаемое значение:
//  Массив - шаблон дата 5.
//
Функция ШаблонДата5()
	
	ШаблонДата5 = Шаблон(
		ПредлогиВремени(),
		Месяцы());
	
	Возврат ШаблонДата5;
	
КонецФункции

// Формирует шаблон дата 6. Например, "3 марта".
//
// Возвращаемое значение:
//  Массив - шаблон дата 6.
//
Функция ШаблонДата6()
	
	ШаблонДата6 = Шаблон(
		ДатаДни(),
		Месяцы());
	
	Возврат ШаблонДата6;
	
КонецФункции

// Формирует шаблон дата 7. Например, "3-го марта".
//
// Возвращаемое значение:
//  Массив - шаблон дата 7.
//
Функция ШаблонДата7()
	
	ШаблонДата7 = Шаблон(
		ВремяЧасКраткое(),
		Месяцы());
	
	Возврат ШаблонДата7;
	
КонецФункции

// Формирует шаблон дата 8. Например, "третьего марта".
//
// Возвращаемое значение:
//  Массив - шаблон дата 8.
//
Функция ШаблонДата8()
	
	ШаблонДата8 = Шаблон(
		ДниПрилагательное(),
		Месяцы());
	
	Возврат ШаблонДата8;
	
КонецФункции

// Формирует шаблон дата 9. Например, "на третье марта".
//
// Возвращаемое значение:
//  Массив - шаблон дата 9.
//
Функция ШаблонДата9()
	
	ШаблонДата9 = Шаблон(
		На(),
		ДниПрилагательное(),
		Месяцы());
	
	Возврат ШаблонДата9;
	
КонецФункции

// Формирует шаблон дата 10. Например, "на 3-е марта".
//
// Возвращаемое значение:
//  Массив - шаблон дата 10.
//
Функция ШаблонДата10()
	
	ШаблонДата10 = Шаблон(
		На(),
		ДатаДеньКраткое(),
		Месяцы());
	
	Возврат ШаблонДата10;
	
КонецФункции

// Формирует шаблон дата 11. Например, "3 марта 2015".
//
// Возвращаемое значение:
//  Массив - шаблон дата 11.
//
Функция ШаблонДата11()
	
	ШаблонДата11 = Шаблон(
		ШаблонДата6(),
		ДатаГоды());
	
	Возврат ШаблонДата11;
	
КонецФункции

// Формирует шаблон дата 12. Например, "сегодня".
//
// Возвращаемое значение:
//  Массив - шаблон дата 12.
//
Функция ШаблонДата12()
	
	ШаблонДата12 = Шаблон(
		ДниАбстрактные());
	
	Возврат ШаблонДата12;
	
КонецФункции

// Формирует шаблон дата 13. Например, "через день".
//
// Возвращаемое значение:
//  Массив - шаблон дата 13.
//
Функция ШаблонДата13()
	
	ШаблонДата13 = Шаблон(
		Через(),
		ИнтервалВремени());
	
	Возврат ШаблонДата13;
	
КонецФункции

// Формирует шаблон дата 14. Например, "через 2 дня".
//
// Возвращаемое значение:
//  Массив - шаблон дата 14.
//
Функция ШаблонДата14()
	
	ШаблонДата14 = Шаблон(
		Через(),
		ДатаДни(),
		ИнтервалВремени());
	
	Возврат ШаблонДата14;
	
КонецФункции

// Формирует шаблон дата 15. Например, "через два дня".
//
// Возвращаемое значение:
//  Массив - шаблон дата 15.
//
Функция ШаблонДата15()
	
	ШаблонДата15 = Шаблон(
		Через(),
		ЧасыСтроки(),
		ИнтервалВремени());
	
	Возврат ШаблонДата15;
	
КонецФункции

// Формирует шаблон дата 16. Например, "через 2-3 дня".
//
// Возвращаемое значение:
//  Массив - шаблон дата 16.
//
Функция ШаблонДата16()
	
	ШаблонДата16 = Шаблон(
		Через(),
		ДатаДни(),
		Тире(),
		ДатаДни(),
		ИнтервалВремени());
	
	Возврат ШаблонДата16;
	
КонецФункции

// Формирует шаблон дата 17. Например, "на этой неделе".
//
// Возвращаемое значение:
//  Массив - шаблон дата 17.
//
Функция ШаблонДата17()
	
	ШаблонДата17 = Шаблон(
		На(),
		ИнтервалПрилагательное(),
		ИнтервалВремени());
	
	Возврат ШаблонДата17;
	
КонецФункции

// Формирует шаблон дата 18. Например, "в этом месяце".
//
// Возвращаемое значение:
//  Массив - шаблон дата 18.
//
Функция ШаблонДата18()
	
	ШаблонДата18 = Шаблон(
		В(),
		ИнтервалПрилагательное(),
		ИнтервалВремени());
	
	Возврат ШаблонДата18;
	
КонецФункции

// Формирует шаблон дата 19. Например, "03.07".
//
// Возвращаемое значение:
//  Массив - шаблон дата 19.
//
Функция ШаблонДата19()
	
	ШаблонДата19 = Шаблон(
		ДатаДни(),
		МеткиДаты(),
		ДатаМесяцы());
	
	Возврат ШаблонДата19;
	
КонецФункции

// Формирует шаблон дата 20. Например, "двадцать первое октября".
//
// Возвращаемое значение:
//  Массив - шаблон дата 20.
//
Функция ШаблонДата20()
	
	ШаблонДата20 = Шаблон(
		ДниДесятки(),
		ДниПрилагательное(),
		Месяцы());
	
	Возврат ШаблонДата20;
	
КонецФункции

// Формирует шаблон место 1. Например, "д. 8".
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 1.
//
Функция ШаблонМесто1(Текст)
	
	ШаблонМесто1 = Шаблон(
		АббревиатурыМеста(),
		Точка(),
		Числа(Текст));
	
	Возврат ШаблонМесто1;
	
КонецФункции

// Формирует шаблон место 2. Например, "д 8".
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 2.
//
Функция ШаблонМесто2(Текст)
	
	ШаблонМесто2 = Шаблон(
		АббревиатурыМеста(),
		Числа(Текст));
	
	Возврат ШаблонМесто2;
	
КонецФункции

// Формирует шаблон место 3. Например, "ул Русская".
//
// Параметры:
//  Текст - Строка - Обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 3.
//
Функция ШаблонМесто3(Текст)
	
	ШаблонМесто3 = Шаблон(
		АббревиатурыМеста(),
		ТитульныйРегистр(Текст));
	
	Возврат ШаблонМесто3;
	
КонецФункции

// Формирует шаблон место 4. Например, "ул. Русская".
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 4.
//
Функция ШаблонМесто4(Текст)
	
	ШаблонМесто4 = Шаблон(
		АббревиатурыМеста(),
		Точка(),
		ТитульныйРегистр(Текст));
	
	Возврат ШаблонМесто4;
	
КонецФункции

// Формирует шаблон место 5. Например, "ул Русская, 8".
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 5.
//
Функция ШаблонМесто5(Текст)
	
	ШаблонМесто5 = Шаблон(
		АббревиатурыМеста(),
		УлицаНомерЗапятая(Текст));
	
	Возврат ШаблонМесто5;
	
КонецФункции

// Формирует шаблон место 6. Например, "ул. Русская, 8".
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 6.
//
Функция ШаблонМесто6(Текст)
	
	ШаблонМесто6 = Шаблон(
		АббревиатурыМеста(),
		Точка(),
		УлицаНомерЗапятая(Текст));
	
	Возврат ШаблонМесто6;
	
КонецФункции

// Формирует шаблон место 7. Например, "ул Русская 8".
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 7.
//
Функция ШаблонМесто7(Текст)
	
	ШаблонМесто7 = Шаблон(
		АббревиатурыМеста(),
		УлицаНомер(Текст));
	
	Возврат ШаблонМесто7;
	
КонецФункции

// Формирует шаблон место 8. Например, "ул. Русская 8".
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 8.
//
Функция ШаблонМесто8(Текст)
	
	ШаблонМесто8 = Шаблон(
		АббревиатурыМеста(),
		Точка(),
		УлицаНомер(Текст));
	
	Возврат ШаблонМесто8;
	
КонецФункции

// Формирует шаблон место 9. Например, "Русская 8-101".
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 9.
//
Функция ШаблонМесто9(Текст)
	
	ШаблонМесто9 = Шаблон(
		ТитульныйРегистр(Текст),
		Числа(Текст),
		Тире(),
		Числа(Текст));
	
	Возврат ШаблонМесто9;
	
КонецФункции

// Формирует шаблон место 10. Например, "по адресу Русская 8".
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 10.
//
Функция ШаблонМесто10(Текст)
	
	ШаблонМесто10 = Шаблон(
		Адрес(),
		УлицаНомер(Текст));
	
	Возврат ШаблонМесто10;
	
КонецФункции

// Формирует шаблон место 11. Например, "по адресу Русская, 8".
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 11.
//
Функция ШаблонМесто11(Текст)
	
	ШаблонМесто11 = Шаблон(
		Адрес(),
		УлицаНомерЗапятая(Текст));
	
	Возврат ШаблонМесто11;
	
КонецФункции

// Формирует шаблон место 12. Например, "по адресу: Русская 8".
//
// Параметры:
//  Текст - Строка - Обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 12.
//
Функция ШаблонМесто12(Текст)
	
	ШаблонМесто12 = Шаблон(
		АдресДвоеточие(),
		УлицаНомер(Текст));
	
	Возврат ШаблонМесто12;
	
КонецФункции

// Формирует шаблон место 13. Например, "по адресу: Русская, 8".
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 13.
//
Функция ШаблонМесто13(Текст)
	
	ШаблонМесто13 = Шаблон(
		АдресДвоеточие(),
		УлицаНомерЗапятая(Текст));
	
	Возврат ШаблонМесто13;
	
КонецФункции

// Формирует шаблон место 14. Например, "адрес: Челябинск".
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 14.
//
Функция ШаблонМесто14(Текст)
	
	ШаблонМесто14 = Шаблон(
		АдресДвоеточие(),
		ТитульныйРегистр(Текст));
	
	Возврат ШаблонМесто14;
	
КонецФункции

// Формирует шаблон место 15. Например, "Русская ул".
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблон место 15.
//
Функция ШаблонМесто15(Текст)
	
	ШаблонМесто15 = Шаблон(
		ТитульныйРегистр(Текст),
		АббревиатурыМеста());
	
	Возврат ШаблонМесто15;
	
КонецФункции

// Формирует шаблон мероприятие 1. Например, "встретимся".
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 1.
//
Функция ШаблонМероприятие1()
	
	ШаблонМероприятие1 = Шаблон(
		Встретимся());
	
	Возврат ШаблонМероприятие1;
	
КонецФункции

// Формирует шаблон мероприятие 2. Например, "встреча".
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 2.
//
Функция ШаблонМероприятие2()
	
	ШаблонМероприятие2 = Шаблон(
		Встреча());
	
	Возврат ШаблонМероприятие2;
	
КонецФункции

// Формирует шаблон мероприятие 3. Например, "ждем вас".
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 3.
//
Функция ШаблонМероприятие3()
	
	ШаблонМероприятие3 = Шаблон(
		Ждем(),
		Вы());
	
	Возврат ШаблонМероприятие3;
	
КонецФункции

// Формирует шаблон мероприятие 4. Например, "сможете ли вы".
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 4.
//
Функция ШаблонМероприятие4()
	
	ШаблонМероприятие4 = Шаблон(
		Сможете(),
		Ли(),
		Вы());
	
	Возврат ШаблонМероприятие4;
	
КонецФункции

// Формирует шаблон мероприятие 5. Например, "вы сможете".
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 5.
//
Функция ШаблонМероприятие5()
	
	ШаблонМероприятие5 = Шаблон(
		Вы(),
		Сможете());
	
	Возврат ШаблонМероприятие5;
	
КонецФункции

// Формирует шаблон мероприятие 6. Например, "скайп".
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 6.
//
Функция ШаблонМероприятие6()
	
	ШаблонМероприятие6 = Шаблон(
		Инструмент());
	
	Возврат ШаблонМероприятие6;
	
КонецФункции

// Формирует шаблон мероприятие 7. Например, "давайте".
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 7.
//
Функция ШаблонМероприятие7()
	
	ШаблонМероприятие7 = Шаблон(
		Давайте());
	
	Возврат ШаблонМероприятие7;
	
КонецФункции

// Формирует шаблон мероприятие 8. Например, "проводятся".
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 8.
//
Функция ШаблонМероприятие8()
	
	ШаблонМероприятие8 = Шаблон(
		Проводятся());
	
	Возврат ШаблонМероприятие8;
	
КонецФункции

// Формирует шаблон мероприятие 9. Например, "окончание".
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 9.
//
Функция ШаблонМероприятие9()
	
	ШаблонМероприятие9 = Шаблон(
		Окончание());
	
	Возврат ШаблонМероприятие9;
	
КонецФункции

// Формирует шаблон мероприятие 10.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 10.
//
Функция ШаблонМероприятие10()
	
	ШаблонМероприятие10 = Шаблон(
		Приехать());
	
	Возврат ШаблонМероприятие10;
	
КонецФункции

// Формирует шаблон мероприятие 11.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 11.
//
Функция ШаблонМероприятие11()
	
	ШаблонМероприятие11 = Шаблон(
		Приезжать());
	
	Возврат ШаблонМероприятие11;
	
КонецФункции

// Формирует шаблон мероприятие 12.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 12.
//
Функция ШаблонМероприятие12()
	
	ШаблонМероприятие12 = Шаблон(
		Прибыть());
	
	Возврат ШаблонМероприятие12;
	
КонецФункции

// Формирует шаблон мероприятие 13.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 13.
//
Функция ШаблонМероприятие13()
	
	ШаблонМероприятие13 = Шаблон(
		Прийти());
	
	Возврат ШаблонМероприятие13;
	
КонецФункции

// Формирует шаблон мероприятие 14.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 14.
//
Функция ШаблонМероприятие14()
	
	ШаблонМероприятие14 = Шаблон(
		Прибывать());
	
	Возврат ШаблонМероприятие14;
	
КонецФункции

// Формирует шаблон мероприятие 15.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 15.
//
Функция ШаблонМероприятие15()
	
	ШаблонМероприятие15 = Шаблон(
		Быть());
	
	Возврат ШаблонМероприятие15;
	
КонецФункции

// Формирует шаблон мероприятие 16.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 16.
//
Функция ШаблонМероприятие16()
	
	ШаблонМероприятие16 = Шаблон(
		Приходить());
	
	Возврат ШаблонМероприятие16;
	
КонецФункции

// Формирует шаблон мероприятие 17.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 17.
//
Функция ШаблонМероприятие17()
	
	ШаблонМероприятие17 = Шаблон(
		Заходить());
	
	Возврат ШаблонМероприятие17;
	
КонецФункции

// Формирует шаблон мероприятие 18.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 18.
//
Функция ШаблонМероприятие18()
	
	ШаблонМероприятие18 = Шаблон(
		Подходить());
	
	Возврат ШаблонМероприятие18;
	
КонецФункции

// Формирует шаблон мероприятие 19.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 19.
//
Функция ШаблонМероприятие19()
	
	ШаблонМероприятие19 = Шаблон(
		Подойти());
	
	Возврат ШаблонМероприятие19;
	
КонецФункции

// Формирует шаблон мероприятие 20.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 20.
//
Функция ШаблонМероприятие20()
	
	ШаблонМероприятие20 = Шаблон(
		Зайти());
	
	Возврат ШаблонМероприятие20;
	
КонецФункции

// Формирует шаблон мероприятие 21.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 21.
//
Функция ШаблонМероприятие21()
	
	ШаблонМероприятие21 = Шаблон(
		Посетить());
	
	Возврат ШаблонМероприятие21;
	
КонецФункции

// Формирует шаблон мероприятие 22.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 22.
//
Функция ШаблонМероприятие22()
	
	ШаблонМероприятие22 = Шаблон(
		Посещать());
	
	Возврат ШаблонМероприятие22;
	
КонецФункции

// Формирует шаблон мероприятие 23.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 23.
//
Функция ШаблонМероприятие23()
	
	ШаблонМероприятие23 = Шаблон(
		Заглянуть());
	
	Возврат ШаблонМероприятие23;
	
КонецФункции

// Формирует шаблон мероприятие 24.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 24.
//
Функция ШаблонМероприятие24()
	
	ШаблонМероприятие24 = Шаблон(
		Заглядывать());
	
	Возврат ШаблонМероприятие24;
	
КонецФункции

// Формирует шаблон мероприятие 25.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 25.
//
Функция ШаблонМероприятие25()
	
	ШаблонМероприятие25 = Шаблон(
		Прием());
	
	Возврат ШаблонМероприятие25;
	
КонецФункции

// Формирует шаблон мероприятие 26.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 26.
//
Функция ШаблонМероприятие26()
	
	ШаблонМероприятие26 = Шаблон(
		Решить());
	
	Возврат ШаблонМероприятие26;
	
КонецФункции

// Формирует шаблон мероприятие 27.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 27.
//
Функция ШаблонМероприятие27()
	
	ШаблонМероприятие27 = Шаблон(
		Договориться());
	
	Возврат ШаблонМероприятие27;
	
КонецФункции

// Формирует шаблон мероприятие 28.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 28.
//
Функция ШаблонМероприятие28()
	
	ШаблонМероприятие28 = Шаблон(
		Напомнить());
	
	Возврат ШаблонМероприятие28;
	
КонецФункции

// Формирует шаблон мероприятие 29.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 29.
//
Функция ШаблонМероприятие29()
	
	ШаблонМероприятие29 = Шаблон(
		Напоминать());
	
	Возврат ШаблонМероприятие29;
	
КонецФункции

// Формирует шаблон мероприятие 30.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 30.
//
Функция ШаблонМероприятие30()
	
	ШаблонМероприятие30 = Шаблон(
		СловоСообщить());
	
	Возврат ШаблонМероприятие30;
	
КонецФункции

// Формирует шаблон мероприятие 31.
//
// Возвращаемое значение:
//  Массив - шаблон мероприятие 31.
//
Функция ШаблонМероприятие31()
	
	ШаблонМероприятие31 = Шаблон(
		КлючевыеСловаМероприятия());
	
	Возврат ШаблонМероприятие31;
	
КонецФункции

// Формирует шаблоны времени.
//
// Возвращаемое значение:
//  Массив - шаблоны времени.
//
Функция ШаблоныВремени()
	
	Если ШаблоныВремени = Неопределено Тогда
		ШаблоныВремени = Новый Массив;
		ШаблоныВремени.Добавить(ШаблонВремя1()); // "10:00"
		ШаблоныВремени.Добавить(ШаблонВремя2()); // "в 10:00"
		ШаблоныВремени.Добавить(ШаблонВремя3()); // "10:00-12:00"
		ШаблоныВремени.Добавить(ШаблонВремя4()); // "в 10:00 часов"
		ШаблоныВремени.Добавить(ШаблонВремя5()); // "в 10 часов"
		ШаблоныВремени.Добавить(ШаблонВремя6()); // "с 12 до 16 часов"
		ШаблоныВремени.Добавить(ШаблонВремя7()); // "в десять часов"
		ШаблоныВремени.Добавить(ШаблонВремя8()); // "во втором часу"
		ШаблоныВремени.Добавить(ШаблонВремя9()); // "без 5 минут 7"
		ШаблоныВремени.Добавить(ШаблонВремя10()); // "без 5 минут семь"
		ШаблоныВремени.Добавить(ШаблонВремя11()); // "без пяти минут 7"
		ШаблоныВремени.Добавить(ШаблонВремя12()); // "без пяти минут семь"
		ШаблоныВремени.Добавить(ШаблонВремя13()); // "в 5 минут седьмого"
		ШаблоныВремени.Добавить(ШаблонВремя14()); // "в пять минут седьмого"
		ШаблоныВремени.Добавить(ШаблонВремя15()); // "в пять минут 7-го"
		ШаблоныВремени.Добавить(ШаблонВремя16()); // "в 5 минут 5-го"
		ШаблоныВремени.Добавить(ШаблонВремя17()); // "в 10 часов дня"
		ШаблоныВремени.Добавить(ШаблонВремя18()); // "в десять часов дня"
		ШаблоныВремени.Добавить(ШаблонВремя19()); // "в час"
		ШаблоныВремени.Добавить(ШаблонВремя20()); // "в час дня"
		ШаблоныВремени.Добавить(ШаблонВремя21()); // "в половине первого"
		ШаблоныВремени.Добавить(ШаблонВремя22()); // "полпервого"
		ШаблоныВремени.Добавить(ШаблонВремя23()); // "через 5 минут"
		ШаблоныВремени.Добавить(ШаблонВремя24()); // "через пять минут"
		ШаблоныВремени.Добавить(ШаблонВремя25()); // "через полчаса"
		ШаблоныВремени.Добавить(ШаблонВремя26()); // "во второй половине дня"
		ШаблоныВремени.Добавить(ШаблонВремя27()); // "с утра", "до обеда", "до вечера"
		ШаблоныВремени.Добавить(ШаблонВремя28()); // "с утра до вечера"
		ШаблоныВремени.Добавить(ШаблонВремя29()); // "с 12"
		ШаблоныВремени.Добавить(ШаблонВремя30()); // "с 12 до 13"
		ШаблоныВремени.Добавить(ШаблонВремя31()); // "с 11-00 до 20-00"
		ШаблоныВремени.Добавить(ШаблонВремя32()); // "без четверти 12"
		ШаблоныВремени.Добавить(ШаблонВремя33()); // "без четверти двенадцать"
		ШаблоныВремени.Добавить(ШаблонВремя34()); // "утром"
	КонецЕсли;
	
	Возврат ШаблоныВремени;
	
КонецФункции

// Формирует шаблоны даты.
//
// Возвращаемое значение:
//  Массив - шаблоны даты.
//
Функция ШаблоныДаты()
	
	Если ШаблоныДаты = Неопределено Тогда
		ШаблоныДаты = Новый Массив;
		ШаблоныДаты.Добавить(ШаблонДата1()); // "в понедельник"
		ШаблоныДаты.Добавить(ШаблонДата2()); // "в пн"
		ШаблоныДаты.Добавить(ШаблонДата3()); // "03.07.2015"
		ШаблоныДаты.Добавить(ШаблонДата4()); // "03.07.15"
		ШаблоныДаты.Добавить(ШаблонДата5()); // "в марте"
		ШаблоныДаты.Добавить(ШаблонДата6()); // "3 марта"
		ШаблоныДаты.Добавить(ШаблонДата7()); // "3-го марта"
		ШаблоныДаты.Добавить(ШаблонДата8()); // "третьего марта"
		ШаблоныДаты.Добавить(ШаблонДата9()); // "на третье марта"
		ШаблоныДаты.Добавить(ШаблонДата10()); // "на 3-е марта"
		ШаблоныДаты.Добавить(ШаблонДата11()); // "3 марта 2015"
		ШаблоныДаты.Добавить(ШаблонДата12()); // "сегодня"
		ШаблоныДаты.Добавить(ШаблонДата13()); // "через день"
		ШаблоныДаты.Добавить(ШаблонДата14()); // "через 2 дня"
		ШаблоныДаты.Добавить(ШаблонДата15()); // "через два дня"
		ШаблоныДаты.Добавить(ШаблонДата16()); // "через 2-3 дня"
		ШаблоныДаты.Добавить(ШаблонДата17()); // "на этой неделе"
		ШаблоныДаты.Добавить(ШаблонДата18()); // "в этом месяце"
		ШаблоныДаты.Добавить(ШаблонДата19()); // "03.07"
		ШаблоныДаты.Добавить(ШаблонДата20()); // "двадцать первое октября"
	КонецЕсли;
	
	Возврат ШаблоныДаты;
	
КонецФункции

// Формирует шаблоны места.
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - шаблоны места.
//
Функция ШаблоныМеста(Текст)
	
	Если ШаблоныМеста = Неопределено Тогда
		ШаблоныМеста = Новый Массив;
		ШаблоныМеста.Добавить(ШаблонМесто1(Текст)); // "д. 8"
		ШаблоныМеста.Добавить(ШаблонМесто2(Текст)); // "д 8"
		ШаблоныМеста.Добавить(ШаблонМесто3(Текст)); // "ул Русская"
		ШаблоныМеста.Добавить(ШаблонМесто4(Текст)); // "ул. Русская"
		ШаблоныМеста.Добавить(ШаблонМесто5(Текст)); // "ул Русская, 8"
		ШаблоныМеста.Добавить(ШаблонМесто6(Текст)); // "ул. Русская, 8"
		ШаблоныМеста.Добавить(ШаблонМесто7(Текст)); // "ул Русская 8"
		ШаблоныМеста.Добавить(ШаблонМесто8(Текст)); // "ул. Русская 8"
		ШаблоныМеста.Добавить(ШаблонМесто9(Текст)); // "Русская 8-101"
		ШаблоныМеста.Добавить(ШаблонМесто10(Текст)); // "по адресу Русская 8"
		ШаблоныМеста.Добавить(ШаблонМесто11(Текст)); // "по адресу Русская, 8"
		ШаблоныМеста.Добавить(ШаблонМесто12(Текст)); // "по адресу: Русская 8"
		ШаблоныМеста.Добавить(ШаблонМесто13(Текст)); // "по адресу: Русская, 8"
		ШаблоныМеста.Добавить(ШаблонМесто14(Текст)); // "адрес: Челябинск"
		ШаблоныМеста.Добавить(ШаблонМесто15(Текст)); // "Русская ул"
	КонецЕсли;
	
	Возврат ШаблоныМеста;
	
КонецФункции

// Формирует шаблоны мероприятия.
//
// Возвращаемое значение:
//  Массив - шаблоны мероприятия.
//
Функция ШаблоныМероприятия()
	
	Если ШаблоныМероприятия = Неопределено Тогда
		ШаблоныМероприятия = Новый Массив;
		ШаблоныМероприятия.Добавить(ШаблонМероприятие1());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие2());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие3());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие4());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие5());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие6());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие7());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие8());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие9());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие10());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие11());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие12());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие13());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие14());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие15());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие16());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие17());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие18());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие19());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие20());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие21());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие22());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие23());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие24());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие25());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие26());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие27());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие28());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие29());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие30());
		ШаблоныМероприятия.Добавить(ШаблонМероприятие31());
	КонецЕсли;
	
	Возврат ШаблоныМероприятия;
	
КонецФункции

// Формирует список аббревиатур с точкой на конце.
//
// Возвращаемое значение:
//  Соответствие - список аббревиатур с точкой на конце.
//
Функция Аббревиатуры()
	
	Аббревиатуры = Новый Соответствие;
	
	Аббревиатуры.Вставить("г.", "город");
	Аббревиатуры.Вставить("к.", "комната");
	Аббревиатуры.Вставить("ул.", "улица");
	Аббревиатуры.Вставить("п.", "проспект");
	Аббревиатуры.Вставить("просп.", "проспект");
	Аббревиатуры.Вставить("м.", "метро");
	Аббревиатуры.Вставить("ст.", "станция");
	Аббревиатуры.Вставить("корп.", "корпус");
	Аббревиатуры.Вставить("ост.", "остановка");
	Аббревиатуры.Вставить("о.", "офис");
	Аббревиатуры.Вставить("кв.", "квартира");
	Аббревиатуры.Вставить("д.", "дом");
	Аббревиатуры.Вставить("б.", "бульвар");
	Аббревиатуры.Вставить("пн.", "понедельник");
	Аббревиатуры.Вставить("вт.", "вторник");
	Аббревиатуры.Вставить("ср.", "среда");
	Аббревиатуры.Вставить("чт.", "четверг");
	Аббревиатуры.Вставить("пт.", "пятница");
	Аббревиатуры.Вставить("сб.", "суббота");
	Аббревиатуры.Вставить("вс.", "воскресенье");
	Аббревиатуры.Вставить("суб.", "суббота");
	Аббревиатуры.Вставить("вскр.", "воскресенье");
	Аббревиатуры.Вставить("ш.", "шоссе");
	Аббревиатуры.Вставить("пер.", "переулок");
	
	Возврат Аббревиатуры;
	
КонецФункции

// Формирует список символов-индикаторов конца.
//
// Возвращаемое значение:
//  Массив - список символов-индикаторов конца.
//
Функция ИндикаторыКонца()
	
	ИндикаторыКонца = Новый Массив;
	
	ИндикаторыКонца.Добавить(".");
	ИндикаторыКонца.Добавить("!");
	ИндикаторыКонца.Добавить("?");
	
	Возврат ИндикаторыКонца;
	
КонецФункции

// Формирует список символов, которые могут сопутствовать символам-индикаторам конца предложения.
//
// Возвращаемое значение:
//  Массив - список символов, которые могут сопутствовать символам-индикаторам конца предложения.
//
Функция Обертки()
	
	Обертки = Новый Массив;
	
	Обертки.Добавить("""");
	Обертки.Добавить("'");
	Обертки.Добавить(")");
	Обертки.Добавить("]");
	Обертки.Добавить("}");
	
	Возврат Обертки;
	
КонецФункции

// Формирует список пунктуационных знаков.
//
// Возвращаемое значение:
//  Массив - список пунктуационных знаков.
//
Функция ЗнакиПунктуации()
	
	ЗнакиПунктуации = Новый Массив;
	
	ЗнакиПунктуации.Добавить(".");
	ЗнакиПунктуации.Добавить("!");
	ЗнакиПунктуации.Добавить("?");
	ЗнакиПунктуации.Добавить(":");
	ЗнакиПунктуации.Добавить(",");
	ЗнакиПунктуации.Добавить(";");
	ЗнакиПунктуации.Добавить(Символ(45));
	ЗнакиПунктуации.Добавить(Символ(8211));
	ЗнакиПунктуации.Добавить(Символ(8212));
	ЗнакиПунктуации.Добавить("(");
	ЗнакиПунктуации.Добавить(")");
	
	Возврат ЗнакиПунктуации;
	
КонецФункции

// Формирует список символов, не являющихся токенами.
//
// Возвращаемое значение:
//  Массив - список символов, не являющихся токенами.
//
Функция НеТокены()
	
	НеТокены = Новый Массив;
	
	НеТокены.Добавить(" ");
	НеТокены.Добавить(Символы.ПС);
	
	Возврат НеТокены;
	
КонецФункции

// Возвращает символ на указанной позиции.
//
// Параметры:
//  Строка - Строка - строка, из которой необходимо получить символ.
//  Индекс - Число - позиция, на которой необходим получить символ.
//
// Возвращаемое значение:
//  Строка - символ на указанной позиции.
//
Функция СимволСтроки(Строка, Индекс)
	
	Возврат Символ(КодСимвола(Строка, Индекс + 1))
	
КонецФункции

// Проверяет является ли переданная строка числом.
//
// Параметры:
//  Строка - Строка - проверяемая строка.
//
// Возвращаемое значение:
//  Булево - признак того что строка является числом.
//
Функция ЭтоЧисло(Строка)
	
	Возврат СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Строка);
	
КонецФункции

// Проверяет является ли переданная строка словом.
//
// Параметры:
//  Строка - Строка - проверяемая строка.
//
// Возвращаемое значение:
//  Булево - признак того что строка является словом.
//
Функция ЭтоСлово(Строка)
	
	Если СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Строка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Строка);
	
КонецФункции

// Формирует базовую аннотацию.
// Аннотация представляет собой часть текста, описанную начальным индексом, конечным индексом и именем.
//
// Возвращаемое значение:
//  Структура - агрегатная нотация.
//   * Начало - Число - начальный индекс, который определяет первый покрытый символ текста.
//   * Конец - Число - конечный индекс, который определяет последний покрытый символ текста.
//   * Данные - Строка - покрытый текст.
//   * Имя - Строка - имя аннотации.
//
Функция БазоваяАннотация(Данные)
	
	БазоваяАннотация = Аннотация();
	БазоваяАннотация.Вставить("Данные", Данные);
	
	Возврат БазоваяАннотация;
	
КонецФункции

// Формирует агрегатную аннотацию.
// Агрегатная аннотация представляет собой совокупность вспомогательных аннотаций.
//
// Возвращаемое значение:
//  Структура - агрегатная аннотация.
//   * Начало - Число - начальный индекс, который определяет первый покрытый символ текста.
//   * Конец - Число - конечный индекс, который определяет последний покрытый символ текста.
//   * Имя - Строка - имя аннотации.
//   * Аннотации - Соответствие - словарь внутренних аннотаций.
//
Функция АгрегатнаяАннотация(Аннотации, Данные)
	
	АгрегатнаяАннотация = Аннотация();
	АгрегатнаяАннотация.Вставить("Аннотации", Аннотации);
	АгрегатнаяАннотация.Вставить("Данные", Данные);
	
	Возврат АгрегатнаяАннотация;
	
КонецФункции

// Возвращает список упрощенных базовых аннотаций.
//
// Параметры:
//  Аннотации - Массив - проверяемые аннотации.
//
// Возвращаемое значение:
//  Массив - упрощенные аннотации.
//
Функция УпроститьБазовыеАннотации(Аннотации)
	
	ТекущиеНовыеАннотации = Новый Массив;
	НовыеАннотации = Новый Массив;
	СортироватьАннотации(Аннотации);
	
	Для Счетчик = 0 По Аннотации.Количество() - 2 Цикл
		ПерваяАннотация = Аннотации[Счетчик];
		ВтораяАннотация = Аннотации[Счетчик + 1];
		Если ПерваяАннотация.Имя = ВтораяАннотация.Имя Тогда
			РазмерРазделителя = ВтораяАннотация.Начало - ПерваяАннотация.Конец - 1;
			Если РазмерРазделителя < 0 Тогда
				ИсправленнаяАннотация = ПоправитьПересекающиесяАннотации(ПерваяАннотация, ВтораяАннотация);
				Если ТекущиеНовыеАннотации.Найти(ИсправленнаяАннотация) = Неопределено Тогда
					ТекущиеНовыеАннотации.Добавить(ИсправленнаяАннотация);
				КонецЕсли;
				
			ИначеЕсли 0 < РазмерРазделителя И РазмерРазделителя <= РазрешенныйРазмерРазделителя() Тогда
				ИсправленнаяАннотация = СоединитьБазовыеАннотации(ПерваяАннотация, ВтораяАннотация, РазмерРазделителя);
				Если ТекущиеНовыеАннотации.Найти(ИсправленнаяАннотация) = Неопределено Тогда
					ТекущиеНовыеАннотации.Добавить(ИсправленнаяАннотация);
				КонецЕсли;
				
			КонецЕсли;
			
			НовыеАннотации = УпроститьБазовыеАннотации(ТекущиеНовыеАннотации);
			
		КонецЕсли;
	КонецЦикла;
	
	Если НовыеАннотации.Количество() = 0 Тогда
		Возврат Аннотации;
	КонецЕсли;
	
	Возврат НовыеАннотации;
	
КонецФункции

// Соединяет две базовые аннотации.
//
// Параметры:
//  ПерваяАннотация		 - Структура	 - первая аннотация для объединения.
//  ВтораяАннотация		 - Структура	 - вторая аннотация для объединения.
//  РазмерРазделителя	 - Число	 - размер разделителя между аннотациями.
// 
// Возвращаемое значение:
//  Структура -соединение аннотаций.
//
Функция СоединитьБазовыеАннотации(ПерваяАннотация, ВтораяАннотация, РазмерРазделителя)
	
	Строки = Новый Массив;
	Строки.Добавить(ПерваяАннотация.Данные);
	Для Счетчик = 0 По РазмерРазделителя Цикл
		Строки.Добавить(" ");
	КонецЦикла;
	Строки.Добавить(ВтораяАннотация.Данные);
	
	Аннотация = БазоваяАннотация(СтрСоединить(Строки));
	Аннотация.Начало = ПерваяАннотация.Начало;
	Аннотация.Конец = ВтораяАннотация.Конец;
	Аннотация.Имя = ПерваяАннотация.Имя;
	
	Возврат Аннотация;
	
КонецФункции

// Возвращает токены из исходного текста.
//
// Параметры:
//  Текст - Строка - обрабатываемый текст.
//
// Возвращаемое значение:
//  Массив - токены исходного текста.
//
Функция ПолучитьТокены(Текст)
	
	Токены = Токенизация(Текст);
	
	Возврат Токены;
	
КонецФункции

// Создает агрегатную аннотацию типа "мероприятие" с атрибутами "место" и "время".
//
// Параметры:
//  Токены - Массив - токены обрабатываемого текста.
//
// Возвращаемое значение:
//  Массив - агрегатную аннотацию типа "мероприятие".
//
Функция СоздатьАгрегатнуюАннотацию(Предложение, Текст)
	
	ТокеныПредложения = ПолучитьТокеныПредложения(Предложение, Текст);
	
	// Дата и время
	АннотацииВремени = СоздатьБазовыеАннотации(
		ТокеныПредложения,
		ШаблоныВремени(),
		"время",
		Ложь);
	АннотацииДаты = СоздатьБазовыеАннотации(
		ТокеныПредложения,
		ШаблоныДаты(),
		"дата",
		Ложь);
	РазрешитьНеоднозначностьАннотаций(АннотацииВремени, АннотацииДаты);
	АннотацииВремени = УпроститьБазовыеАннотации(АннотацииВремени);
	АннотацииДаты = УпроститьБазовыеАннотации(АннотацииДаты);
	
	// Место
	АннотацииМеста = СоздатьБазовыеАннотации(
		ТокеныПредложения,
		ШаблоныМеста(Текст),
		"место");
	
	// Мероприятие
	АннотацииМероприятий = СоздатьБазовыеАннотации(
		ТокеныПредложения,
		ШаблоныМероприятия(),
		"мероприятие");
	
	
	АннотацияСловарь = Новый Соответствие; // Имена базовых аннотаций - Их значения
	АннотацияИмя = ""; // Имя агрегатной аннотации
	
	Если АннотацииВремени.Количество() <> 0 И АннотацииДаты.Количество() <> 0 И АннотацииМеста.Количество() <> 0 Тогда
		АннотацияСловарь.Вставить("Время", АннотацииВремени);
		АннотацияСловарь.Вставить("Дата", АннотацииДаты);
		АннотацияСловарь.Вставить("Место", АннотацииМеста);
		АннотацияИмя = "Мероприятие";
		
	ИначеЕсли АннотацииВремени.Количество() <> 0 И АннотацииМеста.Количество() <> 0 Тогда
		АннотацияСловарь.Вставить("Время", АннотацииВремени);
		АннотацияСловарь.Вставить("Место", АннотацииМеста);
		АннотацияИмя = "Мероприятие";
		
	ИначеЕсли АннотацииДаты.Количество() <> 0 И АннотацииМеста.Количество() <> 0 Тогда
		АннотацияСловарь.Вставить("Дата", АннотацииДаты);
		АннотацияСловарь.Вставить("Место", АннотацииМеста);
		АннотацияИмя = "Мероприятие";
		
	ИначеЕсли АннотацииМероприятий.Количество() <> 0 И АннотацииМеста.Количество() <> 0 Тогда
		АннотацияСловарь.Вставить("Место", АннотацииМеста);
		АннотацияСловарь.Вставить("Мероприятие", АннотацииМероприятий);
		АннотацияИмя = "Мероприятие";
		
	ИначеЕсли АннотацииМероприятий.Количество() <> 0 И АннотацииВремени.Количество() <> 0 И АннотацииДаты.Количество() <> 0 Тогда
		АннотацияСловарь.Вставить("Мероприятие", АннотацииМероприятий);
		АннотацияСловарь.Вставить("Время", АннотацииВремени);
		АннотацияСловарь.Вставить("Дата", АннотацииДаты);
		АннотацияИмя = "Встреча";
		
	ИначеЕсли АннотацииМероприятий.Количество() <> 0 И АннотацииВремени.Количество() <> 0 Тогда
		АннотацияСловарь.Вставить("Мероприятие", АннотацииМероприятий);
		АннотацияСловарь.Вставить("Время", АннотацииВремени);
		АннотацияИмя = "Встреча";
		
	ИначеЕсли АннотацииМероприятий.Количество() <> 0 И АннотацииДаты.Количество() <> 0 Тогда
		АннотацияСловарь.Вставить("Мероприятие", АннотацииМероприятий);
		АннотацияСловарь.Вставить("Дата", АннотацииДаты);
		АннотацияИмя = "Встреча";
		
	КонецЕсли;
	
	Если АннотацияСловарь.Количество() <> 0 Тогда
		АгрегатнаяАннотация = АгрегатнаяАннотация(АннотацияСловарь, Предложение.Данные);
		АгрегатнаяАннотация.Имя = АннотацияИмя;
		Начала = Новый Массив;
		Концы = Новый Массив;
		Для Каждого Аннотации Из Значения(АннотацияСловарь) Цикл
			Для Каждого Аннотация Из Аннотации Цикл
				Начала.Добавить(Аннотация.Начало);
				Концы.Добавить(Аннотация.Конец);
			КонецЦикла;
		КонецЦикла;
		АгрегатнаяАннотация.Начало = Минимум(Начала);
		АгрегатнаяАннотация.Конец = Максимум(Концы);
		Возврат АгрегатнаяАннотация;
	КонецЕсли;
	
КонецФункции

// Формирует предложение.
// Предложение является максимальной смысловой единицей для работы с текстом.
//
// Возвращаемое значение:
//  Структура - агрегатная нотация.
//   * Начало - Число - начальный индекс, который определяет первый покрытый символ текста.
//   * Конец - Число - конечный индекс, который определяет последний покрытый символ текста.
//   * Данные - Строка - покрытый текст.
//
Функция Предложение(Данные)
	
	Предложение = БазоваяАннотация(Данные);
	Предложение.Имя = "Предложение";
	Предложение.Данные = Данные;
	Предложение.Начало = Неопределено;
	Предложение.Конец = Неопределено;
	
	Возврат Предложение;
	
КонецФункции

// Находит предложения в тексте.
//
// Параметры:
//  Текст - Строка - исходный текст.
//
// Возвращаемое значение:
//  Массив - массив найденный предложений.
//
Функция НайтиПредложения(Знач Текст, ИгнорироватьСокращения)
	
	Конец = 1;
	Предложения = Новый Массив;
	Концы = Новый Массив;
	
	// Добавляем фиктивный индекс конца текста.
	Концы.Добавить(СтрДлина(Текст));
	
	Пока Конец > -1 Цикл
		Конец = НайтиКонецПредложения(Текст, ИгнорироватьСокращения);
		Если Конец > -1 Тогда
			Концы.Добавить(Конец);
			Предложение = Предложение(СокрЛП(Сред(Текст, Конец + 1)));
			Если Предложение.Данные <> "" Тогда
				Предложения.Добавить(Предложение);
			КонецЕсли;
			Текст = Лев(Текст, Конец);
		КонецЕсли;
	КонецЦикла;
	
	ПоследнееПредложение = Предложение(Текст);
	Предложения.Добавить(ПоследнееПредложение);
	
	Предложения = Перевернуть(Предложения);
	
	Концы = Сортировать(Концы);
	
	// Заполняем индексы начала и конца в предложения.
	ИндексНачала = 0;
	Индекс = 0;
	Для Каждого Предложение Из Предложения Цикл
		Если Индекс <> Концы.Количество() Тогда
			Предложение.Начало = ИндексНачала;
			Предложение.Конец = Концы[Индекс] - 1;
			ИндексНачала = Концы[Индекс] + 1;
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Предложения;
	
КонецФункции

// Находит конец предложения. Обращается к индексам индикаторов конца предложения,
// исключает из них индексы аббревиатур и возвращает индекс конца предложения.
//
// Параметры:
//  Текст - Строка - исходный текст.
//
// Возвращаемое значение:
//  Число - конец предложения.
//
Функция НайтиКонецПредложения(Текст, ИгнорироватьСокращения)
	
	Если Не ИгнорироватьСокращения Тогда
		
		ПозицииСокращений = Новый Массив;
		
		// Развернем аббревиатуры чтобы создать сокращения.
		Сокращения = Новый Массив;
		РазвернутыеАббревиатуры = Новый Массив;
		Для Каждого Аббревиатура Из Ключи(Аббревиатуры()) Цикл
			РазвернутыеАббревиатуры.Добавить(Аббревиатура);
			РазвернутыеАббревиатуры.Добавить(ТРег(Аббревиатура));
		КонецЦикла;
		Для Каждого Аббревиатура Из РазвернутыеАббревиатуры Цикл
			Сокращения.Добавить(" " + Аббревиатура);
			Сокращения.Добавить(Символы.ПС + Аббревиатура);
		КонецЦикла;
		
	КонецЕсли;
	
	ВозможныеКонцы = Новый Массив;
	ОбернутыеИндикаторыКонца = Новый Массив;
	Для Каждого Обертка Из Обертки() Цикл
		Для Каждого ИндикаторКонца Из ИндикаторыКонца() Цикл
			ОбернутыйИндикаторКонца = ИндикаторКонца + Обертка;
			ОбернутыеИндикаторыКонца.Добавить(ОбернутыйИндикаторКонца);
		КонецЦикла;
	КонецЦикла;
	
	// Все возможные варианты индикаторов конца предложения.
	ИндикаторыКонцаПредложения = Новый Массив;
	Для Каждого ИндикаторКонца Из ИндикаторыКонца() Цикл
		ИндикаторыКонцаПредложения.Добавить(ИндикаторКонца);
	КонецЦикла;
	Для Каждого ОбернутыйИндикаторКонца Из ОбернутыеИндикаторыКонца Цикл
		ИндикаторыКонцаПредложения.Добавить(ОбернутыйИндикаторКонца);
	КонецЦикла;
	ИндикаторыКонцаПредложения.Добавить(Символы.ПС + Символы.ПС);
	
	Для Каждого ИндикаторКонцаПредложения Из ИндикаторыКонцаПредложения Цикл
		// Индексы найденных индикаторов конца предложения.
		Индексы = СтрНайтиВсе(Текст, ИндикаторКонцаПредложения);
		// Расширяем список индексов возможного конца предложений.
		Для Каждого Индекс Из Индексы Цикл
			ВозможныйКонецПредложения = Новый Структура("Индекс, ДлинаИндикатора");
			ВозможныйКонецПредложения.Индекс = Индекс;
			ВозможныйКонецПредложения.ДлинаИндикатора = СтрДлина(ИндикаторКонцаПредложения);
			ВозможныеКонцы.Добавить(ВозможныйКонецПредложения);
		КонецЦикла;
	КонецЦикла;
	
	Если Не ИгнорироватьСокращения Тогда
		
		Для Каждого Сокращение Из Сокращения Цикл
			// Индексы найденных аббревиатур.
			Индексы = СтрНайтиВсе(Текст, Сокращение);
			// Расширяем список индексов возможных сокращений.
			Для Каждого Индекс Из Индексы Цикл
				ПозицииСокращений.Добавить(Индекс + СтрДлина(Сокращение));
			КонецЦикла;
		КонецЦикла;
		
		// Из списка возможных концов предложений исключим позиции сокращений.
		КоличествоЭлементов = ВозможныеКонцы.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл
			ТекущийИндекс = КоличествоЭлементов - Индекс;
			ВозможныйКонец = ВозможныеКонцы[ТекущийИндекс];
			Если ПозицииСокращений.Найти(ВозможныйКонец.Индекс + ВозможныйКонец.ДлинаИндикатора) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВозможныеКонцы.Удалить(ТекущийИндекс);
		КонецЦикла;
		
	КонецЕсли;
	
	// Находим индексы концов.
	Концы = Новый Массив;
	ДлинаТекста = СтрДлина(Текст);
	Для Каждого ВозможныйКонец Из ВозможныеКонцы Цикл
		ИндексВозможногоКонца = ВозможныйКонец.Индекс + ВозможныйКонец.ДлинаИндикатора;
		Если ИндексВозможногоКонца <> ДлинаТекста
			И НеТокены().Найти(СимволСтроки(Текст, ИндексВозможногоКонца)) <> Неопределено Тогда
			Концы.Добавить(ИндексВозможногоКонца);
		КонецЕсли;
	КонецЦикла;
	
	Если Концы.Количество() = 0 Тогда
		Конец = -1
	Иначе
		Конец = Максимум(Концы);
	КонецЕсли;
	
	Возврат Конец;
	
КонецФункции

// Находит все вхождения подстроки в строку.
//
// Параметры:
//  Строка			 - Строка	 - исходная строка.
//  ПодстрокаПоиска	 - Строка	 - искомая строка.
// 
// Возвращаемое значение:
//  Массив - все вхождения подстроки поиска в строку.
//
Функция СтрНайтиВсе(Строка, ПодстрокаПоиска)
	
	ВсеВхождения = Новый Массив;
	
	ДлинаПодстрокиПоиска = СтрДлина(ПодстрокаПоиска);
	ДлинаСтроки = СтрДлина(Строка);
	
	НайденнаяПозиция = СтрНайти(Строка, ПодстрокаПоиска, НаправлениеПоиска.СНачала, 1);
	Пока НайденнаяПозиция <> 0 Цикл
		ВсеВхождения.Добавить(НайденнаяПозиция - 1);
		НачальнаяПозиция = НайденнаяПозиция + ДлинаПодстрокиПоиска;
		Если НачальнаяПозиция > ДлинаСтроки Тогда
			Прервать;
		КонецЕсли;
		НайденнаяПозиция = СтрНайти(Строка, ПодстрокаПоиска, НаправлениеПоиска.СНачала, НачальнаяПозиция);
	КонецЦикла;
	
	Возврат ВсеВхождения
	
КонецФункции

// Формирует токен. Токен это минимальная единица семантики в предложении.
// Обычно это слово, число или символ пунктуации.
//
// Возвращаемое значение:
//  Структура - Токен.
//   * Начало - Число - начальный индекс токена в строке.
//   * Конец - Число - конечный индекс токена в строке.
//   * Данные - Строка - текст токена.
//   * Тип - Строка - тип токена. Всего возможно 4 типа токенов: word, number, punctuation, unknown.
//                    word - это последовательность буквенных символов между двумя
//                    пробелами, либо между пробелом и знаком пунктуации;
//                    number - это последовательность цифр между двумя пробелами,
//                    либо между пробелом и знаком пунктуации;
//                    punctuation - это символ пунктуации;
//                    unknown - это любая смешенная последовательность из букв и цифр,
//                    находящаяся между двумя пробелами, либо между пробелом и символом пунктуации.
//   * Регистр - Строка - в зависимости от употребления в токене заглавных и строчных букв, следует
//                    выделить следующие значения атрибута case: lowercase, uppercase, title, mixed.
//                    lowercase - все символы в токене строчные;
//                    uppercase - все символы в токене заглавные;
//                    title - первая буква заглавная, остальные строчные;
//                    mixed - попадаются заглавные буквы не в начале токена, остальные символы строчные.
//   * Длина - Число - количество символов в токене.
//   * Следующий - Структура - следующий токен в тексте.
//
Функция Токен(Текст, Начало, Конец = Неопределено)
	
	Токен = Новый Структура;
	
	Данные = "";
	Если Конец = Неопределено Тогда
		Индекс = Начало;
		Данные = Текст;
		ДлинаДанных = СтрДлина(Данные);
		Если ЗнакиПунктуации().Найти(СимволСтроки(Данные, Индекс)) <> Неопределено Тогда
			Конец = Начало;
		Иначе
			Пока Индекс < ДлинаДанных
				И НеТокены().Найти(СимволСтроки(Данные, Индекс)) = Неопределено
				И ЗнакиПунктуации().Найти(СимволСтроки(Данные, Индекс)) = Неопределено Цикл
				Индекс = Индекс + 1;
			КонецЦикла;
			Конец = Индекс - 1;
		КонецЕсли;
	КонецЕсли;
	
	Токен.Вставить("Начало", Начало);
	Токен.Вставить("Конец", Конец);
	Токен.Вставить("Данные", Сред(Данные, Начало + 1, Конец - Начало + 1));
	Токен.Вставить("Следующий");
	Токен.Вставить("Предыдущий");
	Токен.Вставить("Тип");
	Токен.Вставить("Регистр");
	Токен.Вставить("Лемма");
	
	ТокенТип(Токен);
	ТокенРегистр(Токен);
	ТокенЛемма(Токен);
	
	Возврат Токен;
	
КонецФункции

// Рассчитывает длину токена.
//
// Параметры:
//  Токен - Структура - токен.
//
// Возвращаемое значение:
//  Число - длина данных токена.
//
Функция ТокенДлина(Токен)
	
	Длина = 0;
	
	Если Токен.Данные <> "" Тогда
		Длина = СтрДлина(Токен.Данные);
	КонецЕсли;
	
	Возврат Длина;
	
КонецФункции

// Ищет все токены в переданном тексте.
//
// Параметры:
//  Текст - СТрока - текст, в котором ищем токены.
//
// Возвращаемое значение:
//  Массив - найденные токены.
//
Функция Токенизация(Предложение)
	
	Токены = Новый Массив;
	Индекс = 0;
	Данные = Предложение;
	ДлинаДанных = СтрДлина(Данные);
	Пока Индекс < ДлинаДанных Цикл
		Если НеТокены().Найти(СимволСтроки(Данные, Индекс)) <> Неопределено Тогда
			Индекс = Индекс + 1;
		Иначе
			Токен = Токен(Предложение, Индекс);
			Токены.Добавить(Токен);
			Индекс = Индекс + ТокенДлина(Токен);
		КонецЕсли;
	КонецЦикла;
	
	Для Индекс = 0 По Токены.Количество() - 1 Цикл
		ТекущийТокен = Токены[Индекс];
		Если Индекс < Токены.Количество() - 1 Тогда
			СледующийТокен = Токены[Индекс + 1];
			ТекущийТокен.Следующий = СледующийТокен;
		КонецЕсли;
		Если Индекс > 0 Тогда
			ПредыдущийТокен = Токены[Индекс - 1];
			ТекущийТокен.Предыдущий = ПредыдущийТокен;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Токены;
	
КонецФункции

// Получение необходимого количества текста для анализа из всего текста.
//
// Параметры:
//  Текст - Строка - весь текст, поступивший для анализа.
//
// Возвращаемое значение:
//  Строка - обрабатываемая часть текста.
//
Функция ПолучитьОбрабатываемыйТекст(Текст)
	
	Возврат Лев(Текст, 1000);
	
КонецФункции

#КонецОбласти

#КонецЕсли
