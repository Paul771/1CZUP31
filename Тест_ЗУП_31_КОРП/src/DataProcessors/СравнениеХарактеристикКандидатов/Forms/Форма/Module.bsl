
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Вакансия") Тогда
		Вакансия = Параметры.Вакансия;
		Если Параметры.Свойство("СписокФизЛиц") Тогда
			СписокФизЛиц.Очистить();
			Для Каждого ФизЛицо Из Параметры.СписокФизЛиц Цикл
				СписокФизЛиц.Добавить(ФизЛицо);
			КонецЦикла;
		КонецЕсли;
		Если СписокФизЛиц.Количество() < 1 Тогда
			ЗаполнитьФизЛиц();
		КонецЕсли;
		СписокДоступныхЗначений = Новый СписокЗначений;
		Для Каждого ТекущаяСтрока Из Вакансия.ЭтапыРаботыСКандидатами Цикл
			СписокДоступныхЗначений.Добавить(ТекущаяСтрока.ЭтапРаботы);
		КонецЦикла;
		СписокЭтапов.ДоступныеЗначения = СписокДоступныхЗначений;
		СформироватьОтчетСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьОтчетСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКандидата(Команда)
	
	ПараметрыФормы = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ДобавитьКандидатаЗавершение", ЭтаФорма);
	ОткрытьФорму("Справочник.Кандидаты.ФормаВыбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСотрудника(Команда)
	
	ПараметрыФормы = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ДобавитьКандидатаЗавершение", ЭтаФорма);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоМотиваторам(Команда)
	
	Если Не ЗначениеЗаполнено(Вакансия) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	СписокКандидатов = Новый СписокЗначений;
	Если СписокФизЛиц.Количество() > 0 Тогда
		СписокКандидатов = ПолучитьСписокКандидатов();
	КонецЕсли;
	ПользовательскиеНастройкиОтчета = ЭлектронноеИнтервьюВызовСервера.ПользовательскиеНастройкиОтчетаПоМотиваторам(Вакансия, СписокКандидатов);
	ПараметрыОткрытия.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройкиОтчета);
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.СравнениеМотиваторов.Форма", ПараметрыОткрытия,, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробныйОтчетПоХарактеристикам(Команда)
	
	Если Не ЗначениеЗаполнено(Вакансия) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Вакансия", Вакансия);
	ПараметрыОткрытия.Вставить("ФизическиеЛица", СписокФизЛиц);
	ОткрытьФорму("Отчет.СравнениеХарактеристикКандидатовПодробно.Форма", ПараметрыОткрытия,, Новый УникальныйИдентификатор());	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьРеквизитыФормы(ТЗ, ТЗМотиваторов)
	
	// удаление реквизитов
	ТЗ_Старая = РеквизитФормыВЗначение("ТаблицаРезультат");
    МассивРеквизитов = Новый Массив;
	Для Каждого Колонка Из ТЗ_Старая.Колонки Цикл
        МассивРеквизитов.Добавить("ТаблицаРезультат." + Колонка.Имя);
		Если Прав(Колонка.Имя, 4) = "Балл" Тогда
			МассивРеквизитов.Добавить(Колонка.Имя + "Итого");
		КонецЕсли;
	КонецЦикла;
	ТЗМотиваторов_Старая = РеквизитФормыВЗначение("ТаблицаМотиваторов");
	Для Каждого Колонка Из ТЗМотиваторов_Старая.Колонки Цикл
        МассивРеквизитов.Добавить("ТаблицаМотиваторов." + Колонка.Имя);
	КонецЦикла;
	ИзменитьРеквизиты(, МассивРеквизитов);
	
	// добавление реквизитов
	МассивРеквизитов = Новый Массив;
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ТаблицаРезультат"));
		Если Прав(Колонка.Имя, 4) = "Балл" Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя + "Итого", Колонка.ТипЗначения));
		КонецЕсли;
	КонецЦикла;
	Для Каждого Колонка Из ТЗМотиваторов.Колонки Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ТаблицаМотиваторов"));
	КонецЦикла;
		
	ИзменитьРеквизиты(МассивРеквизитов);	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы(ТаблицаИтогов, ТЗМотиваторов)
	
	ЭлементТаблица = Элементы.Найти("ТаблицаРезультат");
	
	МассивУдаления = Новый Массив;
	Для Каждого ТекущийЭлемент Из ЭлементТаблица.ПодчиненныеЭлементы Цикл
		МассивУдаления.Добавить(ТекущийЭлемент);
	КонецЦикла;
	Для Каждого ТекущийЭлемент Из МассивУдаления Цикл
		Элементы.Удалить(ТекущийЭлемент);
	КонецЦикла;
	
	НовыйЭлемент = Элементы.Добавить("ТаблицаРезультатСовпадаютБаллы", Тип("ПолеФормы"), ЭлементТаблица);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТаблицаРезультат.СовпадаютБаллы";
	НовыйЭлемент.Видимость = Ложь;
	
	НовыйЭлемент = Элементы.Добавить("ТаблицаРезультатХарактеристика", Тип("ПолеФормы"), ЭлементТаблица);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТаблицаРезультат.Характеристика";
	НовыйЭлемент.Заголовок = НСтр("ru = 'Характеристика'");
	НовыйЭлемент.Ширина = 30;
	
	НовыйЭлемент = Элементы.Добавить("ТаблицаРезультатТребования", Тип("ПолеФормы"), ЭлементТаблица);       
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТаблицаРезультат.ТребованияПредставление";
	НовыйЭлемент.Заголовок = НСтр("ru = 'Требуемые показатели'");
	НовыйЭлемент.Ширина = 20;
	
	СчетчикФизЛиц = 1;
	Для Каждого ТекущаяСтрока Из ТаблицаИтогов Цикл
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ФизическоеЛицо) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеКолонки = КолонкиТаблицы.Добавить();
		ДанныеКолонки.ФизическоеЛицо = ТекущаяСтрока.ФизическоеЛицо;
		ДанныеКолонки.ИмяКолонкиЗначения = "Кандидат" + Строка(СчетчикФизЛиц);
		
		НовыйЭлемент = Элементы.Добавить("ТаблицаРезультатКандидат" + Строка(СчетчикФизЛиц) + "Балл", Тип("ПолеФормы"), ЭлементТаблица);       
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТаблицаРезультат.Кандидат" + Строка(СчетчикФизЛиц) + "Балл";
		НовыйЭлемент.Заголовок = Строка(ТекущаяСтрока.ФизическоеЛицо);
		НовыйЭлемент.ТолькоПросмотр = Истина;
		НовыйЭлемент.ПутьКДаннымПодвала = "Кандидат" + Строка(СчетчикФизЛиц) + "БаллИтого";
		НовыйЭлемент.Ширина = 15;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Формат = "ЧН=0";
		ДанныеКолонки.ИмяКолонкиБаллов = "Кандидат" + Строка(СчетчикФизЛиц) + "Балл";
		
		СчетчикФизЛиц = СчетчикФизЛиц + 1;
		
	КонецЦикла;
	
	НовыйЭлемент = Элементы.Добавить("ТаблицаРезультатКандидатБаллСлужебный", Тип("ПолеФормы"), ЭлементТаблица);       
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТаблицаРезультат.КандидатБаллСлужебный";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.ТолькоПросмотр = Истина;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
		
	ЭлементТаблица.ФиксацияСлева = 2;
	
	СравнитьСтроки();
	Если ТолькоРазличающиеся Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СовпадаютБаллы", Ложь);
		ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
		ЭлементТаблица.ОтборСтрок = ОтборСтрок;
	КонецЕсли;
	
	СчетчикФизЛиц = 1;
	Для Каждого ТекущаяСтрока Из ТаблицаИтогов Цикл
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ФизическоеЛицо) Тогда
			Продолжить;
		КонецЕсли;
		ЭтаФорма["Кандидат" + Строка(СчетчикФизЛиц) + "БаллИтого"] = ТекущаяСтрока.ОтносительнаяОценка;
		СчетчикФизЛиц = СчетчикФизЛиц + 1;
	КонецЦикла;
	
	
	ЭлементТаблицаМотиваторов = Элементы.Найти("ТаблицаМотиваторов");
	
	МассивУдаления = Новый Массив;
	Для Каждого ТекущийЭлемент Из ЭлементТаблицаМотиваторов.ПодчиненныеЭлементы Цикл
		МассивУдаления.Добавить(ТекущийЭлемент);
	КонецЦикла;
	Для Каждого ТекущийЭлемент Из МассивУдаления Цикл
		Элементы.Удалить(ТекущийЭлемент);
	КонецЦикла;
	
	НовыйЭлемент = Элементы.Добавить("ТаблицаМотиваторовМотиватор", Тип("ПолеФормы"), ЭлементТаблицаМотиваторов);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТаблицаМотиваторов.Мотиватор";
	НовыйЭлемент.Заголовок = НСтр("ru = 'Мотиватор/Демотиватор'");
	НовыйЭлемент.Ширина = 60;
	
	СчетчикФизЛиц = 1;
	Для Каждого ТекущаяСтрока Из ТЗМотиваторов Цикл
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Кандидат) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить("ТаблицаМотиваторовКандидат" + Строка(СчетчикФизЛиц), Тип("ПолеФормы"), ЭлементТаблицаМотиваторов);       
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТаблицаМотиваторов.Кандидат" + Строка(СчетчикФизЛиц);
		НовыйЭлемент.Заголовок = Строка(ТекущаяСтрока.Кандидат);
		НовыйЭлемент.ТолькоПросмотр = Истина;
		НовыйЭлемент.Ширина = 15;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Формат = "ЧН=0";
		
		СчетчикФизЛиц = СчетчикФизЛиц + 1;
	КонецЦикла;
	
	ЭлементТаблицаМотиваторов.ФиксацияСлева = 1;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементыОформления = ЭтаФорма.УсловноеОформление.Элементы;
	ЭлементыОформления.Очистить();
	ЭлементОформления = ЭлементыОформления.Добавить();
	ЭлементОформления.Использование	= ВыделятьРазличающиеся;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ТаблицаРезультат.СовпадаютБаллы");
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Розовый);
	ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаРезультат"); 
	ОформляемоеПоле.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформление()
	
	Если ЭтаФорма.УсловноеОформление.Элементы.Количество() > 0 Тогда
		ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы[0];
		ЭлементОформления.Использование = ВыделятьРазличающиеся;
	КонецЕсли;	
	
КонецПроцедуры
 
&НаСервере
Процедура СформироватьОтчетСервер()
	
	ДанныеОтчета = РеквизитФормыВЗначение("Объект").ДанныеОтчета(Вакансия, СписокФизЛиц, СписокЭтапов);
	
	ТаблицаИтогов = ДанныеОтчета.ТаблицаИтогов;
	ТаблицаОтчета = ДанныеОтчета.ТЗ;
	ТЗМотиваторов = ДанныеОтчета.ТЗМотиваторов;
	ТЗМотиваторовПоКандидатам = ДанныеОтчета.ТзМотиваторовПоКандидатам;
	
	ОбновитьРеквизитыФормы(ТаблицаОтчета, ТЗМотиваторов);
	ЗначениеВРеквизитФормы(ТаблицаОтчета, "ТаблицаРезультат");
	ЗначениеВРеквизитФормы(ТЗМотиваторов, "ТаблицаМотиваторов");
	ОбновитьЭлементыФормы(ТаблицаИтогов, ТЗМотиваторовПоКандидатам);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФизЛиц()
	
	СписокФизЛиц.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Кандидаты.ФизическоеЛицо
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|ГДЕ
		|	Кандидаты.Вакансия = &Вакансия
		|	И НЕ Кандидаты.ПометкаУдаления";
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокФизЛиц.Добавить(Выборка.ФизическоеЛицо);
	КонецЦикла;
	
	СписокДоступныхЗначений = Новый СписокЗначений;
	Для Каждого ТекущаяСтрока Из Вакансия.ЭтапыРаботыСКандидатами Цикл
		СписокДоступныхЗначений.Добавить(ТекущаяСтрока.ЭтапРаботы);
	КонецЦикла;
	СписокЭтапов.ДоступныеЗначения = СписокДоступныхЗначений;
	
КонецПроцедуры

// Обработчик оповещения о завершении добавления кандидата.
// Добавляет выбранное физлицо в отчет.
//
// Параметры 
//	Результат - СправочникСсылка.Кандидаты, СправочникСсылка.Сотрудники, Неопределено - ссылка на добавляемого кандидата или сотрудника. 
//	ДополнительныеПараметры - Структура - структура дополнительных параметров.
//
&НаКлиенте
Процедура ДобавитьКандидатаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ДобавитьФизЛицо(Результат);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВакансияПриИзменении(Элемент)
	
	ЗаполнитьФизЛиц();
	
КонецПроцедуры

&НаСервере
Процедура СравнитьСтроки()
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаРезультат");
	СписокКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		Если Прав(Колонка.Имя, 4) = "Балл" Тогда
			СписокКолонок.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из ТЗ Цикл
		ТекущаяСтрока.СовпадаютБаллы = Истина;
		Если СписокКолонок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = ТекущаяСтрока[СписокКолонок[0]];
		Для Каждого ТекущаяКолонка Из СписокКолонок Цикл
			Если ТекущаяСтрока[ТекущаяКолонка] <> Значение Тогда
				ТекущаяСтрока.СовпадаютБаллы = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТЗ, "ТаблицаРезультат");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФизЛицо(Результат)
	
	ФизЛицо = Результат.ФизическоеЛицо;
	Если СписокФизЛиц.НайтиПоЗначению(ФизЛицо) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокФизЛиц.Добавить(ФизЛицо);
	
	ОтбираемыеХарактеристики = Новый Массив;
	ИспользоватьОтборПоЭтапам = Ложь;
	Если СписокЭтапов.Количество() > 0 Тогда
		ИспользоватьОтборПоЭтапам = Истина;
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВакансииЭтапыРаботыСКандидатами.Ссылка,
			|	ВакансииЭтапыРаботыСКандидатами.ЭтапРаботы,
			|	ВопросыШаблонаАнкеты.ЭлементарныйВопрос
			|ПОМЕСТИТЬ ВТВопросыЭтапов
			|ИЗ
			|	Справочник.Вакансии.ЭтапыРаботыСКандидатами КАК ВакансииЭтапыРаботыСКандидатами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
			|		ПО ВакансииЭтапыРаботыСКандидатами.ШаблонАнкеты = ВопросыШаблонаАнкеты.Владелец
			|			И (НЕ ВопросыШаблонаАнкеты.ЭтоГруппа)
			|			И (НЕ ВопросыШаблонаАнкеты.ПометкаУдаления)
			|ГДЕ
			|	ВакансииЭтапыРаботыСКандидатами.Ссылка = &Ссылка
			|	И ВакансииЭтапыРаботыСКандидатами.ЭтапРаботы В(&ЭтапыРаботы)
			|	И ВопросыШаблонаАнкеты.ЭлементарныйВопрос <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВопросыДляАнкетирования.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВакансииЭтапыРаботыСКандидатами.Ссылка,
			|	ВакансииЭтапыРаботыСКандидатами.ЭтапРаботы,
			|	ВопросыШаблонаАнкетыСоставКомплексногоВопроса.ЭлементарныйВопрос
			|ИЗ
			|	Справочник.Вакансии.ЭтапыРаботыСКандидатами КАК ВакансииЭтапыРаботыСКандидатами,
			|	Справочник.ВопросыШаблонаАнкеты.СоставКомплексногоВопроса КАК ВопросыШаблонаАнкетыСоставКомплексногоВопроса
			|ГДЕ
			|	ВакансииЭтапыРаботыСКандидатами.Ссылка = &Ссылка
			|	И ВакансииЭтапыРаботыСКандидатами.ЭтапРаботы В(&ЭтапыРаботы)
			|	И ВопросыШаблонаАнкетыСоставКомплексногоВопроса.ЭлементарныйВопрос <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВопросыДляАнкетирования.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НастройкаВопросовДляСобеседования.ХарактеристикаПерсонала
			|ИЗ
			|	ВТВопросыЭтапов КАК ВопросыЭтапов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаВопросовДляСобеседования КАК НастройкаВопросовДляСобеседования
			|		ПО (ВЫБОР
			|				КОГДА ВопросыЭтапов.Ссылка.СоответствуетПрофилюДолжности
			|					ТОГДА ВопросыЭтапов.Ссылка.ПрофильДолжности
			|				ИНАЧЕ ВопросыЭтапов.Ссылка
			|			КОНЕЦ = НастройкаВопросовДляСобеседования.Объект)
			|			И ВопросыЭтапов.ЭлементарныйВопрос = НастройкаВопросовДляСобеседования.ЭлементарныйВопрос";
		Запрос.УстановитьПараметр("Ссылка", Вакансия);
		Запрос.УстановитьПараметр("ЭтапыРаботы", СписокЭтапов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОтбираемыеХарактеристики.Добавить(Выборка.ХарактеристикаПерсонала);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВакансииХарактеристикиПерсонала.Ссылка,
		|	ВакансииХарактеристикиПерсонала.Характеристика,
		|	ВакансииХарактеристикиПерсонала.Значение,
		|	ВакансииХарактеристикиПерсонала.Вес,
		|	ВакансииХарактеристикиПерсонала.ВесЗначения
		|ПОМЕСТИТЬ ВТХарактеристикиВакансий
		|ИЗ
		|	Справочник.Вакансии.ХарактеристикиПерсонала КАК ВакансииХарактеристикиПерсонала
		|ГДЕ
		|	ВакансииХарактеристикиПерсонала.Ссылка = &Вакансия
		|	И ВакансииХарактеристикиПерсонала.ТребуетсяПроверка
		|	И (ВакансииХарактеристикиПерсонала.Характеристика В (&Характеристики)
		|			ИЛИ НЕ &ИспользоватьОтборПоЭтапам)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.Характеристика,
		|	МАКСИМУМ(ХарактеристикиВакансий.Значение) КАК ОсновноеЗначение,
		|	ВложенныйЗапрос.ВесЗначения,
		|	ВложенныйЗапрос.Вес
		|ПОМЕСТИТЬ ВТЗначенияХарактеристик
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХарактеристикиВакансий.Ссылка КАК Ссылка,
		|		МАКСИМУМ(ХарактеристикиВакансий.ВесЗначения) КАК ВесЗначения,
		|		ХарактеристикиВакансий.Характеристика КАК Характеристика,
		|		ХарактеристикиВакансий.Вес КАК Вес
		|	ИЗ
		|		ВТХарактеристикиВакансий КАК ХарактеристикиВакансий
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ХарактеристикиВакансий.Ссылка,
		|		ХарактеристикиВакансий.Характеристика,
		|		ХарактеристикиВакансий.Вес) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиВакансий КАК ХарактеристикиВакансий
		|		ПО ВложенныйЗапрос.ВесЗначения = ХарактеристикиВакансий.ВесЗначения
		|			И ВложенныйЗапрос.Характеристика = ХарактеристикиВакансий.Характеристика
		|			И ВложенныйЗапрос.Ссылка = ХарактеристикиВакансий.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.ВесЗначения,
		|	ВложенныйЗапрос.Вес
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиВакансий.Ссылка КАК Вакансия,
		|	ХарактеристикиВакансий.Характеристика,
		|	ХарактеристикиВакансий.Значение,
		|	ХарактеристикиВакансий.Вес,
		|	ХарактеристикиФизическихЛиц.ФизическоеЛицо,
		|	ХарактеристикиВакансий.ВесЗначения,
		|	ЕСТЬNULL(ХарактеристикиФизическихЛиц.Балл, 0) * ХарактеристикиВакансий.ВесЗначения КАК Оценка
		|ПОМЕСТИТЬ ВТОценкиЗначений
		|ИЗ
		|	ВТХарактеристикиВакансий КАК ХарактеристикиВакансий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХарактеристикиФизическихЛиц.СрезПоследних КАК ХарактеристикиФизическихЛиц
		|		ПО ХарактеристикиВакансий.Характеристика = ХарактеристикиФизическихЛиц.ХарактеристикаПерсонала
		|			И ХарактеристикиВакансий.Значение = ХарактеристикиФизическихЛиц.ЗначениеХарактеристики
		|			И ХарактеристикиВакансий.Ссылка = ХарактеристикиФизическихЛиц.Вакансия
		|			И (ХарактеристикиФизическихЛиц.ФизическоеЛицо = &ФизЛицо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Вакансия,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Вес,
		|	ВложенныйЗапрос.ФизическоеЛицо,
		|	ВложенныйЗапрос.Оценка,
		|	ОценкиЗначений.Значение,
		|	ОценкиЗначений.ВесЗначения
		|ПОМЕСТИТЬ ВТАбсолютныеОценкиХарактеристик
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОценкиЗначений.Вакансия КАК Вакансия,
		|		ОценкиЗначений.Характеристика КАК Характеристика,
		|		ОценкиЗначений.Вес КАК Вес,
		|		ОценкиЗначений.ФизическоеЛицо КАК ФизическоеЛицо,
		|		МАКСИМУМ(ОценкиЗначений.Оценка) КАК Оценка
		|	ИЗ
		|		ВТОценкиЗначений КАК ОценкиЗначений
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОценкиЗначений.Вакансия,
		|		ОценкиЗначений.Характеристика,
		|		ОценкиЗначений.Вес,
		|		ОценкиЗначений.ФизическоеЛицо) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОценкиЗначений КАК ОценкиЗначений
		|		ПО ВложенныйЗапрос.Вакансия = ОценкиЗначений.Вакансия
		|			И ВложенныйЗапрос.Характеристика = ОценкиЗначений.Характеристика
		|			И ВложенныйЗапрос.ФизическоеЛицо = ОценкиЗначений.ФизическоеЛицо
		|			И ВложенныйЗапрос.Оценка = ОценкиЗначений.Оценка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Вакансия,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Вес,
		|	ВложенныйЗапрос.ФизическоеЛицо,
		|	ВложенныйЗапрос.Оценка,
		|	МАКСИМУМ(АбсолютныеОценкиХарактеристик.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТАбсолютныеОценкиХарактеристикСвернутые
		|ИЗ
		|	(ВЫБРАТЬ
		|		АбсолютныеОценкиХарактеристик.Вакансия КАК Вакансия,
		|		АбсолютныеОценкиХарактеристик.Характеристика КАК Характеристика,
		|		АбсолютныеОценкиХарактеристик.Вес КАК Вес,
		|		АбсолютныеОценкиХарактеристик.ФизическоеЛицо КАК ФизическоеЛицо,
		|		АбсолютныеОценкиХарактеристик.Оценка КАК Оценка,
		|		МАКСИМУМ(АбсолютныеОценкиХарактеристик.ВесЗначения) КАК ВесЗначения
		|	ИЗ
		|		ВТАбсолютныеОценкиХарактеристик КАК АбсолютныеОценкиХарактеристик
		|	
		|	СГРУППИРОВАТЬ ПО
		|		АбсолютныеОценкиХарактеристик.Вакансия,
		|		АбсолютныеОценкиХарактеристик.Характеристика,
		|		АбсолютныеОценкиХарактеристик.Вес,
		|		АбсолютныеОценкиХарактеристик.ФизическоеЛицо,
		|		АбсолютныеОценкиХарактеристик.Оценка) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАбсолютныеОценкиХарактеристик КАК АбсолютныеОценкиХарактеристик
		|		ПО ВложенныйЗапрос.Вакансия = АбсолютныеОценкиХарактеристик.Вакансия
		|			И ВложенныйЗапрос.Характеристика = АбсолютныеОценкиХарактеристик.Характеристика
		|			И ВложенныйЗапрос.Вес = АбсолютныеОценкиХарактеристик.Вес
		|			И ВложенныйЗапрос.ФизическоеЛицо = АбсолютныеОценкиХарактеристик.ФизическоеЛицо
		|			И ВложенныйЗапрос.Оценка = АбсолютныеОценкиХарактеристик.Оценка
		|			И ВложенныйЗапрос.ВесЗначения = АбсолютныеОценкиХарактеристик.ВесЗначения
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Вакансия,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Вес,
		|	ВложенныйЗапрос.ФизическоеЛицо,
		|	ВложенныйЗапрос.Оценка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АбсолютныеОценкиХарактеристикСвернутые.Вакансия,
		|	АбсолютныеОценкиХарактеристикСвернутые.Характеристика,
		|	АбсолютныеОценкиХарактеристикСвернутые.Вес,
		|	АбсолютныеОценкиХарактеристикСвернутые.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ЗначенияХарактеристик.ВесЗначения = 0
		|			ТОГДА 0
		|		ИНАЧЕ АбсолютныеОценкиХарактеристикСвернутые.Оценка / ЗначенияХарактеристик.ВесЗначения
		|	КОНЕЦ КАК Оценка,
		|	АбсолютныеОценкиХарактеристикСвернутые.Значение,
		|	ЗначенияХарактеристик.ОсновноеЗначение
		|ПОМЕСТИТЬ ВТОценкиХарактеристик
		|ИЗ
		|	ВТАбсолютныеОценкиХарактеристикСвернутые КАК АбсолютныеОценкиХарактеристикСвернутые
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияХарактеристик КАК ЗначенияХарактеристик
		|		ПО АбсолютныеОценкиХарактеристикСвернутые.Вакансия = ЗначенияХарактеристик.Ссылка
		|			И АбсолютныеОценкиХарактеристикСвернутые.Характеристика = ЗначенияХарактеристик.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОценкиХарактеристик.Вакансия,
		|	ОценкиХарактеристик.Характеристика,
		|	ОценкиХарактеристик.ФизическоеЛицо,
		|	ОценкиХарактеристик.Оценка,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.Вес = 0
		|			ТОГДА 0
		|		ИНАЧЕ ОценкиХарактеристик.Оценка * ОценкиХарактеристик.Вес / ВложенныйЗапрос.Вес
		|	КОНЕЦ КАК ОтносительнаяОценка,
		|	ОценкиХарактеристик.Значение,
		|	ОценкиХарактеристик.ОсновноеЗначение
		|ИЗ
		|	ВТОценкиХарактеристик КАК ОценкиХарактеристик
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗначенияХарактеристик.Ссылка КАК Ссылка,
		|			СУММА(ЗначенияХарактеристик.Вес) КАК Вес
		|		ИЗ
		|			ВТЗначенияХарактеристик КАК ЗначенияХарактеристик
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЗначенияХарактеристик.Ссылка) КАК ВложенныйЗапрос
		|		ПО ОценкиХарактеристик.Вакансия = ВложенныйЗапрос.Ссылка";
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("Характеристики", ОтбираемыеХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоЭтапам", ИспользоватьОтборПоЭтапам);
	Данные = Запрос.Выполнить().Выгрузить();
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ФизическоеЛицо", ФизЛицо);
	Если Данные.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементТаблица = Элементы.Найти("ТаблицаРезультат");
	ГруппаКандидатов = Элементы.Найти("ТаблицаРезультатГруппаКандидатов");
	
	Если ЭлементТаблица = Неопределено Или ГруппаКандидатов = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТЗ = РеквизитФормыВЗначение("ТаблицаРезультат");
	ТЗ.Колонки.Добавить("Кандидат" + Строка(СписокФизЛиц.Количество()), Метаданные.ПланыВидовХарактеристик.ХарактеристикиПерсонала.Тип);
	ТЗ.Колонки.Добавить("Кандидат" + Строка(СписокФизЛиц.Количество()) + "Балл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Кандидат" + Строка(СписокФизЛиц.Количество()), Метаданные.ПланыВидовХарактеристик.ХарактеристикиПерсонала.Тип, "ТаблицаРезультат"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Кандидат" + Строка(СписокФизЛиц.Количество()) + "Балл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), "ТаблицаРезультат"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Кандидат" + Строка(СписокФизЛиц.Количество()) + "БаллИтого", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2))));
	ИзменитьРеквизиты(МассивРеквизитов);
	
	ИтоговаяОценка = 0;
	Для Каждого ТекущаяСтрока Из ТЗ Цикл
		СтруктураПоискаФизЛица = Новый Структура;
		СтруктураПоискаФизЛица.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		СтруктураПоискаФизЛица.Вставить("ФизическоеЛицо", ФизЛицо);
		НайденныеСтроки = Данные.НайтиСтроки(СтруктураПоискаФизЛица);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущаяСтрока["Кандидат" + Строка(СписокФизЛиц.Количество())] = НайденныеСтроки[0].Значение;
	        ТекущаяСтрока["Кандидат" + Строка(СписокФизЛиц.Количество()) + "Балл"] = НайденныеСтроки[0].Оценка;
			ИтоговаяОценка = ИтоговаяОценка + НайденныеСтроки[0].ОтносительнаяОценка;
		КонецЕсли;
	КонецЦикла;
	ЭтаФорма["Кандидат" + Строка(СписокФизЛиц.Количество()) + "БаллИтого"] = ИтоговаяОценка;
	ЗначениеВРеквизитФормы(ТЗ, "ТаблицаРезультат");
	
	ДанныеКолонки = КолонкиТаблицы.Добавить();
	ДанныеКолонки.ФизическоеЛицо = ФизЛицо;
	
	НовыйЭлемент = Элементы.Добавить("ТаблицаРезультатКандидат" + Строка(СписокФизЛиц.Количество()), Тип("ПолеФормы"), ГруппаКандидатов);       
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТаблицаРезультат.Кандидат" + Строка(СписокФизЛиц.Количество());
	НовыйЭлемент.Заголовок = Строка(ФизЛицо);
	НовыйЭлемент.Ширина = 30;
	ДанныеКолонки.ИмяКолонкиЗначения = "Кандидат" + Строка(СписокФизЛиц.Количество());
	
	НовыйЭлемент = Элементы.Добавить("ТаблицаРезультатКандидат" + Строка(СписокФизЛиц.Количество()) + "Балл", Тип("ПолеФормы"), ГруппаКандидатов);       
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТаблицаРезультат.Кандидат" + Строка(СписокФизЛиц.Количество()) + "Балл";
	НовыйЭлемент.Заголовок = "Баллы";
	НовыйЭлемент.ПутьКДаннымПодвала = "Кандидат" + Строка(СписокФизЛиц.Количество()) + "БаллИтого";
	НовыйЭлемент.Ширина = 10;
	ДанныеКолонки.ИмяКолонкиБаллов = "Кандидат" + Строка(СписокФизЛиц.Количество()) + "Балл";
	
	СравнитьСтроки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АнкетыКандидатов.Кандидат КАК Кандидат,
	|	МотиваторыВАнкетах.Мотиватор КАК Мотиватор,
	|	СУММА(МотиваторыВАнкетах.Количество) КАК Количество
	|ИЗ
	|	РегистрСведений.АнкетыКандидатов КАК АнкетыКандидатов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МотиваторыВАнкетах КАК МотиваторыВАнкетах
	|		ПО АнкетыКандидатов.Анкета = МотиваторыВАнкетах.Анкета
	|ГДЕ
	|	АнкетыКандидатов.Вакансия = &Вакансия
	|	И АнкетыКандидатов.ФизическоеЛицо =&ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	АнкетыКандидатов.Кандидат,
	|	МотиваторыВАнкетах.Мотиватор";
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ДанныеМотиваторов = Запрос.Выполнить().Выгрузить();
	
	Если ДанныеМотиваторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементТаблицаМотиваторов = Элементы.Найти("ТаблицаМотиваторов");
	
	Если ЭлементТаблицаМотиваторов = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТЗМотиваторов = РеквизитФормыВЗначение("ТаблицаМотиваторов");
	ТЗМотиваторов.Колонки.Добавить("Кандидат" + Строка(СписокФизЛиц.Количество()), Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Кандидат" + Строка(СписокФизЛиц.Количество()), Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), "ТаблицаМотиваторов"));
	ИзменитьРеквизиты(МассивРеквизитов);
	
	Для Каждого ТекущаяСтрока Из ДанныеМотиваторов Цикл
		СтруктураПоискаСтроки = Новый Структура;
		СтруктураПоискаСтроки.Вставить("Мотиватор", ТекущаяСтрока.Мотиватор);
		НайденныеСтроки = ТЗМотиваторов.НайтиСтроки(СтруктураПоискаСтроки);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0]["Кандидат" + Строка(СписокФизЛиц.Количество())] = ТекущаяСтрока.Количество;
		Иначе
			НоваяСтрока = ТЗМотиваторов.Добавить();
			НоваяСтрока.Мотиватор = ТекущаяСтрока.Мотиватор;
			НоваяСтрока["Кандидат" + Строка(СписокФизЛиц.Количество())] = ТекущаяСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТЗМотиваторов, "ТаблицаМотиваторов");
	
	НовыйЭлемент = Элементы.Добавить("ТаблицаМотиваторовКандидат" + Строка(СписокФизЛиц.Количество()), Тип("ПолеФормы"), ЭлементТаблицаМотиваторов);       
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТаблицаМотиваторов.Кандидат" + Строка(СписокФизЛиц.Количество());
	НовыйЭлемент.Заголовок = Строка(ФизЛицо);
	НовыйЭлемент.Ширина = 15;
	ДанныеКолонки.ИмяКолонкиЗначения = "Кандидат" + Строка(СписокФизЛиц.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоРазличающиесяПриИзменении(Элемент)
	
	ЭлементТаблица = Элементы.Найти("ТаблицаРезультат");
	Если ЭлементТаблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоРазличающиеся Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СовпадаютБаллы", Ложь);
		ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
		ЭлементТаблица.ОтборСтрок = ОтборСтрок;
	Иначе
		ЭлементТаблица.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделятьРазличающиесяПриИзменении(Элемент)
	
	УстановитьОформление();	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаРезультатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяКолонки = СтрЗаменить(Поле.Имя, "ТаблицаРезультат", "");
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяКолонкиЗначения", ИмяКолонки);
	ДанныеКолонки = КолонкиТаблицы.НайтиСтроки(СтруктураПоиска);
	
	Если ДанныеКолонки.Количество() = 0 Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИмяКолонкиБаллов", ИмяКолонки);
		ДанныеКолонки = КолонкиТаблицы.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	Если ДанныеКолонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ТаблицаРезультат.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ФизическоеЛицо = ДанныеКолонки[0].ФизическоеЛицо;
	ЗначениеХарактеристики = ДанныеСтроки[Строка(ДанныеКолонки[0].ИмяКолонкиЗначения)];
	
	Если НЕ ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
		ЗначениеХарактеристики = ДанныеСтроки.Требования;
	КонецЕсли;
	
	ПоказатьРасшифровку(ФизическоеЛицо, ДанныеСтроки.Характеристика, ЗначениеХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРасшифровку(ФизическоеЛицо, ХарактеристикаПерсонала, ЗначениеХарактеристики)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Вакансия", Вакансия);
	Отбор.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	Отбор.Вставить("ХарактеристикаПерсонала", ХарактеристикаПерсонала);
	Отбор.Вставить("ЗначениеХарактеристики", ЗначениеХарактеристики);
	
	ОткрытьФорму("Обработка.СравнениеХарактеристикКандидатов.Форма.ФормаРасшифровка", Отбор, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокКандидатов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Кандидаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Кандидаты КАК Кандидаты
	|ГДЕ
	|	Кандидаты.ФизическоеЛицо В(&СписокФизЛиц)
	|	И Кандидаты.Вакансия = &Вакансия";
	Запрос.УстановитьПараметр("СписокФизЛиц", СписокФизЛиц);
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокКандидатов = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокКандидатов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокКандидатов;
	
КонецФункции

#КонецОбласти
