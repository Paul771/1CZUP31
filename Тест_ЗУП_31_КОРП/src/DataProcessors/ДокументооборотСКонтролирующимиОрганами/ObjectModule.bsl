#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ПутьКОбъекту Экспорт;

Перем СоответствиеТипаСообщенияКраткомуПредставлению;

Перем ПолученныеПисьма Экспорт;
Перем ЗапросыПоКоторымПолученыОтветы Экспорт;

Перем КомпонентаЗагружена Экспорт;

#Область СлужебныеПроцедурыИФункции

Функция ЭлектронныйДокументооборотИспользуется(УчетнаяЗапись = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	КОЛИЧЕСТВО(Организации.Ссылка) КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
	                      |" +
	                      ?(УчетнаяЗапись = Неопределено, 
	                      "	И Организации.УчетнаяЗаписьОбмена <> &ПустаяУчетнаяЗаписьОбмена",
	                      "	И Организации.УчетнаяЗаписьОбмена = &УчетнаяЗаписьОбмена") +
	                      "
	                      |	И НЕ Организации.ПометкаУдаления
	                      |	И НЕ Организации.УчетнаяЗаписьОбмена.ПометкаУдаления");
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Если УчетнаяЗапись = Неопределено Тогда 
		Запрос.УстановитьПараметр("ПустаяУчетнаяЗаписьОбмена", Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("УчетнаяЗаписьОбмена", УчетнаяЗапись);
	КонецЕсли;
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если Выборка.Следующий() Тогда
		Возврат ЗначениеЗаполнено(Выборка.Получить(0));
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ОбработкаПолученияФормы(ВидОбъекта, ИмяОбъекта, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если ВидОбъекта = "Справочник" Тогда
			ИмяВидаФормы = "ФормаЭлемента";
		ИначеЕсли ВидОбъекта = "Документ" Тогда
			ИмяВидаФормы = "ФормаДокумента";
		КонецЕсли;
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		ИмяВидаФормы = "ФормаСписка";
	Иначе
		ИмяВидаФормы = ВидФормы;
	КонецЕсли;
	
	Если ФормаЗаявленияПодменена(ВидОбъекта, ИмяОбъекта, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка, ИмяВидаФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПодменяющейФормы = ВидОбъекта + "_" + ИмяОбъекта + "_" + ИмяВидаФормы;
	ПодменяющаяФорма = Метаданные().Формы.Найти(ИмяПодменяющейФормы);
	Если ПодменяющаяФорма <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = ПодменяющаяФорма;
	КонецЕсли;
	
КонецПроцедуры

Функция ФормаЗаявленияПодменена(ВидОбъекта, ИмяОбъекта, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка, ИмяВидаФормы)
	
	Если ВидОбъекта = "Документ" И ИмяОбъекта = "ЗаявлениеАбонентаСпецоператораСвязи" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЭтоРучноеЗаявление = ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("РучнойВвод");
		
		// Если есть ключ, значит это не открытие нового
		Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("Ключ") Тогда
			Ключ = Параметры.Ключ;
			ЭтоУпрощенноеЗаявление = Ключ.ЭтоУпрощенноеЗаявление;
			ЭтоНовый = Ложь;
		Иначе
			Ключ = Неопределено;
			ЭтоУпрощенноеЗаявление = Ложь;
			ЭтоНовый = Истина;
		КонецЕсли;
		
		ОпределятьФормуНаКлиенте = НЕ ЭтоРучноеЗаявление И ЭтоНовый ИЛИ ЭтоУпрощенноеЗаявление;
		
		Если ИмяВидаФормы = "ФормаДокумента" И ОпределятьФормуНаКлиенте Тогда
			// Для определения, какую форму открыть - первичное, вторичное заявление, упрощенное или ручное
			ВыбраннаяФорма = "Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.Мастер_ОпределениеОткрываемойФормы";
		Иначе
			ИмяПодменяющейФормы = ВидОбъекта + "_" + ИмяОбъекта + "_" + ИмяВидаФормы;
			ВыбраннаяФорма = "Обработка.ДокументооборотСКонтролирующимиОрганами.Форма." + ИмяПодменяющейФормы;
		КонецЕсли;
		
		Возврат Истина;
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСообщенияВведенныеНаОсновании(Сообщение, Тип = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	ТранспортноеСообщение.Ссылка
						  |ИЗ
						  |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
						  |ГДЕ
						  |	ТранспортноеСообщение.Основание = &Основание
						  |	И ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления");
	Запрос.УстановитьПараметр("Основание", Сообщение);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	Если Тип <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
						  |	И ТранспортноеСообщение.Тип = &Тип";
		Запрос.УстановитьПараметр("Тип", Тип);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеТранспортногоСообщения(Сообщение) Экспорт
	
	Если ЗначениеЗаполнено(Сообщение.ЦиклОбмена) Тогда
		Возврат "" + Сообщение.Тип + ", связанное с циклом обмена " + Сообщение.ЦиклОбмена;
	Иначе
		Возврат Сообщение;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеСообщения(Сообщение) Экспорт
	
	Тема = ?(ЗначениеЗаполнено(Сообщение.Тема), СтрШаблон(НСтр("ru = '""%1""'"), Сообщение.Тема), НСтр("ru = '<тема не указана>'"));
	Если ЗначениеЗаполнено(Сообщение.Дата) Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 от %2'"), Тема, Сообщение.Дата);
	Иначе
		Возврат Тема;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена, ТипыСообщений = Неопределено, ПомеченныеНаУдаление = Ложь, ТолькоЗавершенные = Ложь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	ТранспортноеСообщение.Ссылка,
						  |	ТранспортноеСообщение.Статус,
						  |	ТранспортноеСообщение.Тип,
						  |	ТранспортноеСообщение.ПометкаУдаления,
						  |	ТранспортноеСообщение.Дата,
						  |	ТранспортноеСообщение.ИдентификаторСообщения,
						  |	ТранспортноеСообщение.ДатаТранспорта,
						  |	ТранспортноеСообщение.Основание,
						  |	ТранспортноеСообщение.ПротоколСОшибкой,
						  |	ТранспортноеСообщение.Тема
						  |ИЗ
						  |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
						  |ГДЕ
						  |	ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена");
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	
	Если НЕ ПомеченныеНаУдаление Тогда
		Запрос.Текст = Запрос.Текст + "
							  |	И ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления";
		Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	Если ТипыСообщений <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
							  |	И ТранспортноеСообщение.Тип В (&ТипыСообщений)";
		Запрос.УстановитьПараметр("ТипыСообщений", ТипыСообщений);
	КонецЕсли;
	
	Если ТолькоЗавершенные Тогда
		Запрос.Текст = Запрос.Текст + "
							  |	И ТранспортноеСообщение.Статус <> Значение(Перечисление.СтатусыПисем.Исходящее)";
		Запрос.УстановитьПараметр("ТипыСообщений", ТипыСообщений);
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст + "
						|УПОРЯДОЧИТЬ ПО
						|	ТранспортноеСообщение.ДатаТранспорта УБЫВ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаписатьСтатусОтправкиОбъекта(докСсылка, Статус) Экспорт
	
	Если ТипЗнч(докСсылка) = Тип("Массив") Тогда
		
		Для Каждого ЭлДокСсылка Из докСсылка Цикл
			МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
			МенЗап.Объект = ЭлДокСсылка;
			МенЗап.Статус = Статус;
			МенЗап.Записать(Истина);
		КонецЦикла;
		
		Для Каждого ЭлДокСсылка Из докСсылка Цикл
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента(ЭлДокСсылка, Статус);
		КонецЦикла;
		
	Иначе
		
		МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		МенЗап.Объект = докСсылка;
		МенЗап.Статус = Статус;
		МенЗап.Записать(Истина);
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента(докСсылка, Статус);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтатусОтправкиОбъекта(Док) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|	СтатусыОтправки.Статус
						|ИЗ
						|	РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
						|ГДЕ
						|	СтатусыОтправки.Объект = &Объект");
	Запрос.УстановитьПараметр("Объект", Док);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Получить(0), Перечисления.СтатусыОтправки.ПустаяСсылка());
	
КонецФункции

Функция ПолучитьСтатусыОтправкиОбъектов(Объекты) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|	СтатусыОтправки.Объект,
						|	СтатусыОтправки.Статус
						|ИЗ
						|	РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
						|ГДЕ
						|	СтатусыОтправки.Объект В (&Объект)");
	Запрос.УстановитьПараметр("Объект", Объекты);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Объект, Выборка.Статус);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПустуюДатуЗавершенияЦиклаОбмена() Экспорт
	
	Возврат '39991231235959';
	
КонецФункции

Функция СформироватьСтрокуСостоянияТранспортногоСообщения(Сообщение) Экспорт
	
	Если Сообщение = Неопределено ИЛИ Сообщение = Документы.ТранспортноеСообщение.ПустаяСсылка() ИЛИ НЕ ЗначениеЗаполнено(Сообщение.Статус) Тогда
		Возврат "<Подтверждение отсутствует, нажмите для создания>";
	КонецЕсли;
	
	СоответствиеТипаСообщенияПредставлению = Новый Соответствие;
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП,																		"Первичное сообщение, содержащее отчетность");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО,																"Извещение о получении отчета");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО,															"Результат приема декларации");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП,															"Извещение о получении результата приема");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО,														"Результат обработки декларации");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП,														"Извещение о получении результата обработки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО,															"Подтверждение даты отправки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП,															"Извещение о получении подтверждения даты отправки");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП,																		"Первичное сообщение, содержащее сведения формы 2-НДФЛ");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО,															"Подтверждение даты отправки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО,																"Извещение о получении формы 2-НДФЛ");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО,															"Результат приема формы 2-НДФЛ");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП,																			"Обращение налогоплательщика");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО,																"Извещение о получении обращения");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО,															"Подтверждение даты отправки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО,															"Результат приема обращения");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП,																		"Представление документов");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПредставлениеНО,															"Извещение о получении представленных документов");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО,														"Подтверждение даты отправки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО,														"Результат приема представленных документов");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО,																			"Письмо налогового органа");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП,																	"Извещение о получении письма налогового органа");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО,																			"Рассылка налогового органа");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП,																	"Извещение о получении рассылки налогового органа");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП,																			"Первичное сообщение, содержащее запрос");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО,																	"Извещение о получении запроса");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО,																"Результат приема запроса");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП,															"Извещение о получении результата приема");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО,															"Ответ на запрос");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО,																"Подтверждение даты отправки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП,															"Извещение о получении подтверждения даты отправки");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР,											"Первичное сообщение, содержащее отчетность");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР,													"Квитанция о доставке отчетности");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР,																			"Протокол контроля отчетности");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР,																"Квитанция о доставке протокола контроля");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР,												"Первичное сообщение, содержащее запрос");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР,													"Квитанция о доставке запроса");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР,																	"Ответ на запрос");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР,															"Квитанция о доставке ответа на запрос");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР,																	"Первичное сообщение, содержащее письмо в ПФР");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР,															"Квитанция о доставке письма");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР,																	"Первичное сообщение, содержащее письмо от ПФР");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР,															"Квитанция о доставке письма");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка,																	"Сообщение о критической ошибке");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР,																"Уведомление об ошибке");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС,																"Уведомление об ошибке");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС,											"Первичное сообщение, содержащее отчетность");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС,														"Подтверждение даты отправки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС,												"Извещение о получении подтверждения даты отправки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС,													"Извещение о получении отчетности");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС,												"Протокол входного контроля отчетности");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС,										"Извещение о получении протокола входного контроля");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС,																	"Первичное сообщение, содержащее письмо в Росстат");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС,														"Извещение о получении письма его получателем");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС,																	"Первичное сообщение, содержащее письмо из Росстата");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС,																		"Первичное сообщение, содержащее рассылку от Росстата");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС,															"Извещение о получении письма его получателем");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС,																"Уведомление об ошибке");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.Прочее,																				"Прочее сообщение");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка(),																		"Сообщение неизвестного типа");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП,																			"Первичное сообщение, содержащее отчетность");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗаявлениеНО,																"Извещение о получении отчета");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО,															"Результат приема заявления");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП,															"Извещение о получении результата приема");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО,														"Результат обработки заявления в РФ");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП,														"Извещение о получении результата обработки заявления в РФ");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО,															"Подтверждение даты отправки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП,															"Извещение о получении подтверждения даты отправки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО,														"Сообщение об отзыве заявления в РФ");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП,														"Извещение о получении сообщения об отзыве заявления в РФ");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО,														"Результат обработки заявления в ТС");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП,														"Извещение о получении результата обработки заявления в ТС");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО,														"Результат обработки заявления");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ДокументНО,																			"Документ налогового органа");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП,																	"Извещение о получении документа налогового органа");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП,															"Результат приема документа налогового органа");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНО,															"Извещение о получении результата приема документа налогового органа");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросНаВыпискуЕРГЮЛ_ЕГРИП,															"Первичное сообщение, содержащее запрос");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросаНаВыпискуЕРГЮЛ_ЕГРИП,										"Ответ на запрос");
	
	СоответствиеТипаСообщенияОкончанию = Новый Соответствие;
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП,																		"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО,																"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО,															"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО,														"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП,														"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП,															"о");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП,																		"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО,																"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО,															"");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП,																			"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО,																"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО,															"");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП,																		"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПредставлениеНО,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО,														"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО,														"");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО,																			"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП,																	"о");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО,																			"а");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП,																	"о");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР,											"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР,													"а");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР,																			"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР,																"а");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР,												"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР,													"а");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР,																	"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР,															"а");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР,																	"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР,															"а");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР,																	"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР,															"а");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП,																			"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО,																	"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО,																"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО,															"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП,														"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО,																"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП,															"о");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС,											"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС,														"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС,												"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС,													"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС,												"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС,										"о");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС,																	"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС,														"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС,																	"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС,																		"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС,																"о");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка,																	"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР,																"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС,																"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.Прочее,																				"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка(),																		"о");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП,																			"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО,															"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО,														"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО,														"");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО,														"");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ДокументНО,																			"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП,																	"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП,															"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНО,															"о");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросНаВыпискуЕРГЮЛ_ЕГРИП,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросаНаВыпискуЕРГЮЛ_ЕГРИП,										"о");
	
	ПредставлениеТипа = СоответствиеТипаСообщенияПредставлению[Сообщение.Тип];
	Если ПредставлениеТипа = Неопределено Тогда
		ПредставлениеТипа = "Сообщение неизвестного типа";
	КонецЕсли;
	
	ТипСообщения = Сообщение.Тип;
	
	Статус = Сообщение.Статус;
	Окончание = СоответствиеТипаСообщенияОкончанию[ТипСообщения];
	Если Окончание = Неопределено Тогда
		Окончание = "о";
	КонецЕсли;
	
	ЭтоОшибкаИлиПрочееСообщение = (ТипСообщения = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка
									ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР
									ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС
									ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС
									ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.Прочее);
	
	Если Статус = Перечисления.СтатусыПисем.Сохраненное Тогда
		ТекстДопИнформация = ПредставлениеТипа + ". Создан" + Окончание + ?(НЕ ЭтоОшибкаИлиПрочееСообщение И СообщениеЗашифровано(Сообщение.Ссылка), ", зашифрован" + Окончание, "") + ", но не отправлен" + Окончание + ".";
	ИначеЕсли Статус = Перечисления.СтатусыПисем.Исходящее Тогда
		ТекстДопИнформация = ПредставлениеТипа + ". Создан" + Окончание + ?(НЕ ЭтоОшибкаИлиПрочееСообщение И СообщениеЗашифровано(Сообщение.Ссылка), ", зашифрован" + Окончание, "") + ", но не отправлен" + Окончание + ".";
	ИначеЕсли Статус = Перечисления.СтатусыПисем.Отправленное Тогда
		ТекстДопИнформация = ПредставлениеТипа + ". Отправлен" + Окончание + " " + Формат(Сообщение.ДатаТранспорта, "ДФ='дд.ММ.гггг ЧЧ:мм:сс'") + ".";
	ИначеЕсли Статус = Перечисления.СтатусыПисем.Полученное Тогда
		ТекстДопИнформация = ПредставлениеТипа + ". Получен" + Окончание + " " + Формат(Сообщение.ДатаТранспорта, "ДФ='дд.ММ.гггг ЧЧ:мм:сс'") + "." + ?(ЭтоОшибкаИлиПрочееСообщение ИЛИ СообщениеРасшифровано(Сообщение.Ссылка), "", " Не расшифрован" + Окончание + ".");
	КонецЕсли;
	
	Возврат ТекстДопИнформация;
	
КонецФункции

Функция СписокДопустимыхОрганизацийВОбъектахОбмена() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	Организации.Ссылка КАК Ссылка,
	                      |	Организации.Наименование КАК Наименование,
	                      |	Организации.УчетнаяЗаписьОбмена КАК УчетнаяЗаписьОбмена
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Организации.Наименование");
	
	
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("ПустаяУчетнаяЗапись", Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ОрганизацииПоУчетнымЗаписямПользователя() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
						  |	Организации.Ссылка КАК Ссылка,
						  |	Организации.Наименование
						  |ИЗ
						  |	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
						  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
						  |			Организации.Ссылка КАК Ссылка,
						  |			Организации.Наименование КАК Наименование,
						  |			Организации.УчетнаяЗаписьОбмена КАК УчетнаяЗаписьОбмена
						  |		ИЗ
						  |			Справочник.Организации КАК Организации
						  |		ГДЕ
						  |			Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
						  |			И Организации.УчетнаяЗаписьОбмена <> &ПустаяУчетнаяЗапись) КАК Организации
						  |		ПО ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись = Организации.УчетнаяЗаписьОбмена
						  |ГДЕ
						  |	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись.ПометкаУдаления = &ПометкаУдаления
						  |	И ПользователиУчетныхЗаписейДокументооборота.Пользователь = &Пользователь
						  |	И (НЕ Организации.Ссылка ЕСТЬ NULL)
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	Организации.Наименование");
	
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("ПустаяУчетнаяЗапись", Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПоказатьСообщение(ЦиклОбмена, ТипСообщения) Экспорт
	
	// выбираем все сообщения цикла обмена
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	ТранспортноеСообщение.Ссылка,
						  |	ТранспортноеСообщение.ДатаТранспорта,
						  |	ТранспортноеСообщение.Тип,
						  |	ТранспортноеСообщение.УчетнаяЗапись,
						  |	ТранспортноеСообщение.Статус
						  |ИЗ
						  |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
						  |ГДЕ
						  |	ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
	                      |	И ТранспортноеСообщение.ПометкаУдаления = ЛОЖЬ
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	ТранспортноеСообщение.Дата УБЫВ");
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	СообщенияЦиклаОбмена = Запрос.Выполнить().Выгрузить();
	
	// из них выбираем те, которые соответствуют маске по типам
	// если возможных типов несколько то пробуем найти сообщения каждого типа поочередно
	Если ТипЗнч(ТипСообщения) = Тип("Массив") Тогда
		СообщенияИскомогоТипа = Новый Массив;
		Для Каждого ЭлТипСообщения Из ТипСообщения Цикл
			СообщенияИскомогоТипа = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", ЭлТипСообщения));
			Если СообщенияИскомогоТипа.Количество() > 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СообщенияИскомогоТипа = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", ТипСообщения));
	КонецЕсли;
	
	// если нашли, то показываем форму
	ЧислоНайденныхСообщений = СообщенияИскомогоТипа.Количество();
	Если ЧислоНайденныхСообщений = 1 Тогда
		Если ТипЗнч(СообщенияИскомогоТипа[0].Ссылка) = Тип("ДокументСсылка.ТранспортноеСообщение") Тогда 
			Возврат СообщенияИскомогоТипа[0].Ссылка;
		КонецЕсли;
		Возврат Неопределено;
	ИначеЕсли ЧислоНайденныхСообщений > 1 Тогда
		
		СписокСообщений = Новый СписокЗначений;
		Для Каждого СообщениеИскомогоТипа Из СообщенияИскомогоТипа Цикл
			СписокСообщений.Добавить(СообщениеИскомогоТипа.Ссылка, ПредставлениеСообщения(СообщениеИскомогоТипа.Ссылка));
		КонецЦикла;
		
		Если СписокСообщений.Количество() > 0 Тогда
			Возврат СписокСообщений;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// если сообщение не найдено, то показываем либо диалог со справочной информацией, либо предупреждение
	
	// ПФР
	Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР Тогда
		Возврат СокрЛП("Первичное сообщение, содержащее файл отчетности ПФР, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР Тогда
		Возврат СокрЛП("Подтверждение получения отчетности ПФР отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР Тогда
		Возврат СокрЛП("Протокол ПФР отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР Тогда
		Возврат СокрЛП("Квитанция на протокол ПФР отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР Тогда
		Возврат СокрЛП("Первичное сообщение, содержащее письмо, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР Тогда
		Возврат СокрЛП("Квитанция на письмо отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР Тогда
		Возврат СокрЛП("Первичное сообщение, содержащее письмо, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР Тогда
		Возврат СокрЛП("Квитанция на письмо отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР Тогда
		Возврат СокрЛП("Первичное сообщение, содержащее запрос в ПФР, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР Тогда
		Возврат СокрЛП("Подтверждение получения запроса в ПФР отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР Тогда
		Возврат СокрЛП("Ответ на запрос в ПФР отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР Тогда
		Возврат СокрЛП("Квитанция на ответ на запрос в ПФР отсутствует.");
		
	// ФНС 534
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ДекларацияНП Тогда
		Возврат СокрЛП("Первичное сообщение, содержащее файл отчетности, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО Тогда
		Возврат СокрЛП("Подтверждение даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		Возврат СокрЛП("Извещение о получении подтверждения даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО Тогда
		Возврат СокрЛП("Извещение о получении отчета отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО Тогда
		Возврат СокрЛП("Сообщение, содержащее результат приема отчета, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП Тогда
		Возврат СокрЛП("Извещение о получении результата приема отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО Тогда
		Возврат СокрЛП("Сообщение, содержащее результат обработки отчета, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
		Возврат СокрЛП("Извещение о получении результата обработки отсутствует.");
		
	//ФНС 534 Документ	
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ДокументНО Тогда
		Возврат СокрЛП("Сообщение, содержащее документ налогового органа, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП Тогда
		Возврат СокрЛП("Извещение о получении документа налогового органа отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП Тогда
		Возврат СокрЛП("Сообщение, содержащее результат приема документа, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНО Тогда
		Возврат СокрЛП("Извещение о получении результата приема отсутствует.");
		
	// Заявление
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП Тогда
		Возврат СокрЛП("Первичное сообщение, содержащее заявление, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО Тогда
		Возврат СокрЛП("Подтверждение даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗаявлениеНО Тогда
		Возврат СокрЛП("Извещение о получении заявления отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО Тогда
		Возврат СокрЛП("Результат приема заявления отсутствует.");
		
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО Тогда
		Возврат СокрЛП("Результат обработки заявления отсутствует.");	
			
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО Тогда
		Возврат СокрЛП("Результат обработки заявления отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП Тогда
		Возврат СокрЛП("Извещение о получении результата обработки заявления отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО Тогда
		Возврат СокрЛП("Сообщение об отзыве заявления в РФ отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП Тогда
		Возврат СокрЛП("Извещение о получении сообщения об отзыве заявления в РФ отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО Тогда
		Возврат СокрЛП("Результат обработки заявления в ТС отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП Тогда
		Возврат СокрЛП("Извещение о получении результата обработки заявления в ТС отсутствует.");
		
	// ФНС 534 2-НДФЛ
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП Тогда
		Возврат СокрЛП("Первичное сообщение, содержащее сведения формы 2-НДФЛ, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО Тогда
		Возврат СокрЛП("Подтверждение даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО Тогда
		Возврат СокрЛП("Извещение о получении отчета отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО Тогда
		Возврат СокрЛП("Сообщение, содержащее результат приема отчета, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ОбращениеНП Тогда
		Возврат СокрЛП("Сообщение, содержащее обращение налогоплательщика, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО Тогда
		Возврат СокрЛП("Подтверждение даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		Возврат СокрЛП("Извещение о получении подтверждения даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО Тогда
		Возврат СокрЛП("Извещение о получении обращения отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО Тогда
		Возврат СокрЛП("Сообщение, содержащее результат приема обращения, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП Тогда
		Возврат СокрЛП("Извещение о получении результата приема отсутствует.");
		
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП Тогда
		Возврат СокрЛП("Сообщение, содержащее представление документов, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО Тогда
		Возврат СокрЛП("Подтверждение даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПредставлениеНО Тогда
		Возврат СокрЛП("Извещение о получении представленных документов отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО Тогда
		Возврат СокрЛП("Сообщение, содержащее результат приема представленных документов, отсутствует.");
		
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО Тогда
		Возврат СокрЛП("Сообщение, содержащее письмо налогового органа, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП Тогда
		Возврат СокрЛП("Извещение о получении письмо налогового органа отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РассылкаНО Тогда
		Возврат СокрЛП("Сообщение, содержащее рассылку налогового органа, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП Тогда
		Возврат СокрЛП("Извещение о получении рассылки налогового органа отсутствует.");
	
	// ФНС 534 ИОН
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ЗапросНП Тогда
		Возврат СокрЛП("Первичное сообщение, содержащее запрос, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО Тогда
		Возврат СокрЛП("Подтверждение даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		Возврат СокрЛП("Извещение о получении подтверждения даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО Тогда
		Возврат СокрЛП("Извещение о получении запроса отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО Тогда
		Возврат СокрЛП("Сообщение, содержащее результат приема запроса, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП Тогда
		Возврат СокрЛП("Извещение о получении результата приема отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО Тогда
		Возврат СокрЛП("Сообщение, содержащее ответ на запрос, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
		Возврат СокрЛП("Извещение о получении ответа на запрос отсутствует.");
		
	// Росстат
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС Тогда
		Возврат СокрЛП("Первичное сообщение, содержащее файл отчетности для Росстата, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС Тогда
		Возврат СокрЛП("Подтверждение даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС Тогда
		Возврат СокрЛП("Извещение о получении подтверждения даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС Тогда
		Возврат СокрЛП("Извещение о получения отчетности отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС Тогда
		Возврат СокрЛП("Протокол входного контроля отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС Тогда
		Возврат СокрЛП("Извещение о получении протокола входного контроля отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС Тогда
		Возврат СокрЛП("Первичное сообщение, содержащее письмо, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС Тогда
		Возврат СокрЛП("Извещение о получении письма отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС Тогда
		Возврат СокрЛП("Первичное сообщение, содержащее письмо, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС Тогда
		Возврат СокрЛП("Первичное сообщение, содержащее рассылку, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС Тогда
		Возврат СокрЛП("Извещение о получении письма отсутствует.");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСообщениеЦиклаОбмена(ЦиклОбмена, ТипСообщения, Основание = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	ТранспортноеСообщение.Ссылка
						  |ИЗ
						  |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
						  |ГДЕ
						  |	ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
						  |	И ТранспортноеСообщение.Тип = &Тип");
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	Запрос.УстановитьПараметр("Тип", ТипСообщения);
	
	Если Основание <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
						  |	И ТранспортноеСообщение.Основание = &Основание";
		Запрос.УстановитьПараметр("Основание", Основание);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	ТранспортноеСообщение.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.ТранспортноеСообщение.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.ТранспортноеСообщение.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ЗапросНаВводПодтверждения(ЦиклОбмена, Основание = Неопределено) Экспорт

	Если ТипЗнч(Основание) = Тип("ПеречислениеСсылка.ТипыТранспортныхСообщений") Тогда
		СообщениеОснование = ПолучитьСообщениеЦиклаОбмена(ЦиклОбмена, Основание);
		ТипСообщенияОснования = Основание;
	Иначе
		СообщениеОснование = Основание;
		ТипСообщенияОснования = Основание.Тип;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СообщениеОснование) Тогда
		ТекстПредупреждения = "Невозможно ввести подтверждение: отсутствует сообщение-основание!";
		Возврат Новый Структура("ТекстПредупреждения", ТекстПредупреждения);
	КонецЕсли;
	
	// ПФР
	Если ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР Тогда
		ТекстВопроса = "Создать подтверждение на протокол?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР Тогда
		ТекстВопроса = "Создать подтверждение на письмо?" + Символы.ПС + "При этом, сообщение будет записано.";
		Если ЭтоРассылкаПФР(СообщениеОснование) Тогда
			ТекстВопроса = ТекстВопроса + Символы.ПС + Символы.ПС
				+ НСтр("ru = 'Внимание! Это письмо является массовой рассылкой, создание подтверждения не требуется.'");
		КонецЕсли;
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР Тогда
		ТекстВопроса = "Создать подтверждение на ответ на запрос?" + Символы.ПС + "При этом, сообщение будет записано.";
	
	// ФНС 534
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО
	ИЛИ ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО Тогда
		ТекстВопроса = "Создать извещение о получении подтверждения даты отправки?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО
	ИЛИ ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО Тогда
		ТекстВопроса = "Создать извещение о получении результата приема?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО Тогда
		ТекстВопроса = "Создать извещение о получении результата обработки?" + Символы.ПС + "При этом, сообщение будет записано.";
	
	// ФНС 534 НФД
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО Тогда
		ТекстВопроса = "Создать извещение о получении подтверждения даты отправки?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО Тогда
		ТекстВопроса = "Создать извещение о получении результата приема?" + Символы.ПС + "При этом, сообщение будет записано.";
		
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО Тогда
		ТекстВопроса = "Создать извещение о получении подтверждения даты отправки?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО Тогда
		ТекстВопроса = "Создать извещение о получении результата приема?" + Символы.ПС + "При этом, сообщение будет записано.";
		
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО Тогда
		ТекстВопроса = "Создать извещение о получении письма налогового органа?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РассылкаНО Тогда
		ТекстВопроса = "Создать извещение о получении рассылки налогового органа?" + Символы.ПС + "При этом, сообщение будет записано.";
		
	// ФНС 534 ДРП (Документы реализации полномочий НО)
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ДокументНО Тогда
		ТекстВопроса = "Создать извещение о получении документа налогового органа?" + Символы.ПС + "При этом, сообщение будет записано.";
		
	// Заявление
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО Тогда
		ТекстВопроса = "Создать извещение о получении подтверждения даты отправки?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО Тогда
		ТекстВопроса = "Создать извещение о получении результата приема?" + Символы.ПС + "При этом, сообщение будет записано.";
		
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО Тогда
		ТекстВопроса = "Создать извещение о получении результата обработки заявления?" + Символы.ПС + "При этом, сообщение будет записано.";
		
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО Тогда
		ТекстВопроса = "Создать извещение о получении результата обработки заявления в РФ?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО Тогда
		ТекстВопроса = "Создать извещение о получении сообщения об отзыве заявления?" + Символы.ПС + "При этом, сообщение будет записано.";
    ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО Тогда
		ТекстВопроса = "Создать извещение о получении результата обработки заявления в ТС?" + Символы.ПС + "При этом, сообщение будет записано.";
		
	// ФНС 534 ИОН
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО Тогда
		ТекстВопроса = "Создать извещение о получении подтверждения даты отправки?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО Тогда
		ТекстВопроса = "Создать извещение о получении результата приема?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО Тогда
		ТекстВопроса = "Создать извещение о получении результата обработки?" + Символы.ПС + "При этом, сообщение будет записано.";
		
	// Росстат
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС Тогда
		ТекстВопроса = "Создать извещение о получении протокола входного контроля отчетности?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС Тогда
		ТекстВопроса = "Создать извещение о получении письма?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС Тогда
		ТекстВопроса = "Создать извещение о получении подтверждения даты отправки?" + Символы.ПС + "При этом, сообщение будет записано.";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("ТекстВопроса", ТекстВопроса);
	
КонецФункции

Функция ЭтоРассылкаПФР(СсылкаНаТранспортноеСообщениеПисьмоВходящееПФР) Экспорт
	
	ПризнакРассылка = Ложь;
	
	ВложенияОписанияКПисьму = ПолучитьВложенияТранспортногоСообщения(СсылкаНаТранспортноеСообщениеПисьмоВходящееПФР, Истина,
		Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма);
	Если ВложенияОписанияКПисьму.Количество() > 0 Тогда
		ВложенияОписаниеКПисьму = ВложенияОписанияКПисьму[0];
		
		// загружаем описание к письму
		ВремФайлОписаниеКПисьму = ПолучитьИмяВременногоФайла();
		ВложенияОписаниеКПисьму.Данные.Получить().Записать(ВремФайлОписаниеКПисьму);
		ДеревоОписанияКПисьму = ЗагрузитьXMLВДеревоЗначений(ВремФайлОписаниеКПисьму);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВремФайлОписаниеКПисьму);
		Если ДеревоОписанияКПисьму <> Неопределено Тогда
			// извлекаем категорию из описания письма
			УзелОписаниеПисьма = ДеревоОписанияКПисьму.Строки.Найти("описаниеПисьма", "Имя");
			Если УзелОписаниеПисьма <> Неопределено Тогда
				УзелКатегорияПисьма = УзелОписаниеПисьма.Строки.Найти("категорияПисьма", "Имя");
				Если УзелКатегорияПисьма <> Неопределено Тогда
					СтрКатегорияПисьма = XMLЗначениеВнутр(Тип("Строка"), УзелКатегорияПисьма.Значение);
					ПризнакРассылка = (нрег(СтрКатегорияПисьма) = "рассылка");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПризнакРассылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВНЕШНИМИ ЭЛЕКТРОННЫМИ ПРЕДСТАВЛЕНИЯМИ
// Перенесена на форму

Процедура ДобавитьЭлектронноеПредставлениеВХранилище(Владелец, ИмяФайла, Данные, ТипФайлаОтчетности = Неопределено) Экспорт
	МенеджерЗаписи = РегистрыСведений.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЭлектронноеПредставление = Владелец;
	МенеджерЗаписи.ИмяФайла = ИмяФайла;
	Если ТипЗнч(Данные) = Тип("ХранилищеЗначения") Тогда 
		МенеджерЗаписи.Данные = Данные;
	ИначеЕсли ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда 
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
	КонецЕсли;
	МенеджерЗаписи.Размер = ОпределитьРазмер(Данные);
	МенеджерЗаписи.ТипФайлаОтчетности = ТипФайлаОтчетности;
	МенеджерЗаписи.Записать(Истина);
КонецПроцедуры

Процедура ОчиститьЭлектронныеПредставленияВХранилище(Владелец) Экспорт
	
	НаборЗаписей = РегистрыСведений.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлектронноеПредставление.Установить(Владелец);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ИзвлечьЭлектронноеПредставлениеИзХранилища(Владелец, ИмяФайла, Данные, ВАрхиве = Ложь) Экспорт
	
	ИмяФайла = "";
	Данные = Неопределено;
	ВАрхиве = Ложь;
	
	Представления = ИзвлечьЭлектронныеПредставленияИзХранилища(Владелец);
	Если Представления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = СокрЛП(Представления[0].ИмяФайла);
	Данные = Представления[0].Данные;
	ВАрхиве = Представления[0].ВАрхиве;
	
КонецПроцедуры

Функция ИзвлечьЭлектронныеПредставленияИзХранилища(Владелец, Знач УникальныйИдентификатор = Неопределено) Экспорт
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("ИмяФайла");
	ТаблицаРезультат.Колонки.Добавить("Данные");
	ТаблицаРезультат.Колонки.Добавить("ТипФайлаОтчетности");
	ТаблицаРезультат.Колонки.Добавить("ВАрхиве");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ИмяФайла,
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ТипФайлаОтчетности
						  |	, ВЫБОР
						  |		КОГДА СостояниеОбъектов.Архивный ЕСТЬ NULL ТОГДА Ложь
						  |		КОГДА СостояниеОбъектов.Архивный = Ложь ТОГДА Ложь
						  |	ИНАЧЕ
						  |		Истина
						  |	КОНЕЦ ВАрхиве
						  |ИЗ
	                      |	РегистрСведений.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов КАК ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПризнакиАрхивированияФайловДОСКонтролирующимиОрганами КАК СостояниеОбъектов
						  |			ПО 		(СостояниеОбъектов.Объект = ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ЭлектронноеПредставление)
						  |				И	(СостояниеОбъектов.ИмяФайла = ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ИмяФайла)
						  |				И	(СостояниеОбъектов.Владелец = Значение(Перечисление.ВидыАрхивируемыхМетаданныхДО.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов))
						  |
	                      |ГДЕ
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ЭлектронноеПредставление = &ЭлектронноеПредставление");
	
	Запрос.УстановитьПараметр("ЭлектронноеПредставление", Владелец);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаРезультат.Добавить();
			НоваяСтрока.ИмяФайла 			= Выборка.ИмяФайла;
			НоваяСтрока.ТипФайлаОтчетности 	= Выборка.ТипФайлаОтчетности;
			НоваяСтрока.ВАрхиве 			= Выборка.ВАрхиве;
			Если Выборка.ВАрхиве Тогда
				Данные 			= Base64Значение("");
			Иначе
				Данные 			= ДанныеОдногоФайлаЭлектронногоПредставления(Владелец, Выборка.ИмяФайла);
			КонецЕсли;
			Если УникальныйИдентификатор = Неопределено Тогда
				НоваяСтрока.Данные 			= Данные;
			Иначе
				Если Выборка.ВАрхиве Тогда
					НоваяСтрока.Данные 			= Неопределено;
				Иначе
					НоваяСтрока.Данные 			= АдресХранилищаФайлаЭлектронногоПредставления(Владелец, Выборка.ИмяФайла, УникальныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ТаблицаРезультат;
		
	КонецЕсли;
	
КонецФункции

//Извлекает данные как адрес
Функция ИзвлечьЭлектронныеПредставленияВХранилище(Владелец, УникальныйИдентификатор) Экспорт
	
	Возврат ИзвлечьЭлектронныеПредставленияИзХранилища(Владелец, УникальныйИдентификатор);
	
КонецФункции

Функция ПолучитьИменаФайловЭлектронныхПредставленийВХранилище(Владелец) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ИмяФайла
	                      |ИЗ
	                      |	РегистрСведений.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов КАК ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов
	                      |ГДЕ
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ЭлектронноеПредставление = &ЭлектронноеПредставление");
	
	Запрос.УстановитьПараметр("ЭлектронноеПредставление", Владелец);
	Выборка = Запрос.Выполнить().Выгрузить();
	Возврат Выборка.ВыгрузитьКолонку("ИмяФайла");
	
КонецФункции

Функция ДанныеОдногоФайлаЭлектронногоПредставления(Владелец, ИмяФайла) Экспорт
	
	Данные = Неопределено;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.Данные КАК ДанныеХранилище
						  |	, ВЫБОР
						  |		КОГДА СостояниеОбъектов.Архивный ЕСТЬ NULL ТОГДА Ложь
						  |		КОГДА СостояниеОбъектов.Архивный = Ложь ТОГДА Ложь
						  |	ИНАЧЕ
						  |		Истина
						  |	КОНЕЦ ВАрхиве
	                      |ИЗ
	                      |	РегистрСведений.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов КАК ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПризнакиАрхивированияФайловДОСКонтролирующимиОрганами КАК СостояниеОбъектов
						  |			ПО 		(СостояниеОбъектов.Объект = ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ЭлектронноеПредставление)
						  |				И	(СостояниеОбъектов.ИмяФайла = ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ИмяФайла)
						  |				И	(СостояниеОбъектов.Владелец = Значение(Перечисление.ВидыАрхивируемыхМетаданныхДО.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов))
						  |
	                      |ГДЕ
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ЭлектронноеПредставление = &ЭлектронноеПредставление
	                      |	И ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ИмяФайла = &ИмяФайла");
	
	Запрос.УстановитьПараметр("ЭлектронноеПредставление", Владелец);
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВАрхиве Тогда
			Возврат Неопределено;
		Иначе
			Данные = Выборка.ДанныеХранилище.Получить();
		КонецЕсли;
		Прервать;
	КонецЦикла;
		
	Возврат Данные;
	
КонецФункции

Функция АдресХранилищаФайлаЭлектронногоПредставления(Владелец, ИмяФайла, УникальныйИдентификатор) Экспорт
	
	Данные = ДанныеОдногоФайлаЭлектронногоПредставления(Владелец, ИмяФайла);
	
	Если Данные <> Неопределено Тогда
		Возврат ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	КонецЕсли;
		
	Возврат Данные;
	
КонецФункции

Функция ИзвлечьИменаФайловИзХранилища(Владелец) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ИмяФайла,
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ТипФайлаОтчетности
	                      |ИЗ
	                      |	РегистрСведений.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов КАК ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов
	                      |ГДЕ
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ЭлектронноеПредставление = &ЭлектронноеПредставление");
	
	Запрос.УстановитьПараметр("ЭлектронноеПредставление", Владелец);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультат.Колонки.Добавить("Данные");
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция КоличествоФайловВКомплекте(Владелец) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	КОЛИЧЕСТВО(ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ИмяФайла) КАК КоличествоФайлов
	                      |ИЗ
	                      |	РегистрСведений.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов КАК ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов
	                      |ГДЕ
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ЭлектронноеПредставление = &ЭлектронноеПредставление");
	Запрос.УстановитьПараметр("ЭлектронноеПредставление", Владелец);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаРезультат[0].КоличествоФайлов;
	
КонецФункции

Функция РазмерФайловВКомплекте(Владелец) Экспорт
	
	Размер = 0;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	СУММА(ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.Размер) КАК Размер
	                      |ИЗ
	                      |	РегистрСведений.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов КАК ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов
	                      |ГДЕ
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ЭлектронноеПредставление = &ЭлектронноеПредставление");
	Запрос.УстановитьПараметр("ЭлектронноеПредставление", Владелец);
	ТаблицаРезультат = Запрос.Выполнить().Выбрать();
	
	Если ТаблицаРезультат.Количество() = 0 Тогда
		Возврат Размер;
	Иначе
		
		Пока ТаблицаРезультат.Следующий() Цикл
			Если ЗначениеЗаполнено(ТаблицаРезультат.Размер) Тогда
				Размер = Размер + ТаблицаРезультат.Размер;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Размер;
		
	КонецЕсли;
	
КонецФункции

Функция ПечатьИзЭлектронногоПредставленияНеПоддерживается(ВидОтчета) Экспорт
	
	Если ПолучитьСписокОтчетовПоддерживающихПечатьИзЭлектронногоПредставления().Найти(ВидОтчета) = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокОтчетовПоддерживающихПечатьИзЭлектронногоПредставления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОтправляемыхДокументов.Ссылка
	|ИЗ
	|	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
	|ГДЕ
	|	НЕ ВидыОтправляемыхДокументов.ПометкаУдаления
	|	И ВидыОтправляемыхДокументов.Предопределенный
	|	И ВидыОтправляемыхДокументов.ТипДокумента В (ЗНАЧЕНИЕ(Перечисление.ТипыОтправляемыхДокументов.БухгалтерскаяОтчетность), ЗНАЧЕНИЕ(Перечисление.ТипыОтправляемыхДокументов.ПрочаяОтчетностьФНС))
	|	И НЕ ВидыОтправляемыхДокументов.Родитель В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УдалитьОтчетностьПоАлкоголю))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыОтправляемыхДокументов.Наименование";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции


//////////////////////////////////////////////////////////////////////////////////
//// РАБОТА С НЕФОРМАЛИЗОВАННЫМИ ДОКУМЕНТАМИ
////

Функция ПолучитьВложениеНеформализованногоДокумента(НеформализованныйДокумент, ИмяФайла, ХранилищеФайла, Тип = Неопределено, Размер = Неопределено, ВАрхиве = Ложь) Экспорт
	
	ТаблицаЗапроса = ПолучитьВложенияНеформализованногоДокумента(НеформализованныйДокумент, Неопределено, Истина);
	
	ИмяФайла = "";
	ХранилищеФайла = Неопределено;
	Размер = Неопределено;
	ВАрхиве = Ложь;
		
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		ИмяФайла = ТаблицаЗапроса[0].ИмяФайла;
		Тип = ТаблицаЗапроса[0].Тип;
		Размер = ТаблицаЗапроса[0].Размер;
		ВАрхиве = ТаблицаЗапроса[0].ВАрхиве;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДобавитьВложенияПисьма(Письмо, ИмяФайла, Данные, Тип, Размер = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Письмо) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Размер = Неопределено Тогда
		Размер = ОпределитьРазмер(Данные);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	МенеджерЗаписи = РегистрыСведений.ВложенияНеформализованныхДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НеформализованныйДокумент = Письмо;
	МенеджерЗаписи.ИмяФайла = ИмяФайла;
	МенеджерЗаписи.Тип = Тип;
	МенеджерЗаписи.Размер = Размер;
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("ХранилищеЗначения") Тогда
		ДвоичныеДанныеФайла = Данные.Получить();
	ИначеЕсли ТипДанных = Тип("Строка") Тогда
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Данные);
	Иначе
		ДвоичныеДанныеФайла = Данные;
	КонецЕсли;
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
	
	КомпонентыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
	УникальноеИмяФайлаБезРасширения = ОбщегоНазначенияЭДКОКлиентСервер.УникальнаяСтрока(КомпонентыИмениФайла.ИмяБезРасширения, 150);
	РасширениеФайлаБезТочки = Сред(КомпонентыИмениФайла.Расширение, 2);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", 						Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов", 				Письмо);
	ПараметрыФайла.Вставить("ИмяБезРасширения", 			УникальноеИмяФайлаБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", 			РасширениеФайлаБезТочки);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	Неопределено);
	
	ИнформацияОбОбновляемомФайле = Новый Структура;
	ИнформацияОбОбновляемомФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	ИнформацияОбОбновляемомФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
	ИнформацияОбОбновляемомФайле.Вставить("ИмяБезРасширения", 				УникальноеИмяФайлаБезРасширения);
	ИнформацияОбОбновляемомФайле.Вставить("Расширение", 					РасширениеФайлаБезТочки);
	
	Попытка
		МенеджерЗаписи.Записать(Истина);
		
		МассивФайлов = ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(
			Письмо,
			"ПерепискаСКонтролирующимиОрганамиПрисоединенныеФайлы",
			ИмяФайла);
		
		Если МассивФайлов.Количество() > 0 Тогда
			ПрисоединенныйФайл = МассивФайлов[0];
			РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОбОбновляемомФайле);
			
		Иначе
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла);
		КонецЕсли;
		
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		
		ПрисоединенныйФайлОбъект.Тип = Тип;
		ПрисоединенныйФайлОбъект.ИсходноеИмяФайла = ИмяФайла;
		
		ПрисоединенныйФайлОбъект.Записать();
	Исключение
		ОтменитьТранзакцию();
		УдалитьИзВременногоХранилища(АдресФайла);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось сохранить в информационной базе вложение %1 письма %2!%3'"),
																					Символ(34) + ИмяФайла + Символ(34),
																					Символ(34) + Письмо + Символ(34),
																					Символы.ПС + ОписаниеОшибки());
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	УдалитьИзВременногоХранилища(АдресФайла);
	Возврат Истина;
	
КонецФункции

Функция ИзвлечьИменаФайловНФДИзОписания(ФайлОписания) Экспорт
	
	// выгружаем файл на диск, при необходимости
	ТипЗнчФайлОписания = ТипЗнч(ФайлОписания);
	Если ТипЗнчФайлОписания = Тип("ДвоичныеДанные") Тогда
		ВремФайл = ПолучитьИмяВременногоФайла();
		ФайлОписания.Записать(ВремФайл);
		НеобходимоУдалитьФайлОписания = Истина;
	ИначеЕсли ТипЗнчФайлОписания = Тип("ХранилищеЗначения") Тогда
		ВремФайл = ПолучитьИмяВременногоФайла();
		ФайлОписания.Получить().Записать(ВремФайл);
		НеобходимоУдалитьФайлОписания = Истина;
	Иначе
		ВремФайл = ФайлОписания;
		НеобходимоУдалитьФайлОписания = Ложь;
	КонецЕсли;
		
	// читаем содержимое
	Текст = НовыйЧтениеТекстаНаСервере(ВремФайл);
	СодержимоеФайлаОписания = Текст.Прочитать();
	Текст.Закрыть();
	
	// удаляем файл, при необходимости
	Если НеобходимоУдалитьФайлОписания Тогда
		УдалитьФайлы(ВремФайл);
	КонецЕсли;
	
	// анализируем файл
	Результат = Новый Соответствие;
	Для Инд = 1 По СтрЧислоСтрок(СодержимоеФайлаОписания) Цикл
		ТекСтр = СтрПолучитьСтроку(СодержимоеФайлаОписания, Инд);
		ВхождениеДвоеточия = СтрНайти(ТекСтр, ":");
		Если ВхождениеДвоеточия <> 0 Тогда
			Ключ = Лев(ТекСтр, ВхождениеДвоеточия - 1);
			Значение = Сред(ТекСтр, ВхождениеДвоеточия + 1);
			Если НЕ ПустаяСтрока(Ключ) И НЕ ПустаяСтрока(Значение) Тогда
				Результат.Вставить(СокрЛП(Ключ), СокрЛП(Значение));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// продублирована в контейнере
Функция ПолучитьВложенияНеформализованногоДокумента(ДокНФД, ИмяФайла = Неопределено, СДанными = Ложь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	ВложенияНеформализованныхДокументов.ИмяФайла,
						  |	ВложенияНеформализованныхДокументов.Размер,
						  |	ВложенияНеформализованныхДокументов.Тип
						  |	, ВЫБОР
					  	  |		КОГДА СостояниеОбъектов.Архивный ЕСТЬ NULL ТОГДА Ложь
					   	  |		КОГДА СостояниеОбъектов.Архивный = Ложь ТОГДА Ложь
					   	  |	ИНАЧЕ
					   	  |		Истина
					   	  |	КОНЕЦ ВАрхиве");
	Если СДанными Тогда
		Запрос.Текст = Запрос.Текст + ",
						  |	ВложенияНеформализованныхДокументов.Данные";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
						  |ИЗ
						  |	РегистрСведений.ВложенияНеформализованныхДокументов КАК ВложенияНеформализованныхДокументов
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПризнакиАрхивированияФайловДОСКонтролирующимиОрганами КАК СостояниеОбъектов
						  |			ПО 		(СостояниеОбъектов.Объект = ВложенияНеформализованныхДокументов.НеформализованныйДокумент)
						  |				И	(СостояниеОбъектов.ИмяФайла = ВложенияНеформализованныхДокументов.ИмяФайла)
						  |				И	(СостояниеОбъектов.Владелец = Значение(Перечисление.ВидыАрхивируемыхМетаданныхДО.ВложенияНеформализованныхДокументов))
						  |
						  |ГДЕ
						  |	ВложенияНеформализованныхДокументов.НеформализованныйДокумент = &НеформализованныйДокумент";
	
	Если ИмяФайла <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
						  |	И ВложенияНеформализованныхДокументов.ИмяФайла " + ?(ТипЗнч(ИмяФайла) = Тип("Строка"), "=", "В") + " (&ИмяФайла)";
		Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	КонецЕсли;
	Запрос.УстановитьПараметр("НеформализованныйДокумент", ДокНФД);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если СДанными Тогда
		ПрочитатьПрисоединенныеФайлы = Ложь;
		Для каждого СтрокаРезультата Из Результат Цикл
			Если СтрокаРезультата.Данные.Получить() = Неопределено Тогда
				ПрочитатьПрисоединенныеФайлы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПрочитатьПрисоединенныеФайлы Тогда
			ИсходноеИмяФайла = ?(ТипЗнч(ИмяФайла) = Тип("Строка"), ИмяФайла, Неопределено);
			ТаблицаФайлов = ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(
				ДокНФД,
				"ПерепискаСКонтролирующимиОрганамиПрисоединенныеФайлы",
				ИсходноеИмяФайла,
				"ИсходноеИмяФайла");
			
			Для каждого СтрокаТаблицы Из ТаблицаФайлов Цикл
				СтрокаТаблицы.ИсходноеИмяФайла = ВРЕГ(СтрокаТаблицы.ИсходноеИмяФайла);
			КонецЦикла;
			
			Для каждого СтрокаРезультата Из Результат Цикл
				Если СтрокаРезультата.Данные.Получить() = Неопределено Тогда
					ИсходноеИмяФайла = ВРЕГ(СтрокаРезультата.ИмяФайла);
					
					СтрокаТаблицы = ТаблицаФайлов.Найти(ИсходноеИмяФайла, "ИсходноеИмяФайла");
					Если СтрокаТаблицы <> Неопределено Тогда
						ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СтрокаТаблицы.Ссылка);
						СтрокаРезультата.Данные = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(0));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение,
													Тип,
													Данные,
													ИмяФайла,
													Размер = Неопределено,
													ЭЦПИмяПодписанногоФайла = Неопределено,
													ЭЦПСертификат = Неопределено,
													ЭЦПСтатусПроверки = Неопределено,
													ЭЦПЭтоПодписьАбонента = Неопределено,
													ТипФайлаОтчетностиПФР = Неопределено,
													Идентификатор = Неопределено,
													ТипСодержимогоФайла = Неопределено) Экспорт
	
	Если Размер = Неопределено Тогда
		Размер = ОпределитьРазмер(Данные);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	МенеджерЗаписи = РегистрыСведений.СодержимоеТранспортныхКонтейнеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТранспортноеСообщение = ТранспортноеСообщение;
	МенеджерЗаписи.ИмяФайла = ИмяФайла;
	МенеджерЗаписи.Тип = Тип;
	МенеджерЗаписи.Размер = Размер;
	МенеджерЗаписи.Идентификатор = Идентификатор;
	
	Если ЭЦПСертификат <> Неопределено Тогда
		МенеджерЗаписи.ЭЦПСертификат = ЭЦПСертификат;
	КонецЕсли;
	
	Если ЭЦПСтатусПроверки <> Неопределено Тогда
		МенеджерЗаписи.ЭЦПСтатусПроверки = ЭЦПСтатусПроверки;
	КонецЕсли;
	
	Если ЭЦПИмяПодписанногоФайла <> Неопределено Тогда
		МенеджерЗаписи.ЭЦПИмяПодписанногоФайла = ЭЦПИмяПодписанногоФайла;
	КонецЕсли;
	
	Если ЭЦПЭтоПодписьАбонента <> Неопределено Тогда
		МенеджерЗаписи.ЭЦПЭтоПодписьАбонента = ЭЦПЭтоПодписьАбонента;
	КонецЕсли;
	
	Если ТипФайлаОтчетностиПФР <> Неопределено Тогда
		МенеджерЗаписи.ТипФайлаОтчетностиПФР = ТипФайлаОтчетностиПФР;
	КонецЕсли;
	
	ТипСодержимогоФайлаПриведенный = ТипСодержимогоФайла;
	Если ТипСодержимогоФайлаПриведенный <> Неопределено Тогда
		Если ТипЗнч(ТипСодержимогоФайлаПриведенный) = Тип("Строка") Тогда
			ТипСодержимогоФайлаПриведенный = ТипСодержимогоПоСтроке(ТипСодержимогоФайла);
		КонецЕсли;
		МенеджерЗаписи.ТипСодержимогоФайла = ТипСодержимогоФайлаПриведенный;
	КонецЕсли;
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("ХранилищеЗначения") Тогда // если хранилище значения
		ДвоичныеДанныеФайла = Данные.Получить();
	ИначеЕсли ТипДанных = Тип("Строка") Тогда // если полное имя файла
		Если ЭтоАдресВременногоХранилища(Данные) Тогда
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Данные);
		Иначе
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Данные);
		КонецЕсли;
		
		Если (Размер = Неопределено Или Размер = 0) И (ТипЗнч(ДвоичныеДанныеФайла) = Тип("ДвоичныеДанные")) Тогда
			МенеджерЗаписи.Размер = ДвоичныеДанныеФайла.Размер();
		КонецЕсли;
	ИначеЕсли ТипДанных = Тип("Структура") Тогда
		
		ДвоичныеДанныеФайла = ДвоичныеДанныеИзСтроки64НаСервере(Данные.Строка64);
		
		Если (Размер = Неопределено Или Размер = 0) И (ТипЗнч(ДвоичныеДанныеФайла) = Тип("ДвоичныеДанные")) Тогда
			МенеджерЗаписи.Размер = ДвоичныеДанныеФайла.Размер();
		КонецЕсли;
	Иначе // если двоичные данные
		ДвоичныеДанныеФайла = Данные;
	КонецЕсли;
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
	
	КомпонентыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
	УникальноеИмяФайлаБезРасширения = ОбщегоНазначенияЭДКОКлиентСервер.УникальнаяСтрока(КомпонентыИмениФайла.ИмяБезРасширения, 150);
	РасширениеФайлаБезТочки = Сред(КомпонентыИмениФайла.Расширение, 2);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", 						Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов", 				ТранспортноеСообщение);
	ПараметрыФайла.Вставить("ИмяБезРасширения", 			УникальноеИмяФайлаБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", 			РасширениеФайлаБезТочки);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	Неопределено);
	
	ИнформацияОбОбновляемомФайле = Новый Структура;
	ИнформацияОбОбновляемомФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	ИнформацияОбОбновляемомФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
	ИнформацияОбОбновляемомФайле.Вставить("ИмяБезРасширения", 				УникальноеИмяФайлаБезРасширения);
	ИнформацияОбОбновляемомФайле.Вставить("Расширение", 					РасширениеФайлаБезТочки);
	
	Попытка
		МенеджерЗаписи.Записать(Истина);
		
		МассивФайлов = ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(
			ТранспортноеСообщение,
			"ТранспортноеСообщениеПрисоединенныеФайлы",
			ИмяФайла);
		
		Если МассивФайлов.Количество() > 0 Тогда
			ПрисоединенныйФайл = МассивФайлов[0];
			РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОбОбновляемомФайле);
			
		Иначе
			НоваяСсылкаНаФайл = РаботаСФайлами.НоваяСсылкаНаФайл(ТранспортноеСообщение, "ТранспортноеСообщениеПрисоединенныеФайлы");
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла,,, НоваяСсылкаНаФайл);
		КонецЕсли;
		
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		
		ПрисоединенныйФайлОбъект.Тип = Тип;
		ПрисоединенныйФайлОбъект.Идентификатор = Идентификатор;
		
		Если ЭЦПСертификат <> Неопределено Тогда
			ПрисоединенныйФайлОбъект.ЭЦПСертификат = ЭЦПСертификат;
		КонецЕсли;
		
		Если ЭЦПСтатусПроверки <> Неопределено Тогда
			ПрисоединенныйФайлОбъект.ЭЦПСтатусПроверки = ЭЦПСтатусПроверки;
		КонецЕсли;
		
		Если ЭЦПИмяПодписанногоФайла <> Неопределено Тогда
			ПрисоединенныйФайлОбъект.ЭЦПИмяПодписанногоФайла = ЭЦПИмяПодписанногоФайла;
		КонецЕсли;
		
		Если ЭЦПЭтоПодписьАбонента <> Неопределено Тогда
			ПрисоединенныйФайлОбъект.ЭЦПЭтоПодписьАбонента = ЭЦПЭтоПодписьАбонента;
		КонецЕсли;
		
		Если ТипФайлаОтчетностиПФР <> Неопределено Тогда
			ПрисоединенныйФайлОбъект.ТипФайлаОтчетностиПФР = ТипФайлаОтчетностиПФР;
		КонецЕсли;
		
		Если ТипСодержимогоФайлаПриведенный <> Неопределено Тогда
			ПрисоединенныйФайлОбъект.ТипСодержимогоФайла = ТипСодержимогоФайлаПриведенный;
		КонецЕсли;
		
		ПрисоединенныйФайлОбъект.ИсходноеИмяФайла = ИмяФайла;
		
		ПрисоединенныйФайлОбъект.Записать();
	Исключение

		ОтменитьТранзакцию();
		УдалитьИзВременногоХранилища(АдресФайла);
		ИнформацияОбОшибке = ИнформацияОбОшибке().Описание;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось сохранить в информационной базе содержимое транспортного контейнера сообщения %1!%2'"),
			Символ(34) + ТранспортноеСообщение.Ссылка + Символ(34),
			Символы.ПС + ИнформацияОбОшибке);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	УдалитьИзВременногоХранилища(АдресФайла);
	Возврат Истина;
	
КонецФункции

Функция ОпределитьРазмер(Данные) Экспорт
	
	Размер = 0;
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(Данные) Тогда // если это адрес во временном хранилище
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(Данные);
			Размер = ДвоичныеДанные.Размер();
		Иначе // если это файл на сервере
			ОбъектФайл = Новый Файл(Данные);
			Размер = ОбъектФайл.Размер();
		КонецЕсли;
	ИначеЕсли ТипДанных = Тип("ХранилищеЗначения") Тогда
		ДвоичныеДанные = Данные.Получить();
		Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
			Возврат 0;
		КонецЕсли;
		Размер = ДвоичныеДанные.Размер();
	ИначеЕсли ТипДанных = Тип("ДвоичныеДанные") Тогда
		Размер = Данные.Размер();
	КонецЕсли;
	
	Возврат Размер;
	
КонецФункции

Функция ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение, СДанными = Ложь, ФильтрПоТипу = Неопределено, ИмяФайла = Неопределено, САдресом = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					  |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
					  |	СодержимоеТранспортныхКонтейнеров.Размер,
					  |	СодержимоеТранспортныхКонтейнеров.Тип,
					  |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат,
					  |	СодержимоеТранспортныхКонтейнеров.ЭЦПСтатусПроверки,
					  |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
					  |	СодержимоеТранспортныхКонтейнеров.ЭЦПЭтоПодписьАбонента,
					  |	СодержимоеТранспортныхКонтейнеров.ТипФайлаОтчетностиПФР,
					  |	СодержимоеТранспортныхКонтейнеров.Идентификатор,
					  |	СодержимоеТранспортныхКонтейнеров.ТипСодержимогоФайла,
					  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение
					  |	, ВЫБОР
					  |		КОГДА СостояниеОбъектов.Архивный ЕСТЬ NULL ТОГДА Ложь
					  |		КОГДА СостояниеОбъектов.Архивный = Ложь ТОГДА Ложь
					  |	ИНАЧЕ
					  |		Истина
					  |	КОНЕЦ ВАрхиве";
	Если СДанными Тогда
		Запрос.Текст = Запрос.Текст + ",
					  |	СодержимоеТранспортныхКонтейнеров.Данные";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
					  |ИЗ
					  |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
					  |
					  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПризнакиАрхивированияФайловДОСКонтролирующимиОрганами КАК СостояниеОбъектов
					  |			ПО 		(СостояниеОбъектов.Объект = СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение)
					  |				И	(СостояниеОбъектов.ИмяФайла = СодержимоеТранспортныхКонтейнеров.ИмяФайла)
					  |				И	(СостояниеОбъектов.Владелец = Значение(Перечисление.ВидыАрхивируемыхМетаданныхДО.СодержимоеТранспортныхКонтейнеров))
					  |
					  |ГДЕ
					  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение В (&ТранспортноеСообщение)";
	
	Если ИмяФайла <> Неопределено Тогда
		Если ТипЗнч(ИмяФайла) = Тип("СписокЗначений") ИЛИ ТипЗнч(ИмяФайла) = Тип("Массив") Тогда
			Запрос.Текст = Запрос.Текст + "
					  	  |	И СодержимоеТранспортныхКонтейнеров.ИмяФайла В (&парамИмяФайла)";
			Запрос.УстановитьПараметр("парамИмяФайла", ИмяФайла);
		ИначеЕсли ТипЗнч(ИмяФайла) = Тип("Строка") И ЗначениеЗаполнено(ИмяФайла) Тогда
			Запрос.Текст = Запрос.Текст + "
					  	  |	И СодержимоеТранспортныхКонтейнеров.ИмяФайла = &парамИмяФайла";
			Запрос.УстановитьПараметр("парамИмяФайла", ИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
	Если ФильтрПоТипу <> Неопределено Тогда
		Если ТипЗнч(ФильтрПоТипу) = Тип("СписокЗначений") ИЛИ ТипЗнч(ФильтрПоТипу) = Тип("Массив") Тогда
			Запрос.Текст = Запрос.Текст + "
					  |	И СодержимоеТранспортныхКонтейнеров.Тип В(&ТипыТранспортныхСообщений)";
			Запрос.УстановитьПараметр("ТипыТранспортныхСообщений", ФильтрПоТипу);
		Иначе
			Запрос.Текст = Запрос.Текст + "
					  |	И СодержимоеТранспортныхКонтейнеров.Тип = &ТипТранспортногоСообщения";
			Запрос.УстановитьПараметр("ТипТранспортногоСообщения", ФильтрПоТипу);
		КонецЕсли;
	КонецЕсли;
	
	ТипСообщения = ТипЗнч(ТранспортноеСообщение);
	Если ТипСообщения = Тип("ДокументСсылка.ТранспортноеСообщение") ИЛИ ТипСообщения = Тип("Массив") Тогда
		ТранспортноеСообщениеСсылкаИлиМассив = ТранспортноеСообщение;
	Иначе
		ТранспортноеСообщениеСсылкаИлиМассив = ТранспортноеСообщение.Ссылка;
	КонецЕсли;
	Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщениеСсылкаИлиМассив);
	
	ТаблицаВложений = Запрос.Выполнить().Выгрузить();
	
	Если СДанными Тогда
		ТранспортныеСообщенияСПрисоединеннымиФайлами = Новый Массив;
		Для каждого СтрокаТаблицыВложений Из ТаблицаВложений Цикл
			Если ТранспортныеСообщенияСПрисоединеннымиФайлами.Найти(СтрокаТаблицыВложений.ТранспортноеСообщение) = Неопределено
				И СтрокаТаблицыВложений.Данные.Получить() = Неопределено Тогда
				
				ТранспортныеСообщенияСПрисоединеннымиФайлами.Добавить(СтрокаТаблицыВложений.ТранспортноеСообщение);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаФайлов = Неопределено;
		Если ТранспортныеСообщенияСПрисоединеннымиФайлами.Количество() > 0 Тогда
			ТаблицаФайлов = ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(
				ТранспортныеСообщенияСПрисоединеннымиФайлами,
				"ТранспортноеСообщениеПрисоединенныеФайлы",
				,
				"ВладелецФайла, ИсходноеИмяФайла");
			
			Для каждого СтрокаТаблицы Из ТаблицаФайлов Цикл
				СтрокаТаблицы.ИсходноеИмяФайла = ВРЕГ(СтрокаТаблицы.ИсходноеИмяФайла);
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаТаблицыВложений Из ТаблицаВложений Цикл
			Если СтрокаТаблицыВложений.Данные.Получить() = Неопределено Тогда
				ИсходноеИмяФайла = ВРЕГ(СтрокаТаблицыВложений.ИмяФайла);
				
				ПараметрыОтбора = Новый Структура("ВладелецФайла, ИсходноеИмяФайла",
					СтрокаТаблицыВложений.ТранспортноеСообщение, ИсходноеИмяФайла);
				СтрокиТаблицы = ТаблицаФайлов.НайтиСтроки(ПараметрыОтбора);
				Если СтрокиТаблицы.Количество() > 0 Тогда
					ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СтрокиТаблицы[0].Ссылка);
					СтрокаТаблицыВложений.Данные = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(0));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если САдресом Тогда
		ТаблицаВложений.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
		Для каждого Вложение Из ТаблицаВложений Цикл
			Вложение.Адрес = ПоместитьВоВременноеХранилище(Вложение.Данные.Получить(), Новый УникальныйИдентификатор);
		КонецЦикла; 
	КонецЕсли;
	
	Возврат ТаблицаВложений;
	
КонецФункции

Функция ПолучитьТранспортныйКонтейнер(ТранспортноеСообщение, СДанными = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					  |	ТранспортныеКонтейнеры.ИмяФайла
					  |	, ВЫБОР
					  |		КОГДА СостояниеОбъектов.Архивный ЕСТЬ NULL ТОГДА Ложь
					  |		КОГДА СостояниеОбъектов.Архивный = Ложь ТОГДА Ложь
					  |	ИНАЧЕ
					  |		Истина
					  |	КОНЕЦ ВАрхиве";
	
	Если СДанными = Истина Тогда
		Запрос.Текст = Запрос.Текст + ",
					  |	ТранспортныеКонтейнеры.Данные";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
					  |ИЗ
					  |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
					  |
					  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПризнакиАрхивированияФайловДОСКонтролирующимиОрганами КАК СостояниеОбъектов
					  |			ПО 		(СостояниеОбъектов.Объект = ТранспортныеКонтейнеры.ТранспортноеСообщение)
					  |				И	(СостояниеОбъектов.ИмяФайла = ТранспортныеКонтейнеры.ИмяФайла)
					  |				И	(СостояниеОбъектов.Владелец = Значение(Перечисление.ВидыАрхивируемыхМетаданныхДО.ТранспортныеКонтейнеры))
					  |
					  |ГДЕ
					  |	ТранспортныеКонтейнеры.ТранспортноеСообщение = &ТранспортноеСообщение";
	
	Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщение);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если СДанными = Истина Тогда
		ПрочитатьПрисоединенныеФайлы = Ложь;
		Для каждого СтрокаРезультата Из Результат Цикл
			Если СтрокаРезультата.Данные.Получить() = Неопределено Тогда
				ПрочитатьПрисоединенныеФайлы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПрочитатьПрисоединенныеФайлы Тогда
			ТаблицаФайлов = ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(
				ТранспортноеСообщение,
				"ТранспортноеСообщениеКонтейнерыПрисоединенныеФайлы",
				,
				"ИсходноеИмяФайла");
			
			Для каждого СтрокаТаблицы Из ТаблицаФайлов Цикл
				СтрокаТаблицы.ИсходноеИмяФайла = ВРЕГ(СтрокаТаблицы.ИсходноеИмяФайла);
			КонецЦикла;
			
			Для каждого СтрокаРезультата Из Результат Цикл
				Если СтрокаРезультата.Данные.Получить() = Неопределено Тогда
					ИсходноеИмяФайла = ВРЕГ(СтрокаРезультата.ИмяФайла);
					
					СтрокаТаблицы = ТаблицаФайлов.Найти(ИсходноеИмяФайла, "ИсходноеИмяФайла");
					Если СтрокаТаблицы <> Неопределено Тогда
						ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СтрокаТаблицы.Ссылка);
						СтрокаРезультата.Данные = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(0));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТранспортныйКонтейнерПрисутствует(Сообщение) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						  |	ИСТИНА КАК ЕстьКонтейнер
						  |ИЗ
						  |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
						  |ГДЕ
						  |	ТранспортныеКонтейнеры.ТранспортноеСообщение = &ТранспортноеСообщение");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", Сообщение);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура УдалитьТранспортныйКонтейнер(Сообщение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Сообщение) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ТранспортныеКонтейнеры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТранспортноеСообщение.Установить(Сообщение);
	НаборЗаписей.Записать();
	
	МассивФайлов = ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(
		Сообщение,
		"ТранспортноеСообщениеКонтейнерыПрисоединенныеФайлы");
	Для каждого ПрисоединенныйФайл Из МассивФайлов Цикл
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ПрисоединенныйФайлОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ШИФРОВАНИЕ И РАСШИФРОВКА
////

Функция СообщениеЗашифровано(Сообщение) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						  |	ИСТИНА КАК Поле1
						  |ИЗ
						  |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
						  |ГДЕ
						  |	ТранспортныеКонтейнеры.ТранспортноеСообщение = &ТранспортноеСообщение");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", Сообщение);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СообщениеРасшифровано(Сообщение) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						  |	ИСТИНА КАК Поле1
						  |ИЗ
						  |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
						  |ГДЕ
						  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", Сообщение);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция УчетныеЗаписиПоОрганизациям(Организации) Экспорт
	
	СоответствиеУчетныхЗаписейОрганизациям = Новый Соответствие;
	УчетныеЗаписи = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	Организации.Ссылка КАК Организация,
						  |	ВЫБОР
						  |		КОГДА Организации.ВидОбменаСКонтролирующимиОрганами = &ОбменВУниверсальномВФормате
						  |			ТОГДА Организации.УчетнаяЗаписьОбмена
						  |		ИНАЧЕ НЕОПРЕДЕЛЕНО
						  |	КОНЕЦ КАК УчетнаяЗапись
						  |ИЗ
						  |	Справочник.Организации КАК Организации
						  |ГДЕ
						  |	Организации.Ссылка В(&Ссылка)");
	Запрос.УстановитьПараметр("ОбменВУниверсальномВФормате", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("Ссылка", Организации);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеУчетныхЗаписейОрганизациям.Вставить(Выборка.Организация, Выборка.УчетнаяЗапись);
	КонецЦикла;
	
	Для Инд = 1 По Организации.Количество() Цикл
		
		ТекОрганизация = Организации.Получить(Инд - 1);
		ТекУчетнаяЗапись = СоответствиеУчетныхЗаписейОрганизациям[ТекОрганизация];
		
		Если ЗначениеЗаполнено(ТекУчетнаяЗапись) И УчетныеЗаписи.Найти(ТекУчетнаяЗапись) = Неопределено Тогда
			УчетныеЗаписи.Добавить(ТекУчетнаяЗапись);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат УчетныеЗаписи;
	
КонецФункции

Функция ПолучитьВложения(СсылкаПисьмо, ИменаВложений = Неопределено) Экспорт
	
	Возврат ПолучитьВложенияНеформализованногоДокумента(СсылкаПисьмо, ИменаВложений, Истина);
	
КонецФункции

Функция ВыгрузитьТекстВФайл(Текст, ИмяФайла = Неопределено, КодировкаТекста = "windows-1251")
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайлаСохранения = ИмяФайла;
	Иначе
		ИмяФайлаСохранения = ПолучитьИмяВременногоФайла();
	КонецЕсли;
	
	ОбъектЗапись = Новый ЗаписьТекста(ИмяФайлаСохранения, КодировкаТекста);
	ОбъектЗапись.Записать(Текст);
	Попытка
		ОбъектЗапись.Закрыть();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ИмяФайлаСохранения;
	
КонецФункции

Функция СформироватьИОП(ТранспортноеСообщение, ТекстВыгрузки = Неопределено, ИмяФайла = Неопределено) Экспорт
	
	ОрганизацияОтправитель = ТранспортноеСообщение.Отправитель;
	
	// в случае обмена через СОС налоговым органом-получателем считается конечный налоговый орган (указанный в титульном листе отчета),
	// а в случае обмена напрямую, НО-получателем считается налоговый орган, указанный в учетной записи
	НОПолучатель = ?(НЕ ТранспортноеСообщение.УчетнаяЗапись.ОбменНапрямую
					И (НЕ ТранспортноеСообщение.Отправитель.КрупнейшийНалогоплательщик ИЛИ НЕ ЗначениеЗаполнено(ТранспортноеСообщение.Отправитель.КодНалоговогоОрганаПолучателя)),
					ТранспортноеСообщение.ЦиклОбмена.ВнешняяОрганизация,
					ТранспортноеСообщение.УчетнаяЗапись.НалоговыйОрган);
	
	ИНН = СокрЛП(ОрганизацияОтправитель.ИНН);
	Если ПустаяСтрока(ИНН) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не задан ИНН для отправителя - организации %1!'"),
																					Символ(34) + ОрганизацияОтправитель + Символ(34));
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку("ИдОтпр:" + СокрЛП(ИНН));
	
	Текст.ДобавитьСтроку("ВерсПрог:" + РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла();
	Текст.Записать(ИмяВремФайла, "windows-1251");
	
	Возврат ИмяВремФайла;
	
КонецФункции

Функция ИзвлечьПоказатель(ТекстВыгрузки, КодПоказателя) Экспорт
	
	Если Лев(СокрЛ(ТекстВыгрузки), 1) = "<" Тогда // это XML
		ОбъектЧтениеXML = Новый ЧтениеXML;
		ОбъектЧтениеXML.УстановитьСтроку(ТекстВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ОбъектЧтениеXML.Имя = КодПоказателя Тогда
						Возврат ОбъектЧтениеXML.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
	Иначе
		Для Инд = 1 По СтрЧислоСтрок(ТекстВыгрузки) Цикл
			ТекСтр = СтрПолучитьСтроку(ТекстВыгрузки, Инд);
			Если ВРЕГ(Лев(ТекСтр, СтрДлина(КодПоказателя) + 1)) = ВРЕГ(КодПоказателя + ":") Тогда
				Возврат Сред(ТекСтр, СтрДлина(КодПоказателя) + 2);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

Функция ВыборВТабличномПолеЦикловОбмена(ВыбраннаяСтрока, Колонка, СтандартнаяОбработка) Экспорт
	
	СоответствиеИменКолонок = Новый Соответствие();
	// ТаблицаЦиклыОбменаОтчетностьФНС 
	СоответствиеИменКолонок.Вставить("ПервичноеСообщение", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ПодтверждениеОтправки", "ПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ОтветНаПодтверждениеОтправки", "ОтветНаПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ПодтверждениеДоставки", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ПротоколПроверки", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ПодтверждениеНаПротоколПроверки", "ПодтверждениеНаПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ОтветНаЗапрос", "ОтветНаЗапрос");
	СоответствиеИменКолонок.Вставить("ОтветНаОтветНаЗапрос", "ОтветНаОтветНаЗапрос");
	// ТаблицаЦиклыОбменаИсходящиеФНС 
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаИсходящиеФНСКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаИсходящиеФНСКолонка2", "ПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаИсходящиеФНСКолонка3", "ОтветНаПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаИсходящиеФНСКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаИсходящиеФНСКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаИсходящиеФНСКолонка6", "ПодтверждениеНаПротоколПроверки");
	
	// ТаблицаЦиклыОбменаПредставления 
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаПредставленияКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаПредставленияКолонка2", "ПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаПредставленияКолонка3", "ОтветНаПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаПредставленияКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаПредставленияКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаПредставленияКолонка6", "ПодтверждениеНаПротоколПроверки");
	
	// ЦиклыОбменаФНС
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаПредставленияКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаПредставленияКолонка2", "ПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаПредставленияКолонка3", "ОтветНаПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаПредставленияКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаПредставленияКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаПредставленияКолонка6", "ПодтверждениеНаПротоколПроверки");
	
	// ТаблицаЦиклыОбменаУведомления
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаУведомленияКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаУведомленияКолонка2", "ПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаУведомленияКолонка3", "ОтветНаПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаУведомленияКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаУведомленияКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаУведомленияКолонка6", "ПодтверждениеНаПротоколПроверки");
	
	//ТаблицаЦиклыОбменаВходящиеФНС
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаВходящиеФНСКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаВходящиеФНСКолонка4", "ПодтверждениеДоставки");
	// ТаблицаЦиклыОбменаОтчетностьПФР
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаОтчетностьПФРКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаОтчетностьПФРКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаОтчетностьПФРКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаОтчетностьПФРКолонка6", "ПодтверждениеНаПротоколПроверки");
	// ТаблицаЦиклыОбменаЗапросыПФР
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыПФРКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыПФРКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыПФРКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыПФРКолонка6", "ПодтверждениеНаПротоколПроверки");
	//ТаблицаЦиклыОбменаИсходящиеПФР
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаИсходящиеПФРКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаИсходящиеПФРКолонка4", "ПодтверждениеДоставки");
	//ТаблицаЦиклыОбменаВходящиеПФР
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаВходящиеПФРКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаВходящиеПФРКолонка4", "ПодтверждениеДоставки");
	// ТаблицаЦиклыОбменаЗапросыИОН 
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыИОНКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыИОНКолонка2", "ПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыИОНКолонка3", "ОтветНаПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыИОНКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыИОНКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыИОНКолонка6", "ПодтверждениеНаПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыИОНКолонка7", "ОтветНаЗапрос");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыИОНКолонка8", "ОтветНаОтветНаЗапрос");
	//ЦиклыОбменаФНС
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФНСКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФНСКолонка2", "ПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФНСКолонка3", "ОтветНаПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФНСКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФНСКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФНСКолонка6", "ПодтверждениеНаПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФНСКолонка7", "ОтветНаЗапрос");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФНСКолонка8", "ОтветНаОтветНаЗапрос");
	
	//ТаблицаЦиклыОбменаЗаявление
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗаявлениеКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗаявлениеКолонка2", "ПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗаявлениеКолонка3", "ОтветНаПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗаявлениеКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗаявлениеКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗаявлениеКолонка6", "ПодтверждениеНаПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗаявлениеКолонка7", "ОтветНаЗапрос");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗаявлениеКолонка8", "ОтветНаОтветНаЗапрос");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗаявлениеКолонка9", "Возврат");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗаявлениеКолонка10", "ПодтверждениеВозврата");
	
	//ЦиклыОбменаЗаявление
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаЗаявлениеКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаЗаявлениеКолонка2", "ПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаЗаявлениеКолонка3", "ОтветНаПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаЗаявлениеКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаЗаявлениеКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаЗаявлениеКолонка6", "ПодтверждениеНаПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаЗаявлениеКолонка7", "ОтветНаЗапрос");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаЗаявлениеКолонка8", "ОтветНаОтветНаЗапрос");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаЗаявлениеКолонка9", "Возврат");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаЗаявлениеКолонка10", "ПодтверждениеВозврата");

	//ЦиклыОбменаТребования
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаТребованияКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаТребованияКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаТребованияКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаТребованияКолонка6", "ПодтверждениеНаПротоколПроверки");

	//ЦиклыОбменаПФР
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаПФРКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаПФРКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаПФРКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаПФРКолонка6", "ПодтверждениеНаПротоколПроверки");
	
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыИОСКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыИОСКолонка2", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыИОСКолонка3", "ОтветНаЗапрос");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаЗапросыИОСКолонка4", "ОтветНаОтветНаЗапрос");
	
	//ЦиклыОбменаФСГС
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФСГСКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФСГСКолонка2", "ПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФСГСКолонка3", "ОтветНаПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФСГСКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФСГСКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФСГСКолонка6", "ПодтверждениеНаПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФСГСКолонка7", "ОтветНаЗапрос");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаФСГСКолонка8", "ОтветНаОтветНаЗапрос");
	
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаОтчетностьФСГСКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаОтчетностьФСГСКолонка2", "ПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаОтчетностьФСГСКолонка3", "ОтветНаПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаОтчетностьФСГСКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаОтчетностьФСГСКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаОтчетностьФСГСКолонка6", "ПодтверждениеНаПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаОтчетностьФСГСКолонка7", "ОтветНаЗапрос");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаОтчетностьФСГСКолонка8", "ОтветНаОтветНаЗапрос");
	
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаИсходящиеФСГСКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаИсходящиеФСГСКолонка4", "ПодтверждениеДоставки");
	
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаВходящиеФСГСКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаВходящиеФСГСКолонка2", "ПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаВходящиеФСГСКолонка3", "ОтветНаПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ТаблицаЦиклыОбменаВходящиеФСГСКолонка4", "ПодтверждениеДоставки");
	
	// Запросы на выписку ЕГРЮЛ/ЕГРИП
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаЗапросыЕГРКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаЗапросыЕГРКолонка2", "ОтветНаЗапрос");
	
	//ЦиклыОбменаУведомление
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаУведомлениеКолонка1", "ПервичноеСообщение");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаУведомлениеКолонка2", "ПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаУведомлениеКолонка3", "ОтветНаПодтверждениеОтправки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаУведомлениеКолонка4", "ПодтверждениеДоставки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаУведомлениеКолонка5", "ПротоколПроверки");
	СоответствиеИменКолонок.Вставить("ЦиклыОбменаУведомлениеКолонка6", "ПодтверждениеНаПротоколПроверки");
	
	//ИмяКолонки = Колонка.Имя;
	ИмяКолонки = СоответствиеИменКолонок[Колонка];

	Если ИмяКолонки = "ПервичноеСообщение" ИЛИ ИмяКолонки = "ПодтверждениеОтправки" ИЛИ ИмяКолонки = "ОтветНаПодтверждениеОтправки"
	ИЛИ ИмяКолонки = "ПодтверждениеДоставки" ИЛИ ИмяКолонки = "ПротоколПроверки" ИЛИ ИмяКолонки = "ПодтверждениеНаПротоколПроверки"
	ИЛИ ИмяКолонки = "ОтветНаЗапрос" ИЛИ ИмяКолонки = "ОтветНаОтветНаЗапрос" 
	ИЛИ ИмяКолонки = "Возврат" ИЛИ ИмяКолонки = "ПодтверждениеВозврата" Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ТипСообщенияДляПоказа = Неопределено;
		Если ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
			Если ВыбраннаяСтрока.Ссылка.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
				Если ИмяКолонки = "ПервичноеСообщение" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ДекларацияНП;
				ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО;
				ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
				ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО;
				ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО;
				ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
				ИначеЕсли ИмяКолонки = "ОтветНаЗапрос" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО;
				ИначеЕсли ИмяКолонки = "ОтветНаОтветНаЗапрос" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.Документ Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ДокументНО;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП;
			ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНО;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.Заявление Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО;
			ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗаявлениеНО;
			ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО;
			ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
			ИначеЕсли ИмяКолонки = "ОтветНаЗапрос" Тогда
				ТипСообщенияДляПоказа = Новый Массив;
				ТипСообщенияДляПоказа.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО);
				ТипСообщенияДляПоказа.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО);
			ИначеЕсли ИмяКолонки = "ОтветНаОтветНаЗапрос" Тогда
				ТипСообщенияДляПоказа = Новый Массив;
				ТипСообщенияДляПоказа.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
				ТипСообщенияДляПоказа.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП);
			ИначеЕсли ИмяКолонки = "Возврат" Тогда
				ТипСообщенияДляПоказа = Новый Массив;
				ТипСообщенияДляПоказа.Добавить(Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО);
				ТипСообщенияДляПоказа.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО);
			ИначеЕсли ИмяКолонки = "ПодтверждениеВозврата" Тогда
				ТипСообщенияДляПоказа = Новый Массив;
				ТипСообщенияДляПоказа.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП);
				ТипСообщенияДляПоказа.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП);
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО;
			ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО;
			ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО;
			ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР;
			ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР;
			ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие
			Или ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.РассылкаПФР Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.ИОС Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР;
			ИначеЕсли ИмяКолонки = "ОтветНаЗапрос" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР;
			ИначеЕсли ИмяКолонки = "ОтветНаОтветНаЗапрос" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.ПисьмоНО Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.Рассылка Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РассылкаНО;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РассылкаНО;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ОбращениеНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО;
			ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО;
			ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО;
			ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.Представление Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО;
			ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПредставлениеНО;
			ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО;
			ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ЗапросНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО;
			ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО;
			ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО;
			ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
			ИначеЕсли ИмяКолонки = "ОтветНаЗапрос" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО;
			ИначеЕсли ИмяКолонки = "ОтветНаОтветНаЗапрос" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьФСГС Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС;
			ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС;
			ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС;
			ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС;
			ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.ПисьменноеОбращениеВФСГС Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС;
			ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС;
			ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.ИндивидуальноеИнформированиеФСГС Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.РассылкаФСГС Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ЗапросНаВыпискуЕРГЮЛ_ЕГРИП;
			ИначеЕсли ИмяКолонки = "ОтветНаЗапрос" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросаНаВыпискуЕРГЮЛ_ЕГРИП;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипСообщенияДляПоказа <> Неопределено Тогда
			
			Возврат ПоказатьСообщение(ВыбраннаяСтрока.Ссылка, ТипСообщенияДляПоказа);
			
		Иначе 
		КонецЕсли;
	
	КонецЕсли;

КонецФункции

Функция ТекущийПользовательЯвляетсяАдминистраторомУчетныхЗаписейДокументооборота() Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь();
	
КонецФункции

Функция РасширениеФайла(ИмяФайла) Экспорт
	
	ДлинаИмени = СтрДлина(ИмяФайла);
	Для Инд = 1 По ДлинаИмени Цикл
		ТекИнд = ДлинаИмени - Инд + 1;
		Если Сред(ИмяФайла, ТекИнд, 1) = "." Тогда
			Возврат Сред(ИмяФайла, ТекИнд + 1);
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Функция ДатаПоСтроке(Знач Стр) ЭКспорт
	
	Попытка
		Если СтрНайти(Стр, "-") <> 0 Тогда
			Если СтрДлина(Стр) > 10 Тогда
				Возврат Дата(Число(СокрЛП(Сред(Стр, 1, 4))),
							Число(СокрЛП(Сред(Стр, 6, 2))),
							Число(СокрЛП(Сред(Стр, 9, 2))),
							Число(СокрЛП(Сред(Стр, 12, 2))),
							Число(СокрЛП(Сред(Стр, 15, 2))),
							Число(СокрЛП(Сред(Стр, 18, 2))));
			Иначе
				Возврат Дата(Число(СокрЛП(Сред(Стр, 1, 4))),
							Число(СокрЛП(Сред(Стр, 6, 2))),
							Число(СокрЛП(Сред(Стр, 9, 2))));
			КонецЕсли;
		Иначе
			Если СтрНайти(Стр, ":") <> 0 Тогда
				Стр = СтрЗаменить(Стр, " ", ",");
				Стр = СтрЗаменить(Стр, ":", ",");
				Стр = СтрЗаменить(Стр, ".", ",");
				Стр = СтрЗаменить(Стр, ",,", ",");
				МассивЭлементов = Новый Массив;
				ВхождениеРазделителя = СтрНайти(Стр, ",");
				Пока ВхождениеРазделителя <> 0 Цикл
					МассивЭлементов.Добавить(СокрЛП(Лев(Стр, ВхождениеРазделителя - 1)));
					Стр = СокрЛП(Сред(Стр, ВхождениеРазделителя + 1));
					ВхождениеРазделителя = СтрНайти(Стр, ",");
				КонецЦикла;
				Возврат Дата(ПолучитьЭлементДаты(МассивЭлементов, 2),
							ПолучитьЭлементДаты(МассивЭлементов, 1),
							ПолучитьЭлементДаты(МассивЭлементов, 0),
							ПолучитьЭлементДаты(МассивЭлементов, 3),
							ПолучитьЭлементДаты(МассивЭлементов, 4),
							ПолучитьЭлементДаты(МассивЭлементов, 5));
			Иначе
				Возврат Дата(Число(СокрЛП(Сред(Стр, 7, 4))),
							Число(СокрЛП(Сред(Стр, 4, 2))),
							Число(СокрЛП(Сред(Стр, 1, 2))));
			КонецЕсли;
		КонецЕсли;
	Исключение
		Возврат '00010101';
	КонецПопытки;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ РАБОТЫ С XML
////

Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекУзел = Неопределено) Экспорт
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекУзел) = Тип("СтрокаДереваЗначений") И ТекУзел.Тип = "Э" Тогда
				ТекУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

Функция СоздатьДеревоСтруктурыXML() Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

////
//// ФУНКЦИИ РАБОТЫ С XML
//////////////////////////////////////////////////////////////////////////////////

Функция ПредставлениеЦиклаОбмена(ЦиклОбмена) Экспорт
	
	Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
		ПредставлениеЦиклаОбмена = "" + ЦиклОбмена.ВидОтчета + " за " + ПредставлениеПериода(ЦиклОбмена.ДатаНачалаПериода, КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина") + " (" + РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ЦиклОбмена.ВидДокумента) + ") от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Заявление Тогда
		ПредставлениеЦиклаОбмена = "" + ЦиклОбмена.ВидОтчета + " за " + ПредставлениеПериода(ЦиклОбмена.ДатаНачалаПериода, КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина") + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Документ Тогда
		ПредставлениеЦиклаОбмена = "Опись вход. документов от НО " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		ПредставлениеЦиклаОбмена = "2-НДФЛ за " + ПредставлениеПериода(ЦиклОбмена.ДатаНачалаПериода, КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина") + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика Тогда
		ПредставлениеЦиклаОбмена = "Исх. док. для НО " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана Тогда
		ПредставлениеЦиклаОбмена = "Вход. док. от НО " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ПисьмоНО Тогда
		ПредставлениеЦиклаОбмена = "Вход. письмо от НО " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Рассылка Тогда
		ПредставлениеЦиклаОбмена = "Вход. рассылка от НО " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
		ПредставлениеЦиклаОбмена = "Вход. групповая рассылка от НО " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
		ПредставлениеЦиклаОбмена = "Запрос """ + ЦиклОбмена.ВидУслуги + """ (" + ЦиклОбмена.ФорматОтвета + ") от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
		
		Если ЗначениеЗаполнено(ЦиклОбмена.ВидОтчета) Тогда
			Если ТипЗнч(ЦиклОбмена.ВидОтчета) = Тип("СправочникСсылка.РегламентированныеОтчеты") Тогда
				Источник = ЦиклОбмена.ВидОтчета.ИсточникОтчета;
			Иначе
				Источник = ЦиклОбмена.ВидОтчета.Источник;
			КонецЕсли;
			
			Если НачалоДня(ЦиклОбмена.ДатаНачалаПериода) = НачалоДня(ЦиклОбмена.ДатаОкончанияПериода) Тогда
				ПредставлениеЦиклаОбмена = "" + ЦиклОбмена.Предмет + ". Отправка от " + ЦиклОбмена.ДатаСоздания;
			ИначеЕсли Источник = "ПередачаСЗВ4вПФР" Тогда
				ПредставлениеЦиклаОбмена = "" + ЦиклОбмена.ВидОтчета + " и РСВ за " + ПредставлениеПериода(ЦиклОбмена.ДатаНачалаПериода, КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина") + " от " + ЦиклОбмена.ДатаСоздания;
			Иначе
				ПредставлениеЦиклаОбмена = "" + ЦиклОбмена.ВидОтчета + " за " + ПредставлениеПериода(ЦиклОбмена.ДатаНачалаПериода, КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина") + " от " + ЦиклОбмена.ДатаСоздания;	
			КонецЕсли;
		Иначе
			ПредставлениеЦиклаОбмена = "<не заполнено>" + " за " + ПредставлениеПериода(ЦиклОбмена.ДатаНачалаПериода, КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина") + " от " + ЦиклОбмена.ДатаСоздания;	
		КонецЕсли;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие Тогда
		ПредставлениеЦиклаОбмена = "Письмо для органа ПФР " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаПФР Тогда
		ПредставлениеЦиклаОбмена = "Рассылка органа ПФР " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие Тогда
		ПредставлениеЦиклаОбмена = "Письмо от органа ПФР " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОС Тогда
		ПредставлениеЦиклаОбмена = "Запрос """ + ЦиклОбмена.ВидУслуги + """ от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
		ПредставлениеЦиклаОбмена = "Запрос """ + ЦиклОбмена.ВидУслуги + """ (" + ЦиклОбмена.ФорматОтвета + ") от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьФСГС Тогда
		Если НачалоДня(ЦиклОбмена.ДатаНачалаПериода) = НачалоДня(ЦиклОбмена.ДатаОкончанияПериода) Тогда
			ПредставлениеЦиклаОбмена = "" + ЦиклОбмена.Предмет + ". Отправка от " + ЦиклОбмена.ДатаСоздания;
		Иначе
			ПредставлениеЦиклаОбмена = "" + ЦиклОбмена.ВидОтчета + " за " + ПредставлениеПериода(ЦиклОбмена.ДатаНачалаПериода, КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина") + " от " + ЦиклОбмена.ДатаСоздания;
		КонецЕсли;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ПисьменноеОбращениеВФСГС Тогда
		ПредставлениеЦиклаОбмена = "Письмо для Росстата " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИндивидуальноеИнформированиеФСГС Тогда
		ПредставлениеЦиклаОбмена = "Письмо от Росстата " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаФСГС Тогда
		ПредставлениеЦиклаОбмена = "Рассылка от Росстата " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	Иначе
		ПредставлениеЦиклаОбмена = ЦиклОбмена.Ссылка;
	КонецЕсли;
	
	Возврат ПредставлениеЦиклаОбмена;
	
КонецФункции

////
//// ФУНКЦИИ ВЫГРУЗКИ АРХИВА ДОКУМЕНТООБОРОТА
//////////////////////////////////////////////////////////////////////////////////

Функция XMLЗначениеВнутр(Тип, Значение)
	
	Попытка
		Возврат XMLЗначение(Тип, Значение)
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////

Функция ФИОИндивидуальногоПредпринимателя(Организация, СведенияОбОрганизации = Неопределено) Экспорт
	
	Если СведенияОбОрганизации = Неопределено Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация);
		Если СведенияОбОрганизации = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СведенияОбОрганизации.Свойство("ФамилияИП") И СведенияОбОрганизации.Свойство("ИмяИП") И СведенияОбОрганизации.Свойство("ОтчествоИП")
		И ЗначениеЗаполнено(СведенияОбОрганизации.ФамилияИП) И ЗначениеЗаполнено(СведенияОбОрганизации.ИмяИП)
		И СведенияОбОрганизации.ИмяИП <> СведенияОбОрганизации.ФИО Тогда
		
		Результат = Новый Структура("Фамилия, Имя, Отчество",
			СведенияОбОрганизации.ФамилияИП, СведенияОбОрганизации.ИмяИП, СведенияОбОрганизации.ОтчествоИП);
	
	Иначе
		Результат = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИО);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТОВ

Процедура ОбработкаЗаполненияОбъекта(Объект, Основание) Экспорт
	
	ИмяМетаданныхОбъекта = Объект.Метаданные().Имя;
	Если ИмяМетаданныхОбъекта = "НеформализованныйДокументНалогоплательщика" Тогда
		//закомментирован вызов ОбработкаЗаполненияНеформализованногоДокументаНалогоплательщика
	ИначеЕсли ИмяМетаданныхОбъекта = "ТранспортноеСообщение" Тогда
		ОбработкаЗаполненияТранспортногоСообщения(Объект, Основание);
	ИначеЕсли ИмяМетаданныхОбъекта = "ПерепискаСКонтролирующимиОрганами" Тогда
		//закомментирован вызов ОбработкаЗаполненияПисьма
	ИначеЕсли ИмяМетаданныхОбъекта = "УчетныеЗаписиДокументооборота" Тогда
		ОбработкаЗаполненияУчетнойЗаписиДокументооборота(Объект, Основание);
	ИначеЕсли ИмяМетаданныхОбъекта = "ОписиИсходящихДокументовВНалоговыеОрганы" Тогда
		ОбработкаЗаполненияОписиИсходящихДокументов(Объект, Основание);
	ИначеЕсли ИмяМетаданныхОбъекта = "СканированныеДокументыДляПередачиВЭлектронномВиде" Тогда
		ОбработкаЗаполненияСканированногоДокумента(Объект, Основание);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияСканированногоДокумента(Объект, ДанныеЗаполнения)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаЗаполненияУчетнойЗаписиДокументооборота(Объект, Основание)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПортPOP3) Тогда
		Объект.ПортPOP3 = 110;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПортSMTP) Тогда
		Объект.ПортSMTP = 25;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.РежимАвтонастройки) Тогда
		Объект.РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиНалогоплательщика.Включена;
		Объект.ИспользоватьСервисОнлайнПроверкиОтчетов = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюОбъекта(Объект, Отказ, РежимЗаписи = Неопределено, РежимПроведения = Неопределено, Замещение = Неопределено) Экспорт
	
	ИмяМетаданныхОбъекта = Объект.Метаданные().Имя;
	Если ИмяМетаданныхОбъекта = "ЦиклыОбмена" Тогда
		ПередЗаписьюЦиклаОбмена(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "УчетныеЗаписиДокументооборота" Тогда
		ПередЗаписьюУчетнойЗаписиНалогоплательщика(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "СерверыДокументооборота" Тогда
		ПередЗаписьюПочтовогоСервера(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "ТранспортноеСообщение" Тогда
		ПередЗаписьюТранспортногоСообщения(Объект, Отказ, РежимЗаписи, РежимПроведения);
	ИначеЕсли ИмяМетаданныхОбъекта = "ПерепискаСКонтролирующимиОрганами" Тогда
		ПередЗаписьюПерепискиСКонтролирующимиОрганами(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "СканированныеДокументыДляПередачиВЭлектронномВиде" Тогда
		ПередЗаписьюСканированныеДокументыДляПередачиВЭлектронномВиде(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "ОписиВходящихДокументовИзНалоговыхОрганов" Тогда
		ПередЗаписьюОписиВходящихДокументов(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "ОписиИсходящихДокументовВНалоговыеОрганы" Тогда
		ПередЗаписьюОписиИсходящихДокументов(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "ЗапросНаИнформационноеОбслуживаниеСтрахователя" Тогда
		ПередЗаписьюЗапросаНаИнформационноеОбслуживаниеСтрахователя(Объект, Отказ, РежимЗаписи, РежимПроведения);
	ИначеЕсли ИмяМетаданныхОбъекта = "ОтправкиФСС" Тогда
		ПередЗаписьюОтправкиФСС(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "ОтправкиФСРАР" Тогда
		ПередЗаписьюОтправкиФСРАР(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "ОтправкиРПН" Тогда
		ПередЗаписьюОтправкиРПН(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "ОтправкиФТС" Тогда
		ПередЗаписьюОтправкиФТС(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "ОтправкиБанкРоссии" Тогда
		ПередЗаписьюОтправкиВБанкРоссии(Объект, Отказ);		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиЦиклаОбмена(Объект, Отказ)
	
	Если Объект.ИзмененаПометкаУдаления Тогда
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(Объект.Ссылка);
		Для Каждого СообщениеЦиклаОбмена Из СообщенияЦиклаОбмена Цикл
			ОбъектСообщениеЦиклаОбмена = СообщениеЦиклаОбмена.Ссылка.ПолучитьОбъект();
			ОбъектСообщениеЦиклаОбмена.УстановитьПометкуУдаления(Объект.ПометкаУдаления);
		КонецЦикла;
		ОбновитьСтатусыСвязанногоОбъектаПриНеобходимости(Объект.Ссылка);
	КонецЕсли;
	
	Если Объект.Тип = Перечисления.ТипыЦикловОбмена.Документ Тогда 
		ОбновитьСтатусыСвязанногоОбъектаПриНеобходимости(Объект.Ссылка);
	КонецЕсли;
	
	Предмет = Объект.Предмет;
	Если ЗначениеЗаполнено(Предмет) Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписьОбъектовРегламентированнойОтчетности(Предмет, Отказ);
	КонецЕсли;	
	
КонецПроцедуры

Функция РассчитатьСтатусЦиклаОбмена(ЦиклОбмена) Экспорт
	
	ТекСтатус = Перечисления.СтатусыОтправки.ПустаяСсылка();
	Если ТипЗнч(ЦиклОбмена) = Тип("СправочникОбъект.ЦиклыОбмена") И 
		(ЦиклОбмена.ЭтоНовый() ИЛИ (ЦиклОбмена.Тип <> Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность И ЦиклОбмена.Тип <> Перечисления.ТипыЦикловОбмена.Заявление)) Тогда
		Возврат ТекСтатус;
	КонецЕсли;
	
	Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
		
		Если ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
			
			// получаем сообщения цикла обмена
			СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
			
			// анализируем, отправлено ли первичное
			ПервичноеСообщениеСодержащееОтчетность = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП, "Тип");
			Если ПервичноеСообщениеСодержащееОтчетность <> Неопределено Тогда
				Если ПервичноеСообщениеСодержащееОтчетность.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
					ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
				Иначе
					Возврат ТекСтатус;
				КонецЕсли;
			Иначе
				Возврат ТекСтатус;
			КонецЕсли;
			
			// анализируем, получено ли подтверждение отправки
			ПодтверждениеОтправки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО, "Тип");
			Если ПодтверждениеОтправки = Неопределено Тогда
				Возврат ТекСтатус;
			КонецЕсли;
			
			// анализируем, получено ли извещение о получении декларации
			ПодтверждениеДоставки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО, "Тип");
			Если ПодтверждениеДоставки = Неопределено Тогда
				Возврат ТекСтатус;
			Иначе
				ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
			КонецЕсли;
			
			// анализируем протоколы приема
			// если их несколько, то интересует последний
			ПротоколыПриема = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО));
			ЧислоПротоколов = ПротоколыПриема.Количество();
			Если ЧислоПротоколов = 0 Тогда
				Возврат ТекСтатус;
			ИначеЕсли ЧислоПротоколов = 1 Тогда
				ПротоколПриема = ПротоколыПриема[0];
				Если ПротоколПриема.Ссылка.ПротоколСОшибкой Тогда
					Возврат Перечисления.СтатусыОтправки.НеПринят;
				КонецЕсли;
			Иначе
				
				// если протоколов несколько, то ориентируемся на наиболее свежий из них
				НаиболееПозднийПротокол = Неопределено;
				ДатаНаиболееПозднегоПротокола = '00010101';
				Для Каждого ПротоколПриема Из ПротоколыПриема Цикл
					ДатаПротоколаПриема = ПротоколПриема.Дата;
					Если ДатаПротоколаПриема = Неопределено Тогда
						ДатаПротоколаПриема = '00010101';
					КонецЕсли;
					Если ДатаПротоколаПриема >= ДатаНаиболееПозднегоПротокола Тогда
						ДатаНаиболееПозднегоПротокола = ДатаПротоколаПриема;
						НаиболееПозднийПротокол = ПротоколПриема;
					КонецЕсли;
				КонецЦикла;
				
				Если НаиболееПозднийПротокол.Ссылка.ПротоколСОшибкой Тогда
					Возврат Перечисления.СтатусыОтправки.НеПринят;
				КонецЕсли;
				
			КонецЕсли;
			
			// анализируем протоколы обработки
			// если их несколько, то анализируем последний
			ПротоколыОбработки = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО));
			ЧислоПротоколов = ПротоколыОбработки.Количество();
			Если ЧислоПротоколов = 0 Тогда
				Возврат ТекСтатус;
			ИначеЕсли ЧислоПротоколов = 1 Тогда
				ПротоколОбработки = ПротоколыОбработки[0];
				Если ПротоколОбработки.Ссылка.ПротоколСОшибкой Тогда
					Возврат Перечисления.СтатусыОтправки.НеПринят;
				КонецЕсли;
			Иначе
				
				// если протоколов несколько, то ориентируемся на наиболее свежий из них
				НаиболееПозднийПротокол = Неопределено;
				ДатаНаиболееПозднегоПротокола = '00010101';
				Для Каждого ПротоколОбработки Из ПротоколыОбработки Цикл
					ДатаПротоколаОбработки = ПротоколОбработки.Дата;
					Если ДатаПротоколаОбработки = Неопределено Тогда
						ДатаПротоколаОбработки = '00010101';
					КонецЕсли;
					Если ДатаПротоколаОбработки >= ДатаНаиболееПозднегоПротокола Тогда
						ДатаНаиболееПозднегоПротокола = ДатаПротоколаОбработки;
						НаиболееПозднийПротокол = ПротоколОбработки;
					КонецЕсли;
				КонецЦикла;
				
				Если НаиболееПозднийПротокол.Ссылка.ПротоколСОшибкой Тогда
					Возврат Перечисления.СтатусыОтправки.НеПринят;
				КонецЕсли;
				
			КонецЕсли;
			
			// если все предусмотренные регламентом сообщения отправлены/приняты
			// и они без ошибок, то отчет считается сданным
			Возврат Перечисления.СтатусыОтправки.Сдан;
			
		КонецЕсли;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Заявление Тогда
		
		
		// получаем сообщения цикла обмена
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		// анализируем, отправлено ли первичное
		ПервичноеСообщениеСодержащееОтчетность = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП, "Тип");
		Если ПервичноеСообщениеСодержащееОтчетность <> Неопределено Тогда
			Если ПервичноеСообщениеСодержащееОтчетность.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
			Иначе
				Возврат ТекСтатус;
			КонецЕсли;
		Иначе
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли подтверждение отправки
		ПодтверждениеОтправки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО, "Тип");
		Если ПодтверждениеОтправки = Неопределено Тогда
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли извещение о получении декларации
		ПодтверждениеДоставки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗаявлениеНО, "Тип");
		Если ПодтверждениеДоставки = Неопределено Тогда
			Возврат ТекСтатус;
		Иначе
			ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
		КонецЕсли;
		
		// анализируем протоколы приема
		// если их несколько, то интересует последний
		ПротоколыПриема = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО));
		ЧислоПротоколов = ПротоколыПриема.Количество();
		Если ЧислоПротоколов = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоПротоколов = 1 Тогда
			ПротоколПриема = ПротоколыПриема[0];
			Если ПротоколПриема.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийПротокол = Неопределено;
			ДатаНаиболееПозднегоПротокола = '00010101';
			Для Каждого ПротоколПриема Из ПротоколыПриема Цикл
				ДатаПротоколаПриема = ПротоколПриема.Дата;
				Если ДатаПротоколаПриема = Неопределено Тогда
					ДатаПротоколаПриема = '00010101';
				КонецЕсли;
				Если ДатаПротоколаПриема >= ДатаНаиболееПозднегоПротокола Тогда
					ДатаНаиболееПозднегоПротокола = ДатаПротоколаПриема;
					НаиболееПозднийПротокол = ПротоколПриема;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПозднийПротокол.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
			
		КонецЕсли;
		
		// анализируем протоколы обработки образца 2013
		// если их несколько, то анализируем последний
		ПротоколыОбработки = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО));
		ЧислоПротоколов = ПротоколыОбработки.Количество();
		Если ЧислоПротоколов = 0 Тогда
			//пропускаем анализ протокола обработки образца 2013, статус не возвращаем, так как возможно наличие протокола обработки старого образца
		ИначеЕсли ЧислоПротоколов = 1 Тогда
			ПротоколОбработки = ПротоколыОбработки[0];
			Если ПротоколОбработки.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				Возврат Перечисления.СтатусыОтправки.Сдан;
			КонецЕсли;
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийПротокол = Неопределено;
			ДатаНаиболееПозднегоПротокола = '00010101';
			Для Каждого ПротоколОбработки Из ПротоколыОбработки Цикл
				ДатаПротоколаОбработки = ПротоколОбработки.Дата;
				Если ДатаПротоколаОбработки = Неопределено Тогда
					ДатаПротоколаОбработки = '00010101';
				КонецЕсли;
				Если ДатаПротоколаОбработки >= ДатаНаиболееПозднегоПротокола Тогда
					ДатаНаиболееПозднегоПротокола = ДатаПротоколаОбработки;
					НаиболееПозднийПротокол = ПротоколОбработки;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПозднийПротокол.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				Возврат Перечисления.СтатусыОтправки.Сдан;
			КонецЕсли;
			
		КонецЕсли;
		
		// анализируем протоколы обработки
		// если их несколько, то анализируем последний
		ПротоколыОбработки = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО));
		ЧислоПротоколов = ПротоколыОбработки.Количество();
		Если ЧислоПротоколов = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоПротоколов = 1 Тогда
			ПротоколОбработки = ПротоколыОбработки[0];
			Если ПротоколОбработки.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				ТекСтатус = Перечисления.СтатусыОтправки.Сдан;
			КонецЕсли;
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийПротокол = Неопределено;
			ДатаНаиболееПозднегоПротокола = '00010101';
			Для Каждого ПротоколОбработки Из ПротоколыОбработки Цикл
				ДатаПротоколаОбработки = ПротоколОбработки.Дата;
				Если ДатаПротоколаОбработки = Неопределено Тогда
					ДатаПротоколаОбработки = '00010101';
				КонецЕсли;
				Если ДатаПротоколаОбработки >= ДатаНаиболееПозднегоПротокола Тогда
					ДатаНаиболееПозднегоПротокола = ДатаПротоколаОбработки;
					НаиболееПозднийПротокол = ПротоколОбработки;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПозднийПротокол.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				ТекСтатус = Перечисления.СтатусыОтправки.Сдан;
			КонецЕсли;
			
		КонецЕсли;
		
		// анализируем наличие сообщений об отзыве и несоответствиях
		СообщениеОбОтзыве = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО, "Тип");
		РезультатОбработкиЗаявлениеТСНО = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО, "Тип");
		
		Если СообщениеОбОтзыве = Неопределено И РезультатОбработкиЗаявлениеТСНО = Неопределено Тогда
			Возврат ТекСтатус;
		Иначе
			Возврат Перечисления.СтатусыОтправки.НеПринят;
		КонецЕсли;
		
		// если все предусмотренные регламентом сообщения отправлены/приняты
		// и они без ошибок, то отчет считается сданным
		Возврат Перечисления.СтатусыОтправки.Сдан;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Документ Тогда
		
		ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
		
		// получаем сообщения цикла обмена
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		// анализируем результаты приема
		// если их несколько, то интересует последний
		РезультатыПриема = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП));
		ЧислоСообщений = РезультатыПриема.Количество();
		Если ЧислоСообщений = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоСообщений = 1 Тогда
			РезультатПриема = РезультатыПриема[0];
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийРезультат = Неопределено;
			ДатаНаиболееПозднегоРезультата = '00010101';
			Для Каждого РезультатПриема Из РезультатыПриема Цикл
				ДатаРезультатаПриема = РезультатПриема.Дата;
				Если ДатаРезультатаПриема = Неопределено Тогда
					ДатаРезультатаПриема = '00010101';
				КонецЕсли;
				Если ДатаРезультатаПриема >= ДатаНаиболееПозднегоРезультата Тогда
					ДатаНаиболееПозднегоРезультата = ДатаРезультатаПриема;
					НаиболееПозднийРезультат = РезультатПриема;
				КонецЕсли;
			КонецЦикла;
			
			РезультатПриема = НаиболееПозднийРезультат;
			
		КонецЕсли;
		
		Если РезультатПриема.Ссылка.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
			Если РезультатПриема.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			Иначе 
				Возврат Перечисления.СтатусыОтправки.Сдан;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		
		// получаем сообщения цикла обмена
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		// анализируем, отправлено ли первичное
		ПервичноеСообщениеСодержащееОтчетность = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП, "Тип");
		Если ПервичноеСообщениеСодержащееОтчетность <> Неопределено Тогда
			Если ПервичноеСообщениеСодержащееОтчетность.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
			Иначе
				Возврат ТекСтатус;
			КонецЕсли;
		Иначе
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли подтверждение отправки
		ПодтверждениеОтправки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО, "Тип");
		Если ПодтверждениеОтправки = Неопределено Тогда
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли извещение о получении декларации
		ПодтверждениеДоставки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО, "Тип");
		Если ПодтверждениеДоставки = Неопределено Тогда
			Возврат ТекСтатус;
		Иначе
			ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
		КонецЕсли;
		
		// анализируем протоколы приема
		// если их несколько, то интересует последний
		ПротоколыПриема = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО));
		ЧислоПротоколов = ПротоколыПриема.Количество();
		Если ЧислоПротоколов = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоПротоколов = 1 Тогда
			
			ПротоколПриема = ПротоколыПриема[0];
			
			ОтчетСданЧастично 		= Отчет2НДФЛСданЧастично(ПротоколПриема.Ссылка);
			ПротоколСОшибкой 		= ПротоколПриема.ПротоколСОшибкой;

			Если ОтчетСданЧастично Тогда
				Возврат Перечисления.СтатусыОтправки.ПринятЕстьОшибки;
			ИначеЕсли ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийПротокол = Неопределено;
			ДатаНаиболееПозднегоПротокола = '00010101';
			Для Каждого ПротоколПриема Из ПротоколыПриема Цикл
				ДатаПротоколаПриема = ПротоколПриема.Дата;
				Если ДатаПротоколаПриема = Неопределено Тогда
					ДатаПротоколаПриема = '00010101';
				КонецЕсли;
				Если ДатаПротоколаПриема >= ДатаНаиболееПозднегоПротокола Тогда
					ДатаНаиболееПозднегоПротокола = ДатаПротоколаПриема;
					НаиболееПозднийПротокол = ПротоколПриема;
				КонецЕсли;
			КонецЦикла;
			
			ОтчетСданЧастично 		= Отчет2НДФЛСданЧастично(НаиболееПозднийПротокол.Ссылка);
			ПротоколСОшибкой 		= НаиболееПозднийПротокол.ПротоколСОшибкой;
			
 			Если ОтчетСданЧастично Тогда
				Возврат Перечисления.СтатусыОтправки.ПринятЕстьОшибки;
			ИначеЕсли ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
			
		КонецЕсли;
		
		// если все предусмотренные регламентом сообщения отправлены/приняты
		// и они без ошибок, то отчет считается сданным
		Возврат Перечисления.СтатусыОтправки.Сдан;
			
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
		
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		ПервичноеСообщениеСодержащееОтчетность = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР, "Тип");
		Если ПервичноеСообщениеСодержащееОтчетность <> Неопределено Тогда
			Если ПервичноеСообщениеСодержащееОтчетность.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
			Иначе
				Возврат ТекСтатус;
			КонецЕсли;
		Иначе
			Возврат ТекСтатус;
		КонецЕсли;
		
		ПодтвержденияДоставки = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР));
		ЧислоПодтвержденийДоставки = ПодтвержденияДоставки.Количество();
		Если ЧислоПодтвержденийДоставки = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоПодтвержденийДоставки = 1 Тогда
			ПодтверждениеДоставки = ПодтвержденияДоставки[0];
			Если ПодтверждениеДоставки.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
			КонецЕсли;
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПоздниееПодтверждение = Неопределено;
			ДатаНаиболееПозднегоПодтверждения = '00010101';
			Для Каждого ПодтверждениеДоставки Из ПодтвержденияДоставки Цикл
				ДатаПодтверждения = ПодтверждениеДоставки.Дата;
				Если ДатаПодтверждения = Неопределено Тогда
					ДатаПодтверждения = '00010101';
				КонецЕсли;
				Если ДатаПодтверждения >= ДатаНаиболееПозднегоПодтверждения Тогда
					ДатаНаиболееПозднегоПодтверждения = ДатаПодтверждения;
					НаиболееПоздниееПодтверждение = ПодтверждениеДоставки;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПоздниееПодтверждение.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
			КонецЕсли;
			
		КонецЕсли;
		
		ПротоколыПроверки = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПротоколПФР));
		ЧислоПротоколов = ПротоколыПроверки.Количество();
		Если ЧислоПротоколов = 0 Тогда
			Возврат ТекСтатус;
			
		ИначеЕсли ЧислоПротоколов = 1 Тогда
			ПротоколПроверки = ПротоколыПроверки[0];
			
			ОтчетСданЧастично = ((ЦиклОбмена.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.СведенияОЗастрахованныхЛицахСЗВ_М
				ИЛИ ЦиклОбмена.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ
				ИЛИ ЦиклОбмена.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР
				ИЛИ ЦиклОбмена.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ)
				И ОтчетПФРСданЧастично(ПротоколПроверки.Ссылка));
			ПротоколСОшибкой = ПротоколПроверки.ПротоколСОшибкой;
			
			Если ОтчетСданЧастично Тогда
				Возврат Перечисления.СтатусыОтправки.ПринятЕстьОшибки;
			ИначеЕсли ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
			
		Иначе
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийПротокол = Неопределено;
			ДатаНаиболееПозднегоПротокола = '00010101';
			Для Каждого ПротоколПроверки Из ПротоколыПроверки Цикл
				ДатаПротоколаПроверки = ПротоколПроверки.Дата;
				Если ДатаПротоколаПроверки = Неопределено Тогда
					ДатаПротоколаПроверки = '00010101';
				КонецЕсли;
				Если ДатаПротоколаПроверки >= ДатаНаиболееПозднегоПротокола Тогда
					ДатаНаиболееПозднегоПротокола = ДатаПротоколаПроверки;
					НаиболееПозднийПротокол = ПротоколПроверки;
				КонецЕсли;
			КонецЦикла;
			
			ОтчетСданЧастично = ((ЦиклОбмена.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.СведенияОЗастрахованныхЛицахСЗВ_М
				ИЛИ ЦиклОбмена.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ
				ИЛИ ЦиклОбмена.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР
				ИЛИ ЦиклОбмена.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ)
				И ОтчетПФРСданЧастично(НаиболееПозднийПротокол.Ссылка));
			ПротоколСОшибкой = НаиболееПозднийПротокол.ПротоколСОшибкой;
			
			Если ОтчетСданЧастично Тогда
				Возврат Перечисления.СтатусыОтправки.ПринятЕстьОшибки;
			ИначеЕсли ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Перечисления.СтатусыОтправки.Сдан;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОС Тогда
		
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		ПервичноеСообщениеСодержащееЗапрос = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР, "Тип");
		Если ПервичноеСообщениеСодержащееЗапрос <> Неопределено Тогда
			Если ПервичноеСообщениеСодержащееЗапрос.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
			Иначе
				Возврат ТекСтатус;
			КонецЕсли;
		Иначе
			Возврат ТекСтатус;
		КонецЕсли;
		
		ПодтвержденияДоставки = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР));
		ЧислоПодтвержденийДоставки = ПодтвержденияДоставки.Количество();
		Если ЧислоПодтвержденийДоставки = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоПодтвержденийДоставки = 1 Тогда
			ПодтверждениеДоставки = ПодтвержденияДоставки[0];
			Если ПодтверждениеДоставки.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
			КонецЕсли;
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПоздниееПодтверждение = Неопределено;
			ДатаНаиболееПозднегоПодтверждения = '00010101';
			Для Каждого ПодтверждениеДоставки Из ПодтвержденияДоставки Цикл
				ДатаПодтверждения = ПодтверждениеДоставки.Дата;
				Если ДатаПодтверждения = Неопределено Тогда
					ДатаПодтверждения = '00010101';
				КонецЕсли;
				Если ДатаПодтверждения >= ДатаНаиболееПозднегоПодтверждения Тогда
					ДатаНаиболееПозднегоПодтверждения = ДатаПодтверждения;
					НаиболееПоздниееПодтверждение = ПодтверждениеДоставки;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПоздниееПодтверждение.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
			КонецЕсли;
			
		КонецЕсли;
		
		ОтветыНаЗапрос = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР));
		ЧислоОтветов = ОтветыНаЗапрос.Количество();
		Если ЧислоОтветов = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоОтветов = 1 Тогда
			ОтветНаЗапрос = ОтветыНаЗапрос[0];
			Если ОтветНаЗапрос.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
		Иначе
			
			// если ответов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийОтвет = Неопределено;
			ДатаНаиболееПозднегоПротокола = '00010101';
			Для Каждого ОтветНаЗапрос Из ОтветыНаЗапрос Цикл
				ДатаПротоколаПроверки = ОтветНаЗапрос.Дата;
				Если ДатаПротоколаПроверки = Неопределено Тогда
					ДатаПротоколаПроверки = '00010101';
				КонецЕсли;
				Если ДатаПротоколаПроверки >= ДатаНаиболееПозднегоПротокола Тогда
					ДатаНаиболееПозднегоПротокола = ДатаПротоколаПроверки;
					НаиболееПозднийОтвет = ОтветНаЗапрос;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПозднийОтвет.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Перечисления.СтатусыОтправки.Сдан;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие Тогда
		
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		ПервичноеСообщениеСодержащееПисьмо = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР, "Тип");
		Если ПервичноеСообщениеСодержащееПисьмо <> Неопределено Тогда
			Если ПервичноеСообщениеСодержащееПисьмо.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
			Иначе
				Возврат Перечисления.СтатусыОтправки.ВКонверте;
			КонецЕсли;
		Иначе
			Возврат ТекСтатус;
		КонецЕсли;
		
		ПодтверждениеДоставки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР, "Тип");
		Если ПодтверждениеДоставки = Неопределено Тогда
			Возврат ТекСтатус;
		Иначе
			ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
		КонецЕсли;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
		
		// получаем сообщения цикла обмена
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		// анализируем, отправлено ли первичное
		ОбращениеНП = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП, "Тип");
		Если ОбращениеНП <> Неопределено Тогда
			Если ОбращениеНП.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
			Иначе
				Возврат ТекСтатус;
			КонецЕсли;
		Иначе
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли подтверждение отправки
		ПодтверждениеОбращениеНО = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО, "Тип");
		Если ПодтверждениеОбращениеНО = Неопределено Тогда
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли извещение о получении декларации
		ИзвещениеОбращениеНО = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО, "Тип");
		Если ИзвещениеОбращениеНО = Неопределено Тогда
			Возврат ТекСтатус;
		Иначе
			ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
		КонецЕсли;
		
		// анализируем результаты приема
		// если их несколько, то интересует последний
		РезультатыПриема = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО));
		ЧислоСообщений = РезультатыПриема.Количество();
		Если ЧислоСообщений = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоСообщений = 1 Тогда
			РезультатПриема = РезультатыПриема[0];
			Если РезультатПриема.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийРезультат = Неопределено;
			ДатаНаиболееПозднегоРезультата = '00010101';
			Для Каждого РезультатПриема Из РезультатыПриема Цикл
				ДатаРезультатаПриема = РезультатПриема.Дата;
				Если ДатаРезультатаПриема = Неопределено Тогда
					ДатаРезультатаПриема = '00010101';
				КонецЕсли;
				Если ДатаРезультатаПриема >= ДатаНаиболееПозднегоРезультата Тогда
					ДатаНаиболееПозднегоРезультата = ДатаРезультатаПриема;
					НаиболееПозднийРезультат = РезультатПриема;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПозднийРезультат.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
			
		КонецЕсли;
		
		// если все предусмотренные регламентом сообщения отправлены/приняты
		// и они без ошибок, то обращение считается успешным
		Возврат Перечисления.СтатусыОтправки.Доставлен;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Представление Тогда
		
		// получаем сообщения цикла обмена
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		// анализируем, отправлено ли первичное
		ПредставлениеНП = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП, "Тип");
		Если ПредставлениеНП <> Неопределено Тогда
			Если ПредставлениеНП.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
			Иначе
				Возврат ТекСтатус;
			КонецЕсли;
		Иначе
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли подтверждение отправки
		ПодтверждениеПредставлениеНО = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО, "Тип");
		Если ПодтверждениеПредставлениеНО = Неопределено Тогда
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли извещение о получении 
		ИзвещениеПредставлениеНО = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПредставлениеНО, "Тип");
		Если ИзвещениеПредставлениеНО = Неопределено Тогда
			Возврат ТекСтатус;
		Иначе
			ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
		КонецЕсли;
		
		// анализируем результаты приема
		// если их несколько, то интересует последний
		РезультатыПриема = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО));
		ЧислоСообщений = РезультатыПриема.Количество();
		Если ЧислоСообщений = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоСообщений = 1 Тогда
			РезультатПриема = РезультатыПриема[0];
			Если РезультатПриема.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийРезультат = Неопределено;
			ДатаНаиболееПозднегоРезультата = '00010101';
			Для Каждого РезультатПриема Из РезультатыПриема Цикл
				ДатаРезультатаПриема = РезультатПриема.Дата;
				Если ДатаРезультатаПриема = Неопределено Тогда
					ДатаРезультатаПриема = '00010101';
				КонецЕсли;
				Если ДатаРезультатаПриема >= ДатаНаиболееПозднегоРезультата Тогда
					ДатаНаиболееПозднегоРезультата = ДатаРезультатаПриема;
					НаиболееПозднийРезультат = РезультатПриема;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПозднийРезультат.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
			
		КонецЕсли;
		
		// если все предусмотренные регламентом сообщения отправлены/приняты
		// и они без ошибок, то представление считается успешным
		Возврат Перечисления.СтатусыОтправки.Сдан;

	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
		
		// получаем сообщения цикла обмена
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		// анализируем, отправлено ли первичное
		ПервичноеСообщениеСодержащееЗапрос = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ЗапросНП, "Тип");
		Если ПервичноеСообщениеСодержащееЗапрос <> Неопределено Тогда
			Если ПервичноеСообщениеСодержащееЗапрос.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен; // если первичное отправлено, то статус - отправлено
			Иначе
				Возврат ТекСтатус; // если первичное не отпарвлено, то дальше не анализируем
			КонецЕсли;
		Иначе // если первичное отсутствует, то дальше не анализируем
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли подтверждение отправки
		ПодтверждениеОтправки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО, "Тип");
		Если ПодтверждениеОтправки = Неопределено Тогда
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли извещение о получении запроса
		ПодтверждениеДоставки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО, "Тип");
		Если ПодтверждениеДоставки <> Неопределено Тогда
			ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
		КонецЕсли;
		
		// анализируем протоколы приема
		// если их несколько, то интересует последний
		ПротоколыПриема = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО));
		ЧислоПротоколов = ПротоколыПриема.Количество();
		Если ЧислоПротоколов = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоПротоколов = 1 Тогда
			ПротоколПриема = ПротоколыПриема[0];
			Если ПротоколПриема.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийПротокол = Неопределено;
			ДатаНаиболееПозднегоПротокола = '00010101';
			Для Каждого ПротоколПриема Из ПротоколыПриема Цикл
				ДатаПротоколаПриема = ПротоколПриема.Дата;
				Если ДатаПротоколаПриема = Неопределено Тогда
					ДатаПротоколаПриема = '00010101';
				КонецЕсли;
				Если ДатаПротоколаПриема >= ДатаНаиболееПозднегоПротокола Тогда
					ДатаНаиболееПозднегоПротокола = ДатаПротоколаПриема;
					НаиболееПозднийПротокол = ПротоколПриема;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПозднийПротокол.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
			
		КонецЕсли;
		
		// анализируем протоколы обработки
		// если их несколько, то анализируем последний
		ПротоколыОбработки = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО));
		ЧислоПротоколов = ПротоколыОбработки.Количество();
		Если ЧислоПротоколов = 0 Тогда
			Возврат ТекСтатус;
		Иначе
			Возврат Перечисления.СтатусыОтправки.Сдан;
		КонецЕсли;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьФСГС Тогда
		
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		ПервичноеСообщениеСодержащееОтчетность = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС, "Тип");
		Если ПервичноеСообщениеСодержащееОтчетность <> Неопределено Тогда
			Если ПервичноеСообщениеСодержащееОтчетность.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
			Иначе
				Возврат ТекСтатус;
			КонецЕсли;
		Иначе
			Возврат ТекСтатус;
		КонецЕсли;
		
		ПодтвержденияДоставки = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС));
		ЧислоПодтвержденийДоставки = ПодтвержденияДоставки.Количество();
		Если ЧислоПодтвержденийДоставки = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоПодтвержденийДоставки = 1 Тогда
			ПодтверждениеДоставки = ПодтвержденияДоставки[0];
			Если ПодтверждениеДоставки.Ссылка.ПротоколСОшибкой Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
			КонецЕсли;
		Иначе
			// если извещений несколько, то ориентируемся на наиболее свежее из них
			НаиболееПоздниееПодтверждение = Неопределено;
			ДатаНаиболееПозднегоПодтверждения = '00010101';
			Для Каждого ПодтверждениеДоставки Из ПодтвержденияДоставки Цикл
				ДатаПодтверждения = ПодтверждениеДоставки.Дата;
				Если ДатаПодтверждения = Неопределено Тогда
					ДатаПодтверждения = '00010101';
				КонецЕсли;
				Если ДатаПодтверждения >= ДатаНаиболееПозднегоПодтверждения Тогда
					ДатаНаиболееПозднегоПодтверждения = ДатаПодтверждения;
					НаиболееПоздниееПодтверждение = ПодтверждениеДоставки;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПоздниееПодтверждение.Ссылка.ПротоколСОшибкой Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
			КонецЕсли;
			
		КонецЕсли;
		
		ПротоколыПроверки = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС));
		ЧислоПротоколов = ПротоколыПроверки.Количество();
		Если ЧислоПротоколов = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоПротоколов = 1 Тогда
			ПротоколПроверки = ПротоколыПроверки[0];
			Если Не СообщениеРасшифровано(ПротоколПроверки.Ссылка) Тогда
				Возврат ТекСтатус;
			КонецЕсли;
			Если ПротоколПроверки.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				Возврат Перечисления.СтатусыОтправки.Сдан;
			КонецЕсли;
		Иначе
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийПротокол = Неопределено;
			ДатаНаиболееПозднегоПротокола = '00010101';
			Для Каждого ПротоколПроверки Из ПротоколыПроверки Цикл
				ДатаПротоколаПроверки = ПротоколПроверки.Дата;
				Если ДатаПротоколаПроверки = Неопределено Тогда
					ДатаПротоколаПроверки = '00010101';
				КонецЕсли;
				Если ДатаПротоколаПроверки >= ДатаНаиболееПозднегоПротокола Тогда
					ДатаНаиболееПозднегоПротокола = ДатаПротоколаПроверки;
					НаиболееПозднийПротокол = ПротоколПроверки;
				КонецЕсли;
			КонецЦикла;
			
			Если Не СообщениеРасшифровано(НаиболееПозднийПротокол.Ссылка) Тогда
				Возврат ТекСтатус;
			КонецЕсли;
			Если НаиболееПозднийПротокол.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				Возврат Перечисления.СтатусыОтправки.Сдан;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ТекСтатус;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ПисьменноеОбращениеВФСГС Тогда
		
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		ПервичноеСообщениеСодержащееПисьмо = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС, "Тип");
		Если ПервичноеСообщениеСодержащееПисьмо <> Неопределено Тогда
			Если ПервичноеСообщениеСодержащееПисьмо.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
			Иначе
				Возврат Перечисления.СтатусыОтправки.ВКонверте;
			КонецЕсли;
		Иначе
			Возврат ТекСтатус;
		КонецЕсли;
		
		ПодтверждениеДоставки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС, "Тип");
		Если ПодтверждениеДоставки = Неопределено Тогда
			Возврат ТекСтатус;
		Иначе
			ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

Функция РассчитатьСтатусОтправкиОбъекта(Объект, Знач ЦиклОбмена = Неопределено) Экспорт
	
	Если ЦиклОбмена = Неопределено Тогда
		ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(Объект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат РассчитатьСтатусЦиклаОбмена(ЦиклОбмена);
	Иначе
		Возврат Перечисления.СтатусыОтправки.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьСтатусыСвязанногоОбъектаПриНеобходимости(Объект, СтрогоПоДанномуЦиклуОбмена = Ложь) Экспорт
	
	// определяем цикл обмена для расчета статуса отчета
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("ДокументСсылка.ТранспортноеСообщение") ИЛИ ТипОбъекта = Тип("ДокументОбъект.ТранспортноеСообщение") Тогда
		ЦиклОбменаОснование = Объект.ЦиклОбмена;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ЦиклыОбмена") Тогда
		ЦиклОбменаОснование = Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПредметыПереписки = ПолучитьПредметыЦиклаОбмена(ЦиклОбменаОснование);
	Для Каждого Предмет Из ПредметыПереписки Цикл
		Если ЗначениеЗаполнено(Предмет) И Метаданные.РегистрыСведений.СтатусыОтправки.Измерения.Объект.Тип.СодержитТип(ТипЗнч(Предмет)) Тогда
			СтатусОтчета = РассчитатьСтатусОтправкиОбъекта(Предмет, ?(СтрогоПоДанномуЦиклуОбмена, ЦиклОбменаОснование, Неопределено));
			Если СтатусОтчета <> Перечисления.СтатусыОтправки.ПустаяСсылка() Тогда
				ЗаписатьСтатусОтправкиОбъекта(Предмет, СтатусОтчета);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписиОбъекта(Объект, Отказ, Замещение = Неопределено) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("СправочникОбъект.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		ПриЗаписиЭлектронногоПредставленияРегламентированногоОтчета(Объект, Отказ);
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.УчетныеЗаписиДокументооборота") Тогда
		ПриЗаписиУчетнойЗаписиНалогоплательщика(Объект, Отказ);
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ЦиклыОбмена") Тогда
		ПриЗаписиЦиклаОбмена(Объект, Отказ);
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ТранспортноеСообщение") Тогда
		ПриЗаписиТранспортногоСообщения(Объект, Отказ);
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ОтправкиФСС") Тогда
		ПриЗаписиОтправкиФСС(Объект, Отказ);
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ОтправкиФСРАР") Тогда
		ПриЗаписиОтправкиФСРАР(Объект, Отказ);
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ОтправкиРПН") Тогда
		ПриЗаписиОтправкиРПН(Объект, Отказ);
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ОтправкиФТС") Тогда
		ПриЗаписиОтправкиФТС(Объект, Отказ);
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ОписиИсходящихДокументовВНалоговыеОрганы") 
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.ПоясненияКДекларацииПоНДС")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.ПерепискаСКонтролирующимиОрганами") Тогда
		ПриЗаписиОтветаНаТребованиеФНС(Объект, Отказ);
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.СканированныеДокументыДляПередачиВЭлектронномВиде") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьСканированныйДокументВРегистрДокументыПоТребованиюФНС(Объект);
	ИначеЕсли Объект.Метаданные().Имя = "ОтправкиБанкРоссии" Тогда
		ПриЗаписиОтправкиБанкРоссии(Объект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЭлементДаты(МассивЭлементов, ИндексЭлемента)
	
	Если МассивЭлементов.Количество() <= ИндексЭлемента Тогда
		Возврат 0;
	Иначе
		ЭлементДаты = МассивЭлементов[ИндексЭлемента];
		Если ПустаяСтрока(ЭлементДаты) ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЭлементДаты) Тогда
			Возврат 0;
		Иначе
			Возврат Число(ЭлементДаты);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьАтрибутыУзла(Узел) Экспорт
	
	УзлыАтрибуты = Узел.Строки.НайтиСтроки(Новый Структура("Тип", "А"));
	
	АтрибутыУзла = Новый Структура;
	Для Каждого УзелАтрибут Из УзлыАтрибуты Цикл
		АтрибутыУзла.Вставить(УзелАтрибут.Имя, УзелАтрибут.Значение);
	КонецЦикла;
	
	Возврат АтрибутыУзла;
	
КонецФункции

Функция СформироватьНаименованиеЭлектронногоПредставленияРегламентированногоОтчета(ЭлПредставление) Экспорт
	
	Если ЭлПредставление.мИмяФайла = "" ИЛИ ЭлПредставление.мИмяФайла = Неопределено Тогда
		Возврат "Для НО " + ЭлПредставление.НалоговыйОрган + " от " + ЭлПредставление.Организация;
	Иначе
		Возврат СокрЛП(ЭлПредставление.мИмяФайла) + " для НО " + ЭлПредставление.НалоговыйОрган + " от " + ЭлПредставление.Организация;
	КонецЕсли;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ЦИКЛА ОБМЕНА

Процедура ПередЗаписьюЦиклаОбмена(Объект, Отказ)
	
	Объект.ИзмененаПометкаУдаления = (Объект.Ссылка.ПометкаУдаления <> Объект.ПометкаУдаления);
	Если Объект.ИзмененаПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ШапкаОшибки = "Не удалось записать цикл обмена " + ПредставлениеЦиклаОбмена(Объект) + ":";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		РегламентированнаяОтчетностьКлиентСервер.СообщитьОбОшибке("Не указана организация!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВнешняяОрганизация) Тогда
		Если Объект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС Тогда
			РегламентированнаяОтчетностьКлиентСервер.СообщитьОбОшибке("Не указан налоговый орган!", Отказ, ШапкаОшибки);
		ИначеЕсли Объект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР Тогда
			РегламентированнаяОтчетностьКлиентСервер.СообщитьОбОшибке("Не указан орган ПФР!", Отказ, ШапкаОшибки);
		ИначеЕсли Объект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФСГС Тогда
			РегламентированнаяОтчетностьКлиентСервер.СообщитьОбОшибке("Не указан орган ФСГС!", Отказ, ШапкаОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаСоздания) Тогда
			Объект.ДатаСоздания = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.Наименование) Тогда
			СгенерироватьНаименованиеЦиклаОбмена(Объект);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
			Объект.ДатаЗакрытия = ПолучитьПустуюДатуЗавершенияЦиклаОбмена();
		КонецЕсли;
		
		Если Объект.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность
		ИЛИ Объект.Тип = Перечисления.ТипыЦикловОбмена.Заявление
		ИЛИ Объект.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
			Объект.Период = СокрЛП(Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd") + Формат('39991231' - Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd"));
			Объект.ПредставлениеПериода = ПредставлениеПериода(Объект.ДатаНачалаПериода, КонецДня(Объект.ДатаОкончанияПериода), "ФП=Истина");
		ИначеЕсли Объект.Тип = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание
		ИЛИ Объект.Тип = Перечисления.ТипыЦикловОбмена.ИОН
		ИЛИ Объект.Тип = Перечисления.ТипыЦикловОбмена.ИОС Тогда
			Объект.Период = СокрЛП(Формат(Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd") + Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd"));
		ИначеЕсли Объект.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда 
			Объект.Период = СокрЛП(Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd") + Формат('39991231' - Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd"));
			Объект.ПредставлениеПериода = ПредставлениеПериода(Объект.ДатаНачалаПериода, КонецДня(Объект.ДатаОкончанияПериода), "ФП=Истина");
		ИначеЕсли Объект.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьФСГС Тогда 
			Объект.Период = СокрЛП(Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd") + Формат('39991231' - Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd"));
			Объект.ПредставлениеПериода = ПредставлениеПериода(Объект.ДатаНачалаПериода, КонецДня(Объект.ДатаОкончанияПериода), "ФП=Истина");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПредставлениеПериода) И (ЗначениеЗаполнено(Объект.ДатаНачалаПериода) И ЗначениеЗаполнено(Объект.ДатаОкончанияПериода)) Тогда
			Объект.ПредставлениеПериода = ПредставлениеПериода(Объект.ДатаНачалаПериода, КонецДня(Объект.ДатаОкончанияПериода), "ФП=Истина");
		КонецЕсли;
		
		// Для закладки ФНС - Отчетность формы Управление обменом
		Если Объект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС
			И Объект.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534
			И (Объект.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность
			ИЛИ Объект.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ) Тогда 
				Объект.ПредставлениеВидаДокумента = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Объект.ВидДокумента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СгенерироватьНаименованиеЦиклаОбмена(ЦиклОбмена)
	
	Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность
	ИЛИ ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Заявление
	ИЛИ ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		ЦиклОбмена.Наименование = ПолучитьИмяФайлаДИВЦиклаОбмена(ЦиклОбмена);
		Если ЗначениеЗаполнено(ЦиклОбмена.ВнешняяОрганизация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " для НО " + ЦиклОбмена.ВнешняяОрганизация;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЦиклОбмена.Организация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " от " + ЦиклОбмена.Организация;
		КонецЕсли;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика Тогда
		ЦиклОбмена.Наименование = ПолучитьИмяФайлаДИВЦиклаОбмена(ЦиклОбмена);
		Если ЗначениеЗаполнено(ЦиклОбмена.ВнешняяОрганизация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " для НО " + ЦиклОбмена.ВнешняяОрганизация;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЦиклОбмена.Организация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " от " + ЦиклОбмена.Организация;
		КонецЕсли;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
		ЦиклОбмена.Наименование = ПолучитьИмяФайлаДИВЦиклаОбмена(ЦиклОбмена);
		Если ЗначениеЗаполнено(ЦиклОбмена.ВнешняяОрганизация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " для НО " + ЦиклОбмена.ВнешняяОрганизация;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЦиклОбмена.Организация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " от " + ЦиклОбмена.Организация;
		КонецЕсли;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана Тогда
		ЦиклОбмена.Наименование = "От НО " + ЦиклОбмена.ВнешняяОрганизация;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ПисьмоНО Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Рассылка Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Документ Тогда
		ЦиклОбмена.Наименование = "От НО " + ЦиклОбмена.ВнешняяОрганизация;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
		
		Если ТипЗнч(ЦиклОбмена.ВидОтчета) = Тип("СправочникСсылка.РегламентированныеОтчеты") Тогда
			Источник = ЦиклОбмена.ВидОтчета.ИсточникОтчета;
		Иначе
			Источник = ЦиклОбмена.ВидОтчета.Источник;
		КонецЕсли;
		
		Если НачалоДня(ЦиклОбмена.ДатаНачалаПериода) = НачалоДня(ЦиклОбмена.ДатаОкончанияПериода) Тогда
			ЦиклОбмена.Наименование = "" + ЦиклОбмена.Предмет + ". Отправка от " + ЦиклОбмена.ДатаСоздания;
		ИначеЕсли Источник = "ПередачаСЗВ4вПФР" Тогда
			ЦиклОбмена.Наименование = "" + ЦиклОбмена.ВидОтчета + " и РСВ за " + ПредставлениеПериода(ЦиклОбмена.ДатаНачалаПериода, КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина") + " от " + ЦиклОбмена.ДатаСоздания;
		Иначе
			ЦиклОбмена.Наименование = "" + ЦиклОбмена.ВидОтчета + " за " + ПредставлениеПериода(ЦиклОбмена.ДатаНачалаПериода, КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина") + " от " + ЦиклОбмена.ДатаСоздания;
		КонецЕсли;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОС Тогда
		ЦиклОбмена.Наименование = СокрЛП(ЦиклОбмена.Предмет) + " для " + СокрЛП(ЦиклОбмена.ВнешняяОрганизация) + " от " + СокрЛП(ЦиклОбмена.Организация);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие
		Или ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаПФР Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Представление Тогда
		ЦиклОбмена.Наименование = "Представление документов";
		Если ЗначениеЗаполнено(ЦиклОбмена.ВнешняяОрганизация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " для НО " + ЦиклОбмена.ВнешняяОрганизация;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЦиклОбмена.Организация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " от " + ЦиклОбмена.Организация;
		КонецЕсли;	
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
		ЦиклОбмена.Наименование = ПолучитьИмяФайлаДИВЦиклаОбмена(ЦиклОбмена);
		Если ЗначениеЗаполнено(ЦиклОбмена.ВнешняяОрганизация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " для НО " + ЦиклОбмена.ВнешняяОрганизация;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЦиклОбмена.Организация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " от " + ЦиклОбмена.Организация;
		КонецЕсли;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьФСГС Тогда
		Если ТипЗнч(ЦиклОбмена.Предмет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ЦиклОбмена.Наименование = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ЦиклОбмена.Предмет) + " для " + СокрЛП(ЦиклОбмена.ВнешняяОрганизация);
		Иначе
			ЦиклОбмена.Наименование = СокрЛП(ЦиклОбмена.Предмет) + " для " + СокрЛП(ЦиклОбмена.ВнешняяОрганизация) + " от " + СокрЛП(ЦиклОбмена.Организация);
		КонецЕсли;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИндивидуальноеИнформированиеФСГС Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ПисьменноеОбращениеВФСГС Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаФСГС Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	КонецЕсли;
	
КонецПроцедуры

Функция ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена)
	
	Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие
	ИЛИ ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП
	ИЛИ ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ПисьменноеОбращениеВФСГС Тогда
		Возврат """" + СокрЛП(ЦиклОбмена.Предмет.Наименование) + """ для " + ЦиклОбмена.ВнешняяОрганизация;
	КонецЕсли;
	
	// получаем исходное сообщение
	Если ТипЗнч(ЦиклОбмена) = Тип("СправочникСсылка.ЦиклыОбмена") Тогда
		СсылкаНаЦиклОбмена = ЦиклОбмена;
	Иначе
		СсылкаНаЦиклОбмена = ?(ЦиклОбмена.ЭтоНовый(), ЦиклОбмена.ПолучитьСсылкуНового(), ЦиклОбмена.Ссылка);
	КонецЕсли;
	ТипПервичногоСообщения = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьТипПервичногоСообщенияПоЦиклуОбмена(ЦиклОбмена);
	
	ПисьмоВходящее = ПолучитьСообщениеЦиклаОбмена(СсылкаНаЦиклОбмена, ТипПервичногоСообщения);
	Если НЕ ЗначениеЗаполнено(ПисьмоВходящее) Тогда
		Возврат "";
	КонецЕсли;
	
	// извлекаем вложения расшифрованного входящего сообщения
	Если ТипПервичногоСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР Тогда
		ТипСодержимогоОписаниеПисьма = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма;
	ИначеЕсли ТипПервичногоСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС
		  ИЛИ ТипПервичногоСообщения = Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС Тогда
		ТипСодержимогоОписаниеПисьма = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьмаФСГС;
	Иначе
		ТипСодержимогоОписаниеПисьма = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка;
	КонецЕсли;
	
	ВложенияОписанияКПисьму = ПолучитьВложенияТранспортногоСообщения(ПисьмоВходящее, Истина, ТипСодержимогоОписаниеПисьма);
	Если ВложенияОписанияКПисьму.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	ВложенияОписаниеКПисьму = ВложенияОписанияКПисьму[0];
	
	// загружаем описание к письму
	ВремФайлОписаниеКПисьму = ПолучитьИмяВременногоФайла();
	ВложенияОписаниеКПисьму.Данные.Получить().Записать(ВремФайлОписаниеКПисьму);
	ДеревоОписанияКПисьму = ЗагрузитьXMLВДеревоЗначений(ВремФайлОписаниеКПисьму);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВремФайлОписаниеКПисьму);
	Если ДеревоОписанияКПисьму = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	УзелТема = ДеревоОписанияКПисьму.Строки.Найти("тема", "Имя", Истина);
	Если УзелТема = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Тема = XMLЗначениеВнутр(Тип("Строка"), УзелТема.Значение);
	
	Возврат """" + Тема + """ от " + ЦиклОбмена.ВнешняяОрганизация;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ТРАНСПОРТНОГО СООБЩЕНИЯ

Процедура ПриЗаписиТранспортногоСообщения(Объект, Отказ)
	
	Если НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОбновитьСвойстваЦиклаОбмена(Объект.ЦиклОбмена) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Обновляем статус в регистре ЖурналОтправокВКонтролирующиеОрганы
	ЦиклОбмена = Объект.ЦиклОбмена;
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат;
	КонецЕсли;

	Предмет = ЦиклОбмена.Предмет;
	Если НЕ ЗначениеЗаполнено(Предмет) Тогда 
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписьОбъектовРегламентированнойОтчетности(Предмет, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписьюТранспортногоСообщения(Объект, Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.СтатусыПисем.ПустаяСсылка() Тогда
		Объект.Статус = Перечисления.СтатусыПисем.Сохраненное;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияТранспортногоСообщения(Объект, СообщениеОснование) Экспорт
	Перем ИмяФайлаЭЦП;
	Перем ДанныеЭЦП;
	Перем ИмяФайлаСертификата;
	Перем ДанныеСертификата;
	Перем РазмерФайлаСертификата;
	Перем РазмерФайлаЭЦП;
	Перем ЭЦПИмяПодписанногоФайла;
	Перем ЭЦПСертификат;
	Перем ЭЦПСтатусПроверки;
	
	Если ТипЗнч(СообщениеОснование) <> Тип("ДокументСсылка.ТранспортноеСообщение") Тогда
		Объект.ОшибкаЗаполнения = Истина;
		Возврат;
	КонецЕсли;
		
	Если НЕ СообщениеРасшифровано(СообщениеОснование) Тогда
		Объект.ОшибкаЗаполнения = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СообщениеОснование.ЦиклОбмена) Тогда
		Объект.ОшибкаЗаполнения = Истина;
		Возврат;
	КонецЕсли;
	
	Если СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР Тогда
		//формируем подтверждение на протокол ПФР
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.ЦиклОбмена.ВнешняяОрганизация;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ReSign: Pension-Protocol";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																						Символ(34) + Объект.Тип + Символ(34),
																						Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР Тогда
		//формируем подтверждение на протокол ПФР
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.ЦиклОбмена.ВнешняяОрганизация;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ReSign: Pension-Reply";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																						Символ(34) + Объект.Тип + Символ(34),
																						Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР Тогда
		// формируем подтверждение на входящее неформализованное от ПФР
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.ЦиклОбмена.ВнешняяОрганизация;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ReSign: Pension-Unformal";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																						Символ(34) + Объект.Тип + Символ(34),
																						Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО 
	ИЛИ СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО Тогда
		// формируем подтверждение на подтверждение даты отправки
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.УчетнаяЗапись.СерверДокументооборота;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПодтверждениеНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																							Символ(34) + Объект.Тип + Символ(34),
																							Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО Тогда
		// формируем подтверждение на подтверждение даты отправки
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.УчетнаяЗапись.СерверДокументооборота;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПодтверждениеНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																						Символ(34) + Объект.Тип + Символ(34),
																						Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО Тогда
		// формируем подтверждение на подтверждение даты отправки
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.УчетнаяЗапись.СерверДокументооборота;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПодтверждениеНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																						Символ(34) + Объект.Тип + Символ(34),
																						Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО Тогда
		// формируем подтверждение на подтверждение даты отправки
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.УчетнаяЗапись.СерверДокументооборота;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПодтверждениеНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																						Символ(34) + Объект.Тип + Символ(34),
																						Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО Тогда
		// формируем подтверждение на подтверждение даты отправки
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.УчетнаяЗапись.СерверДокументооборота;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПодтверждениеНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																						Символ(34) + Объект.Тип + Символ(34),
																						Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО 
	ИЛИ СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО Тогда
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатПриемаНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																						Символ(34) + Объект.Тип + Символ(34),
																						Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО Тогда
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатПриемаНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																						Символ(34) + Объект.Тип + Символ(34),
																						Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО Тогда
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатПриемаНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																							Символ(34) + Объект.Тип + Символ(34),
																							Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО Тогда
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатПриемаНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																							Символ(34) + Объект.Тип + Символ(34),
																							Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();

	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО Тогда
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
			Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатПриемаНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
			Символ(34) + Объект.Тип + Символ(34),
			Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО Тогда
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
			Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатОбработкиНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
			Символ(34) + Объект.Тип + Символ(34),
			Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО Тогда
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
			Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатОбработкиНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
			Символ(34) + Объект.Тип + Символ(34),
			Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО Тогда
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
			Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатОбработкиРФНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
			Символ(34) + Объект.Тип + Символ(34),
			Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО Тогда
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
			Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеОбОтзывеЗаявлениеРФНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
			Символ(34) + Объект.Тип + Символ(34),
			Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО Тогда
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
			Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатОбработкиТСНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
			Символ(34) + Объект.Тип + Символ(34),
			Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО Тогда
		// формируем подтверждение на подтверждение даты отправки
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
			Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатОбработкиНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
			Символ(34) + Объект.Тип + Символ(34),
			Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО Тогда
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
			Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПисьмоНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
			Символ(34) + Объект.Тип + Символ(34),
			Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РассылкаНО Тогда
		
		Если СообщениеОснование.ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Рассылка Тогда // формируем ответ только на групповую рассылку
			Возврат;
		КонецЕсли;
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
			Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРассылкаНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
			Символ(34) + Объект.Тип + Символ(34),
			Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ДокументНО Тогда
		
		Если Объект.Тема = "ФНС:1.0-квитанцияОПриеме-РезультатПриемаДокументНП" 
		 ИЛИ Объект.Тема = "ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаДокументНП" Тогда
		    ПоложительныйРезультатПриема = (Объект.Тема = "ФНС:1.0-квитанцияОПриеме-РезультатПриемаДокументНП");
			// заполнение результата приема
			Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП).Количество() > 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Результат приема транспортного сообщения %1 уже существует.'"),
				Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
				Объект.ОшибкаЗаполнения = Истина;
				Возврат;
			КонецЕсли;
			
			Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП;
			Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
			Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
			Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
			Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
			Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
			Объект.Основание = СообщениеОснование;
			Если НЕ ПоложительныйРезультатПриема Тогда
				Объект.ПротоколСОшибкой = Истина;
			КонецЕсли;
			
			НачатьТранзакцию();
			
			// пишем текущее сообщение, чтобы было к чему добавлять вложения
			Попытка
				Объект.Записать();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
				Символ(34) + Объект.Тип + Символ(34),
				Символ(34) + Объект.ЦиклОбмена + Символ(34));
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
				Объект.ОшибкаЗаполнения = Истина;
				Возврат;
			КонецПопытки;
			
			Объект.ОшибкаЗаполнения = Ложь;
			ЗафиксироватьТранзакцию();
			
		Иначе
			
			Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП).Количество() > 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
				Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
				Объект.ОшибкаЗаполнения = Истина;
				Возврат;
			КонецЕсли;
			
			Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП;
			Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
			Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
			Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
			Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
			Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
			Объект.Основание = СообщениеОснование;
			Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеДокументНП";
			
			НачатьТранзакцию();
			
			// пишем текущее сообщение, чтобы было к чему добавлять вложения
			Попытка
				Объект.Записать();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
				Символ(34) + Объект.Тип + Символ(34),
				Символ(34) + Объект.ЦиклОбмена + Символ(34));
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
				Объект.ОшибкаЗаполнения = Истина;
				Возврат;
			КонецПопытки;
			
			Объект.ОшибкаЗаполнения = Ложь;
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
	// Росстат
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС Тогда
		//формируем квитанцию на подтверждение даты отправки ФСГС
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.ЦиклОбмена.ВнешняяОрганизация;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ReSign: Stat-Confirmation";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																						Символ(34) + Объект.Тип + Символ(34),
																						Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();

	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС Тогда
		//формируем подтверждение на протокол ФСГС
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.ЦиклОбмена.ВнешняяОрганизация;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ReSign: Stat-Protocol";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																						Символ(34) + Объект.Тип + Символ(34),
																						Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС Тогда
		// формируем подтверждение на входящее неформализованное от ФСГС
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС).Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Подтверждение на транспортное сообщение %1 уже существует.'"),
																						Символ(34) + ПредставлениеТранспортногоСообщения(СообщениеОснование) + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.ЦиклОбмена.ВнешняяОрганизация;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ReSign: Stat-Unformal";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи сообщения %1 цикла обмена %2!'"),
																						Символ(34) + Объект.Тип + Символ(34),
																						Символ(34) + Объект.ЦиклОбмена + Символ(34));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

// перенесена в контейнер
Функция ОбработатьСодержаниеОснования(Содержание)
	
	Результат = "";
	Для Инд = 1 По СтрЧислоСтрок(Содержание) Цикл
		Результат = Результат + "> " + СтрПолучитьСтроку(Содержание, Инд);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ СПРАВОЧНИКА ПЕРЕПИСКАСКОНТРОЛИРУЮЩИМИОРГАНАМИ


Процедура ПередЗаписьюПерепискиСКонтролирующимиОрганами(Объект, Отказ)

	Если Объект.ЭтоНовый() Тогда // именно без проверки заполнения Идентификатора, т.к. возможна запись скопированного
		Если Объект.Статус <> Перечисления.СтатусыПисем.Полученное ИЛИ НЕ ЗначениеЗаполнено(Объект.Идентификатор) Тогда
 			Объект.Идентификатор = СгенерироватьUUID();
		КонецЕсли;
	КонецЕсли;
	
	ТипОрганизации = Тип("СправочникСсылка.Организации");
	Если ТипЗнч(Объект.Отправитель) = ТипОрганизации Тогда
		Объект.Организация = Объект.Отправитель;
	ИначеЕсли ТипЗнч(Объект.Получатель) = ТипОрганизации Тогда
		Объект.Организация = Объект.Получатель;
	Иначе
		Объект.Организация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция  ОбработкаЗаполненияПисьма(Объект, Основание, НастройкиОтвета)
	
	ЭтоРетроконверсия = (НастройкиОтвета <> Неопределено);
	// если это ретроконверсия, то обработка особая
	Если ЭтоРетроконверсия Тогда
		
		ВариантПодтверждения = НастройкиОтвета.ВариантПодтверждения;
		ПодтвержденныеФайлыСведений = НастройкиОтвета.ФайлыСведений;
		
		// заполняем свойства (кроме вложений)
		Объект.Наименование = "Re:" + СокрЛП(Основание.Наименование); // требование приемного ПО Калуга-Астрал
		Объект.Тип = Основание.Тип;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Отправитель = Основание.Получатель;
		Объект.Получатель = Основание.Отправитель;
		Объект.ДатаСообщения = ТекущаяДатаСеанса();
		Объект.ИдентификаторОснования = Основание.Идентификатор;
		Объект.Ретроконверсия = Основание.Ретроконверсия;
		
		ОбработанноеСодержимоеОснования = ОбработатьСодержаниеОснования(Основание.Содержание);
		Если ВариантПодтверждения = 2 Тогда // отклонение сведений
			Объект.Содержание = "Сведения содержат ошибки." + Символы.ПС + Символы.ПС + ОбработанноеСодержимоеОснования;
		Иначе
			
			Если ВариантПодтверждения = 3 Тогда // частичное подтверждение
				Объект.Содержание = "Сведения подтверждены лишь частично." + Символы.ПС + Символы.ПС + ОбработанноеСодержимоеОснования;
			Иначе
				Объект.Содержание = "Сведения верны." + Символы.ПС + Символы.ПС + ОбработанноеСодержимоеОснования;
			КонецЕсли;
			
			Вложения = ПолучитьВложенияНеформализованногоДокумента(Основание, , Истина);
			
			НачатьТранзакцию();
			
			Попытка
				Объект.Записать();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось создать ответ:%1'"),
																							Символы.ПС + ИнформацияОбОшибке().Описание);
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
				Возврат Неопределено;
			КонецПопытки;
			
			// копируем вложения
			Для Каждого Вложение Из Вложения Цикл
				Если ПодтвержденныеФайлыСведений.Найти(Вложение.ИмяФайла) <> Неопределено Тогда
					Если НЕ ДобавитьВложенияПисьма(Объект.Ссылка, Вложение.ИмяФайла, Вложение.Данные, Вложение.Тип, Вложение.Размер) Тогда
						ОтменитьТранзакцию();
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
		Возврат Объект;
		
	Иначе
	
		// получаем вложения и, при необходимости, задаем уточняющий вопрос
		Вложения = ПолучитьВложенияНеформализованногоДокумента(Основание.Ссылка, , Истина);
		
		// заполняем свойства (кроме вложений)
		Объект.Наименование = "Ответ на: " + СокрЛП(Основание.Наименование);
		Объект.Тип = Основание.Тип;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Отправитель = Основание.Получатель;
		Объект.Получатель = Основание.Отправитель;
		Объект.Содержание = Символы.ПС + Символы.ПС + ОбработатьСодержаниеОснования(Основание.Содержание);
		Объект.ДатаСообщения = ТекущаяДатаСеанса();
		Объект.ИдентификаторОснования = Основание.Идентификатор;
		Объект.Ретроконверсия = Основание.Ретроконверсия;
		
		// записываем, если необходимо скопировать вложения
		Если Вложения.Количество() > 0 Тогда
			
			// открываем транзакцию
			НачатьТранзакцию();
			
			Попытка
				Объект.Записать();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось создать ответ:%1'"),
																							Символы.ПС + ИнформацияОбОшибке().Описание);
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
				Возврат Неопределено;
			КонецПопытки;
			
			// копируем вложения
			Для Каждого Вложение Из Вложения Цикл
				Если НЕ ДобавитьВложенияПисьма(Объект.Ссылка, Вложение.ИмяФайла, Вложение.Данные, Вложение.Тип, Вложение.Размер) Тогда
					ОтменитьТранзакцию();
					Возврат Неопределено;
				КонецЕсли;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
		Возврат Объект;
		
	КонецЕсли;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьСвойстваМодуляДокументооборота() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль,
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль
	                      |ИЗ
	                      |	Константы КАК Константы");
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Возврат Новый Структура("ИспользоватьВнешнийМодуль, ВнешнийМодуль", Выборка.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль, Выборка.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Проверяем, разрешено ли изменение констант внешнего модуля; изменение проводить в привилегированном режиме, поскольку константы неразделенные
Функция ИзменениеСвойствМодуляДокументооборотаВозможно() Экспорт
	
	Возврат		(ПравоДоступа("Изменение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль)
			И	ПравоДоступа("Изменение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль))
			ИЛИ	ПравоДоступа("Изменение", Метаданные.Справочники.УчетныеЗаписиДокументооборота);
	
КонецФункции

Функция ПрименитьСвойстваМодуляДокументооборота(ИспользоватьВнешнийМодуль = Неопределено, ВнешнийМодуль = Неопределено, ОписаниеОшибки = Неопределено, ВерсияВнешнегоМодуля = "") Экспорт
	
	// определяем, какие константы будут меняться
	МодифицируемыеКонстанты = Новый Массив;
	
	// подготавливаем двоичные данные внешнего модуля
	Если ВнешнийМодуль <> Неопределено Тогда
		
		МодифицируемыеКонстанты.Добавить("ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля");
		МодифицируемыеКонстанты.Добавить("ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль");
		
		ТипЗнчВнешнийМодуль = ТипЗнч(ВнешнийМодуль);
		Если ТипЗнчВнешнийМодуль = Тип("Строка") Тогда
			ОбъектВнешнийМодуль = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ВнешнийМодуль));
			ФайлВнешнегоМодуля = ВнешнийМодуль;
		Иначе
			ФайлВнешнегоМодуля = ПолучитьИмяВременногоФайла();
			Если ТипЗнчВнешнийМодуль = Тип("ДвоичныеДанные") Тогда
				ОбъектВнешнийМодуль = Новый ХранилищеЗначения(ВнешнийМодуль);
			ИначеЕсли ТипЗнчВнешнийМодуль = Тип("ХранилищеЗначения") Тогда
				ОбъектВнешнийМодуль = ВнешнийМодуль;
			КонецЕсли;
			ОбъектВнешнийМодуль.Получить().Записать(ФайлВнешнегоМодуля);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВерсияВнешнегоМодуля) Тогда
			ОписаниеОшибки = "Некорректный формат внешнего модуля: не удалось извлечь версию.";
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьВнешнийМодуль <> Неопределено Тогда
		МодифицируемыеКонстанты.Добавить("ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль");
	КонецЕсли;
	
	КоличествоМодифицируемыхКонстант = МодифицируемыеКонстанты.Количество();
	Если КоличествоМодифицируемыхКонстант = 0 Тогда
		Возврат Истина;
	ИначеЕсли КоличествоМодифицируемыхКонстант = 1 Тогда
		СтрМодифицируемыеКонстанты = МодифицируемыеКонстанты[0];
	ИначеЕсли КоличествоМодифицируемыхКонстант > 1 Тогда
		СтрМодифицируемыеКонстанты = МодифицируемыеКонстанты[0] + ", " + МодифицируемыеКонстанты[1] + ", " + МодифицируемыеКонстанты[2];
	КонецЕсли;
	
	ИзменениеВнешнегоМодуляРазрешено = ИзменениеСвойствМодуляДокументооборотаВозможно();
	
	// инициализируем значения констант
	Попытка
		Если ИзменениеВнешнегоМодуляРазрешено Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		КонстантыНабор = Константы.СоздатьНабор(СтрМодифицируемыеКонстанты);
		Если ИспользоватьВнешнийМодуль <> Неопределено Тогда
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль = ИспользоватьВнешнийМодуль;
		КонецЕсли;
		Если ВнешнийМодуль <> Неопределено Тогда
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль = ОбъектВнешнийМодуль;
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля = ВерсияВнешнегоМодуля;
		КонецЕсли;
		КонстантыНабор.Записать();
		Если ИзменениеВнешнегоМодуляРазрешено Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		Возврат Истина;
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ЗагрузитьXMLВДеревоЗначений(ИмяФайлаXML = Неопределено, ТекстXML = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	// считываем текст из файла
	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		ТекстXML = ПрочитатьТекстИзФайла(ИмяФайлаXML, , Истина);
		Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// восстанавливаем дерево
	Возврат ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML, ОписаниеОшибки);
	
КонецФункции

Функция ПрочитатьBase64ИзФайла(ИмяФайла)
	
	МассивФайловПослеРазбиения = РазделитьФайл(ИмяФайла, 1024 * 1024 * 3);
	КоличествоФайловВМассиве = МассивФайловПослеРазбиения.Количество();
	СтрокаЗамены = Символ(13) + Символ(10);
	СтрокаРезультат = "";
	
	Для НомерФайла = 0 По КоличествоФайловВМассиве - 1 Цикл
		
		ВремФайл = МассивФайловПослеРазбиения[НомерФайла];
		
		ВременнаяСтрокаРезультата = Base64Строка(Новый ДвоичныеДанные(ВремФайл));
		ВременнаяСтрокаРезультата = СтрЗаменить(ВременнаяСтрокаРезультата, СтрокаЗамены, "");
		СтрокаРезультат = СтрокаРезультат + ВременнаяСтрокаРезультата;
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВремФайл);
		
	КонецЦикла;
	
	Возврат СтрокаРезультат;
	
КонецФункции

Функция СгенерироватьUUID() Экспорт
	
	Возврат нрег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	
КонецФункции

Функция СоздатьВременныйКаталог() Экспорт
	
	ИмяКаталога = КаталогВременныхФайлов();
	РазделительПутиОС = ПолучитьРазделительПути();
	Если Прав(ИмяКаталога, 1) <> РазделительПутиОС Тогда
		ИмяКаталога = ИмяКаталога + РазделительПутиОС;
	КонецЕсли;
	
	ИмяКаталога = ИмяКаталога + Строка(Новый УникальныйИдентификатор) + РазделительПутиОС;
	СоздатьКаталог(ИмяКаталога);
	
	Возврат ИмяКаталога;
	
КонецФункции

Функция СоздатьДеревоXML() Экспорт
	
	ДеревоXML = Новый ДеревоЗначений;
	ДеревоXML.Колонки.Добавить("Код");
	ДеревоXML.Колонки.Добавить("Тип");
	ДеревоXML.Колонки.Добавить("Значение");
	ДеревоXML.Колонки.Добавить("ЭтоCDATA");
	Возврат ДеревоXML;
	
КонецФункции

Функция ДобавитьУзелXML(Родитель, Код, ЭтоАтрибут = Ложь, Значение = Неопределено, Необязательный = Ложь, ЭтоCDATA = Ложь) Экспорт
	
	Если Необязательный И НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовСтр = Родитель.Строки.Добавить();
	
	НовСтр.Код = Код;
	НовСтр.Значение = Значение;
	Если ТипЗнч(ЭтоАтрибут) = Тип("Булево") Тогда
		НовСтр.Тип = ?(ЭтоАтрибут, "А", "Э");
	Иначе
		НовСтр.Тип = ЭтоАтрибут;
	КонецЕсли;
	
	ТипЗнчРодитель = ТипЗнч(Родитель);
	Если (ТипЗнчРодитель = Тип("ДеревоЗначений") И Родитель.Колонки.Найти("ЭтоCDATA") <> Неопределено)
	ИЛИ (ТипЗнчРодитель = Тип("СтрокаДереваЗначений") И Родитель.Владелец().Колонки.Найти("ЭтоCDATA") <> Неопределено) Тогда
		НовСтр.ЭтоCDATA = ЭтоCDATA;
	КонецЕсли;
	
	Возврат НовСтр;
	
КонецФункции

Функция ВыгрузитьДеревоВXML_ПФР(ДеревоВыгрузки, ИмяКорневогоЭлемента = Неопределено)
	
	ПотокXML = СоздатьНовыйПотокXML_ПФР();
	ЗаписатьУзелДереваВXML_ПФР(ДеревоВыгрузки, ПотокXML, ИмяКорневогоЭлемента);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, СтрНайти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML_ПФР()
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML_ПФР(СтрокаДерева, ПотокXML, ИмяКорневогоЭлемента)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Если ЗначениеЗаполнено(ИмяКорневогоЭлемента) Тогда
			ПотокXML.ЗаписатьНачалоЭлемента(ИмяКорневогоЭлемента);
		КонецЕсли;
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML_ПФР(Стр, ПотокXML, ИмяКорневогоЭлемента);
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяКорневогоЭлемента) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML_ПФР(Лист, ПотокXML, ИмяКорневогоЭлемента);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция СоздатьОтветНаПисьмо(ОснованиеСсылка, НастройкиОтвета = Неопределено) Экспорт
	
	НовоеПисьмо = Справочники.ПерепискаСКонтролирующимиОрганами.СоздатьЭлемент();
	Попытка
		НовоеПисьмо = ОбработкаЗаполненияПисьма(НовоеПисьмо, ОснованиеСсылка, НастройкиОтвета);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось создать ответ:%1'"),
																					Символы.ПС + ИнформацияОбОшибке().Описание);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	Если НовоеПисьмо <> Неопределено Тогда
		Возврат НовоеПисьмо;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяФайлаДИВЦиклаОбмена(Объект)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						  |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
						  |ИЗ
						  |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
						  |ГДЕ
						  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
						  |	И СодержимоеТранспортныхКонтейнеров.Тип В(&Тип)
						  |
						  |ОБЪЕДИНИТЬ ВСЕ
						  |
						  |ВЫБРАТЬ ПЕРВЫЕ 1
						  |	ТранспортныеКонтейнеры.ИмяФайла
						  |ИЗ
						  |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
						  |ГДЕ
						  |	ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена");
	Запрос.УстановитьПараметр("ЦиклОбмена", ?(Объект.ЭтоНовый(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка));
	ТипыВложений = Новый Массив;
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Заявление);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОН);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОС);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Представление);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Рассылка);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо);
	Запрос.УстановитьПараметр("Тип", ТипыВложений);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат СокрЛП(Выборка.ИмяФайла);
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции

Функция СформироватьИзвещениеОПолучении(ТранспортноеСообщение) Экспорт
	
	// проверяем, не сформировано ли уже извещение
	ИмеющиесяИзвещения = ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение, Ложь, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
	Если ИмеющиесяИзвещения.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// определяем возможные типы документа, извещение о получении которого формируется
	Если ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		ТипыДИВ = Новый Массив;
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправки);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправкиПредставление);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыПолучения);
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП Тогда
		ТипыДИВ = Новый Массив;
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриеме);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеДокумент);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеЗаявления);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказе);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеДокумент);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ);
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
		ТипыДИВ = Новый Массив;
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОВводе);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточнении);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Ответ);
		
		//Заявление
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПростОтметки);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеОтметки);
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП Тогда
		ТипыДИВ = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПроверке;
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП Тогда
		ТипыДИВ = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОбОтзывеЗаявления;
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП Тогда
		ТипыДИВ = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОНесоответствиях;
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП Тогда
		ТипыДИВ = Новый Массив;
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Документ);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправки);
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП Тогда
		ТипыДИВ = Новый Массив;
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение);
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП Тогда
		ТипыДИВ = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Рассылка;
	КонецЕсли;
	
	// ищем ДИВ исходного сообщения
	ДИВы = ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение.Основание, Ложь, ТипыДИВ);
	Если ДИВы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось создать извещение о получении документа: отсутствует исходный документ в сообщении-основании.'");
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	ДИВы.Колонки.Добавить("ПодписьBase64");
	
	Для Каждого СтрДИВ Из ДИВы Цикл
		
		ИмяФайлаДИВ = СтрДИВ.ИмяФайла;
		
		// ищем подпись под ДИВ
		ПодписиСообщения = ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение.Основание, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ПодписьПодДИВ = ПодписиСообщения.Найти(ИмяФайлаДИВ, "ЭЦПИмяПодписанногоФайла");
		Если ПодписьПодДИВ = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось создать извещение о получении документа: отсутствует подпись под исходным документом.'");
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		// пишем подпись во временный файл
		ВремФайл = ПолучитьИмяВременногоФайла();
		Попытка
			ПодписьПодДИВ.Данные.Получить().Записать(ВремФайл);
		Исключение
		КонецПопытки;
		
		// формируем Base64-представление подписи
		СтрДИВ.ПодписьBase64 = ПрочитатьBase64ИзФайла(ВремФайл);
		Если НЕ ЗначениеЗаполнено(СтрДИВ.ПодписьBase64) Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось создать извещение о получении документа: не удалось прочитать данные из файла подписи абонента под исходным документом.'");
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВремФайл);
		
	КонецЦикла;
	
	// формируем имя файла извещения
	UUIDИзвещения = СгенерироватьUUID();
	ИмяФайлаИзвещения = СформироватьИмяФайлаИзвещения(ТранспортноеСообщение, ДИВы, UUIDИзвещения);
	Если НЕ ЗначениеЗаполнено(ИмяФайлаИзвещения) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось создать извещение о получении документа: не удалось сформировать имя файла извещения.'");
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// формируем XML извещения о получении электронного документа
	ТекстИзвещения = СформироватьXMLИзвещенияОПолученииЭлектронногоДокумента(ТранспортноеСообщение, ДИВы, ИмяФайлаИзвещения);
	Если НЕ ЗначениеЗаполнено(ТекстИзвещения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// пишем XML во временный файл в кодировке windows-1251
	ФайлИзвещения = ВыгрузитьТекстВФайл(ТекстИзвещения);
	Если НЕ ЗначениеЗаполнено(ФайлИзвещения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// загружаем файл извещения в ИБ
	ТипСодержимогоТранспортногоКонтейнера = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении;
	ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение, ТипСодержимогоТранспортногоКонтейнера, ФайлИзвещения, ИмяФайлаИзвещения, , , , , , , UUIDИзвещения, Перечисления.ТипыСодержимогоФайлов.xml);
	
	// удаляем временный файл с извещением
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлИзвещения);
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьИмяФайлаИзвещения(ТранспортноеСообщение, ДИВы, UUID)
	
	Префикс = "IZ";
	
	// выделяем префикс из имени основного ДИВ основания
	Если ДИВы.Количество() = 1 Тогда
		ОсновнойДИВ = ДИВы[0];
	Иначе
		ОсновнойДИВ = ДИВы.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ, "Тип");
		Если ОсновнойДИВ = Неопределено Тогда
			ОсновнойДИВ = ДИВы[0];
		КонецЕсли;
	КонецЕсли;
	ИмяФайлаДИВ = ОсновнойДИВ.ИмяФайла;
	
	ПрефиксОснования = ВыделитьПрефиксИзИмениФайлаОснования(ИмяФайлаДИВ);
	Если НЕ ЗначениеЗаполнено(ПрефиксОснования) Тогда
		// если префикс выделить не удалось, то пишем хоть какой-нибудь (это лучше, чем не отправлять извещение вообще)
		ПрефиксОснования = "NO_PREF";
	КонецЕсли;
	
	// формируем идентификатор получателя
	ИдентификаторПолучателя = СформироватьИдентификаторПолучателя(ТранспортноеСообщение);
	
	// формируем идентификатор отправителя
	ИдентификаторОтправителя = СформироватьИдентификаторОтправителя(ТранспортноеСообщение);
	
	// формируем строку с текущей датой
	GGGGMMDD = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd");
	
	// 
	ИдентификаторФайла = UUID;
	
	//
	РасширениеФайла = "xml";
	
	// собираем имя файла извещения из составляющих
	ИмяФайлаИзвещения = Префикс + "_" + ПрефиксОснования + "_" + ИдентификаторПолучателя + "_" + ИдентификаторПолучателя + "_" + ИдентификаторОтправителя + "_" + GGGGMMDD + "_" + ИдентификаторФайла + "." + РасширениеФайла;
	Возврат ИмяФайлаИзвещения;
	
КонецФункции

Функция СформироватьИдентификаторПолучателя(ТранспортноеСообщение) Экспорт
	
	// если тип сообщения - ИзвещениеПодтверждениеНП или извещение о получении, то идентификатор получателя
	// берется из имени контейнера сообщения-основания
	// ранее для извещений о получении указывался код ТранспортноеСообщение.ЦиклОбмена.ВнешняяОрганизация.Код
	Если ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП 
	ИЛИ ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП
	ИЛИ ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП 
	ИЛИ ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП
	ИЛИ ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП
	ИЛИ ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП
	ИЛИ ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП
	ИЛИ ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП
	ИЛИ ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП
	ИЛИ ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП Тогда
		Возврат ПолучитьИдентификаторОтправителяПодтвержденияДатыОтправки(ТранспортноеСообщение.Основание);
	Иначе
		Получатель = ТранспортноеСообщение.Получатель;
		ТипПолучателя = ТипЗнч(Получатель);
		Если ТипПолучателя = Тип("СправочникСсылка.СерверыДокументооборота") Тогда
			Возврат СокрЛП(ТранспортноеСообщение.УчетнаяЗапись.ИдентификаторСпецоператора);
		ИначеЕсли ТипПолучателя = Тип("СправочникСсылка.НалоговыеОрганы") Тогда
			Возврат СокрЛП(Получатель.Код);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция СформироватьИдентификаторОтправителя(ТранспортноеСообщение) Экспорт
	
	Если ТранспортноеСообщение.УчетнаяЗапись.ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя Тогда
		
		Возврат СокрЛП(ТранспортноеСообщение.УчетнаяЗапись.ИННУполномоченногоПредставителя) + СокрЛП(ТранспортноеСообщение.УчетнаяЗапись.КППУполномоченногоПредставителя);
		
	Иначе
		
		ИдентификаторОтправителя = "";
		
		Отправитель = ТранспортноеСообщение.Отправитель;
		ИНН = СокрЛП(Отправитель.ИНН);
		Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Отправитель) Тогда
			ИдентификаторОтправителя = ИНН;
		Иначе
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Отправитель, , "КППЮЛ");
			ИдентификаторОтправителя = ИНН + СокрЛП(СведенияОбОрганизации.КППЮЛ);
		КонецЕсли;
		
		Возврат ИдентификаторОтправителя;
		
	КонецЕсли;
	
КонецФункции

Функция ВыделитьПрефиксИзИмениФайлаОснования(ИмяФайлаДИВ)
	
	РасширениеФайлаДИВ = нрег(РасширениеФайла(ИмяФайлаДИВ));
	Если РасширениеФайлаДИВ = "txt" Тогда // если это текстовый файл, то префикс - это то, что до первой цифры, кроме случая протокола 2-НДФЛ
		
		ПрефиксПротокол2НДФЛ1 = "ПРОТ_ДОХОД_2НДФЛ"; // префикс протокола 2-НДФЛ
		ПрефиксПротокол2НДФЛ2 = "PROT_NO_NDFL2"; // префикс протокола 2-НДФЛ
		ПрефиксРассылки = "IU_RASS"; // префикс файла рассылки
		Если нрег(Лев(ИмяФайлаДИВ, СтрДлина(ПрефиксПротокол2НДФЛ1))) = нрег(ПрефиксПротокол2НДФЛ1) Тогда
			Возврат СтрЗаменить(Лев(ИмяФайлаДИВ, СтрДлина(ПрефиксПротокол2НДФЛ1)), "_", "");
		ИначеЕсли нрег(Лев(ИмяФайлаДИВ, СтрДлина(ПрефиксПротокол2НДФЛ2))) = нрег(ПрефиксПротокол2НДФЛ2) Тогда
			Возврат СтрЗаменить(Лев(ИмяФайлаДИВ, СтрДлина(ПрефиксПротокол2НДФЛ2)), "_", "");
		ИначеЕсли нрег(Лев(ИмяФайлаДИВ, СтрДлина(ПрефиксРассылки))) = нрег(ПрефиксРассылки) Тогда
			Возврат СтрЗаменить(Лев(ИмяФайлаДИВ, СтрДлина(ПрефиксРассылки)), "_", "");
		Иначе
			СтрЦифры = "0123456789";
			Для Инд = 1 По СтрДлина(ИмяФайлаДИВ) Цикл
				ТекСимв = Сред(ИмяФайлаДИВ, Инд, 1);
				Если СтрНайти(СтрЦифры, ТекСимв) <> 0 Тогда
					Возврат СтрЗаменить(Лев(ИмяФайлаДИВ, Инд - 1), "_", "");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Разделитель = "_";
		ИндексВхожденияРазделителя = 0;
		Для Инд = 1 По СтрДлина(ИмяФайлаДИВ) Цикл
			ТекСимв = Сред(ИмяФайлаДИВ, Инд, 1);
			Если ТекСимв = Разделитель Тогда
				ИндексВхожденияРазделителя = ИндексВхожденияРазделителя + 1;
				Если ИндексВхожденияРазделителя = 2 Тогда
					Возврат СтрЗаменить(Лев(ИмяФайлаДИВ, Инд - 1), "_", "");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СформироватьСведенияОПолучателеИзвещения(ТранспортноеСообщение)
	
	Если ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		УчастникДокументооборота = ТранспортноеСообщение.Получатель; // сервер документооборота СОС или ФНС
	Иначе
		УчастникДокументооборота = ТранспортноеСообщение.ЦиклОбмена.ВнешняяОрганизация;
	КонецЕсли;
	
	Возврат СформироватьСведенияОбУчастникеДокументооборота(УчастникДокументооборота, ТранспортноеСообщение);
	
КонецФункции

Функция СформироватьСведенияОбОтправителеИзвещения(ТранспортноеСообщение)
	
	Возврат СформироватьСведенияОбУчастникеДокументооборота(ТранспортноеСообщение.Отправитель, ТранспортноеСообщение);
	
КонецФункции

Функция СформироватьСведенияОбУчастникеДокументооборота(Участник, ТранспортноеСообщение) Экспорт
	
	Сведения = Новый Структура;
	
	УчетнаяЗапись = ТранспортноеСообщение.УчетнаяЗапись;
	
	ТипУчастника = ТипЗнч(Участник);
	Если ТипУчастника = Тип("СправочникСсылка.Организации") Тогда
		
		Сведения.Вставить("ТипУчастника", "Организация");
		Сведения.Вставить("Email", ?(ПустаяСтрока(УчетнаяЗапись.ИдентификаторАбонента), СокрЛП(УчетнаяЗапись.АдресЭлектроннойПочты), СокрЛП(УчетнаяЗапись.ИдентификаторАбонента)));
		
		Если УчетнаяЗапись.ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя Тогда
			
			ЭтоФизЛицо = (СтрДлина(СокрЛП(УчетнаяЗапись.ИННУполномоченногоПредставителя)) = 12);
			Сведения.Вставить("ЭтоФизЛицо", ЭтоФизЛицо);
			Если ЭтоФизЛицо Тогда
				
				Сведения.Вставить("ИНН", СокрЛП(УчетнаяЗапись.ИННУполномоченногоПредставителя));
				
				ФИО = РегламентированнаяОтчетность.РазложитьФИО(СокрЛП(УчетнаяЗапись.ПолноеНаименованиеУполномоченногоПредставителя));
				Сведения.Вставить("Фамилия", СокрЛП(ФИО.Фамилия));
				Сведения.Вставить("Имя", СокрЛП(ФИО.Имя));
				Сведения.Вставить("Отчество", СокрЛП(ФИО.Отчество));
				
			Иначе
				СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Участник, , "НаимЮЛПол, ИННЮЛ, КППЮЛ");
				Сведения.Вставить("Наименование", СокрЛП(УчетнаяЗапись.ПолноеНаименованиеУполномоченногоПредставителя));
				Сведения.Вставить("ИНН", СокрЛП(УчетнаяЗапись.ИННУполномоченногоПредставителя));
				Сведения.Вставить("КПП", СокрЛП(УчетнаяЗапись.КППУполномоченногоПредставителя));
			КонецЕсли;
			
		Иначе
			
			ЭтоФизЛицо = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Участник);
			Сведения.Вставить("ЭтоФизЛицо", ЭтоФизЛицо);
			Если ЭтоФизЛицо Тогда
				
				Сведения.Вставить("ИНН", СокрЛП(Участник.ИНН));
				
				ФИО = ФИОИндивидуальногоПредпринимателя(Участник);
				Сведения.Вставить("Фамилия", СокрЛП(ФИО.Фамилия));
				Сведения.Вставить("Имя", СокрЛП(ФИО.Имя));
				Сведения.Вставить("Отчество", СокрЛП(ФИО.Отчество));
				
			Иначе
				СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Участник, , "НаимЮЛПол, ИННЮЛ, КППЮЛ");
				Сведения.Вставить("Наименование", СокрЛП(СведенияОбОрганизации.НаимЮЛПол));
				Сведения.Вставить("ИНН", СокрЛП(СведенияОбОрганизации.ИННЮЛ));
				Сведения.Вставить("КПП", СокрЛП(СведенияОбОрганизации.КППЮЛ));
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипУчастника = Тип("СправочникСсылка.НалоговыеОрганы") Тогда
		
		Сведения.Вставить("ТипУчастника", "НалоговыйОрган");
		Если УчетнаяЗапись.ОбменНапрямую Тогда
			Сведения.Вставить("Email", Участник.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками);
		Иначе
			Сведения.Вставить("Email", ПолучитьEmailОтправителяИзПодтвержденияОПолучении(ТранспортноеСообщение.ЦиклОбмена));
		КонецЕсли;
		
		Сведения.Вставить("Код", СокрЛП(Участник.Код));
		Сведения.Вставить("Наименование", СокрЛП(Участник.Наименование));
		
	ИначеЕсли ТипУчастника = Тип("СправочникСсылка.СерверыДокументооборота") Тогда
		
		// особая обработка, если описывается получатель ИзвещениеПодтверждениеНП при обмене напрямую
		Если УчетнаяЗапись.ОбменНапрямую И ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
			
			Сведения.Вставить("ТипУчастника", "НалоговыйОрган");
			Сведения.Вставить("Код", ПолучитьИдентификаторОтправителяПодтвержденияДатыОтправки(ТранспортноеСообщение.Основание));
			Сведения.Вставить("Email", Участник.АдресЭлектроннойПочтыФНС);
			
		Иначе
			
			Сведения.Вставить("ТипУчастника", "СерверДокументооборота");
			Сведения.Вставить("Email", Участник.АдресЭлектроннойПочтыФНС);
			
			Сведения.Вставить("Идентификатор", СокрЛП(УчетнаяЗапись.ИдентификаторСпецоператора));
			Сведения.Вставить("Наименование", СокрЛП(УчетнаяЗапись.ИдентификаторСпецоператора));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

Функция ПолучитьEmailОтправителяИзПодтвержденияОПолучении(ЦиклОбмена)
	
	// получаем извещение о получении декларации или 2-НДФЛ
	ИзвещениеДекларацияНО = ПолучитьСообщениеЦиклаОбмена(ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО);
	Если НЕ ЗначениеЗаполнено(ИзвещениеДекларацияНО) Тогда
		ИзвещениеДекларацияНО = ПолучитьСообщениеЦиклаОбмена(ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО);
		Если НЕ ЗначениеЗаполнено(ИзвещениеДекларацияНО) Тогда
			ИзвещениеДекларацияНО = ПолучитьСообщениеЦиклаОбмена(ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО);
			Если НЕ ЗначениеЗаполнено(ИзвещениеДекларацияНО) Тогда
				ИзвещениеДекларацияНО = ПолучитьСообщениеЦиклаОбмена(ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПредставлениеНО);
				Если НЕ ЗначениеЗаполнено(ИзвещениеДекларацияНО) Тогда
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// получаем данные извещения
	ИзвещенияОПолучении = ПолучитьВложенияТранспортногоСообщения(ИзвещениеДекларацияНО, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
	Если ИзвещенияОПолучении.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДанныеИзвещенияОПолучении = ИзвещенияОПолучении[0].Данные;
	
	// выгружаем данные извещения во временный файл
	Попытка
		ФайлИзвещения = ПолучитьИмяВременногоФайла();
		ДанныеИзвещенияОПолучении.Получить().Записать(ФайлИзвещения);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	// создаем дерево из файла
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений(ФайлИзвещения);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлИзвещения);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// находим узел ПодтвДок
	УзелПодтвДок = ДеревоXML.Строки.Найти("ПодтвДок", "Имя", Истина);
	Если УзелПодтвДок = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// находим атрибут E-mail
	УзелEmail = УзелПодтвДок.Строки.Найти("E-mail", "Имя");
	Если УзелEmail = Неопределено ИЛИ НЕ ЗначениеЗаполнено(УзелEmail.Значение) Тогда
		Возврат Неопределено;
	Иначе
		Возврат СокрЛП(УзелEmail.Значение);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИдентификаторОтправителяПодтвержденияДатыОтправки(ПодтверждениеДатыОтправки)
	
	КонтейнерыОснования = ПолучитьТранспортныйКонтейнер(ПодтверждениеДатыОтправки);
	Если КонтейнерыОснования.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИмяФайлаКонтейнера = КонтейнерыОснования[0].ИмяФайла;
	
	КомпонентыИмени = РазложитьСтрокуВМассивПодстрок(ИмяФайлаКонтейнера, "_");
	Если КомпонентыИмени.Количество() < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СокрЛП(КомпонентыИмени[1]);
	
КонецФункции

Функция ИмяФайлаБезРасширения(ИмяФайлаСРасширением) Экспорт
	
	ДлинаИмениФайла = СтрДлина(ИмяФайлаСРасширением);
	Для Инд = 1 По ДлинаИмениФайла Цикл
		Если Сред(ИмяФайлаСРасширением, ДлинаИмениФайла - Инд + 1, 1) = "." Тогда
			Возврат Лев(ИмяФайлаСРасширением, ДлинаИмениФайла - Инд);
		КонецЕсли;
	КонецЦикла;
	Возврат ИмяФайлаСРасширением;
	
КонецФункции

// есть в Контейнере
Функция СформироватьXMLИзвещенияОПолученииЭлектронногоДокумента(ТранспортноеСообщение, ДИВы, ИмяФайлаИзвещения)
	
	// выделяем имя файла без расширения из короткого имени файла извещения
	РасширениеФайлаИзвещения = РасширениеФайла(ИмяФайлаИзвещения);
	ДлинаРасширенияИмениФайлаИзвещения = СтрДлина(РасширениеФайлаИзвещения);
	ИмяФайлаИзвещенияБезРасширения = Лев(ИмяФайлаИзвещения, СтрДлина(ИмяФайлаИзвещения) - ДлинаРасширенияИмениФайлаИзвещения - 1);
	
	// определяем дату получения основания
	ДатаПолученияОснования = ТранспортноеСообщение.Основание.ДатаТранспорта;
	
	// получаем сведения о получателе
	СведенияОПолучателе = СформироватьСведенияОПолучателеИзвещения(ТранспортноеСообщение);
	Если НЕ ЗначениеЗаполнено(СведенияОПолучателе) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// получаем сведения об отправителе
	СведенияОбОтправителе = СформироватьСведенияОбОтправителеИзвещения(ТранспортноеСообщение);
	Если НЕ ЗначениеЗаполнено(СведенияОбОтправителе) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// создаем XML-дерево извещения
	ДеревоXML = СоздатьДеревоXML();
	
	// иниицализируем атрибуты корневого элемента
	ДобавитьУзелXML(ДеревоXML, "ИдФайл", Истина, ИмяФайлаИзвещенияБезРасширения);
	ДобавитьУзелXML(ДеревоXML, "ВерсПрог", Истина, Лев(РегламентированнаяОтчетность.НазваниеИВерсияПрограммы(), 40));
		ДобавитьУзелXML(ДеревоXML, "ВерсФорм", Истина, "5.01");
	
	// создаем узел Документ
	УзелДокумент = ДобавитьУзелXML(ДеревоXML, "Документ");
		ДобавитьУзелXML(УзелДокумент, "КНД", Истина, "1167004");
	
	// добавляем сведения об организации
	УзелПодтвДок = ДобавитьУзелXML(УзелДокумент, "ПодтвДок");
	ЗаполнитьУзелСведениямиОбУчастникеЭДО(УзелПодтвДок, СведенияОбОтправителе);
	
	// создаем узел СвИзвещП
	УзелСвИзвещП = ДобавитьУзелXML(УзелДокумент, "СвИзвещП");
	ДобавитьУзелXML(УзелСвИзвещП, "ДатаПол", Истина, Формат(ДатаПолученияОснования, "ДФ=dd.MM.yyyy"));
	ДобавитьУзелXML(УзелСвИзвещП, "ВремяПол", Истина, Формат(ДатаПолученияОснования, "ДФ=HH.mm.ss"));
	
	Для Каждого СтрДИВ Из ДИВы Цикл
		
		// создаем узел СведПолФайл
		УзелСведПолФайл = ДобавитьУзелXML(УзелСвИзвещП, "СведПолФайл");
		ДобавитьУзелXML(УзелСведПолФайл, "ИмяПостФайла", Истина, ИмяФайлаБезРасширения(СтрДИВ.ИмяФайла));
		
		// добавляем подпись под ДИВ
		ДобавитьУзелXML(УзелСведПолФайл, "ЭЦППолФайл", , СтрДИВ.ПодписьBase64);
		
	КонецЦикла;
	
	// добавляем сведения об отправителе исходного документа
	УзелОтпрДок = ДобавитьУзелXML(УзелДокумент, "ОтпрДок");
	ЗаполнитьУзелСведениямиОбУчастникеЭДО(УзелОтпрДок, СведенияОПолучателе);
	
	// добавляем сведения о получателе исходного документа
	УзелПолДок = ДобавитьУзелXML(УзелДокумент, "ПолДок");
	ЗаполнитьУзелСведениямиОбУчастникеЭДО(УзелПолДок, СведенияОбОтправителе);
	
	// формируем XML-строку на основе дерева
	ТекстXML = ВыгрузитьДеревоВXML_ПФР(ДеревоXML, "Файл");
	
	Возврат ТекстXML;
	
КонецФункции

Процедура ЗаполнитьУзелСведениямиОбУчастникеЭДО(Узел, Сведения)
	
	ТипУчастникаЭДО = Сведения.ТипУчастника;
	Если ТипУчастникаЭДО = "Организация" Тогда
		
		Если ЗначениеЗаполнено(Сведения.Email) Тогда
			ДобавитьУзелXML(Узел, "E-mail", Истина, Сведения.Email);
		КонецЕсли;
		
		Если Сведения.ЭтоФизЛицо Тогда
			
			УзелФЛ = ДобавитьУзелXML(Узел, "ФЛ");
			ДобавитьУзелXML(УзелФЛ, "ИННФЛ", Истина, Сведения.ИНН);
			
			УзелФИО = ДобавитьУзелXML(УзелФЛ, "ФИО");
			ДобавитьУзелXML(УзелФИО, "Фамилия", Истина, Сведения.Фамилия);
			ДобавитьУзелXML(УзелФИО, "Имя", Истина, Сведения.Имя);
			Если ЗначениеЗаполнено(Сведения.Отчество) Тогда
				ДобавитьУзелXML(УзелФИО, "Отчество", Истина, Сведения.Отчество);
			КонецЕсли;
			
		Иначе
			
			УзелЮЛ = ДобавитьУзелXML(Узел, "ЮЛ");
			ДобавитьУзелXML(УзелЮЛ, "НаимОрг", Истина, Сведения.Наименование);
			ДобавитьУзелXML(УзелЮЛ, "ИННЮЛ", Истина, Сведения.ИНН);
			ДобавитьУзелXML(УзелЮЛ, "КПП", Истина, Сведения.КПП);
			
		КонецЕсли;
		
	ИначеЕсли ТипУчастникаЭДО = "НалоговыйОрган" Тогда
		
		Если ЗначениеЗаполнено(Сведения.Email) Тогда
			ДобавитьУзелXML(Узел, "E-mail", Истина, Сведения.Email);
		Иначе
			ДобавитьУзелXML(Узел, "E-mail", Истина, "-");
		КонецЕсли;
		ДобавитьУзелXML(Узел, "КодНО", , Сведения.Код);
		
	ИначеЕсли ТипУчастникаЭДО = "СерверДокументооборота" Тогда
		
		Если ЗначениеЗаполнено(Сведения.Email) Тогда
			ДобавитьУзелXML(Узел, "E-mail", Истина, Сведения.Email);
		КонецЕсли;
		
		УзелСпецоперат = ДобавитьУзелXML(Узел, "СпецОперат");
		ДобавитьУзелXML(УзелСпецоперат, "НаимОрг", Истина, Сведения.Наименование);
		ДобавитьУзелXML(УзелСпецоперат, "ИденСОС", Истина, Сведения.Идентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = СтрНайти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = СтрНайти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

Функция ПолучитьПредметыЦиклаОбмена(ЦиклОбмена) Экспорт
	
	Предметы = ЦиклОбмена.ДополнительныеПредметы.ВыгрузитьКолонку("Предмет");
	Предметы.Вставить(0, ЦиклОбмена.Предмет);
	Возврат Предметы;
	
КонецФункции

Функция ПолучитьОтветыНаЗапросИОН(парамЗапрос, СДанными = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	ОтветыНаЗапросыИОН.ИмяФайла,
						  |	ОтветыНаЗапросыИОН.Размер,
						  |	ОтветыНаЗапросыИОН.ТипСодержимого";
	Если СДанными Тогда
		Запрос.Текст = Запрос.Текст + ",
						  |	ОтветыНаЗапросыИОН.Данные";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
						  | , ВЫБОР
						  |		КОГДА СостояниеОбъектов.Архивный ЕСТЬ NULL ТОГДА Ложь
						  |		КОГДА СостояниеОбъектов.Архивный = Ложь ТОГДА Ложь
						  |	ИНАЧЕ
						  |		Истина
						  |	КОНЕЦ ВАрхиве
						  |ИЗ
						  |	РегистрСведений.ОтветыНаЗапросыИОН КАК ОтветыНаЗапросыИОН
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПризнакиАрхивированияФайловДОСКонтролирующимиОрганами КАК СостояниеОбъектов
						  |			ПО 		(СостояниеОбъектов.Объект = ОтветыНаЗапросыИОН.Запрос)
						  |				И	(СостояниеОбъектов.ИмяФайла = ОтветыНаЗапросыИОН.ИмяФайла)
						  |				И	(СостояниеОбъектов.Владелец = Значение(Перечисление.ВидыАрхивируемыхМетаданныхДО.ОтветыНаЗапросыИОН))
						  |
						  |ГДЕ
						  |	ОтветыНаЗапросыИОН.Запрос = &Запрос";
	Запрос.УстановитьПараметр("Запрос", парамЗапрос);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДобавитьОтветНаЗапросИОН(Запрос, ИмяФайла, Данные, Размер = Неопределено, ТипСодержимогоФайла = Неопределено) Экспорт
	
	Если Размер = Неопределено Тогда
		Размер = ОпределитьРазмер(Данные);
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ОтветыНаЗапросыИОН.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Запрос = Запрос;
	МенеджерЗаписи.ИмяФайла = ИмяФайла;
	МенеджерЗаписи.Размер = Размер;
	
	Если ТипСодержимогоФайла <> Неопределено Тогда
		МенеджерЗаписи.ТипСодержимого = ТипСодержимогоФайла;
	КонецЕсли;
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("ХранилищеЗначения") Тогда // если хранилище значения
		МенеджерЗаписи.Данные = Данные;
	ИначеЕсли ТипДанных = Тип("Строка") Тогда // если полное имя файла
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Данные), Новый СжатиеДанных(9));
	Иначе // если двоичные данные
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Попытка
		МенеджерЗаписи.Записать(Истина);
		Отказ = Ложь;
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписьОбъектовРегламентированнойОтчетности(Запрос, Отказ);
		Возврат Истина;
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось сохранить в информационной базе файл ответа на запрос ИОН %1!%2'"),
																					Запрос,
																					Символы.ПС + ИнформацияОбОшибке().Описание);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("К_2_180_06_001_001");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", "NP_NO_2_180_06_001_001.xsd");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Если СтрокаДерева.Владелец().Колонки.Найти("ЭтоCDATA") <> Неопределено И СтрокаДерева.ЭтоCDATA Тогда
				ПотокXML.ЗаписатьСекциюCDATA(СтрокаДерева.Значение);
			Иначе
				Для каждого Лист из СтрокаДерева.Строки Цикл
					ЗаписатьУзелДереваВXML(Лист, ПотокXML);
				КонецЦикла;
				ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			КонецЕсли;
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция СтрокаОС() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux32";
	ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux64";
	ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows32";
	Иначе
		Возврат "Windows64";
	КонецЕсли;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ УЧЕТНОЙ ЗАПИСИ НАЛОГОПЛАТЕЛЬЩИКА

Процедура ПередЗаписьюУчетнойЗаписиНалогоплательщика(Объект, Отказ)

	ШапкаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать учетную запись налогоплательщика %1:'"),
																			?(ПустаяСтрока(Объект.Наименование), "<наименование не задано>", СокрЛП(Объект.Наименование)));
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресЭлектроннойПочты) Тогда
		Отказ = Истина;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Не указан адрес электронной почты!'"), ШапкаОшибки + Символы.ПС);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СерверДокументооборота) Тогда
		Отказ = Истина;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Не выбран сервер документооборота!'"), ШапкаОшибки + Символы.ПС);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
	КонецЕсли;
	
	// проверка параметров SMTP
	Если НЕ ЗначениеЗаполнено(Объект.СерверSMTP) Тогда
		Отказ = Истина;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Не задан адрес SMTP-сервера налоговых органов!'"), ШапкаОшибки + Символы.ПС);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПортSMTP) Тогда
		Отказ = Истина;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Не указан порт SMTP для доступа к серверу налоговых органов!'"), ШапкаОшибки + Символы.ПС);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
	КонецЕсли;
	
	Если Объект.ТребуетсяSMTPАутентификация Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ИмяПользователяSMTP) Тогда
			Отказ = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Не задано имя пользователя SMTP для доступа к серверу налоговых органов!'"), ШапкаОшибки + Символы.ПС);
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ПарольSMTP) Тогда
			Отказ = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Не задан пароль SMTP для доступа к серверу налоговых органов!'"), ШапкаОшибки + Символы.ПС);
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	// проверка параметров POP3
	Если НЕ ЗначениеЗаполнено(Объект.СерверPOP3) Тогда
		Отказ = Истина;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Не указан адрес POP3-сервера налоговых органов!'"), ШапкаОшибки + Символы.ПС);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПортPOP3) Тогда
		Отказ = Истина;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Не указан порт POP3 для доступа к серверу налоговых органов!'"), ШапкаОшибки + Символы.ПС);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяПользователяPOP3) Тогда
		Отказ = Истина;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Не задано имя пользователя POP3 для доступа к серверу налоговых органов!'"), ШапкаОшибки + Символы.ПС);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПарольPOP3) Тогда
		Отказ = Истина;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Не задан пароль POP3 для доступа к серверу налоговых органов!'"), ШапкаОшибки + Символы.ПС);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
	КонецЕсли;
	
	Если Объект.ПредназначенаДляДокументооборотаСФНС Тогда
		Если НЕ ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда
			Отказ = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Не указан налоговый орган!'"), ШапкаОшибки + Символы.ПС);
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СертификатРуководителя) Тогда
		Отказ = Истина;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Не выбран сертификат руководителя!'"), ШапкаОшибки + Символы.ПС);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СертификатДляШифрования) Тогда
		Отказ = Истина;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Не выбран сертификат для целей шифрования!'"), ШапкаОшибки + Символы.ПС);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Объект.Наименование = Объект.АдресЭлектроннойПочты;
		
		Если Объект.ОбменНапрямую Тогда
			Объект.РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиНалогоплательщика.Отключена;
			Объект.ИспользоватьСервисОнлайнПроверкиОтчетов = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторСпецоператора) И СтрДлина(СокрЛП(Объект.ИдентификаторАбонента)) > 3 Тогда
			Объект.ИдентификаторСпецоператора = Лев(СокрЛП(Объект.ИдентификаторАбонента), 3);
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ЭтоЗаписьНового = Объект.ЭтоНовый();
	
	Объект.ДополнительныеСвойства.Вставить("ОтключитьАвтообмен", Объект.Ссылка.ОтключитьАвтообмен);
	
КонецПроцедуры

Процедура ПриЗаписиУчетнойЗаписиНалогоплательщика(Объект, Отказ)
	
	// если пишется новый элемент и ему не сопоставлены пользователи,
	// то сопоставим ему текущего пользователя - автора
	Если (Объект.ЭтоЗаписьНового = Неопределено ИЛИ Объект.ЭтоЗаписьНового) И Объект.ЗаписатьПользователяПоУмолчанию Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	КОЛИЧЕСТВО(ПользователиУчетныхЗаписейДокументооборота.Пользователь) КАК Пользователь
			                      |ИЗ
			                      |	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
			                      |ГДЕ
			                      |	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись = &УчетнаяЗапись");
			Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если НЕ Выборка.Следующий() ИЛИ НЕ ЗначениеЗаполнено(Выборка.Пользователь) Тогда
				МенеджерЗаписи = РегистрыСведений.ПользователиУчетныхЗаписейДокументооборота.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.УчетнаяЗапись = Объект.Ссылка;
				МенеджерЗаписи.Пользователь = ТекущийПользователь;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ОтключитьАвтообмен")
		И Объект.ДополнительныеСвойства.ОтключитьАвтообмен <> Объект.ОтключитьАвтообмен Тогда
		ДокументооборотСКО.НастроитьОбменПоУчетнойЗаписи(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЧТОВОГО СЕРВЕРА

Процедура ПередЗаписьюПочтовогоСервера(Объект, Отказ)
	
	Если ПустаяСтрока(Объект.АдресЭлектроннойПочтыФНС) И ПустаяСтрока(Объект.АдресЭлектроннойПочтыПФР) И ПустаяСтрока(Объект.АдресЭлектроннойПочтыФСГС)Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось записать элемент справочника ""Серверы документооборота"" %1:%2'"),
			?(ПустаяСтрока(Объект.Наименование), "<наименование не задано>", СокрЛП(Объект.Наименование)),
			Символы.ПС + НСтр("ru = 'Не задан ни один из адресов электронной почты сервера документооборота.'"));
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Объект.АдресЭлектроннойПочтыФНС = нрег(Объект.АдресЭлектроннойПочтыФНС);
		Объект.АдресЭлектроннойПочтыПФР = нрег(Объект.АдресЭлектроннойПочтыПФР);
		Объект.АдресЭлектроннойПочтыФСГС = нрег(Объект.АдресЭлектроннойПочтыФСГС);
		Если НЕ ЗначениеЗаполнено(Объект.ДлительностьОжиданияСервера) Тогда
			Объект.ДлительностьОжиданияСервера = 60;
		КонецЕсли;
		СгенерироватьНаименованиеПочтовогоСервера(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура СгенерироватьНаименованиеПочтовогоСервера(Объект, Обязательно = Ложь) Экспорт
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		
		СтрАдрес = Объект.АдресЭлектроннойПочтыФНС;
		ВхождениеА = СтрНайти(СтрАдрес, "@");
		Если ВхождениеА = 0 Тогда
			СтрАдрес = Объект.АдресЭлектроннойПочтыПФР;
			ВхождениеА = СтрНайти(СтрАдрес, "@");
		КонецЕсли;
		
		Если ВхождениеА <> 0 Тогда
			ДоменСервера = СокрЛП(Сред(СтрАдрес, ВхождениеА + 1));
			Если НЕ ПустаяСтрока(ДоменСервера) Тогда
				Объект.Наименование = "Сервер документооборота " + ДоменСервера;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Обязательно Тогда
		Объект.Наименование = ?(ПустаяСтрока(Объект.АдресЭлектроннойПочтыФНС), СокрЛП(Объект.АдресЭлектроннойПочтыПФР), СокрЛП(Объект.АдресЭлектроннойПочтыФНС));
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьТекстИзФайла(ИмяФайла, ЗаданнаяКодировкаТекста = Неопределено, АвтоопределениеКодировкиXML = Ложь) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ИмяФайла) Тогда
		ИмяФайлаНаДиске = ПолучитьИмяВременногоФайла();
		ПолучитьИзВременногоХранилища(ИмяФайла).Записать(ИмяФайлаНаДиске);
	Иначе
		ИмяФайлаНаДиске = ИмяФайла;
	КонецЕсли;
	
	ОбъектЧтение = НовыйЧтениеТекстаНаСервере(ИмяФайлаНаДиске, ЗаданнаяКодировкаТекста);
	ТекстИзФайла = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	Если АвтоопределениеКодировкиXML И ЗначениеЗаполнено(ТекстИзФайла) Тогда
		ПерваяСтрокаФайла = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 1), 100));
		Если СтрНайти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-8""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
		ИначеЕсли СтрНайти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-16""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF16);
		ИначеЕсли СтрНайти(ПерваяСтрокаФайла, ВРЕГ("<?xml version=""1.0""?>")) <> 0 Тогда // кодировка не указана
			КонтрольнаяСтрока = ПерваяСтрокаФайла;
			Если СтрЧислоСтрок(ТекстИзФайла) > 1 Тогда
				КонтрольнаяСтрока = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 2), 100));   // вторая строка файла
			КонецЕсли;
			Если СтрНайти(КонтрольнаяСтрока, ВРЕГ("msg=""")) <> 0 И СтрНайти(КонтрольнаяСтрока, "О") = 0 Тогда // не нашли "О" (кириллица)
				ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
			КонецЕсли;
		ИначеЕсли СтрНайти(ПерваяСтрокаФайла, ВРЕГ("<protocol")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстИзФайла;
	
КонецФункции

Функция ОтправитьТранспортноеСообщение(Сообщение, Почта = Неопределено, ТихийРежим = Ложь) Экспорт
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Сообщение);
	Исключение
		// Транспортное сообщение уже находится в процессе отправки.
		Если Сообщение.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецПопытки;

	// инициализируем флаг ошибки
	ПризнакОшибки = Ложь;
	
	// инициализируем объект-сообщение и ссылку на сообщение, используемые в ниже по тексту
	Если ТипЗнч(Сообщение) = Тип("ДокументСсылка.ТранспортноеСообщение") Тогда
		ОбъектСообщение = Сообщение.ПолучитьОбъект();
	Иначе
		ОбъектСообщение = Сообщение;
	КонецЕсли;
	СообщениеСсылка = ОбъектСообщение.Ссылка;
	
	// Инициализация переменных
	///////////////////////////////////////////////////////////////////////////////
	
	// полученные сообщения не отправляются
	Если ОбъектСообщение.Статус = Перечисления.СтатусыПисем.Полученное Тогда
		
		РазблокироватьДанныеДляРедактирования(Сообщение);
		
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Предупреждение, НСтр("ru = 'Отправка полученных сообщений запрещена!'"));
		Возврат Ложь;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	// Подготавливаем пакет в отправке, при необходимости
	
	// если пакет не сформирован, то пытаемся сформировать
	СообщениеЗашифровано = СообщениеЗашифровано(СообщениеСсылка);
	Если НЕ СообщениеЗашифровано Тогда
		
		РазблокироватьДанныеДляРедактирования(Сообщение);
		
		Возврат Ложь;
	КонецЕсли;
	
	// Подготавливаем пакет в отправке, при необходимости
	///////////////////////////////////////////////////////////////////////////////
	
	// определяем получателя сообщения (to)
	СсылкаПолучатель = ОпределитьПолучателяТранспортногоСообщения(ОбъектСообщение);
	
	///////////////////////////////////////////////////////////////////////////////
	// Разнообразные проверки перед отправкой
	
	// различные проверки
	Если НЕ ЗначениеЗаполнено(ОбъектСообщение.Тип) Тогда
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Предупреждение, 
			НСтр("ru = 'Ошибка отправки транспортного сообщения: тип транспортного сообщения не определен!'"));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСообщение.Отправитель) Тогда
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Предупреждение,
			НСтр("ru = 'Ошибка отправки транспортного сообщения: не задан отправитель!'"));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СсылкаПолучатель) Тогда
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка,
			НСтр("ru = 'Ошибка отправки транспортного сообщения: не задан получатель!'"));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСообщение.УчетнаяЗапись) Тогда
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка,
			НСтр("ru = 'Ошибка отправки транспортного сообщения: не задана учетная запись!'"));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСообщение.ЦиклОбмена) Тогда
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка,
			НСтр("ru = 'Ошибка отправки транспортного сообщения: цикл обмена не задан!'"));
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	// если ошибка, то прервемся
	Если ПризнакОшибки Тогда
		
		РазблокироватьДанныеДляРедактирования(Сообщение);
		
		Возврат Ложь;
	КонецЕсли;
	
	// сопоставление с аналогичными уже имеющимися отправками и,
	// при необходимости, запрос подтверждения на текущую отправку
	Если НЕ СопоставитьССозданнымиЦикламиОбменаПередОтправкой(СообщениеСсылка) Тогда
		
		РазблокироватьДанныеДляРедактирования(Сообщение);
		
		Возврат Ложь;
	КонецЕсли;
	
	// Разнообразные проверки перед отправкой
	///////////////////////////////////////////////////////////////////////////////
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Инициализация свойств транспортного сообщения,
	// относящихся к заголовку почтового сообщения
	
	// формируем поля от кого
	Если ПустаяСтрока(ОбъектСообщение.ОтКогоАдрес) Тогда
		ОбъектСообщение.ОтКогоАдрес = ОбъектСообщение.УчетнаяЗапись.АдресЭлектроннойПочты;
	КонецЕсли;
	
	Если ПустаяСтрока(ОбъектСообщение.ОтКогоПредставление) Тогда
		// в представление отправителя записываем полное наименование организации-отправителя
		ОбъектСообщение.ОтКогоПредставление = Строка(ОбъектСообщение.Отправитель.НаименованиеПолное);
	КонецЕсли;
	
	// формируем кодировку
	ОбъектСообщение.Кодировка = "Windows-1251";
	
	// формируем поля кому
	Если ОбъектСообщение.Кому.Количество() = 0 Тогда
		
		АдресИПредставлениеПолучателя = ОпределитьАдресИПредставлениеПолучателяТранспортногоСообщения(ОбъектСообщение, СсылкаПолучатель);
		Если ПустаяСтрока(АдресИПредставлениеПолучателя.Адрес) Тогда
			
			РазблокироватьДанныеДляРедактирования(Сообщение);
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось определить адрес электронной почты получателя %1!'"), СсылкаПолучатель);
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		НовыйАдресат = ОбъектСообщение.Кому.Добавить();
		НовыйАдресат.АдресЭлектроннойПочты = АдресИПредставлениеПолучателя.Адрес;
		НовыйАдресат.Представление = АдресИПредставлениеПолучателя.Представление;
		
	КонецЕсли;
	
	// проверка наличия вложений
	Вложения = ПолучитьВложенияТранспортногоСообщения(СообщениеСсылка, Истина);
	
	НеобходимоИнициализироватьXMessageIDИзMessageID = Ложь;
	
	// формируем дополнительные реквизиты заголовка и тему
	Если ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ДекларацияНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-декларация-ДекларацияНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "01";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеДокументНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "04";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП Тогда
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "05";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-заявление-ЗаявлениеНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "01";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПодтверждениеНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		Если ОбъектСообщение.ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Заявление Тогда
			НовыйДопРеквизит.Значение = "17";
		ИначеЕсли ОбъектСообщение.ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Представление Тогда
			НовыйДопРеквизит.Значение = "08";
		Иначе
			НовыйДопРеквизит.Значение = "11";
		КонецЕсли;
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатПриемаНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "06";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатОбработкиНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "09";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатОбработкиРФНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "09";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеОбОтзывеЗаявлениеРФНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "12";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";

	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатОбработкиТСНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "15";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-форма2НДФЛ-Форма2НДФЛНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "01";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР Тогда
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Pension";
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР Тогда
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Pension-Unformal";
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР Тогда
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "ReSign: Pension-Unformal";
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР Тогда
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Pension-Request";
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР Тогда
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "ReSign: Pension-Reply";
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ОбращениеНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-обращение-ОбращениеНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "01";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-представление-ПредставлениеНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "01";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПисьмоНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "03";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРассылкаНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "03";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ЗапросНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-запрос-ЗапросНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "01";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС Тогда
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Stat";
		КонецЕсли;
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Stat-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор) + "@STAT";
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Msg-Type";
		НовыйДопРеквизит.Значение = "STAT";
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-File-Name";
		НовыйДопРеквизит.Значение = ИзвлечьИмяФайлаОтчетаИзПакета(ОбъектСообщение);
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-File-Type";
		НовыйДопРеквизит.Значение = "Форма";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС Тогда
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "ReSign: Stat-Confirmation";
		КонецЕсли;
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Stat-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор) + "@STAT";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС Тогда
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "ReSign: Stat-Protocol";
		КонецЕсли;
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Stat-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор) + "@STAT";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС Тогда
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Stat-Unformal";
		КонецЕсли;
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Stat-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор) + "@STAT";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС Тогда
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "ReSign: Stat-Unformal";
		КонецЕсли;
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Stat-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор) + "@STAT";
	
	КонецЕсли;
	
	// Инициализация свойств транспортного сообщения,
	// относящихся к заголовку почтового сообщения
	///////////////////////////////////////////////////////////////////////////////
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Формирование почтового сообщения на основе транспортного сообщения
	// Работа с объектом Почта
	
	// получаем зашифрованный транспортный контейнер
	ОписаниеТранспортныхКонтейнеров = ПолучитьТранспортныйКонтейнер(СообщениеСсылка, Истина);
	Если ОписаниеТранспортныхКонтейнеров.Количество() = 0 Тогда
		
		РазблокироватьДанныеДляРедактирования(Сообщение);
		
		ТекстСообщения = НСтр("ru = 'Не удалось отправить транспортное сообщение по причине отсутствия сформированного пакета.'");
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	ОписаниеТранспортногоКонтейнера = ОписаниеТранспортныхКонтейнеров[0];
	
	// выгружаем на диск зашифрованный транспортный контейнер
	ИмяЗашифрованногоВложения = ОписаниеТранспортногоКонтейнера.ИмяФайла;
	ДанныеЗашифрованногоВложения = ОписаниеТранспортногоКонтейнера.Данные;
	
	// инициализация свойств объекта Письмо
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Если ОбъектСообщение.ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС Тогда
	
		Если ОбъектСообщение.ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
			
			Письмо.Кодировка = ОбъектСообщение.Кодировка;
			Письмо.Тема = ОбъектСообщение.Тема;
			
			// инициализируем адреса
			СтрКому = ОбъектСообщение.Кому.Получить(0);
			АдресПолучателя = Письмо.Получатели.Добавить(СокрЛП(СтрКому.АдресЭлектроннойПочты));
			АдресПолучателя.ОтображаемоеИмя = СокрЛП(СтрКому.Представление);
			
			ОбратныйАдрес = Письмо.ОбратныйАдрес.Добавить(СокрЛП(ОбъектСообщение.ОтКогоАдрес));
			ОбратныйАдрес.ОтображаемоеИмя = СокрЛП(ОбъектСообщение.ОтКогоПредставление);
			
			Письмо.Отправитель.Адрес = СокрЛП(ОбъектСообщение.ОтКогоАдрес);
			Письмо.Отправитель.ОтображаемоеИмя = СокрЛП(ОбъектСообщение.ОтКогоПредставление);
			
			// сохраняем идентификатор сообщения
			ОбъектСообщение.ИдентификаторСообщения = Письмо.ИдентификаторСообщения;
			
			// дополнительные реквизиты
			Для Каждого ДополнительныйРеквизит Из ОбъектСообщение.ДополнительныеРеквизитыЗаголовка Цикл
				
				Письмо.УстановитьПолеЗаголовка(ДополнительныйРеквизит.Тип,
					ДополнительныйРеквизит.Значение,
					?(СтрокаСодержитРусскиеСимволы(ДополнительныйРеквизит.Значение), 
						СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.MIME, 
						СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования));
				
			КонецЦикла;
			
			// добавляем вложение
			Письмо.Вложения.Добавить(ДанныеЗашифрованногоВложения.Получить(), ИмяЗашифрованногоВложения);
			
		Иначе
			
			Письмо.Кодировка = ОбъектСообщение.Кодировка;
			Письмо.Тема = ОбъектСообщение.Тема;
			
			АдресКому = СокрЛП(ОбъектСообщение.Кому.Получить(0).АдресЭлектроннойПочты);
			Если СтрДлина(АдресКому) > 40 Тогда
				
				РазблокироватьДанныеДляРедактирования(Сообщение);
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Адрес получателя (%1) превышает максимальную допустимую длину в 40 символов.'"), АдресКому);
				ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			АдресПолучателя = Письмо.Получатели.Добавить(АдресКому);
			АдресПолучателя.ОтображаемоеИмя = СокрЛП(Лев(ОбъектСообщение.Кому.Получить(0).Представление, 80));
			
			АдресОтКого = СокрЛП(ОбъектСообщение.ОтКогоАдрес);
			Если СтрДлина(АдресОтКого) > 40 Тогда
				
				РазблокироватьДанныеДляРедактирования(Сообщение);
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Адрес отправителя (%1) превышает максимальную допустимую длину в 40 символов.'"), АдресОтКого);
				ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			ОбратныйАдрес = Письмо.ОбратныйАдрес.Добавить(АдресОтКого);
			ОбратныйАдрес.ОтображаемоеИмя = СокрЛП(Лев(ОбъектСообщение.ОтКогоПредставление, 80));
			
			Письмо.Отправитель.Адрес = АдресОтКого;
			Письмо.Отправитель.ОтображаемоеИмя = СокрЛП(Лев(ОбъектСообщение.ОтКогоПредставление, 80));
			
			// инициализируем X-Message-ID из Message-ID
			Если НеобходимоИнициализироватьXMessageIDИзMessageID Тогда
				НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
				НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения;
				НовыйДопРеквизит.Значение = Письмо.ИдентификаторСообщения;
			КонецЕсли;
			
			// сохраняем идентификатор сообщения
			ОбъектСообщение.ИдентификаторСообщения = Письмо.ИдентификаторСообщения;
			
			// дополнительные реквизиты
			Для Каждого ДополнительныйРеквизит Из ОбъектСообщение.ДополнительныеРеквизитыЗаголовка Цикл
				Если ДополнительныйРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя Тогда
					Письмо.УстановитьПолеЗаголовка("X-Tax-Sender", ДополнительныйРеквизит.Значение, 0);
				ИначеЕсли ДополнительныйРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя Тогда
					Письмо.УстановитьПолеЗаголовка("X-Tax-Receiver", ДополнительныйРеквизит.Значение, 0);
				ИначеЕсли ДополнительныйРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации Тогда
					Письмо.ТипПередаваемогоКонтейнера = ДополнительныйРеквизит.Значение;
				ИначеЕсли ДополнительныйРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы Тогда
					Письмо.ИмяПередающейСистемы = ДополнительныйРеквизит.Значение;
				ИначеЕсли ДополнительныйРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения Тогда
					Письмо.ПервичныйИдентификаторСообщения = ДополнительныйРеквизит.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// добавляем вложение
			ИмяФайлаВложенияСодержитРусскиеСимволы = СтрокаСодержитРусскиеСимволы(ИмяЗашифрованногоВложения);
			Письмо.Вложения.Добавить(ДанныеЗашифрованногоВложения.Получить(), ИмяЗашифрованногоВложения);
			
			// инициализируем длину транспортного контейнера
			ВремФайлЗашифрованноеВложение = ПолучитьИмяВременногоФайла();
			Попытка
				ДанныеЗашифрованногоВложения.Получить().Записать(ВремФайлЗашифрованноеВложение);
			Исключение
				
				РазблокироватьДанныеДляРедактирования(Сообщение);
				
				ТекстСообщения = НСтр("ru = 'Не удалось сохранить во временный файл на диске готовый к отправке, зашифрованный транспортный контейнер!'");
				ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
			ОбъектВремФайл = Новый Файл(ВремФайлЗашифрованноеВложение);
			РазмерЗашифрованногоВложения = ОбъектВремФайл.Размер();
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВремФайлЗашифрованноеВложение);
			
			// проверяем, не превышает ли размер транспортного сообщения 512 МБ
			// вычисления весьма приблизительные и только для вложения
			Если Окр(РазмерЗашифрованногоВложения * 4 / 3) > 512 * 1024 * 1024 Тогда
				
				РазблокироватьДанныеДляРедактирования(Сообщение);
				
				ТекстСообщения = НСтр("ru = 'Невозможна отправка транспортного сообщения, размер которого превышает 512 МБ!'");
				ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР Тогда
		
		Письмо.Кодировка = ОбъектСообщение.Кодировка;
		Письмо.Тема = ОбъектСообщение.Тема;
		
		СтрКому = ОбъектСообщение.Кому.Получить(0);
		АдресПолучателя = Письмо.Получатели.Добавить(СокрЛП(СтрКому.АдресЭлектроннойПочты));
		АдресПолучателя.ОтображаемоеИмя = СокрЛП(Лев(СтрКому.Представление, 80));
		
		ОбратныйАдрес = Письмо.ОбратныйАдрес.Добавить(СокрЛП(ОбъектСообщение.ОтКогоАдрес));
		ОбратныйАдрес.ОтображаемоеИмя = СокрЛП(ОбъектСообщение.ОтКогоПредставление);
		
		Письмо.Отправитель.Адрес = СокрЛП(ОбъектСообщение.ОтКогоАдрес);
		Письмо.Отправитель.ОтображаемоеИмя = СокрЛП(ОбъектСообщение.ОтКогоПредставление);
		
		// сохраняем идентификатор сообщения
		ОбъектСообщение.ИдентификаторСообщения = Письмо.ИдентификаторСообщения;
		
		//Письмо.ДобавитьВложение(ДанныеЗашифрованногоВложения.Получить(), ИмяЗашифрованногоВложения, ИмяЗашифрованногоВложения);
		Письмо.Вложения.Добавить(ДанныеЗашифрованногоВложения.Получить(), ИмяЗашифрованногоВложения);
		
	ИначеЕсли ОбъектСообщение.ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФСГС Тогда
		
		Письмо.Кодировка = ОбъектСообщение.Кодировка;
		Письмо.Тема = ОбъектСообщение.Тема;
		
		СтрКому = ОбъектСообщение.Кому.Получить(0);
		АдресПолучателя = Письмо.Получатели.Добавить(СокрЛП(СтрКому.АдресЭлектроннойПочты));
		АдресПолучателя.ОтображаемоеИмя = СокрЛП(Лев(СтрКому.Представление, 80));
		
		ОбратныйАдрес = Письмо.ОбратныйАдрес.Добавить(СокрЛП(ОбъектСообщение.ОтКогоАдрес));
		ОбратныйАдрес.ОтображаемоеИмя = СокрЛП(ОбъектСообщение.ОтКогоПредставление);
		
		Письмо.Отправитель.Адрес = СокрЛП(ОбъектСообщение.ОтКогоАдрес);
		Письмо.Отправитель.ОтображаемоеИмя = СокрЛП(ОбъектСообщение.ОтКогоПредставление);
		
		// дополнительные реквизиты
		Для Каждого ДополнительныйРеквизит Из ОбъектСообщение.ДополнительныеРеквизитыЗаголовка Цикл
			Если ДополнительныйРеквизит.Тип = "X-Stat-Message-ID" 
			 ИЛИ ДополнительныйРеквизит.Тип = "X-Msg-Type"
			 ИЛИ ДополнительныйРеквизит.Тип = "X-File-Name"
			 ИЛИ ДополнительныйРеквизит.Тип = "X-File-Type" Тогда
				Письмо.УстановитьПолеЗаголовка(ДополнительныйРеквизит.Тип, ДополнительныйРеквизит.Значение,
					?(СтрокаСодержитРусскиеСимволы(ДополнительныйРеквизит.Значение), СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.MIME, СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования));		
			КонецЕсли;
		КонецЦикла;
		
		// сохраняем идентификатор сообщения
		ОбъектСообщение.ИдентификаторСообщения = Письмо.ИдентификаторСообщения;
		Письмо.Вложения.Добавить(ДанныеЗашифрованногоВложения.Получить(), ИмяЗашифрованногоВложения);
		
		// инициализируем длину транспортного контейнера
		ВремФайлЗашифрованноеВложение = ПолучитьИмяВременногоФайла();
		Попытка
			ДанныеЗашифрованногоВложения.Получить().Записать(ВремФайлЗашифрованноеВложение);
		Исключение
			
			РазблокироватьДанныеДляРедактирования(Сообщение);
			
			ТекстСообщения = НСтр("ru = 'Не удалось сохранить во временный файл на диске готовый к отправке, зашифрованный транспортный контейнер!'");
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
		ОбъектВремФайл = Новый Файл(ВремФайлЗашифрованноеВложение);
		РазмерЗашифрованногоВложения = ОбъектВремФайл.Размер();
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВремФайлЗашифрованноеВложение);
		
		// проверяем, не превышает ли размер транспортного сообщения 512 МБ
		// вычисления весьма приблизительные и только для вложения
		Если Окр(РазмерЗашифрованногоВложения * 4 / 3) > 512 * 1024 * 1024 Тогда
			
			РазблокироватьДанныеДляРедактирования(Сообщение);
			
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Невозможна отправка транспортного сообщения, размер которого превышает 512 МБ!'"));
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Формирование почтового сообщения на основе транспортного сообщения
	// Работа с объектом Почта
	///////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////
	// Отправка сообщения
	
	Попытка
		Почта.Послать(Письмо);
	Исключение
		
		РазблокироватьДанныеДляРедактирования(Сообщение);
		
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	// Отправка сообщения
	///////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////
	// Отражение отправки в ИБ
	
	// изменяем статус сообщения
	ОбъектСообщение.Статус = Перечисления.СтатусыПисем.Отправленное;
	
	// определяем дату транспорта
	ОбъектСообщение.ДатаТранспорта = ТекущаяДатаСеанса();
	
	// сохраняем сообщение
	Попытка
		ОбъектСообщение.Записать();
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать сообщение 
                  |%1!
                  |%2'"),
			ПредставлениеСообщения(СообщениеСсылка),
			ОбщегоНазначенияЭДКОКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание);
			
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения);
		
		РазблокироватьДанныеДляРедактирования(Сообщение);
		Возврат Ложь;
	КонецПопытки;
	
	// Отражение отправки в ИБ
	///////////////////////////////////////////////////////////////////////////////
	РазблокироватьДанныеДляРедактирования(Сообщение);	
	Возврат Истина;
	
КонецФункции

Функция ИзвлечьИмяФайлаОтчетаИзПакета(ОбъектСообщение, ПрефиксИмениФайла = "")
	
	// выгружаем контейнер во временный файл
	ИмяФайлаКонтейнера = ПолучитьИмяВременногоФайла();
	Контейнер = ПолучитьТранспортныйКонтейнер(ОбъектСообщение.Ссылка, Истина);
	Если НЕ ЗначениеЗаполнено(Контейнер) ИЛИ Контейнер.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Контейнер[0].Данные.Получить().Записать(ИмяФайлаКонтейнера);
	
	// распаковываем файл описания сведений архива
	ИмяФайлаОписанияСведений = "packageDescription.xml";
	ЧтениеЗИП = Новый ЧтениеZipФайла(ИмяФайлаКонтейнера);
	ЭлементОписаниеСведений = ЧтениеЗИП.Элементы.Найти(ИмяФайлаОписанияСведений);
	Если ЭлементОписаниеСведений = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КаталогРаспаковки = СоздатьВременныйКаталог();
	ЧтениеЗИП.Извлечь(ЭлементОписаниеСведений, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	// читаем XML
	ТекстXML = ПрочитатьТекстИзФайла(КаталогРаспаковки + ИмяФайлаОписанияСведений, , Истина);
	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		ЧтениеЗИП.Закрыть();
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаКонтейнера);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Неопределено;
	КонецЕсли;
	
	// загружаем XML в дерево
	ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		ЧтениеЗИП.Закрыть();
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаКонтейнера);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Неопределено;
	КонецЕсли;
	
	// в случае уведомления об ошибке, источником для получения имени файла отчета должен служить
	// документ описаниеОшибочногоПакета, на который ссылается описание пакета
	Если ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР
	ИЛИ ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС
	ИЛИ ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС
	ИЛИ ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка Тогда
		
		// находим элемент описаниеОшибочногоПакета
		Узлы_ТипДокументаОписаниеОшибочногоПакета = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя, Тип, Значение", "типДокумента", "А", "описаниеОшибочногоПакета"), Истина);
		Если Узлы_ТипДокументаОписаниеОшибочногоПакета.Количество() > 0 Тогда
			
			Узел_ОписаниеОшибочногоПакета = Узлы_ТипДокументаОписаниеОшибочногоПакета[0].Родитель;
			
			// ищем в подчинении элемент Содержимое
			УзлыСодержимое = Узел_ОписаниеОшибочногоПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "содержимое", "Э"));
			Если УзлыСодержимое.Количество() > 0 Тогда
				
				// ищем в подчинении атрибут имяФайла
				УзелСодержимое = УзлыСодержимое[0];
				УзлыИмяФайла = УзелСодержимое.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "имяФайла", "А"));
				Если УзлыИмяФайла.Количество() > 0 Тогда
					
					УзелИмяФайла = УзлыИмяФайла[0];
					ИмяФайлаОписанияОшибочногоПакета = СокрЛП(УзелИмяФайла.Значение);
					
					ЭлементОписаниеСведений = ЧтениеЗИП.Элементы.Найти(ИмяФайлаОписанияОшибочногоПакета);
					Если ЭлементОписаниеСведений <> Неопределено Тогда
						
						ЧтениеЗИП.Извлечь(ЭлементОписаниеСведений, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
						
						// распаковываем
						ПолноеИмяФайлаДокумента = РазархивироватьФайл(КаталогРаспаковки + ИмяФайлаОписанияОшибочногоПакета);
						Если ПолноеИмяФайлаДокумента <> Неопределено Тогда
						
							// читаем XML
							ТекстXML = ПрочитатьТекстИзФайла(ПолноеИмяФайлаДокумента, , Истина);
							Если ЗначениеЗаполнено(ТекстXML) Тогда
								
								// загружаем XML в дерево
								ДеревоЗначенийИзСтрокиXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML);
								
								// подменяем дерево описания сведений
								Если ДеревоЗначенийИзСтрокиXML <> Неопределено Тогда
									ДеревоXML = ДеревоЗначенийИзСтрокиXML;
								КонецЕсли;
								
							КонецЕсли;
							
							ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ПолноеИмяФайлаДокумента);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// закрываем архив и удаляем временный файл контейнера
	ЧтениеЗИП.Закрыть();
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаКонтейнера);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогРаспаковки);
	
	// ищем атрибут "исходноеИмяФайла"
	Узлы_исходноеИмяФайла = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "исходноеИмяФайла", "А"), Истина);
	Если НЕ ЗначениеЗаполнено(ПрефиксИмениФайла) Тогда
		Если Узлы_исходноеИмяФайла.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// возвращаем первое найденное значение атрибута
		Возврат СокрЛП(Узлы_исходноеИмяФайла[0].Значение);
		
	Иначе
		Для каждого Узел_исходноеИмяФайла Из Узлы_исходноеИмяФайла Цикл
			ДлинаПрефиксаИмениФайла = СтрДлина(ПрефиксИмениФайла);
			ПрефиксИмениФайлаИзУзла = Лев(Узел_исходноеИмяФайла.Значение, ДлинаПрефиксаИмениФайла);
			
			Если ВРЕГ(ПрефиксИмениФайлаИзУзла) = ВРЕГ(ПрефиксИмениФайла) Тогда
				Возврат Узел_исходноеИмяФайла.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСообщенияДляОтправки(УчетнаяЗапись)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТранспортноеСообщение.Ссылка
	|ИЗ
	|	Документ.ТранспортноеСообщение КАК ДокументТранспортноеСообщение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
	|		ПО (ТранспортныеКонтейнеры.ТранспортноеСообщение = ДокументТранспортноеСообщение.Ссылка)
	|ГДЕ
	|	ДокументТранспортноеСообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Исходящее)
	|	И НЕ ДокументТранспортноеСообщение.ПометкаУдаления
	|	И ДокументТранспортноеСообщение.УчетнаяЗапись = &УчетнаяЗапись
	|	И ДокументТранспортноеСообщение.Тип В(&ТипыАвтоотправляемыхСообщений)
	|	И ДокументТранспортноеСообщение.ЦиклОбмена.ДатаЗакрытия = &ДатаЗакрытия
	|	И НЕ ДокументТранспортноеСообщение.ЦиклОбмена.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументТранспортноеСообщение.ЦиклОбмена.ДатаСоздания,
	|	ДокументТранспортноеСообщение.Тип.Порядок";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ДатаЗакрытия", ПолучитьПустуюДатуЗавершенияЦиклаОбмена());
	Запрос.УстановитьПараметр("ТипыАвтоотправляемыхСообщений",
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ТипыАвтоотправляемыхСообщений());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция СопоставитьССозданнымиЦикламиОбменаПередОтправкой(Сообщение)
	
	Если Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ДекларацияНП Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                      |	ЦиклыОбмена.Ссылка,
		                      |	ЦиклыОбмена.ДатаЗакрытия КАК ДатаЗакрытияЦиклаОбмена,
		                      |	ЦиклыОбмена.ВидДокумента,
		                      |	ВложенныйЗапрос.Ссылка КАК ПервичноеСообщениеСодержащееОтчетность,
		                      |	ВложенныйЗапрос.Статус КАК СтатусПервичногоСообщения
		                      |ИЗ
		                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ТранспортноеСообщение.Ссылка КАК Ссылка,
		                      |			ТранспортноеСообщение.Статус КАК Статус,
		                      |			ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена
		                      |		ИЗ
		                      |			Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		                      |		ГДЕ
		                      |			ТранспортноеСообщение.Тип = &ТипПервичноеСообщениеСодержащееОтчетность) КАК ВложенныйЗапрос
		                      |		ПО ЦиклыОбмена.Ссылка = ВложенныйЗапрос.ЦиклОбмена
		                      |ГДЕ
		                      |	ЦиклыОбмена.Организация = &Организация
		                      |	И ЦиклыОбмена.ВнешняяОрганизация = &НалоговыйОрган
		                      |	И ЦиклыОбмена.Тип = &Тип
		                      |	И ЦиклыОбмена.ВидОтчета = &ВидОтчета
		                      |	И ЦиклыОбмена.ДатаНачалаПериода = &ДатаНачалаПериода
		                      |	И ЦиклыОбмена.ДатаОкончанияПериода = &ДатаОкончанияПериода
		                      |	И ЦиклыОбмена.Ссылка <> &Ссылка
		                      |	И ЦиклыОбмена.ПометкаУдаления = &ПометкаУдаления");
							  
		Запрос.УстановитьПараметр("Организация",									Сообщение.Отправитель);
		Запрос.УстановитьПараметр("НалоговыйОрган",									Сообщение.ЦиклОбмена.ВнешняяОрганизация);
		Запрос.УстановитьПараметр("ДатаНачалаПериода",								Сообщение.ЦиклОбмена.ДатаНачалаПериода);
		Запрос.УстановитьПараметр("ДатаОкончанияПериода",							Сообщение.ЦиклОбмена.ДатаОкончанияПериода);
		Запрос.УстановитьПараметр("ВидОтчета",										Сообщение.ЦиклОбмена.ВидОтчета);
		Запрос.УстановитьПараметр("Тип",											Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
		Запрос.УстановитьПараметр("Ссылка",											Сообщение.ЦиклОбмена);
		Запрос.УстановитьПараметр("ТипПервичноеСообщениеСодержащееОтчетность",		Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
		Запрос.УстановитьПараметр("ВидДокумента",									Сообщение.ЦиклОбмена.ВидДокумента);
		Запрос.УстановитьПараметр("ПометкаУдаления",								Ложь);
		
		ЦиклыОбмена = Запрос.Выполнить().Выгрузить();
		
		ТекущаяВерсия = Сообщение.ЦиклОбмена.ВидДокумента;
		ПредставлениеТекущегоОтчета = ?(ТекущаяВерсия = 0, "первичный", "корректирующий")
										+ ?(ТекущаяВерсия > 0, " (с номером корректировки " + ТекущаяВерсия + ")", "")
										+ " отчет вида """ + Сообщение.ЦиклОбмена.ВидОтчета + """"
										+ " за период " + ПредставлениеПериода(НачалоДня(Сообщение.ЦиклОбмена.ДатаНачалаПериода), КонецДня(Сообщение.ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина")
										+ " по организации """ + Сообщение.Отправитель + """"
										+ " в налоговый орган " + Сообщение.ЦиклОбмена.ВнешняяОрганизация;
										
		
		// проверка на существование незакрытых циклов обмена (кроме текущего)
		НезакрытыеЦиклыОбмена =  ЦиклыОбмена.НайтиСтроки(Новый Структура("ДатаЗакрытияЦиклаОбмена, ВидДокумента", ПолучитьПустуюДатуЗавершенияЦиклаОбмена(), ТекущаяВерсия));
		СуществуютОтправленныеПервичные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения, ВидДокумента", Перечисления.СтатусыПисем.Отправленное, ТекущаяВерсия)).Количество() <> 0);
		СуществуютНеотправленныеПервичные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения, ВидДокумента", Перечисления.СтатусыПисем.Исходящее, ТекущаяВерсия)).Количество() <> 0);
		КоличествоНезакрытых = НезакрытыеЦиклыОбмена.Количество();
		
		Если СуществуютОтправленныеПервичные + СуществуютНеотправленныеПервичные > 0 Тогда
			Если СуществуютОтправленныеПервичные Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Уже отправлялся аналогичный текущему %1.%2'"),
					ПредставлениеТекущегоОтчета,
					?(СуществуютНеотправленныеПервичные,"
								|
								|Также существуют аналогичные подготовленные к отправке и неотправленные сообщения.", ""));
			ИначеЕсли СуществуютНеотправленныеПервичные Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Уже подготавливался к отправке (но не отправлен) аналогичный текущему.'"), ПредставлениеТекущегоОтчета);
			КонецЕсли;
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		// проверка на существование/отсутствие цикла обмена по аналогичному отчету с версией (<текущая> - 1)
		Если ТекущаяВерсия <> 0 Тогда
			ПредыдущаяВерсия = ТекущаяВерсия - 1;
			ЦиклыОбменаПредыдущейВерсии = ЦиклыОбмена.НайтиСтроки(
				Новый Структура("ВидДокумента, СтатусПервичногоСообщения", ПредыдущаяВерсия, Перечисления.СтатусыПисем.Отправленное));
			Если ЦиклыОбменаПредыдущейВерсии = 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Аналогичный отчет предыдущей версии (%1) не был представлен.'"),
					РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Сообщение.ЦиклОбмена.ВидДокумента));
				ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                      |	ЦиклыОбмена.Ссылка КАК ЦиклОбмена,
							  |	ЦиклыОбмена.ДатаЗакрытия КАК ДатаЗакрытияЦиклаОбмена,
		                      |	Сообщения.Статус КАК СтатусПервичногоСообщения
		                      |ИЗ
		                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ТранспортноеСообщение.Статус КАК Статус,
		                      |			ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена
		                      |		ИЗ
		                      |			Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		                      |		ГДЕ
		                      |			ТранспортноеСообщение.Тип = &ТипФорма2НДФЛНП) КАК Сообщения
		                      |		ПО ЦиклыОбмена.Ссылка = Сообщения.ЦиклОбмена
		                      |ГДЕ
		                      |	ЦиклыОбмена.Предмет = &Предмет
		                      |	И ЦиклыОбмена.ПометкаУдаления = &ПометкаУдаления
		                      |	И ЦиклыОбмена.Ссылка <> &Ссылка");
		
		ЦиклОбмена = Сообщение.ЦиклОбмена;
		Запрос.УстановитьПараметр("Ссылка",						ЦиклОбмена);
		Запрос.УстановитьПараметр("ТипФорма2НДФЛНП",			Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
		Запрос.УстановитьПараметр("Предмет",					ЦиклОбмена.Предмет);
		Запрос.УстановитьПараметр("ПометкаУдаления",			Ложь);
		
		ЦиклыОбмена = Запрос.Выполнить().Выгрузить();
		
		НезакрытыеЦиклыОбмена =  ЦиклыОбмена.НайтиСтроки(Новый Структура("ДатаЗакрытияЦиклаОбмена", ПолучитьПустуюДатуЗавершенияЦиклаОбмена()));
		СуществуютОтправленные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения", Перечисления.СтатусыПисем.Отправленное, ТекущаяВерсия)).Количество() <> 0);
		СуществуютНеотправленные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения", Перечисления.СтатусыПисем.Исходящее, ТекущаяВерсия)).Количество() <> 0);
		КоличествоНезакрытых = НезакрытыеЦиклыОбмена.Количество();
		
		Если СуществуютОтправленные + СуществуютНеотправленные > 0 Тогда
			Если СуществуютОтправленные Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Вы уже отправляли сообщения, содержащие текущий документ.1%'"),
					?(СуществуютНеотправленные,"
								|
								|Также существуют подготовленные к отправке и неотправленные сообщения с тем же документом.", ""));
			ИначеЕсли СуществуютНеотправленные Тогда
				ТекстСообщения = НСтр("ru = 'Вы уже подготавливали к отправке другие сообщения, содержащие текущий документ.'");
			КонецЕсли;
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                      |	ЦиклыОбмена.Ссылка,
		                      |	ЦиклыОбмена.ДатаЗакрытия КАК ДатаЗакрытияЦиклаОбмена,
		                      |	ЦиклыОбмена.ВидДокумента,
		                      |	ВложенныйЗапрос.Ссылка КАК ПервичноеСообщениеСодержащееОтчетность,
		                      |	ВложенныйЗапрос.Статус КАК СтатусПервичногоСообщения
		                      |ИЗ
		                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ТранспортноеСообщение.Ссылка КАК Ссылка,
		                      |			ТранспортноеСообщение.Статус КАК Статус,
		                      |			ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена
		                      |		ИЗ
		                      |			Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		                      |		ГДЕ
		                      |			ТранспортноеСообщение.Тип = &ТипПервичноеСообщениеСодержащееОтчетность) КАК ВложенныйЗапрос
		                      |		ПО ЦиклыОбмена.Ссылка = ВложенныйЗапрос.ЦиклОбмена
		                      |ГДЕ
		                      |	ЦиклыОбмена.Организация = &Организация
		                      |	И ЦиклыОбмена.ВнешняяОрганизация = &НалоговыйОрган
		                      |	И ЦиклыОбмена.Тип = &Тип
		                      |	И ЦиклыОбмена.ВидОтчета = &ВидОтчета
		                      |	И ЦиклыОбмена.ДатаНачалаПериода = &ДатаНачалаПериода
		                      |	И ЦиклыОбмена.ДатаОкончанияПериода = &ДатаОкончанияПериода
		                      |	И ЦиклыОбмена.Ссылка <> &Ссылка
		                      |	И ЦиклыОбмена.ПометкаУдаления = &ПометкаУдаления");
							  
		Запрос.УстановитьПараметр("Организация",				Сообщение.Отправитель);
		Запрос.УстановитьПараметр("НалоговыйОрган",				Сообщение.ЦиклОбмена.ВнешняяОрганизация);
		Запрос.УстановитьПараметр("ДатаНачалаПериода",			Сообщение.ЦиклОбмена.ДатаНачалаПериода);
		Запрос.УстановитьПараметр("ДатаОкончанияПериода",		Сообщение.ЦиклОбмена.ДатаОкончанияПериода);
		Запрос.УстановитьПараметр("ВидОтчета",					Сообщение.ЦиклОбмена.ВидОтчета);
		Запрос.УстановитьПараметр("Тип",						Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
		Запрос.УстановитьПараметр("Ссылка",						Сообщение.ЦиклОбмена);
		Запрос.УстановитьПараметр("ТипПервичноеСообщениеСодержащееОтчетность",		Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР);
		Запрос.УстановитьПараметр("ВидДокумента",				Сообщение.ЦиклОбмена.ВидДокумента);
		Запрос.УстановитьПараметр("ПометкаУдаления",			Ложь);
		
		ЦиклыОбмена = Запрос.Выполнить().Выгрузить();
		
		ТекущаяВерсия = Сообщение.ЦиклОбмена.ВидДокумента;
		ПредставлениеТекущегоОтчета = ?(ТекущаяВерсия = 0, "первичный", "корректирующий")
										+ ?(ТекущаяВерсия > 0, " (с номером корректировки " + ТекущаяВерсия + ")", "")
										+ " отчет вида """ + Сообщение.ЦиклОбмена.ВидОтчета + """"
										+ " за период " + ПредставлениеПериода(НачалоДня(Сообщение.ЦиклОбмена.ДатаНачалаПериода), КонецДня(Сообщение.ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина")
										+ " по организации """ + Сообщение.Отправитель + """"
										+ " в налоговый орган " + Сообщение.ЦиклОбмена.ВнешняяОрганизация;
										
		
		// проверка на существование незакрытых циклов обмена (кроме текущего)
		НезакрытыеЦиклыОбмена =  ЦиклыОбмена.НайтиСтроки(Новый Структура("ДатаЗакрытияЦиклаОбмена, ВидДокумента", ПолучитьПустуюДатуЗавершенияЦиклаОбмена(), ТекущаяВерсия));
		СуществуютОтправленныеПервичные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения, ВидДокумента", Перечисления.СтатусыПисем.Отправленное, ТекущаяВерсия)).Количество() <> 0);
		СуществуютНеотправленныеПервичные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения, ВидДокумента", Перечисления.СтатусыПисем.Исходящее, ТекущаяВерсия)).Количество() <> 0);
		КоличествоНезакрытых = НезакрытыеЦиклыОбмена.Количество();
		
		Если СуществуютОтправленныеПервичные + СуществуютНеотправленныеПервичные > 0 Тогда
			Если СуществуютОтправленныеПервичные Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Вы уже отправляли аналогичный текущему %1.%2'"),
					ПредставлениеТекущегоОтчета,
					?(СуществуютНеотправленныеПервичные,"
								|
								|Также существуют аналогичные подготовленные к отправке и неотправленные сообщения.", ""));
			ИначеЕсли СуществуютНеотправленныеПервичные Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Вы уже подготавливали к отправке (но не отправляли) аналогичный текущему %1."), ПредставлениеТекущегоОтчета);
			КонецЕсли;
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		// проверка на существование/отсутствие цикла обмена по аналогичному отчету с версией (<текущая> - 1)
		Если ТекущаяВерсия <> 0 Тогда
			ПредыдущаяВерсия = ТекущаяВерсия - 1;
			ЦиклыОбменаПредыдущейВерсии = ЦиклыОбмена.НайтиСтроки(Новый Структура("ВидДокумента, СтатусПервичногоСообщения", ПредыдущаяВерсия, Перечисления.СтатусыПисем.Отправленное));
			Если ЦиклыОбменаПредыдущейВерсии = 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Аналогичный отчет предыдущей версии (%1) не был представлен.'"),
					РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Сообщение.ЦиклОбмена.ВидДокумента));
				ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                      |	ЦиклыОбмена.Ссылка КАК ЦиклОбмена,
							  |	ЦиклыОбмена.ДатаЗакрытия КАК ДатаЗакрытияЦиклаОбмена,
		                      |	Сообщения.Статус КАК СтатусПервичногоСообщения
		                      |ИЗ
		                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ТранспортноеСообщение.Статус КАК Статус,
		                      |			ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена
		                      |		ИЗ
		                      |			Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		                      |		ГДЕ
		                      |			ТранспортноеСообщение.Тип = &ТипПервичноеСообщениеСодержащееОтчетность) КАК Сообщения
		                      |		ПО ЦиклыОбмена.Ссылка = Сообщения.ЦиклОбмена
		                      |ГДЕ
		                      |	ЦиклыОбмена.Предмет = &Предмет
		                      |	И ЦиклыОбмена.ПометкаУдаления = &ПометкаУдаления
		                      |	И ЦиклыОбмена.Ссылка <> &Ссылка");
							  
		ЦиклОбмена = Сообщение.ЦиклОбмена;
		Запрос.УстановитьПараметр("Ссылка",										ЦиклОбмена);
		Запрос.УстановитьПараметр("ТипПервичноеСообщениеСодержащееОтчетность",	Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР);
		Запрос.УстановитьПараметр("Предмет",									ЦиклОбмена.Предмет);
		Запрос.УстановитьПараметр("ПометкаУдаления",							Ложь);
		
		ЦиклыОбмена = Запрос.Выполнить().Выгрузить();
		
		НезакрытыеЦиклыОбмена =  ЦиклыОбмена.НайтиСтроки(Новый Структура("ДатаЗакрытияЦиклаОбмена", ПолучитьПустуюДатуЗавершенияЦиклаОбмена()));
		СуществуютОтправленные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения", Перечисления.СтатусыПисем.Отправленное, ТекущаяВерсия)).Количество() <> 0);
		СуществуютНеотправленные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения", Перечисления.СтатусыПисем.Исходящее, ТекущаяВерсия)).Количество() <> 0);
		КоличествоНезакрытых = НезакрытыеЦиклыОбмена.Количество();
		
		Если СуществуютОтправленные + СуществуютНеотправленные > 0 Тогда
			Если СуществуютОтправленные Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Вы уже отправляли сообщения, содержащие текущий отчет.%1'"),
						?(СуществуютНеотправленные,"
							|
							|Также существуют подготовленные к отправке и неотправленные сообщения с тем же отчетом.", ""));
			ИначеЕсли СуществуютНеотправленные Тогда
				ТекстСообщения = НСтр("ru = 'Вы уже подготавливали к отправке другие сообщения, содержащие текущий отчет.'");
			КонецЕсли;
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура заполнения регистра сведений "Свойства транспортных сообщений"
//
// Параметры:
//	СообщенияРезультат
//		Тип: Массив
//
Процедура ЗаполнитьСвойстваТранспортныхСообщений(СообщенияРезультат) Экспорт
	
	ДатаПолучения = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТранспортноеСообщение.Ссылка КАК Сообщение,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ТребуетВнимания.Сообщение, 0) = 0
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ТребуетВнимания,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ТребуетРасшифровки.Сообщение, 0) = 0
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ТребуетРасшифровки
	               |ИЗ
	               |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ТранспортноеСообщение.Ссылка КАК Сообщение
	               |		ИЗ
	               |			Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	               |		ГДЕ
	               |			ТранспортноеСообщение.Ссылка В(&Сообщения)
	               |			И (ТранспортноеСообщение.Тип В (&ТипКритическиеОшибки)
	               |					ИЛИ ТранспортноеСообщение.Тип В (&ТипВходящиеДокументы)
	               |					ИЛИ ТранспортноеСообщение.Тип В (&ТипПротоколы)
	               |						И ТранспортноеСообщение.ПротоколСОшибкой)) КАК ТребуетВнимания
	               |		ПО ТранспортноеСообщение.Ссылка = ТребуетВнимания.Сообщение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ТранспортныеКонтейнеры.ТранспортноеСообщение КАК Сообщение
	               |		ИЗ
	               |			РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
	               |		ГДЕ
	               |			НЕ ТранспортныеКонтейнеры.ТранспортноеСообщение В
	               |						(ВЫБРАТЬ
	               |							СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение
	               |						ИЗ
	               |							РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	               |						ГДЕ
	               |							СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение В (&Сообщения)
	               |							И НЕ СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ПометкаУдаления
	               |							И НЕ СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена.ПометкаУдаления)) КАК ТребуетРасшифровки
	               |		ПО ТранспортноеСообщение.Ссылка = ТребуетРасшифровки.Сообщение
	               |ГДЕ
	               |	ТранспортноеСообщение.Ссылка В(&Сообщения)";
	
	ТипВходящиеДокументы = Новый Массив;
	ТипВходящиеДокументы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР);
	ТипВходящиеДокументы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС);
	Запрос.УстановитьПараметр("ТипВходящиеДокументы", ТипВходящиеДокументы);
	
	ТипПротоколы = Новый Массив;
	ТипПротоколы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР);
	ТипПротоколы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС);
	ТипПротоколы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО);
	ТипПротоколы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО);
	Запрос.УстановитьПараметр("ТипПротоколы", ТипПротоколы);
	
	ТипКритическиеОшибки = Новый Массив;
	ТипКритическиеОшибки.Добавить(Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка);
	ТипКритическиеОшибки.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР);
	ТипКритическиеОшибки.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС);
	ТипКритическиеОшибки.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС);
	Запрос.УстановитьПараметр("ТипКритическиеОшибки", ТипКритическиеОшибки);
	
	Запрос.УстановитьПараметр("Сообщения", СообщенияРезультат);
	Запрос.УстановитьПараметр("ТипКритическиеОшибки", ТипКритическиеОшибки);
	Запрос.УстановитьПараметр("ТипВходящиеДокументы", ТипВходящиеДокументы);
	Запрос.УстановитьПараметр("ТипПротоколы", ТипПротоколы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СвойстваТранспортныхСообщений.СоздатьНаборЗаписей(); 
		
		НаборЗаписей.Отбор.УчетнаяЗапись.Установить(Выборка.Сообщение.УчетнаяЗапись);
		НаборЗаписей.Отбор.ТранспортноеСообщение.Установить(Выборка.Сообщение);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.УчетнаяЗапись 			= Выборка.Сообщение.УчетнаяЗапись;
		НоваяЗапись.ТранспортноеСообщение 	= Выборка.Сообщение;
		НоваяЗапись.ДатаПолучения			= ДатаПолучения;
		НоваяЗапись.ТребуетВнимания			= Выборка.ТребуетВнимания;
		НоваяЗапись.ТребуетРасшифровки		= Выборка.ТребуетРасшифровки;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры

// не полный аналог ф-ции в Контейнере
Функция ПодключитьсяКПочтовомуСерверу(ПочтовыйПрофиль) Экспорт
	
	Попытка
		Почта = Новый ИнтернетПочта;
		Почта.Подключиться(ПочтовыйПрофиль);
		Возврат Почта;
	Исключение
		ТекстСообщенияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключиться к почтовому серверу!
				 |%1'"), ИнформацияОбОшибке().Описание);
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщенияОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// не полный аналог ф-ции в Контейнере
Функция ОтключитьсяОтПочтовогоСервера(Почта) Экспорт
	
	Попытка
		Почта.Отключиться();
		Возврат Истина;
	Исключение
		ТекстСообщенияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отключиться от сервера документооборота!
				 |%1'"), ИнформацияОбОшибке().Описание);
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщенияОбОшибке);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Автоматический обмен с контролирующими органами'");
	
КонецФункции

Процедура ЗаписатьСобытиеВЖурнал(Уровень, ТекстСобытия)
	
	РежимВключен = (ПолучитьИспользованиеЖурналаРегистрации().Найти(Уровень) <> Неопределено);
	Если НЕ РежимВключен Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), Уровень, , , ТекстСобытия);
	
КонецПроцедуры

// есть в Контейнере
Функция ОпределитьОрганФСГСОрганизации(Организация) Экспорт
	
	КодОрганаФСГС = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодОрганаФСГС").КодОрганаФСГС);
	Если НЕ ЗначениеЗаполнено(КодОрганаФСГС) Тогда
		Возврат Неопределено;
	Иначе
		Возврат Справочники.ОрганыФСГС.НайтиПоКоду(КодОрганаФСГС);
	КонецЕсли;
	
КонецФункции

// есть в Контейнере
Функция СтрокаСодержитРусскиеСимволы(Стр)
	
	// Исключение из стандарта 456.
	РусскиеСимволы = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	Для Инд = 1 По СтрДлина(Стр) Цикл
		Если СтрНайти(РусскиеСимволы, ВРЕГ(Сред(Стр, Инд, 1))) <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьАдресИПредставлениеПолучателяТранспортногоСообщения(ОбъектСообщение, СсылкаПолучатель)
	
	// если это сообщение, предназначенное для СОС, то отправляем ровно на тот адрес,
	// с которого пришло сообщение-основание
	Если ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		ОтКогоАдрес = ОбъектСообщение.Основание.ОтКогоАдрес;
		ОтКогоПредставление = ОбъектСообщение.Основание.ОтКогоПредставление;
		Если ЗначениеЗаполнено(ОтКогоАдрес) Тогда
			Возврат Новый Структура("Адрес, Представление", ОтКогоАдрес, ОтКогоПредставление);
		КонецЕсли;
	КонецЕсли;
	
	// иначе определяем результат по свойствам получателя
	Если ТипЗнч(СсылкаПолучатель) = Тип("СправочникСсылка.НалоговыеОрганы") Тогда
		АдресПолучателя = СсылкаПолучатель.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками;
	Иначе
		Если ОбъектСообщение.ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС Тогда
			АдресПолучателя = СсылкаПолучатель.АдресЭлектроннойПочтыФНС;
		ИначеЕсли ОбъектСообщение.ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФСГС Тогда
			АдресПолучателя = СсылкаПолучатель.АдресЭлектроннойПочтыФСГС;
		Иначе
			АдресПолучателя = СсылкаПолучатель.АдресЭлектроннойПочтыПФР;
		КонецЕсли;
	КонецЕсли;
	Возврат Новый Структура("Адрес, Представление", АдресПолучателя, СокрЛП(СсылкаПолучатель.Наименование));
	
КонецФункции

// есть в Контейнере
Функция ОпределитьПолучателяТранспортногоСообщения(Сообщение)
	
	Если НЕ Сообщение.УчетнаяЗапись.ОбменНапрямую Тогда
		Возврат Сообщение.УчетнаяЗапись.СерверДокументооборота;
	Иначе
		ТипСообщения = Сообщение.Тип;
		Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
			Возврат Сообщение.УчетнаяЗапись.СерверДокументооборота;
		Иначе
			Возврат Сообщение.УчетнаяЗапись.НалоговыйОрган;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// есть в Контейнере
Функция ПолучитьИдентификаторПервичногоСообщения(Объект)
	
	СтрИДПервичного = Объект.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения, "Тип");
	Если СтрИДПервичного = Неопределено Тогда
		СтрИДПервичного = Объект.ДополнительныеРеквизитыЗаголовка.Найти("X-Message-ID", "Тип");
	КонецЕсли;
	
	Если СтрИДПервичного = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СокрЛП(СтрИДПервичного.Значение);
	
КонецФункции

// есть в Контейнере
Процедура РаспознатьТранспортноеСообщение(парамОбъект, Записывать = Истина) Экспорт
	
	Если парамОбъект.Статус <> Перечисления.СтатусыПисем.Полученное Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(парамОбъект) = Тип("ДокументСсылка.ТранспортноеСообщение") Тогда
		Объект = парамОбъект.ПолучитьОбъект();
	Иначе
		Объект = парамОбъект;
	КонецЕсли;
	
	ШапкаОшибки = "Не удалось записать транспортное сообщение """ + ПредставлениеТранспортногоСообщения(Объект) + """:";
	
	// распознаем тип
	Объект.Тип = ОпределитьТипСообщения(Объект);
	
	// распознаем, с ошибкой ли протокол (если это протокол)
	Объект.ПротоколСОшибкой = ЯвляетсяОтрицательнымПротоколом(Объект);
	
	// распознаем отправителя
	Объект.Отправитель = ОпределитьОтправителяВходящегоТранспортногоСообщения(Объект);
	
	// распознаем получателя
	Объект.Получатель = ОпределитьПолучателяВходящегоТранспортногоСообщения(Объект);
	
	// распознаем цикл обмена
	Если НЕ ЗначениеЗаполнено(Объект.ЦиклОбмена) Тогда
		
		// если это документ от налогового органа, то создаем цикл обмена - основание
		Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР Тогда
			
			Если ЗначениеЗаполнено(Объект.Получатель) И ЗначениеЗаполнено(Объект.Отправитель) Тогда// если получатель или отправитель не заполнены - цикл обмена не запишется
			
				ЦиклОбменаОбъект = Справочники.ЦиклыОбмена.СоздатьЭлемент();
				ЦиклОбменаОбъект.Идентификатор = ИзвлечьИдентификаторДокументооборотаИзПакета(Объект.Ссылка);
				ЦиклОбменаОбъект.Организация = Объект.Получатель;
				ЦиклОбменаОбъект.УчетнаяЗапись = Объект.УчетнаяЗапись;
				ЦиклОбменаОбъект.ВнешняяОрганизация = Объект.Отправитель;
				ЦиклОбменаОбъект.ДатаПоследнегоСообщения = Объект.ДатаТранспорта;
				ЦиклОбменаОбъект.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие;
				ЦиклОбменаОбъект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР;
				ЦиклОбменаОбъект.Записать();
				
				Объект.ЦиклОбмена = ЦиклОбменаОбъект.Ссылка;
				
			КонецЕсли;
			
		// если это письмо от Росстата, то создаем цикл обмена - основание
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС Тогда
			
			Если ЗначениеЗаполнено(Объект.Получатель) И ЗначениеЗаполнено(Объект.Отправитель) Тогда// если получатель или отправитель не заполнены - цикл обмена не запишется
			
				ЦиклОбменаОбъект = Справочники.ЦиклыОбмена.СоздатьЭлемент();
				ЦиклОбменаОбъект.Идентификатор = ИзвлечьИдентификаторДокументооборотаИзПакета(Объект.Ссылка);
				ЦиклОбменаОбъект.Организация = Объект.Получатель;
				ЦиклОбменаОбъект.УчетнаяЗапись = Объект.УчетнаяЗапись;
				ЦиклОбменаОбъект.ВнешняяОрганизация = Объект.Отправитель;
				ЦиклОбменаОбъект.ДатаПоследнегоСообщения = Объект.ДатаТранспорта;
				ЦиклОбменаОбъект.Тип = Перечисления.ТипыЦикловОбмена.ИндивидуальноеИнформированиеФСГС;
				ЦиклОбменаОбъект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФСГС;
				ЦиклОбменаОбъект.Записать();
				
				Объект.ЦиклОбмена = ЦиклОбменаОбъект.Ссылка;
				
			КонецЕсли;
			
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС Тогда
			
			Если ЗначениеЗаполнено(Объект.Получатель) И ЗначениеЗаполнено(Объект.Отправитель) Тогда// если получатель или отправитель не заполнены - цикл обмена не запишется
			
				ЦиклОбменаОбъект = Справочники.ЦиклыОбмена.СоздатьЭлемент();
				ЦиклОбменаОбъект.Идентификатор = ИзвлечьИдентификаторДокументооборотаИзПакета(Объект.Ссылка);
				ЦиклОбменаОбъект.Организация = Объект.Получатель;
				ЦиклОбменаОбъект.УчетнаяЗапись = Объект.УчетнаяЗапись;
				ЦиклОбменаОбъект.ВнешняяОрганизация = Объект.Отправитель;
				ЦиклОбменаОбъект.ДатаПоследнегоСообщения = Объект.ДатаТранспорта;
				ЦиклОбменаОбъект.Тип = Перечисления.ТипыЦикловОбмена.РассылкаФСГС;
				ЦиклОбменаОбъект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФСГС;
				ЦиклОбменаОбъект.Записать();
				
				Объект.ЦиклОбмена = ЦиклОбменаОбъект.Ссылка;
				
			КонецЕсли;
			
		// если это письмо от ФНС, то создаем цикл обмена - основание
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО Тогда
			
			Если ЗначениеЗаполнено(Объект.Получатель) И ЗначениеЗаполнено(Объект.Отправитель) Тогда// если получатель или отправитель не заполнены - цикл обмена не запишется
			
				ЦиклОбменаОбъект = Справочники.ЦиклыОбмена.СоздатьЭлемент();
				ЦиклОбменаОбъект.Идентификатор = ПолучитьИдентификаторПервичногоСообщения(Объект);
				ЦиклОбменаОбъект.Организация = Объект.Получатель;
				ЦиклОбменаОбъект.УчетнаяЗапись = Объект.УчетнаяЗапись;
				ЦиклОбменаОбъект.ВнешняяОрганизация = Объект.Отправитель;
				ЦиклОбменаОбъект.ДатаПоследнегоСообщения = Объект.ДатаТранспорта;
				ЦиклОбменаОбъект.Тип = Перечисления.ТипыЦикловОбмена.ПисьмоНО;
				ЦиклОбменаОбъект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС;
				ЦиклОбменаОбъект.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534;
				ЦиклОбменаОбъект.Записать();
				
				Объект.ЦиклОбмена = ЦиклОбменаОбъект.Ссылка;
				
			КонецЕсли;
			
		// если это рассылка от ФНС, то создаем цикл обмена - основание
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РассылкаНО Тогда
			
			Если ЗначениеЗаполнено(Объект.Получатель) И ЗначениеЗаполнено(Объект.Отправитель) Тогда// если получатель или отправитель не заполнены - цикл обмена не запишется
			
				ЦиклОбменаОбъект = Справочники.ЦиклыОбмена.СоздатьЭлемент();
				ЦиклОбменаОбъект.Идентификатор = ПолучитьИдентификаторПервичногоСообщения(Объект);
				ЦиклОбменаОбъект.Организация = Объект.Получатель;
				ЦиклОбменаОбъект.УчетнаяЗапись = Объект.УчетнаяЗапись;
				ЦиклОбменаОбъект.ВнешняяОрганизация = Объект.Отправитель;
				ЦиклОбменаОбъект.ДатаПоследнегоСообщения = Объект.ДатаТранспорта;
				ЦиклОбменаОбъект.Тип = ОпределитьТипЦиклаОбменаПоСообщениюРассылки(Объект.Ссылка);
				ЦиклОбменаОбъект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС;
				ЦиклОбменаОбъект.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534;
				ЦиклОбменаОбъект.Записать();
				
				Объект.ЦиклОбмена = ЦиклОбменаОбъект.Ссылка;
				
			КонецЕсли;
			
		// если это документ реализации полномочий от ФНС, то создаем цикл обмена - основание
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ДокументНО Тогда
			
			// если получатель или отправитель не заполнены - цикл обмена не запишется
			Если ЗначениеЗаполнено(Объект.Получатель) И ЗначениеЗаполнено(Объект.Отправитель) И ТипЗнч(Объект.Отправитель) = Тип("СправочникСсылка.НалоговыеОрганы") Тогда 
				
				ЦиклОбменаОбъект = Справочники.ЦиклыОбмена.СоздатьЭлемент();
				ЦиклОбменаОбъект.Идентификатор = ПолучитьИдентификаторПервичногоСообщения(Объект);
				ЦиклОбменаОбъект.Организация = Объект.Получатель;
				ЦиклОбменаОбъект.УчетнаяЗапись = Объект.УчетнаяЗапись;
				ЦиклОбменаОбъект.ВнешняяОрганизация = Объект.Отправитель;
				ЦиклОбменаОбъект.ДатаПоследнегоСообщения = Объект.ДатаТранспорта;
				ЦиклОбменаОбъект.Тип = Перечисления.ТипыЦикловОбмена.Документ;
				ЦиклОбменаОбъект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС;
				ЦиклОбменаОбъект.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534;
				ЦиклОбменаОбъект.Записать();
				
				Объект.ЦиклОбмена = ЦиклОбменаОбъект.Ссылка;
				
			КонецЕсли;	
			
		// если это прочее сообщение от ПФР, то находим цикл обмена по
		// идентификатору документооборота из описания пакета
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР Тогда
			
			ИдентификаторДокументооборота = ИзвлечьИдентификаторДокументооборотаИзПакета(Объект);
			Если ЗначениеЗаполнено(ИдентификаторДокументооборота) Тогда
				НайденныйЦиклОбмена = НайтиЦиклОбменаПоИдентификатору(ИдентификаторДокументооборота);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйЦиклОбмена) Тогда
				Объект.ЦиклОбмена = НайденныйЦиклОбмена;
			КонецЕсли;
			
		// если это другое сообщение от Росстата, то находим цикл обмена по
		// идентификатору документооборота из описания пакета
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС
			  ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС
			  ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС
			  ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС
			  ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС
			  ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС
			  ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС
			  ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС Тогда
			
			ИдентификаторДокументооборота = ИзвлечьИдентификаторДокументооборотаИзПакета(Объект);
			Если ЗначениеЗаполнено(ИдентификаторДокументооборота) Тогда
				НайденныйЦиклОбмена = НайтиЦиклОбменаПоИдентификатору(ИдентификаторДокументооборота);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйЦиклОбмена) Тогда
				Объект.ЦиклОбмена = НайденныйЦиклОбмена;
			КонецЕсли;
			
		// если это прочее сообщение от ФНС, то находим цикл обмена по
		// идентификатору первичного сообщения цикла из дополнительных реквизитов
		// заголовка почтового сообщения
		Иначе
			
			// пробуем найти цикл обмена по идентификатору первичного
			НайденныйЦиклОбмена = Неопределено;
			стрИдентификаторПервичногоСообщения = ПолучитьИдентификаторПервичногоСообщения(Объект);
			
			Если стрИдентификаторПервичногоСообщения <> Неопределено  Тогда
				НайденныйЦиклОбмена = НайтиЦиклОбменаПоИдентификатору(стрИдентификаторПервичногоСообщения);
			КонецЕсли;
			
			// если ничего не помогло...
			Если НЕ ЗначениеЗаполнено(НайденныйЦиклОбмена) Тогда
				
				// обход особенностей различных версий реализации серверного ПО ФНС
				Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка Тогда
					
					ВхождениеДвоеточия = СтрНайти(Объект.Тема, ":");
					Если ВхождениеДвоеточия <> 0 Тогда
						
						ИсходнаяТема = СокрЛ(Сред(Объект.Тема, ВхождениеДвоеточия + 1));
						
						Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
											  |	ТранспортноеСообщение.ЦиклОбмена
											  |ИЗ
											  |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
											  |ГДЕ
											  |	ТранспортноеСообщение.Тема ПОДОБНО &Тема
											  |	И ТранспортноеСообщение.Статус = &Статус
											  |	И ТранспортноеСообщение.УчетнаяЗапись = &УчетнаяЗапись
											  |
											  |УПОРЯДОЧИТЬ ПО
											  |	ТранспортноеСообщение.ДатаТранспорта УБЫВ");
						Запрос.УстановитьПараметр("Тема", ИсходнаяТема);
						Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПисем.Отправленное);
						Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.УчетнаяЗапись);
						РезультатЗапроса = Запрос.Выполнить();
						Если НЕ РезультатЗапроса.Пустой() Тогда
							Выборка = РезультатЗапроса.Выбрать();
							Если Выборка.Следующий() Тогда
								НайденныйЦиклОбмена = Выборка.ЦиклОбмена;
							КонецЕсли;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(Объект.ЦиклОбмена) Тогда
							Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
												  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена
												  |ИЗ
												  |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
												  |ГДЕ
												  |	СодержимоеТранспортныхКонтейнеров.ИмяФайла = &ИмяФайла
												  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Статус = &Статус
												  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.УчетнаяЗапись = &УчетнаяЗапись
												  |
												  |УПОРЯДОЧИТЬ ПО
												  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ДатаТранспорта УБЫВ");
							Запрос.УстановитьПараметр("ИмяФайла", СокрЛП(ИсходнаяТема));
							Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПисем.Отправленное);
							Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.УчетнаяЗапись);
							РезультатЗапроса = Запрос.Выполнить();
							Если НЕ РезультатЗапроса.Пустой() Тогда
								Выборка = РезультатЗапроса.Выбрать();
								Если Выборка.Следующий() Тогда
									НайденныйЦиклОбмена = Выборка.ЦиклОбмена;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
							
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйЦиклОбмена) Тогда
				Объект.ЦиклОбмена = НайденныйЦиклОбмена;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// если распознали цикл обмена, то пробуем еще раз распознать нераспознанных отправителя и получателя
	Если ЗначениеЗаполнено(Объект.ЦиклОбмена) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Получатель) 
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПредставлениеНО
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО Тогда
			Объект.Получатель = ОпределитьПолучателяВходящегоТранспортногоСообщения(Объект);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Отправитель) Тогда
			Объект.Отправитель = ОпределитьОтправителяВходящегоТранспортногоСообщения(Объект);
		КонецЕсли;
	КонецЕсли;
	
	// фиксируем изменения
	Если Записывать И Объект.Модифицированность() Тогда
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// есть в Контейнере
Функция НайтиЦиклОбменаПоИдентификатору(ИдентификаторДокументооборота)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	ЦиклыОбмена.Ссылка КАК Ссылка,
						  |	ВЫБОР
						  |		КОГДА ИсходящееТранспортноеСообщение.Ссылка ЕСТЬ NULL
						  |			ТОГДА ВЫБОР
						  |				КОГДА НЕ ОтправленноеТранспортноеСообщение.Ссылка ЕСТЬ NULL
						  |					ТОГДА 3
						  |				ИНАЧЕ 2
						  |			КОНЕЦ
						  |		ИНАЧЕ 1
						  |	КОНЕЦ КАК НаличиеОтправокОтсутствиеОшибок
						  |ИЗ
						  |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
						  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						  |			ТранспортноеСообщение.Ссылка КАК Ссылка,
						  |			ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена
						  |		ИЗ
						  |			Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
						  |		ГДЕ
						  |			ТранспортноеСообщение.ЦиклОбмена.Идентификатор = &ИдентификаторДокументооборота
						  |			И ТранспортноеСообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Исходящее)) КАК ИсходящееТранспортноеСообщение
						  |		ПО ЦиклыОбмена.Ссылка = ИсходящееТранспортноеСообщение.ЦиклОбмена
						  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						  |			ТранспортноеСообщение.Ссылка КАК Ссылка,
						  |			ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена
						  |		ИЗ
						  |			Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
						  |		ГДЕ
						  |			ТранспортноеСообщение.ЦиклОбмена.Идентификатор = &ИдентификаторДокументооборота
						  |			И ТранспортноеСообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Отправленное)) КАК ОтправленноеТранспортноеСообщение
						  |		ПО ЦиклыОбмена.Ссылка = ОтправленноеТранспортноеСообщение.ЦиклОбмена
						  |	ГДЕ
						  |		ЦиклыОбмена.Идентификатор = &ИдентификаторДокументооборота
						  |	УПОРЯДОЧИТЬ ПО
						  |		НаличиеОтправокОтсутствиеОшибок УБЫВ,
						  |		ЦиклыОбмена.ДатаСоздания УБЫВ");
	
	Запрос.УстановитьПараметр("ИдентификаторДокументооборота", ИдентификаторДокументооборота);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьТипЦиклаОбменаПоСообщениюРассылки(Сообщение)
	
	Контейнеры = ПолучитьТранспортныйКонтейнер(Сообщение);
	Если Контейнеры.Количество() = 0 Тогда
		Возврат Перечисления.ТипыЦикловОбмена.ПустаяСсылка();
	КонецЕсли;
	ИмяКонтейнера = нрег(Контейнеры[0].ИмяФайла);
	
	СуффиксКонтейнераРассылкаГрупповая = "05_01_01.zip";
	Если Прав(ИмяКонтейнера, СтрДлина(СуффиксКонтейнераРассылкаГрупповая)) = СуффиксКонтейнераРассылкаГрупповая Тогда
		Возврат Перечисления.ТипыЦикловОбмена.РассылкаГрупповая;
	Иначе
		Возврат Перечисления.ТипыЦикловОбмена.Рассылка;
	КонецЕсли;
	
КонецФункции

// есть в Контейнере и в Общем модуле РегламентированнаяОтчетность
Функция ИзвлечьИдентификаторДокументооборотаИзПакета(ОбъектСообщение)
	
	// выгружаем контейнер во временный файл
	ИмяФайлаКонтейнера = ПолучитьИмяВременногоФайла();
	Контейнер = ПолучитьТранспортныйКонтейнер(ОбъектСообщение.Ссылка, Истина);
	Если НЕ ЗначениеЗаполнено(Контейнер) ИЛИ Контейнер.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Контейнер[0].Данные.Получить().Записать(ИмяФайлаКонтейнера);
	
	// распаковываем файл описания сведений архива
	ИмяФайлаОписанияСведений = "packageDescription.xml";
	ЧтениеЗИП = Новый ЧтениеZipФайла(ИмяФайлаКонтейнера);
	ЭлементОписаниеСведений = ЧтениеЗИП.Элементы.Найти(ИмяФайлаОписанияСведений);
	Если ЭлементОписаниеСведений = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КаталогРаспаковки = ОперацииСФайламиЭДКО.СоздатьВременныйКаталог();
	ЧтениеЗИП.Извлечь(ЭлементОписаниеСведений, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	// читаем XML
	ТекстXML = ПрочитатьТекстИзФайла(КаталогРаспаковки + ИмяФайлаОписанияСведений, , Истина);
	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		ЧтениеЗИП.Закрыть();
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаКонтейнера);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Неопределено;
	КонецЕсли;
	
	// загружаем XML в дерево
	ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		ЧтениеЗИП.Закрыть();
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаКонтейнера);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Неопределено;
	КонецЕсли;
	
	// в случае уведомления об ошибке, источником для получения идентификатора пакета должен служить
	// документ описаниеОшибочногоПакета, на который ссылается описание пакета
	Если ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР
	ИЛИ ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС
	ИЛИ ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС
	ИЛИ ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка Тогда
		
		// находим элемент описаниеОшибочногоПакета
		Узлы_ТипДокументаОписаниеОшибочногоПакета = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя, Тип, Значение", "типДокумента", "А", "описаниеОшибочногоПакета"), Истина);
		Если Узлы_ТипДокументаОписаниеОшибочногоПакета.Количество() > 0 Тогда
			
			Узел_ОписаниеОшибочногоПакета = Узлы_ТипДокументаОписаниеОшибочногоПакета[0].Родитель;
			
			// ищем в подчинении элемент Содержимое
			УзлыСодержимое = Узел_ОписаниеОшибочногоПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "содержимое", "Э"));
			Если УзлыСодержимое.Количество() > 0 Тогда
				
				// ищем в подчинении атрибут имяФайла
				УзелСодержимое = УзлыСодержимое[0];
				УзлыИмяФайла = УзелСодержимое.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "имяФайла", "А"));
				Если УзлыИмяФайла.Количество() > 0 Тогда
					
					УзелИмяФайла = УзлыИмяФайла[0];
					ИмяФайлаОписанияОшибочногоПакета = СокрЛП(УзелИмяФайла.Значение);
					
					ЭлементОписаниеСведений = ЧтениеЗИП.Элементы.Найти(ИмяФайлаОписанияОшибочногоПакета);
					Если ЭлементОписаниеСведений <> Неопределено Тогда
						
						ЧтениеЗИП.Извлечь(ЭлементОписаниеСведений, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
						
						// распаковываем
						ПолноеИмяФайлаДокумента = РазархивироватьФайл(КаталогРаспаковки + ИмяФайлаОписанияОшибочногоПакета);
						Если ПолноеИмяФайлаДокумента <> Неопределено Тогда
						
							// читаем XML
							ТекстXML = ПрочитатьТекстИзФайла(ПолноеИмяФайлаДокумента, , Истина);
							Если ЗначениеЗаполнено(ТекстXML) Тогда
								
								// загружаем XML в дерево
								ДеревоЗначенийИзСтрокиXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML);
								
								// подменяем дерево описания сведений
								Если ДеревоЗначенийИзСтрокиXML <> Неопределено Тогда
									ДеревоXML = ДеревоЗначенийИзСтрокиXML;
								КонецЕсли;
								
							КонецЕсли;
							
							ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ПолноеИмяФайлаДокумента);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// закрываем архив и удаляем временный файл контейнера
	ЧтениеЗИП.Закрыть();
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаКонтейнера);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогРаспаковки);
	
	// ищем атрибут "идентификаторДокументооборота"
	Узлы_идентификаторДокументооборота = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "идентификаторДокументооборота", "А"), Истина);
	Если Узлы_идентификаторДокументооборота.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// возвращаем первое найденное значение атрибута
	Возврат СокрЛП(Узлы_идентификаторДокументооборота[0].Значение);
	
КонецФункции

// есть и в модуле и в Контейнере
Функция РазархивироватьФайл(ИмяФайлаАрхива, ИмяРаспакованногоФайла = Неопределено)
	
	Попытка
		ОбъектЧтение = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
		Если ОбъектЧтение.Элементы.Количество() = 0 Тогда
			ОбъектЧтение.Закрыть();
			Возврат Неопределено;
		КонецЕсли;
		
		КаталогРаспаковки = ПолучитьИмяВременногоФайла() + ПолучитьРазделительПути();
		СоздатьКаталог(КаталогРаспаковки);
		ИмяФайлаИзАрхива = ОбъектЧтение.Элементы[0].Имя;
		
		ОбъектЧтение.Извлечь(ОбъектЧтение.Элементы[0], КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ОбъектЧтение.Закрыть();
		
		Если ИмяРаспакованногоФайла = Неопределено Тогда
			Возврат КаталогРаспаковки + ИмяФайлаИзАрхива;
		Иначе
			ПереместитьФайл(КаталогРаспаковки + ИмяФайлаИзАрхива, ИмяРаспакованногоФайла);
			Возврат ИмяРаспакованногоФайла;
		КонецЕсли;
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка распаковки архива: %1'"), Символы.ПС + ИнформацияОбОшибке().Описание);
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьПолучателяВходящегоТранспортногоСообщения(Объект, ИгнорироватьЦиклОбмена = Ложь) Экспорт
	
	Если НЕ ИгнорироватьЦиклОбмена И ЗначениеЗаполнено(Объект.ЦиклОбмена) И Объект.Статус = Перечисления.СтатусыПисем.Полученное Тогда
		Возврат Объект.ЦиклОбмена.Организация;
	КонецЕсли;
	
	Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР 
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР Тогда
		
		Результат = ОпределитьПолучателяВходящегоСообщенияПФР(Объект);
		Если Результат <> Неопределено И Результат <> Справочники.Организации.ПустаяСсылка() Тогда
			Возврат Результат;
		КонецЕсли;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС Тогда
		
		Возврат ОпределитьПолучателяВходящегоСообщенияФСГС(Объект);
		
	КонецЕсли;
	
	// если нет возможности определить получателя по циклу обмена, то определим его по учетной записи
	// если с учетной записью сообщения связана головная организация, то считаем, что получатель - она
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.УчетнаяЗаписьОбмена = &УчетнаяЗаписьОбмена
	                      |	И Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
	                      |	И Организации.ГоловнаяОрганизация = &ПустаяГоловнаяОрганизация
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.УчетнаяЗаписьОбмена = &УчетнаяЗаписьОбмена
	                      |	И Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
	                      |	И Организации.ГоловнаяОрганизация <> &ПустаяГоловнаяОрганизация");
	Запрос.УстановитьПараметр("УчетнаяЗаписьОбмена", Объект.УчетнаяЗапись);
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("ПустаяГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	МассивОрганизаций = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			МассивОрганизаций.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивОрганизаций.Количество() = 1 Тогда
		Возврат МассивОрганизаций[0];
		
	ИначеЕсли МассивОрганизаций.Количество() = 0 Тогда
		Возврат Неопределено;
		
	Иначе
		ИННКППОтчета = Неопределено;
		Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ДокументНО Тогда
			ИнформацияОФайлеОтчета = ПолучитьВложенияТранспортногоСообщения(
				Объект,
				Истина,
				Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Документ);
			
			Если ИнформацияОФайлеОтчета.Количество() > 0 Тогда
				ДвоичныеДанныеОтчета = ИнформацияОФайлеОтчета[0].Данные.Получить();
				ИННКППОтчета = ИННКПППолучателяТребования(ИнформацияОФайлеОтчета[0].ИмяФайла, ДвоичныеДанныеОтчета);
				
			Иначе
				ИмяФайлаОтчета = ИзвлечьИмяФайлаОтчетаИзПакета(Объект, "ON_DOCNPNO_");
				Если НЕ ЗначениеЗаполнено(ИмяФайлаОтчета) Тогда
					ИмяФайлаОтчета = ИзвлечьИмяФайлаОтчетаИзПакета(Объект, "ON_INFSOOB_");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИмяФайлаОтчета) Тогда
					ИННКППОтчета = ИННКПППолучателяТребования(ИмяФайлаОтчета);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИННКППОтчета) Тогда
			Для каждого ОрганизацияСсылка Из МассивОрганизаций Цикл
				Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(ОрганизацияСсылка) Тогда
					СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(ОрганизацияСсылка, , "ИННФЛ");
					ИННКППОрганизации = СокрЛП(СведенияОбОрганизации.ИННФЛ);
				Иначе
					СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(ОрганизацияСсылка, , "ИННЮЛ, КППЮЛ");
					ИННКППОрганизации = СокрЛП(СведенияОбОрганизации.ИННЮЛ) + СокрЛП(СведенияОбОрганизации.КППЮЛ);
				КонецЕсли;
				
				Если ИННКППОрганизации = ИННКППОтчета Тогда
					Возврат ОрганизацияСсылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОрганизацияПоУмолчанию = Неопределено;
		Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
			ОрганизацияПоУмолчанию = Модуль.ОрганизацияПоУмолчанию();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
			ОрганизацияПоУмолчанию = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
			Для каждого ОрганизацияСсылка Из МассивОрганизаций Цикл
				Если ОрганизацияСсылка = ОрганизацияПоУмолчанию Тогда
					Возврат ОрганизацияСсылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Возврат МассивОрганизаций[0];
	КонецЕсли;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьПолучателяВходящегоСообщенияПФР(ОбъектСообщение)
	
	// сначала пробуем определить получателя из пакета
	ПолучательИзПакета = ОпределитьПолучателяВходящегоСообщенияПоОписаниюПакетаПФР(ОбъектСообщение);
	Если ЗначениеЗаполнено(ПолучательИзПакета) Тогда
		Возврат ПолучательИзПакета;
	КонецЕсли;
	
	// если по пакету получателя определить не удалось,
	// то пробуем получить из свойств цикла обмена
	ЦиклОбмена = ОбъектСообщение.ЦиклОбмена;
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
		ОрганизацияЦиклаОбмена = ЦиклОбмена.Организация;
		Если ЗначениеЗаполнено(ОрганизацияЦиклаОбмена) Тогда
			Возврат ОрганизацияЦиклаОбмена;
		КонецЕсли;
	КонецЕсли;
	
	// если не удалось определить получателя ни по пакету,
	// ни по родительскому циклу обмена, то возвращаем текущее значение
	Возврат ОбъектСообщение.Получатель;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьПолучателяВходящегоСообщенияПоОписаниюПакетаПФР(ОбъектСообщение) Экспорт
	
	// получаем дерево описания пакета
	ДеревоОписанияПакета = Неопределено;
	Если НЕ ОбъектСообщение.ДополнительныеСвойства.Свойство("ДеревоОписанияПакета", ДеревоОписанияПакета) Тогда
		ДеревоОписанияПакета = ЗагрузитьДеревоОписанияПакетаДляСообщения(ОбъектСообщение);
	КонецЕсли;
	
	// проверяем дерево на заполненность
	Если НЕ ЗначениеЗаполнено(ДеревоОписанияПакета) Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
		
	// ищем узел "получатель"
	УзлыПолучатель = ДеревоОписанияПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "получатель", "Э"), Истина);
	Если УзлыПолучатель.Количество() = 0 Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	УзелПолучатель = УзлыПолучатель[0];
	
	// ищем атрибут "идентификаторСубъекта"
	УзелИдентификаторСубъекта = УзелПолучатель.Строки.Найти("идентификаторСубъекта", "Имя");
	Если УзелИдентификаторСубъекта = Неопределено Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	РегистрационныйНомерПФР = СокрЛП(УзелИдентификаторСубъекта.Значение);
	
	// ищем по справочнику
	Возврат ОрганизацияПоРегНомеруИУчетнойЗаписи(РегистрационныйНомерПФР, ОбъектСообщение.УчетнаяЗапись);
	
КонецФункции

Функция ОрганизацияПоРегНомеруИУчетнойЗаписи(РегистрационныйНомерПФР, УчетнаяЗапись) Экспорт
	
	// ищем по справочнику
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка КАК Организация
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.УчетнаяЗаписьОбмена = &УчетнаяЗаписьОбмена
	                      |	И Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами");
						  
	Запрос.УстановитьПараметр("УчетнаяЗаписьОбмена", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Организация = Выборка.Организация;
			
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				Организация, , "РегНомПФР, РегНомПФРЗаСебя,");
				
			Если РегистрационныйНомерПФР = СведенияОбОрганизации.РегНомПФР
				ИЛИ РегистрационныйНомерПФР = СведенияОбОрганизации.РегНомПФРЗаСебя Тогда
				
				Возврат Организация;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

// есть в Контейнере
Функция ОпределитьПолучателяВходящегоСообщенияФСГС(ОбъектСообщение)
	
	// сначала пробуем определить получателя из пакета
	ПолучательИзПакета = ОпределитьПолучателяВходящегоСообщенияПоОписаниюПакетаФСГС(ОбъектСообщение);
	Если ЗначениеЗаполнено(ПолучательИзПакета) Тогда
		Возврат ПолучательИзПакета;
	КонецЕсли;
	
	// если по пакету получателя определить не удалось,
	// то пробуем получить из свойств цикла обмена
	ЦиклОбмена = ОбъектСообщение.ЦиклОбмена;
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
		ОрганизацияЦиклаОбмена = ЦиклОбмена.Организация;
		Если ЗначениеЗаполнено(ОрганизацияЦиклаОбмена) Тогда
			Возврат ОрганизацияЦиклаОбмена;
		КонецЕсли;
	КонецЕсли;
	
	// если не удалось определить получателя ни по пакету,
	// ни по родительскому циклу обмена, то возвращаем текущее значение
	Возврат ОбъектСообщение.Получатель;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьПолучателяВходящегоСообщенияПоОписаниюПакетаФСГС(ОбъектСообщение)
	
	// получаем дерево описания пакета
	ДеревоОписанияПакета = Неопределено;
	Если НЕ ОбъектСообщение.ДополнительныеСвойства.Свойство("ДеревоОписанияПакета", ДеревоОписанияПакета) Тогда
		ДеревоОписанияПакета = ЗагрузитьДеревоОписанияПакетаДляСообщения(ОбъектСообщение);
	КонецЕсли;
	
	// проверяем дерево на заполненность
	Если НЕ ЗначениеЗаполнено(ДеревоОписанияПакета) Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	// ищем узел "получатель"
	УзлыПолучатель = ДеревоОписанияПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "получатель", "Э"), Истина);
	Если УзлыПолучатель.Количество() = 0 Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	УзелПолучатель = УзлыПолучатель[0];
	
	// ищем атрибут "идентификаторСубъекта"
	УзелИдентификаторСубъекта = УзелПолучатель.Строки.Найти("идентификаторСубъекта", "Имя");
	Если УзелИдентификаторСубъекта = Неопределено Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	ИдентификаторПолучателя = СокрЛП(УзелИдентификаторСубъекта.Значение);
	КодПоОКПО = Сред(ИдентификаторПолучателя, СтрНайти(ИдентификаторПолучателя, ".") + 1);
	
	ИмяРеквКодПоОКПО = "КодПоОКПО";
	Если Метаданные.Справочники.Организации.Реквизиты.Найти("КодОКПО") <> Неопределено Тогда
		ИмяРеквКодПоОКПО = "КодОКПО";
	КонецЕсли;
	
	// ищем по справочнику
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации." + ИмяРеквКодПоОКПО + " = &КодПоОКПО
	                      |	И Организации.УчетнаяЗаписьОбмена = &УчетнаяЗаписьОбмена
	                      |	И Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами");
	Запрос.УстановитьПараметр("КодПоОКПО", КодПоОКПО);
	Запрос.УстановитьПараметр("УчетнаяЗаписьОбмена", ОбъектСообщение.УчетнаяЗапись);
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Получить(0);
	КонецЕсли;
	
КонецФункции

// есть в Контейнере
Функция ЗагрузитьДеревоОписанияПакетаДляСообщения(ОбъектСообщение)
	
	СообщениеСсылка = ОбъектСообщение.Ссылка;
	
	ТранспортныеКонтейнеры = ПолучитьТранспортныйКонтейнер(СообщениеСсылка, Истина);
	Если ТранспортныеКонтейнеры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТранспортныйКонтейнер = ТранспортныеКонтейнеры[0];
	
	// выгружаем пакет во временный файл
	КаталогРаспаковки = ОперацииСФайламиЭДКО.СоздатьВременныйКаталог();
	ИмяВременногоФайла = КаталогРаспаковки + ТранспортныйКонтейнер.ИмяФайла;
	Попытка
		ТранспортныйКонтейнер.Данные.Получить().Записать(ИмяВременногоФайла);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка выгрузки транспортного пакета во временный файл для анализа:
						|%1'"), ИнформацияОбОшибке().Описание);
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	// распаковываем файл описания сведений архива
	Попытка
		ЧтениеЗИП = Новый ЧтениеZipФайла(ИмяВременногоФайла);
	Исключение
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Неопределено;
	КонецПопытки;
	
	ИмяФайлаОписанияСведений = "packageDescription.xml";
	ЭлементОписаниеСведений = ЧтениеЗИП.Элементы.Найти(ИмяФайлаОписанияСведений);
	Если ЭлементОписаниеСведений = Неопределено Тогда
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеЗИП.Извлечь(ЭлементОписаниеСведений, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ЧтениеЗИП.Закрыть();
	
	// читаем XML
	ТекстXML = ПрочитатьТекстИзФайла(КаталогРаспаковки + ИмяФайлаОписанияСведений, , Истина);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогРаспаковки);
	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// загружаем XML в дерево
	ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// сохраняем дерево в свойствах объекта
	ОбъектСообщение.ДополнительныеСвойства.Вставить("ДеревоОписанияПакета", ДеревоXML);
	
	Возврат ДеревоXML;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьОтправителяВходящегоТранспортногоСообщенияФНС(ОбъектСообщение)
	
	// сначала пробуем определить отправителя из пакета
	ОтправительИзДокумент = ОпределитьОтправителяВходящегоТранспортногоСообщенияПоСвойствамПакетаФНС(ОбъектСообщение);
	Если ТипЗнч(ОтправительИзДокумент) = Тип("СправочникСсылка.НалоговыеОрганы") И ЗначениеЗаполнено(ОтправительИзДокумент) Тогда
		Возврат ОтправительИзДокумент;
	КонецЕсли;
	
	// если не удалось, то пробуем получить из свойств учетной записи
	Если НЕ ОбъектСообщение.УчетнаяЗапись.ОбменНапрямую Тогда
		Возврат ОбъектСообщение.УчетнаяЗапись.СерверДокументооборота;
	Иначе
		Возврат ОбъектСообщение.УчетнаяЗапись.НалоговыйОрган;	
	КонецЕсли;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьОтправителяВходящегоТранспортногоСообщенияПоСвойствамПакетаФНС(ОбъектСообщение)
	
	// получаем дерево описания пакета
	ДеревоОписанияПакета = Неопределено;
	Если НЕ ОбъектСообщение.ДополнительныеСвойства.Свойство("ДеревоОписанияПакета", ДеревоОписанияПакета) Тогда
		ДеревоОписанияПакета = ЗагрузитьДеревоОписанияПакетаДляСообщения(ОбъектСообщение);
	КонецЕсли;
	
	// проверяем дерево на заполненность
	Если НЕ ЗначениеЗаполнено(ДеревоОписанияПакета) Тогда
		Возврат Справочники.НалоговыеОрганы.ПустаяСсылка();
	КонецЕсли;
	
	// Берем код налогового органа из имени файла.
	// Для крупнейшего налогоплательщика код НО конечного (обособленного подразделения) и код НО промежуточного (основной НО) не совпадают.
	// ON_INFSOOB_7834_7811366337781101001_7811_20170921_77397713-accc-48b1-9cf7-b9272eb78db6
	
	КодОрганаФНС = "";
	
	Если ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ДокументНО Тогда
	
		УзлыДокумент = ДеревоОписанияПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "документ", "Э"), Истина);
		Для каждого УзелДокумент Из УзлыДокумент Цикл
			УзелИсходноеИмяФайла = УзелДокумент.Строки.Найти("исходноеИмяФайла", "Имя"); 
			
			Если УзелИсходноеИмяФайла <> Неопределено Тогда
				ИсходноеИмяФайла = УзелИсходноеИмяФайла.Значение;
				
				Если СтрНайти(ИсходноеИмяФайла, "ON_INFSOOB_") > 0
					ИЛИ СтрНайти(ИсходноеИмяФайла, "ON_DOCNPNO_") > 0 Тогда
					
					ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсходноеИмяФайла, "_", Истина, Истина);
					КодОрганаФНС = ЧастиИмениФайла[4];
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// ПисьмоНО или РассылкаНО
	Если ОбъектСообщение.Тип <> Перечисления.ТипыТранспортныхСообщений.ДокументНО ИЛИ КодОрганаФНС = "" Тогда
		
		// ищем узел "отправитель"
		УзлыОтправитель = ДеревоОписанияПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "отправитель", "Э"), Истина);
		Если УзлыОтправитель.Количество() = 0 Тогда
			Возврат Справочники.НалоговыеОрганы.ПустаяСсылка();
		КонецЕсли;
		УзелОтправитель = УзлыОтправитель[0];
		
		// ищем атрибут "идентификаторСубъекта"
		УзелИдентификаторСубъекта = УзелОтправитель.Строки.Найти("идентификаторСубъекта", "Имя");
		Если УзелИдентификаторСубъекта = Неопределено Тогда
			Возврат Справочники.НалоговыеОрганы.ПустаяСсылка();
		КонецЕсли;
		КодОрганаФНС = СокрЛП(УзелИдентификаторСубъекта.Значение);
		
	КонецЕсли;
	
	// ищем по справочнику
	РезультатПоиска = Справочники.НалоговыеОрганы.НайтиПоКоду(КодОрганаФНС);
	Возврат РезультатПоиска;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьОтправителяВходящегоТранспортногоСообщения(Объект)
	
	Если ЗначениеЗаполнено(Объект.Отправитель) Тогда
		Возврат Объект.Отправитель;
	ИначеЕсли Объект.Статус <> Перечисления.СтатусыПисем.Полученное Тогда
		Возврат Неопределено;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР Тогда
		Возврат ОпределитьОтправителяВходящегоТранспортногоСообщенияПФР(Объект);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС Тогда
		Возврат ОпределитьОтправителяВходящегоТранспортногоСообщенияФСГС(Объект);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РассылкаНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ДокументНО Тогда
		Возврат ОпределитьОтправителяВходящегоТранспортногоСообщенияФНС(Объект);
	ИначеЕсли НЕ Объект.УчетнаяЗапись.ОбменНапрямую Тогда
		Возврат Объект.УчетнаяЗапись.СерверДокументооборота;
	КонецЕсли;
	
	Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО Тогда
		ОтправительСообщения = Объект.УчетнаяЗапись.СерверДокументооборота;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПредставлениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО
	//заявление
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗаявлениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО
	
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО
	
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО	
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО Тогда
		ОтправительСообщения = Объект.УчетнаяЗапись.НалоговыйОрган;



	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка Тогда
		ОтправительСообщения = ОпределитьСерверДокументооборотаПоАдресуЭлектроннойПочты(Объект.ОтКогоАдрес);
		Если НЕ ЗначениеЗаполнено(ОтправительСообщения) Тогда
			ОтправительСообщения = ОпределитьНалоговыйОрганПоАдресуЭлектроннойПочты(Объект.ОтКогоАдрес);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтправительСообщения;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьНалоговыйОрганПоАдресуЭлектроннойПочты(АдресЭлектроннойПочты, ОпределитьСерверДокументооборотаПриНеобходимости = Истина) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	НалоговыеОрганы.Ссылка
	                      |ИЗ
	                      |	Справочник.НалоговыеОрганы КАК НалоговыеОрганы
	                      |ГДЕ
	                      |	НалоговыеОрганы.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками = &АдресЭлектроннойПочты");
	Запрос.УстановитьПараметр("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Если ОпределитьСерверДокументооборотаПриНеобходимости Тогда
		Возврат ОпределитьСерверДокументооборотаПоАдресуЭлектроннойПочты(АдресЭлектроннойПочты, Ложь);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьСерверДокументооборотаПоАдресуЭлектроннойПочты(АдресЭлектроннойПочты, ОпределитьНалоговыйОрганПриНеобходимости = Истина) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	СерверыДокументооборота.Ссылка
	                      |ИЗ
	                      |	Справочник.СерверыДокументооборота КАК СерверыДокументооборота
	                      |ГДЕ
	                      |	СерверыДокументооборота.АдресЭлектроннойПочтыФНС = &АдресЭлектроннойПочты
	                      |	ИЛИ СерверыДокументооборота.АдресЭлектроннойПочтыПФР = &АдресЭлектроннойПочты
	                      |	ИЛИ СерверыДокументооборота.АдресЭлектроннойПочтыФСГС = &АдресЭлектроннойПочты");
	Запрос.УстановитьПараметр("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Если ОпределитьНалоговыйОрганПриНеобходимости Тогда
		Возврат ОпределитьНалоговыйОрганПоАдресуЭлектроннойПочты(АдресЭлектроннойПочты, Ложь);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьОтправителяВходящегоТранспортногоСообщенияПФР(ОбъектСообщение)
	
	// сначала пробуем определить отправителя из пакета
	ОтправительИзПакета = ОпределитьОтправителяВходящегоТранспортногоСообщенияПоСвойствамПакетаПФР(ОбъектСообщение);
	Если ЗначениеЗаполнено(ОтправительИзПакета) Тогда
		Возврат ОтправительИзПакета;
	КонецЕсли;
	
	// если по пакету отправителя определить не удалось,
	// то пробуем получить из свойств цикла обмена
	ЦиклОбмена = ОбъектСообщение.ЦиклОбмена;
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
		ВнешняяОрганизация = ЦиклОбмена.ВнешняяОрганизация;
		Если ЗначениеЗаполнено(ВнешняяОрганизация) Тогда
			Возврат ВнешняяОрганизация;
		КонецЕсли;
	КонецЕсли;
	
	// если не удалось определить отправителя ни по пакету,
	// ни по родительскому циклу обмена, то возвращаем текущее значение
	Возврат ОбъектСообщение.Отправитель;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьОтправителяВходящегоТранспортногоСообщенияПоСвойствамПакетаПФР(ОбъектСообщение)
	
	// получаем дерево описания пакета
	ДеревоОписанияПакета = Неопределено;
	Если НЕ ОбъектСообщение.ДополнительныеСвойства.Свойство("ДеревоОписанияПакета", ДеревоОписанияПакета) Тогда
		ДеревоОписанияПакета = ЗагрузитьДеревоОписанияПакетаДляСообщения(ОбъектСообщение);
	КонецЕсли;
	
	// проверяем дерево на заполненность
	Если НЕ ЗначениеЗаполнено(ДеревоОписанияПакета) Тогда
		Возврат Справочники.ОрганыПФР.ПустаяСсылка();
	КонецЕсли;
	
	// ищем узел "отправитель"
	УзлыОтправитель = ДеревоОписанияПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "отправитель", "Э"), Истина);
	Если УзлыОтправитель.Количество() = 0 Тогда
		Возврат Справочники.ОрганыПФР.ПустаяСсылка();
	КонецЕсли;
	УзелОтправитель = УзлыОтправитель[0];
	
	// ищем атрибут "идентификаторСубъекта"
	УзелИдентификаторСубъекта = УзелОтправитель.Строки.Найти("идентификаторСубъекта", "Имя");
	Если УзелИдентификаторСубъекта = Неопределено Тогда
		Возврат Справочники.ОрганыПФР.ПустаяСсылка();
	КонецЕсли;
	КодОрганаПФР = СокрЛП(УзелИдентификаторСубъекта.Значение);
	
	// ищем по справочнику
	РезультатПоиска = Справочники.ОрганыПФР.НайтиПоКоду(КодОрганаПФР);
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	// пробуем определить отправителя по циклу обмена
	ЦиклОбмена = ОбъектСообщение.ЦиклОбмена;
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат ЦиклОбмена.ВнешняяОрганизация;
	Иначе
		Возврат ОбъектСообщение.Отправитель;
	КонецЕсли;
	
КонецФункции

// есть в Контейнере
Функция ЯвляетсяОтрицательнымПротоколом(Объект) Экспорт
	
	Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО Тогда
		КлючВТеме = "ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаДекларацияНО";
		Возврат ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТеме))) = ВРЕГ(КлючВТеме);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО Тогда
		КлючВТеме = "ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаОбращениеНО";
		Возврат ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТеме))) = ВРЕГ(КлючВТеме);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО Тогда
		КлючВТеме = "ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаПредставлениеНО";
		Возврат ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТеме))) = ВРЕГ(КлючВТеме);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО Тогда
		КлючВТеме = "ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаЗаявлениеНО";
		Возврат ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТеме))) = ВРЕГ(КлючВТеме);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО Тогда
		Возврат СообщениеОПроверкеЯвляетсяОтрицательным(Объект);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО 
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО Тогда
		Возврат Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО Тогда
		КлючВТеме = "ФНС:1.0-уведомлениеОбОтказеОтметки-РезультатОбработкиЗаявлениеНО";
		Возврат ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТеме))) = ВРЕГ(КлючВТеме);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО Тогда
		КлючВТеме = "ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаЗапросНО";
		Возврат ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТеме))) = ВРЕГ(КлючВТеме);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО Тогда
		КлючВТеме = "ФНС:1.0-уведомлениеОбУточнении-РезультатОбработкиДекларацияНО";
		Возврат ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТеме))) = ВРЕГ(КлючВТеме);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН Тогда
		КлючВТеме = "ФАЙЛ НЕ ПРИНЯТ";
		Возврат ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТеме))) = КлючВТеме;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО Тогда
		Возврат Протокол2НДФЛЯвляетсяОтрицательным(Объект);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН Тогда
		Возврат ОтветНаЗапросИОНЯвляетсяОтрицательным(Объект);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР Тогда
		Возврат ОтветНаЗапросИОСЯвляетсяОтрицательным(Объект);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР Тогда
		Возврат ПодтверждениеПолученияОтчетностиПФРЯвляетсяОтрицательным(Объект);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР Тогда
		
		КлючВТемеОтрицательный = "Pension-Protocol-N";
		КлючВТемеПоложительный = "Pension-Protocol-P";
		
		Если ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТемеОтрицательный))) = ВРЕГ(КлючВТемеОтрицательный) Тогда
			Возврат Истина;
		ИначеЕсли ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТемеПоложительный))) = ВРЕГ(КлючВТемеПоложительный) Тогда
			Возврат ПротоколПФРЯвляетсяОтрицательным(Объект, Ложь);
		Иначе
			Возврат ПротоколПФРЯвляетсяОтрицательным(Объект);
		КонецЕсли;	
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС Тогда
		
		Возврат ПротоколФСГСЯвляетсяОтрицательным(Объект);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросаНаВыпискуЕРГЮЛ_ЕГРИП Тогда
		Возврат ВРЕГ(Объект.Тема) = ВРЕГ("СОС:1.0-уведомлениеОбОтказе-РезультатПриемаЗапрос");
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОтветНаЗапросИОНЯвляетсяОтрицательным(Объект)
	
	// ищем ответ на запрос среди содержимого сообщения
	ОтветыНаЗапросыИОН = ПолучитьВложенияТранспортногоСообщения(Объект.Ссылка, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросИОН);
	ЧислоОтветов = ОтветыНаЗапросыИОН.Количество();
	Если ЧислоОтветов = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// ищем отказ
	ПрефиксИмениФайлаОтказа = "NO_NP";
	Для Каждого ОтветНаЗапросИОН Из ОтветыНаЗапросыИОН Цикл
		Если Лев(ОтветНаЗапросИОН.ИмяФайла, СтрДлина(ПрефиксИмениФайлаОтказа)) = ПрефиксИмениФайлаОтказа Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция Протокол2НДФЛЯвляетсяОтрицательным(Объект)
	
	// ищем протокол 2-НДФЛ среди содержимого сообщения
	Протоколы2НДФЛ = ПолучитьВложенияТранспортногоСообщения(Объект.Ссылка, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ);
	КоличествоПротоколов = Протоколы2НДФЛ.Количество();
	Если КоличествоПротоколов = 0 Тогда
		Возврат Ложь;
	Иначе
		Протокол2НДФЛ = Протоколы2НДФЛ[0];
	КонецЕсли;
	
	// загружаем протокол из файла в строку
	ТекстОшибки = "";
	ТекстПротокола = ТекстИзФайлаВСтроку(Протокол2НДФЛ, ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(ТекстПротокола) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстПротокола = ВРег(ТекстПротокола);
				
	ЕстьФайлНеПринят = СтрНайти(ТекстПротокола, "ФАЙЛ НЕ ПРИНЯТ") > 0;
			
	Возврат ЕстьФайлНеПринят ИЛИ Отчет2НДФЛСданЧастично(Объект);
	
КонецФункции

Функция ТекстИзФайлаВСтроку(УведомлениеОбУточнении, ТекстИсключения = Неопределено)
	
	ДанныеУведомления = УведомлениеОбУточнении.Данные;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Попытка
		ДанныеУведомления.Получить().Записать(ИмяВременногоФайла);
	Исключение
		ТекстИсключения = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
	ОбъектЧтение = НовыйЧтениеТекстаНаСервере(ИмяВременногоФайла);
	ТекстУведомления = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ТекстУведомления;
	
КонецФункции

// есть в Контейнере
Функция ПротоколПФРЯвляетсяОтрицательным(Объект, ТребуетсяАнализПротокола = Истина)
	
	ЦиклОбмена = Объект.ЦиклОбмена;
	
	ВидОтчета = ?(ЗначениеЗаполнено(ЦиклОбмена), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЦиклОбмена, "ВидОтчета"), Неопределено);
	ТребуетсяАнализПриложений = (ВидОтчета = Справочники.ВидыОтправляемыхДокументов.СведенияОЗастрахованныхЛицахСЗВ_М
		ИЛИ ВидОтчета = Справочники.ВидыОтправляемыхДокументов.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ
		ИЛИ ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР
		ИЛИ ВидОтчета = Справочники.ВидыОтправляемыхДокументов.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ);
	
	Если НЕ ТребуетсяАнализПротокола И НЕ ТребуетсяАнализПриложений Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипыДИВ = Новый Массив;
	Если ТребуетсяАнализПротокола Тогда
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР);
	КонецЕсли;
	Если ТребуетсяАнализПриложений Тогда
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПриложениеПФР);
	КонецЕсли;
	
	// получаем протокол из базы
	ОбъектСсылка = Объект.Ссылка;
	ВложенияТранспортногоСообщения = ПолучитьВложенияТранспортногоСообщения(ОбъектСсылка, Истина, ТипыДИВ);
	
	Если ТребуетсяАнализПротокола Тогда
		Для каждого ВложениеТранспортногоСообщения Из ВложенияТранспортногоСообщения Цикл
			Если ВложениеТранспортногоСообщения.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР Тогда
	// выгружаем данные протокола во временный файл
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
					ВложениеТранспортногоСообщения.Данные.Получить().Записать(ИмяВременногоФайла);
	Исключение
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Не удалось выгрузить протокол во временный файл для анализа: %1'"),
																					Символы.ПС + ИнформацияОбОшибке().Описание);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	// загружаем XML из файла в память
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений(ИмяВременногоФайла);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
				Если ДеревоXML <> Неопределено Тогда
	// ищем атрибут, содержащий статус проверки протокола
	РезультатыПоиска = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "являетсяПоложительным", "Э"), Истина);
	
					Если РезультатыПоиска.Количество() > 0 Тогда
	// преобразовываем значение атрибута к Булево и возвращаем
	ЗначениеАтрибутаСтр = РезультатыПоиска[0].Значение;
	ЗначениеАтрибута = БулевоПоСтроке(ЗначениеАтрибутаСтр);
						Если ЗначениеАтрибута <> Неопределено И НЕ ЗначениеАтрибута Тогда
							Возврат Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТребуетсяАнализПриложений Тогда
		Возврат ОтчетПФРСданЧастично(Объект, ВложенияТранспортногоСообщения);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// есть в Контейнере
Функция ПротоколФСГСЯвляетсяОтрицательным(Объект)
	
	// получаем протокол из базы
	ОбъектСсылка = Объект.Ссылка;
	
	ТипыДИВ = Новый Массив;
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОПриемеВОбработкуОтчетаФСГС);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОНесоответствииФорматуОтчетаФСГС);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточненииОтчетаФСГС);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеОтчетаФСГС);

	СтрПротоколы = ПолучитьВложенияТранспортногоСообщения(ОбъектСсылка, Истина, ТипыДИВ);
	Если СтрПротоколы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// выгружаем данные протокола во временный файл
	СтрПротокол = СтрПротоколы[0];
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		СтрПротокол.Данные.Получить().Записать(ИмяВременногоФайла);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выгрузить протокол во временный файл для анализа'") + ":
				|" + ИнформацияОбОшибке().Описание);
		Возврат Неопределено;
	КонецПопытки;
	
	// считываем текст из файла уведомления
	Попытка
		ТекстПротокола = ПрочитатьТекстИзФайла(ИмяВременногоФайла, , Истина);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось прочитать текст протокола:%1'"),
																					Символы.ПС + ИнформацияОбОшибке().Описание);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Неопределено;
	КонецПопытки;
	
	// загружаем XML из строки в дерево
	ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстПротокола);
	
	Если ДеревоXML <> Неопределено Тогда
	
		УзелПротокол = ДеревоXML.Строки.Найти("protocol", "Имя");
		
		Если УзелПротокол <> Неопределено Тогда
			
			УзелСтатусПротокола = УзелПротокол.Строки.Найти("status", "Имя");
			СтатусПротокола = "";
			Если УзелСтатусПротокола <> Неопределено Тогда
				СтатусПротокола = XMLЗначение(Тип("Строка"), УзелСтатусПротокола.Значение);
			КонецЕсли;
			УзелСообщениеПротокола = УзелПротокол.Строки.Найти("msg", "Имя");
			СообщениеПротокола = "";
			Если УзелСообщениеПротокола <> Неопределено Тогда
				СообщениеПротокола = XMLЗначение(Тип("Строка"), УзелСообщениеПротокола.Значение);
			КонецЕсли;
			
			Если НРег(СтатусПротокола) = "ok"
				ИЛИ (НРег(СтатусПротокола) = "warnings"
				   И (СтрНайти(НРег(СообщениеПротокола), "ошибок не обнаружено") > 0
				    ИЛИ СтрНайти(НРег(СообщениеПротокола), "отчет принят") > 0
				    ИЛИ СтрНайти(НРег(СообщениеПротокола), "отчёт принят") > 0
				    ИЛИ СтрНайти(НРег(СообщениеПротокола), "обнаружены предупреждения") > 0
					ИЛИ СтрНайти(НРег(СообщениеПротокола), "содержит предупреждения") > 0
					)) Тогда
				Возврат Ложь;
			ИначеЕсли УзелПротокол.Строки.Найти("group", "Имя") <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	// Исключение из стандарта 456.
	// Требуется полное соответствие строке из внешнего файла
	Если СтрНайти(ВРег(ТекстПротокола), ВРег("Отчёт не принят")) > 0 ИЛИ СтрНайти(ВРег(ТекстПротокола), ВРег("Отчет не принят")) > 0 Тогда
	
		Возврат Истина;
	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// есть в Контейнере
Функция БулевоПоСтроке(СтрБулево)
	
	Попытка
		Возврат XMLЗначение(Тип("Булево"), СокрЛП(СтрБулево));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// есть и в модуле и в Контейнере
Функция ПодтверждениеПолученияОтчетностиПФРЯвляетсяОтрицательным(Объект)
	
	// получаем протокол из базы
	ОбъектСсылка = Объект.Ссылка;
	СтрПодтвержденияПолучения = ПолучитьВложенияТранспортногоСообщения(ОбъектСсылка, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияОтчетностиПФР);
	Если СтрПодтвержденияПолучения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// выгружаем данные протокола во временный файл
	СтрПодтверждениеПолучения = СтрПодтвержденияПолучения[0];
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		СтрПодтверждениеПолучения.Данные.Получить().Записать(ИмяВременногоФайла);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось выгрузить подтверждение получения отчетности ПФР во временный файл для анализа:%1'"),
																					Символы.ПС + ИнформацияОбОшибке().Описание);
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	// загружаем XML из файла в память
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений(ИмяВременногоФайла);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	Если ДеревоXML = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// ищем атрибут, содержащий статус проверки протокола
	РезультатыПоиска = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "отчетПредставлен", "Э"), Истина);
	Если РезультатыПоиска.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// преобразовываем значение атрибута к Булево и возвращаем
	ЗначениеАтрибутаСтр = РезультатыПоиска[0].Значение;
	ЗначениеАтрибута = БулевоПоСтроке(ЗначениеАтрибутаСтр);
	Если ЗначениеАтрибута <> Неопределено Тогда
		Возврат НЕ ЗначениеАтрибута;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СообщениеОПроверкеЯвляетсяОтрицательным(Объект)
	
	// получаем сообщение о проверке из базы
	ОбъектСсылка = Объект.Ссылка;
	СтрСообщения = ПолучитьВложенияТранспортногоСообщения(ОбъектСсылка, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПроверке);
	Если СтрСообщения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// выгружаем данные протокола во временный файл
	СтрСообщениеОПроверке = СтрСообщения[0];
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		СтрСообщениеОПроверке.Данные.Получить().Записать(ИмяВременногоФайла);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось выгрузить сообщение о проверке во временный файл для анализа:%1'"),
		Символы.ПС + ИнформацияОбОшибке().Описание);
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения);
		
		Возврат Неопределено;
	КонецПопытки;
	
	// загружаем XML из файла в память
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений(ИмяВременногоФайла);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	Если ДеревоXML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// ищем атрибут, содержащий статус проверки протокола
	РезультатыПоиска = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя", "Отметка"), Истина);
	Если РезультатыПоиска.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось получить отметку о проверке заявления'");
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	// преобразовываем значение атрибута к Булево и возвращаем
	ЗначениеОтметки = СокрЛП(РезультатыПоиска[0].Значение);
	Если ЗначениеОтметки = "1" ИЛИ ЗначениеОтметки = "2" Тогда
		Возврат Ложь;
	ИначеЕсли ЗначениеОтметки = "3" Тогда
		Возврат Истина;
	Иначе 
		ТекстСообщения = НСтр("ru = 'Некорректное значение отметки о проверке заявления'");
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьТипСообщения(Сообщение, ВложенияЕсть = Истина) Экспорт
	
	// получаем значения дополнительных реквизитов заголовка
	Отправитель = "";
	СтрокаОтправитель = Сообщение.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя, "Тип");
	Если СтрокаОтправитель <> Неопределено Тогда
		Отправитель = СтрокаОтправитель.Значение;
	КонецЕсли;
	
	Получатель = "";
	СтрокаПолучатель = Сообщение.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя, "Тип");
	Если СтрокаПолучатель <> Неопределено Тогда
		Получатель = СтрокаПолучатель.Значение;
	КонецЕсли;
	
	ИмяПередающейСистемы = "";
	СтрокаИмяПередающейСистемы = Сообщение.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы, "Тип");
	Если СтрокаИмяПередающейСистемы <> Неопределено Тогда
		ИмяПередающейСистемы = СтрокаИмяПередающейСистемы.Значение;
	КонецЕсли;
	
	ТипПередаваемойИнформации = "";
	СтрокаТипПередаваемойИнформации = Сообщение.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации, "Тип");
	Если СтрокаТипПередаваемойИнформации <> Неопределено Тогда
		ТипПередаваемойИнформации = СтрокаТипПередаваемойИнформации.Значение;
	КонецЕсли;
	
	ИдентификаторПервичногоСообщения = "";
	СтрокаИдентификаторПервичногоСообщения = Сообщение.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения, "Тип");
	Если СтрокаИдентификаторПервичногоСообщения <> Неопределено Тогда
		ИдентификаторПервичногоСообщения = СтрокаИдентификаторПервичногоСообщения.Значение;
	КонецЕсли;
	
	Если ЧислоКонтейнеровСообщения(Сообщение) = 0 И ЗначениеЗаполнено(ИдентификаторПервичногоСообщения) Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка;
	КонецЕсли;
	
	Тема = Сообщение.Тема;
	ВРЕГСокрЛПТема = ВРЕГ(СокрЛП(Тема));
	
	// обход ситуации, когда тема модифицируется антиспам-фильтром
	Если Лев(ВРЕГСокрЛПТема, 5) = "[SPAM" Тогда
		ВхождениеЗакрывающейСкобки = СтрНайти(ВРЕГСокрЛПТема, "]");
		Если ВхождениеЗакрывающейСкобки <> 0 Тогда
			ВРЕГСокрЛПТема = СокрЛП(Сред(ВРЕГСокрЛПТема, ВхождениеЗакрывающейСкобки + 1));
		КонецЕсли;
	Конецесли;
	
	// ФНС 534
	Если ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеДекларацияНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеДекларацияСОС") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-извещениеОПолучении-ИзвещениеДекларацияНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаДекларацияНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-квитанцияОПриеме-РезультатПриемаДекларацияНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-уведомлениеОбУточнении-РезультатОбработкиДекларацияНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-извещениеОВводе-РезультатОбработкиДекларацияНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-сообщениеОбОшибке-СообщениеОбОшибке") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеОтправкиСОС") Тогда
		Если ЗначениеЗаполнено(ИдентификаторПервичногоСообщения) Тогда
			ЦиклОбменаСообщения = НайтиЦиклОбменаПоИдентификатору(ИдентификаторПервичногоСообщения);
			Если ЗначениеЗаполнено(ЦиклОбменаСообщения) Тогда
				Если ЦиклОбменаСообщения.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
					Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО;
				ИначеЕсли ЦиклОбменаСообщения.Тип = Перечисления.ТипыЦикловОбмена.Заявление Тогда
					Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО;
				ИначеЕсли ЦиклОбменаСообщения.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
					Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО;
				ИначеЕсли ЦиклОбменаСообщения.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
					Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО;
				ИначеЕсли ЦиклОбменаСообщения.Тип = Перечисления.ТипыЦикловОбмена.Представление Тогда
					Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО;
				ИначеЕсли ЦиклОбменаСообщения.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
					Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО;
				КонецЕсли;
			Иначе
				Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО;
			КонецЕсли;
		Иначе
			Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО;
		КонецЕсли;

	// ФНС 534 ДРП НО
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-документ-ДокументНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ДокументНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатПриемаНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНО;
		
	//Заявление
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеЗаявлениеНО") 
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеЗаявлениеСОС") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-извещениеОПолучении-ИзвещениеЗаявлениеНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗаявлениеНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаЗаявлениеНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-квитанцияОПриеме-РезультатПриемаЗаявлениеНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-сообщениеОПроверке-РезультатОбработкиЗаявлениеРФНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-сообщениеОбОтзывеЗаявления-СообщениеОбОтзывеЗаявлениеРФНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-сообщениеОНесоответствиях-РезультатОбработкиЗаявлениеТСНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО;
		
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-сообщениеОПростОтметки-РезультатОбработкиЗаявлениеНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-уведомлениеОбОтказеОтметки-РезультатОбработкиЗаявлениеНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО;
		
	//Запрос на выписку из ЕГР(ЮЛ\ИП)
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("СОС:1.0-уведомлениеОбОтказе-РезультатПриемаЗапрос") ИЛИ
		ВРЕГСокрЛПТема = ВРЕГ("СОС:1.0-ответ-РезультатОбработкиЗапрос") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросаНаВыпискуЕРГЮЛ_ЕГРИП;
		
	// ФНС 534 2-НДФЛ
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеФорма2НДФЛНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-извещениеОПолучении-ИзвещениеФорма2НДФЛНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-протоколПриема2НДФЛ-РезультатПриемаФорма2НДФЛНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО;
		
	// ФНС 534 НФД НП
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеОбращениеНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеОбращениеСОС")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыПолучения-ПодтверждениеОбращениеНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыПолучения-ПодтверждениеОбращениеСОС") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-извещениеОПолучении-ИзвещениеОбращениеНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаОбращениеНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО;
		
	// ФНС 534 Представление
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеПредставлениеНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеПредставлениеСОС")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыПолучения-ПодтверждениеПредставлениеНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыПолучения-ПодтверждениеПредставлениеСОС") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-извещениеОПолучении-ИзвещениеПредставлениеНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеПредставлениеНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаПредставлениеНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-квитанцияОПриеме-РезультатПриемаПредставлениеНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО;
		
	// ФНС 534 НФД НО
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-письмо-ПисьмоНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-рассылка-РассылкаНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РассылкаНО;
		
	// ФНС 534 ИОН
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыПолучения-ПодтверждениеЗапросНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыПолучения-ПодтверждениеЗапросСОС")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеЗапросНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеЗапросСОС") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-извещениеОПолучении-ИзвещениеЗапросНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаЗапросНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-квитанцияОПриеме-РезультатПриемаЗапросНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-ответ-РезультатОбработкиЗапросНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО;
	// Росстат через Такском, Калуга-Астрал и др.
	ИначеЕсли СтрНайти(ВРЕГСокрЛПТема, ВРЕГ("Stat-Confirmation")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС;
	ИначеЕсли СтрНайти(ВРЕГСокрЛПТема, ВРЕГ("ReSign: Stat-Unformal")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС;
	ИначеЕсли СтрНайти(ВРЕГСокрЛПТема, ВРЕГ("ReSign: Stat")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС;
	ИначеЕсли СтрНайти(ВРЕГСокрЛПТема, ВРЕГ("Stat-Error-Notification")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС;
	ИначеЕсли СтрНайти(ВРЕГСокрЛПТема, ВРЕГ("Stat-Unformal")) <> 0 Тогда
		ДеревоОписанияПакета = Неопределено;
		Если НЕ Сообщение.ДополнительныеСвойства.Свойство("ДеревоОписанияПакета", ДеревоОписанияПакета) Тогда
			ДеревоОписанияПакета = ЗагрузитьДеревоОписанияПакетаДляСообщения(Сообщение);
			Сообщение.ДополнительныеСвойства.Вставить("ДеревоОписанияПакета", ДеревоОписанияПакета);
		КонецЕсли;
		
		Если ДеревоОписанияПакета <> Неопределено Тогда
			ТипСообщения = ОпределитьТипСообщенияПоДеревуОписанияПакета(ДеревоОписанияПакета);
		КонецЕсли;
		
		Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС Тогда 
			Возврат Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС;
		КонецЕсли;
		
		Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС;
	ИначеЕсли СтрНайти(ВРЕГСокрЛПТема, ВРЕГ("Stat-Protocol")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС;
	// ПФР через Такском
	ИначеЕсли СтрНайти(ВРЕГСокрЛПТема, ВРЕГ("ReSign: Pension-Unformal")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР;
	ИначеЕсли СтрНайти(ВРЕГСокрЛПТема, ВРЕГ("ReSign: Pension-Request")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР;
	ИначеЕсли СтрНайти(ВРЕГСокрЛПТема, ВРЕГ("ReSign: Pension")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР;
	ИначеЕсли СтрНайти(ВРЕГСокрЛПТема, ВРЕГ("Pension-Error-Notification")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР;
	ИначеЕсли СтрНайти(ВРЕГСокрЛПТема, ВРЕГ("Pension-Unformal")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР;
	ИначеЕсли СтрНайти(ВРЕГСокрЛПТема, ВРЕГ("Pension-Protocol-")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПротоколПФР;
	ИначеЕсли СтрНайти(ВРЕГСокрЛПТема, ВРЕГ("Pension-Reply")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР;
		
	// ПФР через прочих
	Иначе
		
		// считываем с кэшированием
		ДеревоОписанияПакета = Неопределено;
		Если НЕ Сообщение.ДополнительныеСвойства.Свойство("ДеревоОписанияПакета", ДеревоОписанияПакета) Тогда
			ДеревоОписанияПакета = ЗагрузитьДеревоОписанияПакетаДляСообщения(Сообщение);
			Сообщение.ДополнительныеСвойства.Вставить("ДеревоОписанияПакета", ДеревоОписанияПакета);
		КонецЕсли;
		
		// определяем тип сообщения
		ТипСообщения = Неопределено;
		Если ДеревоОписанияПакета <> Неопределено Тогда
			ТипСообщения = ОпределитьТипСообщенияПоДеревуОписанияПакета(ДеревоОписанияПакета);
		КонецЕсли;
		
		// если тип определить не удалось, то устанавливаем тип Прочее
		Если ТипСообщения = Неопределено Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.Прочее;
		Иначе
			Возврат ТипСообщения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// есть в Контейнере
// Только для ПФР. Для ФНС определение производится по теме сообщения.
// 
Функция ОпределитьТипСообщенияПоДеревуОписанияПакета(ДеревоОписанияПакета)
	
	// ищем ключевые узлы
	УзлыТипДокументооборота = ДеревоОписанияПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "типДокументооборота", "А"), Истина);
	УзлыТипТранзакции = ДеревоОписанияПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "типТранзакции", "А"), Истина);
	Если УзлыТипДокументооборота.Количество() = 0 ИЛИ УзлыТипТранзакции.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелТипДокументооборота = УзлыТипДокументооборота[0];
	УзелТипТранзакции = УзлыТипТранзакции[0];
	
	// получаем значения узлов
	ТипДокументооборота = СокрЛП(УзелТипДокументооборота.Значение);
	ТипТранзакции = СокрЛП(УзелТипТранзакции.Значение);
	
	ЭтоФорматФСГС = Ложь;
	УзлыВерсияФормата = ДеревоОписанияПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "версияФормата", "А"), Истина);
	Если УзлыВерсияФормата.Количество() > 0 Тогда
		ВерсияФормата = СокрЛП(УзлыТипТранзакции[0].Значение);
		Если СтрНайти(ВРЕГ(ВерсияФормата), "СТАТ") > 0 Тогда
			ЭтоФорматФСГС = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	// анализируем значения
	Если ТипДокументооборота = "СведенияПФР" Тогда
		Если ТипТранзакции = "сведения" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР;
		ИначеЕсли ТипТранзакции = "подтверждениеПолучения" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР;
		ИначеЕсли ТипТранзакции = "протокол" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПротоколПФР;
		ИначеЕсли ТипТранзакции = "протоколКвитанция" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР;
		КонецЕсли;
	ИначеЕсли ТипДокументооборота = "УточнениеПлатежей" Тогда
		Если ТипТранзакции = "запрос" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР;
		ИначеЕсли ТипТранзакции = "ответКвитанция" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР;
		ИначеЕсли ТипТранзакции = "ответ" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР;
		ИначеЕсли ТипТранзакции = "запросКвитанция" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР;
		КонецЕсли;
	ИначеЕсли ТипДокументооборота = "Письмо" Тогда
		Если ТипТранзакции = "письмо" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР;
		ИначеЕсли ТипТранзакции = "письмоКвитанция" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР;
		КонецЕсли;
	ИначеЕсли ТипДокументооборота = "ОшибкаОбработкиПакета" И НЕ ЭтоФорматФСГС Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР;
	ИначеЕсли ТипДокументооборота = "отчетСтат" Тогда
		Если ТипТранзакции = "отчет" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС;
		ИначеЕсли ТипТранзакции = "отчетИзвещение" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС;
		ИначеЕсли ТипТранзакции = "протокол" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС;
		ИначеЕсли ТипТранзакции = "протоколИзвещение" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС;
		ИначеЕсли ТипТранзакции = "подтверждениеОператора" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС;
		ИначеЕсли ТипТранзакции = "подтверждениеКвитанция" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС;
		КонецЕсли;
	ИначеЕсли ТипДокументооборота = "письмоОрганФСГС" Тогда
		Если ТипТранзакции = "письмо" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС;
		ИначеЕсли ТипТранзакции = "извещение" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС;
		КонецЕсли;
	ИначеЕсли ТипДокументооборота = "письмоРеспондент" И ЭтоФорматФСГС Тогда
		Если ТипТранзакции = "письмо" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС;
		ИначеЕсли ТипТранзакции = "извещение" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС;
		ИначеЕсли ТипТранзакции = "подтверждениеОператора" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС;
		ИначеЕсли ТипТранзакции = "подтверждениеКвитанция" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС;
		КонецЕсли;
	ИначеЕсли ТипДокументооборота = "ОшибкаОбработкиПакета" Тогда
		Если ТипТранзакции = "уведомлениеОбОшибке" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС;
		КонецЕсли; 
	ИначеЕсли ТипДокументооборота = "рассылка" Тогда
		Если ТипТранзакции = "рассылка" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// есть в Контейнере
Функция ЧислоКонтейнеровСообщения(Сообщение)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	КОЛИЧЕСТВО(Истина) КАК ЧислоСообщений
						  |ИЗ
						  |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
						  |ГДЕ
						  |	ТранспортныеКонтейнеры.ТранспортноеСообщение = &ТранспортноеСообщение");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", ?(Сообщение.ЭтоНовый(), Сообщение.ПолучитьСсылкуНового(), Сообщение.Ссылка));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Выборка.ЧислоСообщений), Выборка.ЧислоСообщений, 0);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// есть в Контейнере
Функция ДобавитьТранспортныйКонтейнер(ТранспортноеСообщение, Данные, ИмяФайла, Размер = Неопределено) Экспорт
	
	Если Размер = Неопределено Тогда
		Размер = ОпределитьРазмер(Данные);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	МенеджерЗаписи = РегистрыСведений.ТранспортныеКонтейнеры.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТранспортноеСообщение = ТранспортноеСообщение;
	МенеджерЗаписи.ИмяФайла = ИмяФайла;
	МенеджерЗаписи.Размер = Размер;
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("ХранилищеЗначения") Тогда
		ДвоичныеДанныеФайла = Данные.Получить();
	ИначеЕсли ТипДанных = Тип("Строка") Тогда
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Данные);
	Иначе // если двоичные данные
		ДвоичныеДанныеФайла = Данные;
	КонецЕсли;
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
	
	КомпонентыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
	УникальноеИмяФайлаБезРасширения = ОбщегоНазначенияЭДКОКлиентСервер.УникальнаяСтрока(КомпонентыИмениФайла.ИмяБезРасширения, 150);
	РасширениеФайлаБезТочки = Сред(КомпонентыИмениФайла.Расширение, 2);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", 						Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов", 				ТранспортноеСообщение);
	ПараметрыФайла.Вставить("ИмяБезРасширения", 			УникальноеИмяФайлаБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", 			РасширениеФайлаБезТочки);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	Неопределено);
	
	ИнформацияОбОбновляемомФайле = Новый Структура;
	ИнформацияОбОбновляемомФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	ИнформацияОбОбновляемомФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
	ИнформацияОбОбновляемомФайле.Вставить("ИмяБезРасширения", 				УникальноеИмяФайлаБезРасширения);
	ИнформацияОбОбновляемомФайле.Вставить("Расширение", 					РасширениеФайлаБезТочки);
	
	Попытка
		МенеджерЗаписи.Записать(Истина);
		
		МассивФайлов = ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(
			ТранспортноеСообщение,
			"ТранспортноеСообщениеКонтейнерыПрисоединенныеФайлы",
			ИмяФайла);
		
		Если МассивФайлов.Количество() > 0 Тогда
			ПрисоединенныйФайл = МассивФайлов[0];
			РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОбОбновляемомФайле);
			
		Иначе
			НоваяСсылкаНаФайл = РаботаСФайлами.НоваяСсылкаНаФайл(ТранспортноеСообщение, "ТранспортноеСообщениеКонтейнерыПрисоединенныеФайлы");
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла,,, НоваяСсылкаНаФайл);
		КонецЕсли;
		
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		
		ПрисоединенныйФайлОбъект.ИсходноеИмяФайла = ИмяФайла;
		
		ПрисоединенныйФайлОбъект.Записать();
	Исключение
		ОтменитьТранзакцию();
		УдалитьИзВременногоХранилища(АдресФайла);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сохранить в информационной базе транспортный контейнер сообщения %1!%2'"),
			Символ(34) + ТранспортноеСообщение.Ссылка + Символ(34),
			Символы.ПС + ИнформацияОбОшибке().Описание);
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	УдалитьИзВременногоХранилища(АдресФайла);
	Возврат Истина;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьОтправителяВходящегоТранспортногоСообщенияФСГС(ОбъектСообщение)
	
	// сначала пробуем определить отправителя из пакета
	ОтправительИзПакета = ОпределитьОтправителяВходящегоТранспортногоСообщенияПоСвойствамПакетаФСГС(ОбъектСообщение);
	Если ЗначениеЗаполнено(ОтправительИзПакета) Тогда
		Возврат ОтправительИзПакета;
	КонецЕсли;
	
	// если по пакету отправителя определить не удалось,
	// то пробуем получить из свойств цикла обмена
	ЦиклОбмена = ОбъектСообщение.ЦиклОбмена;
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
		ВнешняяОрганизация = ЦиклОбмена.ВнешняяОрганизация;
		Если ЗначениеЗаполнено(ВнешняяОрганизация) Тогда
			Возврат ВнешняяОрганизация;
		КонецЕсли;
	КонецЕсли;
	
	// если не удалось определить отправителя ни по пакету,
	// ни по родительскому циклу обмена, то возвращаем текущее значение
	Возврат ОбъектСообщение.Отправитель;
	
КонецФункции

// есть в Контейнере
Функция ОпределитьОтправителяВходящегоТранспортногоСообщенияПоСвойствамПакетаФСГС(ОбъектСообщение)
	
	// получаем дерево описания пакета
	ДеревоОписанияПакета = Неопределено;
	Если НЕ ОбъектСообщение.ДополнительныеСвойства.Свойство("ДеревоОписанияПакета", ДеревоОписанияПакета) Тогда
		ДеревоОписанияПакета = ЗагрузитьДеревоОписанияПакетаДляСообщения(ОбъектСообщение);
	КонецЕсли;
	
	// проверяем дерево на заполненность
	Если НЕ ЗначениеЗаполнено(ДеревоОписанияПакета) Тогда
		Возврат Справочники.ОрганыФСГС.ПустаяСсылка();
	КонецЕсли;
	
	// ищем узел "отправитель"
	УзлыОтправитель = ДеревоОписанияПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "отправитель", "Э"), Истина);
	Если УзлыОтправитель.Количество() = 0 Тогда
		Возврат Справочники.ОрганыФСГС.ПустаяСсылка();
	КонецЕсли;
	УзелОтправитель = УзлыОтправитель[0];
	
	// ищем атрибут "идентификаторСубъекта"
	УзелИдентификаторСубъекта = УзелОтправитель.Строки.Найти("идентификаторСубъекта", "Имя");
	Если УзелИдентификаторСубъекта = Неопределено Тогда
		Возврат Справочники.ОрганыФСГС.ПустаяСсылка();
	КонецЕсли;
	КодОрганаФСГС = СокрЛП(УзелИдентификаторСубъекта.Значение);
	
	// ищем по справочнику
	РезультатПоиска = Справочники.ОрганыФСГС.НайтиПоКоду(КодОрганаФСГС);
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	// пробуем определить отправителя по циклу обмена
	ЦиклОбмена = ОбъектСообщение.ЦиклОбмена;
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат ЦиклОбмена.ВнешняяОрганизация;
	Иначе
		Возврат ОбъектСообщение.Отправитель;
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Получение требований и представление документов в налоговые органы

Функция ПолучитьКоличествоОтветовНаТребования(Требования) Экспорт
	
	КоличествоОтветов = Новый Соответствие;
	
	Если ТипЗнч(Требования) = Тип("Массив") Тогда
		Для каждого Требование Из Требования Цикл
			КоличествоОтветов.Вставить(Требование, 0);
		КонецЦикла;
	Иначе
		КоличествоОтветов.Вставить(Требования, 0);
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОписиИсходящихДокументовВНалоговыеОрганы.Ссылка), 0) КАК КоличествоОтветов,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганы.Требование КАК Требование
	                      |ПОМЕСТИТЬ Ответы
	                      |ИЗ
	                      |	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы КАК ОписиИсходящихДокументовВНалоговыеОрганы
	                      |ГДЕ
	                      |	ОписиИсходящихДокументовВНалоговыеОрганы.Требование В(&Требования)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОписиИсходящихДокументовВНалоговыеОрганы.Требование
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоясненияКДекларацииПоНДС.Ссылка), 0),
	                      |	ПоясненияКДекларацииПоНДС.Требование
	                      |ИЗ
	                      |	Документ.ПоясненияКДекларацииПоНДС КАК ПоясненияКДекларацииПоНДС
	                      |ГДЕ
	                      |	ПоясненияКДекларацииПоНДС.Требование В(&Требования)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПоясненияКДекларацииПоНДС.Требование
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПерепискаСКонтролирующимиОрганами.Ссылка), 0),
	                      |	ПерепискаСКонтролирующимиОрганами.Требование
	                      |ИЗ
	                      |	Справочник.ПерепискаСКонтролирующимиОрганами КАК ПерепискаСКонтролирующимиОрганами
	                      |ГДЕ
	                      |	ПерепискаСКонтролирующимиОрганами.Требование В(&Требования)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПерепискаСКонтролирующимиОрганами.Требование
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Ответы.Требование КАК Требование,
	                      |	СУММА(Ответы.КоличествоОтветов) КАК КоличествоОтветов
	                      |ИЗ
	                      |	Ответы КАК Ответы
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Ответы.Требование");
						  
	Запрос.УстановитьПараметр("Требования", Требования);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КоличествоОтветов.Вставить(Выборка.Требование, Выборка.КоличествоОтветов);
	КонецЦикла;
	
	Возврат КоличествоОтветов;
	
КонецФункции

Функция ПолучитьМассивТребованийПоОписиВходящихДокументов(ОписьВходящихДокументовСсылка, ВидДокумента = Неопределено) Экспорт
	
	МассивТребований = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы.СсылкаНаОбъект
		|ИЗ
		|	Справочник.ОписиВходящихДокументовИзНалоговыхОрганов.ВходящиеДокументы КАК ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы
		|ГДЕ
		|	ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы.Ссылка = &ОписьВходящихДокументовСсылка
		|	И ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы.СсылкаНаОбъект.ВидДокумента в (&ВидДокументаТребование)";

	Запрос.УстановитьПараметр("ОписьВходящихДокументовСсылка", ОписьВходящихДокументовСсылка);
	
	ВидыДокументов = Новый Массив;
	Если ВидДокумента = Неопределено Тогда
		ВидыДокументов.Добавить(Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииДокументов);
		ВидыДокументов.Добавить(Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииПоясненийКДекларацииНДС);
	Иначе
		ВидыДокументов.Добавить(ВидДокумента);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидДокументаТребование", ВидыДокументов);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		МассивТребований.Добавить(Выборка.СсылкаНаОбъект);
	КонецЦикла;
	
	Возврат МассивТребований;
	
КонецФункции

Функция ПолучитьТекстКоличествоОтветов(ЧислоОтветов) Экспорт
	
	ТекстКоличествоОтветов = СтрЗаменить(ЧислоПрописью(ЧислоОтветов, "НП=Истина, НД=Ложь", "ответ, ответа, ответов, м, , , , ,0"),
										 ЧислоПрописью(ЧислоОтветов, "НП=Ложь, НД=Ложь", " , , , , , , , ,0"),
										 "");
	Возврат Формат(ЧислоОтветов, "ЧГ=") + " " + ТекстКоличествоОтветов;
	
КонецФункции 

Процедура ПередЗаписьюСканированныеДокументыДляПередачиВЭлектронномВиде(Объект, Отказ)

	Если Объект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВерсияПриказа = Перечисления.ПриказОписиИсходящихДокументов.ПриказММВ_7_6_16 Тогда
		Объект.Наименование = Объект.СведенияДокумента;
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ДатаДокумента) Тогда
			НомерИДата = Объект.НомерДокумента + " от " + Формат(Объект.ДатаДокумента, "ДФ='dd.MM.yyyy ""г.""'");
		Иначе
			НомерИДата = Объект.НомерДокумента;
		КонецЕсли;
		Наименование = Строка(Объект.ВидДокумента) + " " + НомерИДата;
		
		Если ЗначениеЗаполнено(Наименование) Тогда
			Объект.Наименование = Наименование;
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюОписиВходящихДокументов(Объект, Отказ)
	
	Если Объект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
	
		Объект.Наименование = "Опись входящих документов от НО " + Объект.НалоговыйОрган + " от " + Формат(Объект.ДатаСообщения, "ДЛФ=D");
	
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписьюОписиИсходящихДокументов(Объект, Отказ)
	
	Если Объект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Требование = Объект.Требование;
	Наименование = НСтр("ru = 'Ответ на требование о представлении документов'");
	Если ЗначениеЗаполнено(Требование) Тогда
		Наименование = Наименование + " " + Строка(Требование.НомерДокумента) + " от " + Формат(Требование.ДатаДокумента, "ДЛФ=D");
	КонецЕсли;
	
	Объект.Наименование = Наименование;

КонецПроцедуры

Процедура ОбработкаЗаполненияОписиИсходящихДокументов(Объект, ДанныеЗаполнения)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Свойство("ОснованиеСсылка") Тогда
		Возврат;
	КонецЕсли;
	
	Основание = ДанныеЗаполнения.ОснованиеСсылка;
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда	
		
		Объект.ДатаСоздания = ТекущаяДатаСеанса();
		Объект.Требование = Основание;    
		Объект.НалоговыйОрган = Основание.НалоговыйОрган;
		Объект.Организация = Основание.Организация;
		Объект.ОписьВходящихДокументов = ДокументооборотСКОВызовСервера.ПолучитьОписьВходящихДокументовПоТребованию(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.ОписиВходящихДокументовИзНалоговыхОрганов") Тогда
		
		Объект.ДатаСоздания = ТекущаяДатаСеанса();
		Объект.НалоговыйОрган = Основание.НалоговыйОрган;
		Объект.Организация = Основание.Организация;
		Объект.ОписьВходящихДокументов = Основание;
		
		// Здесь интересуют только требования представления документов,
		// потому что опись исходящих документов является ответом только
		// для требования представления документов
		МассивТребований = ПолучитьМассивТребованийПоОписиВходящихДокументов(
			Основание,
			Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииДокументов);
		
		Если МассивТребований.Количество() = 1 Тогда
			Объект.Требование = МассивТребований[0];	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// есть в контейнере
Функция ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(СсылкаДокумент, ИменаВложений = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла КАК ИмяФайла,
						  |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Данные КАК Данные
						  |	, ВЫБОР
					  	  |		КОГДА СостояниеОбъектов.Архивный ЕСТЬ NULL ТОГДА Ложь
					   	  |		КОГДА СостояниеОбъектов.Архивный = Ложь ТОГДА Ложь
					   	  |	ИНАЧЕ
					   	  |		Истина
					   	  |	КОНЕЦ ВАрхиве
						  |ИЗ
						  |	РегистрСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов КАК ФайлыДокументовРеализацииПолномочийНалоговыхОрганов
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПризнакиАрхивированияФайловДОСКонтролирующимиОрганами КАК СостояниеОбъектов
						  |			ПО 		(СостояниеОбъектов.Объект = ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ)
						  |				И	(СостояниеОбъектов.ИмяФайла = ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла)
						  |				И	(СостояниеОбъектов.Владелец = Значение(Перечисление.ВидыАрхивируемыхМетаданныхДО.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов))
						  |
						  |ГДЕ
						  |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ = &СсылкаДокумент");
	Запрос.УстановитьПараметр("СсылкаДокумент", СсылкаДокумент);
	Если ИменаВложений <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
						  |	И ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла В(&ИмяФайла)";
		Запрос.УстановитьПараметр("ИмяФайла", ИменаВложений);
	КонецЕсли;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// помещает в регистр сведений ФайлыДокументовРеализацииПолномочийНалоговыхОрганов данные файлов, расположенных во временном хранилище
// ТаблицаДобавляемыхФайлов - таблица значений: ИмяФайла, АдресФайла
Функция ПоместитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(СсылкаДокумент, ТаблицаДобавляемыхФайлов) Экспорт
	
	Попытка
		// Наполняем регистр сведений ФайлыДокументовРеализацииПолномочийНалоговыхОрганов файлами
		НаборЗаписей = РегистрыСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Документ.Установить(СсылкаДокумент); 
		НаборЗаписей.Прочитать();
		
		Для каждого СтрокаТЗ Из ТаблицаДобавляемыхФайлов Цикл
			
			ИмяФайла 					= СтрокаТЗ.ИмяФайла;
			АдресВоВременномХранилище 	= СтрокаТЗ.АдресФайла;
			
			РасширениеСТочкой = нрег(Прав(ИмяФайла, 4));
			Если РасширениеСТочкой = ".xml" Тогда
				ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.xml;
			Иначе
				ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.Неизвестный;
			КонецЕсли;
			
			ФайлДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
			РазмерФайла = ФайлДвоичныеДанные.Размер();
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.Документ = СсылкаДокумент;
			НоваяЗапись.ИмяФайла = ИмяФайла;
			НоваяЗапись.ТипСодержимого = ТипСодержимого;
			НоваяЗапись.Размер = РазмерФайла;
			НоваяЗапись.Данные = Новый ХранилищеЗначения(ФайлДвоичныеДанные, Новый СжатиеДанных(9));;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись вложений документов реализации полномочий налогоых органов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция УдалитьФайлыДокументовРеализацииПолномочийНалоговыхОргановПоВладельцу(ВладелецСсылка, МассивИменФайлов = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Документ.Установить(ВладелецСсылка);
	
	Если МассивИменФайлов = Неопределено Тогда
		//Требуется удалить все файлы владельца		
		НаборЗаписей.Записать();
	Иначе
		Для каждого ИмяФайла Из МассивИменФайлов Цикл
			НаборЗаписей.Отбор.ИмяФайла.Установить(ИмяФайла);
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ИзменитьВладельцаФайловДокументовРеализацииПолномочийНалоговыхОрганов(ОписьСсылка, ТаблицаФайловИзменяющихВладельца)
	
	Попытка
		
		МенЗап = РегистрыСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.СоздатьМенеджерЗаписи();
		
		Для каждого СтрокаТЗ Из ТаблицаФайловИзменяющихВладельца Цикл
			
			МенЗап.Документ = ОписьСсылка;
			МенЗап.ИмяФайла = СтрокаТЗ.ИмяФайла;
			МенЗап.Прочитать();
			Если МенЗап.Выбран() Тогда
				МенЗап.Документ = СтрокаТЗ.НовыйВладелец;
				МенЗап.Записать(Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ОриентировочныйРазмерОписиИсходящихДокументовПриОтправке(ОписьСсылка) Экспорт
	
	//Вычислим размер файлов скандокументов описи
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект
	|ИЗ
	|	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.ПредставляемыеДокументы КАК ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы
	|ГДЕ
	|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Ссылка = &ОписьСсылка
	|	И ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект ССЫЛКА Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде");
	
	Запрос.УстановитьПараметр("ОписьСсылка", ОписьСсылка);
	
	МасивСканДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНаОбъект");
	
	РазмерСканДокументов = ПолучитьСтруктуруРазмеровСканДокументов(МасивСканДокументов).Размер;
	
	//Вычислим размер файлов описи
	//Сформируем список сжимаемых типов содержимого файлов
	СписокСжимаемыхТипов = Новый СписокЗначений;
	СписокСжимаемыхТипов.Добавить(Перечисления.ТипыСодержимогоФайлов.xml);
	СписокСжимаемыхТипов.Добавить(Перечисления.ТипыСодержимогоФайлов.Текст1251);
	СписокСжимаемыхТипов.Добавить(Перечисления.ТипыСодержимогоФайлов.Текст866);
	
	// Определим ориентировочный размер описи
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ТипСодержимого В (&СписокСжимаемыхТипов)
	|					ТОГДА ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Размер * &КоэффициентСжатия
	|				ИНАЧЕ ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Размер
	|			КОНЕЦ), 0) КАК РазмерФайловОписи
	|ИЗ
	|	РегистрСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов КАК ФайлыДокументовРеализацииПолномочийНалоговыхОрганов
	|ГДЕ
	|	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ  = &ОписьСсылка");
	
	Запрос.УстановитьПараметр("ОписьСсылка", ОписьСсылка);
	Запрос.УстановитьПараметр("СписокСжимаемыхТипов", СписокСжимаемыхТипов);
	Запрос.УстановитьПараметр("КоэффициентСжатия", 0.15);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РазмерФайловОписи = 0;
	Если Выборка.Следующий() Тогда
		РазмерФайловОписи = Выборка.РазмерФайловОписи;
	КонецЕсли;
	
	Возврат РазмерФайловОписи + РазмерСканДокументов;
	
КонецФункции

Функция КоличествоФайловОписиИсходящихДокументовПриОтправке(ОписьСсылка) Экспорт
	
	// Общее количество файлов состоит из:
	// Документы Такском и Документы НДС - каждый состоит из двух файлов (файл выгрузки и файл подписи), документы типов "акт" и "ТОРГ-12" состоят из 4 файлов
	// Сканированные документы - каждый состоит из произвольного количества файлов изображений
	// Файлы подписи на каждый из файлов из пунктов 1 и 2 (то есть количество передаваемых файлов увеличивается вдвое)

	// Определелим количество файлов всех скандокументов данной описи
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(СканированныеДокументыДляПередачиВЭлектронномВидеПрисоединенныеФайлы.Ссылка) КАК КоличествоФайловСканДокументовОписи
	|ИЗ
	|	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.ПредставляемыеДокументы КАК ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СканированныеДокументыДляПередачиВЭлектронномВидеПрисоединенныеФайлы КАК СканированныеДокументыДляПередачиВЭлектронномВидеПрисоединенныеФайлы
	|		ПО ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект = СканированныеДокументыДляПередачиВЭлектронномВидеПрисоединенныеФайлы.ВладелецФайла
	|ГДЕ
	|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Ссылка = &ОписьСсылка
	|	И ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект ССЫЛКА Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде");
	
	Запрос.УстановитьПараметр("ОписьСсылка", ОписьСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоФайловСканДокументовОписи = 0;
	
	Если Выборка.Следующий() Тогда
		КоличествоФайловСканДокументовОписи = Выборка.КоличествоФайловСканДокументовОписи;
	КонецЕсли;
	
	// Определим количество файлов выгрузки, прикрепленных к документам, входящим в состав описи (сюда войдут документы БЭД, документы НДС и документы, загруженные из пакета обмена)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаДанных) КАК КоличествоФайловВыгрузки
	|ИЗ
	|	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.ПредставляемыеДокументы КАК ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы
	|ГДЕ
	|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Ссылка = &ОписьСсылка
	|	И ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаДанных > """"");

	Запрос.УстановитьПараметр("ОписьСсылка", ОписьСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоФайловВыгрузки = 0;
	
	Если Выборка.Следующий() Тогда
		КоличествоФайловВыгрузки = Выборка.КоличествоФайловВыгрузки;
	КонецЕсли;
	
	КоличествоФайловВложений = (КоличествоФайловВыгрузки * 2) + КоличествоФайловСканДокументовОписи;
	
	// Определим количество файлов подтверждений (сюда войдут документы БЭД видов "Акт" и "ТОРГ-12")
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеИмяФайлаДанных) КАК КоличествоФайловПодтверждений
	|ИЗ
	|	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.ПредставляемыеДокументы КАК ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы
	|ГДЕ
	|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Ссылка = &ОписьСсылка
	|	И ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеИмяФайлаДанных > """"");

	Запрос.УстановитьПараметр("ОписьСсылка", ОписьСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоФайловПодтверждений = 0;
	
	Если Выборка.Следующий() Тогда
		КоличествоФайловПодтверждений = Выборка.КоличествоФайловПодтверждений;
	КонецЕсли;
	
	КоличествоФайловВложений = КоличествоФайловВложений + (КоличествоФайловПодтверждений * 2);

	Возврат КоличествоФайловВложений;
	
КонецФункции

Функция ПолучитьТаблицуДокументовОписиИРазмерыФайлов(ОписьСсылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаДанных
	                      |ПОМЕСТИТЬ ТЗ_ИменФайловДанных
	                      |ИЗ
	                      |	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.ПредставляемыеДокументы КАК ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы
	                      |ГДЕ
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Ссылка = &ОписьСсылка
	                      |	И ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаДанных <> &ПустаяСтрока
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТЗ_ИменФайловДанных.ИмяФайлаДанных,
	                      |	СУММА(4) КАК КолвоФайлов,
	                      |	ЕСТЬNULL(СУММА(ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Размер), 0) КАК РазмерФайлов
						  |	, ЕстьNULL(Сумма(ВЫБОР
						  |		КОГДА СостояниеОбъектов.Архивный ЕСТЬ NULL ТОГДА 0
						  |		КОГДА СостояниеОбъектов.Архивный = Ложь ТОГДА 0
						  |	ИНАЧЕ
						  |		1
						  |	КОНЕЦ), 0) ВАрхиве
	                      |ПОМЕСТИТЬ ТЗ_ФайлыОписи
	                      |ИЗ
	                      |	ТЗ_ИменФайловДанных КАК ТЗ_ИменФайловДанных
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов КАК ФайлыДокументовРеализацииПолномочийНалоговыхОрганов
	                      |		ПО ТЗ_ИменФайловДанных.ИмяФайлаДанных = ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПризнакиАрхивированияФайловДОСКонтролирующимиОрганами КАК СостояниеОбъектов
						  |			ПО 		(СостояниеОбъектов.Объект = ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ)
						  |				И	(СостояниеОбъектов.ИмяФайла = ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла)
						  |				И	(СостояниеОбъектов.Владелец = Значение(Перечисление.ВидыАрхивируемыхМетаданныхДО.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов))
						  |
	                      |ГДЕ
	                      |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ = &ОписьСсылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТЗ_ИменФайловДанных.ИмяФайлаДанных
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект КАК СканСсылка
	                      |ПОМЕСТИТЬ ТЗ_Сканы
	                      |ИЗ
	                      |	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.ПредставляемыеДокументы КАК ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы
	                      |ГДЕ
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Ссылка = &ОписьСсылка
	                      |	И ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект ССЫЛКА Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде
	                      |	И ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект <> ЗНАЧЕНИЕ(Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде.ПустаяСсылка)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТЗ_Сканы.СканСсылка,
	                      |	СУММА(1) КАК КолвоФайлов,
	                      |	ЕСТЬNULL(СУММА(ПрисоединенныеФайлыСканов.Размер), 0) КАК РазмерФайлов
	                      |ПОМЕСТИТЬ ТЗ_ФайлыСканов
	                      |ИЗ
	                      |	ТЗ_Сканы КАК ТЗ_Сканы
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СканированныеДокументыДляПередачиВЭлектронномВидеПрисоединенныеФайлы КАК ПрисоединенныеФайлыСканов
	                      |		ПО ТЗ_Сканы.СканСсылка = ПрисоединенныеФайлыСканов.ВладелецФайла
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТЗ_Сканы.СканСсылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаДанных КАК ИдентификаторДокумента,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ЯвляетсяИнформацией КАК ЯвляетсяИнформацией,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПорядковыйНомер КАК ПорядковыйНомер,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ВидДокумента,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Номер,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Дата,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Контрагент,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.НомерДокументаОснования,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ДатаДокументаОснования,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.КНД,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Направление,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаДанных,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаПодписи,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеКНД,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеИмяФайлаДанных,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеИмяФайлаПодписи,
	                      |	ЕСТЬNULL(ТЗ_ФайлыОписи.КолвоФайлов, 0) КАК КоличествоФайлов,
	                      |	ЕСТЬNULL(ТЗ_ФайлыОписи.РазмерФайлов, 0) КАК РазмерФайлов,
						  |	ЕСТЬNULL(ТЗ_ФайлыОписи.ВАрхиве, 0) КАК ВАрхиве
	                      |ИЗ
	                      |	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.ПредставляемыеДокументы КАК ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_ФайлыОписи КАК ТЗ_ФайлыОписи
	                      |		ПО ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаДанных = ТЗ_ФайлыОписи.ИмяФайлаДанных
	                      |ГДЕ
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Ссылка = &ОписьСсылка
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ЯвляетсяИнформацией,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПорядковыйНомер,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ВидДокумента,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Номер,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Дата,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Контрагент,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.НомерДокументаОснования,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ДатаДокументаОснования,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.КНД,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Направление,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаДанных,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаПодписи,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеКНД,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеИмяФайлаДанных,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеИмяФайлаПодписи,
	                      |	ЕСТЬNULL(ТЗ_ФайлыСканов.КолвоФайлов, 0),
	                      |	ЕСТЬNULL(ТЗ_ФайлыСканов.РазмерФайлов, 0),
						  |	0 КАК ВАрхиве
	                      |ИЗ
	                      |	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.ПредставляемыеДокументы КАК ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ_ФайлыСканов КАК ТЗ_ФайлыСканов
	                      |		ПО ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект = ТЗ_ФайлыСканов.СканСсылка
	                      |ГДЕ
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Ссылка = &ОписьСсылка
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	РазмерФайлов"); //если требуется разбивать по другому принципу, можно добавить упорядочивание по ЯвляетсяИнформацией и ПорядковыйНомер
	
	Запрос.УстановитьПараметр("ОписьСсылка", ОписьСсылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция КритичныеДокументыОписиИсходящихДокументовПриОтправке(ОписьСсылка) Экспорт
	
	// Сформируем массив скандокументов описи
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект
	|ИЗ
	|	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.ПредставляемыеДокументы КАК ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы
	|ГДЕ
	|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Ссылка = &ОписьСсылка
	|	И ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект ССЫЛКА Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде");
	
	Запрос.УстановитьПараметр("ОписьСсылка", ОписьСсылка);
	
	МасивСканДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНаОбъект");
	
	// Сформируем список владельцев файлов
	СписокВладельцевФайлов = Новый СписокЗначений;
	СписокВладельцевФайлов.ЗагрузитьЗначения(МасивСканДокументов);
	// Добавим в список саму опись
	СписокВладельцевФайлов.Добавить(ОписьСсылка);
	
	//Сформируем список сжимаемых типов содержимого файлов
	СписокСжимаемыхТипов = Новый СписокЗначений;
	СписокСжимаемыхТипов.Добавить(Перечисления.ТипыСодержимогоФайлов.xml);
	СписокСжимаемыхТипов.Добавить(Перечисления.ТипыСодержимогоФайлов.Текст1251);
	СписокСжимаемыхТипов.Добавить(Перечисления.ТипыСодержимогоФайлов.Текст866);
	
	// Определим ориентировочный размер описи
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ,
	                      |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла,
	                      |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ТипСодержимого,
	                      |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Размер,
	                      |	ВЫБОР
	                      |		КОГДА ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Размер > 1000 * 1024 * 1024
	                      |			ТОГДА 2
	                      |		ИНАЧЕ 1
	                      |	КОНЕЦ КАК СтатусКритичности
	                      |ИЗ
	                      |	РегистрСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов КАК ФайлыДокументовРеализацииПолномочийНалоговыхОрганов
	                      |ГДЕ
	                      |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ В(&СписокВладельцевФайлов)
	                      |	И ВЫБОР
	                      |			КОГДА ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ТипСодержимого В (&СписокСжимаемыхТипов)
	                      |				ТОГДА ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Размер * &КоэффициентСжатия
	                      |			ИНАЧЕ ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Размер
	                      |		КОНЕЦ > 60 * 1024 * 1024");
	
	Запрос.УстановитьПараметр("СписокВладельцевФайлов", СписокВладельцевФайлов);
	Запрос.УстановитьПараметр("СписокСжимаемыхТипов", СписокСжимаемыхТипов);
	Запрос.УстановитьПараметр("КоэффициентСжатия", 0.15);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьОбщееСоответствиеФайловЭДиНДС(СоответствиеЭД, СоответствиеНДС)
	
	ОбщееСоответствие = Новый Соответствие;
	
	Если ТипЗнч(СоответствиеНДС) = Тип("Соответствие") Тогда
		Для каждого Соотв Из СоответствиеНДС Цикл
			СтруктураЗначение = Новый Структура("ИмяФайлаДанных, ИмяФайлаПодписи, АдресФайлаДанных, АдресФайлаПодписи, ПодтверждениеИмяФайлаДанных, ПодтверждениеИмяФайлаПодписи, ПодтверждениеАдресФайлаДанных, ПодтверждениеАдресФайлаПодписи", "", "", "", "", "", "", "", "");
			
			МассивФайлов = Соотв.Значение;
			Для каждого ДанныеФайла Из МассивФайлов Цикл
				Если ДанныеФайла.ТипФайла = "ФайлВыгрузки" Тогда
					СтруктураЗначение.ИмяФайлаДанных = ДанныеФайла.ИмяФайла;
					СтруктураЗначение.АдресФайлаДанных = ДанныеФайла.АдресВременногоХранилища;
				КонецЕсли;
			КонецЦикла;
			
			ОбщееСоответствие.Вставить(Соотв.Ключ, СтруктураЗначение);
			
		КонецЦикла;
	КонецЕсли;

	Если ТипЗнч(СоответствиеЭД) = Тип("Соответствие") Тогда
		Для каждого Соотв Из СоответствиеЭД Цикл
			СтруктураЗначение = Новый Структура("ИмяФайлаДанных, ИмяФайлаПодписи, АдресФайлаДанных, АдресФайлаПодписи, ПодтверждениеИмяФайлаДанных, ПодтверждениеИмяФайлаПодписи, ПодтверждениеАдресФайлаДанных, ПодтверждениеАдресФайлаПодписи", "", "", "", "", "", "", "", "");
			
			МассивФайлов = Соотв.Значение;
			
			Для каждого ДанныеФайла Из МассивФайлов Цикл
				Если ДанныеФайла.ТипФайла = "ФайлВыгрузки" Тогда
					СтруктураЗначение.ИмяФайлаДанных   = ДанныеФайла.ИмяФайла;
					СтруктураЗначение.АдресФайлаДанных = ДанныеФайла.АдресВременногоХранилища;
				ИначеЕсли ДанныеФайла.ТипФайла = "ЭЦП" Тогда
					СтруктураЗначение.АдресФайлаПодписи = ДанныеФайла.АдресВременногоХранилища;
				ИначеЕсли ДанныеФайла.ТипФайла = "ФайлПодтверждения" Тогда
					СтруктураЗначение.ПодтверждениеИмяФайлаДанных   = ДанныеФайла.ИмяФайла;
					СтруктураЗначение.ПодтверждениеАдресФайлаДанных = ДанныеФайла.АдресВременногоХранилища;
				ИначеЕсли ДанныеФайла.ТипФайла = "ЭЦППодтверждения" Тогда
					СтруктураЗначение.ПодтверждениеАдресФайлаПодписи = ДанныеФайла.АдресВременногоХранилища;
				КонецЕсли;
			КонецЦикла;
			
			//относительно имени файла данных генерируем имя файла подписи
			СтруктураЗначение.ИмяФайлаПодписи = ИмяФайлаЭПФайлаОписиИсходящихДокументов(СтруктураЗначение.ИмяФайлаДанных);
			
			Если ЗначениеЗаполнено(СтруктураЗначение.ПодтверждениеИмяФайлаДанных) Тогда
				СтруктураЗначение.ПодтверждениеИмяФайлаПодписи = ИмяФайлаЭПФайлаОписиИсходящихДокументов(СтруктураЗначение.ПодтверждениеИмяФайлаДанных);
			КонецЕсли;
			
			ОбщееСоответствие.Вставить(Соотв.Ключ, СтруктураЗначение);
			
		КонецЦикла
	КонецЕсли;

	Возврат ОбщееСоответствие;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовОписиИсходящихДокументов(ОписьСсылка)
	
	СтруктураРеквизитовОписи = Новый Структура;
	СтруктураРеквизитовОписи.Вставить("Организация", ОписьСсылка);
	СтруктураРеквизитовОписи.Вставить("ОписьВходящихДокументов", );
	СтруктураРеквизитовОписи.Вставить("Требование", );
	СтруктураРеквизитовОписи.Вставить("НалоговыйОрган", );

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОписиИсходящихДокументовВНалоговыеОрганы.Организация,
		|	ОписиИсходящихДокументовВНалоговыеОрганы.ОписьВходящихДокументов,
		|	ОписиИсходящихДокументовВНалоговыеОрганы.Требование,
		|	ОписиИсходящихДокументовВНалоговыеОрганы.НалоговыйОрган
		|ИЗ
		|	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы КАК ОписиИсходящихДокументовВНалоговыеОрганы
		|ГДЕ
		|	ОписиИсходящихДокументовВНалоговыеОрганы.Ссылка = &ОписьСсылка";

	Запрос.УстановитьПараметр("ОписьСсылка", ОписьСсылка);

	Выборка = Запрос.Выполнить().Выбрать();

	Выборка.Следующий();

	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовОписи, Выборка);

	Возврат СтруктураРеквизитовОписи;

КонецФункции 

Функция РазбитьОписьИсходящихДокументовНаНесколько(ОписьСсылка, ТекстПредупреждения) Экспорт
	
	// Проверка ситуации:
	// Размер вложения превышает 1024 Мб.
	// Разбиением на несколько описей ситуацию не исправить.
	ТЗКритичныеФайлы = КритичныеДокументыОписиИсходящихДокументовПриОтправке(ОписьСсылка);
	
	ЕстьНедопустимыеФайлы = Ложь;
	Для каждого КритичныйФайл Из ТЗКритичныеФайлы Цикл
		Если КритичныйФайл.СтатусКритичности = 2 Тогда
			ЕстьНедопустимыеФайлы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЕстьНедопустимыеФайлы Тогда
		ТекстПредупреждения = "Размеры некоторых файлов превышают допустимые! Требуется устранить нарушение до разбиения описи на несколько!";
		Возврат Неопределено;
	КонецЕсли;
	
	//ситации, при которых нельзя разбить проверили, начинаем разбивать
	ТЗДокументыФайлыРазмер = ПолучитьТаблицуДокументовОписиИРазмерыФайлов(ОписьСсылка);
	
	ДеревоСоздаваемыхОписей = Новый ДеревоЗначений;
	ДеревоСоздаваемыхОписей.Колонки.Добавить("ЯвляетсяИнформацией");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("ПорядковыйНомер");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("ВидДокумента");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("СсылкаНаОбъект");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("Загружен");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("Загружен_Номер");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("Загружен_Дата");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("Загружен_Контрагент");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("НомерДокументаОснования");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("ДатаДокументаОснования");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("Загружен_Направление");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("ИмяФайлаДанных");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("ИмяФайлаПодписи");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("КНД");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("ПодтверждениеКНД");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("ПодтверждениеИмяФайлаДанных");
	ДеревоСоздаваемыхОписей.Колонки.Добавить("ПодтверждениеИмяФайлаПодписи");
	
	СуммаКолвоФайлов 	= 0;
	СуммаРазмерФайлов 	= 0;
	МаксКолвоФайлов 	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.МаксимальнойКоличествоФайловОписи();
	МаксРазмерФайлов 	= 72*1024*1024;
	
	НоваяСтрокаОпись = ДеревоСоздаваемыхОписей.Строки.Добавить();
	
	Для каждого СтрокаДокумент Из ТЗДокументыФайлыРазмер Цикл
		
		СуммаКолвоФайлов = СуммаКолвоФайлов + СтрокаДокумент.КоличествоФайлов;
		СуммаРазмерФайлов = СуммаРазмерФайлов + СтрокаДокумент.РазмерФайлов;

		Если (СуммаКолвоФайлов > МаксКолвоФайлов ИЛИ СуммаРазмерФайлов > МаксРазмерФайлов) И НоваяСтрокаОпись.Строки.Количество() > 0 Тогда
			//начинаем новую опись
			ДобавленаНоваяОпись = Истина;
			НоваяСтрокаОпись = ДеревоСоздаваемыхОписей.Строки.Добавить();
			
			СуммаКолвоФайлов = СтрокаДокумент.КоличествоФайлов;
			СуммаРазмерФайлов = СтрокаДокумент.РазмерФайлов;

		КонецЕсли;
		
		НоваяСтрокаДокумент = НоваяСтрокаОпись.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумент, СтрокаДокумент); 
	
	КонецЦикла;
	
	СтрокиОписей = ДеревоСоздаваемыхОписей.Строки;
	
	Если СтрокиОписей.Количество() = 1 Тогда
		//все файлы уместились в текущей описи, разбития не происходило
		ТекстПредупреждения = "Разбития описи не требуется.";
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовОписи = ПолучитьСтруктуруРеквизитовОписиИсходящихДокументов(ОписьСсылка);
	
	ТаблицаФайловИзменяющихВладельца = Новый ТаблицаЗначений;
	ТаблицаФайловИзменяющихВладельца.Колонки.Добавить("ИмяФайла");
	ТаблицаФайловИзменяющихВладельца.Колонки.Добавить("НовыйВладелец");
	
	МассивСозданныхОписей = Новый Массив;
	// спроектировано наполнение описей, начинаем работать с метаданными
	НачатьТранзакцию();
	
	Попытка
		
		НачальнаяОписьЗаполнена = Ложь;
		
		РедактируемаяОписьСсылка = ОписьСсылка;
		РедактируемаяОписьОбъект = ОписьСсылка.ПолучитьОбъект();
		
		РедактируемаяОписьОбъект.ПредставляемыеДокументы.Очистить();
		
		Для каждого СтрокаОпись Из СтрокиОписей Цикл
			
			Если НачальнаяОписьЗаполнена Тогда
				//создаем новую опись
				РедактируемаяОписьОбъект = Справочники.ОписиИсходящихДокументовВНалоговыеОрганы.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(РедактируемаяОписьОбъект, СтруктураРеквизитовОписи);
				РедактируемаяОписьОбъект.ДатаСоздания = ТекущаяДатаСеанса();
				РедактируемаяОписьОбъект.Записать();
				РедактируемаяОписьСсылка = РедактируемаяОписьОбъект.Ссылка;
				
				МассивСозданныхОписей.Добавить(РедактируемаяОписьСсылка);
			КонецЕсли;
			
			//заполняем табличную часть
			Для каждого СтрокаДокумент Из СтрокаОпись.Строки Цикл
				
				НоваяСтрокаДокумент = РедактируемаяОписьОбъект.ПредставляемыеДокументы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумент, СтрокаДокумент);
				
				Если НачальнаяОписьЗаполнена И ЗначениеЗаполнено(СтрокаДокумент.ИмяФайлаДанных) Тогда
					//надо изменить владельца файла данных
					НоваяСтрокаФайл = ТаблицаФайловИзменяющихВладельца.Добавить();
					НоваяСтрокаФайл.ИмяФайла = СтрокаДокумент.ИмяФайлаДанных;
					НоваяСтрокаФайл.НовыйВладелец = РедактируемаяОписьСсылка;
					
					Если ЗначениеЗаполнено(СтрокаДокумент.ИмяФайлаПодписи) Тогда
						//надо изменить владельца файла подписи
						НоваяСтрокаФайл = ТаблицаФайловИзменяющихВладельца.Добавить();
						НоваяСтрокаФайл.ИмяФайла = СтрокаДокумент.ИмяФайлаПодписи;
						НоваяСтрокаФайл.НовыйВладелец = РедактируемаяОписьСсылка;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			РедактируемаяОписьОбъект.Записать();
			НачальнаяОписьЗаполнена = Истина;
			
		КонецЦикла;
		
		//изменяем владельца у "переброшенных" файлов
		Если НЕ ИзменитьВладельцаФайловДокументовРеализацииПолномочийНалоговыхОрганов(ОписьСсылка, ТаблицаФайловИзменяющихВладельца) Тогда
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		Возврат Неопределено;

	КонецПопытки; 
	
	ЗафиксироватьТранзакцию();
	
	Возврат МассивСозданныхОписей;
	
КонецФункции

Функция ОбновитьФайлыДокументовИБОписиИсходящихДокументов(ОписьСсылка) Экспорт
	
	СписокВидовДокументовЭД = Новый СписокЗначений;
	СписокВидовДокументовЭД.Добавить(Перечисления.ВидыПредставляемыхДокументов.СчетФактура);
	СписокВидовДокументовЭД.Добавить(Перечисления.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура);
	СписокВидовДокументовЭД.Добавить(Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот);
	СписокВидовДокументовЭД.Добавить(Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12);
	СписокВидовДокументовЭД.Добавить(Перечисления.ВидыПредставляемыхДокументов.ПередачаТоваров);
	СписокВидовДокументовЭД.Добавить(Перечисления.ВидыПредставляемыхДокументов.ПередачаУслуг);
	СписокВидовДокументовЭД.Добавить(Перечисления.ВидыПредставляемыхДокументов.УПД);
	СписокВидовДокументовЭД.Добавить(Перечисления.ВидыПредставляемыхДокументов.УКД);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект,
	                      |	ВЫБОР
	                      |		КОГДА ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ВидДокумента В (&СписокВидовДокументовЭД)
	                      |			ТОГДА ""ЭД""
	                      |		ИНАЧЕ ""НДС""
	                      |	КОНЕЦ КАК КатегорияВидаДокумента,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаДанных,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаПодписи,
						  |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеИмяФайлаДанных,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеИмяФайлаПодписи,
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ВерсияФайлаДанных
	                      |ИЗ
	                      |	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.ПредставляемыеДокументы КАК ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы
	                      |ГДЕ
	                      |	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Ссылка = &ОписьСсылка
	                      |	И НЕ ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект ССЫЛКА Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде
	                      |	И ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ОписьСсылка", ОписьСсылка);
	Запрос.УстановитьПараметр("СписокВидовДокументовЭД", СписокВидовДокументовЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаДобавляемыхФайлов = Новый ТаблицаЗначений;
	ТаблицаДобавляемыхФайлов.Колонки.Добавить("ИмяФайла");
	ТаблицаДобавляемыхФайлов.Колонки.Добавить("АдресФайла");
	
	МассивУдаляемыхФайлов = Новый Массив;
	
	МассивЭД = Новый Массив;
	МассивНДС = Новый Массив;
	
	СоответствиеВерсияДанныхПоСсылке = Новый Соответствие;
		
	//проходим выборку для заполнения МассивУдаляемыхФайлов, МассивЭД, МассивНДС
	Пока Выборка.Следующий() Цикл
		
		ВерсияДанныхПоСсылке = Выборка.СсылкаНаОбъект.ВерсияДанных;
						  
		Если Выборка.ВерсияФайлаДанных = ВерсияДанныхПоСсылке Тогда
			Продолжить;
		Иначе
			СоответствиеВерсияДанныхПоСсылке.Вставить(Выборка.СсылкаНаОбъект, ВерсияДанныхПоСсылке);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИмяФайлаДанных) Тогда
			МассивУдаляемыхФайлов.Добавить(Выборка.ИмяФайлаДанных);
		КонецЕсли;	
		Если ЗначениеЗаполнено(Выборка.ИмяФайлаПодписи) Тогда
			МассивУдаляемыхФайлов.Добавить(Выборка.ИмяФайлаПодписи);
		КонецЕсли;	
		Если ЗначениеЗаполнено(Выборка.ПодтверждениеИмяФайлаДанных) Тогда
			МассивУдаляемыхФайлов.Добавить(Выборка.ПодтверждениеИмяФайлаДанных);
		КонецЕсли;	
		Если ЗначениеЗаполнено(Выборка.ПодтверждениеИмяФайлаПодписи) Тогда
			МассивУдаляемыхФайлов.Добавить(Выборка.ПодтверждениеИмяФайлаПодписи);
		КонецЕсли;	
		
		Если Выборка.КатегорияВидаДокумента = "ЭД" Тогда
			МассивЭД.Добавить(Выборка.СсылкаНаОбъект);
		Иначе
			МассивНДС.Добавить(Выборка.СсылкаНаОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Если СоответствиеВерсияДанныхПоСсылке.Количество() = 0 Тогда
		//обновлять файлы не требуется, в описи нет документов ЭД и НДС либо версия данных у них не менялась
		Возврат Истина;
	КонецЕсли;
	
	СоответствиеНДС = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьФайлыВыгрузкиНДС(МассивНДС, Новый УникальныйИдентификатор);
	СоответствиеЭД 	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьФайлыВыгрузкиЭД(МассивЭД, Новый УникальныйИдентификатор);
	
	ОбщееСоответствиеФайлов = ПолучитьОбщееСоответствиеФайловЭДиНДС(СоответствиеЭД, СоответствиеНДС);
	
	// Заполняем ТаблицаДобавляемыхФайлов
	Для каждого Соотв Из ОбщееСоответствиеФайлов Цикл
		
		СтруктураРеквизитов = Соотв.Значение;
		Если ЗначениеЗаполнено(СтруктураРеквизитов.ИмяФайлаДанных) Тогда
			НоваяСтрока = ТаблицаДобавляемыхФайлов.Добавить();
			НоваяСтрока.ИмяФайла = СтруктураРеквизитов.ИмяФайлаДанных;
			НоваяСтрока.АдресФайла = СтруктураРеквизитов.АдресФайлаДанных;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРеквизитов.ИмяФайлаПодписи) Тогда
			НоваяСтрока = ТаблицаДобавляемыхФайлов.Добавить();
			НоваяСтрока.ИмяФайла = СтруктураРеквизитов.ИмяФайлаПодписи;
			НоваяСтрока.АдресФайла = СтруктураРеквизитов.АдресФайлаПодписи;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРеквизитов.ПодтверждениеИмяФайлаДанных) Тогда
			НоваяСтрока = ТаблицаДобавляемыхФайлов.Добавить();
			НоваяСтрока.ИмяФайла = СтруктураРеквизитов.ПодтверждениеИмяФайлаДанных;
			НоваяСтрока.АдресФайла = СтруктураРеквизитов.ПодтверждениеАдресФайлаДанных;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРеквизитов.ПодтверждениеИмяФайлаПодписи) Тогда
			НоваяСтрока = ТаблицаДобавляемыхФайлов.Добавить();
			НоваяСтрока.ИмяФайла = СтруктураРеквизитов.ПодтверждениеИмяФайлаПодписи;
			НоваяСтрока.АдресФайла = СтруктураРеквизитов.ПодтверждениеАдресФайлаПодписи;
		КонецЕсли;
			
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		//удаляем старые файлы
		УдалитьФайлыДокументовРеализацииПолномочийНалоговыхОргановПоВладельцу(ОписьСсылка, МассивУдаляемыхФайлов);
		
		//записываем новые файлы
		Если НЕ ПоместитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(ОписьСсылка, ТаблицаДобавляемыхФайлов) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		//обновляем сведения в табличной части
		ТипСкан = Тип("СправочникСсылка.СканированныеДокументыДляПередачиВЭлектронномВиде");
		
		ОписьОбъект = ОписьСсылка.ПолучитьОбъект();
		Для каждого СтрокаТЧ Из ОписьОбъект.ПредставляемыеДокументы Цикл
			ДокументСсылка = СтрокаТЧ.СсылкаНаОбъект;
			Если НЕ СтрокаТЧ.Загружен И ТипЗнч(ДокументСсылка) <> ТипСкан Тогда
				
				РекизитыСтроки = ОбщееСоответствиеФайлов[ДокументСсылка];
				Если РекизитыСтроки <> Неопределено Тогда
					СтрокаТЧ.ИмяФайлаДанных = РекизитыСтроки.ИмяФайлаДанных;
					СтрокаТЧ.ИмяФайлаПодписи = РекизитыСтроки.ИмяФайлаПодписи;
					
					СтрокаТЧ.ПодтверждениеИмяФайлаДанных = РекизитыСтроки.ПодтверждениеИмяФайлаДанных;
					СтрокаТЧ.ПодтверждениеИмяФайлаПодписи = РекизитыСтроки.ПодтверждениеИмяФайлаПодписи;
				КонецЕсли;
				
				СтрокаТЧ.ВерсияФайлаДанных = СоответствиеВерсияДанныхПоСсылке[ДокументСсылка];
				
			КонецЕсли;
		КонецЦикла;
		
		ОписьОбъект.Записать();
	
	Исключение
		
	    ОтменитьТранзакцию();
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

Функция ИННКПППолучателяТребования(ИмяФайла, Данные = Неопределено) Экспорт
	
	ПрефиксИмениФайла = Лев(ИмяФайла, 11);
	Если ВРег(ПрефиксИмениФайла) <> "ON_INFSOOB_"
		И ВРег(ПрефиксИмениФайла) <> "ON_DOCNPNO_" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные) Тогда
		ИмяВременногоФайлаОтчета = ПолучитьИмяВременногоФайла();
		Данные.Записать(ИмяВременногоФайлаОтчета);
		ТекстXML = ПрочитатьТекстИзФайла(ИмяВременногоФайлаОтчета, , Истина);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайлаОтчета);
		
		ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML);
		Если ЗначениеЗаполнено(ДеревоXML) Тогда
			
			УзлыСвНП = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя", "СвНП"), Истина);
								
			Если УзлыСвНП.Количество() > 0 Тогда
				УзелСвНП = УзлыСвНП[0];
				
				УзлыНПЮЛ = УзелСвНП.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "НПЮЛ", "Э"));
				Если УзлыНПЮЛ.Количество() > 0 Тогда
					УзелНПЮЛ = УзлыНПЮЛ[0];
					
					УзлыИННЮЛ = УзелНПЮЛ.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "ИННЮЛ", "А"));
					УзлыКПП = УзелНПЮЛ.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "КПП", "А"));
					Если УзлыИННЮЛ.Количество() > 0 И УзлыКПП.Количество() > 0 Тогда
						УзелИННЮЛ = УзлыИННЮЛ[0];
						УзелКПП = УзлыКПП[0];
						
						Если ЗначениеЗаполнено(УзелИННЮЛ.Значение) И ЗначениеЗаполнено(УзелКПП.Значение) Тогда
							Возврат СокрЛП(УзелИННЮЛ.Значение) + СокрЛП(УзелКПП.Значение);
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					УзлыНПФЛ = УзелСвНП.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "НПФЛ", "Э"));
					Если УзлыНПФЛ.Количество() > 0 Тогда
						УзелНПФЛ = УзлыНПФЛ[0];
						
						УзлыИННФЛ = УзелНПФЛ.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "ИННФЛ", "А"));
						Если УзлыИННФЛ.Количество() > 0 Тогда
							УзелИННФЛ = УзлыИННФЛ[0];
							
							Если ЗначениеЗаполнено(УзелИННФЛ.Значение) Тогда
								Возврат СокрЛП(УзелИННФЛ.Значение);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КомпонентыИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФайла, "_");
	Если КомпонентыИмени.Количество() >= 4 Тогда
		Возврат КомпонентыИмени[3];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получение требований и представление документов в налоговые органы
///////////////////////////////////////////////////////////////////////////////

// есть в Контейнере
Функция ОтветНаЗапросИОСЯвляетсяОтрицательным(Объект)
	
	// получаем протокол из базы
	ОбъектСсылка = Объект.Ссылка;
	СтрПротоколы = ПолучитьВложенияТранспортногоСообщения(ОбъектСсылка, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросПФР);
	Если СтрПротоколы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// выгружаем данные протокола во временный файл
	СтрПротокол = СтрПротоколы[0];
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		СтрПротокол.Данные.Получить().Записать(ИмяВременногоФайла);
	Исключение
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось выгрузить ответ на запрос во временный файл для анализа'") + ":
				|" + ИнформацияОбОшибке().Описание);
		Возврат Неопределено;
	КонецПопытки;
	
	// загружаем XML из файла в память
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений(ИмяВременногоФайла);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	Если ДеревоXML = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// ищем атрибут, содержащий статус проверки протокола
	РезультатыПоиска = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "запросОбработанУспешно", "Э"), Истина);
	Если РезультатыПоиска.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// преобразовываем значение атрибута к Булево и возвращаем
	ЗначениеАтрибутаСтр = РезультатыПоиска[0].Значение;
	ЗначениеАтрибута = БулевоПоСтроке(ЗначениеАтрибутаСтр);
	Если ЗначениеАтрибута <> Неопределено Тогда
		Возврат НЕ ЗначениеАтрибута;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПередЗаписьюЗапросаНаИнформационноеОбслуживаниеСтрахователя(Объект, Отказ, РежимЗаписи, РежимПроведения)
	
	Если Объект.ВидУслуги = Перечисления.ВидыУслугПриИОС.СправкаОСостоянииРасчетов Тогда
		Объект.ЗастрахованныеЛица.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОтветыНаЗапросИОС(парамЗапрос, СДанными = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	ОтветыНаЗапросыИОС.ИмяФайла,
						  |	ОтветыНаЗапросыИОС.Размер,
						  |	ОтветыНаЗапросыИОС.ОтветОтрицательный,
						  |	ОтветыНаЗапросыИОС.ТипСодержимогоФайла
						  |	, ВЫБОР
						  |		КОГДА СостояниеОбъектов.Архивный ЕСТЬ NULL ТОГДА Ложь
						  |		КОГДА СостояниеОбъектов.Архивный = Ложь ТОГДА Ложь
						  |	ИНАЧЕ
						  |		Истина
						  |	КОНЕЦ ВАрхиве";
	Если СДанными Тогда
		Запрос.Текст = Запрос.Текст + ",
						  |	ОтветыНаЗапросыИОС.Данные";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
						  |ИЗ
						  |	РегистрСведений.ОтветыНаЗапросыИОС КАК ОтветыНаЗапросыИОС
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПризнакиАрхивированияФайловДОСКонтролирующимиОрганами КАК СостояниеОбъектов
						  |			ПО 		(СостояниеОбъектов.Объект = ОтветыНаЗапросыИОС.Запрос)
						  |				И	(СостояниеОбъектов.ИмяФайла = ОтветыНаЗапросыИОС.ИмяФайла)
						  |				И	(СостояниеОбъектов.Владелец = Значение(Перечисление.ВидыАрхивируемыхМетаданныхДО.ОтветыНаЗапросыИОС))
						  |
						  |ГДЕ
						  |	ОтветыНаЗапросыИОС.Запрос = &Запрос";
	Запрос.УстановитьПараметр("Запрос", парамЗапрос);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Заявление абонента оператора электронного документооборота

////////////////////////////////////////////////////////////////////////////////
// ЗАПРОС НА ВЫПИСКУ ИЗ ЕДИНОГО ГОСУДАРСТВЕННОГО РЕЕСТРА
//
Функция ПолучитьОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП(парамЗапрос, СДанными = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ОтветыНаЗапросыЕГР.ИмяФайла,
	                      |	ОтветыНаЗапросыЕГР.Размер,						  
	                      |	ОтветыНаЗапросыЕГР.РезультатОбработкиЗапроса
						  |	, ВЫБОР
						  |		КОГДА СостояниеОбъектов.Архивный ЕСТЬ NULL ТОГДА Ложь
						  |		КОГДА СостояниеОбъектов.Архивный = Ложь ТОГДА Ложь
						  |	ИНАЧЕ
						  |		Истина
						  |	КОНЕЦ ВАрхиве";
	Если СДанными Тогда
		Запрос.Текст = Запрос.Текст + ",
	                      |	ОтветыНаЗапросыЕГР.Данные";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	                      |ИЗ
	                      |	РегистрСведений.ОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП КАК ОтветыНаЗапросыЕГР
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПризнакиАрхивированияФайловДОСКонтролирующимиОрганами КАК СостояниеОбъектов
						  |			ПО 		(СостояниеОбъектов.Объект = ОтветыНаЗапросыЕГР.Запрос)
						  |				И	(СостояниеОбъектов.ИмяФайла = ОтветыНаЗапросыЕГР.ИмяФайла)
						  |				И	(СостояниеОбъектов.Владелец = Значение(Перечисление.ВидыАрхивируемыхМетаданныхДО.ОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП))
						  |
	                      |ГДЕ
	                      |	ОтветыНаЗапросыЕГР.Запрос = &Запрос";
	Запрос.УстановитьПараметр("Запрос", парамЗапрос);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДатаИзСтроки(СтрДата) Экспорт
	Если СтрДата = "" Тогда
		ВозвращаемаяДата = Дата(1, 1, 1);
	Иначе
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрДата, ".");
		Если Число(МассивПодстрок[0]) = 0 Тогда
			МассивПодстрок[0] = "1";
		КонецЕсли;
		Если Число(МассивПодстрок[1]) = 0 Тогда
			МассивПодстрок[1] = "1";
		КонецЕсли;
		Если Число(МассивПодстрок[2]) = 0 Тогда
			МассивПодстрок[2] = "1";
		КонецЕсли;
		ВозвращаемаяДата = Дата(МассивПодстрок[2], МассивПодстрок[1], МассивПодстрок[0]);
	КонецЕсли;
	
	Возврат ВозвращаемаяДата;
	
КонецФункции

Функция РазбитьБольшойФайлУведомленияНаНесколькоМаленьких(ОписаниеФайлаВыгрузки, УникальныйИдентификаторВызывающейФормы) Экспорт
	
	// фрагмент кода для управляемого приложения
	ИмяФайлаВыгрузки = ПолучитьКаталогВременныхФайлов() + ОписаниеФайлаВыгрузки.Имя;
	ПолучитьИзВременногоХранилища(ОписаниеФайлаВыгрузки.АдресДанных).Записать(ИмяФайлаВыгрузки);
	
	// делаем запас на погрешность расчетов в 1 Мб
	МаксимальныйРазмерФайлаУведомленияОКонтролируемыхСделках = МаксимальныйРазмерФайлаУведомленияОКонтролируемыхСделках() - 1024 * 1024 * 1;
	
	ТекстШапкиФайла 		= "";
	ТекстПодвалаФайла 		= "";
	ОткрывающийТэг			= "<УвКонтрСд>";
	ЗакрывающийТэг			= "</УвКонтрСд>";
	ЗакрывающийТэгСвКонтрСд = "</СвКонтрСд>";
	
	МассивФайлов = Новый Массив;
	
	// построчно считываем файл, если читать сразу весь текст, то возникает ошибка переполнения памяти
	ОбъектЧтениеТекста 		= Новый ЧтениеТекста(ИмяФайлаВыгрузки, "windows-1251");
	ФайлВыгрузки 			= Новый Файл(ИмяФайлаВыгрузки);
	РазмерИсходногоФайла 	= ФайлВыгрузки.Размер();
	ФайлВыгрузки 			= Неопределено;
	
	// считываем строку до тэга <УвКонтрСд>
	ТекстШапкиФайла 	= ОбъектЧтениеТекста.ПрочитатьСтроку(ОткрывающийТэг) + ОткрывающийТэг;
	ТекстПодвалаФайла 	= 	"		</УвКонтрСд>
							|	</Документ>
							|</Файл>";
	МаксимальныйРазмерФайлаУведомленияОКонтролируемыхСделкахБезРазмераПодвала = МаксимальныйРазмерФайлаУведомленияОКонтролируемыхСделках - РазмерВБайтах(ТекстПодвалаФайла);

	НовыйТекстШапкиФайла = "";
	РазмерСформированнойШапки = 0;
	ВремФайл 	= "";
	ИдФайлПерв 	= "";
	НомФайл 	= 1;
	КолФайл 	= (РазмерИсходногоФайла - РазмерВБайтах(ТекстШапкиФайла) + РазмерВБайтах(ТекстПодвалаФайла)) / (МаксимальныйРазмерФайлаУведомленияОКонтролируемыхСделках - РазмерВБайтах(ТекстШапкиФайла) - РазмерВБайтах(ТекстПодвалаФайла));
	Если КолФайл <> Цел(КолФайл) Тогда
		КолФайл = Цел(КолФайл) + 1;
	КонецЕсли;
	
	НовыйЗапись = НоваяЗаписьФайлаКомплекта(ИмяФайлаВыгрузки, ИдФайлПерв, ТекстШапкиФайла, ВремФайл, КолФайл, НомФайл, РазмерСформированнойШапки, НовыйТекстШапкиФайла);
	РазмерТекстаСодержимогоФайла = РазмерСформированнойШапки;
	РазмерЗакрывающегоТэгаСвКонтрСд = РазмерВБайтах(ЗакрывающийТэгСвКонтрСд);
	
	ЗакрывающийТэгСвКонтрСдСОтступом = "   " + ЗакрывающийТэгСвКонтрСд;
	
	// читаем текст до тэга </СвКонтрСд>
	ТекущаяСтрока = ОбъектЧтениеТекста.ПрочитатьСтроку(ЗакрывающийТэгСвКонтрСд);
	ЗакрывающийТэгСвКонтрСдСОтступом = "   " + ЗакрывающийТэгСвКонтрСд;
	
	Пока ТекущаяСтрока <> Неопределено Цикл
		
		РазмерТекущейСтроки = РазмерВБайтах(ТекущаяСтрока);
		РазмерТекстаСодержимогоФайла = РазмерТекстаСодержимогоФайла + РазмерТекущейСтроки + РазмерЗакрывающегоТэгаСвКонтрСд;
		
		Если РазмерТекстаСодержимогоФайла > МаксимальныйРазмерФайлаУведомленияОКонтролируемыхСделках Тогда
			// закрываем файл
			ПозицияЗакрывающегоТэгаУвКонтрСд = СтрНайти(ТекущаяСтрока, ЗакрывающийТэг);
			Если ПозицияЗакрывающегоТэгаУвКонтрСд = 0 Тогда
				НовыйЗапись.Записать(Символы.ПС + ТекстПодвалаФайла);
			КонецЕсли; 
				
			НовыйЗапись.Закрыть();
			НовыйЗапись = Неопределено;
			МассивФайлов.Добавить(ВремФайл);
			
			// если найден закрывающий тэг, то нового файла не создаем, цикл прерываем
			Если НЕ ПозицияЗакрывающегоТэгаУвКонтрСд = 0 Тогда
				Прервать;
			КонецЕсли;
			// открываем новый файл
			НомФайл = НомФайл + 1;
			НовыйЗапись = НоваяЗаписьФайлаКомплекта(ИмяФайлаВыгрузки, ИдФайлПерв, ТекстШапкиФайла, ВремФайл, КолФайл, НомФайл, РазмерСформированнойШапки, НовыйТекстШапкиФайла);
			РазмерТекстаСодержимогоФайла = РазмерСформированнойШапки + РазмерТекущейСтроки;
		КонецЕсли;
		
        ПредыдущееЗначениеТекущейСтроки = ТекущаяСтрока;
		ТекущаяСтрока = ОбъектЧтениеТекста.ПрочитатьСтроку(ЗакрывающийТэгСвКонтрСд);
		
		Если ТекущаяСтрока = Неопределено Тогда
			НовыйЗапись.Записать(ПредыдущееЗначениеТекущейСтроки);
		Иначе 
			НовыйЗапись.Записать(ПредыдущееЗначениеТекущейСтроки + ЗакрывающийТэгСвКонтрСдСОтступом);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектЧтениеТекста.Закрыть();

	// если мы еще не закрыли этот файл
	Если МассивФайлов.Найти(ВремФайл) = Неопределено Тогда
		// подвал не добавляем в файл, поскольку сюда записался конец общего файла
		НовыйЗапись.Закрыть();
		НовыйЗапись = Неопределено;
		МассивФайлов.Добавить(ВремФайл);
	КонецЕсли;
	
	ОбъектЧтениеТекста = Неопределено;
	
	// фрагмент кода для управляемого приложения
	МассивОписанийФайлов = Новый Массив;
	Для каждого ФайлМассива Из МассивФайлов Цикл
		Файл = Новый Файл(ФайлМассива);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлМассива), УникальныйИдентификаторВызывающейФормы);
		МассивОписанийФайлов.Добавить(Новый Структура("Имя, ПолноеИмя, Расширение, АдресДанных", Файл.Имя, Файл.ПолноеИмя, Файл.Расширение, АдресВоВременномХранилище));
	КонецЦикла; 
	
	Возврат МассивОписанийФайлов;
	
КонецФункции

Функция ПолучитьКаталогВременныхФайлов() Экспорт
	
	ВременныйКаталог = КаталогВременныхФайлов();
	РазделительПутиОС = ПолучитьРазделительПути();
	Возврат ?(Прав(ВременныйКаталог, 1) = РазделительПутиОС, ВременныйКаталог, ВременныйКаталог + РазделительПутиОС);
	
КонецФункции

Функция НоваяЗаписьФайлаКомплекта(ИмяФайлаВыгрузки, ИдФайлПерв, Знач ТекстШапкиФайла, ВремФайл, КолФайл, НомФайл, РазмерСформированнойШапки, НовыйТекстШапкиФайла)
	
	КороткоеИмяФайлаБезГУИДНаКонце = КороткоеИмяФайлаБезГУИДНаКонце(ИмяФайлаВыгрузки);
	
	ИдентификационныйНомерФайла = Новый УникальныйИдентификатор;
	ВремФайл = ПолучитьКаталогВременныхФайлов() + КороткоеИмяФайлаБезГУИДНаКонце + ИдентификационныйНомерФайла + ".xml";
	НовыйЗапись = Новый ЗаписьТекста(ВремФайл, "windows-1251");

	Если НЕ ЗначениеЗаполнено(ИдФайлПерв) Тогда
		ИдФайлПерв = КороткоеИмяФайлаБезГУИДНаКонце + ИдентификационныйНомерФайла;
	КонецЕсли;
	
	ФайлВыгрузки = Новый Файл(ИмяФайлаВыгрузки);
	ИдФайлИсх = ФайлВыгрузки.ИмяБезРасширения;
	ФайлВыгрузки = Неопределено;
	
	ДополнениеФайлаВерсии502 = "ВерсФорм=""%1"" ИдФайлИсх=""%2"" ИдФайлПерв=""%3"" КолФайл=""%4"" НомФайл=""%5""";
	ДополнениеФайлаВерсии502 = СтрЗаменить(ДополнениеФайлаВерсии502, "%1", "5.02");
	ДополнениеФайлаВерсии502 = СтрЗаменить(ДополнениеФайлаВерсии502, "%2", ИдФайлИсх);
	ДополнениеФайлаВерсии502 = СтрЗаменить(ДополнениеФайлаВерсии502, "%3", ИдФайлПерв);
	ДополнениеФайлаВерсии502 = СтрЗаменить(ДополнениеФайлаВерсии502, "%4", КолФайл);
	ДополнениеФайлаВерсии502 = СтрЗаменить(ДополнениеФайлаВерсии502, "%5", НомФайл);
	
	ОбъектФайл = Новый Файл(ИмяФайлаВыгрузки);
	ИмяБезРасширения = ОбъектФайл.ИмяБезРасширения;

	ТекстШапкиФайла = СтрЗаменить(ТекстШапкиФайла, "ВерсФорм=""5.01""", ДополнениеФайлаВерсии502);
	ТекстШапкиФайла = СтрЗаменить(ТекстШапкиФайла, "ИдФайл=" + """" + ИмяБезРасширения + """", "ИдФайл=" + """" + КороткоеИмяФайлаБезГУИДНаКонце + ИдентификационныйНомерФайла + """");
	
	НовыйТекстШапкиФайла = ТекстШапкиФайла;
	РазмерСформированнойШапки = РазмерВБайтах(НовыйТекстШапкиФайла);
	НовыйЗапись.Записать(СокрЛП(ТекстШапкиФайла));
	
	Возврат НовыйЗапись;

КонецФункции

Функция КороткоеИмяФайлаБезГУИДНаКонце(ИмяФайлаВыгрузки)
	ФайлНаДиске = Новый Файл(ИмяФайлаВыгрузки);
	КороткоеИмяФайла = ФайлНаДиске.ИмяБезРасширения;
	
	КороткоеИмяФайлаБезГУИДНаКонце = "";
	Строки = СтрЗаменить(КороткоеИмяФайла,"_",Символы.ПС);
	Для НомерСтроки = 1 По 6 Цикл
		КороткоеИмяФайлаБезГУИДНаКонце = КороткоеИмяФайлаБезГУИДНаКонце + СтрПолучитьСтроку(Строки,НомерСтроки) + "_";
	КонецЦикла;
	
	Возврат КороткоеИмяФайлаБезГУИДНаКонце;
	
КонецФункции

Функция РазмерВБайтах(Знач ПроверяемыйТекст)
	
	// каждый символ строки кодируется 1 байтом, каждый символ переноса строки кодируется 2 байтами
	КоличествоВхожденийПС 	= СтрЧислоВхождений(ПроверяемыйТекст, Символы.ПС); 
	ПолнаяДлинаСтроки 		= СтрДлина(ПроверяемыйТекст);
	ДлинаСтрокиБезСимволаПС = ПолнаяДлинаСтроки - КоличествоВхожденийПС;
	Результат = ДлинаСтрокиБезСимволаПС + КоличествоВхожденийПС * 2;
	
	Возврат Результат;
	
КонецФункции


Функция ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках(КороткоеИмяФайла) Экспорт
	
	Возврат ВРег(Лев(КороткоеИмяФайла, 10)) = "UT_UVKNRSD";
	
КонецФункции

Функция ЭтоФайлВыгрузкиУведомленияОРозничныхЦенахНаТабак(КороткоеИмяФайла) Экспорт
	
	Возврат ВРег(Лев(КороткоеИмяФайла, 11)) = "ON_UVCENTAB";
	
КонецФункции

Функция ЭтоФайлВыгрузкиДекларацияНДС(КороткоеИмяФайла) Экспорт
	
	Возврат ВРег(Лев(КороткоеИмяФайла, 7)) = "NO_NDS_";	
	
КонецФункции



Функция МаксимальныйРазмерФайлаУведомленияОКонтролируемыхСделках() Экспорт
	Возврат 1024 * 1024 * 100;
КонецФункции


//////////////////////////////////////////////////////////////////////////////////
//// ДОКУМЕНТООБОРОТ С ФСС
////

Функция СформироватьФайлОтправкиВФССССервера(КороткоеИмяФайлаПакета, СтрокаBase64ФайлаПакета, ЭтоАдреса = Истина, Адрес = Неопределено, ТипОтправляемогоДокумента = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	//файл отправки является файлом пакета
	Если ЭтоАдреса Тогда
		ДвоичныеДанныеФайлаПакета = ПолучитьИзВременногоХранилища(СтрокаBase64ФайлаПакета);
		Результат = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаПакета, Адрес);
	Иначе
		Результат = СтрокаBase64ФайлаПакета;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьРезультатКонкретнойОтправкиФССССервера(ОтправкаСсылка, ПолученРезультатОтСервераФСС, НастройкиССервера) Экспорт
	
	ТипОтправляемогоДокумента = ПолучитьТипВидаОтправляемогоДокументаПоСсылкеНаОбъектОтправкиДляФСС(ОтправкаСсылка);
	
	АдресСервера = СерверПриемаОтчетностиФСС(ТипОтправляемогоДокумента);
	
	Если АдресСервера = Неопределено Тогда
		
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось определить тип документа!'"));
		Возврат;
	
	КонецЕсли;
	
	НастройкиССервера = Новый Структура("АдресСервера, РазделениеВключено", АдресСервера, ОбщегоНазначения.РазделениеВключено());
	
	РезультатОтправки = ПолучитьРезультатОтправкиФСС(АдресСервера, ОтправкаСсылка.ИдентификаторОтправкиНаСервере, ОтправкаСсылка, ТипОтправляемогоДокумента);
	ПолученРезультатОтСервераФСС = (РезультатОтправки <> Неопределено);
	СохранитьРезультатОтправкиФСС(ОтправкаСсылка, РезультатОтправки);
	
	Если НЕ ПолученРезультатОтСервераФСС Тогда
		ПредставлениеОтчетаОтправки = ПредставлениеОтчета(ОтправкаСсылка.ОтчетСсылка);
		НастройкиССервера.Вставить("ПредставлениеОтчетаОшибки", ПредставлениеОтчетаОтправки);
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьРезультатОтправкиФСС(АдресСервера, ИдентификаторОтправкиНаСервере, ОтправкаСсылка, ТипОтправляемогоДокумента = Неопределено)
	
	Результат = Новый Структура;
	
	НаименованиеОтчета = "";
	
	СсылкаКвитанция = "";
	СсылкаПротоколОшибок = "";
	СтатусОтчета = "";
	ЦветСтатуса = ЦветаСтиля.ЦветНезавершившейсяОтправкиБРО;
	СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен;
	ЕстьОшибки = Ложь;
	
	//запрос протокола обработки
	КодировкаФайла = "utf-8";
	ОтчетСдан = Неопределено;
	ОтчетСданСОшибками = Неопределено;
	ЕстьОшибкиФорматногоКонтроля = Неопределено;
	ЕстьПрочиеОшибки = Неопределено;
	ТекстПоследнейОшибкиВебСервиса = "";
	КвитанцияОтсутствует = Неопределено;
	ДвоичныеДанныеКвитанции = Неопределено;
	ТЗОбработки = Новый ТаблицаЗначений;
	
	ИспользуетсяВебСервис = (СтрНайти(ИдентификаторОтправкиНаСервере, "-") <> 9);
	
	Если ИспользуетсяВебСервис Тогда
		// если отправка с использованием API
		
		// устанавливаем соединение с сервером
		Соединение = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета(АдресСервера);
		Если Соединение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТипОтправляемогоДокумента <> Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС
		И ТипОтправляемогоДокумента <> Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС Тогда
			РесурсНаСервере = "/F4ExtService/ExtService.svc";
			ПространствоИменСервиса = "http://tempuri.org/";
			ИмяСервиса = "IExtService";
			
		Иначе
			РесурсНаСервере = "/ExtService/GatewayService.svc";
			ПространствоИменСервиса = "http://asystems.fss";
			ИмяСервиса = "IGatewayService";
		КонецЕсли;
		
		// формируем общие заголовки запроса SOAP
		ЗаголовкиHTTP = Новый Соответствие();
		ЗаголовкиHTTP.Вставить("Content-Type", "application/soap+xml; charset=utf-8");
		ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
		
		ТекстЗапросаSOAP =
			"<s:Envelope xmlns:s=""http://www.w3.org/2003/05/soap-envelope"" xmlns:a=""http://www.w3.org/2005/08/addressing"">
			|	<s:Header>
			|		<a:Action s:mustUnderstand=""1"">" + ПространствоИменСервиса + ?(Прав(ПространствоИменСервиса, 1) <> "/", "/", "")
						+ ИмяСервиса + "/UploadGetByExtID</a:Action>
			|		<a:To s:mustUnderstand=""1"">http://" + АдресСервера + РесурсНаСервере + "</a:To>
			|	</s:Header>
			|	<s:Body>
			|		<UploadGetByExtID xmlns=""" + ПространствоИменСервиса + """>
			|			<id>" + ИдентификаторОтправкиНаСервере + "</id>
			|		</UploadGetByExtID>
			|	</s:Body>
			|</s:Envelope>";
		ИмяФайлаSOAP = ПолучитьИмяВременногоФайла();
		ТекстовыйФайлSOAP = Новый ЗаписьТекста(ИмяФайлаSOAP, "utf-8");
		ТекстовыйФайлSOAP.Записать(ТекстЗапросаSOAP);
		ТекстовыйФайлSOAP.Закрыть();
		
		// посылаем запрос
		ФайлРезультата = ПолучитьИмяВременногоФайла();
		Попытка
			Соединение.ОтправитьДляОбработки(ИмяФайлаSOAP, РесурсНаСервере, ФайлРезультата, ЗаголовкиHTTP);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			Для ИндексПричиныОшибки = 1 По 5 Цикл
				Если СтрНайти(ИнформацияОбОшибке.Описание, "ExtServiceException") > 0 Тогда
					ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Сбой на сервере ФСС.'"));
					Возврат Результат;
				КонецЕсли;
				
				Если ИнформацияОбОшибке.Причина = Неопределено Тогда
					Прервать;
				КонецЕсли;
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
			КонецЦикла;
			
			Возврат Неопределено;
		КонецПопытки;
		
		ТекстовыйФайлРезультата = Новый ЧтениеТекста(ФайлРезультата, "utf-8");
		ТекстРезультата = ТекстовыйФайлРезультата.Прочитать();
		ТекстовыйФайлРезультата.Закрыть();
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлРезультата);
		
		Если НЕ ЗначениеЗаполнено(ТекстРезультата) Тогда
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Сбой на сервере ФСС.'"));
			Возврат Результат;
		КонецЕсли;
		
		ТекстОшибки = "";
		УзелРезультата = ИзвлечьРезультатSOAP(ТекстРезультата, "UploadGetByExtID", ТекстОшибки);
		Если УзелРезультата = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки);
			Иначе
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Ошибка формата ответа сервера ФСС!'"));
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
		
		ЗначениеСостояния = Неопределено;
		УзелСостояния = НайтиУзел(УзелРезультата, "STATE_ID");
		Если УзелСостояния <> Неопределено Тогда
			Попытка
				ЗначениеСостояния = XMLЗначение(Тип("Число"), УзелСостояния.Значение);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		ТекстСостояния = "";
		УзелТекстаСостояния = НайтиУзел(УзелРезультата, "STATE");
		Если УзелТекстаСостояния <> Неопределено Тогда
			ТекстСостояния = СокрЛП(XMLЗначение(Тип("Строка"), УзелТекстаСостояния.Значение));
		КонецЕсли;
		
		ЗначениеДатыОбновления = Неопределено;
		УзелДатыОбновления = НайтиУзел(УзелРезультата, "MD_DATE");
		Если УзелДатыОбновления <> Неопределено Тогда
			Попытка
				ЗначениеДатыОбновления = XMLЗначение(Тип("Дата"), УзелДатыОбновления.Значение);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ЗначениеСостояния <> Неопределено Тогда
			УзелОшибки = НайтиУзел(УзелРезультата, "LAST_EXCEPTION");
			ТекстОшибки = "";
			Если УзелОшибки <> Неопределено Тогда
				ТекстОшибки = СокрЛП(XMLЗначение(Тип("Строка"), УзелОшибки.Значение));
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ВременныйФайлОшибки = ПолучитьИмяВременногоФайла();
					ДвоичныеДанныеОшибки = Base64Значение(ТекстОшибки);
					ДвоичныеДанныеОшибки.Записать(ВременныйФайлОшибки);
					
					ОбъектЧтениеТекста = Новый ЧтениеТекста(ВременныйФайлОшибки, "windows-1251");
					ТекстОшибки = ОбъектЧтениеТекста.Прочитать();
					ОбъектЧтениеТекста.Закрыть();
					ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлОшибки);
				КонецЕсли;
				ТекстПоследнейОшибкиВебСервиса = ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		УзелПротоколаРезультата = НайтиУзел(УзелРезультата, "FILE_TICKET");
		ЕстьПротокол = (УзелПротоколаРезультата <> Неопределено);
		Если ЕстьПротокол Тогда
			ФайлРезультата = ПолучитьИмяВременногоФайла();
			ДвоичныеДанныеПротоколаРезультата = Base64Значение(УзелПротоколаРезультата.Значение);
			ДвоичныеДанныеПротоколаРезультата.Записать(ФайлРезультата);
			КодировкаФайла = "windows-1251";
			
		Иначе
			ФайлРезультата = Неопределено;
			
			Если ЗначениеСостояния = Неопределено Тогда
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Ошибка формата ответа сервера ФСС!'"));
				Возврат Результат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеСостояния <> Неопределено Тогда
			// проанализировать состояние обработки
			РезультатФормирования = СформироватьТаблицуОбработки(
				ЗначениеСостояния,
				ТекстСостояния,
				ЗначениеДатыОбновления,
				ТекстОшибки,
				ЕстьПротокол,
				ТипОтправляемогоДокумента);
			
			Если НЕ ЕстьПротокол Тогда
				ТЗОбработки 				= РезультатФормирования.ТЗОбработки;
			КонецЕсли;
			ОтчетСдан 						= РезультатФормирования.ОтчетСдан;
			ОтчетСданСОшибками				= РезультатФормирования.ОтчетСданСОшибками;
			ЕстьОшибкиФорматногоКонтроля 	= РезультатФормирования.ЕстьОшибкиФорматногоКонтроля;
			ЕстьПрочиеОшибки 				= РезультатФормирования.ЕстьПрочиеОшибки;
		КонецЕсли;
		
		УзелЗашифрованнойКвитанции = НайтиУзел(УзелРезультата, "FILE_TICKET_ENC");
		Если УзелЗашифрованнойКвитанции <> Неопределено Тогда
			ДвоичныеДанныеКвитанции = Base64Значение(УзелЗашифрованнойКвитанции.Значение);
		Иначе
			КвитанцияОтсутствует = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипОтправляемогоДокумента <> Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС
	И ТипОтправляемогоДокумента <> Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС Тогда
		РесурсСервера = "/fss/statusreport?id=" + ИдентификаторОтправкиНаСервере;
		ФайлРезультата = ПолучитьРезультатЗапросаGet(АдресСервера, РесурсСервера);
		
	Иначе
		// если реестр был отправлен без использования API
		РесурсСервера = "/home/Results?id=" + ИдентификаторОтправкиНаСервере;
		ФайлРезультата = ПолучитьРезультатЗапросаGet(АдресСервера, РесурсСервера);
	КонецЕсли;
	
	Если ФайлРезультата <> Неопределено ИЛИ ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС
		ИЛИ ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС ИЛИ ИспользуетсяВебСервис Тогда
		
		Если ФайлРезультата <> Неопределено Тогда
			// получен протокол обработки
			Попытка
				// извлекаем таблицу обработки из файла результата
				ТЗОбработки = ИзвлечьИзФайлаТаблицуОбработки(ФайлРезультата, ТипОтправляемогоДокумента, КодировкаФайла, ИспользуетсяВебСервис);
			Исключение
				// обрабатываем ошибки, возникшие в случае, если невозможно разобрать ответ от сервера
				ОбъектЧтениеТекста = Новый ЧтениеТекста;
				ЧтениеТекстаОткрытьНаСервере(ОбъектЧтениеТекста, ФайлРезультата);
				ТекстОтвета = ОбъектЧтениеТекста.Прочитать();
				ОбъектЧтениеТекста.Закрыть();
				
				Если (ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС
				ИЛИ ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС ИЛИ ИспользуетсяВебСервис)
				И (СокрЛП(ТекстОтвета) = "OK;") Тогда
					//ситуация, когда отчет еще не обработан
					ФайлРезультата = Неопределено;
				ИначеЕсли НЕ ИспользуетсяВебСервис Тогда
					
					Если СтрНайти(ВРЕГ(ТекстОтвета), НСтр("ru = 'НЕДОСТУПЕН'")) <> 0 Тогда
						ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Сервер ФСС недоступен'"));
					Иначе
						ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось разобрать ответ, полученный от сервера ФСС'"));
					КонецЕсли;
					
					Возврат Результат;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		
		Если ФайлРезультата <> Неопределено Тогда
			// читаем содержимое протокола обработки
			ОбъектЧтение = Новый ЧтениеТекста(ФайлРезультата, КодировкаФайла);
			стрРезультатОбработки = СокрЛП(ОбъектЧтение.Прочитать());
			
			ОбъектЧтение.Закрыть();
		Иначе
			//ситуация, когда отчет еще не обработан
			стрРезультатОбработки = "";
		КонецЕсли;
		
		// анализируем содержимое страницы протокола обработки
		Если (СтрНайти(стрРезультатОбработки, "invoice?id") > 0 И НЕ ИспользуетсяВебСервис)
			ИЛИ ОтчетСдан = Истина ИЛИ ОтчетСданСОшибками = Истина Тогда
			
			// есть ссылка на квитанцию - отчет принят
			Если СтрНайти(стрРезультатОбработки, "invoice?id") > 0 И КвитанцияОтсутствует <> Истина Тогда
				Если ТипОтправляемогоДокумента <> Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС
				И ТипОтправляемогоДокумента <> Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС
				И НЕ ИспользуетсяВебСервис Тогда
					СсылкаКвитанция = "invoice?id=" + ИдентификаторОтправкиНаСервере;
				Иначе
					НомерОтправкиНаСервере = ТекстПослеПрефикса(стрРезультатОбработки, "invoice?id=", """");
					СсылкаКвитанция = "invoice?id=" + НомерОтправкиНаСервере;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрНайти(стрРезультатОбработки, "invoice?lid") > 0 ИЛИ ОтчетСданСОшибками = Истина Тогда
				// есть ссылка на протокол ошибок логического контроля
				СтатусОтправки = Перечисления.СтатусыОтправки.ПринятЕстьОшибки;
				Если СтрНайти(стрРезультатОбработки, "invoice?lid") > 0 Тогда
					СсылкаПротоколОшибок = "invoice?lid=" + ИдентификаторОтправкиНаСервере;
				КонецЕсли;
				СтатусОтчета = НСтр("ru = 'Сдан, обнаружены ошибки при логическом контроле'");
				ЦветСтатуса = ЦветаСтиля.ЦветОшибкиВПротоколеБРО;
				ЕстьОшибки = Истина;
			Иначе
				СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
				СтатусОтчета = НСтр("ru = 'Сдан, ошибок не обнаружено.'");
				ЦветСтатуса = ЦветаСтиля.ЦветПоложительногоПротокола;
			КонецЕсли;
			
		ИначеЕсли СтрНайти(стрРезультатОбработки, "invoice?fid") > 0 ИЛИ ЕстьОшибкиФорматногоКонтроля = Истина
			ИЛИ ((ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС
			ИЛИ ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС ИЛИ ИспользуетсяВебСервис)
			И (ТЗОбработки.Количество() = 0) И (стрРезультатОбработки <> "OK;") И (стрРезультатОбработки <> "")) Тогда
			
			// есть ссылка на протокол ошибок форматного контроля - отчет не принят
			СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят;
			Если СтрНайти(стрРезультатОбработки, "invoice?fid") > 0 Тогда
				СсылкаПротоколОшибок = "invoice?fid=" + ИдентификаторОтправкиНаСервере;
			КонецЕсли;
			СтатусОтчета = НСтр("ru = 'Не принят, обнаружены ошибки при форматном контроле'");
			ЦветСтатуса = ЦветаСтиля.ЦветОшибкиВПротоколеБРО;
			ЕстьОшибки = Истина;
		ИначеЕсли ЕстьОшибкиСтатуса(ТЗОбработки) ИЛИ ЕстьПрочиеОшибки = Истина Тогда
			СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят;
			СтатусОтчета = НСтр("ru = 'Не принят, обнаружены ошибки'");
			ЦветСтатуса = ЦветаСтиля.ЦветОшибкиВПротоколеБРО;
			ЕстьОшибки = Истина;
		Иначе
			//отчет еще не обработан
			СтатусОтчета = НСтр("ru = 'Находится в обработке, попробуйте через некоторое время использовать в отчете кнопку ""Обновить""'");
		КонецЕсли;
		
		ПротоколОшибок = "";
		ПротоколОшибокЭтоHTML = Ложь;
		ПротоколОшибокВозвращенВебСервисом = (ЗначениеЗаполнено(ТекстПоследнейОшибкиВебСервиса)
			И (ЕстьОшибкиФорматногоКонтроля = Истина ИЛИ ОтчетСданСОшибками = Истина)
			И ТипОтправляемогоДокумента <> Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС
			И ТипОтправляемогоДокумента <> Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС);
		
		Если СсылкаПротоколОшибок <> "" ИЛИ ПротоколОшибокВозвращенВебСервисом
			ИЛИ ((ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС
			ИЛИ ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС
			ИЛИ (ИспользуетсяВебСервис И ТЗОбработки.Количество() = 0))
			И (ФайлРезультата <> Неопределено)) Тогда
			
			Если ПротоколОшибокВозвращенВебСервисом Тогда
				ПротоколОшибок = ТекстПоследнейОшибкиВебСервиса;
				
			Иначе
				Если СсылкаПротоколОшибок <> "" Тогда
					ФайлРезультата = ПолучитьРезультатЗапросаGet(АдресСервера, СсылкаПротоколОшибок);
					КодировкаФайла = "utf-8";
				КонецЕсли;
				// считаем содержимое протокола ошибок
				ОбъектЧтение = НовыйЧтениеТекстаНаСервере(ФайлРезультата);
				ПротоколОшибок = СокрЛП(ОбъектЧтение.Прочитать());
			КонецЕсли;
			
			ПротоколОшибокЭтоHTML = СтрНайти(ВРЕГ(ПротоколОшибок), "HTML") > 0
				И ((СсылкаПротоколОшибок <> "" И НЕ ИспользуетсяВебСервис)
				ИЛИ ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС
				ИЛИ ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС
				ИЛИ (ИспользуетсяВебСервис И ТЗОбработки.Количество() = 0));
			
			Если ПротоколОшибокЭтоHTML И НЕ ПротоколОшибокВозвращенВебСервисом Тогда
				ОбъектЧтение = Новый ЧтениеТекста(ФайлРезультата, КодировкаФайла);
				ПротоколОшибок = СокрЛП(ОбъектЧтение.Прочитать());
			КонецЕсли;
		КонецЕсли;
		
		Если ПротоколОшибокЭтоHTML Тогда
			Протокол = ПротоколОшибок;
			
			Если ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС
			ИЛИ ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС
			ИЛИ ИспользуетсяВебСервис Тогда
				Протокол = ПротоколHTMLБезКартинокИСсылок(Протокол);
			КонецЕсли;
			
		Иначе
			Протокол = ГенерироватьHTMLПротоколаОбработкиФСС(ИдентификаторОтправкиНаСервере, ТЗОбработки, ПротоколОшибок, СтатусОтчета, ЦветСтатуса, ОтправкаСсылка, ЕстьОшибки);
		КонецЕсли;
		
		//заполняем результирующую структуру
		Результат = Новый Структура("ДатаПолученияРезультата, СтатусОтправки, Протокол, Квитанция");
		Результат.Вставить("ДатаПолученияРезультата", ТекущаяДатаСеанса());
		Результат.Вставить("Протокол", Протокол);
		Результат.Вставить("СтатусОтправки", СтатусОтправки);
		
		Если СсылкаКвитанция <> "" ИЛИ ДвоичныеДанныеКвитанции <> Неопределено Тогда
			//по полученной ссылке скачаем квитанцию
			Если ДвоичныеДанныеКвитанции = Неопределено Тогда
				ФайлРезультата = ПолучитьРезультатЗапросаGet(АдресСервера, СсылкаКвитанция);
				ДвоичныеДанныеКвитанции = Новый ДвоичныеДанные(ФайлРезультата);
			КонецЕсли;
			Результат.Вставить("Квитанция", ДвоичныеДанныеКвитанции);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СохранитьРезультатОтправкиФСС(ОправкаСсылка, РезультатОтправки)
	
	Если РезультатОтправки <> Неопределено И РезультатОтправки.Свойство("Протокол") Тогда
		ОтправкаОбъект = ОправкаСсылка.ПолучитьОбъект();
		ОтправкаОбъект.ДатаПолученияРезультата = РезультатОтправки.ДатаПолученияРезультата;
		ОтправкаОбъект.СтатусОтправки = РезультатОтправки.СтатусОтправки;
		ОтправкаОбъект.Протокол = Новый ХранилищеЗначения(РезультатОтправки.Протокол);
		Если РезультатОтправки.Квитанция <> Неопределено Тогда
			ОтправкаОбъект.Квитанция = Новый ХранилищеЗначения(РезультатОтправки.Квитанция);
		КонецЕсли;
		ОтправкаОбъект.Записать();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРезультатЗапросаGet(АдресСервера, РесурсСервера)

	// устанавливаем соединение с сервером
	Соединение = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета(АдресСервера);
	Если Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// посылаем запрос
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	Попытка
		Соединение.Получить(РесурсСервера, ФайлРезультата);
		Соединение = Неопределено;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ФайлРезультата;
	
КонецФункции

Функция ГенерироватьHTMLПротоколаОбработкиФСС(ИдентификаторОтчета, ТЗОбработки, ПротоколОшибок, СтатусОтчета, ЦветСтатуса, ОтправкаСсылка, ЕстьОшибки)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Шаблон = ПолучитьМакет("ФССШаблонДляHTML");
	
	СекцияШапка = Шаблон.ПолучитьОбласть("Шапка");
	
	СвойстваОрганизации 			= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(ОтправкаСсылка.Организация, ,"НаимЮЛПол, ИННЮЛ");
	ПолноеНаименованиеОрганизации 	= СвойстваОрганизации.НаимЮЛПол;
	ИННОрганизации 					= СвойстваОрганизации.ИННЮЛ;
	
	// Наименование протокола 
	НаименованиеПротокола = "";
	Если ЕстьОшибки Тогда
		НаименованиеПротокола = НСтр("ru = 'Протокол ошибок'");
	Иначе
		НаименованиеПротокола = НСтр("ru = 'Протокол о сдаче'");
	КонецЕсли;
	СекцияШапка.Параметры.НаименованиеПротокола = НаименованиеПротокола;
	
	СведенияПоОбъекту 	= СведенияПоОтправляемымОбъектам(ОтправкаСсылка.ОтчетСсылка);
	НаименованиеОргана 	= СведенияПоОбъекту.ПредставлениеКонтролирующегоОргана;
	НаименованиеОтчета 	= СведенияПоОбъекту.Наименование;
	
	СекцияШапка.Параметры.Организация 	= ПолноеНаименованиеОрганизации;
	СекцияШапка.Параметры.ИНН 			= НСтр("ru = 'ИНН '") + ИННОрганизации;
	СекцияШапка.Параметры.Получатель 	= НаименованиеОргана;
	СекцияШапка.Параметры.Отчет 		= НаименованиеОтчета;
	СекцияШапка.Параметры.СтатусОтчета 	= СтатусОтчета;
	СекцияШапка.Параметры.Файл 			= ИдентификаторОтчета;
	СекцияШапка.Области.СтатусОтчета.ЦветТекста = ЦветСтатуса;
	
	ТабДок.Вывести(СекцияШапка);
	
	ПротоколОшибокОтображаемый = СокрЛП(ПротоколОшибок);
	
	СекцияСтрока = Шаблон.ПолучитьОбласть("Строка");
	Для каждого СтрокаТЗ Из ТЗОбработки Цикл
		ОписаниеОшибкиИзТаблицы = СокрЛП(СтрокаТЗ.ОписаниеОшибки);
		Если ЗначениеЗаполнено(ОписаниеОшибкиИзТаблицы) И СтрДлина(ПротоколОшибокОтображаемый) >= СтрДлина(ОписаниеОшибкиИзТаблицы)
			И СтрДлина(ПротоколОшибокОтображаемый) <= СтрДлина(ОписаниеОшибкиИзТаблицы) + 20
			И Прав(ВРег(ПротоколОшибокОтображаемый), СтрДлина(ОписаниеОшибкиИзТаблицы)) = ВРег(ОписаниеОшибкиИзТаблицы) Тогда
			ПротоколОшибокОтображаемый = "";
		КонецЕсли;
		
		СекцияСтрока.Параметры.Заполнить(СтрокаТЗ);
		ТабДок.Вывести(СекцияСтрока);
	КонецЦикла;
	
	СекцияПодвал = Шаблон.ПолучитьОбласть("Подвал");
	ТабДок.Вывести(СекцияПодвал);
	
	Если ПротоколОшибокОтображаемый <> "" Тогда
		СекцияПротоколОшибок = Шаблон.ПолучитьОбласть("ПротоколОшибок");
		СекцияПротоколОшибок.Параметры.ПротоколОшибок = ПротоколОшибокОтображаемый;
		ТабДок.Вывести(СекцияПротоколОшибок);
	КонецЕсли;
	
	ИмяТемпФайла = ПолучитьИмяВременногоФайла();
	ТабДок.Записать(ИмяТемпФайла, ТипФайлаТабличногоДокумента.HTML);
	ТекстHTML = Новый ТекстовыйДокумент;
	ТекстHTML.Прочитать(ИмяТемпФайла);
	ТекстHTML = ТекстHTML.ПолучитьТекст();
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ЕстьОшибкиСтатуса(ТЗОбработки)
	
	Для каждого СтрокаТЗ Из ТЗОбработки Цикл
		Если СтрокаТЗ.Статус = "Ошибка" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ИзвлечьИзФайлаТаблицуОбработки(ФайлОтвета, ТипОтправляемогоДокумента = Неопределено, КодировкаФайла = "utf-8", ИспользуетсяВебСервис = Ложь)
	
	ТЗОбработки = Новый ТаблицаЗначений;
	ТЗОбработки.Колонки.Добавить("СтадияОбработки");
	ТЗОбработки.Колонки.Добавить("Статус");
	ТЗОбработки.Колонки.Добавить("Дата");
	ТЗОбработки.Колонки.Добавить("КодОшибки");
	ТЗОбработки.Колонки.Добавить("ОписаниеОшибки");
	ТЗОбработки.Колонки.Добавить("Действие");
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.ОткрытьФайл(ФайлОтвета, КодировкаФайла);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	ЭлементыTABLE = ДокументDOM.ПолучитьЭлементыПоИмени("TABLE");
	
	СтрокиТаблицыHTML = ЭлементыTABLE[?(ТипОтправляемогоДокумента <> Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС
		И ТипОтправляемогоДокумента <> Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС И НЕ ИспользуетсяВебСервис, 2, 0)].ДочерниеУзлы;
	
	//перебираем все строки из таблицы обработки, первая строка таблицы (индекс 0)- заголовки - не используем
	КолвоСтрок = СтрокиТаблицыHTML.Количество();
	Для НомСтроки = 1 По (КолвоСтрок - 1) Цикл
		СтрокаТаблицыHTML = СтрокиТаблицыHTML[НомСтроки];
		НоваяСтрокаТЗ = ТЗОбработки.Добавить();
		//перебираем ячейки строки таблицы (выделяя их из общего списка узлов по типу), заполняем ТЗ
		УзлыСтрокиHTML = СтрокаТаблицыHTML.ДочерниеУзлы;
		НомЯчейки = 0;
		Для каждого УзелСтрокиHTML Из УзлыСтрокиHTML Цикл
			Если УзелСтрокиHTML.ТипУзла = ТипУзлаDOM.Элемент Тогда
				НоваяСтрокаТЗ[НомЯчейки] = СокрЛП(УзелСтрокиHTML.ТекстовоеСодержимое);
				НомЯчейки = НомЯчейки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗОбработки;
	
КонецФункции

Функция ПротоколHTMLБезКартинокИСсылок(ПротоколHTML)
	
	Результат = ПротоколHTML;
	
	Для НомерУдаляемогоТэга = 1 По 2 Цикл
		
		Если НомерУдаляемогоТэга = 1 Тогда
			НачалоТэга = "<IMG ";
			ЗавершениеТэга = ">";
		ИначеЕсли НомерУдаляемогоТэга = 2 Тогда
			НачалоТэга = "<A ";
			ЗавершениеТэга = "</A>";
		КонецЕсли;
		
		Пока Истина Цикл
			
			ПозицияТэга = СтрНайти(ВРег(Результат), НачалоТэга);
			Если ПозицияТэга = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ПротоколДоТэга = Лев(Результат, ПозицияТэга - 1);
			ПротоколСТэга = Сред(Результат, ПозицияТэга);
			
			ПозицияЗавершенияТэга = СтрНайти(ВРег(ПротоколСТэга), ЗавершениеТэга);
			ПротоколПослеТэга = "";
			Если ПозицияЗавершенияТэга > 0 Тогда
				ПротоколПослеТэга = Сред(ПротоколСТэга, ПозицияЗавершенияТэга + СтрДлина(ЗавершениеТэга));
			КонецЕсли;
			
			Результат = ПротоколДоТэга + ПротоколПослеТэга;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьТаблицуОбработки(
	ПолноеСостояние,
	ТекстСостояния,
	ДатаОбновления,
	ТекстОшибки,
	ТолькоПроанализироватьСостояния = Ложь,
	ТипОтправляемогоДокумента = Неопределено)
	
	СостояниеПолучен = 0;
	СостояниеОшибкаПолучения = 10;
	СостояниеЭППроверена = 1;
	СостояниеОшибкаПроверкиЭП = 11;
	СостояниеПереданоНаРассмотрение = 2;
	СостояниеФЛКНеПройден = 21;
	
	Состояние = ПолноеСостояние;
	ОтчетСданСОшибками = Ложь;
	
	Если ТипОтправляемогоДокумента <> Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС
		И ТипОтправляемогоДокумента <> Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС Тогда
		
		Если ПолноеСостояние = -1 Тогда
			Состояние = СостояниеПолучен;
		ИначеЕсли ПолноеСостояние = -11 Тогда
			Состояние = СостояниеОшибкаПолучения;
		ИначеЕсли ПолноеСостояние = 1 Тогда
			Состояние = СостояниеЭППроверена;
		ИначеЕсли ПолноеСостояние = 11 Тогда
			Состояние = СостояниеОшибкаПроверкиЭП;
		ИначеЕсли ПолноеСостояние = 2 Тогда
			Состояние = СостояниеЭППроверена;
		ИначеЕсли ПолноеСостояние = 21 Тогда
			Состояние = СостояниеФЛКНеПройден;
		ИначеЕсли ПолноеСостояние = 3 Тогда
			Состояние = СостояниеЭППроверена;
		ИначеЕсли ПолноеСостояние = 31 Тогда
			Состояние = СостояниеПереданоНаРассмотрение;
			ОтчетСданСОшибками = Истина;
		ИначеЕсли ПолноеСостояние = 4 Тогда
			Состояние = СостояниеПереданоНаРассмотрение;
		ИначеЕсли ПолноеСостояние = 41 Тогда
			Состояние = СостояниеПереданоНаРассмотрение;
			ОтчетСданСОшибками = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоНеизвестноеСостояние = (Состояние <> СостояниеПолучен И Состояние <> СостояниеОшибкаПолучения И Состояние <> СостояниеЭППроверена
		И Состояние <> СостояниеОшибкаПроверкиЭП И Состояние <> СостояниеПереданоНаРассмотрение И Состояние <> СостояниеФЛКНеПройден);
	
	ТЗОбработки = Неопределено;
	Если НЕ ТолькоПроанализироватьСостояния Тогда
		
		ТЗОбработки = Новый ТаблицаЗначений;
		ТЗОбработки.Колонки.Добавить("СтадияОбработки");
		ТЗОбработки.Колонки.Добавить("Статус");
		ТЗОбработки.Колонки.Добавить("Дата");
		ТЗОбработки.Колонки.Добавить("КодОшибки");
		ТЗОбработки.Колонки.Добавить("ОписаниеОшибки");
		ТЗОбработки.Колонки.Добавить("Действие");
		
		НоваяСтрокаТЗ = ТЗОбработки.Добавить();
		НоваяСтрокаТЗ.СтадияОбработки = ?(НЕ ЭтоНеизвестноеСостояние, НСтр("ru = '1. Получение файла'"), ТекстСостояния);
		НоваяСтрокаТЗ.Статус = ?(НЕ ЭтоНеизвестноеСостояние, ?(Состояние <> СостояниеОшибкаПолучения, НСтр("ru = 'Успешно'"), НСтр("ru = 'Ошибка'")), "");
		НоваяСтрокаТЗ.Дата = ?(ЗначениеЗаполнено(ДатаОбновления), Формат(ДатаОбновления, "ДФ='дд.ММ.гггг ЧЧ:мм:сс'"), "");
		НоваяСтрокаТЗ.КодОшибки = "";
		НоваяСтрокаТЗ.ОписаниеОшибки = ?(ЭтоНеизвестноеСостояние ИЛИ Состояние = СостояниеПолучен ИЛИ Состояние = СостояниеОшибкаПолучения, ТекстОшибки, "");
		НоваяСтрокаТЗ.Действие = "";
		
		Если Состояние = СостояниеЭППроверена ИЛИ Состояние = СостояниеОшибкаПроверкиЭП ИЛИ Состояние = СостояниеПереданоНаРассмотрение
			ИЛИ Состояние = СостояниеФЛКНеПройден Тогда
			
			НоваяСтрокаТЗ = ТЗОбработки.Добавить();
			НоваяСтрокаТЗ.СтадияОбработки = НСтр("ru = '2. Расшифровка файла и проверка ЭП'");
			НоваяСтрокаТЗ.Статус = ?(Состояние <> СостояниеОшибкаПроверкиЭП, НСтр("ru = 'Успешно'"), НСтр("ru = 'Ошибка'"));
			НоваяСтрокаТЗ.Дата = ?(ЗначениеЗаполнено(ДатаОбновления), Формат(ДатаОбновления, "ДФ='дд.ММ.гггг ЧЧ:мм:сс'"), "");
			НоваяСтрокаТЗ.КодОшибки = "";
			НоваяСтрокаТЗ.ОписаниеОшибки = ?(Состояние = СостояниеЭППроверена ИЛИ Состояние = СостояниеОшибкаПроверкиЭП, ТекстОшибки, "");
			НоваяСтрокаТЗ.Действие = "";
			
			Если Состояние = СостояниеПереданоНаРассмотрение ИЛИ Состояние = СостояниеФЛКНеПройден Тогда
				НоваяСтрокаТЗ = ТЗОбработки.Добавить();
				НоваяСтрокаТЗ.СтадияОбработки = НСтр("ru = '3. Форматно-логический контроль'");
				НоваяСтрокаТЗ.Статус = ?(Состояние <> СостояниеФЛКНеПройден, НСтр("ru = 'Успешно'"), НСтр("ru = 'Ошибка'"));
				НоваяСтрокаТЗ.Дата = ?(ЗначениеЗаполнено(ДатаОбновления), Формат(ДатаОбновления, "ДФ='дд.ММ.гггг ЧЧ:мм:сс'"), "");
				НоваяСтрокаТЗ.КодОшибки = "";
				НоваяСтрокаТЗ.ОписаниеОшибки = ТекстОшибки;
				НоваяСтрокаТЗ.Действие = "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОтчетСдан = (Состояние = СостояниеПереданоНаРассмотрение);
	ЕстьОшибкиФорматногоКонтроля = (Состояние = СостояниеФЛКНеПройден);
	ЕстьПрочиеОшибки = (Состояние = СостояниеОшибкаПолучения ИЛИ Состояние = СостояниеОшибкаПроверкиЭП
		ИЛИ (ЭтоНеизвестноеСостояние И ЗначениеЗаполнено(ТекстОшибки)));
	
	Результат = Новый Структура;
	Результат.Вставить("ТЗОбработки", 					ТЗОбработки);
	Результат.Вставить("ОтчетСдан", 					ОтчетСдан);
	Результат.Вставить("ОтчетСданСОшибками", 			ОтчетСданСОшибками);
	Результат.Вставить("ЕстьОшибкиФорматногоКонтроля", 	ЕстьОшибкиФорматногоКонтроля);
	Результат.Вставить("ЕстьПрочиеОшибки", 				ЕстьПрочиеОшибки);
	Возврат Результат;
	
КонецФункции

Функция ОтправкаНаСерверФСС(ЭтоЭлектроннаяПодписьВМоделиСервиса, АдресСервера, КороткоеИмяФайлаПакета, СтрокаBase64ФайлаПакета, ИмяФайлаОтправки, ОтчетСсылка, ПоляДляЗаписиОтправки, ПовторятьСоединение, ТипОтправляемогоДокумента)
	
	Идентификатор = Неопределено;
	ОписаниеОшибкиСервером = Неопределено;
	ОтветПолучен = ОтправкаЗашифрованногоПакетаНаСерверФСС(АдресСервера, ИмяФайлаОтправки, ТипОтправляемогоДокумента, КороткоеИмяФайлаПакета, Идентификатор, ОписаниеОшибкиСервером);
	Если ОтветПолучен Тогда
		ПовторятьСоединение = Ложь;
		Если Идентификатор <> Неопределено Тогда
			//отправленный файл принят сервером, отправке присвоен идентификатор
			НоваяЗапись = Справочники.ОтправкиФСС.СоздатьЭлемент();
			НоваяЗапись.ОтчетСсылка = ОтчетСсылка;
			НоваяЗапись.ИдентификаторОтправкиНаСервере = Идентификатор;
			
			Если ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
				ДвоичныеДанныеФайлаПакета = ПолучитьИзВременногоХранилища(СтрокаBase64ФайлаПакета);
			Иначе
				ДвоичныеДанныеФайлаПакета = Base64Значение(СтрокаBase64ФайлаПакета);
			КонецЕсли;
			
			НоваяЗапись.ЗашифрованныйПакет = Новый ХранилищеЗначения(ДвоичныеДанныеФайлаПакета);
			НоваяЗапись.ИмяФайлаПакета = КороткоеИмяФайлаПакета;
			НоваяЗапись.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен;
			НоваяЗапись.ДатаОтправки = ТекущаяДатаСеанса();
			НоваяЗапись.Организация = ОтчетСсылка.Организация;
			НоваяЗапись.КодОрганаФСС = ПоляДляЗаписиОтправки.КодОрганаФСС;
			НоваяЗапись.ДатаНачалаПериода = ПоляДляЗаписиОтправки.ДатаНачалаПериода;
			НоваяЗапись.ДатаОкончанияПериода = ПоляДляЗаписиОтправки.ДатаОкончанияПериода;
			НоваяЗапись.Версия = ПоляДляЗаписиОтправки.Версия;
			НоваяЗапись.ПредставлениеПериода = ПредставлениеПериода(НоваяЗапись.ДатаНачалаПериода, КонецДня(НоваяЗапись.ДатаОкончанияПериода), "ФП=Истина");
			НоваяЗапись.ПредставлениеВидаДокумента = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(НоваяЗапись.Версия);
			
			ТипЗнчСсылкаНаОтчет = ТипЗнч(ОтчетСсылка);
			ЭтоРеестрСведений = ДокументооборотСФССКлиентСервер.ЭтоРеестрСведенийНаВыплатуПособийФСС(ОтчетСсылка);
			
			ВидОтчета = Неопределено;
			
			Если ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				// ОбъектФСС - рег отчет
				ВидОтчета = Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", ОтчетСсылка.ИсточникОтчета);
			ИначеЕсли ЭтоРеестрСведений Тогда
				ВидОтчета = Справочники.ВидыОтправляемыхДокументов.РеестрСведенийВФСС;
			ИначеЕсли ТипЗнчСсылкаНаОтчет = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
				ВидОтчета = ОтчетСсылка.ВидОтчета;
			КонецЕсли;
			
			Если ВидОтчета = Неопределено Тогда
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось определить тип документа!'"));
				Возврат Неопределено;
			КонецЕсли;
			
			НоваяЗапись.ВидОтчета = ВидОтчета;
			НоваяЗапись.Записать();
			
			Возврат НоваяЗапись.Ссылка;
		Иначе
			Если ОписаниеОшибкиСервером <> Неопределено Тогда
				//отправленный файл не был принят сервером, получено описание ошибки
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Отчет не принят сервером.'") + " " + ОписаниеОшибкиСервером);
			Иначе
				// в ответе сервера отсутствует как идентификатор, так и описание ошибки
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Зашифрованный пакет не удалось отправить на сервер ФСС.'"));
			КонецЕсли;
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ПовторятьСоединение = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОтправитьВФССССервера(
		ЭтоЭлектроннаяПодписьВМоделиСервиса,
		КороткоеИмяФайлаПакета,
		СтрокаBase64ФайлаОтправки,
		СтрокаBase64ФайлаПакета,
		ОтчетСсылка,
		ПовторятьСоединение,
		ПараметрыОтправкиНаСервере) Экспорт
	
	ВременныйКаталог = КаталогВременныхФайлов();
	РазделительПутиОС = ПолучитьРазделительПути();
	Если Прав(ВременныйКаталог, 1) <> РазделительПутиОС Тогда
		ВременныйКаталог = ВременныйКаталог + РазделительПутиОС;
	КонецЕсли;
	
	ИмяФайлаОтправки = ВременныйКаталог + КороткоеИмяФайлаПакета;
	
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		ДвоичныеДанныеФайлаОтправки = ПолучитьИзВременногоХранилища(СтрокаBase64ФайлаОтправки);
	Иначе
		ДвоичныеДанныеФайлаОтправки = Base64Значение(СтрокаBase64ФайлаОтправки);
	КонецЕсли;
	ДвоичныеДанныеФайлаОтправки.Записать(ИмяФайлаОтправки);
	
	ПараметрыОтправкиНаСервере.РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Возврат ОтправкаНаСерверФСС(ЭтоЭлектроннаяПодписьВМоделиСервиса, ПараметрыОтправкиНаСервере.АдресСервера, КороткоеИмяФайлаПакета, СтрокаBase64ФайлаПакета, ИмяФайлаОтправки, ОтчетСсылка, ПараметрыОтправкиНаСервере.ПоляДляЗаписиОтправки, ПовторятьСоединение, ПараметрыОтправкиНаСервере.ТипОтправляемогоДокумента);
	
КонецФункции

Функция ПолучитьОтпечаткиСертификатовИзНастроекОрганизацииДляФСС(ОрганизацияСсылка) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОбменаФСС.СертификатСтрахователяОтпечаток КАК СертификатСтрахователяОтпечаток,
		|	НастройкиОбменаФСС.СертификатФССОтпечаток КАК СертификатФССОтпечаток,
		|	НастройкиОбменаФСС.СертификатФССЭЛНОтпечаток КАК СертификатФССЭЛНОтпечаток,
		|	НастройкиОбменаФСС.ТестовыйСерверФССЭЛН КАК ТестовыйСерверФССЭЛН
		|ИЗ
		|	РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
		|ГДЕ
		|	НастройкиОбменаФСС.Организация = &ОрганизацияСсылка
		|	И НастройкиОбменаФСС.ИспользоватьОбмен = ИСТИНА";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОрганизацияСсылка", ОрганизацияСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Результат = Неопределено;
		
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("СертификатСтрахователяОтпечаток", 	Выборка.СертификатСтрахователяОтпечаток);
		Результат.Вставить("СертификатФССОтпечаток", 			Выборка.СертификатФССОтпечаток);
		Результат.Вставить("СертификатФССЭЛНОтпечаток", 		Выборка.СертификатФССЭЛНОтпечаток);
		Результат.Вставить("ТестовыйСерверФССЭЛН", 				Выборка.ТестовыйСерверФССЭЛН);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПоследнююОтправкуОтчетаВФСС(ОтчетСсылка) Экспорт
	
	Отправка = Неопределено;
	
	Если ЗначениеЗаполнено(ОтчетСсылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					   |	ОтправкиФСС.Ссылка
					   |ИЗ
					   |	Справочник.ОтправкиФСС КАК ОтправкиФСС
					   |ГДЕ
					   |	ОтправкиФСС.ОтчетСсылка = &ЭтотОтчет
					   |	И ОтправкиФСС.ПометкаУдаления = ЛОЖЬ
					   |
					   |УПОРЯДОЧИТЬ ПО
					   |	ОтправкиФСС.ДатаОтправки УБЫВ";
		Запрос.Параметры.Вставить("ЭтотОтчет", ОтчетСсылка);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Отправка = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Отправка;
	
КонецФункции

Процедура ОбновитьСтатусОтправкиФССОтчета(Отчет)
	
	// находим последнюю не помеченную на удаление отправку отчета
	ПоследняяОтправка = ПолучитьПоследнююОтправкуОтчетаВФСС(Отчет);
	
	// вычисляем значение статуса отправки (Перечисления.СтатусыОтправки)
	Если ЗначениеЗаполнено(ПоследняяОтправка) Тогда
		СтатусОтправки = ПоследняяОтправка.СтатусОтправки;
		Если СтатусОтправки = Перечисления.СтатусыОтправки.ПринятЕстьОшибки Тогда
			//введено после добавления дополнительного статуса ПринятЕстьОшибки, при котором отчет считается сданным
			СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
		КонецЕсли;
	Иначе
		СтатусОтправки = Неопределено;
	КонецЕсли;
	
	// сохраняем статус в базе
	ЗаписатьСтатусОтправкиФССОтчета(Отчет, СтатусОтправки, ПоследняяОтправка);
	
КонецПроцедуры

Процедура ЗаписатьСтатусОтправкиФССОтчета(Отчет, СтатусОтправки, ОснованиеСтатуса)
	
	Если ЗначениеЗаполнено(СтатусОтправки) Тогда
		МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		МенЗап.Объект = Отчет;
		МенЗап.Статус = СтатусОтправки;
		МенЗап.Основание = ОснованиеСтатуса;
		МенЗап.Записать(Истина);
	Иначе
		МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		МенЗап.Объект = Отчет;
		МенЗап.Прочитать();
		Если МенЗап.Выбран() Тогда
			МенЗап.Удалить();
		КонецЕсли;
	КонецЕсли;
	
	// вызываем переопределяемую процедуру отработки изменения статуса отправки
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента(Отчет, СтатусОтправки);
	
КонецПроцедуры

Функция ПолучитьПустуюДатуЗавершенияОтправкиФСС()
	
	Возврат '39991231235959';
	
КонецФункции

Процедура ПередЗаписьюОтправкиФСС(Объект, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		Объект.Период = СокрЛП(Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd") + Формат('39991231' - Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd"));
	КонецЕсли;
	
	Если Объект.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
			Объект.ДатаЗакрытия = ПолучитьПустуюДатуЗавершенияОтправкиФСС();
		КонецЕсли;
		
	Иначе
		Объект.ДатаЗакрытия = Объект.ДатаПолученияРезультата;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиОтправкиФСС(Объект, Отказ)
	
	Если Объект.ОтчетСсылка <> Неопределено Тогда
		// отражаем изменения в регистре статусов отправки
		ОбновитьСтатусОтправкиФССОтчета(Объект.ОтчетСсылка);
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписьОбъектовРегламентированнойОтчетности(Объект.ОтчетСсылка, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция СписокДопустимыхОрганизацийВОбъектахОбменаФСС() Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОбменаФСС.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
		|ГДЕ
		|	НастройкиОбменаФСС.ИспользоватьОбмен = Истина";
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
КонецФункции

Функция ОрганизацияИспользуетОбменСФСС(ОрганизацияСсылка, ИспользуетсяАвтонастройка = Ложь, ДоступностьОнлайнПроверки = Ложь) Экспорт
	
	Если ДоступностьОнлайнПроверки Тогда
		СвойстваОрганизации = ЗначенияРеквизитовОбъекта(ОрганизацияСсылка, "ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
		
		Попытка
			ОбменИОнлайнПроверкаВключены = СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате И ЗначениеЗаполнено(СвойстваОрганизации.УчетнаяЗаписьОбмена)
				И НЕ СвойстваОрганизации.УчетнаяЗаписьОбмена.ОбменНапрямую И СвойстваОрганизации.УчетнаяЗаписьОбмена.ИспользоватьСервисОнлайнПроверкиОтчетов;
		Исключение
			ОбменИОнлайнПроверкаВключены = Ложь;
		КонецПопытки;
		
		ДоступностьОнлайнПроверки = ОбменИОнлайнПроверкаВключены И СвойстваОрганизации.УчетнаяЗаписьОбмена.СпецоператорСвязи <> Перечисления.СпецоператорыСвязи.Такском
			И СтрНайти(";" + ВРег(СокрЛП(ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(СвойстваОрганизации.УчетнаяЗаписьОбмена.СпецоператорСвязи, "ОнлайнПроверкаКонтролирующиеОрганы"))) + ";", ";ФСС;") > 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОбменаФСС.ИспользоватьОбмен КАК ИспользоватьОбмен,
		|	НастройкиОбменаФСС.ИспользоватьАвтонастройку КАК ИспользоватьАвтонастройку
		|ИЗ
		|	РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
		|ГДЕ
		|	НастройкиОбменаФСС.Организация = &ОрганизацияСсылка";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОрганизацияСсылка", ОрганизацияСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.ИспользоватьОбмен Тогда
		ИспользуетсяАвтонастройка = Выборка.ИспользоватьАвтонастройку;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОрганизацияИспользуетОбменСФСРАР(ОрганизацияСсылка) Экспорт
	
	Возврат НастройкиФСРАР(ОрганизацияСсылка).ИспользоватьОбмен;
	
КонецФункции

Функция ОрганизацияИспользуетОбменСРПН(ОрганизацияСсылка) Экспорт
	
	Возврат НастройкиРПН(ОрганизацияСсылка).ИспользоватьОбмен;
	
КонецФункции

Функция ОрганизацияИспользуетОбменСФТС(ОрганизацияСсылка) Экспорт
	
	Возврат НастройкиФТС(ОрганизацияСсылка).ИспользоватьОбмен;
	
КонецФункции

Функция ОрганизацияИспользуетОбменСФНС(ОрганизацияСсылка) Экспорт
	
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(ОрганизацияСсылка);
	Если УчетнаяЗапись = Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка() Тогда
		ДокументооборотПодключен = Ложь;
	Иначе
		ДокументооборотПодключен = ДокументооборотСКОВызовСервера.УчетнаяЗаписьПредназначенаДляДокументооборотаСФНС(УчетнаяЗапись) = Истина
			И ПользователюРазрешеноВыполнятьОбменПоУчетнойЗаписи(УчетнаяЗапись);
	КонецЕсли;
	
	Возврат ДокументооборотПодключен;
	
КонецФункции

Функция ОрганизацияИспользуетОбменСПФР(ОрганизацияСсылка) Экспорт
	
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(ОрганизацияСсылка);
	Если УчетнаяЗапись = Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка() Тогда
		ДокументооборотПодключен = Ложь;
	Иначе
		ДокументооборотПодключен = ДокументооборотСКОВызовСервера.УчетнаяЗаписьПредназначенаДляДокументооборотаСПФР(УчетнаяЗапись) = Истина
			И ПользователюРазрешеноВыполнятьОбменПоУчетнойЗаписи(УчетнаяЗапись);
	КонецЕсли;
	
	Возврат ДокументооборотПодключен;
	
КонецФункции

Функция ОрганизацияИспользуетОбменСФСГС(ОрганизацияСсылка) Экспорт
	
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(ОрганизацияСсылка);
	Если УчетнаяЗапись = Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка() Тогда
		ДокументооборотПодключен = Ложь;
	Иначе
		ДокументооборотПодключен = ДокументооборотСКОВызовСервера.УчетнаяЗаписьПредназначенаДляДокументооборотаСФСГС(УчетнаяЗапись) = Истина
			И ПользователюРазрешеноВыполнятьОбменПоУчетнойЗаписи(УчетнаяЗапись);
	КонецЕсли;
	
	Возврат ДокументооборотПодключен;
	
КонецФункции

Процедура ПолучитьСвойстваОрганизацииДляФСС(
		Организация,
		НастроенОбменВУниверсальномФормате,
		ОрганизацияИспользуетОбменСФСС,
		ОрганизацияИспользуетАвтонастройкуПоУчетнойЗаписи,
		УчетнаяЗаписьДокументооборота = Неопределено) Экспорт
	
	ОрганизацияИспользуетОбменСФСС = Ложь;
	НастроенОбменВУниверсальномФормате = Ложь;
	
	ОрганизацияИспользуетОбменСФСС = ОрганизацияИспользуетОбменСФСС(Организация, ОрганизацияИспользуетАвтонастройкуПоУчетнойЗаписи);
	
	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
	
	УчетнаяЗаписьДокументооборота = СвойстваОрганизации.УчетнаяЗаписьОбмена;
	
	Если СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
		И ЗначениеЗаполнено(УчетнаяЗаписьДокументооборота) Тогда
		НастроенОбменВУниверсальномФормате = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ОтправкаЗашифрованногоПакетаНаСерверФСС(АдресСервера, ИмяФайлаОтправки, ТипОтправляемогоДокумента = Неопределено, КороткоеИмяФайлаПакета = Неопределено, Идентификатор = Неопределено, ОписаниеОшибкиСервером = Неопределено)
	
	Идентификатор = Неопределено;
	ОписаниеОшибкиСервером = Неопределено;
	ОтветПолучен = Ложь;
	
	// устанавливаем соединение с сервером
	ОписаниеОшибкиУстановкиСоединения = "";
	Соединение = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета(АдресСервера, ОписаниеОшибкиУстановкиСоединения);
	Если Соединение = Неопределено Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
			СтрШаблон(НСтр("ru = 'Не удалось установить соединение с сервером:
                            |%1'"), ОписаниеОшибкиУстановкиСоединения));
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипОтправляемогоДокумента <> Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС
	И ТипОтправляемогоДокумента <> Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС Тогда
		РесурсНаСервере = "/F4ExtService/ExtService.svc";
		ПространствоИменСервиса = "http://tempuri.org/";
		ИмяСервиса = "IExtService";
		
	Иначе
		РесурсНаСервере = "/ExtService/GatewayService.svc";
		ПространствоИменСервиса = "http://asystems.fss";
		ИмяСервиса = "IGatewayService";
	КонецЕсли;
	
	ДвоичныеДанныеПакета = Новый ДвоичныеДанные(ИмяФайлаОтправки);
	ДанныеПакетаВBase64 = Base64Строка(ДвоичныеДанныеПакета);
	
	// формируем общие заголовки запроса SOAP
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/soap+xml; charset=utf-8");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	
	ТекстЗапросаSOAP =
		"<s:Envelope xmlns:s=""http://www.w3.org/2003/05/soap-envelope"" xmlns:a=""http://www.w3.org/2005/08/addressing"">
		|	<s:Header>
		|		<a:Action s:mustUnderstand=""1"">" + ПространствоИменСервиса + ?(Прав(ПространствоИменСервиса, 1) <> "/", "/", "")
					+ ИмяСервиса + "/SendFile</a:Action>
		|		<a:To s:mustUnderstand=""1"">http://" + АдресСервера + РесурсНаСервере + "</a:To>
		|	</s:Header>
		|	<s:Body>
		|		<SendFile xmlns=""" + ПространствоИменСервиса + """>
		|			<data>" + ДанныеПакетаВBase64 + "</data>
		|			<fileName>" + КороткоеИмяФайлаПакета + "</fileName>
		|		</SendFile>
		|	</s:Body>
		|</s:Envelope>";
	ИмяФайлаSOAP = ПолучитьИмяВременногоФайла();
	ТекстовыйФайлSOAP = Новый ЗаписьТекста(ИмяФайлаSOAP, "utf-8");
	ТекстовыйФайлSOAP.Записать(ТекстЗапросаSOAP);
	ТекстовыйФайлSOAP.Закрыть();
	
	// посылаем запрос
	ОтветПолучен = Истина;
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	Попытка
		Соединение.ОтправитьДляОбработки(ИмяФайлаSOAP, РесурсНаСервере, ФайлРезультата, ЗаголовкиHTTP);
		Соединение = Неопределено;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Для ИндексПричиныОшибки = 1 По 5 Цикл
			Если СтрНайти(ИнформацияОбОшибке.Описание, "ExtServiceException") > 0 Тогда
				Если СтрНайти(ИнформацияОбОшибке.Описание, "Неверное имя файла") > 0 Тогда
					ОписаниеОшибкиСервером = НСтр("ru = 'Неверное имя файла.'");
				Иначе
					ОписаниеОшибкиСервером = НСтр("ru = 'Сбой на сервере ФСС.'");
				КонецЕсли;
				Возврат ОтветПолучен;
			КонецЕсли;
			
			Если ИнформацияОбОшибке.Причина = Неопределено Тогда
				Прервать;
			КонецЕсли;
			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
		КонецЦикла;
		
		ОтветПолучен = Ложь;
		Возврат ОтветПолучен;
	КонецПопытки;
	
	ТекстовыйФайлРезультата = Новый ЧтениеТекста(ФайлРезультата, "utf-8");
	ТекстРезультата = ТекстовыйФайлРезультата.Прочитать();
	ТекстовыйФайлРезультата.Закрыть();
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлРезультата);
	
	Если НЕ ЗначениеЗаполнено(ТекстРезультата) Тогда
		ОписаниеОшибкиСервером = НСтр("ru = 'Сбой на сервере ФСС.'");
		Возврат ОтветПолучен;
	КонецЕсли;
	
	ТекстОшибки = "";
	УзелРезультата = ИзвлечьРезультатSOAP(ТекстРезультата, "SendFile", ТекстОшибки);
	УзелExtID = НайтиУзел(УзелРезультата, "ExtID");
	
	Идентификатор = ?(УзелExtID <> Неопределено, СокрЛП(УзелExtID.Значение), Неопределено);
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
		ОписаниеОшибкиСервером = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, НСтр("ru = 'Ошибка формата ответа сервера ФСС!'"));
	КонецЕсли;
	
	Возврат ОтветПолучен;
	
КонецФункции

Функция ИзвлечьРезультатSOAP(ТекстРезультата, ИмяФункции, ТекстОшибки)
	
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений(Неопределено, ТекстРезультата);
	Если ДеревоXML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УзелEnvelope = НайтиУзел(ДеревоXML, "Envelope");
	Если УзелEnvelope = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УзелBody = НайтиУзел(УзелEnvelope, "Body");
	Если УзелBody = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УзелОтветаФункции = НайтиУзел(УзелBody, ИмяФункции + "Response");
	Если УзелОтветаФункции <> Неопределено Тогда
		
		УзелРезультата = НайтиУзел(УзелОтветаФункции, ИмяФункции + "Result");
		Если УзелРезультата <> Неопределено Тогда
			
			Возврат УзелРезультата;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УзелFault = НайтиУзел(УзелBody, "Fault");
	Если УзелFault = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УзелDetail = НайтиУзел(УзелFault, "Detail");
	Если УзелDetail = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УзелGeneralFault = НайтиУзел(УзелDetail, "GeneralFault");
	Если УзелGeneralFault = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УзелErrorMessage = НайтиУзел(УзелGeneralFault, "ErrorMessage");
	Если УзелErrorMessage = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстОшибки = XMLЗначение(Тип("Строка"), УзелErrorMessage.Значение);
	Возврат Неопределено;
	
КонецФункции

Функция НайтиУзел(ОбъектXML, Имя)
	
	Если ОбъектXML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	ДлинаИмени = СтрДлина(Имя);
	Для каждого СтрокаXML Из ОбъектXML.Строки Цикл
		// поиск без учета пространств имен
		Если СтрокаXML.Имя = Имя ИЛИ Прав(СтрокаXML.Имя, ДлинаИмени + 1) = ":" + Имя Тогда
			Результат = СтрокаXML;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ИзвлечьЭлектронноеПредставлениеИзХранилищаИПерекодировать(
		Владелец,
		ТекстВыгрузки,
		ИмяФайлаВыгрузки,
		КодировкаИсходника = Неопределено,
		ПреобразоватьИзКодировки = Неопределено) Экспорт
	
	// получаем электронное представление
	ХранилищеВыгрузки = "";
	ИмяФайлаВыгрузки = "";

	ФайлВАрхиве = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						  |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ИмяФайла,
						  |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.Данные
						  |	, ВЫБОР
						  |		КОГДА СостояниеОбъектов.Архивный ЕСТЬ NULL ТОГДА Ложь
						  |		КОГДА СостояниеОбъектов.Архивный = Ложь ТОГДА Ложь
						  |	ИНАЧЕ
						  |		Истина
						  |	КОНЕЦ ВАрхиве
						  |ИЗ
						  |	РегистрСведений.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов КАК ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПризнакиАрхивированияФайловДОСКонтролирующимиОрганами КАК СостояниеОбъектов
						  |			ПО 		(СостояниеОбъектов.Объект = ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ЭлектронноеПредставление)
						  |				И	(СостояниеОбъектов.ИмяФайла = ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ИмяФайла)
						  |				И	(СостояниеОбъектов.Владелец = Значение(Перечисление.ВидыАрхивируемыхМетаданныхДО.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов))
						  |
						  |ГДЕ
						  |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ЭлектронноеПредставление = &ЭлектронноеПредставление");
	
	Запрос.УстановитьПараметр("ЭлектронноеПредставление", Владелец);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ВАрхиве Тогда
				ИмяФайлаВыгрузки = "";
				ХранилищеВыгрузки = Неопределено;
				ФайлВАрхиве = Истина;
			Иначе
				ИмяФайлаВыгрузки = СокрЛП(Выборка.ИмяФайла);
				ХранилищеВыгрузки = Выборка.Данные;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяФайлаВыгрузки = "" ИЛИ ХранилищеВыгрузки = Неопределено Тогда
		Если ФайлВАрхиве Тогда
			ТекстСообщения = НСтр("ru = 'Файл загруженного отчета был ранее перемещен в архив. Извлечение содержимого невозможно!'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не обнаружена информация для отправки!'");
		КонецЕсли;
		СообщитьПользователю(ТекстСообщения);
		ИмяФайлаВыгрузки = "";
		ТекстВыгрузки = "";
		Возврат;
	КонецЕсли;
	
	// пишем электронное представление в файл
	
	ЭтоXML = нрег(Прав(ИмяФайлаВыгрузки, 4)) = ".xml";
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ХранилищеВыгрузки.Получить().Записать(ВремФайл);
	
	КодировкаПоУмолчанию = "windows-1251";
	КодировкаИсходника = КодировкаПоУмолчанию;
	
	ОбъектЧтениеТекста = Новый ЧтениеТекста(ВремФайл, ?(ПреобразоватьИзКодировки <> Неопределено, ПреобразоватьИзКодировки,
		?(ЭтоXML, КодировкаПоУмолчанию, "cp866")));
	ТекстВыгрузки = ОбъектЧтениеТекста.Прочитать();
	ОбъектЧтениеТекста.Закрыть();
	
	УдалитьФайлы(ВремФайл);
	
КонецПроцедуры

Процедура ПолучитьСвойстваФайлаВыгрузки(ОбъектСсылка, ТекстВыгрузки, ИмяФайлаВыгрузки, КодировкаФайлаВыгрузки = Неопределено) Экспорт
	
	СвойстваФайлаВыгрузки = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ВыгрузитьДокумент(ОбъектСсылка);
	
	Если СвойстваФайлаВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СвойстваФайлаВыгрузки.КодировкаФайлаВыгрузки = КодировкаТекста.ANSI Тогда
		КодировкаФайлаВыгрузки = "windows-1251";
	ИначеЕсли СвойстваФайлаВыгрузки.КодировкаФайлаВыгрузки = КодировкаТекста.OEM Тогда
		КодировкаФайлаВыгрузки = "cp866";
	Иначе
		КодировкаФайлаВыгрузки = СвойстваФайлаВыгрузки.КодировкаФайлаВыгрузки;
	КонецЕсли;
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СвойстваФайлаВыгрузки.АдресФайлаВыгрузки);
	ДвоичныеДанныеФайла.Записать(ВремФайл);
	ОбъектЧтениеТекста = Новый ЧтениеТекста(ВремФайл, КодировкаФайлаВыгрузки);
	
	ТекстВыгрузки = ОбъектЧтениеТекста.Прочитать();
	ОбъектЧтениеТекста.Закрыть();
	УдалитьФайлы(ВремФайл);
	
	ИмяФайлаВыгрузки = СвойстваФайлаВыгрузки.ИмяФайлаВыгрузки;
	
КонецПроцедуры

Функция ПоляНаСервереДляЗаписиОтправкиВФСС(ОбъектСсылка) Экспорт
	
	Возврат Новый Структура("КодОрганаФСС, ДатаНачалаПериода, ДатаОкончанияПериода, Версия",
		ОбъектСсылка.Получатель,
		ОбъектСсылка.ДатаНачала,
		ОбъектСсылка.ДатаОкончания,
		ОбъектСсылка.Версия);
	
КонецФункции

Функция ПолучитьТипВидаОтправляемогоДокументаПоСсылкеНаОбъектОтправкиДляФСС(ОбъектСсылка) Экспорт
	
	ТипЗнчОбъектСсылка = ТипЗнч(ОбъектСсылка);
	
	ВидОтправляемогоДокумента = Неопределено;
	
	Если ТипЗнчОбъектСсылка = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		// ищем отчет в справочнике "ВидыОтправляемыхДокументов"
		ИсточникОтчета = ОбъектСсылка.ИсточникОтчета;	
		РезультатПоиска = Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", ИсточникОтчета);
		Если РезультатПоиска = Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка() Тогда
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В справочнике ""Виды отправляемых документов"" не найден элемент с именем объекта метаданных ""%1""!'"), ИсточникОтчета));
			ВидОтправляемогоДокумента = Неопределено;
		Иначе
			ВидОтправляемогоДокумента = РезультатПоиска; 
		КонецЕсли;
		
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") 
		ИЛИ ТипЗнчОбъектСсылка = Тип("СправочникОбъект.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		
		ВидОтправляемогоДокумента = ОбъектСсылка.ВидОтчета;
		
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("СправочникСсылка.ОтправкиФСС") Тогда
		
		ВидОтправляемогоДокумента = ОбъектСсылка.ВидОтчета;
		
	ИначеЕсли ДокументооборотСФССКлиентСервер.ЭтоРеестрСведенийНаВыплатуПособийФСС(ОбъектСсылка) Тогда
		
		ВидОтправляемогоДокумента = Справочники.ВидыОтправляемыхДокументов.РеестрСведенийВФСС;
		
	КонецЕсли;

	Если ВидОтправляемогоДокумента <> Неопределено Тогда
		
		Возврат ВидОтправляемогоДокумента.ТипДокумента;
		
	Иначе
		
		Возврат Неопределено;
	
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Функции с использованием общих модулей и дублирующие функции для организации
// вызовов общих модулей при документообороте с ФСРАР

Функция СформироватьФайлОтправкиВФСРАРССервера(КороткоеИмяФайлаПакета, СхемаСдачиОтчетности, СтрокаBase64ФайлаПакета, ЭтоАдреса = Истина, Адрес = Неопределено, ЗначениеCAPTCHA = "") Экспорт
	
	Результат = Неопределено;
	
	//файл отправки получаем, объединяя файл пакета с файлами начала и окончания POST-запроса
	
	// файл 1
	ФедеральныйСервер = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.ФедеральныйСервер");
	ТиповойРегиональныйИФедеральныйСерверы = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.ТиповойРегиональныйИФедеральныйСерверы");
	МосковскийРегиональныйИФедеральныйСерверы = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.МосковскийРегиональныйИФедеральныйСерверы");
	
	// формируем POST-данные.
	СодержимоеФайла = "--My1cV8bNdr"
	+ ?(СхемаСдачиОтчетности = ТиповойРегиональныйИФедеральныйСерверы, "",
	Символы.ВК + Символы.ПС + "Content-Disposition: form-data; name=""" + ?(СхемаСдачиОтчетности = МосковскийРегиональныйИФедеральныйСерверы, "import", "format") + """"
	+ Символы.ВК + Символы.ПС
	+ Символы.ВК + Символы.ПС + ?(СхемаСдачиОтчетности = МосковскийРегиональныйИФедеральныйСерверы, "yes", "4.20" + ?(СхемаСдачиОтчетности = ФедеральныйСервер, "", ".region"))
	+ Символы.ВК + Символы.ПС + "--My1cV8bNdr")
	+ ?(НЕ ЗначениеЗаполнено(ЗначениеCAPTCHA), "",
	Символы.ВК + Символы.ПС + "Content-Disposition: form-data; name=""captcha_code"""
	+ Символы.ВК + Символы.ПС
	+ Символы.ВК + Символы.ПС + ЗначениеCAPTCHA
	+ Символы.ВК + Символы.ПС + "--My1cV8bNdr")
	+ Символы.ВК + Символы.ПС + "Content-Disposition: form-data; name=""" + ?(СхемаСдачиОтчетности = ТиповойРегиональныйИФедеральныйСерверы, "fileUpload",
	?(СхемаСдачиОтчетности = МосковскийРегиональныйИФедеральныйСерверы, "file", "file_")) + """; filename=""" + КороткоеИмяФайлаПакета + """"
	+ Символы.ВК + Символы.ПС + "Content-Type: application/octet-stream"
	+ Символы.ВК + Символы.ПС
	+ Символы.ВК + Символы.ПС;
	
	ИмяФайлаЗапросаНачало = ПолучитьИмяВременногоФайла();
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.УстановитьТекст(СодержимоеФайла);
	ТекстовыйФайл.Записать(ИмяФайлаЗапросаНачало, "windows-1251", "");
	
	// файл 2
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла();
	
	Если ЭтоАдреса Тогда
		ПолучитьИзВременногоХранилища(СтрокаBase64ФайлаПакета).Записать(ИмяФайлаПакета);
	Иначе
		ДвоичныеДанныеФайлаПакета = Base64Значение(СтрокаBase64ФайлаПакета);
		ДвоичныеДанныеФайлаПакета.Записать(ИмяФайлаПакета);
	КонецЕсли;
	
	// файл 3
	СодержимоеФайла = Символы.ВК + Символы.ПС + "--My1cV8bNdr--";
	
	ИмяФайлаЗапросаОкончание = ПолучитьИмяВременногоФайла();
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.УстановитьТекст(СодержимоеФайла);
	ТекстовыйФайл.Записать(ИмяФайлаЗапросаОкончание, "windows-1251", "");
	
	// объединение
	МассивИмен = Новый Массив;
	МассивИмен.Добавить(ИмяФайлаЗапросаНачало);
	МассивИмен.Добавить(ИмяФайлаПакета);
	МассивИмен.Добавить(ИмяФайлаЗапросаОкончание);
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла();
	ОбъединитьФайлы(МассивИмен, ИмяФайлаОтправки);
	
	Если ЭтоАдреса Тогда
		Результат = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаОтправки), Адрес);
	Иначе
		ДвоичныеДанныеФайлаПакета = Новый ДвоичныеДанные(ИмяФайлаОтправки);
		Результат = Base64Строка(ДвоичныеДанныеФайлаПакета);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьСвойстваСертификатаПоОтпечаткуССервера(Отпечаток, ЛогическоеХранилище = Неопределено) Экспорт
	
	Сертификат  = Новый Структура("Отпечаток", Отпечаток);
	Возврат КриптографияЭДКО.НайтиСертификат(Сертификат, Ложь);
	
КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки,
		Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		
КонецФункции

Процедура СообщитьПользователю(ТекстСообщения, СообщенияПользователю = Неопределено)
	
	Если СообщенияПользователю <> Неопределено Тогда
		СообщенияПользователю.Добавить(ТекстСообщения);
	Иначе
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты, ВыбратьРазрешенные = Ложь)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты, ВыбратьРазрешенные);
	
КонецФункции

Функция ПредставлениеВидаДокумента(Вид)
	
	Возврат РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Вид);
	
КонецФункции

Функция ИННОрганизации(Организация, ЗначениеПоУмолчаниюДляИНН, ПолноеНаименованиеОрганизации = "")
	
	Если Организация <> Неопределено Тогда
		
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
			СвойстваОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "НаимЮЛПол, ИННЮЛ");
			Результат = СвойстваОрганизации.ИННЮЛ;
		Иначе
			СвойстваОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "НаимЮЛПол, ИННФЛ");
			Результат = СвойстваОрганизации.ИННФЛ;
		КонецЕсли;
		
		ПолноеНаименованиеОрганизации = СвойстваОрганизации.НаимЮЛПол;
		Возврат Результат;
		
	Иначе
		Возврат ЗначениеПоУмолчаниюДляИНН;
	КонецЕсли;
	
КонецФункции

Процедура ПриИзмененииСтатусаОтправкиДокумента(Ссылка, СтатусОтправки)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента(Ссылка, СтатусОтправки);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ДОКУМЕНТООБОРОТ С ФСРАР, код без использования вызовов общих модулей
////

Функция ОбновитьРезультатКонкретнойОтправкиФСРАРССервера(Знач ОтправкаСсылка, Знач ОтправкаОбъектЗагружен, Знач ПодписанныйПакетДляАвторизации, Знач ПараметрыОтправки, ПараметрыСоединения, ПодписанныйРегиональнымДляОтправкиНаФедеральныйСерверПакетBase64 = Неопределено, Знач ЭтоВызовИзСписка = Ложь, ОсновныеПоляРезультатаОтправки = Неопределено) Экспорт
	
	Если ОтправкаОбъектЗагружен Тогда
		ОсновныеРеквизитыОтправки = Новый Структура("ИмяФайлаПакета, СтатусОтправки, СхемаСдачиОтчетности, СтатусОтправкиНаРегиональныйСервер, ПротоколРегиональногоСервера, ЗаверенныйРегиональнымСерверомПакет, ЗаверенныйПакетОтправлен",
			ОтправкаСсылка.ИмяФайлаПакета, ОтправкаСсылка.СтатусОтправки, ОтправкаСсылка.СхемаСдачиОтчетности, ОтправкаСсылка.СтатусОтправкиНаРегиональныйСервер, ОтправкаСсылка.ПротоколРегиональногоСервера, ОтправкаСсылка.ЗаверенныйРегиональнымСерверомПакет, ОтправкаСсылка.ЗаверенныйПакетОтправлен);
	Иначе
		ОсновныеРеквизитыОтправки = ЗначенияРеквизитовОбъекта(ОтправкаСсылка, "ИмяФайлаПакета, СтатусОтправки, СхемаСдачиОтчетности, СтатусОтправкиНаРегиональныйСервер, ПротоколРегиональногоСервера, ЗаверенныйРегиональнымСерверомПакет, ЗаверенныйПакетОтправлен");
	КонецЕсли;
	
	РезультатОтправки = ПолучитьРезультатОтправкиФСРАР(ОсновныеРеквизитыОтправки, ПодписанныйПакетДляАвторизации, ПараметрыОтправки, ПараметрыСоединения, ЭтоВызовИзСписка, ОтправкаСсылка);
	
	ПараметрыСоединения.СоединениеHTTP = Неопределено;
	
	СохранитьРезультатОтправкиФСРАР(ОтправкаСсылка, РезультатОтправки);
	
	Если (РезультатОтправки <> Неопределено И (ОсновныеРеквизитыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.ТиповойРегиональныйИФедеральныйСерверы
		ИЛИ ОсновныеРеквизитыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.МосковскийРегиональныйИФедеральныйСерверы)
		И (ОсновныеРеквизитыОтправки.СтатусОтправкиНаРегиональныйСервер = Перечисления.СтатусыОтправки.Сдан ИЛИ РезультатОтправки.СтатусОтправкиНаРегиональныйСервер = Перечисления.СтатусыОтправки.Сдан)
		И ОсновныеРеквизитыОтправки.ЗаверенныйПакетОтправлен <> Истина И РезультатОтправки.ЗаверенныйПакетОтправлен <> Истина) Тогда
		Если РезультатОтправки.ЗаверенныйРегиональнымСерверомПакет = Неопределено Тогда
			РезультатОтправки.ЗаверенныйРегиональнымСерверомПакет = ОсновныеРеквизитыОтправки.ЗаверенныйРегиональнымСерверомПакет.Получить();
		КонецЕсли;
		ПодписанныйРегиональнымДляОтправкиНаФедеральныйСерверПакетBase64 = Base64Строка(РезультатОтправки.ЗаверенныйРегиональнымСерверомПакет);
	Иначе
		ПодписанныйРегиональнымДляОтправкиНаФедеральныйСерверПакетBase64 = Неопределено;
	КонецЕсли;
	
	Если ОсновныеПоляРезультатаОтправки <> Неопределено И РезультатОтправки <> Неопределено Тогда
		ОсновныеПоляРезультатаОтправки.ДатаПолученияРезультата = РезультатОтправки.ДатаПолученияРезультата;
		ОсновныеПоляРезультатаОтправки.СтатусОтправки = РезультатОтправки.СтатусОтправки;
		ОсновныеПоляРезультатаОтправки.Протокол = РезультатОтправки.Протокол;
		ОсновныеПоляРезультатаОтправки.СтатусОтправкиНаРегиональныйСервер = РезультатОтправки.СтатусОтправкиНаРегиональныйСервер;
		ОсновныеПоляРезультатаОтправки.ЗаверенныйПакетОтправлен = РезультатОтправки.ЗаверенныйПакетОтправлен;
	КонецЕсли;
	
	Возврат (РезультатОтправки <> Неопределено);
	
КонецФункции

Функция СохранитьРезультатОтправкиФСРАР(ОтправкаСсылка, РезультатОтправки)
	
	Если РезультатОтправки <> Неопределено Тогда
		ОтправкаОбъект = ОтправкаСсылка.ПолучитьОбъект();
		ОтправкаОбъект.ДатаПолученияРезультата = РезультатОтправки.ДатаПолученияРезультата;
		ОтправкаОбъект.СтатусОтправки = РезультатОтправки.СтатусОтправки;
		ОтправкаОбъект.Протокол = Новый ХранилищеЗначения(РезультатОтправки.Протокол);
		Если РезультатОтправки.СтатусОтправкиНаРегиональныйСервер <> Неопределено Тогда
			ОтправкаОбъект.СтатусОтправкиНаРегиональныйСервер = РезультатОтправки.СтатусОтправкиНаРегиональныйСервер;
			ОтправкаОбъект.ПротоколРегиональногоСервера = Новый ХранилищеЗначения(РезультатОтправки.Протокол);
		КонецЕсли;
		Если РезультатОтправки.ЗаверенныйРегиональнымСерверомПакет <> Неопределено Тогда
			ОтправкаОбъект.ЗаверенныйРегиональнымСерверомПакет = Новый ХранилищеЗначения(РезультатОтправки.ЗаверенныйРегиональнымСерверомПакет);
		КонецЕсли;
		Если РезультатОтправки.ЗаверенныйПакетОтправлен <> Неопределено Тогда
			ОтправкаОбъект.ЗаверенныйПакетОтправлен = РезультатОтправки.ЗаверенныйПакетОтправлен;
		КонецЕсли;
		ОтправкаОбъект.Записать();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРезультатОтправкиФСРАР(ОсновныеРеквизитыОтправки, ПодписанныйПакетДляАвторизации, ПараметрыОтправки, ПараметрыСоединения, ЭтоВызовИзСписка, ОтправкаСсылка)
	
	СтатусОтчета = "";
	ЦветСтатуса = ЦветаСтиля.ЦветНезавершившейсяОтправкиБРО;
	СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен;
	
	//запрос протокола обработки
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	ПараметрыСоединения.ПовторятьЗапросПароля = Ложь;
	
	ПолучениеРезультатовОтправкиПослеРегиональногоНаФедеральномПортале = ((ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.ТиповойРегиональныйИФедеральныйСерверы
		ИЛИ ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.МосковскийРегиональныйИФедеральныйСерверы)
		И ОсновныеРеквизитыОтправки.ЗаверенныйПакетОтправлен = Истина);
	ПолученыРезультатыРегиональногоПередОтправкойНаФедеральныйПортал = ((ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.ТиповойРегиональныйИФедеральныйСерверы
		ИЛИ ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.МосковскийРегиональныйИФедеральныйСерверы)
		И НЕ ПолучениеРезультатовОтправкиПослеРегиональногоНаФедеральномПортале И ОсновныеРеквизитыОтправки.СтатусОтправкиНаРегиональныйСервер = Перечисления.СтатусыОтправки.Сдан);
	ПолучениеРезультатовОтправкиНаРегиональномПортале = ((ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.ТиповойРегиональныйИФедеральныйСерверы
		ИЛИ ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.МосковскийРегиональныйИФедеральныйСерверы)
		И НЕ ПолучениеРезультатовОтправкиПослеРегиональногоНаФедеральномПортале И НЕ ПолученыРезультатыРегиональногоПередОтправкойНаФедеральныйПортал);
	ФайлЗаверенногоРегиональнымСерверомПакета = Неопределено;
	НаходитсяВОчередиЗагрузки = Ложь;
	
	Если ПолучениеРезультатовОтправкиПослеРегиональногоНаФедеральномПортале Тогда
		// декларация загружена на региональный портал и на федеральный, получение протокола с федерального
		ПараметрыОтправкиНаФедеральныйПортал = Новый Структура("Организация, ФедеральныйПортал, КодРегиона, КодИНаименованиеРегиона, СсылкаНаПорталОнлайнПроверки, СхемаСдачиОтчетности, ПоляДляЗаписиОтправки",
			ПараметрыОтправки.Организация, Истина, ПараметрыОтправки.КодРегиона, ПараметрыОтправки.КодИНаименованиеРегиона, "", Перечисления.СхемыСдачиОтчетностиФСРАР.ФедеральныйСервер, Неопределено);
		ЗаголовокДекларации = ПолучитьИнформациюОДекларацииНаПорталеФСРАР(ОсновныеРеквизитыОтправки.ИмяФайлаПакета + ".sig", ПодписанныйПакетДляАвторизации, ПараметрыОтправкиНаФедеральныйПортал, ПараметрыСоединения);
		Если ЗаголовокДекларации <> Неопределено Тогда
			ЗаголовокДекларации.РегиональныйПротокол = ОсновныеРеквизитыОтправки.ПротоколРегиональногоСервера;
		КонецЕсли;
		
	ИначеЕсли ПолученыРезультатыРегиональногоПередОтправкойНаФедеральныйПортал Тогда
		// декларация загружена на региональный портал и успешно обработана, но еще не отправлялась на федеральный, возвращает протокол регионального портала в виде хранилища значения
		ЗаголовокДекларации = Новый Структура("ИдентификаторЗаписи, ИмяФайла, Состояние, ЗначениеСостояния, ДатаЗагрузки, РегиональныйПротокол, ОшибкаПолученияРегиональногоПротокола, ФедеральныйПротокол, ОшибкаПолученияФедеральногоПротокола",
			"", ОсновныеРеквизитыОтправки.ИмяФайлаПакета, "", Неопределено, Неопределено, ОсновныеРеквизитыОтправки.ПротоколРегиональногоСервера, "", Неопределено, "");
		
	Иначе
		// декларация загружена на общий портал
		ЗаголовокДекларации = ПолучитьИнформациюОДекларацииНаПорталеФСРАР(ОсновныеРеквизитыОтправки.ИмяФайлаПакета, ПодписанныйПакетДляАвторизации, ПараметрыОтправки, ПараметрыСоединения);
	КонецЕсли;
	
	УспешноОбработана = ПолученыРезультатыРегиональногоПередОтправкойНаФедеральныйПортал;
	ОбработанаСОшибками = Ложь;
	ОшибкаЗапросаПодписанногоРегиональнымПорталомПакета = Ложь;
	Если ЗаголовокДекларации <> Неопределено И НЕ ПолученыРезультатыРегиональногоПередОтправкойНаФедеральныйПортал Тогда
		
		ОсновнойПротоколПуст = Неопределено;
		Если ПолучениеРезультатовОтправкиНаРегиональномПортале Тогда
			УспешноОбработанаПоОсновномуПротоколу = УспешноОбработанаДекларацияФСРАР(ЗаголовокДекларации.РегиональныйПротокол, ПараметрыОтправки.СхемаСдачиОтчетности, НаходитсяВОчередиЗагрузки, ОсновнойПротоколПуст);
		Иначе
			УспешноОбработанаПоОсновномуПротоколу = УспешноОбработанаДекларацияФСРАР(ЗаголовокДекларации.ФедеральныйПротокол, Перечисления.СхемыСдачиОтчетностиФСРАР.ФедеральныйСервер, НаходитсяВОчередиЗагрузки, ОсновнойПротоколПуст);
		КонецЕсли;
		ОбработанаСОшибкамиПоДополнительномуПротоколу = Ложь;
		Если НЕ ПараметрыОтправки.ФедеральныйПортал И НЕ ПолучениеРезультатовОтправкиПослеРегиональногоНаФедеральномПортале И НЕ ПолучениеРезультатовОтправкиНаРегиональномПортале Тогда
			УспешноОбработанаПоРегиональномуПротоколу = УспешноОбработанаДекларацияФСРАР(ЗаголовокДекларации.РегиональныйПротокол, ПараметрыОтправки.СхемаСдачиОтчетности, НаходитсяВОчередиЗагрузки);
			ОбработанаСОшибкамиПоДополнительномуПротоколу = (УспешноОбработанаПоРегиональномуПротоколу <> Неопределено И НЕ УспешноОбработанаПоРегиональномуПротоколу);
		КонецЕсли;
		
		Если ОтправкаСсылка.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ОбъемСобранногоВиноградаДляПроизводстваВинодельческойПродукции
			И УспешноОбработанаПоОсновномуПротоколу = Неопределено
			И ЗаголовокДекларации.ФедеральныйПротокол <> Неопределено И ЗаголовокДекларации.ФедеральныйПротокол.Количество() = 0 Тогда
			
			УспешноОбработанаПоОсновномуПротоколу = УспешноОбработанаПоРегиональномуПротоколу;
		КонецЕсли;
		
		УспешноОбработана = УспешноОбработанаПоОсновномуПротоколу <> Неопределено И УспешноОбработанаПоОсновномуПротоколу И НЕ ОбработанаСОшибкамиПоДополнительномуПротоколу;
		
		Если УспешноОбработана И ПолучениеРезультатовОтправкиНаРегиональномПортале Тогда
			
			Если НЕ ЗначениеЗаполнено(ФайлЗаверенногоРегиональнымСерверомПакета) И НЕ ПараметрыСоединения.ПовторятьСоединение Тогда
				Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
					СообщитьПользователю(ПодставитьПараметрыВСтроку(НСтр("ru = 'Подписанная декларация не получена с сервера. %1'"), ПараметрыСоединения.ОписаниеОшибкиСервером), ПараметрыСоединения.СообщенияПользователю);
				Иначе
					СообщитьПользователю(НСтр("ru = 'Не удалось получить декларацию с подписью регионального сервера Росалкогольрегулирования.'"), ПараметрыСоединения.СообщенияПользователю);
				КонецЕсли;
				ПараметрыСоединения.ОписаниеОшибкиСервером = "";
				
				УспешноОбработанаПоОсновномуПротоколу = Неопределено;
				УспешноОбработана = Ложь;
				ОшибкаЗапросаПодписанногоРегиональнымПорталомПакета = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбработанаСОшибками = (УспешноОбработанаПоОсновномуПротоколу <> Неопределено И НЕ УспешноОбработана) ИЛИ (ОбработанаСОшибкамиПоДополнительномуПротоколу
			И ОсновнойПротоколПуст И ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.ОбщийРегиональныйИФедеральныйСервер);
		
	КонецЕсли;
	
	Если ЗаголовокДекларации <> Неопределено И НЕ ПараметрыСоединения.ПовторятьСоединение Тогда
		
		// получен протокол обработки и отсутствовали ошибки соединения, в том числе при получении подписанного региональным порталом пакета
		
		// анализируем содержимое страницы протокола обработки
		Если УспешноОбработана Тогда
			// есть ссылка на квитанцию - отчет принят
			Если ПолученыРезультатыРегиональногоПередОтправкойНаФедеральныйПортал ИЛИ ПолучениеРезультатовОтправкиНаРегиональномПортале Тогда
				СтатусОтправкиНаРегиональныйСервер = Перечисления.СтатусыОтправки.Сдан;
				СтатусОтчета = НСтр("ru = 'Сдан, ошибок не обнаружено'");
			Иначе
				СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
				СтатусОтчета = НСтр("ru = 'Сдан, ошибок не обнаружено'");
				ЦветСтатуса = ЦветаСтиля.ЦветПоложительногоПротокола;
			КонецЕсли;
			
		ИначеЕсли ОбработанаСОшибками Тогда
			// отчет не принят
			СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят;
			Если ПолучениеРезультатовОтправкиНаРегиональномПортале Тогда
				СтатусОтправкиНаРегиональныйСервер = Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
			Если ОшибкаЗапросаПодписанногоРегиональнымПорталомПакета Тогда
				СтатусОтчета = НСтр("ru = 'Не принят, обнаружены ошибки'");
			Иначе
				СтатусОтчета = НСтр("ru = 'Не принят, обнаружены ошибки'");
			КонецЕсли;
			ЦветСтатуса = ЦветаСтиля.ЦветОшибкиВПротоколеБРО;
			
		Иначе
			// отчет еще не обработан
			СтатусОтчета = НСтр("ru = 'Находится в обработке, попробуйте через некоторое время использовать в отчете кнопку ""Обновить""'");
		КонецЕсли;
		
		Протокол = ГенерироватьHTMLПротоколаОбработкиФСРАР(
			ЗаголовокДекларации,
			СтатусОтчета,
			ЦветСтатуса,
			ПараметрыОтправки.ФедеральныйПортал,
			ОтправкаСсылка,
			ОбработанаСОшибками,
			СтатусОтправки);
		
		ЗаверенныйРегиональнымСерверомПакет = Неопределено;
		Если ЗначениеЗаполнено(ФайлЗаверенногоРегиональнымСерверомПакета) Тогда
			ЗаверенныйРегиональнымСерверомПакет = Новый ДвоичныеДанные(ФайлЗаверенногоРегиональнымСерверомПакета);
		КонецЕсли;
		
		//заполняем результирующую структуру
		Результат = Новый Структура("ДатаПолученияРезультата, СтатусОтправки, Протокол, СтатусОтправкиНаРегиональныйСервер, ЗаверенныйРегиональнымСерверомПакет, ЗаверенныйПакетОтправлен",
			ТекущаяДатаСеанса(), СтатусОтправки, Протокол, ?(ПолучениеРезультатовОтправкиНаРегиональномПортале, СтатусОтправкиНаРегиональныйСервер, Неопределено), ЗаверенныйРегиональнымСерверомПакет, Неопределено);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) ИЛИ НЕ ПараметрыСоединения.ПовторятьСоединение Тогда
		
		Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
			Если ПараметрыСоединения.ОписаниеОшибкиСервером <> НСтр("ru = 'Выполнение операции не поддерживается'") Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Результаты отправки не получены с сервера. %1'"),
					ПараметрыСоединения.ОписаниеОшибкиСервером);
				
				Если ЭтоВызовИзСписка Тогда
					ПредставлениеОтчетаОтправки = ПредставлениеОтчета(ОтправкаСсылка.ОтчетСсылка);
					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = '%1 Попробуйте через некоторое время использовать кнопку ""Обновить"" в отчете %2.'"),
						ТекстСообщения,
						ПредставлениеОтчетаОтправки);
				КонецЕсли;
				
				СообщитьПользователю(ТекстСообщения, ПараметрыСоединения.СообщенияПользователю);
			КонецЕсли;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить результаты отправки с сервера Росалкогольрегулирования.'");
			
			Если ЭтоВызовИзСписка Тогда
				ПредставлениеОтчетаОтправки = ПредставлениеОтчета(ОтправкаСсылка.ОтчетСсылка);
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = '%1 Возможно, сервер перегружен. Попробуйте через некоторое время использовать кнопку ""Обновить"" в отчете %2.'"),
					ТекстСообщения,
					ПредставлениеОтчетаОтправки);
			КонецЕсли;
			
			СообщитьПользователю(ТекстСообщения, ПараметрыСоединения.СообщенияПользователю);
		КонецЕсли;
		
		Результат = Неопределено;
		
	Иначе
		
		// возможно, проблемы с доступом в интернет
		Результат = Неопределено;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФайлЗаверенногоРегиональнымСерверомПакета) Тогда
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлЗаверенногоРегиональнымСерверомПакета);
	КонецЕсли;
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	
	Возврат Результат;
	
КонецФункции

Функция ОтправкаНаСерверФСРАР(ФайлыИДанныеОтправки, ОтчетСсылка, ПараметрыОтправки, ПараметрыСоединения, Данные64CAPTCHA = "")
	
	Данные64CAPTCHA = "";
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	ПараметрыСоединения.ПовторятьЗапросПароля = Ложь;
	ЗаголовокДекларации = Неопределено;
	
	ТекстСообщенияПриУспехе = ОтправитьЗашифрованныйПакетНаСерверФСРАР(ФайлыИДанныеОтправки, ПараметрыОтправки, ПараметрыСоединения, Данные64CAPTCHA);
	ОтправкаПроизведена = (ТекстСообщенияПриУспехе <> Неопределено);
	
	Если ОтправкаПроизведена Тогда
		
		ПараметрыСоединения.ПовторятьСоединение = Ложь;
		
		УспешноОбработана = Неопределено;
		РегиональныйПротоколHTML = "";
		
		Если ЗаголовокДекларации <> Неопределено Тогда
			
			УспешноОбработана = УспешноОбработанаДекларацияФСРАР(ЗаголовокДекларации.РегиональныйПротокол, ПараметрыОтправки.СхемаСдачиОтчетности, Истина);
			
			Если УспешноОбработана = Ложь Тогда
				СтатусОтчета = НСтр("ru = 'Отчет не принят, обнаружены ошибки.'");
				ЦветСтатуса = Новый Цвет(255, 0, 0);
			Иначе
				СтатусОтчета = НСтр("ru = 'Отчет принят региональным сервером и будет отправлен на федеральный сервер.'");
				ЦветСтатуса = Новый Цвет(0, 0, 192);
			КонецЕсли;
			
			ОтправкаСсылка = ПолучитьПоследнююОтправкуОтчетаВФСРАР(ОтчетСсылка);
			РегиональныйПротоколHTML = ГенерироватьHTMLПротоколаОбработкиФСРАР(ЗаголовокДекларации, СтатусОтчета, ЦветСтатуса, Ложь, ОтправкаСсылка, НЕ УспешноОбработана);
			
		КонецЕсли;
		
		//отправленный файл принят сервером
		НоваяЗапись = Справочники.ОтправкиФСРАР.СоздатьЭлемент();
		НоваяЗапись.ОтчетСсылка = ОтчетСсылка;
		НоваяЗапись.ИдентификаторОтправкиНаСервере = ПараметрыСоединения.ИдентификаторОтправкиНаСервере;
		ДвоичныеДанныеПакета = Новый ДвоичныеДанные(ФайлыИДанныеОтправки.ИмяФайлаПакета);
		НоваяЗапись.ЗашифрованныйПакет = Новый ХранилищеЗначения(ДвоичныеДанныеПакета);
		НоваяЗапись.ИмяФайлаПакета = ФайлыИДанныеОтправки.КороткоеИмяФайлаПакета;
		
		Если УспешноОбработана = Ложь Тогда
			НоваяЗапись.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят;
			НоваяЗапись.Протокол = Новый ХранилищеЗначения(РегиональныйПротоколHTML);
			
		Иначе
			НоваяЗапись.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен;
		КонецЕсли;
		
		НоваяЗапись.ДатаОтправки = ТекущаяДатаСеанса();
		НоваяЗапись.Организация = ?(ОтчетСсылка <> Неопределено, ОтчетСсылка.Организация, Неопределено);
		НоваяЗапись.СхемаСдачиОтчетности = ПараметрыОтправки.СхемаСдачиОтчетности;
		
		Если ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.ТиповойРегиональныйИФедеральныйСерверы
			ИЛИ ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.МосковскийРегиональныйИФедеральныйСерверы Тогда
			
			Если УспешноОбработана = Ложь Тогда
				НоваяЗапись.СтатусОтправкиНаРегиональныйСервер = Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				НоваяЗапись.СтатусОтправкиНаРегиональныйСервер = Перечисления.СтатусыОтправки.Отправлен;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РегиональныйПротоколHTML) Тогда
				НоваяЗапись.ПротоколРегиональногоСервера = Новый ХранилищеЗначения(РегиональныйПротоколHTML);
			КонецЕсли;
			
			НоваяЗапись.ЗаверенныйПакетОтправлен = Ложь;
			
		КонецЕсли;
		
		НоваяЗапись.ДатаНачалаПериода = ПараметрыОтправки.ПоляДляЗаписиОтправки.ДатаНачалаПериода;
		НоваяЗапись.ДатаОкончанияПериода = ПараметрыОтправки.ПоляДляЗаписиОтправки.ДатаОкончанияПериода;
		
		Если ОтчетСсылка <> Неопределено И ТипЗнч(ОтчетСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			НоваяЗапись.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", ОтчетСсылка.ИсточникОтчета)
			
		Иначе // электронные представления
			НоваяЗапись.ВидОтчета = ?(ОтчетСсылка <> Неопределено, ОтчетСсылка.ВидОтчета, Неопределено);
		КонецЕсли;
		
		НоваяЗапись.Версия = ПараметрыОтправки.ПоляДляЗаписиОтправки.Версия;
		НоваяЗапись.ПредставлениеПериода = ПредставлениеПериода(НоваяЗапись.ДатаНачалаПериода, КонецДня(НоваяЗапись.ДатаОкончанияПериода), "ФП=Истина");
		НоваяЗапись.ПредставлениеВидаДокумента = ПредставлениеВидаДокумента(НоваяЗапись.Версия);
		НоваяЗапись.Записать();
		
		Результат = Новый Структура("НоваяОтправкаСсылка, УспешноОбработана", НоваяЗапись.Ссылка, УспешноОбработана);
		
		Возврат Результат;
		
	ИначеЕсли (ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) ИЛИ НЕ ПараметрыСоединения.ПовторятьСоединение)
		И НЕ ЗначениеЗаполнено(Данные64CAPTCHA) И ПараметрыСоединения.ТребуетсяРегистрация <> Истина И ПараметрыСоединения.ТребуетсяПовторнаяАвторизация <> Истина Тогда
		
		ЭтоРегламентированныйОтчет = (ТипЗнч(ОтчетСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") ИЛИ ТипЗнч(ОтчетСсылка) = Тип("Неопределено"));
		
		Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
			
			//отправленный файл не был принят сервером, получено описание ошибки
			Если Прав(ПараметрыСоединения.ОписаниеОшибкиСервером, 1) <> "." И Прав(ПараметрыСоединения.ОписаниеОшибкиСервером, 1) <> "!" Тогда
				ПараметрыСоединения.ОписаниеОшибкиСервером = ПараметрыСоединения.ОписаниеОшибкиСервером + ".";
			КонецЕсли;
			СообщитьПользователю(ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет не принят сервером. %1'"), ПараметрыСоединения.ОписаниеОшибкиСервером) + " " + ?(ЭтоРегламентированныйОтчет,
				НСтр("ru = 'Для выгрузки отчета в файл используйте меню ""Выгрузка"" - ""Выгрузить для портала ФСРАР"".'"), НСтр("ru = 'Для выгрузки отчета в файл используйте меню ""Еще"" - ""Выгрузить"".'"))
				+ " " + НСтр("ru = 'С информацией о порядке представления отчета ознакомьтесь на сайте http://service.fsrar.ru'"), ПараметрыСоединения.СообщенияПользователю);
			
		Иначе
			// в ответе сервера отсутствует описание ошибки и установлен признак повтора соединения
			СообщитьПользователю(НСтр("ru = 'Зашифрованный пакет не удалось отправить на сервер Росалкогольрегулирования.'") + " " + ?(ЭтоРегламентированныйОтчет,
				НСтр("ru = 'Для выгрузки отчета в файл используйте меню ""Выгрузка"" - ""Выгрузить для портала ФСРАР"".'"), НСтр("ru = 'Для выгрузки отчета в файл используйте меню ""Еще"" - ""Выгрузить"".'"))
				+ " " + НСтр("ru = 'С информацией о порядке представления отчета ознакомьтесь на сайте http://service.fsrar.ru'"), ПараметрыСоединения.СообщенияПользователю);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОтправитьВФСРАРССервера(ЭтоЭлектроннаяПодписьВМоделиСервиса, Знач СтрокаBase64ФайлаОтправки, Знач СтрокаBase64ФайлаПакета, Знач ПодписанныйПакетДляАвторизации, Знач КороткоеИмяФайлаПакета, Знач ОтчетСсылка, Знач ПараметрыОтправки, ПараметрыСоединения, Данные64CAPTCHA = "") Экспорт
	
	// получаем двоичные данные файлов
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		ДвоичныеДанныеФайлаОтправки = ПолучитьИзВременногоХранилища(СтрокаBase64ФайлаОтправки);
		ДвоичныеДанныеФайлаПакета = ПолучитьИзВременногоХранилища(СтрокаBase64ФайлаПакета);
	Иначе
		ДвоичныеДанныеФайлаОтправки = Base64Значение(СтрокаBase64ФайлаОтправки);
		ДвоичныеДанныеФайлаПакета = Base64Значение(СтрокаBase64ФайлаПакета);
	КонецЕсли;
	
	// выгружаем двоичные данные в файл
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайлаОтправки.Записать(ИмяФайлаОтправки);
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайлаПакета.Записать(ИмяФайлаПакета);
	
	ФайлыИДанныеОтправки = Новый Структура("ПодписанныйПакетДляАвторизации, КороткоеИмяФайлаПакета, ИмяФайлаОтправки, ИмяФайлаПакета", ПодписанныйПакетДляАвторизации, КороткоеИмяФайлаПакета, ИмяФайлаОтправки, ИмяФайлаПакета);
	
	Результат = ОтправкаНаСерверФСРАР(ФайлыИДанныеОтправки, ОтчетСсылка, ПараметрыОтправки, ПараметрыСоединения, Данные64CAPTCHA);
	
	ПараметрыСоединения.СоединениеHTTP = Неопределено;
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтправки);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаПакета);
	
	Возврат Результат;
	
КонецФункции

Функция ГенерироватьHTMLПротоколаОбработкиФСРАР(
	ЗаголовокДекларации,
	СтатусОтчета,
	ЦветСтатуса,
	ФедеральныйПортал,
	ОтправкаСсылка,
	ЕстьОшибки = Ложь,
	СтатусОтправки = Неопределено)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Шаблон = ПолучитьМакет("ФСРАРШаблонДляHTML");
	
	СекцияШапка = Шаблон.ПолучитьОбласть("ШапкаСЗаголовком");

	СвойстваОрганизации 			= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(ОтправкаСсылка.Организация, ,"НаимЮЛПол, ИННЮЛ");
	ПолноеНаименованиеОрганизации 	= СвойстваОрганизации.НаимЮЛПол;
	ИННОрганизации 					= СвойстваОрганизации.ИННЮЛ;

	// Наименование протокола 
	НаименованиеПротокола = "";
	Если ЕстьОшибки Тогда
		НаименованиеПротокола = НСтр("ru = 'Протокол ошибок'");
	Иначе
		НаименованиеПротокола = НСтр("ru = 'Протокол о сдаче'");
	КонецЕсли;
	СекцияШапка.Параметры.НаименованиеПротокола = НаименованиеПротокола;
	
	СведенияПоОбъекту 	= СведенияПоОтправляемымОбъектам(ОтправкаСсылка.ОтчетСсылка);
	НаименованиеОргана 	= СведенияПоОбъекту.ПредставлениеКонтролирующегоОргана;
	НаименованиеОтчета 	= СведенияПоОбъекту.Наименование;

	СекцияШапка.Параметры.Организация 	= ПолноеНаименованиеОрганизации;
	СекцияШапка.Параметры.ИНН 			= НСтр("ru = 'ИНН '") + ИННОрганизации;
	СекцияШапка.Параметры.Получатель 	= НаименованиеОргана;
	СекцияШапка.Параметры.Отчет 		= НаименованиеОтчета;
	СекцияШапка.Параметры.Файл 			= ЗаголовокДекларации.ИмяФайла;
	СекцияШапка.Параметры.СтатусОтчета 	= СтатусОтчета;
	СекцияШапка.Области.СтатусОтчета.ЦветТекста = ЦветСтатуса;
			
	ТабДок.Вывести(СекцияШапка);
	
	Если СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
		РезультатыСверкиОстатковПолучены = Ложь;
		СверкаОстатковУспешна = Ложь;
		РезультатыСверкиКонтрагентовПолучены = Ложь;
		СверкаКонтрагентовУспешна = Ложь;
		
		ПротоколыДекларации = Новый Массив;
		Если ЗаголовокДекларации.ФедеральныйПротокол <> Неопределено Тогда
			ПротоколыДекларации.Добавить(ЗаголовокДекларации.ФедеральныйПротокол);
		КонецЕсли;
		Если ЗаголовокДекларации.РегиональныйПротокол <> Неопределено Тогда
			ПротоколыДекларации.Добавить(ЗаголовокДекларации.РегиональныйПротокол);
		КонецЕсли;
		
		Для каждого ПротоколДекларации Из ПротоколыДекларации Цикл
			Для каждого СтрокаПротокола Из ПротоколДекларации Цикл
				Если НЕ РезультатыСверкиОстатковПолучены
					И СтрНайти(СтрокаПротокола.Сообщение, "Сверка остатков") > 0 Тогда
					РезультатыСверкиОстатковПолучены = Истина;
					
					Если СтрНайти(СтрокаПротокола.Сообщение, "прошла успешно")
						ИЛИ СтрНайти(СтрокаПротокола.Сообщение, "не требуется")
						ИЛИ СтрНайти(СтрокаПротокола.Сообщение, "не проведена") Тогда
						СверкаОстатковУспешна = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ РезультатыСверкиКонтрагентовПолучены
					И (СтрНайти(СтрокаПротокола.Сообщение, "Сверка с контрагентами") > 0
					ИЛИ СтрНайти(СтрокаПротокола.Сообщение, "сверки по контрагентам") > 0) Тогда
					РезультатыСверкиКонтрагентовПолучены = Истина;
					
					Если СтрНайти(СтрокаПротокола.Сообщение, "прошла успешно")
						ИЛИ СтрНайти(СтрокаПротокола.Сообщение, "не требуется")
						ИЛИ СтрНайти(СтрокаПротокола.Сообщение, "не проведена")
						ИЛИ СтрНайти(СтрокаПротокола.Сообщение, "сверки по контрагентам") Тогда
						СверкаКонтрагентовУспешна = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если РезультатыСверкиОстатковПолучены И РезультатыСверкиКонтрагентовПолучены Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ СверкаОстатковУспешна ИЛИ НЕ СверкаКонтрагентовУспешна Тогда
			СекцияШапка = Шаблон.ПолучитьОбласть("ШапкаДополнениеЗаголовка");
			СекцияШапка.Параметры.ДополнительныйСтатусОтчета = ?(НЕ РезультатыСверкиОстатковПолучены ИЛИ НЕ РезультатыСверкиКонтрагентовПолучены,
				НСтр("ru = 'Для получения информации о результатах сверки с контрагентами и проверки остатков
						   |обновите состояние отчета позже.
						   |При выявлении расхождений отправьте корректирующую декларацию.'"),
				НСтр("ru = 'При выявлении расхождений по результатам сверки с контрагентами или проверки остатков
						   |отправьте корректирующую декларацию.'"));
			СекцияШапка.Области.ДополнительныйСтатусОтчета.ЦветТекста = Новый Цвет(0, 0, 255);
			ТабДок.Вывести(СекцияШапка);
		КонецЕсли;
	КонецЕсли;
	
	СекцияШапка = Шаблон.ПолучитьОбласть("ШапкаРазделительПослеЗаголовка");
	ТабДок.Вывести(СекцияШапка);
	
	Если НЕ ФедеральныйПортал Тогда
		
		// выводим заголовок и региональный протокол
		
		СекцияШапка = Шаблон.ПолучитьОбласть("Шапка");
		ТабДок.Вывести(СекцияШапка);
		
		Если ЗаголовокДекларации.РегиональныйПротокол <> Неопределено И ТипЗнч(ЗаголовокДекларации.РегиональныйПротокол) <> Тип("ХранилищеЗначения") Тогда
			СекцияСтрока = Шаблон.ПолучитьОбласть("Строка");
			Для Каждого СтрокаРегиональногоПротокола Из ЗаголовокДекларации.РегиональныйПротокол Цикл
				
				СекцияСтрока.Параметры.Дата = ДатаИзСтрокиРазныхФорматов(СтрокаРегиональногоПротокола.Дата);
				СекцияСтрока.Параметры.Модуль = СтрокаРегиональногоПротокола.Модуль;
				СекцияСтрока.Параметры.Сообщение = СтрокаРегиональногоПротокола.Сообщение;
				ТабДок.Вывести(СекцияСтрока);
				
			КонецЦикла;
			
		КонецЕсли;
		
		СекцияПодвал = Шаблон.ПолучитьОбласть("Подвал");
		ТабДок.Вывести(СекцияПодвал);
		
		Если ЗначениеЗаполнено(ЗаголовокДекларации.ОшибкаПолученияРегиональногоПротокола) Тогда
			СекцияОписаниеОшибки = Шаблон.ПолучитьОбласть("ОписаниеОшибки");
			СекцияОписаниеОшибки.Параметры.ОписаниеОшибки = ЗаголовокДекларации.ОшибкаПолученияРегиональногоПротокола;
			ТабДок.Вывести(СекцияОписаниеОшибки);
		КонецЕсли;
		
		СекцияРазделительПротоколов = Шаблон.ПолучитьОбласть("РазделительПротоколов");
		ТабДок.Вывести(СекцияРазделительПротоколов);
		
	КонецЕсли;
	
	// выводим федеральный протокол и статус
	
	СекцияШапка = Шаблон.ПолучитьОбласть("ШапкаФедеральный");
	ТабДок.Вывести(СекцияШапка);
	
	Если ЗаголовокДекларации.ФедеральныйПротокол <> Неопределено Тогда
		СекцияСтрока = Шаблон.ПолучитьОбласть("СтрокаФедеральный");
		Для Каждого СтрокаФедеральногоПротокола Из ЗаголовокДекларации.ФедеральныйПротокол Цикл
			
			СекцияСтрока.Параметры.ДатаФедеральный = ДатаИзСтрокиРазныхФорматов(СтрокаФедеральногоПротокола.Дата);
			СекцияСтрока.Параметры.МодульФедеральный = СтрокаФедеральногоПротокола.Модуль;
			СекцияСтрока.Параметры.СообщениеФедеральный = СтрокаФедеральногоПротокола.Сообщение;
			ТабДок.Вывести(СекцияСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
	СекцияПодвал = Шаблон.ПолучитьОбласть("ПодвалФедеральный");
	ТабДок.Вывести(СекцияПодвал);
	
	Если ЗначениеЗаполнено(ЗаголовокДекларации.ОшибкаПолученияФедеральногоПротокола) Тогда
		СекцияОписаниеОшибки = Шаблон.ПолучитьОбласть("ОписаниеОшибкиФедеральный");
		СекцияОписаниеОшибки.Параметры.ОписаниеОшибкиФедеральный = ЗаголовокДекларации.ОшибкаПолученияФедеральногоПротокола;
		ТабДок.Вывести(СекцияОписаниеОшибки);
	КонецЕсли;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабДок.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.HTML);
	ТекстHTML = Новый ТекстовыйДокумент;
	ТекстHTML.Прочитать(ИмяВременногоФайла);
	ТекстHTML = ТекстHTML.ПолучитьТекст();
	ТекстHTML = СтрЗаменить(ТекстHTML, "МеткаРазделителяПротоколов", "<!--МеткаРазделителяПротоколов-->");
	
	// соединить сгенерированный ранее текст регионального протокола и сгенериованный сейчас текст федерального протокола
	
	Если ЗаголовокДекларации.РегиональныйПротокол <> Неопределено И ТипЗнч(ЗаголовокДекларации.РегиональныйПротокол) = Тип("ХранилищеЗначения") Тогда
		
		ТекстHTMLРегиональныйПротокол = ЗаголовокДекларации.РегиональныйПротокол.Получить();
		ТекстHTMLФедеральныйПротокол = ТекстHTML;
		ТекстHTMLФедеральныйПротокол = СтрЗаменить(ТекстHTMLФедеральныйПротокол, "CLASS=R", "CLASS=FR");
		ТекстHTMLФедеральныйПротокол = СтрЗаменить(ТекстHTMLФедеральныйПротокол, "CLASS=""R", "CLASS=""FR");
		ТекстHTMLФедеральныйПротокол = СтрЗаменить(ТекстHTMLФедеральныйПротокол, "tr.R", "tr.FR");
		ТекстHTMLФедеральныйПротокол = СтрЗаменить(ТекстHTMLФедеральныйПротокол, "td.R", "td.FR");
		
		НачалоСтилейТаблиц = СтрНайти(ТекстHTMLФедеральныйПротокол, "tr.FR");
		КонецСтилейТаблиц = СтрНайти(ТекстHTMLФедеральныйПротокол, "table {");
		Если КонецСтилейТаблиц = 0 Тогда
			КонецСтилейТаблиц = СтрНайти(ТекстHTMLФедеральныйПротокол, "table{");
		КонецЕсли;
		СтилиТаблицФедеральныйПротокол = "";
		Если НачалоСтилейТаблиц > 0 И КонецСтилейТаблиц > 0 И КонецСтилейТаблиц > НачалоСтилейТаблиц Тогда
			СтилиТаблицФедеральныйПротокол = Сред(ТекстHTMLФедеральныйПротокол, НачалоСтилейТаблиц, КонецСтилейТаблиц - НачалоСтилейТаблиц);
		КонецЕсли;
		
		ПозицияОкончанияРегиональногоПротокола = СтрНайти(ТекстHTMLРегиональныйПротокол, "<!--МеткаРазделителяПротоколов-->");
		ПозицияНачалаФедеральногоПротокола = СтрНайти(ТекстHTMLФедеральныйПротокол, "<!--МеткаРазделителяПротоколов-->");
		Если ПозицияОкончанияРегиональногоПротокола > 0 И ПозицияНачалаФедеральногоПротокола > 0 Тогда
			
			ТекстHTML = Лев(ТекстHTMLРегиональныйПротокол, ПозицияОкончанияРегиональногоПротокола - 1)
				+ Сред(ТекстHTMLФедеральныйПротокол, ПозицияНачалаФедеральногоПротокола);
				
			Если ЗначениеЗаполнено(СтилиТаблицФедеральныйПротокол) Тогда
				НачалоСтилейТаблиц = СтрНайти(ТекстHTMLРегиональныйПротокол, "tr.R");
				Если НачалоСтилейТаблиц > 0 Тогда
					ТекстHTML = Лев(ТекстHTML, НачалоСтилейТаблиц - 1) + СтилиТаблицФедеральныйПротокол + Сред(ТекстHTML, НачалоСтилейТаблиц);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ПолучитьОсновныеСвойстваПоследнейОтправкиОтчетаВФСРАР(Знач ОтчетСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтправкиФСРАР.Ссылка,
		|	ОтправкиФСРАР.ИдентификаторОтправкиНаСервере КАК Идентификатор,
		|	ОтправкиФСРАР.ИмяФайлаПакета КАК ИмяФайлаПакета,
		|	ОтправкиФСРАР.СтатусОтправки КАК Статус,
		|	ОтправкиФСРАР.СхемаСдачиОтчетности КАК СхемаСдачиОтчетности,
		|	ОтправкиФСРАР.СтатусОтправкиНаРегиональныйСервер КАК СтатусОтправкиНаРегиональныйСервер,
		|	ОтправкиФСРАР.ЗаверенныйПакетОтправлен КАК ЗаверенныйПакетОтправлен
		|ИЗ
		|	Справочник.ОтправкиФСРАР КАК ОтправкиФСРАР
		|ГДЕ
		|	ОтправкиФСРАР.ОтчетСсылка = &ЭтотОтчет
		|	И ОтправкиФСРАР.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтправкиФСРАР.ДатаОтправки УБЫВ";
	Запрос.Параметры.Вставить("ЭтотОтчет", ОтчетСсылка);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоследнююОтправкуОтчетаВФСРАР(ОтчетСсылка) Экспорт
	
	Отправка = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтправкиФСРАР.Ссылка
		|ИЗ
		|	Справочник.ОтправкиФСРАР КАК ОтправкиФСРАР
		|ГДЕ
		|	ОтправкиФСРАР.ОтчетСсылка = &ЭтотОтчет
		|	И ОтправкиФСРАР.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтправкиФСРАР.ДатаОтправки УБЫВ";
	Запрос.Параметры.Вставить("ЭтотОтчет", ОтчетСсылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Отправка = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Отправка;
	
КонецФункции

Процедура ОбновитьСтатусОтправкиФСРАРОтчета(Отчет)
	
	// находим последнюю не помеченную на удаление отправку отчета
	ПоследняяОтправка = ПолучитьПоследнююОтправкуОтчетаВФСРАР(Отчет);
	
	// вычисляем значение статуса отправки (ПеречислениеСсылка.СтатусыОтправки)
	Если ЗначениеЗаполнено(ПоследняяОтправка) Тогда
		
		СтатусОтправки = ПоследняяОтправка.СтатусОтправки;
		Если СтатусОтправки = Перечисления.СтатусыОтправки.ПринятЕстьОшибки Тогда
			//введено после добавления дополнительного статуса ПринятЕстьОшибки, при котором отчет считается сданным
			СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
		КонецЕсли;
		
	Иначе
		СтатусОтправки = Неопределено;
	КонецЕсли;
	
	// сохраняем статус в базе
	ЗаписатьСтатусОтправкиФСРАРОтчета(Отчет, СтатусОтправки, ПоследняяОтправка);
	
КонецПроцедуры

Процедура ЗаписатьСтатусОтправкиФСРАРОтчета(Отчет, СтатусОтправки, ОснованиеСтатуса)
	
	Если ЗначениеЗаполнено(СтатусОтправки) Тогда
		МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		МенЗап.Объект = Отчет;
		МенЗап.Статус = СтатусОтправки;
		МенЗап.Основание = ОснованиеСтатуса;
		МенЗап.Записать(Истина);
	Иначе
		МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		МенЗап.Объект = Отчет;
		МенЗап.Прочитать();
		Если МенЗап.Выбран() Тогда
			МенЗап.Удалить();
		КонецЕсли;
	КонецЕсли;
	
	// вызываем переопределяемую процедуру отработки изменения статуса отправки
	ПриИзмененииСтатусаОтправкиДокумента(Отчет, СтатусОтправки);
	
КонецПроцедуры

Функция ПолучитьПустуюДатуЗавершенияОтправкиФСРАР() Экспорт
	
	Возврат '39991231235959';
	
КонецФункции

Процедура ПриЗаписиОтправкиФСРАР(Объект, Отказ) Экспорт
	
	Если Объект.ОтчетСсылка <> Неопределено Тогда
		// отражаем изменения в регистре статусов отправки
		ОбновитьСтатусОтправкиФСРАРОтчета(Объект.ОтчетСсылка);
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписьОбъектовРегламентированнойОтчетности(Объект.ОтчетСсылка, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПоляНаСервереДляЗаписиОтправкиВФСРАР(ОбъектСсылка) Экспорт
	
	ФедеральныйПортал = (ОбъектСсылка.ВидОтчета <> Неопределено И ОбъектСсылка.ВидОтчета.ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ОтчетФСРАРОпт);
	
	Возврат Новый Структура("ДатаНачалаПериода, ДатаОкончанияПериода, Версия, ФедеральныйПортал",
		ОбъектСсылка.ДатаНачала, ОбъектСсылка.ДатаОкончания, ОбъектСсылка.Версия, ФедеральныйПортал);
	
КонецФункции

Процедура ПередЗаписьюОтправкиФСРАР(Объект, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		Объект.Период = СокрЛП(Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd") + Формат('39991231' - Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd"));
	КонецЕсли;
	
	Если Объект.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
			Объект.ДатаЗакрытия = ПолучитьПустуюДатуЗавершенияОтправкиФСРАР();
		КонецЕсли;
		
	Иначе
		Объект.ДатаЗакрытия = Объект.ДатаПолученияРезультата;
	КонецЕсли;
	
КонецПроцедуры

Функция СписокДопустимыхОрганизацийВОбъектахОбменаФСРАР() Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаФСРАР.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиОбменаФСРАР КАК НастройкиОбменаФСРАР
	|ГДЕ
	|	НастройкиОбменаФСРАР.ИспользоватьОбмен = ИСТИНА";
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен с общим региональным и федеральным сервером на площадке ФСРАР

Функция ЗарегистрироватьсяВФСРАРССервера(Знач ПодписанныйПакетДляРегистрации, Знач ПараметрыОтправки, ПараметрыСоединения, ОтправкаРегламентированногоОтчета = Неопределено) Экспорт
	
	ПараметрыСоединения.ИдентификаторОтправкиНаСервере = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.4.0") >= 0
	И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.4.437") < 0 Тогда
		СообщитьПользователю(НСтр("ru = 'Для выполнения обмена необходима версия платформы не ниже 8.3.4.437'"), ПараметрыСоединения.СообщенияПользователю);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыОтправки.ФедеральныйПортал ИЛИ ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.ТиповойРегиональныйИФедеральныйСерверы
		ИЛИ ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.МосковскийРегиональныйИФедеральныйСерверы Тогда
		АдресСервера = "service.fsrar.ru";
	Иначе
		АдресСервера = "service.alcolicenziat.ru";
	КонецЕсли;
	
	// устанавливаем соединение с сервером
	ОписаниеОшибкиУстановкиСоединения = "";
	ПараметрыСоединения.СоединениеHTTP = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета("https://" + АдресСервера, ОписаниеОшибкиУстановкиСоединения);
	
	Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		СообщитьПользователю(		
			СтрШаблон(НСтр("ru = 'Не удалось установить соединение с сервером онлайн-проверки:
                            |%1'"), ОписаниеОшибкиУстановкиСоединения), ПараметрыСоединения.СообщенияПользователю);
		Возврат Ложь;
	КонецЕсли;
	
	// отправка данных регистрации
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ИмяФайлаПодписанногоПакета = ПолучитьИмяВременногоФайла();
	ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаПодписанногоПакета, "windows-1251");
	ЗаписываемыйФайл.Записать(ПодписанныйПакетДляРегистрации);
	ЗаписываемыйФайл.Закрыть();
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаПодписанногоПакета, "/registration", ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаПодписанногоПакета);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		Возврат Ложь;
		
	КонецПопытки;
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаПодписанногоПакета);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ПараметрыСоединения.СоединениеHTTP = Неопределено;
	
	ТекстОшибки = ТекстПослеПрефикса(ТекстОтвета, "<center><b>Ошибка.<", "</center>");
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЗаголовокОшибки = "";
		ТекстОшибки = Строка(ТекстПослеПрефикса(ТекстОшибки, "'")); // текст после завершение строки "Ошибка"
		ТекстОшибки = Строка(ТекстПослеПрефикса(ТекстОшибки, "'")); // текст с начала заголовка информации об ошибке
		ПозицияКонцаЗаголовка = СтрНайти(ТекстОшибки, "'");
		Если ПозицияКонцаЗаголовка > 0 Тогда
			ЗаголовокОшибки = Лев(ТекстОшибки, ПозицияКонцаЗаголовка - 1);
			ЗаголовокОшибки = СтрЗаменить(ЗаголовокОшибки, "<br>", " ");
			ЗаголовокОшибки = СокрЛП(ЗаголовокОшибки);
			ТекстОшибки = Сред(ТекстОшибки, ПозицияКонцаЗаголовка + 1);
			ТекстОшибки = Строка(ТекстПослеПрефикса(ТекстОшибки, "'", "'"));  // текст описания ошибки
		КонецЕсли;
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "<br>", " ");
		ТекстОшибки = СокрЛП(ТекстОшибки);
		ТекстОшибки = ЗаголовокОшибки + ?(ЗаголовокОшибки <> "" И ТекстОшибки <> "", ". ", "") + ТекстОшибки;
		
	Иначе
		ТекстОшибки = ТекстПослеПрефикса(ТекстОтвета, "<font color=""red""><b>", "</");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстИзHTML(ТекстОшибки);
		ПараметрыСоединения.ОписаниеОшибкиСервером = СокрЛП(ПараметрыСоединения.ОписаниеОшибкиСервером);
		Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
			ПараметрыСоединения.ОписаниеОшибкиСервером = НСтр("ru = 'Ошибка при регистрации на портале ФСРАР.'");
		КонецЕсли;
		Если Прав(ПараметрыСоединения.ОписаниеОшибкиСервером, 1) <> "." И Прав(ПараметрыСоединения.ОписаниеОшибкиСервером, 1) <> "!" Тогда
			ПараметрыСоединения.ОписаниеОшибкиСервером = ПараметрыСоединения.ОписаниеОшибкиСервером + ".";
		КонецЕсли;
		
		СообщитьПользователю(ПараметрыСоединения.ОписаниеОшибкиСервером + ?(ОтправкаРегламентированногоОтчета = Неопределено, "", " " + ?(ОтправкаРегламентированногоОтчета = Истина,
			НСтр("ru = 'Для выгрузки отчета в файл используйте меню ""Выгрузка"" - ""Выгрузить для портала ФСРАР"".'"), НСтр("ru = 'Для выгрузки отчета в файл используйте меню ""Еще"" - ""Выгрузить"".'"))
			+ " " + НСтр("ru = 'С информацией о порядке представления отчета ознакомьтесь на сайте http://service.fsrar.ru'")), ПараметрыСоединения.СообщенияПользователю);
		
		Возврат Ложь;
		
	Иначе
		ПараметрыСоединения.ТребуетсяРегистрация = Ложь;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПодписываемыеДанныеПорталаФСРАРССервера(СлучайныйКлюч, Данные64CAPTCHA, Знач ПараметрыОтправки, ПараметрыСоединения, ВызовИзОтправки = Истина, ДляРегистрации = Ложь) Экспорт
	
	Если ПараметрыОтправки.ФедеральныйПортал ИЛИ ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.ТиповойРегиональныйИФедеральныйСерверы
		ИЛИ ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.МосковскийРегиональныйИФедеральныйСерверы Тогда
		АдресСервераОнлайнПроверки = "service.fsrar.ru";
	Иначе
		АдресСервераОнлайнПроверки = "service.alcolicenziat.ru";
	КонецЕсли;
	
	СлучайныйКлюч = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.4.0") >= 0
	И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.4.437") < 0 Тогда
		СообщитьПользователю(НСтр("ru = 'Для выполнения обмена необходима версия платформы не ниже 8.3.4.437'"), ПараметрыСоединения.СообщенияПользователю);
		Если НЕ ВызовИзОтправки Тогда
			ПараметрыСоединения.ОписаниеОшибкиСервером = НСтр("ru = 'Выполнение операции не поддерживается'");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	// устанавливаем соединение с сервером
	ОписаниеОшибки = "";
	ПараметрыСоединения.СоединениеHTTP = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета("https://" + АдресСервераОнлайнПроверки, ОписаниеОшибки);
	Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
		
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Не удалось установить соединение с сервером онлайн-проверки: 
                      |%1.'"), ОписаниеОшибки), ПараметрыСоединения.СообщенияПользователю);
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	Если НЕ ДляРегистрации Тогда
		ЗапросHTTP = Новый HTTPЗапрос("/auth/ecplogin", ЗаголовкиHTTP);
	Иначе
		ЗапросHTTP = Новый HTTPЗапрос("/registration", ЗаголовкиHTTP);
	КонецЕсли;
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		Возврат Неопределено;
		
	КонецПопытки;
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "windows-1251");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	НачалоСлучайногоКлюча = СтрНайти(ТекстОтвета, "name: 'csrf'");
	Если НачалоСлучайногоКлюча = 0 Тогда
		НачалоСлучайногоКлюча = СтрНайти(ТекстОтвета, "name: 'csrf_Vseh_pokarau)'");
	КонецЕсли;
	
	Если НачалоСлучайногоКлюча <> 0 Тогда
		
		ТекстОтветаСМетки = Прав(ТекстОтвета, СтрДлина(ТекстОтвета) - НачалоСлучайногоКлюча + 1);
		ПрефиксЗначенияСлучайногоКлюча = "value: '";
		НачалоЗначенияСлучайногоКлюча = СтрНайти(ТекстОтветаСМетки, ПрефиксЗначенияСлучайногоКлюча);
		
		Если НачалоЗначенияСлучайногоКлюча <> 0 Тогда
			
			ТекстОтветаСМетки = Прав(ТекстОтветаСМетки, СтрДлина(ТекстОтветаСМетки) - НачалоЗначенияСлучайногоКлюча - СтрДлина(ПрефиксЗначенияСлучайногоКлюча) + 1);
			КонецЗначенияСлучайногоКлюча = СтрНайти(ТекстОтветаСМетки, "'");
			Если КонецЗначенияСлучайногоКлюча <> 0 Тогда
				СлучайныйКлюч = Лев(ТекстОтветаСМетки, КонецЗначенияСлучайногоКлюча - 1);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = СлучайныйКлюч;
	
	СсылкаCAPTCHA = "";
	НачалоCAPTCHA = СтрНайти(ТекстОтвета, "id: 'capcha_go'");
	Если НачалоCAPTCHA <> 0 Тогда
		
		ТекстОтветаСМетки = Прав(ТекстОтвета, СтрДлина(ТекстОтвета) - НачалоCAPTCHA + 1);
		ПрефиксЗначенияCAPTCHA = "src : '";
		НачалоЗначенияCAPTCHA = СтрНайти(ТекстОтветаСМетки, ПрефиксЗначенияCAPTCHA);
		
		Если НачалоЗначенияCAPTCHA <> 0 Тогда
			
			ТекстПараметровCAPTCHA = Лев(ТекстОтветаСМетки, НачалоЗначенияCAPTCHA - 1);
			НачалоCAPTCHAСкрыта = СтрНайти(ТекстОтветаСМетки, "hidden: true");
			Если НачалоCAPTCHAСкрыта = 0 Тогда
				
				ТекстОтветаСМетки = Прав(ТекстОтветаСМетки, СтрДлина(ТекстОтветаСМетки) - НачалоЗначенияCAPTCHA - СтрДлина(ПрефиксЗначенияCAPTCHA) + 1);
				КонецЗначенияCAPTCHA = СтрНайти(ТекстОтветаСМетки, "'");
				Если КонецЗначенияCAPTCHA <> 0 Тогда
					СсылкаCAPTCHA = Лев(ТекстОтветаСМетки, КонецЗначенияCAPTCHA - 1);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) И ЗначениеЗаполнено(СсылкаCAPTCHA) Тогда
		Данные64CAPTCHA = ПолучитьДанные64КартинкиCAPTCHAСПорталаФСРАР(СсылкаCAPTCHA, ПараметрыСоединения);
	КонецЕсли;
	
	ПараметрыСоединения.СоединениеHTTP = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Если НЕ ДляРегистрации Тогда
			СообщитьПользователю(НСтр("ru = 'Ошибка формата страницы авторизации'"), ПараметрыСоединения.СообщенияПользователю);
		Иначе
			СообщитьПользователю(НСтр("ru = 'Ошибка формата страницы регистрации'"), ПараметрыСоединения.СообщенияПользователю);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьЗашифрованныйПакетНаСерверФСРАР(ФайлыИДанныеОтправки, ПараметрыОтправки, ПараметрыСоединения, Данные64CAPTCHA = "")
	
	ПараметрыСоединения.ИдентификаторОтправкиНаСервере = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.4.0") >= 0
	И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.4.437") < 0 Тогда
		СообщитьПользователю(НСтр("ru = 'Для выполнения обмена необходима версия платформы не ниже 8.3.4.437'"), ПараметрыСоединения.СообщенияПользователю);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПараметрыОтправки.ФедеральныйПортал ИЛИ ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.ТиповойРегиональныйИФедеральныйСерверы
		ИЛИ ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.МосковскийРегиональныйИФедеральныйСерверы Тогда
		АдресСервераОнлайнПроверки = "service.fsrar.ru";
	Иначе
		АдресСервераОнлайнПроверки = "service.alcolicenziat.ru";
	КонецЕсли;
	
	// устанавливаем соединение с сервером
	ОписаниеОшибки = "";
	ПараметрыСоединения.СоединениеHTTP = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета("https://" + АдресСервераОнлайнПроверки, ОписаниеОшибки);
	Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
		
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Не удалось установить соединение с сервером онлайн-проверки: 
                      |%1.'"), ОписаниеОшибки), ПараметрыСоединения.СообщенияПользователю);
		Возврат Неопределено;
		
	КонецЕсли;

	
	ТекстСообщенияПриУспехе = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ФайлыИДанныеОтправки.ПодписанныйПакетДляАвторизации) ИЛИ АвторизоватьсяНаПорталеФСРАР(ФайлыИДанныеОтправки.ПодписанныйПакетДляАвторизации, ПараметрыСоединения, ПараметрыОтправки) Тогда
		
		Если ЗначениеЗаполнено(ФайлыИДанныеОтправки.ПодписанныйПакетДляАвторизации) Тогда
			Данные64CAPTCHA = ПолучитьДанные64КартинкиCAPTCHAСПорталаФСРАР("/sapcha/declar?_dc=", ПараметрыСоединения);
			Возврат Неопределено;
		КонецЕсли;
	
		ТекстСообщенияПриУспехе = ЗагрузитьДекларациюНаПорталФСРАР(ФайлыИДанныеОтправки.КороткоеИмяФайлаПакета, ФайлыИДанныеОтправки.ИмяФайлаОтправки, ПараметрыСоединения);
		Если ТекстСообщенияПриУспехе <> Неопределено Тогда
			ПараметрыСоединения.ИдентификаторОтправкиНаСервере = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddhhmmss") + ФайлыИДанныеОтправки.КороткоеИмяФайлаПакета;
			
		Иначе
			ОписаниеОшибкиСерверомВВерхнемРегистре = ВРег(ПараметрыСоединения.ОписаниеОшибкиСервером);
			ОшибкаВводаCAPTCHAВВерхнемРегистре = ВРег("Неверный код с картинки");
			
			Если СтрНайти(ОписаниеОшибкиСерверомВВерхнемРегистре, ОшибкаВводаCAPTCHAВВерхнемРегистре) > 0 Тогда
				Данные64CAPTCHA = ПолучитьДанные64КартинкиCAPTCHAСПорталаФСРАР("/sapcha/declar?_dc=", ПараметрыСоединения);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстСообщенияПриУспехе;
	
КонецФункции

Функция АвторизоватьсяНаПорталеФСРАР(ПодписанныйПакет, ПараметрыСоединения, ПараметрыОтправки)
	
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ИмяФайлаПодписанногоПакета = ПолучитьИмяВременногоФайла();
	ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаПодписанногоПакета, "windows-1251");
	ЗаписываемыйФайл.Записать(ПодписанныйПакет);
	ЗаписываемыйФайл.Закрыть();
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаПодписанногоПакета, "/auth/ecplogin", ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаПодписанногоПакета);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаПодписанногоПакета);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	Если СтрНайти(ТекстОтвета, "/auth/login") > 0 Тогда
		
		ЗаголовкиHTTP = Новый Соответствие();
		ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
		ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
		Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
			ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
		КонецЕсли;
		
		ЗапросHTTP = Новый HTTPЗапрос("/auth/login", ЗаголовкиHTTP);
		
		ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
		
		Попытка
			ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
		Исключение
			
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
			Возврат Ложь;
			
		КонецПопытки;
		
		ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
		ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
		
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		
	КонецЕсли;
	
	ТекстОшибки = ТекстПослеПрефикса(ТекстОтвета, "<font color=""red""><b>", "</");
	ТекстОшибкиБезВнутреннихТегов = ТекстПослеПрефикса(ТекстОшибки, "<font color=""red""><b>", "</");
	ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибкиБезВнутреннихТегов), ТекстОшибкиБезВнутреннихТегов, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = ТекстИзHTML(ТекстОшибки);
		Если ПараметрыСоединения.ТребуетсяРегистрация <> Неопределено И СтрНайти(ТекстОшибки, "не зарегистрирован") > 0 Тогда
			ПараметрыСоединения.ТребуетсяРегистрация = Истина;
		Иначе
			ПараметрыСоединения.ОписаниеОшибкиСервером = СокрЛП(ТекстОшибки);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	// проверка кода региона после авторизации
	
	Если НЕ ПараметрыОтправки.ФедеральныйПортал И ПараметрыСоединения.ТребуетсяПовторнаяАвторизация <> Неопределено Тогда
		
		ЗаголовкиHTTP = Новый Соответствие();
		ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
		ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
		Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
			ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
		КонецЕсли;
		
		ЗапросHTTP = Новый HTTPЗапрос("/cabinet/home", ЗаголовкиHTTP);
		
		ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
		
		Попытка
			ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
		Исключение
			
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
			Возврат Ложь;
			
		КонецПопытки;
		
		ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
		ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
		
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		
		Если СтрНайти(ТекстОтвета, """region_name"":""""") <> 0 Тогда
			КодРегионаУказанныйНаПортале = ТекстПослеПрефикса(ТекстОтвета, """region_choose"":""", """");
			
			Если СокрЛП(ПараметрыОтправки.КодРегиона) <> СокрЛП(КодРегионаУказанныйНаПортале) Тогда
				ЗаголовкиHTTP = Новый Соответствие();
				ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
				ЗаголовкиHTTP.Вставить("X-Requested-With", "XMLHttpRequest");
				ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
				ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
				Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
					ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
				КонецЕсли;
				
				ТекстНастройки = СтрШаблон("region_id=%1", ПараметрыОтправки.КодРегиона);
				
				ИмяФайлаНастройки = ПолучитьИмяВременногоФайла();
				ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаНастройки, "windows-1251");
				ЗаписываемыйФайл.Записать(ТекстНастройки);
				ЗаписываемыйФайл.Закрыть();
				
				ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
				
				Попытка
					ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаНастройки, "/user/setregion/", ИмяФайлаОтвета, ЗаголовкиHTTP);
				Исключение
					
					ПараметрыСоединения.ПовторятьСоединение = Истина;
					ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаНастройки);
					ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
					Возврат Ложь;
					
				КонецПопытки;
				
				ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
				ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
				
				ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаНастройки);
				ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
				
				ПараметрыСоединения.ТребуетсяПовторнаяАвторизация = Истина;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьДекларациюНаПорталФСРАР(КороткоеИмяФайлаПакета, ИмяФайлаОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	// формируем общие заголовки
	ЗаголовкиHTTP = Новый Соответствие();
	
	ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	// посылаем запрос
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаОтправки, "/declaring/uploaddecl", ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		Возврат Неопределено;
		
	КонецПопытки;
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "windows-1251");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	Если СтрНайти(ТекстОтвета, "Application_Model_Declaration::getMessage()") > 0 Тогда
		ПараметрыСоединения.ОписаниеОшибкиСервером = "";
		ТекстСообщенияПриУспехе = "Загружена декларация " + КороткоеИмяФайлаПакета;
		
	Иначе
		ТекстСообщенияПриУспехе = "";
		ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаФСРАР(ТекстОтвета, ТекстСообщенияПриУспехе);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТекстСообщенияПриУспехе;
	
КонецФункции

Функция ПолучитьДанные64КартинкиCAPTCHAСПорталаФСРАР(СсылкаCAPTCHA, ПараметрыСоединения)
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос(СсылкаCAPTCHA, ЗаголовкиHTTP);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла("jpg");
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		Возврат Неопределено;
		
	КонецПопытки;
	
	ДанныеCAPTCHA = Новый ДвоичныеДанные(ИмяФайлаОтвета);
	Данные64CAPTCHA = Base64Строка(ДанныеCAPTCHA);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	Возврат Данные64CAPTCHA;
	
КонецФункции

Функция ТекстОшибкиПорталаФСРАР(ТекстОтвета, ТекстСообщенияПриУспехе = "")
	
	ТекстСообщенияПриУспехе = "";
	
	ЗавершеноУспешно = Неопределено;
	Если СтрНайти(ТекстОтвета, """success"":true") > 0 Тогда
		ЗавершеноУспешно = Истина;
	ИначеЕсли СтрНайти(ТекстОтвета, """success"":false") > 0 Тогда
		ЗавершеноУспешно = Ложь;
	КонецЕсли;
	
	Если ЗавершеноУспешно <> Неопределено Тогда
		
		Позиция = 1;
		Разделитель = "";
		ОжидаемыйРазделитель = "{";
		Пока Позиция <= СтрДлина(ТекстОтвета) Цикл
			
			ИмяПараметра = СледующееЗначениеJSON(ТекстОтвета, Позиция, Разделитель);
			Если Разделитель <> ОжидаемыйРазделитель Тогда
				Прервать;
			КонецЕсли;
			
			ЗначениеПараметра = СледующееЗначениеJSON(ТекстОтвета, Позиция, Разделитель);
			Если Разделитель <> ":" Тогда
				Прервать;
			КонецЕсли;
			
			Если ИмяПараметра = "msg" ИЛИ (ИмяПараметра = "error" И НЕ ЗавершеноУспешно) Тогда
				
				ЗначениеПараметра = ТекстЗначенияJSONВШестнадцатеричнойUTF16(ЗначениеПараметра);
				ЗначениеПараметра = ТекстИзHTML(ЗначениеПараметра);
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, "<br>", " ");
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, "   ", " ");
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, "  ", " ");
				
				Если ЗначениеПараметра <> "" Тогда
					
					Если ЗавершеноУспешно Тогда
						ТекстСообщенияПриУспехе = ЗначениеПараметра;
						Возврат "";
					Иначе
						ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, "Не верный код", "Неверный код"); // исправление ошибки портала
						Возврат ЗначениеПараметра;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОжидаемыйРазделитель = ",";
			
		КонецЦикла;
		
		Если ЗавершеноУспешно Тогда
			Возврат "";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "Ошибочный ответ сервера";
	
КонецФункции

Функция ПолучитьИнформациюОДекларацииНаПорталеФСРАР(ИмяФайлаВыгрузки, ПодписанныйПакетДляАвторизации, ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	Если ПараметрыОтправки.ФедеральныйПортал ИЛИ ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.ТиповойРегиональныйИФедеральныйСерверы
		ИЛИ ПараметрыОтправки.СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.МосковскийРегиональныйИФедеральныйСерверы Тогда
		АдресСервераОнлайнПроверки = "service.fsrar.ru";
	Иначе
		АдресСервераОнлайнПроверки = "service.alcolicenziat.ru";
	КонецЕсли;
	
	Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.4.0") >= 0
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.4.437") < 0 Тогда
			СообщитьПользователю(НСтр("ru = 'Для выполнения обмена необходима версия платформы не ниже 8.3.4.437'"), ПараметрыСоединения.СообщенияПользователю);
			ПараметрыСоединения.ОписаниеОшибкиСервером = НСтр("ru = 'Выполнение операции не поддерживается'");
			Возврат Неопределено;
		КонецЕсли;
		
		// устанавливаем соединение с сервером
		ОписаниеОшибки = "";
		ПараметрыСоединения.СоединениеHTTP = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета("https://" + АдресСервераОнлайнПроверки, ОписаниеОшибки);
		Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
			
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не удалось установить соединение с сервером онлайн-проверки: 
	                      |%1.'"), ОписаниеОшибки), ПараметрыСоединения.СообщенияПользователю);
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	АвторизацияПроизведена = (НЕ ЗначениеЗаполнено(ПодписанныйПакетДляАвторизации));
	
	Если НЕ АвторизацияПроизведена Тогда
		АвторизацияПроизведена = АвторизоватьсяНаПорталеФСРАР(ПодписанныйПакетДляАвторизации, ПараметрыСоединения, ПараметрыОтправки);
	КонецЕсли;
	
	Если АвторизацияПроизведена Тогда
		
		ЗаголовокДекларации = НайтиЗаголовокДекларацииНаПорталеФСРАР(ИмяФайлаВыгрузки, ПараметрыСоединения);
		
		Если ЗаголовокДекларации <> Неопределено Тогда
			
			// получение регионального протокола
			
			ЗаголовокДекларации.РегиональныйПротокол = Неопределено;
			ЗаголовокДекларации.ОшибкаПолученияРегиональногоПротокола = "";
			
			ОшибкаСоединенияПриПолученииПротокола = Ложь;
			ОшибкаПолученияРегиональногоПротокола = "";
			РегиональныйПротокол = Неопределено;
			
			Если НЕ ПараметрыОтправки.ФедеральныйПортал Тогда
				
				ЗаголовокДекларации.РегиональныйПротокол = ПолучитьПротоколОбработкиДекларацииНаПорталеФСРАР(ЗаголовокДекларации.ИдентификаторЗаписи, ЗаголовокДекларации.ИмяФайла, Ложь, ПараметрыСоединения);
				ЗаголовокДекларации.ОшибкаПолученияРегиональногоПротокола = ПараметрыСоединения.ОписаниеОшибкиСервером;
				
				Если ЗаголовокДекларации.РегиональныйПротокол = Неопределено И НЕ ЗначениеЗаполнено(ЗаголовокДекларации.ОшибкаПолученияРегиональногоПротокола) Тогда
					ЗаголовокДекларации.ОшибкаПолученияРегиональногоПротокола = ?(ПараметрыСоединения.ПовторятьСоединение, НСтр("ru = 'Ошибка при обращении к серверу Росалкогольрегулирования'"), НСтр("ru = 'Не удалось получить региональный протокол'"));
				КонецЕсли;
				
				ПараметрыСоединения.ОписаниеОшибкиСервером = "";
				ПараметрыСоединения.ПовторятьСоединение = Ложь;
				
			КонецЕсли;
			
			// получение федерального протокола
			
			ОшибкаСоединенияПриПолученииПротокола = Ложь;
			ОшибкаПолученияФедеральногоПротокола = "";
			
			ЗаголовокДекларации.ФедеральныйПротокол = ПолучитьПротоколОбработкиДекларацииНаПорталеФСРАР(ЗаголовокДекларации.ИдентификаторЗаписи, ЗаголовокДекларации.ИмяФайла, Истина, ПараметрыСоединения);
			ЗаголовокДекларации.ОшибкаПолученияФедеральногоПротокола = ПараметрыСоединения.ОписаниеОшибкиСервером;
			
			Если ЗаголовокДекларации.ФедеральныйПротокол = Неопределено И НЕ ЗначениеЗаполнено(ЗаголовокДекларации.ОшибкаПолученияФедеральногоПротокола) Тогда
				ЗаголовокДекларации.ОшибкаПолученияФедеральногоПротокола = ?(ПараметрыСоединения.ПовторятьСоединение, НСтр("ru = 'Ошибка при обращении к серверу Росалкогольрегулирования'"), НСтр("ru = 'Не удалось получить федеральный протокол'"));
			КонецЕсли;
			
			ПараметрыСоединения.ОписаниеОшибкиСервером = "";
			ПараметрыСоединения.ПовторятьСоединение = Ложь;
			
			Возврат ЗаголовокДекларации;
			
		КонецЕсли;
		
	Иначе
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиЗаголовокДекларацииНаПорталеФСРАР(ИмяФайлаВыгрузки, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	ЭлементовНаСтранице = 25;
	НомерСтраницы = 1;
	
	Пока Истина Цикл
		
		ЗаголовкиHTTP = Новый Соответствие();
		ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
		ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
		ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
		Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
			ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
		КонецЕсли;
		
		ТекстЗапроса = "page=" + Формат(НомерСтраницы, "ЧН=0; ЧГ=") + "&start=" + Формат((НомерСтраницы - 1) * ЭлементовНаСтранице, "ЧН=0; ЧГ=")
			+ "&limit=" + Формат(ЭлементовНаСтранице, "ЧН=0; ЧГ=") + "&sort=%5B%7B%22property%22%3A%22insdate%22%2C%22direction%22%3A%22DESC%22%7D%5D";
		
		ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
		ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапроса, "windows-1251");
		ЗаписываемыйФайл.Записать(ТекстЗапроса);
		ЗаписываемыйФайл.Закрыть();
		
		ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
		
		Попытка
			ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаЗапроса, "/declaring/getdeclarations?_dc=", ИмяФайлаОтвета, ЗаголовкиHTTP);
		Исключение
			
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
			Возврат Неопределено;
			
		КонецПопытки;
		
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "windows-1251");
		ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
		ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		
		// разбор списка заголовков деклараций
		ЗаголовкиДеклараций = ТаблицаJSON(ТекстОтвета, """decls"":[",
			"ИдентификаторЗаписи, ИмяФайла, СостояниеJSON, КодСостояния, ДатаЗагрузки, СтатусJSON",
			"id, filename, curr_state_Descr, curr_state, insdate, status_name");
			
		Если ЗаголовкиДеклараций = Неопределено Тогда
			
			ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаФСРАР(ТекстОтвета);
			Возврат Неопределено;
			
		КонецЕсли;
			
		Для Каждого СтрокаЗаголовковДеклараций Из ЗаголовкиДеклараций Цикл
			Если ВРег(СтрокаЗаголовковДеклараций.ИмяФайла) = ВРег(ИмяФайлаВыгрузки) Тогда
				
				СостояниеДекларации = ?(ЗначениеЗаполнено(СтрокаЗаголовковДеклараций.СостояниеJSON),
					СтрокаЗаголовковДеклараций.СостояниеJSON, СтрокаЗаголовковДеклараций.СтатусJSON);
				СостояниеДекларации = ТекстЗначенияJSONВШестнадцатеричнойUTF16(СостояниеДекларации);
				СостояниеДекларации = СокрЛП(ТекстИзHTML(СостояниеДекларации));
				
				ЗаголовокДекларации = Новый Структура("ИдентификаторЗаписи, ИмяФайла, Состояние, ЗначениеСостояния, ДатаЗагрузки, РегиональныйПротокол, ОшибкаПолученияРегиональногоПротокола, ФедеральныйПротокол, ОшибкаПолученияФедеральногоПротокола",
					СтрокаЗаголовковДеклараций.ИдентификаторЗаписи, СтрокаЗаголовковДеклараций.ИмяФайла, СостояниеДекларации,
					СтрокаЗаголовковДеклараций.КодСостояния, СтрокаЗаголовковДеклараций.ДатаЗагрузки, Неопределено, "", Неопределено, "");
				
				Возврат ЗаголовокДекларации;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаголовкиДеклараций.Количество() < ЭлементовНаСтранице Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
КонецФункции

Функция ПолучитьПротоколОбработкиДекларацииНаПорталеФСРАР(ИдентификаторЗаписи, ИмяФайлаВыгрузки, ФедеральныйПротокол, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ТекстЗапроса = ?(ФедеральныйПротокол, "decl_id=" + ИдентификаторЗаписи, "filename=" + ИмяФайлаВыгрузки) + "&page=1&start=0&limit=25";
	
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапроса, "windows-1251");
	ЗаписываемыйФайл.Записать(ТекстЗапроса);
	ЗаписываемыйФайл.Закрыть();
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаЗапроса, ?(ФедеральныйПротокол, "/declaring/getprotocols?_dc=", "/declaring/getregprotocols?_dc="), ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		Возврат Неопределено;
		
	КонецПопытки;
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "windows-1251");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	// разбор протокола
	Протокол = ТаблицаJSON(ТекстОтвета, """protocols"":[",
		"Дата, Модуль, Сообщение",
		"controltime, Context, Message");
		
	Если Протокол = Неопределено Тогда
		
		ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаФСРАР(ТекстОтвета);
		Возврат Неопределено;
		
	КонецЕсли;
		
	Для Каждого СтрокаПротокола Из Протокол Цикл
		Для ИндексКолонки = 0 По Протокол.Колонки.Количество() - 1 Цикл
			
			ЗначениеКолонки = СтрокаПротокола.Получить(ИндексКолонки);
			ЗначениеКолонки = ТекстЗначенияJSONВШестнадцатеричнойUTF16(ЗначениеКолонки);
			ЗначениеКолонки = СокрЛП(ТекстИзHTML(ЗначениеКолонки));
			ЗначениеКолонки = СтрЗаменить(ЗначениеКолонки, "\r\n", " ");
			СтрокаПротокола.Установить(ИндексКолонки, ЗначениеКолонки);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Протокол;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Служебные функции ФСРАР

Функция ОтчетПодаетсяЧерезФедеральныйПортал(ОтчетСсылка, ОтправкаСсылка = Неопределено) Экспорт
	
	Если ОтчетСсылка = Неопределено Тогда
		ОтчетСсылка = ОтправкаСсылка.ОтчетСсылка;
	КонецЕсли;
	
	Если ТипЗнч(ОтчетСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВидОтчета = Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", ОтчетСсылка.ИсточникОтчета)
		
	Иначе // электронные представления
		ВидОтчета = ОтчетСсылка.ВидОтчета;
	КонецЕсли;
	
	Результат = (ВидОтчета <> Неопределено И ВидОтчета.ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ОтчетФСРАРОпт);
	Возврат Результат;
	
КонецФункции

Функция НастройкиФСРАР(Знач ОрганизацияСсылка, Знач ПолучитьПараметрыОнлайнПроверки = Ложь) Экспорт
	
	Результат = Новый Структура("ИспользоватьОбмен, СертификатАбонентаОтпечаток, СертификатСубъектаРФОтпечаток, СертификатФСРАРОтпечаток, КодРегиона, ИспользоватьАвтонастройку, ПарольПорталаСубъектаРФ", Ложь, "", "", "", "", Ложь, "");
	
	Если ПолучитьПараметрыОнлайнПроверки Тогда
		СвойстваОрганизации = ЗначенияРеквизитовОбъекта(ОрганизацияСсылка, "ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
		
		Результат.Вставить("УчетнаяЗаписьОбмена", СвойстваОрганизации.УчетнаяЗаписьОбмена);
		Результат.Вставить("НастроенОбменВУниверсальномФормате", СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
			И ЗначениеЗаполнено(СвойстваОрганизации.УчетнаяЗаписьОбмена));
		
		Попытка
			ОбменИОнлайнПроверкаВключены = Результат.НастроенОбменВУниверсальномФормате И НЕ СвойстваОрганизации.УчетнаяЗаписьОбмена.ОбменНапрямую И СвойстваОрганизации.УчетнаяЗаписьОбмена.ИспользоватьСервисОнлайнПроверкиОтчетов;
		Исключение
			ОбменИОнлайнПроверкаВключены = Ложь;
		КонецПопытки;
		
		Результат.Вставить("ОнлайнПроверкаДоступна", ОбменИОнлайнПроверкаВключены И СвойстваОрганизации.УчетнаяЗаписьОбмена.СпецоператорСвязи <> Перечисления.СпецоператорыСвязи.Такском И СтрНайти(";" + ВРег(СокрЛП(ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(СвойстваОрганизации.УчетнаяЗаписьОбмена.СпецоператорСвязи, "ОнлайнПроверкаКонтролирующиеОрганы"))) + ";", ";ФСРАР;") > 0);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				   |	НастройкиОбменаФСРАР.ИспользоватьОбмен КАК ИспользоватьОбмен,
				   |	НастройкиОбменаФСРАР.СертификатАбонентаОтпечаток КАК СертификатАбонентаОтпечаток,
				   |	НастройкиОбменаФСРАР.СертификатСубъектаРФОтпечаток КАК СертификатСубъектаРФОтпечаток,
				   |	НастройкиОбменаФСРАР.СертификатФСРАРОтпечаток КАК СертификатФСРАРОтпечаток,
				   |	НастройкиОбменаФСРАР.КодРегиона КАК КодРегиона,
				   |	НастройкиОбменаФСРАР.ИспользоватьАвтонастройку КАК ИспользоватьАвтонастройку,
				   |	НастройкиОбменаФСРАР.ПарольПорталаСубъектаРФ КАК ПарольПорталаСубъектаРФ
				   |ИЗ
				   |	РегистрСведений.НастройкиОбменаФСРАР КАК НастройкиОбменаФСРАР
				   |ГДЕ
				   |	НастройкиОбменаФСРАР.Организация = &ОрганизацияСсылка";
	Запрос.УстановитьПараметр("ОрганизацияСсылка", ОрганизацияСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЗаписьЗапроса = РезультатЗапроса.Выгрузить()[0];
		Если ЗаписьЗапроса.ИспользоватьОбмен Тогда
			
			Результат.ИспользоватьОбмен = ЗаписьЗапроса.ИспользоватьОбмен;
			Результат.СертификатАбонентаОтпечаток = СокрЛП(ЗаписьЗапроса.СертификатАбонентаОтпечаток);
			Результат.СертификатСубъектаРФОтпечаток = СокрЛП(ЗаписьЗапроса.СертификатСубъектаРФОтпечаток);
			Результат.СертификатФСРАРОтпечаток = СокрЛП(ЗаписьЗапроса.СертификатФСРАРОтпечаток);
			Результат.КодРегиона = СокрЛП(ЗаписьЗапроса.КодРегиона);
			Результат.ИспользоватьАвтонастройку = ЗаписьЗапроса.ИспользоватьАвтонастройку;
			Результат.ПарольПорталаСубъектаРФ = ЗаписьЗапроса.ПарольПорталаСубъектаРФ;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// ОтправкаСсылка ссылается на загруженный объект
Функция СвойстваОбменаОрганизации(Знач ОрганизацияСсылка, Знач ОпределитьОтправкуЧерезФедеральныйПорталДляОтчета, Знач ОпределитьНастроенностьОбменаВУниверсальномФормате, Знач ПолучитьОсновныеСвойстваПоследнейОтправки, Знач ПолучитьИнформациюОРегионе = Ложь, Знач ОтправкаСсылка = Неопределено, ОтчетСсылка = Неопределено) Экспорт
	
	Результат = Новый Структура("ОтправкаЧерезФедеральныйПортал, НастроенОбменВУниверсальномФормате, СвойстваОтправки, НастройкиОбмена, ИнформацияОРегионе, ОрганизацияИзОтправки, ПравоИзмененияУчетнойЗаписи, ЭтоРегламентированныйОтчет, ЭтоЭлектроннаяПодписьВМоделиСервиса", Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено);
	
	Если ОпределитьОтправкуЧерезФедеральныйПорталДляОтчета Тогда
		
		Результат.ОтправкаЧерезФедеральныйПортал = ОтчетПодаетсяЧерезФедеральныйПортал(ОтчетСсылка, ОтправкаСсылка);
		
		Если Результат.ОтправкаЧерезФедеральныйПортал Тогда
			ПолучитьИнформациюОРегионе = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОрганизацияСсылка = Неопределено Тогда
		
		ОрганизацияСсылка = ОтправкаСсылка.Организация;
		Результат.ОрганизацияИзОтправки = ОрганизацияСсылка;
		
	КонецЕсли;
	
	Результат.ЭтоЭлектроннаяПодписьВМоделиСервиса = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ЭтоЭлектроннаяПодписьВМоделиСервиса(ОрганизацияСсылка);
	
	Если ОпределитьНастроенностьОбменаВУниверсальномФормате Тогда
		
		СвойстваОрганизации = ЗначенияРеквизитовОбъекта(ОрганизацияСсылка, "ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
		
		Результат.НастроенОбменВУниверсальномФормате = (СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
			И ЗначениеЗаполнено(СвойстваОрганизации.УчетнаяЗаписьОбмена));
		
	КонецЕсли;
	
	Если ПолучитьОсновныеСвойстваПоследнейОтправки Тогда
		
		СвойстваОтправки = ПолучитьОсновныеСвойстваПоследнейОтправкиОтчетаВФСРАР(ОтчетСсылка);
		Если СвойстваОтправки <> Неопределено Тогда
			Результат.СвойстваОтправки = Новый Структура("Ссылка, Идентификатор, ИмяФайлаПакета, Статус, СхемаСдачиОтчетности, СтатусОтправкиНаРегиональныйСервер, ЗаверенныйПакетОтправлен",
				СвойстваОтправки.Ссылка, СвойстваОтправки.Идентификатор, СвойстваОтправки.ИмяФайлаПакета, СвойстваОтправки.Статус, СвойстваОтправки.СхемаСдачиОтчетности, СвойстваОтправки.СтатусОтправкиНаРегиональныйСервер, СвойстваОтправки.ЗаверенныйПакетОтправлен);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.НастройкиОбмена = НастройкиФСРАР(ОрганизацияСсылка);
	
	Результат.ИнформацияОРегионе = ИнформацияОРегионеФСРАР(?(ПолучитьИнформациюОРегионе, Результат.НастройкиОбмена.КодРегиона, ""));
	
	Результат.ПравоИзмененияУчетнойЗаписи = ПравоДоступа("Изменение", Метаданные.Справочники.УчетныеЗаписиДокументооборота);
	
	Если ОтчетСсылка <> Неопределено ИЛИ ОтправкаСсылка <> Неопределено Тогда
		
		Если ОтчетСсылка <> Неопределено Тогда
			ТипЗнчСсылкаНаОтчет = ТипЗнч(ОтчетСсылка);
		Иначе
			ТипЗнчСсылкаНаОтчет = ТипЗнч(ОтправкаСсылка.ОтчетСсылка);
		КонецЕсли;
		
		Результат.ЭтоРегламентированныйОтчет = (ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка.РегламентированныйОтчет") ИЛИ ТипЗнчСсылкаНаОтчет = Тип("Неопределено"));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИнформацияОРегионеФСРАР(Знач КодРегиона) Экспорт
	
	Результат = Новый Структура("НаименованиеРегиона, ТипПортала, СсылкаНаПортал", "", "", "");
	
	Если ЗначениеЗаполнено(КодРегиона) Тогда
		
		Макет = ПолучитьМакет("ФСРАРПорталыРегионов");
		НомерКолонкиКодРегиона = Макет.Область("КодРегиона").Лево;
		ОбластьПоиска = Макет.Область(1, НомерКолонкиКодРегиона, Макет.ВысотаТаблицы, НомерКолонкиКодРегиона);
		
		Ячейка = Макет.НайтиТекст(КодРегиона, , ОбластьПоиска, , Истина);
		
		Если Ячейка <> Неопределено Тогда
			
			НомерСтроки = Ячейка.Верх;
			
			НомерКолонкиНаименованиеРегиона = Макет.Область("НаименованиеРегиона").Лево;
			Результат.НаименованиеРегиона = Макет.Область(НомерСтроки, НомерКолонкиНаименованиеРегиона).Текст;
			НомерКолонкиТипПортала = Макет.Область("ТипПортала").Лево;
			Результат.ТипПортала = Макет.Область(НомерСтроки, НомерКолонкиТипПортала).Текст;
			НомерКолонкиСсылкаНаПортал = Макет.Область("СсылкаНаПортал").Лево;
			Результат.СсылкаНаПортал = Макет.Область(НомерСтроки, НомерКолонкиСсылкаНаПортал).Текст;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УспешноОбработанаДекларацияФСРАР(Протокол, СхемаСдачиОтчетности, НаходитсяВОчередиЗагрузки, ПротоколПуст = Неопределено)
	
	КоличествоСтрокПротокола = ?(Протокол <> Неопределено, Протокол.Количество(), 0);
	ПротоколПуст = (КоличествоСтрокПротокола = 0);
	
	Если СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.МосковскийРегиональныйИФедеральныйСерверы Тогда
		Если КоличествоСтрокПротокола > 0 Тогда
			ПоследняяСтрокаПротокола = Протокол.Получить(КоличествоСтрокПротокола - 1).Сообщение;
			
			Результат = (Лев(ПоследняяСтрокаПротокола, 1) <> "-" И СтрНайти(ПоследняяСтрокаПротокола, "не может быть загружена") = 0 И СтрНайти(ПоследняяСтрокаПротокола, "Ошибка при") = 0);
			Если Результат И НаходитсяВОчередиЗагрузки Тогда
				Результат = Неопределено;
			КонецЕсли;
			Возврат Результат;
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		НомерСтроки = КоличествоСтрокПротокола - 1;
		Пока НомерСтроки >= 0 Цикл
			СтрокаПротокола = Протокол.Получить(НомерСтроки).Сообщение;
			
			Если СтрНайти(СтрокаПротокола, "Декларация успешно обработана и сохранена в базу.") > 0 Тогда
				Возврат Истина;
				
			ИначеЕсли СтрНайти(СтрокаПротокола, "содержит ошибки.") > 0 ИЛИ СтрНайти(СтрокаПротокола, "Подробнее об ошибке") > 0
				ИЛИ СтрНайти(СтрокаПротокола, "Ошибка при") > 0 ИЛИ СтрНайти(СтрокаПротокола, "Декларация уже есть в базе.") > 0
				ИЛИ СтрНайти(СтрокаПротокола, "Процедура или функция") > 0 ИЛИ СтрНайти(СтрокаПротокола, "не был указан") > 0 Тогда
				Возврат Ложь;
				
			ИначеЕсли СтрНайти(СтрокаПротокола, "Файл загружен и ожидает проверки") > 0 ИЛИ СтрНайти(СтрокаПротокола, "Краткая информация о декларации") > 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки - 1;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Общие служебные функции, используются при документообороте с ФСРАР

Функция ЗаписатьZipФайлПакета(Знач СтрокаBase64, Знач ИмяАрхивируемогоФайла) Экспорт
	
	// создаем временный каталог, в который помещаем пакуемый файл
	ВременныйКаталог = КаталогВременныхФайлов();
	РазделительПутиОС = ПолучитьРазделительПути();
	Если Прав(ВременныйКаталог, 1) <> РазделительПутиОС Тогда
		ВременныйКаталог = ВременныйКаталог + РазделительПутиОС;
	КонецЕсли;
	ВременныйКаталог = ВременныйКаталог + Строка(Новый УникальныйИдентификатор) + РазделительПутиОС;
	СоздатьКаталог(ВременныйКаталог);
	
	// выгружаем двоичные данные в файл
	ПолноеИмяАрхивируемогоФайла = ВременныйКаталог + ИмяАрхивируемогоФайла;
	Если ЭтоАдресВременногоХранилища(СтрокаBase64) Тогда
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаBase64);
	Иначе
		ДвоичныеДанныеФайла = Base64Значение(СтрокаBase64);
	КонецЕсли;
	ДвоичныеДанныеФайла.Записать(ПолноеИмяАрхивируемогоФайла);
	
	// пишем архив
	КороткоеИмяФайлаАрхива = Строка(Новый УникальныйИдентификатор);
	ПолноеИмяФайлаАрхива = ВременныйКаталог + КороткоеИмяФайлаАрхива;
	
	Попытка
		
		ОбъектЗаписьZip = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива);
		ОбъектЗаписьZip.Добавить(ПолноеИмяАрхивируемогоФайла);
		ОбъектЗаписьZip.Записать();
		
	Исключение
		
		// уведомляем об ошибке, если она была
		СообщитьПользователю(ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка создания архива: %1'"), ИнформацияОбОшибке().Описание));
		
		Попытка
			УдалитьФайлы(ВременныйКаталог);
		Исключение
		КонецПопытки;
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	// помещаем архив обратно во временное хранилище
	Результат = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайлаАрхива), Новый УникальныйИдентификатор);
	
	// удаляем временный каталог
	Попытка
		УдалитьФайлы(ВременныйКаталог);
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПоместитьФайлВоВременноеХранилищеНаСервере(СтрокаBase64Файла) Экспорт
	
	// получаем двоичные данные файла, переданного в виде строки Base64
	ДвоичныеДанныеФайла = Base64Значение(СтрокаBase64Файла);
	
	// помещаем данные обратно во временное хранилище
	Результат = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	Возврат Результат;
	
КонецФункции

Функция ЧислоИзШестнадцатеричного(ШестнадцатеричноеЗначение, ЗначениеПриОшибке = 0, ПозицияОшибки = 0)
	
	Результат = 0;
	ПозицияОшибки = 0;
	
	Для Позиция = 1 По СтрДлина(ШестнадцатеричноеЗначение) Цикл
		
		ТекущийСимвол = Сред(ШестнадцатеричноеЗначение, Позиция, 1);
		КодТекущегоСимвола = КодСимвола(ТекущийСимвол);
		
		Если КодТекущегоСимвола >= КодСимвола("0") И КодТекущегоСимвола <= КодСимвола("9") Тогда
			
			Результат = Результат * 16 + (КодТекущегоСимвола - КодСимвола("0"));
			
		ИначеЕсли КодТекущегоСимвола >= КодСимвола("A") И КодТекущегоСимвола <= КодСимвола("F") Тогда
			
			Результат = Результат * 16 + (КодТекущегоСимвола - КодСимвола("A") + 10);
			
		ИначеЕсли КодТекущегоСимвола >= КодСимвола("a") И КодТекущегоСимвола <= КодСимвола("f") Тогда
			
			Результат = Результат * 16 + (КодТекущегоСимвола - КодСимвола("a") + 10);
			
		Иначе
			
			ПозицияОшибки = Позиция;
			Результат = ЗначениеПриОшибке;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстИзHTML(ТекстHTML)
	
	Результат = "";
	Позиция = 1;
	
	Пока Позиция <= СтрДлина(ТекстHTML) Цикл
		
		ТекущийСимвол = Сред(ТекстHTML, Позиция, 1);
		СимволHTML = Неопределено;
		
		Если ТекущийСимвол = "&" Тогда
			
			Для Длина = 2 По 10 Цикл
				Если Сред(ТекстHTML, Позиция + Длина - 1, 1) = ";" Тогда
					СимволHTML = Сред(ТекстHTML, Позиция, Длина);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СимволHTML <> Неопределено Тогда
				
				Если СимволHTML = "&quot;" ИЛИ СимволHTML = "&laquo;" ИЛИ СимволHTML = "&raquo;" Тогда
					Результат = Результат + """";
				ИначеЕсли СимволHTML = "&nbsp;" Тогда
					Результат = Результат + " ";
				ИначеЕсли СимволHTML = "&amp;" Тогда
					Результат = Результат + "&";
				ИначеЕсли СимволHTML = "&lt;" Тогда
					Результат = Результат + "<";
				ИначеЕсли СимволHTML = "&gt;" Тогда
					Результат = Результат + ">";
				ИначеЕсли Сред(СимволHTML, 2, 1) = "#" И СтрДлина(СимволHTML) > 3 Тогда
				
					ПодстрокаСКодомСимволаВUTF16 = Сред(СимволHTML, 3, СтрДлина(СимволHTML) - 3);
					КодСимволаВUTF16 = Неопределено;
					Попытка
						КодСимволаВUTF16 = Число(ПодстрокаСКодомСимволаВUTF16);
					Исключение
					КонецПопытки;
					
					Если Формат(КодСимволаВUTF16, "ЧН=0; ЧГ=") <> ПодстрокаСКодомСимволаВUTF16 Тогда
						КодСимволаВUTF16 = Неопределено;
					КонецЕсли;
					
					Если КодСимволаВUTF16 <> Неопределено И КодСимволаВUTF16 >= 0 И КодСимволаВUTF16 <= 65535 Тогда
						Результат = Результат + Символ(КодСимволаВUTF16);
					Иначе
						СимволHTML = Неопределено;
					КонецЕсли;
				
				Иначе
					СимволHTML = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СимволHTML = Неопределено Тогда
			Результат = Результат + ТекущийСимвол;
			Позиция = Позиция + 1;
		Иначе
			Позиция = Позиция + СтрДлина(СимволHTML);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СледующееЗначениеJSON(ТекстJSON, Позиция, ПредшествующийСимволРазделителя)
	
	Пока Позиция <= СтрДлина(ТекстJSON) Цикл
		
		Если Сред(ТекстJSON, Позиция, 1) <= " " Тогда
			Позиция = Позиция + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Позиция <= СтрДлина(ТекстJSON) Тогда
		
		ТекущийСимвол = Сред(ТекстJSON, Позиция, 1);
		Если ТекущийСимвол = ":" ИЛИ ТекущийСимвол = "," ИЛИ ТекущийСимвол = ";" ИЛИ ТекущийСимвол = "{" ИЛИ ТекущийСимвол = "}"
			ИЛИ ТекущийСимвол = "[" ИЛИ ТекущийСимвол = "]" Тогда
			ПредшествующийСимволРазделителя = ТекущийСимвол;
			Позиция = Позиция + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Пока Позиция <= СтрДлина(ТекстJSON) Цикл
		
		Если Сред(ТекстJSON, Позиция, 1) <= " " Тогда
			Позиция = Позиция + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВКавычках = Истина;
	
	Если Позиция <= СтрДлина(ТекстJSON) Тогда
		
		Если Сред(ТекстJSON, Позиция, 1) = """" Тогда
			Позиция = Позиция + 1;
		Иначе
			ЗначениеВКавычках = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ПозицияНачала = Позиция;
	ПозицияКонца = СтрДлина(ТекстJSON);
	
	Пока Позиция <= СтрДлина(ТекстJSON) Цикл
		
		ТекущийСимвол = Сред(ТекстJSON, Позиция, 1);
		Если ТекущийСимвол = """" И ЗначениеВКавычках И Сред(ТекстJSON, Позиция - 1, 1) <> "\" Тогда
			
			ПозицияКонца = Позиция - 1;
			Позиция = Позиция + 1;
			Прервать;
			
		ИначеЕсли (ТекущийСимвол = ":" ИЛИ ТекущийСимвол = "," ИЛИ ТекущийСимвол = ";" ИЛИ ТекущийСимвол = "{" ИЛИ ТекущийСимвол = "}"
			ИЛИ ТекущийСимвол = "[" ИЛИ ТекущийСимвол = "]") И НЕ ЗначениеВКавычках Тогда
			
			ПозицияКонца = Позиция - 1;
			Прервать;
			
		Иначе
			
			Позиция = Позиция + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Сред(ТекстJSON, ПозицияНачала, ПозицияКонца - ПозицияНачала + 1);
	Если ЗначениеВКавычках Тогда
		Результат = СтрЗаменить(Результат, "\""", """");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ТаблицаJSON(ТекстJSON, Префикс, ИменаКолонокЧерезЗапятую, ИдентификаторыКолонокЧерезЗапятую, ПодстрокаНаличияДанных = """success"":true", ЗначенияМассивыРазрешены = Ложь)
	
	Если ЗначениеЗаполнено(ПодстрокаНаличияДанных) И СтрНайти(ТекстJSON, ПодстрокаНаличияДанных) = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Позиция = СтрНайти(ТекстJSON, Префикс);
	Если Позиция = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Позиция = Позиция + СтрДлина(Префикс);
	
	Результат = Новый ТаблицаЗначений;
	СтрокаРезультата = Неопределено;
	
	ИменаКолонокСтроками = СтрЗаменить(ИменаКолонокЧерезЗапятую, ",", Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(ИменаКолонокСтроками) Цикл
		ИмяКолонки = СокрЛП(СтрПолучитьСтроку(ИменаКолонокСтроками, НомерСтроки));
		Результат.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	ИдентификаторыКолонок = Новый Массив;
	ИдентификаторыКолонокСтроками = СтрЗаменить(ИдентификаторыКолонокЧерезЗапятую, ",", Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(ИдентификаторыКолонокСтроками) Цикл
		ИдентификаторКолонки = СокрЛП(СтрПолучитьСтроку(ИдентификаторыКолонокСтроками, НомерСтроки));
		ИдентификаторыКолонок.Добавить(ИдентификаторКолонки);
	КонецЦикла;
	
	Разделитель = "";
	ОжидаемыйРазделитель = "{";
	Пока Позиция <= СтрДлина(ТекстJSON) Цикл
		
		ИмяПараметра = СледующееЗначениеJSON(ТекстJSON, Позиция, Разделитель);
		
		Если Разделитель <> ОжидаемыйРазделитель Тогда
			
			Если Разделитель <> "}" Тогда
				Прервать;
			КонецЕсли;
			СтрокаРезультата = Неопределено;
			
			СледующееЗначениеJSON(ТекстJSON, Позиция, Разделитель);
			Если Разделитель <> "," Тогда
				Прервать;
			КонецЕсли;
			
			ИмяПараметра = СледующееЗначениеJSON(ТекстJSON, Позиция, Разделитель);
			Если Разделитель <> "{" Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗначениеПараметра = СледующееЗначениеJSON(ТекстJSON, Позиция, Разделитель);
		
		Если Разделитель <> ":" Тогда
			Прервать;
		КонецЕсли;
		
		Если ЗначенияМассивыРазрешены И ПустаяСтрока(ЗначениеПараметра) И Сред(ТекстJSON, Позиция, 1) = "[" Тогда
			
			ЗначениеПараметра = Новый Массив;
			ЭлементМассива = СледующееЗначениеJSON(ТекстJSON, Позиция, Разделитель);
			
			Пока Истина Цикл
				
				ЗначениеПараметра.Добавить(ЭлементМассива);
				
				ЭлементМассива = СледующееЗначениеJSON(ТекстJSON, Позиция, Разделитель);
				Если Разделитель <> "," Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Разделитель <> "]" Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		ИндексКолонки = ИдентификаторыКолонок.Найти(ИмяПараметра);
		Если ИндексКолонки <> Неопределено И ИндексКолонки < Результат.Колонки.Количество() Тогда
			
			Если СтрокаРезультата = Неопределено Тогда
				СтрокаРезультата = Результат.Добавить();
			КонецЕсли;
			СтрокаРезультата.Установить(ИндексКолонки, ЗначениеПараметра);
			
		КонецЕсли;
		
		ОжидаемыйРазделитель = ",";
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗначенияJSONВШестнадцатеричнойUTF16(ЗначениеJSON)
	
	Результат = "";
	Позиция = 1;
	Пока Позиция <= СтрДлина(ЗначениеJSON) Цикл
		
		ТекущийСимвол = Сред(ЗначениеJSON, Позиция, 1);
		Если ТекущийСимвол = "\" И Сред(ЗначениеJSON, Позиция + 1, 1) = "u" Тогда
			
			ШестнадцатеричныйКодСимволаUTF8 = Сред(ЗначениеJSON, Позиция + 2, 4);
			КодСимволаUTF8 = ЧислоИзШестнадцатеричного(ШестнадцатеричныйКодСимволаUTF8, Неопределено);
			Если КодСимволаUTF8 <> Неопределено Тогда
				
				Результат = Результат + Символ(КодСимволаUTF8);
				Позиция = Позиция + 6;
				ТекущийСимвол = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущийСимвол <> Неопределено Тогда
			
			Результат = Результат + ТекущийСимвол;
			Позиция = Позиция + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстИзСтрокиJSON(СтрокаJSON, ЗаменаПереводаСтроки = Неопределено)
	
	Результат = "";
	
	НомерСимвола = 1;
	НачалоНедобавленногоФрагмента = 1;
	Пока НомерСимвола + 5 <= СтрДлина(СтрокаJSON) Цикл
		Если Сред(СтрокаJSON, НомерСимвола, 2) = "\u" Тогда
			ШестнадцатеричныйКодСимвола = Сред(СтрокаJSON, НомерСимвола + 2, 4);
			КодСимволаЧислом = ЧислоИзШестнадцатеричного(ШестнадцатеричныйКодСимвола, -1);
			Если КодСимволаЧислом <> -1 Тогда
				Результат = Результат + Сред(СтрокаJSON, НачалоНедобавленногоФрагмента, НомерСимвола - НачалоНедобавленногоФрагмента) + Символ(КодСимволаЧислом);
				НомерСимвола = НомерСимвола + 6;
				НачалоНедобавленногоФрагмента = НомерСимвола;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НомерСимвола = НомерСимвола + 1;
	КонецЦикла;
	Результат = Результат + Сред(СтрокаJSON, НачалоНедобавленногоФрагмента);
	
	Если ЗаменаПереводаСтроки <> Неопределено Тогда
		Результат = СтрЗаменить(Результат, "\r\n", ЗаменаПереводаСтроки);
		Результат = СтрЗаменить(Результат, "\r", ЗаменаПереводаСтроки);
		Результат = СтрЗаменить(Результат, "\n", ЗаменаПереводаСтроки);
	Иначе
		Результат = СтрЗаменить(Результат, "\r", Символы.ВК);
		Результат = СтрЗаменить(Результат, "\n", Символы.ПС);
	КонецЕсли;
	Результат = СтрЗаменить(Результат, "\t", Символы.Таб);
	Результат = СтрЗаменить(Результат, "\v", Символы.ВТаб);
	Результат = СтрЗаменить(Результат, "\f", Символы.ПФ);
	Результат = СтрЗаменить(Результат, "\\", "\");
	
	Возврат Результат;
	
КонецФункции

Функция ТекстИзUTF8(ТекстВКодировкеUTF8)
	
	Результат = "";
	
	// Исключение из стандарта 456.
	СимволыСКодами1056ДалееС152По187 = "И       Р   Ф ЦЧ Щ ЫЬЭЮ аб   ежз   л";
	СимволыСКодами1056ДалееС1025По1169 = "Ш ЁЪнвЯУ     С                                                                  иА когпмКМОН ТП                                                Хд";
	СимволыСКодами1056ДалееС8211По8250 = "ЖЗ   БВ  ГД    Е                       Л";
	СимволыСКодами1056ДалееС8470По8482 = "й           Й";
	СимволыСКодами1057ДалееС1026По1107 = "рс     ъьюэ  я                                                                   у";
	СимволыСКодами1057ДалееС8216По8364 = "ё т   ф цч    х         щ        ы                                                                                                                  ш";
	
	НомерСимвола = 1;
	Пока НомерСимвола <= СтрДлина(ТекстВКодировкеUTF8) Цикл
		
		ПервыйСимвол = Сред(ТекстВКодировкеUTF8, НомерСимвола, 1);
		КодПервогоСимвола = КодСимвола(ПервыйСимвол);
		
		Если КодПервогоСимвола <= 128 Тогда
			Результат = Результат + ПервыйСимвол;
			
		ИначеЕсли НомерСимвола < СтрДлина(ТекстВКодировкеUTF8) Тогда
			НомерСимвола = НомерСимвола + 1;
			ВторойСимвол = Сред(ТекстВКодировкеUTF8, НомерСимвола, 1);
			КодВторогоСимвола = КодСимвола(ВторойСимвол);
			
			Если КодПервогоСимвола = 1056 Тогда
				Если КодВторогоСимвола >= 152 И КодВторогоСимвола <= 187 Тогда
					Результат = Результат + Сред(СимволыСКодами1056ДалееС152По187, КодВторогоСимвола - 151, 1);
				ИначеЕсли КодВторогоСимвола >= 1025 И КодВторогоСимвола <= 1169 Тогда
					Результат = Результат + Сред(СимволыСКодами1056ДалееС1025По1169, КодВторогоСимвола - 1024, 1);
				ИначеЕсли КодВторогоСимвола >= 8211 И КодВторогоСимвола <= 8250 Тогда
					Результат = Результат + Сред(СимволыСКодами1056ДалееС8211По8250, КодВторогоСимвола - 8210, 1);
				ИначеЕсли КодВторогоСимвола >= 8470 И КодВторогоСимвола <= 8482 Тогда
					Результат = Результат + Сред(СимволыСКодами1056ДалееС8470По8482, КодВторогоСимвола - 8469, 1);
				Иначе
					Результат = Результат + " ";
				КонецЕсли
				
			ИначеЕсли КодПервогоСимвола = 1057 Тогда
				Если КодВторогоСимвола >= 1026 И КодВторогоСимвола <= 1107 Тогда
					Результат = Результат + Сред(СимволыСКодами1057ДалееС1026По1107, КодВторогоСимвола - 1025, 1);
				ИначеЕсли КодВторогоСимвола >= 8216 И КодВторогоСимвола <= 8364 Тогда
					Результат = Результат + Сред(СимволыСКодами1057ДалееС8216По8364, КодВторогоСимвола - 8215, 1);
				Иначе
					Результат = Результат + " ";
				КонецЕсли;
				
			ИначеЕсли КодПервогоСимвола = 1042 И (КодВторогоСимвола = 171 ИЛИ КодВторогоСимвола = 187) Тогда
				Результат = Результат + """";
				
			ИначеЕсли КодПервогоСимвола = 1074 И КодВторогоСимвола = 8222 И НомерСимвола < СтрДлина(ТекстВКодировкеUTF8) Тогда
				НомерСимвола = НомерСимвола + 1;
				ТретийСимвол = Сред(ТекстВКодировкеUTF8, НомерСимвола, 1);
				КодТретьегоСимвола = КодСимвола(ТретийСимвол);
				Если КодТретьегоСимвола = 8211 Тогда
					Результат = Результат + "N";
				Иначе
					Результат = Результат + " ";
				КонецЕсли;
				
			Иначе
				Результат = Результат + " ";
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭлементыСсылкиНаПортал(СсылкаНаПортал, УбратьСлэшВКонцеСтраницы = Ложь) Экспорт
	
	ЗначениеСсылкиНаПортал = СокрЛП(СсылкаНаПортал);
	ЗащищенноеСоединение = Ложь;
	АдресСервера = ЗначениеСсылкиНаПортал;
	Страница = "";
	
	Если нрег(Лев(ЗначениеСсылкиНаПортал, 7)) = "http://" Тогда
		ЗначениеСсылкиНаПортал = Сред(ЗначениеСсылкиНаПортал, 8);
	ИначеЕсли нрег(Лев(ЗначениеСсылкиНаПортал, 8)) = "https://" Тогда
		ЗначениеСсылкиНаПортал = Сред(ЗначениеСсылкиНаПортал, 9);
		ЗащищенноеСоединение = Истина;
	КонецЕсли;
	
	ПозицияСлэша = СтрНайти(ЗначениеСсылкиНаПортал, "/");
	ПозицияВопроса = СтрНайти(ЗначениеСсылкиНаПортал, "?");
	ПозицияРазделителя = ПозицияСлэша;
	Если ПозицияСлэша > 0 И ПозицияВопроса > 0 И ПозицияВопроса < ПозицияСлэша Тогда
		ПозицияРазделителя = ПозицияВопроса;
	КонецЕсли;
	
	Если ПозицияРазделителя > 0 Тогда
		
		АдресСервера = Лев(ЗначениеСсылкиНаПортал, ПозицияРазделителя - 1);
		Страница = Сред(ЗначениеСсылкиНаПортал, ПозицияРазделителя);
		
		Если УбратьСлэшВКонцеСтраницы И Прав(Страница, 1) = "/" Тогда
			Страница = Лев(Страница, СтрДлина(Страница) - 1);
		КонецЕсли;
			
	КонецЕсли;
	
	Результат = Новый Структура("ЗащищенноеСоединение, АдресСервера, Страница", ЗащищенноеСоединение, АдресСервера, Страница);
	Возврат Результат;
	
КонецФункции

Функция ОбновленноеЗначениеCookie(ЗначениеCookie, ЗначениеSetCookie)
	
	Результат = ЗначениеCookie;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеSetCookie) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, ",", ";");
	
	ПредыдущаяПозицияSetCookie = 1;
	
	Для ПозицияSetCookie = 1 По СтрДлина(ЗначениеSetCookie) + 1 Цикл
		Если ПозицияSetCookie > СтрДлина(ЗначениеSetCookie) ИЛИ Сред(ЗначениеSetCookie, ПозицияSetCookie, 1) = ";" ИЛИ Сред(ЗначениеSetCookie, ПозицияSetCookie, 1) = "," Тогда
			
			ЭлементSetCookie = СокрЛП(Сред(ЗначениеSetCookie, ПредыдущаяПозицияSetCookie, ПозицияSetCookie - ПредыдущаяПозицияSetCookie));
			ИмяЭлементаSetCookie = "";
			ЗначениеЭлементаSetCookie = "";
			ПозицияРазделителя = СтрНайти(ЭлементSetCookie, "=");
			Если ПозицияРазделителя > 0 Тогда
				ИмяЭлементаSetCookie = СокрП(Лев(ЭлементSetCookie, ПозицияРазделителя - 1));
				ИмяЭлементаSetCookie = ВРег(ИмяЭлементаSetCookie);
				ЗначениеЭлементаSetCookie = СокрП(Сред(ЭлементSetCookie, ПозицияРазделителя + 1));
			КонецЕсли;
			
			Если ИмяЭлементаSetCookie <> "" И ИмяЭлементаSetCookie <> "PATH" И ИмяЭлементаSetCookie <> "MAX-AGE"
				И ИмяЭлементаSetCookie <> "EXPIRES" И ИмяЭлементаSetCookie <> "DOMAIN" И ИмяЭлементаSetCookie <> "SECURE"
				И ИмяЭлементаSetCookie <> "VERSION" И ИмяЭлементаSetCookie <> "COMMENT" И ИмяЭлементаSetCookie <> "COMMENTURL"
				И ИмяЭлементаSetCookie <> "DISCARD" И ИмяЭлементаSetCookie <> "PORT"
				И ЗначениеЭлементаSetCookie <> "" И ЗначениеЭлементаSetCookie <> """""" Тогда
				
				// Поиск элемента по ЗначениеCookie
				ПредыдущаяПозицияCookie = 1;
				ЭлементSetCookieНайден = Ложь;
				
				ПозицияCookie = 1;
				Пока ПозицияCookie <= СтрДлина(Результат) + 1 Цикл
					
					Если ПозицияCookie > СтрДлина(Результат) ИЛИ Сред(Результат, ПозицияCookie, 1) = ";" Тогда
						
						ЭлементCookie = СокрЛП(Сред(Результат, ПредыдущаяПозицияCookie, ПозицияCookie - ПредыдущаяПозицияCookie));
						ИмяЭлементаCookie = ЭлементCookie;
						ПозицияРазделителя = СтрНайти(ЭлементCookie, "=");
						Если ПозицияРазделителя > 0 Тогда
							ИмяЭлементаCookie = СокрП(Лев(ЭлементCookie, ПозицияРазделителя - 1));
						КонецЕсли;
						ИмяЭлементаCookie = ВРег(ИмяЭлементаCookie);
						
						Если ИмяЭлементаCookie = ИмяЭлементаSetCookie Тогда
							
							Результат = Лев(Результат, ПредыдущаяПозицияCookie - 1) + ЭлементSetCookie + Сред(Результат, ПозицияCookie);
							
							ПриростДлиныCookie = СтрДлина(ЭлементSetCookie) - (ПозицияCookie - ПредыдущаяПозицияCookie);
							ПозицияCookie = ПозицияCookie + ПриростДлиныCookie;
							
							ЭлементSetCookieНайден = Истина;
							
						КонецЕсли;
						
						ПредыдущаяПозицияCookie = ПозицияCookie + 1;
						
					КонецЕсли;
					
					ПозицияCookie = ПозицияCookie + 1;
					
				КонецЦикла;
				
				Если НЕ ЭлементSetCookieНайден Тогда
					
					РазделительВКонце = (Прав(СокрП(Результат), 1) = ";");
					Результат = Результат + ?(ПустаяСтрока(Результат) ИЛИ РазделительВКонце, "", ";") + ЭлементSetCookie;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПредыдущаяПозицияSetCookie = ПозицияSetCookie + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаИзСтрокиРазныхФорматов(СтрокаДаты)
	
	Результат = СокрЛП(СтрокаДаты);
	
	Попытка
		Возврат Дата(Результат);
	Исключение
	КонецПопытки;
	
	ЧисловаяДата = ТекстПослеПрефикса(Результат, "\/Date(", ")\/");
	Если ЧисловаяДата <> Неопределено Тогда
		Попытка
			Возврат '00010101000000' + Число(ЧисловаяДата) / 1000 + ('19700101000000' - '00010101000000');
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, "T", " "); // поддержка формата "2015-03-13T18:34:13"
	
	Если СтрДлина(Результат) = 10 Тогда
		Результат = Результат + " 00:00:00";
		
	ИначеЕсли СтрДлина(Результат) = 16 Тогда
		Результат = Результат + ":00"
	КонецЕсли;
	
	Если (СтрДлина(Результат) = 19 ИЛИ СтрДлина(Результат) = 23) И Сред(Результат, 11, 1) = " " И
		(Сред(Результат, 14, 1) = ":" ИЛИ Сред(Результат, 14, 1) = ".") И (Сред(Результат, 17, 1) = ":" ИЛИ Сред(Результат, 17, 1) = ".") Тогда
		
		Если (Сред(Результат, 3, 1) = "." ИЛИ Сред(Результат, 3, 1) = "-") И (Сред(Результат, 6, 1) = "." ИЛИ Сред(Результат, 6, 1) = "-") Тогда
			Результат = Сред(Результат, 7, 4) + Сред(Результат, 4, 2) + Сред(Результат, 1, 2) + Сред(Результат, 12, 2) + Сред(Результат, 15, 2) + Сред(Результат, 18, 2);
			
		ИначеЕсли (Сред(Результат, 5, 1) = "." ИЛИ Сред(Результат, 5, 1) = "-") И (Сред(Результат, 8, 1) = "." ИЛИ Сред(Результат, 8, 1) = "-") Тогда
			Результат = Сред(Результат, 1, 4) + Сред(Результат, 6, 2) + Сред(Результат, 9, 2) + Сред(Результат, 12, 2) + Сред(Результат, 15, 2) + Сред(Результат, 18, 2);
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Возврат Дата(Результат);
	Исключение
	КонецПопытки;
	
	Возврат СтрокаДаты;
	
КонецФункции

// Вторичное заявление на подключение к 1С-Отчетности  
//

Функция ИзменившиесяПараметрыПодключения(ОтпечаткиИменаДатыСертификатов) Экспорт
	
	ТекДата = ТекущаяДатаСеанса();
	
	ИгнорироватьДатуПоследнегоОтображения = Ложь;
	
	// Сертификаты
	ВсеCертификаты = СертификатыУчетныхЗаписейПользователяСОрганизациями();
	ИстекающиеСертификатыУчетныхЗаписей = ОставитьТолькоИстекающиеСертификатыХранилища(
		ВсеCертификаты, 
		ОтпечаткиИменаДатыСертификатов, 
		ТекДата,
		ИгнорироватьДатуПоследнегоОтображения);
		
	// Лицензии
	ВсеЛицензии = ЛицензииУчетныхЗаписейПользователяСОрганизациями();
	ИстекающиеЛицензии = ОставитьТолькоИстекающиеЛицензииХранилища(
		ВсеЛицензии, 
		ТекДата,
		ИгнорироватьДатуПоследнегоОтображения);
	
	// Изменившиеся параметры подключения 
	ИзменившиесяРеквизитыОрганизаций = ИзменившиесяРеквизитыУчетнойЗаписи();
	СведенияДляБезбумажногоПродления = ИзменившиесяРеквизитыОрганизаций.Скопировать(, "Организация, УчетнаяЗаписьДокументооборота, СведенияДляБезбумажногоПродления");
	
	ОставитьТолькоИзменившиесяРеквизитыТребующиеНапоминания(
		ИзменившиесяРеквизитыОрганизаций, 
		ТекДата, 
		ИгнорироватьДатуПоследнегоОтображения);
	
	// Объединение данных об истекающих сертификатах, лицензиях, измененных параметрах в одну таблицу
	ИзменившиесяПараметрыПодключения = ОбъединитьПричиныОтправкиВторичногоЗаявления(
		ИстекающиеСертификатыУчетныхЗаписей, 
		ИстекающиеЛицензии, 
		ИзменившиесяРеквизитыОрганизаций,
		СведенияДляБезбумажногоПродления);
	
	// Добавляем колонку с признаком поддержки вторичных заявлений
	ОпределитьДляКаждойОрганизацииВозможностьПоддержкиВторичныхЗаявлений(ИзменившиесяПараметрыПодключения);
	
	// Переделываем таблицу значений в массив структур для передачи на клиент.
	ИзменившиесяПараметрыПодключения = ОбщегоНазначения.ТаблицаЗначенийВМассив(ИзменившиесяПараметрыПодключения);
	
	Возврат ИзменившиесяПараметрыПодключения;
	
КонецФункции

Функция ИзменилсяСоставРеквизитов(ИзменившиесяРеквизиты, ИзменившиесяРеквизитыИзХранилища)
	
	СоставИзменился = Ложь;
	
	Если ИзменившиесяРеквизиты = Неопределено И ИзменившиесяРеквизитыИзХранилища <> Неопределено
		ИЛИ ИзменившиесяРеквизиты <> Неопределено И ИзменившиесяРеквизитыИзХранилища = Неопределено Тогда
		// Если один из списков пустой
		СоставИзменился = Истина;
	ИначеЕсли ИзменившиесяРеквизиты.Количество() <> ИзменившиесяРеквизитыИзХранилища.Количество() Тогда
		// Если количество элементов различно
		СоставИзменился = Истина;
	Иначе
		// Если количество элементов одинаково
		Для каждого ИзменившийсяРеквизит Из ИзменившиесяРеквизиты Цикл
			НайденныйИзменившийсяРеквизит = ИзменившиесяРеквизитыИзХранилища.НайтиПоЗначению(ИзменившийсяРеквизит.Значение);
			Если НайденныйИзменившийсяРеквизит = Неопределено Тогда 
				СоставИзменился = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоставИзменился;
	
КонецФункции

Функция ИзменившиесяРеквизитыУчетнойЗаписи() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	Организации.Ссылка КАК Организация,
	                      |	УчетныеЗаписиДокументооборота.Ссылка КАК УчетнаяЗаписьДокументооборота
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	                      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
	                      |			ПО УчетныеЗаписиДокументооборота.Ссылка = ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись
	                      |		ПО Организации.УчетнаяЗаписьОбмена = УчетныеЗаписиДокументооборота.Ссылка
	                      |ГДЕ
	                      |	(&НуженОтборПоПользователям
	                      |				И ПользователиУчетныхЗаписейДокументооборота.Пользователь = &Пользователь
	                      |			ИЛИ НЕ &НуженОтборПоПользователям)
	                      |	И Организации.ВидОбменаСКонтролирующимиОрганами = &ОбменВУниверсальномФормате
	                      |	И НЕ УчетныеЗаписиДокументооборота.ПометкаУдаления
	                      |	И Организации.ПометкаУдаления = ЛОЖЬ");
						  
	НуженОтборПоПользователям = ОбщегоНазначения.РазделениеВключено() 
		ИЛИ НЕ Пользователи.ЭтоПолноправныйПользователь();
						  
	Запрос.УстановитьПараметр("Пользователь", 				Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ОбменВУниверсальномФормате", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("НуженОтборПоПользователям",  НуженОтборПоПользователям);
	ИзменившиесяРеквизитыОрганизаций = Запрос.Выполнить().Выгрузить();
	
	ИзменившиесяРеквизитыОрганизаций.Колонки.Добавить("СписокИзменившихсяРеквизитов");
	ИзменившиесяРеквизитыОрганизаций.Колонки.Добавить("СведенияДляБезбумажногоПродления");
	ИзменившиесяРеквизитыОрганизаций.Колонки.Добавить("ПредставлениеИзменившихсяРеквизитов", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(300)));
	
	Для каждого ИзменившиесяРеквизитыОрганизации Из ИзменившиесяРеквизитыОрганизаций Цикл
		ДобавитьВТаблицуСписокИзменившихсяРеквизитовПодключенияК1СОтчетности(ИзменившиесяРеквизитыОрганизации);
	КонецЦикла; 
		
	Возврат ИзменившиесяРеквизитыОрганизаций;
	
КонецФункции

Функция ОбъединитьПричиныОтправкиВторичногоЗаявления(
		ИстекающиеСертификатыУчетныхЗаписей, 
		ИстекающиеЛицензии, 
		ИзменившиесяРеквизитыОрганизаций, 
		СведенияДляБезбумажногоПродления)
		
	// Исключение из стандарта 282.
	// Возможны одинаковые записи, требуется их исключение из результатов запроса
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ИстекающиеСертификатыУчетныхЗаписей.Организация КАК Организация,
	               |	ИстекающиеСертификатыУчетныхЗаписей.УчетнаяЗаписьДокументооборота КАК УчетнаяЗаписьДокументооборота,
	               |	ИстекающиеСертификатыУчетныхЗаписей.НаименованиеСертификата КАК НаименованиеСертификата,
	               |	ИстекающиеСертификатыУчетныхЗаписей.СертификатДействителенПо КАК СертификатДействителенПо,
	               |	ИстекающиеСертификатыУчетныхЗаписей.ОтпечатокСертификата КАК ОтпечатокСертификата
	               |ПОМЕСТИТЬ ИстекающиеСертификатыУчетныхЗаписей
	               |ИЗ
	               |	&ИстекающиеСертификатыУчетныхЗаписей КАК ИстекающиеСертификатыУчетныхЗаписей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ИстекающиеЛицензии.Организация КАК Организация,
	               |	ИстекающиеЛицензии.УчетнаяЗаписьДокументооборота КАК УчетнаяЗаписьДокументооборота,
	               |	ИстекающиеЛицензии.ЛицензияНаименование КАК ЛицензияНаименование,
	               |	ИстекающиеЛицензии.ЛицензияДатаОкончания КАК ЛицензияДатаОкончания
	               |ПОМЕСТИТЬ ИстекающиеЛицензии
	               |ИЗ
	               |	&ИстекающиеЛицензии КАК ИстекающиеЛицензии
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ИзменившиесяРеквизитыОрганизаций.Организация КАК Организация,
	               |	ИзменившиесяРеквизитыОрганизаций.УчетнаяЗаписьДокументооборота КАК УчетнаяЗаписьДокументооборота,
	               |	ИзменившиесяРеквизитыОрганизаций.ПредставлениеИзменившихсяРеквизитов КАК ПредставлениеИзменившихсяРеквизитов
	               |ПОМЕСТИТЬ ИзменившиесяРеквизитыОрганизаций
	               |ИЗ
	               |	&ИзменившиесяРеквизитыОрганизаций КАК ИзменившиесяРеквизитыОрганизаций
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ИстекающиеСертификатыУчетныхЗаписей.Организация,
	               |	ИстекающиеСертификатыУчетныхЗаписей.УчетнаяЗаписьДокументооборота
	               |ПОМЕСТИТЬ УчетныеЗаписиОрганизаций
	               |ИЗ
	               |	ИстекающиеСертификатыУчетныхЗаписей КАК ИстекающиеСертификатыУчетныхЗаписей
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИстекающиеЛицензии.Организация,
	               |	ИстекающиеЛицензии.УчетнаяЗаписьДокументооборота
	               |ИЗ
	               |	ИстекающиеЛицензии КАК ИстекающиеЛицензии
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИзменившиесяРеквизитыОрганизаций.Организация,
	               |	ИзменившиесяРеквизитыОрганизаций.УчетнаяЗаписьДокументооборота
	               |ИЗ
	               |	ИзменившиесяРеквизитыОрганизаций КАК ИзменившиесяРеквизитыОрганизаций
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	УчетныеЗаписиОрганизаций.Организация,
	               |	УчетныеЗаписиОрганизаций.УчетнаяЗаписьДокументооборота,
	               |	ИстекающиеСертификатыУчетныхЗаписей.ОтпечатокСертификата КАК ОтпечатокСертификата,
	               |	ИстекающиеСертификатыУчетныхЗаписей.НаименованиеСертификата КАК НаименованиеСертификата,
	               |	ИстекающиеСертификатыУчетныхЗаписей.СертификатДействителенПо КАК СертификатДействителенПо,
	               |	ИстекающиеЛицензии.ЛицензияНаименование КАК ЛицензияНаименование,
	               |	ИстекающиеЛицензии.ЛицензияДатаОкончания КАК ЛицензияДатаОкончания,
	               |	ИзменившиесяРеквизитыОрганизаций.ПредставлениеИзменившихсяРеквизитов КАК ПредставлениеИзменившихсяРеквизитов
	               |ИЗ
	               |	УчетныеЗаписиОрганизаций КАК УчетныеЗаписиОрганизаций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ИстекающиеСертификатыУчетныхЗаписей КАК ИстекающиеСертификатыУчетныхЗаписей
	               |		ПО УчетныеЗаписиОрганизаций.Организация = ИстекающиеСертификатыУчетныхЗаписей.Организация
	               |			И УчетныеЗаписиОрганизаций.УчетнаяЗаписьДокументооборота = ИстекающиеСертификатыУчетныхЗаписей.УчетнаяЗаписьДокументооборота
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ИстекающиеЛицензии КАК ИстекающиеЛицензии
	               |		ПО УчетныеЗаписиОрганизаций.Организация = ИстекающиеЛицензии.Организация
	               |			И УчетныеЗаписиОрганизаций.УчетнаяЗаписьДокументооборота = ИстекающиеЛицензии.УчетнаяЗаписьДокументооборота
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ИзменившиесяРеквизитыОрганизаций КАК ИзменившиесяРеквизитыОрганизаций
	               |		ПО УчетныеЗаписиОрганизаций.Организация = ИзменившиесяРеквизитыОрганизаций.Организация
	               |			И УчетныеЗаписиОрганизаций.УчетнаяЗаписьДокументооборота = ИзменившиесяРеквизитыОрганизаций.УчетнаяЗаписьДокументооборота
	               |ГДЕ
	               |	НЕ УчетныеЗаписиОрганизаций.УчетнаяЗаписьДокументооборота В (&ИсключаемыеУчетныеЗаписи)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	УчетныеЗаписиОрганизаций.Организация";
	
	ИсключаемыеУчетныеЗаписи = УчетныеЗаписиТребующиеНапоминанияОПереходе();
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИстекающиеСертификатыУчетныхЗаписей", 	ИстекающиеСертификатыУчетныхЗаписей);
	Запрос.УстановитьПараметр("ИстекающиеЛицензии", 					ИстекающиеЛицензии);
	Запрос.УстановитьПараметр("ИзменившиесяРеквизитыОрганизаций", 		ИзменившиесяРеквизитыОрганизаций);
	Запрос.УстановитьПараметр("ИсключаемыеУчетныеЗаписи", 				ИсключаемыеУчетныеЗаписи);

	Результат = Запрос.Выполнить().Выгрузить();
	
	// Добавляем в результирующую таблицу нужные колонки.
	Результат.Колонки.Добавить("СписокИзменившихсяРеквизитов");
	Результат.Колонки.Добавить("СведенияДляБезбумажногоПродления");
	
	Индекс = 1;
	Для каждого СтрокаРезультата Из Результат Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Организация", СтрокаРезультата.Организация);
		Отбор.Вставить("УчетнаяЗаписьДокументооборота", СтрокаРезультата.УчетнаяЗаписьДокументооборота);
		
		НайденныеСтроки = ИзменившиесяРеквизитыОрганизаций.НайтиСтроки(Отбор);
		
		// Восстанавливаем СписокИзменившихсяРеквизитов, который удалился запросом
		Если НайденныеСтроки.Количество() > 0 Тогда 
			СтрокаРезультата.СписокИзменившихсяРеквизитов = НайденныеСтроки[0].СписокИзменившихсяРеквизитов;
		КонецЕсли;
		
		// Восстанавливаем СведенияДляБезбумажногоПродления, которые удалились запросом.
		// Если безбумажное продление невозможно, то восстанавливать реквизиты не имеет смысла.
		ЗаканчиваетсяЛицензия   = СтрокаРезультата.ЛицензияНаименование <> Null;
		ЗаканчиваетсяСертификат = СтрокаРезультата.ОтпечатокСертификата <> Null;
		
		БезбумажноеПродлениеВозможно = ЗаканчиваетсяЛицензия ИЛИ ЗаканчиваетсяСертификат;
		
		Если БезбумажноеПродлениеВозможно Тогда
			НайденныеСтроки = СведенияДляБезбумажногоПродления.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда 
				СтрокаРезультата.СведенияДляБезбумажногоПродления = НайденныеСтроки[0].СведенияДляБезбумажногоПродления;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

Функция СертификатыУчетныхЗаписейПользователяСОрганизациями()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация,
	|	УчетныеЗаписиДокументооборота.Ссылка КАК УчетнаяЗаписьДокументооборота,
	|	УчетныеЗаписиДокументооборота.СертификатРуководителя КАК СертификатРуководителя
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
	|			ПО УчетныеЗаписиДокументооборота.Ссылка = ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись
	|		ПО Организации.УчетнаяЗаписьОбмена = УчетныеЗаписиДокументооборота.Ссылка
	|ГДЕ
	|	(&НуженОтборПоПользователям
	|				И ПользователиУчетныхЗаписейДокументооборота.Пользователь = &Пользователь
	|			ИЛИ НЕ &НуженОтборПоПользователям)
	|	И Организации.ВидОбменаСКонтролирующимиОрганами = &ОбменВУниверсальномФормате
	|	И НЕ УчетныеЗаписиДокументооборота.ПометкаУдаления
	|	И Организации.ПометкаУдаления = ЛОЖЬ";
	
	НуженОтборПоПользователям = ОбщегоНазначения.РазделениеВключено() 
		ИЛИ НЕ Пользователи.ЭтоПолноправныйПользователь();
						  
	Запрос.УстановитьПараметр("Пользователь", 				Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ОбменВУниверсальномФормате", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("НуженОтборПоПользователям",  НуженОтборПоПользователям);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьДокументооборота", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиДокументооборота"));
	Результат.Колонки.Добавить("ОтпечатокСертификата", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40)));
	Результат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СертификатРуководителя 	= нрег(СокрЛП(Выборка.СертификатРуководителя));
			
			Если НЕ ПустаяСтрока(СертификатРуководителя) Тогда
				
				НоваяСтрокаРезультата = Результат.Добавить();
				НоваяСтрокаРезультата.УчетнаяЗаписьДокументооборота = Выборка.УчетнаяЗаписьДокументооборота;
				НоваяСтрокаРезультата.ОтпечатокСертификата 			= СертификатРуководителя;
				НоваяСтрокаРезультата.Организация 					= Выборка.Организация;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ЛицензииУчетныхЗаписейПользователяСОрганизациями()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	Организации.Ссылка КАК Организация,
	                      |	УчетныеЗаписиДокументооборота.Ссылка КАК УчетнаяЗаписьДокументооборота,
	                      |	УчетныеЗаписиДокументооборота.ЛицензияНаименование КАК ЛицензияНаименование,
	                      |	УчетныеЗаписиДокументооборота.ЛицензияДатаОкончания КАК ЛицензияДатаОкончания
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	                      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
	                      |			ПО УчетныеЗаписиДокументооборота.Ссылка = ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись
	                      |		ПО Организации.УчетнаяЗаписьОбмена = УчетныеЗаписиДокументооборота.Ссылка
	                      |ГДЕ
	                      |	(&НуженОтборПоПользователям
	                      |				И ПользователиУчетныхЗаписейДокументооборота.Пользователь = &Пользователь
	                      |			ИЛИ НЕ &НуженОтборПоПользователям)
	                      |	И НЕ УчетныеЗаписиДокументооборота.ПометкаУдаления
	                      |	И УчетныеЗаписиДокументооборота.ЛицензияТребуетсяНапоминаниеОбОкончанииСрокаДействия = ИСТИНА
	                      |	И УчетныеЗаписиДокументооборота.ЛицензияДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	                      |	И Организации.ВидОбменаСКонтролирующимиОрганами = &ОбменВУниверсальномФормате
	                      |	И Организации.ПометкаУдаления = ЛОЖЬ");
						  
	НуженОтборПоПользователям = ОбщегоНазначения.РазделениеВключено() 
		ИЛИ НЕ Пользователи.ЭтоПолноправныйПользователь();
						  
	Запрос.УстановитьПараметр("Пользователь", 				Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ОбменВУниверсальномФормате", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("НуженОтборПоПользователям",  НуженОтборПоПользователям);
	
	Результат = Запрос.Выполнить().Выгрузить();
		
	Возврат Результат;
	
КонецФункции

Функция ЗаявлениеАбонентаДляЗаменыСертификатаБылоСоздано(ОтпечатокСертификата, ДатаОтсчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка
		|ИЗ
		|	Документ.ЗаявлениеАбонентаСпецоператораСвязи.ИзменившиесяРеквизитыВторичногоЗаявления КАК ЗаявлениеАбонентаСпецоператораСвязи
		|ГДЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.ТипЗаявления = &ТипЗаявления
		|	И ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.Статус = &Статус
		|	И ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.УчетнаяЗапись.СертификатРуководителя = &ОтпечатокСертификата
		|	И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.Дата, ДЕНЬ), НАЧАЛОПЕРИОДА(&ДатаОтсчета, ДЕНЬ), ДЕНЬ) <= 10
		|	И ЗаявлениеАбонентаСпецоператораСвязи.ИзмененныйРеквизит = &ИзмененныйРеквизит";

	Запрос.УстановитьПараметр("ОтпечатокСертификата", ОтпечатокСертификата);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено);
	Запрос.УстановитьПараметр("ТипЗаявления", Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение);
	Запрос.УстановитьПараметр("ДатаОтсчета", ДатаОтсчета);
	Запрос.УстановитьПараметр("ИзмененныйРеквизит", Перечисления.ПараметрыПодключенияК1СОтчетности.ПереизданиеСертификата);

	Результат = Запрос.Выполнить();
 	ЗаявленияАбонентаСпецоператораСвязи = Результат.Выбрать();

	Если ЗаявленияАбонентаСпецоператораСвязи.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ЗаявлениеАбонентаДляПродленияЛицензииБылоСоздано(УчетнаяЗапись, ЛицензияНаименование, ЛицензияДатаОкончания, ДатаОтсчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка
		|ИЗ
		|	Документ.ЗаявлениеАбонентаСпецоператораСвязи.ИзменившиесяРеквизитыВторичногоЗаявления КАК ЗаявлениеАбонентаСпецоператораСвязи
		|ГДЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.ТипЗаявления = &ТипЗаявления
		|	И ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.Статус = &Статус
		|	И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.Дата, ДЕНЬ), НАЧАЛОПЕРИОДА(&ДатаОтсчета, ДЕНЬ), ДЕНЬ) <= 10
		|	И ЗаявлениеАбонентаСпецоператораСвязи.ИзмененныйРеквизит = &ИзмененныйРеквизит
		|	И ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.УчетнаяЗапись = &УчетнаяЗапись
		|	И ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.УчетнаяЗапись.ЛицензияНаименование = &ЛицензияНаименование
		|	И ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.УчетнаяЗапись.ЛицензияТребуетсяНапоминаниеОбОкончанииСрокаДействия = ИСТИНА
		|	И ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.УчетнаяЗапись.ЛицензияДатаОкончания = &ЛицензияДатаОкончания";

	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено);
	Запрос.УстановитьПараметр("ТипЗаявления", Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение);
	Запрос.УстановитьПараметр("ДатаОтсчета", ДатаОтсчета);
	Запрос.УстановитьПараметр("ИзмененныйРеквизит", Перечисления.ПараметрыПодключенияК1СОтчетности.ПродлениеЛицензии);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ЛицензияНаименование", ЛицензияНаименование);
	Запрос.УстановитьПараметр("ЛицензияДатаОкончания", ЛицензияДатаОкончания);

	Результат = Запрос.Выполнить();
 	ЗаявленияАбонентаСпецоператораСвязи = Результат.Выбрать();

	Если ЗаявленияАбонентаСпецоператораСвязи.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ЗаявлениеАбонентаДляОбновленияРеквизитовБылоСоздано(УчетнаяЗапись, СписокИзменившихсяРеквизитов, ДатаОтсчета)
	
	Если СписокИзменившихсяРеквизитов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивИзменившихсяРеквизитов = Новый Массив;
	Для каждого ИзменившийсяРеквизит Из СписокИзменившихсяРеквизитов Цикл
		МассивИзменившихсяРеквизитов.Добавить(ИзменившийсяРеквизит.Значение);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаявлениеАбонентаСпецоператораСвязи.ИзмененныйРеквизит) КАК ИзмененныйРеквизит
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаявлениеАбонентаСпецоператораСвязи.ИзмененныйРеквизит КАК ИзмененныйРеквизит
		|	ИЗ
		|		Документ.ЗаявлениеАбонентаСпецоператораСвязи.ИзменившиесяРеквизитыВторичногоЗаявления КАК ЗаявлениеАбонентаСпецоператораСвязи
		|	ГДЕ
		|		ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.ТипЗаявления = &ТипЗаявления
		|		И ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.Статус = &Статус
		|		И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.Дата, ДЕНЬ), НАЧАЛОПЕРИОДА(&ДатаОтсчета, ДЕНЬ), ДЕНЬ) <= 10
		|		И ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.УчетнаяЗапись = &УчетнаяЗапись
		|		И ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.ПометкаУдаления = ЛОЖЬ) КАК ЗаявлениеАбонентаСпецоператораСвязи
		|ГДЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.ИзмененныйРеквизит В(&МассивИзменившихсяРеквизитов)
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаявлениеАбонентаСпецоператораСвязи.ИзмененныйРеквизит) >= &КоличествоИзменившихсяРеквизитов";

	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено);
	Запрос.УстановитьПараметр("ТипЗаявления", Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение);
	Запрос.УстановитьПараметр("ДатаОтсчета", ДатаОтсчета);
	Запрос.УстановитьПараметр("МассивИзменившихсяРеквизитов", МассивИзменившихсяРеквизитов);
	Запрос.УстановитьПараметр("КоличествоИзменившихсяРеквизитов", МассивИзменившихсяРеквизитов.Количество());
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);

	Результат = Запрос.Выполнить();
 	ЗаявленияАбонентаСпецоператораСвязи = Результат.Выбрать();

	Если ЗаявленияАбонентаСпецоператораСвязи.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ОставитьТолькоИзменившиесяРеквизитыТребующиеНапоминания(ИзменившиесяРеквизитыОрганизаций, ДатаОтсчета, ИгнорироватьДатуПоследнегоОтображения = Ложь) Экспорт

	// Достаем из хранилища общих настроек информацию о предыдущих показах этого предупреждения
	ДатыНапоминанийПоИзменившимсяРеквизитам = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_ДатыНапоминанийПоИзменившимсяРеквизитам");
	
	// Если приедыдущих показов предупреждений не было, то создаем пустую таблицу 
	Если ДатыНапоминанийПоИзменившимсяРеквизитам = Неопределено ИЛИ ИгнорироватьДатуПоследнегоОтображения Тогда
		
		ДатыНапоминанийПоИзменившимсяРеквизитам = Новый ТаблицаЗначений;
		ДатыНапоминанийПоИзменившимсяРеквизитам.Колонки.Добавить("Организация");
		ДатыНапоминанийПоИзменившимсяРеквизитам.Колонки.Добавить("УчетнаяЗапись");
		ДатыНапоминанийПоИзменившимсяРеквизитам.Колонки.Добавить("СписокИзменившихсяРеквизитов");
		ДатыНапоминанийПоИзменившимсяРеквизитам.Колонки.Добавить("ДатаНапоминания");
		
	КонецЕсли;
	
	ИндексТекущейСтроки = ИзменившиесяРеквизитыОрганизаций.Количество() - 1;
	НачальныйИндексТекущейСтроки = 0;
	
	Пока ИндексТекущейСтроки >= НачальныйИндексТекущейСтроки Цикл
		
		ИзменившиесяРеквизитыОрганизации = ИзменившиесяРеквизитыОрганизаций[ИндексТекущейСтроки];
		ТребуетсяНапоминание = Ложь;
		
		ДатаНапоминанияПоИзмененнымРеквизитам = Неопределено;
		
		ПоддерживаетсяВторичноеЗаявление = ПоддерживаетсяВторичноеЗаявление(ИзменившиесяРеквизитыОрганизации.Организация);
		Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
			ТребуетсяНапоминание = Ложь;
		ИначеЕсли ЗначениеЗаполнено(ИзменившиесяРеквизитыОрганизации.СписокИзменившихсяРеквизитов) Тогда
			
			// Было ли раньше показано напоминание ?
			Отбор = Новый Структура; 
			Отбор.Вставить("Организация", ИзменившиесяРеквизитыОрганизации.Организация);
			Отбор.Вставить("УчетнаяЗапись", ИзменившиесяРеквизитыОрганизации.УчетнаяЗаписьДокументооборота);
			СтрокиДатыНапоминанияПоИзменившимсяРеквизитам = ДатыНапоминанийПоИзменившимсяРеквизитам.НайтиСтроки(Отбор);
			Если СтрокиДатыНапоминанияПоИзменившимсяРеквизитам.Количество() > 0 Тогда
				СтрокаДатыНапоминанияПоИзменившимсяРеквизитам = СтрокиДатыНапоминанияПоИзменившимсяРеквизитам[0];
				ДатаНапоминанияПоИзмененнымРеквизитам = СтрокаДатыНапоминанияПоИзменившимсяРеквизитам.ДатаНапоминания;
			Иначе
				СтрокаДатыНапоминанияПоИзменившимсяРеквизитам = Неопределено;
			КонецЕсли;
			
			// Проверяем, отправлялось ли заявление для обновления этих реквизитов
			ЗаявлениеАбонентаДляОбновленияРеквизитовБылоСоздано = ЗаявлениеАбонентаДляОбновленияРеквизитовБылоСоздано(
					ИзменившиесяРеквизитыОрганизации.УчетнаяЗаписьДокументооборота, ИзменившиесяРеквизитыОрганизации.СписокИзменившихсяРеквизитов, ДатаОтсчета);
			
			// Определяем, нужно ли показывать предупреждения
			Если ДатаНапоминанияПоИзмененнымРеквизитам = Неопределено Тогда
				// Напоминания раньше не было
				ТребуетсяНапоминание = Истина;
			ИначеЕсли ДатаНапоминанияПоИзмененнымРеквизитам <= ДатаОтсчета И ЗначениеЗаполнено(ДатаНапоминанияПоИзмененнымРеквизитам) Тогда 
				// напоминание не откладывали навседа
				Если НЕ ЗаявлениеАбонентаДляОбновленияРеквизитовБылоСоздано Тогда
					ТребуетсяНапоминание = Истина;
				КонецЕсли;
			Иначе
				// Проверяем, изменился ли состав измененных реквизитов с момента прошлого показа предупреждения
				ИзменилсяСоставРеквизитов = ИзменилсяСоставРеквизитов(ИзменившиесяРеквизитыОрганизации.СписокИзменившихсяРеквизитов, 
						СтрокаДатыНапоминанияПоИзменившимсяРеквизитам.СписокИзменившихсяРеквизитов);
						
				// Если пользователь отложил навсегда показ предупреждения, но состав реквизитов изменился, то 
				// предупреждение показываем все равно.
				Если ИзменилсяСоставРеквизитов И НЕ ЗаявлениеАбонентаДляОбновленияРеквизитовБылоСоздано Тогда
					ТребуетсяНапоминание = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ТребуетсяНапоминание Тогда
			// Если напоминание не требуется, то удаляем из таблицы эту строку
			ИзменившиесяРеквизитыОрганизации = Неопределено;
			ИзменившиесяРеквизитыОрганизаций.Удалить(ИндексТекущейСтроки);
		Иначе
			// Заполняем представление на основе списка изменившихся реквизитов
			ИзменившиесяРеквизитыОрганизации.ПредставлениеИзменившихсяРеквизитов = ПредставлениеИзменившихсяРеквизитов(
				ИзменившиесяРеквизитыОрганизации.СписокИзменившихсяРеквизитов);
		КонецЕсли;
		
		ИндексТекущейСтроки = ИндексТекущейСтроки - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОставитьТолькоИстекающиеЛицензииХранилища(
			ЛицензииУчетныхЗаписейПользователя, 
			ТекДата,
			ИгнорироватьДатуПоследнегоОтображения = Ложь)
			
	ЭтоРежимОграниченнойФункциональности = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЭтоРежимОграниченнойФункциональности();
	Если ЭтоРежимОграниченнойФункциональности Тогда
		ДатаИстечения = ТекДата + 7 * 24 * 60 * 60; // За 7 дней.
	Иначе
		ДатаИстечения = ТекДата + 60 * 24 * 60 * 60; // За 60 дней.
	КонецЕсли;
	
	ДатыНапоминанийПоИстекающимЛицензиям = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_ДатыНапоминанийПоИстекающимЛицензиям");
	
	Если ДатыНапоминанийПоИстекающимЛицензиям = Неопределено ИЛИ ИгнорироватьДатуПоследнегоОтображения Тогда
		
		ДатыНапоминанийПоИстекающимЛицензиям = Новый ТаблицаЗначений;
		ДатыНапоминанийПоИстекающимЛицензиям.Колонки.Добавить("Организация");
		ДатыНапоминанийПоИстекающимЛицензиям.Колонки.Добавить("УчетнаяЗапись");
		ДатыНапоминанийПоИстекающимЛицензиям.Колонки.Добавить("ЛицензияНаименование");
		ДатыНапоминанийПоИстекающимЛицензиям.Колонки.Добавить("ЛицензияДатаОкончания");
		ДатыНапоминанийПоИстекающимЛицензиям.Колонки.Добавить("ДатаНапоминания");
		
	КонецЕсли;
	
	ИндексТекущейСтроки = ЛицензииУчетныхЗаписейПользователя.Количество() - 1;
	НачальныйИндексТекущейСтроки = 0;
	
	Пока ИндексТекущейСтроки >= НачальныйИндексТекущейСтроки Цикл
		
		ЛицензияУчетнойЗаписиПользователя = ЛицензииУчетныхЗаписейПользователя[ИндексТекущейСтроки];
		ЕстьПросроченные = Ложь;
		ТребуетсяНапоминание = Ложь;
		
		// Подходит срок окончания лицензии
		ПоддерживаетсяВторичноеЗаявление = ПоддерживаетсяВторичноеЗаявление(ЛицензияУчетнойЗаписиПользователя.Организация);
		Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
			ТребуетсяНапоминание = Ложь;
		ИначеЕсли РазницаДатВМесяцах(ТекущаяДатаСеанса(), ЛицензияУчетнойЗаписиПользователя.ЛицензияДатаОкончания) > 13 Тогда
			ТребуетсяНапоминание = Ложь;
		ИначеЕсли ЛицензияУчетнойЗаписиПользователя.ЛицензияДатаОкончания <= ДатаИстечения Тогда
			
			ДатаНапоминанияПоИстекшейЛицензии = Неопределено;
			
			// Было ли раньше показано напоминание?
			// Ищем среди лицензий, сохраненных в хранилище по наименованию и окончнию лицензии
			ПараметрыОтбора =  Новый Структура();
			ПараметрыОтбора.Вставить("Организация", ЛицензияУчетнойЗаписиПользователя.Организация);
			ПараметрыОтбора.Вставить("УчетнаяЗапись", ЛицензияУчетнойЗаписиПользователя.УчетнаяЗаписьДокументооборота);
			ПараметрыОтбора.Вставить("ЛицензияНаименование", ЛицензияУчетнойЗаписиПользователя.ЛицензияНаименование);
			ПараметрыОтбора.Вставить("ЛицензияДатаОкончания", ЛицензияУчетнойЗаписиПользователя.ЛицензияДатаОкончания);
			
			СтрокиДатыНапоминанияПоИстекающейЛицензии = ДатыНапоминанийПоИстекающимЛицензиям.НайтиСтроки(ПараметрыОтбора);
				
			Если СтрокиДатыНапоминанияПоИстекающейЛицензии.Количество() > 0 Тогда
				ДатаНапоминанияПоИстекшейЛицензии = СтрокиДатыНапоминанияПоИстекающейЛицензии[0].ДатаНапоминания;
			КонецЕсли;
						
			Если ДатаНапоминанияПоИстекшейЛицензии = Неопределено Тогда
				// Напоминания раньше не было
				ТребуетсяНапоминание = Истина;
			ИначеЕсли ДатаНапоминанияПоИстекшейЛицензии <= ТекДата И ЗначениеЗаполнено(ДатаНапоминанияПоИстекшейЛицензии) Тогда
				// Напоминание было, но срок показа подошел
				УчетнаяЗапись = ЛицензияУчетнойЗаписиПользователя.УчетнаяЗаписьДокументооборота;
				ЛицензияНаименование = ЛицензияУчетнойЗаписиПользователя.ЛицензияНаименование;
				ЛицензияДатаОкончания = ЛицензияУчетнойЗаписиПользователя.ЛицензияДатаОкончания;
				
				ЗаявлениеАбонентаДляПродленияЛицензииБылоСоздано =
					ЗаявлениеАбонентаДляПродленияЛицензииБылоСоздано(УчетнаяЗапись, ЛицензияНаименование, ЛицензияДатаОкончания, ТекДата);

				Если НЕ ЗаявлениеАбонентаДляПродленияЛицензииБылоСоздано Тогда
					ТребуетсяНапоминание = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если напоминания по лицензии не требуется, то удаляем ее из таблицы
		Если НЕ ТребуетсяНапоминание Тогда
			ЛицензияУчетнойЗаписиПользователя = Неопределено;
			ЛицензииУчетныхЗаписейПользователя.Удалить(ИндексТекущейСтроки);
		КонецЕсли;
		ИндексТекущейСтроки = ИндексТекущейСтроки - 1;
		
	КонецЦикла;
	
	Возврат ЛицензииУчетныхЗаписейПользователя;
	
КонецФункции

Функция ОставитьТолькоИстекающиеСертификатыХранилища(
			СертификатыУчетныхЗаписейПользователя, 
			ОтпечаткиИменаДатыСертификатовВХранилище, 
			ТекДата,
			ИгнорироватьДатуПоследнегоОтображения = Ложь)

	ДатаИстечения = ТекДата + 60 * 24 * 60 * 60; // За 60 дней.
	
	ДатыНапоминанийПоИстекающимСертификатам = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_НапоминаниеПоИстекающимСертификатам");
	
	Если ДатыНапоминанийПоИстекающимСертификатам = Неопределено ИЛИ ИгнорироватьДатуПоследнегоОтображения Тогда
		
		ДатыНапоминанийПоИстекающимСертификатам = Новый ТаблицаЗначений;
		ДатыНапоминанийПоИстекающимСертификатам.Колонки.Добавить("Организация");
		ДатыНапоминанийПоИстекающимСертификатам.Колонки.Добавить("Отпечаток");
		ДатыНапоминанийПоИстекающимСертификатам.Колонки.Добавить("ДействителенПо");
		ДатыНапоминанийПоИстекающимСертификатам.Колонки.Добавить("ДатаНапоминания");
		
	КонецЕсли;
	
	// Определяем соответствие
	Отпечатки = Новый Соответствие;
	Для Каждого СертификатУчетнойЗаписиПользователя Из СертификатыУчетныхЗаписейПользователя Цикл
		Отпечатки.Вставить(СертификатУчетнойЗаписиПользователя.ОтпечатокСертификата, Неопределено);
	КонецЦикла;

	Если ОтпечаткиИменаДатыСертификатовВХранилище <> Неопределено Тогда
		Для Каждого Отпечаток Из Отпечатки Цикл
			СвойстваСертификата = ОтпечаткиИменаДатыСертификатовВХранилище.Получить(Отпечаток.Ключ);
			Если СвойстваСертификата <> Неопределено Тогда
				// игнорировать сертификаты, истекшите более года назад
				Если (СвойстваСертификата.ДействителенПо <= ДатаИстечения)
					И (СвойстваСертификата.ДействителенПо > ДобавитьМесяц(ТекДата, -12)) Тогда
					Отпечатки.Вставить(Отпечаток.Ключ, СвойстваСертификата);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИндексТекущейСтроки = СертификатыУчетныхЗаписейПользователя.Количество() - 1;
	НачальныйИндексТекущейСтроки = 0;
	// добавляем колонки с заданным типом
	СертификатыУчетныхЗаписейПользователя.Колонки.Добавить("НаименованиеСертификата", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	СертификатыУчетныхЗаписейПользователя.Колонки.Добавить("СертификатДействителенПо", Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Пока ИндексТекущейСтроки >= НачальныйИндексТекущейСтроки Цикл
		
		СертификатУчетнойЗаписиПользователя = СертификатыУчетныхЗаписейПользователя[ИндексТекущейСтроки];
		Отпечаток = Отпечатки.Получить(СертификатУчетнойЗаписиПользователя.ОтпечатокСертификата);
		ЕстьПросроченные = Ложь;
		ТребуетсяНапоминание = Ложь;
		
		Если Отпечаток <> Неопределено Тогда
			
			// Подходит срок окончания сертификата 
			Если Отпечаток.ДействителенПо <= ДатаИстечения Тогда
				
				ДатаНапоминанияПоИстекающемуСертификату = Неопределено;
				
				// Было ли раньше показано напоминание ?
				Отбор = Новый Структура();
				Отбор.Вставить("Организация", СертификатУчетнойЗаписиПользователя.Организация);
				Отбор.Вставить("Отпечаток", СертификатУчетнойЗаписиПользователя.ОтпечатокСертификата);
				СтрокиДатыНапоминанияПоИстекающемуСертификату = ДатыНапоминанийПоИстекающимСертификатам.НайтиСтроки(Отбор);
				
				Если СтрокиДатыНапоминанияПоИстекающемуСертификату.Количество() > 0 Тогда
					СтрокаДатыНапоминанияПоИстекающемуСертификату = СтрокиДатыНапоминанияПоИстекающемуСертификату[0];
					ДатаНапоминанияПоИстекающемуСертификату = СтрокаДатыНапоминанияПоИстекающемуСертификату.ДатаНапоминания;
				Иначе
					СтрокаДатыНапоминанияПоИстекающемуСертификату = Неопределено;
				КонецЕсли;
				
				Если ДатаНапоминанияПоИстекающемуСертификату = Неопределено Тогда
					// Напоминания раньше не было
					ТребуетсяНапоминание = Истина;
				ИначеЕсли ДатаНапоминанияПоИстекающемуСертификату <= ТекДата И ЗначениеЗаполнено(ДатаНапоминанияПоИстекающемуСертификату) Тогда
					// Напоминание было, но срок показа подошел
					ЗаявлениеАбонентаДляЗаменыСертификатаБылоСоздано =
						ЗаявлениеАбонентаДляЗаменыСертификатаБылоСоздано(СертификатУчетнойЗаписиПользователя.ОтпечатокСертификата, ТекДата);
						
					Если НЕ ЗаявлениеАбонентаДляЗаменыСертификатаБылоСоздано Тогда
						ТребуетсяНапоминание = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ТребуетсяНапоминание Тогда
			
			СертификатУчетнойЗаписиПользователя.НаименованиеСертификата	 = Отпечаток.Наименование;
			СертификатУчетнойЗаписиПользователя.СертификатДействителенПо = Отпечаток.ДействителенПо;
			 
			Если СертификатУчетнойЗаписиПользователя.СертификатДействителенПо <= ТекДата Тогда
				ЕстьПросроченные = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьПросроченные Тогда
			// Сертификаты, которые вот-вот истекут перемещаем на самый верх
			Если ИндексТекущейСтроки > 0 Тогда
				СертификатыУчетныхЗаписейПользователя.Сдвинуть(ИндексТекущейСтроки, - ИндексТекущейСтроки);
			КонецЕсли;
			НачальныйИндексТекущейСтроки = НачальныйИндексТекущейСтроки + 1;
		Иначе
			Если НЕ ТребуетсяНапоминание Тогда
				СертификатУчетнойЗаписиПользователя = Неопределено;
				СертификатыУчетныхЗаписейПользователя.Удалить(ИндексТекущейСтроки);
			КонецЕсли;
			ИндексТекущейСтроки = ИндексТекущейСтроки - 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СертификатыУчетныхЗаписейПользователя;
	
КонецФункции

Функция СформироватьТекстПредупрежденияОбИзменившихсяПараметрахПодключения(ИзменившиесяПараметрыПодключения) Экспорт
	
	ТекстМакета = ПолучитьМакет("ПредупреждениеОбИстеченииСпискаСертификатов").ПолучитьТекст();
	
	НачалоИнформацииОбОрганизации 	= СтрНайти(ТекстМакета, "<!--НачалоБлока-->");
	КонецИнформацииОбОрганизации 	= СтрНайти(ТекстМакета, "<!--КонецБлока-->");
	БлокHTMLТаблицы 				= Сред(ТекстМакета, НачалоИнформацииОбОрганизации, КонецИнформацииОбОрганизации - НачалоИнформацииОбОрганизации);
	
	НачалоКнопки 		= СтрНайти(БлокHTMLТаблицы, "<!--НачалоКартинки-->");
	КонецКнопки 		= СтрНайти(БлокHTMLТаблицы, "<!--КонецКартинки-->");
	КодКартинкиКонопки 	= Сред(БлокHTMLТаблицы, НачалоКнопки, КонецКнопки - НачалоКнопки);
	
	НачалоНадписиБезбумажноеПродление = СтрНайти(БлокHTMLТаблицы, "<!--НачалоНадписьБезбумажноеПродление-->");
	КонецНадписиБезбумажноеПродление  = СтрНайти(БлокHTMLТаблицы, "<!--КонецНадписьБезбумажноеПродление-->");
	КодНадписиБезбумажноеПродление    = Сред(БлокHTMLТаблицы, НачалоНадписиБезбумажноеПродление, КонецНадписиБезбумажноеПродление - НачалоНадписиБезбумажноеПродление);
	
	// Устанавливаем заголовок предупреждения
	ПолныйHTMLТекстПредупреждения 	= ТекстМакета;
	ЗаголовокПредупреждения 		= ЗаголовокПредупреждения(ИзменившиесяПараметрыПодключения);
	ПолныйHTMLТекстПредупреждения 	= СтрЗаменить(ПолныйHTMLТекстПредупреждения, "#Заголовок#", ЗаголовокПредупреждения);
	
	// Устанавливаем текст предупреждения
	ТекстПредупреждения 			= ТекстПредупреждения(ИзменившиесяПараметрыПодключения);
	ПолныйHTMLТекстПредупреждения 	= СтрЗаменить(ПолныйHTMLТекстПредупреждения, "#ТекстПредупреждения#", ТекстПредупреждения);
	
	КоличествоОрганизаций = ИзменившиесяПараметрыПодключения.Количество();
	
	// Формируем строки HTML таблицы
	HTMLКодТаблицы = "";
	Для НомерСтроки = 1 По КоличествоОрганизаций Цикл
		
		ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи = ИзменившиесяПараметрыПодключения[НомерСтроки - 1];
		НоваяСтрокаHTMLТаблицы 		= ТекстБлока(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи, БлокHTMLТаблицы);
		
		// Организация
		ИнформацияОбОрганизацииHTML = "<A style=""color: black"" href=""&amp;ПросмотрОрганизации" + Формат(НомерСтроки, "ЧН=0; ЧГ=") + "КонецСсылки"">" 
			+ ТекстВHTML(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.Организация.Наименование) + "</A>";
		НоваяСтрокаHTMLТаблицы		= СтрЗаменить(НоваяСтрокаHTMLТаблицы, "#ИнформацияОбОрганизации#", ИнформацияОбОрганизацииHTML);
			
		// Сертификат
		ИнформацияПоСертификату		= ИнформацияПоСертификату(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи, НомерСтроки);
		НоваяСтрокаHTMLТаблицы		= СтрЗаменить(НоваяСтрокаHTMLТаблицы, "#Сертификат#", ИнформацияПоСертификату);
				
		// Лицензия
		ИнформацияПоЛицензии		= ИнформацияПоЛицензии(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи);
		НоваяСтрокаHTMLТаблицы		= СтрЗаменить(НоваяСтрокаHTMLТаблицы, "#Лицензия#", ИнформацияПоЛицензии);
			
		// Изменившиеся реквизиты
		ИнформацияПоРеквизитам		= ИнформацияПоРеквизитам(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи);
		НоваяСтрокаHTMLТаблицы		= СтрЗаменить(НоваяСтрокаHTMLТаблицы, "#Реквизиты#", ИнформацияПоРеквизитам);
		
		// Кнопка "Отправить заявление"
		Результат                   = КнопкаОтправкиЗаявление(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи, НоваяСтрокаHTMLТаблицы, НомерСтроки);
		НоваяСтрокаHTMLТаблицы 		= СтрЗаменить(НоваяСтрокаHTMLТаблицы, КодКартинкиКонопки, Результат.Кнопка);
		НоваяСтрокаHTMLТаблицы 		= СтрЗаменить(НоваяСтрокаHTMLТаблицы, КодНадписиБезбумажноеПродление, Результат.Надпись);
		
		// Добавляем строку в HTML-документ
		HTMLКодТаблицы = HTMLКодТаблицы + НоваяСтрокаHTMLТаблицы;
		
	КонецЦикла;
	
	// Подставляем в макет сформированную таблицу
	ПолныйHTMLТекстПредупреждения = СтрЗаменить(ПолныйHTMLТекстПредупреждения, БлокHTMLТаблицы, HTMLКодТаблицы);
	ПолныйHTMLТекстПредупреждения = УбратьФорматированиеДляFirefox(ПолныйHTMLТекстПредупреждения);
	
	Возврат ПолныйHTMLТекстПредупреждения;
	
КонецФункции

Функция ИспользуетсяFirefox() Экспорт
	
	ИспользуетсяFirefox = Ложь;
	
	СисИнфо = Новый СистемнаяИнформация;
	ВебБраузер = СисИнфо.ИнформацияПрограммыПросмотра;
	
	ИспользуетсяFirefox = (СтрЧислоВхождений(ВРег(ВебБраузер), "FIREFOX") > 0);
	
	Возврат ИспользуетсяFirefox;
	
КонецФункции

Функция УбратьФорматированиеДляFirefox(Текст) Экспорт
	
	Результат = Текст;
	Если ИспользуетсяFirefox() Тогда
		
		Результат = СтрЗаменить(Результат, "class=leftline", "");
		Результат = СтрЗаменить(Результат, "border=""1""", "border=""0""");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ТекстБлока(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи, Знач ТекстДляЗамены)
		
	НачалоЯчейкиОрганизация = СтрНайти(ТекстДляЗамены,"<!--НачалоЯчейкиОрганизация-->");
	КонецЯчейкиОрганизация 	= СтрНайти(ТекстДляЗамены,"<!--КонецЯчейкиОрганизация-->");
	ЯчейкаОрганизация 		= Сред(ТекстДляЗамены, НачалоЯчейкиОрганизация, КонецЯчейкиОрганизация - НачалоЯчейкиОрганизация);
	
	НачалоЯчейкиСертификат 	= СтрНайти(ТекстДляЗамены,"<!--НачалоЯчейкиСертификат-->");
	КонецЯчейкиСертификат 	= СтрНайти(ТекстДляЗамены,"<!--КонецЯчейкиСертификат-->");
	ЯчейкаСертификат 		= Сред(ТекстДляЗамены, НачалоЯчейкиСертификат, КонецЯчейкиСертификат - НачалоЯчейкиСертификат);
	
	НачалоЯчейкиЗаявление 	= СтрНайти(ТекстДляЗамены,"<!--НачалоЯчейкиЗаявление-->");
	КонецЯчейкиЗаявление 	= СтрНайти(ТекстДляЗамены,"<!--КонецЯчейкиЗаявление-->");
	ЯчейкаЗаявление 		= Сред(ТекстДляЗамены, НачалоЯчейкиЗаявление, КонецЯчейкиЗаявление - НачалоЯчейкиЗаявление);
	
	НачалоЯчейкиЛицензия 	= СтрНайти(ТекстДляЗамены,"<!--НачалоЯчейкиЛицензия-->");
	КонецЯчейкиЛицензия 	= СтрНайти(ТекстДляЗамены,"<!--КонецЯчейкиЛицензия-->");
	ЯчейкаЛицензия 			= Сред(ТекстДляЗамены, НачалоЯчейкиЛицензия, КонецЯчейкиЛицензия - НачалоЯчейкиЛицензия);
	
	НачалоЯчейкиНастроки 	= СтрНайти(ТекстДляЗамены,"<!--НачалоЯчейкиРеквизиты-->");
	КонецЯчейкиНастроки 	= СтрНайти(ТекстДляЗамены,"<!--КонецЯчейкиРеквизиты-->");
	ЯчейкиНастроки			= Сред(ТекстДляЗамены, НачалоЯчейкиНастроки, КонецЯчейкиНастроки - НачалоЯчейкиНастроки);
	
	НачалоВысотыБлока 		= СтрНайти(ТекстДляЗамены,"<!--НачалоВысотыБлока-->");
	КонецВысотыБлока 		= СтрНайти(ТекстДляЗамены,"<!--КонецВысотыБлока-->");
	ТэгВысотыБлока 			= Сред(ТекстДляЗамены, НачалоВысотыБлока, КонецВысотыБлока - НачалоВысотыБлока);
	
	НачалоЯчейкиОтступ 		= СтрНайти(ТекстДляЗамены,"<!--НачалоЯчейкиОтступ-->");
	КонецЯчейкиОтступ 		= СтрНайти(ТекстДляЗамены,"<!--КонецЯчейкиОтступ-->");
	ЯчейкиОтступ 			= Сред(ТекстДляЗамены, НачалоЯчейкиОтступ, КонецЯчейкиОтступ - НачалоЯчейкиОтступ);
	
	НачалоВысотыБлокаЗаявления 	= СтрНайти(ТекстДляЗамены,"<!--НачалоВысотыБлокаЗаявления-->");
	КонецВысотыБлокаЗаявления 	= СтрНайти(ТекстДляЗамены,"<!--КонецВысотыБлокаЗаявления-->");
	ТэгВысотыБлокаЗаявления 	= Сред(ТекстДляЗамены, НачалоВысотыБлокаЗаявления, КонецВысотыБлокаЗаявления - НачалоВысотыБлокаЗаявления);	
	
	// В зависимости от количества строк в блоке, оставляем один блок
	ЕстьСертификат = ЗначениеЗаполнено(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.СертификатДействителенПо) 
		И ЗначениеЗаполнено(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.НаименованиеСертификата);
	
	ЕстьЛицензия = ЗначениеЗаполнено(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.ЛицензияНаименование) 
		И ЗначениеЗаполнено(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.ЛицензияДатаОкончания);
	
	ЕстьРеквизиты = ЗначениеЗаполнено(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.ПредставлениеИзменившихсяРеквизитов);
	
	ВысотаБлока = 0;
	Если ЕстьСертификат И ЕстьЛицензия И ЕстьРеквизиты Тогда
		ВысотаБлока = 3;
	ИначеЕсли ЕстьСертификат И ЕстьЛицензия И НЕ ЕстьРеквизиты 
		ИЛИ ЕстьСертификат И НЕ ЕстьЛицензия И ЕстьРеквизиты 
		ИЛИ НЕ ЕстьСертификат И ЕстьЛицензия И ЕстьРеквизиты Тогда
		ВысотаБлока = 2;
	Иначе 
		ВысотаБлока = 1;
	КонецЕсли;
	
	// Собираем текст блока
	СертификатУжеБыл = Ложь;
	ЛицензияУжеБыла = Ложь;
	РеквизитыУжеБыли = Ложь;
	
	БлокHTMLТаблицы = "";
	// Первая строка
	БлокHTMLТаблицы = БлокHTMLТаблицы + "<TR>" + СтрЗаменить(ЯчейкаОрганизация, ТэгВысотыБлока, "<TD class=rightline rowSpan=" + Строка(ВысотаБлока) + ">" ) + Символы.ПС;
	Если ЕстьСертификат Тогда
		БлокHTMLТаблицы = БлокHTMLТаблицы + ЯчейкаСертификат + Символы.ПС;
		СертификатУжеБыл = Истина;
	ИначеЕсли ЕстьЛицензия Тогда
		БлокHTMLТаблицы = БлокHTMLТаблицы + ЯчейкаЛицензия + Символы.ПС;
		ЛицензияУжеБыла = Истина; 
	ИначеЕсли ЕстьРеквизиты Тогда
		БлокHTMLТаблицы = БлокHTMLТаблицы + ЯчейкиНастроки + Символы.ПС;
		РеквизитыУжеБыли = Истина;
	КонецЕсли;
	БлокHTMLТаблицы = БлокHTMLТаблицы + СтрЗаменить(ЯчейкаЗаявление, ТэгВысотыБлокаЗаявления, "<TD class=leftline align=center rowSpan=" + Строка(ВысотаБлока) + ">" ) + "</TR>" + Символы.ПС;
	// Вторая строка
	Если ЕстьЛицензия И НЕ ЛицензияУжеБыла ИЛИ ЕстьРеквизиты И НЕ РеквизитыУжеБыли Тогда
		БлокHTMLТаблицы = БлокHTMLТаблицы + "<TR>";
	КонецЕсли;
	Если ЕстьЛицензия И НЕ ЛицензияУжеБыла Тогда
		БлокHTMLТаблицы = БлокHTMLТаблицы + ЯчейкаЛицензия + Символы.ПС;
		ЛицензияУжеБыла = Истина; 
	ИначеЕсли ЕстьРеквизиты И НЕ РеквизитыУжеБыли Тогда
		БлокHTMLТаблицы = БлокHTMLТаблицы + ЯчейкиНастроки + Символы.ПС;
		РеквизитыУжеБыли = Истина;
	КонецЕсли;
	Если ЕстьЛицензия И НЕ ЛицензияУжеБыла ИЛИ ЕстьРеквизиты И НЕ РеквизитыУжеБыли Тогда
		БлокHTMLТаблицы = БлокHTMLТаблицы + "</TR>";
	КонецЕсли;
	// Третья строка
	Если ЕстьРеквизиты И НЕ РеквизитыУжеБыли Тогда
		БлокHTMLТаблицы = БлокHTMLТаблицы + "<TR>" + ЯчейкиНастроки + "</TR>";
		РеквизитыУжеБыли = Истина;
	КонецЕсли;
	
	БлокHTMLТаблицы = БлокHTMLТаблицы + ЯчейкиОтступ;
	
	Возврат БлокHTMLТаблицы;
	
КонецФункции

Функция ИнформацияПоЛицензии(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи)

	ИнформацияПоЛицензии = "";
	
	ДвеНедели = 2 * 7 * 24 * 60 * 60;
	ТекДата = ТекущаяДатаСеанса();

	ДатаОкончанияЛицензии = ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.ЛицензияДатаОкончания;
	
	Если ЗначениеЗаполнено(ДатаОкончанияЛицензии) Тогда
		
		// Прибавляем один день, так как в день окончания лицензия еще действует.
		ДатаОкончанияЛицензии = ДатаОкончанияЛицензии + 24*60*60;
		
		ЛицензияНаименование = """" + ТекстВHTML(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.ЛицензияНаименование) + """";
		
		СрокИстеченияЛицензии 			= ТекстЧерезСколькоЛетМесяцевНедельДней(ТекДата, ДатаОкончанияЛицензии, "<nobr>", "</nobr>");
		СрокИстеченияЛицензииВФормате 	= Формат(ДатаОкончанияЛицензии, "ДФ=""дд ММММ гггг 'г.'""");

		Если СрокИстеченияЛицензии = Неопределено Тогда
			// Истекшие лицензии выводим красным
			СрокИстеченияЛицензии	= НСтр("ru='. Истекла '") + ТекстБезПереносов(СрокИстеченияЛицензииВФормате);
			ИнформацияПоЛицензии	= "<li style=""color: b22222"">" + НСтр("ru = 'Лицензия '") + ЛицензияНаименование + " "+ СрокИстеченияЛицензии;
			
		Иначе
			Если НачалоДня(ДатаОкончанияЛицензии) - НачалоДня(ТекДата) < ДвеНедели Тогда
				// Лицензии, срок действия которых заканчивается менее чем через 2 недели
				СрокИстеченияЛицензии	= НСтр("ru='. Истекает через '") + СрокИстеченияЛицензии+ " (" + СрокИстеченияЛицензииВФормате+ ")";
				ИнформацияПоЛицензии	= "<li style=""color: b22222"">" + НСтр("ru = 'Лицензия '") + ЛицензияНаименование + " "+ СрокИстеченияЛицензии;
			Иначе
				// Лицензии, срок действия которых заканчивается более чем через 2 недели
				СрокИстеченияЛицензии	= НСтр("ru='. Истекает через '")  + СрокИстеченияЛицензии+ " (" + СрокИстеченияЛицензииВФормате+ ")";
				ИнформацияПоЛицензии	= "<li style=""color: black"">" + НСтр("ru = 'Лицензия '") + ЛицензияНаименование + " "+ СрокИстеченияЛицензии;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИнформацияПоЛицензии;
	
КонецФункции

Функция ИнформацияПоРеквизитам(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи)

	ИнформацияПоРеквизитам = "";
	
	ЕстьИзменившиесяРеквизиты = ЗначениеЗаполнено(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.ПредставлениеИзменившихсяРеквизитов);
	Если ЕстьИзменившиесяРеквизиты Тогда
		
		ИнформацияПоРеквизитам 	= "<li>" + НСтр("ru = 'Изменились реквизиты подключения - '") 
			+ ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.ПредставлениеИзменившихсяРеквизитов;
		
	КонецЕсли;
	
	Возврат ИнформацияПоРеквизитам;
	
КонецФункции

Функция ИнформацияПоСертификату(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи, НомерСтроки)
	
	ИнформацияПоСертификату = "";
	
	ДвеНедели = 2 * 7 * 24 * 60 * 60;
	ТекДата = ТекущаяДатаСеанса();
	
	СертификатДействителенПо = ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.СертификатДействителенПо;
	
	Если ЗначениеЗаполнено(СертификатДействителенПо) Тогда
		
		НаименованиеСертификата 	= ТекстВHTML(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.НаименованиеСертификата);
			
		ЗаголовокСертификата 		= НСтр("ru = 'Срок действия сертификата '");

		СрокИстеченияСертификата 			= ТекстЧерезСколькоЛетМесяцевНедельДней(ТекДата, СертификатДействителенПо, "<nobr>", "</nobr>");
		СрокИстеченияСертификатаВФормате 	= Формат(СертификатДействителенПо, "дд ММММ гггг ЧЧ:мм:сс 'г.'");
		
		Если СрокИстеченияСертификата = Неопределено Тогда
			// Истекшие сертификаты
			СрокИстеченияСертификата 	= НСтр("ru='истек '") + ТекстБезПереносов(СрокИстеченияСертификатаВФормате);
			ГиперссылкаСертификата 		= "<A style=""color: b22222"" href=""&amp;ПросмотрСертификата" + Формат(НомерСтроки, "ЧН=0; ЧГ=") + "КонецСсылки"">" + НаименованиеСертификата + "</A>";
			ИнформацияПоСертификату 	= "<li style=""color: b22222"">" + ЗаголовокСертификата + " " + ГиперссылкаСертификата + " " + СрокИстеченияСертификата;
		Иначе
			
			Если НачалоДня(СертификатДействителенПо) - НачалоДня(ТекДата) < ДвеНедели Тогда
				// Сертификаты, срок действия которых заканчивается менее чем через 2 недели
				СрокИстеченияСертификата 	= НСтр("ru='истекает через '") + СрокИстеченияСертификата + " (" + СрокИстеченияСертификатаВФормате+ ")";
				ГиперссылкаСертификата 		= "<A style=""color: b22222"" href=""&amp;ПросмотрСертификата" + Формат(НомерСтроки, "ЧН=0; ЧГ=") + "КонецСсылки"">" + НаименованиеСертификата + "</A>";
				ИнформацияПоСертификату 	= "<li style=""color: b22222"">" + ЗаголовокСертификата + " " + ГиперссылкаСертификата + " " + СрокИстеченияСертификата;
			Иначе
				// Сертификаты, срок действия которых заканчивается более чем через 2 недели
			 	СрокИстеченияСертификата 	= НСтр("ru='истекает через '") + СрокИстеченияСертификата + " (" + СрокИстеченияСертификатаВФормате+ ")";
				ГиперссылкаСертификата 		= "<A style=""color: black"" href=""&amp;ПросмотрСертификата" + Формат(НомерСтроки, "ЧН=0; ЧГ=") + "КонецСсылки"">" + НаименованиеСертификата + "</A>";
				ИнформацияПоСертификату 	= "<li style=""color: black"">" + ЗаголовокСертификата + " " + ГиперссылкаСертификата + " " + СрокИстеченияСертификата;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИнформацияПоСертификату;

КонецФункции

Функция ЗаголовокПредупреждения(ИзменившиесяПараметрыПодключения)

	// Определяем, о чем нужно предупреждать
	ЕстьЗакончившиесяЛицензии 		= Ложь;
	ЕстьЗакончившиесяСертификаты 	= Ложь;
	ЕстьИзменившиесяРеквизиты 		= Ложь;
	ЕстьПоддержкаВторичного			= Ложь;
	
	Для каждого ИзменившиесяПараметрыОрганизации Из ИзменившиесяПараметрыПодключения Цикл
		
		Если ИзменившиесяПараметрыОрганизации.ЛицензияНаименование <> Null Тогда
			ЕстьЗакончившиесяЛицензии = Истина;
		КонецЕсли;
		
		Если ИзменившиесяПараметрыОрганизации.ОтпечатокСертификата <> Null Тогда
			ЕстьЗакончившиесяСертификаты = Истина;
		КонецЕсли;
		
		Если ИзменившиесяПараметрыОрганизации.СписокИзменившихсяРеквизитов <> Null Тогда
			ЕстьИзменившиесяРеквизиты = Истина;
		КонецЕсли;
		
		Если ИзменившиесяПараметрыОрганизации.ПоддерживаетсяОтправкаВторичногоЗаявления = Истина Тогда
			ЕстьПоддержкаВторичного = Истина;
		КонецЕсли;
	
	КонецЦикла;
	
	// Формируем заголовок в зависимости от того, о чем нужно предупреждать
	Если ЕстьЗакончившиесяЛицензии И НЕ ЕстьЗакончившиесяСертификаты И НЕ ЕстьИзменившиесяРеквизиты Тогда
		Результат = НСтр("ru = 'Истекает срок действия лицензии на 1С-Отчетность'");
	ИначеЕсли НЕ ЕстьЗакончившиесяЛицензии И ЕстьЗакончившиесяСертификаты И НЕ ЕстьИзменившиесяРеквизиты Тогда
		Результат = НСтр("ru = 'Истекает срок действия сертификата'");
	ИначеЕсли ЕстьЗакончившиесяЛицензии ИЛИ ЕстьЗакончившиесяСертификаты Тогда
		Результат = НСтр("ru = 'Истекает срок действия лицензии (сертификата) на 1С-Отчетность'");
	Иначе
		Результат = НСтр("ru = 'Изменились настройки подключения к 1С-Отчетности'");
	КонецЕсли;
	
	// Если ни одна из организаций не поддерживает вторичные заявления,
	// то убираем понятие 1С-Отчетность из предупреждения
	Если НЕ ЕстьПоддержкаВторичного Тогда
		Результат = СтрЗаменить(Результат, НСтр("ru = ' к 1С-Отчетности'"), "");
		Результат = СтрЗаменить(Результат, НСтр("ru = ' на 1С-Отчетность'"), "");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ТекстПредупреждения(ИзменившиесяПараметрыПодключения)

	КоличествоОрганизаций = ИзменившиесяПараметрыПодключения.Количество();
	ПоддерживаютВторичные = 0;
	
	Для каждого ПараметрыОрганизации Из ИзменившиесяПараметрыПодключения Цикл
		Если ПараметрыОрганизации.ПоддерживаетсяОтправкаВторичногоЗаявления = Истина Тогда
			ПоддерживаютВторичные = ПоддерживаютВторичные + 1;
		КонецЕсли;
	КонецЦикла;
	
	НиктоНеПоддерживаетВторичные = ПоддерживаютВторичные = 0;
	ВсеПоддерживаютВторичные 	 = ПоддерживаютВторичные = КоличествоОрганизаций;
	
	Если НиктоНеПоддерживаетВторичные Тогда
		Результат = НСтр("ru = 'Сообщите об изменении настроек подключения в службу тех. поддержки оператор электронного документооборота.'");
	ИначеЕсли ВсеПоддерживаютВторичные Тогда
		Результат = НСтр("ru = 'Отправьте заявление на изменение настроек подключения к 1С-Отчетности из программы.'");
	Иначе 
		Результат = НСтр("ru = 'Сообщите об изменении настроек подключения в службу тех. поддержки оператора электронного документооборота или отправьте заявление из программы.'");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция КнопкаОтправкиЗаявление(ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи, НоваяСтрокаHTMLТаблицы, НомерСтроки)
	
	НачалоКнопки 		= СтрНайти(НоваяСтрокаHTMLТаблицы, "<!--НачалоКартинки-->");
	КонецКнопки 		= СтрНайти(НоваяСтрокаHTMLТаблицы, "<!--КонецКартинки-->");
	КодКартинкиКонопки 	= Сред(НоваяСтрокаHTMLТаблицы, НачалоКнопки, КонецКнопки - НачалоКнопки);
	
	НачалоНадписиБезбумажноеПродление = СтрНайти(НоваяСтрокаHTMLТаблицы, "<!--НачалоНадписьБезбумажноеПродление-->");
	КонецНадписиБезбумажноеПродление  = СтрНайти(НоваяСтрокаHTMLТаблицы, "<!--КонецНадписьБезбумажноеПродление-->");
	КодНадписиБезбумажноеПродление    = Сред(НоваяСтрокаHTMLТаблицы, НачалоНадписиБезбумажноеПродление, КонецНадписиБезбумажноеПродление - НачалоНадписиБезбумажноеПродление);

	
	КнопкаОтправкиЗаявление = "";

	ПоддерживаетсяОтправкаВторичногоЗаявления = ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.ПоддерживаетсяОтправкаВторичногоЗаявления;
	ВозможноБезбумажноеПродление = ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.ВозможноБезбумажноеПродление;
	
	Если ПоддерживаетсяОтправкаВторичногоЗаявления Тогда
		// Показываем гиперссылку на заявление, если оператор электронного документооборота поддерживает вторичные заявления
		КнопкаОтправкиЗаявление = "<A href=""&amp;ОтправкаЗаявленияНаИзменениеРеквизитовПодключения"
			+ Формат(НомерСтроки, "ЧН=0; ЧГ=") + "КонецСсылки"">" + КодКартинкиКонопки + "</A>";
	Иначе
		// Определяем текст надписи для случая, когда оператор электронного документооборота не поддерживает вторичные заявления
		СпецоператорСвязи = ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.УчетнаяЗаписьДокументооборота.СпецоператорСвязи;
		Если СпецоператорСвязи = Перечисления.СпецоператорыСвязи.Прочие Тогда
			// Если оператор электронного документооборота Прочий, тогда выводим 'Обратитесь к своему оператору электронного документооборота'
			КнопкаОтправкиЗаявление = "<FONT class=head2>" + НСтр("ru = 'Обратитесь к своему оператору электронного документооборота'") + "</FONT>";
		Иначе
			// Если оператор электронного документооборота конкретный, а не Прочий, тогда выводим 'Обратитесь к оператору электронного документооборота Калуга Астрал'
			КнопкаОтправкиЗаявление = НСтр("ru = 'Обратитесь к оператору электронного документооборота %1'");
			КнопкаОтправкиЗаявление = "<FONT class=head2>" + СтрЗаменить(КнопкаОтправкиЗаявление, "%1", СпецоператорСвязи) + "</FONT>";
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура("Кнопка, Надпись", КнопкаОтправкиЗаявление, ?(ВозможноБезбумажноеПродление, КодНадписиБезбумажноеПродление, "")); 
	
	Возврат Результат;
	
КонецФункции

Процедура ОпределитьДляКаждойОрганизацииВозможностьПоддержкиВторичныхЗаявлений(ИзменившиесяПараметрыПодключения)
	
	ИзменившиесяПараметрыПодключения.Колонки.Добавить("ПоддерживаетсяОтправкаВторичногоЗаявления");
	
	КоличествоОрганизаций = ИзменившиесяПараметрыПодключения.Количество();
	
	Для НомерСтроки = 1 По КоличествоОрганизаций Цикл
		
		ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи = ИзменившиесяПараметрыПодключения[НомерСтроки - 1];
		
		// Гиперссылка на заявление. Не показывается, если оператор электронного документооборота не поддерживает вторичные заявления
		СпецоператорСвязи = ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.УчетнаяЗаписьДокументооборота.СпецоператорСвязи;
		ПоддерживаетсяОтправкаВторичногоЗаявления = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(СпецоператорСвязи, "ПоддерживаетсяОтправкаВторичногоЗаявления");
		ИзменившиесяПараметрыПодключенияПоОднойУчетнойЗаписи.ПоддерживаетсяОтправкаВторичногоЗаявления = ПоддерживаетсяОтправкаВторичногоЗаявления = "Истина";
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстБезПереносов(Текст)
	
	Возврат "<nobr>" + Текст + "</nobr>";
	
КонецФункции

Функция ТекстВHTML(Текст) Экспорт
	
	Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Текст, "<", "&lt;"), ">", "&gt;"), """", "&quot;"), Символы.ПС, " &#13;&#10;");
	
КонецФункции

Функция ТекстЧерезСколькоЛетМесяцевНедельДней(ДатаОтсчета, ДатаЗавершения, ПрефиксЧисла, ПостфиксСуществительного) Экспорт
	
	Если ДатаЗавершения <= ДатаОтсчета Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ГодОтсчета = Год(ДатаОтсчета);
	МесяцОтсчета = Месяц(ДатаОтсчета);
	ДеньОтсчета = День(ДатаОтсчета);
	ЧасОтсчета = Час(ДатаОтсчета);
	МинутаОтсчета = Минута(ДатаОтсчета);
	СекундаОтсчета = Секунда(ДатаОтсчета);
	
	ГодЗавершения = Год(ДатаЗавершения);
	МесяцЗавершения = Месяц(ДатаЗавершения);
	ДеньЗавершения = День(ДатаЗавершения);
	ЧасЗавершения = Час(ДатаЗавершения);
	МинутаЗавершения = Минута(ДатаЗавершения);
	СекундаЗавершения = Секунда(ДатаЗавершения);
	
	РазницаВГодах = ГодЗавершения - ГодОтсчета;
	РазницаВМесяцах = МесяцЗавершения - МесяцОтсчета;
	РазницаВДнях = ДеньЗавершения - ДеньОтсчета;
	РазницаВЧасах = ЧасЗавершения - ЧасОтсчета;
	РазницаВМинутах = МинутаЗавершения - МинутаОтсчета;
	РазницаВСекундах = СекундаЗавершения - СекундаОтсчета;
	
	Если РазницаВСекундах < 0 Тогда
		РазницаВМинутах = РазницаВМинутах - 1;
		РазницаВСекундах = РазницаВСекундах + 60;
	КонецЕсли;
	
	Если РазницаВМинутах < 0 Тогда
		РазницаВЧасах = РазницаВЧасах - 1;
		РазницаВМинутах = РазницаВМинутах + 60;
	КонецЕсли;
	
	Если РазницаВЧасах < 0 Тогда
		РазницаВДнях = РазницаВДнях - 1;
		РазницаВЧасах = РазницаВЧасах + 24;
	КонецЕсли;
	
	Если РазницаВДнях < 0 Тогда
		
		РазницаВМесяцах = РазницаВМесяцах - 1;
		Если МесяцЗавершения = 3 Тогда
			// берем год отсчета, в который существуют все дни месяца, например, с 29.02.2008 по 1.03.2009
			// прошло 1 год 1 день: c 29.02.2008 по 1.03.2008 прошел 1 день, далее 1 год
			Если (ГодОтсчета % 4 = 0) И ((ГодОтсчета % 100 <> 0) ИЛИ (ГодОтсчета % 400 = 0)) Тогда
				РазницаВДнях = РазницаВДнях + 29;
			Иначе
				РазницаВДнях = РазницаВДнях + 28;
			КонецЕсли;
			
		ИначеЕсли (МесяцЗавершения = 5) ИЛИ (МесяцЗавершения = 7) ИЛИ (МесяцЗавершения = 10)
			ИЛИ (МесяцЗавершения = 12) Тогда
			РазницаВДнях = РазницаВДнях + 30;
			
		Иначе
			РазницаВДнях = РазницаВДнях + 31;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РазницаВМесяцах < 0 Тогда
		РазницаВМесяцах = РазницаВМесяцах + 12;
		РазницаВГодах = РазницаВГодах - 1;
	КонецЕсли;
	РазницаВНеделях = Цел(РазницаВДнях / 7);
	РазницаВДнях = РазницаВДнях % 7;
	
	Результат = "";
	Если РазницаВГодах > 0 Тогда
		Результат = ПрефиксЧисла + ЧислоССуществительным(РазницаВГодах, НСтр("ru='год'"), НСтр("ru='года'"), НСтр("ru='лет'")) + ПостфиксСуществительного;
	КонецЕсли;
	
	Если РазницаВМесяцах > 0 Тогда
		НомерМесяца = ЧислоССуществительным(РазницаВМесяцах, НСтр("ru='месяц'"), НСтр("ru='месяца'"), НСтр("ru='месяцев'"));
		Разделитель = ?(РазницаВНеделях = 0 И РазницаВДнях = 0, " " + НСтр("ru='и'") + " ", ", ");
		Результат = СоединитьЧерез(Результат, Разделитель, ПрефиксЧисла + НомерМесяца + ПостфиксСуществительного);
	КонецЕсли;
	
	Если РазницаВНеделях > 0 Тогда
		НомерНедели = ЧислоССуществительным(РазницаВНеделях, НСтр("ru='неделю'"), НСтр("ru='недели'"), НСтр("ru='недель'"));
		Разделитель = ?(РазницаВДнях = 0, " " + НСтр("ru='и'") + " ", ", ");
		Результат = СоединитьЧерез(Результат, Разделитель, ПрефиксЧисла + НомерНедели + ПостфиксСуществительного);
	КонецЕсли;
	
	Если РазницаВДнях > 0 Тогда
		НомерДня = ЧислоССуществительным(РазницаВДнях, НСтр("ru='день'"), НСтр("ru='дня'"), НСтр("ru='дней'"));
		Результат = СоединитьЧерез(Результат, " " + НСтр("ru='и'") + " ", ПрефиксЧисла + НомерДня + ПостфиксСуществительного);
	ИначеЕсли (РазницаВДнях = 0) И (Результат = "") Тогда
		
		Если (РазницаВЧасах > 0) ИЛИ (РазницаВМинутах > 0) Тогда
			Если РазницаВЧасах > 0 Тогда
				НомерЧаса = ЧислоССуществительным(РазницаВЧасах, НСтр("ru='час'"), НСтр("ru='часа'"), НСтр("ru='часов'"));
				Результат = ПрефиксЧисла + НомерЧаса + ПостфиксСуществительного;
			КонецЕсли;
			Если РазницаВМинутах > 0 Тогда
				НомерМинуты = ЧислоССуществительным(РазницаВМинутах, НСтр("ru='минуту'"), НСтр("ru='минуты'"), НСтр("ru='минут'"));
				Результат = СоединитьЧерез(Результат, " " + НСтр("ru='и'") + " ", ПрефиксЧисла + НомерМинуты + ПостфиксСуществительного);
			КонецЕсли;
		Иначе
			НомерСекунды = ЧислоССуществительным(РазницаВСекундах, НСтр("ru='секунду'"), НСтр("ru='секунды'"), НСтр("ru='секунд'"));
			Результат = ПрефиксЧисла + НомерСекунды + ПостфиксСуществительного;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЧислоССуществительным(Количество, ИменительныйИлиВинительныйПадежЕдинственноеЧисло, РодительныйПадежЕдинственноеЧисло, РодительныйПадежМножественноеЧисло)
	
	ОстатокДеленияКоличестваНа100 = Количество % 100;
	ОстатокДеленияКоличестваНа10 = Количество % 10;
	
	Если (ОстатокДеленияКоличестваНа10 = 1) И (ОстатокДеленияКоличестваНа100 <> 11) Тогда
		Возврат Строка(Количество) + " " + ИменительныйИлиВинительныйПадежЕдинственноеЧисло;
		
	ИначеЕсли (ОстатокДеленияКоличестваНа10 >= 2) И (ОстатокДеленияКоличестваНа10 <= 4) И ((ОстатокДеленияКоличестваНа100 < 12) ИЛИ (ОстатокДеленияКоличестваНа100 > 14)) Тогда
		Возврат Строка(Количество) + " " + РодительныйПадежЕдинственноеЧисло;
		
	Иначе
		Возврат Строка(Количество) + " " + РодительныйПадежМножественноеЧисло;
	КонецЕсли;
	
КонецФункции

Функция СоединитьЧерез(Строка1, Разделитель, Строка2)
	
	Если ПустаяСтрока(Строка(Строка1)) Тогда
		Возврат Строка2;
	ИначеЕсли ПустаяСтрока(Строка(Строка2)) Тогда
		Возврат Строка1;
	Иначе
		Возврат Строка1 + Разделитель + Строка2;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьВТаблицуСписокИзменившихсяРеквизитовПодключенияК1СОтчетности(ИзменившиесяРеквизитыОрганизации) Экспорт
	
	Организация = ИзменившиесяРеквизитыОрганизации.Организация;
	УчетнаяЗапись = ИзменившиесяРеквизитыОрганизации.УчетнаяЗаписьДокументооборота;
	
	ДанныеЗаполнения = Неопределено;
	
	// Заполняем текущие реквизиты организации 
	СтруктураРеквизитов = Новый Структура("Организация, ПриОткрытии", Организация, НЕ ДанныеЗаполнения = Неопределено);
	Если ДанныеЗаполнения <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("АдресЮридический",);
		СтруктураРеквизитов.Вставить("АдресФактический",);
	КонецЕсли;
	ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
	ДанныеЗаполнения = ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
	ДанныеОрганизации = ДанныеЗаполнения.СтруктураДанныхОрганизации;
	
	// Получаем реквизиты организации
	Руководитель	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
	ГлБухгалтер		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
	
	ЭтоЮридическоеЛицо		 = ДанныеОрганизации.ТипОрганизации;
	ПолноеНаименование		 = ДанныеОрганизации.НаимЮЛПол;
	КраткоеНаименование		 = ДанныеОрганизации.КраткоеНаименование;
	ИНН						 = ДанныеОрганизации.ИННЮЛ;
	КПП						 = ДанныеОрганизации.КППЮЛ;
	ОГРН					 = ДанныеОрганизации.ОГРН;
	РегНомерПФР				 = ДанныеОрганизации.РегНомПФР;
	РегНомерФСС				 = ДанныеОрганизации.РегистрационныйНомерФСС;
	ТелефонОсновной			 = ДанныеОрганизации.ТелОрганизации;
	ТелефонДополнительный	 = ДанныеОрганизации.ТелРук;
	АдрЮР					 = ДанныеЗаполнения.АдресЮридический;
	АдрФакт				 	 = ДанныеЗаполнения.АдресФактический;
	АдресЮридический		 = ДанныеЗаполнения.ЮрАдрес;
	АдресФактический		 = ДанныеЗаполнения.ФактАдрес;
	
	Если АдресЮридический = ",,,,,,,,," Тогда
		АдресЮридический = "";
	КонецЕсли;
	
	Если АдресФактический = ",,,,,,,,," Тогда
		АдресФактический = "";
	КонецЕсли;
	
	ЭлектроннаяПочтаИсходная = ДанныеОрганизации.ЭлектроннаяПочта;
	КодРегионаФСРАР = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(АдрЮр).Регион;
	
	КодПФР = КодПФР(ДанныеОрганизации);
	
	// Оператор электронного документооборота
	ОператорПоддерживаетСМСУведомление = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(УчетнаяЗапись.СпецоператорСвязи, "ПризнакПоддержкиСМС") = "Истина";
	Спецоператор = УчетнаяЗапись.СпецоператорСвязи;
	
	// Определяем исходные параметры подключенния к 1С-Отчетности
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТипКриптопровайдера,
		|	ДополнительныеРеквизитыУчетнойЗаписи.НомерОсновнойПоставки1с,
		|	ДополнительныеРеквизитыУчетнойЗаписи.КраткоеНаименование,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ПолноеНаименование,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ИНН,
		|	ДополнительныеРеквизитыУчетнойЗаписи.КПП,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ОГРН,
		|	ДополнительныеРеквизитыУчетнойЗаписи.РегНомерПФР,
		|	ДополнительныеРеквизитыУчетнойЗаписи.РегНомерФСС,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ЭлектроннаяПочта,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПФамилия,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПИмя,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПОтчество,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦППодразделение,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПСНИЛС,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПДолжность,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТелефонМобильный,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТелефонОсновной,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТелефонДополнительный,
		|	ДополнительныеРеквизитыУчетнойЗаписи.КодРегионаФСРАР
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписи КАК ДополнительныеРеквизитыУчетнойЗаписи
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписи.УчетнаяЗапись = &УчетнаяЗапись";

	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	ДополнительныеРеквизитыУчетнойЗаписи = Запрос.Выполнить().Выгрузить();
	
	Если ДополнительныеРеквизитыУчетнойЗаписи.Количество() > 0 Тогда
		ТипКриптопровайдераИсходный 		= ДополнительныеРеквизитыУчетнойЗаписи[0].ТипКриптопровайдера;
		КраткоеНаименованиеИсходное 		= ДополнительныеРеквизитыУчетнойЗаписи[0].КраткоеНаименование;
		ПолноеНаименованиеИсходное 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ПолноеНаименование;
		КППИсходный 						= ДополнительныеРеквизитыУчетнойЗаписи[0].КПП;
		ОГРНИсходный 						= ДополнительныеРеквизитыУчетнойЗаписи[0].ОГРН;
		РегНомерПФРИсходный 				= ДополнительныеРеквизитыУчетнойЗаписи[0].РегНомерПФР;
		РегНомерФССИсходный 				= ДополнительныеРеквизитыУчетнойЗаписи[0].РегНомерФСС;
		ЭлектроннаяПочтаИсходная 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ЭлектроннаяПочта;
		ВладелецЭЦПФамилияИсходный 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПФамилия;
		ВладелецЭЦПИмяИсходный 				= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПИмя;
		ВладелецЭЦПОтчествоИсходный 		= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПОтчество;
		ВладелецЭЦППодразделениеИсходное 	= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦППодразделение;
		ВладелецЭЦПСНИЛСИсходный 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПСНИЛС;
		ВладелецЭЦПДолжностьИсходная 		= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПДолжность;
		ТелефонОсновнойИсходный 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ТелефонОсновной;
		ТелефонДополнительныйИсходный 		= ДополнительныеРеквизитыУчетнойЗаписи[0].ТелефонДополнительный;
		КодРегионаФСРАРИсходный 			= ДополнительныеРеквизитыУчетнойЗаписи[0].КодРегионаФСРАР;
	Иначе
		// Если в регистре ДополнительныеРеквизитыУчетнойЗаписи ничего нет, то расхождения реквизитов найти невозможно
		ИзменившиесяРеквизитыОрганизации.СписокИзменившихсяРеквизитов = Неопределено;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.ТипПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КодПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КПП
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписиПолучатели КАК ДополнительныеРеквизитыУчетнойЗаписиПолучатели
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.УчетнаяЗапись = &УчетнаяЗапись";

	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Результат = Запрос.Выполнить().Выгрузить();
	
	// Направляения сдачи отчетности и коды
	СдаватьВФССИсходный 	= Ложь;
	СдаватьВФСРАРИсходный 	= Ложь;
	СдаватьВРПНИсходный 	= Ложь;
	СдаватьВФТСИсходный 	= Ложь;
	СдаватьВПФРИсходный 	= Ложь;
	КодПФРИсходный 			= "";
	СдаватьВРосстатИсходный = Ложь;
	
	Для Каждого СтрокаНаправлений Из Результат Цикл
		Если СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			СдаватьВПФРИсходный = Истина;
			КодПФРИсходный = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтрокаНаправлений.КодПолучателя);
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			СдаватьВФССИсходный = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
			СдаватьВФСРАРИсходный = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
			СдаватьВРПНИсходный = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФТС Тогда
			СдаватьВФТСИсходный = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Если не удалось определить тип владельца ЭЦП из-за того что не был доступен сертификат, то 
	// пытаемся определить тип исходя из ФИО
	СтруктураФИОРуководителя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(Руководитель);
	СтруктураФИОГлБухгалтер = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(ГлБухгалтер);
	// Сравниваем с ФИО руководителя
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтруктураФИОРуководителя.Имя) 
			= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПИмяИсходный) 
		И ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтруктураФИОРуководителя.Отчество) 
			= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПОтчествоИсходный)
		И ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтруктураФИОРуководителя.Фамилия) 
			= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПФамилияИсходный) Тогда
		ВладелецЭЦПТипИсходный = 1;
	// Сравниваем с ФИО бухгалтера
	ИначеЕсли ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтруктураФИОГлБухгалтер.Имя) 
			= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПИмяИсходный)
		И ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтруктураФИОГлБухгалтер.Отчество) 
			= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПОтчествоИсходный)
		И ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтруктураФИОГлБухгалтер.Фамилия) 
			= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПФамилияИсходный) Тогда
		ВладелецЭЦПТипИсходный = 2;
	Иначе
		// Если владелец ЭЦП не руководитель и не бухгалтер, то мы можем найти его только по ФИО 
		ВладелецЭЦПИсходный = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ФизЛицоПоФИО(
			ВладелецЭЦПФамилияИсходный, ВладелецЭЦПИмяИсходный, ВладелецЭЦПОтчествоИсходный, ВладелецЭЦПСНИЛСИсходный, Организация);

		СотрудникВыборИсходный  = ВладелецЭЦПИсходный;
		СотрудникВыбор 			= СотрудникВыборИсходный;
		
		ВладелецЭЦПТипИсходный = 3;
	КонецЕсли; 
	
	ВладелецЭЦП = Неопределено;
	
	Если ВладелецЭЦПТипИсходный = 1 Тогда
		ВладелецЭЦП     = Руководитель;
		ВидВладельцаЭЦП = Перечисления.ТипыВладельцевЭЦП.Руководитель;
	ИначеЕсли ВладелецЭЦПТипИсходный = 2 Тогда
		ВладелецЭЦП     = ГлБухгалтер;
		ВидВладельцаЭЦП = Перечисления.ТипыВладельцевЭЦП.ГлавныйБухгалтер;
	ИначеЕсли ВладелецЭЦПТипИсходный = 3 Тогда
		ВладелецЭЦП     = СотрудникВыбор;
		ВидВладельцаЭЦП = Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник;
	КонецЕсли;
	
 	ДанныеОрганизации.Вставить("Организация", Организация);
	
	ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьДанныеСотрудника(
		ВидВладельцаЭЦП, 
		ДанныеОрганизации, 
		ВладелецЭЦП);
	
	ВладелецЭЦПИмя					= ДанныеСотрудника.ФИО.Имя;
	ВладелецЭЦПФамилия				= ДанныеСотрудника.ФИО.Фамилия;
	ВладелецЭЦПОтчество				= ДанныеСотрудника.ФИО.Отчество;
	ВладелецЭЦПДолжность           	= ДанныеСотрудника.Должность;
	ВладелецЭЦППодразделение       	= ДанныеСотрудника.Подразделение;
	ВладелецЭЦПСНИЛС			   	= ДанныеСотрудника.СНИЛС;
	
	ВладелецЭЦПИсходныйНайден = ВладелецЭЦПИсходный <> ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	
	// Сравниваем исходные и текущие параметры подключения к 1С-Отчетности
	// Изменился ли владелец ЭЦП ?
	//
	ВладелецЭЦПИзменился = ((ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПФамилия) 
								<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПФамилияИсходный) 
							ИЛИ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПИмя) 
								<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПИмяИсходный) 
							ИЛИ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПОтчество) 
								<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПОтчествоИсходный)))
							И ВладелецЭЦПИсходныйНайден;// если в базе не найден владелец - значит говорим, что он не изменился
	ВладелецЭЦПИзменился = Ложь; // для целей предупреждения временно не отслеживаем
	
	// Изменились ли реквизиты подключения к 1С-Отчетности ?
	//
	// Краткое наименование
	КраткоеНаименованиеИзменилось = Ложь;// для целей предупреждения не отслеживаем
	
	// Полное наименование
	ПолноеНаименованиеИзменилось = Ложь;// для целей предупреждения не отслеживаем
	
	// КПП
	КППИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КПП) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КППИсходный) И ЗначениеЗаполнено(КПП);
	
	// ОГРН
	ОГРНИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ОГРН) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ОГРНИсходный) И ЗначениеЗаполнено(СтрокаБезДефисов(ОГРН));
	
	// Регистрационный номер в ПФР
	РегНомерПФРИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(РегНомерПФР) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(РегНомерПФРИсходный) 
		И СдаватьВПФРИсходный И ЗначениеЗаполнено(СтрокаБезДефисов(РегНомерПФР));
	
	// Регистрационный номер в ФСС
	РегНомерФССИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(РегНомерФСС) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(РегНомерФССИсходный) 
		И СдаватьВФССИсходный И ЗначениеЗаполнено(СтрокаБезДефисов(РегНомерФСС));
	
	// Регион
	КодРегионаФСРАРИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КодРегионаФСРАРИсходный) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КодРегионаФСРАР) 
		И СдаватьВФСРАРИсходный И ЗначениеЗаполнено(КодРегионаФСРАР) И ЗначениеЗаполнено(КодРегионаФСРАРИсходный);
	
	// Электронная почта
	ЭлектроннаяПочтаИзменилась = Ложь; // для целей предупреждения не отслеживаем
	
	// Телефон основной
	ТелефонОсновнойИзменился = Ложь;// для целей предупреждения не отслеживаем
	
	// Телефон дополнительный
	ТелефонДополнительныйИзменился = Ложь;// для целей предупреждения не отслеживаем
	
	// Сведения о сотруднике - владельце электронной подписи
	
	// Подразделение
	ВладелецЭЦППодразделениеИзменилось = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦППодразделение) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦППодразделениеИсходное) И ВладелецЭЦПИсходныйНайден
		И ЗначениеЗаполнено(ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦППодразделение));
	ВладелецЭЦППодразделениеИзменилось = Ложь; // для целей предупреждения временно не отслеживаем
	
	// Должность
	ВладелецЭЦПДолжностьИзменилась = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПДолжность) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПДолжностьИсходная) И ВладелецЭЦПИсходныйНайден
		И ЗначениеЗаполнено(ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПДолжность));
	ВладелецЭЦПДолжностьИзменилась = Ложь; // для целей предупреждения временно не отслеживаем
	
	// СНИЛС
	ВладелецЭЦПСНИЛСИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПСНИЛС) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПСНИЛСИсходный)
		И ВладелецЭЦПИсходныйНайден // владельца ЭЦП удалось определить
		И ЗначениеЗаполнено(СтрокаБезДефисов(ВладелецЭЦПСНИЛС))// СНИЛС не пустой
		И ВладелецЭЦПСНИЛС <> "000-000-000 00" // СНИЛС не нулевой
		И (ВладелецЭЦПТипИсходный = 1 ИЛИ ВладелецЭЦПТипИсходный = 2); // это бухгалтер или директор
	ВладелецЭЦПСНИЛСИзменился = Ложь; // для целей предупреждения временно не отслеживаем
	
	// КодПФР
	КодПФРИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КодПФР) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КодПФРИсходный) 
		И СдаватьВПФРИсходный И ЗначениеЗаполнено(СтрокаБезДефисов(КодПФР));
	
	// Добавляем измененные реквизиты в список
	//
	СписокИзменившихсяРеквизитов = Новый СписокЗначений;
	
	// Краткое наименование
	ДобавитьРеквизитВСписокИзменившихсяРеквизитов(КраткоеНаименованиеИзменилось, СписокИзменившихсяРеквизитов,
		Перечисления.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование);
	
	// Полное наименование
	ДобавитьРеквизитВСписокИзменившихсяРеквизитов(ПолноеНаименованиеИзменилось, СписокИзменившихсяРеквизитов,  
		Перечисления.ПараметрыПодключенияК1СОтчетности.ПолноеНаименование);
	
	// КПП
	ДобавитьРеквизитВСписокИзменившихсяРеквизитов(КППИзменился, СписокИзменившихсяРеквизитов,  
		Перечисления.ПараметрыПодключенияК1СОтчетности.КПП);
	
	// ОГРН
	ДобавитьРеквизитВСписокИзменившихсяРеквизитов(ОГРНИзменился, СписокИзменившихсяРеквизитов,  
		Перечисления.ПараметрыПодключенияК1СОтчетности.ОГРН);
	
	// Регистрационный номер в ПФР
	ДобавитьРеквизитВСписокИзменившихсяРеквизитов(РегНомерПФРИзменился, СписокИзменившихсяРеквизитов,  
		Перечисления.ПараметрыПодключенияК1СОтчетности.РегНомерПФР);
	
	// Регистрационный номер в ФСС
	ДобавитьРеквизитВСписокИзменившихсяРеквизитов(РегНомерФССИзменился, СписокИзменившихсяРеквизитов,  
		Перечисления.ПараметрыПодключенияК1СОтчетности.РегНомерФСС);
	
	// Регион
	ДобавитьРеквизитВСписокИзменившихсяРеквизитов(КодРегионаФСРАРИзменился, СписокИзменившихсяРеквизитов,  
		Перечисления.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР);
	
	// Электронная почта
	ДобавитьРеквизитВСписокИзменившихсяРеквизитов(ЭлектроннаяПочтаИзменилась, СписокИзменившихсяРеквизитов,  
		Перечисления.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта);
		
	// Телефон основной
	ДобавитьРеквизитВСписокИзменившихсяРеквизитов(ТелефонОсновнойИзменился, СписокИзменившихсяРеквизитов,  
		Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной);
		
	// КодПФР
	ДобавитьРеквизитВСписокИзменившихсяРеквизитов(КодПФРИзменился, СписокИзменившихсяРеквизитов,  
		Перечисления.ПараметрыПодключенияК1СОтчетности.КодПФР);
		
	// Сведения о сотруднике - владельце электронной подписи
	
	// Владелец ЭЦП
    Если ВладелецЭЦПИзменился Тогда
		ДобавитьРеквизитВСписокИзменившихсяРеквизитов(ВладелецЭЦПИзменился, СписокИзменившихсяРеквизитов,  
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП);
	КонецЕсли;
	
	// Подразделение
	ДобавитьРеквизитВСписокИзменившихсяРеквизитов(ВладелецЭЦППодразделениеИзменилось, СписокИзменившихсяРеквизитов,  
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППодразделение);
	
	// Должность
	ДобавитьРеквизитВСписокИзменившихсяРеквизитов(ВладелецЭЦПДолжностьИзменилась, СписокИзменившихсяРеквизитов,  
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность);
	
	// СНИЛС
	ДобавитьРеквизитВСписокИзменившихсяРеквизитов(ВладелецЭЦПСНИЛСИзменился, СписокИзменившихсяРеквизитов,  
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС);
		
	Если НЕ ВладелецЭЦПИзменился Тогда
		
		Отпечаток = ИзменившиесяРеквизитыОрганизации.УчетнаяЗаписьДокументооборота.СертификатРуководителя;
		Сертификат = Новый Структура("Отпечаток", Отпечаток);
		
		ФИО = Новый Массив; 
		ФИО.Добавить(ВладелецЭЦПФамилия);
		ФИО.Добавить(ВладелецЭЦПИмя);
		ФИО.Добавить(ВладелецЭЦПОтчество);
		
		ФИО = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ФИО, " ", Истина);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ФИО",   		ФИО);
		ДополнительныеПараметры.Вставить("ИНН",   		ИНН);
		ДополнительныеПараметры.Вставить("СНИЛС", 		ВладелецЭЦПСНИЛС);
		ДополнительныеПараметры.Вставить("Сертификат",  Сертификат);
		
		ИзменившиесяРеквизитыОрганизации.СведенияДляБезбумажногоПродления = ДополнительныеПараметры;
		
	КонецЕсли;
		
	Если СписокИзменившихсяРеквизитов.Количество() = 0 Тогда
		ИзменившиесяРеквизитыОрганизации.СписокИзменившихсяРеквизитов = Неопределено;
	Иначе
		ИзменившиесяРеквизитыОрганизации.СписокИзменившихсяРеквизитов = СписокИзменившихсяРеквизитов;
	КонецЕсли;

КонецПроцедуры

Функция СтрокаБезДефисов(Текст) Экспорт
	
	Возврат СтрЗаменить(Текст, "-", "");
	
КонецФункции

Функция КодПФР(РеквизитыОрганизации)
	
	ПолученыйКодПФР = "";
	
	Если ПустаяСтрока(РеквизитыОрганизации.КодОрганаПФР) ИЛИ СтрДлина(РеквизитыОрганизации.КодОрганаПФР) < 7 Тогда
		ПолученыйКодПФР = Лев(РеквизитыОрганизации.КодОрганаПФР,7); 
	Иначе
		ПолученыйКодПФР = РеквизитыОрганизации.КодОрганаПФР;
	КонецЕсли;
	
	Возврат ПолученыйКодПФР;
	
КонецФункции

Функция ПредставлениеИзменившихсяРеквизитов(СписокИзменившихсяРеквизитов) Экспорт
	
	Если СписокИзменившихсяРеквизитов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИзмененныеРеквизиты = "";
	
	// Краткое наименование
	ДобавитьРеквизитКСтроке(Перечисления.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование, СписокИзменившихсяРеквизитов, ИзмененныеРеквизиты);
	
	// Полное наименование
	ДобавитьРеквизитКСтроке(Перечисления.ПараметрыПодключенияК1СОтчетности.ПолноеНаименование, СписокИзменившихсяРеквизитов, ИзмененныеРеквизиты);
	
	// КПП
	ДобавитьРеквизитКСтроке(Перечисления.ПараметрыПодключенияК1СОтчетности.КПП, СписокИзменившихсяРеквизитов, ИзмененныеРеквизиты);
	
	// ОГРН
	ДобавитьРеквизитКСтроке(Перечисления.ПараметрыПодключенияК1СОтчетности.ОГРН, СписокИзменившихсяРеквизитов, ИзмененныеРеквизиты);
	
	// Регистрационный номер в ПФР
	ДобавитьРеквизитКСтроке(Перечисления.ПараметрыПодключенияК1СОтчетности.РегНомерПФР, СписокИзменившихсяРеквизитов, ИзмененныеРеквизиты);
	
	// Регистрационный номер в ФСС
	ДобавитьРеквизитКСтроке(Перечисления.ПараметрыПодключенияК1СОтчетности.РегНомерФСС, СписокИзменившихсяРеквизитов, ИзмененныеРеквизиты);
	
	// Регион
	ДобавитьРеквизитКСтроке(Перечисления.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР, СписокИзменившихсяРеквизитов, ИзмененныеРеквизиты);
	
	// Электронная почта
	ДобавитьРеквизитКСтроке(Перечисления.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта, СписокИзменившихсяРеквизитов, ИзмененныеРеквизиты);
	
	// КодПФР
	ДобавитьРеквизитКСтроке(Перечисления.ПараметрыПодключенияК1СОтчетности.КодПФР, СписокИзменившихсяРеквизитов, ИзмененныеРеквизиты);
	
	// КодРосстата
	ДобавитьРеквизитКСтроке(Перечисления.ПараметрыПодключенияК1СОтчетности.КодРосстата, СписокИзменившихсяРеквизитов, ИзмененныеРеквизиты);
	
	Если НЕ ПустаяСтрока(ИзмененныеРеквизиты) Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + НСтр("ru = ' организации'");
	КонецЕсли;
	
	// Сведения о сотруднике - владельце электронной подписи
	
	// Владелец ЭЦП
	ДобавитьРеквизитКСтроке(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП, СписокИзменившихсяРеквизитов, ИзмененныеРеквизиты);
		
	// Должность
	ДобавитьРеквизитКСтроке(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность, СписокИзменившихсяРеквизитов, ИзмененныеРеквизиты);
	
	// СНИЛС
	ДобавитьРеквизитКСтроке(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС, СписокИзменившихсяРеквизитов, ИзмененныеРеквизиты);
		
	ВладелецЭЦПДолжностьИзменилась = СписокИзменившихсяРеквизитов.НайтиПоЗначению(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность) <> Неопределено;
	ВладелецЭЦПСНИЛСИзменился = СписокИзменившихсяРеквизитов.НайтиПоЗначению(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС) <> Неопределено;
	
	Если ВладелецЭЦПДолжностьИзменилась ИЛИ ВладелецЭЦПСНИЛСИзменился Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + НСтр("ru = ' сотрудника-владельца ЭП'");
	КонецЕсли;
	
	ЗаменитьЗапятуюНаИВСтроке(ИзмененныеРеквизиты);
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

Процедура ДобавитьРеквизитВСписокИзменившихсяРеквизитов(РеквизитИзменился, СписокИзменившихсяРеквизитов, Перечисление)
	
	РеквизитыНеХранящиесяВБазе = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.РеквизитыНеХранящиесяВБазе();
	
	РеквизитЕстьВСправочникеОрганизации = РеквизитыНеХранящиесяВБазе.Найти(Перечисление) = Неопределено;
	
	Если РеквизитИзменился И РеквизитЕстьВСправочникеОрганизации Тогда
		СписокИзменившихсяРеквизитов.Добавить(Перечисление);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитКСтроке(Перечисление, СписокИзменившихсяРеквизитов, ИзмененныеРеквизиты) Экспорт
	
	НазваниеРеквизита = Строка(Перечисление);
	
	// Делаем так, чтобы все слова начинались с маленькой буквы
	// Если вторая буква большая, то считаем что слово целиком состоит из больших букв (например ИНН) и не переводим это слово в нижний регистр
	Если Сред(НазваниеРеквизита, 2, 1) <> Врег(Сред(НазваниеРеквизита, 2, 1)) Тогда
		НазваниеРеквизита = НРег(Лев(НазваниеРеквизита, 1)) + Сред(НазваниеРеквизита, 2);
	КонецЕсли;

	РеквизитИзменился = СписокИзменившихсяРеквизитов.НайтиПоЗначению(Перечисление) <> Неопределено;
	
	Если РеквизитИзменился Тогда
		Если ИзмененныеРеквизиты = "" Тогда
			ИзмененныеРеквизиты = НазваниеРеквизита;
		Иначе
			ИзмененныеРеквизиты = ИзмененныеРеквизиты + "%1" + НазваниеРеквизита;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьЗапятуюНаИВСтроке(ИзмененныеРеквизиты) Экспорт

	// В списке реквизитов заменяем последнюю запятую на букву "и"
	Если СтрЧислоВхождений(ИзмененныеРеквизиты, "%1") = 1 Тогда
		ИзмененныеРеквизиты = СтрЗаменить(ИзмененныеРеквизиты, "%1", " и ");
	ИначеЕсли СтрЧислоВхождений(ИзмененныеРеквизиты, "%1") > 1 Тогда
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмененныеРеквизиты, "%1");
		ПоследнийЭлементМассива = МассивПодстрок[МассивПодстрок.Количество() - 1];
		ИзмененныеРеквизиты = СтрЗаменить(ИзмененныеРеквизиты, "%1" + ПоследнийЭлементМассива, " и " + ПоследнийЭлементМассива);
	КонецЕсли;
	ИзмененныеРеквизиты = СтрЗаменить(ИзмененныеРеквизиты, "%1", ", ");

КонецПроцедуры

Функция ПолучитьТипИсполнителя(Тип) Экспорт
	
	Если Тип = Перечисления.ТипыВладельцевЭЦП.Руководитель Тогда
		ТипИсполнителя = 1;
	ИначеЕсли Тип = Перечисления.ТипыВладельцевЭЦП.ГлавныйБухгалтер Тогда
		ТипИсполнителя = 2;
	ИначеЕсли Тип = Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник Тогда
		ТипИсполнителя = 3;
	Иначе
		ТипИсполнителя = 0;
	КонецЕсли;
	
	Возврат ТипИсполнителя;
КонецФункции

Функция ПолучитьТипВладельцаЭЦП(Тип) Экспорт
	
	Если Тип = 1 Тогда
		ТипИсполнителя = Перечисления.ТипыВладельцевЭЦП.Руководитель;
	ИначеЕсли Тип = 2 Тогда
		ТипИсполнителя = Перечисления.ТипыВладельцевЭЦП.ГлавныйБухгалтер;
	Иначе
		ТипИсполнителя = Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник;
	КонецЕсли;
	
	Возврат ТипИсполнителя;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрокКлиент(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Позиция = СтрНайти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМакетОбработки(ИмяМакета)  Экспорт
	
	ОбработкаЭДО = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат ОбработкаЭДО.ПолучитьМакет(ИмяМакета);
	
КонецФункции

Функция КодРегионаИзАдреса(Знач Адрес)
	
	Если ТипЗнч(Адрес) <> Тип("Структура") Тогда
		Адрес = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Адрес);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Адрес.Регион) Тогда
		Возврат "";
	КонецЕсли;
	
	МакетРегионы = ПолучитьМакетОбработки("Регионы");
	нрегАдресРегион = нрег(Адрес.Регион);
	Для Инд = 1 По МакетРегионы.ВысотаТаблицы Цикл
		ТекРегион = СокрЛП(МакетРегионы.Область(Инд, 1, Инд, 1).Текст);
		Если Лев(нрегАдресРегион, СтрДлина(ТекРегион)) = нрег(ТекРегион) Тогда
			Возврат СокрЛП(МакетРегионы.Область(Инд, 2, Инд, 2).Текст);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(Адрес.Регион);
	
КонецФункции

Функция ПолучитьВидДокументаПоНаименованию(Знач Наименование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Наименование = Строка(Наименование);
	
	Результат = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		
		Результат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(
			"Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
		Возврат Результат;
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыДокументовФизическихЛиц.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
		|ГДЕ
		|	ВидыДокументовФизическихЛиц.Наименование = &Наименование
		|	И ВидыДокументовФизическихЛиц.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КодВидаДокумента = РегламентированнаяОтчетностьПереопределяемый.ПолучитьКодВидаДокументаФизическогоЛица(ВыборкаДетальныеЗаписи.Ссылка);
		Если ЗначениеЗаполнено(КодВидаДокумента) Тогда
			Результат = ВыборкаДетальныеЗаписи.Ссылка;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Нет видов документа с таким наименованием и заполненным кодом
	Если Результат = Неопределено И ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Результат = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию(Наименование, Ложь);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
	Иначе 	
		Возврат Результат;
	КонецЕсли;

КонецФункции

Функция ПолучитьНомерОсновнойПоставки1с() Экспорт
	
	НомерОсновнойПоставки1с = "";
	
	Возврат НомерОсновнойПоставки1с;
	
КонецФункции

Функция ПолучитьСпецоператоровСвязи()
	
	Запрос = Новый Запрос;
	Массив = Новый Массив();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпецоператорыСвязи.Ссылка
	|ИЗ
	|	Перечисление.СпецоператорыСвязи КАК СпецоператорыСвязи";
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СпецоператорыСвязи = Выборка.Ссылка;
			ИмяСпецоператорыСвязи = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьИмяЗначенияПеречисленияСпецоператорыСвязиПоСинониму(СпецоператорыСвязи);
			Массив.Добавить(Новый Структура("Ссылка,Имя", СпецоператорыСвязи, ИмяСпецоператорыСвязи));
		КонецЦикла;
	Исключение
		Массив = Неопределено;
	КонецПопытки;
	
	Возврат Массив;
	
КонецФункции

Функция ПросмотрМакета(ИмяМакета)
	ШаблонМакета = ПолучитьМакетОбработки(ИмяМакета);
	Макет = ШаблонМакета.ПолучитьТекст();
	Возврат Макет;
КонецФункции

Процедура СохранитьДатуНапоминанияДляИзменившихсяРеквизитов(ИзмененныеПараметрыПодключения, ДатаНапоминания) Экспорт
	
	// Получаем из хранилища общих настроек сведения по изменившимся реквизитам
	ДатыНапоминанийПоИзменившимсяРеквизитам = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_ДатыНапоминанийПоИзменившимсяРеквизитам");
	
	Если ДатыНапоминанийПоИзменившимсяРеквизитам = Неопределено Тогда
		
		ДатыНапоминанийПоИзменившимсяРеквизитам = Новый ТаблицаЗначений;
		ДатыНапоминанийПоИзменившимсяРеквизитам.Колонки.Добавить("Организация");
		ДатыНапоминанийПоИзменившимсяРеквизитам.Колонки.Добавить("УчетнаяЗапись");
		ДатыНапоминанийПоИзменившимсяРеквизитам.Колонки.Добавить("СписокИзменившихсяРеквизитов");
		ДатыНапоминанийПоИзменившимсяРеквизитам.Колонки.Добавить("ДатаНапоминания");
		
	КонецЕсли;
	
	// Если запись в хранилище общих настроек существует, то обновляем дату напоминания, иначе создаем новую запись 
	Для Каждого СтрокаИзмененныхПараметровПодключения Из ИзмененныеПараметрыПодключения Цикл
		Если ЗначениеЗаполнено(СтрокаИзмененныхПараметровПодключения.СписокИзменившихсяРеквизитов) Тогда
			
			// Ищем строки среди запомненных
			Отбор = Новый Структура; 
			Отбор.Вставить("Организация", СтрокаИзмененныхПараметровПодключения.Организация);
			Отбор.Вставить("УчетнаяЗапись", СтрокаИзмененныхПараметровПодключения.УчетнаяЗаписьДокументооборота);
			СтрокиДатыНапоминанияПоИзменившимсяРеквизитам = ДатыНапоминанийПоИзменившимсяРеквизитам.НайтиСтроки(Отбор);
			Если СтрокиДатыНапоминанияПоИзменившимсяРеквизитам.Количество() > 0 Тогда
				СтрокаДатыНапоминанияПоИзменившимсяРеквизитам = СтрокиДатыНапоминанияПоИзменившимсяРеквизитам[0];
				ДатаНапоминанияПоИзмененнымРеквизитам = СтрокаДатыНапоминанияПоИзменившимсяРеквизитам.ДатаНапоминания;
			Иначе
				СтрокаДатыНапоминанияПоИзменившимсяРеквизитам = Неопределено;
			КонецЕсли;

			// Заполнение данных в строке
			Если СтрокаДатыНапоминанияПоИзменившимсяРеквизитам = Неопределено Тогда
				СтрокаДатыНапоминанияПоИзменившимсяРеквизитам = ДатыНапоминанийПоИзменившимсяРеквизитам.Добавить();
				СтрокаДатыНапоминанияПоИзменившимсяРеквизитам.Организация = СтрокаИзмененныхПараметровПодключения.Организация;
				СтрокаДатыНапоминанияПоИзменившимсяРеквизитам.УчетнаяЗапись = СтрокаИзмененныхПараметровПодключения.УчетнаяЗаписьДокументооборота;
			КонецЕсли;
			СтрокаДатыНапоминанияПоИзменившимсяРеквизитам.СписокИзменившихсяРеквизитов = СтрокаИзмененныхПараметровПодключения.СписокИзменившихсяРеквизитов;
			СтрокаДатыНапоминанияПоИзменившимсяРеквизитам.ДатаНапоминания = ДатаНапоминания;
		КонецЕсли;
	КонецЦикла;
	
	// Если сейчас расхождений нет, но раньше были, то удаляем такие строки из запомненых 
	Счетчик = ИзмененныеПараметрыПодключения.Количество() - 1;
	Пока Счетчик >= 0 Цикл
		
		// Ищем строки среди запомненных
		Отбор = Новый Структура; 
		Отбор.Вставить("Организация", ИзмененныеПараметрыПодключения[Счетчик].Организация);
		Отбор.Вставить("УчетнаяЗапись", ИзмененныеПараметрыПодключения[Счетчик].УчетнаяЗаписьДокументооборота);
		СтрокиДатыНапоминанияПоИзменившимсяРеквизитам = ДатыНапоминанийПоИзменившимсяРеквизитам.НайтиСтроки(Отбор);
		Если СтрокиДатыНапоминанияПоИзменившимсяРеквизитам.Количество() > 0 Тогда
			СтрокаДатыНапоминанияПоИзменившимсяРеквизитам = СтрокиДатыНапоминанияПоИзменившимсяРеквизитам[0];
		Иначе
			СтрокаДатыНапоминанияПоИзменившимсяРеквизитам = Неопределено;
		КонецЕсли;
		
		// Удаляем лишние строки
		Если НЕ ЗначениеЗаполнено(ИзмененныеПараметрыПодключения[Счетчик].СписокИзменившихсяРеквизитов) // сейчас нет изменившихся реквизитов 
			И СтрокаДатыНапоминанияПоИзменившимсяРеквизитам <> Неопределено Тогда // раньше были изменившиеся реквизиты
			ДатыНапоминанийПоИзменившимсяРеквизитам.Удалить(СтрокаДатыНапоминанияПоИзменившимсяРеквизитам);
		КонецЕсли;
		Счетчик = Счетчик - 1;
	КонецЦикла;
	
	ХранилищеОбщихНастроек.Сохранить("ДокументооборотСКонтролирующимиОрганами_ДатыНапоминанийПоИзменившимсяРеквизитам", , ДатыНапоминанийПоИзменившимсяРеквизитам);
	
КонецПроцедуры

Процедура СохранитьДатуНапоминанияДляСертификатов(ИзмененныеПараметрыПодключения, ДатаНапоминания) Экспорт
	
	// Получаем из хранилища общих настроек сведения по сертификатам
	ДатыНапоминанийПоИстекающимСертификатам = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_НапоминаниеПоИстекающимСертификатам");
	Если ДатыНапоминанийПоИстекающимСертификатам = Неопределено Тогда
		ДатыНапоминанийПоИстекающимСертификатам = Новый ТаблицаЗначений;
		ДатыНапоминанийПоИстекающимСертификатам.Колонки.Добавить("Организация");
		ДатыНапоминанийПоИстекающимСертификатам.Колонки.Добавить("Отпечаток");
		ДатыНапоминанийПоИстекающимСертификатам.Колонки.Добавить("ДействителенПо");
		ДатыНапоминанийПоИстекающимСертификатам.Колонки.Добавить("ДатаНапоминания");
	КонецЕсли;
	
	// Если серификат найден в хранилище общих настроек, то обновляем дату напоминания, иначе создаем новую запись 
	Для Каждого ОтпечатокИстекающегоСертификата Из ИзмененныеПараметрыПодключения Цикл
		Если ЗначениеЗаполнено(ОтпечатокИстекающегоСертификата.ОтпечатокСертификата) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Организация", ОтпечатокИстекающегоСертификата.Организация);
			Отбор.Вставить("Отпечаток", ОтпечатокИстекающегоСертификата.ОтпечатокСертификата);
			СтрокиДатыНапоминанияПоИстекающемуСертификату = ДатыНапоминанийПоИстекающимСертификатам.НайтиСтроки(Отбор);
			
			Если СтрокиДатыНапоминанияПоИстекающемуСертификату.Количество() > 0 Тогда
				СтрокаДатыНапоминанияПоИстекающемуСертификату = СтрокиДатыНапоминанияПоИстекающемуСертификату[0];
				ДатаНапоминанияПоИстекающемуСертификату = СтрокаДатыНапоминанияПоИстекающемуСертификату.ДатаНапоминания;
			Иначе
				СтрокаДатыНапоминанияПоИстекающемуСертификату = Неопределено;
			КонецЕсли;
			
			Если СтрокаДатыНапоминанияПоИстекающемуСертификату = Неопределено Тогда
				СтрокаДатыНапоминанияПоИстекающемуСертификату = ДатыНапоминанийПоИстекающимСертификатам.Добавить();
				СтрокаДатыНапоминанияПоИстекающемуСертификату.Организация = ОтпечатокИстекающегоСертификата.Организация;
				СтрокаДатыНапоминанияПоИстекающемуСертификату.Отпечаток = ОтпечатокИстекающегоСертификата.ОтпечатокСертификата;
			КонецЕсли;
			СтрокаДатыНапоминанияПоИстекающемуСертификату.ДействителенПо = ОтпечатокИстекающегоСертификата.СертификатДействителенПо;
			СтрокаДатыНапоминанияПоИстекающемуСертификату.ДатаНапоминания = ДатаНапоминания;
		КонецЕсли;
	КонецЦикла;
	
	// если сертификат истек более полугода назад, то делаем ему дату напоминания - Дата(1,1,1) - никогда не напоминать 
	ТекДата = ТекущаяДатаСеанса();
	ИндексДатыНапоминания = ДатыНапоминанийПоИстекающимСертификатам.Количество() - 1;
	Пока ИндексДатыНапоминания >= 0 Цикл
		Если ДатыНапоминанийПоИстекающимСертификатам[ИндексДатыНапоминания].ДействителенПо <= ДобавитьМесяц(ТекДата, -6) Тогда
			ДатыНапоминанийПоИстекающимСертификатам[ИндексДатыНапоминания].ДатаНапоминания = Дата(1,1,1);
		КонецЕсли;
		ИндексДатыНапоминания = ИндексДатыНапоминания - 1;
	КонецЦикла;
	
	ХранилищеОбщихНастроек.Сохранить("ДокументооборотСКонтролирующимиОрганами_НапоминаниеПоИстекающимСертификатам", , ДатыНапоминанийПоИстекающимСертификатам);
	
КонецПроцедуры

Процедура СохранитьДатуНапоминанияДляЛицензий(ИзмененныеПараметрыПодключения,ДатаНапоминания) Экспорт
	
	// Получаем из хранилища общих настроек сведения по лицензиям
	ДатыНапоминанийПоИстекающимЛицензиям = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_ДатыНапоминанийПоИстекающимЛицензиям");
	
	Если ДатыНапоминанийПоИстекающимЛицензиям = Неопределено Тогда
		
		ДатыНапоминанийПоИстекающимЛицензиям = Новый ТаблицаЗначений;
		ДатыНапоминанийПоИстекающимЛицензиям.Колонки.Добавить("Организация");
		ДатыНапоминанийПоИстекающимЛицензиям.Колонки.Добавить("УчетнаяЗапись");
		ДатыНапоминанийПоИстекающимЛицензиям.Колонки.Добавить("ЛицензияНаименование");
		ДатыНапоминанийПоИстекающимЛицензиям.Колонки.Добавить("ЛицензияДатаОкончания");
		ДатыНапоминанийПоИстекающимЛицензиям.Колонки.Добавить("ДатаНапоминания");
		
	КонецЕсли;
	
	// Если лицензия найдена в хранилище общих настроек, то обновляем дату напоминания, иначе создаем новую запись 
	Для Каждого ЛицензияУчетнойЗаписиПользователя Из ИзмененныеПараметрыПодключения Цикл
		
		Если ЗначениеЗаполнено(ЛицензияУчетнойЗаписиПользователя.ЛицензияНаименование) Тогда
			ПараметрыОтбора =  Новый Структура();
			ПараметрыОтбора.Вставить("Организация", ЛицензияУчетнойЗаписиПользователя.Организация);
			ПараметрыОтбора.Вставить("УчетнаяЗапись", ЛицензияУчетнойЗаписиПользователя.УчетнаяЗаписьДокументооборота);
			ПараметрыОтбора.Вставить("ЛицензияНаименование", ЛицензияУчетнойЗаписиПользователя.ЛицензияНаименование);
			ПараметрыОтбора.Вставить("ЛицензияДатаОкончания", ЛицензияУчетнойЗаписиПользователя.ЛицензияДатаОкончания);
			
			СтрокиДатыНапоминанияПоИстекающейЛицензии = ДатыНапоминанийПоИстекающимЛицензиям.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрокиДатыНапоминанияПоИстекающейЛицензии.Количество() = 0 Тогда
				СтрокаДатыНапоминанияПоИстекающейЛицензии = ДатыНапоминанийПоИстекающимЛицензиям.Добавить();
				СтрокаДатыНапоминанияПоИстекающейЛицензии.Организация = ЛицензияУчетнойЗаписиПользователя.Организация;
				СтрокаДатыНапоминанияПоИстекающейЛицензии.УчетнаяЗапись = ЛицензияУчетнойЗаписиПользователя.УчетнаяЗаписьДокументооборота;
				СтрокаДатыНапоминанияПоИстекающейЛицензии.ЛицензияНаименование = ЛицензияУчетнойЗаписиПользователя.ЛицензияНаименование;
				СтрокаДатыНапоминанияПоИстекающейЛицензии.ЛицензияДатаОкончания = ЛицензияУчетнойЗаписиПользователя.ЛицензияДатаОкончания;
			Иначе
				СтрокаДатыНапоминанияПоИстекающейЛицензии = СтрокиДатыНапоминанияПоИстекающейЛицензии[0]; 
			КонецЕсли;
			СтрокаДатыНапоминанияПоИстекающейЛицензии.ДатаНапоминания = ДатаНапоминания;
		КонецЕсли;
			
	КонецЦикла;
	
	// если лицензия истекла более полугода назад, то делаем ей дату напоминания - Дата(1,1,1) - никогда не напоминать 
	ТекДата = ТекущаяДатаСеанса();
	ИндексДатыНапоминания = ДатыНапоминанийПоИстекающимЛицензиям.Количество() - 1;
	Пока ИндексДатыНапоминания >= 0 Цикл
		Если ДатыНапоминанийПоИстекающимЛицензиям[ИндексДатыНапоминания].ЛицензияДатаОкончания <= ДобавитьМесяц(ТекДата, -6) Тогда
			ДатыНапоминанийПоИстекающимЛицензиям[ИндексДатыНапоминания].ДатаНапоминания = Дата(1,1,1);
		КонецЕсли;
		ИндексДатыНапоминания = ИндексДатыНапоминания - 1;
	КонецЦикла;
	
	ХранилищеОбщихНастроек.Сохранить("ДокументооборотСКонтролирующимиОрганами_ДатыНапоминанийПоИстекающимЛицензиям", , ДатыНапоминанийПоИстекающимЛицензиям);
	
КонецПроцедуры

Функция ПолучитьПараметрыКриптопровайдераПоЗначениюПеречисления(ЗначениеПеречисления) Экспорт
	
	Криптопровайдер = Новый Структура("Тип, Имя, ОтображаемоеНазвание");
	
	Если ЗначениеПеречисления = Перечисления.ТипыКриптоПровайдеров.VipNet Тогда
		Криптопровайдер.Тип = "2";
		Криптопровайдер.Имя = "Infotecs Cryptographic Service Provider";
		Криптопровайдер.ОтображаемоеНазвание = "VipNet CSP"
	ИначеЕсли ЗначениеПеречисления = Перечисления.ТипыКриптоПровайдеров.CryptoPro Тогда
		Криптопровайдер.Тип = "75";
		Криптопровайдер.Имя = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
		Криптопровайдер.ОтображаемоеНазвание = "CryptoPro CSP"
	Иначе
		Криптопровайдер.Тип = "0";
		Криптопровайдер.Имя = "";
	КонецЕсли;
	
	Возврат Криптопровайдер;
	
КонецФункции

Функция ЭтотПараметрИзменился(ТабличнаяЧасть, НазваниеРеквизита) Экспорт
	
	СтруктураПоиска = Новый Структура("ИзмененныйРеквизит", НазваниеРеквизита);
	Возврат ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска).Количество() > 0 ;
	
КонецФункции

Функция ПоддерживаетсяВторичноеЗаявление(Организация) Экспорт
	
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	Попытка
		Спецоператор = УчетнаяЗапись.СпецоператорСвязи;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	ПоддерживаетсяВторичноеЗаявление = Истина;
	
	СпецоператорПоддерживаетВторичныеЗаявления = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(Спецоператор, "ПоддерживаетсяОтправкаВторичногоЗаявления") = "Истина";
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) ИЛИ НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ СпецоператорПоддерживаетВторичныеЗаявления Тогда
		ПоддерживаетсяВторичноеЗаявление = Ложь;
	КонецЕсли;
	
	Возврат ПоддерживаетсяВторичноеЗаявление;
	
КонецФункции

Функция БылиИзменененыРеквизитыПодключенияК1СОтчетности(ТабличнаяЧасть) Экспорт
	
	Возврат ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование)
		ИЛИ ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.ПолноеНаименование)
		ИЛИ ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.КПП)
		ИЛИ ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.ОГРН)
		ИЛИ ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.РегНомерПФР)
		ИЛИ ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.РегНомерФСС)
		ИЛИ ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР)
		ИЛИ ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта)
		ИЛИ ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной)
		ИЛИ ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный)
		ИЛИ ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.НомерОсновнойПоставки1С);
	
КонецФункции
	
Функция БылИзмененСоставКонтролирующихОрганов(ТабличнаяЧасть) Экспорт
	
	СдаватьВФНСИзменился 		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС);
	КодыФНСИзменились 			= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.КодыФНС);
	СдаватьВПФРИзменился 		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР);
	КодПФРИзменился 			= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.КодПФР); 
	СдаватьВФССИзменился 		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС);
	СдаватьВРосстатИзменился 	= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат);
	КодРосстатаИзменился		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.КодРосстата); 
	СдаватьВФСРАРИзменился 		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР);
	СдаватьВРПНИзменился 		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН);
	СдаватьВФТСИзменился 		= ЭтотПараметрИзменился(ТабличнаяЧасть, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФТС);
	
	Возврат СдаватьВФНСИзменился ИЛИ КодыФНСИзменились ИЛИ СдаватьВПФРИзменился ИЛИ КодПФРИзменился
		ИЛИ СдаватьВФССИзменился ИЛИ СдаватьВРосстатИзменился ИЛИ КодРосстатаИзменился ИЛИ СдаватьВФСРАРИзменился
		ИЛИ СдаватьВРПНИзменился ИЛИ СдаватьВФТСИзменился;
	
КонецФункции

Функция УчетнаяЗаписьОрганизации(Организация) Экспорт
	
	ВидОбменаСКонтролирующимиОрганами = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ВидОбменаСКонтролирующимиОрганами");
	Если ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Возврат Организация.УчетнаяЗаписьОбмена;
	Иначе
		Возврат Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПодключенДокументооборотСКонтролирующимОрганом(Организация, КонтролирующийОрган = Неопределено) Экспорт
	
	ДокументооборотПодключен = Ложь;
	
	Если КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
		
		ДокументооборотПодключен = ОрганизацияИспользуетОбменСФНС(Организация);

	ИначеЕсли КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
		
		ДокументооборотПодключен = ОрганизацияИспользуетОбменСПФР(Организация);
		
	ИначеЕсли КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
		
		ДокументооборотПодключен = ОрганизацияИспользуетОбменСФСГС(Организация);
		
	ИначеЕсли КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
		
		ДокументооборотПодключен = ОрганизацияИспользуетОбменСФСС(Организация);
		
	ИначеЕсли КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
		
		ДокументооборотПодключен = ОрганизацияИспользуетОбменСФСРАР(Организация);

	ИначеЕсли КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
		
		ДокументооборотПодключен = ОрганизацияИспользуетОбменСРПН(Организация);
		
	ИначеЕсли КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ФТС Тогда
		
		ДокументооборотПодключен = ОрганизацияИспользуетОбменСФТС(Организация);
		
	ИначеЕсли КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.БанкРоссии Тогда
		
		ДокументооборотПодключен = ОрганизацияИспользуетОбменСБанкомРоссии(Организация);
		
	ИначеЕсли КонтролирующийОрган = Неопределено Тогда
		
		ДокументооборотПодключен = 
			ОрганизацияИспользуетОбменСФНС(Организация) = Истина
			ИЛИ ОрганизацияИспользуетОбменСПФР(Организация) = Истина
			ИЛИ ОрганизацияИспользуетОбменСФСГС(Организация) = Истина
			ИЛИ ОрганизацияИспользуетОбменСФСС(Организация) = Истина
			ИЛИ ОрганизацияИспользуетОбменСФСРАР(Организация) = Истина
			ИЛИ ОрганизацияИспользуетОбменСРПН(Организация) = Истина
			ИЛИ ОрганизацияИспользуетОбменСФТС(Организация) = Истина
			ИЛИ ОрганизацияИспользуетОбменСБанкомРоссии(Организация) = Истина;
		
	КонецЕсли;
	
	Возврат ДокументооборотПодключен = Истина; // может вернуться Неопределено
	
КонецФункции

Функция ПараметрыПредупрежденияОСменеРеквизитовПодключенияК1СОтчетности(ТекущаяДатаСервер) Экспорт
	
	ТекущаяДатаСервер = ТекущаяДатаСеанса();
	СписокПараметровПредупреждения = Новый СписокЗначений;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("КлючОбъекта","ПараметрыПредупрежденияОСменеРеквизитовПодключенияК1СОтчетности");
	ПараметрыОтбора.Вставить("Пользователь",ИмяПользователя());
	
	ВыборкаНастроек = ХранилищеОбщихНастроек.Выбрать(ПараметрыОтбора);
	
	Пока ВыборкаНастроек.Следующий() Цикл
		СписокПараметровПредупреждения.Добавить(ВыборкаНастроек.Настройки, ВыборкаНастроек.КлючНастроек)
	КонецЦикла;
	
	Возврат СписокПараметровПредупреждения;
	
КонецФункции


Функция ПодключенныеОрганизации(ОтборОрганизации = Неопределено) Экспорт
	
	ТипОтбораОрганизации = ТипЗнч(ОтборОрганизации);
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	Организации.Ссылка КАК Ссылка
						  |ИЗ
						  |	Справочник.Организации КАК Организации
						  |ГДЕ
						  |	Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
						  |	И Организации.УчетнаяЗаписьОбмена <> &ПустаяУчетнаяЗаписьОбмена"
						  + ?(ОтборОрганизации <> Неопределено, ?(ТипОтбораОрганизации <> Тип("Массив"), "
						  |	И Организации.Ссылка = &ОтборОрганизации", "
						  |	И Организации.Ссылка В (&ОтборОрганизации)"), "") + "
						  |	И НЕ Организации.ПометкаУдаления
						  |	И НЕ Организации.УчетнаяЗаписьОбмена.ПометкаУдаления");
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("ПустаяУчетнаяЗаписьОбмена", Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка());
	Запрос.УстановитьПараметр("ОтборОрганизации", ОтборОрганизации);
	
	Попытка
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ОтборОрганизации <> Неопределено И ТипОтбораОрганизации <> Тип("Массив") Тогда
		Результат = (ТаблицаЗапроса.Количество() > 0);
		
	Иначе
		Результат = Новый Массив;
		Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
			Результат.Добавить(СтрокаЗапроса.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СерверПриемаОтчетностиФСС(ТипОтправляемогоДокумента) Экспорт
	
	ИспользуетсяТестовыйСерверФСС = ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования();
	
	Если ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.Отчет4ФСС Тогда
		
		Если ИспользуетсяТестовыйСерверФСС Тогда
			// Возвращаем адрес тестового сервера
			Возврат "forma4.fss.ru";
			
		Иначе
			// Возвращаем адрес реального сервера
			Возврат "f4.fss.ru";
			
		КонецЕсли;
		
	ИначеЕсли ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС
		ИЛИ ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС Тогда
		
		Если ИспользуетсяТестовыйСерверФСС Тогда
			// Возвращаем адрес тестового сервера
			Возврат "docs-test.fss.ru";
			
		Иначе
			// Возвращаем адрес реального сервера
			Возврат "docs.fss.ru";
			
		КонецЕсли;
	
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция СформироватьИмяФайла(ИсходноеИмяФайла) Экспорт
	
	ИмяФайла = СтрЗаменить(ИсходноеИмяФайла, "/", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ":", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "*", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "?", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, """","_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "<", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ">", "_");
	Возврат СтрЗаменить(ИмяФайла, "|", "_");
	
КонецФункции

Функция РазницаДатВМесяцах(Дата1, Дата2) Экспорт
	
	ДатаНач	= ?(Дата1 < Дата2, Дата1, Дата2);
	ДатаКон	= ?(Дата1 < Дата2, Дата2, Дата1);
		
	Годы    = Год( датаКон ) - Год( датаНач );
	Месяцы  = Месяц( датаКон ) - Месяц( датаНач );

	Разность = месяцы + годы * 12;

	Возврат Разность;

КонецФункции

Процедура ПриЗаписиЭлектронногоПредставленияРегламентированногоОтчета(Объект, Отказ)
	
	Возврат;
КонецПроцедуры

// есть в Контейнере
Функция ОпределитьОрганПФРОрганизации(Организация) Экспорт
     
     КодОрганаПФР = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодОрганаПФР").КодОрганаПФР);
     Если НЕ ЗначениеЗаполнено(КодОрганаПФР) Тогда
          Возврат Неопределено;
     Иначе
          Возврат Справочники.ОрганыПФР.НайтиПоКоду(КодОрганаПФР);
     КонецЕсли;
     
 КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Функции с использованием общих модулей и дублирующие функции для организации
// вызовов общих модулей при документообороте с РПН

Функция СформироватьФайлОтправкиВРПНССервера(КороткоеИмяФайлаПакета, СтрокаBase64ФайлаПакета, ЭтоАдреса = Истина, Адрес = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	//файл отправки получаем, объединяя файл пакета с файлами начала и окончания POST-запроса
	
	// файл 1
	СодержимоеФайла = "--My1cV8bNdr"
	+ Символы.ВК + Символы.ПС + "Content-Disposition: form-data; name=""fileUpload""; filename=""" + КороткоеИмяФайлаПакета + """"
	+ Символы.ВК + Символы.ПС + "Content-Type: application/octet-stream"
	+ Символы.ВК + Символы.ПС
	+ Символы.ВК + Символы.ПС;
	
	ИмяФайлаЗапросаНачало = ПолучитьИмяВременногоФайла();
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.УстановитьТекст(СодержимоеФайла);
	ТекстовыйФайл.Записать(ИмяФайлаЗапросаНачало, "utf-8", "");
	
	// файл 2
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла();
	
	Если ЭтоАдреса Тогда
		ПолучитьИзВременногоХранилища(СтрокаBase64ФайлаПакета).Записать(ИмяФайлаПакета);
	Иначе
		ДвоичныеДанныеФайлаПакета = Base64Значение(СтрокаBase64ФайлаПакета);
		ДвоичныеДанныеФайлаПакета.Записать(ИмяФайлаПакета);
	КонецЕсли;
	
	// файл 3
	СодержимоеФайла = Символы.ВК + Символы.ПС + "--My1cV8bNdr--";
	
	ИмяФайлаЗапросаОкончание = ПолучитьИмяВременногоФайла();
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.УстановитьТекст(СодержимоеФайла);
	ТекстовыйФайл.Записать(ИмяФайлаЗапросаОкончание, "windows-1251", "");
	
	// объединение
	МассивИмен = Новый Массив;
	МассивИмен.Добавить(ИмяФайлаЗапросаНачало);
	МассивИмен.Добавить(ИмяФайлаПакета);
	МассивИмен.Добавить(ИмяФайлаЗапросаОкончание);
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла();
	ОбъединитьФайлы(МассивИмен, ИмяФайлаОтправки);
	
	ДвоичныеДанныеФайлаПакета = Новый ДвоичныеДанные(ИмяФайлаОтправки);
	Результат = Base64Строка(ДвоичныеДанныеФайлаПакета);
	Результат = Сред(Результат, 5);// удалим из файла в кодировке "UTF-8" сигнатуру BOM
	
	Если ЭтоАдреса Тогда
		ДвоичныеДанныеФайлаПакетаБезСигнатуны = Base64Значение(Результат);
		Результат = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаПакетаБезСигнатуны, Адрес);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ДОКУМЕНТООБОРОТ С РПН, код без использования вызовов общих модулей
////

Функция ОбновитьРезультатКонкретнойОтправкиРПНССервера(Знач ОтправкаСсылка, Знач ОтправкаОбъектЗагружен, Знач ПараметрыОтправки, ПараметрыСоединения, Знач ЭтоВызовИзСписка = Ложь) Экспорт
	
	Если ОтправкаОбъектЗагружен Тогда
		ОсновныеРеквизитыОтправки = Новый Структура("ОтчетСсылка, ИмяФайлаПакета, ИдентификаторОтправкиНаСервере, СтатусОтправки, СтатусПроверкиНаПортале, ИдентификаторОтправкиОператору",
			ОтправкаСсылка.ОтчетСсылка, ОтправкаСсылка.ИмяФайлаПакета, ОтправкаСсылка.ИдентификаторОтправкиНаСервере, ОтправкаСсылка.СтатусОтправки, ОтправкаСсылка.СтатусПроверкиНаПортале, ОтправкаСсылка.ИдентификаторОтправкиОператору);
	Иначе
		ОсновныеРеквизитыОтправки = ЗначенияРеквизитовОбъекта(ОтправкаСсылка, "ОтчетСсылка, ИмяФайлаПакета, ИдентификаторОтправкиНаСервере, СтатусОтправки, СтатусПроверкиНаПортале, ИдентификаторОтправкиОператору");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОсновныеРеквизитыОтправки.ИдентификаторОтправкиОператору) Тогда
		ОсновныеРеквизитыОтправки.ИдентификаторОтправкиОператору = 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ИдентификаторОтправкиНаСервере) Тогда
		ПараметрыСоединения.ИдентификаторОтправкиНаСервере = ОсновныеРеквизитыОтправки.ИдентификаторОтправкиНаСервере;
	КонецЕсли;
	Если ПараметрыСоединения.ИдентификаторОтправкиОператору = Неопределено Тогда
		ПараметрыСоединения.ИдентификаторОтправкиОператору = ОсновныеРеквизитыОтправки.ИдентификаторОтправкиОператору;
	КонецЕсли;
	
	РезультатОтправки = ПолучитьРезультатОтправкиРПН(ОсновныеРеквизитыОтправки, ПараметрыОтправки, ПараметрыСоединения, ЭтоВызовИзСписка, ОтправкаСсылка);
	
	ПараметрыСоединения.СоединениеHTTP = Неопределено;
	
	СохранитьРезультатОтправкиРПН(ОтправкаСсылка, РезультатОтправки);
	
	Возврат (РезультатОтправки <> Неопределено);
	
КонецФункции

Функция СохранитьРезультатОтправкиРПН(ОтправкаСсылка, РезультатОтправки)
	
	Если РезультатОтправки <> Неопределено Тогда
		ОтправкаОбъект = ОтправкаСсылка.ПолучитьОбъект();
		ОтправкаОбъект.ДатаПолученияРезультата = РезультатОтправки.ДатаПолученияРезультата;
		ОтправкаОбъект.ИдентификаторОтправкиНаСервере = РезультатОтправки.ИдентификаторОтправкиНаСервере;
		ОтправкаОбъект.СтатусОтправки = РезультатОтправки.СтатусОтправки;
		ОтправкаОбъект.СтатусПроверкиНаПортале = РезультатОтправки.СтатусПроверкиНаПортале;
		ОтправкаОбъект.Протокол = Новый ХранилищеЗначения(РезультатОтправки.Протокол);
		ОтправкаОбъект.Записать();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРезультатОтправкиРПН(ОсновныеРеквизитыОтправки, ПараметрыОтправки, ПараметрыСоединения, ЭтоВызовИзСписка, ОтправкаСсылка)
	
	СтатусОтчета = "";
	ЦветСтатуса = Новый Цвет(0, 0, 192);
	СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен;
	
	//запрос результатов обработки
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	ПараметрыСоединения.ПовторятьЗапросПароля = Ложь;
	
	ЗаголовокОтчета = ПолучитьИнформациюОбОтчетеНаПорталеРПН(ОсновныеРеквизитыОтправки.ИмяФайлаПакета, ПараметрыОтправки, ПараметрыСоединения);
	
	УспешноОбработан = Неопределено;
	ПройденаПроверкаНаПортале = Неопределено;
	Если ЗаголовокОтчета <> Неопределено Тогда
		УспешноОбработан = УспешноОбработанОтчетРПН(ЗаголовокОтчета.ИдентификаторЗаписи, ЗаголовокОтчета.Состояние, ПройденаПроверкаНаПортале);
	КонецЕсли;
	
	Если ЗаголовокОтчета <> Неопределено И НЕ ПараметрыСоединения.ПовторятьСоединение Тогда
		
		// получен протокол обработки и отсутствовали ошибки соединения
		
		// анализируем содержимое страницы протокола обработки
		Если УспешноОбработан = Истина Тогда
			// отчет принят
			СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
			СтатусПроверкиНаПортале = Перечисления.СтатусыОтправки.Сдан;
			СтатусОтчета = НСтр("ru = 'Отчет принят, ошибок не обнаружено.'");
			ЦветСтатуса = Новый Цвет(0, 179, 16);
			
		ИначеЕсли УспешноОбработан = Ложь Тогда
			// отчет не принят
			СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят;
			Если ПройденаПроверкаНаПортале = Истина Тогда
				СтатусПроверкиНаПортале = Перечисления.СтатусыОтправки.Сдан;
				СтатусОтчета = НСтр("ru = 'Отчет не принят, обнаружены ошибки при проверке в управлении.'");
			Иначе
				СтатусПроверкиНаПортале = Перечисления.СтатусыОтправки.НеПринят;
				СтатусОтчета = НСтр("ru = 'Отчет не принят, обнаружены ошибки.'");
			КонецЕсли;
			ЦветСтатуса = Новый Цвет(255, 0, 0);
			
		Иначе
			// отчет еще не обработан
			Если ПройденаПроверкаНаПортале = Истина Тогда
				СтатусПроверкиНаПортале = Перечисления.СтатусыОтправки.Сдан;
			КонецЕсли;
			СтатусОтчета = НСтр("ru = 'Находится в обработке, попробуйте через некоторое время использовать в отчете кнопку ""Обновить""'");
		КонецЕсли;
		
		Протокол = ГенерироватьHTMLПротоколаОбработкиРПН(ЗаголовокОтчета, СтатусОтчета, ЦветСтатуса, СтатусОтправки, ПараметрыОтправки, ОсновныеРеквизитыОтправки.ОтчетСсылка, ПараметрыСоединения.ИдентификаторОтправкиОператору <> 0);
		
		//заполняем результирующую структуру
		Результат = Новый Структура("ДатаПолученияРезультата, ИдентификаторОтправкиНаСервере, СтатусОтправки, СтатусПроверкиНаПортале, Протокол",
			ТекущаяДатаСеанса(), ЗаголовокОтчета.ИдентификаторЗаписи, СтатусОтправки, СтатусПроверкиНаПортале, Протокол);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) ИЛИ НЕ ПараметрыСоединения.ПовторятьСоединение Тогда
		
		Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Результаты отправки не получены с портала. %1'"),
				ПараметрыСоединения.ОписаниеОшибкиСервером);
			
			Если ЭтоВызовИзСписка Тогда
				ПредставлениеОтчетаОтправки = ПредставлениеОтчета(ОтправкаСсылка.ОтчетСсылка);
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = '%1 Попробуйте через некоторое время использовать кнопку ""Обновить"" в отчете %2.'"),
					ТекстСообщения,
					ПредставлениеОтчетаОтправки);
			КонецЕсли;
			
			СообщитьПользователю(ТекстСообщения, ПараметрыСоединения.СообщенияПользователю);
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить результаты отправки с портала Росприроднадзора.'");
			
			Если ЭтоВызовИзСписка Тогда
				ПредставлениеОтчетаОтправки = ПредставлениеОтчета(ОтправкаСсылка.ОтчетСсылка);
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = '%1 Возможно, портал перегружен. Попробуйте через некоторое время использовать кнопку ""Обновить""  в отчете %2.'"),
					ТекстСообщения,
					ПредставлениеОтчетаОтправки);
			КонецЕсли;
			
			СообщитьПользователю(ТекстСообщения, ПараметрыСоединения.СообщенияПользователю);
		КонецЕсли;
		
		Результат = Неопределено;
		
	Иначе
		
		// возможно, проблемы с доступом в интернет
		Результат = Неопределено;
		
	КонецЕсли;
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	
	Возврат Результат;
	
КонецФункции

Функция ОтправкаНаСерверРПН(ФайлыИДанныеОтправки, ОтчетСсылка, ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	ПараметрыСоединения.ПовторятьЗапросПароля = Ложь;
	ЗаголовокОтчета = Неопределено;
	
	ОтправкаПроизведена = ОтправитьЗашифрованныйПакетНаСерверРПН(ФайлыИДанныеОтправки, ПараметрыОтправки, ПараметрыСоединения);
	
	Если ОтправкаПроизведена Тогда
		
		ПараметрыСоединения.ПовторятьСоединение = Ложь;
		
		//отправленный файл принят сервером
		НоваяЗапись = Справочники.ОтправкиРПН.СоздатьЭлемент();
		НоваяЗапись.ОтчетСсылка = ОтчетСсылка;
		НоваяЗапись.ИдентификаторОтправкиНаСервере = ПараметрыСоединения.ИдентификаторОтправкиНаСервере;
		ДвоичныеДанныеПакета = Новый ДвоичныеДанные(ФайлыИДанныеОтправки.ИмяФайлаПакета);
		НоваяЗапись.ЗашифрованныйПакет = Новый ХранилищеЗначения(ДвоичныеДанныеПакета);
		НоваяЗапись.ИмяФайлаПакета = ФайлыИДанныеОтправки.КороткоеИмяФайлаПакета;
		НоваяЗапись.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен;
		НоваяЗапись.ДатаОтправки = ТекущаяДатаСеанса();
		НоваяЗапись.Организация = ?(ОтчетСсылка <> Неопределено, ОтчетСсылка.Организация, Неопределено);
		НоваяЗапись.ДатаНачалаПериода = ПараметрыОтправки.ПоляДляЗаписиОтправки.ДатаНачалаПериода;
		НоваяЗапись.ДатаОкончанияПериода = ПараметрыОтправки.ПоляДляЗаписиОтправки.ДатаОкончанияПериода;
		
		Если ОтчетСсылка <> Неопределено И ТипЗнч(ОтчетСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			НоваяЗапись.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", ОтчетСсылка.ИсточникОтчета);
			
		ИначеЕсли ТипЗнч(ОтчетСсылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
			НоваяЗапись.ВидОтчета = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьВидОтправляемогоДокументаПоСсылке(ОтчетСсылка);
			
		Иначе // электронные представления
			НоваяЗапись.ВидОтчета = ?(ОтчетСсылка <> Неопределено, ОтчетСсылка.ВидОтчета, Неопределено);
		КонецЕсли;
		
		НоваяЗапись.Версия = ПараметрыОтправки.ПоляДляЗаписиОтправки.Версия;
		НоваяЗапись.СтатусПроверкиНаПортале = Перечисления.СтатусыОтправки.Отправлен;
		НоваяЗапись.ПредставлениеПериода = ПредставлениеПериода(НоваяЗапись.ДатаНачалаПериода, КонецДня(НоваяЗапись.ДатаОкончанияПериода), "ФП=Истина");
		НоваяЗапись.ПредставлениеВидаДокумента = ПредставлениеВидаДокумента(НоваяЗапись.Версия);
		НоваяЗапись.ИдентификаторОтправкиОператору = ПараметрыСоединения.ИдентификаторОтправкиОператору;
		НоваяЗапись.Записать();
		
		Результат = НоваяЗапись.Ссылка;
		
		Возврат Результат;
		
	ИначеЕсли (ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) ИЛИ НЕ ПараметрыСоединения.ПовторятьСоединение) Тогда
		
		ЭтоРегламентированныйОтчетИлиУведомление = (ТипЗнч(ОтчетСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет")
			ИЛИ ТипЗнч(ОтчетСсылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения")
			ИЛИ ТипЗнч(ОтчетСсылка) = Тип("Неопределено"));
		
		Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
			
			//отправленный файл не был принят сервером, получено описание ошибки
			Если Прав(ПараметрыСоединения.ОписаниеОшибкиСервером, 1) <> "." И Прав(ПараметрыСоединения.ОписаниеОшибкиСервером, 1) <> "!" Тогда
				ПараметрыСоединения.ОписаниеОшибкиСервером = ПараметрыСоединения.ОписаниеОшибкиСервером + ".";
			КонецЕсли;
			СообщитьПользователю(ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет не принят порталом. %1'"), ПараметрыСоединения.ОписаниеОшибкиСервером) + " " + НСтр("ru = 'Портал находится на стадии пилотного проекта.'") + " " + ?(ЭтоРегламентированныйОтчетИлиУведомление И НЕ ПараметрыОтправки.БумажнаяПодачаОтчета,
				НСтр("ru = 'Для отправки отчета выгрузите его в файл, используя меню ""Выгрузка"" - ""Выгрузить для портала Росприроднадзора"".'"), НСтр("ru = 'Для отправки отчета выгрузите его в файл, используя меню ""Еще"" - ""Выгрузить"".'"))
				+ " " + ПодставитьПараметрыВСтроку(НСтр("ru = 'Далее отправьте данный файл на портале %1'"), "https://" + ПараметрыОтправки.АдресСервера), ПараметрыСоединения.СообщенияПользователю);
			
		Иначе
			// в ответе сервера отсутствует описание ошибки и установлен признак повтора соединения
			СообщитьПользователю(НСтр("ru = 'Зашифрованный пакет не удалось отправить на портал Росприроднадзора.'") + " " + НСтр("ru = 'Портал находится на стадии пилотного проекта.'") + " " + ?(ЭтоРегламентированныйОтчетИлиУведомление И НЕ ПараметрыОтправки.БумажнаяПодачаОтчета,
				НСтр("ru = 'Для отправки отчета выгрузите его в файл, используя меню ""Выгрузка"" - ""Выгрузить для портала Росприроднадзора"".'"), НСтр("ru = 'Для отправки отчета выгрузите его в файл, используя меню ""Еще"" - ""Выгрузить"".'"))
				+ " " + ПодставитьПараметрыВСтроку(НСтр("ru = 'Далее отправьте данный файл на портале %1'"), "https://" + ПараметрыОтправки.АдресСервера), ПараметрыСоединения.СообщенияПользователю);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОтправитьВРПНССервера(ЭтоЭлектроннаяПодписьВМоделиСервиса, Знач СтрокаBase64ФайлаОтправки, Знач СтрокаBase64ФайлаПакета, Знач КороткоеИмяФайлаПакета, Знач ОтчетСсылка, Знач ПараметрыОтправки, ПараметрыСоединения) Экспорт
	
	// получаем двоичные данные файлов
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		ДвоичныеДанныеФайлаОтправки = ПолучитьИзВременногоХранилища(СтрокаBase64ФайлаОтправки);
		ДвоичныеДанныеФайлаПакета = ПолучитьИзВременногоХранилища(СтрокаBase64ФайлаПакета);
	Иначе
		ДвоичныеДанныеФайлаОтправки = Base64Значение(СтрокаBase64ФайлаОтправки);
		ДвоичныеДанныеФайлаПакета = Base64Значение(СтрокаBase64ФайлаПакета);
	КонецЕсли;
	
	// выгружаем двоичные данные в файл
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайлаОтправки.Записать(ИмяФайлаОтправки);
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайлаПакета.Записать(ИмяФайлаПакета);
	
	ФайлыИДанныеОтправки = Новый Структура("КороткоеИмяФайлаПакета, ИмяФайлаОтправки, ИмяФайлаПакета", КороткоеИмяФайлаПакета, ИмяФайлаОтправки, ИмяФайлаПакета);
	
	Результат = ОтправкаНаСерверРПН(ФайлыИДанныеОтправки, ОтчетСсылка, ПараметрыОтправки, ПараметрыСоединения);
	
	ПараметрыСоединения.СоединениеHTTP = Неопределено;
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтправки);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаПакета);
	
	Возврат Результат;
	
КонецФункции

Функция ГенерироватьHTMLПротоколаОбработкиРПН(ЗаголовокОтчета, СтатусОтчета, ЦветСтатуса, СтатусОтправки, ПараметрыОтправки, ОтчетСсылка, СкрытьПримечания)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Шаблон = ПолучитьМакет("РПНШаблонДляHTML");
	
	НаименованиеОрганизации = "";
	ИНН = ИННОрганизации(ПараметрыОтправки.Организация, "", НаименованиеОрганизации);
	СведенияПоОбъекту 	= СведенияПоОтправляемымОбъектам(ОтчетСсылка);
	НаименованиеОргана 	= СведенияПоОбъекту.ПредставлениеКонтролирующегоОргана;
	НаименованиеОтчета 	= СведенияПоОбъекту.Наименование;
	
	СекцияШапкаСЗаголовком = Шаблон.ПолучитьОбласть("ШапкаСЗаголовком");
	Если СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
		СекцияШапкаСЗаголовком.Параметры.НаименованиеПротокола = НСтр("ru = 'Протокол о сдаче'") + ?(НЕ СкрытьПримечания, "*", "");
	ИначеЕсли СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
		СекцияШапкаСЗаголовком.Параметры.НаименованиеПротокола = НСтр("ru = 'Протокол ошибок'") + ?(НЕ СкрытьПримечания, "*", "");
	Иначе
		СекцияШапкаСЗаголовком.Параметры.НаименованиеПротокола = НСтр("ru = 'Протокол'") + ?(НЕ СкрытьПримечания, "*", "");
	КонецЕсли;
	СекцияШапкаСЗаголовком.Параметры.Отправитель = НаименованиеОрганизации;
	СекцияШапкаСЗаголовком.Параметры.ИНН = НСтр("ru = 'ИНН'") + " " + ИНН;
	СекцияШапкаСЗаголовком.Параметры.Получатель = НаименованиеОргана;
	СекцияШапкаСЗаголовком.Параметры.Отчет = НаименованиеОтчета;
	СекцияШапкаСЗаголовком.Параметры.СтатусОтчета = СтатусОтчета;
	СекцияШапкаСЗаголовком.Области.СтатусОтчета.ЦветТекста = ЦветСтатуса;
	ТабДок.Вывести(СекцияШапкаСЗаголовком);
	
	СекцияСтроки = Шаблон.ПолучитьОбласть("Строки");
	СекцияСтроки.Параметры.НомерНаименование = НСтр("ru = 'Входящий номер отчета'") + ?(ПараметрыОтправки.БумажнаяПодачаОтчета И НЕ СкрытьПримечания, "**", "");
	СекцияСтроки.Параметры.Обновлено = ЗаголовокОтчета.ДатаОбновления;
	СекцияСтроки.Параметры.Номер = ЗаголовокОтчета.ИдентификаторЗаписи;
	СекцияСтроки.Параметры.Подано = ЗаголовокОтчета.ДатаЗагрузки;
	СекцияСтроки.Параметры.Статус = ЗаголовокОтчета.Состояние;
	СекцияСтроки.Параметры.Комментарий = ЗаголовокОтчета.ТекстСостояния;
	ТабДок.Вывести(СекцияСтроки);
	
	СекцияПодвал = Шаблон.ПолучитьОбласть("Подвал");
	ТабДок.Вывести(СекцияПодвал);
	
	Если НЕ СкрытьПримечания Тогда
	СекцияПримечание = Шаблон.ПолучитьОбласть("Примечание");
	СекцияПримечание.Параметры.СсылкаНаПортал = "https://" + ПараметрыОтправки.АдресСервера;
	ТабДок.Вывести(СекцияПримечание);
	
		Если ПараметрыОтправки.БумажнаяПодачаОтчета Тогда
		СекцияПримечаниеНеподписываемые = Шаблон.ПолучитьОбласть("ПримечаниеНеподписываемые");
		ТабДок.Вывести(СекцияПримечаниеНеподписываемые);
	КонецЕсли;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабДок.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.HTML);
	ТекстHTML = Новый ТекстовыйДокумент;
	ТекстHTML.Прочитать(ИмяВременногоФайла);
	ТекстHTML = ТекстHTML.ПолучитьТекст();
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ПолучитьОсновныеСвойстваПоследнейОтправкиОтчетаВРПН(Знач ОтчетСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтправкиРПН.Ссылка,
		|	ОтправкиРПН.ИдентификаторОтправкиНаСервере КАК Идентификатор,
		|	ОтправкиРПН.ИмяФайлаПакета КАК ИмяФайлаПакета,
		|	ОтправкиРПН.СтатусОтправки КАК Статус,
		|	ОтправкиРПН.СтатусПроверкиНаПортале КАК СтатусПроверкиНаПортале,
		|	ОтправкиРПН.ИдентификаторОтправкиОператору КАК ИдентификаторОтправкиОператору
		|ИЗ
		|	Справочник.ОтправкиРПН КАК ОтправкиРПН
		|ГДЕ
		|	ОтправкиРПН.ОтчетСсылка = &ЭтотОтчет
		|	И ОтправкиРПН.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтправкиРПН.ДатаОтправки УБЫВ";
	Запрос.Параметры.Вставить("ЭтотОтчет", ОтчетСсылка);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоследнююОтправкуОтчетаВРПН(ОтчетСсылка) Экспорт
	
	Отправка = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтправкиРПН.Ссылка
		|ИЗ
		|	Справочник.ОтправкиРПН КАК ОтправкиРПН
		|ГДЕ
		|	ОтправкиРПН.ОтчетСсылка = &ЭтотОтчет
		|	И ОтправкиРПН.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтправкиРПН.ДатаОтправки УБЫВ";
	Запрос.Параметры.Вставить("ЭтотОтчет", ОтчетСсылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Отправка = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Отправка;
	
КонецФункции

Процедура ОбновитьСтатусОтправкиРПНОтчета(Отчет)
	
	// находим последнюю не помеченную на удаление отправку отчета
	ПоследняяОтправка = ПолучитьПоследнююОтправкуОтчетаВРПН(Отчет);
	
	// вычисляем значение статуса отправки (ПеречислениеСсылка.СтатусыОтправки)
	Если ЗначениеЗаполнено(ПоследняяОтправка) Тогда
		
		СтатусОтправки = ПоследняяОтправка.СтатусОтправки;
		Если СтатусОтправки = Перечисления.СтатусыОтправки.ПринятЕстьОшибки Тогда
			//введено после добавления дополнительного статуса ПринятЕстьОшибки, при котором отчет считается сданным
			СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
		КонецЕсли;
		
	Иначе
		СтатусОтправки = Неопределено;
	КонецЕсли;
	
	// сохраняем статус в базе
	ЗаписатьСтатусОтправкиРПНОтчета(Отчет, СтатусОтправки, ПоследняяОтправка);
	
КонецПроцедуры

Процедура ЗаписатьСтатусОтправкиРПНОтчета(Отчет, СтатусОтправки, ОснованиеСтатуса)
	
	Если ЗначениеЗаполнено(СтатусОтправки) Тогда
		МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		МенЗап.Объект = Отчет;
		МенЗап.Статус = СтатусОтправки;
		МенЗап.Основание = ОснованиеСтатуса;
		МенЗап.Записать(Истина);
	Иначе
		МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		МенЗап.Объект = Отчет;
		МенЗап.Прочитать();
		Если МенЗап.Выбран() Тогда
			МенЗап.Удалить();
		КонецЕсли;
	КонецЕсли;
	
	// вызываем переопределяемую процедуру отработки изменения статуса отправки
	ПриИзмененииСтатусаОтправкиДокумента(Отчет, СтатусОтправки);
	
КонецПроцедуры

Функция ПолучитьПустуюДатуЗавершенияОтправкиРПН() Экспорт
	
	Возврат '39991231235959';
	
КонецФункции

Процедура ПриЗаписиОтправкиРПН(Объект, Отказ) Экспорт
	
	Если Объект.ОтчетСсылка <> Неопределено Тогда
		// отражаем изменения в регистре статусов отправки
		ОбновитьСтатусОтправкиРПНОтчета(Объект.ОтчетСсылка);
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписьОбъектовРегламентированнойОтчетности(Объект.ОтчетСсылка, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтрокуСостоянияОтправкиОтчетаИДополнительныеСвойстваДляРПН(ОтчетСсылка, ОрганизацияСсылка, ЦветТекста, ПоказыватьКнопкуОткрытияПротокола) Экспорт
	
	ПоказыватьКнопкуОткрытияПротокола = Ложь;
	ЦветТекста = Новый Цвет(0, 0, 192);
	
	// определяем последнюю отправку
	ОтправкаСсылка = ПолучитьПоследнююОтправкуОтчетаВРПН(ОтчетСсылка);
	Если НЕ ЗначениеЗаполнено(ОтправкаСсылка) Тогда
		СтрокаСостояния = НСтр("ru = 'Отчет не отправлялся.'");
	Иначе
		СтрокаСостояния = ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет отправлен %1.'"), Формат(ОтправкаСсылка.ДатаОтправки, "ДЛФ=DDT"));
		
		Если ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
			
			Если ОтправкаСсылка.СтатусПроверкиНаПортале = Перечисления.СтатусыОтправки.Сдан Тогда
				СтрокаСостояния = СтрокаСостояния + " " + НСтр("ru = 'Отчет не принят: получен протокол, обнаружены ошибки.'");
			Иначе
				СтрокаСостояния = СтрокаСостояния + " " + НСтр("ru = 'Отчет не принят, получен протокол ошибок.'");
			КонецЕсли;
			ЦветТекста = Новый Цвет(255, 0, 0);
			ПоказыватьКнопкуОткрытияПротокола = Истина;
			
		ИначеЕсли ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
			
			ОтчетСдан = Истина;
			СтрокаСостояния = СтрокаСостояния + " " + НСтр("ru = 'Отчет сдан: получен протокол, ошибок не обнаружено.'");
			ЦветТекста = Новый Цвет(0, 179, 16);
			ПоказыватьКнопкуОткрытияПротокола = Истина;
			
		ИначеЕсли ОтправкаСсылка.СтатусПроверкиНаПортале = Перечисления.СтатусыОтправки.Сдан Тогда
			
			// неполный идентификатор начинается с пяти звездочек
			Если Лев(ОтправкаСсылка.ИдентификаторОтправкиНаСервере, 5) = "*****" Тогда
				СтрокаСостояния = СтрокаСостояния + " " + НСтр("ru = 'Отчет обработан на портале и ждет доставки в управление.'");
			Иначе
				СтрокаСостояния = СтрокаСостояния + " " + НСтр("ru = 'Отчет обработан на портале и находится на проверке в управлении.'");
			КонецЕсли;
			ПоказыватьКнопкуОткрытияПротокола = Истина;
			
		ИначеЕсли ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен Тогда
			
			ПоказыватьКнопкуОткрытияПротокола = ЗначениеЗаполнено(ОтправкаСсылка.Протокол.Получить());
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаСостояния;
	
КонецФункции

Функция ПоляНаСервереДляЗаписиОтправкиВРПН(ОбъектСсылка) Экспорт
	
	Возврат Новый Структура("ДатаНачалаПериода, ДатаОкончанияПериода, Версия",
		ОбъектСсылка.ДатаНачала, ОбъектСсылка.ДатаОкончания, ОбъектСсылка.Версия);
	
КонецФункции

Процедура ПередЗаписьюОтправкиРПН(Объект, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		Объект.Период = СокрЛП(Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd") + Формат('39991231' - Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd"));
	КонецЕсли;
	
	Если Объект.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
			Объект.ДатаЗакрытия = ПолучитьПустуюДатуЗавершенияОтправкиРПН();
		КонецЕсли;
		
	Иначе
		Объект.ДатаЗакрытия = Объект.ДатаПолученияРезультата;
	КонецЕсли;
	
КонецПроцедуры

Функция СписокДопустимыхОрганизацийВОбъектахОбменаРПН() Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаРПН.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиОбменаРПН КАК НастройкиОбменаРПН
	|ГДЕ
	|	НастройкиОбменаРПН.ИспользоватьОбмен = ИСТИНА";
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен сервером

Функция ОтправитьЗашифрованныйПакетНаСерверРПН(ФайлыИДанныеОтправки, ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ИдентификаторОтправкиНаСервере = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	ЗагрузкаПроизведена = Ложь;
	АдресСервера = ПараметрыОтправки.АдресСервера;
	
	АвторизацияПроизведена = (ПараметрыСоединения.СоединениеHTTP <> Неопределено);
	
	Если НЕ АвторизацияПроизведена Тогда
		
		Если НЕ ПараметрыСоединения.ОбменНапрямую Тогда
			
			// устанавливаем соединение с сервером
			
			СерверПриемаОтчетности = СерверПриемаОтчетностиРПН(Ложь);
			
			Попытка
				
				ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
				ПараметрыПодключения.АдресWSDL 				= СерверПриемаОтчетности.Определение;
				ПараметрыПодключения.URIПространстваИмен 	= СерверПриемаОтчетности.URIПространстваИменСервиса;
				ПараметрыПодключения.ИмяСервиса 			= СерверПриемаОтчетности.ИмяСервиса;
				ПараметрыПодключения.ИмяТочкиПодключения 	= СерверПриемаОтчетности.ИмяТочкиПодключения;
				ПараметрыПодключения.ИмяПользователя 		= "";
				ПараметрыПодключения.Пароль 				= "";
				ПараметрыПодключения.Таймаут 				= 90;
				
				Сервис = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
					
			Исключение
				
				ПараметрыСоединения.ПовторятьСоединение = Истина;
				СообщитьПользователю(ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось установить соединение с сервером: %1'"), Символы.ПС + ИнформацияОбОшибке().Описание), ПараметрыСоединения.СообщенияПользователю);
				Возврат Ложь;
				
			КонецПопытки;
			
			ПараметрыСоединения.СоединениеHTTP = Сервис;
			
		Иначе
			
		// очистить пароль, если в диалоге сохранения пароля не установлена галочка сохранения
		Если НЕ ПараметрыСоединения.СохранитьПароль И ЗначениеЗаполнено(ПараметрыСоединения.СохраненныйПароль) Тогда
			ЗаписатьEMailИПарольПорталаРПН(ПараметрыОтправки.Организация, , "");
			ПараметрыСоединения.СохраненныйПароль = "";
		КонецЕсли;
		
		// устанавливаем соединение с сервером
		ОписаниеОшибки = "";
		ПараметрыСоединения.СоединениеHTTP = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета("https://" + АдресСервера, ОписаниеОшибки);
		Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
			
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			СообщитьПользователю(
				СтрШаблон(
						НСтр("ru = 'Не удалось установить соединение с сервером:
                          |%1.'"), ОписаниеОшибки), ПараметрыСоединения.СообщенияПользователю);
			Возврат Неопределено;
			
		КонецЕсли;
		
		КонецЕсли;
		
		ПараметрыСоединения.ЗначениеCookie = "";
		АвторизацияПроизведена = АвторизоватьсяНаПорталеРПН(ПараметрыОтправки, ПараметрыСоединения);
		
	КонецЕсли;
	
	Если АвторизацияПроизведена Тогда
		
		ИмяЗагружаемогоФайла = ?(НЕ ПараметрыСоединения.ОбменНапрямую, ФайлыИДанныеОтправки.ИмяФайлаПакета, ФайлыИДанныеОтправки.ИмяФайлаОтправки);
		ЗагрузкаПроизведена = ЗагрузитьОтчетНаПорталРПН(ИмяЗагружаемогоФайла, ПараметрыСоединения);
		
	Иначе
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
	КонецЕсли;
	
	Возврат ЗагрузкаПроизведена;
	
КонецФункции

Функция АвторизоватьсяНаПорталеРПН(ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	ОбменНапрямую = (ПараметрыСоединения.ИдентификаторОтправкиОператору = Неопределено И ПараметрыСоединения.ОбменНапрямую) ИЛИ ПараметрыСоединения.ИдентификаторОтправкиОператору = 0;
	
	Если ОбменНапрямую Тогда
		
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапроса, "windows-1251");
	ЗаписываемыйФайл.Записать("UserName=" + ПараметрыСоединения.EMail + "&Password=" + ПараметрыСоединения.Пароль + "&RememberMe=false");
	ЗаписываемыйФайл.Закрыть();
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаЗапроса, "/Account/Account/LogOn", ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		
		ПараметрыСоединения.ПовторятьСоединение = Истина;
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		Возврат Ложь;
		
	КонецПопытки;
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "windows-1251");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаРПН(ТекстОтвета);
	
	ПараметрыСоединения.ПовторятьЗапросПароля = ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером);
	
	// сохранить пароль при успешной авторизации
	
	Если НЕ ПараметрыСоединения.ПовторятьЗапросПароля И (ПараметрыСоединения.EMail <> ПараметрыСоединения.СохраненныйEMail ИЛИ (ПараметрыСоединения.СохранитьПароль И ПараметрыСоединения.Пароль <> ПараметрыСоединения.СохраненныйПароль)) Тогда
		ПарольДляСохранения = ?(ПараметрыСоединения.СохранитьПароль, ПараметрыСоединения.Пароль, "");
		ЗаписатьEMailИПарольПорталаРПН(ПараметрыОтправки.Организация, ПараметрыСоединения.EMail, ПарольДляСохранения);
		ПараметрыСоединения.СохраненныйEMail = ПараметрыСоединения.EMail;
		ПараметрыСоединения.СохраненныйПароль = ПарольДляСохранения;
	КонецЕсли;
	
	КонецЕсли;
	
	Возврат (НЕ ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером));
	
КонецФункции

Функция ЗагрузитьОтчетНаПорталРПН(ИмяЗагружаемогоФайла, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	Если НЕ ПараметрыСоединения.ОбменНапрямую Тогда
		
		Сервис = ПараметрыСоединения.СоединениеHTTP;
		
		ДвоичныеДанныеПакета = Новый ДвоичныеДанные(ИмяЗагружаемогоФайла);
		ДанныеПакетаВBase64 = Base64Строка(ДвоичныеДанныеПакета);
		
		Попытка
			
			ПараметрыСоединения.ИдентификаторОтправкиОператору = Сервис.Send("1C", ДанныеПакетаВBase64);
			РезультатОбработки = Сервис.Check(ПараметрыСоединения.ИдентификаторОтправкиОператору);
			
		Исключение
			
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			Возврат Ложь;
			
		КонецПопытки;
		
		Если РезультатОбработки.Свойства().Получить("Ticket") <> Неопределено И ЗначениеЗаполнено(РезультатОбработки.Ticket) Тогда
			ПараметрыСоединения.ИдентификаторОтправкиНаСервере = СокрЛП(РезультатОбработки.Ticket);
		Иначе
			ПараметрыСоединения.ИдентификаторОтправкиНаСервере = Формат(ПараметрыСоединения.ИдентификаторОтправкиОператору, "ЧН=0; ЧГ=");
		КонецЕсли;
		
	Иначе
		
		ЗаголовкиHTTP = Новый Соответствие();
		ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
		ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
		ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
		Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
			ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
		КонецЕсли;
		
		// посылаем запрос
		ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
		
		Попытка
			ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяЗагружаемогоФайла, "/Index/UploadForm", ИмяФайлаОтвета, ЗаголовкиHTTP);
		Исключение
			
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			Возврат Ложь;
			
		КонецПопытки;
		
		ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
		ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
		
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "windows-1251");
		ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		
		ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаРПН(ТекстОтвета);
		
		ПараметрыСоединения.ИдентификаторОтправкиНаСервере = ТекстПослеПрефикса(ТекстОтвета, "<h2 class=""text-danger"">", "</h2>");
			ПараметрыСоединения.ИдентификаторОтправкиОператору = 0;
		Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ИдентификаторОтправкиНаСервере) Тогда
			ПараметрыСоединения.ОписаниеОшибкиСервером = "Ошибочный ответ сервера";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НЕ ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером);
	
КонецФункции

Функция ТекстОшибкиПорталаРПН(ТекстОтвета)
	
	ТекстОшибкиВHTML = ТекстПослеПрефикса(ТекстОтвета, "<div class=""validation-summary-errors""><span>", "<");
	Если ЗначениеЗаполнено(ТекстОшибкиВHTML) Тогда
		ТекстОшибкиВHTML = ТекстПослеПрефикса(ТекстОтвета, "<div class=""validation-summary-errors""><span>", "</ul>");
		ТекстОшибкиВHTML = СтрЗаменить(ТекстОшибкиВHTML, "</span>", "");
		ТекстОшибкиВHTML = СтрЗаменить(ТекстОшибкиВHTML, "<ul>", "");
		ТекстОшибкиВHTML = СтрЗаменить(ТекстОшибкиВHTML, "<li>", " ");
		ТекстОшибкиВHTML = СтрЗаменить(ТекстОшибкиВHTML, "<li style=""display:none"">", " ");
		ТекстОшибкиВHTML = СтрЗаменить(ТекстОшибкиВHTML, "</li>", "");
		ТекстОшибкиВHTML = СтрЗаменить(ТекстОшибкиВHTML, Символы.ВК + Символы.ПС, "");
		ТекстОшибкиВHTML = СтрЗаменить(ТекстОшибкиВHTML, Символы.ПС, "");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекстОшибкиВHTML) Тогда
		ТекстОшибкиВHTML = ТекстПослеПрефикса(ТекстОтвета, "<p class='error alert alert-danger' id=""errorText"">", "<")
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибкиВHTML) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстОшибки = ТекстИзHTML(ТекстОшибкиВHTML);
	ТекстОшибки = ТекстИзUTF8(ТекстОшибки);
	ВнутренняяОшибка = "An error occurred while updating the entries. See the inner exception for details.";
	Если Лев(ТекстОшибки, СтрДлина(ВнутренняяОшибка)) = ВнутренняяОшибка Тогда
		ТекстОшибки = "Произошла ошибка. Возможно, неверный формат отчета или слишком частые попытки отправки отчета.";
	КонецЕсли;
	
	Возврат СокрЛП(ТекстОшибки);
	
КонецФункции

Функция ТекстПослеПрефикса(
		ПолныйТекст,
		Префикс,
		Постфикс = "",
		ПозицияПослеПостфикса = Неопределено,
		НомерВхожденияПрефикса = 1,
		НачалоПрефикса = 0)
	
	НачалоПрефикса = НайтиНомерВхождения(ПолныйТекст, Префикс, НомерВхожденияПрефикса);
	Если НачалоПрефикса = 0 Тогда
		ПозицияПослеПостфикса = СтрДлина(ПолныйТекст) + 1;
		Возврат Неопределено;
	КонецЕсли;
	
	ДлинаПрефикса = СтрДлина(Префикс);
	Результат = Сред(ПолныйТекст, НачалоПрефикса + ДлинаПрефикса);
	ПозицияПослеПостфикса = НачалоПрефикса + ДлинаПрефикса;
	
	Если ЗначениеЗаполнено(Постфикс) Тогда
		КонецПрефикса = СтрНайти(Результат, Постфикс);
		
		Если КонецПрефикса > 0 Тогда
			Результат = Лев(Результат, КонецПрефикса - 1);
			ПозицияПослеПостфикса = НачалоПрефикса + ДлинаПрефикса + КонецПрефикса - 1 + СтрДлина(Постфикс);
		Иначе
			ПозицияПослеПостфикса = СтрДлина(ПолныйТекст) + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// отрицательный НомерВхождения - отсчитать с конца, вернется номер вхождения сначала
Функция НайтиНомерВхождения(Строка, ПодстрокаПоиска, НомерВхождения)
	
	СтрокаВыполненияПоиска = Строка;
	МассивПозиций = Новый Массив;
	ПозицияПодстрокиВИсходнойСтроке = 0;
	НомерНайденнойПодстроки = 0;
	
	Пока СтрокаВыполненияПоиска <> "" Цикл
		ПозицияПодстроки = СтрНайти(СтрокаВыполненияПоиска, ПодстрокаПоиска);
		Если ПозицияПодстроки = 0 Тогда
			Прервать;
		КонецЕсли;
		ПозицияПодстрокиВИсходнойСтроке = ПозицияПодстрокиВИсходнойСтроке + ПозицияПодстроки;
		НомерНайденнойПодстроки = НомерНайденнойПодстроки + 1;
		
		Если НомерВхождения >= 0 Тогда
			Если НомерНайденнойПодстроки >= НомерВхождения Тогда
				Возврат ПозицияПодстрокиВИсходнойСтроке;
			КонецЕсли;
			
		Иначе
			МассивПозиций.Добавить(ПозицияПодстрокиВИсходнойСтроке);
		КонецЕсли;
		
		СтрокаВыполненияПоиска = Сред(СтрокаВыполненияПоиска, ПозицияПодстроки + 1);
	КонецЦикла;
	
	Если НомерВхождения < 0 И МассивПозиций.Количество() >= - НомерВхождения Тогда
		НомерВхождения = МассивПозиций.Количество() + НомерВхождения + 1;
		Возврат МассивПозиций[НомерВхождения - 1];
	КонецЕсли;
		
	Возврат 0;
	
КонецФункции

Функция ПолучитьИнформациюОбОтчетеНаПорталеРПН(ИмяФайлаВыгрузки, ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	АдресСервера = ПараметрыОтправки.АдресСервера;
	
	АвторизацияПроизведена = (ПараметрыСоединения.СоединениеHTTP <> Неопределено);
	
	Если НЕ АвторизацияПроизведена Тогда
		
		Если ПараметрыСоединения.ИдентификаторОтправкиОператору <> 0 Тогда
			
			// устанавливаем соединение с сервером
			
			СерверПриемаОтчетности = СерверПриемаОтчетностиРПН(Ложь);
			
			Попытка
				
				ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
				ПараметрыПодключения.АдресWSDL 				= СерверПриемаОтчетности.Определение;
				ПараметрыПодключения.URIПространстваИмен 	= СерверПриемаОтчетности.URIПространстваИменСервиса;
				ПараметрыПодключения.ИмяСервиса 			= СерверПриемаОтчетности.ИмяСервиса;
				ПараметрыПодключения.ИмяТочкиПодключения 	= СерверПриемаОтчетности.ИмяТочкиПодключения;
				ПараметрыПодключения.ИмяПользователя 		= "";
				ПараметрыПодключения.Пароль 				= "";
				ПараметрыПодключения.Таймаут 				= 90;
				
				Сервис = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
				
			Исключение
				
				ПараметрыСоединения.ПовторятьСоединение = Истина;
				СообщитьПользователю(ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось установить соединение с сервером: %1'"), Символы.ПС + ИнформацияОбОшибке().Описание), ПараметрыСоединения.СообщенияПользователю);
				Возврат Неопределено;
				
			КонецПопытки;
			
			ПараметрыСоединения.СоединениеHTTP = Сервис;
			
		Иначе
			
		// очистить пароль, если в диалоге сохранения пароля не установлена галочка сохранения
		Если НЕ ПараметрыСоединения.СохранитьПароль И ЗначениеЗаполнено(ПараметрыСоединения.СохраненныйПароль) Тогда
			ЗаписатьEMailИПарольПорталаРПН(ПараметрыОтправки.Организация, , "");
			ПараметрыСоединения.СохраненныйПароль = "";
		КонецЕсли;
		
		// устанавливаем соединение с сервером
		ОписаниеОшибки = "";
		ПараметрыСоединения.СоединениеHTTP = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета("https://" + АдресСервера, ОписаниеОшибки);
		Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
			
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			СообщитьПользователю(
				СтрШаблон(
						НСтр("ru = 'Не удалось установить соединение с сервером:
                          |%1.'"), ОписаниеОшибки), ПараметрыСоединения.СообщенияПользователю);
			Возврат Неопределено;
			
		КонецЕсли;
		
		КонецЕсли;
		
		ПараметрыСоединения.ЗначениеCookie = "";
		АвторизацияПроизведена = АвторизоватьсяНаПорталеРПН(ПараметрыОтправки, ПараметрыСоединения);
		
	КонецЕсли;
	
	Если АвторизацияПроизведена Тогда
		
		ЗаголовокОтчета = НайтиЗаголовокОтчетаНаПорталеРПН(ИмяФайлаВыгрузки, ПараметрыСоединения);
		
		Если ЗаголовокОтчета <> Неопределено Тогда
			
			ПараметрыСоединения.ОписаниеОшибкиСервером = "";
			ПараметрыСоединения.ПовторятьСоединение = Ложь;
			
			Возврат ЗаголовокОтчета;
			
		КонецЕсли;
		
	Иначе
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиЗаголовокОтчетаНаПорталеРПН(ИмяФайлаВыгрузки, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	Если ПараметрыСоединения.ИдентификаторОтправкиОператору <> 0 Тогда
		
		Сервис = ПараметрыСоединения.СоединениеHTTP;
		
		Попытка
			РезультатОбработки = Сервис.Check(ПараметрыСоединения.ИдентификаторОтправкиОператору);
		Исключение
			
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			Возврат Неопределено;
			
		КонецПопытки;
		
		ЗаголовокОтчета = Новый Структура("ИдентификаторЗаписи, ИмяФайла, Состояние, ДатаЗагрузки, ДатаОбновления, ТекстСостояния",
			ПараметрыСоединения.ИдентификаторОтправкиНаСервере, ИмяФайлаВыгрузки, РезультатОбработки.Status, Неопределено, Неопределено, РезультатОбработки.Comment);
		Если РезультатОбработки.Свойства().Получить("Ticket") <> Неопределено И ЗначениеЗаполнено(РезультатОбработки.Ticket) Тогда
			ЗаголовокОтчета.ИдентификаторЗаписи = СокрЛП(РезультатОбработки.Ticket);
		КонецЕсли;
		Если РезультатОбработки.Свойства().Получить("SendAt") <> Неопределено Тогда
			ЗаголовокОтчета.ДатаЗагрузки = РезультатОбработки.SendAt;
		КонецЕсли;
		Если РезультатОбработки.Свойства().Получить("UpdatedAt") <> Неопределено Тогда
			ЗаголовокОтчета.ДатаОбновления = РезультатОбработки.UpdatedAt;
		КонецЕсли;
		
	Иначе
		
		ЗаголовкиHTTP = Новый Соответствие();
		ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
		ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
		Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
			ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
		КонецЕсли;
		
		ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
		
		Попытка
			ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.Получить("/Index/StatusGrid", ИмяФайлаОтвета, ЗаголовкиHTTP);
		Исключение
			
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
			Возврат Неопределено;
			
		КонецПопытки;
		
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "windows-1251");
		ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
		ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		
		ПозицияИдентификатора = СтрНайти(ТекстОтвета, """ticket"":""" + ПараметрыСоединения.ИдентификаторОтправкиНаСервере + """");
		Если ПозицияИдентификатора = 0 И Лев(ПараметрыСоединения.ИдентификаторОтправкиНаСервере, 5) = "*****" Тогда
			ПозицияИдентификатора = СтрНайти(ТекстОтвета, Сред(ПараметрыСоединения.ИдентификаторОтправкиНаСервере, 6) + """,""") - 15;
			Если ПозицияИдентификатора <= 0 Тогда
				ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаРПН(ТекстОтвета);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ЗаголовокОтчета = Новый Структура("ИдентификаторЗаписи, ИмяФайла, Состояние, ДатаЗагрузки, ДатаОбновления, ТекстСостояния",
			ПараметрыСоединения.ИдентификаторОтправкиНаСервере, ИмяФайлаВыгрузки, "", Неопределено, Неопределено, "");
		
		ПозицияНачала = 1;
		ПозицияВТексте = ПозицияИдентификатора;
		Пока ПозицияВТексте > 0 Цикл
			Если Сред(ТекстОтвета, ПозицияВТексте, 1) = "{" Тогда
				ПозицияНачала = ПозицияВТексте;
				Прервать;
			КонецЕсли;
			ПозицияВТексте = ПозицияВТексте - 1;
		КонецЦикла;
		
		ОжидаемыйСимволРазделителя = "{";
		СимволРазделителя = "";
		ЧасовойПоясСеанса = ЧасовойПоясСеанса();
		Пока Истина Цикл
			ИмяПараметра = СледующееЗначениеJSON(ТекстОтвета, ПозицияНачала, СимволРазделителя);
			Если СимволРазделителя <> ОжидаемыйСимволРазделителя Тогда
				Прервать;
			КонецЕсли;
			
			ЗначениеПараметра = СледующееЗначениеJSON(ТекстОтвета, ПозицияНачала, СимволРазделителя);
			Если СимволРазделителя <> ":" Тогда
				Прервать;
			КонецЕсли;
			ОжидаемыйСимволРазделителя = ",";
			
			Если ИмяПараметра = "ticket" Тогда
				ЗаголовокОтчета.ИдентификаторЗаписи = ЗначениеПараметра;
			ИначеЕсли ИмяПараметра = "status" Тогда
				ЗаголовокОтчета.Состояние = ТекстИзUTF8(ЗначениеПараметра);
				ЗаголовокОтчета.Состояние = ТекстИзСтрокиJSON(ЗаголовокОтчета.Состояние, " ");
			ИначеЕсли ИмяПараметра = "uploadDate" Тогда
				ЗаголовокОтчета.ДатаЗагрузки = ДатаИзСтрокиРазныхФорматов(ЗначениеПараметра);
				Если ТипЗнч(ЗаголовокОтчета.ДатаЗагрузки) = Тип("Дата") Тогда
					ЗаголовокОтчета.ДатаЗагрузки = МестноеВремя(ЗаголовокОтчета.ДатаЗагрузки, ЧасовойПоясСеанса);
					ЗаголовокОтчета.ДатаЗагрузки = МестноеВремя(ЗаголовокОтчета.ДатаЗагрузки, ЧасовойПоясСеанса); // коррекция ошибки на портале
				КонецЕсли;
			ИначеЕсли ИмяПараметра = "changeDate" Тогда
				ЗаголовокОтчета.ДатаОбновления = ДатаИзСтрокиРазныхФорматов(ЗначениеПараметра);
				Если ТипЗнч(ЗаголовокОтчета.ДатаОбновления) = Тип("Дата") Тогда
					ЗаголовокОтчета.ДатаОбновления = МестноеВремя(ЗаголовокОтчета.ДатаОбновления, ЧасовойПоясСеанса);
					ЗаголовокОтчета.ДатаОбновления = МестноеВремя(ЗаголовокОтчета.ДатаОбновления, ЧасовойПоясСеанса); // коррекция ошибки на портале
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(ЗаголовокОтчета.Состояние) Тогда
			ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаРПН(ТекстОтвета);
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗаголовокОтчета.ДатаОбновления) Тогда
			ЗаголовокОтчета.ДатаОбновления = ЗаголовокОтчета.ДатаЗагрузки;
		КонецЕсли;
		
		// чтение подробного комментария
		
		ЗаголовкиHTTP = Новый Соответствие();
		ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
		ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
		Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
			ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
		КонецЕсли;
		
		ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
		
		Попытка
			ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.Получить("/Index/PrintPage?ticket=" + ПараметрыСоединения.ИдентификаторОтправкиНаСервере,
				ИмяФайлаОтвета, ЗаголовкиHTTP);
		Исключение
			
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
			Возврат Неопределено;
			
		КонецПопытки;
		
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
		ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		
		ЗаголовокОтчета.ТекстСостояния = ТекстПослеПрефикса(ТекстОтвета, "html(marked('", "'))");
		ЗаголовокОтчета.ТекстСостояния = СтрЗаменить(ЗаголовокОтчета.ТекстСостояния, ".\n", ". ");
		ЗаголовокОтчета.ТекстСостояния = СтрЗаменить(ЗаголовокОтчета.ТекстСостояния, "\n", "");
		ЗаголовокОтчета.ТекстСостояния = СтрЗаменить(ЗаголовокОтчета.ТекстСостояния, "### ", "");
		ЗаголовокОтчета.ТекстСостояния = СтрЗаменить(ЗаголовокОтчета.ТекстСостояния, Символы.ВК + Символы.ПС, " ");
		ЗаголовокОтчета.ТекстСостояния = ТекстИзHTML(ЗаголовокОтчета.ТекстСостояния);
		
		Если НЕ ЗначениеЗаполнено(ЗаголовокОтчета.ТекстСостояния) Тогда
			ЗаголовокОтчета.ТекстСостояния = ЗаголовокОтчета.Состояние;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Служебные функции РПН

Функция СерверПриемаОтчетностиРПН(ОбменНапрямую) Экспорт
	
	Если НЕ ОбменНапрямую Тогда
	
		Результат = Новый Структура("Определение, URIПространстваИменСервиса, ИмяСервиса, ИмяТочкиПодключения",
			"http://213.171.56.46/rpn?wsdl", "tns", "RpnReportService", "RpnReportService");
		
		Возврат Результат;

	Иначе
	
		Если ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования() Тогда
		// Возвращаем адрес тестового сервера
		Возврат "rpn.gov.ru:8090";
		
	Иначе
		// Возвращаем адрес реального сервера
		Возврат "pnv-rpn.ru";
		
	КонецЕсли;
	
	КонецЕсли;
	
КонецФункции

Функция НастройкиРПН(Знач ОрганизацияСсылка, Знач ПолучитьПараметрыОнлайнПроверки = Ложь) Экспорт
	
	Результат = Новый Структура("ИспользоватьОбмен, СертификатАбонентаОтпечаток, СертификатРПНОтпечаток, EMail, Пароль, ИспользоватьАвтонастройку, ОбменНапрямую", Ложь, "", "", "", "", Ложь, Ложь);
	
	Если ПолучитьПараметрыОнлайнПроверки Тогда
		СвойстваОрганизации = ЗначенияРеквизитовОбъекта(ОрганизацияСсылка, "ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
		
		Результат.Вставить("УчетнаяЗаписьОбмена", СвойстваОрганизации.УчетнаяЗаписьОбмена);
		Результат.Вставить("НастроенОбменВУниверсальномФормате", СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
			И ЗначениеЗаполнено(СвойстваОрганизации.УчетнаяЗаписьОбмена));
		
		Попытка
			ОбменИОнлайнПроверкаВключены = Результат.НастроенОбменВУниверсальномФормате И НЕ СвойстваОрганизации.УчетнаяЗаписьОбмена.ОбменНапрямую И СвойстваОрганизации.УчетнаяЗаписьОбмена.ИспользоватьСервисОнлайнПроверкиОтчетов;
		Исключение
			ОбменИОнлайнПроверкаВключены = Ложь;
		КонецПопытки;
		
		Результат.Вставить("ОнлайнПроверкаДоступна", ОбменИОнлайнПроверкаВключены И СвойстваОрганизации.УчетнаяЗаписьОбмена.СпецоператорСвязи <> Перечисления.СпецоператорыСвязи.Такском И СтрНайти(";" + ВРег(СокрЛП(ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(СвойстваОрганизации.УчетнаяЗаписьОбмена.СпецоператорСвязи, "ОнлайнПроверкаКонтролирующиеОрганы"))) + ";", ";РПН;") > 0);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				   |	НастройкиОбменаРПН.ИспользоватьОбмен КАК ИспользоватьОбмен,
				   |	НастройкиОбменаРПН.СертификатАбонентаОтпечаток КАК СертификатАбонентаОтпечаток,
				   |	НастройкиОбменаРПН.СертификатРПНОтпечаток КАК СертификатРПНОтпечаток,
				   |	НастройкиОбменаРПН.EMail КАК EMail,
				   |	НастройкиОбменаРПН.Пароль КАК Пароль,
				   |	НастройкиОбменаРПН.ИспользоватьАвтонастройку КАК ИспользоватьАвтонастройку,
				   |	НастройкиОбменаРПН.ОбменНапрямую КАК ОбменНапрямую
				   |ИЗ
				   |	РегистрСведений.НастройкиОбменаРПН КАК НастройкиОбменаРПН
				   |ГДЕ
				   |	НастройкиОбменаРПН.Организация = &ОрганизацияСсылка";
	Запрос.УстановитьПараметр("ОрганизацияСсылка", ОрганизацияСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЗаписьЗапроса = РезультатЗапроса.Выгрузить()[0];
		Если ЗаписьЗапроса.ИспользоватьОбмен Тогда
			
			Результат.ИспользоватьОбмен = ЗаписьЗапроса.ИспользоватьОбмен;
			Результат.СертификатАбонентаОтпечаток = СокрЛП(ЗаписьЗапроса.СертификатАбонентаОтпечаток);
			Результат.СертификатРПНОтпечаток = СокрЛП(ЗаписьЗапроса.СертификатРПНОтпечаток);
			Результат.EMail = СокрЛП(ЗаписьЗапроса.EMail);
			Результат.Пароль = СокрЛП(ЗаписьЗапроса.Пароль);
			Результат.ИспользоватьАвтонастройку = ЗаписьЗапроса.ИспользоватьАвтонастройку;
			Результат.ОбменНапрямую = (ЗаписьЗапроса.ОбменНапрямую = Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваОбменаОрганизацииДляРПН(Знач ОрганизацияСсылка, Знач ОпределитьНастроенностьОбменаВУниверсальномФормате, Знач ПолучитьОсновныеСвойстваПоследнейОтправки, Знач ОтправкаСсылка = Неопределено, ОтчетСсылка = Неопределено, ПараметрыПолученияИнформацииОбОтчете = Неопределено, СвойстваПоследнейОтправки = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НастроенОбменВУниверсальномФормате", 	Неопределено);
	Результат.Вставить("СвойстваОтправки", 						Неопределено);
	Результат.Вставить("НастройкиОбмена", 						Неопределено);
	Результат.Вставить("ОрганизацияИзОтправки", 				Неопределено);
	Результат.Вставить("ПравоИзмененияУчетнойЗаписи", 			Неопределено);
	Результат.Вставить("ЭтоРегламентированныйОтчет", 			Неопределено);
	Результат.Вставить("ЭтоРегламентированноеУведомление", 		Неопределено);
	Результат.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", 	Неопределено);
	Результат.Вставить("ЭтоНеподписываемыйОтчет", 				Неопределено);
	Результат.Вставить("БумажнаяПодачаОтчета", 					Неопределено);
	
	Если ОрганизацияСсылка = Неопределено Тогда
		
		ОрганизацияСсылка = ОтправкаСсылка.Организация;
		Результат.ОрганизацияИзОтправки = ОрганизацияСсылка;
		
	КонецЕсли;
	
	Результат.ЭтоЭлектроннаяПодписьВМоделиСервиса = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ЭтоЭлектроннаяПодписьВМоделиСервиса(ОрганизацияСсылка);
	
	Если ОпределитьНастроенностьОбменаВУниверсальномФормате Тогда
		
		СвойстваОрганизации = ЗначенияРеквизитовОбъекта(ОрганизацияСсылка, "ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
		
		Результат.НастроенОбменВУниверсальномФормате = (СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
			И ЗначениеЗаполнено(СвойстваОрганизации.УчетнаяЗаписьОбмена));
		
	КонецЕсли;
	
	Если ПолучитьОсновныеСвойстваПоследнейОтправки Тогда
		
		Если ОтчетСсылка <> Неопределено Тогда
		СвойстваОтправки = ПолучитьОсновныеСвойстваПоследнейОтправкиОтчетаВРПН(ОтчетСсылка);
		Если СвойстваОтправки <> Неопределено Тогда
				Результат.СвойстваОтправки = Новый Структура("Ссылка, Идентификатор, ИмяФайлаПакета, Статус, СтатусПроверкиНаПортале, ИдентификаторОтправкиОператору",
					СвойстваОтправки.Ссылка, СвойстваОтправки.Идентификатор, СвойстваОтправки.ИмяФайлаПакета, СвойстваОтправки.Статус, СвойстваОтправки.СтатусПроверкиНаПортале, СвойстваОтправки.ИдентификаторОтправкиОператору);
			КонецЕсли;
			
		ИначеЕсли ОтправкаСсылка <> Неопределено Тогда
			Результат.СвойстваОтправки = Новый Структура("Ссылка, Идентификатор, ИмяФайлаПакета, Статус, СтатусПроверкиНаПортале, ИдентификаторОтправкиОператору",
				ОтправкаСсылка.Ссылка, ОтправкаСсылка.ИдентификаторОтправкиНаСервере, ОтправкаСсылка.ИмяФайлаПакета, ОтправкаСсылка.СтатусОтправки, ОтправкаСсылка.СтатусПроверкиНаПортале, ОтправкаСсылка.ИдентификаторОтправкиОператору);
		КонецЕсли;
		
		Если Результат.СвойстваОтправки <> Неопределено И НЕ ЗначениеЗаполнено(Результат.СвойстваОтправки.ИдентификаторОтправкиОператору) Тогда
			Результат.СвойстваОтправки.ИдентификаторОтправкиОператору = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.НастройкиОбмена = НастройкиРПН(ОрганизацияСсылка);
	
	Результат.ПравоИзмененияУчетнойЗаписи = ПравоДоступа("Изменение", Метаданные.Справочники.УчетныеЗаписиДокументооборота);
	
	Если ОтчетСсылка <> Неопределено ИЛИ ОтправкаСсылка <> Неопределено Тогда
		
		СсылкаНаОтчет = ?(ОтчетСсылка <> Неопределено, ОтчетСсылка, ОтправкаСсылка.ОтчетСсылка);
		ТипЗнчСсылкаНаОтчет = ТипЗнч(СсылкаНаОтчет);
		Результат.ЭтоРегламентированныйОтчет = (ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка.РегламентированныйОтчет") ИЛИ ТипЗнчСсылкаНаОтчет = Тип("Неопределено"));
		Результат.ЭтоРегламентированноеУведомление = (ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения"));
		
		Если ПараметрыПолученияИнформацииОбОтчете = Неопределено ИЛИ НЕ ПараметрыПолученияИнформацииОбОтчете.ОтключитьОпределениеНеподписываемыхОтчетов Тогда
			Если Результат.ЭтоРегламентированныйОтчет Тогда
				ВидОтчета = Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", СсылкаНаОтчет.ИсточникОтчета);
				
			ИначеЕсли Результат.ЭтоРегламентированноеУведомление Тогда
				ВидОтчета = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьВидОтправляемогоДокументаПоСсылке(СсылкаНаОтчет);
				
			Иначе // электронные представления
				ВидОтчета = СсылкаНаОтчет.ВидОтчета;
			КонецЕсли;
			
			Результат.БумажнаяПодачаОтчета = (ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ОтходыСубъектовМСП);
		КонецЕсли;
		
	ИначеЕсли ПараметрыПолученияИнформацииОбОтчете <> Неопределено И НЕ ПараметрыПолученияИнформацииОбОтчете.ОтключитьОпределениеНеподписываемыхОтчетов Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыПолученияИнформацииОбОтчете.ВидОтчетаФормыЭлектронногоПредставления) Тогда
			Результат.БумажнаяПодачаОтчета = (СтрНайти(ПараметрыПолученияИнформацииОбОтчете.ИмяФормы, "ОтходыСубъектовМСП") > 0);
			
		Иначе // электронные представления
			Результат.БумажнаяПодачаОтчета = (ПараметрыПолученияИнформацииОбОтчете.ВидОтчетаФормыЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.ОтходыСубъектовМСП);
		КонецЕсли;
		
		КонецЕсли;
		
	Если ПараметрыПолученияИнформацииОбОтчете = Неопределено ИЛИ НЕ ПараметрыПолученияИнформацииОбОтчете.ОтключитьОпределениеНеподписываемыхОтчетов Тогда
		СвойстваОтправки = ?(Результат.СвойстваОтправки <> Неопределено, Результат.СвойстваОтправки, СвойстваПоследнейОтправки);
		ОбменНапрямую = (СвойстваОтправки = Неопределено И Результат.НастройкиОбмена.ОбменНапрямую) ИЛИ (СвойстваОтправки <> Неопределено И СвойстваОтправки.ИдентификаторОтправкиОператору = 0);
		Результат.ЭтоНеподписываемыйОтчет = ОбменНапрямую И Результат.БумажнаяПодачаОтчета;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьEMailИПарольПорталаРПН(Организация, EMail = Неопределено, Пароль = "")
	
	Попытка
		
		МенеджерЗаписи = РегистрыСведений.НастройкиОбменаРПН.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			Если МенеджерЗаписи.ИспользоватьОбмен <> Истина Тогда
				МенеджерЗаписи.ИспользоватьОбмен = Истина;
				МенеджерЗаписи.ИспользоватьАвтонастройку = Ложь;
			КонецЕсли;
			Если EMail <> Неопределено Тогда
				МенеджерЗаписи.EMail = EMail;
			КонецЕсли;
			МенеджерЗаписи.Пароль = Пароль;
			МенеджерЗаписи.Записать();
			
		ИначеЕсли ЗначениеЗаполнено(EMail) ИЛИ ЗначениеЗаполнено(Пароль) Тогда
			МенеджерЗаписи.Организация = Организация;
			МенеджерЗаписи.ИспользоватьОбмен = Истина;
			МенеджерЗаписи.СертификатАбонентаОтпечаток = "";
			МенеджерЗаписи.СертификатРПНОтпечаток = "";
			МенеджерЗаписи.ИспользоватьАвтонастройку = Ложь;
			МенеджерЗаписи.EMail = Строка(EMail);
			МенеджерЗаписи.Пароль = Пароль;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция УспешноОбработанОтчетРПН(ИдентификаторЗаписи, СтрокаСостояния, ПройденаПроверкаНаПортале = Неопределено)
	
	Если СтрокаСостояния = "Обработан" ИЛИ Лев(ИдентификаторЗаписи, 5) <> "*****" Тогда
		ПройденаПроверкаНаПортале = Истина;
	Иначе
		ПройденаПроверкаНаПортале = Неопределено;
	КонецЕсли;
	
	ПрефиксОшибка = "Ошибка";
	ДлинаПрефиксаОшибка = СтрДлина(ПрефиксОшибка);
	ПрефиксОтклонен = "Отклон";
	ДлинаПрефиксаОтклонен = СтрДлина(ПрефиксОтклонен);
	ПрефиксНеПринят = "Не принят";
	ДлинаПрефиксаНеПринят = СтрДлина(ПрефиксНеПринят);
	ПрефиксНеУтвержден = "Не утвержд";
	ДлинаПрефиксаНеУтвержден = СтрДлина(ПрефиксНеУтвержден);
	ПрефиксНекорректный = "Некорректн";
	ДлинаПрефиксаНекорректный = СтрДлина(ПрефиксНекорректный);
	ПрефиксОтчетОтклонен = "Отчет отклон";
	ДлинаПрефиксаОтчетОтклонен = СтрДлина(ПрефиксОтчетОтклонен);
	ПрефиксОтчетНеПринят = "Отчет не принят";
	ДлинаПрефиксаОтчетНеПринят = СтрДлина(ПрефиксОтчетНеПринят);
	ПрефиксОтчетНеУтвержден = "Отчет не утвержд";
	ДлинаПрефиксаОтчетНеУтвержден = СтрДлина(ПрефиксОтчетНеУтвержден);
	ПрефиксЗаявкаУстарела = "Заявка устарела";
	ДлинаПрефиксаЗаявкаУстарела = СтрДлина(ПрефиксЗаявкаУстарела);
	ПрефиксЗаявкаНеПрошла = "Заявка не прошла";
	ДлинаПрефиксаЗаявкаНеПрошла = СтрДлина(ПрефиксЗаявкаНеПрошла);
	ПрефиксУтвержден = "Утвержд";
	ДлинаПрефиксаУтвержден = СтрДлина(ПрефиксУтвержден);
	ПрефиксПринят = "Принят";
	ДлинаПрефиксаПринят = СтрДлина(ПрефиксПринят);
	ПрефиксСдан = "Сдан";
	ДлинаПрефиксаСдан = СтрДлина(ПрефиксСдан);
	ПрефиксОтчетУтвержден = "Отчет утвержд";
	ДлинаПрефиксаОтчетУтвержден = СтрДлина(ПрефиксОтчетУтвержден);
	ПрефиксОтчетПринят = "Отчет принят";
	ДлинаПрефиксаОтчетПринят = СтрДлина(ПрефиксОтчетПринят);
	ПрефиксОтчетСдан = "Отчет сдан";
	ДлинаПрефиксаОтчетСдан = СтрДлина(ПрефиксОтчетСдан);
	ПрефиксОтчетЗагруженВоФГИС = "Отчет загружен во ФГИС";
	ДлинаПрефиксаОтчетЗагруженВоФГИС = СтрДлина(ПрефиксОтчетЗагруженВоФГИС);
	ПрефиксОтчетСЭПЗагруженВоФГИС = "Отчет с ЭП принят и загружен во ФГИС";
	ДлинаПрефиксаОтчетСЭПЗагруженВоФГИС = СтрДлина(ПрефиксОтчетСЭПЗагруженВоФГИС);
	ПрефиксЗаявкаУтверждена = "Заявка утвержд";
	ДлинаПрефиксаЗаявкаУтверждена = СтрДлина(ПрефиксЗаявкаУтверждена);
	ПрефиксЗаявкаПринята = "Заявка принят";
	ДлинаПрефиксаЗаявкаПринята = СтрДлина(ПрефиксЗаявкаПринята);
	ПрефиксЗаявкаЗагружена = "Заявка загружен";
	ДлинаПрефиксаЗаявкаЗагружена = СтрДлина(ПрефиксЗаявкаЗагружена);
	
	Если Лев(СтрокаСостояния, ДлинаПрефиксаОшибка) = ПрефиксОшибка ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаОтклонен) = ПрефиксОтклонен
		ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаНеПринят) = ПрефиксНеПринят ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаНеУтвержден) = ПрефиксНеУтвержден
		ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаНекорректный) = ПрефиксНекорректный ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаОтчетОтклонен) = ПрефиксОтчетОтклонен
		ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаОтчетНеПринят) = ПрефиксОтчетНеПринят ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаОтчетНеУтвержден) = ПрефиксОтчетНеУтвержден
		ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаЗаявкаУстарела) = ПрефиксЗаявкаУстарела ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаЗаявкаНеПрошла) = ПрефиксЗаявкаНеПрошла Тогда
		
		Если ПройденаПроверкаНаПортале <> Истина Тогда
			ПройденаПроверкаНаПортале = Ложь;
		КонецЕсли;
		Возврат Ложь;
		
	ИначеЕсли (Лев(СтрокаСостояния, ДлинаПрефиксаУтвержден) = ПрефиксУтвержден ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаПринят) = ПрефиксПринят
		ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаСдан) = ПрефиксСдан ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаОтчетУтвержден) = ПрефиксОтчетУтвержден
		ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаОтчетПринят) = ПрефиксОтчетПринят ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаОтчетСдан) = ПрефиксОтчетСдан
		ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаОтчетЗагруженВоФГИС) = ПрефиксОтчетЗагруженВоФГИС ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаОтчетСЭПЗагруженВоФГИС) = ПрефиксОтчетСЭПЗагруженВоФГИС
		ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаЗаявкаУтверждена) = ПрефиксЗаявкаУтверждена ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаЗаявкаПринята) = ПрефиксЗаявкаПринята
		ИЛИ Лев(СтрокаСостояния, ДлинаПрефиксаЗаявкаЗагружена) = ПрефиксЗаявкаЗагружена) И ПройденаПроверкаНаПортале = Истина Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЕстьВозможностьАвтонастройкиВУниверсальномФормате(Организация, ВернутьСвойстваОрганизацииИУчетнойЗаписи = Ложь) Экспорт
	
	Результат = Ложь;
	СвойстваОрганизации = Неопределено;
	СвойстваУчетнойЗаписи = Неопределено;
	Если Организация <> Неопределено И Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		СвойстваОрганизации = ЗначенияРеквизитовОбъекта(Организация, "ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
		Если СвойстваОрганизации <> Неопределено И СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
			И ЗначениеЗаполнено(СвойстваОрганизации.УчетнаяЗаписьОбмена) Тогда
			
			Попытка
				СвойстваУчетнойЗаписи = ЗначенияРеквизитовОбъекта(СвойстваОрганизации.УчетнаяЗаписьОбмена, "СпецоператорСвязи, РежимАвтонастройки");
				
				Результат = СвойстваУчетнойЗаписи.СпецоператорСвязи <> Перечисления.СпецоператорыСвязи.Такском
					И СвойстваУчетнойЗаписи.СпецоператорСвязи <> Перечисления.СпецоператорыСвязи.Прочие
					И СвойстваУчетнойЗаписи.РежимАвтонастройки <> Перечисления.РежимыАвтонастройкиУчетнойЗаписиНалогоплательщика.Отключена;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ВернутьСвойстваОрганизацииИУчетнойЗаписи Тогда
		СвойстваОрганизацииИУчетнойЗаписи = Новый Структура;
		СвойстваОрганизацииИУчетнойЗаписи.Вставить("ЕстьВозможностьАвтонастройкиВУниверсальномФормате", Результат);
		СвойстваОрганизацииИУчетнойЗаписи.Вставить("ВидОбменаСКонтролирующимиОрганами", 				Неопределено);
		СвойстваОрганизацииИУчетнойЗаписи.Вставить("УчетнаяЗаписьОбмена", 								Неопределено);
		СвойстваОрганизацииИУчетнойЗаписи.Вставить("СпецоператорСвязи", 								Неопределено);
		СвойстваОрганизацииИУчетнойЗаписи.Вставить("РежимАвтонастройки", 								Неопределено);
		
		Если СвойстваОрганизации <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СвойстваОрганизацииИУчетнойЗаписи, СвойстваОрганизации);
		КонецЕсли;
		Если СвойстваУчетнойЗаписи <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СвойстваОрганизацииИУчетнойЗаписи, СвойстваУчетнойЗаписи);
		КонецЕсли;
		
		Возврат СвойстваОрганизацииИУчетнойЗаписи;
		
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПараметрыИнтернета() Экспорт
	
	ПараметрыСервераИнтернета = Новый Структура("URLСервера, КаталогФайловНаСервере, ИмяКлючевогоФайлаНаСервере");
	ПараметрыСервераИнтернета.URLСервера = "downloads.1c.ru";
	ПараметрыСервераИнтернета.КаталогФайловНаСервере = "/RO_OnlineServices/XCHG_FNS";
	Если ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования() Тогда
		ПараметрыСервераИнтернета.КаталогФайловНаСервере = ПараметрыСервераИнтернета.КаталогФайловНаСервере + "/Test"; 
	КонецЕсли;
	ПараметрыСервераИнтернета.ИмяКлючевогоФайлаНаСервере = "/infomap.dat";
	Возврат ПараметрыСервераИнтернета;
	
КонецФункции

Функция КнопкаОбновленияВЗаявленииНаПодключениеДоступна(Ссылка) Экспорт

	КнопкаДоступна = Истина;
	
	КнопкаДоступна = ЗначениеЗаполнено(Ссылка.Статус)
		И Ссылка.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено
		ИЛИ Ссылка.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено
		И НЕ Ссылка.НастройкаЗавершена
		ИЛИ Ссылка.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено
		И НЕ Ссылка.НастройкаЗавершена;
	
	Возврат КнопкаДоступна;
	
КонецФункции

Функция ПолучитьКодВидаДокументаФизическогоЛицаПредопределенного(Ссылка) Экспорт
	
	ИмяПредопределенного = Справочники.ВидыДокументовФизическихЛиц.ПолучитьИмяПредопределенного(Ссылка);
	
	Если ИмяПредопределенного = "ПаспортРФ" Тогда
		Возврат "21";
	ИначеЕсли ИмяПредопределенного = "ВодительскоеУдостоверение" Тогда
		Возврат "91";
	ИначеЕсли ИмяПредопределенного = "ВоенныйБилет" Тогда
		Возврат "07";
	ИначеЕсли ИмяПредопределенного = "ВоенныйБилетОфицераЗапаса" Тогда
		Возврат "27";
	ИначеЕсли ИмяПредопределенного = "ДипломатическийПаспорт" Тогда
		Возврат "09";
	ИначеЕсли ИмяПредопределенного = "ЗагранпаспортРФ" Тогда
		Возврат "22";
	ИначеЕсли ИмяПредопределенного = "ЗагранпаспортСССР" Тогда
		Возврат "02";
	ИначеЕсли ИмяПредопределенного = "ПаспортСССР" Тогда
		Возврат "01";
	ИначеЕсли ИмяПредопределенного = "ПаспортМинморфлота" Тогда
		Возврат "06";
	ИначеЕсли ИмяПредопределенного = "ПаспортМоряка" Тогда
		Возврат "26";
	ИначеЕсли ИмяПредопределенного = "СвидетельствоОРождении" Тогда
		Возврат "03";
	ИначеЕсли ИмяПредопределенного = "УдостоверениеОфицера" Тогда
		Возврат "04";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКодВидаДокументаФизическогоЛица(Знач ДокументФизическогоЛица) Экспорт
	
	Если ДокументФизическогоЛица = Перечисления.ВидыУдостоверенийВладельцаЭП.ПаспортРФ Тогда
		Возврат "21";
	ИначеЕсли ДокументФизическогоЛица = Перечисления.ВидыУдостоверенийВладельцаЭП.ИностранныйПаспорт Тогда
		Возврат "10";
	ИначеЕсли ДокументФизическогоЛица = Перечисления.ВидыУдостоверенийВладельцаЭП.ПустаяСсылка() Тогда
		Возврат "91";
	Иначе
	
		Если ДокументФизическогоЛица.Предопределенный Тогда
			КодИМНС = ПолучитьКодВидаДокументаФизическогоЛицаПредопределенного(ДокументФизическогоЛица);
			Если НЕ ПустаяСтрока(КодИМНС) Тогда
				Возврат КодИМНС;
			КонецЕсли;
		КонецЕсли;
		
		Макет = ПолучитьМакетОбработки("ВидыИКодыДокументовФизическихЛиц");
		ДокументФизическогоЛица = СокрЛП(ДокументФизическогоЛица);
		
		Для Инд = 1 По Макет.ВысотаТаблицы Цикл
			ТекРегион = СокрЛП(Макет.Область(Инд, 2, Инд, 2).Текст);
			
			Если НРег(ТекРегион) = НРег(ДокументФизическогоЛица) Тогда
				Возврат СокрЛП(Макет.Область(Инд, 1, Инд, 1).Текст);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат "91";
	
КонецФункции

Функция ПроверитьАдресОрганизацииЗаявления(
		ЗначениеАдреса, 
		РеквизитФормыАдреса, 
		ПредставлениеАдреса, 
		ПредставлениеАдресаРодительныйПадеж, 
		МастерДалее,
		ТихийРежим = Ложь,
		ПроверятьТолькоНаПустоту = Ложь) Экспорт
		
	ТекстОшибки 	  = "";
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = РеквизитФормыАдреса;
		
	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначениеАдреса);
	
	Если ПустаяСтрока(СтрЗаменить(ЗначениеАдреса,",","")) Тогда
		
		ТекстОшибки = НСтр("ru = 'Заполните поле ""%1""'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПредставлениеАдреса);
			
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Пустой	  = Истина;
		
	КонецЕсли;

	Если Не ПроверятьТолькоНаПустоту Тогда
		
		Если ЭтоАдресПоФИАСу Тогда
			
			// - Какая максимальная длина полей 2.5.4.7, 2.5.4.8 и 2.5.4.9 ?
			// - 128 символов для всех.
			
			НаименованиеСубъектаРФ = ПолеСертификата_2_5_4_8(ЗначениеАдреса);
			Если НЕ ЗначениеЗаполнено(НаименованиеСубъектаРФ) Тогда
				РезультатПроверки.ТекстОшибки = СтрШаблон(НСтр("ru = '%1: не удалось определить субъект РФ'"), ПредставлениеАдреса);
			КонецЕсли;
			
			НаименованиеНаселенногоПункта = ПолеСертификата_2_5_4_7(ЗначениеАдреса);
			Если НЕ ЗначениеЗаполнено(НаименованиеНаселенногоПункта) Тогда
				РезультатПроверки.ТекстОшибки = СтрШаблон(НСтр("ru = '%1: не удалось определить город или населенный пункт'"), ПредставлениеАдреса);
			КонецЕсли;
			
			АдресМестаНахождения = ПолеСертификата_2_5_4_9(ЗначениеАдреса);
			Если СтрДлина(АдресМестаНахождения) > 128 Тогда
				
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Часть %1 ""%2"" превышает допустимые 128 символов.
					|Сократите длину адреса, убрав некоторые его части (например, оставив только дом и корпус).'"), 
					НРег(ПредставлениеАдресаРодительныйПадеж), АдресМестаНахождения);
						
				РезультатПроверки.ТекстОшибки = ТекстОшибки;
				
			КонецЕсли;
			
		Иначе
			
			СтрокаОшибкаАдреса = ПроверитьАдрес(ЗначениеАдреса);
			Если НЕ ПустаяСтрока(СтрокаОшибкаАдреса) Тогда
				
				ТекстОшибки = НСтр("ru = '%1: %2'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ПредставлениеАдреса, СтрокаОшибкаАдреса);
				РезультатПроверки.ТекстОшибки = ТекстОшибки;
				
			ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
					ЗначениеАдреса, 
					ПредставлениеАдреса, 
					РеквизитФормыАдреса,
					Истина, 
					ТекстОшибки) Тогда
					
				РезультатПроверки.ТекстОшибки = ТекстОшибки;
				
			Иначе
				
				ПредставлениеАдресаРодительныйПадеж = НРег(ПредставлениеАдресаРодительныйПадеж);
				
				СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(ЗначениеАдреса);
				
				ТекстОшибки = "";
				
				ЕстьОшибка = Ложь;
				
				ПроверитьЧастьАдреса(СтруктураАдреса.Индекс, 6, ПредставлениеАдресаРодительныйПадеж, РеквизитФормыАдреса, ЕстьОшибка);
				
				ПроверитьЧастьАдреса(СтруктураАдреса.Район, 50, ПредставлениеАдресаРодительныйПадеж, РеквизитФормыАдреса, ЕстьОшибка);
				ПроверитьЧастьАдреса(СтруктураАдреса.Город, 50, ПредставлениеАдресаРодительныйПадеж, РеквизитФормыАдреса, ЕстьОшибка);
				ПроверитьЧастьАдреса(СтруктураАдреса.НаселенныйПункт, 50, ПредставлениеАдресаРодительныйПадеж, РеквизитФормыАдреса, ЕстьОшибка);
				ПроверитьЧастьАдреса(СтруктураАдреса.Улица, 50, ПредставлениеАдресаРодительныйПадеж, РеквизитФормыАдреса, ЕстьОшибка);
				
				ПроверитьЧастьАдреса(СтруктураАдреса.Квартира, 8, ПредставлениеАдресаРодительныйПадеж, РеквизитФормыАдреса, ЕстьОшибка);
				ПроверитьЧастьАдреса(СтруктураАдреса.Дом, 8, ПредставлениеАдресаРодительныйПадеж, РеквизитФормыАдреса, ЕстьОшибка);
				ПроверитьЧастьАдреса(СтруктураАдреса.Корпус, 8, ПредставлениеАдресаРодительныйПадеж, РеквизитФормыАдреса, ЕстьОшибка);
				
				// Вывод ошибки
				Если ЕстьОшибка Тогда
					
					ТекстОшибки = НСтр("ru = 'Сократите длину %1 организации, убрав некоторые его части (например, оставив только дом и корпус).'");
					ТекстОшибки = СтрШаблон(ТекстОшибки, ПредставлениеАдресаРодительныйПадеж);
					РезультатПроверки.ТекстОшибки = ТекстОшибки;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, НЕ ТихийРежим);
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьЧастьАдреса(
		ФрагментАдреса, 
		МаксимальнаяДлинаФрагмента, 
		ПредставлениеАдресаРодительныйПадеж, 
		РеквизитФормыАдреса, 
		ЕстьОшибка,
		ТихийРежим = Ложь)
	
	Если СтрДлина(ФрагментАдреса) > МаксимальнаяДлинаФрагмента Тогда
		
		Если ТихийРежим Тогда
			МастерДалее = Ложь;
		Иначе
			
			ТекстОшибки = НСтр("ru = 'Часть %1 ""%2"" превышает допустимые %3 символов.'");
			
			ТекстОшибки = СтрШаблон(ТекстОшибки, 
				НРег(ПредставлениеАдресаРодительныйПадеж), 
				ФрагментАдреса, 
				Строка(МаксимальнаяДлинаФрагмента));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,РеквизитФормыАдреса);
			
			ЕстьОшибка = Истина;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьАдрес(СтрокаАдреса)  Экспорт
	
	СтрокаОшибки = "";
	
	Если ТипЗнч(СтрокаАдреса)=Тип("Строка") Тогда
		
		СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(СтрокаАдреса);
		
		Если СтруктураАдреса.Количество()  >= 9 Тогда 
			
			Если СтрДлина(СтруктураАдреса.Индекс)=0 ИЛИ СтрДлина(СтруктураАдреса.Индекс) = 6 Тогда
				
			Иначе
				
				СтрокаОшибки = "индекс либо 6 цифр, либо не заполнять.";
				
			КонецЕсли;
			
			Если ПустаяСтрока(СтруктураАдреса.Регион) Тогда
				СтрокаОшибки = "не указан регион";
			ИначеЕсли НЕ СтрДлина(СтруктураАдреса.Регион) = 2 Тогда
				СтрокаОшибки = "не удалось определить код региона по его наименованию";
			КонецЕсли;
		Иначе
			СтрокаОшибки = "Неизвестный формат адреса.";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаОшибки;
	
КонецФункции

Функция ОрганизацияПодключенаКИнспекции(СсылкаНаОбъект) Экспорт

	СведенияОбОбъекте 	= СведенияПоОтправляемымОбъектам(СсылкаНаОбъект);
	Организация			= СведенияОбОбъекте.Организация;
	УчетнаяЗапись 		= УчетнаяЗаписьОрганизации(Организация);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Истина; 
	КонецЕсли;
	
	Если УчетнаяЗапись.СпецоператорСвязи <> Перечисления.СпецоператорыСвязи.КалугаАстрал Тогда
		// У других операторов нет файлов автонастройки и не заполняется данный регистр.
		Возврат Истина; 
	КонецЕсли;
	
	КодПолучателя = СведенияОбОбъекте.КодКонтролирующегоОргана;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.ТипПолучателя КАК ТипПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КодПолучателя КАК КодПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КПП КАК КПП
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписиПолучатели КАК ДополнительныеРеквизитыУчетнойЗаписиПолучатели
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.УчетнаяЗапись = &УчетнаяЗапись
		|	И ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КодПолучателя = &КодПолучателя
		|	И ДополнительныеРеквизитыУчетнойЗаписиПолучатели.ТипПолучателя = Значение(Перечисление.ТипыКонтролирующихОрганов.ФНС)";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("КодПолучателя", КодПолучателя);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#Область РазборИВыводАктаСверкиСФНСвФорматеXML

// Функция - разбирает акт сверки с ФНС в формате XML, по данным файла создает структуру данных.
//
// Параметры:
//  АдресХранилища	 - 	Строка - адрес хранилища XML файла.
// 
// Возвращаемое значение:
//  Структура - данные акта сверки с ФНС.
//
Функция РазборАктаСверкиВФорматеXML(АдресХранилища) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Фабрика = ФабрикаXDTO;
	ОтветФНСXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ДокументXDTO = ОтветФНСXDTO.Документ;
	
	АктыСверок = НовыеАктыСверок();
	
	Если ТипЗнч(ДокументXDTO.АктСвер) = Тип("СписокXDTO") Тогда
		
		Для Каждого АктСверXDTO Из ДокументXDTO.АктСвер Цикл
			
			ЗаполнитьАктСверки(АктСверXDTO, АктыСверок);
			
		КонецЦикла;
		
	Иначе
		
		ЗаполнитьАктСверки(ДокументXDTO.АктСвер, АктыСверок);
		
	КонецЕсли;
	
	Возврат АктыСверок;
	
КонецФункции

// Функция - получает табличное представление акта сверки
//
// Параметры:
//  ДанныеАктаСверки - 	ТаблицаЗначений - разобранные данные акта сверки.
//  ИндексСверки - 		Число - индекс cтроки cверки.
//
// Возвращаемое значение:
//  Табличный документ - табличный документ с данными акта сверки с ФНС.
//
Функция ПолучитьТабличноеПредставление(ДанныеАктаСверки, ИндексСверки) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	АктСверки = Новый ТабличныйДокумент;
	МакетАкта = КонтекстЭДОСервер.ПолучитьМакет("АктСверкиСФНС");
	
	// ШАПКА -------------------------------------------------
	
	ДанныеАктаСверки.НаименованиеИФНС = НаименованиеИФНСПоКоду(ДанныеАктаСверки.КодИФНС);
	
	Шапка = МакетАкта.ПолучитьОбласть("Шапка");
	Шапка.Параметры.НомерАкта                = ДанныеАктаСверки.НомерАкта;
	Шапка.Параметры.ДатаАкта                 = Формат(ДанныеАктаСверки.ДатаАкта, "ДЛФ=D");
	Шапка.Параметры.НаименованиеИФНС         = ДанныеАктаСверки.НаименованиеИФНС;
	Шапка.Параметры.НаименованиеОрганизации  = ДанныеАктаСверки.НаименованиеОрганизации;
	Шапка.Параметры.ИННОрганизации           = ДанныеАктаСверки.ИНН;
	Если ДанныеАктаСверки.ЭтоЮрЛицо Тогда
		Шапка.Параметры.ЗаголовокИНН         = НСтр("ru = 'ИНН / КПП:'");
		Шапка.Параметры.КППОрганизации       = " / " + ДанныеАктаСверки.КПП
	Иначе
		Шапка.Параметры.ЗаголовокИНН         = НСтр("ru = 'ИНН:'");
	КонецЕсли;
	
	АктСверки.Вывести(Шапка);
	
	// ШАПКА ТАБЛИЦЫ -----------------------------------------
	
	ШапкаТаблицы = МакетАкта.ПолучитьОбласть("ШапкаТаблицы");
	ШапкаТаблицы.Параметры.ДатаНачала = Формат(ДанныеАктаСверки.ДатаНачала, "ДЛФ=D");
	ШапкаТаблицы.Параметры.ДатаОкончания = Формат(ДанныеАктаСверки.ДатаОкончания, "ДЛФ=D");
	
	АктСверки.Вывести(ШапкаТаблицы);
	
	// ВЫВОД ДАННЫХ ПО НАЛОГАМ В ТАБЛИЧНЫЙ ДОКУМЕНТ ----------
	
	СодержаниеСверки = ДанныеАктаСверки.Раздел2;
	РасчетДополнительныхПолей(СодержаниеСверки); // контроль наличия данных, расчет доп. полей
	
	АктСверки.НачатьАвтогруппировкуСтрок();
	КолВидовНалогов = 0;
	МакетСтрокиПоВидамНалогов = МакетАкта.ПолучитьОбласть("ВидНалога");
	Для Каждого СтрокаВидаНалога Из СодержаниеСверки Цикл
		
		Если СтрокаВидаНалога.ВидНалогаКонтроль = 0 Тогда // если по виду налога все по нулям, не выводим его
			Продолжить;
		КонецЕсли;
		
		// Если имеется несколько строк налогов с одинаковым КБК, выводим ОКТМО
		МассивВидовНалогов = СодержаниеСверки.НайтиСтроки(Новый Структура("КБК", СтрокаВидаНалога.КБК));
		КолКБК = 0;
		Для Каждого ЭлементМассива Из МассивВидовНалогов Цикл
			
			Если ЭлементМассива.ВидНалогаКонтроль > 0 Тогда
				КолКБК = КолКБК + 1;
			КонецЕсли;
			
		КонецЦикла;
		Если КолКБК > 1 Тогда
			СтрокаВидаНалога.НаименованиеНалога = СтрокаВидаНалога.НаименованиеНалога
				+ " " + НСтр("ru = 'по ОКТМО'") + " " + СтрокаВидаНалога.ОКТМО;
		КонецЕсли;
		
		КолВидовНалогов = КолВидовНалогов + 1;
		НомерСтрокиСверки = СодержаниеСверки.Индекс(СтрокаВидаНалога);
		МакетСтрокиПоВидамНалогов.Параметры.Заполнить(СтрокаВидаНалога);
		МакетСтрокиПоВидамНалогов.Параметры.СтрокаДанных = Формат(ИндексСверки, "ЧН=0; ЧГ=0")
			+ ";" + Формат(НомерСтрокиСверки, "ЧН=0; ЧГ=0"); // данные для расшифровки
		
		АктСверки.Вывести(МакетСтрокиПоВидамНалогов, 1,, Истина);
		
		МассивПодвидовНалога = Новый Массив;
		Если СтрокаВидаНалога.НалогКонтроль > 0 Тогда
			МассивПодвидовНалога.Добавить("Налог");
		КонецЕсли;
		Если СтрокаВидаНалога.ПеняКонтроль > 0 Тогда
			МассивПодвидовНалога.Добавить("Пеня");
		КонецЕсли;
		Если СтрокаВидаНалога.ШтрафКонтроль > 0 Тогда
			МассивПодвидовНалога.Добавить("Штраф");
		КонецЕсли;
		Если СтрокаВидаНалога.ПрочееКонтроль > 0 Тогда
			МассивПодвидовНалога.Добавить("Прочее");
		КонецЕсли;
		
		Если Не (МассивПодвидовНалога.Количество() = 1 И МассивПодвидовНалога[0] = "Налог") Тогда
			
			Для Каждого ПодвидНалога Из МассивПодвидовНалога Цикл
				
				МакетСтрокиДетализацияРасчетов = МакетАкта.ПолучитьОбласть(ПодвидНалога);
				МакетСтрокиДетализацияРасчетов.Параметры.Заполнить(СтрокаВидаНалога);
				МакетСтрокиДетализацияРасчетов.Параметры.СтрокаДанных = Формат(ИндексСверки, "ЧН=0; ЧГ=0")
					+ ";" + Формат(НомерСтрокиСверки, "ЧН=0; ЧГ=0");
				
				АктСверки.Вывести(МакетСтрокиДетализацияРасчетов, 2,, Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	АктСверки.ЗакончитьАвтогруппировкуСтрок();
	
	Если КолВидовНалогов > 1 Тогда // если только 1 вид налога, итоги не выводим
		
		// вывод итогов
		МакетИтого = МакетАкта.ПолучитьОбласть("Итого");
		ТаблицаИтого = СодержаниеСверки.Скопировать();
		ТаблицаИтого.Колонки.Добавить("Свертка", Новый ОписаниеТипов("Булево"));
		ТаблицаИтого.Свернуть("Свертка",
			"ЗадолженностьНаНачало, ПереплатаНаНачало, НачисленоЗаПериод, УплаченоЗаПериод, ЗадолженностьНаКонец, ПереплатаНаКонец");
			
		МакетИтого.Параметры.Заполнить(ТаблицаИтого[0]);
			
		АктСверки.Вывести(МакетИтого);
		
	КонецЕсли;
	
	// незачисленные средства, вывод
	Если СодержаниеСверки.Итог("НеЗачисленныеСредстваКонтроль") > 0 Тогда

		МакетШапки = МакетАкта.ПолучитьОбласть("НезачисленныеСредстваШапка");
		
		АктСверки.Вывести(МакетШапки);
		АктСверки.НачатьАвтогруппировкуСтрок();
		Для Каждого СтрокаСверки Из СодержаниеСверки Цикл
			
			Если СтрокаСверки.НеЗачисленныеСредстваКонтроль = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МакетСтроки = МакетАкта.ПолучитьОбласть("НезачисленныеСредстваВидНалога");
			НомерСтрокиСверки = СодержаниеСверки.Индекс(СтрокаВидаНалога);
			МакетСтроки.Параметры.Заполнить(СтрокаСверки);
			МакетСтроки.Параметры.СтрокаДанных = Формат(ИндексСверки, "ЧН=0; ЧГ=0")
				+ ";" + Формат(НомерСтрокиСверки, "ЧН=0; ЧГ=0");
			
			АктСверки.Вывести(МакетСтроки, 1);
			
			МассивПодвидовНалога = Новый Массив;
			Если СтрокаСверки.НеЗачисленныеСредстваНалог <> 0 Тогда
				МассивПодвидовНалога.Добавить("НезачисленныеСредстваНалог");
			КонецЕсли;
			Если СтрокаСверки.НеЗачисленныеСредстваПени <> 0 Тогда
				МассивПодвидовНалога.Добавить("НеЗачисленныеСредстваПени");
			КонецЕсли;
			Если СтрокаСверки.НеЗачисленныеСредстваШтраф <> 0 Тогда
				МассивПодвидовНалога.Добавить("НеЗачисленныеСредстваШтраф");
			КонецЕсли;
			Если СтрокаСверки.НезачисленныеСредстваНеуплаченныеПроценты <> 0 Тогда
				МассивПодвидовНалога.Добавить("НезачисленныеСредстваНеуплаченныеПроценты");
			КонецЕсли;
			Если СтрокаСверки.НеЗачисленныеСредстваПроценты <> 0 Тогда
				МассивПодвидовНалога.Добавить("НеЗачисленныеСредстваПроценты");
			КонецЕсли;
			
			Если Не (МассивПодвидовНалога.Количество() = 1 И МассивПодвидовНалога[0] = "НезачисленныеСредстваНалог") Тогда
				
				Для Каждого ПодвидНалога Из МассивПодвидовНалога Цикл
					
					МакетСтроки = МакетАкта.ПолучитьОбласть(ПодвидНалога);
					МакетСтроки.Параметры.Заполнить(СтрокаСверки);
					МакетСтроки.Параметры.СтрокаДанных = "" + ИндексСверки + ";" + НомерСтрокиСверки;
					
					АктСверки.Вывести(МакетСтроки, 2,, Истина);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		АктСверки.ЗакончитьАвтогруппировкуСтрок();
		
	КонецЕсли;
	
	Возврат АктСверки;
	
КонецФункции

// Функция - формирует табличный документ с расшифровкой поля акта сверки.
//
// Параметры:
//  ДанныеАктаСверки	 - 	Структура - данные акта сверки с ФНС.
//  НомерСтрокиСверки	 - 	Число - строка, по которой нужно сформировать расшифровку.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с расшифровкой строки акта сверки.
//
Функция СформироватьРасшифровку(ДанныеАктаСверки, НомерСтрокиСверки) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	МакетРасшифровки      = КонтекстЭДОСервер.ПолучитьМакет("РасшифровкаАктаСверкиСФНС");
	СтрокаДанныхНалога    = ДанныеАктаСверки.Раздел2[НомерСтрокиСверки];
	РасшифровкаАктаСверки = Новый ТабличныйДокумент;
	
	// ШАПКА -------------------------------------------------
	Шапка = МакетРасшифровки.ПолучитьОбласть("Шапка");
	Шапка.Параметры.НаименованиеИФНС         = ДанныеАктаСверки.НаименованиеИФНС;
	Шапка.Параметры.НаименованиеОрганизации  = ДанныеАктаСверки.НаименованиеОрганизации;
	Шапка.Параметры.ИННОрганизации           = ДанныеАктаСверки.ИНН;
	Если ДанныеАктаСверки.ЭтоЮрЛицо Тогда
		Шапка.Параметры.ЗаголовокИНН         = НСтр("ru = 'ИНН / КПП:'");
		Шапка.Параметры.КППОрганизации       = " / " + ДанныеАктаСверки.КПП;
	Иначе
		Шапка.Параметры.ЗаголовокИНН         = НСтр("ru = 'ИНН:'");
	КонецЕсли;
	
	Шапка.Параметры.НаименованиеНалога       = СтрокаДанныхНалога.НаименованиеНалога;
	Шапка.Параметры.НаименованиеПолное       = СтрокаДанныхНалога.НаименованиеПолное;
	Шапка.Параметры.КБК                      = СтрокаДанныхНалога.КБК;
	Шапка.Параметры.ОКТМО                    = СтрокаДанныхНалога.ОКТМО;
	
	РасшифровкаАктаСверки.Вывести(Шапка);
	
	// САЛЬДО НА НАЧАЛО --------------------------------------
	
	ДанныеРаздела = ПодготовкаДанныхРасшифровки(МакетРасшифровки, "СальдоНаНачалоТело", СтрокаДанныхНалога);
	Если ДанныеРаздела.ЕстьДанные Тогда
		
		МакетДанных = МакетРасшифровки.ПолучитьОбласть("СальдоНаНачалоШапка");
		МакетДанных.Параметры.ДатаНачала = Формат(ДанныеАктаСверки.ДатаНачала, "ДЛФ=D");
		
		РасшифровкаАктаСверки.Вывести(МакетДанных);
		
		РасшифровкаАктаСверки.Вывести(ДанныеРаздела.ТабДокумент);
		
	КонецЕсли;
	
	// ОБОРОТЫ ЗА ПЕРИОД --------------------------------------
	
	ДанныеРаздела = ПодготовкаДанныхРасшифровки(МакетРасшифровки, "ОборотыЗаПериодТело", СтрокаДанныхНалога);
	Если ДанныеРаздела.ЕстьДанные Тогда
		
		МакетДанных = МакетРасшифровки.ПолучитьОбласть("ОборотыЗаПериодШапка");
		МакетДанных.Параметры.ПериодСверки = ПредставлениеПериода(
			НачалоДня(ДанныеАктаСверки.ДатаНачала), КонецДня(ДанныеАктаСверки.ДатаОкончания), "ФП = Истина");
		
		РасшифровкаАктаСверки.Вывести(МакетДанных);
		
		РасшифровкаАктаСверки.Вывести(ДанныеРаздела.ТабДокумент);
		
	КонецЕсли;
	
	// САЛЬДО НА КОНЕЦ ---------------------------------------
	
	ДанныеРаздела = ПодготовкаДанныхРасшифровки(МакетРасшифровки, "СальдоНаКонецТело", СтрокаДанныхНалога);
	Если ДанныеРаздела.ЕстьДанные Тогда
	
		МакетДанных = МакетРасшифровки.ПолучитьОбласть("СальдоНаКонецШапка");
		МакетДанных.Параметры.ДатаОкончания = Формат(ДанныеАктаСверки.ДатаОкончания, "ДЛФ=D");
		
		РасшифровкаАктаСверки.Вывести(МакетДанных);
	
		РасшифровкаАктаСверки.Вывести(ДанныеРаздела.ТабДокумент);
		
	КонецЕсли;
	
	// НЕЗАЧИСЛЕННЫЕ ПЛАТЕЖИ ---------------------------------
	
	ДанныеРаздела = ПодготовкаДанныхРасшифровки(МакетРасшифровки, "НезачисленныеСредстваТело", СтрокаДанныхНалога);
	Если ДанныеРаздела.ЕстьДанные Тогда
		
		МакетДанных = МакетРасшифровки.ПолучитьОбласть("НезачисленныеСредстваШапка");
		
		РасшифровкаАктаСверки.Вывести(МакетДанных);
		
		РасшифровкаАктаСверки.Вывести(ДанныеРаздела.ТабДокумент);
		
	КонецЕсли;
	
	Возврат РасшифровкаАктаСверки;
	
КонецФункции

Процедура РасчетДополнительныхПолей(СодержаниеСверки)
	
	НалогиПоКБК = Обработки.ДокументооборотСКонтролирующимиОрганами.ПолучитьМакет("КБК");
	КолонкаКБК = НалогиПоКБК.Область("КБК"); // область таблицы с КБК
	ОписаниеКолонкиСТипомЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(17, 2);
	
	СодержаниеСверки.Колонки.Добавить("НаименованиеПолное",          Новый ОписаниеТипов("Строка"));
	
	СодержаниеСверки.Колонки.Добавить("ЗадолженностьНаНачало",       ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ПереплатаНаНачало",           ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("НачисленоЗаПериод",           ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("УплаченоЗаПериод",            ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ЗадолженностьНаКонец",        ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ПереплатаНаКонец",            ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеСверки.Колонки.Добавить("НалогЗадолженностьНаНачало",  ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("НалогПереплатаНаНачало",      ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("НалогНачисленоЗаПериод",      ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("НалогУплаченоЗаПериод",       ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("НалогЗадолженностьНаКонец",   ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("НалогПереплатаНаКонец",       ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеСверки.Колонки.Добавить("ПеняЗадолженностьНаНачало",   ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ПеняПереплатаНаНачало",       ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ПеняНачисленоЗаПериод",       ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ПеняУплаченоЗаПериод",        ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ПеняЗадолженностьНаКонец",    ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ПеняПереплатаНаКонец",        ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеСверки.Колонки.Добавить("ШтрафЗадолженностьНаНачало",  ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ШтрафПереплатаНаНачало",      ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ШтрафНачисленоЗаПериод",      ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ШтрафУплаченоЗаПериод",       ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ШтрафЗадолженностьНаКонец",   ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ШтрафПереплатаНаКонец",       ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеСверки.Колонки.Добавить("ПрочееЗадолженностьНаНачало", ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ПрочееПереплатаНаНачало",     ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ПрочееНачисленоЗаПериод",     ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ПрочееУплаченоЗаПериод",      ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ПрочееЗадолженностьНаКонец",  ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ПрочееПереплатаНаКонец",      ОписаниеКолонкиСТипомЧисло);
	
	// Для проверки наличия сальдо и оборотов по виду расчетов.
	СодержаниеСверки.Колонки.Добавить("ВидНалогаКонтроль",           ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("НалогКонтроль",               ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ПеняКонтроль",                ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ШтрафКонтроль",               ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("ПрочееКонтроль",              ОписаниеКолонкиСТипомЧисло);
	
	// Данные для расшифровки.
	СодержаниеСверки.Колонки.Добавить("РазделНачислено",                 ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("РазделУменьшено",                 ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("РазделПринятаЗадолженность",      ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("РазделПереданаЗадолженность",     ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("РазделСписаниеПоПостановлениюРФ", ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("РазделВозвращеноИзБюджета",       ОписаниеКолонкиСТипомЧисло);
	
	// Денежные средства, списанные с расчетных счетов налогоплательщика,
	// но не зачисленные на счета по учету доходов бюджетов на конец сверяемого периода.
	СодержаниеСверки.Колонки.Добавить("НеЗачисленныеСредства",           ОписаниеКолонкиСТипомЧисло);
	СодержаниеСверки.Колонки.Добавить("НеЗачисленныеСредстваКонтроль",   ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеСверки.Индексы.Добавить("КБК");
	
	Для Каждого СтрокаСверки Из СодержаниеСверки Цикл
		
		// Ищем по первым 13 значениям КБК, остальные цифры это подвиды доходов бюджета (штрафы, пени и т.д).
		НайденнаяСтрока = НалогиПоКБК.НайтиТекст(Лев(СтрокаСверки.КБК, 13),, КолонкаКБК,,,,); 
		Если НайденнаяСтрока <> Неопределено Тогда
			
			НаименованиеКраткое = СокрЛП(НалогиПоКБК.Область(НайденнаяСтрока.Верх, НалогиПоКБК.Область("КраткоеНаименованиеНалога").Лево).Текст);
			НаименованиеПолное  = СокрЛП(НалогиПоКБК.Область(НайденнаяСтрока.Верх, НалогиПоКБК.Область("Наименование_КБК").Лево).Текст);
			СтрокаСверки.НаименованиеНалога = ?(ЗначениеЗаполнено(НаименованиеКраткое), НаименованиеКраткое, НаименованиеПолное);
			СтрокаСверки.НаименованиеПолное = НаименованиеПолное;
			
		Иначе
			
			СтрокаСверки.НаименованиеНалога = "КБК: " + СтрокаСверки.КБК; // если не найден КБК в макете, выводим КБК
			
		КонецЕсли;
		
		// сальдо на начало
		СтрокаСверки.ЗадолженностьНаНачало = СтрокаСверки.НачальныйОстатокНалог
			+ СтрокаСверки.НачальныйОстатокПени
			+ СтрокаСверки.НачальныйОстатокШтраф
			+ СтрокаСверки.НачальныйОстатокНеуплаченныеПроцентыВсего
			+ СтрокаСверки.НачальныйОстатокПроценты;
			
		СтрокаСверки.ПереплатаНаНачало = СтрокаСверки.НачальныйОстатокНалогПоложительноеСальдо
			+ СтрокаСверки.НачальныйОстатокПениПоложительноеСальдо
			+ СтрокаСверки.НачальныйОстатокШтрафПоложительноеСальдо
			+ СтрокаСверки.НачальныйОстатокПроцентыПоложительноеСальдо;
			
		// сальдо на начало, детализация по налогам, пени, штрафам и прочему
		СтрокаСверки.НалогЗадолженностьНаНачало  = СтрокаСверки.НачальныйОстатокНалог;
		СтрокаСверки.ПеняЗадолженностьНаНачало   = СтрокаСверки.НачальныйОстатокПени;
		СтрокаСверки.ШтрафЗадолженностьНаНачало  = СтрокаСверки.НачальныйОстатокШтраф;
		СтрокаСверки.ПрочееЗадолженностьНаНачало = СтрокаСверки.НачальныйОстатокНеуплаченныеПроцентыВсего
			+ СтрокаСверки.НачальныйОстатокПроценты;
			
		СтрокаСверки.НалогПереплатаНаНачало  = СтрокаСверки.НачальныйОстатокНалогПоложительноеСальдо;
		СтрокаСверки.ПеняПереплатаНаНачало   = СтрокаСверки.НачальныйОстатокПениПоложительноеСальдо;
		СтрокаСверки.ШтрафПереплатаНаНачало  = СтрокаСверки.НачальныйОстатокШтрафПоложительноеСальдо;
		СтрокаСверки.ПрочееПереплатаНаНачало = СтрокаСверки.НачальныйОстатокПроцентыПоложительноеСальдо;
			
		// обороты за период
		СтрокаСверки.НачисленоЗаПериод = СтрокаСверки.НачисленоНалог
			+ СтрокаСверки.НачисленоПени
			+ СтрокаСверки.НачисленоШтраф
			+ СтрокаСверки.НачисленоНеуплаченныеПроценты
			+ СтрокаСверки.НачисленоПроценты
			- СтрокаСверки.УменьшеноНалог
			- СтрокаСверки.УменьшеноПени
			- СтрокаСверки.УменьшеноШтраф
			- СтрокаСверки.СписаноПени
			- СтрокаСверки.СписаноШтраф
			- СтрокаСверки.СписаноПравительствомНалог
			- СтрокаСверки.СписаноПравительствомПени
			- СтрокаСверки.СписаноПравительствомШтраф
			- СтрокаСверки.СписаноПравительствомНеуплаченныеПроценты
			- СтрокаСверки.ВозвращеноНалог
			- СтрокаСверки.ВозвращеноПени
			- СтрокаСверки.ВозвращеноШтраф
			- СтрокаСверки.ВозвращеноПроценты
			- СтрокаСверки.ПринятоеСальдоНалог
			- СтрокаСверки.ПринятоеСальдоПени
			- СтрокаСверки.ПринятоеСальдоШтраф
			- СтрокаСверки.ПринятоеСальдоНеуплаченныеПроценты
			- СтрокаСверки.ПринятоеСальдоПроценты
			- СтрокаСверки.ПереданоНалог
			- СтрокаСверки.ПереданоПени
			- СтрокаСверки.ПереданоШтраф
			- СтрокаСверки.ПереданоНеуплаченныеПроценты
			- СтрокаСверки.ПереданоПроценты;
			
		СтрокаСверки.УплаченоЗаПериод = СтрокаСверки.УплаченоНалогВсего
			+ СтрокаСверки.УплаченоПениВсего
			+ СтрокаСверки.УплаченоШтрафВсего
			+ СтрокаСверки.УплаченоПроцентыВсего;
			
		// обороты за период, детализация по налогам, пени, штрафам и прочему
		СтрокаСверки.НалогНачисленоЗаПериод = СтрокаСверки.НачисленоНалог
			- СтрокаСверки.УменьшеноНалог
			- СтрокаСверки.СписаноПравительствомНалог
			- СтрокаСверки.ВозвращеноНалог
			- СтрокаСверки.ПринятоеСальдоНалог
			- СтрокаСверки.ПереданоНалог;
			
		СтрокаСверки.ПеняНачисленоЗаПериод = СтрокаСверки.НачисленоПени
			- СтрокаСверки.УменьшеноПени
			- СтрокаСверки.СписаноПени
			- СтрокаСверки.СписаноПравительствомПени
			- СтрокаСверки.ВозвращеноПени
			- СтрокаСверки.ПринятоеСальдоПени
			- СтрокаСверки.ПереданоПени;
			
		СтрокаСверки.ШтрафНачисленоЗаПериод = СтрокаСверки.НачисленоШтраф
			- СтрокаСверки.УменьшеноШтраф
			- СтрокаСверки.СписаноШтраф
			- СтрокаСверки.СписаноПравительствомШтраф
			- СтрокаСверки.ВозвращеноШтраф
			- СтрокаСверки.ПринятоеСальдоШтраф
			- СтрокаСверки.ПереданоШтраф;
			
		СтрокаСверки.ПрочееНачисленоЗаПериод = СтрокаСверки.НачисленоНеуплаченныеПроценты
			+ СтрокаСверки.НачисленоПроценты
			- СтрокаСверки.СписаноПравительствомНеуплаченныеПроценты
			- СтрокаСверки.ВозвращеноПроценты
			- СтрокаСверки.ПринятоеСальдоНеуплаченныеПроценты
			- СтрокаСверки.ПринятоеСальдоПроценты
			- СтрокаСверки.ПереданоНалог
			- СтрокаСверки.ПереданоНеуплаченныеПроценты
			- СтрокаСверки.ПереданоПроценты;
			
		СтрокаСверки.НалогУплаченоЗаПериод  = СтрокаСверки.УплаченоНалогВсего;
		СтрокаСверки.ПеняУплаченоЗаПериод   = СтрокаСверки.УплаченоПениВсего;
		СтрокаСверки.ШтрафУплаченоЗаПериод  = СтрокаСверки.УплаченоШтрафВсего;
		СтрокаСверки.ПрочееУплаченоЗаПериод = СтрокаСверки.УплаченоПроцентыВсего;
			
		// обороты разделов для расшифровки
		СтрокаСверки.РазделНачислено = СтрокаСверки.НачисленоНалог
			+ СтрокаСверки.НачисленоПени
			+ СтрокаСверки.НачисленоШтраф
			+ СтрокаСверки.НачисленоНеуплаченныеПроценты
			+ СтрокаСверки.НачисленоПроценты;
			
		СтрокаСверки.РазделУменьшено = СтрокаСверки.УменьшеноНалог
			+ СтрокаСверки.УменьшеноПени
			+ СтрокаСверки.УменьшеноШтраф;
			
		СтрокаСверки.РазделПринятаЗадолженность = СтрокаСверки.ПринятоеСальдоНалог
			+ СтрокаСверки.ПринятоеСальдоПени
			+ СтрокаСверки.ПринятоеСальдоШтраф
			+ СтрокаСверки.ПринятоеСальдоНеуплаченныеПроценты
			+ СтрокаСверки.ПринятоеСальдоПроценты;
			
		СтрокаСверки.РазделПереданаЗадолженность = СтрокаСверки.ПереданоНалог
			+ СтрокаСверки.ПереданоПени
			+ СтрокаСверки.ПереданоШтраф
			+ СтрокаСверки.ПереданоНеуплаченныеПроценты
			+ СтрокаСверки.ПереданоПроценты;
			
		СтрокаСверки.РазделСписаниеПоПостановлениюРФ = СтрокаСверки.СписаноПравительствомНалог
			+ СтрокаСверки.СписаноПравительствомПени
			+ СтрокаСверки.СписаноПравительствомШтраф
			+ СтрокаСверки.СписаноПравительствомНеуплаченныеПроценты;
			
		СтрокаСверки.РазделВозвращеноИзБюджета = СтрокаСверки.ВозвращеноНалог
			+ СтрокаСверки.ВозвращеноПени
			+ СтрокаСверки.ВозвращеноШтраф
			+ СтрокаСверки.ВозвращеноПроценты
			+ СтрокаСверки.ВозвращеноНеуплаченныеПроценты;
			
		// Сальдо на конец
		СтрокаСверки.ЗадолженностьНаКонец = СтрокаСверки.КонечныйОстатокНалог
			+ СтрокаСверки.КонечныйОстатокПени
			+ СтрокаСверки.КонечныйОстатокШтраф
			+ СтрокаСверки.КонечныйОстатокНеуплаченныеПроцентыВсего
			+ СтрокаСверки.КонечныйОстатокПроценты;
			
		СтрокаСверки.ПереплатаНаКонец = СтрокаСверки.КонечныйОстатокНалогПоложительноеСальдо
			+ СтрокаСверки.КонечныйОстатокПениПоложительноеСальдо
			+ СтрокаСверки.КонечныйОстатокШтрафПоложительноеСальдо
			+ СтрокаСверки.КонечныйОстатокПроцентыПоложительноеСальдо;
			
		// сальдо на конец, детализация по налогам, пени, штрафам и прочему
		СтрокаСверки.НалогЗадолженностьНаКонец  = СтрокаСверки.КонечныйОстатокНалог;
		СтрокаСверки.ПеняЗадолженностьНаКонец   = СтрокаСверки.КонечныйОстатокПени;
		СтрокаСверки.ШтрафЗадолженностьНаКонец  = СтрокаСверки.КонечныйОстатокШтраф;
		СтрокаСверки.ПрочееЗадолженностьНаКонец = СтрокаСверки.КонечныйОстатокНеуплаченныеПроцентыВсего
			+ СтрокаСверки.КонечныйОстатокПроценты;
		
		СтрокаСверки.НалогПереплатаНаКонец      = СтрокаСверки.КонечныйОстатокНалогПоложительноеСальдо;
		СтрокаСверки.ПеняПереплатаНаКонец       = СтрокаСверки.КонечныйОстатокПениПоложительноеСальдо;
		СтрокаСверки.ШтрафПереплатаНаКонец      = СтрокаСверки.КонечныйОстатокШтрафПоложительноеСальдо;
		СтрокаСверки.ПрочееПереплатаНаКонец     = СтрокаСверки.КонечныйОстатокПроцентыПоложительноеСальдо;
			
		// контроль наличия сальдо и оборотов
		СтрокаСверки.ВидНалогаКонтроль = ?(СтрокаСверки.ЗадолженностьНаНачало = 0, 0, 1)
			+ ?(СтрокаСверки.ПереплатаНаНачало         = 0, 0, 1)
			+ ?(СтрокаСверки.НачисленоЗаПериод         = 0, 0, 1)
			+ ?(СтрокаСверки.УплаченоЗаПериод          = 0, 0, 1)
			+ ?(СтрокаСверки.ЗадолженностьНаКонец      = 0, 0, 1)
			+ ?(СтрокаСверки.ПереплатаНаКонец          = 0, 0, 1);
		
		СтрокаСверки.НалогКонтроль = ?(СтрокаСверки.НалогЗадолженностьНаНачало = 0, 0, 1)
			+ ?(СтрокаСверки.НалогПереплатаНаНачало    = 0, 0, 1)
			+ ?(СтрокаСверки.НалогНачисленоЗаПериод    = 0, 0, 1)
			+ ?(СтрокаСверки.НалогУплаченоЗаПериод     = 0, 0, 1)
			+ ?(СтрокаСверки.НалогЗадолженностьНаКонец = 0, 0, 1)
			+ ?(СтрокаСверки.НалогПереплатаНаКонец     = 0, 0, 1);
			
		СтрокаСверки.ПеняКонтроль = ?(СтрокаСверки.ПеняЗадолженностьНаНачало = 0, 0, 1)
			+ ?(СтрокаСверки.ПеняПереплатаНаНачало     = 0, 0, 1)
			+ ?(СтрокаСверки.ПеняНачисленоЗаПериод     = 0, 0, 1)
			+ ?(СтрокаСверки.ПеняУплаченоЗаПериод      = 0, 0, 1)
			+ ?(СтрокаСверки.ПеняЗадолженностьНаКонец  = 0, 0, 1)
			+ ?(СтрокаСверки.ПеняПереплатаНаКонец      = 0, 0, 1);
			
		СтрокаСверки.ШтрафКонтроль = ?(СтрокаСверки.ШтрафЗадолженностьНаНачало = 0, 0, 1)
			+ ?(СтрокаСверки.ШтрафПереплатаНаНачало    = 0, 0, 1)
			+ ?(СтрокаСверки.ШтрафНачисленоЗаПериод    = 0, 0, 1)
			+ ?(СтрокаСверки.ШтрафУплаченоЗаПериод     = 0, 0, 1)
			+ ?(СтрокаСверки.ШтрафЗадолженностьНаКонец = 0, 0, 1)
			+ ?(СтрокаСверки.ШтрафПереплатаНаКонец     = 0, 0, 1);
			
		СтрокаСверки.ПрочееКонтроль = ?(СтрокаСверки.ПрочееЗадолженностьНаНачало = 0, 0, 1)
			+ ?(СтрокаСверки.ПрочееПереплатаНаНачало    = 0, 0, 1)
			+ ?(СтрокаСверки.ПрочееНачисленоЗаПериод    = 0, 0, 1)
			+ ?(СтрокаСверки.ПрочееУплаченоЗаПериод     = 0, 0, 1)
			+ ?(СтрокаСверки.ПрочееЗадолженностьНаКонец = 0, 0, 1)
			+ ?(СтрокаСверки.ПрочееПереплатаНаКонец     = 0, 0, 1);
		
		// Денежные средства, списанные с расчетных счетов налогоплательщика,
		// но не зачисленные на счета по учету доходов бюджетов на конец сверяемого периода.
		СтрокаСверки.НеЗачисленныеСредства = СтрокаСверки.НеЗачисленныеСредстваНалог
			+ СтрокаСверки.НеЗачисленныеСредстваПени
			+ СтрокаСверки.НеЗачисленныеСредстваШтраф
			+ СтрокаСверки.НеЗачисленныеСредстваНеуплаченныеПроценты
			+ СтрокаСверки.НеЗачисленныеСредстваПроценты;
			
		СтрокаСверки.НеЗачисленныеСредстваКонтроль =?(СтрокаСверки.НеЗачисленныеСредстваНалог = 0, 0, 1)
			+ ?(СтрокаСверки.НеЗачисленныеСредстваПени    = 0, 0, 1)
			+ ?(СтрокаСверки.НеЗачисленныеСредстваШтраф    = 0, 0, 1)
			+ ?(СтрокаСверки.НеЗачисленныеСредстваНеуплаченныеПроценты     = 0, 0, 1)
			+ ?(СтрокаСверки.НеЗачисленныеСредстваПроценты = 0, 0, 1);
			
	КонецЦикла;

КонецПроцедуры

Функция ПодготовкаДанныхРасшифровки(МакетРасшифровки, ИмяОбласти, СтрокаДанныхНалога)

	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.НачатьАвтогруппировкуСтрок();
	
	МакетДанных = МакетРасшифровки.ПолучитьОбласть(ИмяОбласти);
	МакетДанных.Параметры.Заполнить(СтрокаДанныхНалога);
	
	ЕстьДанные = Ложь;
	ВывестиУровень3 = Истина;
	Для НомерСтроки = 1 По МакетДанных.ВысотаТаблицы Цикл
		
		УровеньГруппировки = Число(МакетДанных.Область(НомерСтроки, 5).Текст);
		Если УровеньГруппировки = 3 И Не ВывестиУровень3 Тогда
			
			Продолжить; // не выводим 3 уровень группировки, в расшифровке дохода бюджета только 1 строка
			
		Иначе
			ВывестиУровень3 = Истина;
		КонецЕсли;
		
		// Проверка условий вывода 3 уровня
		НаименованиеПараметра = МакетДанных.Область(НомерСтроки, 6).Текст;
		Если (НаименованиеПараметра = "НалогЗадолженностьНаНачало"
			И СтрокаДанныхНалога.НалогЗадолженностьНаНачало = СтрокаДанныхНалога.НачальныйОстатокНалогОтрицательноеСальдо)
			
			ИЛИ (НаименованиеПараметра = "ПеняЗадолженностьНаНачало"
				И СтрокаДанныхНалога.ПеняЗадолженностьНаНачало = СтрокаДанныхНалога.НачальныйОстатокПениОтрицательноеСальдо)
				
			ИЛИ (НаименованиеПараметра = "ШтрафЗадолженностьНаНачало"
				И СтрокаДанныхНалога.ШтрафЗадолженностьНаНачало = СтрокаДанныхНалога.НачальныйОстатокШтрафОтрицательноеСальдо)
			
			ИЛИ (НаименованиеПараметра = "УплаченоНалогВсего"
				И СтрокаДанныхНалога.УплаченоНалогВсего = СтрокаДанныхНалога.УплаченоНалог)
				
			ИЛИ (НаименованиеПараметра = "УплаченоПениВсего"
				И СтрокаДанныхНалога.УплаченоПениВсего = СтрокаДанныхНалога.УплаченоПени)
				
			ИЛИ (НаименованиеПараметра = "УплаченоШтрафВсего"
				И СтрокаДанныхНалога.УплаченоШтрафВсего = СтрокаДанныхНалога.УплаченоШтраф)
				
			ИЛИ (НаименованиеПараметра = "НалогЗадолженностьНаКонец"
				И СтрокаДанныхНалога.НалогЗадолженностьНаКонец = СтрокаДанныхНалога.КонечныйОстатокНалогОтрицательноеСальдо)
				
			ИЛИ (НаименованиеПараметра = "ПеняЗадолженностьНаКонец"
				И СтрокаДанныхНалога.ПеняЗадолженностьНаКонец = СтрокаДанныхНалога.КонечныйОстатокПениОтрицательноеСальдо)
				
			ИЛИ (НаименованиеПараметра = "ШтрафЗадолженностьНаКонец"
				И СтрокаДанныхНалога.ШтрафЗадолженностьНаКонец = СтрокаДанныхНалога.КонечныйОстатокШтрафОтрицательноеСальдо)
				
			Тогда
			
			ВывестиУровень3 = Ложь;
			
		КонецЕсли;
		
		МакетСтрокиДанных = МакетДанных.ПолучитьОбласть(НомерСтроки, 1, НомерСтроки, 4);
		Для Каждого ПараметрМакета Из МакетСтрокиДанных.Параметры Цикл
			
			Если ЗначениеЗаполнено(ПараметрМакета) Тогда
				
				ТабДокумент.Вывести(МакетСтрокиДанных, УровеньГруппировки,, Истина);
				ЕстьДанные = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабДокумент.ЗакончитьАвтогруппировкуСтрок();
	
	Возврат Новый Структура("ТабДокумент, ЕстьДанные", ТабДокумент, ЕстьДанные);
	
КонецФункции

////////////////////////////////////////////////////////////////////////
// РАЗБОР ФАЙЛА IU_AKTSVP_*
// ОТВЕТ НА ЗАПРОС "АКТ СВЕРКИ РАСЧЕТОВ ПО НАЛОГАМ, СБОРАМ, ПЕНЯМ, ШТРАФАМ, ПРОЦЕНТАМ" ПРИ ИНФОРМАЦИОННОМ ОБСЛУЖИВАНИИ И ИНФОРМИРОВАНИИ
// НАЛОГОПЛАТЕЛЬЩИКОВ В ЭЛЕКТРОННОЙ ФОРМЕ ПО ТЕЛЕКОММУНИКАЦИОННЫМ КАНАЛАМ СВЯЗИ

Процедура ЗаполнитьАктСверки(АктСверXDTO, АктыСверок)
	
	АктСверки = АктыСверок.Добавить();
	
	Если АктСверXDTO.СвНП.Свойства().Получить("НПЮЛ") <> Неопределено Тогда
		СведенияОЮридическомЛице = АктСверXDTO.СвНП.НПЮЛ;
		АктСверки.ИНН = СведенияОЮридическомЛице.ИННЮЛ;
		АктСверки.КПП = СведенияОЮридическомЛице.КПП;
		АктСверки.НаименованиеОрганизации = СведенияОЮридическомЛице.НаимОрг;
		АктСверки.ЭтоЮрЛицо = Истина;
	Иначе
		СведенияОФизическомЛице = АктСверXDTO.СвНП.НПФЛ;
		АктСверки.ИНН = СведенияОФизическомЛице.ИННФЛ;
		ФИОПредпринимателя = СведенияОФизическомЛице.ФИО;
		АктСверки.НаименованиеОрганизации = "ИП " + СокрЛП(ФИОПредпринимателя.Фамилия)
			+ " " + Лев(СокрЛП(ФИОПредпринимателя.Имя), 1) + ".";
		Если ФИОПредпринимателя.Свойства().Получить("Отчество") <> Неопределено Тогда
			
			АктСверки.НаименованиеОрганизации = АктСверки.НаименованиеОрганизации + " "
				+ Лев(СокрЛП(ФИОПредпринимателя.Отчество), 1) + ".";
			
		КонецЕсли;
		АктСверки.ЭтоЮрЛицо = Ложь;
	КонецЕсли;
	
	АктСверки.НомерАкта     = АктСверXDTO.НомАкт;
	АктСверки.ДатаАкта      = ДатаФНС(АктСверXDTO.ДатаСост);
	АктСверки.ДатаНачала    = ДатаФНС(АктСверXDTO.ДатаНачПер);
	АктСверки.ДатаОкончания = ДатаФНС(АктСверXDTO.ДатаКонПер);
	АктСверки.КодИФНС       = АктСверXDTO.КодНО;
	АктСверки.Раздел1       = НовоеСодержаниеРаздела1Акта();
	АктСверки.Раздел2       = НовоеСодержаниеРаздела2Акта();
	
	Если АктСверXDTO.СодАкт.Свойства().Получить("Раздел1") <> Неопределено Тогда
		
		Если ТипЗнч(АктСверXDTO.СодАкт.Раздел1) = Тип("СписокXDTO") Тогда
			
			Для Каждого Раздел1XDTO Из АктСверXDTO.СодАкт.Раздел1 Цикл
				
				ЗаполнитьСодержаниеРаздела1АктаСверки(Раздел1XDTO, АктСверки.Раздел1);
				
			КонецЦикла;
			
		Иначе
			
			ЗаполнитьСодержаниеРаздела1АктаСверки(АктСверXDTO.СодАкт.Раздел1, АктСверки.Раздел1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если АктСверXDTO.СодАкт.Свойства().Получить("Раздел2") <> Неопределено Тогда
		
		Если ТипЗнч(АктСверXDTO.СодАкт.Раздел2) = Тип("СписокXDTO") Тогда
			
			Для Каждого Раздел2XDTO Из АктСверXDTO.СодАкт.Раздел2 Цикл
				
				ЗаполнитьСодержаниеРаздела2АктаСверки(Раздел2XDTO, АктСверки.Раздел2);
				
			КонецЦикла;
			
		Иначе
			
			ЗаполнитьСодержаниеРаздела2АктаСверки(АктСверXDTO.СодАкт.Раздел2, АктСверки.Раздел2);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСодержаниеРаздела1АктаСверки(СодАктXDTO, СодержаниеАктаСверки)
	
	Содержание = СодержаниеАктаСверки.Добавить();
	Содержание.КБК = СодАктXDTO.КБК;
	Содержание.НаименованиеНалога = СодАктXDTO.ВидНал;
	Содержание.КПП                = СодАктXDTO.КПП;
	// В содержании акта может быть указано либо ОКТМО, либо ОКАТО.
	// Заполним одно из этих полей.
	Если СодАктXDTO.Свойства().Получить("ОКТМО") <> Неопределено Тогда
		Содержание.ОКТМО = СодАктXDTO.ОКТМО;
	Иначе
		Содержание.ОКАТО = СодАктXDTO.ОКАТО;
	КонецЕсли;
	
	// Сальдо расчетов
	СальдоРасчетовXDTO = СодАктXDTO.СальдоРасч;
	Содержание.НеЗачисленныеСредства    = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO, "ДенСрСп");
	Содержание.НевыясненныеПлатежи      = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO, "ПлатНвсн");
	
	Содержание.НалогЗадолженностьВсего  = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Налог, "ДолгВсего");
	Содержание.НалогОтрицательноеСальдо = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Налог, "СальдоОтр");
	Содержание.НалогОтсроченный         = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Налог, "ОтсрПлат");
	Содержание.НалогПриостановленный    = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Налог, "ПриостПлат");
	Содержание.НалогРеструктурированный = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Налог, "РеструкДолг");
	Содержание.НалогПоложительноеСальдо = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Налог, "СальдоПол");
	
	Содержание.ПениЗадолженностьВсего   = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Пени, "ДолгВсего");
	Содержание.ПениОтрицательноеСальдо  = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Пени, "СальдоОтр");
	Содержание.ПениОтсроченный          = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Пени, "ОтсрПлат");
	Содержание.ПениПриостановленный     = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Пени, "ПриостПлат");
	Содержание.ПениРеструктурированный  = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Пени, "РеструкДолг");
	Содержание.ПениПоложительноеСальдо  = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Пени, "СальдоПол");
	
	Содержание.ШтрафЗадолженностьВсего  = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Штрафы, "ДолгВсего");
	Содержание.ШтрафОтрицательноеСальдо = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Штрафы, "СальдоОтр");
	Содержание.ШтрафОтсроченный         = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Штрафы, "ОтсрПлат");
	Содержание.ШтрафПриостановленный    = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Штрафы, "ПриостПлат");
	Содержание.ШтрафРеструктурированный = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Штрафы, "РеструкДолг");
	Содержание.ШтрафПоложительноеСальдо = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.Штрафы, "СальдоПол");
	
	Содержание.ОстатокНеуплаченныеПроцентыДосрочные = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.ПроцПолБС, "НеупСумПр");
	Содержание.Проценты                             = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.ПроцПолБС, "ДолгВсего");
	Содержание.ОстатокНеуплаченныеПроценты          = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.ПроцПолБС, "НеупСум");
	Содержание.ПроцентыПриостановленный             = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.ПроцПолБС, "ПриостПлат");
	Содержание.ПроцентыПоложительноеСальдо          = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.ПроцПолБС, "СальдоПол");
	Содержание.ПроцентыПриБанкротстве               = ЗначениеЧисловогоПоля(СальдоРасчетовXDTO.ПроцПолБС, "Проц");
	
КонецПроцедуры

Процедура ЗаполнитьСодержаниеРаздела2АктаСверки(СодАктXDTO, СодержаниеАктаСверки)
	
	Содержание = СодержаниеАктаСверки.Добавить();
	Содержание.КБК = СодАктXDTO.КБК;
	Содержание.НаименованиеНалога = СодАктXDTO.ВидНал;
	Содержание.КПП                = СодАктXDTO.КПП;
	// В содержании акта может быть указано либо ОКТМО, либо ОКАТО.
	// Заполним одно из этих полей.
	Если СодАктXDTO.Свойства().Получить("ОКТМО") <> Неопределено Тогда
		Содержание.ОКТМО = СодАктXDTO.ОКТМО;
	Иначе
		Содержание.ОКАТО = СодАктXDTO.ОКАТО;
	КонецЕсли;
	
	// Сальдо на начало сверяемого периода
	СальдоНачXDTO = СодАктXDTO.СальдоНач;
	Содержание.НачальныйОстатокЗадолженность            = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.ЗадолжВсего);
	
	Содержание.НачальныйОстатокНалог                    = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Налог.НалВсего);
	Содержание.НачальныйОстатокНалогОтрицательноеСальдо = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Налог.СальдоОтр);
	Содержание.НачальныйОстатокНалогОтсроченный         = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Налог.ОтсрПлат);
	Содержание.НачальныйОстатокНалогПриостановленный    = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Налог.ПриостПлат);
	Содержание.НачальныйОстатокНалогРеструктурированный = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Налог.РеструкДолг);
	
	Содержание.НачальныйОстатокПени                     = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Пени.ПениВсего);
	Содержание.НачальныйОстатокПениОтрицательноеСальдо  = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Пени.СальдоОтр);
	Содержание.НачальныйОстатокПениОтсроченный          = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Пени.ОтсрПлат);
	Содержание.НачальныйОстатокПениПриостановленный     = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Пени.ПриостПлат);
	Содержание.НачальныйОстатокПениРеструктурированный  = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Пени.РеструкДолг);
	
	Содержание.НачальныйОстатокШтраф                    = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Штраф.ШтрафВсего);
	Содержание.НачальныйОстатокШтрафОтрицательноеСальдо = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Штраф.СальдоОтр);
	Содержание.НачальныйОстатокШтрафОтсроченный         = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Штраф.ОтсрПлат);
	Содержание.НачальныйОстатокШтрафПриостановленный    = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Штраф.ПриостПлат);
	Содержание.НачальныйОстатокШтрафРеструктурированный = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.Штраф.РеструкДолг);
	
	Содержание.НачальныйОстатокНеуплаченныеПроцентыВсего = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.НеупСум.НеупСумВс);
	Содержание.НачальныйОстатокНеуплаченныеПроценты      = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.НеупСум.НеупСумПр);
	Содержание.НачальныйОстатокНеуплаченныеПроцентыПриостановленный = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.НеупСум.ПриосПл);
	
	Содержание.НачальныйОстатокПроценты                  = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.ПроцНачБанкр);
	
	Содержание.НачальныйОстатокПоложительноеСальдо         = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.СальдоПол.СальдоПолВс);
	Содержание.НачальныйОстатокНалогПоложительноеСальдо    = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.СальдоПол.Налог);
	Содержание.НачальныйОстатокПениПоложительноеСальдо     = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.СальдоПол.Пени);
	Содержание.НачальныйОстатокШтрафПоложительноеСальдо    = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.СальдоПол.Штраф);
	Содержание.НачальныйОстатокПроцентыПоложительноеСальдо = СуммаПоДаннымНалоговогоОргана(СальдоНачXDTO.СальдоПол.Проц);
	
	// Данные за сверяемый период
	
	СверкаЗаПериодXDTO = СодАктXDTO.СверПериод;
	
	Содержание.ПринятоеСальдоНалог                = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.СальдоПринят.Налог);
	Содержание.ПринятоеСальдоПени                 = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.СальдоПринят.Пени);
	Содержание.ПринятоеСальдоШтраф                = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.СальдоПринят.Штраф);
	Содержание.ПринятоеСальдоНеуплаченныеПроценты = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.СальдоПринят.Остат);
	Содержание.ПринятоеСальдоПроценты             = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.СальдоПринят.Процент);
	
	Содержание.НачисленоНалог                = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Начислено.Налог);
	Содержание.НачисленоПени                 = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Начислено.Пени);
	Содержание.НачисленоШтраф                = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Начислено.Штраф);
	Содержание.НачисленоНеуплаченныеПроценты = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Начислено.Остат);
	Содержание.НачисленоПроценты             = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Начислено.Процент);
	
	Содержание.УменьшеноНалог                = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уменьшено.Налог);
	Содержание.УменьшеноПени                 = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уменьшено.Пени);
	Содержание.УменьшеноШтраф                = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уменьшено.Штраф);
	
	Содержание.УплаченоНалогВсего               = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.НалогВсего);
	Содержание.УплаченоНалог                    = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.НалУпл);
	Содержание.УплаченоНалогЗачтеноИзлишнего    = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ЗачИзлУплНал);
	Содержание.УплаченоНалогОтсроченный         = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.НалОтсрПлат);
	Содержание.УплаченоНалогПриостановленный    = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.НалПриостПлат);
	Содержание.УплаченоНалогРеструктурированный = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.НалРеструкДолг);
	
	Содержание.УплаченоПениВсего                = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ПенВсего);
	Содержание.УплаченоПени                     = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ПенУпл);
	Содержание.УплаченоПениОтсроченный          = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ПенОтсрПлат);
	Содержание.УплаченоПениПриостановленный     = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ПенПриостПлат);
	Содержание.УплаченоПениРеструктурированный  = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ПенРеструкДолг);
	
	Содержание.УплаченоШтрафВсего               = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ШтрВсего);
	Содержание.УплаченоШтраф                    = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ШтрУпл);
	Содержание.УплаченоШтрафОтсроченный         = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ШтрОтсрПлат);
	Содержание.УплаченоШтрафПриостановленный    = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ШтрПриостПлат);
	Содержание.УплаченоШтрафРеструктурированный = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ШтрРеструкДолг);
	
	Содержание.УплаченоПроцентыВсего                        = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ПрВсего);
	Содержание.УплаченоНеуплаченныеПроценты                 = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ПрОстСумм);
	Содержание.УплаченоНеуплаченныеПроцентыПриостановленный = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ПрПриПлат);
	Содержание.УплаченоПроценты                             = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Уплачено.ПрБанкрот);
	
	Содержание.ПереданоНалог                 = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.ПрдСальдоРЮЛ.Налог);
	Содержание.ПереданоПени                  = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.ПрдСальдоРЮЛ.Пени);
	Содержание.ПереданоШтраф                 = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.ПрдСальдоРЮЛ.Штрафы);
	Содержание.ПереданоНеуплаченныеПроценты  = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.ПрдСальдоРЮЛ.НеупСум);
	Содержание.ПереданоПроценты              = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.ПрдСальдоРЮЛ.ПрБанкрот);
	
	Содержание.СписаноПени                    = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.СпЗадолжПен);
	Содержание.СписаноШтраф                   = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.СпЗадолжШтр);
	
	Содержание.СписаноПравительствомНалог     = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.СписЗПр.Налог);
	Содержание.СписаноПравительствомПени      = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.СписЗПр.Пени);
	Содержание.СписаноПравительствомШтраф     = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.СписЗПр.Штрафы);
	Содержание.СписаноПравительствомНеуплаченныеПроценты = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.СписЗПр.НеупСум);
	
	Содержание.ВозвращеноНалог                = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Возвращено.Налог);
	Содержание.ВозвращеноНалогИзлишний        = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Возвращено.НалИзлУп);
	Содержание.ВозвращеноПени                 = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Возвращено.Пени);
	Содержание.ВозвращеноПениИзлишний         = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Возвращено.ПенИзлУп);
	Содержание.ВозвращеноШтраф                = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Возвращено.Штраф);
	Содержание.ВозвращеноШтрафИзлишний        = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Возвращено.ШтрафИзлУп);
	Содержание.ВозвращеноПроценты             = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Возвращено.НеупСум);
	Содержание.ВозвращеноНеуплаченныеПроценты = СуммаПоДаннымНалоговогоОргана(СверкаЗаПериодXDTO.Возвращено.Проц);
	
	// Сальдо на конец сверяемого периода
	СальдоКонXDTO = СодАктXDTO.СальдоКон;
	
	Содержание.КонечныйОстатокЗадолженность             = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.ЗадолжВсего);
	
	Содержание.КонечныйОстатокНалог                     = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Налог.Всего);
	Содержание.КонечныйОстатокНалогОтрицательноеСальдо  = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Налог.СальдоОтр);
	Содержание.КонечныйОстатокНалогОтсроченный          = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Налог.ОтсрПлат);
	Содержание.КонечныйОстатокНалогПриостановленный     = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Налог.ПрПлат);
	Содержание.КонечныйОстатокНалогРеструктурированный  = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Налог.РестрДолг);
	
	Содержание.КонечныйОстатокПени                      = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Пени.Всего);
	Содержание.КонечныйОстатокПениОтрицательноеСальдо   = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Пени.СальдоОтр);
	Содержание.КонечныйОстатокПениОтсроченный           = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Пени.ОтсрПлат);
	Содержание.КонечныйОстатокПениПриостановленный      = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Пени.ПриостПлат);
	Содержание.КонечныйОстатокПениРеструктурированный   = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Пени.РеструкДолг);
	
	Содержание.КонечныйОстатокШтраф                     = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Штрафы.ШтрВсего);
	Содержание.КонечныйОстатокШтрафОтрицательноеСальдо  = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Штрафы.СальдоОтр);
	Содержание.КонечныйОстатокШтрафОтсроченный          = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Штрафы.ШтрОтсрПлат);
	Содержание.КонечныйОстатокШтрафПриостановленный     = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Штрафы.ШтрПриостПлат);
	Содержание.КонечныйОстатокШтрафРеструктурированный  = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.Штрафы.ШтрРестрДолг);
	
	Содержание.КонечныйОстатокНеуплаченныеПроцентыВсего = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.ОстНеупСум.НеупПрВс);
	Содержание.КонечныйОстатокНеуплаченныеПроценты      = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.ОстНеупСум.ОстНеПр);
	Содержание.КонечныйОстатокНеуплаченныеПроцентыПриостановленный = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.ОстНеупСум.ПриосВзПлат);
	
	Содержание.КонечныйОстатокПроценты                  = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.ПроцНачБанкр);
	
	Содержание.КонечныйОстатокПоложительноеСальдо         = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.СальдоПол.СальдоПолВс);
	Содержание.КонечныйОстатокНалогПоложительноеСальдо    = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.СальдоПол.Налог);
	Содержание.КонечныйОстатокПениПоложительноеСальдо     = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.СальдоПол.Пени);
	Содержание.КонечныйОстатокШтрафПоложительноеСальдо    = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.СальдоПол.Штраф);
	Содержание.КонечныйОстатокПроцентыПоложительноеСальдо = СуммаПоДаннымНалоговогоОргана(СальдоКонXDTO.СальдоПол.Проц);
	
	// Денежные средства, списанные с расчетных счетов налогоплательщика, но не зачисленные на счета по учету доходов бюджетов на конец сверяемого периода
	НеЗачисленныеСредстваXDTO = СодАктXDTO.ДенСрСп;
	
	Содержание.НеЗачисленныеСредстваНалог                = СуммаПоДаннымНалоговогоОргана(НеЗачисленныеСредстваXDTO.Налог);
	Содержание.НеЗачисленныеСредстваПени                 = СуммаПоДаннымНалоговогоОргана(НеЗачисленныеСредстваXDTO.Пени);
	Содержание.НеЗачисленныеСредстваШтраф                = СуммаПоДаннымНалоговогоОргана(НеЗачисленныеСредстваXDTO.Штрафы);
	Содержание.НеЗачисленныеСредстваНеуплаченныеПроценты = СуммаПоДаннымНалоговогоОргана(НеЗачисленныеСредстваXDTO.Остаток);
	Содержание.НеЗачисленныеСредстваПроценты             = СуммаПоДаннымНалоговогоОргана(НеЗачисленныеСредстваXDTO.Процент);
	
КонецПроцедуры

Функция НовыеАктыСверок()
	
	АктыСверок = Новый ТаблицаЗначений();
	
	АктыСверок.Колонки.Добавить("НаименованиеОрганизации", Новый ОписаниеТипов("Строка"));
	АктыСверок.Колонки.Добавить("ИНН",                     Новый ОписаниеТипов("Строка"));
	АктыСверок.Колонки.Добавить("КПП",                     Новый ОписаниеТипов("Строка"));
	АктыСверок.Колонки.Добавить("ЭтоЮрЛицо",               Новый ОписаниеТипов("Булево"));
	АктыСверок.Колонки.Добавить("НомерАкта",               Новый ОписаниеТипов("Строка"));
	АктыСверок.Колонки.Добавить("ДатаАкта",                ОбщегоНазначения.ОписаниеТипаДата(Частидаты.Дата));
	АктыСверок.Колонки.Добавить("ДатаНачала",              ОбщегоНазначения.ОписаниеТипаДата(Частидаты.Дата));
	АктыСверок.Колонки.Добавить("ДатаОкончания",           ОбщегоНазначения.ОписаниеТипаДата(Частидаты.Дата));
	АктыСверок.Колонки.Добавить("КодИФНС",                 Новый ОписаниеТипов("Строка"));
	АктыСверок.Колонки.Добавить("НаименованиеИФНС",        Новый ОписаниеТипов("Строка"));
	АктыСверок.Колонки.Добавить("Раздел1",       Новый ОписаниеТипов("ТаблицаЗначений"));
	АктыСверок.Колонки.Добавить("Раздел2",       Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат АктыСверок;
	
КонецФункции

Функция НовоеСодержаниеРаздела1Акта()
	
	ОписаниеКолонкиСТипомЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2));
	
	СодержаниеАкта = Новый ТаблицаЗначений();
	
	СодержаниеАкта.Колонки.Добавить("КБК",                Новый ОписаниеТипов("Строка"));
	СодержаниеАкта.Колонки.Добавить("НаименованиеНалога", Новый ОписаниеТипов("Строка"));
	СодержаниеАкта.Колонки.Добавить("КПП",                Новый ОписаниеТипов("Строка"));
	СодержаниеАкта.Колонки.Добавить("ОКТМО",              Новый ОписаниеТипов("Строка"));
	СодержаниеАкта.Колонки.Добавить("ОКАТО",              Новый ОписаниеТипов("Строка"));
	
	// Сальдо расчетов
	СодержаниеАкта.Колонки.Добавить("НеЗачисленныеСредства",    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НевыясненныеПлатежи",      ОписаниеКолонкиСТипомЧисло);
	
	// Сальдо расчетов по налогам
	СодержаниеАкта.Колонки.Добавить("НалогЗадолженностьВсего",  ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НалогОтрицательноеСальдо", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НалогОтсроченный",         ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НалогПриостановленный",    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НалогРеструктурированный", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НалогПоложительноеСальдо", ОписаниеКолонкиСТипомЧисло);
	
	// Сальдо расчетов по пеням
	СодержаниеАкта.Колонки.Добавить("ПениЗадолженностьВсего",   ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПениОтрицательноеСальдо",  ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПениОтсроченный",          ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПениПриостановленный",     ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПениРеструктурированный",  ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПениПоложительноеСальдо",  ОписаниеКолонкиСТипомЧисло);
	
	// Сальдо расчетов по штрафам
	СодержаниеАкта.Колонки.Добавить("ШтрафЗадолженностьВсего",  ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ШтрафОтрицательноеСальдо", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ШтрафОтсроченный",         ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ШтрафПриостановленный",    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ШтрафРеструктурированный", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ШтрафПоложительноеСальдо", ОписаниеКолонкиСТипомЧисло);
	
	// Сальдо расчетов по процентам
	СодержаниеАкта.Колонки.Добавить("ОстатокНеуплаченныеПроцентыДосрочные", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("Проценты",                             ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ОстатокНеуплаченныеПроценты",          ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПроцентыПриостановленный",             ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПроцентыПоложительноеСальдо",          ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПроцентыПриБанкротстве",               ОписаниеКолонкиСТипомЧисло);
	
	Возврат СодержаниеАкта;
	
КонецФункции

Функция НовоеСодержаниеРаздела2Акта()
	
	ОписаниеКолонкиСТипомЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2));
	
	СодержаниеАкта = Новый ТаблицаЗначений();
	
	СодержаниеАкта.Колонки.Добавить("КБК",                Новый ОписаниеТипов("Строка"));
	СодержаниеАкта.Колонки.Добавить("НаименованиеНалога", Новый ОписаниеТипов("Строка"));
	СодержаниеАкта.Колонки.Добавить("КПП",                Новый ОписаниеТипов("Строка"));
	СодержаниеАкта.Колонки.Добавить("ОКТМО",              Новый ОписаниеТипов("Строка"));
	СодержаниеАкта.Колонки.Добавить("ОКАТО",              Новый ОписаниеТипов("Строка"));
	
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокЗадолженность",            ОписаниеКолонкиСТипомЧисло);
	
	// Сальдо на начало сверяемого периода
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокНалог",                    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокНалогОтрицательноеСальдо", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокНалогОтсроченный",         ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокНалогПриостановленный",    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокНалогРеструктурированный", ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокПени",                     ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокПениОтрицательноеСальдо",  ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокПениОтсроченный",          ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокПениПриостановленный",     ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокПениРеструктурированный",  ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокШтраф",                    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокШтрафОтрицательноеСальдо", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокШтрафОтсроченный",         ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокШтрафПриостановленный",    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокШтрафРеструктурированный", ОписаниеКолонкиСТипомЧисло);

	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокНеуплаченныеПроцентыВсего",            ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокНеуплаченныеПроценты",                 ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокНеуплаченныеПроцентыПриостановленный", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокПроценты",                             ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокПоложительноеСальдо",                     ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокНалогПоложительноеСальдо",                ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокПениПоложительноеСальдо",                 ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокШтрафПоложительноеСальдо",                ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачальныйОстатокПроцентыПоложительноеСальдо",             ОписаниеКолонкиСТипомЧисло);
	
	// Данные за сверяемый период
	СодержаниеАкта.Колонки.Добавить("ПринятоеСальдоНалог",                ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПринятоеСальдоПени",                 ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПринятоеСальдоШтраф",                ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПринятоеСальдоНеуплаченныеПроценты", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПринятоеСальдоПроценты",             ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("НачисленоНалог",                ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачисленоПени",                 ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачисленоШтраф",                ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачисленоНеуплаченныеПроценты", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НачисленоПроценты",             ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("УменьшеноНалог",                ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УменьшеноПени",                 ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УменьшеноШтраф",                ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("УплаченоНалогВсего",               ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоНалог",                    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоНалогЗачтеноИзлишнего",    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоНалогОтсроченный",         ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоНалогПриостановленный",    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоНалогРеструктурированный", ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("УплаченоПениВсего",                ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоПени",                     ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоПениОтсроченный",          ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоПениПриостановленный",     ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоПениРеструктурированный",  ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("УплаченоШтрафВсего",               ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоШтраф",                    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоШтрафОтсроченный",         ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоШтрафПриостановленный",    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоШтрафРеструктурированный", ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("УплаченоПроцентыВсего",                        ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоНеуплаченныеПроценты",                 ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоНеуплаченныеПроцентыПриостановленный", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("УплаченоПроценты",                             ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("ПереданоНалог",                 ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПереданоПени",                  ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПереданоШтраф",                 ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПереданоНеуплаченныеПроценты",  ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ПереданоПроценты",              ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("СписаноПени",                 ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("СписаноШтраф",                ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("СписаноПравительствомНалог",  ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("СписаноПравительствомПени",   ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("СписаноПравительствомШтраф",  ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("СписаноПравительствомНеуплаченныеПроценты", ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("ВозвращеноНалог",                ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ВозвращеноНалогИзлишний",        ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ВозвращеноПени",                 ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ВозвращеноПениИзлишний",         ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ВозвращеноШтраф",                ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ВозвращеноШтрафИзлишний",        ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ВозвращеноПроценты",             ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("ВозвращеноНеуплаченныеПроценты", ОписаниеКолонкиСТипомЧисло);
	
	// Сальдо на конец сверяемого периода
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокЗадолженность",            ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокНалог",                    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокНалогОтрицательноеСальдо", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокНалогОтсроченный",         ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокНалогПриостановленный",    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокНалогРеструктурированный", ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокПени",                     ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокПениОтрицательноеСальдо",  ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокПениОтсроченный",          ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокПениПриостановленный",     ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокПениРеструктурированный",  ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокШтраф",                    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокШтрафОтрицательноеСальдо", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокШтрафОтсроченный",         ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокШтрафПриостановленный",    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокШтрафРеструктурированный", ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокНеуплаченныеПроцентыВсего",            ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокНеуплаченныеПроценты",                 ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокНеуплаченныеПроцентыПриостановленный", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокПроценты",                             ОписаниеКолонкиСТипомЧисло);
	
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокПоложительноеСальдо",         ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокНалогПоложительноеСальдо",    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокПениПоложительноеСальдо",     ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокШтрафПоложительноеСальдо",    ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("КонечныйОстатокПроцентыПоложительноеСальдо", ОписаниеКолонкиСТипомЧисло);
	
	// Денежные средства, списанные с расчетных счетов налогоплательщика, но не зачисленные на счета доходов бюджетов на конец сверяемого периода
	СодержаниеАкта.Колонки.Добавить("НеЗачисленныеСредстваНалог",                ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НеЗачисленныеСредстваПени",                 ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НеЗачисленныеСредстваШтраф",                ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НеЗачисленныеСредстваНеуплаченныеПроценты", ОписаниеКолонкиСТипомЧисло);
	СодержаниеАкта.Колонки.Добавить("НеЗачисленныеСредстваПроценты",             ОписаниеКолонкиСТипомЧисло);
	
	Возврат СодержаниеАкта;
	
КонецФункции

Функция ДатаФНС(Строка)
	
	Если ЗначениеЗаполнено(Строка) Тогда
		Возврат Дата(Прав(Строка, 4), Сред(Строка, 4, 2), Лев(Строка, 2));
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
КонецФункции

Функция СуммаПоДаннымНалоговогоОргана(ОбъектXDTO)
	
	Если ОбъектXDTO.Свойства().Получить("НалОрг") <> Неопределено Тогда
		Возврат ЧислоФНС(ОбъектXDTO.НалОрг);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ЗначениеЧисловогоПоля(ОбъектXDTO, Поле)
	
	Если ОбъектXDTO.Свойства().Получить(Поле) <> Неопределено Тогда
		Возврат ЧислоФНС(ОбъектXDTO[Поле]);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ЧислоФНС(Строка)
	
	Если ЗначениеЗаполнено(Строка) Тогда
		ЧастиЧисла = СтрРазделить(Строка, ".");
		Если ЧастиЧисла.Количество() = 2 Тогда
			ЦелаяЧасть = Число(ЧастиЧисла[0]);
			ДробнаяЧасть = ЧастиЧисла[1]/100;
			Возврат ЦелаяЧасть + ?(ЦелаяЧасть < 0, -ДробнаяЧасть, ДробнаяЧасть);
		ИначеЕсли ЧастиЧисла.Количество() = 1 Тогда
			Возврат Число(ЧастиЧисла[0]);
		Иначе
			Сообщить(НСтр("ru = 'Произошла ошибка при преобразовании строки суммы в число.'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция НаименованиеИФНСПоКоду(КодИФНС)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", КодИФНС);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НалоговыеОрганы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.НалоговыеОрганы КАК НалоговыеОрганы
	|ГДЕ
	|	НалоговыеОрганы.Код = &Код";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Наименование;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область НоваяФормаРегламентированнойОтчетности

#Область ПолучениеТекущегоСостоянияОтправки

Функция ТребованияВОписи(Опись) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы.СсылкаНаОбъект КАК Требование
		|ИЗ
		|	Справочник.ОписиВходящихДокументовИзНалоговыхОрганов.ВходящиеДокументы КАК ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы
		|ГДЕ
		|	ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы.Ссылка = &Опись
		|	И ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы.СсылкаНаОбъект.ВидДокумента В (ЗНАЧЕНИЕ(Перечисление.ВидыНалоговыхДокументов.ТребованиеОПредставленииДокументов), ЗНАЧЕНИЕ(Перечисление.ВидыНалоговыхДокументов.ТребованиеОПредставленииПоясненийКДекларацииНДС))";
	
	Запрос.УстановитьПараметр("Опись", Опись);
	Требования = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Требование");
	
	Возврат Требования; 
	
КонецФункции

// Текущее состояние отправки
//
// Параметры:
//  Ссылка					 - ДокументСсылка, СправочникСсылка - ссылка на объект, отправляемый в контролирующие органы.
//  КонтролирующийОрган		 - Строка или Перечисление.ТипыКонтролирующихОрганов
//  ДополнительныеПараметры	 - Структура:
//		Если содержит поле "ПолучатьОшибкиОтправки", то в результате возращаются поля НеотправленныеИзвещения и ЕстьКритическиеОшибки.
//		Если содержит поле "ПоказыватьПомеченныеНаУдаление", то анализируеются даже помеченные на удаление отправки.
//		Если содержит поле "ПолучатьДаты", то возвращаются даты смены состояния, иначе возврадается пустая дата.
//		Если содержит поле "Отправка", то возвращается информация по этой отправке(циклу обмена или отправке), иначе по последней.
// 
// Возвращаемое значение:
//	Структура с полями:
//	ТекущийЭтапОтправки - структура с полями:
//		ТекстНадписи - Строка - текст, отображаемый в панели отправки объекта
//		ТекстСтатуса - Строка - текст, отображаемый в колонке Состояние таблиц формы Отчетность
//		Дата - Дата - Дата текущего этапа. Возращается, если ДополнительныеПараметры содержат поле "ПолучатьДаты".
//		КомментарийКСостоянию
//		НаименованиеПротокола
//		Протокол	 - Ссылка на транспортное сообщение или отправку или Неопределено.
//		СостояниеСдачиОтчетности - ПеречислениеСсылка.СостояниеСдачиОтчетности
//		ЭтапПройден - Булево
//	НеотправленныеИзвещения - Структура, поля перечислены ниже. 
//		Возращается, если ДополнительныеПараметры содержат поле "ПолучатьОшибкиОтправки".
//			МассивСообщенийНеИмеющихПодтверждений - Массив
//			МассивНеотправленныхПодтверждений - Массив
//			ЕстьНеотправленныеИзвещения - Булево
//	ЕстьКритическиеОшибки - Булево.
//		Возращается, если ДополнительныеПараметры содержат поле "ПолучатьОшибкиОтправки".
//В случае ошибки или отсуствия данных, возвращается значение Неопределено
Функция ТекущееСостояниеОтправки(Знач Ссылка, Знач КонтролирующийОрган = "ФНС", ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		ТекущееСостояние = Новый Структура;
		ТекущееСостояние.Вставить("ТекущийЭтапОтправки");
		ТекущееСостояние.Вставить("НеотправленныеИзвещения");
		ТекущееСостояние.Вставить("ЕстьКритическиеОшибки");
		ТекущееСостояние.Вставить("ТаблицаЭтаповОтправки");
		ТекущееСостояние.Вставить("КонтролирующийОрган", КонтролирующийОрган);
		
		// Преобразуем контролирующий орган к нужному виду
		КонтролирующийОрган = ТипКонтролирующегоОргана(КонтролирующийОрган);
		
		// Вся таблица этапов
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправки(Ссылка, КонтролирующийОрган, ДополнительныеПараметры);
		
		Если ТаблицаЭтаповОтправки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Текущий этап отправки (для прорисовки панели и определния статуса в списке отчетов)
		ТекущийЭтапОтправки = ТекущийЭтапОтправки(ТаблицаЭтаповОтправки);
		ТекущееСостояние.Вставить("ТекущийЭтапОтправки", ТекущийЭтапОтправки);
		
		ПолучатьОшибкиОтправки = ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
			И ДополнительныеПараметры.Свойство("ПолучатьОшибкиОтправки") 
			И ДополнительныеПараметры.ПолучатьОшибкиОтправки;
			
		Если ПолучатьОшибкиОтправки Тогда
			// Критические ошибки
			ТекущееСостояние.Вставить("ЕстьКритическиеОшибки", 
				ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЕстьКритическиеСообщения(Ссылка, ДополнительныеПараметры));
			
			// Неотправленные или несозданные подтверждения
			ТекущееСостояние.Вставить("НеотправленныеИзвещения", НеотправленныеИзвещения(Ссылка, КонтролирующийОрган, ДополнительныеПараметры));
		КонецЕсли;
		
		ВозвращатьТаблицуЭтаповОтправки = ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
			И ДополнительныеПараметры.Свойство("ВозвращатьТаблицуЭтаповОтправки") 
			И ДополнительныеПараметры.ВозвращатьТаблицуЭтаповОтправки;
			
		Если ВозвращатьТаблицуЭтаповОтправки Тогда
			ТекущееСостояние.Вставить("ТаблицаЭтаповОтправки", ТаблицаЭтаповОтправки);
		КонецЕсли;
		
	Исключение
		
		ТекущееСостояние = Неопределено;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение текущего состояния отправки, критических ошибок и неотправленных извещений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
		
	Возврат ТекущееСостояние;
		
КонецФункции

Функция ТекущийЭтапОтправки(ТаблицаЭтаповОтправки) Экспорт
	
	НомерЭтапа = ТаблицаЭтаповОтправки.Количество();
	
	// В таблице этапов определяем последний
	ТекущийЭтап = Неопределено;
	Пока НомерЭтапа >= 0 Цикл
		
		НомерЭтапа = НомерЭтапа - 1;
		
		ТекущийЭтап = ТаблицаЭтаповОтправки[НомерЭтапа];
		Если ТекущийЭтап.ЭтапПройден Тогда
			Прервать;
		Конецесли;
	
	КонецЦикла;
	
	// Строку таблицы значений последнего этапа преобразуем к структуре
	Если ТекущийЭтап <> Неопределено Тогда
		СтруктураТекущегоЭтапа = Новый Структура;
		Для каждого Колонка Из ТаблицаЭтаповОтправки.Колонки Цикл
			СтруктураТекущегоЭтапа.Вставить(Колонка.Имя, ТекущийЭтап[Колонка.Имя]);
		КонецЦикла;
		
		Возврат СтруктураТекущегоЭтапа;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НеотправленныеИзвещения(Знач ОтчетСсылка, Знач КонтролирующийОрган, ДополнительныеПараметры = Неопределено)
	
	МассивСообщенийНеИмеющихПодтверждений = Новый Массив;
	МассивНеотправленныхПодтверждений = Новый Массив;
	
	Результат = Новый Структура;
	Результат.Вставить("МассивСообщенийНеИмеющихПодтверждений", МассивСообщенийНеИмеющихПодтверждений);
	Результат.Вставить("МассивНеотправленныхПодтверждений", 	МассивНеотправленныхПодтверждений);
	Результат.Вставить("ЕстьНеотправленныеИзвещения",			Ложь);
	
	Если НЕ (КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ФНС
			ИЛИ КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ПФР
			ИЛИ КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ФСГС) Тогда
			
		Возврат Результат;
			
	КонецЕсли;
	
	Если ОтчетСсылка <> Неопределено Тогда
		Ссылка = ОтчетСсылка.Ссылка;
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			Возврат Результат;
		КонецЕсли;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ЦиклОбмена = ДополнительныеПараметры.Отправка;
	Иначе
		ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(ОтчетСсылка);
	КонецЕсли;
	
	ПоказыватьПомеченныеНаУдаление = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоказыватьПомеченныеНаУдаление")
		И ДополнительныеПараметры.ПоказыватьПомеченныеНаУдаление;
	
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
			
		Сообщения = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена,,ПоказыватьПомеченныеНаУдаление);
		
		// определяем соответствие между типами сообщений-оснований и сообщений-подтверждений на них
		ТипыОснованийИПодтверждений = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ТипыОснованийИПодтверждений(ЦиклОбмена);
		
		// перебираем соответствие подтверждений основаниям
		ОбменНапрямую = Неопределено;
		Для Каждого ТипОснованияИПодтверждения Из ТипыОснованийИПодтверждений Цикл
			
			ТипОснования = ТипОснованияИПодтверждения.Ключ;
			ТипПодтверждения = ТипОснованияИПодтверждения.Значение;
			
			// для каждого основания...
			СообщенияОснования = Сообщения.НайтиСтроки(Новый Структура("Тип", ТипОснования));
			Для Каждого СообщениеОснование Из СообщенияОснования Цикл
				
				// ... ищем подтверждение, и если не находим, то возвращаем Ложь
				СообщенияПодтверждения = Сообщения.НайтиСтроки(Новый Структура("Основание", СообщениеОснование.Ссылка));
				Если ТипОснования <> Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР И НЕ ЭтоРассылкаПФР(СообщениеОснование) Тогда
					Если СообщенияПодтверждения.Количество() = 0 Тогда
						МассивСообщенийНеИмеющихПодтверждений.Добавить(СообщениеОснование.Ссылка);
					Иначе
						// формируем массив неотправленных подтверждений
						Для каждого СообщениеПодтверждения Из СообщенияПодтверждения Цикл
							Если СообщениеПодтверждения.Статус <> Перечисления.СтатусыПисем.Отправленное 
								И СообщениеПодтверждения.Статус <> Перечисления.СтатусыПисем.Полученное Тогда
								МассивНеотправленныхПодтверждений.Добавить(СообщениеПодтверждения.Ссылка);
							КонецЕсли;
						КонецЦикла;  
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Результат.Вставить("МассивСообщенийНеИмеющихПодтверждений", МассивСообщенийНеИмеющихПодтверждений);
	Результат.Вставить("МассивНеотправленныхПодтверждений", 	МассивНеотправленныхПодтверждений);
	Результат.Вставить("ЕстьНеотправленныеИзвещения", 			МассивСообщенийНеИмеющихПодтверждений.Количество() > 0 
																	ИЛИ МассивНеотправленныхПодтверждений.Количество() > 0);
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаЭтаповОтправки(Знач Ссылка, Знач КонтролирующийОрган = "ФНС", ДополнительныеПараметры = Неопределено) Экспорт
	
	// Преобразуем контролирующий орган к нужному виду
	ТипКонтролирующегоОргана = ТипКонтролирующегоОргана(КонтролирующийОрган);
	
	// Заявление абонента на подключение к 1С-Отчетности
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи") Тогда
		
		 ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиЗаявленияАбонентаСпецоператораСвязи(Ссылка, ДополнительныеПараметры);
	
	// Документ реализации полномочий
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
		
		 ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиДокументаРеализацииПолномочийНалоговыхОрганов(Ссылка, ДополнительныеПараметры);
			
	// Переписка
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
		
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиПерепискиСКонтролирующимиОрганами(Ссылка, ДополнительныеПараметры);
				
	// Макеты ПД
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.МакетыПенсионныхДел") Тогда
		
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиМакетаПенсионногоДела(Ссылка, ДополнительныеПараметры);	
				
	// ЕГРЮЛ, ЕГРИП
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП") Тогда
		
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП(Ссылка, ДополнительныеПараметры);
				
	// Запрос ИОН
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда
		
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиЗапросаИОН(Ссылка, ДополнительныеПараметры);
		
	// Входящие описи
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ОписиВходящихДокументовИзНалоговыхОрганов") Тогда
		
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиОписиВходящихДокументовВНалоговыеОрганы(Ссылка, ДополнительныеПараметры);
			
	// Ответы на требование
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ОписиИсходящихДокументовВНалоговыеОрганы")
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоясненияКДекларацииПоНДС") Тогда
		
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиОтветовНаТребованияФНС(Ссылка, ДополнительныеПараметры);
			
	// Запрос ИОС
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя") Тогда
		
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиЗапросаНаИнформационноеОбслуживаниеСтрахователя(Ссылка, ДополнительныеПараметры);

	// ФНС
	ИначеЕсли ТипКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
		
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиФНС(Ссылка, ДополнительныеПараметры);
		
	// ПФР
	ИначеЕсли ТипКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
		
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиПФР(Ссылка, ДополнительныеПараметры);
		
	// Росстат
	ИначеЕсли ТипКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
		
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиРосстат(Ссылка, ДополнительныеПараметры);
			
	// ФСС
	ИначеЕсли ТипКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
	
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиФСС(Ссылка, ДополнительныеПараметры);

	// ФСРАР
	ИначеЕсли ТипКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
		
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиФСРАР(Ссылка, ДополнительныеПараметры);
		
	// РПН
	ИначеЕсли ТипКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
		
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиРПН(Ссылка, ДополнительныеПараметры);
		
	// ФТС
	ИначеЕсли ТипКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФТС Тогда
		
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиФТС(Ссылка, ДополнительныеПараметры);
		
	// Банк России
	ИначеЕсли ТипКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.БанкРоссии Тогда
		
		ТаблицаЭтаповОтправки = ТаблицаЭтаповОтправкиБанкРоссии(Ссылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

#Область ФормированиеТаблицЭтаповОтправки

Функция ТаблицаЭтаповОтправкиЗаявленияАбонентаСпецоператораСвязи(Ссылка, ДополнительныеПараметры);
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не отправлено'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не отправлено'");
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= "";
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено оператору'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено оператору'");
	СтрокаЭтапа.Дата						= Ссылка.ДатаОтправкиЗаявления;
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается результат обработки'");
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= Ссылка.Статус <> Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено
												И ЗначениеЗаполнено(Ссылка.Статус);

	ЕстьКомментарий = НЕ ПустаяСтрока(Ссылка.СтатусКомментарий);
	Если Ссылка.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено Тогда
		
		Если Ссылка.НастройкаЗавершена Тогда
			Текст = НСтр("ru = 'Отклонено'");
		Иначе
			Текст = НСтр("ru = 'Отклонено, настройка не завершена'");
		КонецЕсли;
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= Текст;
		СтрокаЭтапа.ТекстСтатуса				= Текст;
		СтрокаЭтапа.Дата						= Ссылка.ДатаПолученияОтвета;
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и сформируйте заявление еще раз'");
		СтрокаЭтапа.НаименованиеПротокола		= ?(ЕстьКомментарий, НСтр("ru = 'Протокол ошибок'"), "");
		СтрокаЭтапа.Протокол					= "";
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= Истина;

	Иначе
		Если ЕстьКомментарий Тогда
			Информация = Ссылка.СтатусКомментарий;
		Иначе
			Информация = "";
		КонецЕсли;
		
		ЭтапПройден = Ссылка.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено;
		
		Если Ссылка.НастройкаЗавершена Тогда
			Текст = НСтр("ru = 'Одобрено'");
		Иначе
			Текст = НСтр("ru = 'Одобрено, настройка не завершена'");
		КонецЕсли;
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= Текст;
		СтрокаЭтапа.ТекстСтатуса				= Текст;
		СтрокаЭтапа.Дата						= ?(ЭтапПройден, Ссылка.ДатаПолученияОтвета, Дата(1,1,1));
		СтрокаЭтапа.КомментарийКСостоянию		= ?(НЕ Ссылка.НастройкаЗавершена, НСтр("ru = '       Для завершения настройки нажмите кнопку ""Обновить""'"), "");
		СтрокаЭтапа.НаименованиеПротокола		= ?(ЕстьКомментарий И Ссылка.НастройкаЗавершена, НСтр("ru = 'Протокол'"), "");
		СтрокаЭтапа.Протокол					= "";
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= ЭтапПройден;
		
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;

КонецФункции

Функция ТаблицаЭтаповОтправкиОписиВходящихДокументовВНалоговыеОрганы(СсылкаНаОтчет, ДополнительныеПараметры)
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Получено'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Получено'");
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= "";
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтправленоИзКонтролирующегоОргана;
	СтрокаЭтапа.ЭтапПройден					= Истина;

	Возврат ТаблицаЭтаповОтправки;

КонецФункции

Функция ТаблицаЭтаповОтправкиДокументаРеализацииПолномочийНалоговыхОрганов(СсылкаНаОтчет, ДополнительныеПараметры)
	
	НеПолучатьДаты = НЕ (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПолучатьДаты")
		И ДополнительныеПараметры.ПолучатьДаты);
		
	ПоказыватьПомеченныеНаУдаление = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоказыватьПомеченныеНаУдаление")
		И ДополнительныеПараметры.ПоказыватьПомеченныеНаУдаление;
		
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	// У описи не может быть пустого цикла обмена
	// получаем список сообщений
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ЦиклОбмена = ДополнительныеПараметры.Отправка;
	Иначе
		ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	КонецЕсли;
	
	Опись = ДокументооборотСКОВызовСервера.ПолучитьОписьВходящихДокументовПоТребованию(СсылкаНаОтчет);
	
	СообщенияЦикла = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена,,ПоказыватьПомеченныеНаУдаление,Истина);
	
	// выделяем основные типы сообщений
	СтрДокументНО 					= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ДокументНО));
	СтрИзвещениеДокументНП 			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип, Статус", Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП, Перечисления.СтатусыПисем.Отправленное));
	СтрРезультатПриемаДокументНП 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП));
	СтрИзвещениеРезультатПриемаНО 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНО));
	
	Если НеПолучатьДаты Тогда
		ДатаОтправкиИзФНС 	= Дата(1,1,1);
		ДатаОтказаВПриеме 	= Дата(1,1,1);
		ДатаПриемаОписиНами = Дата(1,1,1);
	Иначе
		ДатаОтправкиИзФНС 	= Опись.ДатаОтправки;
		ДатаОтказаВПриеме 	= ?(СтрРезультатПриемаДокументНП.Количество() > 0, 	СтрРезультатПриемаДокументНП[0].ДатаТранспорта,	Дата(1,1,1));
		ДатаПриемаОписиНами = ?(СтрРезультатПриемаДокументНП.Количество() > 0, 	СтрРезультатПриемаДокументНП[0].Дата, 			Дата(1,1,1));
	КонецЕсли;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено'");
	СтрокаЭтапа.Дата						= ДатаОтправкиИзФНС;
	СтрокаЭтапа.КомментарийКСостоянию		= "";
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтправленоИзКонтролирующегоОргана;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	// Случай, когда в Описи нет требований
	Если СтрРезультатПриемаДокументНП.Количество() > 0 И ПолучитьМассивТребованийПоОписиВходящихДокументов(Опись).Количество() = 0 Тогда
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Получено'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Получено'");
		СтрокаЭтапа.Дата						= ДатаПриемаОписиНами;
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.НаименованиеПротокола		= "";
		СтрокаЭтапа.Протокол					= "";
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПриемПодтвержден;
		СтрокаЭтапа.ЭтапПройден					= Истина;

	Иначе
		
		ЭтоТребованиеОПредставленииДокументов = 
			СсылкаНаОтчет.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииДокументов;
		ЭтоТребованиеОПредставленииПоясненийКДекларацииНДС = 
			СсылкаНаОтчет.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииПоясненийКДекларацииНДС;
			
		ЭтоТребование = ЭтоТребованиеОПредставленииДокументов 
			ИЛИ ЭтоТребованиеОПредставленииПоясненийКДекларацииНДС;
		
		Требования = Новый Массив;
		Требования.Добавить(СсылкаНаОтчет);
		Результат = ПолучитьКоличествоОтветовНаТребования(Требования);
		КоличествоОтветов = Результат.Получить(СсылкаНаОтчет);
		
		// Формируем строку с количеством ответов
		Если КоличествоОтветов = 0 ИЛИ КоличествоОтветов = Неопределено Тогда
			КоличествоОтветовПредставление = "";
		Иначе
			
			Если ЭтоТребованиеОПредставленииПоясненийКДекларацииНДС Тогда
				КоличествоОтветовПредставление = НСтр("ru = 'Пояснения (%Ответы%)'");
			Иначе
				КоличествоОтветовПредставление = НСтр("ru = 'Ответы (%Ответы%)'");
			КонецЕсли;
			
			КоличествоОтветовПредставление = СтрЗаменить(КоличествоОтветовПредставление, "%Ответы%", Строка(КоличествоОтветов));
		КонецЕсли;
		
		// Формируем текст предупреждением
		Если ЭтоТребование Тогда
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(СсылкаНаОтчет.Организация) Тогда
				КомментарийКСостоянию = НСтр("ru = 'Если прием требования не будет подтвержден в течение 6 рабочих дней с момента отправки, то ФНС вправе заблокировать расчетный счет организации'");
			Иначе
				КомментарийКСостоянию = НСтр("ru = 'Если прием требования не будет подтвержден в течение 1 рабочего дня с момента отправки из ФНС, то документы будут высланы по почте'");
			КонецЕсли;
		Иначе
			МассивТребований = ТребованияВОписи(Опись);
			Если МассивТребований.Количество() > 0 Тогда
				КомментарийКСостоянию = НСтр("ru = 'Этот документ получен вместе с требованием. Подтверждение приема происходит по всем документам одновременно'");
			Иначе
				КомментарийКСостоянию = НСтр("ru = 'Если прием документов не будет подтвержден в течение 1 рабочего дня с момента отправки из ФНС, то документы будут высланы по почте'");
			КонецЕсли;
		КонецЕсли;

		Если СтрРезультатПриемаДокументНП.Количество() > 0 Тогда
			ЧислоСообщений = СтрРезультатПриемаДокументНП.Количество();
			Если ЧислоСообщений = 1 Тогда
				РезультатПриема = СтрРезультатПриемаДокументНП[0];
			Иначе
				// если протоколов несколько, то ориентируемся на наиболее свежий из них
				НаиболееПозднийРезультат = Неопределено;
				ДатаНаиболееПозднегоРезультата = '00010101';
				Для Каждого РезультатПриема Из СтрРезультатПриемаДокументНП Цикл
					ДатаРезультатаПриема = РезультатПриема.Дата;
					Если ДатаРезультатаПриема >= ДатаНаиболееПозднегоРезультата Тогда
						ДатаНаиболееПозднегоРезультата = ДатаРезультатаПриема;
						НаиболееПозднийРезультат = РезультатПриема;
					КонецЕсли;
				КонецЦикла;
				РезультатПриема = НаиболееПозднийРезультат;
			КонецЕсли;
			
			Если РезультатПриема <> Неопределено И РезультатПриема.Ссылка.ПротоколСОшибкой Тогда
		
				СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
				СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отказано в приеме'");
				СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отказано в приеме'");
				СтрокаЭтапа.Дата						= Дата(1,1,1);
				СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Отказ в приеме сформирован '") + Формат(ДатаОтказаВПриеме, "ДЛФ=DT");
				СтрокаЭтапа.НаименованиеПротокола		= КоличествоОтветовПредставление;
				СтрокаЭтапа.Протокол					= РезультатПриема.Ссылка;
				СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
				СтрокаЭтапа.ЭтапПройден					= СтрРезультатПриемаДокументНП.Количество() > 0;

			Иначе
				
				Если ЭтоТребование Тогда
					ТекстНадписи = НСтр("ru = 'Прием подтвержден'");
				Иначе
					ТекстНадписи = НСтр("ru = 'Получено'");
				КонецЕсли;
				
				СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
				СтрокаЭтапа.ТекстНадписи				= ТекстНадписи;
				СтрокаЭтапа.ТекстСтатуса				= ТекстНадписи;
				СтрокаЭтапа.Дата						= ДатаПриемаОписиНами;
				СтрокаЭтапа.КомментарийКСостоянию		= "";
				СтрокаЭтапа.НаименованиеПротокола		= КоличествоОтветовПредставление;
				СтрокаЭтапа.Протокол					= ?(СтрРезультатПриемаДокументНП.Количество() > 0, СтрРезультатПриемаДокументНП[0].Ссылка, "");
				СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПриемПодтвержден;
				СтрокаЭтапа.ЭтапПройден					= СтрРезультатПриемаДокументНП.Количество() > 0;
				
			КонецЕсли;
		Иначе
			
			// Случай, когда в Описи есть требования
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Подтвердите прием'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Подтвердите прием'");
			СтрокаЭтапа.Дата						= Дата(1,1,1);
			СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостоянию;
			СтрокаЭтапа.НаименованиеПротокола		= КоличествоОтветовПредставление;
			СтрокаЭтапа.Протокол					= "";
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ТребуетсяПодтверждениеПриема;
			СтрокаЭтапа.ЭтапПройден					= Истина;
			
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;
		
КонецФункции

Функция ТаблицаЭтаповОтправкиЗапросаИОН(СсылкаНаОтчет, ДополнительныеПараметры)
	
	НеПолучатьДаты = НЕ (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПолучатьДаты")
		И ДополнительныеПараметры.ПолучатьДаты);
		
	ПоказыватьПомеченныеНаУдаление = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоказыватьПомеченныеНаУдаление")
		И ДополнительныеПараметры.ПоказыватьПомеченныеНаУдаление;
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	 
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не отправлено'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не отправлено'");
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостояниюНеОтправлено();
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;

	// получаем список сообщений
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ЦиклОбмена = ДополнительныеПараметры.Отправка;
	Иначе
		ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;

	СообщенияЦикла = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена,,ПоказыватьПомеченныеНаУдаление,Истина);
	
	// выделяем основные типы сообщений
	СтрЗапросыНП 						= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ЗапросНП));
	СтрПодтвержденияЗапросНО 			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО));
	СтрИзвещенияПодтверждениеНП 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП));
	СтрИзвещенияЗапросНО 				= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО));
	СтрРезультатыПриемаЗапросНО 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО));
	СтрИзвещенияРезультатПриемаНП 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП));
	СтрРезультатыОбработкиЗапросНО 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО));
	СтрИзвещенияРезультатОбработкиНП 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП));
	
	// Если статус первичного - не отправлено, тогда выходим 
	Если СтрЗапросыНП.Количество() > 0 И СтрЗапросыНП[0].Статус <> Перечисления.СтатусыПисем.Отправленное Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено оператору'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено оператору'");
	СтрокаЭтапа.Дата						= ДатаОтправки(СтрЗапросыНП, НеПолучатьДаты);;
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается подтверждение даты отправки'");
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= СтрЗапросыНП.Количество() > 0;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в ФНС'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в ФНС'");
	СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрПодтвержденияЗапросНО, НеПолучатьДаты);;
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается прием запроса в обработку'");
	СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Подтверждение даты отправки'");
	СтрокаЭтапа.Протокол					= ?(СтрПодтвержденияЗапросНО.Количество() > 0, СтрПодтвержденияЗапросНО[0].Ссылка, "");
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= СтрПодтвержденияЗапросНО.Количество() > 0;
	
	// определяем наиболее свежее сообщение с результатом приема
	ПоследнийРезультатПриема = Неопределено;
	Для Каждого СтрРезультатПриемаЗапросНО Из СтрРезультатыПриемаЗапросНО Цикл
		Если ПоследнийРезультатПриема = Неопределено ИЛИ СтрРезультатПриемаЗапросНО.Дата > ПоследнийРезультатПриема.Дата Тогда
			ПоследнийРезультатПриема = СтрРезультатПриемаЗапросНО;
		КонецЕсли;
	КонецЦикла;
	
	// если результат приема отрицательный, то выводим соответствующее сообщение
	Если ПоследнийРезультатПриема <> Неопределено И ПоследнийРезультатПриема.ПротоколСОшибкой Тогда
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отказано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отказано'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрРезультатыПриемаЗапросНО, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте новый запрос'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Уведомление об отказе'");
		СтрокаЭтапа.Протокол					= ?(СтрРезультатыПриемаЗапросНО.Количество() > 0, СтрРезультатыПриемаЗапросНО[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= СтрРезультатыПриемаЗапросНО.Количество() > 0;
		
	Иначе
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Принято в обработку'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Принято в обработку'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрРезультатыПриемаЗапросНО, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается ответ на запрос'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Квитанция о приеме'");
		СтрокаЭтапа.Протокол					= ?(СтрРезультатыПриемаЗапросНО.Количество() > 0, СтрРезультатыПриемаЗапросНО[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
		СтрокаЭтапа.ЭтапПройден					= СтрРезультатыПриемаЗапросНО.Количество() > 0;
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Готово'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Готово'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрРезультатыОбработкиЗапросНО, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.НаименованиеПротокола		= СсылкаНаОтчет.ВидУслуги;
		СтрокаЭтапа.Протокол					= ?(СтрРезультатыОбработкиЗапросНО.Количество() > 0, СтрРезультатыОбработкиЗапросНО[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= СтрРезультатыОбработкиЗапросНО.Количество() > 0;
		
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ТаблицаЭтаповОтправкиЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП(СсылкаНаОтчет, ДополнительныеПараметры)
	
	НеПолучатьДаты = НЕ (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ПолучатьДаты")
			И ДополнительныеПараметры.ПолучатьДаты);
			
	ПоказыватьПомеченныеНаУдаление = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоказыватьПомеченныеНаУдаление")
		И ДополнительныеПараметры.ПоказыватьПомеченныеНаУдаление;
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не отправлено'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не отправлено'");
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостояниюНеОтправлено();
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	// получаем список сообщений
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ЦиклОбмена = ДополнительныеПараметры.Отправка;
	Иначе
		ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	СообщенияЦикла = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена,,ПоказыватьПомеченныеНаУдаление,Истина);

	// выделяем основные типы сообщений
	СтрЗапросЕГР 					= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ЗапросНаВыпискуЕРГЮЛ_ЕГРИП));
	СтрРезультатыОбработкиЗапросЕГР = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросаНаВыпискуЕРГЮЛ_ЕГРИП));
	
	// Если статус первичного - не отправлено, тогда выходим 
	Если СтрЗапросЕГР.Количество() > 0 И СтрЗапросЕГР[0].Статус <> Перечисления.СтатусыПисем.Отправленное Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Принято в обработку'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Принято в обработку'");
	СтрокаЭтапа.Дата						= ДатаОтправки(СтрЗапросЕГР, НеПолучатьДаты);;
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается ответ на запрос'");
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= СтрЗапросЕГР.Количество() > 0;
	
	// определяем наиболее свежее сообщение с результатом приема
	ПоследнийРезультатПриема = Неопределено;
	Для Каждого СтрРезультатОбработкиЗапроса Из СтрРезультатыОбработкиЗапросЕГР Цикл
		Если ПоследнийРезультатПриема = Неопределено ИЛИ СтрРезультатОбработкиЗапроса.Дата > СтрРезультатОбработкиЗапроса.Дата Тогда
			ПоследнийРезультатПриема = СтрРезультатОбработкиЗапроса;
		КонецЕсли;
	КонецЦикла;
	
	// если результат приема отрицательный, то выводим соответствующее сообщение
	Если ПоследнийРезультатПриема <> Неопределено И ПоследнийРезультатПриема.ПротоколСОшибкой Тогда
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отказано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отказано'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(ПоследнийРезультатПриема, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте новый запрос'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Уведомление об отказе'");
		СтрокаЭтапа.Протокол					= ?(СтрРезультатыОбработкиЗапросЕГР.Количество() > 0, СтрРезультатыОбработкиЗапросЕГР[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= СтрРезультатыОбработкиЗапросЕГР.Количество() > 0;

	Иначе
		
		ВАрхиве = Ложь;
		ЕстьОтвет = ЕстьОтветНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП(СсылкаНаОтчет, ВАрхиве);
		
		Если СтрРезультатыОбработкиЗапросЕГР.Количество() > 0 Тогда
			ТранспортноеСообщение = СтрРезультатыОбработкиЗапросЕГР[0].Ссылка;
			СообщениеРаспаковано  = ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение).Количество() > 0;
		Иначе
			СообщениеРаспаковано = Ложь;
		КонецЕсли;
		
		Если СтрРезультатыОбработкиЗапросЕГР.Количество() > 0 И СообщениеРаспаковано И НЕ ЕстьОтвет Тогда
			
			Если СсылкаНаОтчет.ВидПараметраЗапроса	= Перечисления.ВидыПараметровЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП.ИНН Тогда
				Комментарий = НСтр("ru = 'По запрошенному ИНН информация в реестре не найдена'");
			Иначе
				Комментарий = НСтр("ru = 'По запрошенному ОГРН информация в реестре не найдена'");
			КонецЕсли;
			
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не найдено в реестре'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не найдено в реестре'");
			СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрРезультатыОбработкиЗапросЕГР, НеПолучатьДаты);
			СтрокаЭтапа.КомментарийКСостоянию		= Комментарий;
			СтрокаЭтапа.НаименованиеПротокола		= "";
			СтрокаЭтапа.Протокол					= "";
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
			СтрокаЭтапа.ЭтапПройден					= Истина;
			
		Иначе

			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Готово'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Готово'");
			СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрРезультатыОбработкиЗапросЕГР, НеПолучатьДаты);
			СтрокаЭтапа.КомментарийКСостоянию		= "";
			СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Выписка'");
			СтрокаЭтапа.Протокол					= ?(СтрРезультатыОбработкиЗапросЕГР.Количество() > 0, СтрРезультатыОбработкиЗапросЕГР[0].Ссылка, "");
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
			СтрокаЭтапа.ЭтапПройден					= СтрРезультатыОбработкиЗапросЕГР.Количество() > 0;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ТаблицаЭтаповОтправкиЗапросаНаИнформационноеОбслуживаниеСтрахователя(СсылкаНаОтчет, ДополнительныеПараметры)
	
	НеПолучатьДаты = НЕ (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПолучатьДаты")
		И ДополнительныеПараметры.ПолучатьДаты);
		
	ПоказыватьПомеченныеНаУдаление = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоказыватьПомеченныеНаУдаление")
		И ДополнительныеПараметры.ПоказыватьПомеченныеНаУдаление;
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не отправлено'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не отправлено'");
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостояниюНеОтправлено();
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	// получаем список сообщений
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ЦиклОбмена = ДополнительныеПараметры.Отправка;
	Иначе
		ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	СообщенияЦикла = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена,,ПоказыватьПомеченныеНаУдаление,Истина);
	
	// выделяем основные типы сообщений
	СтрПервичныеСообщенияСодержащееЗапросПФР 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР));
	СтрПодтвержденияПолученияЗапросаПФР 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР));
	СтрОтветыНаЗапросПФР 						= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР));
	СтрОтветыНаЗапросКвитанцияПФР 				= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР));
		
	// Если статус первичного - не отправлено, тогда выходим 
	Если СтрПервичныеСообщенияСодержащееЗапросПФР.Количество() > 0 И СтрПервичныеСообщенияСодержащееЗапросПФР[0].Статус <> Перечисления.СтатусыПисем.Отправленное Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	// Отправлено в ПФР
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в ПФР'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в ПФР'");
	СтрокаЭтапа.Дата						= ДатаОтправки(СтрПервичныеСообщенияСодержащееЗапросПФР, НеПолучатьДаты);
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается прием запроса в обработку'");
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= СтрПервичныеСообщенияСодержащееЗапросПФР.Количество() > 0;

	// Принято в обработку
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Принято в обработку'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Принято в обработку'");
	СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрПодтвержденияПолученияЗапросаПФР, НеПолучатьДаты);;
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается ответ на запрос'");
	СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Подтверждение получения'");
	СтрокаЭтапа.Протокол					= ?(СтрПодтвержденияПолученияЗапросаПФР.Количество() > 0, СтрПодтвержденияПолученияЗапросаПФР[0].Ссылка, "");
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= СтрПодтвержденияПолученияЗапросаПФР.Количество() > 0;
			
	// определяем наиболее свежее сообщение с результатом приема
	ПоследнийОтветНаЗапрос = Неопределено;
	Для Каждого СтрОтветНаЗапросПФР Из СтрОтветыНаЗапросПФР Цикл
		Если ПоследнийОтветНаЗапрос = Неопределено ИЛИ СтрОтветНаЗапросПФР.Дата > ПоследнийОтветНаЗапрос.Дата Тогда
			ПоследнийОтветНаЗапрос = СтрОтветНаЗапросПФР;
		КонецЕсли;
	КонецЦикла;
	
	// если результат отрицательный, то выводим соответствующее сообщение
	Если ПоследнийОтветНаЗапрос <> Неопределено И ПоследнийОтветНаЗапрос.ПротоколСОшибкой Тогда
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отказано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отказано'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрОтветыНаЗапросПФР, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте новый запрос'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Уведомление об отказе'");
		СтрокаЭтапа.Протокол					= ?(СтрОтветыНаЗапросПФР.Количество() > 0, СтрОтветыНаЗапросПФР[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= СтрОтветыНаЗапросПФР.Количество() > 0;
		
	Иначе
		
		Если СсылкаНаОтчет.ВидУслуги = Перечисления.ВидыУслугПриИОС.СправкаОСостоянииРасчетов Тогда
			НаименованиеПротокола = НСтр("ru = 'Справка о состоянии расчетов'");
		Иначе
			НаименованиеПротокола = НСтр("ru = 'Сверка ФИО и СНИЛС'");
		КонецЕсли;
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Готово'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Готово'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрОтветыНаЗапросПФР, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.НаименованиеПротокола		= НаименованиеПротокола;
		СтрокаЭтапа.Протокол					= ?(СтрОтветыНаЗапросПФР.Количество() > 0, СтрОтветыНаЗапросПФР[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= СтрОтветыНаЗапросПФР.Количество() > 0;
		
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ТаблицаЭтаповОтправкиФСРАР(СсылкаНаОтчет, ДополнительныеПараметры)
	
	НачальныйСтатус = НачальныйСтатусПриФормированииТаблицыЭтаповОтправки(СсылкаНаОтчет);
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НачальныйСтатус;
	СтрокаЭтапа.ТекстСтатуса				= НачальныйСтатус;
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостояниюНеОтправлено();
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	// определяем последнюю отправку
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ОтправкаСсылка = ДополнительныеПараметры.Отправка;
	Иначе
		ОтправкаСсылка =  ПолучитьПоследнююОтправкуОтчетаВФСРАР(СсылкаНаОтчет);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтправкаСсылка) Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в ФСРАР'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в ФСРАР'");
	СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка), ОтправкаСсылка.ДатаОтправки, Дата(1,1,1));
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается результат обработки отчета'");
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= ОтправкаСсылка <> Неопределено;
	
	Если ОтправкаСсылка <> Неопределено И  ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не сдано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не сдано'");
		СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка), ОтправкаСсылка.ДатаЗакрытия, Дата(1,1,1));
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол ошибок'");
		СтрокаЭтапа.Протокол					= ОтправкаСсылка;
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= Истина;
		
	Иначе
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдано'");
		СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка) И ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан, ОтправкаСсылка.ДатаЗакрытия, Дата(1,1,1));
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол о сдаче'");
		СтрокаЭтапа.Протокол					= ОтправкаСсылка;
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= ОтправкаСсылка <> Неопределено И ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
			
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ТаблицаЭтаповОтправкиРПН(СсылкаНаОтчет, ДополнительныеПараметры)
	
	НачальныйСтатус = НачальныйСтатусПриФормированииТаблицыЭтаповОтправки(СсылкаНаОтчет);
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НачальныйСтатус;
	СтрокаЭтапа.ТекстСтатуса				= НачальныйСтатус;
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостояниюНеОтправлено();
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	// определяем последнюю отправку
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ОтправкаСсылка = ДополнительныеПараметры.Отправка;
	Иначе
		ОтправкаСсылка =  ПолучитьПоследнююОтправкуОтчетаВРПН(СсылкаНаОтчет);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтправкаСсылка) Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в РПН'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в РПН'");
	СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка), ОтправкаСсылка.ДатаОтправки, Дата(1,1,1));
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается результат обработки'");
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= ОтправкаСсылка <> Неопределено;

	
	Если ОтправкаСсылка <> Неопределено И  ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не сдано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не сдано'");
		СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка), ОтправкаСсылка.ДатаЗакрытия, Дата(1,1,1));
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол ошибок'");
		СтрокаЭтапа.Протокол					= ОтправкаСсылка;
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= Истина;
		
	Иначе
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдано'");
		СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка) И ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан, ОтправкаСсылка.ДатаЗакрытия, Дата(1,1,1));
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол о сдаче'");
		СтрокаЭтапа.Протокол					= ОтправкаСсылка;
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= ОтправкаСсылка <> Неопределено И ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
			
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ТаблицаЭтаповОтправкиФТС(СсылкаНаОтчет, ДополнительныеПараметры)
	
	НачальныйСтатус = НачальныйСтатусПриФормированииТаблицыЭтаповОтправки(СсылкаНаОтчет);
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НачальныйСтатус;
	СтрокаЭтапа.ТекстСтатуса				= НачальныйСтатус;
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостояниюНеОтправлено();
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	// определяем последнюю отправку
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ОтправкаСсылка = ДополнительныеПараметры.Отправка;
	Иначе
		ОтправкаСсылка = ПолучитьПоследнююОтправкуОтчетаВФТС(СсылкаНаОтчет);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтправкаСсылка) Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в ФТС'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в ФТС'");
	СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка), ОтправкаСсылка.ДатаОтправки, Дата(1,1,1));
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается результат обработки'");
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= ОтправкаСсылка <> Неопределено;
	
	Если ОтправкаСсылка <> Неопределено И  ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят И НЕ ОтправкаСсылка.НаКонтроле Тогда
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не сдано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не сдано'");
		СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка), ОтправкаСсылка.ДатаЗакрытия, Дата(1,1,1));
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол ошибок'");
		СтрокаЭтапа.Протокол					= ОтправкаСсылка;
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= Истина;
		
	Иначе
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдано'");
		СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка) И ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан, ОтправкаСсылка.ДатаЗакрытия, Дата(1,1,1));
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		Если НЕ ОтправкаСсылка.НаКонтроле Тогда
			СтрокаЭтапа.НаименованиеПротокола	= НСтр("ru = 'Протокол о сдаче'");
		Иначе
			СтрокаЭтапа.НаименованиеПротокола	= НСтр("ru = 'Протокол'");
		КонецЕсли;
		СтрокаЭтапа.Протокол					= ОтправкаСсылка;
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= ОтправкаСсылка <> Неопределено И (ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан ИЛИ ОтправкаСсылка.НаКонтроле);
		
	КонецЕсли;
	
	Если ОтправкаСсылка.НаКонтроле Тогда
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Получен комментарий'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Получен комментарий'");
		СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка), ОтправкаСсылка.ДатаЗакрытия, Дата(1,1,1));
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Отчет находится на контроле, ознакомьтесь с сообщением от ФТС'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Комментарий на портале ФТС'");
		СтрокаЭтапа.Протокол					= "https://edata.customs.ru/FtsPersonalCabinetWeb/Services/Obtain/Stat";
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= Истина;
		
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ТаблицаЭтаповОтправкиФСС(СсылкаНаОтчет, ДополнительныеПараметры) Экспорт
	
	НачальныйСтатус = НачальныйСтатусПриФормированииТаблицыЭтаповОтправки(СсылкаНаОтчет);
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	// определяем последнюю отправку
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ОтправкаСсылка = ДополнительныеПараметры.Отправка;
	Иначе
		ОтправкаСсылка = ПолучитьПоследнююОтправкуОтчетаВФСС(СсылкаНаОтчет);
	КонецЕсли;	
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НачальныйСтатус;
	СтрокаЭтапа.ТекстСтатуса				= НачальныйСтатус;
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостояниюНеОтправлено();
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	Если НЕ ЗначениеЗаполнено(ОтправкаСсылка) Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в ФСС'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в ФСС'");
	СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка), ОтправкаСсылка.ДатаОтправки, Дата(1,1,1));
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается результат обработки отчета'");
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= ОтправкаСсылка <> Неопределено;


	Если ОтправкаСсылка <> Неопределено И ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не сдано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не сдано'");
		СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка), ОтправкаСсылка.ДатаЗакрытия, Дата(1,1,1));
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол ошибок'");
		СтрокаЭтапа.Протокол					= ОтправкаСсылка;
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= Истина;
		
	ИначеЕсли ОтправкаСсылка <> Неопределено И ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.ПринятЕстьОшибки Тогда
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано, требует уточнения'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдано, требует уточнения'");
		СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка), ОтправкаСсылка.ДатаЗакрытия, Дата(1,1,1));
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Подготовьте и отправьте корректирующий отчет'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол ошибок'");
		СтрокаЭтапа.Протокол					= ОтправкаСсылка;
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= Истина;
		
	Иначе
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдано'");
		СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка) И ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан, ОтправкаСсылка.ДатаЗакрытия, Дата(1,1,1));
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол о сдаче'");
		СтрокаЭтапа.Протокол					= ОтправкаСсылка;
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= ОтправкаСсылка <> Неопределено И ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
		
	КонецЕсли;
		
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ТаблицаЭтаповОтправкиРосстат(СсылкаНаОтчет, ДополнительныеПараметры)
	
	НеПолучатьДаты = НЕ (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПолучатьДаты")
		И ДополнительныеПараметры.ПолучатьДаты);
		
	ПоказыватьПомеченныеНаУдаление = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоказыватьПомеченныеНаУдаление")
		И ДополнительныеПараметры.ПоказыватьПомеченныеНаУдаление;
	
	НачальныйСтатус = НачальныйСтатусПриФормированииТаблицыЭтаповОтправки(СсылкаНаОтчет);
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НачальныйСтатус;
	СтрокаЭтапа.ТекстСтатуса				= НачальныйСтатус;
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостояниюНеОтправлено();
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ЦиклОбмена = ДополнительныеПараметры.Отправка;
	Иначе
		ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	КонецЕсли;
	
	// если у пользователя недостаточно прав для получения сведений об отправке, то скроем панель
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
		
	// получаем список всех не помеченных на удаление сообщений последнего цикла
	СообщенияЦикла = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена,,ПоказыватьПомеченныеНаУдаление,Истина);
	
	// выделяем основные типы сообщений
	СтрПервичныеСообщения 					= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС));
	СтрПодтвержденияДатыОтправки 			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС));
	СтрИзвещенияПодтвержденияДатыОтправки 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС));
	СтрИзвещенияОПриеме 					= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС));
	СтрПротоколыВходногоКонтроля 			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС));
	СтрИзвещенияПротоколыВходногоКонтроля 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС));
	СтрКритическиеОшибки 					= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка));
	
	Если СтрПервичныеСообщения.Количество() > 0 И СтрПервичныеСообщения[0].Статус <> Перечисления.СтатусыПисем.Отправленное Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено оператору'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено оператору'");
	СтрокаЭтапа.Дата						= ДатаОтправки(СтрПервичныеСообщения, НеПолучатьДаты);;
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается подтверждение даты отправки'");
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= СтрПервичныеСообщения.Количество() > 0;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в Росстат'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в Росстат'");
	СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрПодтвержденияДатыОтправки, НеПолучатьДаты);;
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается результат обработки отчета'");
	СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Подтверждение даты отправки'");
	СтрокаЭтапа.Протокол					= ?(СтрПодтвержденияДатыОтправки.Количество() > 0, СтрПодтвержденияДатыОтправки[0].Ссылка, "");
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= СтрПодтвержденияДатыОтправки.Количество() > 0;

	ПоследнийПротокол = Неопределено;
	Для Каждого СтрПротокол Из СтрПротоколыВходногоКонтроля Цикл
		Если ПоследнийПротокол = Неопределено ИЛИ СтрПротокол.Дата > ПоследнийПротокол.Дата Тогда
			ПоследнийПротокол = СтрПротокол;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследнийПротокол <> Неопределено И ПоследнийПротокол.ПротоколСОшибкой Тогда
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не сдано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не сдано'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(ПоследнийПротокол, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
		СтрокаЭтапа.НаименованиеПротокола		= "Протокол ошибок";
		СтрокаЭтапа.Протокол					= ПоследнийПротокол.Ссылка;
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= Истина;
		
	Иначе
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдано'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрПротоколыВходногоКонтроля, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол о сдаче'");
		СтрокаЭтапа.Протокол					= ?(СтрПротоколыВходногоКонтроля.Количество() > 0, СтрПротоколыВходногоКонтроля[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= СтрПротоколыВходногоКонтроля.Количество() > 0;
		
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ТаблицаЭтаповОтправкиФНС(СсылкаНаОтчет, ДополнительныеПараметры)
	
	НеПолучатьДаты = НЕ (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПолучатьДаты")
		И ДополнительныеПараметры.ПолучатьДаты);
		
	ПоказыватьПомеченныеНаУдаление = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоказыватьПомеченныеНаУдаление")
		И ДополнительныеПараметры.ПоказыватьПомеченныеНаУдаление;
	
	НачальныйСтатус = НачальныйСтатусПриФормированииТаблицыЭтаповОтправки(СсылкаНаОтчет);
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();

	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НачальныйСтатус;
	СтрокаЭтапа.ТекстСтатуса				= НачальныйСтатус;
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостояниюНеОтправлено();
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ЦиклОбмена = ДополнительныеПараметры.Отправка;
	Иначе
		ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	КонецЕсли;
	
	// если у пользователя недостаточно прав для получения сведений об отправке, то скроем панель
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	// получаем список всех не помеченных на удаление сообщений последнего цикла
	СообщенияЦикла = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена,,ПоказыватьПомеченныеНаУдаление,Истина);
		
	Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Заявление Тогда
		
		// выделяем основные типы сообщений
		СтрЗаявленияНП 							= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП));
		СтрПодтвержденияЗаявлениеНО				= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО));
		СтрИзвещенияПодтверждениеНП 			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП));
		СтрИзвещенияЗаявлениеНО 				= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗаявлениеНО));
		СтрРезультатыПриемаЗаявлениеНО 			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО));
		СтрИзвещенияРезультатПриемаНП 			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП));
		
		СтрРезультатыОбработкиЗаявлениеНО		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО));
		СтрИзвещенияРезультатОбработкиНП 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП));
	
		СтрРезультатыОбработкиЗаявлениеРФНО		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО));
		СтрИзвещенияРезультатОбработкиРФНП 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП));
		СтрСообщенияОбОтзывеЗаявлениеРФНО 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО));
		СтрИзвещенияОбОтзывеЗаявлениеРФНП 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП));
		СтрРезультатыОбработкиЗаявлениеТСНО 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО));
		СтрИзвещенияРезультатОбработкиТСНП 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП));
		
		СтрКритическиеОшибки 					= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС));
		
		Если СтрЗаявленияНП.Количество() > 0 И СтрЗаявленияНП[0].Статус <> Перечисления.СтатусыПисем.Отправленное Тогда
			Возврат ТаблицаЭтаповОтправки;
		КонецЕсли;
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено оператору'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено оператору'");
		СтрокаЭтапа.Дата						= ДатаОтправки(СтрЗаявленияНП, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается подтверждение даты отправки'");
		СтрокаЭтапа.НаименованиеПротокола		= "";
		СтрокаЭтапа.Протокол					= "";
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
		СтрокаЭтапа.ЭтапПройден					= СтрЗаявленияНП.Количество() > 0;
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в ФНС'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в ФНС'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрПодтвержденияЗаявлениеНО, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается прием отчета в обработку'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Подтверждение даты отправки'");
		СтрокаЭтапа.Протокол					= ?(СтрПодтвержденияЗаявлениеНО.Количество() > 0, СтрПодтвержденияЗаявлениеНО[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
		СтрокаЭтапа.ЭтапПройден					= СтрПодтвержденияЗаявлениеНО.Количество() > 0;
		
		// определяем наиболее свежее сообщение с результатом приема
		ПоследнийРезультатПриема = Неопределено;
		Для Каждого СтрРезультатПриемаЗаявлениеНО Из СтрРезультатыПриемаЗаявлениеНО Цикл
			Если ПоследнийРезультатПриема = Неопределено ИЛИ СтрРезультатПриемаЗаявлениеНО.Дата > ПоследнийРезультатПриема.Дата Тогда
				ПоследнийРезультатПриема = СтрРезультатПриемаЗаявлениеНО;
			КонецЕсли;
		КонецЦикла;
		
		// если результат приема отрицательный, то выводим соответствующее сообщение
		Если ПоследнийРезультатПриема <> Неопределено И ПоследнийРезультатПриема.ПротоколСОшибкой Тогда
			
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не принято в обработку'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не принято в обработку'");
			СтрокаЭтапа.Дата						= ДатаИзОтвета(ПоследнийРезультатПриема, НеПолучатьДаты);
			СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
			СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Уведомление об отказе'");
			СтрокаЭтапа.Протокол					= ПоследнийРезультатПриема.Ссылка;
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
			СтрокаЭтапа.ЭтапПройден					= Истина;
			
		Иначе
			
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Принято в обработку'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Принято в обработку'");
			СтрокаЭтапа.Дата						= ДатаИзОтвета(?(ПоследнийРезультатПриема <> Неопределено,
				ПоследнийРезультатПриема, СтрРезультатыПриемаЗаявлениеНО), НеПолучатьДаты);
			СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается результат обработки отчета'");
			СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Квитанция о приеме'");
			СтрокаЭтапа.Протокол					= ?(ПоследнийРезультатПриема <> Неопределено, ПоследнийРезультатПриема.Ссылка, "");
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
			СтрокаЭтапа.ЭтапПройден					= ПоследнийРезультатПриема <> Неопределено;
			
			// определяем наиболее свежее сообщение с результатом обработки
			ПоследнийРезультатОбработки = Неопределено;
			Для Каждого СтрРезультатОбработки Из СтрРезультатыОбработкиЗаявлениеРФНО Цикл
				Если ПоследнийРезультатОбработки = Неопределено ИЛИ СтрРезультатОбработки.Дата > ПоследнийРезультатОбработки.Дата Тогда
					ПоследнийРезультатОбработки = СтрРезультатОбработки;
				КонецЕсли;
			КонецЦикла;
			
			// если результат обработки отрицательный, то выводим соответствующее сообщение
			Если ПоследнийРезультатОбработки <> Неопределено И ПоследнийРезультатОбработки.ПротоколСОшибкой Тогда
				
				СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
				СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не сдано'");
				СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не сдано'");
				СтрокаЭтапа.Дата						= ДатаИзОтвета(ПоследнийРезультатОбработки, НеПолучатьДаты);
				СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
				СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Сообщение о проверке'");
				СтрокаЭтапа.Протокол					= ПоследнийРезультатОбработки.Ссылка;
				СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
				СтрокаЭтапа.ЭтапПройден					= Истина;
				
			Иначе
				
				Если СтрРезультатыОбработкиЗаявлениеНО.Количество() = 0 Тогда
					
					Если СтрСообщенияОбОтзывеЗаявлениеРФНО.Количество() <> 0 Тогда

						СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
						СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не сдано'");
						СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не сдано'");
						СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрСообщенияОбОтзывеЗаявлениеРФНО, НеПолучатьДаты);
						СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
						СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Сообщение об отзыве заявления'");
						СтрокаЭтапа.Протокол					= СтрСообщенияОбОтзывеЗаявлениеРФНО[0].Ссылка;
						СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
						СтрокаЭтапа.ЭтапПройден					= Истина;
					
					Иначе
						Если СтрРезультатыОбработкиЗаявлениеТСНО.Количество() <> 0 Тогда
							
							СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
							СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не сдано'");
							СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не сдано'");
							СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрРезультатыОбработкиЗаявлениеТСНО, НеПолучатьДаты);
							СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
							СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Сообщение о несоответствиях'");
							СтрокаЭтапа.Протокол					= СтрРезультатыОбработкиЗаявлениеТСНО[0].Ссылка;
							СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
							СтрокаЭтапа.ЭтапПройден					= Истина;

						Иначе
							
							СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
							СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано'");
							СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдано'");
							СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрРезультатыПриемаЗаявлениеНО, НеПолучатьДаты);
							СтрокаЭтапа.КомментарийКСостоянию		= "";
							СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Сообщение о проверке'");
							СтрокаЭтапа.Протокол					= ?(СтрРезультатыПриемаЗаявлениеНО.Количество() > 0, СтрРезультатыПриемаЗаявлениеНО[0].Ссылка, "");
							СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
							СтрокаЭтапа.ЭтапПройден					= СтрРезультатыОбработкиЗаявлениеТСНО.Количество() = 0 И СтрСообщенияОбОтзывеЗаявлениеРФНО.Количество() = 0
								И СтрРезультатыОбработкиЗаявлениеРФНО.Количество() <> 0 И НЕ ПоследнийРезультатОбработки.ПротоколСОшибкой;

						КонецЕсли;
					КонецЕсли;
			
				Иначе
					
					// определяем наиболее свежее сообщение с результатом обработки
					ПоследнийРезультатОбработки = Неопределено;
					Для Каждого СтрРезультатОбработки Из СтрРезультатыОбработкиЗаявлениеНО Цикл
						Если ПоследнийРезультатОбработки = Неопределено ИЛИ СтрРезультатОбработки.Дата > ПоследнийРезультатОбработки.Дата Тогда
							ПоследнийРезультатОбработки = СтрРезультатОбработки;
						КонецЕсли;
					КонецЦикла;
					
					// если результат обработки отрицательный, то выводим соответствующее сообщение
					Если ПоследнийРезультатОбработки <> Неопределено И ПоследнийРезультатОбработки.ПротоколСОшибкой Тогда
						
						СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
						СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не сдано'");
						СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не сдано'");
						СтрокаЭтапа.Дата						= ДатаИзОтвета(ПоследнийРезультатОбработки, НеПолучатьДаты);
						СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
						СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Уведомление об отказе в проставлении пометки'");
						СтрокаЭтапа.Протокол					= ПоследнийРезультатОбработки.Ссылка;
						СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
						СтрокаЭтапа.ЭтапПройден					= СтрРезультатыОбработкиЗаявлениеНО.Количество() > 0;
						
					Иначе
						
						СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
						СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано'");
						СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдано'");
						СтрокаЭтапа.Дата						= ДатаИзОтвета(ПоследнийРезультатОбработки, НеПолучатьДаты);
						СтрокаЭтапа.КомментарийКСостоянию		= "";
						СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Квитанция о приеме'");
						СтрокаЭтапа.Протокол					= ?(СтрРезультатыОбработкиЗаявлениеНО.Количество() > 0, СтрРезультатыОбработкиЗаявлениеНО[0].Ссылка, "");
						СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
						СтрокаЭтапа.ЭтапПройден					= СтрРезультатыОбработкиЗаявлениеНО.Количество() > 0;
							
					КонецЕсли;
						
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		
		// выделяем основные типы сообщений
		СтрФормы2НДФЛНП							= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП));
		СтрПодтвержденияФорма2НДФЛНО			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО));
		СтрИзвещенияПодтверждениеНП 			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП));
		СтрИзвещенияФорма2НДФЛНО 				= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО));
		СтрРезультатыПриемаФорма2НДФЛНО			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО));
		СтрИзвещенияРезультатПриемаНП 			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП));
		
		СтрКритическиеОшибки 					= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС));
		
		Если СтрФормы2НДФЛНП.Количество() > 0 И СтрФормы2НДФЛНП[0].Статус <> Перечисления.СтатусыПисем.Отправленное Тогда
			Возврат ТаблицаЭтаповОтправки;
		КонецЕсли;
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено оператору'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено оператору'");
		СтрокаЭтапа.Дата						= ДатаОтправки(СтрФормы2НДФЛНП, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается подтверждение даты отправки'");
		СтрокаЭтапа.НаименованиеПротокола		= "";
		СтрокаЭтапа.Протокол					= ?(СтрФормы2НДФЛНП.Количество() > 0, СтрФормы2НДФЛНП[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
		СтрокаЭтапа.ЭтапПройден					= СтрФормы2НДФЛНП.Количество() > 0;

		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в ФНС'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в ФНС'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрПодтвержденияФорма2НДФЛНО, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается прием отчета в обработку'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Подтверждение даты отправки'");
		СтрокаЭтапа.Протокол					= ?(СтрПодтвержденияФорма2НДФЛНО.Количество() > 0, СтрПодтвержденияФорма2НДФЛНО[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
		СтрокаЭтапа.ЭтапПройден					= СтрПодтвержденияФорма2НДФЛНО.Количество() > 0;
		
		// определяем наиболее свежее сообщение с результатом приема
		ПоследнийРезультатПриема = Неопределено;
		Для Каждого СтрРезультатПриемаФорма2НДФЛНО Из СтрРезультатыПриемаФорма2НДФЛНО Цикл
			Если ПоследнийРезультатПриема = Неопределено ИЛИ СтрРезультатПриемаФорма2НДФЛНО.Дата > ПоследнийРезультатПриема.Дата Тогда
				ПоследнийРезультатПриема = СтрРезультатПриемаФорма2НДФЛНО;
			КонецЕсли;
		КонецЦикла;
		
		ОтчетСданЧастично = ПоследнийРезультатПриема <> Неопределено И Отчет2НДФЛСданЧастично(ПоследнийРезультатПриема);
		ПротоколСОшибкой  = ПоследнийРезультатПриема <> Неопределено И ПоследнийРезультатПриема.ПротоколСОшибкой;
		
		// если результат приема отрицательный, то выводим соответствующее сообщение
		Если ОтчетСданЧастично Тогда
			
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдан частично'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдан частично'");
			СтрокаЭтапа.Дата						= ДатаИзОтвета(ПоследнийРезультатПриема, НеПолучатьДаты);
			СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
			СтрокаЭтапа.НаименованиеПротокола		= "Протокол приема";
			СтрокаЭтапа.Протокол					= ПоследнийРезультатПриема.Ссылка;
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
			СтрокаЭтапа.ЭтапПройден					= Истина;
	
		ИначеЕсли ПротоколСОшибкой Тогда
			
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не сдано'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не сдано'");
			СтрокаЭтапа.Дата						= ДатаИзОтвета(ПоследнийРезультатПриема, НеПолучатьДаты);
			СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
			СтрокаЭтапа.НаименованиеПротокола		= "Протокол ошибок";
			СтрокаЭтапа.Протокол					= ПоследнийРезультатПриема.Ссылка;
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
			СтрокаЭтапа.ЭтапПройден					= Истина;
			
		Иначе
			
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдано'");
			СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрРезультатыПриемаФорма2НДФЛНО, НеПолучатьДаты);
			СтрокаЭтапа.КомментарийКСостоянию		= "";
			СтрокаЭтапа.НаименованиеПротокола		= "Протокол приема";
			СтрокаЭтапа.Протокол					= ?(СтрРезультатыПриемаФорма2НДФЛНО.Количество() > 0, СтрРезультатыПриемаФорма2НДФЛНО[0].Ссылка, "");
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
			СтрокаЭтапа.ЭтапПройден					= СтрРезультатыПриемаФорма2НДФЛНО.Количество() > 0;
			
		КонецЕсли;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Представление Тогда
		
		// выделяем основные типы сообщений
		СтрПредставленияНП					= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП));
		СтрПодтвержденияПредставлениеНО		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО));
		СтрИзвещенияПодтверждениеНП			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП));
		СтрИзвещенияПредставлениеНО			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПредставлениеНО));
		СтрРезультатыПриемаПредставлениеНО	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО));
		СтрИзвещенияРезультатПриемаНП		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП));
		
		СтрКритическиеОшибки = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС));
		
		// Если статус первичного - не отправлено, тогда выходим 
		Если СтрПредставленияНП.Количество() > 0 И СтрПредставленияНП[0].Статус <> Перечисления.СтатусыПисем.Отправленное Тогда
			Возврат ТаблицаЭтаповОтправки;
		КонецЕсли;
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено оператору'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено оператору'");
		СтрокаЭтапа.Дата						= ДатаОтправки(СтрПредставленияНП, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается подтверждение даты отправки'");
		СтрокаЭтапа.НаименованиеПротокола		= "";
		СтрокаЭтапа.Протокол					= ?(СтрПредставленияНП.Количество() > 0, СтрПредставленияНП[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
		СтрокаЭтапа.ЭтапПройден					= СтрПредставленияНП.Количество() > 0;

		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в ФНС'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в ФНС'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрПодтвержденияПредставлениеНО, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается прием уведомления в обработку'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Подтверждение даты отправки'");
		СтрокаЭтапа.Протокол					= ?(СтрПодтвержденияПредставлениеНО.Количество() > 0, СтрПодтвержденияПредставлениеНО[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
		СтрокаЭтапа.ЭтапПройден					= СтрПодтвержденияПредставлениеНО.Количество() > 0;
		
		// определяем наиболее свежее сообщение с результатом приема
		ПоследнийРезультатПриема = Неопределено;
		Для Каждого СтрРезультатПриемаПредставлениеНО Из СтрРезультатыПриемаПредставлениеНО Цикл
			Если ПоследнийРезультатПриема = Неопределено ИЛИ СтрРезультатПриемаПредставлениеНО.Дата > ПоследнийРезультатПриема.Дата Тогда
				ПоследнийРезультатПриема = СтрРезультатПриемаПредставлениеНО;
			КонецЕсли;
		КонецЦикла;
		
		// если результат приема отрицательный, то выводим соответствующее сообщение
		Если ПоследнийРезультатПриема <> Неопределено И ПоследнийРезультатПриема.ПротоколСОшибкой Тогда
			
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не сдано'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не сдано'");
			СтрокаЭтапа.Дата						= ДатаИзОтвета(ПоследнийРезультатПриема, НеПолучатьДаты);
			СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте уведомление еще раз'");
			СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол ошибок'");
			СтрокаЭтапа.Протокол					= ПоследнийРезультатПриема.Ссылка;
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
			СтрокаЭтапа.ЭтапПройден					= Истина;
			
		Иначе
			
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдано'");
			СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрРезультатыПриемаПредставлениеНО, НеПолучатьДаты);
			СтрокаЭтапа.КомментарийКСостоянию		= "";
			СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол приема'");
			СтрокаЭтапа.Протокол					= ?(СтрРезультатыПриемаПредставлениеНО.Количество() > 0, СтрРезультатыПриемаПредставлениеНО[0].Ссылка, "");
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
			СтрокаЭтапа.ЭтапПройден					= СтрРезультатыПриемаПредставлениеНО.Количество() > 0;
			
		КонецЕсли;

		
	Иначе
		
		// выделяем основные типы сообщений
		СтрДекларацииНП 					= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ДекларацияНП));// Отправлено оператору
		СтрПодтвержденияДекларацияНО 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО));// Отправлено в ФНС
		СтрИзвещенияПодтверждениеНП 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП));
		СтрИзвещенияДекларацияНО 			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО));// Доставлено
		СтрРезультатыПриемаДекларацияНО 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО));// Не принято в обработку ИЛИ Принято в обработку
		СтрИзвещенияРезультатПриемаНП 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП));
		СтрРезультатыОбработкиДекларацияНО 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО));// Сдано, требует уточнения ИЛИ Сдано
		СтрИзвещенияРезультатОбработкиНП	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП));
		СтрКритическиеОшибки 				= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС));
		
		// Если статус первичного - не отправлено, тогда выходим 
		Если СтрДекларацииНП.Количество() > 0 И СтрДекларацииНП[0].Статус <> Перечисления.СтатусыПисем.Отправленное Тогда
			Возврат ТаблицаЭтаповОтправки;
		КонецЕсли;
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено оператору'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено оператору'");
		СтрокаЭтапа.Дата						= ДатаОтправки(СтрДекларацииНП, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается подтверждение даты отправки'");
		СтрокаЭтапа.НаименованиеПротокола		= "";
		СтрокаЭтапа.Протокол					= "";
		СтрокаЭтапа.Отправка					= ЦиклОбмена;
		СтрокаЭтапа.Сообщение					= СсылкаНаСообщение(СтрДекларацииНП); 
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
		СтрокаЭтапа.ЭтапПройден					= СтрДекларацииНП.Количество() > 0;
		
		// Отправлено в ФНС
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в ФНС'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в ФНС'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрПодтвержденияДекларацияНО, НеПолучатьДаты);;
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается прием отчета в обработку'");
		СтрокаЭтапа.НаименованиеПротокола		= "Подтверждение даты отправки";
		СтрокаЭтапа.Протокол					= СсылкаНаСообщение(СтрПодтвержденияДекларацияНО);
		СтрокаЭтапа.Отправка					= ЦиклОбмена;
		СтрокаЭтапа.Сообщение					= СсылкаНаСообщение(СтрПодтвержденияДекларацияНО); 
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
		СтрокаЭтапа.ЭтапПройден					= СтрПодтвержденияДекларацияНО.Количество() > 0;
			
		// определяем наиболее свежее сообщение с результатом приема
		ПоследнийРезультатПриема = Неопределено;
		Для Каждого СтрРезультатПриемаДекларацияНО Из СтрРезультатыПриемаДекларацияНО Цикл
			Если ПоследнийРезультатПриема = Неопределено ИЛИ СтрРезультатПриемаДекларацияНО.Дата > ПоследнийРезультатПриема.Дата Тогда
				ПоследнийРезультатПриема = СтрРезультатПриемаДекларацияНО;
			КонецЕсли;
		КонецЦикла;
		
		// если результат приема отрицательный, то выводим соответствующее сообщение
		Если ПоследнийРезультатПриема <> Неопределено И ПоследнийРезультатПриема.ПротоколСОшибкой Тогда
			
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не принято в обработку'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не принято в обработку'");
			СтрокаЭтапа.Дата						= ДатаИзОтвета(ПоследнийРезультатПриема, НеПолучатьДаты);;
			СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
			СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Уведомление об отказе'");
			СтрокаЭтапа.Протокол					= ПоследнийРезультатПриема.Ссылка;
			СтрокаЭтапа.Отправка					= ЦиклОбмена;
			СтрокаЭтапа.Сообщение					= ПоследнийРезультатПриема.Ссылка; 
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
			СтрокаЭтапа.ЭтапПройден					= СтрРезультатыПриемаДекларацияНО.Количество() > 0;
			
		Иначе
			
			// Принято в обработку
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Принято в обработку'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Принято в обработку'");
			СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрРезультатыПриемаДекларацияНО, НеПолучатьДаты);
			СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается результат обработки отчета'");
			СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Квитанция о приеме'");
			СтрокаЭтапа.Протокол					= СсылкаНаСообщение(СтрРезультатыПриемаДекларацияНО);
			СтрокаЭтапа.Отправка					= ЦиклОбмена;
			СтрокаЭтапа.Сообщение					= СсылкаНаСообщение(СтрРезультатыПриемаДекларацияНО); 
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
			СтрокаЭтапа.ЭтапПройден					= СтрРезультатыПриемаДекларацияНО.Количество() > 0;
			
			// определяем наиболее свежее сообщение с результатом обработки
			ПоследнийРезультатОбработки = Неопределено;
			Для Каждого СтрРезультатОбработки Из СтрРезультатыОбработкиДекларацияНО Цикл
				Если ПоследнийРезультатОбработки = Неопределено ИЛИ СтрРезультатОбработки.Дата > ПоследнийРезультатОбработки.Дата Тогда
					ПоследнийРезультатОбработки = СтрРезультатОбработки;
				КонецЕсли;
			КонецЦикла;
			
			// если результат обработки отрицательный, то выводим соответствующее сообщение
			Если ПоследнийРезультатОбработки <> Неопределено И ПоследнийРезультатОбработки.ПротоколСОшибкой Тогда
				
				// Сдано, требует уточнения
				СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
				СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано, требует уточнения'");
				СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдано, требует уточнения'");
				СтрокаЭтапа.Дата						= ДатаИзОтвета(ПоследнийРезультатОбработки, НеПолучатьДаты);
				СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Подготовьте и отправьте корректирующий отчет'");
				СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Уведомление об уточнении'");
				СтрокаЭтапа.Протокол					= ПоследнийРезультатОбработки.Ссылка;
				СтрокаЭтапа.Отправка					= ЦиклОбмена;
				СтрокаЭтапа.Сообщение					= ПоследнийРезультатОбработки.Ссылка;
				СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
				СтрокаЭтапа.ЭтапПройден					= СтрРезультатыОбработкиДекларацияНО.Количество() > 0;
				
			Иначе
				
				// Сдано
				СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
				СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано'");
				СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдано'");
				СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрРезультатыОбработкиДекларацияНО, НеПолучатьДаты);;
				СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = ''");
				СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Извещение о вводе'");
				СтрокаЭтапа.Протокол					= СсылкаНаСообщение(СтрРезультатыОбработкиДекларацияНО);
				СтрокаЭтапа.Отправка					= ЦиклОбмена;
				СтрокаЭтапа.Сообщение					= СсылкаНаСообщение(СтрРезультатыОбработкиДекларацияНО);
				СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
				СтрокаЭтапа.ЭтапПройден					= СтрРезультатыОбработкиДекларацияНО.Количество() > 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
			
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ТаблицаЭтаповОтправкиПФР(СсылкаНаОтчет, ДополнительныеПараметры)
	
	НеПолучатьДаты = НЕ (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПолучатьДаты")
		И ДополнительныеПараметры.ПолучатьДаты);
		
	ПоказыватьПомеченныеНаУдаление = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоказыватьПомеченныеНаУдаление")
		И ДополнительныеПараметры.ПоказыватьПомеченныеНаУдаление;
	
	НачальныйСтатус = НачальныйСтатусПриФормированииТаблицыЭтаповОтправки(СсылкаНаОтчет);
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	// Не отправлено
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НачальныйСтатус;
	СтрокаЭтапа.ТекстСтатуса				= НачальныйСтатус;
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостояниюНеОтправлено();
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ЦиклОбмена = ДополнительныеПараметры.Отправка;
	Иначе
		ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	КонецЕсли;
	
	// если у пользователя недостаточно прав для получения сведений об отправке, то скроем панель
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	// получаем список всех не помеченных на удаление сообщений последнего цикла
	СообщенияЦикла = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена,,ПоказыватьПомеченныеНаУдаление,Истина);
	
	// выделяем основные типы сообщений
	СтрПервичныеСообщения 						= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР));
	СтрКвитанцииОПриеме 						= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР));
	СтрПротоколыВходногоКонтроля 				= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПротоколПФР));
	СтрПереподписанныеПротоколыВходногоКонтроля = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР));
	СтрКритическиеОшибки			 			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка));
	
	// Если статус первичного - не отправлено, тогда выходим 
	Если СтрПервичныеСообщения.Количество() > 0 И СтрПервичныеСообщения[0].Статус <> Перечисления.СтатусыПисем.Отправленное Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
		
	// Отправлено в ПФР
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в ПФР'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в ПФР'");
	СтрокаЭтапа.Дата						= ДатаОтправки(СтрПервичныеСообщения, НеПолучатьДаты);;
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается результат обработки отчета'");
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= СтрПервичныеСообщения.Количество() > 0;
	
	// Принято в обработку
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Принято в обработку'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Принято в обработку'");
	СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрКвитанцииОПриеме, НеПолучатьДаты);;
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается результат обработки отчета'");
	СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Квитанция о доставке'");
	СтрокаЭтапа.Протокол					= ?(СтрКвитанцииОПриеме.Количество() > 0, СтрКвитанцииОПриеме[0].Ссылка, "");
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= СтрКвитанцииОПриеме.Количество() > 0;
	
	
	ПоследнийПротокол = Неопределено;
	Для Каждого СтрПротокол Из СтрПротоколыВходногоКонтроля Цикл
		Если ПоследнийПротокол = Неопределено ИЛИ СтрПротокол.Дата > ПоследнийПротокол.Дата Тогда
			ПоследнийПротокол = СтрПротокол;
		КонецЕсли;
	КонецЦикла;
	
	ОтчетСданЧастично = (ПоследнийПротокол <> Неопределено
		И (ЦиклОбмена.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.СведенияОЗастрахованныхЛицахСЗВ_М
		ИЛИ ЦиклОбмена.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ
		ИЛИ ЦиклОбмена.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР
		ИЛИ ЦиклОбмена.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ)
		И ОтчетПФРСданЧастично(ПоследнийПротокол));
	ПротоколСОшибкой = (ПоследнийПротокол <> Неопределено И ПоследнийПротокол.ПротоколСОшибкой);
	
	Если ОтчетСданЧастично Тогда
		
		// Не сдано
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдан частично'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдан частично'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(ПоследнийПротокол, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол приема'");
		СтрокаЭтапа.Протокол					= ПоследнийПротокол.Ссылка;
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= Истина;
		
	ИначеЕсли ПротоколСОшибкой Тогда

		// Не сдано
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не сдано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не сдано'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(ПоследнийПротокол, НеПолучатьДаты);
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол ошибок'");
		СтрокаЭтапа.Протокол					= ПоследнийПротокол.Ссылка;
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= Истина;
		
	Иначе
		
		// сдано
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдано'");
		СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрПротоколыВходногоКонтроля, НеПолучатьДаты);;
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол о сдаче'");
		СтрокаЭтапа.Протокол					= ?(СтрПротоколыВходногоКонтроля.Количество() > 0, СтрПротоколыВходногоКонтроля[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= СтрПротоколыВходногоКонтроля.Количество() > 0;
		
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ТаблицаЭтаповОтправкиПерепискиСКонтролирующимиОрганами(Объект, ДополнительныеПараметры)
	
	НеПолучатьДаты = НЕ (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПолучатьДаты")
		И ДополнительныеПараметры.ПолучатьДаты);
		
	ПоказыватьПомеченныеНаУдаление = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоказыватьПомеченныеНаУдаление")
		И ДополнительныеПараметры.ПоказыватьПомеченныеНаУдаление;
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ЦиклОбмена = ДополнительныеПараметры.Отправка;
	Иначе
		ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(Объект.Ссылка);
	КонецЕсли;
	
	СообщенияЦикла = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена,,ПоказыватьПомеченныеНаУдаление,Истина);

	// если сообщение входящее, то выводим дату получения
	Если Объект.Статус = Перечисления.СтатусыПисем.Полученное Тогда
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено'");
		СтрокаЭтапа.Дата						= Объект.ДатаОтправки;
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.НаименованиеПротокола		= "";
		СтрокаЭтапа.Протокол					= "";
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтправленоИзКонтролирующегоОргана;
		СтрокаЭтапа.ЭтапПройден					= Истина;
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Получено'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Получено'");
		СтрокаЭтапа.Дата						= Объект.ДатаСообщения;
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.НаименованиеПротокола		= "";
		СтрокаЭтапа.Протокол					= "";
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПриемПодтвержден;
		СтрокаЭтапа.ЭтапПройден					= Истина;

	Иначе
		
		// Не отправлено
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не отправлено'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не отправлено'");
		СтрокаЭтапа.Дата						= Дата(1,1,1);
		СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостояниюНеОтправлено();
		СтрокаЭтапа.НаименованиеПротокола		= "";
		СтрокаЭтапа.Протокол					= "";
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
		СтрокаЭтапа.ЭтапПройден					= Истина;
	
		Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
			Возврат ТаблицаЭтаповОтправки;
		КонецЕсли;
		
		Если Объект.Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР Тогда
			
			// выделяем основные типы сообщений
			СтрПервичныеСообщения 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР));
			СтрКвитанции 			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР));
			
			Если СтрПервичныеСообщения.Количество() > 0 И СтрПервичныеСообщения[0].Статус = Перечисления.СтатусыПисем.Исходящее Тогда
				Возврат ТаблицаЭтаповОтправки;
			КонецЕсли;
			
			Если НеПолучатьДаты Тогда
				ДатаОтправки 			= Дата(1,1,1);
				ДатаПолученияКвитанции 	= Дата(1,1,1);
			Иначе
				ДатаОтправки 			= ?(ЗначениеЗаполнено(Объект.ДатаСообщения) , " " + Формат(Объект.ДатаСообщения, "ДЛФ=DT"), Дата(1,1,1));
				ДатаПолученияКвитанции 	= ?(СтрКвитанции.Количество() > 0, СтрКвитанции[0].ДатаТранспорта, Дата(1,1,1));
			КонецЕсли;
			
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в ПФР'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в ПФР'");
			СтрокаЭтапа.Дата						= ДатаОтправки;
			СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается доставка письма в ПФР'");
			СтрокаЭтапа.НаименованиеПротокола		= "";
			СтрокаЭтапа.Протокол					= "";
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
			СтрокаЭтапа.ЭтапПройден					= СтрПервичныеСообщения.Количество() > 0;

			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Доставлено в ПФР'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Доставлено'");
			СтрокаЭтапа.Дата						= ДатаПолученияКвитанции;
			СтрокаЭтапа.КомментарийКСостоянию		= "";
			СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Квитанция о получении'");
			СтрокаЭтапа.Протокол					= ?(СтрКвитанции.Количество() > 0, СтрКвитанции[0].Ссылка, "");
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
			СтрокаЭтапа.ЭтапПройден					= СтрКвитанции.Количество() > 0;
			
		// переписка с Росстатом
		ИначеЕсли Объект.Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФСГС Тогда
			
			// выделяем основные типы сообщений
			СтрПервичныеСообщения 					= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС));
			СтрПодтвержденияДатыОтправки 			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС));
			СтрИзвещенияПодтвержденияДатыОтправки 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС));
			СтрКвитанции 							= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС));
			
			Если СтрПервичныеСообщения.Количество() > 0 И СтрПервичныеСообщения[0].Статус = Перечисления.СтатусыПисем.Исходящее Тогда
				Возврат ТаблицаЭтаповОтправки;
			КонецЕсли;
			
			Если НеПолучатьДаты Тогда
				ДатаОтправкиПервичного 			= Дата(1,1,1);
				ДатаПолученияКвитанции 			= Дата(1,1,1);
			Иначе
				ДатаОтправкиПервичного 			= ?(СтрПервичныеСообщения.Количество() > 0, СтрПервичныеСообщения[0].Дата, Дата(1,1,1));
				ДатаПолученияКвитанции 			= ?(СтрКвитанции.Количество() > 0, СтрКвитанции[0].ДатаТранспорта, Дата(1,1,1));
			КонецЕсли;
						
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено оператору'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено оператору'");
			СтрокаЭтапа.Дата						= ДатаОтправкиПервичного;
			СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается подтверждение даты отправки'");
			СтрокаЭтапа.НаименованиеПротокола		= "";
			СтрокаЭтапа.Протокол					= "";
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
			СтрокаЭтапа.ЭтапПройден					= СтрПервичныеСообщения.Количество() > 0;
			
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в Росстат'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в Росстат'");
			СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрПодтвержденияДатыОтправки, НеПолучатьДаты);
			СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается доставка письма в Росстат'");
			СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Подтверждение даты отправки'");
			СтрокаЭтапа.Протокол					= ?(СтрПодтвержденияДатыОтправки.Количество() > 0, СтрПодтвержденияДатыОтправки[0].Ссылка, "");
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
			СтрокаЭтапа.ЭтапПройден					= СтрПодтвержденияДатыОтправки.Количество() > 0;
			
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Доставлено в Росстат'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Доставлено'");
			СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрКвитанции, НеПолучатьДаты);
			СтрокаЭтапа.КомментарийКСостоянию		= "";
			СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Извещение о получении'");
			СтрокаЭтапа.Протокол					= ?(СтрКвитанции.Количество() > 0, СтрКвитанции[0].Ссылка, "");
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
			СтрокаЭтапа.ЭтапПройден					= СтрКвитанции.Количество() > 0;
			
		Иначе // если переписка с ФНС
			
			// выделяем основные типы сообщений
			СтрОбращенияНП 					= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ОбращениеНП));
			СтрПодтвержденияОбращениеНО 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО));
			СтрИзвещенияПодтверждениеНП 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП));
			СтрИзвещенияОбращениеНО 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО));
			// эти статусы есть только в случае ошибки
			СтрРезультатыПриемаОбращениеНО 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО));
			СтрИзвещенияРезультатПриемаНП 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП));
			
			Если СтрОбращенияНП.Количество() > 0 И СтрОбращенияНП[0].Статус = Перечисления.СтатусыПисем.Исходящее Тогда
				Возврат ТаблицаЭтаповОтправки;
			КонецЕсли;

			Если НеПолучатьДаты Тогда
				ДатаОтправкиПервичного 	= Дата(1,1,1);
			Иначе
				ДатаОтправкиПервичного 	= ?(СтрОбращенияНП.Количество() > 0, СтрОбращенияНП[0].ДатаТранспорта, Дата(1,1,1));
			КонецЕсли;
			
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено оператору'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено оператору'");
			СтрокаЭтапа.Дата						= ДатаОтправкиПервичного;
			СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается подтверждение даты отправки'");
			СтрокаЭтапа.НаименованиеПротокола		= "";
			СтрокаЭтапа.Протокол					= "";
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
			СтрокаЭтапа.ЭтапПройден					= СтрОбращенияНП.Количество() > 0;
					
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в ФНС'");
			СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в ФНС'");
			СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрПодтвержденияОбращениеНО, НеПолучатьДаты);;
			СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается доставка письма в ФНС'");
			СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Подтверждение даты отправки'");
			СтрокаЭтапа.Протокол					= ?(СтрПодтвержденияОбращениеНО.Количество() > 0, СтрПодтвержденияОбращениеНО[0].Ссылка, Дата(1,1,1));
			СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
			СтрокаЭтапа.ЭтапПройден					= СтрПодтвержденияОбращениеНО.Количество() > 0;
			
			Если СтрРезультатыПриемаОбращениеНО.Количество() <> 0 Тогда
				
				СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
				СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не принято'");
				СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не принято'");
				СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрРезультатыПриемаОбращениеНО, НеПолучатьДаты);
				СтрокаЭтапа.КомментарийКСостоянию		= "";
				СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Уведомление об отказе'");
				СтрокаЭтапа.Протокол					= ?(СтрРезультатыПриемаОбращениеНО.Количество() > 0, СтрРезультатыПриемаОбращениеНО[0].Ссылка, Дата(1,1,1));
				СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
				СтрокаЭтапа.ЭтапПройден					= СтрРезультатыПриемаОбращениеНО.Количество() > 0;

			Иначе
				
				СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
				СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Доставлено в ФНС'");
				СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Доставлено'");
				СтрокаЭтапа.Дата						= ДатаИзОтвета(СтрИзвещенияОбращениеНО, НеПолучатьДаты);
				СтрокаЭтапа.КомментарийКСостоянию		= "";
				СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Извещение о получении'");
				СтрокаЭтапа.Протокол					= ?(СтрИзвещенияОбращениеНО.Количество() > 0, СтрИзвещенияОбращениеНО[0].Ссылка, Дата(1,1,1));
				СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
				СтрокаЭтапа.ЭтапПройден					= СтрИзвещенияОбращениеНО.Количество() > 0;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ТаблицаЭтаповОтправкиМакетаПенсионногоДела(Объект, ДополнительныеПараметры)
	
	НеПолучатьДаты = НЕ (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПолучатьДаты")
		И ДополнительныеПараметры.ПолучатьДаты);
		
	ПоказыватьПомеченныеНаУдаление = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоказыватьПомеченныеНаУдаление")
		И ДополнительныеПараметры.ПоказыватьПомеченныеНаУдаление;
	
	НачальныйСтатус = НачальныйСтатусПриФормированииТаблицыЭтаповОтправки(Объект.Ссылка);
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ЦиклОбмена = ДополнительныеПараметры.Отправка;
	Иначе
		ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(Объект.Ссылка);
	КонецЕсли;
	
	СообщенияЦикла = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена,,ПоказыватьПомеченныеНаУдаление,Истина);
		
	// Не отправлено
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НачальныйСтатус;
	СтрокаЭтапа.ТекстСтатуса				= НачальныйСтатус;
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостояниюНеОтправлено();
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;

	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	Если Объект.Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР Тогда
		
		// выделяем основные типы сообщений
		СтрПервичныеСообщения 	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР));
		СтрКвитанции 			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР));
		
		Если СтрПервичныеСообщения.Количество() > 0 И СтрПервичныеСообщения[0].Статус = Перечисления.СтатусыПисем.Исходящее Тогда
			Возврат ТаблицаЭтаповОтправки;
		КонецЕсли;
		
		Если НеПолучатьДаты Тогда
			ДатаОтправки 			= Дата(1,1,1);
			ДатаПолученияКвитанции 	= Дата(1,1,1);
		Иначе
			ДатаОтправки 			= ?(ЗначениеЗаполнено(Объект.ДатаСоздания) , " " + Формат(Объект.ДатаСоздания, "ДЛФ=DT"), Дата(1,1,1));
			ДатаПолученияКвитанции 	= ?(СтрКвитанции.Количество() > 0, СтрКвитанции[0].ДатаТранспорта, Дата(1,1,1));
		КонецЕсли;
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в ПФР'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в ПФР'");
		СтрокаЭтапа.Дата						= ДатаОтправки;
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается доставка письма в ПФР'");
		СтрокаЭтапа.НаименованиеПротокола		= "";
		СтрокаЭтапа.Протокол					= "";
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
		СтрокаЭтапа.ЭтапПройден					= СтрПервичныеСообщения.Количество() > 0;

		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Доставлено в ПФР'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Доставлено'");
		СтрокаЭтапа.Дата						= ДатаПолученияКвитанции;
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Квитанция о получении'");
		СтрокаЭтапа.Протокол					= ?(СтрКвитанции.Количество() > 0, СтрКвитанции[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= СтрКвитанции.Количество() > 0;
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ТаблицаЭтаповОтправкиОтветовНаТребованияФНС(СсылкаНаОтчет, ДополнительныеПараметры)
	
	НеПолучатьДаты = НЕ (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПолучатьДаты")
		И ДополнительныеПараметры.ПолучатьДаты);
		
	ПоказыватьПомеченныеНаУдаление = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоказыватьПомеченныеНаУдаление")
		И ДополнительныеПараметры.ПоказыватьПомеченныеНаУдаление;
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не отправлено'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не отправлено'");
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостояниюНеОтправлено();
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	// получаем список сообщений
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ЦиклОбмена = ДополнительныеПараметры.Отправка;
	Иначе
		ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	СообщенияЦикла = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена,,ПоказыватьПомеченныеНаУдаление,Истина);
	
	// выделяем основные типы сообщений
	СтрПредставленияНП					= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП));
	СтрПодтвержденияПредставлениеНО		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО));
	СтрИзвещенияПодтверждениеНП			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП));
	СтрИзвещенияПредставлениеНО			= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПредставлениеНО));
	СтрРезультатыПриемаПредставлениеНО	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО));
	СтрИзвещенияРезультатПриемаНП		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП));
	
	// Если статус первичного - не отправлено, тогда выходим 
	Если СтрПредставленияНП.Количество() > 0 И СтрПредставленияНП[0].Статус <> Перечисления.СтатусыПисем.Отправленное Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;

	// получаем свойства для анализа
	Если НеПолучатьДаты Тогда
		ДатаОтправкиПервичного 		= Дата(1,1,1);
		ДатаИзПодтверждения			= Дата(1,1,1);
		ДатаИзИзвещенияПолучения	= Дата(1,1,1);
	Иначе
		ДатаОтправкиПервичного 		= ?(СтрПредставленияНП.Количество() > 0, 				СтрПредставленияНП[0].ДатаТранспорта, 											Дата(1,1,1));
		ДатаИзПодтверждения			= ?(СтрПодтвержденияПредставлениеНО.Количество() > 0, 	ДатаИзОтветовКонтролирующихОрганов(СтрПодтвержденияПредставлениеНО[0].Ссылка), 	Дата(1,1,1));
		ДатаИзИзвещенияПолучения	= ?(СтрИзвещенияПредставлениеНО.Количество() > 0,		ДатаИзОтветовКонтролирующихОрганов(СтрИзвещенияПредставлениеНО[0].Ссылка), 		Дата(1,1,1));
	КонецЕсли;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено оператору'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено оператору'");
	СтрокаЭтапа.Дата						= ДатаОтправкиПервичного;
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается подтверждение даты отправки'");
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= СтрПредставленияНП.Количество() > 0;

	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в ФНС'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в ФНС'");
	СтрокаЭтапа.Дата						= ДатаИзПодтверждения;
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается результат обработки'");
	СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Подтверждение даты отправки'");
	СтрокаЭтапа.Протокол					= ?(СтрПодтвержденияПредставлениеНО.Количество() > 0, СтрПодтвержденияПредставлениеНО[0].Ссылка, "");
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= СтрПодтвержденияПредставлениеНО.Количество() > 0;
	
	// определяем наиболее свежее сообщение с результатом приема
	ПоследнийРезультатПриема = Неопределено;
	Для Каждого СтрРезультатПриемаПредставлениеНО Из СтрРезультатыПриемаПредставлениеНО Цикл
		Если ПоследнийРезультатПриема = Неопределено ИЛИ СтрРезультатПриемаПредставлениеНО.Дата > ПоследнийРезультатПриема.Дата Тогда
			ПоследнийРезультатПриема = СтрРезультатПриемаПредставлениеНО;
		КонецЕсли;
	КонецЦикла;
	
	// если результат приема отрицательный, то выводим соответствующее сообщение
	Если ПоследнийРезультатПриема <> Неопределено И ПоследнийРезультатПриема.ПротоколСОшибкой Тогда
		
		Если ТипЗнч(СсылкаНаОтчет) = Тип("ДокументСсылка.ПоясненияКДекларацииПоНДС") Тогда
			КомментарийКСостоянию = НСтр("ru = 'Исправьте ошибки и отправьте новый ответ'");
		Иначе
			КомментарийКСостоянию = НСтр("ru = 'Исправьте ошибки и отправьте новую опись'");
		КонецЕсли;
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не принято'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не принято'");
		СтрокаЭтапа.Дата						= Дата(1,1,1);
		СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостоянию;
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Уведомление об отказе'");
		СтрокаЭтапа.Протокол					= ?(СтрРезультатыПриемаПредставлениеНО.Количество() > 0, СтрРезультатыПриемаПредставлениеНО[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= СтрРезультатыПриемаПредставлениеНО.Количество() > 0;

	Иначе
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Принято'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Принято'");
		СтрокаЭтапа.Дата						= Дата(1,1,1);
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Квитанция о приеме'");
		СтрокаЭтапа.Протокол					= ?(СтрРезультатыПриемаПредставлениеНО.Количество() > 0, СтрРезультатыПриемаПредставлениеНО[0].Ссылка, "");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= СтрРезультатыПриемаПредставлениеНО.Количество() > 0;
		
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

#КонецОбласти

#Область РучнойВводСтатусовОтправки

Функция НачальныйСтатусПриФормированииТаблицыЭтаповОтправки(СсылкаНаОбъект)
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		
		Возврат НСтр("ru = 'Подготовлено'");
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.МакетыПенсионныхДел") Тогда
		
		Возврат НСтр("ru = 'В работе'");
		
	Иначе
		
		ТекСтатус = Неопределено;
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения")
			ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.УведомлениеОПолучателеДокументов") Тогда
			ВыборкаЖОКО = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.Выбрать(Новый Структура("Ссылка", СсылкаНаОбъект));
			Если ВыборкаЖОКО.Следующий() Тогда
				ТекСтатус = ВыборкаЖОКО.СтатусОтправки;
			КонецЕсли;
		Иначе
			ВыборкаЖОС = РегистрыСведений.ЖурналОтчетовСтатусы.Выбрать(Новый Структура("Ссылка", СсылкаНаОбъект));
			Если ВыборкаЖОС.Следующий() Тогда
				ТекСтатус = ВыборкаЖОС.Статус;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтатус = Неопределено Тогда
			Возврат НСтр("ru = 'В работе'");
		КонецЕсли;
		
		ТекСтатус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), ТекСтатус);
		
		СтатусыОбъектов
		= РегламентированнаяОтчетностьКлиентСервер.СтатусыОбъектовРеглОтчетностиПриРучномВводе(СсылкаНаОбъект);
		
		Если СтатусыОбъектов.Найти(ТекСтатус) = Неопределено Тогда
			Возврат НСтр("ru = 'В работе'");
		КонецЕсли;
		
		Возврат ТекСтатус;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПолучениеДатПротоколов

Функция ДатаИзОтветовКонтролирующихОрганов(ТранспортноеСообщение)
	
	ДатаИзОтвета = ТранспортноеСообщение.ДатаТранспорта;
	
	ВложенияТранспортногоСообщения = ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение);
	СоответствиеТиповСодержимого = ПолучитьСоответствиеТиповСодержимого();
	
	Для Каждого Вложение Из ВложенияТранспортногоСообщения Цикл
		
		ТипСодержимого 	= Вложение.Тип;
		ТипДокумента 	= СоответствиеТиповСодержимого.Получить(Вложение.Тип);
		
		// отчетность ПФР
		Если ТипДокумента = "ФайлОтчетностиПФР" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ПодтверждениеПолученияОтчетностиПФР" Тогда
			
			ИмяПоляДаты 	= "датаВремяПолучения";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			
		ИначеЕсли ТипДокумента = "СведенияПриложениеПФР" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ПротоколПФР" Тогда
			
			ИмяПоляДаты 	= "датаВремяОтправки";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			
		ИначеЕсли ТипДокумента = "ПротоколПриложениеПФР" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ФайлОписанияСведенийПФР" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ЭлектронноЦифроваяПодпись" Тогда
			// Дата отсутствует в файле.
			
		// неформализованные ПФР
		ИначеЕсли ТипДокумента = "Письмо" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ПисьмоПриложение" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ПодтверждениеПолученияПисьма" Тогда
			
			ИмяПоляДаты 	= "датаВремяПолучения";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			
		ИначеЕсли ТипДокумента = "ОписаниеПисьма" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ТранспортнаяИнформация" Тогда
			// Дата отсутствует в файле.
		
		// запросы ПФР
		ИначеЕсли ТипДокумента = "ЗапросИОС" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ФайлОписанияЗапросаПФР" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ОтветНаЗапросПФР" Тогда
			
			ИмяПоляДаты 	= "датаВремяОтправки";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			
		ИначеЕсли ТипДокумента = "ОтветПриложениеНаЗапросПФР" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ПодтверждениеПолученияЗапросПФР" Тогда
			
			ИмяПоляДаты 	= "датаВремяПолучения";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
		
		// отчетность ФНС
		ИначеЕсли ТипДокумента = "ФайлОтчетности" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "Форма2НДФЛ" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "Доверенность" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ОписаниеСведений" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ОписаниеСведений2НДФЛ" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ПодтверждениеДатыОтправки" Тогда
			
			ИмяПоляДаты 	= "ДатаОтпр";
			ИмяПоляВремени	= "ВремяОтпр";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты, ИмяПоляВремени);
			
		ИначеЕсли ТипДокумента = "УведомлениеОбОтказе" Тогда

			Если ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО 
				ИЛИ ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО Тогда
				
				ИмяПоляДаты 	= "ДатаПост";
				ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
				
			Иначе
				ИмяПоляДаты 	= "ДатаФормУвед";
				ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			КонецЕсли;
			
		ИначеЕсли ТипДокумента = "КвитанцияОПриеме" Тогда
			
			Если ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО Тогда
				ИмяПоляДаты 	= "ДатаПрин";
				ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			Иначе
				ИмяПоляДаты 	= "ДатаПредст";
				ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			КонецЕсли;
			
		ИначеЕсли ТипДокумента = "ИзвещениеОВводе" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "УведомлениеОбУточнении" Тогда
			
			ИмяПоляДаты 	= "ДатаФормУвед";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
				
		ИначеЕсли ТипДокумента = "ИзвещениеОПолучении" Тогда
			
			ИмяПоляДаты 	= "ДатаПол";
			ИмяПоляВремени	= "ВремяПол";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты, ИмяПоляВремени);
			
		//Заявление
		ИначеЕсли ТипДокумента = "КвитанцияОПриемеЗаявления" Тогда
			
			ИмяПоляДаты 	= "ДатаРег";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			
		ИначеЕсли ТипДокумента = "СообщениеОПростОтметки" Тогда
			
			ИмяПоляДаты 	= "ДатаСообОтм";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			
		ИначеЕсли ТипДокумента = "УведомлениеОбОтказеОтметки" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "СообщениеОПроверке" Тогда
			
			ИмяПоляДаты 	= "ДатаУведОткз";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			
		ИначеЕсли ТипДокумента = "СообщениеОбОтзывеЗаявления" Тогда
			
			ИмяПоляДаты 	= "ДатаОснОтз";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			
		ИначеЕсли ТипДокумента = "СообщениеОНесоответствиях" Тогда
			
			ИмяПоляДаты 	= "ДатаФЛК";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			
		ИначеЕсли ТипДокумента = "Заявление" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ОписаниеСведенийЗаявление" Тогда
			// Дата отсутствует в файле.
			
		//Документ
		ИначеЕсли ТипДокумента = "Документ" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ОписаниеДокумент" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "УведомлениеОбОтказеДокумент" Тогда
			
			ИмяПоляДаты 	= "ДатаНапр";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			
		ИначеЕсли ТипДокумента = "КвитанцияОПриемеДокумент" Тогда
			
			ИмяПоляДаты 	= "ДатаПрин";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			
		// 2-НДФЛ
		ИначеЕсли ТипДокумента = "Протокол2НДФЛ" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "Реестр2НДФЛ" Тогда
			// Дата отсутствует в файле.
			
		// обращение
		ИначеЕсли ТипДокумента = "Обращение" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "Приложение" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ПодтверждениеДатыПолучения" Тогда
			
			ИмяПоляДаты 	= "ДатаОтпр";
			ИмяПоляВремени	= "ВремяОтпр";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты, ИмяПоляВремени);
			
		ИначеЕсли ТипДокумента = "ОписаниеСведенийОбращениеПисьмоРассылка" Тогда
			// Дата отсутствует в файле.
			
		// представление
		ИначеЕсли ТипДокумента = "Представление" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ДоверенностьПредставление" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ОписаниеПредставление" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ПодтверждениеДатыОтправкиПредставление" Тогда
			
			ИмяПоляДаты 	= "ДатаОтпр";
			ИмяПоляВремени	= "ВремяОтпр";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты, ИмяПоляВремени);
			
		// входящие неформализованные
		ИначеЕсли ТипДокумента = "Рассылка" Тогда
			// Дата отсутствует в файле.
			
		// запросы
		ИначеЕсли ТипДокумента = "Запрос" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "Ответ" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ОписаниеСведенийЗапрос" Тогда
			
			ИмяПоляДаты 	= "ДатаВремяФормирования";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты);
			
		// отчетность в Росстат
		ИначеЕсли ТипДокумента = "ФайлОтчетностиФСГС" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ИзвещениеОПолученииДокументаФСГС" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ПодтверждениеОператораФСГС" Тогда
			
			ИмяПоляДаты 	= "ДатаОтпр";
			ИмяПоляВремени	= "ВремяОтпр";
			ДатаИзОтвета 	= ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Вложение.Тип, ИмяПоляДаты, ИмяПоляВремени);
			
		ИначеЕсли ТипДокумента = "УведомлениеОПриемеВОбработкуОтчетаФСГС" Тогда
			ДатаИзОтвета 	= ДатаИзПротоколаФСГС(ТранспортноеСообщение, Вложение.Тип);
		ИначеЕсли ТипДокумента = "УведомлениеОбУточненииОтчетаФСГС" Тогда
			ДатаИзОтвета 	= ДатаИзПротоколаФСГС(ТранспортноеСообщение, Вложение.Тип);
		ИначеЕсли ТипДокумента = "УведомлениеОНесоответствииФорматуОтчетаФСГС" Тогда
			ДатаИзОтвета 	= ДатаИзПротоколаФСГС(ТранспортноеСообщение, Вложение.Тип);
		ИначеЕсли ТипДокумента = "УведомлениеОбОтказеОтчетаФСГС" Тогда
			ДатаИзОтвета 	= ДатаИзПротоколаФСГС(ТранспортноеСообщение, Вложение.Тип);
		ИначеЕсли ТипДокумента = "ОписаниеФайлаОтчетностиФСГС" Тогда
			// Дата отсутствует в файле.
			
		// переписка с Росстатом
		ИначеЕсли ТипДокумента = "ПисьмоФСГС" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "РассылкаФСГС" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ПриложениеПисьмаФСГС" Тогда
			// Дата отсутствует в файле.
		ИначеЕсли ТипДокумента = "ОписаниеПисьмаФСГС" Тогда
			// Дата отсутствует в файле.
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаИзОтвета;

КонецФункции

Функция ДатаВремяИзСтрокиXML(ЗначениеСтр)
	
	Попытка
		Возврат XMLЗначение(Тип("Дата"), ЗначениеСтр);
	Исключение
		Попытка
			Возврат ДатаИзСтрокиРазныхФорматов(ЗначениеСтр);
		Исключение
			Возврат '00010101';
		КонецПопытки;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьРасширениеФайлаФССПоТипуОтправляемогоДокумента(ТипОтправляемогоДокумента) Экспорт
	
	Если ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.Отчет4ФСС  Тогда
		
		Возврат "ef4";
		
	ИначеЕсли ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС Тогда
		
		Возврат "esl";
		
	ИначеЕсли ТипОтправляемогоДокумента = Перечисления.ТипыОтправляемыхДокументов.Отчет4аФСС Тогда
		
		Возврат "e4a";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции

Функция СведенияПоОтправляемымОбъектам(Ссылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка");
	Результат.Вставить("ВидКонтролирующегоОргана");
	Результат.Вставить("КодКонтролирующегоОргана");
	Результат.Вставить("ПредставлениеКонтролирующегоОргана");
	Результат.Вставить("Организация");
	Результат.Вставить("Наименование");
	Результат.Вставить("ПредставлениеПериода");
	Результат.Вставить("Дата");
	Результат.Вставить("ВариантОтчета");
	Результат.Вставить("СтраницаЖурнала");
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи") Тогда
		
		Результат.Ссылка 								= Ссылка;
		Результат.ВидКонтролирующегоОргана 				= Неопределено;
		Результат.КодКонтролирующегоОргана 				= "";
		Результат.ПредставлениеКонтролирующегоОргана	= "";
		Результат.Организация							= Ссылка.Организация;
		Результат.Наименование 							= ?(Ссылка.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение,
			НСтр("ru = 'Заявление на изменение подключения к 1С-Отчетности'"), НСтр("ru = 'Заявление на подключение'"));
		Результат.ПредставлениеПериода					= "";
		Результат.Дата									= Ссылка.Дата;
		Результат.ВариантОтчета							= "-";
		Результат.СтраницаЖурнала						= Неопределено;

	Иначе
		
		Свойства = СвойстваОбъектовФормы1СОтчетность(Ссылка);
		
		// Если свойства получить не удалось, то возвращаем пустую структура
		Если Свойства = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		// Ссылка
		Если Свойства.Свойство("ДокСсылка") Тогда
			Результат.Ссылка = Свойства.ДокСсылка;
		ИначеЕсли Свойства.Свойство("Ссылка") Тогда
			Результат.Ссылка = Свойства.Ссылка;
		КонецЕсли;
		
		// ВидКонтролирующегоОргана
		Если Свойства.Свойство("ВидКонтролирующегоОргана") Тогда
			Результат.ВидКонтролирующегоОргана = Свойства.ВидКонтролирующегоОргана;
		КонецЕсли;
		
		// КодКонтролирующегоОргана
		Если Свойства.Свойство("КодКонтролирующегоОргана") Тогда
			Результат.КодКонтролирующегоОргана = Свойства.КодКонтролирующегоОргана;
		КонецЕсли;
		
		// ПредставлениеКонтролирующегоОргана
		Если Свойства.Свойство("ВидКонтролирующегоОргана") И Свойства.Свойство("КодКонтролирующегоОргана") Тогда
			Результат.ПредставлениеКонтролирующегоОргана = РегламентированнаяОтчетностьВызовСервера.ПредставлениеКонтролирующегоОргана(Свойства);
		КонецЕсли;
		
		// Организация
		Если Свойства.Свойство("Организация") Тогда
			Результат.Организация = Свойства.Организация;
		КонецЕсли;
		
		// Наименование
		Если Свойства.Свойство("НаименованиеОтчета") Тогда
			Результат.Наименование = Свойства.НаименованиеОтчета;
		ИначеЕсли Свойства.Свойство("Наименование") Тогда
			Результат.Наименование = Свойства.Наименование;
		КонецЕсли;

		// ПредставлениеПериода
		Если Свойства.Свойство("ПредставлениеПериода") Тогда
			Результат.ПредставлениеПериода = Свойства.ПредставлениеПериода;
		ИначеЕсли Свойства.Свойство("ДатаНачалаОП") И Свойства.Свойство("ДатаОкончанияОП") Тогда
			Результат.ПредставлениеПериода = РегламентированнаяОтчетностьВызовСервера.ПредставлениеФинансовогоПериода(Свойства.ДатаНачалаОП, Свойства.ДатаОкончанияОП);
		КонецЕсли;
		
		// Дата
		Если Свойства.Свойство("ДатаСоздания") Тогда
			Результат.Дата = Свойства.ДатаСоздания;
		Иначе
			Результат.Дата = Дата(1,1,1);
		КонецЕсли;
		
		// ВариантОтчета
		Если Свойства.Свойство("ПредставлениеВида") Тогда
			Результат.ВариантОтчета = Свойства.ПредставлениеВида;
		Иначе
			Результат.ВариантОтчета = "";
		КонецЕсли;
		
		// СтраницаЖурнала
		Если Свойства.Свойство("СтраницаЖурнала") Тогда
			Результат.СтраницаЖурнала = Свойства.СтраницаЖурнала;
		Иначе
			Результат.СтраницаЖурнала = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция СсылкаНаСообщение(ТранспотрныеСообщения)

	Возврат ?(ТранспотрныеСообщения.Количество() > 0, ТранспотрныеСообщения[0].Ссылка, Неопределено);
	
КонецФункции

#Область ЗаписьОбъектовВРегистр

Процедура ЗаполнитьРегистрЖурналОтправокВКонтролирующиеОрганы() Экспорт
	
	ВыборкаДетальныеЗаписи = ВыборкаОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы();
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Предмет = ВыборкаДетальныеЗаписи.Объект;
		Отказ 	= Ложь;
		
		Попытка
			
			// Запись в регистр
			ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписьОбъектовРегламентированнойОтчетности(Предмет, Отказ);
			
		Исключение
		
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка при заполнении регистра ЖурналОтправокВКонтролирующиеОрганы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,, Предмет,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЗапросНаИнформационноеОбслуживаниеВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт
	
	Свойства = СвойстваЗапросаНаИнформационноеОбслуживание(Объект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(Свойства);
	
КонецПроцедуры

Процедура ЗаписатьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИПВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт
	
	Свойства = СвойстваЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП(Объект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(Свойства);
	
КонецПроцедуры
	
Процедура ЗаписатьПерепискаСКонтролирующимиОрганамиВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	Свойства = СвойстваПерепискиСКонтролирующими(Объект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(Свойства);
	
КонецПроцедуры

Процедура ЗаписатьОписиИсходящихДокументовВНалоговыеОрганыВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	Свойства = СвойстваОписиИсходящихДокументовВНалоговыеОрганы(Объект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(Свойства);
	
КонецПроцедуры

Процедура ЗаписатьДокументыРеализацииПолномочийНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	Свойства = СвойстваДокументаРеализацииПолномочий(Объект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(Свойства);
	
КонецПроцедуры

Процедура ЗаписатьОписиВходящихДокументовИзНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	Для каждого Строка Из Ссылка.ВходящиеДокументы Цикл
		ДокументРеализацииПолномочий = Строка.СсылкаНаОбъект;
		ЗаписатьДокументыРеализацииПолномочийНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(ДокументРеализацииПолномочий);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаписатьУведомлениеОПолучателеДокументовВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт
	
	Свойства = СвойстваУведомленияОПолучателеДокументов(Объект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(Свойства);
	
КонецПроцедуры

Процедура ЗаписатьЭлектронныеПредставленияРегламентированныхОтчетовВРегистрЖурналОтчетовСтатусы(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	Свойства = СвойстваЭлектронногоПредставления(Ссылка);
	
	ЭтоЗакладкаУведомления = ЭтоЭлектронноеПредставлениеОтображаетсяВРазеделеУведомления(Ссылка);
	Если ЭтоЗакладкаУведомления Тогда
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(Свойства);
		
		// Удаление записи из регистра ЖурналОтчетовСтатусы
		Если СсылкаПрисутствуетВРегистреЖурналОтчетовСтатусы(Ссылка) Тогда
			НаборЗаписей = РегистрыСведений.ЖурналОтчетовСтатусы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(Ссылка);
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
		
	Иначе
		
		РегламентированнаяОтчетностьВызовСервера.ОтразитьВЖурналеОтчетов(Свойства);
		
		// Удаление записи из регистра ЖурналОтправокВКонтролирующиеОрганы
		Если СсылкаПрисутствуетВРегистреЖурналОтправокВКонтролирующиеОрганы(Ссылка) Тогда
			НаборЗаписей = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(Ссылка);
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

#Область СвойстваОбъектов

Функция СвойстваОбъектовФормы1СОтчетность(Источник) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Источник)
		ИЛИ (НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник))
			И НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник))) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылка = Источник.Ссылка;
	Свойства = Неопределено;
	
	// Обработка объектов типов, входящих в БРО
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Свойства = РегламентированнаяОтчетность.СвойстваРегламентированногоОтчета(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		Свойства = СвойстваЭлектронногоПредставления(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") 
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя") Тогда
		Свойства = СвойстваЗапросаНаИнформационноеОбслуживание(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП") Тогда
		Свойства = СвойстваЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
		Свойства = СвойстваПерепискиСКонтролирующими(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.МакетыПенсионныхДел") Тогда
		Свойства = СвойстваМакетаПенсионногоДела(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ОписиИсходящихДокументовВНалоговыеОрганы") Тогда
		Свойства = СвойстваОписиИсходящихДокументовВНалоговыеОрганы(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоясненияКДекларацииПоНДС") Тогда
		Свойства = СвойстваОтветаНаТребованиеПоясненийКДекларацииНДС(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		Свойства = ЭлектронныйДокументооборотСКонтролирующимиОрганами.СвойстваУведомленияОСпецрежимахНалогообложения(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда 
		Свойства = СвойстваДокументаРеализацииПолномочий(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.УведомлениеОПолучателеДокументов") Тогда
		Свойства = СвойстваУведомленияОПолучателеДокументов(Ссылка);
	Иначе
		// Определяем, является ли этот объект объектом, не входящим в БРО
		ТаблицаОписанияОбъектовНеВходящихВБРО = РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
		СтрокаТаблицыОписания = ТаблицаОписанияОбъектовНеВходящихВБРО.Найти(ТипЗнч(Ссылка), "ТипОбъекта");
		Если СтрокаТаблицыОписания <> Неопределено Тогда
			
			РазделФормы1СОтчетность = СтрокаТаблицыОписания.ВидДокумента;
			Если РазделФормы1СОтчетность = Перечисления.СтраницыЖурналаОтчетность.Уведомления Тогда
				// Это объект закладки Уведомления
				Свойства = ЭлектронныйДокументооборотСКонтролирующимиОрганами.СвойстваПрочихУведомлений(Ссылка);
			ИначеЕсли РазделФормы1СОтчетность = Перечисления.СтраницыЖурналаОтчетность.Отчеты Тогда
				// Это объект закладки Отчеты
				Свойства = РегламентированнаяОтчетность.СвойстваПрочихОтчетов(Ссылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

Функция СвойстваЗапросаНаИнформационноеОбслуживание(Объект) Экспорт
	
	Ссылка = Объект.Ссылка;
	
	// Наименование
	Наименование = Строка(Объект.ВидУслуги);
	
	// Вид и код контролирующего органа
	Ответы = Неопределено;
	ЭтоЗапросИОН = ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика");
	Если ЭтоЗапросИОН Тогда
		
		ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
		
		Если Ссылка.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов
			ИЛИ Ссылка.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом Тогда
			
			// В акте сверки указываются Год и НаДату.
			// В колонку Период формы 1С-Отчетности должен идти год.
			// За год отвечает начальная дата.
			ПредставлениеПериода = ПредставлениеФинансовогоПериода(
				НачалоГода(Ссылка.ДатаНачалаПериода), 
				КонецГода(Ссылка.ДатаНачалаПериода));
				
		ИначеЕсли Ссылка.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом
			ИЛИ Ссылка.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате Тогда
			// На дату
			ПредставлениеПериода = "На " + Формат(Ссылка.ДатаОкончанияПериода, "ДЛФ=D");
		Иначе
			ПредставлениеПериода = ПредставлениеФинансовогоПериода(
				Объект.ДатаНачалаПериода,
				Объект.ДатаОкончанияПериода);
		КонецЕсли;
		
		Ответы = ПолучитьОтветыНаЗапросИОН(Объект.Ссылка);

	Иначе
		ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
		
		Ответы = ПолучитьОтветыНаЗапросИОС(Объект.Ссылка);
		
		ПредставлениеПериода = "";
		
		НаДату = Дата(1,1,1);
		Если Объект.ВидУслуги  = Перечисления.ВидыУслугПриИОС.СправкаОСостоянииРасчетов Тогда
			НаДату = Объект.НаДату;
		Иначе
			ПоследнийЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(Ссылка);
			Если ЗначениеЗаполнено(ПоследнийЦиклОбмена) Тогда
				СообщенияЦикла = ПолучитьСообщенияЦиклаОбмена(ПоследнийЦиклОбмена,,,Истина);
				СтрОтветыНаЗапросПФР = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР));
				// Получаем дату отправки ответа из ПФР
				НаДату = ?(СтрОтветыНаЗапросПФР.Количество() > 0, ДатаИзОтветовКонтролирующихОрганов(СтрОтветыНаЗапросПФР[0].Ссылка), Дата(1,1,1));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаДату) Тогда
			ПредставлениеПериода = "На " + Формат(НаДату, "ДЛФ=D");
		Иначе
			ПредставлениеПериода = "";
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьОтвет = Ложь;
	Если Ответы.Количество() > 0 Тогда
		ЕстьОтвет = Истина;
	КонецЕсли;
	
	КодКонтролирующегоОргана = "";
	Получатель = Объект.Получатель;
	Если ЗначениеЗаполнено(Получатель) Тогда
		КодКонтролирующегоОргана = Получатель.Код;
	ИначеЕсли ЭтоЗапросИОН Тогда
		Если Ссылка.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате Тогда
			РеквизитыОрганизации 	 = РеквизитыОрганизацииНаСервере(Ссылка.Организация);
			КодКонтролирующегоОргана = Строка(РеквизитыОрганизации.КодНалоговогоОргана);
		КонецЕсли;
	КонецЕсли;
	
	Организация = Объект.Организация;
	
	// Запись в регистр
	ЗначенияЗаполнения = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
	ЗначенияЗаполнения.Ссылка 					= Ссылка;
	ЗначенияЗаполнения.ДатаСоздания				= Ссылка.Дата;
	ЗначенияЗаполнения.Наименование 			= Наименование;
	ЗначенияЗаполнения.ПредставлениеПериода 	= ПредставлениеПериода;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана = ВидКонтролирующегоОргана;
	ЗначенияЗаполнения.КодКонтролирующегоОргана = КодКонтролирующегоОргана;
	ЗначенияЗаполнения.Организация 				= Организация;
	ЗначенияЗаполнения.ЕстьОтвет 				= ЕстьОтвет;
	ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Сверки;
	
	Возврат ЗначенияЗаполнения; 
	
КонецФункции

Функция РеквизитыОрганизацииНаСервере(Организация) Экспорт
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "КрупнейшийНалогоплательщик, КодНалоговогоОрганаПолучателя, РегистрацияВНалоговомОргане.КодПоОКАТО, РегистрацияВНалоговомОргане.КодПоОКТМО");
	Если Результат.КрупнейшийНалогоплательщик <> Ложь Тогда
		КодНалоговогоОргана = Результат.КодНалоговогоОрганаПолучателя;
	Иначе
		КодНалоговогоОргана = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
	КонецЕсли;
	Результат.Вставить("КодНалоговогоОргана", КодНалоговогоОргана);
	Возврат Результат;
	
КонецФункции

Функция СвойстваЭлектронногоПредставления(Объект)
	
	Ссылка = Объект.Ссылка;
	
	// Наименование
	Наименование = Строка(Ссылка.ВидОтчета);
	
	// Вид и код контролирующего органа
	ВидКонтролирующегоОргана	= Ссылка.ТипПолучателя;
	КодКонтролирующегоОргана	= "";
	
	Получатель = Ссылка.Получатель;
	Если ЗначениеЗаполнено(Получатель) Тогда
		Если ТипЗнч(Получатель) = Тип("Строка") Тогда
			КодКонтролирующегоОргана = Получатель;
		Иначе
			КодКонтролирующегоОргана = Получатель.Код;
		КонецЕсли;
	КонецЕсли;
	
	ВидОтчета = Ссылка.ВидОтчета; 
	Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыОтправляемыхДокументов") Тогда
		ТипДокумента = ВидОтчета.ТипДокумента;
	Иначе
		ТипДокумента = Неопределено;
	КонецЕсли;
	
	// Даты
	ДатаНачала		= Дата(1,1,1);
	ДатаОкончания	= Дата(1,1,1);
	Если ТипДокумента <> Перечисления.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС
		И ТипДокумента <> Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС Тогда
		
		ДатаНачала		= Ссылка.ДатаНачала;
		ДатаОкончания	= Ссылка.ДатаОкончания;
		
	КонецЕсли;
	
	// ПредставлениеВерсии
	ПредставлениеВерсии = Ссылка.ПредставлениеВерсии;
	Если ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ЗаявлениеОВвозеТоваров
		ИЛИ (ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ПрочаяОтчетностьПФР
			И ВидОтчета <> Справочники.ВидыОтправляемыхДокументов.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК
			И ВидОтчета <> Справочники.ВидыОтправляемыхДокументов.СведенияОВзносахИСтраховомСтажеСПВ1
			И ВидОтчета <> Справочники.ВидыОтправляемыхДокументов.СведенияОНачисленномЗаработкеСЗВ63
			И ВидОтчета <> Справочники.ВидыОтправляемыхДокументов.ПачкаДокументовСЗВ61
			И ВидОтчета <> Справочники.ВидыОтправляемыхДокументов.РеестрСЗВ62
			И ВидОтчета <> Справочники.ВидыОтправляемыхДокументов.СведенияСЗВ64)
		ИЛИ ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.КомплектОтчетностиПФР
		ИЛИ ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.РеестрСведенийФСС
		ИЛИ ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ОтчетФСГС
		ИЛИ ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС Тогда
		ПредставлениеВерсии = "";
	КонецЕсли;
	
	ЭтоЗакладкаУведомления = ЭтоЭлектронноеПредставлениеОтображаетсяВРазеделеУведомления(Ссылка);
	Если ЭтоЗакладкаУведомления Тогда
		
		// Добавление записи в регистр ЖурналОтправокВКонтролирующиеОрганы
		ПараметрыУведомления = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
		ПараметрыУведомления.Ссылка 					= Ссылка;
		ПараметрыУведомления.Наименование 				= Наименование;
		ПараметрыУведомления.ДатаСоздания				= Ссылка.ДатаИмпорта;
		ПараметрыУведомления.ВидКонтролирующегоОргана 	= ВидКонтролирующегоОргана;
		ПараметрыУведомления.КодКонтролирующегоОргана 	= КодКонтролирующегоОргана;
		ПараметрыУведомления.Организация 				= Ссылка.Организация;
		ПараметрыУведомления.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Уведомления;
		
		Возврат ПараметрыУведомления;

	Иначе
		
		// Добавление записи в регистр ЖурналОтчетовСтатусы
		ПараметрыОтчета = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПараметрыОтображенияВЖурналеОтчетов();
			
		ПараметрыОтчета.ДокСсылка 					= Ссылка;
		ПараметрыОтчета.НаименованиеОтчета 			= Наименование;
		ПараметрыОтчета.ДатаСоздания				= Ссылка.ДатаИмпорта;
		ПараметрыОтчета.ВидКонтролирующегоОргана 	= ВидКонтролирующегоОргана;
		ПараметрыОтчета.КодКонтролирующегоОргана 	= КодКонтролирующегоОргана;
		ПараметрыОтчета.Организация 				= Ссылка.Организация;
		ПараметрыОтчета.ДатаНачалаОП 				= ДатаНачала;
		ПараметрыОтчета.ДатаОкончанияОП 			= ДатаОкончания;
		ПараметрыОтчета.ПредставлениеВида 			= ПредставлениеВерсии;
		ПараметрыОтчета.Комментарий 				= Ссылка.Комментарий;
		
		Возврат ПараметрыОтчета;

	КонецЕсли;
	
КонецФункции

Функция СвойстваЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП(Объект) Экспорт
	
	Ссылка = Объект.Ссылка;
	
	// Ответы
	ЕстьОтвет = ЕстьОтветНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП(Ссылка);

	Организация = Ссылка.Организация;
	
	// Запись в регистр
	ЗначенияЗаполнения = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
	ЗначенияЗаполнения.Ссылка 					= Ссылка;
	ЗначенияЗаполнения.ДатаСоздания				= Ссылка.Дата;
	ЗначенияЗаполнения.Наименование 			= НаименованиеЕГРЮЛ_ЕГРИП(Объект);
	ЗначенияЗаполнения.ВидКонтролирующегоОргана = Неопределено;
	ЗначенияЗаполнения.КодКонтролирующегоОргана = Неопределено;
	ЗначенияЗаполнения.Организация 				= Организация;
	ЗначенияЗаполнения.ЕстьОтвет 				= ЕстьОтвет;
	ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.ЕГРЮЛ;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Функция СвойстваПерепискиСКонтролирующими(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	
	// Наименование
	Наименование = Объект.Наименование;
	
	// Вид и код контролирующего органа
	ЭтоИсходящаяПереписка =	Объект.Статус <> Перечисления.СтатусыПисем.Полученное;
	
	ДанныеКонтролирующегоОргана = ВидИКодКонтролирующегоОрганаДляПерепискиСКонтролирующимиОрганами(Ссылка);
	
	ВидКонтролирующегоОргана	= ДанныеКонтролирующегоОргана.Вид;
	КодКонтролирующегоОргана	= ДанныеКонтролирующегоОргана.Код;
	
	Организация = Объект.Организация;
	
	// Запись в регистр
	ЗначенияЗаполнения = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
	ЗначенияЗаполнения.Ссылка 					= Объект;
	ЗначенияЗаполнения.Наименование 			= Наименование;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана = ВидКонтролирующегоОргана;
	ЗначенияЗаполнения.КодКонтролирующегоОргана = КодКонтролирующегоОргана;
	ЗначенияЗаполнения.Организация 				= Организация;
	Если ЭтоИсходящаяПереписка Тогда
		ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Письма;
		ЗначенияЗаполнения.ДатаСоздания				= Объект.ДатаСообщения;
	Иначе
		ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Входящие;
		ЗначенияЗаполнения.ДатаСоздания				= Объект.ДатаОтправки;
	КонецЕсли;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Функция СвойстваМакетаПенсионногоДела(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	
	// Наименование
	Наименование = Объект.Наименование;
	
	// Вид и код контролирующего органа
	ЭтоИсходящаяПереписка =	Объект.Статус <> Перечисления.СтатусыПисем.Полученное;
	
	ДанныеКонтролирующегоОргана = ВидИКодКонтролирующегоОрганаДляПерепискиСКонтролирующимиОрганами(Ссылка);
	
	ВидКонтролирующегоОргана	= ДанныеКонтролирующегоОргана.Вид;
	КодКонтролирующегоОргана	= ДанныеКонтролирующегоОргана.Код;
	
	Организация = Объект.Организация;
	
	// Запись в регистр
	ЗначенияЗаполнения = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
	ЗначенияЗаполнения.Ссылка 					= Объект;
	ЗначенияЗаполнения.Наименование 			= Наименование;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана = ВидКонтролирующегоОргана;
	ЗначенияЗаполнения.КодКонтролирующегоОргана = КодКонтролирующегоОргана;
	ЗначенияЗаполнения.Организация 				= Организация;
	ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ЗначенияЗаполнения.ДатаСоздания				= Объект.ДатаСоздания;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Функция СвойстваОписиИсходящихДокументовВНалоговыеОрганы(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	
	// Наименование
	Требование = Объект.Требование;
	Наименование = НСтр("ru = 'Ответ на требование'");
	Если ЗначениеЗаполнено(Требование) Тогда
		Наименование = Наименование + " " + Строка(Требование.НомерДокумента) + " от " + Формат(Требование.ДатаДокумента, "ДЛФ=D");
	КонецЕсли;
	
	// Вид и код контролирующего органа
	ВидКонтролирующегоОргана	= Перечисления.ТипыКонтролирующихОрганов.ФНС;
	Если ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда
		КодКонтролирующегоОргана	= Объект.НалоговыйОрган.Код;
	Иначе
		КодКонтролирующегоОргана	= "";
	КонецЕсли;
	
	Организация = Объект.Организация;
	
	// Запись в регистр
	ЗначенияЗаполнения = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
	ЗначенияЗаполнения.Ссылка 					= Ссылка;
	ЗначенияЗаполнения.ДатаСоздания				= Ссылка.ДатаСоздания;
	ЗначенияЗаполнения.Наименование 			= Наименование;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана = ВидКонтролирующегоОргана;
	ЗначенияЗаполнения.КодКонтролирующегоОргана = КодКонтролирующегоОргана;
	ЗначенияЗаполнения.Организация 				= Организация;
	ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Письма;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Функция СвойстваУведомленияОПолучателеДокументов(Объект) Экспорт
	
	Ссылка = Объект.Ссылка;
	
	// Наименование
	Наименование = НСтр("ru = 'Уведомление о получателе документов'");
	
	// Вид и код контролирующего органа
	ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	
	КодКонтролирующегоОргана = "";
	Получатель = Объект.Получатель;
	Если ЗначениеЗаполнено(Получатель) Тогда
		КодКонтролирующегоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель, "Код");
	КонецЕсли;
	
	Организация = Объект.Организация;
	
	// Запись в регистр
	ЗначенияЗаполнения = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
	ЗначенияЗаполнения.Ссылка 					= Ссылка;
	ЗначенияЗаполнения.ДатаСоздания				= Объект.Дата;
	ЗначенияЗаполнения.Наименование 			= Наименование;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана = ВидКонтролирующегоОргана;
	ЗначенияЗаполнения.КодКонтролирующегоОргана = КодКонтролирующегоОргана;
	ЗначенияЗаполнения.Организация 				= Организация;
	ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Уведомления;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Функция СвойстваДокументаРеализацииПолномочий(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	
	// Наименование
	Наименование = Ссылка.Наименование;
	
	// Вид и код контролирующего органа
	ВидКонтролирующегоОргана	= Перечисления.ТипыКонтролирующихОрганов.ФНС;
	Если ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда
		КодКонтролирующегоОргана	= Объект.НалоговыйОрган.Код;
	Иначе
		КодКонтролирующегоОргана	= "";
	КонецЕсли;
	
	Организация = Объект.Организация;
	
	// Ответы
	Результат 			= ПолучитьКоличествоОтветовНаТребования(Ссылка);
	КоличествоОтветов 	= Результат.Получить(Ссылка);
	
	// Запись в регистр
	ЗначенияЗаполнения = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
	ЗначенияЗаполнения.Ссылка 					= Ссылка;
	ЗначенияЗаполнения.ДатаСоздания				= Ссылка.ДатаДокумента;
	ЗначенияЗаполнения.Наименование 			= Наименование;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана = ВидКонтролирующегоОргана;
	ЗначенияЗаполнения.КодКонтролирующегоОргана = КодКонтролирующегоОргана;
	ЗначенияЗаполнения.Организация 				= Организация;
	ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Входящие;
	ЗначенияЗаполнения.ЕстьОтвет				= КоличествоОтветов;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Функция ЭтоЭлектронноеПредставлениеОтображаетсяВРазеделеУведомления(Ссылка)
	
	ВидОтчета 				= Ссылка.ВидОтчета;
	ЭтоЗакладкаУведомления 	= Ложь;
	
	ВидыОтчетовРазделаУведомления = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ВидыЭлектронныхПредставленийВРазделеУведомления();
	
	Если ВидыОтчетовРазделаУведомления.Найти(ВидОтчета) <> Неопределено Тогда
		ЭтоЗакладкаУведомления = Истина;
	КонецЕсли;
	
	Возврат ЭтоЗакладкаУведомления;
	
КонецФункции

Функция ПредставлениеФинансовогоПериода(Знач ДатаНачалаОП, Знач ДатаОкончанияОП) Экспорт
	
	ДатаНачала 		= НачалоДня(Мин(ДатаНачалаОП, ДатаОкончанияОП)); 
	ДатаОкончания 	= КонецДня(Макс(ДатаНачалаОП, ДатаОкончанияОП)); 

	ПредставлениеФинПериода = ПредставлениеПериода(ДатаНачала, ДатаОкончания, "Л=ru_RU; ФП=Истина");
	
	Если НачалоДня(ДатаНачала) = НачалоМесяца(ДатаНачала)
		И КонецДня(ДатаОкончания) = КонецМесяца(ДатаОкончания) Тогда
		
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			ПредставлениеФинПериодаГод = ПредставлениеПериода(НачалоГода(ДатаОкончания), КонецГода(ДатаОкончания), "ФП=Истина");
			ПредставлениеФинПериода = СтрЗаменить(СтрЗаменить(ПредставлениеФинПериода, ПредставлениеФинПериодаГод, ""), "  ", " ")
				+ ПредставлениеФинПериодаГод;
		КонецЕсли;
			
	КонецЕсли;
		
	Возврат ПредставлениеФинПериода;
	
КонецФункции

Функция ТипКонтролирующегоОргана(Знач КонтролирующийОрган = "ФНС") Экспорт
	
	Результат = КонтролирующийОрган;
	
	// Определяем контролирующий орган
	Если ТипЗнч(КонтролирующийОрган) = Тип("Строка") Тогда
		// Получаем из перечисления
		Результат = Перечисления.ТипыКонтролирующихОрганов[КонтролирующийОрган];
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ЕстьОтветНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП(Ссылка, Знач ВАрхиве = Ложь) Экспорт
	
	ЕстьОтвет = Ложь;
	ВАрхиве = Ложь;
	
	Ответы = ПолучитьОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП(Ссылка, ВАрхиве);
	Если Ответы.Количество() > 0 Тогда
		
		ОбщийРазмер = 0;
		Для каждого Ответ Из Ответы Цикл
			ОбщийРазмер = ОбщийРазмер + Ответ.Размер;
			Если Ответ.ВАрхиве Тогда
				ВАрхиве = Истина;
			КонецЕсли;
		КонецЦикла; 
		
		Если ОбщийРазмер <> 0 Тогда 
			ЕстьОтвет = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьОтвет;
	
КонецФункции

Функция ВидИКодКонтролирующегоОрганаДляПерепискиСКонтролирующимиОрганами(Ссылка)
	
	// Вид и код контролирующего органа
	ЭтоИсходящаяПереписка =	Ссылка.Статус <> Перечисления.СтатусыПисем.Полученное;
	
	Если ЭтоИсходящаяПереписка Тогда
		КонтролирующийОрган = Ссылка.Получатель;
	Иначе
		КонтролирующийОрган = Ссылка.Отправитель;
	КонецЕсли;

	Результат = Новый Структура("Вид, Код");
	
	Если ЗначениеЗаполнено(КонтролирующийОрган) Тогда
		
		// Код
		ТипКонтролирующегоОргана = ТипЗнч(КонтролирующийОрган);
		Если ТипКонтролирующегоОргана = Тип("СправочникСсылка.НалоговыеОрганы")
			ИЛИ ТипКонтролирующегоОргана = Тип("СправочникСсылка.ОрганыФСГС")
			ИЛИ ТипКонтролирующегоОргана = Тип("СправочникСсылка.ОрганыПФР") Тогда
			Результат.Код = КонтролирующийОрган.Код;
		Иначе
			Результат.Код = "";
		КонецЕсли;
		
		// Вид
		Если Ссылка.Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС Тогда
			Результат.Вид = Перечисления.ТипыКонтролирующихОрганов.ФНС;
		ИначеЕсли Ссылка.Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР Тогда
			Результат.Вид = Перечисления.ТипыКонтролирующихОрганов.ПФР;
		ИначеЕсли Ссылка.Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФСГС Тогда
			Результат.Вид = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПротоколыДляПечати(ПечатаемыеЦиклыОбмена = Неопределено, ПечатаемыеТранспортныеСообщения = Неопределено) Экспорт
	
	Если ТипЗнч(ПечатаемыеЦиклыОбмена) <> Тип("Массив") Тогда
		ЦиклыОбмена = Новый Массив;
		ЦиклыОбмена.Добавить(ПечатаемыеЦиклыОбмена);
	Иначе
		ЦиклыОбмена = ПечатаемыеЦиклыОбмена;
	КонецЕсли;
	
	Если ЦиклыОбмена.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ПечатаемыеТранспортныеСообщения) <> Тип("Массив") И ПечатаемыеТранспортныеСообщения <> Неопределено Тогда
		ТранспортныеСообщения = Новый Массив;
		ТранспортныеСообщения.Добавить(ПечатаемыеТранспортныеСообщения);
	Иначе
		ТранспортныеСообщения = ПечатаемыеТранспортныеСообщения;
	КонецЕсли;
	
	РезультатНастройки = Неопределено;
	
	Если ЦиклыОбмена[0].ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
		
		РезультатНастройки = Новый Структура();
		РезультатНастройки.Вставить("ПечататьДокумент",                  Ложь);
		РезультатНастройки.Вставить("ПечататьПодтверждениеДатыОтправки", Ложь);
		РезультатНастройки.Вставить("ПечататьРезультатПриема",           Ложь);
		РезультатНастройки.Вставить("ПечататьРезультатОбработки",        Ложь);
		РезультатНастройки.Вставить("ПечататьСообщениеОбОтзыве",         Ложь);
		РезультатНастройки.Вставить("ПечататьСообщениеОНесоответствиях", Ложь);
							 
		СоответствиеТиповСодержимогоПротоколам = Новый Соответствие;
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности, 				"ПечататьДокумент");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Заявление, 						"ПечататьДокумент");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ, 					"ПечататьДокумент");
		
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправки, 				"ПечататьПодтверждениеДатыОтправки");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправкиПредставление, "ПечататьПодтверждениеДатыОтправки");
		
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриеме, 				"ПечататьРезультатПриема");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеЗаявления, 		"ПечататьРезультатПриема");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеДокумент, 		"ПечататьРезультатПриема");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеДокумент, 	"ПечататьРезультатПриема");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказе, 			"ПечататьРезультатПриема");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ, 					"ПечататьРезультатПриема");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ, 					"ПечататьРезультатПриема");
		
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОВводе, 				"ПечататьРезультатОбработки");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточнении, 		"ПечататьРезультатОбработки");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПростОтметки,			"ПечататьРезультатОбработки");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеОтметки,		"ПечататьРезультатОбработки");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПроверке, 			"ПечататьРезультатОбработки");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПростОтметки, 		"ПечататьРезультатОбработки");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеОтметки, 	"ПечататьРезультатОбработки");
		
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОбОтзывеЗаявления, 	"ПечататьСообщениеОбОтзыве");

		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОНесоответствиях, 		"ПечататьСообщениеОНесоответствиях");
		
		Запрос = Новый Запрос();
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                      |	КОЛИЧЕСТВО(ИСТИНА) КАК ЧислоДокументовТипа,
		                      |	СодержимоеТранспортныхКонтейнеров.Тип
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |ГДЕ ";
		Если ЦиклыОбмена <> Неопределено Тогда 
			Запрос.Текст = Запрос.Текст + 
							  "СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена В(&ЦиклОбмена) И ";
			Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклыОбмена);
		КонецЕсли;
							  
		Если ТранспортныеСообщения <> Неопределено Тогда 
			Запрос.Текст = Запрос.Текст + 
							  "СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение В(&ТраснпортныеСообщения) И ";
			Запрос.УстановитьПараметр("ТраснпортныеСообщения", ТранспортныеСообщения);
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + 
							  "	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип В(&Тип)
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	СодержимоеТранспортныхКонтейнеров.Тип";
		
		ВозможныеТипыСообщений = Новый Массив;
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО);
		
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО);
		
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО);
		
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО);
		
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО);
		
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО);
		
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО);
		
		Запрос.УстановитьПараметр("Тип", ВозможныеТипыСообщений);
		
	Иначе
		
		РезультатНастройки = Новый Структура();
		РезультатНастройки.Вставить("ПечататьДокумент",               Ложь);
		РезультатНастройки.Вставить("ПечататьПодтверждениеОтправки",  Ложь);
		РезультатНастройки.Вставить("ПечататьИзвещениеОбОтказеПФР",   Ложь);
		РезультатНастройки.Вставить("ПечататьПротокол",               Ложь);
		РезультатНастройки.Вставить("ПечататьУведомлениеОбУточнении", Ложь);
		РезультатНастройки.Вставить("ПечататьПротоколПриема2НДФЛ",    Ложь);
		РезультатНастройки.Вставить("ПечататьРеестрСведений2НДФЛ",    Ложь);

		СоответствиеТиповСодержимогоПротоколам = Новый Соответствие;
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности, 		 				"ПечататьДокумент");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР, 						"ПечататьДокумент");
		
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке, 				"ПечататьПодтверждениеОтправки");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияОтчетностиПФР, 	"ПечататьИзвещениеОбОтказеПФР");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля, 				"ПечататьПротокол");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР, 							"ПечататьПротокол");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ, 							"ПечататьРеестрСведений2НДФЛ");
		
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиФСГС, 					"ПечататьДокумент");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОператораФСГС, 			"ПечататьПодтверждениеОтправки");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОПриемеВОбработкуОтчетаФСГС, "ПечататьПротокол");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОНесоответствииФорматуОтчетаФСГС, "ПечататьПротокол");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточненииОтчетаФСГС, 		"ПечататьПротокол");
		СоответствиеТиповСодержимогоПротоколам.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеОтчетаФСГС, 			"ПечататьПротокол");
		
		Запрос = Новый Запрос();
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                      |	КОЛИЧЕСТВО(ИСТИНА) КАК ЧислоДокументовТипа,
		                      |	СодержимоеТранспортныхКонтейнеров.Тип
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |ГДЕ ";
		Если ЦиклыОбмена <> Неопределено Тогда 
			Запрос.Текст = Запрос.Текст + 
							  "СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена В(&ЦиклОбмена) И ";
			Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклыОбмена);
		КонецЕсли;
							  
		Если ТранспортныеСообщения <> Неопределено Тогда 
			Запрос.Текст = Запрос.Текст + 
							  "СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение В(&ТраснпортныеСообщения) И ";
			Запрос.УстановитьПараметр("ТраснпортныеСообщения", ТранспортныеСообщения);
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + 
							  "	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип В(&Тип)
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	СодержимоеТранспортныхКонтейнеров.Тип";
									  
		ВозможныеТипыСообщений = Новый Массив;
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС);
		ВозможныеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС);
		Запрос.УстановитьПараметр("Тип", ВозможныеТипыСообщений);
		Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклыОбмена);
		
	КонецЕсли;
	
	// Не печатаем сам документ
	Если РезультатНастройки <> Неопределено Тогда 
		
		// Определяем, какие протоколы возможно напечатать
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВыбранныйПротокол = СоответствиеТиповСодержимогоПротоколам[Выборка.Тип];
			Если ВыбранныйПротокол = Неопределено Тогда
				Продолжить;
			Иначе
				РезультатНастройки[ВыбранныйПротокол] = Истина;
			КонецЕсли;
			
		КонецЦикла;

		РезультатНастройки.ПечататьДокумент = Ложь;
	КонецЕсли;
	
	Возврат РезультатНастройки;
	
КонецФункции

Функция ЗаготовкаТаблицыЭтаповОтправки()
	
	ТаблицаЭтаповОтправки = Новый ТаблицаЗначений;
	ТаблицаЭтаповОтправки.Колонки.Добавить("ТекстНадписи", 				Новый ОписаниеТипов("Строка"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("ТекстСтатуса", 				Новый ОписаниеТипов("Строка"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("Дата" 						);
	ТаблицаЭтаповОтправки.Колонки.Добавить("КомментарийКСостоянию", 	Новый ОписаниеТипов("Строка,ФорматированнаяСтрока"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("НаименованиеПротокола", 	Новый ОписаниеТипов("Строка"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("Протокол");
	ТаблицаЭтаповОтправки.Колонки.Добавить("Отправка");
	ТаблицаЭтаповОтправки.Колонки.Добавить("Сообщение");
	ТаблицаЭтаповОтправки.Колонки.Добавить("СостояниеСдачиОтчетности", 	Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСдачиОтчетности"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("ЭтапПройден", 				Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция КомментарийКСостояниюНеОтправлено()
	
	Комментарий = "";
	
	ЭлектронныйДокументооборотДоступен = ХотяБыОднаОрганизацияИспользуетДокументооборот();
	 
	Если НЕ ЭлектронныйДокументооборотДоступен Тогда
		
		СсылкаНаПредложениеОформитьЗаявлениеНаПодключение = "e1cib/command/ОбщаяКоманда.ПредложениеОформитьЗаявлениеНаПодключение";
		СсылкаНаПрочиеСпособыСдачиОтчетности = "http://buh.ru/articles/documents/52906/";
		
		ЭлементыСтроки = Новый Массив;
		ЭлементыСтроки.Добавить(НСтр("ru = 'Отправьте отчет через '"));
		ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '1С-Отчетность'"),,,,СсылкаНаПредложениеОформитьЗаявлениеНаПодключение));
		ЭлементыСтроки.Добавить(НСтр("ru = ' - самый удобный способ сдачи отчетности. '"));
		ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока("Все способы",,,, СсылкаНаПрочиеСпособыСдачиОтчетности));
		
		Комментарий = Новый ФорматированнаяСтрока(ЭлементыСтроки);
		
	КонецЕсли;
		
	Возврат Комментарий;
	
КонецФункции

Функция ВыборкаОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы()
	
	МассивТипов = ТипыОбъектовЭДООтображаемыхВФорме1СОтчетность();
	
	// Дополняем таблицу типов объектами, не входящими в БРО
	ТаблицаОписанияОбъектовНеВходящихВБРО 	= РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
	ОписанияОбъектовНеВходящихВБРО = ТаблицаОписанияОбъектовНеВходящихВБРО.НайтиСтроки(
		Новый Структура("ВидДокумента", Перечисления.СтраницыЖурналаОтчетность.Уведомления));
	
	Для каждого Описание Из ОписанияОбъектовНеВходящихВБРО Цикл
		МассивТипов.Добавить(Описание.ТипОбъекта);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	// Составляем запрос
	КоличествоТипов = МассивТипов.Количество();
	ИндексЭлемента = 0;
	Для каждого ТипОбъекта Из МассивТипов Цикл
		
		ОбъектМетаданных 	= Метаданные.НайтиПоТипу(ТипОбъекта);
		
		Если ОбъектМетаданных <> Неопределено Тогда
		
			ПолноеИмяТипа 		= ОбъектМетаданных.ПолноеИмя();
			ИмяТипа 			= ОбъектМетаданных.Имя;
			
			// Формируем основную часть запроса
			Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
				|	%1.Ссылка КАК Объект
				|ИЗ
				|	%2 КАК %1
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
				|		ПО (ЖурналОтправокВКонтролирующиеОрганы.Ссылка = %1.Ссылка)
				|ГДЕ
				|	ЖурналОтправокВКонтролирующиеОрганы.Ссылка Есть NULL";
				
			// Берем не все электронные представление, а только относящиеся к уведомлениям
			Если ТипОбъекта = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
				Запрос.Текст = Запрос.Текст + "
					|И (%1.ВидОтчета В (&ВидыОтчетовРазделаУведомления))";
					
				ВидыОтчетовРазделаУведомления = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ВидыЭлектронныхПредставленийВРазделеУведомления();
				Запрос.УстановитьПараметр("ВидыОтчетовРазделаУведомления", ВидыОтчетовРазделаУведомления);
			КонецЕсли;
				
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ИмяТипа);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", ПолноеИмяТипа);
				
			// Добавляем объединение между запросами
			Если ИндексЭлемента <> КоличествоТипов - 1 Тогда
				  Запрос.Текст = Запрос.Текст + "
				  |
				  |ОБЪЕДИНИТЬ ВСЕ
				  |
				  |";
				  
			КонецЕсли;
			
		КонецЕсли;
		
		ИндексЭлемента = ИндексЭлемента + 1;
		
	КонецЦикла;
	
	// Выполнение полученного запроса
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Возврат РезультатЗапроса;
	
КонецФункции

Функция КоличествоОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы() Экспорт
	
	ВыборкаОбъектовНеЗаписанныхВРегистр	= ВыборкаОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы();
	КоличествоОбъектов					= ВыборкаОбъектовНеЗаписанныхВРегистр.Количество();
	
	Возврат  КоличествоОбъектов;
	
КонецФункции

Функция СкрыватьПанельОтправки(Ссылка, Организация, КонтролирующийОрган) Экспорт 

	СкрыватьПанель = Ложь;
	МассивТипов = ТипыОбъектовЭДООтображаемыхВФорме1СОтчетность();
	
	Если МассивТипов.Найти(ТипЗнч(Ссылка)) <> Неопределено Тогда
		
		СкрыватьПанель = Ложь;
		
	Иначе

		Попытка
		
			Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			
				КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
				
				Если КонтролирующийОрган = "ФСС" Тогда
					СкрыватьПанель = НЕ КонтекстЭДОСервер.ОрганизацияИспользуетОбменСФСС(Организация);
				ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
					СкрыватьПанель = НЕ КонтекстЭДОСервер.НастройкиФСРАР(Организация).ИспользоватьОбмен;
				ИначеЕсли КонтролирующийОрган = "РПН" Тогда
					СкрыватьПанель = Ложь;
				ИначеЕсли КонтролирующийОрган = "ФТС" Тогда
					СкрыватьПанель = Ложь;
				Иначе
					
					УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = Ложь;
					СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,	"ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
					
					УчетнаяЗаписьДокументооборота = СвойстваОрганизации.УчетнаяЗаписьОбмена;
					Если СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате")
					И ЗначениеЗаполнено(УчетнаяЗаписьДокументооборота) Тогда
						НастроенОбменВУниверсальномФормате = Истина;
						Если КонтролирующийОрган = "ФНС" Тогда
							УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = 
								ДокументооборотСКОВызовСервера.УчетнаяЗаписьПредназначенаДляДокументооборотаСФНС(УчетнаяЗаписьДокументооборота);
						ИначеЕсли КонтролирующийОрган = "ПФР" Тогда
							УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = 
								ДокументооборотСКОВызовСервера.УчетнаяЗаписьПредназначенаДляДокументооборотаСПФР(УчетнаяЗаписьДокументооборота);
						ИначеЕсли КонтролирующийОрган = "ФСГС" Тогда
							УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = 
								ДокументооборотСКОВызовСервера.УчетнаяЗаписьПредназначенаДляДокументооборотаСФСГС(УчетнаяЗаписьДокументооборота);
						КонецЕсли;
					КонецЕсли;
					
					СкрыватьПанель = УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = Ложь;
					
				КонецЕсли;
			КонецЕсли;
		
		Исключение
			СкрыватьПанель = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат СкрыватьПанель;
	
КонецФункции

Функция СсылкаПрисутствуетВРегистреЖурналОтчетовСтатусы(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Журнал.Ссылка
	               |ИЗ
	               |	РегистрСведений.ЖурналОтчетовСтатусы КАК Журнал
	               |ГДЕ
	               |	Журнал.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Возврат Выборка.Количество() > 0;

КонецФункции

Функция СсылкаПрисутствуетВРегистреЖурналОтправокВКонтролирующиеОрганы(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Журнал.Ссылка
	               |ИЗ
	               |	РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК Журнал
	               |ГДЕ
	               |	Журнал.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Возврат Выборка.Количество() > 0;

КонецФункции

Функция ХотяБыОднаОрганизацияИспользуетДокументооборот() Экспорт
	
	ОрганизацииСДокументооборотом = Новый Массив;
	
	// Есть учетные записи
	ЭлектронныйДокументооборотАктивен = ЭлектронныйДокументооборотИспользуется();
	Если ЭлектронныйДокументооборотАктивен Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Настроен ЭДО с ФСС
	СписокДопустимыхОрганизацийВОбъектахОбменаФСС = СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
	Для каждого Организация Из СписокДопустимыхОрганизацийВОбъектахОбменаФСС Цикл
		Если Организация.ПометкаУдаления = Ложь Тогда
			Возврат Истина;
		Конецесли;
	КонецЦикла;
	
	// Настроен ЭДО с ФСРАР
	СписокДопустимыхОрганизацийВОбъектахОбменаФСРАР = СписокДопустимыхОрганизацийВОбъектахОбменаФСРАР();
	Для каждого Организация Из СписокДопустимыхОрганизацийВОбъектахОбменаФСРАР Цикл
		Если Организация.ПометкаУдаления = Ложь Тогда
			Возврат Истина;
		Конецесли;
	КонецЦикла;
	
	// Настроен ЭДО с РПН
	СписокДопустимыхОрганизацийВОбъектахОбменаРПН = СписокДопустимыхОрганизацийВОбъектахОбменаРПН();
	Для каждого Организация Из СписокДопустимыхОрганизацийВОбъектахОбменаРПН Цикл
		Если Организация.ПометкаУдаления = Ложь Тогда
			Возврат Истина;
		Конецесли;
	КонецЦикла;
	
	// Настроен ЭДО с ФТС
	СписокДопустимыхОрганизацийВОбъектахОбменаФТС = СписокДопустимыхОрганизацийВОбъектахОбменаФТС();
	Для каждого Организация Из СписокДопустимыхОрганизацийВОбъектахОбменаФТС Цикл
		Если Организация.ПометкаУдаления = Ложь Тогда
			Возврат Истина;
		Конецесли;
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

// Реализация метода частотного определения кодировки ДвоичныхДанных, для случаев когда не удается
// однозначно определить кодировку используется анализ BOM и encoding для XML, поддерживается распознавание
// Windows-1251, UTF-8, UTF-16, OEM866
//
// Параметры:
//  ДДИлиСсылка - адрес ДвоичныхДанных во временном хранилище или непосредственно ДвоичныеДанные
//
// Возвращаемое значение:
//  "windows-1251"/КодировкаТекста.UTF8/КодировкаТекста.UTF16/"cp866"
//
Функция ОпределитьКодировку(Знач ДДИлиСсылка) Экспорт
	
	
	Если ТипЗнч(ДДИлиСсылка) = Тип("Строка") Тогда 
		Если ЭтоАдресВременногоХранилища(ДДИлиСсылка) Тогда 
			ДД = ПолучитьИзВременногоХранилища(ДДИлиСсылка);
		Иначе
			Возврат "windows-1251";
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДДИлиСсылка) = Тип("ДвоичныеДанные") Тогда 
		ДД = ДДИлиСсылка;
	Иначе
		Возврат "windows-1251";
	КонецЕсли;
	
	Стр = Лев(ПолучитьHexСтрокуИзДвоичныхДанных(ДД), 4096);
	
	Если СтрДлина(Стр) < 2 Тогда 
		Возврат "windows-1251";
	КонецЕсли;
			
	ИндексДД = СтрНайти(Стр, "00000000"); //Двоичные данные, не отобразятся корректно
	Если ИндексДД > 0 Тогда 
		Возврат "windows-1251";
	КонецЕсли;
	
	Всего = 0;
	// В windows-1251 кириллица располагается в диапазоне
	// 192-255 А-Я, а-я
	
	// В cp866 кириллица располагается в диапазоне 
	// 128-175 А-Я, а-п
	// 224-241 р-я, Ёё
	
	// В UTF-8 Кириллица располагается в диапазоне 
	// D090 - D0BF А-Я, а-п	D000 + 144-191
	// D180 - D18F р-я 		D100 + 128-143
	
	// В UTF-16 Кириллица располагается в диапазоне 
	// 0410 - 042F
	// 0430 - 044F
	
	КодировкаПоBOM = Неопределено;
	BOM = Лев(Стр, 8);	
	Если СтрНайти(BOM, "EFBBBF") > 0 Тогда 
		КодировкаПоBOM = КодировкаТекста.UTF8;
		Стр = Сред(Стр, 7);
	ИначеЕсли СтрНайти(BOM, "FEFF") > 0 Тогда //BE
		КодировкаПоBOM = КодировкаТекста.UTF16;
		Стр = Сред(Стр, 5);
	ИначеЕсли СтрНайти(BOM, "FFFE") > 0 Тогда //LE
		КодировкаПоBOM = КодировкаТекста.UTF16;
		Стр = Сред(Стр, 5);
	КонецЕсли;
	
	//decl = "A1B2C3D4E5F6"; //Test value
	decl = "3C3F786D6C";
	enc = "656E636F64696E67"; // encoding word
	ansi_s = "31323531";
	ДлинаВыборкиXML = 150;
	Если КодировкаПоBOM = КодировкаТекста.UTF16 Тогда		
		СтрМакс = СтрДлина(decl) / 2;
		Для ш = 1 по СтрМакс Цикл 
			decl = Лев(decl, ш * 2 + (ш-1) * 2) + "00" + Прав(decl, СтрМакс * 2 - ш * 2);
		КонецЦикла;
		СтрМакс = СтрДлина(enc) / 2;
		Для ш = 1 по СтрМакс Цикл 
			enc = Лев(enc, ш * 2 + (ш-1) * 2) + "00" + Прав(enc, СтрМакс * 2 - ш * 2);
		КонецЦикла;
		СтрМакс = СтрДлина(ansi_s) / 2;
		Для ш = 1 по СтрМакс Цикл 
			ansi_s = Лев(ansi_s, ш * 2 + (ш-1) * 2) + "00" + Прав(ansi_s, СтрМакс * 2 - ш * 2);
		КонецЦикла;
		ДлинаВыборкиXML = 200;
	КонецЕсли;
	
	КодировкаПоXML = Неопределено;
	XMLpfx = Лев(Стр, ДлинаВыборкиXML);	
	ИндексXML = СтрНайти(XMLpfx, decl);
	Если ИндексXML > 0 и ИндексXML < 15 Тогда //xml declaration должно быть в самом начале файла
		
		Индекс = СтрНайти(XMLpfx, enc);
		Если Индекс  = 0 Тогда 
			КодировкаПоXML = КодировкаТекста.UTF8;
		Иначе
			Открывающая = СтрНайти(XMLpfx, "22",, Индекс); // symbol "
			Закрывающая = СтрНайти(XMLpfx, "22",, Открывающая + 2); // symbol "			
			Если Открывающая <> 0 И Закрывающая <> 0 Тогда 
				ТекстКодировки = Сред(XMLpfx, Открывающая + 2, Закрывающая - Открывающая - 2); //Без обрамлающих кавычек
				Если СтрНайти(ТекстКодировки, ansi_s) > 0 Тогда //1251
					КодировкаПоXML = "windows-1251";
				ИначеЕсли СтрНайти(ТекстКодировки, "38") > 0 Тогда //8
					КодировкаПоXML = КодировкаТекста.UTF8;
				ИначеЕсли СтрНайти(ТекстКодировки, "310036") > 0 Тогда //16
					КодировкаПоXML = КодировкаТекста.UTF16;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Симв16 = Новый Соответствие;
	Для ш = 0 по 9 Цикл 
		Симв16.Вставить(Строка(ш), ш);
	КонецЦикла;
	Для ш = КодСимвола("A") по КодСимвола("F") Цикл 
		Симв16.Вставить(Символ(ш), 10 + ш - КодСимвола("A"));
	КонецЦикла;
	
	КодировкаПоЧастоте = Неопределено;
	КириллицыAnsi = 0;
	КириллицыOem = 0;
	КириллицыUtf8 = 0;
	КириллицыUtf16 = 0;
	
	Предыдущий = "";
	СтаршихUtf16 = 0;
	
	Пока СтрДлина(Стр) > 2 Цикл
		Код16 = Лев(Стр, 2);
		Стр = Сред(Стр, 3);
		Дес = Симв16[Лев(Код16, 1)] * 16 + Симв16[Сред(Код16, 2, 1)];
		
		Код16След = Лев(Стр, 2);
		Если СтрДлина(Код16След) = 2 Тогда 
			ДесСлед = Симв16[Лев(Код16След, 1)] * 16 + Симв16[Сред(Код16След, 2, 1)];
		Иначе
			ДесСлед = 0;
		КонецЕсли;
		
		Если Предыдущий = "D0" И (Дес>=144 И Дес <=191) Тогда // UTF-8 cyr //D090-D0BF
			КириллицыUtf8 = КириллицыUtf8 + 1;
		ИначеЕсли Предыдущий = "D1" И (Дес>=128 И Дес <=143) Тогда // UTF-8 cyr //D180 - D18F
			КириллицыUtf8 = КириллицыUtf8 + 1;
			
		ИначеЕсли Предыдущий = "04" И Дес>=16 И Дес <=79 Тогда // UTF-16 cyr //0410 - 044F
			СтаршихUtf16 = СтаршихUtf16 + 1;
			КириллицыUtf16 = КириллицыUtf16 + 1;
		ИначеЕсли Код16 = "00" Или Код16 = "04" Тогда // UTF-16 lat, num
			СтаршихUtf16 = СтаршихUtf16 + 1;
			
		Иначе
			Если (Код16 = "D0" И (ДесСлед>=144 И ДесСлед <=191)) Или (Код16 = "D1" И (ДесСлед >= 128 И ДесСлед <=143)) Тогда 
				//Forward lookup, ничего не делаем
			Иначе
				Если Дес>=192 И Дес <=255 Тогда //C0-FF
					КириллицыAnsi = КириллицыAnsi + 1;
				КонецЕсли;
				Если (Дес>=128 И Дес <=175) Или (Дес>=224 И Дес <=241) Тогда //80-AF, E0-F1
					КириллицыOem = КириллицыOem + 1;
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;
		
		Предыдущий = Код16;
		Всего = Всего + 1;
	КонецЦикла;

	Если Всего = 0 Тогда 
		Возврат "windows-1251";
	КонецЕсли;
	
	Процент8 = (((КириллицыUtf8) / Всего) * 100);	//Процент кириллицы в Utf8 диапазоне
	Процент16 = (((КириллицыUtf16) / Всего) * 100);	//Процент кириллицы в Utf16 диапазоне
	ПроцентAnsi = ((КириллицыAnsi / Всего) * 100);	//Процент кириллицы в ANSI диапазоне
	ПроцентOem = ((КириллицыOem / Всего) * 100);	//Процент кириллицы в OEM диапазоне
	
	Процент00 = (((СтаршихUtf16) / Всего) * 100);	//Процент старших нулевых байтов Utf16
	
	//Точность = 
	//	"UTF-8 " + Формат(Процент8, "ЧДЦ=2; ЧН=0; ЧГ=") + "% " + 
	//	"UTF-16 " + Формат(Процент16, "ЧДЦ=2; ЧН=0; ЧГ=") + "% " +
	//	"Ansi " + Формат(ПроцентAnsi, "ЧДЦ=2; ЧН=0; ЧГ=") + "% " +
	//	"Oem " + Формат(ПроцентOem, "ЧДЦ=2; ЧН=0; ЧГ=") + "%";
	
	Если (Процент16 > 0 Или Процент00 > 30) Тогда
		Возврат КодировкаТекста.UTF16;		
	КонецЕсли;
	
	Если (Процент8 > ПроцентAnsi И Процент8 > ПроцентOem)
		Или (Процент8 >= ПроцентAnsi И Процент8 >= ПроцентOem И (КодировкаПоBOM = КодировкаТекста.UTF8 Или КодировкаПоXML = КодировкаТекста.UTF8)) Тогда
		КодировкаПоЧастоте = КодировкаТекста.UTF8;
	КонецЕсли;
	
	Если (КодировкаПоЧастоте = Неопределено И ПроцентAnsi > Процент8 И ПроцентAnsi > ПроцентOem)
		Или (ПроцентAnsi >= Процент8 И ПроцентAnsi >= ПроцентOem И (КодировкаПоXML = "windows-1251")) Тогда
		КодировкаПоЧастоте = "windows-1251";
	КонецЕсли;
	
	Если КодировкаПоЧастоте = Неопределено И ПроцентOem > Процент8 И ПроцентOem >= ПроцентAnsi Тогда
		КодировкаПоЧастоте = "cp866";
	КонецЕсли;
	
	Если КодировкаПоЧастоте = Неопределено И КодировкаПоBOM = Неопределено И КодировкаПоXML = Неопределено Тогда 
		Возврат "windows-1251";
	ИначеЕсли КодировкаПоЧастоте <> Неопределено Тогда 
		Возврат КодировкаПоЧастоте;
	ИначеЕсли КодировкаПоXML <> Неопределено Тогда 
		Возврат КодировкаПоXML;
	ИначеЕсли КодировкаПоBOM <> Неопределено Тогда 
		Возврат КодировкаПоBOM;
	КонецЕсли;
	
	Возврат "windows-1251";
	
КонецФункции

Функция ТипСодержимогоПоСтроке(СтрТипСодержимого) Экспорт
	
	Если НРег(СтрТипСодержимого) = "plain866" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.Текст866;
	ИначеЕсли НРег(СтрТипСодержимого) = "текст1251" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.Текст1251;
	ИначеЕсли НРег(СтрТипСодержимого) = "plain1251" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.Текст1251;
	ИначеЕсли НРег(СтрТипСодержимого) = "xml" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.xml;
	ИначеЕсли НРег(СтрТипСодержимого) = "html" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.html;
	ИначеЕсли НРег(СтрТипСодержимого) = "pdf" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.pdf;
	ИначеЕсли НРег(СтрТипСодержимого) = "rtf" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.rtf;
	ИначеЕсли НРег(СтрТипСодержимого) = "tiff" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.tiff;
	ИначеЕсли НРег(СтрТипСодержимого) = "jpeg" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.jpeg;
	ИначеЕсли НРег(СтрТипСодержимого) = "png" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.png;
	ИначеЕсли НРег(СтрТипСодержимого) = "doc" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.ms_word;
	ИначеЕсли НРег(СтрТипСодержимого) = "xls" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.ms_excel;
	ИначеЕсли НРег(СтрТипСодержимого) = "odt" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.odf_text;
	ИначеЕсли НРег(СтрТипСодержимого) = "ods" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.odf_spreadsheet;
	ИначеЕсли НРег(СтрТипСодержимого) = "docx" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.oxml_word;
	ИначеЕсли НРег(СтрТипСодержимого) = "xlsx" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.oxml_spreadsheet;
	ИначеЕсли НРег(СтрТипСодержимого) = "sgn" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.sgn;
	ИначеЕсли НРег(СтрТипСодержимого) = "unknown" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.Неизвестный;
	Иначе
		Возврат Перечисления.ТипыСодержимогоФайлов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ДвоичныеДанныеИзСтроки64НаСервере(Данные)
	
	Возврат Base64Значение(Данные);
	
КонецФункции

Функция ПолучитьСтруктуруРазмеровСканДокументов(СканДокументы) Экспорт
	
	
	Если ТипЗнч(СканДокументы) <> Тип("Массив")  Тогда
		МасивСканДокументов = Новый Массив;
		МасивСканДокументов.Добавить(СканДокументы);
	Иначе
		МасивСканДокументов = СканДокументы;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕстьNull(СУММА(СканированныеДокументыДляПередачиВЭлектронномВидеПрисоединенныеФайлы.Размер), 0) КАК Размер,
	|	ЕстьNull(СУММА(1), 0) КАК КолвоФайлов
	|ИЗ
	|	Справочник.СканированныеДокументыДляПередачиВЭлектронномВидеПрисоединенныеФайлы КАК СканированныеДокументыДляПередачиВЭлектронномВидеПрисоединенныеФайлы
	|ГДЕ
	|	СканированныеДокументыДляПередачиВЭлектронномВидеПрисоединенныеФайлы.ВладелецФайла В(&МасивСканДокументов)");
	
	Запрос.УстановитьПараметр("МасивСканДокументов", МасивСканДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураРезультат = Новый Структура("Размер, КолвоФайлов", 0, 0);
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРезультат,Выборка); 
	КонецЕсли;
	
	Возврат СтруктураРезультат;

КонецФункции

Процедура УдалитьПрисоединенныеФайлыСканированныеДокументыДляПередачиВЭлектронномВиде(МассивФайлов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого ПрисоединенныйФайлСсылка Из МассивФайлов Цикл
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайлСсылка.ПолучитьОбъект();
		ПрисоединенныйФайлОбъект.Удалить()
	КонецЦикла;
	
КонецПроцедуры

#Область ПредупреждениеОНекорректныхСтатусахОтправки2НДФЛ

Функция ТребуетсяПредупредитьОбОшибкеВСтатусахОтправки2НДФЛ() Экспорт
	
	ТребуетсяПредупредить 	= Ложь;
	АдресОтчетов			= Неопределено;
	
	Если НеобходимоПоказатьПредупреждениеОНекорректныхСтатусахОтправки2НДФЛ() Тогда
		
		АдресОтчетов = АдресОтчетов2НДФЛСНекорректнымиСтатусами();
	
		Если АдресОтчетов = Неопределено Тогда
			НапомнитьПозжеОНекорректныхСтатусахОтправки2НДФЛ(Ложь);
		Иначе
			ТребуетсяПредупредить = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("ТребуетсяПредупредить, АдресОтчетов", ТребуетсяПредупредить, АдресОтчетов);
	
КонецФункции

Функция НеобходимоПоказатьПредупреждениеОНекорректныхСтатусахОтправки2НДФЛ() Экспорт
	
	ПоказатьПредупреждение = ХранилищеОбщихНастроек.Загрузить("ИзменениеСтатуса2НДФЛСоСданоНаСданоЧастично_НапомнитьПозже");
	Возврат ПоказатьПредупреждение <> Ложь;
	
КонецФункции

Процедура НапомнитьПозжеОНекорректныхСтатусахОтправки2НДФЛ(Ответ) Экспорт
	
	ХранилищеОбщихНастроек.Сохранить("ИзменениеСтатуса2НДФЛСоСданоНаСданоЧастично_НапомнитьПозже", , Ответ);
	
КонецПроцедуры

Функция АдресОтчетов2НДФЛСНекорректнымиСтатусами()
	
	Адрес = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТранспортноеСообщение.ЦиклОбмена.Предмет КАК Отчет,
		|	МАКСИМУМ(ТранспортноеСообщение.Ссылка) КАК ТранспортноеСообщение,
		|	МАКСИМУМ(ТранспортноеСообщение.ЦиклОбмена) КАК ЦиклОбмена
		|ПОМЕСТИТЬ ПоследниеОтправки
		|ИЗ
		|	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		|ГДЕ
		|	ТранспортноеСообщение.Тип = &РезультатПриемаФорма2НДФЛНО
		|	И ТранспортноеСообщение.ПометкаУдаления = ЛОЖЬ
		|	И ТранспортноеСообщение.ЦиклОбмена.ПометкаУдаления = ЛОЖЬ
		|	И ТранспортноеСообщение.Получатель В(&Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТранспортноеСообщение.ЦиклОбмена.Предмет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТранспортныеСообщения.Ссылка.ДатаТранспорта КАК ДатаОтправки,
		|	ТранспортныеСообщения.ЦиклОбмена КАК ЦиклОбмена
		|ПОМЕСТИТЬ ДатыОтправки
		|ИЗ
		|	Документ.ТранспортноеСообщение КАК ТранспортныеСообщения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследниеОтправки КАК ПоследниеОтправки
		|		ПО (ПоследниеОтправки.ЦиклОбмена = ПоследниеОтправки.ТранспортноеСообщение.ЦиклОбмена)
		|ГДЕ
		|	ТранспортныеСообщения.Ссылка.Тип = &Форма2НДФЛНП
		|	И ТранспортныеСообщения.ПометкаУдаления = ЛОЖЬ
		|	И ТранспортныеСообщения.ЦиклОбмена.ПометкаУдаления = ЛОЖЬ
		|	И ТранспортныеСообщения.Отправитель В(&Организации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЖурналОтчетовСтатусы.Организация,
		|	ЖурналОтчетовСтатусы.НаименованиеОтчета КАК Представление,
		|	ПоследниеОтправки.Отчет,
		|	ЖурналОтчетовСтатусы.Статус КАК Состояние,
		|	ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности КАК СостояниеСдачиОтчетности,
		|	ДатыОтправки.ДатаОтправки КАК ДатаОтправки,
		|	ПоследниеОтправки.ТранспортноеСообщение КАК Протокол,
		|	ПоследниеОтправки.ЦиклОбмена КАК ЦиклОбмена,
		|	""Протокол ошибок"" КАК НаименованиеПротокола
		|ИЗ
		|	ПоследниеОтправки КАК ПоследниеОтправки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
		|		ПО ПоследниеОтправки.Отчет = ЖурналОтчетовСтатусы.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыОтправки КАК ДатыОтправки
		|		ПО (ДатыОтправки.ЦиклОбмена = ПоследниеОтправки.ЦиклОбмена)
		|ГДЕ
		|	ЖурналОтчетовСтатусы.Статус = ""Сдан частично""
		|	И ПоследниеОтправки.ТранспортноеСообщение.Тип = &РезультатПриемаФорма2НДФЛНО
		|	И ЖурналОтчетовСтатусы.Организация В (&Организации)";
		
	Запрос.УстановитьПараметр("РезультатПриемаФорма2НДФЛНО", 	Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО);
	Запрос.УстановитьПараметр("Форма2НДФЛНП", 					Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
	Запрос.УстановитьПараметр("Организации", 					ОрганизацииПоУчетнымЗаписямПользователя());
	
	ОтчетыСОшибками = Запрос.Выполнить().Выгрузить();
	
	Если ОтчетыСОшибками.Количество() > 0 Тогда
		Адрес = ПоместитьВоВременноеХранилище(ОтчетыСОшибками, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Адрес; 
	
КонецФункции

Процедура ИсправитьНекорректныеСостоянияОтправок2НДФЛ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТранспортноеСообщение.Ссылка КАК ТранспортноеСообщение,
		|	ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена,
		|	ТранспортноеСообщение.ЦиклОбмена.Предмет КАК Отчет,
		|	ТранспортноеСообщение.ЦиклОбмена.Организация КАК Организация,
		|	ЛОЖЬ КАК ТребуетсяКорректировкаСтатуса
		|ИЗ
		|	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		|ГДЕ
		|	ТранспортноеСообщение.ПротоколСОшибкой = ЛОЖЬ
		|	И ТранспортноеСообщение.Тип = &Тип";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО);
	
	РезультатПроверкиСостоянийОтчетов = Запрос.Выполнить();
	Сообщения = РезультатПроверкиСостоянийОтчетов.Выгрузить();
	
	Для каждого Строка Из Сообщения Цикл
	    УстановитьКорректноеЗначениеОшибкиПротокола2НДФЛ(Строка);
	КонецЦикла;
	
	Отказ = Ложь;
	// Статусы отчета корректируем отдельно от записи транспортного сообщения, так как на один отчет может быть 
	// несколько транспортных сообщений одного вида.
	Для каждого Строка Из Сообщения Цикл
		Если Строка.ТребуетсяКорректировкаСтатуса Тогда
			// Корректировка регистра ЖурналОтчетовСтатусы 
			УстановитьКорректныеСтатусыОтчетов2НДФЛ(Строка.Отчет, Строка.Организация);
			// Корректировка регистра СтатусыОтправки
			ОбновитьСтатусыСвязанногоОбъектаПриНеобходимости(Строка.ЦиклОбмена, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьКорректныеСтатусыОтчетов2НДФЛ(Отчет, Организация)
	
	НачатьТранзакцию();
	
	Попытка
		
		ВидКонтролирующегоОргана 	= Перечисления.ТипыКонтролирующихОрганов.ФНС;
		СтатусОтправки 				= Неопределено;
		СостояниеСдачиОтчетности 	= Неопределено;
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОпределитьСтатусИСостояниеСдачиОтчетности(
			Отчет, Организация, ВидКонтролирующегоОргана, СостояниеСдачиОтчетности, СтатусОтправки);
		
		СтруктураКлюча = Новый Структура("Ссылка", Отчет);
		Ключ = РегистрыСведений.ЖурналОтчетовСтатусы.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналОтчетовСтатусы");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Отчет);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ЖурналОтчетовСтатусы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Отчет);
		НаборЗаписей.Прочитать();
		
		Для каждого Запись из НаборЗаписей Цикл
			Запись.СостояниеСдачиОтчетности = СостояниеСдачиОтчетности;
			Запись.Статус                   = СтатусОтправки;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Корректировка состояния отправки 2-НДФЛ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьКорректноеЗначениеОшибкиПротокола2НДФЛ(Строка)
	
	ТранспортноеСообщение = Строка.ТранспортноеСообщение;
	
	Если ЯвляетсяОтрицательнымПротоколом(ТранспортноеСообщение) <> Ложь Тогда

		ТранспортноеСообщениеОбъект = ТранспортноеСообщение.ПолучитьОбъект();
		ТранспортноеСообщениеОбъект.ПротоколСОшибкой = Истина;
		ТранспортноеСообщениеОбъект.Записать();
		
		Строка.ТребуетсяКорректировкаСтатуса = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЛичныеКабинеты

Процедура ЗаполнитьПараметрыСпецоператора(Знач Спецоператор, ПараметрыСтруктура) Экспорт
	
	Если ТипЗнч(Спецоператор) = Тип("ПеречислениеСсылка.СпецоператорыСвязи") Тогда
		Имя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьИмяЗначенияПеречисленияСпецоператорыСвязиПоСинониму(Спецоператор);
	Иначе
		Имя = Спецоператор.Имя;
	КонецЕсли;
	
	Макет = ПолучитьМакетОбработки("ПараметрыСпецоператоровСвязи");
	
	Для Каждого Параметр Из ПараметрыСтруктура Цикл
		
		НомерКолонки = Макет.Область(Параметр.Ключ).Лево;
		
		Для НомерСтроки = 2 По Макет.ВысотаТаблицы Цикл
			ТекРегион = Макет.Область(НомерСтроки, 1).Текст;
			
			Если нРег(ТекРегион) = нРег(Имя) Тогда
				ПараметрыСтруктура.Вставить(Параметр.Ключ,Макет.Область(НомерСтроки, НомерКолонки).Текст);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивИспользуемыхСпецоператоров() Экспорт
	
	МассивРезультат = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	УчетныеЗаписиДокументооборота.СпецоператорСвязи
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	                      |		ПО Организации.УчетнаяЗаписьОбмена = УчетныеЗаписиДокументооборота.Ссылка
	                      |ГДЕ
	                      |	Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
	                      |	И УчетныеЗаписиДокументооборота.СпецоператорСвязи <> ЗНАЧЕНИЕ(Перечисление.СпецоператорыСвязи.ПустаяСсылка)
						  |	И НЕ Организации.ПометкаУдаления
	                      |	И НЕ УчетныеЗаписиДокументооборота.ПометкаУдаления");
						  
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивРезультат.Добавить(Выборка.СпецоператорСвязи);
	КонецЦикла; 
	
	Возврат МассивРезультат;
	
КонецФункции

Функция ПолучитьТаблицуИспользуемыхСпецоператоровУчетныхЗаписейОрганизаций() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	Организации.Ссылка КАК Организация,
	                      |	УчетныеЗаписиДокументооборота.Ссылка КАК УчетнаяЗапись,
	                      |	УчетныеЗаписиДокументооборота.СпецоператорСвязи КАК Спецоператор,
	                      |	РегистрацииВНалоговомОргане.Код КАК КодНО
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	                      |		ПО Организации.УчетнаяЗаписьОбмена = УчетныеЗаписиДокументооборота.Ссылка
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	                      |		ПО Организации.РегистрацияВНалоговомОргане = РегистрацииВНалоговомОргане.Ссылка
	                      |ГДЕ
	                      |	Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
	                      |	И УчетныеЗаписиДокументооборота.СпецоператорСвязи <> ЗНАЧЕНИЕ(Перечисление.СпецоператорыСвязи.ПустаяСсылка)
						  |	И НЕ Организации.ПометкаУдаления
	                      |	И НЕ УчетныеЗаписиДокументооборота.ПометкаУдаления");
						  
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Процедура ПриИзмененииТребованияВОтвете(ОтветОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ОтветОбъект.Требование) Тогда
		ОтветОбъект.ОписьВходящихДокументов = ДокументооборотСКОВызовСервера.ПолучитьОписьВходящихДокументовПоТребованию(ОтветОбъект.Требование);
		ОтветОбъект.Организация = ОтветОбъект.Требование.Организация;
		ОтветОбъект.НалоговыйОрган = ОтветОбъект.Требование.НалоговыйОрган;
		
		ОрганизацияОтбор = Справочники.Организации.ПустаяСсылка();
		
	Иначе
		ОтветОбъект.ОписьВходящихДокументов = Справочники.ОписиВходящихДокументовИзНалоговыхОрганов.ПустаяСсылка();
		ОтветОбъект.Организация = Справочники.Организации.ПустаяСсылка();
		ОтветОбъект.НалоговыйОрган = Справочники.НалоговыеОрганы.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиОтветаНаТребованиеФНС(Объект, Отказ) Экспорт
	
	Если Объект.Ссылка <> Неопределено Тогда
		
		Требование = Объект.Ссылка.Требование;
		
		// Ответы
		Результат 			= ПолучитьКоличествоОтветовНаТребования(Требование);
		КоличествоОтветов 	= Результат.Получить(Требование);
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ИзменитьЗначениеВФорме1СОтчетность(
			Требование, 
			"ЕстьОтвет", 
			КоличествоОтветов <> Неопределено И КоличествоОтветов > 0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьПоясненияКДекларацииПоНДСВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	Свойства = СвойстваОтветаНаТребованиеПоясненийКДекларацииНДС(Объект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(Свойства);
	
КонецПроцедуры

Функция СвойстваОтветаНаТребованиеПоясненийКДекларацииНДС(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	
	// Наименование
	Требование = Объект.Требование;
	Наименование = Документы.ПоясненияКДекларацииПоНДС.НаименованиеОтветаПоТребованию(Объект.Требование);
	
	// Вид и код контролирующего органа
	ВидКонтролирующегоОргана	= Перечисления.ТипыКонтролирующихОрганов.ФНС;
	Если ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда
		КодКонтролирующегоОргана	= Объект.НалоговыйОрган.Код;
	Иначе
		КодКонтролирующегоОргана	= "";
	КонецЕсли;
	
	Организация = Объект.Организация;
	
	// Запись в регистр
	ЗначенияЗаполнения = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
	ЗначенияЗаполнения.Ссылка 					= Ссылка;
	ЗначенияЗаполнения.ДатаСоздания				= Ссылка.Дата;
	ЗначенияЗаполнения.Наименование 			= Наименование;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана = ВидКонтролирующегоОргана;
	ЗначенияЗаполнения.КодКонтролирующегоОргана = КодКонтролирующегоОргана;
	ЗначенияЗаполнения.Организация 				= Организация;
	ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Письма;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Функция ТипыОбъектовЭДООтображаемыхВФорме1СОтчетность() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ОписиИсходящихДокументовВНалоговыеОрганы"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПоясненияКДекларацииПоНДС"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика"));
	МассивТипов.Добавить(Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения"));
	МассивТипов.Добавить(Тип("ДокументСсылка.УведомлениеОПолучателеДокументов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов"));

	Возврат МассивТипов;
	
КонецФункции

Функция ОпределитьОрганизациюПоИННиКПП(ИНН, КПП) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации");
	
	Если НЕ ЗначениеЗаполнено(КПП) Тогда
		Запрос.Текст = Запрос.Текст + "	ГДЕ ";
	Иначе
		Запрос.Текст = Запрос.Текст + "
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
							|		ПО Организации.Ссылка = РегистрацииВНалоговомОргане.Владелец
							|	ГДЕ РегистрацииВНалоговомОргане.КПП = &КПП
							|		И ";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " Организации.ИНН = &ИНН И Организации.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаТребованиеОПредставленииПоясненийКДекларацииНДС

Функция НоваяОписьВходящихДокументовИзНалоговыхОрганов(
		СвойстваОписиВходящихДокументов,
		ВложенияПриложение,
		ТранспортноеСообщение) Экспорт
		
	ТаблицаДокументов 		= СвойстваОписиВходящихДокументов.ТаблицаДокументов;
	ИдентификаторОписи 		= СвойстваОписиВходящихДокументов.Идентификатор;
	ИдентификаторОснования 	= СвойстваОписиВходящихДокументов.ИдентификаторОснования;
	
	Если СвойстваОписиВходящихДокументов.Свойство("Подписант") Тогда
		Подписант = СвойстваОписиВходящихДокументов.Подписант;
	Иначе
		Подписант = Неопределено;
	КонецЕсли;
	
	ЦиклОбмена 		= ТранспортноеСообщение.ЦиклОбмена; 
	ДатаТранспорта 	= ТранспортноеСообщение.ДатаТранспорта;
	
	// создаем документ опись входящих документов в ИБ
	ОписьДокументов = Справочники.ОписиВходящихДокументовИзНалоговыхОрганов.СоздатьЭлемент();
	ОписьДокументов.НалоговыйОрган 			= ЦиклОбмена.ВнешняяОрганизация;
	ОписьДокументов.Организация 			= ЦиклОбмена.Организация;
	ОписьДокументов.ДатаСообщения 			= ТекущаяДатаСеанса();
	ОписьДокументов.ДатаОтправки 			= ДатаТранспорта;
	ОписьДокументов.Идентификатор 			= ИдентификаторОписи;
	ОписьДокументов.ИдентификаторОснования 	= ИдентификаторОснования;

	ДокументОснование = ОснованиеДокументаРеализацииПолномочий(ИдентификаторОснования);

	// создаем документы реализации полномочий в ИБ
	Для каждого СтрокаДокумент Из ТаблицаДокументов Цикл
		
		РеквизитыДокумента = СтрокаДокумент.РеквизитыДокумента;
		СписокИменФайловВложений = СтрокаДокумент.СписокИменФайловВложений;
		
		Документ = Справочники.ДокументыРеализацииПолномочийНалоговыхОрганов.СоздатьЭлемент();
		ДокументСсылка = Справочники.ДокументыРеализацииПолномочийНалоговыхОрганов.ПолучитьСсылку();
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		
		Документ.ВидДокумента 		= ПолучитьВидНалоговогоДокументаПоКНД(РеквизитыДокумента.ВидДокумента);
		Документ.ДатаДокумента	 	= РеквизитыДокумента.ДатаДокумента;
		Документ.НомерДокумента 	= СокрЛП(СтрЗаменить(РеквизитыДокумента.НомерДокумента, "номер", ""));
		Документ.НалоговыйОрган 	= ЦиклОбмена.ВнешняяОрганизация;
		Документ.Организация 		= ЦиклОбмена.Организация;
		Документ.ДокументОснование 	= ДокументОснование;
		
		Если Подписант <> Неопределено Тогда
			Документ.ПодписантДолжность = Подписант.ПодписантДолжность;
			Документ.ПодписантТелефон 	= Подписант.ПодписантТелефон;
			Документ.ПодписантПочта 	= Подписант.ПодписантПочта;
			Документ.ПодписантФИО 		= Подписант.ПодписантФИО;
		КонецЕсли;

		// добавляем вложения документа
		ВложенияДанногоТребования = Новый Массив;
		
		Для Каждого Приложение Из ВложенияПриложение Цикл
			Если СписокИменФайловВложений.НайтиПоЗначению(ИмяФайлаБезРасширения(Приложение.ИмяФайла)) <> Неопределено
				ИЛИ СписокИменФайловВложений.НайтиПоЗначению(Приложение.ИмяФайла) <> Неопределено Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				ДобавитьВложенияДокумента(ДокументСсылка, Приложение.ИмяФайла, Приложение.Данные, ТипСодержимогоПоИмениФайла(Приложение.ИмяФайла), Приложение.Размер);
				УстановитьПривилегированныйРежим(Ложь);
				
				ВложенияДанногоТребования.Добавить(Приложение);
				
			КонецЕсли;	
		КонецЦикла;
		
		Документ.Наименование = Справочники.ДокументыРеализацииПолномочийНалоговыхОрганов.НаименованиеДокументаРеализацииПолномочий(Документ, ВложенияДанногоТребования);
		
		Попытка
			Документ.Записать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка записи входящего письма от ФНС:%1'"), Символы.ПС + ИнформацияОбОшибке().Описание);
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Возврат Неопределено;
		КонецПопытки;
		
		НоваяСтрокаВходящийДокумент = ОписьДокументов.ВходящиеДокументы.Добавить();
		НоваяСтрокаВходящийДокумент.СсылкаНаОбъект = Документ.Ссылка;
		
	КонецЦикла;
	
	Попытка
		ОписьДокументов.Записать();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка записи документа налогового органа:
                  |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОбновитьСвойстваЦиклаОбмена(ЦиклОбмена, ОписьДокументов.Ссылка) Тогда
		Если ТранзакцияАктивна() Тогда 
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОписьДокументов;
			
КонецФункции

Функция ОснованиеДокументаРеализацииПолномочий(Знач ИДФайлЗаяв) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИДФайлЗаяв) Тогда
		Возврат Неопределено;
	Конецесли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение КАК ТранспортноеСообщение
		|ИЗ
		|	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		|ГДЕ
		|	СодержимоеТранспортныхКонтейнеров.ИмяФайла ПОДОБНО &ИмяФайла";
	
	Запрос.УстановитьПараметр("ИмяФайла", ИДФайлЗаяв + "%.%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДокументОснования = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОснования = ВыборкаДетальныеЗаписи.ТранспортноеСообщение.ЦиклОбмена.Предмет;
	КонецЦикла;
	
	Возврат ДокументОснования;

КонецФункции

Функция ПолучитьВидНалоговогоДокументаПоКНД(КНД) Экспорт
	
	СоответствиеВидаДокументаКНД = Новый Соответствие;
	
	СоответствиеВидаДокументаКНД.Вставить("1160071", Перечисления.ВидыНалоговыхДокументов.РешениеОПриостановленииПроведенияВыезднойНалоговойПроверки);
	СоответствиеВидаДокументаКНД.Вставить("1160073", Перечисления.ВидыНалоговыхДокументов.РешениеОВозобновленииПроведенияВыезднойНалоговойПроверки);
	СоответствиеВидаДокументаКНД.Вставить("1160075", Перечисления.ВидыНалоговыхДокументов.РешениеОПродленииИлиОтказеВПродленииСроковПредставленияДокументов);
	СоответствиеВидаДокументаКНД.Вставить("1160076", Перечисления.ВидыНалоговыхДокументов.РешениеОбОтложенииРассмотренияМатериаловНалоговойПроверкиВСвязиСНеявкойЛица);
	СоответствиеВидаДокументаКНД.Вставить("1165010", Перечисления.ВидыНалоговыхДокументов.СправкаОПроведеннойВыезднойНалоговойПроверке);
	СоответствиеВидаДокументаКНД.Вставить("1165014", Перечисления.ВидыНалоговыхДокументов.ПоручениеОбИстребованииДокументов);
	СоответствиеВидаДокументаКНД.Вставить("1165009", Перечисления.ВидыНалоговыхДокументов.УведомлениеОВызовеНалогоплательщика);
	СоответствиеВидаДокументаКНД.Вставить("1165019", Перечисления.ВидыНалоговыхДокументов.РешениеОПроведенииДополнительныхМероприятийНалоговогоКонтроля);
	СоответствиеВидаДокументаКНД.Вставить("1165020", Перечисления.ВидыНалоговыхДокументов.РешениеОПривлеченииКОтветственностиЗаСовершениеНалоговогоПравонарушения);
	СоответствиеВидаДокументаКНД.Вставить("1165021", Перечисления.ВидыНалоговыхДокументов.РешениеОбОтказеВПривлеченииКОтветственностиЗаСовершениеНалоговогоПравонарушения);
	СоответствиеВидаДокументаКНД.Вставить("1165022", Перечисления.ВидыНалоговыхДокументов.РешениеОПривлеченииКОтветственностиЗаНалоговоеПравонарушение);
	СоответствиеВидаДокументаКНД.Вставить("1165023", Перечисления.ВидыНалоговыхДокументов.РешениеОбОтказеВПривлеченииКОтветственностиЛицаЗаНалоговоеПравонарушение);
	СоответствиеВидаДокументаКНД.Вставить("1165031", Перечисления.ВидыНалоговыхДокументов.РешениеОПриостановленииИсполненияРешенийФизЛицо);
	СоответствиеВидаДокументаКНД.Вставить("1165032", Перечисления.ВидыНалоговыхДокументов.РешениеОВозобновленииИсполненияРешенийФизЛицо);
	СоответствиеВидаДокументаКНД.Вставить("1165033", Перечисления.ВидыНалоговыхДокументов.РешениеОбОтменеРешенияОПривлеченииКОтветственностиФизЛица);
	СоответствиеВидаДокументаКНД.Вставить("1160001", Перечисления.ВидыНалоговыхДокументов.ТребованиеОбУплатеНалогаСбораПениШтрафа);
	СоответствиеВидаДокументаКНД.Вставить("1160002", Перечисления.ВидыНалоговыхДокументов.ТребованиеОбУплатеНалогаСбораПениШтрафаФизЛицу);
	СоответствиеВидаДокументаКНД.Вставить("1170001", Перечисления.ВидыНалоговыхДокументов.ПлатежныйДокумент);
	СоответствиеВидаДокументаКНД.Вставить("1165004", Перечисления.ВидыНалоговыхДокументов.РешениеОВозмещенииНДС);
	СоответствиеВидаДокументаКНД.Вставить("1165005", Перечисления.ВидыНалоговыхДокументов.РешениеОбОтказеВВозмещенииНДС);
	СоответствиеВидаДокументаКНД.Вставить("1165026", Перечисления.ВидыНалоговыхДокументов.РешениеОВозмещенииНДСЗаявительныйПорядок);
	СоответствиеВидаДокументаКНД.Вставить("1165027", Перечисления.ВидыНалоговыхДокументов.РешениеОбОтказеВВозмещенииНДСЗаявительныйПорядок);
	СоответствиеВидаДокументаКНД.Вставить("1165028", Перечисления.ВидыНалоговыхДокументов.РешениеОбОтменеРешенияОВозмещенииНДСЗаявительныйПорядок);
	СоответствиеВидаДокументаКНД.Вставить("1165030", Перечисления.ВидыНалоговыхДокументов.РешениеОбОтменеРешенияОВозмещенииНДСЗаявительныйПорядокУточненнаяДекларация);
	СоответствиеВидаДокументаКНД.Вставить("1165006", Перечисления.ВидыНалоговыхДокументов.РешениеОВозмещенииСуммыАкциза);
	СоответствиеВидаДокументаКНД.Вставить("1165007", Перечисления.ВидыНалоговыхДокументов.РешениеОбОтказеВВозмещенииСуммыАкциза);
	СоответствиеВидаДокументаКНД.Вставить("1165008", Перечисления.ВидыНалоговыхДокументов.МотивированноеЗаключение);
	СоответствиеВидаДокументаКНД.Вставить("1121007", Перечисления.ВидыНалоговыхДокументов.СвидетельствоОПостановкеНаУчетРоссийскойОрганизации);
	СоответствиеВидаДокументаКНД.Вставить("1121029", Перечисления.ВидыНалоговыхДокументов.УведомлениеОПостановкеНаУчетРоссийскойОрганизации);
	СоответствиеВидаДокументаКНД.Вставить("1121013", Перечисления.ВидыНалоговыхДокументов.УведомлениеОСнятииСУчетаРоссийскойОрганизации);
	СоответствиеВидаДокументаКНД.Вставить("1122022", Перечисления.ВидыНалоговыхДокументов.СвидетельствоОПостановкеНаУчетФизЛица);
	СоответствиеВидаДокументаКНД.Вставить("1122024", Перечисления.ВидыНалоговыхДокументов.УведомлениеОПостановкеНаУчетФизЛица);
	СоответствиеВидаДокументаКНД.Вставить("1122023", Перечисления.ВидыНалоговыхДокументов.УведомлениеОСнятииСУчетаФизЛица);
	СоответствиеВидаДокументаКНД.Вставить("1165025", Перечисления.ВидыНалоговыхДокументов.НалоговоеУведомление);
	СоответствиеВидаДокументаКНД.Вставить("1160031", Перечисления.ВидыНалоговыхДокументов.РешениеОПроведенииВыезднойНалоговойПроверки);
	СоответствиеВидаДокументаКНД.Вставить("1160087", Перечисления.ВидыНалоговыхДокументов.РешениеОПроведенииВыезднойНалоговойПроверкиГруппыНалогоплательщиков);
	СоответствиеВидаДокументаКНД.Вставить("1160084", Перечисления.ВидыНалоговыхДокументов.РешениеОПриостановленииВыезднойНалоговойПроверкиГруппыНалогоплательщиков);
	СоответствиеВидаДокументаКНД.Вставить("1160085", Перечисления.ВидыНалоговыхДокументов.РешениеОВозобновленииПроведенияВыезднойНалоговойПроверкиГруппыНалогоплательщиков);
	СоответствиеВидаДокументаКНД.Вставить("1160074", Перечисления.ВидыНалоговыхДокументов.АктОВоспрепятствованииДоступуДолжностныхЛицНаТерриториюИлиВПомещение);
	СоответствиеВидаДокументаКНД.Вставить("1165048", Перечисления.ВидыНалоговыхДокументов.ПостановлениеОПроведенииОсмотраТерриторийПомещенийДокументовИПредметов);
	СоответствиеВидаДокументаКНД.Вставить("1165015", Перечисления.ВидыНалоговыхДокументов.ПостановлениеОПроизводствеВыемкиИзъятияДокументовИПредметов);
	СоответствиеВидаДокументаКНД.Вставить("1165016", Перечисления.ВидыНалоговыхДокументов.ПротоколОПроизводствеВыемкиИзъятияДокументовИПредметов);
	СоответствиеВидаДокументаКНД.Вставить("1165017", Перечисления.ВидыНалоговыхДокументов.ПостановлениеОНазначенииЭкспертизы);
	СоответствиеВидаДокументаКНД.Вставить("1165018", Перечисления.ВидыНалоговыхДокументов.ПротоколОбОзнакомленииПроверяемогоЛицаСПостановлениемОНазначенииЭкспертизы);
	СоответствиеВидаДокументаКНД.Вставить("1160098", Перечисления.ВидыНалоговыхДокументов.АктНалоговойПроверки);
	СоответствиеВидаДокументаКНД.Вставить("1165049", Перечисления.ВидыНалоговыхДокументов.РешениеОПривлеченииКУчастиюСвидетеляЭкспертаСпециалиста);
	СоответствиеВидаДокументаКНД.Вставить("1165052", Перечисления.ВидыНалоговыхДокументов.ПротоколРассмотренияМатериаловНалоговойПроверки);
	СоответствиеВидаДокументаКНД.Вставить("1165037", Перечисления.ВидыНалоговыхДокументов.РешениеОПринятииОбеспечительныхМер);
	СоответствиеВидаДокументаКНД.Вставить("1165038", Перечисления.ВидыНалоговыхДокументов.РешениеОбОтменеОбеспечительныхМер);
	СоответствиеВидаДокументаКНД.Вставить("1165039", Перечисления.ВидыНалоговыхДокументов.РешениеОЗаменеОбеспечительныхМер);
	СоответствиеВидаДокументаКНД.Вставить("1160100", Перечисления.ВидыНалоговыхДокументов.АктОбОбнаруженииФактовСвидетельствующихОНалоговыхПравонарушениях);
	СоответствиеВидаДокументаКНД.Вставить("1165022", Перечисления.ВидыНалоговыхДокументов.РешениеОПривлеченииЛицаКОтветственностиЗаНалоговоеПравонарушение);
	СоответствиеВидаДокументаКНД.Вставить("1165023", Перечисления.ВидыНалоговыхДокументов.РешениеОбОтказеВПривлеченииЛицаКОтветственностиЗаНалоговоеПравонарушение);
	СоответствиеВидаДокументаКНД.Вставить("1165005", Перечисления.ВидыНалоговыхДокументов.РешениеОВозмещенииСуммыНалогаНаДобавленнуюСтоимость);
	СоответствиеВидаДокументаКНД.Вставить("1165004", Перечисления.ВидыНалоговыхДокументов.РешениеОбОтказеВВозмещенииСуммыНалогаНаДобавленнуюСтоимость);
	
	СоответствиеВидаДокументаКНД.Вставить("1165013", Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииДокументов);
	СоответствиеВидаДокументаКНД.Вставить("1165050", Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииПоясненийКДекларацииНДС);

	ВидДокумента = СоответствиеВидаДокументаКНД[СокрЛП(КНД)];
	Если ВидДокумента = Неопределено Тогда
		ВидДокумента = "Документ налогового органа КНД " + СокрЛП(КНД);
	КонецЕсли;
	
	Возврат ВидДокумента; 

КонецФункции

Функция ТипСодержимогоПоИмениФайла(ИмяФайла, ДляПФР = Ложь) Экспорт
	
	нрегРасширениеФайла = нрег(РасширениеФайла(ИмяФайла));
	Если нрегРасширениеФайла = "txt" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.Текст1251; // необходимо анализировать наполнение файла с целью автоопределения кодировки (Текст866 или Текст1251)
	ИначеЕсли нрегРасширениеФайла = "xml" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.xml;
	ИначеЕсли нрегРасширениеФайла = "htm" ИЛИ нрегРасширениеФайла = "html" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.html;
	ИначеЕсли НЕ ДляПФР Тогда
		Если нрегРасширениеФайла = "pdf" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.pdf;
		ИначеЕсли нрегРасширениеФайла = "rtf" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.rtf;
		ИначеЕсли нрегРасширениеФайла = "tiff" ИЛИ нрегРасширениеФайла = "tif" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.tiff;
		ИначеЕсли нрегРасширениеФайла = "jpeg" ИЛИ нрегРасширениеФайла = "jpg" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.jpeg;
		ИначеЕсли нрегРасширениеФайла = "png" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.png;
		ИначеЕсли нрегРасширениеФайла = "doc" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.ms_word;
		ИначеЕсли нрегРасширениеФайла = "xls" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.ms_excel;
		ИначеЕсли нрегРасширениеФайла = "odt" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.odf_text;
		ИначеЕсли нрегРасширениеФайла = "ods" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.odf_spreadsheet;
		ИначеЕсли нрегРасширениеФайла = "docx" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.oxml_word;
		ИначеЕсли нрегРасширениеФайла = "xlsx" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.oxml_spreadsheet;
		ИначеЕсли нрегРасширениеФайла = "sgn" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.sgn;
		Иначе
			Возврат Перечисления.ТипыСодержимогоФайлов.Неизвестный;
		КонецЕсли;
	Иначе
		Возврат Перечисления.ТипыСодержимогоФайлов.Неизвестный;
	КонецЕсли;
		
КонецФункции

Функция ДобавитьВложенияДокумента(Документ, ИмяФайла, Данные, Тип, Размер = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Размер = Неопределено Тогда
		Размер = ОпределитьРазмер(Данные);
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.ИмяФайла = ИмяФайла;
	МенеджерЗаписи.ТипСодержимого = Тип;
	МенеджерЗаписи.Размер = Размер;
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("ХранилищеЗначения") Тогда
		МенеджерЗаписи.Данные = Данные;
	ИначеЕсли ТипДанных = Тип("Строка") Тогда
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Данные), Новый СжатиеДанных(9));
	Иначе
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
	КонецЕсли;
	Попытка
		МенеджерЗаписи.Записать(Истина);
		Возврат Истина;
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось сохранить в информационной базе вложение %1 входящего документа %2!%3'"),
																					ИмяФайла, Документ, ИнформацияОбОшибке().Описание);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ДанныеТребованияОПредставленииПоясненийКДекларацииНДС(Требование) Экспорт
	
	Результат = Новый Структура();
	
	Если ТипЗнч(Требование) <> Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов")
		ИЛИ Требование.ВидДокумента <> Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииПоясненийКДекларацииНДС Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьКXMLФайлаТребования  = XMLФайлТребованияОПредставленииПоясненийКДекларацииНДСИзРегистра(Требование);
	Если ПутьКXMLФайлаТребования = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТребованиеXDTO = XDTOФайлаТребованияОПредставленииПоясненийКДекларацииНДС(ПутьКXMLФайлаТребования);
	
	Результат.Вставить("ВерсФорм", ТребованиеXDTO.ВерсФорм);
	Результат.Вставить("Раздел8", Документы.ПоясненияКДекларацииПоНДС.ТаблицаРаздела8());
	Результат.Вставить("Раздел8_1", Документы.ПоясненияКДекларацииПоНДС.ТаблицаРаздела8_1());
	Результат.Вставить("Раздел9", Документы.ПоясненияКДекларацииПоНДС.ТаблицаРаздела9());
	Результат.Вставить("Раздел9_1", Документы.ПоясненияКДекларацииПоНДС.ТаблицаРаздела9_1());
	Результат.Вставить("Раздел10", Документы.ПоясненияКДекларацииПоНДС.ТаблицаРаздела10());
	Результат.Вставить("Раздел11", Документы.ПоясненияКДекларацииПоНДС.ТаблицаРаздела11());
	Результат.Вставить("Раздел12", Документы.ПоясненияКДекларацииПоНДС.ТаблицаРаздела12());
	Результат.Вставить("НетКнигаПрод", Документы.ПоясненияКДекларацииПоНДС.ТаблицаНетКнигаПрод());
	Результат.Вставить("СведКС", Документы.ПоясненияКДекларацииПоНДС.ТаблицаТребованияСведКС());
	
	ЗаполнитьРаздел8(Результат, ТребованиеXDTO);
	ЗаполнитьРаздел8_1(Результат, ТребованиеXDTO);
	ЗаполнитьРаздел9(Результат, ТребованиеXDTO);
	ЗаполнитьРаздел9_1(Результат, ТребованиеXDTO);
	ЗаполнитьРаздел10(Результат, ТребованиеXDTO);
	ЗаполнитьРаздел11(Результат, ТребованиеXDTO);
	ЗаполнитьРаздел12(Результат, ТребованиеXDTO);
	ЗаполнитьНетКнигаПрод(Результат, ТребованиеXDTO);
	ЗаполнитьСведКС(Результат, ТребованиеXDTO);
	
	Возврат Результат;
	
КонецФункции

Функция XMLФайлТребованияОПредставленииПоясненийКДекларацииНДСИзРегистра(Требование) Экспорт
	
	Если ТипЗнч(Требование) = Тип("СправочникОбъект.ДокументыРеализацииПолномочийНалоговыхОрганов")
		И Требование.ЭтоНовый() Тогда
		Требование = Требование.ПолучитьСсылкуНового();
	КонецЕсли;
	
	ПриложенияТребования = ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Требование);
	Возврат XMLФайлТребованияОПредставленииПоясненийКДекларацииНДССредиПриложенийТребования(ПриложенияТребования);
	
КонецФункции

Функция XMLФайлТребованияОПредставленииПоясненийКДекларацииНДССредиПриложенийТребования(ПриложенияТребования) Экспорт
	
	Для каждого ПриложениеТребования Из ПриложенияТребования Цикл
		СвойстваФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПриложениеТребования.ИмяФайла);
		
		Если ВРЕГ(СвойстваФайла.Расширение) = ВРЕГ(".xml") Тогда
			
			ВременныйФайлТребований = ПолучитьИмяВременногоФайла("xml");
			ПриложениеТребования.Данные.Получить().Записать(ВременныйФайлТребований);
			
			Возврат ВременныйФайлТребований;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция XDTOФайлаТребованияОПредставленииПоясненийКДекларацииНДС(ФайлТребования)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлТребования);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Фабрика = ФабрикаXDTO;
	Объект = Фабрика.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();

	Возврат Объект;
	
КонецФункции

Функция ЕстьТребованияКРазделам8_12(ДокументыРеализацииПолномочий) Экспорт

	ЭтоТребованиеОПредставленииПоясненийКДекларацииНДС = 
		ДокументыРеализацииПолномочий.ВидДокумента = 
		Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииПоясненийКДекларацииНДС;
	
	ЕстьТребования = ЭтоТребованиеОПредставленииПоясненийКДекларацииНДС И
		XMLФайлТребованияОПредставленииПоясненийКДекларацииНДСИзРегистра(ДокументыРеализацииПолномочий) <> Неопределено;

	Возврат ЕстьТребования;
		
КонецФункции
	
Функция СвойстваДекларацииИзФайлаТребованияОПредставленииПоясненийКДекларацииНДС(Требование, ПриложенияТребования = Неопределено) Экспорт
	
	Если ПриложенияТребования = Неопределено Тогда
		// Если приложения не указаны, сами ищем в регистре
		ФайлТребования  = XMLФайлТребованияОПредставленииПоясненийКДекларацииНДСИзРегистра(Требование);
	Иначе
		// Если приложения указаны, ищем среди них xml-файл требования
		ФайлТребования  = XMLФайлТребованияОПредставленииПоясненийКДекларацииНДССредиПриложенийТребования(ПриложенияТребования);
	КонецЕсли;
	
	Если ФайлТребования = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	XDTOФайлаТребования = XDTOФайлаТребованияОПредставленииПоясненийКДекларацииНДС(ФайлТребования);
	
	Документ 				= XDTOФайлаТребования.Документ;
	Год 					= Документ.ОтчетГод;
	СвойстваПериодичности 	= СвойстваПериодичностиДекларацииВТребовании(Документ.Период, Год);
	
	Результат = Новый Структура();
	
	Результат.Вставить("Год", 					Год);
	Результат.Вставить("НомерКорректировки", 	Число(Документ.НомКорр));
	Результат.Вставить("Период", 				СвойстваПериодичности.НазваниеПериода);
	Результат.Вставить("Периодичность", 		СвойстваПериодичности.Периодичность);
	Результат.Вставить("КонецПериода", 			СвойстваПериодичности.КонецПериода);
	
	Результат.Вставить("Декларация", 			ДекларацияИзФайлаТребованияОПредставленииПоясненийКДекларацииНДС(Требование));
	Результат.Вставить("Организация", 			Требование.Организация);
	
	Результат.Вставить("ТребованиеПериод", 		Документ.Период);
	Результат.Вставить("ТребованиеОтчетГод", 	Документ.ОтчетГод);
	Результат.Вставить("ТребованиеНомКорр", 	Документ.НомКорр);
	
	Возврат Результат;
	
КонецФункции

Функция ПериодОтраженияЗаписиПоясненияКДекларацииНДС(Требование) Экспорт
	
	ФайлТребования  = XMLФайлТребованияОПредставленииПоясненийКДекларацииНДСИзРегистра(Требование);
	
	Если ФайлТребования = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	XDTOФайлаТребования = XDTOФайлаТребованияОПредставленииПоясненийКДекларацииНДС(ФайлТребования);
	
	Документ 			= XDTOФайлаТребования.Документ;
	
	Период 				= Документ.Период;
	НомерКорректировки 	= Число(Документ.НомКорр);
	Год					= Документ.ОтчетГод;
	
	Возврат Строка(Период) + ";" + Строка(Год);

КонецФункции

Функция ДекларацияИзФайлаТребованияОПредставленииПоясненийКДекларацииНДС(Требование, ПриложенияТребования = Неопределено) Экспорт
	
	Если ПриложенияТребования = Неопределено Тогда
		// Если приложения не указаны, сами ищем в регистре
		ФайлТребования  = XMLФайлТребованияОПредставленииПоясненийКДекларацииНДСИзРегистра(Требование);
	Иначе
		// Если приложения указаны, ищем среди них xml-файл требования
		ФайлТребования  = XMLФайлТребованияОПредставленииПоясненийКДекларацииНДССредиПриложенийТребования(ПриложенияТребования);
	КонецЕсли;
	
	Если ФайлТребования = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	XDTOФайлаТребования = XDTOФайлаТребованияОПредставленииПоясненийКДекларацииНДС(ФайлТребования);
	
	Документ 			= XDTOФайлаТребования.Документ;
	
	Период 				= Документ.Период;
	НомерКорректировки 	= Число(Документ.НомКорр);
	Год					= Документ.ОтчетГод;
	
	НачальнаяИКонечнаяДата 	= НачальнаяИКонечнаяДатаПоНалоговомуПериодуИГоду(Период, Год);
	НачальнаяДата 			= НачальнаяИКонечнаяДата.ДатаНачала;
	ДатаОкончания 			= НачальнаяИКонечнаяДата.ДатаОкончания;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегламентированныйОтчет.Ссылка
		|ИЗ
		|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		|ГДЕ
		|	РегламентированныйОтчет.Вид = &НомерКорректировки
		|	И НАЧАЛОПЕРИОДА(РегламентированныйОтчет.ДатаНачала, ДЕНЬ) = &ДатаНачала
		|	И НАЧАЛОПЕРИОДА(РегламентированныйОтчет.ДатаОкончания, ДЕНЬ) = &ДатаОкончания
		|	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
		|	И РегламентированныйОтчет.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныеПредставленияРегламентированныхОтчетов.Ссылка
		|ИЗ
		|	Справочник.ЭлектронныеПредставленияРегламентированныхОтчетов КАК ЭлектронныеПредставленияРегламентированныхОтчетов
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ЭлектронныеПредставленияРегламентированныхОтчетов.ДатаНачала, ДЕНЬ) = &ДатаНачала
		|	И НАЧАЛОПЕРИОДА(ЭлектронныеПредставленияРегламентированныхОтчетов.ДатаОкончания, ДЕНЬ) = &ДатаОкончания
		|	И ЭлектронныеПредставленияРегламентированныхОтчетов.ВидОтчета = &ВидОтчета
		|	И ЭлектронныеПредставленияРегламентированныхОтчетов.Версия = &НомерКорректировки
		|	И ЭлектронныеПредставленияРегламентированныхОтчетов.Организация = &Организация";
	
	Запрос.УстановитьПараметр("НомерКорректировки", НомерКорректировки);
	Запрос.УстановитьПараметр("ВидОтчета", 			Справочники.ВидыОтправляемыхДокументов.НДС);
	Запрос.УстановитьПараметр("ДатаНачала", 		НачалоДня(НачальнаяДата));
	Запрос.УстановитьПараметр("ДатаОкончания", 		НачалоДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ИсточникОтчета", 	"РегламентированныйОтчетНДС");
	Запрос.УстановитьПараметр("Организация", 		Требование.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПоследнийЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(ВыборкаДетальныеЗаписи.Ссылка);
		
		Если ПоследнийЦиклОбмена = Справочники.ЦиклыОбмена.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
			
		СообщенияЦикла 		= ПолучитьСообщенияЦиклаОбмена(ПоследнийЦиклОбмена,,,Истина);
		СтрРезультатыОбработкиДекларацияНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО));
					
		// Определяем наиболее свежее сообщение с результатом обработки
		ПоследнийРезультатОбработки = Неопределено;
		Для Каждого СтрРезультатОбработки Из СтрРезультатыОбработкиДекларацияНО Цикл
			Если ПоследнийРезультатОбработки = Неопределено ИЛИ СтрРезультатОбработки.Дата > ПоследнийРезультатОбработки.Дата Тогда
				ПоследнийРезультатОбработки = СтрРезультатОбработки;
			КонецЕсли;
		КонецЦикла;

		// Среди результата приема ищем "Сдано"
		Если ПоследнийРезультатОбработки <> Неопределено 
			И СтрРезультатыОбработкиДекларацияНО.Количество() > 0
			И НЕ ПоследнийРезультатОбработки.ПротоколСОшибкой Тогда
			
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция КонецПериодаТребованияПоДекларацииНДС(Требование) Экспорт
	
	// Если приложения не указаны, сами ищем в регистре
	ФайлТребования = XMLФайлТребованияОПредставленииПоясненийКДекларацииНДСИзРегистра(Требование);
	
	Если ФайлТребования = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	XDTOФайлаТребования = XDTOФайлаТребованияОПредставленииПоясненийКДекларацииНДС(ФайлТребования);
	
	Документ = XDTOФайлаТребования.Документ;
	
	Период 	 = Документ.Период;
	Год		 = Документ.ОтчетГод;
	
	НачальнаяИКонечнаяДата = НачальнаяИКонечнаяДатаПоНалоговомуПериодуИГоду(Период, Год);
	
	ДатаОкончания = КонецДня(НачальнаяИКонечнаяДата.ДатаОкончания);
	
	Возврат ДатаОкончания;
	
КонецФункции
	
Функция ИдФайлаДекларацииНДС(ДекларацияНДС) Экспорт
	
	ПоследнийЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(ДекларацияНДС);
	
	Если ПоследнийЦиклОбмена = Справочники.ЦиклыОбмена.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	СообщенияЦикла						= ПолучитьСообщенияЦиклаОбмена(ПоследнийЦиклОбмена,,,Истина);
	СтрРезультатыОбработкиДекларацияНО	= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО));
				
	// Определяем наиболее свежее сообщение с результатом обработки
	ПоследнийРезультатОбработки = Неопределено;
	Для Каждого СтрРезультатОбработки Из СтрРезультатыОбработкиДекларацияНО Цикл
		Если ПоследнийРезультатОбработки = Неопределено ИЛИ СтрРезультатОбработки.Дата > ПоследнийРезультатОбработки.Дата Тогда
			ПоследнийРезультатОбработки = СтрРезультатОбработки;
		КонецЕсли;
	КонецЦикла;

	// Среди результата приема ищем "Сдано"
	Если ПоследнийРезультатОбработки <> Неопределено 
		И СтрРезультатыОбработкиДекларацияНО.Количество() > 0
		И НЕ ПоследнийРезультатОбработки.ПротоколСОшибкой Тогда
		
		СтрДекларацииНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ДекларацияНП));
		
		Если СтрДекларацииНП.Количество() = 0 Тогда
			
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
				НСтр("ru = 'Не удалось определить имя файла декларации НДС.
				|Убедитесь, что декларация отправлена.'"));
				
			Возврат Неопределено;
		КонецЕсли;
		
		ТранспортноеСообщение 	= СтрДекларацииНП[0];
		
		ВложенияТранспортногоСообщения = ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение, , Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
		Если ВложенияТранспортногоСообщения.Количество() > 0 Тогда
			ИмяФайла = ВложенияТранспортногоСообщения[0].ИмяФайла;
			СвойстваФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
			Возврат СвойстваФайла.ИмяБезРасширения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СвойстваПериодичностиДекларацииВТребовании(Знач НалоговыйПериод, Знач Год)
	
	НазваниеПериода = "";
	Периодичность 	= Неопределено;
	Год				= Число(Год);
	КонецПериода	= Неопределено;
	
	НалоговыйПериод = Число(НалоговыйПериод);
	
	Если НалоговыйПериод <= 12 
		ИЛИ НалоговыйПериод > 70 Тогда
		// Это номера месяцов

		НомерМесяца = Число(НалоговыйПериод);
		// Номера месяцов при реорганизации (ликвидации)
		Если НомерМесяца > 70 Тогда
			НомерМесяца = НомерМесяца - 70;
		КонецЕсли;
		
		НачалоПериода 	= Дата(Год, НомерМесяца, 1);
		НазваниеПериода = Формат(НачалоПериода, "ДФ=MMMM");
		Периодичность 	= Перечисления.Периодичность.Месяц;
		КонецПериода 	= Формат(КонецМесяца(НачалоПериода), "ггггммдд");
		
	ИначеЕсли НалоговыйПериод = 21
		ИЛИ НалоговыйПериод = 51 Тогда
		
		НазваниеПериода = НСтр("ru = '1 квартал'");
		Периодичность 	= Перечисления.Периодичность.Квартал;
		
		НачалоПериода 	= Дата(Год, 1, 1);
		КонецПериода 	= Формат(КонецКвартала(НачалоПериода), "ггггммдд");
		
	ИначеЕсли НалоговыйПериод = 22
		ИЛИ НалоговыйПериод = 54 Тогда
		
		НазваниеПериода = НСтр("ru = '2 квартал'");
		Периодичность = Перечисления.Периодичность.Квартал;
		
		НачалоПериода 	= Дата(Год, 4, 1);
		КонецПериода 	= Формат(КонецКвартала(НачалоПериода), "ггггммдд");
		
	ИначеЕсли НалоговыйПериод = 23
		ИЛИ НалоговыйПериод = 55 Тогда 
		
		НазваниеПериода = НСтр("ru = '3 квартал'");
		Периодичность = Перечисления.Периодичность.Квартал;
		
		НачалоПериода 	= Дата(Год, 7, 1);
		КонецПериода 	= Формат(КонецКвартала(НачалоПериода), "ггггммдд");
		
	ИначеЕсли НалоговыйПериод = 24
		ИЛИ НалоговыйПериод = 56 Тогда
		
		НазваниеПериода = НСтр("ru = '4 квартал'");
		Периодичность = Перечисления.Периодичность.Квартал;
		
		НачалоПериода 	= Дата(Год, 10, 1);
		КонецПериода 	= Формат(КонецКвартала(НачалоПериода), "ггггммдд");
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("НазваниеПериода", 	НазваниеПериода);
	Результат.Вставить("Периодичность", 	Периодичность);
	Результат.Вставить("КонецПериода", 		КонецПериода);
	
	Возврат Результат;
	
КонецФункции

Функция НачальнаяИКонечнаяДатаПоНалоговомуПериодуИГоду(Знач НалоговыйПериод, Знач Год) Экспорт
	
	Год = Число(Год);
	
	ДатаНачала 		= Дата(Год, 1, 1);
	ДатаОкончания 	= Дата(Год, 1, 1);
	
	НалоговыйПериод = Число(НалоговыйПериод);
	
	Если НалоговыйПериод <= 12 
		ИЛИ НалоговыйПериод > 70 Тогда
		// Это номера месяцов
			
		НомерМесяца = Число(НалоговыйПериод);
		// Номера месяцов при реорганизации (ликвидации)
		Если НомерМесяца > 70 Тогда
			НомерМесяца = НомерМесяца - 70;
		КонецЕсли;
		
		ДатаНачала 		= Дата(Год, НомерМесяца, 1);
		ДатаОкончания 	= НачалоДня(КонецМесяца(ДатаНачала));
		
	ИначеЕсли НалоговыйПериод > 20 И НалоговыйПериод < 25 Тогда
		// Это 1,2,3,4 квартал
		
		НомерМесяца = (НалоговыйПериод - 20)*3;
		
		ДатаОкончания 	= НачалоДня(КонецМесяца(Дата(Год, НомерМесяца, 1)));
		ДатаНачала 		= НачалоКвартала(ДатаОкончания);
		
	ИначеЕсли НалоговыйПериод > 50 И НалоговыйПериод < 60 Тогда
		// Это 1,2,3,4 квартал при реорганизации (ликвидации)
		
		Если НалоговыйПериод = 51 Тогда
			НомерМесяца = 1;
		ИначеЕсли НалоговыйПериод = 54 Тогда 
			НомерМесяца = 4;
		ИначеЕсли НалоговыйПериод = 55 Тогда 
			НомерМесяца = 7;
		ИначеЕсли НалоговыйПериод = 56 Тогда 
			НомерМесяца = 10;
		КонецЕсли;
		
		ДатаНачала 		= Дата(Год, НомерМесяца, 1);
		ДатаОкончания 	= НачалоДня(КонецКвартала(ДатаНачала));
		
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ДатаНачала", 	ДатаНачала);
	Результат.Вставить("ДатаОкончания", ДатаОкончания);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьКоллекциюИзXDTO(Приемник, Источник, ПараметрыОтображения)
	
	АтрибутыПриемника = Новый Структура;
	
	Для Каждого Колонка Из Приемник.Колонки Цикл
		ПараметрыАтрибута = Новый Структура;
		ПараметрыАтрибута.Вставить("Тип", Колонка.ТипЗначения);
		АтрибутыПриемника.Вставить(Колонка.Имя, ПараметрыАтрибута);	
	КонецЦикла;
	
	КоллекцияXDTO = ПоместитьВКоллекциюПриНеобходимости(Источник);
	Для Каждого СтрокаКоллекции Из КоллекцияXDTO Цикл
		НоваяСтрока = Приемник.Добавить();
		ЗаполнитьЭлементКоллекцииИзXDTO(НоваяСтрока, СтрокаКоллекции, АтрибутыПриемника, ПараметрыОтображения);
	КонецЦикла;
	
КонецПроцедуры

Функция АтрибутПростогоТипа(ПараметрыАтрибута)
	
	Если ПараметрыАтрибута.Тип.Типы().Количество() = 1 И ПростойТип(ПараметрыАтрибута.Тип.Типы()[0]) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция АтрибутКоллекция(ПараметрыАтрибута)
	
	Возврат ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ПараметрыАтрибута.Тип, Тип("Массив"));
	
КонецФункции

Функция ПоместитьВКоллекциюПриНеобходимости(ОбъектXDTO)
	
	Коллекция = ОбъектXDTO;
	Если ТипЗнч(ОбъектXDTO) <> Тип("СписокXDTO") Тогда
		Коллекция = Новый Массив;
		Коллекция.Добавить(ОбъектXDTO);
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

Функция ПростойТип(Тип)
	
	ПростыеТипы = Новый Массив;
	ПростыеТипы.Добавить(Тип("Дата"));
	ПростыеТипы.Добавить(Тип("Строка"));
	ПростыеТипы.Добавить(Тип("Булево"));
	ПростыеТипы.Добавить(Тип("Число"));
	
	Возврат ПростыеТипы.Найти(Тип) <> Неопределено;
	
КонецФункции
	
Процедура ЗаполнитьЭлементКоллекцииИзXDTO(Приемник, Источник, АтрибутыПриемника, ПараметрыОтображения)
	
	Для Каждого АтрибутПриемника Из АтрибутыПриемника Цикл
		Если Источник.Свойства().Получить(АтрибутПриемника.Ключ) <> Неопределено Тогда
			ОпределяемыйТип = Неопределено;
			// Значение приемника и источника имеют простой тип.
			Если АтрибутПростогоТипа(АтрибутПриемника.Значение) И ПростойТип(ТипЗнч(Источник[АтрибутПриемника.Ключ])) Тогда				
				Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(АтрибутПриемника.Значение.Тип, Тип("Дата")) Тогда					
					Приемник[АтрибутПриемника.Ключ] = СтрокаКакДата(Источник[АтрибутПриемника.Ключ], ПараметрыОтображения.ФорматДаты);
				Иначе
					Приемник[АтрибутПриемника.Ключ] = Источник[АтрибутПриемника.Ключ];
				КонецЕсли;
				
			// Значение приемника уточнено определяемым типом
			ИначеЕсли ПараметрыОтображения.ОпределяемыеТипы.Свойство(АтрибутПриемника.Ключ, ОпределяемыйТип) Тогда
				КоллекцияXDTO = ПоместитьВКоллекциюПриНеобходимости(Источник[АтрибутПриемника.Ключ]);
				Для Каждого Элемент Из КоллекцияXDTO Цикл
					Если ПростойТип(ТипЗнч(ОпределяемыйТип)) Тогда
						ЗначениеОбъекта = ОпределяемыйТип;
						ЗаполнитьПолеПоСвойству(ЗначениеОбъекта, ПолучитьРекурсивноВложенныйЭлемент(Элемент), Неопределено, ПараметрыОтображения);
					Иначе
						ЗначениеОбъекта = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОпределяемыйТип);
						Для Каждого КлючЗначение Из ЗначениеОбъекта Цикл 
							ЗаполнитьПолеПоСвойству(ЗначениеОбъекта[КлючЗначение.Ключ], Элемент, КлючЗначение.Ключ, ПараметрыОтображения);
						КонецЦикла;
					КонецЕсли;
					Если АтрибутКоллекция(АтрибутПриемника.Значение) Тогда
						Приемник[АтрибутПриемника.Ключ].Добавить(ЗначениеОбъекта);	
					Иначе
						Приемник[АтрибутПриемника.Ключ] = ЗначениеОбъекта;
					КонецЕсли;
				КонецЦикла;
				
			// Значение источника при развороте по иерархии имеет простой тип.
			Иначе 
				КоллекцияXDTO = ПоместитьВКоллекциюПриНеобходимости(Источник[АтрибутПриемника.Ключ]);
				Для Каждого Элемент Из КоллекцияXDTO Цикл
					ВложенныйЭлемент = ПолучитьРекурсивноВложенныйЭлемент(Элемент);
					Если ВложенныйЭлемент <> Неопределено Тогда
						Если АтрибутПростогоТипа(АтрибутПриемника.Значение) Тогда
							Приемник[АтрибутПриемника.Ключ] = ВложенныйЭлемент;
						Иначе
							Приемник[АтрибутПриемника.Ключ].Добавить(ВложенныйЭлемент);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРекурсивноВложенныйЭлемент(Элемент)
	
	ВложенныйЭлемент = Неопределено;
	Если ПростойТип(ТипЗнч(Элемент)) Тогда
		ВложенныйЭлемент = Элемент;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ОбъектXDTO") Тогда
		Свойства = Элемент.Свойства();
		Если Свойства.Количество() = 0 Тогда
			ВложенныйЭлемент = Неопределено;
		ИначеЕсли Свойства.Количество() = 1 Тогда
			ВложенныйЭлемент = ПолучитьРекурсивноВложенныйЭлемент(Элемент[Свойства[0].Имя]);
		Иначе
			
			ВложенныйЭлемент = Новый Структура;
			Для каждого Свойство Из Свойства Цикл
				ЗначениеЭлемента = ПолучитьРекурсивноВложенныйЭлемент(Элемент[Свойство.Имя]);
				ВложенныйЭлемент.Вставить(Свойство.Имя, ЗначениеЭлемента);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВложенныйЭлемент;
	
КонецФункции

Функция СтрокаКакДата(Строка, Формат) 
	
	Если Формат = "dd.MM.yyyy" Тогда
		Возврат Дата(Прав(Строка, 4), Сред(Строка, 4, 2), Лев(Строка, 2));
	Иначе
		ВызватьИсключение(НСтр("ru = 'Формат преобразования строки в дату не поддерживается.'"));
	КонецЕсли;
		
КонецФункции

Функция ПараметрыОтображенияПоУмолчанию(ФорматДаты = "", ОпределяемыеТипы = Неопределено)
	
	ПараметрыОтображения = Новый Структура;
	ПараметрыОтображения.Вставить("ФорматДаты", ФорматДаты);
	ПараметрыОтображения.Вставить("ОпределяемыеТипы", ОпределяемыеТипы);
	
	Возврат ПараметрыОтображения;
	
КонецФункции

Функция ПараметрыОтображенияРаздел8()
	
	ОпределяемыеТипы = Новый Структура;
	ОпределяемыеТипы.Вставить("СпрКодОш", Документы.ПоясненияКДекларацииПоНДС.СтруктураСпрКодОш());
	ОпределяемыеТипы.Вставить("ДокПдтвУпл", Документы.ПоясненияКДекларацииПоНДС.СтруктураДокПдтвУпл());
	ОпределяемыеТипы.Вставить("ДатаУчТов", '00010101');
	ОпределяемыеТипы.Вставить("ПериодЗап", Документы.ПоясненияКДекларацииПоНДС.СтруктураПериодЗап());
	
	Возврат ПараметрыОтображенияПоУмолчанию("dd.MM.yyyy", ОпределяемыеТипы);
	
КонецФункции

Функция ПараметрыОтображенияРаздел9()
	
	ОпределяемыеТипы = Новый Структура;
	ОпределяемыеТипы.Вставить("СпрКодОш", Документы.ПоясненияКДекларацииПоНДС.СтруктураСпрКодОш());
	ОпределяемыеТипы.Вставить("ДокПдтвОпл", Документы.ПоясненияКДекларацииПоНДС.СтруктураДокПдтвОпл());
	ОпределяемыеТипы.Вставить("ДатаУчТов", '00010101');
	ОпределяемыеТипы.Вставить("ПериодЗап", Документы.ПоясненияКДекларацииПоНДС.СтруктураПериодЗап());
	
	Возврат ПараметрыОтображенияПоУмолчанию("dd.MM.yyyy", ОпределяемыеТипы);
	
КонецФункции

Функция ПараметрыОтображенияРаздел10()
	
	ОпределяемыеТипы = Новый Структура;
	ОпределяемыеТипы.Вставить("СпрКодОш", Документы.ПоясненияКДекларацииПоНДС.СтруктураСпрКодОш());
	ОпределяемыеТипы.Вставить("СвПосрДеят", Документы.ПоясненияКДекларацииПоНДС.СтруктураСвПосрДеят());
	ОпределяемыеТипы.Вставить("ПериодЗап", Документы.ПоясненияКДекларацииПоНДС.СтруктураПериодЗап());
	
	Возврат ПараметрыОтображенияПоУмолчанию("dd.MM.yyyy", ОпределяемыеТипы);
	
КонецФункции

Функция ПараметрыОтображенияРаздел11()
	
	ОпределяемыеТипы = Новый Структура;
	ОпределяемыеТипы.Вставить("СпрКодОш", Документы.ПоясненияКДекларацииПоНДС.СтруктураСпрКодОш());
	ОпределяемыеТипы.Вставить("ПериодЗап", Документы.ПоясненияКДекларацииПоНДС.СтруктураПериодЗап());
	
	Возврат ПараметрыОтображенияПоУмолчанию("dd.MM.yyyy", ОпределяемыеТипы);
	
КонецФункции

Функция ПараметрыОтображенияРаздел12()
	
	ОпределяемыеТипы = Новый Структура;
	ОпределяемыеТипы.Вставить("СпрКодОш", Документы.ПоясненияКДекларацииПоНДС.СтруктураСпрКодОш());
	ОпределяемыеТипы.Вставить("ПериодЗап", Документы.ПоясненияКДекларацииПоНДС.СтруктураПериодЗап());
	
	Возврат ПараметрыОтображенияПоУмолчанию("dd.MM.yyyy", ОпределяемыеТипы);
	
КонецФункции

Функция ПараметрыОтображенияНетКнигаПрод()
	
	ОпределяемыеТипы = Новый Структура;
	ОпределяемыеТипы.Вставить("СвКонтрагент", Документы.ПоясненияКДекларацииПоНДС.СтруктураСвКонтрагент());
	ОпределяемыеТипы.Вставить("СведСчФ", Документы.ПоясненияКДекларацииПоНДС.СтруктураСведСчФ());
	
	Возврат ПараметрыОтображенияПоУмолчанию("dd.MM.yyyy", ОпределяемыеТипы);
	
КонецФункции

Функция ПараметрыОтображенияСведКС()
	
	ОпределяемыеТипы = Новый Структура;
	Возврат ПараметрыОтображенияПоУмолчанию("dd.MM.yyyy", ОпределяемыеТипы);
	
КонецФункции

Процедура ЗаполнитьРаздел8(ДанныеТребования, ТребованиеXDTO)
	
	Если ТребованиеXDTO.Документ.ПрилТребНДС.Свойства().Получить("СведРазд8") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияПоСтрокам = ТребованиеXDTO.Документ.ПрилТребНДС.СведРазд8.КнПокСтр;
	ЗаполнитьКоллекциюИзXDTO(ДанныеТребования.Раздел8, СведенияПоСтрокам, ПараметрыОтображенияРаздел8());
		
КонецПроцедуры

Процедура ЗаполнитьРаздел8_1(ДанныеТребования, ТребованиеXDTO)
	
	Если ТребованиеXDTO.Документ.ПрилТребНДС.Свойства().Получить("СведРазд8_1") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияПоСтрокам = ТребованиеXDTO.Документ.ПрилТребНДС.СведРазд8_1.КнПокДЛСтр;
	ЗаполнитьКоллекциюИзXDTO(ДанныеТребования.Раздел8_1, СведенияПоСтрокам, ПараметрыОтображенияРаздел8());
	
КонецПроцедуры

Процедура ЗаполнитьРаздел9(ДанныеТребования, ТребованиеXDTO)
	
	Если ТребованиеXDTO.Документ.ПрилТребНДС.Свойства().Получить("СведРазд9") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияПоСтрокам = ТребованиеXDTO.Документ.ПрилТребНДС.СведРазд9.КнПродСтр;
	
	ЗаполнитьКоллекциюИзXDTO(ДанныеТребования.Раздел9, СведенияПоСтрокам, ПараметрыОтображенияРаздел9());
	
КонецПроцедуры

Процедура ЗаполнитьРаздел9_1(ДанныеТребования, ТребованиеXDTO)
	
	Если ТребованиеXDTO.Документ.ПрилТребНДС.Свойства().Получить("СведРазд9_1") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияПоСтрокам = ТребованиеXDTO.Документ.ПрилТребНДС.СведРазд9_1.КнПродДЛСтр;
	
	ЗаполнитьКоллекциюИзXDTO(ДанныеТребования.Раздел9_1, СведенияПоСтрокам, ПараметрыОтображенияРаздел9());
	
КонецПроцедуры

Процедура ЗаполнитьРаздел10(ДанныеТребования, ТребованиеXDTO)
	
	Если ТребованиеXDTO.Документ.ПрилТребНДС.Свойства().Получить("СведРазд10") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияПоСтрокам = ТребованиеXDTO.Документ.ПрилТребНДС.СведРазд10.ЖУчВыстСчФСтр;
	
	ЗаполнитьКоллекциюИзXDTO(ДанныеТребования.Раздел10, СведенияПоСтрокам, ПараметрыОтображенияРаздел10());
	
КонецПроцедуры

Процедура ЗаполнитьРаздел11(ДанныеТребования, ТребованиеXDTO)
	
	Если ТребованиеXDTO.Документ.ПрилТребНДС.Свойства().Получить("СведРазд11") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияПоСтрокам = ТребованиеXDTO.Документ.ПрилТребНДС.СведРазд11.ЖУчПолучСчФСтр;
	
	ЗаполнитьКоллекциюИзXDTO(ДанныеТребования.Раздел11, СведенияПоСтрокам, ПараметрыОтображенияРаздел11());
	
КонецПроцедуры

Процедура ЗаполнитьРаздел12(ДанныеТребования, ТребованиеXDTO)
	
	Если ТребованиеXDTO.Документ.ПрилТребНДС.Свойства().Получить("СведРазд12") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияПоСтрокам = ТребованиеXDTO.Документ.ПрилТребНДС.СведРазд12.ВыстСчФ_173_5;
	
	ЗаполнитьКоллекциюИзXDTO(ДанныеТребования.Раздел12, СведенияПоСтрокам, ПараметрыОтображенияРаздел12());
	
КонецПроцедуры

Процедура ЗаполнитьНетКнигаПрод(ДанныеТребования, ТребованиеXDTO)
	
	Если ТребованиеXDTO.Документ.ПрилТребНДС.Свойства().Получить("НетКнигаПрод") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияПоСтрокам = ТребованиеXDTO.Документ.ПрилТребНДС.НетКнигаПрод.НеподтвЗаписи;
	
	ЗаполнитьКоллекциюИзXDTO(ДанныеТребования.НетКнигаПрод, СведенияПоСтрокам, ПараметрыОтображенияНетКнигаПрод());
	
КонецПроцедуры

Процедура ЗаполнитьСведКС(ДанныеТребования, ТребованиеXDTO)
	
	Если ТребованиеXDTO.Документ.ПрилТребНДС.Свойства().Получить("СведКС") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияПоСтрокам = ТребованиеXDTO.Документ.ПрилТребНДС.СведКС.СведКСОдин;
	
	ЗаполнитьКоллекциюИзXDTO(ДанныеТребования.СведКС, СведенияПоСтрокам, ПараметрыОтображенияСведКС());
	
КонецПроцедуры

Процедура ЗаполнитьПолеПоСвойству(Приемник, Источник, Свойство, ПараметрыОтображения = Неопределено);
	
	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
		ЗначениеСвойства = Источник;
	ИначеЕсли Источник.Свойства().Получить(Свойство) <> Неопределено Тогда
		Если ТипЗнч(Источник[Свойство]) = Тип("СписокXDTO") Тогда
			ЗначениеСвойства = Источник[Свойство];
		Иначе
			ЗначениеСвойства = ПолучитьРекурсивноВложенныйЭлемент(Источник[Свойство]);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтображения) И ПараметрыОтображения.Свойство("ФорматДаты")
		И ТипЗнч(Приемник) = Тип("Дата") Тогда
		Приемник = СтрокаКакДата(ЗначениеСвойства, ПараметрыОтображения.ФорматДаты);
	ИначеЕсли ТипЗнч(Приемник) = Тип("Число") Тогда
		Приемник = Число(ЗначениеСвойства);
	ИначеЕсли ТипЗнч(Приемник) = Тип("Массив") И ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из ЗначениеСвойства Цикл
			Приемник.Добавить(Элемент);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Приемник) = Тип("Массив") Тогда
		Приемник.Добавить(ЗначениеСвойства);
	Иначе
		Приемник = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ВыгрузкаОтветаНаТребованиеПоясненийКДекларацииНДС

Функция ПолучитьФайлВыгрузкиОтветаНаТребованиеПоясненийКДекларацииНДС(ДанныеДляВыгрузки, УникальныйИдентификатор) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеДляВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ИдентификаторФайла = ИдентификаторФайла(ДанныеДляВыгрузки.Организация, ДанныеДляВыгрузки.КодНалоговогоОргана);
	
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		
	ЗаписьXML.ЗаписатьАтрибут("ИдФайл", ИдентификаторФайла);
	ЗаписьXML.ЗаписатьАтрибут("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ЗаписьXML.ЗаписатьАтрибут("ВерсФорм", "5.02");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
	ЗаписьXML.ЗаписатьАтрибут("КНД", "1160200");
	ЗаписьXML.ЗаписатьАтрибут("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy"));
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("СведТреб");
	
	ВыгрузитьКнигу(
		ЗаписьXML, 
		ДанныеДляВыгрузки.КнигаПокупок.СведенияСоответствуют, 
		ДанныеДляВыгрузки.КнигаПокупок.СведенияРасходятся, 
		"КнигаПокуп", 
		"КнигаПокупок");
		
	ВыгрузитьКнигу(
		ЗаписьXML, 
		ДанныеДляВыгрузки.КнигаПокупокДЛ.СведенияСоответствуют, 
		ДанныеДляВыгрузки.КнигаПокупокДЛ.СведенияРасходятся, 
		"КнигаПокупДЛ", 
		"КнигаПокупокДЛ");
		
	ВыгрузитьКнигу(
		ЗаписьXML, 
		ДанныеДляВыгрузки.КнигаПродаж.СведенияСоответствуют, 
		ДанныеДляВыгрузки.КнигаПродаж.СведенияРасходятся, 
		"КнигаПрод", 
		"КнигаПродаж");
		
	ВыгрузитьКнигу(
		ЗаписьXML, 
		ДанныеДляВыгрузки.КнигаПродажДЛ.СведенияСоответствуют, 
		ДанныеДляВыгрузки.КнигаПродажДЛ.СведенияРасходятся, 
		"КнигаПродДЛ", 
		"КнигаПродажДЛ");
		
	ВыгрузитьЖурналУчета(
		ЗаписьXML, 
		ДанныеДляВыгрузки.ЖурналУчетаВыставленныхСФ.СведенияСоответствуют, 
		ДанныеДляВыгрузки.ЖурналУчетаВыставленныхСФ.СведенияРасходятся, 
		"ЖУчВыстСчФ", 
		"ЖурналУчетаВыставленныхСФ");
		
	ВыгрузитьЖурналУчета(
		ЗаписьXML, 
		ДанныеДляВыгрузки.ЖурналУчетаПолученныхСФ.СведенияСоответствуют, 
		ДанныеДляВыгрузки.ЖурналУчетаПолученныхСФ.СведенияРасходятся, 
		"ЖУчПолучСчФ", 
		"ЖурналУчетаПолученныхСФ");
		
	ВыгрузитьВыставленныеСФ_173_5(
		ЗаписьXML, 
		ДанныеДляВыгрузки.ВыставленныеСФ_173_5.СведенияСоответствуют, 
		ДанныеДляВыгрузки.ВыставленныеСФ_173_5.СведенияРасходятся);
		
	ВыгрузитьСведКС(
		ЗаписьXML, 
		ДанныеДляВыгрузки.СведКС);
		
	ВыгрузитьНетКнигаПрод(
		ЗаписьXML, 
		ДанныеДляВыгрузки.НетКнигаПрод.НеподтвЗаписи, 
		ДанныеДляВыгрузки.НетКнигаПрод.СведенияРасходятся);
		
	ВыгрузитьПояснИнОсн(
		ЗаписьXML, 
		ДанныеДляВыгрузки.ПояснИнОсн);
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();
	
	АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), УникальныйИдентификатор);
	
	ИдФайл 		= ИдентификаторФайла + ".xml";
	ИдФайлЭП 	= ИмяФайлаЭПФайлаОписиИсходящихДокументов(ИдФайл);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИдФайл", 	 ИдФайл);
	ДополнительныеПараметры.Вставить("ИдФайлЭП", ИдФайлЭП);
	ДополнительныеПараметры.Вставить("АдресВременногоХранилища", АдресФайла);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ПолучитьФайлыПринадлежащиеОписи(ОписьСсылка, УникальныйИдентификаторФормы, СписокИменФайлов = Неопределено) Экспорт
	
	ВложенияСДанными = ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(ОписьСсылка, СписокИменФайлов);
	
	СоответствиеРезультат = Новый Соответствие;
	Для Каждого СтрВложение Из ВложенияСДанными Цикл
		
		СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(СтрВложение.Данные.Получить(), УникальныйИдентификаторФормы);
		СоответствиеРезультат.Вставить(СтрВложение.ИмяФайла, СсылкаНаДвоичныеДанныеФайла);
		
	КонецЦикла;
	
	Возврат СоответствиеРезультат;
	
КонецФункции

Функция ПрименяетсяФорматОтветаНаТребованиеПояснений_5_02() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаписатьАтрибутыСчетФактур(ЗаписьXML, СтрокаТаблицы, Колонки = Неопределено)
	
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "НомСчФПрод", XMLСтрока(СтрокаТаблицы.НомСчФПрод), Колонки);		
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "ДатаСчФПрод", Формат(СтрокаТаблицы.ДатаСчФПрод, "ДФ=dd.MM.yyyy"), Колонки);
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "НомИспрСчФ", ?(ЗначениеЗаполнено(СтрокаТаблицы.НомИспрСчФ), XMLСтрока(СтрокаТаблицы.НомИспрСчФ), ""), Колонки);		
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "ДатаИспрСчФ", Формат(СтрокаТаблицы.ДатаИспрСчФ, "ДФ=dd.MM.yyyy"), Колонки);
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "НомКСчФПрод", ?(ЗначениеЗаполнено(СтрокаТаблицы.НомКСчФПрод), XMLСтрока(СтрокаТаблицы.НомКСчФПрод), ""), Колонки);
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "ДатаКСчФПрод", Формат(СтрокаТаблицы.ДатаКСчФПрод, "ДФ=dd.MM.yyyy"), Колонки);
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "НомИспрКСчФ", ?(ЗначениеЗаполнено(СтрокаТаблицы.НомИспрКСчФ), XMLСтрока(СтрокаТаблицы.НомИспрКСчФ), ""), Колонки);
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "ДатаИспрКСчФ", Формат(СтрокаТаблицы.ДатаИспрКСчФ, "ДФ=dd.MM.yyyy"), Колонки);	

КонецПроцедуры

Процедура ЗаписатьАтрибутПриНеобходимости(ЗаписьXML, Имя, Значение, Колонки = Неопределено)
	
	Если (Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти(Имя) <> Неопределено)
		И ЗначениеЗаполнено(Значение) Тогда
		ЗаписьXML.ЗаписатьАтрибут(Имя, Значение);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаписатьСтрокуКниги(ЗаписьXML, СтрокаТаблицы, ТипКниги, Колонки = Неопределено)
	
	Если ТипКниги = "КнигаПокупок" Тогда
		ИмяУзла = "КнПокСтр";
	ИначеЕсли ТипКниги = "КнигаПокупокДЛ" Тогда
		ИмяУзла = "КнПокДЛСтр";
	ИначеЕсли ТипКниги = "КнигаПродаж" Тогда
		ИмяУзла = "КнПродСтр";
	Иначе
		ИмяУзла = "КнПродДЛСтр";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяУзла);
	ЗаписатьАтрибутыСчетФактур(ЗаписьXML, СтрокаТаблицы, Колонки);
	Если ТипКниги = "КнигаПокупок" ИЛИ ТипКниги = "КнигаПокупокДЛ" Тогда
		ЗаписатьАтрибутПриНеобходимости(ЗаписьXML, "НомТД", СтрокаТаблицы.НомТД, Колонки);
		ЗаписатьАтрибутПриНеобходимости(
			ЗаписьXML, "СтоимПокупВ", Формат(СтрокаТаблицы.СтоимПокупВ, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="), Колонки);
	Иначе
		
		// Таблица 4.59
		// Сведения по строке из книги продаж (дополнительных листов книги продаж) (КнПродСтрТип)
		// СтоимПродСФВ - НУ - Элемент обязателен при наличии элемента <ОКВ> и значение элемента <ОКВ> не равно 643
		Если ЗначениеЗаполнено(Колонки) И Колонки.Найти("ОКВ") <> Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.СтоимПродСФВ) Тогда
				ЗаписатьАтрибутПриНеобходимости(
					ЗаписьXML, "СтоимПродСФВ", Формат(СтрокаТаблицы.СтоимПродСФВ, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СтрокаТаблицы.СтоимПродСФВ) Тогда
				ЗаписатьАтрибутПриНеобходимости(
					ЗаписьXML, "СтоимПродСФВ", Формат(СтрокаТаблицы.СтоимПродСФВ, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="), Колонки);
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
	ЗаписатьАтрибутПриНеобходимости(ЗаписьXML, "ОКВ", СтрокаТаблицы.ОКВ, Колонки);	
	
	Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("КодВидОпер") <> Неопределено Тогда
		Для Каждого Элемент Из СтрокаТаблицы.КодВидОпер Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("КодВидОпер");
			ЗаписьXML.ЗаписатьТекст(Элемент);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("ДокПдтвОпл") <> Неопределено Тогда
		Для Каждого Элемент Из СтрокаТаблицы.ДокПдтвОпл Цикл
			ЗаписатьДокПдтвОпл(ЗаписьXML, Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипКниги = "КнигаПокупок" ИЛИ ТипКниги = "КнигаПокупокДЛ" Тогда
		Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("ДатаУчТов") <> Неопределено Тогда
			Для Каждого Элемент Из СтрокаТаблицы.ДатаУчТов Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаУчТов");
				ЗаписьXML.ЗаписатьТекст(Формат(Элемент, "ДФ=dd.MM.yyyy"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("СвПрод") <> Неопределено Тогда			
			Для Каждого Элемент Из СтрокаТаблицы.СвПрод Цикл
				ЗаписатьДанныеКонтрагента(ЗаписьXML, Элемент, "СвПрод");
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("СвПокуп") <> Неопределено Тогда
			Для Каждого Элемент Из СтрокаТаблицы.СвПокуп Цикл
				ЗаписатьДанныеКонтрагента(ЗаписьXML, Элемент, "СвПокуп");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("СвПос") <> Неопределено Тогда
		ЗаписатьДанныеКонтрагента(ЗаписьXML, СтрокаТаблицы.СвПос, "СвПос");
	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьСтрокуЖурнала(ЗаписьXML, СтрокаТаблицы, ТипЖурнала, Колонки = Неопределено)
	
	Если ТипЖурнала = "ЖурналУчетаВыставленныхСФ" Тогда
		ИмяУзла = "ЖУчВСтр";
	Иначе
		ИмяУзла = "ЖУчПСтр";
	КонецЕсли;
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяУзла);
	ЗаписатьАтрибутыСчетФактур(ЗаписьXML, СтрокаТаблицы, Колонки);
	
	Если ТипЖурнала = "ЖурналУчетаПолученныхСФ" Тогда
		ЗаписатьАтрибутПриНеобходимости(
			ЗаписьXML, "КодВидСд", СтрокаТаблицы.КодВидСд, Колонки);
		ЗаписатьАтрибутПриНеобходимости(
			ЗаписьXML, "ОКВ", СтрокаТаблицы.ОКВ, Колонки);
		ЗаписатьАтрибутПриНеобходимости(
			ЗаписьXML, "СтоимТовСчФВс", Формат(СтрокаТаблицы.СтоимТовСчФВс, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="), Колонки);		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("КодВидОпер") <> Неопределено Тогда
		Для Каждого Элемент Из СтрокаТаблицы.КодВидОпер Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("КодВидОпер");
			ЗаписьXML.ЗаписатьТекст(Элемент);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
	КонецЕсли;

	Если ТипЖурнала = "ЖурналУчетаВыставленныхСФ" Тогда
		Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("СвПокуп") <> Неопределено Тогда
			ЗаписатьДанныеКонтрагента(ЗаписьXML, СтрокаТаблицы.СвПокуп, "СвПокуп");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("СвПосрДеят") <> Неопределено Тогда
			Для Каждого Элемент Из СтрокаТаблицы.СвПосрДеят Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("СвПосрДеят");
				ЗаписьXML.ЗаписатьАтрибут("НомСчФОтПрод", Элемент.НомСчФОтПрод);
				ЗаписьXML.ЗаписатьАтрибут("ДатаСчФОтПрод", Формат(Элемент.ДатаСчФОтПрод, "ДФ=dd.MM.yyyy"));			
				ЗаписатьАтрибутПриНеобходимости(ЗаписьXML,"ОКВ", Элемент.ОКВ);
				ЗаписатьАтрибутПриНеобходимости(ЗаписьXML,"СтоимТовСчФВс", Формат(Элемент.СтоимТовСчФВс, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
				ЗаписатьДанныеКонтрагента(ЗаписьXML, Элемент.СвПрод, "СвПрод");
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("СвПрод") <> Неопределено Тогда
			ЗаписатьДанныеКонтрагента(ЗаписьXML, СтрокаТаблицы.СвПрод, "СвПрод");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("СвКомис") <> Неопределено Тогда
			ЗаписатьДанныеКонтрагента(ЗаписьXML, СтрокаТаблицы.СвКомис, "СвКомис");
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры
	
Процедура ЗаписатьДокПдтвОпл(ЗаписьXML, ДокПдтвОпл)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДокПдтвОпл");
	ЗаписьXML.ЗаписатьАтрибут("НомДокПдтвОпл", ДокПдтвОпл.НомДокПдтвОпл);
	ЗаписьXML.ЗаписатьАтрибут("ДатаДокПдтвОпл", Формат(ДокПдтвОпл.ДатаДокПдтвОпл, "ДФ=dd.MM.yyyy"));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьДанныеКонтрагента(ЗаписьXML, ДанныеКонтрагента, ИмяУзла)
	
	Если ТипЗнч(ДанныеКонтрагента) = Тип("Структура") Тогда
		ИНН = СокрЛП(ДанныеКонтрагента.ИНН);
		КПП = СокрЛП(ДанныеКонтрагента.КПП);
	Иначе
		ИНН = СокрЛП(ДанныеКонтрагента);
		КПП = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИНН) ИЛИ ЗначениеЗаполнено(КПП) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяУзла);
		Если СтрДлина(ИНН) = 10 Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("СведЮЛ");
			
			Если ЗначениеЗаполнено(ИНН) Тогда
				ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ", ИНН);
			КонецЕсли;
			Если ЗначениеЗаполнено(КПП) Тогда
				ЗаписьXML.ЗаписатьАтрибут("КПП", КПП);
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("СведИП");
			ЗаписьXML.ЗаписатьАтрибут("ИННФЛ", ИНН);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыгрузитьКнигу(ЗаписьXML, СведенияСоответствуют, СведенияРасходятся, ИмяУзла, ТипКниги)
	
	Если Не ЗначениеЗаполнено(СведенияСоответствуют)
		И Не ЗначениеЗаполнено(СведенияРасходятся.Расхождение) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяУзла);
	
	Если ЗначениеЗаполнено(СведенияСоответствуют) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведСоотв");
		
		Для Каждого СтрокаТаблицы Из СведенияСоответствуют Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("СоотвСтр");
			ЗаписьXML.ЗаписатьАтрибут("НомерПор", XMLСтрока(СтрокаТаблицы.НомерПор));
			ЗаписатьСтрокуКниги(ЗаписьXML, СтрокаТаблицы, ТипКниги);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;

	Если ЗначениеЗаполнено(СведенияРасходятся.Расхождение) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведРасх");
		
		СведенияРасходятся.Пояснение.Индексы.Добавить("НомерПор");
		Для Каждого СтрокаТаблицы Из СведенияРасходятся.Расхождение Цикл
			НайденнаяСтрока = СведенияРасходятся.Пояснение.Найти(СтрокаТаблицы.НомерПор, "НомерПор");
			
			Колонки = ПолучитьКолонкиВКоторыхЗначенияОтличаются(СтрокаТаблицы, НайденнаяСтрока);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("РасхСтр");
			ЗаписьXML.ЗаписатьАтрибут("НомерПор", XMLСтрока(СтрокаТаблицы.НомерПор));
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Расхожд");
			ЗаписьXML.ЗаписатьАтрибут("ТипИнф", "1");
			ЗаписатьСтрокуКниги(ЗаписьXML, СтрокаТаблицы, ТипКниги);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			
			Если НайденнаяСтрока <> Неопределено Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Пояснен");
				ЗаписьXML.ЗаписатьАтрибут("ТипИнф", "2");
				ЗаписатьСтрокуКниги(ЗаписьXML, НайденнаяСтрока, ТипКниги, Колонки);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ПолучитьКолонкиВКоторыхЗначенияОтличаются(Строка1, Строка2)
	
	КолонкиСРазличиями = Новый Массив;
	
	ВсеКолонки = Строка1.Владелец().Колонки;
	Для Каждого Колонка Из ВсеКолонки Цикл
		Если НЕ ОбщегоНазначения.ДанныеСовпадают(Строка1[Колонка.Имя], Строка2[Колонка.Имя]) <> 0 Тогда
			КолонкиСРазличиями.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КолонкиСРазличиями;
	
КонецФункции

Процедура ВыгрузитьЖурналУчета(ЗаписьXML, СведенияСоответствуют, СведенияРасходятся, ИмяУзла, ТипЖурнала)
	
	Если Не ЗначениеЗаполнено(СведенияСоответствуют)
		И Не ЗначениеЗаполнено(СведенияРасходятся.Расхождение) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяУзла);
	
	Если ЗначениеЗаполнено(СведенияСоответствуют) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведСоотв");
		
		Для Каждого СтрокаТаблицы Из СведенияСоответствуют Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("СоотвСтр");
			ЗаписьXML.ЗаписатьАтрибут("НомерПор", XMLСтрока(СтрокаТаблицы.НомерПор));		
			ЗаписатьСтрокуЖурнала(ЗаписьXML, СтрокаТаблицы, ТипЖурнала);		
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияРасходятся.Расхождение) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведРасх");
		
		СведенияРасходятся.Пояснение.Индексы.Добавить("НомерПор");
		Для Каждого СтрокаТаблицы Из СведенияРасходятся.Расхождение Цикл
			НайденнаяСтрока = СведенияРасходятся.Пояснение.Найти(СтрокаТаблицы.НомерПор, "НомерПор");
			
			Колонки = ПолучитьКолонкиВКоторыхЗначенияОтличаются(СтрокаТаблицы, НайденнаяСтрока);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("РасхСтр");
			ЗаписьXML.ЗаписатьАтрибут("НомерПор", XMLСтрока(СтрокаТаблицы.НомерПор));
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Расхожд");
			ЗаписьXML.ЗаписатьАтрибут("ТипИнф", "1");
			ЗаписатьСтрокуЖурнала(ЗаписьXML, СтрокаТаблицы, ТипЖурнала);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			Если НайденнаяСтрока <> Неопределено Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Пояснен");
				ЗаписьXML.ЗаписатьАтрибут("ТипИнф", "2");
				ЗаписатьСтрокуЖурнала(ЗаписьXML, НайденнаяСтрока, ТипЖурнала, Колонки);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьСтрокуВыставленныеСФ_173_5(ЗаписьXML, СтрокаТаблицы, Колонки = Неопределено)
	
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "НомСчФ", СтрокаТаблицы.НомСчФ, Колонки);
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "ДатаСчФ", Формат(СтрокаТаблицы.ДатаСчФ, "ДФ=dd.MM.yyyy"), Колонки);
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "ОКВ", СтрокаТаблицы.ОКВ, Колонки);
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "СтоимТовБНалВс", Формат(СтрокаТаблицы.СтоимТовБНалВс, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="), Колонки);
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "СтоимТовСНалВс", Формат(СтрокаТаблицы.СтоимТовСНалВс, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="), Колонки);
		
	Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("СвПокуп") <> Неопределено Тогда	
		ЗаписатьДанныеКонтрагента(ЗаписьXML, СтрокаТаблицы.СвПокуп, "СвПокуп");
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьВыставленныеСФ_173_5(ЗаписьXML, СведенияСоответствуют, СведенияРасходятся)
	
	Если Не ЗначениеЗаполнено(СведенияСоответствуют)
		И Не ЗначениеЗаполнено(СведенияРасходятся.Расхождение) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ВыстСчФ_173.5");
	
	Если ЗначениеЗаполнено(СведенияСоответствуют) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведСоотв");
		
		Для Каждого СтрокаТаблицы Из СведенияСоответствуют Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("СведСоотвСчФ");
			ЗаписатьСтрокуВыставленныеСФ_173_5(ЗаписьXML, СтрокаТаблицы);		
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияРасходятся.Расхождение) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведРасх");
		
		СведенияРасходятся.Пояснение.Индексы.Добавить("НомерПор");
		Для Каждого СтрокаТаблицы Из СведенияРасходятся.Расхождение Цикл
			НайденнаяСтрока = СведенияРасходятся.Пояснение.Найти(СтрокаТаблицы.НомерПор, "НомерПор");
			
			Колонки = ПолучитьКолонкиВКоторыхЗначенияОтличаются(СтрокаТаблицы, НайденнаяСтрока);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("СведРасхСчФ");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Расхожд");
			ЗаписьXML.ЗаписатьАтрибут("ТипИнф", "1");
			ЗаписьXML.ЗаписатьНачалоЭлемента("ВСчФ_173.5");
			ЗаписатьСтрокуВыставленныеСФ_173_5(ЗаписьXML, СтрокаТаблицы);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			Если НайденнаяСтрока <> Неопределено Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Пояснен");
				ЗаписьXML.ЗаписатьАтрибут("ТипИнф", "2");
				ЗаписьXML.ЗаписатьНачалоЭлемента("ВСчФ_173.5");
				ЗаписатьСтрокуВыставленныеСФ_173_5(ЗаписьXML, НайденнаяСтрока, Колонки);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьСведКС(ЗаписьXML, СведКС)
	
	Если НЕ ЗначениеЗаполнено(СведКС)
		ИЛИ СведКС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СведКС Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведКС");
		
		ЗаписатьАтрибутПриНеобходимости(
			ЗаписьXML, "НомКС", СтрокаТаблицы.НомКС);
			
		ЗаписатьАтрибутПриНеобходимости(
			ЗаписьXML, "ПоясненКС", СтрокаТаблицы.ПоясненКС);
			
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьНетКнигаПрод(ЗаписьXML, НеподтвЗаписи, СведенияРасходятся)
	
	Если Не ЗначениеЗаполнено(НеподтвЗаписи)
		И Не ЗначениеЗаполнено(СведенияРасходятся.Расхождение) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("НетКнигаПрод");
	
	Если ЗначениеЗаполнено(НеподтвЗаписи) Тогда
		
		Для Каждого СтрокаТаблицы Из НеподтвЗаписи Цикл
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("НеподтвЗаписи");
			
			ЗаписатьАтрибутПриНеобходимости(
				ЗаписьXML, "НомСчФПрод", СтрокаТаблицы.НомСчФПрод);
				
			ЗаписатьАтрибутПриНеобходимости(
				ЗаписьXML, "ДатаСчФПрод", Формат(СтрокаТаблицы.ДатаСчФПрод, "ДФ=dd.MM.yyyy"));
				
			ЗаписатьДанныеКонтрагента(ЗаписьXML, СтрокаТаблицы.СвКонтрагент, "СвКонтрагент");
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияРасходятся.Расхождение) Тогда
		
		Для Каждого СтрокаТаблицы Из СведенияРасходятся.Расхождение Цикл
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("СведРасх");
			
			НайденнаяСтрока = СведенияРасходятся.Пояснение.Найти(СтрокаТаблицы.НомерСтроки, "НомерСтроки");
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Расхожд");
			ЗаписьXML.ЗаписатьАтрибут("ТипИнф", "1");
			ЗаписатьСтрокуНетКнигаПрод(ЗаписьXML, СтрокаТаблицы);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			Если НайденнаяСтрока <> Неопределено Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Пояснен");
				ЗаписьXML.ЗаписатьАтрибут("ТипИнф", "2");
				ЗаписатьСтрокуНетКнигаПрод(ЗаписьXML, НайденнаяСтрока);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;

			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьСтрокуНетКнигаПрод(ЗаписьXML, СтрокаТаблицы, Колонки = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("НеКнПрСтр");
	
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "НомСчФПрод", СтрокаТаблицы.НомСчФПрод, Колонки);
		
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаСчФПрод) Тогда	
		ЗаписатьАтрибутПриНеобходимости(
			ЗаписьXML, "ДатаСчФПрод", Формат(СтрокаТаблицы.ДатаСчФПрод, "ДФ=dd.MM.yyyy"), Колонки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтоимПродСФВ) Тогда
		ЗаписатьАтрибутПриНеобходимости(
			ЗаписьXML, "СтоимПродСФВ", Формат(СтрокаТаблицы.СтоимПродСФВ, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="), Колонки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтоимПродСФ) Тогда
		ЗаписатьАтрибутПриНеобходимости(
			ЗаписьXML, "СтоимПродСФ", Формат(СтрокаТаблицы.СтоимПродСФ, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="), Колонки);
	КонецЕсли;
			
	ЗаписатьАтрибутПриНеобходимости(
		ЗаписьXML, "Раздел", СтрокаТаблицы.Раздел, Колонки);
		
	Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("СвПокуп") <> Неопределено Тогда	
		ЗаписатьДанныеКонтрагента(ЗаписьXML, СтрокаТаблицы.СвПокуп, "СвПокуп");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("СвПосред") <> Неопределено Тогда	
		ЗаписатьДанныеКонтрагента(ЗаписьXML, СтрокаТаблицы.СвПосред, "СвПосред");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Колонки) ИЛИ Колонки.Найти("КодВидОпер") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицы.КодВидОпер) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("КодВидОпер");
			ЗаписьXML.ЗаписатьТекст(СтрокаТаблицы.КодВидОпер);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьПояснИнОсн(ЗаписьXML, ПояснИнОсн)
	
	Если НЕ ЗначениеЗаполнено(ПояснИнОсн) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПояснИнОсн");
	ЗаписьXML.ЗаписатьТекст(ПояснИнОсн);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ИдентификаторФайла(Организация, КодНалоговогоОргана)
	
	ЭлРегистрацияВИФНС = РегистрацияВИФНСПоОрганизацииИКодуНО(Организация, КодНалоговогоОргана);
	
	ПараметрыОписи = СформироватьПараметрыОписиИсходящихДокументов(Организация, ЭлРегистрацияВИФНС, КодНалоговогоОргана);
	
	// формируем идентификатор отправителя
	Если ПараметрыОписи.ПрПодп = 2 Тогда
		СвПред = ПараметрыОписи.Доверенность.СвУпПред.СвПред;
		Если СвПред.Свойство("СвОрг") Тогда
			ИННОтправителя = СокрЛП(СвПред.СвОрг.ИННЮЛ);
			КППОтправителя = СокрЛП(СвПред.СвОрг.КПП);
		Иначе
			Если НЕ ПараметрыОписи.Доверенность.СвУпПред.СвПред.СведФизЛ.ЯвляетсяСотрудникомОрганизации Тогда
				ИННОтправителя = СокрЛП(СвПред.СведФизЛ.ИННФЛ);
				КППОтправителя = "";
			Иначе
				ИННОтправителя = ?(ПараметрыОписи.ЭтоПБОЮЛ, СокрЛП(ПараметрыОписи.ИННФЛ), СокрЛП(ПараметрыОписи.ИННЮЛ));
				КППОтправителя = ?(ПараметрыОписи.ЭтоПБОЮЛ, "", СокрЛП(ПараметрыОписи.КППЮЛ));
			КонецЕсли;
		КонецЕсли;
	Иначе
		ИННОтправителя = ?(ПараметрыОписи.ЭтоПБОЮЛ, СокрЛП(ПараметрыОписи.ИННФЛ), СокрЛП(ПараметрыОписи.ИННЮЛ));
		КППОтправителя = ?(ПараметрыОписи.ЭтоПБОЮЛ, "", СокрЛП(ПараметрыОписи.КППЮЛ));
	КонецЕсли;
	
	R_T = "ON_OTTRNDS";
	
	Если Организация.КрупнейшийНалогоплательщик 
		И ЗначениеЗаполнено(Организация.КодНалоговогоОрганаПолучателя) Тогда
		КодНалоговогоОрганаПосредника = СокрЛП(Организация.КодНалоговогоОрганаПолучателя);
	Иначе
		КодНалоговогоОрганаПосредника = КодНалоговогоОргана;
	КонецЕсли;
	
	A_K = КодНалоговогоОрганаПосредника + "_" + КодНалоговогоОргана;
	
	Если СтрДлина(ИННОтправителя) = 10 Тогда
		O = ИННОтправителя + КППОтправителя;
	ИначеЕсли СтрДлина(ИННОтправителя) = 12 Тогда
		O = ИННОтправителя;
	Иначе
		O = "000000000000";
	КонецЕсли;
	
	GGGGMMDD = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd");
	
	N = ВРЕГ(Строка(Новый УникальныйИдентификатор));
	
	Возврат R_T + "_" + A_K + "_" + O + "_" + GGGGMMDD + "_" + N;
	
КонецФункции

Функция СформироватьПараметрыОписиИсходящихДокументов(Организация, ЭлРегистрацияВИФНС, КодНалоговогоОргана) Экспорт
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация);
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	СведенияОбОрганизации.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	// ищем РегистрацияВИФНС по организации и коду налогового органа
	СведенияОбОрганизации.Вставить("КодНО", КодНалоговогоОргана);
	Если ЗначениеЗаполнено(ЭлРегистрацияВИФНС) И ЗначениеЗаполнено(ЭлРегистрацияВИФНС.Доверенность) Тогда
		ДоверенностьПредставителя = ЭлРегистрацияВИФНС.Доверенность;
		// признак подписания представителем
		СведенияОбОрганизации.Вставить("ПрПодп", 2);
		СведенияОбОрганизации.Вставить("Доверенность", ПолучитьСведенияДоверенности(ЭлРегистрацияВИФНС, Организация));
	Иначе
		// признак подписания налогоплательщиком
		СведенияОбОрганизации.Вставить("ПрПодп", 1);
	КонецЕсли;
	
	Если ЭтоПБОЮЛ Тогда
		ФИОИП = ФИОИндивидуальногоПредпринимателя(Организация, СведенияОбОрганизации);
		Если ФИОИП = Неопределено Тогда
			СведенияОбОрганизации.Вставить("ИПФамилия", "");
			СведенияОбОрганизации.Вставить("ИПИмя", "");
			СведенияОбОрганизации.Вставить("ИПОтчество", "");
		Иначе
			СведенияОбОрганизации.Вставить("ИПФамилия", ФИОИП.Фамилия);
			СведенияОбОрганизации.Вставить("ИПИмя", ФИОИП.Имя);
			СведенияОбОрганизации.Вставить("ИПОтчество", ФИОИП.Отчество);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ЭлРегистрацияВИФНС) Тогда
			СведенияОбОрганизации.Вставить("КППЮЛ", СокрЛП(ЭлРегистрацияВИФНС.КПП));
		Иначе
			СведенияОбОрганизации.Вставить("КППЮЛ", СокрЛП(СведенияОбОрганизации.КППЮЛ));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СведенияОбОрганизации;
	
КонецФункции

#КонецОбласти

#Область ПодписьФайлаXMLDSig

Функция КанонизированныйУзелПодписьВBase64СПодставленнымХеш(
		КанонизированныйУзелПодписьВBase64,
		ХешСтрокаВBase64Ключа,
		ХешСтрокаВBase64,
		СконвертироватьИзШестнадцатеричногоПредставленияХеша,
		ДобавляемыеАтрибуты = Неопределено) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ИспользоватьВременноеХранилище = ЭтоАдресВременногоХранилища(КанонизированныйУзелПодписьВBase64);
	Если ИспользоватьВременноеХранилище Тогда
		ДвоичныеДанныеКанонизированныйУзелПодпись = ПолучитьИзВременногоХранилища(КанонизированныйУзелПодписьВBase64);
	Иначе
		ДвоичныеДанныеКанонизированныйУзелПодпись = Base64Значение(КанонизированныйУзелПодписьВBase64);
	КонецЕсли;
	ДвоичныеДанныеКанонизированныйУзелПодпись.Записать(ИмяВременногоФайла);
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, "UTF-8");
	СтрокаКанонизированныйУзелПодпись = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Если СконвертироватьИзШестнадцатеричногоПредставленияХеша Тогда
		Если ХешСтрокаВBase64Ключа <> Неопределено Тогда
			ХешСтрокаВBase64Ключа = СтрокаВШестнадцатеричномПредставленииВBase64(ХешСтрокаВBase64Ключа);
		КонецЕсли;
		
		ХешСтрокаВBase64 = СтрокаВШестнадцатеричномПредставленииВBase64(ХешСтрокаВBase64);
	КонецЕсли;
	
	Если ХешСтрокаВBase64Ключа <> Неопределено Тогда
		СтрокаКанонизированныйУзелПодпись = СтрЗаменить(СтрокаКанонизированныйУзелПодпись, "%KeyInfoDigestValue%", ХешСтрокаВBase64Ключа);
	КонецЕсли;
	СтрокаКанонизированныйУзелПодпись = СтрЗаменить(СтрокаКанонизированныйУзелПодпись, "%DigestValue%", ХешСтрокаВBase64);
	Если ДобавляемыеАтрибуты <> Неопределено Тогда
		СтрокаКанонизированныйУзелПодпись = СтрЗаменить(СтрокаКанонизированныйУзелПодпись, "<SignedInfo>", "<SignedInfo " + ДобавляемыеАтрибуты + ">");
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ЗаписьТекста.Записать(СтрокаКанонизированныйУзелПодпись);
	ЗаписьТекста.Закрыть();
	ДвоичныеДанныеСтрокиНаПодпись = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Если ИспользоватьВременноеХранилище Тогда
		СтрокаНаПодписьBase64 = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСтрокиНаПодпись, Новый УникальныйИдентификатор);
	Иначе
		СтрокаНаПодписьBase64 = Base64Строка(ДвоичныеДанныеСтрокиНаПодпись);
	КонецЕсли;
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат СтрокаНаПодписьBase64;
	
КонецФункции

Функция ПодписьИзПодписанныхДанныхBase64(ПодписанныеДанныеВBase64)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	ИспользоватьВременноеХранилище = ЭтоАдресВременногоХранилища(ПодписанныеДанныеВBase64);
	Если ИспользоватьВременноеХранилище Тогда
		ДвоичныеДанныеПодписанныхДанных = ПолучитьИзВременногоХранилища(ПодписанныеДанныеВBase64);
	Иначе
		ДвоичныеДанныеПодписанныхДанных = Base64Значение(ПодписанныеДанныеВBase64);
	КонецЕсли;
	ДвоичныеДанныеПодписанныхДанных.Записать(ИмяВременногоФайла);
	
	ИсходныйМассивБайтов = ПрочитатьФайлВМассив(ИмяВременногоФайла);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	МассивБайтов = Новый Массив;
	Для Инд = 1 По 64 Цикл
		ЗначениеБайта = ИсходныйМассивБайтов[ИсходныйМассивБайтов.ВГраница() + 1 - Инд];
		МассивБайтов.Добавить(ЗначениеБайта);
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗаписатьФайлИзМассива(ИмяВременногоФайла, МассивБайтов);
	ДвоичныеДанныеПодпись = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Если ИспользоватьВременноеХранилище Тогда
		ПодписьВBase64 = ПоместитьВоВременноеХранилище(ДвоичныеДанныеПодпись, Новый УникальныйИдентификатор);
	Иначе
		ПодписьВBase64 = Base64Строка(ДвоичныеДанныеПодпись);
	КонецЕсли;
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат ПодписьВBase64;
	
КонецФункции

Функция АдресДанныхДляПодписиФайлаXML(
		СодержимоеФайлаXMLВBase64,
		АдресСодержимогоПодготовленногоФайлаXML = Неопределено,
		СертификатПолучателяВBase64 = Неопределено,
		Кодировка = Неопределено,
		НастройкиПодписи = Неопределено) Экспорт
	
	Трансформация1_1 = ?(НастройкиПодписи <> Неопределено, НастройкиПодписи.Трансформация1_1, Ложь);
	ВключатьХэшСертификата = ?(НастройкиПодписи <> Неопределено, НастройкиПодписи.ВключатьХэшСертификата, Ложь);
	НеВключатьЗаголовокXML = ?(НастройкиПодписи <> Неопределено, НастройкиПодписи.НеВключатьЗаголовокXML, Ложь);
	ЗаменаУзлаОбъекта = ?(НастройкиПодписи <> Неопределено, НастройкиПодписи.ЗаменаУзлаОбъекта, Неопределено);
	НормализацияОтключена = ?(НастройкиПодписи <> Неопределено И НастройкиПодписи.Свойство("НормализацияОтключена"),
		НастройкиПодписи.НормализацияОтключена, Ложь);
	ДанныеВнутриПодписи = ?(НастройкиПодписи <> Неопределено И НастройкиПодписи.Свойство("ДанныеВнутриПодписи"),
		НастройкиПодписи.ДанныеВнутриПодписи, Ложь);
	ИдентификаторПодписываемыхДанных = ?(НастройкиПодписи <> Неопределено И НастройкиПодписи.Свойство("ИдентификаторПодписываемыхДанных"),
		НастройкиПодписи.ИдентификаторПодписываемыхДанных, Неопределено);
	ДобавляемыеАтрибуты = ?(НастройкиПодписи <> Неопределено И НастройкиПодписи.Свойство("ДобавляемыеАтрибуты"),
		НастройкиПодписи.ДобавляемыеАтрибуты, Неопределено);
	НеВключатьИнформациюОСертификате = ?(НастройкиПодписи <> Неопределено И НастройкиПодписи.Свойство("НеВключатьИнформациюОСертификате"),
		НастройкиПодписи.НеВключатьИнформациюОСертификате, Ложь);
	НеВключатьИнформациюОбОбъекте = ?(НастройкиПодписи <> Неопределено И НастройкиПодписи.Свойство("НеВключатьИнформациюОбОбъекте"),
		НастройкиПодписи.НеВключатьИнформациюОбОбъекте, Ложь);
	ДополнительныеТрансформации = ?(НастройкиПодписи <> Неопределено И НастройкиПодписи.Свойство("ДополнительныеТрансформации"),
		НастройкиПодписи.ДополнительныеТрансформации, Неопределено);
	ДополнительныеОбратныеТрансформации = ?(НастройкиПодписи <> Неопределено И НастройкиПодписи.Свойство("ДополнительныеОбратныеТрансформации"),
		НастройкиПодписи.ДополнительныеОбратныеТрансформации, Неопределено);
	ПереданХешВместоОбъекта = ?(НастройкиПодписи <> Неопределено И НастройкиПодписи.Свойство("ПереданХешВместоОбъекта"),
		НастройкиПодписи.ПереданХешВместоОбъекта, Ложь);
	
	ИспользоватьВременноеХранилище = ЭтоАдресВременногоХранилища(СодержимоеФайлаXMLВBase64);
	ПодписываемыйФайлXML = ПолучитьИмяВременногоФайла();
	Если ИспользоватьВременноеХранилище Тогда
		ДвоичныеДанныеФайлаXML = ПолучитьИзВременногоХранилища(СодержимоеФайлаXMLВBase64);
	Иначе
		ДвоичныеДанныеФайлаXML = ДвоичныеДанныеИзСтроки64НаСервере(СодержимоеФайлаXMLВBase64);
	КонецЕсли;
	ДвоичныеДанныеФайлаXML.Записать(ПодписываемыйФайлXML);
	
	ПрефиксыПространствИмен = Неопределено;
	ПрефиксОбхода = Неопределено;
	Если Кодировка <> Неопределено ИЛИ Трансформация1_1 ИЛИ ВключатьХэшСертификата Тогда
		ИсходнаяКодировка = ?(Кодировка <> Неопределено, "windows-1251", "utf-8");
		ЧтениеФайлаXML = Новый ЧтениеТекста(ПодписываемыйФайлXML, ИсходнаяКодировка);
		СодержимоеФайлаXML = ЧтениеФайлаXML.Прочитать();
		СодержимоеФайлаXMLБезЗамен = СодержимоеФайлаXML;
		СодержимоеФайлаXMLБезДополнительныхТрансформаций = СодержимоеФайлаXML;
		ЧтениеФайлаXML.Закрыть();
		
		Если Кодировка <> Неопределено ИЛИ Трансформация1_1 Тогда
			Если Трансформация1_1 Тогда
				// преобразования обхода ошибки канонизации платформы
				ПрефиксыПространствИмен = Новый Массив;
				ТекстXML = СодержимоеФайлаXML;
				Пока ЗначениеЗаполнено(ТекстXML) Цикл
					ПозицияПослеПостфикса = 0;
					ПрефиксПространстваИмен = ТекстПослеПрефикса(ТекстXML, " xmlns:", "=", ПозицияПослеПостфикса);
					Если ЗначениеЗаполнено(ПрефиксПространстваИмен) И ПрефиксыПространствИмен.Найти(ПрефиксПространстваИмен) = Неопределено Тогда
						ПрефиксыПространствИмен.Добавить(ПрефиксПространстваИмен);
					КонецЕсли;
					ТекстXML = Сред(ТекстXML, ПозицияПослеПостфикса);
				КонецЦикла;
				
				ПрефиксОбхода = "EQERLRLQKE";
				СодержимоеФайлаXML = СтрЗаменить(СодержимоеФайлаXML, " xmlns=""", " xmlns=""" + ПрефиксОбхода);
				Для каждого ПрефиксПространстваИмен Из ПрефиксыПространствИмен Цикл
					СодержимоеФайлаXML = СтрЗаменить(СодержимоеФайлаXML, " xmlns:" + ПрефиксПространстваИмен + "=""",
						" xmlns:" + ПрефиксПространстваИмен + "=""" + ПрефиксОбхода);
				КонецЦикла;
				
				СодержимоеФайлаXMLБезДополнительныхТрансформаций = СодержимоеФайлаXML;
				Если ДополнительныеТрансформации <> Неопределено Тогда
					ИндексТрансформации = 0;
					Пока ИндексТрансформации < ДополнительныеТрансформации.Количество() Цикл
						СодержимоеФайлаXML = СтрЗаменить(СодержимоеФайлаXML, ДополнительныеТрансформации[ИндексТрансформации],
							ДополнительныеТрансформации[ИндексТрансформации + 1]);
						ИндексТрансформации = ИндексТрансформации + 2;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Кодировка = ?(Кодировка <> Неопределено, Кодировка, ИсходнаяКодировка);
			ПерекодированныйФайлXML = ПолучитьИмяВременногоФайла();
			ЗаписьФайлаXML = Новый ЗаписьТекста(ПерекодированныйФайлXML, Кодировка);
			ЗаписьФайлаXML.Записать(СодержимоеФайлаXML);
			ЗаписьФайлаXML.Закрыть();
			
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ПодписываемыйФайлXML);
			ПодписываемыйФайлXML = ПерекодированныйФайлXML;
		КонецЕсли;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПодписываемыйФайлXML);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	КанонизированныйПодписываемыйФайлXML = ФайлКанонизированныйУзелDOM(ДокументDOM,,,
		Трансформация1_1,
		Трансформация1_1 И НЕ НормализацияОтключена,
		ДополнительныеОбратныеТрансформации,
		ПрефиксОбхода,
		ПрефиксыПространствИмен);
	Если ВключатьХэшСертификата ИЛИ ДанныеВнутриПодписи Тогда
		ЧтениеФайлаXML = Новый ЧтениеТекста(КанонизированныйПодписываемыйФайлXML, "windows-1251");
		СодержимоеКанонизированногоФайлаXML = ЧтениеФайлаXML.Прочитать();
		ЧтениеФайлаXML.Закрыть();
		КанонизированныйФайлXMLВBase64 = Неопределено;
		
	Иначе
		Если ИспользоватьВременноеХранилище Тогда
			ДвоичныеДанныеКанонизированногоФайлаXML = Новый ДвоичныеДанные(КанонизированныйПодписываемыйФайлXML);
			КанонизированныйФайлXMLВBase64 = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКанонизированногоФайлаXML, Новый УникальныйИдентификатор);
		Иначе
			КанонизированныйФайлXMLВBase64 = ПрочитатьBase64ИзФайла(КанонизированныйПодписываемыйФайлXML);
		КонецЕсли;
	КонецЕсли;
	
	// Добавляем в документ DOM узел для описания ЭЦП
	КорневойУзел = ДокументDOM.ДочерниеУзлы[0]; //report
	
	УзелПодпись = КорневойУзел.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Signature"));
	
	УзелПодписьИнфо = УзелПодпись.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("SignedInfo"));
	
	УзелМетодКанонизации = УзелПодписьИнфо.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("CanonicalizationMethod"));
	УзелМетодПодписи = УзелПодписьИнфо.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("SignatureMethod"));
	Если ВключатьХэшСертификата Тогда
		УзелСсылкаКлюч = УзелПодписьИнфо.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Reference"));
	КонецЕсли;
	УзелСсылка = УзелПодписьИнфо.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Reference"));
	
	Если НЕ Трансформация1_1 ИЛИ НЕ НормализацияОтключена Тогда
		Если ВключатьХэшСертификата Тогда
			УзелПреобразованияКлюч = УзелСсылкаКлюч.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Transforms"));
		КонецЕсли;
		УзелПреобразования = УзелСсылка.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Transforms"));
		
		Если ВключатьХэшСертификата Тогда
			Если Трансформация1_1 Тогда
				УзелПреобразование2Ключ = УзелПреобразованияКлюч.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Transform"));
			Иначе
				УзелПреобразование1Ключ = УзелПреобразованияКлюч.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Transform"));
				УзелПреобразование2Ключ = УзелПреобразованияКлюч.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Transform"));
			КонецЕсли;
		КонецЕсли;
		Если Трансформация1_1 Тогда
			УзелПреобразование2 = УзелПреобразования.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Transform"));
		Иначе
			УзелПреобразование1 = УзелПреобразования.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Transform"));
			УзелПреобразование2 = УзелПреобразования.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Transform"));
		КонецЕсли;
	КонецЕсли;
	
	Если ВключатьХэшСертификата Тогда
		УзелМетодХэшированияКлюч = УзелСсылкаКлюч.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("DigestMethod"));
		УзелРезультатХэшированияКлюч = УзелСсылкаКлюч.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("DigestValue"));
	КонецЕсли;
	УзелМетодХэширования = УзелСсылка.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("DigestMethod"));
	УзелРезультатХэширования = УзелСсылка.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("DigestValue"));
	
	УзелРезультатПодписания = УзелПодпись.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("SignatureValue"));
	Если НЕ НеВключатьИнформациюОСертификате Тогда
		УзелИнформацияОКлючах = УзелПодпись.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("KeyInfo"));
	КонецЕсли;
	Если (ВключатьХэшСертификата ИЛИ ДанныеВнутриПодписи) И НЕ НеВключатьИнформациюОбОбъекте Тогда
		УзелИнформацияОбОбъекте = УзелПодпись.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Object"));
	КонецЕсли;
	
	Если НЕ НеВключатьИнформациюОСертификате Тогда
		УзелДанныеX509 = УзелИнформацияОКлючах.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("X509Data"));
		УзелСертификатX509 = УзелДанныеX509.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("X509Certificate"));
	КонецЕсли;
	
	Если ВключатьХэшСертификата ИЛИ ДанныеВнутриПодписи Тогда
		Если ВключатьХэшСертификата Тогда
			УзелСсылкаКлюч.УстановитьАтрибут("URI", "#KeyInfo");
		КонецЕсли;
		УзелСсылка.УстановитьАтрибут("URI", "#" + ?(ИдентификаторПодписываемыхДанных = Неопределено, "Object", ИдентификаторПодписываемыхДанных));
	Иначе
		УзелСсылка.УстановитьАтрибут("URI", "");
	КонецЕсли;
	УзелПодпись.УстановитьАтрибут("xmlns", "http://www.w3.org/2000/09/xmldsig#");
	УзелМетодПодписи.УстановитьАтрибут("Algorithm", "http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411");
	Если Трансформация1_1 Тогда
		УзелМетодКанонизации.УстановитьАтрибут("Algorithm", ?(НЕ НормализацияОтключена, "urn:xml-dsig:transformation:v1.1",
			"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments"));
	Иначе
		УзелМетодКанонизации.УстановитьАтрибут("Algorithm", "http://www.w3.org/TR/2001/REC-xml-c14n-20010315");
	КонецЕсли;
	Если НЕ Трансформация1_1 ИЛИ НЕ НормализацияОтключена Тогда
		Если ВключатьХэшСертификата Тогда
			Если Трансформация1_1 Тогда
				УзелПреобразование2Ключ.УстановитьАтрибут("Algorithm", "urn:xml-dsig:transformation:v1.1");
			Иначе
				УзелПреобразование1Ключ.УстановитьАтрибут("Algorithm", "http://www.w3.org/2000/09/xmldsig#enveloped-signature");
				УзелПреобразование2Ключ.УстановитьАтрибут("Algorithm", "http://www.w3.org/TR/2001/REC-xml-c14n-20010315");
			КонецЕсли;
		КонецЕсли;
		Если Трансформация1_1 Тогда
			УзелПреобразование2.УстановитьАтрибут("Algorithm", "urn:xml-dsig:transformation:v1.1");
		Иначе
			УзелПреобразование1.УстановитьАтрибут("Algorithm", "http://www.w3.org/2000/09/xmldsig#enveloped-signature");
			УзелПреобразование2.УстановитьАтрибут("Algorithm", "http://www.w3.org/TR/2001/REC-xml-c14n-20010315");
		КонецЕсли;
	КонецЕсли;
	Если ВключатьХэшСертификата Тогда
		УзелМетодХэшированияКлюч.УстановитьАтрибут("Algorithm", "http://www.w3.org/2001/04/xmldsig-more#gostr3411");
	КонецЕсли;
	УзелМетодХэширования.УстановитьАтрибут("Algorithm", "http://www.w3.org/2001/04/xmldsig-more#gostr3411");
	Если ВключатьХэшСертификата ИЛИ ДанныеВнутриПодписи Тогда
		Если ВключатьХэшСертификата И НЕ НеВключатьИнформациюОСертификате Тогда
			УзелИнформацияОКлючах.УстановитьАтрибут("Id", "KeyInfo");
		КонецЕсли;
		Если НЕ НеВключатьИнформациюОбОбъекте Тогда
			УзелИнформацияОбОбъекте.УстановитьАтрибут("Id", ?(ИдентификаторПодписываемыхДанных = Неопределено, "Object", ИдентификаторПодписываемыхДанных));
		КонецЕсли;
	КонецЕсли;
	
	Если ВключатьХэшСертификата Тогда
		УзелРезультатХэшированияКлюч.ТекстовоеСодержимое = "%KeyInfoDigestValue%";
	КонецЕсли;
	Если ПереданХешВместоОбъекта Тогда
		УзелРезультатХэширования.ТекстовоеСодержимое = ТекстПослеПрефикса(СодержимоеФайлаXMLБезЗамен, "<Object xmlns=""http://www.w3.org/2000/09/xmldsig#"" Id=""Object"">", "</Object>");
	Иначе
		УзелРезультатХэширования.ТекстовоеСодержимое = "%DigestValue%";
	КонецЕсли;
	УзелРезультатПодписания.ТекстовоеСодержимое = "%SignatureValue%";
	Если НЕ НеВключатьИнформациюОСертификате Тогда
		ЗначениеСертификатПолучателяВBase64 = СтрЗаменить(СертификатПолучателяВBase64, Символы.ВК, "");
		УзелСертификатX509.ТекстовоеСодержимое = СтрЗаменить(ЗначениеСертификатПолучателяВBase64, Символы.ПС, "");
	КонецЕсли;
	Если (ВключатьХэшСертификата ИЛИ ДанныеВнутриПодписи) И НЕ НеВключатьИнформациюОбОбъекте Тогда
		УзелИнформацияОбОбъекте.ТекстовоеСодержимое = "%SigningXML%";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Ложь;
	Если НЕ НеВключатьЗаголовокXML Тогда
		ЗаписьXML.УстановитьСтроку("utf-8");
	Иначе
		ЗаписьXML.УстановитьСтроку("windows-1251");
	КонецЕсли;
	ЗаписьDOM = Новый ЗаписьDOM;
	Если ВключатьХэшСертификата ИЛИ ДанныеВнутриПодписи Тогда
		ЗаписьDOM.Записать(УзелПодпись, ЗаписьXML);
	Иначе
		ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	КонецЕсли;
	
	ТекстовоеСодержимоеФайлаXML = ЗаписьXML.Закрыть();
	Если ВключатьХэшСертификата ИЛИ ДанныеВнутриПодписи Тогда
		Если ЗаменаУзлаОбъекта <> Неопределено ИЛИ ПереданХешВместоОбъекта Тогда
			ТекстовоеСодержимоеФайлаXML = СтрЗаменить(ТекстовоеСодержимоеФайлаXML, "<Object Id=""" + ?(ИдентификаторПодписываемыхДанных = Неопределено,
				"Object", ИдентификаторПодписываемыхДанных) + """>%SigningXML%</Object>",
				?(ЗаменаУзлаОбъекта <> Неопределено, ЗаменаУзлаОбъекта, "<Object xmlns=""http://www.w3.org/2000/09/xmldsig#"" Id="""
				+ ?(ИдентификаторПодписываемыхДанных = Неопределено, "Object", ИдентификаторПодписываемыхДанных) + """/>"));
		Иначе
			ТекстовоеСодержимоеФайлаXML = СтрЗаменить(ТекстовоеСодержимоеФайлаXML, "%SigningXML%", СодержимоеФайлаXMLБезДополнительныхТрансформаций);
			ТекстовоеСодержимоеФайлаXML = СтрЗаменить(ТекстовоеСодержимоеФайлаXML, Символы.ВК, "");
		КонецЕсли;
	КонецЕсли;
	Если Трансформация1_1 И ПрефиксыПространствИмен <> Неопределено Тогда
		// обратные преобразования обхода ошибки канонизации
		Для ИндексЭлемента = 0 По ПрефиксыПространствИмен.Количество() - 1 Цикл
			ПрефиксПространстваИмен = ПрефиксыПространствИмен[ПрефиксыПространствИмен.Количество() - 1 - ИндексЭлемента];
			ТекстовоеСодержимоеФайлаXML = СтрЗаменить(ТекстовоеСодержимоеФайлаXML,
				" xmlns:" + ПрефиксПространстваИмен + "=""" + ПрефиксОбхода, " xmlns:" + ПрефиксПространстваИмен + "=""");
			ТекстовоеСодержимоеФайлаXML = СтрЗаменить(ТекстовоеСодержимоеФайлаXML,
				" :" + ПрефиксПространстваИмен + "=""" + ПрефиксОбхода, " xmlns:" + ПрефиксПространстваИмен + "="""); // обход ошибки платформы
		КонецЦикла;
		
		ТекстовоеСодержимоеФайлаXML = СтрЗаменить(ТекстовоеСодержимоеФайлаXML, " xmlns=""" + ПрефиксОбхода, " xmlns=""");
		ТекстовоеСодержимоеФайлаXML = СтрЗаменить(ТекстовоеСодержимоеФайлаXML, " =""" + ПрефиксОбхода, " xmlns="""); // обход ошибки платформы
		ТекстовоеСодержимоеФайлаXML = СтрЗаменить(ТекстовоеСодержимоеФайлаXML, " ="""">", ">"); // обход ошибки платформы
	КонецЕсли;
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ПодписываемыйФайлXML);
	
	АдресСодержимогоПодготовленногоФайлаXML = ПоместитьВоВременноеХранилище(ТекстовоеСодержимоеФайлаXML, Новый УникальныйИдентификатор);
	
	Если ДобавляемыеАтрибуты = Неопределено Тогда
		УзелПодписьИнфо.УстановитьАтрибут("xmlns", "http://www.w3.org/2000/09/xmldsig#");
	КонецЕсли;
	ФайлКанонизированныйУзелПодпись = ФайлКанонизированныйУзелDOM(УзелПодписьИнфо, , , Трансформация1_1, Трансформация1_1 И НЕ НормализацияОтключена,,
		ПрефиксОбхода, ПрефиксыПространствИмен);
	Если ИспользоватьВременноеХранилище Тогда
		ДвоичныеДанныеКанонизированногоУзлаПодписать = Новый ДвоичныеДанные(ФайлКанонизированныйУзелПодпись);
		КанонизированныйУзелПодписьВBase64 = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКанонизированногоУзлаПодписать, Новый УникальныйИдентификатор);
	Иначе
		КанонизированныйУзелПодписьВBase64 = ПрочитатьBase64ИзФайла(ФайлКанонизированныйУзелПодпись);
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Структура("КанонизированныйФайлXMLВBase64, КанонизированныйУзелПодписьВBase64", КанонизированныйФайлXMLВBase64, КанонизированныйУзелПодписьВBase64);
	Если ВключатьХэшСертификата ИЛИ ДанныеВнутриПодписи Тогда
		Если ВключатьХэшСертификата И НЕ НеВключатьИнформациюОСертификате Тогда
			ФайлКанонизированныйУзелИнформацияОКлючах = ФайлКанонизированныйУзелDOM(УзелИнформацияОКлючах, , , Трансформация1_1, Трансформация1_1 И НЕ НормализацияОтключена,,
				ПрефиксОбхода, ПрефиксыПространствИмен);
			Если Трансформация1_1 Тогда
				ЧтениеФайлаУзелИнформацияОКлючах = Новый ЧтениеТекста(ФайлКанонизированныйУзелИнформацияОКлючах, "windows-1251");
				СодержимоеФайлаУзелИнформацияОКлючах = ЧтениеФайлаУзелИнформацияОКлючах.Прочитать();
				ЧтениеФайлаУзелИнформацияОКлючах.Закрыть();
				СодержимоеФайлаУзелИнформацияОКлючах = СтрЗаменить(СодержимоеФайлаУзелИнформацияОКлючах,
					"<n1:KeyInfo Id=""KeyInfo"">", "<n1:KeyInfo xmlns:n1=""http://www.w3.org/2000/09/xmldsig#"" Id=""KeyInfo"">");
				ЗаписьФайлаУзелИнформацияОКлючах = Новый ЗаписьТекста(ФайлКанонизированныйУзелИнформацияОКлючах, "windows-1251");
				ЗаписьФайлаУзелИнформацияОКлючах.Записать(СодержимоеФайлаУзелИнформацияОКлючах);
				ЗаписьФайлаУзелИнформацияОКлючах.Закрыть();
			КонецЕсли;
			Если ИспользоватьВременноеХранилище Тогда
				ДвоичныеДанныеКанонизированногоУзлаИнформацииОКлючах = Новый ДвоичныеДанные(ФайлКанонизированныйУзелИнформацияОКлючах);
				КанонизированныйУзелИнформацияОКлючахВBase64 = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКанонизированногоУзлаИнформацииОКлючах, Новый УникальныйИдентификатор);
			Иначе
				КанонизированныйУзелИнформацияОКлючахВBase64 = ПрочитатьBase64ИзФайла(ФайлКанонизированныйУзелИнформацияОКлючах);
			КонецЕсли;
			ДанныеДляПодписи.Вставить("КанонизированныйУзелИнформацияОКлючахXMLВBase64", КанонизированныйУзелИнформацияОКлючахВBase64);
		КонецЕсли;
		
		Если НЕ ДанныеВнутриПодписи И НЕ ПереданХешВместоОбъекта Тогда
			ФайлКанонизированныйУзелИнформацияОбОбъекте = ФайлКанонизированныйУзелDOM(
				УзелИнформацияОбОбъекте,,,
				Трансформация1_1,
				Трансформация1_1 И НЕ НормализацияОтключена,
				ДополнительныеОбратныеТрансформации,
				ПрефиксОбхода,
				ПрефиксыПространствИмен);
			ЧтениеФайлаУзелИнформацияОбОбъекте = Новый ЧтениеТекста(ФайлКанонизированныйУзелИнформацияОбОбъекте, "windows-1251");
			СодержимоеФайлаУзелИнформацияОбОбъекте = ЧтениеФайлаУзелИнформацияОбОбъекте.Прочитать();
			ЧтениеФайлаУзелИнформацияОбОбъекте.Закрыть();
			Если Трансформация1_1 Тогда
				ЗначениеИдентификатораПодписываемыхДанных = ?(ИдентификаторПодписываемыхДанных = Неопределено, "Object", ИдентификаторПодписываемыхДанных);
				СодержимоеФайлаУзелИнформацияОбОбъекте = СтрЗаменить(СодержимоеФайлаУзелИнформацияОбОбъекте,
					"<n1:Object Id=""" + ЗначениеИдентификатораПодписываемыхДанных + """>",
					"<n1:Object xmlns:n1=""http://www.w3.org/2000/09/xmldsig#"" Id=""" + ЗначениеИдентификатораПодписываемыхДанных + """>");
			КонецЕсли;
			СодержимоеФайлаУзелИнформацияОбОбъекте = СтрЗаменить(СодержимоеФайлаУзелИнформацияОбОбъекте, "%SigningXML%", СодержимоеКанонизированногоФайлаXML);
		Иначе
			ФайлКанонизированныйУзелИнформацияОбОбъекте = ПолучитьИмяВременногоФайла();
			СодержимоеФайлаУзелИнформацияОбОбъекте = СодержимоеКанонизированногоФайлаXML;
		КонецЕсли;
		ЗаписьФайлаУзелИнформацияОбОбъекте = Новый ЗаписьТекста(ФайлКанонизированныйУзелИнформацияОбОбъекте, "windows-1251");
		ЗаписьФайлаУзелИнформацияОбОбъекте.Записать(СодержимоеФайлаУзелИнформацияОбОбъекте);
		ЗаписьФайлаУзелИнформацияОбОбъекте.Закрыть();
		Если ИспользоватьВременноеХранилище Тогда
			ДвоичныеДанныеКанонизированногоУзлаИнформацииОбОбъекте = Новый ДвоичныеДанные(ФайлКанонизированныйУзелИнформацияОбОбъекте);
			КанонизированныйУзелИнформацияОбОбъектеВBase64 = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКанонизированногоУзлаИнформацииОбОбъекте, Новый УникальныйИдентификатор);
		Иначе
			КанонизированныйУзелИнформацияОбОбъектеВBase64 = ПрочитатьBase64ИзФайла(ФайлКанонизированныйУзелИнформацияОбОбъекте);
		КонецЕсли;
		ДанныеДляПодписи.Вставить("КанонизированныйУзелИнформацияОбОбъектеXMLВBase64", КанонизированныйУзелИнформацияОбОбъектеВBase64);
	КонецЕсли;
	
	Если ИспользоватьВременноеХранилище Тогда
		// элементы структуры уже помещены во временное хранилище
		Возврат ДанныеДляПодписи;
	Иначе
		Возврат ПоместитьВоВременноеХранилище(ДанныеДляПодписи, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

Функция ФайлКанонизированныйУзелDOM(УзелDOM,
	ИмяФайлаУзелDOM = Неопределено,
	РезультатXPath = Неопределено,
	КоррекцияКанонизации = Ложь,
	Нормализация1_1 = Ложь,
	ДополнительныеОбратныеТрансформации = Неопределено,
	ПрефиксОбхода = Неопределено,
	ПрефиксыПространствИмен = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ИмяФайлаУзелDOM) Тогда
		ИмяФайлаУзелDOM = ПолучитьИмяВременногоФайла();
	КонецЕсли;
	
	ЗаписьXML = Новый КаноническаяЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ТипКаноническогоXML.КаноническийXML);
	
	КаноническийDOM = Новый КаноническийDOM;
	КаноническийDOM.Канонизировать(УзелDOM, ЗаписьXML, РезультатXPath);
	
	СтрокаXML = ЗаписьXML.Закрыть();
	
	// обход ошибки платформы
	Пока Истина Цикл
		ПозицияНачала = СтрНайти(СтрокаXML, "&#xD;" + Символы.ПС);
		Если ПозицияНачала = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияКонца = ПозицияНачала + 6;
		Пока ПозицияКонца <= СтрДлина(СтрокаXML) Цикл
			СимволСтроки = Сред(СтрокаXML, ПозицияКонца, 1);
			Если СокрЛП(СимволСтроки) <> "" Тогда
				Прервать;
			КонецЕсли;
			ПозицияКонца = ПозицияКонца + 1;
		КонецЦикла;
		
		Если СимволСтроки <> "<" Тогда // если "&#xD;" внутри значения, а не между тегами
			ПозицияКонца = ПозицияНачала + 5;
		КонецЕсли;
		
		СтрокаXML = Лев(СтрокаXML, ПозицияНачала - 1) + Сред(СтрокаXML, ПозицияКонца);
	КонецЦикла;
	
	// для обхода ошибки платформы, аналоги замены :xsi="" на xmlns:xsi=""
	
	Если КоррекцияКанонизации Тогда
		Если ДополнительныеОбратныеТрансформации <> Неопределено Тогда
			ИндексТрансформации = ДополнительныеОбратныеТрансформации.Количество() - 2;
			Пока ИндексТрансформации >= 0 Цикл
				СтрокаXML = СтрЗаменить(СтрокаXML, ДополнительныеОбратныеТрансформации[ИндексТрансформации],
					ДополнительныеОбратныеТрансформации[ИндексТрансформации + 1]);
				ИндексТрансформации = ИндексТрансформации - 2;
			КонецЦикла;
		КонецЕсли;
		Если ПрефиксОбхода <> Неопределено И ПрефиксыПространствИмен <> Неопределено Тогда
			// обратные преобразования обхода ошибки канонизации
			Для ИндексЭлемента = 0 По ПрефиксыПространствИмен.Количество() - 1 Цикл
				ПрефиксПространстваИмен = ПрефиксыПространствИмен[ПрефиксыПространствИмен.Количество() - 1 - ИндексЭлемента];
				СтрокаXML = СтрЗаменить(СтрокаXML,
					" xmlns:" + ПрефиксПространстваИмен + "=""" + ПрефиксОбхода, " xmlns:" + ПрефиксПространстваИмен + "=""");
				СтрокаXML = СтрЗаменить(СтрокаXML,
					" :" + ПрефиксПространстваИмен + "=""" + ПрефиксОбхода, " xmlns:" + ПрефиксПространстваИмен + "="""); // обход ошибки платформы
			КонецЦикла;
			СтрокаXML = СтрЗаменить(СтрокаXML, " xmlns=""" + ПрефиксОбхода, " xmlns=""");
			СтрокаXML = СтрЗаменить(СтрокаXML, " =""" + ПрефиксОбхода, " xmlns="""); // обход ошибки платформы
			СтрокаXML = СтрЗаменить(СтрокаXML, " ="""">", ">"); // обход ошибки платформы
		КонецЕсли;
	КонецЕсли;
	Если Нормализация1_1 Тогда
		СтрокаXML = XMLDSigНормализация1_1(СтрокаXML);
	КонецЕсли;
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаУзелDOM, "UTF-8");
	ЗаписьТекста.Записать(СтрокаXML);
	ЗаписьТекста.Закрыть();
	
	// удалим из файла в кодировке "UTF-8" сигнатуру BOM
	ДанныеЧтение = Новый ДвоичныеДанные(ИмяФайлаУзелDOM);
	ДанныеЗапись = Base64Значение(Сред(Base64Строка(ДанныеЧтение), 5));
	ДанныеЗапись.Записать(ИмяФайлаУзелDOM);
	
	Возврат ИмяФайлаУзелDOM;
	
КонецФункции

Функция XMLDSigНормализация1_1(СтрокаXML)
	
	Результат = СтрЗаменить(СтрокаXML, "<", "<n1:");
	Результат = СтрЗаменить(Результат, "<n1:/", "</n1:");
	Результат = СтрЗаменить(Результат, " xmlns=", " xmlns:n1=");
	Возврат Результат;
	
КонецФункции

Функция ХешСтрокаВBase64КанонизированногоФайлаXMLИзПодписи(
		ПодписьКлючаВBase64,
		ПодписьВBase64,
		АдресДанныхДляПодписиФайлаXML,
		УдалитьПодписиИзВременногоХранилища = Ложь) Экспорт
	
	Результат = Новый Структура("ХешСтрокаВBase64", Неопределено);
	
	Если ПодписьКлючаВBase64 <> Неопределено Тогда
		Результат.Вставить("ХешСтрокаВBase64Ключа", Неопределено);
		Результат.ХешСтрокаВBase64Ключа = ХешСтрокаВBase64ИзПодписи(ПодписьКлючаВBase64, УдалитьПодписиИзВременногоХранилища);
	КонецЕсли;
	
	Если ПодписьКлючаВBase64 = Неопределено ИЛИ Результат.ХешСтрокаВBase64Ключа <> Неопределено Тогда
		Результат.ХешСтрокаВBase64 = ХешСтрокаВBase64ИзПодписи(ПодписьВBase64, УдалитьПодписиИзВременногоХранилища);
	КонецЕсли;
	
	Если Результат.ХешСтрокаВBase64 = Неопределено Тогда
		Результат = ХешСтрокаВBase64КанонизированногоФайлаXML(АдресДанныхДляПодписиФайлаXML);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ХешСтрокаВBase64ИзПодписи(ПодписьВBase64, УдалитьПодписьИзВременногоХранилища = Ложь)
	
	Перем ХешСтрокаВBase64;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Если ЭтоАдресВременногоХранилища(ПодписьВBase64) Тогда
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(ПодписьВBase64);
		Если УдалитьПодписьИзВременногоХранилища Тогда
			УдалитьИзВременногоХранилища(ПодписьВBase64);
		КонецЕсли;
	Иначе
		ДвоичныеДанныеПодписи = Base64Значение(ПодписьВBase64);
	КонецЕсли;
	ДвоичныеДанныеПодписи.Записать(ИмяВременногоФайла);
	МассивПодписи = ПрочитатьФайлВМассив(ИмяВременногоФайла);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	МассивБайтовДляПоиска = ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("30 2F 06 09 2A 86 48 86 F7 0D 01 09 04 31 22 04 20");
	МаксИндексДанныхПоиска = МассивБайтовДляПоиска.ВГраница();
	МаксИндексДанныхПодписи = МассивПодписи.ВГраница() - МаксИндексДанныхПоиска;
	ИндНайдено = -1;
	Для Инд = 500 По МаксИндексДанныхПодписи Цикл
		ИндНайдено = Инд;
		Для ИндПоиска = 0 По МаксИндексДанныхПоиска Цикл
			Если МассивПодписи[Инд + ИндПоиска] <> МассивБайтовДляПоиска[ИндПоиска] Тогда
				ИндНайдено = -1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ИндНайдено > -1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндНайдено >= 0 Тогда
		
		МассивБайт = Новый Массив;
		Попытка
			Для Инд = 1 По 32 Цикл
				МассивБайт.Добавить(МассивПодписи[ИндНайдено + МаксИндексДанныхПоиска + Инд]);
			КонецЦикла; 
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка извлечения данных хеша из файла подписи!'");
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Возврат "";
		КонецПопытки;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ЗаписатьФайлИзМассива(ИмяВременногоФайла, МассивБайт);
		
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
		ХешСтрокаВBase64 = Base64Строка(ДвоичныеДанныеФайла);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
		
	Иначе
		
		ХешСтрокаВBase64 = Неопределено;
		
	КонецЕсли;
	
	Возврат ХешСтрокаВBase64;
	
КонецФункции

Функция ХешСтрокаВBase64КанонизированногоФайлаXML(АдресДанныхДляПодписиФайлаXML)
	
	Результат = Новый Структура("ХешСтрокаВBase64", Неопределено);
	
	ИспользоватьВременноеХранилище = (ТипЗнч(АдресДанныхДляПодписиФайлаXML) <> Тип("Строка") ИЛИ НЕ ЭтоАдресВременногоХранилища(АдресДанныхДляПодписиФайлаXML));
	Если ИспользоватьВременноеХранилище Тогда
		ДанныеДляПодписиФайлаXML = АдресДанныхДляПодписиФайлаXML
	Иначе
		ДанныеДляПодписиФайлаXML = ПолучитьИзВременногоХранилища(АдресДанныхДляПодписиФайлаXML);
	КонецЕсли;
	
	Если ДанныеДляПодписиФайлаXML.Свойство("КанонизированныйУзелИнформацияОКлючахXMLВBase64") Тогда
		Результат.Вставить("ХешСтрокаВBase64Ключа", Неопределено);
		Если ИспользоватьВременноеХранилище И ЭтоАдресВременногоХранилища(ДанныеДляПодписиФайлаXML.КанонизированныйУзелИнформацияОКлючахXMLВBase64) Тогда
			ДвДанныеДляПодписиИнформацииОКлючахXML = ПолучитьИзВременногоХранилища(ДанныеДляПодписиФайлаXML.КанонизированныйУзелИнформацияОКлючахXMLВBase64);
		Иначе
			ДвДанныеДляПодписиИнформацииОКлючахXML = Base64Значение(ДанныеДляПодписиФайлаXML.КанонизированныйУзелИнформацияОКлючахXMLВBase64);
		КонецЕсли;
		Результат.ХешСтрокаВBase64Ключа = ВычислитьХешПоАлгоритмуГОСТР3411_94(ДвДанныеДляПодписиИнформацииОКлючахXML, Истина);
	КонецЕсли;
	
	КанонизированныйОбъектXMLВBase64 = ?(НЕ ДанныеДляПодписиФайлаXML.Свойство("КанонизированныйУзелИнформацияОбОбъектеXMLВBase64"),
		ДанныеДляПодписиФайлаXML.КанонизированныйФайлXMLВBase64, ДанныеДляПодписиФайлаXML.КанонизированныйУзелИнформацияОбОбъектеXMLВBase64);
	Если ИспользоватьВременноеХранилище И ЭтоАдресВременногоХранилища(КанонизированныйОбъектXMLВBase64) Тогда
		ДвДанныеДляПодписиОбъектаXML = ПолучитьИзВременногоХранилища(КанонизированныйОбъектXMLВBase64);
	Иначе
		ДвДанныеДляПодписиОбъектаXML = Base64Значение(КанонизированныйОбъектXMLВBase64);
	КонецЕсли;
	Результат.ХешСтрокаВBase64 = ВычислитьХешПоАлгоритмуГОСТР3411_94(ДвДанныеДляПодписиОбъектаXML, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПодписанныйФайлXMLВBase64(
		АдресСодержимогоПодготовленногоФайлаXML,
		ХешСтрокаВBase64Ключа,
		ХешСтрокаВBase64,
		ПодписанныеДанныеВBase64,
		ВозвращатьАдресВоВременномХранилище = Ложь,
		ВключатьХэшСертификата = Ложь) Экспорт
	
	Если ВключатьХэшСертификата Тогда
		Если ВозвращатьАдресВоВременномХранилище Тогда
			ДанныеПодписи = ПолучитьИзВременногоХранилища(ПодписанныеДанныеВBase64);
			ПодписьВBase64 = Base64Строка(ДанныеПодписи);
		Иначе
			ПодписьВBase64 = ПодписанныеДанныеВBase64;
		КонецЕсли;
	Иначе
		ПодписьВBase64 = ПодписьИзПодписанныхДанныхBase64(ПодписанныеДанныеВBase64);
	КонецЕсли;
	
	Если Лев(ПодписьВBase64, 6) = "e1cib/" Тогда 
		ДанныеПодписи = ПолучитьИзВременногоХранилища(ПодписьВBase64);
		ПодписьВBase64 = Base64Строка(ДанныеПодписи);
	КонецЕсли;
	
	ТекстовоеСодержимоеПодписанногоФайлаXML = ПолучитьИзВременногоХранилища(АдресСодержимогоПодготовленногоФайлаXML);
	Если ХешСтрокаВBase64Ключа <> Неопределено Тогда
		ТекстовоеСодержимоеПодписанногоФайлаXML = СтрЗаменить(ТекстовоеСодержимоеПодписанногоФайлаXML, "%KeyInfoDigestValue%", ХешСтрокаВBase64Ключа);
	КонецЕсли;
	ТекстовоеСодержимоеПодписанногоФайлаXML = СтрЗаменить(ТекстовоеСодержимоеПодписанногоФайлаXML, "%DigestValue%", ХешСтрокаВBase64);
	ТекстовоеСодержимоеПодписанногоФайлаXML = СтрЗаменить(ТекстовоеСодержимоеПодписанногоФайлаXML, "%SignatureValue%", ПодписьВBase64);
	
	ИмяФайлаXML = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаXML, "UTF-8");
	ЗаписьТекста.Записать(ТекстовоеСодержимоеПодписанногоФайлаXML);
	ЗаписьТекста.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаXML);
	
	// удалим из файла в кодировке "UTF-8" сигнатуру BOM
	ПодготовленныйФайлXMLВBase64 = Сред(Base64Строка(ДвоичныеДанные), 5);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаXML);
	
	Если ВозвращатьАдресВоВременномХранилище Тогда
		ДвоичныеДанныеПодготовленногоФайлаXML = Base64Значение(ПодготовленныйФайлXMLВBase64);
		Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеПодготовленногоФайлаXML, Новый УникальныйИдентификатор);
	Иначе
		Возврат ПодготовленныйФайлXMLВBase64;
	КонецЕсли;
	
КонецФункции

Функция ВычислитьХешПоАлгоритмуГОСТР3411_94(
		ХешируемыеДанные,
		ПредставитьРезультатХешированияВBase64 = Истина,
		ИмяНабораПараметров = "ГОСТР3411_94_НаборПараметровКриптоПро")
	
	Перем Данные;
	Перем РезультатХеширования;
	
	БуферДанных = Новый Массив;
	МаксРазмерБуфера = 262144;
	
	Если ТипЗнч(ХешируемыеДанные) = Тип("ДвоичныеДанные") Тогда
		Данные = ПолучитьМассивБайтовИзДвоичныхДанных(ХешируемыеДанные);
	ИначеЕсли ТипЗнч(ХешируемыеДанные) = Тип("Строка") Тогда
		Данные = ПолучитьМассивБайтовИзСтроки(ХешируемыеДанные);
	ИначеЕсли ТипЗнч(ХешируемыеДанные) = Тип("Массив") Тогда
		Данные = ХешируемыеДанные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	РазмерДанных = Данные.Количество();
	
	ХешКонтекст = ИнициализироватьХешКонтекст(ИмяНабораПараметров);
	
	ОбработаноБайтов = 0;
	Пока ОбработаноБайтов < РазмерДанных Цикл
		
		РазмерБуфера = 0;
		Для Инд = ОбработаноБайтов По РазмерДанных - 1 Цикл
			БуферДанных.Добавить(Данные[Инд]);
			РазмерБуфера = РазмерБуфера + 1;
			Если РазмерБуфера >= МаксРазмерБуфера Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если РазмерБуфера = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ВыполнитьОперациюХешированияДанныхБуфера(ХешКонтекст, БуферДанных);
		
		БуферДанных.Очистить();
		
		ОбработаноБайтов = ОбработаноБайтов + РазмерБуфера;
		
	КонецЦикла;
	
	ВыполнитьЗавершающуюОперациюХеширования(ХешКонтекст, РезультатХеширования);
	
	Если ПредставитьРезультатХешированияВBase64 Тогда
		Возврат ПолучитьСтрокуBase64ИзМассиваБайтов(РезультатХеширования);
	КонецЕсли;
	
	РультатВШестнадцатеричномПредставлении = "";
	Для каждого ЗначениеБайта Из РезультатХеширования Цикл
		РультатВШестнадцатеричномПредставлении = РультатВШестнадцатеричномПредставлении + ЧислоВШестнадцатеричномПредставлении(ЗначениеБайта, 1);
	КонецЦикла;
	
	Возврат РультатВШестнадцатеричномПредставлении;
	
КонецФункции

Функция ПрочитатьФайлВМассив(ИмяФайла, Позиция = 0, Количество = Неопределено)
	
	Результат = Новый Массив;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, "ISO-8859-1", Символы.ПС, Символы.ПС);
	
	Прочтено = 0;
	Пока Позиция > Прочтено Цикл
		ДлинаБлока = Позиция - Прочтено;
		ДлинаБлока = ?(ДлинаБлока <= 1000000, ДлинаБлока, 1000000);
		ТекстИзФайла = ЧтениеТекста.Прочитать(ДлинаБлока);
		Если ТекстИзФайла = Неопределено ИЛИ СтрДлина(ТекстИзФайла) < ДлинаБлока Тогда
			ЧтениеТекста.Закрыть();
			Возврат Результат;
		КонецЕсли;
		Прочтено = Прочтено + ДлинаБлока;
	КонецЦикла;
	
	Осталось = Количество;
	Пока Осталось = Неопределено ИЛИ Осталось > 0 Цикл
		СимволТекста = ЧтениеТекста.Прочитать(1);
		Если СимволТекста = Неопределено Тогда
			Прервать;
		КонецЕсли;
		КодСимволаТекста = КодСимвола(СимволТекста);
		
		Результат.Добавить(КодСимволаТекста);
		
		Если Осталось <> Неопределено Тогда
			Осталось = Осталось - 1;
		КонецЕсли;
	КонецЦикла;
	ЧтениеТекста.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьФайлИзМассива(ИмяФайла, Массив)
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "ISO-8859-1", Символы.ПС, , Символы.ПС);
	
	Для ИндексВМассиве = 0 По Массив.ВГраница() Цикл
		СимволИзМассива = Символ(Массив[ИндексВМассиве]);
		ЗаписьТекста.Записать(СимволИзМассива);
	КонецЦикла;
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

Функция СкопироватьФрагментИзФайла(ИмяФайла, ИмяФайлаРезультата, Позиция = 0, Количество = Неопределено)
	
	Скопировано = 0;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, "ISO-8859-1", Символы.ПС, Символы.ПС);
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаРезультата, "ISO-8859-1", Символы.ПС, , Символы.ПС);
	
	Прочтено = 0;
	Пока Прочтено < Позиция Цикл
		ДлинаБлока = Позиция - Прочтено;
		ДлинаБлока = ?(ДлинаБлока <= 1000000, ДлинаБлока, 1000000);
		ТекстИзФайла = ЧтениеТекста.Прочитать(ДлинаБлока);
		Если ТекстИзФайла = Неопределено ИЛИ СтрДлина(ТекстИзФайла) < ДлинаБлока Тогда
			ЗаписьТекста.Закрыть();
			ЧтениеТекста.Закрыть();
			Возврат Скопировано;
		КонецЕсли;
		Прочтено = Прочтено + ДлинаБлока;
	КонецЦикла;
	
	Пока Количество = Неопределено ИЛИ Скопировано < Количество Цикл
		ДлинаБлока = ?(Количество <> Неопределено И Количество - Скопировано <= 1000000, Количество - Скопировано, 1000000);
		ТекстИзФайла = ЧтениеТекста.Прочитать(ДлинаБлока);
		Если ТекстИзФайла <> Неопределено Тогда
			ЗаписьТекста.Записать(ТекстИзФайла);
			Скопировано = Скопировано + СтрДлина(ТекстИзФайла);
		КонецЕсли;
		Если ТекстИзФайла = Неопределено ИЛИ СтрДлина(ТекстИзФайла) < ДлинаБлока Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЗаписьТекста.Закрыть();
	ЧтениеТекста.Закрыть();
	
	Возврат Скопировано;
	
КонецФункции

// Вспомогательные процедуры и функции для вычисления хеш-функции по алгоритму ГОСТ Р 34.11-94

Функция ИнициализироватьХешКонтекст(ИмяНабораПараметров)
	
	Перем Блок;
	
	// Набор тестовых параметров ГОСТ Р 34.11-94
	ГОСТР3411_94_НаборТестовыхПараметров = Новый Структура("К8, К7, К6, К5, К4, К3, К2, К1",
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("01 0F 0D 00 05 07 0A 04 09 02 03 0E 06 0B 08 0C"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0D 0B 04 01 03 0F 05 09 00 0A 0E 07 06 08 02 0C"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("04 0B 0A 00 07 02 01 0D 03 06 08 05 09 0C 0F 0E"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("06 0C 07 01 05 0F 0D 08 04 0A 09 0E 00 03 0B 02"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("07 0D 0A 01 00 08 09 0F 0E 04 06 0C 0B 02 05 03"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("05 08 01 0D 0A 03 04 02 0E 0F 0C 07 06 00 09 0B"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0E 0B 04 0C 06 0D 0F 0A 02 03 08 01 00 07 05 09"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("04 0A 09 02 0D 08 00 0E 06 0B 01 0C 07 0F 05 03"));
	
	// Набор параметров для хеш-функции 1.2.643.2.9.1.6.1
	ГОСТР3411_94_НаборПараметровКриптоПро = Новый Структура("К8, К7, К6, К5, К4, К3, К2, К1",
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("01 03 0A 09 05 0B 04 0F 08 06 07 0E 0D 00 02 0C"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0D 0E 04 01 07 00 05 0A 03 0C 08 0F 06 02 09 0B"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("07 06 02 04 0D 09 0F 00 0A 01 05 0B 08 0E 0C 03"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("07 06 04 0B 09 0C 02 0A 01 08 00 0E 0F 0D 03 05"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("04 0A 07 0C 00 0F 02 08 0E 01 06 05 0D 0B 09 03"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("07 0F 0C 0E 09 04 01 00 03 0B 05 02 06 0A 08 0D"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("05 0F 04 00 02 0D 0B 09 01 07 06 03 0C 0E 0A 08"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0A 04 05 06 08 01 03 07 0D 0C 0E 00 09 02 0B 0F"));
	
	// Набор тестовых параметров ГОСТ 28147
	ГОСТ28147_НаборТестовыхПараметров = Новый Структура("К8, К7, К6, К5, К4, К3, К2, К1",
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0C 06 05 02 0B 00 09 0D 03 0E 07 0A 0F 04 01 08"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("09 0B 0C 00 03 06 07 05 04 08 0E 0F 01 0A 02 0D"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("08 0F 06 0B 01 09 0C 05 0D 03 07 0A 00 0E 02 04"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("03 0E 05 09 06 08 00 0D 0A 0B 07 0C 02 01 0F 04"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0E 09 0B 02 05 0F 07 01 00 0D 0C 06 0A 04 03 08"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0D 08 0E 0C 07 03 09 0A 01 05 02 04 06 0F 00 0B"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0C 09 0F 0E 08 01 03 0A 02 07 04 0D 06 00 0B 05"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("04 02 0F 05 09 01 00 08 0E 03 0B 0C 0D 07 0A 06"));
	
	// 1.2.643.2.2.31.1
	ГОСТ28147_НаборПараметровКриптоПро_A = Новый Структура("К8, К7, К6, К5, К4, К3, К2, К1",
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0B 0A 0F 05 00 0C 0E 08 06 02 03 09 01 07 0D 04"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("01 0D 02 09 07 0A 06 00 08 0C 04 05 0F 03 0B 0E"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("03 0A 0D 0C 01 02 00 0B 07 05 09 04 08 0F 0E 06"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0B 05 01 09 08 0D 0F 00 0E 04 02 03 0C 07 0A 06"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0E 07 0A 0C 0D 01 03 09 00 02 0B 04 0F 08 05 06"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0E 04 06 02 0B 03 0D 08 0C 0F 05 0A 00 07 01 09"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("03 07 0E 09 08 0A 0F 00 05 02 06 0C 0B 04 0D 01"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("09 06 03 02 08 0B 01 07 0A 04 0E 0F 0C 00 0D 05"));
	
	// 1.2.643.2.2.31.2
	ГОСТ28147_НаборПараметровКриптоПро_B = Новый Структура("К8, К7, К6, К5, К4, К3, К2, К1",
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("00 04 0B 0E 08 03 07 01 0A 02 09 06 0F 0D 05 0C"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("05 02 0A 0B 09 01 0C 03 07 04 0D 00 06 0F 08 0E"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("08 03 02 06 04 0D 0E 0B 0C 01 07 0F 0A 00 09 05"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("02 07 0C 0F 09 05 0A 0B 01 04 00 0D 06 08 0E 03"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("07 05 00 0D 0B 06 01 02 03 0A 0C 0F 04 0E 09 08"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0E 0C 00 0A 09 02 0D 0B 07 05 08 0F 03 06 01 04"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("00 01 02 0A 04 0D 05 0C 09 07 03 0F 0B 08 06 0E"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("08 04 0B 01 03 05 00 09 02 0E 0A 0C 0D 06 07 0F"));
	
	// 1.2.643.2.2.31.3
	ГОСТ28147_НаборПараметровКриптоПро_C = Новый Структура("К8, К7, К6, К5, К4, К3, К2, К1",
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("07 04 00 05 0A 02 0F 0E 0C 06 01 0B 0D 09 03 08"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0A 09 06 08 0D 0E 02 00 0F 03 05 0B 04 01 0C 07"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0C 09 0B 01 08 0E 02 04 07 03 06 05 0A 00 0F 0D"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("08 0D 0B 00 04 05 01 02 09 03 0C 0E 06 0F 0A 07"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("03 06 00 01 05 0D 0A 08 0B 02 09 07 0E 0F 0C 04"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("08 02 05 00 04 09 0F 0A 03 07 0C 0D 06 0E 01 0B"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("00 01 07 0D 0B 04 05 02 08 0E 0F 0C 09 0A 06 03"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("01 0B 0C 02 09 0D 00 0F 04 05 08 0E 0A 07 06 03"));
	
	// 1.2.643.2.2.31.4
	ГОСТ28147_НаборПараметровКриптоПро_D = Новый Структура("К8, К7, К6, К5, К4, К3, К2, К1",
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("01 0A 06 08 0F 0B 00 04 0C 03 05 09 07 0D 02 0E"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("03 00 06 0F 01 0E 09 02 0D 08 0C 04 0B 0A 05 07"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("08 00 0F 03 02 05 0E 0B 01 0A 04 07 0C 09 0D 06"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("00 0C 08 09 0D 02 0A 0B 07 03 06 05 04 0E 0F 01"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("01 05 0E 0C 0A 07 00 0D 06 02 0B 04 09 03 0F 08"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("01 0C 0B 00 0F 0E 06 05 0A 0D 04 08 09 03 07 02"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0B 06 03 04 0C 0F 0E 02 07 0D 08 00 05 0A 09 01"),
		ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("0F 0C 02 0A 06 04 05 00 07 09 0E 0D 01 0B 08 03"));
		
	НаборыПараметров = Новый Структура();
	НаборыПараметров.Вставить("ГОСТР3411_94_НаборТестовыхПараметров",  ГОСТР3411_94_НаборТестовыхПараметров);
	НаборыПараметров.Вставить("ГОСТР3411_94_НаборПараметровКриптоПро", ГОСТР3411_94_НаборПараметровКриптоПро);
	НаборыПараметров.Вставить("ГОСТ28147_НаборТестовыхПараметров",     ГОСТ28147_НаборТестовыхПараметров);
	НаборыПараметров.Вставить("ГОСТ28147_НаборПараметровКриптоПро_A",  ГОСТ28147_НаборПараметровКриптоПро_A);
	НаборыПараметров.Вставить("ГОСТ28147_НаборПараметровКриптоПро_B",  ГОСТ28147_НаборПараметровКриптоПро_B);
	НаборыПараметров.Вставить("ГОСТ28147_НаборПараметровКриптоПро_C",  ГОСТ28147_НаборПараметровКриптоПро_C);
	НаборыПараметров.Вставить("ГОСТ28147_НаборПараметровКриптоПро_D",  ГОСТ28147_НаборПараметровКриптоПро_D);
	
	// Шифроконтекст включает в себя ключ и обработанный блок параметров
	ГОСТ_Шифроконтекст = Новый Структура("К, К87, К65, К43, К21", Новый Массив(8), Новый Массив(256), Новый Массив(256), Новый Массив(256), Новый Массив(256));
	
	НаборыПараметров.Свойство(ИмяНабораПараметров, Блок);
	Если Блок = Неопределено Тогда
		Блок = НаборыПараметров["ГОСТР3411_94_НаборТестовыхПараметров"];
	КонецЕсли;
	
	Для Инд = 0 По 255 Цикл
		Инд1 = Цел(Инд / 16); // >>4
		Инд2 = Инд % 16;      // &15
		ГОСТ_Шифроконтекст.К87[Инд] = ЧислоВБинарныйМассив(Блок.К8[Инд1] * 16 + Блок.К7[Инд2], 8);
		ГОСТ_Шифроконтекст.К65[Инд] = ЧислоВБинарныйМассив(Блок.К6[Инд1] * 16 + Блок.К5[Инд2], 8);
		ГОСТ_Шифроконтекст.К43[Инд] = ЧислоВБинарныйМассив(Блок.К4[Инд1] * 16 + Блок.К3[Инд2], 8);
		ГОСТ_Шифроконтекст.К21[Инд] = ЧислоВБинарныйМассив(Блок.К2[Инд1] * 16 + Блок.К1[Инд2], 8);
	КонецЦикла;
	
	ГОСТ_ХешКонтекст = Новый Структура("Длина, Шифроконтекст, Обработано, БуферH, БуферS, Остатки", 0, ГОСТ_Шифроконтекст, 0, Новый Массив(32), Новый Массив(32), Новый Массив(32));
	Для Инд = 0 По 31 Цикл
		ГОСТ_ХешКонтекст.БуферH[Инд]  = ЧислоВБинарныйМассив(0, 8);
		ГОСТ_ХешКонтекст.БуферS[Инд]  = ЧислоВБинарныйМассив(0, 8);
		ГОСТ_ХешКонтекст.Остатки[Инд] = ЧислоВБинарныйМассив(0, 8);
	КонецЦикла;
	
	Возврат ГОСТ_ХешКонтекст;
	
КонецФункции

Процедура ВыполнитьОперациюХешированияДанныхБуфера(ХешКонтекст, Буфер)
	
	ТекИндекс = 0;
	
	РазмерБуфераВБайтах = Буфер.Количество();
	
	Если ХешКонтекст.Обработано > 0 Тогда
		ОбработатьБайтов = 32 - ХешКонтекст.Обработано;
		Если ОбработатьБайтов > РазмерБуфераВБайтах Тогда
			ОбработатьБайтов = РазмерБуфераВБайтах;
		КонецЕсли;
		Для Инд = 0 По ОбработатьБайтов - 1 Цикл
			ХешКонтекст.Остатки[ХешКонтекст.Обработано + Инд] = ЧислоВБинарныйМассив(Буфер[Инд], 8);
		КонецЦикла;
		ХешКонтекст.Обработано = ХешКонтекст.Обработано + ОбработатьБайтов;
		Если ХешКонтекст.Обработано < 32 Тогда
			Возврат;
		КонецЕсли;
		ТекИндекс = ОбработатьБайтов;
		ВыполнитьОперациюХеширования(ХешКонтекст.Шифроконтекст, ХешКонтекст.БуферH, ХешКонтекст.Остатки);
		СуммироватьБлоки(ХешКонтекст.Остатки, ХешКонтекст.БуферS, 32);
		ХешКонтекст.Длина = ХешКонтекст.Длина + 32;
		ХешКонтекст.Обработано = 0;
	КонецЕсли;
	
	Пока ТекИндекс <= РазмерБуфераВБайтах - 32 Цикл
		Блок = Новый Массив(32);
		Для Инд = 0 По 31 Цикл
			Блок[Инд] = ЧислоВБинарныйМассив(Буфер[ТекИндекс + Инд], 8);
		КонецЦикла;
		ВыполнитьОперациюХеширования(ХешКонтекст.Шифроконтекст, ХешКонтекст.БуферH, Блок);
		СуммироватьБлоки(Блок, ХешКонтекст.БуферS, 32);
		ХешКонтекст.Длина = ХешКонтекст.Длина + 32;
		ТекИндекс = ТекИндекс + 32;
	КонецЦикла;
	
	Если ТекИндекс <> РазмерБуфераВБайтах Тогда
		ХешКонтекст.Обработано = РазмерБуфераВБайтах - ТекИндекс;
		Для Инд = 0 По ХешКонтекст.Обработано - 1 Цикл
			ХешКонтекст.Остатки[Инд] = ЧислоВБинарныйМассив(Буфер[ТекИндекс + Инд], 8);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОперациюХеширования(Шифроконтекст, БуферH, БуферM)
	
	БуферU = Новый Массив(32);
	БуферW = Новый Массив(32);
	БуферV = Новый Массив(32);
	БуферS = Новый Массив(32);
	
	Ключ   = Новый Массив(32);
	
	Для Инд = 0 По 31 Цикл
		БуферS[Инд] = ЧислоВБинарныйМассив(0, 8);
	КонецЦикла;
	
	// Вычисляем первый ключ
	ИсключающееИЛИДляБлоков(БуферW, БуферH, БуферM, 32);
	РаспределениеБайтовДляБлоков(БуферW, Ключ);
	// Шифруем первые 8 байт буфера H первым ключем
	ЗашифроватьСКлючемПоГОСТ(Шифроконтекст, Ключ, БуферH, БуферS);
	
	// Вычисляем второй ключ
	ЦиклическоеИсключающееИЛИДляБлоков(БуферH, БуферU);
	ЦиклическоеИсключающееИЛИДляБлоков(БуферM, БуферV);
	ЦиклическоеИсключающееИЛИДляБлоков(БуферV, БуферV);
	ИсключающееИЛИДляБлоков(БуферW, БуферU, БуферV, 32);
	РаспределениеБайтовДляБлоков(БуферW, Ключ);
	// Шифруем следующие 8 байт буфера H вторым ключем
	ЗашифроватьСКлючемПоГОСТ(Шифроконтекст, Ключ, БуферH, БуферS, 8);
	
	// Вычисляем третий ключ
	ЦиклическоеИсключающееИЛИДляБлоков(БуферU, БуферU);
	БуферU[31] = ОперацияПобитовоеНЕ(БуферU[31]);
	БуферU[29] = ОперацияПобитовоеНЕ(БуферU[29]);
	БуферU[28] = ОперацияПобитовоеНЕ(БуферU[28]);
	БуферU[24] = ОперацияПобитовоеНЕ(БуферU[24]);
	БуферU[23] = ОперацияПобитовоеНЕ(БуферU[23]);
	БуферU[20] = ОперацияПобитовоеНЕ(БуферU[20]);
	БуферU[18] = ОперацияПобитовоеНЕ(БуферU[18]);
	БуферU[17] = ОперацияПобитовоеНЕ(БуферU[17]);
	БуферU[14] = ОперацияПобитовоеНЕ(БуферU[14]);
	БуферU[12] = ОперацияПобитовоеНЕ(БуферU[12]);
	БуферU[10] = ОперацияПобитовоеНЕ(БуферU[10]);
	БуферU[8]  = ОперацияПобитовоеНЕ(БуферU[8]);
	БуферU[7]  = ОперацияПобитовоеНЕ(БуферU[7]);
	БуферU[5]  = ОперацияПобитовоеНЕ(БуферU[5]);
	БуферU[3]  = ОперацияПобитовоеНЕ(БуферU[3]);
	БуферU[1]  = ОперацияПобитовоеНЕ(БуферU[1]);
	ЦиклическоеИсключающееИЛИДляБлоков(БуферV, БуферV);
	ЦиклическоеИсключающееИЛИДляБлоков(БуферV, БуферV);
	ИсключающееИЛИДляБлоков(БуферW, БуферU, БуферV, 32);
	РаспределениеБайтовДляБлоков(БуферW, Ключ);
	// Шифруем следующие 8 байт буфера H третим ключем
	ЗашифроватьСКлючемПоГОСТ(Шифроконтекст, Ключ, БуферH, БуферS, 16);
	
	// Вычисляем четвертый ключ
	ЦиклическоеИсключающееИЛИДляБлоков(БуферU, БуферU);
	ЦиклическоеИсключающееИЛИДляБлоков(БуферV, БуферV);
	ЦиклическоеИсключающееИЛИДляБлоков(БуферV, БуферV);
	ИсключающееИЛИДляБлоков(БуферW, БуферU, БуферV, 32);
	РаспределениеБайтовДляБлоков(БуферW, Ключ);
	// Шифруем последние 8 байт буфера H четвертым ключем
	ЗашифроватьСКлючемПоГОСТ(Шифроконтекст, Ключ, БуферH, БуферS, 24);
	
	Для Инд = 0 По 11 Цикл
		ПреобразованиеДляБлока(БуферS);
	КонецЦикла;
	ИсключающееИЛИДляБлоков(БуферS, БуферS, БуферM, 32);
	ПреобразованиеДляБлока(БуферS);
	ИсключающееИЛИДляБлоков(БуферS, БуферS, БуферH, 32);
	Для Инд = 0 По 60 Цикл
		ПреобразованиеДляБлока(БуферS);
	КонецЦикла;
	Для Инд = 0 По 31 Цикл
		БуферH[Инд] = КопияМассива(БуферS[Инд]);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗавершающуюОперациюХеширования(ХешКонтекст, РезультатХеширования)
	
	Буфер  = Новый Массив(32);
	БуферH = Новый Массив(32);
	БуферS = Новый Массив(32);
	
	ИтоговаяДлина = ХешКонтекст.Длина;
	
	Для Инд = 0 По 31 Цикл
		БуферH[Инд] = КопияМассива(ХешКонтекст.БуферH[Инд]);
		БуферS[Инд] = КопияМассива(ХешКонтекст.БуферS[Инд]);
	КонецЦикла;
	
	Если ХешКонтекст.Обработано > 0 Тогда
		Для Инд = 0 По 31 Цикл
			Буфер[Инд]  = ЧислоВБинарныйМассив(0, 8);
		КонецЦикла;
		Для Инд = 0 По ХешКонтекст.Обработано - 1 Цикл
			Буфер[Инд] = КопияМассива(ХешКонтекст.Остатки[Инд]);
		КонецЦикла;
		ВыполнитьОперациюХеширования(ХешКонтекст.Шифроконтекст, БуферH, Буфер);
		СуммироватьБлоки(Буфер, БуферS, 32);
		ИтоговаяДлина = ИтоговаяДлина + ХешКонтекст.Обработано;
	КонецЕсли;
	
	Для Инд = 0 По 31 Цикл
		Буфер[Инд] = ЧислоВБинарныйМассив(0, 8);
	КонецЦикла;
	
	// Итоговая длина хеша в битах
	ИтоговаяДлина = ИтоговаяДлина * 8;
	
	ТекИндБуфера = 0;
	Пока ИтоговаяДлина > 0 Цикл
		Буфер[ТекИндБуфера] = ЧислоВБинарныйМассив(ИтоговаяДлина % 256, 8);
		ТекИндБуфера = ТекИндБуфера + 1;
		ИтоговаяДлина = Цел(ИтоговаяДлина / 256);
	КонецЦикла;
	
	ВыполнитьОперациюХеширования(ХешКонтекст.Шифроконтекст, БуферH, Буфер);
	ВыполнитьОперациюХеширования(ХешКонтекст.Шифроконтекст, БуферH, БуферS);
	
	РезультатХеширования = Новый Массив(32);
	
	Для Инд = 0 По 31 Цикл
		РезультатХеширования[Инд] = БинарныйМассивВЧисло(БуферH[Инд]);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗашифроватьСКлючемПоГОСТ(Шифроконтекст, Ключ, БлокИсточник, БлокПриемник, НачальныйИндекс = 0)
	
	// Установим 256-битный ключ
	Инд2 = 0;
	Для Инд1 = 0 По 7 Цикл
		Результат = Новый Массив(32);
		Байт0 = Ключ[Инд2    ];
		Байт1 = Ключ[Инд2 + 1];
		Байт2 = Ключ[Инд2 + 2];
		Байт3 = Ключ[Инд2 + 3];
		Для Инд = 0 По 7 Цикл
			Результат[Инд     ] = Байт0[Инд];
			Результат[Инд + 8 ] = Байт1[Инд];
			Результат[Инд + 16] = Байт2[Инд];
			Результат[Инд + 24] = Байт3[Инд];
		КонецЦикла;
		Шифроконтекст.К[Инд1] = Результат;
		Инд2 = Инд2 + 4;
	КонецЦикла;
	
	// Шифруем один 64-битный блок
	M1 = Новый Массив(32);
	M2 = Новый Массив(32);
	Байт0 = БлокИсточник[НачальныйИндекс    ];
	Байт1 = БлокИсточник[НачальныйИндекс + 1];
	Байт2 = БлокИсточник[НачальныйИндекс + 2];
	Байт3 = БлокИсточник[НачальныйИндекс + 3];
	Байт4 = БлокИсточник[НачальныйИндекс + 4];
	Байт5 = БлокИсточник[НачальныйИндекс + 5];
	Байт6 = БлокИсточник[НачальныйИндекс + 6];
	Байт7 = БлокИсточник[НачальныйИндекс + 7];
	Для Инд = 0 По 7 Цикл
		M1[Инд     ] = Байт0[Инд];
		M1[Инд + 8 ] = Байт1[Инд];
		M1[Инд + 16] = Байт2[Инд];
		M1[Инд + 24] = Байт3[Инд];
		M2[Инд     ] = Байт4[Инд];
		M2[Инд + 8 ] = Байт5[Инд];
		M2[Инд + 16] = Байт6[Инд];
		M2[Инд + 24] = Байт7[Инд];
	КонецЦикла;
	
	Для Инд = 0 По 2 Цикл
		M2 = ОперацияПобитовоеИсключающееИЛИ(M2, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M1, Шифроконтекст.К[0])));
		M1 = ОперацияПобитовоеИсключающееИЛИ(M1, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M2, Шифроконтекст.К[1])));
		M2 = ОперацияПобитовоеИсключающееИЛИ(M2, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M1, Шифроконтекст.К[2])));
		M1 = ОперацияПобитовоеИсключающееИЛИ(M1, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M2, Шифроконтекст.К[3])));
		M2 = ОперацияПобитовоеИсключающееИЛИ(M2, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M1, Шифроконтекст.К[4])));
		M1 = ОперацияПобитовоеИсключающееИЛИ(M1, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M2, Шифроконтекст.К[5])));
		M2 = ОперацияПобитовоеИсключающееИЛИ(M2, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M1, Шифроконтекст.К[6])));
		M1 = ОперацияПобитовоеИсключающееИЛИ(M1, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M2, Шифроконтекст.К[7])));
	КонецЦикла;
	
	M2 = ОперацияПобитовоеИсключающееИЛИ(M2, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M1, Шифроконтекст.К[7])));
	M1 = ОперацияПобитовоеИсключающееИЛИ(M1, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M2, Шифроконтекст.К[6])));
	M2 = ОперацияПобитовоеИсключающееИЛИ(M2, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M1, Шифроконтекст.К[5])));
	M1 = ОперацияПобитовоеИсключающееИЛИ(M1, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M2, Шифроконтекст.К[4])));
	M2 = ОперацияПобитовоеИсключающееИЛИ(M2, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M1, Шифроконтекст.К[3])));
	M1 = ОперацияПобитовоеИсключающееИЛИ(M1, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M2, Шифроконтекст.К[2])));
	M2 = ОперацияПобитовоеИсключающееИЛИ(M2, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M1, Шифроконтекст.К[1])));
	M1 = ОперацияПобитовоеИсключающееИЛИ(M1, ПреобразованиеСлово32(Шифроконтекст, БинарнаяСумма(M2, Шифроконтекст.К[0])));
	
	Байт0 = БлокПриемник[НачальныйИндекс    ];
	Байт1 = БлокПриемник[НачальныйИндекс + 1];
	Байт2 = БлокПриемник[НачальныйИндекс + 2];
	Байт3 = БлокПриемник[НачальныйИндекс + 3];
	Байт4 = БлокПриемник[НачальныйИндекс + 4];
	Байт5 = БлокПриемник[НачальныйИндекс + 5];
	Байт6 = БлокПриемник[НачальныйИндекс + 6];
	Байт7 = БлокПриемник[НачальныйИндекс + 7];
	Для Инд = 0 По 7 Цикл
		Байт0[Инд] = M2[Инд     ];
		Байт1[Инд] = M2[Инд + 8 ];
		Байт2[Инд] = M2[Инд + 16];
		Байт3[Инд] = M2[Инд + 24];
		Байт4[Инд] = M1[Инд     ];
		Байт5[Инд] = M1[Инд + 8 ];
		Байт6[Инд] = M1[Инд + 16];
		Байт7[Инд] = M1[Инд + 24];
	КонецЦикла;
	
КонецПроцедуры

Функция ЧислоВБинарныйМассив(Знач Число, Знач ВсегоРазрядов = 32)
	Результат = Новый Массив;
	Для ПозицияРазряда = 1 По ВсегоРазрядов Цикл
		Результат.Добавить(Булево(Число % 2));
		Число = Цел(Число / 2);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция БинарныйМассивВЧисло(Массив)
	Результат = 0;
	Для НомерРазряда = -(Массив.ВГраница()) По 0 Цикл
		Результат = Результат * 2 + Число(Массив[-НомерРазряда]);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ОперацияПобитовоеИсключающееИЛИ(БинарныйМассив1, БинарныйМассив2)
	МаксИндекс = БинарныйМассив1.ВГраница();
	Результат = Новый Массив(МаксИндекс + 1);
	Для Индекс = 0 По МаксИндекс Цикл
		Результат[Индекс] = БинарныйМассив1[Индекс] <> БинарныйМассив2[Индекс];
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ОперацияПобитовоеНЕ(БинарныйМассив)
	Результат = Новый Массив;
	Для Каждого Элемент Из БинарныйМассив Цикл
		Результат.Добавить(Не Элемент);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЦиклическийСдвигВлево(БинарныйМассив, КоличествоРазрядов)
	Размер = БинарныйМассив.Количество();
	Результат = Новый Массив(Размер);
	МаксИндекс = Размер - 1;
	Для Разряд = 0 По МаксИндекс Цикл
		Результат[(Разряд + КоличествоРазрядов) % Размер] = БинарныйМассив[Разряд];
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция БинарнаяСумма(БинарныйМассив1, БинарныйМассив2, ДобавитьКРазряду = Ложь)
	МаксИндекс = БинарныйМассив1.ВГраница();
	Результат = Новый Массив(МаксИндекс + 1);
	Для Индекс = 0 По МаксИндекс Цикл
		Результат[Индекс] = БинарныйМассив1[Индекс] <> БинарныйМассив2[Индекс] <> ДобавитьКРазряду;
		ДобавитьКРазряду = (0 + БинарныйМассив1[Индекс] + БинарныйМассив2[Индекс] + ДобавитьКРазряду) > 1;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция КопияМассива(Массив)
	Результат = Новый Массив;
	Для Каждого Элемент Из Массив Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СуммироватьБлоки(БлокИсточник, БлокПриемник, КоличествоБайтов)
	
	Перенос = Ложь;
	
	Для Инд = 0 По КоличествоБайтов - 1 Цикл
		БлокПриемник[Инд] = БинарнаяСумма(БлокПриемник[Инд], БлокИсточник[Инд], Перенос);
	КонецЦикла;
	
	Возврат Перенос;
	
КонецФункции

Процедура ИсключающееИЛИДляБлоков(Результат, Блок1, Блок2, Знач КоличествоБайтов)
	
	Для Инд = 0 По КоличествоБайтов - 1 Цикл
		Результат[Инд] = ОперацияПобитовоеИсключающееИЛИ(Блок1[Инд], Блок2[Инд]);
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределениеБайтовДляБлоков(БлокИсточник, БлокПриемник)
	
	Для Инд1 = 0 По 3 Цикл
		Для Инд2 = 0 По 7 Цикл
			БлокПриемник[Инд1 + 4 * Инд2] = КопияМассива(БлокИсточник[8 * Инд1 + Инд2]);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ЦиклическоеИсключающееИЛИДляБлоков(БлокИсточник, БлокПриемник)
	
	Буфер = Новый Массив(8);
	
	Для Инд = 0 По 7 Цикл
		Буфер[Инд] = КопияМассива(БлокИсточник[Инд]);
	КонецЦикла;
	Для Инд = 0 По 23 Цикл
		БлокПриемник[Инд] = КопияМассива(БлокИсточник[Инд + 8]);
	КонецЦикла;
	Для Инд = 0 По 7 Цикл
		БлокПриемник[Инд + 24] = ОперацияПобитовоеИсключающееИЛИ(Буфер[Инд], БлокПриемник[Инд]);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПреобразованиеДляБлока(Блок)
	
	Значение1 = Новый Массив(8);
	Значение2 = Новый Массив(8);
	Для Инд = 0 По 7 Цикл
		Значение1[Инд] = Блок[0][Инд] <> Блок[2][Инд] <> Блок[4][Инд] <> Блок[6][Инд] <> Блок[24][Инд] <> Блок[30][Инд];
		Значение2[Инд] = Блок[1][Инд] <> Блок[3][Инд] <> Блок[5][Инд] <> Блок[7][Инд] <> Блок[25][Инд] <> Блок[31][Инд];
	КонецЦикла;
	
	//Сдвинуть массив на 2 позиции влево
	Блок.Удалить(0);
	Блок.Удалить(0);
	Блок.Добавить(Значение1);
	Блок.Добавить(Значение2);
	
КонецПроцедуры

Функция ПреобразованиеСлово32(Шифроконтекст, БитовыйМассив32)
	
	ЗначениеСлова = БинарныйМассивВЧисло(БитовыйМассив32);
	К21 = Шифроконтекст.К21[ЗначениеСлова % 256];
	ЗначениеСлова = Цел(ЗначениеСлова / 256);
	К43 = Шифроконтекст.К43[ЗначениеСлова % 256];
	ЗначениеСлова = Цел(ЗначениеСлова / 256);
	К65 = Шифроконтекст.К65[ЗначениеСлова % 256];
	ЗначениеСлова = Цел(ЗначениеСлова / 256);
	К87 = Шифроконтекст.К87[ЗначениеСлова % 256];
	
	Результат = Новый Массив(32);
	Для Инд = 0 По 7 Цикл
		Результат[Инд     ] = К21[Инд];
		Результат[Инд + 8 ] = К43[Инд];
		Результат[Инд + 16] = К65[Инд];
		Результат[Инд + 24] = К87[Инд];
	КонецЦикла;
	
	Возврат ЦиклическийСдвигВлево(Результат, 11);
	
КонецФункции

Функция ЧислоВШестнадцатеричномПредставлении(Знач Число, Знач КоличествоБайт = 32)
	
	Результат = "";
	СтрокаСимволов = "0123456789ABCDEF";
	Для НомерБайта = 1 По КоличествоБайт Цикл
		ПредставлениеБайта = "";
		Для Счетчик = 1 По 2 Цикл
			ПредставлениеБайта = Сред(СтрокаСимволов, Число % 16 + 1, 1) + ПредставлениеБайта;
			Число = Цел(Число / 16);
		КонецЦикла;
		// порядок байтов: начиная с младшего
		Результат = Результат + ПредставлениеБайта;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивБайтовИзСтроки(Строка)
	
	Результат = Новый Массив;
	
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Результат.Добавить(КодСимвола(Сред(Строка, Позиция, 1)));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении(Строка)
	
	Результат = Новый Массив;
	
	СтрокаСимволов = "0123456789ABCDEF";
	Число = 0;
	ЭтоМладшийПолубайт = Ложь;
	Для НомерСимвола = 1 По СтрДлина(Строка) Цикл
		ТекЦифра = СтрНайти(СтрокаСимволов, Сред(Строка, НомерСимвола, 1)) - 1;
		Если ТекЦифра >= 0 Тогда
			Если ЭтоМладшийПолубайт Тогда
				Число = Число + ТекЦифра;
				Результат.Добавить(Число);
			Иначе
				Число = 16 * ТекЦифра;
			КонецЕсли;
			ЭтоМладшийПолубайт = НЕ ЭтоМладшийПолубайт;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивБайтовИзДвоичныхДанных(ДвоичныеДанные)
	
	СимволыBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	
	Результат = Новый Массив;
	
	СтрокаBase64 = Base64Строка(ДвоичныеДанные);
	ДлинаСтрокиBase64 = СтрДлина(СтрокаBase64);
	
	Буфер24Бита = 0;
	НомерСимволаBase64 = 0;
	
	Для Позиция = 1 По ДлинаСтрокиBase64 Цикл
		СимволBase64 = Сред(СтрокаBase64, Позиция, 1);
		Индекс = СтрНайти(СимволыBase64, СимволBase64) - 1;
		Если Индекс < 0 Тогда
			Если СимволBase64 = "=" Тогда
				Буфер24Бита = Буфер24Бита * Pow(64, 4 - НомерСимволаBase64);
				НомерСимволаBase64 = 4;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Буфер24Бита = Буфер24Бита * 64 + Индекс;
			НомерСимволаBase64 = НомерСимволаBase64 + 1;
		КонецЕсли;
		Если НомерСимволаBase64 = 4 Тогда
			ЗначениеБайта3 = Буфер24Бита % 256;
			Буфер24Бита = Цел(Буфер24Бита / 256);
			ЗначениеБайта2 = Буфер24Бита % 256;
			Буфер24Бита = Цел(Буфер24Бита / 256);
			ЗначениеБайта1 = Буфер24Бита % 256;
			Буфер24Бита = 0;
			
			Результат.Добавить(ЗначениеБайта1);
			Результат.Добавить(ЗначениеБайта2);
			Результат.Добавить(ЗначениеБайта3);
			
			НомерСимволаBase64 = 0;
		КонецЕсли;
		Если СимволBase64 = "=" Тогда
			Результат.Удалить(Результат.ВГраница());
			Если СтрНайти(Прав(СтрокаBase64, ДлинаСтрокиBase64 - Позиция), "=") > 0 Тогда
				Результат.Удалить(Результат.ВГраница());
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтрокуBase64ИзМассиваБайтов(МассивБайтов)
	
	СимволыBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	
	РазмерДанных = МассивБайтов.Количество();
	
	Буфер3Байта = Новый Массив(3);
	
	СтрокаBase64 = "";
	
	Инд = 0;
	
	Пока Инд < РазмерДанных Цикл
		
		Буфер3Байта[0] = МассивБайтов[Инд];
		Буфер3Байта[1] = ?(РазмерДанных - Инд > 1, МассивБайтов[Инд + 1], 0);
		Буфер3Байта[2] = ?(РазмерДанных - Инд > 2, МассивБайтов[Инд + 2], 0);
		
		СтрокаBase64 = СтрокаBase64 + Сред(СимволыBase64, Цел(Буфер3Байта[0] / 4) + 1, 1);
		СтрокаBase64 = СтрокаBase64 + Сред(СимволыBase64, Буфер3Байта[0] % 4 * 16 + Цел(Буфер3Байта[1] / 16) + 1, 1);
		СтрокаBase64 = СтрокаBase64 + ?(РазмерДанных - Инд > 1, Сред(СимволыBase64, Буфер3Байта[1] % 16 * 4 + Цел(Буфер3Байта[2] / 64) + 1, 1), "=");
		СтрокаBase64 = СтрокаBase64 + ?(РазмерДанных - Инд > 2, Сред(СимволыBase64, Буфер3Байта[2] % 64 + 1, 1), "=");
		
		Инд = Инд + 3;
		
	КонецЦикла;
	
	Возврат СтрокаBase64;
	
КонецФункции

Функция СтрокаВШестнадцатеричномПредставленииВBase64(СтрокаВШестнадцатеричномПредставлении) Экспорт
	
	МассивБайт = ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении(СтрокаВШестнадцатеричномПредставлении);
	Для ИндексБайта = 0 По МассивБайт.ВГраница() Цикл
		МладшийРазряд = МассивБайт[ИндексБайта] % 16;
		СтаршийРазряд = (МассивБайт[ИндексБайта] - МладшийРазряд) / 16;
		МассивБайт[ИндексБайта] = МладшийРазряд * 16 + СтаршийРазряд;
	КонецЦикла;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗаписатьФайлИзМассива(ИмяВременногоФайла, МассивБайт);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	СтрокаВBase64 = Base64Строка(ДвоичныеДанныеФайла);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат СтрокаВBase64;
	
КонецФункции

Функция РазобратьXMLDSig(XMLDSigВBase64) Экспорт
	
	// прочитать Base64 XMLDSig
	
	ИспользоватьВременноеХранилище = ЭтоАдресВременногоХранилища(XMLDSigВBase64);
	
	ИмяВременногоФайлаXMLDSig = ПолучитьИмяВременногоФайла();
	Если НЕ ИспользоватьВременноеХранилище Тогда
		ДвоичныеДанныеXMLDSig = Base64Значение(XMLDSigВBase64);
	Иначе
		ДвоичныеДанныеXMLDSig = ПолучитьИзВременногоХранилища(XMLDSigВBase64);
	КонецЕсли;
	ДвоичныеДанныеXMLDSig.Записать(ИмяВременногоФайлаXMLDSig);
	
	ЧтениеТекстаXMLDSig = Новый ЧтениеТекста(ИмяВременногоФайлаXMLDSig, "utf-8");
	ТекстXMLDSig = ЧтениеТекстаXMLDSig.Прочитать();
	ЧтениеТекстаXMLDSig.Закрыть();
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайлаXMLDSig);
	
	// преобразования обхода ошибки канонизации платформы
	
	ПрефиксыПространствИмен = Новый Массив;
	ТекстXML = ТекстXMLDSig;
	Пока ЗначениеЗаполнено(ТекстXML) Цикл
		ПозицияПослеПостфикса = 0;
		ПрефиксПространстваИмен = ТекстПослеПрефикса(ТекстXML, " xmlns:", "=", ПозицияПослеПостфикса);
		Если ЗначениеЗаполнено(ПрефиксПространстваИмен) И ПрефиксыПространствИмен.Найти(ПрефиксПространстваИмен) = Неопределено Тогда
			ПрефиксыПространствИмен.Добавить(ПрефиксПространстваИмен);
		КонецЕсли;
		ТекстXML = Сред(ТекстXML, ПозицияПослеПостфикса);
	КонецЦикла;
	
	ПрефиксОбхода = "EQERLRLQKE";
	ТекстXML = СтрЗаменить(ТекстXMLDSig, " xmlns=""", " xmlns=""" + ПрефиксОбхода);
	Для каждого ПрефиксПространстваИмен Из ПрефиксыПространствИмен Цикл
		ТекстXML = СтрЗаменить(ТекстXML, " xmlns:" + ПрефиксПространстваИмен + "=""", " xmlns:" + ПрефиксПространстваИмен + "=""" + ПрефиксОбхода);
	КонецЦикла;
	
	// создать файл XMLDSig
	
	ИмяВременногоФайлаXMLDSig = ПолучитьИмяВременногоФайла();
	ЗапистТекстаXMLDSig = Новый ЗаписьТекста(ИмяВременногоФайлаXMLDSig, "utf-8");
	ЗапистТекстаXMLDSig.Записать(ТекстXML);
	ЗапистТекстаXMLDSig.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайлаXMLDSig);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	// получить необходимые узлы
	
	УзлыКонверт = ДокументDOM.ПолучитьЭлементыПоИмени("Envelope");
	Если УзлыКонверт.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при проверке подписи: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелКонверт = УзлыКонверт[0];
	
	УзлыЗаголовок = УзелКонверт.ПолучитьЭлементыПоИмени("Header");
	Если УзлыЗаголовок.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при проверке подписи: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелЗаголовок = УзлыЗаголовок[0];
	
	УзлыТело = УзелКонверт.ПолучитьЭлементыПоИмени("Body");
	Если УзлыТело.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при проверке подписи: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелТело = УзлыТело[0];
	
	УзлыБезопасность = УзелЗаголовок.ПолучитьЭлементыПоИмени("Security");
	Если УзлыБезопасность.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при проверке подписи: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелБезопасность = УзлыБезопасность[0];
	
	УзлыДвоичныйМаркерБезопасности = УзелБезопасность.ПолучитьЭлементыПоИмени("BinarySecurityToken");
	Если УзлыДвоичныйМаркерБезопасности.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при проверке подписи: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелДвоичныйМаркерБезопасности = УзлыДвоичныйМаркерБезопасности[0];
	
	УзлыПодпись = УзелБезопасность.ПолучитьЭлементыПоИмени("Signature");
	Если УзлыПодпись.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при проверке подписи: данные не подписаны.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелПодпись = УзлыПодпись[0];
	
	УзлыПодписьИнфо = УзелПодпись.ПолучитьЭлементыПоИмени("SignedInfo");
	Если УзлыПодписьИнфо.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при проверке подписи: данные не подписаны.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелПодписьИнфо = УзлыПодписьИнфо[0];
	
	УзлыСсылка = УзелПодписьИнфо.ПолучитьЭлементыПоИмени("Reference");
	Если УзлыСсылка.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при проверке подписи: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелСсылка = УзлыСсылка[0];
	
	УзлыРезультатХеширования = УзелСсылка.ПолучитьЭлементыПоИмени("DigestValue");
	Если УзлыРезультатХеширования.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при проверке подписи: данные не подписаны.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелРезультатХеширования = УзлыРезультатХеширования[0];
	
	УзлыРезультатПодписания = УзелПодпись.ПолучитьЭлементыПоИмени("SignatureValue");
	Если УзлыРезультатПодписания.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при проверке подписи: данные не подписаны.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелРезультатПодписания = УзлыРезультатПодписания[0];
	
	// прочитать значения, убрав переводы строк, перевернуть подпись
	
	СертификатПодписантаВBase64 = СтрЗаменить(УзелДвоичныйМаркерБезопасности.ТекстовоеСодержимое, Символы.ВК, "");
	СертификатПодписантаВBase64 = СтрЗаменить(СертификатПодписантаВBase64, Символы.ПС, "");
	Если ИспользоватьВременноеХранилище Тогда
		ДвоичныеДанныеСертификатаПодписанта = Base64Значение(СертификатПодписантаВBase64);
		СертификатПодписантаВBase64 = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификатаПодписанта, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ХешВBase64 = СтрЗаменить(УзелРезультатХеширования.ТекстовоеСодержимое, Символы.ВК, "");
	ХешВBase64 = СтрЗаменить(ХешВBase64, Символы.ПС, "");
	
	ПодписьВBase64 = ПодписьИзПодписанныхДанныхBase64(УзелРезультатПодписания.ТекстовоеСодержимое);
	Если ИспользоватьВременноеХранилище Тогда
		ДвоичныеДанныеПодписи = Base64Значение(ПодписьВBase64);
		ПодписьВBase64 = ПоместитьВоВременноеХранилище(ДвоичныеДанныеПодписи, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	// добавление недостающих пространств имен и удаление неиспользуемых при исключающей канонизации для обхода ошибки канонизации
	
	Узел = УзелПодписьИнфо;
	Пока Узел.РодительскийУзел <> Неопределено Цикл
		Если Узел.РодительскийУзел.Атрибуты <> Неопределено Тогда
			Для каждого Атрибут Из Узел.РодительскийУзел.Атрибуты Цикл
				Если (Атрибут.Префикс = "xmlns" ИЛИ Атрибут.Имя = "xmlns")
					И УзелПодписьИнфо.Атрибуты.ПолучитьИменованныйЭлемент(Атрибут.URIПространстваИмен, Атрибут.ЛокальноеИмя) = Неопределено Тогда
					АтрибутУзелПодписьИнфо = ДокументDOM.СоздатьАтрибут(Атрибут.URIПространстваИмен, Атрибут.Имя);
					АтрибутУзелПодписьИнфо.Значение = Атрибут.Значение;
					УзелПодписьИнфо.Атрибуты.УстановитьИменованныйЭлемент(АтрибутУзелПодписьИнфо);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Узел = Узел.РодительскийУзел;
	КонецЦикла;
	
	Узел = УзелТело;
	Пока Узел.РодительскийУзел <> Неопределено Цикл
		Если Узел.РодительскийУзел.Атрибуты <> Неопределено Тогда
			Для каждого Атрибут Из Узел.РодительскийУзел.Атрибуты Цикл
				Если (Атрибут.Префикс = "xmlns" ИЛИ Атрибут.Имя = "xmlns")
					И УзелТело.Атрибуты.ПолучитьИменованныйЭлемент(Атрибут.URIПространстваИмен, Атрибут.ЛокальноеИмя) = Неопределено Тогда
					АтрибутУзелТело = ДокументDOM.СоздатьАтрибут(Атрибут.URIПространстваИмен, Атрибут.Имя);
					АтрибутУзелТело.Значение = Атрибут.Значение;
					УзелТело.Атрибуты.УстановитьИменованныйЭлемент(АтрибутУзелТело);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Узел = Узел.РодительскийУзел;
	КонецЦикла;
	
	УзлыМетодКанонизации = УзелПодписьИнфо.ПолучитьЭлементыПоИмени("CanonicalizationMethod");
	АлгоритмКанонизации = ?(УзлыМетодКанонизации.Количество() > 0, УзлыМетодКанонизации[0].ПолучитьАтрибут("Algorithm"), "");
	ЭтоИсключающаяКанонизация = (Лев(АлгоритмКанонизации, 39) = "http://www.w3.org/2001/10/xml-exc-c14n#");
	
	УдаляемыеПространстваИменУзлаПодписьИнфо = Новый Массив;
	УдаляемыеПространстваИменУзлаТело = Новый Массив;
	Если ЭтоИсключающаяКанонизация Тогда
		ПолучитьНеиспользуемыеПространстваИмен(УзелПодписьИнфо, УдаляемыеПространстваИменУзлаПодписьИнфо);
		ПолучитьНеиспользуемыеПространстваИмен(УзелТело, УдаляемыеПространстваИменУзлаТело);
	КонецЕсли;
	
	// канонизация
	
	ЗаписьXML = Новый КаноническаяЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ТипКаноническогоXML.КаноническийXML);
	КаноническийDOM = Новый КаноническийDOM;
	КаноническийDOM.Канонизировать(УзелПодписьИнфо, ЗаписьXML);
	КанонизированныйУзелПодписываемаяИнформация = ЗаписьXML.Закрыть();
	
	ЗаписьXML = Новый КаноническаяЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ТипКаноническогоXML.КаноническийXML);
	КаноническийDOM = Новый КаноническийDOM;
	КаноническийDOM.Канонизировать(УзелТело, ЗаписьXML);
	КанонизированныйУзелИнформацияОбОбъекте = ЗаписьXML.Закрыть();
	КанонизированныйУзелИнформацияОбОбъекте = СтрЗаменить(КанонизированныйУзелИнформацияОбОбъекте, "&#xD;" + Символы.ПС, Символы.ПС); // обход ошибки платформы
	
	// обратные преобразования обхода ошибки канонизации
	
	Для ИндексЭлемента = 0 По ПрефиксыПространствИмен.Количество() - 1 Цикл
		ПрефиксПространстваИмен = ПрефиксыПространствИмен[ПрефиксыПространствИмен.Количество() - 1 - ИндексЭлемента];
		КанонизированныйУзелПодписываемаяИнформация = СтрЗаменить(КанонизированныйУзелПодписываемаяИнформация,
			" xmlns:" + ПрефиксПространстваИмен + "=""" + ПрефиксОбхода, " xmlns:" + ПрефиксПространстваИмен + "=""");
		КанонизированныйУзелПодписываемаяИнформация = СтрЗаменить(КанонизированныйУзелПодписываемаяИнформация,
			" :" + ПрефиксПространстваИмен + "=""" + ПрефиксОбхода, " xmlns:" + ПрефиксПространстваИмен + "="""); // обход ошибки платформы
	КонецЦикла;
	КанонизированныйУзелПодписываемаяИнформация = СтрЗаменить(КанонизированныйУзелПодписываемаяИнформация, " xmlns=""" + ПрефиксОбхода, " xmlns=""");
	КанонизированныйУзелПодписываемаяИнформация = СтрЗаменить(КанонизированныйУзелПодписываемаяИнформация, " =""" + ПрефиксОбхода, " xmlns="""); // обход ошибки платформы
	КанонизированныйУзелПодписываемаяИнформация = СтрЗаменить(КанонизированныйУзелПодписываемаяИнформация, " ="""">", ">"); // обход ошибки платформы
	Для каждого УдаляемоеПространствоИменУзлаПодписьИнфо Из УдаляемыеПространстваИменУзлаПодписьИнфо Цикл
		УдаляемаяПодстрока = " " + СтрЗаменить(УдаляемоеПространствоИменУзлаПодписьИнфо, "=""" + ПрефиксОбхода, "=""");
		КанонизированныйУзелПодписываемаяИнформация = СтрЗаменить(КанонизированныйУзелПодписываемаяИнформация, УдаляемаяПодстрока, "");
	КонецЦикла;
	
	Для ИндексЭлемента = 0 По ПрефиксыПространствИмен.Количество() - 1 Цикл
		ПрефиксПространстваИмен = ПрефиксыПространствИмен[ПрефиксыПространствИмен.Количество() - 1 - ИндексЭлемента];
		КанонизированныйУзелИнформацияОбОбъекте = СтрЗаменить(КанонизированныйУзелИнформацияОбОбъекте,
			" xmlns:" + ПрефиксПространстваИмен + "=""" + ПрефиксОбхода, " xmlns:" + ПрефиксПространстваИмен + "=""");
		КанонизированныйУзелИнформацияОбОбъекте = СтрЗаменить(КанонизированныйУзелИнформацияОбОбъекте,
			" :" + ПрефиксПространстваИмен + "=""" + ПрефиксОбхода, " xmlns:" + ПрефиксПространстваИмен + "="""); // обход ошибки платформы
	КонецЦикла;
	КанонизированныйУзелИнформацияОбОбъекте = СтрЗаменить(КанонизированныйУзелИнформацияОбОбъекте, " xmlns=""" + ПрефиксОбхода, " xmlns=""");
	КанонизированныйУзелИнформацияОбОбъекте = СтрЗаменить(КанонизированныйУзелИнформацияОбОбъекте, " =""" + ПрефиксОбхода, " xmlns="""); // обход ошибки платформы
	КанонизированныйУзелИнформацияОбОбъекте = СтрЗаменить(КанонизированныйУзелИнформацияОбОбъекте, " ="""">", ">"); // обход ошибки платформы
	Для каждого УдаляемоеПространствоИменУзлаТело Из УдаляемыеПространстваИменУзлаТело Цикл
		УдаляемаяПодстрока = " " + СтрЗаменить(УдаляемоеПространствоИменУзлаТело, "=""" + ПрефиксОбхода, "=""");
		КанонизированныйУзелИнформацияОбОбъекте = СтрЗаменить(КанонизированныйУзелИнформацияОбОбъекте, УдаляемаяПодстрока, "");
	КонецЦикла;
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайлаXMLDSig);
	
	// канонизированная информация в Base64
	
	ИмяВременногоФайлаПодписываемойИнформации = ПолучитьИмяВременногоФайла();
	ЗапистТекстаПодписываемойИнформации = Новый ЗаписьТекста(ИмяВременногоФайлаПодписываемойИнформации, "utf-8");
	ЗапистТекстаПодписываемойИнформации.Записать(КанонизированныйУзелПодписываемаяИнформация);
	ЗапистТекстаПодписываемойИнформации.Закрыть();
	
	ДвоичныеДанныеПродписываемойИнформации = Новый ДвоичныеДанные(ИмяВременногоФайлаПодписываемойИнформации);
	КанонизированныйУзелПодписываемаяИнформацияXMLВBase64 = Base64Строка(ДвоичныеДанныеПродписываемойИнформации);
	КанонизированныйУзелПодписываемаяИнформацияXMLВBase64 = Сред(КанонизированныйУзелПодписываемаяИнформацияXMLВBase64, 5); // удалим сигнатуру BOM из файла в кодировке "UTF-8"
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайлаПодписываемойИнформации);
	
	Если ИспользоватьВременноеХранилище Тогда
		ДвоичныеДанныеПродписываемойИнформации = Base64Значение(КанонизированныйУзелПодписываемаяИнформацияXMLВBase64);
		КанонизированныйУзелПодписываемаяИнформацияXMLВBase64 = ПоместитьВоВременноеХранилище(ДвоичныеДанныеПродписываемойИнформации, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ИмяВременногоФайлаОбъекта = ПолучитьИмяВременногоФайла();
	ЗапистТекстаОбъекта = Новый ЗаписьТекста(ИмяВременногоФайлаОбъекта, "utf-8", Символы.ПС, , Символы.ПС);
	ЗапистТекстаОбъекта.Записать(КанонизированныйУзелИнформацияОбОбъекте);
	ЗапистТекстаОбъекта.Закрыть();
	
	ДвоичныеДанныеОбъекта = Новый ДвоичныеДанные(ИмяВременногоФайлаОбъекта);
	КанонизированныйУзелИнформацияОбОбъектеXMLВBase64 = Base64Строка(ДвоичныеДанныеОбъекта);
	КанонизированныйУзелИнформацияОбОбъектеXMLВBase64 = Сред(КанонизированныйУзелИнформацияОбОбъектеXMLВBase64, 5); // удалим сигнатуру BOM из файла в кодировке "UTF-8"
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайлаОбъекта);
	
	Если ИспользоватьВременноеХранилище Тогда
		ДвоичныеДанныеОбъекта = Base64Значение(КанонизированныйУзелИнформацияОбОбъектеXMLВBase64);
		КанонизированныйУзелИнформацияОбОбъектеXMLВBase64 = ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбъекта, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("СертификатПодписантаВBase64", 							СертификатПодписантаВBase64);
	Результат.Вставить("ХешВBase64", 											ХешВBase64);
	Результат.Вставить("ПодписьВBase64", 										ПодписьВBase64);
	Результат.Вставить("КанонизированныйУзелПодписываемаяИнформацияXMLВBase64", КанонизированныйУзелПодписываемаяИнформацияXMLВBase64);
	Результат.Вставить("КанонизированныйУзелИнформацияОбОбъектеXMLВBase64", 	КанонизированныйУзелИнформацияОбОбъектеXMLВBase64);
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьНеиспользуемыеПространстваИмен(Узел, НеиспользуемыеПространстваИмен)
	
	Если Узел.Атрибуты <> Неопределено Тогда
		Для каждого Атрибут Из Узел.Атрибуты Цикл
			Если Атрибут.Префикс = "xmlns" И ЗначениеЗаполнено(Атрибут.ЛокальноеИмя)
				И НЕ ПрефиксПространстваИменИспользуется(Атрибут.ЛокальноеИмя, Узел) Тогда
				
				НеиспользуемыеПространстваИмен.Добавить(Атрибут.Имя + "=""" + Атрибут.Значение + """");
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		ПолучитьНеиспользуемыеПространстваИмен(ДочернийУзел, НеиспользуемыеПространстваИмен);
	КонецЦикла;
	
КонецПроцедуры

Функция ПрефиксПространстваИменИспользуется(Префикс, Узел)
	
	Если Узел.Префикс = Префикс Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Узел.Атрибуты <> Неопределено Тогда
		Для каждого Атрибут Из Узел.Атрибуты Цикл
			Если Атрибут.Префикс = Префикс Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		Если ПрефиксПространстваИменИспользуется(Префикс, ДочернийУзел) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПодписьSOAP

Функция ЗаписиЭЛНДляПодписиSOAP64(
		Знач ВыгрузкаЭЛН,
		Знач ДобавляемыеАтрибутыЗаписи,
		МассивНомеровЛистковНетрудоспособности = Неопределено) Экспорт
	
	ВременныйФайлВыгрузки = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайлВыгрузки, "utf-8");
	ЗаписьТекста.Записать(ВыгрузкаЭЛН);
	ЗаписьТекста.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ВременныйФайлВыгрузки);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлВыгрузки);
	
	Если ДокументDOM.ДочерниеУзлы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УзелROWSET = ДокументDOM.ДочерниеУзлы[0];
	
	Если УзелROWSET.ДочерниеУзлы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив;
	МассивНомеровЛистковНетрудоспособности = Новый Массив;
	
	Для каждого УзелROW Из УзелROWSET.ДочерниеУзлы Цикл
		НомерЛисткаНетрудоспособностиСтрокой = УзелROW.ПолучитьЭлементыПоИмени("LN_CODE")[0].ТекстовоеСодержимое;
		НомерЗаписиСтрокой = "ELN_" + НомерЛисткаНетрудоспособностиСтрокой;
		МассивНомеровЛистковНетрудоспособности.Добавить(НомерЛисткаНетрудоспособностиСтрокой);
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьDOM.Записать(УзелROW, ЗаписьXML);
		СтрокаXML = ЗаписьXML.Закрыть();
		
		СтрокаXML = СтрЗаменить(СтрокаXML, "<", "<eln:");
		СтрокаXML = СтрЗаменить(СтрокаXML, "<eln:/", "</eln:");
		СтрокаXML = СтрЗаменить(СтрокаXML, "<eln:ROW", "<eln:ROW" + ?(ДобавляемыеАтрибутыЗаписи <> "", " " + ДобавляемыеАтрибутыЗаписи, "")
			+ " wsu:Id=""" + НомерЗаписиСтрокой + """");
		
		ВременныйФайлЗаписи = ПолучитьИмяВременногоФайла();
		ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайлЗаписи, "utf-8");
		ЗаписьТекста.Записать(СтрокаXML);
		ЗаписьТекста.Закрыть();
		
		ДвоичныеДанныеЗаписи = Новый ДвоичныеДанные(ВременныйФайлЗаписи);
		СтрокаXML64 = Base64Строка(ДвоичныеДанныеЗаписи);
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлЗаписи);
		
		Результат.Добавить(СтрокаXML64);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция АдресSOAPЗагрузкиЭЛНВФССПоМассивуПодписей(
		Знач РегистрационныйНомерФСС,
		Знач ВыгрузкаЭЛН,
		Знач МассивПодписейЭЛН64,
		Знач МассивНомеровЛистковНетрудоспособности,
		Знач СертификатПолучателя64,
		Знач ДобавляемыеАтрибутыЗаписи,
		Знач ДобавляемыеАтрибутыПодписи,
		Знач ВозвращатьТекстВBase64 = Ложь) Экспорт
	
	ПараметрыФормата = ПараметрыФорматаЭЛН();
	
	ТекстУзловПодписи = "";
	ИспользуетсяВременноеХранилище = Ложь;
	НомерЗаписи = 1;
	Для каждого ПодписьЭЛН64 Из МассивПодписейЭЛН64 Цикл
		
		ВременныйФайлПодписи = ПолучитьИмяВременногоФайла();
		Если ЭтоАдресВременногоХранилища(ПодписьЭЛН64) Тогда
			ИспользуетсяВременноеХранилище = Истина;
			ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(ПодписьЭЛН64);
		Иначе
			ДвоичныеДанныеПодписи = Base64Значение(ПодписьЭЛН64);
		КонецЕсли;
		ДвоичныеДанныеПодписи.Записать(ВременныйФайлПодписи);
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ВременныйФайлПодписи);
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлПодписи);
		
		УзелПодписываемаяИнформация = ДокументDOM.ПолучитьЭлементыПоИмени("SignedInfo")[0];
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьDOM.Записать(УзелПодписываемаяИнформация, ЗаписьXML);
		ПодписываемаяИнформацияXML = ЗаписьXML.Закрыть();
		Если ДобавляемыеАтрибутыПодписи <> "" Тогда
			ПодписываемаяИнформацияXML = СтрЗаменить(ПодписываемаяИнформацияXML, " " + ДобавляемыеАтрибутыПодписи, "");
		КонецЕсли;
		
		СодержимоеПодписи = ДокументDOM.ПолучитьЭлементыПоИмени("SignatureValue")[0].ТекстовоеСодержимое;
		СодержимоеПодписи = СтрЗаменить(СодержимоеПодписи, Символы.ПС, "");
		СодержимоеПодписи = СтрЗаменить(СодержимоеПодписи, Символы.ВК, "");
		
		КоличествоПодписантов = ?(ПараметрыФормата.Версия = "1.0", 1, 3);
		
		Для НомерПодписанта = 1 По КоличествоПодписантов Цикл
			Если НомерПодписанта = 1 Тогда
				ОбозначениеПодписанта = "insurer";
			ИначеЕсли НомерПодписанта = 2 Тогда
				ОбозначениеПодписанта = "chief";
			ИначеЕсли НомерПодписанта = 3 Тогда
				ОбозначениеПодписанта = "accountant";
			КонецЕсли;
			
			ТекстУзловПодписи = ТекстУзловПодписи + СтрШаблон("
				|		<wsse:Security soapenv:actor=""http://eln.fss.ru/actor/%4/%5/%6"" xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
				|			<wsse:BinarySecurityToken EncodingType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary"" ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3"" wsu:Id=""http://eln.fss.ru/actor/%4/%5/%6"">%7
				|			</wsse:BinarySecurityToken>
				|			<Signature %1>
				|%2
				|				<SignatureValue>%3</SignatureValue>
				|				<KeyInfo>
				|					<wsse:SecurityTokenReference>
				|						<wsse:Reference URI=""#http://eln.fss.ru/actor/%4/%5/%6"" ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3""/>
				|					</wsse:SecurityTokenReference>
				|				</KeyInfo>
				|			</Signature>
				|		</wsse:Security>",
				ДобавляемыеАтрибутыПодписи,
				ПодписываемаяИнформацияXML,
				СодержимоеПодписи,
				ОбозначениеПодписанта,
				РегистрационныйНомерФСС,
				МассивНомеровЛистковНетрудоспособности[НомерЗаписи - 1],
				СертификатПолучателя64);
		КонецЦикла;
		
		НомерЗаписи = НомерЗаписи + 1;
		
	КонецЦикла;
	
	ВременныйФайлВыгрузки = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайлВыгрузки, "utf-8");
	ЗаписьТекста.Записать(ВыгрузкаЭЛН);
	ЗаписьТекста.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ВременныйФайлВыгрузки);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлВыгрузки);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	СодержимоеВыгрузкиXML = ЗаписьXML.Закрыть();
	
	ПозицияПослеУзлаНачалаЗаписей = 0;
	ТекстУзлаНачалаЗаписей = ТекстПослеПрефикса(СодержимоеВыгрузкиXML, "<ROWSET", ">", ПозицияПослеУзлаНачалаЗаписей);
	Если ТекстУзлаНачалаЗаписей <> Неопределено Тогда
		ТекстПослеУзла = Сред(СодержимоеВыгрузкиXML, ПозицияПослеУзлаНачалаЗаписей);
		
		ТекстУзлаНачалаЗаписей = СтрЗаменить(ТекстУзлаНачалаЗаписей, " xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""", "");
		ТекстУзлаНачалаЗаписей = СтрЗаменить(ТекстУзлаНачалаЗаписей, " version=", " eln:version=");
		ТекстУзлаНачалаЗаписей = СтрЗаменить(ТекстУзлаНачалаЗаписей, " software=", " eln:software=");
		ТекстУзлаНачалаЗаписей = СтрЗаменить(ТекстУзлаНачалаЗаписей, " version_software=", " eln:version_software=");
		ТекстУзлаНачалаЗаписей = СтрЗаменить(ТекстУзлаНачалаЗаписей, " author=", " eln:author=");
		ТекстУзлаНачалаЗаписей = СтрЗаменить(ТекстУзлаНачалаЗаписей, " phone=", " eln:phone=");
		ТекстУзлаНачалаЗаписей = СтрЗаменить(ТекстУзлаНачалаЗаписей, " email=", " eln:email=");
		
		СодержимоеВыгрузкиXML = "<ROWSET" + ТекстУзлаНачалаЗаписей + ">";
		НомерЗаписи = 1;
		ПозицияПослеУзлаЗаписи = 0;
		
		Пока Истина Цикл
			ПозицияНачалаУзла = 0;
			ТекстУзлаЗаписи = ТекстПослеПрефикса(ТекстПослеУзла, "<ROW", "</ROW>", ПозицияПослеУзлаЗаписи,, ПозицияНачалаУзла);
			Если ТекстУзлаЗаписи = Неопределено Тогда
				СодержимоеВыгрузкиXML = СодержимоеВыгрузкиXML + ТекстПослеУзла;
				Прервать;
				
			Иначе
				НомерЗаписиСтрокой = "ELN_" + МассивНомеровЛистковНетрудоспособности[НомерЗаписи - 1];
				
				ТекстУзлаЗаписи = "<ROW wsu:Id=""" + НомерЗаписиСтрокой + """" + ТекстУзлаЗаписи + "</ROW>";
				СодержимоеВыгрузкиXML = СодержимоеВыгрузкиXML + Лев(ТекстПослеУзла, ПозицияНачалаУзла - 1) + ТекстУзлаЗаписи;
				
				ТекстПослеУзла = Сред(ТекстПослеУзла, ПозицияПослеУзлаЗаписи);
				НомерЗаписи = НомерЗаписи + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СодержимоеВыгрузкиXML = СтрЗаменить(СодержимоеВыгрузкиXML, "<", "<eln:");
	СодержимоеВыгрузкиXML = СтрЗаменить(СодержимоеВыгрузкиXML, "<eln:/", "</eln:");
	
	ТекстSOAP = СтрШаблон(
		"<soapenv:Envelope %1>
		|	<soapenv:Header>%3
		|	</soapenv:Header>
		|	<soapenv:Body>
		|		<eln:prParseReestrFile>
		|			<eln:request>
		|				<eln:regNum>%4</eln:regNum>
		|				<eln:pXmlFile>
		|%5
		|				</eln:pXmlFile>
		|			</eln:request>
		|		</eln:prParseReestrFile>
		|	</soapenv:Body>
		|</soapenv:Envelope>",
		ДобавляемыеАтрибутыЗаписи,
		СертификатПолучателя64,
		ТекстУзловПодписи,
		РегистрационныйНомерФСС,
		СодержимоеВыгрузкиXML);
	
	ТекстSOAP = СтрЗаменить(ТекстSOAP, Символы.Таб, "");
	ТекстSOAP = СтрЗаменить(ТекстSOAP, Символы.ВК, "");
	ТекстSOAP = СтрЗаменить(ТекстSOAP, Символы.ПС, "");
	
	Если НЕ ВозвращатьТекстВBase64 ИЛИ ИспользуетсяВременноеХранилище Тогда
		Результат = ПоместитьВоВременноеХранилище(ТекстSOAP, Новый УникальныйИдентификатор);
		
	Иначе
		ВременныйФайлТекстаSOAP = ПолучитьИмяВременногоФайла();
		ЗаписываемыйФайлТекстаSOAP = Новый ЗаписьТекста(ВременныйФайлТекстаSOAP, "utf-8");
		ЗаписываемыйФайлТекстаSOAP.Записать(ТекстSOAP);
		ЗаписываемыйФайлТекстаSOAP.Закрыть();
		
		ДвоичныеДанныеТекстаSOAP = Новый ДвоичныеДанные(ВременныйФайлТекстаSOAP);
		Результат = Base64Строка(ДвоичныеДанныеТекстаSOAP);
		Результат = Сред(Результат, 5); // удалим сигнатуру BOM из файла в кодировке "UTF-8"
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлТекстаSOAP);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросОперацииСЭЛНДляПодписиSOAP64(
		Знач ВыгрузкаЗапросаОперацииСЭЛН,
		Знач ДобавляемыеАтрибутыЗапроса,
		Знач РегистрационныйНомерФСС) Экспорт
	
	ТекстXMLЗапроса = СтрЗаменить(ВыгрузкаЗапросаОперацииСЭЛН, "<", "<fil:");
	ТекстXMLЗапроса = СтрЗаменить(ТекстXMLЗапроса, "<fil:/", "</fil:");
	
	ТекстXMLЗапроса = СтрШаблон(
		"<soapenv:Body %1 wsu:Id=""REGNO_%2"">%3</soapenv:Body>",
		ДобавляемыеАтрибутыЗапроса,
		РегистрационныйНомерФСС,
		ТекстXMLЗапроса);
	
	ВременныйФайлЗапроса = ПолучитьИмяВременногоФайла();
	ЗаписьТекстаЗапроса = Новый ЗаписьТекста(ВременныйФайлЗапроса, "utf-8");
	ЗаписьТекстаЗапроса.Записать(ТекстXMLЗапроса);
	ЗаписьТекстаЗапроса.Закрыть();
	
	ДвоичныеДанныеЗапроса = Новый ДвоичныеДанные(ВременныйФайлЗапроса);
	ТекстXMLЗапроса64 = Base64Строка(ДвоичныеДанныеЗапроса);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлЗапроса);
	
	Возврат ТекстXMLЗапроса64;
	
КонецФункции

Функция АдресSOAPЗапросОперацииСЭЛНВФССПоПодписи(
		Знач РегистрационныйНомерФСС,
		Знач ВыгрузкаЗапроса,
		Знач ПодписьЗапросаЭЛН64,
		Знач СертификатПолучателя64,
		Знач ДобавляемыеАтрибутыЗапроса,
		Знач ДобавляемыеАтрибутыПодписи,
		Знач ВозвращатьТекстВBase64 = Ложь) Экспорт
	
	ВременныйФайлПодписи = ПолучитьИмяВременногоФайла();
	ИспользуетсяВременноеХранилище = ЭтоАдресВременногоХранилища(ПодписьЗапросаЭЛН64);
	Если ИспользуетсяВременноеХранилище Тогда
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(ПодписьЗапросаЭЛН64);
	Иначе
		ДвоичныеДанныеПодписи = Base64Значение(ПодписьЗапросаЭЛН64);
	КонецЕсли;
	ДвоичныеДанныеПодписи.Записать(ВременныйФайлПодписи);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ВременныйФайлПодписи);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлПодписи);
	
	УзелПодписываемаяИнформация = ДокументDOM.ПолучитьЭлементыПоИмени("SignedInfo")[0];
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(УзелПодписываемаяИнформация, ЗаписьXML);
	ПодписываемаяИнформацияXML = ЗаписьXML.Закрыть();
	Если ДобавляемыеАтрибутыПодписи <> "" Тогда
		ПодписываемаяИнформацияXML = СтрЗаменить(ПодписываемаяИнформацияXML, " " + ДобавляемыеАтрибутыПодписи, "");
	КонецЕсли;
	
	СодержимоеПодписи = ДокументDOM.ПолучитьЭлементыПоИмени("SignatureValue")[0].ТекстовоеСодержимое;
	СодержимоеПодписи = СтрЗаменить(СодержимоеПодписи, Символы.ПС, "");
	СодержимоеПодписи = СтрЗаменить(СодержимоеПодписи, Символы.ВК, "");
	
	ТекстУзлаПодписи = СтрШаблон("
		|			<Signature %1>
		|%2
		|				<SignatureValue>%3</SignatureValue>
		|				<KeyInfo>
		|					<wsse:SecurityTokenReference>
		|						<wsse:Reference URI=""#http://eln.fss.ru/actor/insurer/%4"" ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3""/>
		|					</wsse:SecurityTokenReference>
		|				</KeyInfo>
		|			</Signature>",
		ДобавляемыеАтрибутыПодписи,
		ПодписываемаяИнформацияXML,
		СодержимоеПодписи,
		РегистрационныйНомерФСС);
	
	ВыгрузкаЗапроса = СтрЗаменить(ВыгрузкаЗапроса, "<", "<fil:");
	ВыгрузкаЗапроса = СтрЗаменить(ВыгрузкаЗапроса, "<fil:/", "</fil:");
	
	ВыгрузкаЗапроса = СтрШаблон(
		"<soapenv:Body wsu:Id=""REGNO_%1"">%2</soapenv:Body>",
		РегистрационныйНомерФСС,
		ВыгрузкаЗапроса);
	
	ТекстSOAP = СтрШаблон(
		"<soapenv:Envelope %1>
		|	<soapenv:Header>
		|		<wsse:Security soapenv:actor=""http://eln.fss.ru/actor/insurer/%4"" xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
		|			<wsse:BinarySecurityToken EncodingType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary"" ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3"" wsu:Id=""http://eln.fss.ru/actor/insurer/%4"">%2
		|			</wsse:BinarySecurityToken>%3
		|		</wsse:Security>
		|	</soapenv:Header>
		|%5
		|</soapenv:Envelope>",
		ДобавляемыеАтрибутыЗапроса,
		СертификатПолучателя64,
		ТекстУзлаПодписи,
		РегистрационныйНомерФСС,
		ВыгрузкаЗапроса);
	
	ТекстSOAP = СтрЗаменить(ТекстSOAP, Символы.Таб, "");
	ТекстSOAP = СтрЗаменить(ТекстSOAP, Символы.ВК, "");
	ТекстSOAP = СтрЗаменить(ТекстSOAP, Символы.ПС, "");
	
	Если НЕ ВозвращатьТекстВBase64 ИЛИ ИспользуетсяВременноеХранилище Тогда
		Результат = ПоместитьВоВременноеХранилище(ТекстSOAP, Новый УникальныйИдентификатор);
		
	Иначе
		ВременныйФайлТекстаSOAP = ПолучитьИмяВременногоФайла();
		ЗаписываемыйФайлТекстаSOAP = Новый ЗаписьТекста(ВременныйФайлТекстаSOAP, "utf-8");
		ЗаписываемыйФайлТекстаSOAP.Записать(ТекстSOAP);
		ЗаписываемыйФайлТекстаSOAP.Закрыть();
		
		ДвоичныеДанныеТекстаSOAP = Новый ДвоичныеДанные(ВременныйФайлТекстаSOAP);
		Результат = Base64Строка(ДвоичныеДанныеТекстаSOAP);
		Результат = Сред(Результат, 5); // удалим сигнатуру BOM из файла в кодировке "UTF-8"
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлТекстаSOAP);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ШифрованиеSOAP

Функция АдресЗашифрованногоXMLПоДанным(
		Знач СимметричныйКлючВBase64,
		Знач ПубличныйКлючВBase64,
		Знач ИнициализационныйВекторВBase64,
		Знач ЗашифрованныеДанныеВBase64,
		Знач СертификатШифрованияОтветаВBase64,
		Знач ВозвращатьТекстВBase64 = Ложь,
		Знач ШаблонРезультата = Неопределено) Экспорт
	
	СимметричныйКлючДляXMLВBase64 = Неопределено;
	ЗашифрованныеДанныеДляXMLВBase64 = Неопределено;
	ДанныеДляЗашифрованногоXML = ПолучитьДанныеДляЗашифрованногоXML(
		СимметричныйКлючВBase64,
		ПубличныйКлючВBase64,
		ИнициализационныйВекторВBase64,
		ЗашифрованныеДанныеВBase64);
	Если ДанныеДляЗашифрованногоXML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	СимметричныйКлючДляXMLВBase64 		= ДанныеДляЗашифрованногоXML.СимметричныйКлючДляXMLВBase64;
	ЗашифрованныеДанныеДляXMLВBase64 	= ДанныеДляЗашифрованногоXML.ЗашифрованныеДанныеДляXMLВBase64;
	
	СертификатШифрованияОтветаВBase64 = СтрЗаменить(СертификатШифрованияОтветаВBase64, Символы.ВК, "");
	СимметричныйКлючДляXMLВBase64 = СтрЗаменить(СимметричныйКлючДляXMLВBase64, Символы.ВК, "");
	ЗашифрованныеДанныеДляXMLВBase64 = СтрЗаменить(ЗашифрованныеДанныеДляXMLВBase64, Символы.ВК, "");
	ТекстЗашифрованногоXML = СтрШаблон(
		"<xenc:EncryptedData Type=""http://www.w3.org/2001/04/xmlenc#Element"" xmlns:xenc=""http://www.w3.org/2001/04/xmlenc#"">
		|	<xenc:EncryptionMethod Algorithm=""urn:ietf:params:xml:ns:cpxmlsec:algorithms:gost28147""/>
		|	<ds:KeyInfo xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"">
		|		<xenc:EncryptedKey>
		|			<xenc:EncryptionMethod Algorithm=""urn:ietf:params:xml:ns:cpxmlsec:algorithms:transport-gost2001""/>
		|			<ds:KeyInfo>
		|				<ds:X509Data>
		|					<ds:X509Certificate>%1</ds:X509Certificate>
		|				</ds:X509Data>
		|			</ds:KeyInfo>
		|			<xenc:CipherData>
		|				<xenc:CipherValue>%2</xenc:CipherValue>
		|			</xenc:CipherData>
		|		</xenc:EncryptedKey>
		|	</ds:KeyInfo>
		|	<xenc:CipherData>
		|		<xenc:CipherValue>%3</xenc:CipherValue>
		|	</xenc:CipherData>
		|</xenc:EncryptedData>",
		СертификатШифрованияОтветаВBase64,
		СимметричныйКлючДляXMLВBase64,
		ЗашифрованныеДанныеДляXMLВBase64);
	
	Если ШаблонРезультата <> Неопределено Тогда
		ТекстЗашифрованногоXML = СтрШаблон(ШаблонРезультата, ТекстЗашифрованногоXML);
	КонецЕсли;
	
	Если НЕ ВозвращатьТекстВBase64 Тогда
		Результат = ПоместитьВоВременноеХранилище(ТекстЗашифрованногоXML, Новый УникальныйИдентификатор);
		
	Иначе
		ВременныйФайлТекстаЗашифрованногоXML = ПолучитьИмяВременногоФайла();
		ЗаписываемыйФайлТекстаЗашифрованногоXML = Новый ЗаписьТекста(ВременныйФайлТекстаЗашифрованногоXML, "utf-8");
		ЗаписываемыйФайлТекстаЗашифрованногоXML.Записать(ТекстЗашифрованногоXML);
		ЗаписываемыйФайлТекстаЗашифрованногоXML.Закрыть();
		
		ДвоичныеДанныеТекстаЗашифрованногоXML = Новый ДвоичныеДанные(ВременныйФайлТекстаЗашифрованногоXML);
		Результат = Base64Строка(ДвоичныеДанныеТекстаЗашифрованногоXML);
		Результат = Сред(Результат, 5); // удалим сигнатуру BOM из файла в кодировке "UTF-8"
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлТекстаЗашифрованногоXML);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеДляЗашифрованногоXML(
		Знач СимметричныйКлючВBase64,
		Знач ПубличныйКлючВBase64,
		Знач ИнициализационныйВекторВBase64,
		Знач ЗашифрованныеДанныеВBase64)
	
	// формирование симметричного ключа для вставки в XML
	
	ВременныйФайлСимметричногоКлюча = ПолучитьИмяВременногоФайла();
	Если ЭтоАдресВременногоХранилища(СимметричныйКлючВBase64) Тогда
		ДвоичныеДанныеСимметричногоКлюча = ПолучитьИзВременногоХранилища(СимметричныйКлючВBase64);
	Иначе
		ДвоичныеДанныеСимметричногоКлюча = Base64Значение(СимметричныйКлючВBase64);
	КонецЕсли;
	ДвоичныеДанныеСимметричногоКлюча.Записать(ВременныйФайлСимметричногоКлюча);
	МассивСимметричногоКлюча = ПрочитатьФайлВМассив(ВременныйФайлСимметричногоКлюча);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлСимметричногоКлюча);
	Если МассивСимметричногоКлюча.Количество() < 60 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Неверный формат данных при шифрации'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ВременныйФайлПубличногоКлюча = ПолучитьИмяВременногоФайла();
	Если ЭтоАдресВременногоХранилища(ПубличныйКлючВBase64) Тогда
		ДвоичныеДанныеПубличногоКлюча = ПолучитьИзВременногоХранилища(ПубличныйКлючВBase64);
	Иначе
		ДвоичныеДанныеПубличногоКлюча = Base64Значение(ПубличныйКлючВBase64);
	КонецЕсли;
	ДвоичныеДанныеПубличногоКлюча.Записать(ВременныйФайлПубличногоКлюча);
	МассивПубличногоКлюча = ПрочитатьФайлВМассив(ВременныйФайлПубличногоКлюча);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлПубличногоКлюча);
	Если МассивСимметричногоКлюча.Количество() < 64 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Неверный формат данных при шифрации'"));
		Возврат Неопределено;
	КонецЕсли;
	
	// заголовок симметричного ключа для XML
	МассивСимметричногоКлючаДляXML = ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("30 81 A4 30 28 04 20");
	
	// добавление симметричного ключа
	Для ИндексМассива = 24 По 55 Цикл
		МассивСимметричногоКлючаДляXML.Добавить(МассивСимметричногоКлюча[ИндексМассива]);
	КонецЦикла;
	
	МассивСимметричногоКлючаДляXML.Добавить(4);
	МассивСимметричногоКлючаДляXML.Добавить(4);
	
	// добавление имитовставки
	Для ИндексМассива = 56 По 59 Цикл
		МассивСимметричногоКлючаДляXML.Добавить(МассивСимметричногоКлюча[ИндексМассива]);
	КонецЦикла;
	
	МассивИнформацииОбАлгоритмах = ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении(
		"A0 78 06 07 2A 85 03 02 02 1F 01 A0 63 30 1C 06 06 2A 85 03 02 02 13 30 12 06 07 2A 85 03 02 02 24 00 06 07 2A 85 03 02 02 1E 01 03 43 00 04 40");
	Для каждого ЭлементМассива Из МассивИнформацииОбАлгоритмах Цикл
		МассивСимметричногоКлючаДляXML.Добавить(ЭлементМассива);
	КонецЦикла;
	
	// добавление публичного эфемерного ключа отправителя
	Для ИндексМассива = МассивПубличногоКлюча.Количество() - 64 По МассивПубличногоКлюча.Количество() - 1 Цикл
		МассивСимметричногоКлючаДляXML.Добавить(МассивПубличногоКлюча[ИндексМассива]);
	КонецЦикла;
	
	МассивСимметричногоКлючаДляXML.Добавить(4);
	МассивСимметричногоКлючаДляXML.Добавить(8);
	
	// добавление инициализационного вектора симметричного ключа
	Для ИндексМассива = 16 По 23 Цикл
		МассивСимметричногоКлючаДляXML.Добавить(МассивСимметричногоКлюча[ИндексМассива]);
	КонецЦикла;
	
	ВременныйФайлСимметричногоКлючаДляXML = ПолучитьИмяВременногоФайла();
	ЗаписатьФайлИзМассива(ВременныйФайлСимметричногоКлючаДляXML, МассивСимметричногоКлючаДляXML);
	ДвоичныеДанныеСимметричногоКлючаДляXML = Новый ДвоичныеДанные(ВременныйФайлСимметричногоКлючаДляXML);
	СимметричныйКлючДляXMLВBase64 = Base64Строка(ДвоичныеДанныеСимметричногоКлючаДляXML);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлСимметричногоКлючаДляXML);
	
	// формирование зашифрованных данных для вставки в XML
	
	ВременныйФайлИнициализационногоВектора = ПолучитьИмяВременногоФайла();
	Если ЭтоАдресВременногоХранилища(ИнициализационныйВекторВBase64) Тогда
		ДвоичныеДанныеИнициализационногоВектора = ПолучитьИзВременногоХранилища(ИнициализационныйВекторВBase64);
	Иначе
		ДвоичныеДанныеИнициализационногоВектора = Base64Значение(ИнициализационныйВекторВBase64);
	КонецЕсли;
	ДвоичныеДанныеИнициализационногоВектора.Записать(ВременныйФайлИнициализационногоВектора);
	Если ДвоичныеДанныеИнициализационногоВектора.Размер() <> 8 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Неверный формат данных при шифрации'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ВременныйФайлЗашифрованныхДанных = ПолучитьИмяВременногоФайла();
	Если ЭтоАдресВременногоХранилища(ЗашифрованныеДанныеВBase64) Тогда
		ДвоичныеДанныеЗашифрованныхДанных = ПолучитьИзВременногоХранилища(ЗашифрованныеДанныеВBase64);
	Иначе
		ДвоичныеДанныеЗашифрованныхДанных = Base64Значение(ЗашифрованныеДанныеВBase64);
	КонецЕсли;
	ДвоичныеДанныеЗашифрованныхДанных.Записать(ВременныйФайлЗашифрованныхДанных);
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить(ВременныйФайлИнициализационногоВектора);
	МассивИмен.Добавить(ВременныйФайлЗашифрованныхДанных);
	ВременныйФайлЗашифрованныхДанныхДляXML = ПолучитьИмяВременногоФайла();
	ОбъединитьФайлы(МассивИмен, ВременныйФайлЗашифрованныхДанныхДляXML);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлИнициализационногоВектора);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлЗашифрованныхДанных);
	
	ДвоичныеДанныеЗашифрованныхДанныхДляXML = Новый ДвоичныеДанные(ВременныйФайлЗашифрованныхДанныхДляXML);
	ЗашифрованныеДанныеДляXMLВBase64 = Base64Строка(ДвоичныеДанныеЗашифрованныхДанныхДляXML);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлЗашифрованныхДанныхДляXML);
	
	Результат = Новый Структура;
	Результат.Вставить("СимметричныйКлючДляXMLВBase64", 	СимметричныйКлючДляXMLВBase64);
	Результат.Вставить("ЗашифрованныеДанныеДляXMLВBase64", 	ЗашифрованныеДанныеДляXMLВBase64);
	Возврат Результат;
	
КонецФункции

Функция ДанныеПоАдресуЗашифрованногоXML(
		Знач АдресЗашифрованногоXML,
		Знач ПереданТекстВBase64 = Ложь,
		Знач МассивРодительскихУзловЗашифрованныхДанных = Неопределено,
		Знач ВозвращатьТекстВBase64 = Истина) Экспорт
	
	// прочитать зашифрованный XML
	
	ИмяВременногоФайлаЗашифрованногоXML = ПолучитьИмяВременногоФайла();
	Если ПереданТекстВBase64 Тогда
		ДвоичныеДанныеЗашифрованногоXML = Base64Значение(АдресЗашифрованногоXML);
		ДвоичныеДанныеЗашифрованногоXML.Записать(ИмяВременногоФайлаЗашифрованногоXML);
	Иначе
		ТекстЗашифрованногоXML = ПолучитьИзВременногоХранилища(АдресЗашифрованногоXML);
		
		ФайлЗашифрованногоXML = ПолучитьИмяВременногоФайла();
		ТекстовыйФайлЗашифрованногоXML = Новый ЗаписьТекста(ИмяВременногоФайлаЗашифрованногоXML, "windows-1251");
		ТекстовыйФайлЗашифрованногоXML.Записать(ТекстЗашифрованногоXML);
		ТекстовыйФайлЗашифрованногоXML.Закрыть();
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайлаЗашифрованногоXML);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайлаЗашифрованногоXML);
	
	// получить необходимые узлы
	
	РодительскийУзел = ДокументDOM;
	Если МассивРодительскихУзловЗашифрованныхДанных <> Неопределено Тогда
		Для каждого ИмяРодительскогоУзла Из МассивРодительскихУзловЗашифрованныхДанных Цикл
			РодительскиеУзлы = РодительскийУзел.ПолучитьЭлементыПоИмени(ИмяРодительскогоУзла);
			Если РодительскиеУзлы.Количество() = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при дешифрации: неверный формат данных.'"));
				Возврат Неопределено;
			КонецЕсли;
			
			РодительскийУзел = РодительскиеУзлы[0];
		КонецЦикла;
	КонецЕсли;
	
	УзлыЗашифрованныхДанных = РодительскийУзел.ПолучитьЭлементыПоИмени("EncryptedData");
	Если УзлыЗашифрованныхДанных.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при дешифрации: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелЗашифрованныхДанных = УзлыЗашифрованныхДанных[0];
	
	УзлыИнформацияОКлючах = УзелЗашифрованныхДанных.ПолучитьЭлементыПоИмени("KeyInfo");
	Если УзлыИнформацияОКлючах.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при дешифрации: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелИнформацияОКлючах = УзлыИнформацияОКлючах[0];
	
	УзлыЗашифрованныйКлюч = УзелИнформацияОКлючах.ПолучитьЭлементыПоИмени("EncryptedKey");
	Если УзлыЗашифрованныйКлюч.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при дешифрации: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелЗашифрованныйКлюч = УзлыЗашифрованныйКлюч[0];
	
	УзлыИнформацияОКлючахШифрования = УзелЗашифрованныйКлюч.ПолучитьЭлементыПоИмени("KeyInfo");
	Если УзлыИнформацияОКлючахШифрования.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при дешифрации: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелИнформацияОКлючахШифрования = УзлыИнформацияОКлючахШифрования[0];
	
	УзлыДанныеX509 = УзелИнформацияОКлючахШифрования.ПолучитьЭлементыПоИмени("X509Data");
	Если УзлыИнформацияОКлючахШифрования.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при дешифрации: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелДанныеX509 = УзлыДанныеX509[0];
	
	УзлыСертификатX509 = УзелДанныеX509.ПолучитьЭлементыПоИмени("X509Certificate");
	Если УзлыСертификатX509.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при дешифрации: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелСертификатX509 = УзлыСертификатX509[0];
	
	УзлыЗашифрованныеДанныеКлюча = УзелЗашифрованныйКлюч.ПолучитьЭлементыПоИмени("CipherData");
	Если УзлыЗашифрованныеДанныеКлюча.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при дешифрации: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелЗашифрованныеДанныеКлюча = УзлыЗашифрованныеДанныеКлюча[0];
	
	УзлыЗашифрованноеЗначениеКлюча = УзелЗашифрованныеДанныеКлюча.ПолучитьЭлементыПоИмени("CipherValue");
	Если УзлыЗашифрованноеЗначениеКлюча.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при дешифрации: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелЗашифрованноеЗначениеКлюча = УзлыЗашифрованноеЗначениеКлюча[0];
	
	УзлыЗашифрованныеДанные = УзелЗашифрованныхДанных.ПолучитьЭлементыПоИмени("CipherData");
	Если УзлыЗашифрованныеДанные.Количество() < 2 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при дешифрации: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелЗашифрованныеДанные = УзлыЗашифрованныеДанные[1];
	
	УзлыЗашифрованноеЗначение = УзелЗашифрованныеДанные.ПолучитьЭлементыПоИмени("CipherValue");
	Если УзлыЗашифрованноеЗначение.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при дешифрации: неверный формат данных.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	УзелЗашифрованноеЗначение = УзлыЗашифрованноеЗначение[0];
	
	// прочитать значения, убрав переводы строк
	
	СертификатШифрованияОтветаВBase64 = СтрЗаменить(УзелСертификатX509.ТекстовоеСодержимое, Символы.ВК, "");
	СертификатШифрованияОтветаВBase64 = СтрЗаменить(СертификатШифрованияОтветаВBase64, Символы.ПС, "");
	
	СимметричныйКлючИзXMLВBase64 = СтрЗаменить(УзелЗашифрованноеЗначениеКлюча.ТекстовоеСодержимое, Символы.ВК, "");
	СимметричныйКлючИзXMLВBase64 = СтрЗаменить(СимметричныйКлючИзXMLВBase64, Символы.ПС, "");
	
	ЗашифрованныеДанныеИзXMLВBase64 = СтрЗаменить(УзелЗашифрованноеЗначение.ТекстовоеСодержимое, Символы.ВК, "");
	ЗашифрованныеДанныеИзXMLВBase64 = СтрЗаменить(ЗашифрованныеДанныеИзXMLВBase64, Символы.ПС, "");
	
	Результат = РазобратьДанныеИзЗашифрованногоXML(СимметричныйКлючИзXMLВBase64, ЗашифрованныеДанныеИзXMLВBase64, ВозвращатьТекстВBase64);
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат.Вставить("СертификатШифрованияОтветаВBase64", СертификатШифрованияОтветаВBase64);
	Возврат Результат;
	
КонецФункции

Функция РазобратьДанныеИзЗашифрованногоXML(
		Знач СимметричныйКлючИзXMLВBase64,
		Знач ЗашифрованныеДанныеИзXMLВBase64,
		Знач ВозвращатьТекстВBase64 = Истина)
	
	// извлечение симметричного ключа из данных XML
	
	ВременныйФайлСимметричногоКлючаИзXML = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеСимметричногоКлючаИзXML = Base64Значение(СимметричныйКлючИзXMLВBase64);
	ДвоичныеДанныеСимметричногоКлючаИзXML.Записать(ВременныйФайлСимметричногоКлючаИзXML);
	МассивСимметричногоКлючаИзXML = ПрочитатьФайлВМассив(ВременныйФайлСимметричногоКлючаИзXML);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлСимметричногоКлючаИзXML);
	Если МассивСимметричногоКлючаИзXML.Количество() < 167 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Неверный формат данных при дешифрации'"));
		Возврат Неопределено;
	КонецЕсли;
	
	// заголовок симметричного ключа
	МассивСимметричногоКлюча = ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("01 20 00 00 1E 66 00 00 FD 51 4A 37 1E 66 00 00");
	
	// добавление инициализационного вектора симметричного ключа
	Для ИндексМассива = 159 По 166 Цикл
		МассивСимметричногоКлюча.Добавить(МассивСимметричногоКлючаИзXML[ИндексМассива]);
	КонецЦикла;
	
	// добавление симметричного ключа
	Для ИндексМассива = 7 По 38 Цикл
		МассивСимметричногоКлюча.Добавить(МассивСимметричногоКлючаИзXML[ИндексМассива]);
	КонецЦикла;
	
	// добавление имитовставки
	Для ИндексМассива = 41 По 44 Цикл
		МассивСимметричногоКлюча.Добавить(МассивСимметричногоКлючаИзXML[ИндексМассива]);
	КонецЦикла;
	
	// добавление завершения симметричного ключа
	МассивЗавершенияСимметричногоКлюча = ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении("30 09 06 07 2A 85 03 02 02 1F 01");
	Для ИндексМассива = 0 По МассивЗавершенияСимметричногоКлюча.ВГраница() Цикл
		МассивСимметричногоКлюча.Добавить(МассивЗавершенияСимметричногоКлюча[ИндексМассива]);
	КонецЦикла;
	
	ВременныйФайлСимметричногоКлюча = ПолучитьИмяВременногоФайла();
	ЗаписатьФайлИзМассива(ВременныйФайлСимметричногоКлюча, МассивСимметричногоКлюча);
	ДвоичныеДанныеСимметричногоКлюча = Новый ДвоичныеДанные(ВременныйФайлСимметричногоКлюча);
	Если ВозвращатьТекстВBase64 Тогда
		СимметричныйКлючВBase64 = Base64Строка(ДвоичныеДанныеСимметричногоКлюча);
	Иначе
		СимметричныйКлючВBase64 = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСимметричногоКлюча, Новый УникальныйИдентификатор);
	КонецЕсли;
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлСимметричногоКлюча);
	
	// извлечение публичного ключа из данных XML
	
	// заголовок публичного ключа
	МассивПубличногоКлюча = ПолучитьМассивБайтовИзСтрокиВШестнадцатеричномПредставлении(
		"06 20 00 00 23 2E 00 00 4D 41 47 31 00 02 00 00 30 12 06 07 2A 85 03 02 02 24 00 06 07 2A 85 03 02 02 1E 01");
	
	// добавление публичного ключа
	Для ИндексМассива = 93 По 156 Цикл
		МассивПубличногоКлюча.Добавить(МассивСимметричногоКлючаИзXML[ИндексМассива]);
	КонецЦикла;
	
	ВременныйФайлПубличногоКлюча = ПолучитьИмяВременногоФайла();
	ЗаписатьФайлИзМассива(ВременныйФайлПубличногоКлюча, МассивПубличногоКлюча);
	ДвоичныеДанныеПубличногоКлюча = Новый ДвоичныеДанные(ВременныйФайлПубличногоКлюча);
	Если ВозвращатьТекстВBase64 Тогда
		ПубличныйКлючВBase64 = Base64Строка(ДвоичныеДанныеПубличногоКлюча);
	Иначе
		ПубличныйКлючВBase64 = ПоместитьВоВременноеХранилище(ДвоичныеДанныеПубличногоКлюча, Новый УникальныйИдентификатор);
	КонецЕсли;
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлПубличногоКлюча);
	
	// извлечение инициализационного вектора из данных XML
	
	ВременныйФайлЗашифрованныхДанныхИзXML = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеЗашифрованныхДанныхИзXML = Base64Значение(ЗашифрованныеДанныеИзXMLВBase64);
	ДвоичныеДанныеЗашифрованныхДанныхИзXML.Записать(ВременныйФайлЗашифрованныхДанныхИзXML);
	МассивИнициализационногоВектора = ПрочитатьФайлВМассив(ВременныйФайлЗашифрованныхДанныхИзXML, 0, 8);
	Если МассивИнициализационногоВектора.Количество() < 8 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Неверный формат данных при дешифрации'"));
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлЗашифрованныхДанныхИзXML);
		Возврат Неопределено;
	КонецЕсли;
	
	ВременныйФайлИнициализационногоВектора = ПолучитьИмяВременногоФайла();
	ЗаписатьФайлИзМассива(ВременныйФайлИнициализационногоВектора, МассивИнициализационногоВектора);
	ДвоичныеДанныеИнициализационногоВектора = Новый ДвоичныеДанные(ВременныйФайлИнициализационногоВектора);
	Если ВозвращатьТекстВBase64 Тогда
		ИнициализационныйВекторВBase64 = Base64Строка(ДвоичныеДанныеИнициализационногоВектора);
	Иначе
		ИнициализационныйВекторВBase64 = ПоместитьВоВременноеХранилище(ДвоичныеДанныеИнициализационногоВектора, Новый УникальныйИдентификатор);
	КонецЕсли;
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлИнициализационногоВектора);
	
	ВременныйФайлЗашифрованныхДанных = ПолучитьИмяВременногоФайла();
	СкопироватьФрагментИзФайла(ВременныйФайлЗашифрованныхДанныхИзXML, ВременныйФайлЗашифрованныхДанных, 8);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлЗашифрованныхДанныхИзXML);
	
	ДвоичныеДанныеЗашифрованныхДанных = Новый ДвоичныеДанные(ВременныйФайлЗашифрованныхДанных);
	Если ВозвращатьТекстВBase64 Тогда
		ЗашифрованныеДанныеВBase64 = Base64Строка(ДвоичныеДанныеЗашифрованныхДанных);
	Иначе
		ЗашифрованныеДанныеВBase64 = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЗашифрованныхДанных, Новый УникальныйИдентификатор);
	КонецЕсли;
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВременныйФайлЗашифрованныхДанных);
	
	Результат = Новый Структура;
	Результат.Вставить("СимметричныйКлючВBase64", 			СимметричныйКлючВBase64);
	Результат.Вставить("ПубличныйКлючВBase64", 				ПубличныйКлючВBase64);
	Результат.Вставить("ИнициализационныйВекторВBase64", 	ИнициализационныйВекторВBase64);
	Результат.Вставить("ЗашифрованныеДанныеВBase64", 		ЗашифрованныеДанныеВBase64);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбменЛисткамиНетрудоспособностиСФСС

Функция СерверПриемаОтчетностиФССЭЛН(ИспользоватьТестовыйСервер, Параметры) Экспорт
	
	ПараметрыФормата = ПараметрыФорматаЭЛН();
	
	Результат = Новый Структура;
	
	Если ПараметрыФормата.Версия = "1.0" Тогда
		Если НЕ ИспользоватьТестовыйСервер Тогда
			Результат.Вставить("Определение", "https://docs.fss.ru/WSInsurerCrypto/FileOperationsLnPort?wsdl");
		Иначе
			Результат.Вставить("Определение", "https://docs-test.fss.ru/WSInsurerCrypto/FileOperationsLnPort?wsdl");
		КонецЕсли;
		
	Иначе
		Если НЕ ИспользоватьТестовыйСервер Тогда
			Результат.Вставить("Определение", "https://docs.fss.ru/ws-insurer-crypto-v11/FileOperationsLnPort?wsdl");
		Иначе
			Результат.Вставить("Определение", "https://docs-test.fss.ru/ws-insurer-crypto-v11/FileOperationsLnPort?wsdl");
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("URIПространстваИменСервиса", 	ПараметрыФормата.ПространствоИмен);
	Результат.Вставить("ИмяСервиса", 					"FileOperationsLnImplService");
	Результат.Вставить("ИмяТочкиПодключения", 			"FileOperationsLnPort");
	Результат.Вставить("ВерсияОбмена", 					ПараметрыФормата.Версия);
	Результат.Вставить("WSПрокси", 						Неопределено);
	Результат.Вставить("ТипОшибки", 					"");
	Результат.Вставить("КодСостояния", 					0);
	Результат.Вставить("СообщениеОбОшибке", 			"");
	
	Если Параметры.СоздаватьWSПрокси Тогда
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Результат.Определение);
		Схема = ?(ЗначениеЗаполнено(СтруктураURI.Схема), СтруктураURI.Схема, "http");
		Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(Схема);
		
		ЗащищенноеСоединение = Неопределено;
		Если (Схема = "https" Или Схема = "ftps")  Тогда
			ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
		КонецЕсли;
		
		// загрузка или получение из кэша описания веб-сервиса
		ВерсияНастроек = ?(ПараметрыФормата.Версия = "1.0", "", СтрЗаменить(ПараметрыФормата.Версия, ".", "_"));
		КлючНастроек = ?(НЕ ИспользоватьТестовыйСервер, "ЭЛН", "ТестовыеЭЛН");
		
		ДатаОписанияВебСервиса = Неопределено;
		Если БезопасныйРежим() = Ложь Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ДатаОписанияВебСервиса = ХранилищеОбщихНастроек.Загрузить(
				"ДокументооборотСКонтролирующимиОрганами_ДатаОписанияВебСервиса" + ВерсияНастроек,
				КлючНастроек);
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		ТекущаяДатаСервера = ТекущаяДатаСеанса();
		
		ТребуетсяОбновлениеОписания = (Параметры.ВремяХраненияОписанияВебСервиса = 0 ИЛИ НЕ ЗначениеЗаполнено(ДатаОписанияВебСервиса)
			ИЛИ ТекущаяДатаСервера - ДатаОписанияВебСервиса >= Параметры.ВремяХраненияОписанияВебСервиса ИЛИ ТекущаяДатаСервера < ДатаОписанияВебСервиса);
		
		Если ТребуетсяОбновлениеОписания Тогда
			ПараметрыПолучения = Новый Структура;
			ПараметрыПолучения.Вставить("Таймаут", Параметры.ТаймаутСоединения);
			
			РезультатСкачивания = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(Результат.Определение, ПараметрыПолучения);
			Если НЕ РезультатСкачивания.Статус Тогда
				Если Параметры.ВозвращатьОписаниеОшибки Тогда
					Результат.ТипОшибки = ?(РезультатСкачивания.КодСостояния = 0 ИЛИ РезультатСкачивания.КодСостояния = 1,
						"ОшибкаСоединения", "ОшибкаНаСервере");
					Результат.КодСостояния = РезультатСкачивания.КодСостояния;
					Результат.СообщениеОбОшибке = РезультатСкачивания.СообщениеОбОшибке;
					Возврат Результат;
				Иначе
					ВызватьИсключение(РезультатСкачивания.СообщениеОбОшибке);
				КонецЕсли;
			КонецЕсли;
			
			ДвоичныеДанныеОписания = ПолучитьИзВременногоХранилища(РезультатСкачивания.Путь);
			
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			
			ДвоичныеДанныеОписания = ХранилищеОбщихНастроек.Загрузить(
				"ДокументооборотСКонтролирующимиОрганами_ОписаниеВебСервиса" + ВерсияНастроек,
				КлючНастроек);
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		// получение объекта доступа к веб-сервису и обновление кэша при необходимости
		ИмяФайлаОписания = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеОписания.Записать(ИмяФайлаОписания);
		
		Попытка
			WSОпределения = Новый WSОпределения(
				ИмяФайлаОписания,
				"",
				"",
				Прокси,
				Параметры.ТаймаутСоединения,
				ЗащищенноеСоединение);
			
			Результат.WSПрокси = Новый WSПрокси(
				WSОпределения,
				Результат.URIПространстваИменСервиса,
				Результат.ИмяСервиса,
				Результат.ИмяТочкиПодключения,
				Прокси,
				Параметры.ТаймаутВызовов,
				ЗащищенноеСоединение);
		Исключение
			Если Параметры.ВозвращатьОписаниеОшибки Тогда
				ИнформацияОбОшибкеОбмена = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обмен данными ЭЛН'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибкеОбмена));
				
				ПричинаОшибки = ИнформацияОбОшибкеОбмена;
				Пока ПричинаОшибки.Причина <> Неопределено Цикл
					ПричинаОшибки = ПричинаОшибки.Причина;
				КонецЦикла;
				Результат.ТипОшибки = "ОшибкаНаСервере";
				Результат.СообщениеОбОшибке = ПричинаОшибки.Описание;
				Возврат Результат;
			Иначе
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
		
		Если ТребуетсяОбновлениеОписания И БезопасныйРежим() = Ложь Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ХранилищеОбщихНастроек.Сохранить(
				"ДокументооборотСКонтролирующимиОрганами_ОписаниеВебСервиса" + ВерсияНастроек,
				КлючНастроек,
				ДвоичныеДанныеОписания);
			
			ХранилищеОбщихНастроек.Сохранить(
				"ДокументооборотСКонтролирующимиОрганами_ДатаОписанияВебСервиса" + ВерсияНастроек,
				КлючНастроек,
				ТекущаяДатаСервера);
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОписания);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИспользоватьТестовыйСерверФССЭЛН(ОрганизацияСсылка) Экспорт
	
	ОтпечаткиСертификатов = ПолучитьОтпечаткиСертификатовИзНастроекОрганизацииДляФСС(ОрганизацияСсылка);
	Возврат ОтпечаткиСертификатов <> Неопределено И ОтпечаткиСертификатов.ТестовыйСерверФССЭЛН = Истина;
	
КонецФункции

Функция ПараметрыФорматаЭЛН()
	
	Результат = Новый Структура;
	Результат.Вставить("Версия", 			"1.0");
	Результат.Вставить("ПространствоИмен", 	"http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования")
		ИЛИ ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.УчетПособийСоциальногоСтрахования") Тогда
		
		МодульОбменЛисткамиНетрудоспособностиФСС = ОбщегоНазначения.ОбщийМодуль("ОбменЛисткамиНетрудоспособностиФСС");
		
		Попытка
			Результат.Версия 			= МодульОбменЛисткамиНетрудоспособностиФСС.Версия();
			Результат.ПространствоИмен 	= МодульОбменЛисткамиНетрудоспособностиФСС.ПространствоИмен();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Электронный документооборот с контролирующими органами. Обмен ЭЛН'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьЗапросСервисуФССЭЛН(
		Организация,
		Операция,
		АдресЗашифрованногоЗапросаSOAP) Экспорт
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("СоздаватьWSПрокси", 				Истина);
	ПараметрыВызова.Вставить("ТаймаутСоединения", 				30);
	ПараметрыВызова.Вставить("ТаймаутВызовов", 					600);
	ПараметрыВызова.Вставить("ВозвращатьОписаниеОшибки", 		Ложь);
	ПараметрыВызова.Вставить("ВремяХраненияОписанияВебСервиса", 2 * 60 * 60);
	
	ИспользоватьТестовыйСервер = ИспользоватьТестовыйСерверФССЭЛН(Организация);
	
	НастройкиWS = СерверПриемаОтчетностиФССЭЛН(ИспользоватьТестовыйСервер, ПараметрыВызова);
	Если НастройкиWS = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗашифрованногоЗапросаSOAP = ПолучитьИзВременногоХранилища(АдресЗашифрованногоЗапросаSOAP);
	УдалитьИзВременногоХранилища(АдресЗашифрованногоЗапросаSOAP);
	
	АдресСервера = НастройкиWS.Определение;
	РесурсНаСервере = "";
	ПозицияЗавершенияСхемы = СтрНайти(АдресСервера, "://");
	Если ПозицияЗавершенияСхемы > 0 Тогда
		СтрокаURI = Сред(АдресСервера, ПозицияЗавершенияСхемы + 3);
		ПозицияЗавершенияСоединения = СтрНайти(СтрокаURI, "/");
		ДлинаСоединения = ?(ПозицияЗавершенияСоединения > 0, ПозицияЗавершенияСоединения - 1, СтрДлина(СтрокаURI));
		РесурсНаСервере = Сред(АдресСервера, ПозицияЗавершенияСхемы + 3 + ДлинаСоединения);
		АдресСервера = Лев(АдресСервера, ПозицияЗавершенияСхемы + 2 + ДлинаСоединения);
		
		ПозицияПараметров = СтрНайти(РесурсНаСервере, "?");
		ДлинаРесурсаНаСервере = ?(ПозицияПараметров > 0, ПозицияПараметров - 1, СтрДлина(РесурсНаСервере));
		РесурсНаСервере = Лев(РесурсНаСервере, ДлинаРесурсаНаСервере);
	КонецЕсли;
	
	ОписаниеОшибкиУстановкиСоединения = "";
	СоединениеHTTP = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета(АдресСервера, ОписаниеОшибкиУстановкиСоединения);
	Если СоединениеHTTP = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось установить соединение с сервером:
								 |%1'");
		ТекстОшибки = СтрШаблон(
			ТекстОшибки,
			ОписаниеОшибкиУстановкиСоединения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	// формируем общие заголовки запроса SOAP
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "text/xml; charset=utf-8");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	
	ФайлЗапросаSOAP = ПолучитьИмяВременногоФайла();
	ТекстовыйФайлSOAP = Новый ЗаписьТекста(ФайлЗапросаSOAP, "utf-8");
	ТекстовыйФайлSOAP.Записать(ТекстЗашифрованногоЗапросаSOAP);
	ТекстовыйФайлSOAP.Закрыть();
	
	// посылаем запрос
	ФайлОтветаSOAP = ПолучитьИмяВременногоФайла();
	Попытка
		СоединениеHTTP.ОтправитьДляОбработки(ФайлЗапросаSOAP, РесурсНаСервере, ФайлОтветаSOAP, ЗаголовкиHTTP);
	Исключение
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлЗапросаSOAP);
		ОписаниеОшибкиОтправки = ОписаниеОшибки();
		ТекстОшибки = НСтр("ru = 'Не удалось установить соединение с сервером:
								 |%1'");
		ТекстОшибки = СтрШаблон(
			ТекстОшибки,
			ОписаниеОшибкиОтправки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	ТекстовыйФайлОтветаSOAP = Новый ЧтениеТекста(ФайлОтветаSOAP, "utf-8");
	ТекстЗашифрованногоОтветаSOAP = ТекстовыйФайлОтветаSOAP.Прочитать();
	ТекстовыйФайлОтветаSOAP.Закрыть();
	АдресЗашифрованногоОтветаSOAP = ПоместитьВоВременноеХранилище(ТекстЗашифрованногоОтветаSOAP, Новый УникальныйИдентификатор());
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлЗапросаSOAP);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлОтветаSOAP);
	
	Возврат АдресЗашифрованногоОтветаSOAP;
КонецФункции

#КонецОбласти

Функция НовыйЧтениеТекстаНаСервере(ИмяФайла, Кодировка = Неопределено) Экспорт
	
	// Обход ошибки платформы.
	// ЧтениеТекста может неверно определять кодировку, если
	// кодировка не задана явно.
	НоваяКодировка 	= ИсправленнаяКодировкаЧтенияТекстаНаСервере(ИмяФайла, Кодировка);
	Конструктор 	= Новый ЧтениеТекста(ИмяФайла, НоваяКодировка);
	
	Возврат Конструктор;
	
КонецФункции

Функция ТекстHTMLСАвтоопределениемКодировки(ИмяФайла) Экспорт
	
	Текст = Новый ЧтениеТекста(ИмяФайла, "windows-1251");
	ТекстСодержимого = Текст.Прочитать();
	
	ТекстСодержимогоБезПробелов = СтрЗаменить(ТекстСодержимого, " ", "");
	ТекстСодержимогоБезПробеловВНижнемРегистре = нрег(ТекстСодержимогоБезПробелов);
	Если СтрНайти(ТекстСодержимогоБезПробеловВНижнемРегистре, "content=""text/html;charset=utf-8""") > 0 Тогда
		Текст = Новый ЧтениеТекста(ИмяФайла, "utf-8");
		ТекстСодержимого = Текст.Прочитать();
	КонецЕсли;
	
	Возврат ТекстСодержимого;
	
КонецФункции

Процедура ЧтениеТекстаОткрытьНаСервере(ОбъектЧтениеТекста, ИмяФайла) Экспорт
	
	// Обход ошибки платформы.
	// ЧтениеТекста может неверно определять кодировку, если
	// кодировка не задана явно.
	НоваяКодировка 	= ИсправленнаяКодировкаЧтенияТекстаНаСервере(ИмяФайла);
	ОбъектЧтениеТекста.Открыть(ИмяФайла, НоваяКодировка);
	
КонецПроцедуры

Функция ИсправленнаяКодировкаЧтенияТекстаНаСервере(ИмяФайла, Знач Кодировка = Неопределено)
	
	Если ЗначениеЗаполнено(Кодировка) Тогда
		
		НоваяКодировка = Кодировка;
		
	Иначе
	
		Если КодировкаНаСервереОпределяетсяВерно() Тогда
			НоваяКодировка = Неопределено;
		Иначе
			Если ФайлИмеетBOM(ИмяФайла) Тогда
				НоваяКодировка = Неопределено;
			Иначе
				НоваяКодировка = "windows-1251";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НоваяКодировка; 
	
КонецФункции

Функция КодировкаНаСервереОпределяетсяВерно() Экспорт
	
	ИсходнаяСтрока 	= "АБВГДЕЖЗИКЛМНОПРСТУФХЦЧШЭЮЯабвгдежзиклмнопрстуфхцчшэюя";
	ИмяФайла 		= ПолучитьИмяВременногоФайла();
	
	// Записываем текст с кодировкой
	ЗаписьКонтрольногоФайла = Новый ЗаписьТекста(ИмяФайла, "windows-1251");
	ЗаписьКонтрольногоФайла.Записать(ИсходнаяСтрока);
	ЗаписьКонтрольногоФайла.Закрыть();
	
	// Читаем текст без кодировки
	ЧтениеФайлаБезКодировки 		= Новый ЧтениеТекста(ИмяФайла);
	ПрочтеннаяСтрокаБезКодировки 	= ЧтениеФайлаБезКодировки.Прочитать();
	ЧтениеФайлаБезКодировки.Закрыть();
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат ИсходнаяСтрока = ПрочтеннаяСтрокаБезКодировки;
	
КонецФункции

Функция ФайлИмеетBOM(ИмяФайла) Экспорт
	
	ПредставлениеКодировкиUTF8 	= ПредставлениеКодировкиФайла(ИмяФайла, 3);
	ПредставлениеКодировкиUTF16 = ПредставлениеКодировкиФайла(ИмяФайла, 2);
	ПредставлениеКодировкиUTF32 = ПредставлениеКодировкиФайла(ИмяФайла, 4);
	ПредставлениеКодировкиUTF7 	= ПредставлениеКодировкиФайла(ИмяФайла, 16);
	
	Возврат ПредставлениеКодировкиUTF8 = "239187191"
		ИЛИ ПредставлениеКодировкиUTF16 = "254255"
		ИЛИ ПредставлениеКодировкиUTF16 = "255254"
		ИЛИ ПредставлениеКодировкиUTF32 = "00254255"
		ИЛИ ПредставлениеКодировкиUTF32 = "25525400"
		ИЛИ ПредставлениеКодировкиUTF7 = "434711856434711857434711843434711847";
	
КонецФункции

Функция ПредставлениеКодировкиФайла(ИмяФайла, КоличествоБайт) Экспорт
	
	ПредставлениеКодировки = "";
	
	ТекстовыйПоток = Новый ЧтениеТекста;
	ТекстовыйПоток.Открыть(ИмяФайла, "ISO-8859-1");
	
	Для Инд = 1 По КоличествоБайт Цикл
		
		ТекущийСимвол = ТекстовыйПоток.Прочитать(1);
		Если ТекущийСимвол = Неопределено Тогда
			ТекстовыйПоток.Закрыть();
			Возврат ПредставлениеКодировки;
		КонецЕсли;
		ТекущийБайт = КодСимвола(ТекущийСимвол); // Значение байта 0-255
		
		ПредставлениеКодировки = ПредставлениеКодировки + Строка(ТекущийБайт);
		
	КонецЦикла;
	
	ТекстовыйПоток.Закрыть();
	
	Возврат ПредставлениеКодировки;
	
КонецФункции

#Область ОбменСКонтролирующимиОрганами

Функция ПолучитьСообщения(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПочтовыеСообщения = ПолучитьПочтовыеСообщения(УчетнаяЗапись);
	
	ПолученныеТранспортныеСообщения = СоздатьТранспортныеСообщения(УчетнаяЗапись, ПочтовыеСообщения);
	
	РаспознатьТранспортныеСообщения();
	
	Возврат ПолученныеТранспортныеСообщения;
	
КонецФункции

Процедура ОтправитьСообщения(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщенияДляОтправки = ПолучитьСообщенияДляОтправки(УчетнаяЗапись);
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияПоУчетнойЗаписи(УчетнаяЗапись);
	Соединение = ДокументооборотСКО.ОткрытьСоединениеДляОтправкиПочты(ПараметрыПодключения);
	
	Для Каждого СообщениеДляОтправки Из СообщенияДляОтправки Цикл
		ОтправитьТранспортноеСообщение(СообщениеДляОтправки, Соединение);
	КонецЦикла;
	
	ДокументооборотСКО.ЗакрытьПочтовоеСоединение(Соединение);
	
КонецПроцедуры

Процедура РаспознатьТранспортныеСообщения()
	
	Выборка = ПолучитьТранспортныеСообщенияДляРаспознавания();
	
	Пока Выборка.Следующий() Цикл
		РаспознатьТранспортноеСообщение(Выборка.Ссылка, Истина);		
		ОбновитьСтатусыСвязанногоОбъектаПриНеобходимости(Выборка.Ссылка, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТранспортныеСообщенияДляРаспознавания()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортноеСообщение.Ссылка
	|ИЗ
	|	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	|ГДЕ
	|	НЕ ТранспортноеСообщение.ПометкаУдаления
	|	И ТранспортноеСообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Полученное)
	|	И ТранспортноеСообщение.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПолучитьПараметрыПодключенияПоУчетнойЗаписи(УчетнаяЗапись)
	
	ПараметрыПодключения = Новый Структура;
	
	Поля = "ИмяПользователяPOP3, ИмяПользователяSMTP, ПарольPOP3, ПарольSMTP, ПортPOP3,
			|ПортSMTP, СерверPOP3, СерверSMTP, ТребуетсяSMTPАутентификация, 
			|СерверДокументооборота.ДлительностьОжиданияСервера";
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, Поля);
	
	ПараметрыPOP3 = Новый Структура;
	ПараметрыPOP3.Вставить("Сервер", ЗначенияРеквизитов.СерверPOP3);
	ПараметрыPOP3.Вставить("Пользователь", ЗначенияРеквизитов.ИмяПользователяPOP3);
	ПараметрыPOP3.Вставить("Пароль", ЗначенияРеквизитов.ПарольPOP3);
	ПараметрыPOP3.Вставить("Порт", ЗначенияРеквизитов.ПортPOP3);
	СпособАутентификации = СпособPOP3Аутентификации.Обычная;
	ПараметрыPOP3.Вставить("СпособАутентификации", СпособАутентификации);
	
	ПараметрыSMTP = Новый Структура;
	ПараметрыSMTP.Вставить("Сервер", ЗначенияРеквизитов.СерверSMTP);
	ПараметрыSMTP.Вставить("Пользователь", ЗначенияРеквизитов.ИмяПользователяSMTP);
	ПараметрыSMTP.Вставить("Пароль", ЗначенияРеквизитов.ПарольSMTP);
	ПараметрыSMTP.Вставить("Порт", ЗначенияРеквизитов.ПортSMTP);
	СпособАутентификации = ?(ЗначенияРеквизитов.ТребуетсяSMTPАутентификация, СпособSMTPАутентификации.Login, СпособSMTPАутентификации.БезАутентификации);
	ПараметрыSMTP.Вставить("СпособАутентификации", СпособАутентификации);
	
	ПараметрыПодключения.Вставить("POP3", ПараметрыPOP3);
	ПараметрыПодключения.Вставить("SMTP", ПараметрыSMTP);
	
	ПараметрыПодключения.Вставить("Таймаут", ЗначенияРеквизитов.СерверДокументооборотаДлительностьОжиданияСервера);

	Возврат ПараметрыПодключения;
	
КонецФункции

Функция ПолучитьПочтовыеСообщения(УчетнаяЗапись)
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияПоУчетнойЗаписи(УчетнаяЗапись);
	Соединение = ДокументооборотСКО.ОткрытьСоединениеДляПолученияПочты(ПараметрыПодключения);	
	
	ЗаголовкиПочтовыхСообщений = Соединение.ПолучитьЗаголовки();
	
	ПочтовыеСообщения = Новый Массив;
	СообщенияДляПолучения = ОтобратьПочтовыеСообщения(УчетнаяЗапись, ЗаголовкиПочтовыхСообщений, Ложь);
	Если ЗначениеЗаполнено(СообщенияДляПолучения) Тогда
		ПочтовыеСообщения = Соединение.Выбрать(Ложь, СообщенияДляПолучения);
	КонецЕсли;
	
	// Сообщения по завершенным циклам обмена считаем более не нужными и удаляем с сервера.
	СообщенияДляУдаления = ОтобратьПочтовыеСообщения(УчетнаяЗапись, ЗаголовкиПочтовыхСообщений, Истина);	
	Если ЗначениеЗаполнено(СообщенияДляУдаления) Тогда
		Соединение.УдалитьСообщения(СообщенияДляУдаления);
	КонецЕсли;
	
	ДокументооборотСКО.ЗакрытьПочтовоеСоединение(Соединение);
	
	Возврат ПочтовыеСообщения;
	
КонецФункции

Функция ОтобратьПочтовыеСообщения(УчетнаяЗапись, ЗаголовкиСообщений, ДляУдаления)
	
	ИдентификаторыПолученныхСообщений = Новый ТаблицаЗначений;
	ИдентификаторыПолученныхСообщений.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(255)));
	Для Каждого ЗаголовокСообщения Из ЗаголовкиСообщений Цикл
		НоваяСтрока = ИдентификаторыПолученныхСообщений.Добавить();
		НоваяСтрока.Идентификатор = ЗаголовокСообщения.ИдентификаторСообщения;
	КонецЦикла;
	
	Если ДляУдаления Тогда
		ИдентификаторыСообщений = ПолучитьИдентификаторыСообщенийДляУдаления(УчетнаяЗапись, ИдентификаторыПолученныхСообщений);
	Иначе
		ИдентификаторыСообщений = ПолучитьИдентификаторыСообщенийДляПолучения(УчетнаяЗапись, ИдентификаторыПолученныхСообщений);
	КонецЕсли;
	
	ОтобранныеСообщения = Новый Массив;
	Если ЗначениеЗаполнено(ИдентификаторыСообщений) Тогда
		Для Каждого ЗаголовокСообщения Из ЗаголовкиСообщений Цикл
			Если ИдентификаторыСообщений.Найти(ЗаголовокСообщения.ИдентификаторСообщения) <> Неопределено Тогда
				ОтобранныеСообщения.Добавить(ЗаголовокСообщения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОтобранныеСообщения;
	
КонецФункции

Функция ПолучитьИдентификаторыСообщенийДляПолучения(УчетнаяЗапись, ИдентификаторыПолученныхСообщений)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыПолученныхСообщений.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ИдентификаторыПолученныхСообщений
	|ИЗ
	|	&ИдентификаторыПолученныхСообщений КАК ИдентификаторыПолученныхСообщений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТранспортноеСообщение.Ссылка,
	|	ТранспортноеСообщение.ИдентификаторСообщения
	|ПОМЕСТИТЬ ТранспортныеСообщенияПоУчетнойЗаписи
	|ИЗ
	|	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	|ГДЕ
	|	ТранспортноеСообщение.УчетнаяЗапись = &УчетнаяЗапись
	|	И ТранспортноеСообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Полученное)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыПолученныхСообщений.Идентификатор КАК ИдентификаторСообщения,
	|	ТранспортныеСообщенияПоУчетнойЗаписи.Ссылка
	|ИЗ
	|	ИдентификаторыПолученныхСообщений КАК ИдентификаторыПолученныхСообщений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТранспортныеСообщенияПоУчетнойЗаписи КАК ТранспортныеСообщенияПоУчетнойЗаписи
	|		ПО ИдентификаторыПолученныхСообщений.Идентификатор = ТранспортныеСообщенияПоУчетнойЗаписи.ИдентификаторСообщения";
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ИдентификаторыПолученныхСообщений", ИдентификаторыПолученныхСообщений);
	
	ИдентификаторыСообщений = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			ИдентификаторыСообщений.Добавить(Выборка.ИдентификаторСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторыСообщений;

КонецФункции

Функция ПолучитьИдентификаторыСообщенийДляУдаления(УчетнаяЗапись, ИдентификаторыПолученныхСообщений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыПолученныхСообщений.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ИдентификаторыПолученныхСообщений
	|ИЗ
	|	&ИдентификаторыПолученныхСообщений КАК ИдентификаторыПолученныхСообщений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТранспортноеСообщение.Ссылка,
	|	ТранспортноеСообщение.ИдентификаторСообщения
	|ПОМЕСТИТЬ ТранспортныеСообщенияПоУчетнойЗаписи
	|ИЗ
	|	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	|ГДЕ
	|	ТранспортноеСообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Полученное)
	|	И ТранспортноеСообщение.ЦиклОбмена <> ЗНАЧЕНИЕ(Справочник.ЦиклыОбмена.ПустаяСсылка)
	|	И ТранспортноеСообщение.ЦиклОбмена.ДатаЗакрытия <> ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
	|	И ТранспортноеСообщение.ЦиклОбмена.ДатаЗакрытия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ТранспортноеСообщение.УчетнаяЗапись = &УчетнаяЗапись
	|	И (НЕ ТранспортноеСообщение.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.ПисьмоВходящееПФР), ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС), ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.ПисьмоНО), ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.ДокументНО))
	|			ИЛИ ТранспортноеСообщение.УчетнаяЗапись.СпецоператорСвязи = ЗНАЧЕНИЕ(Перечисление.СпецоператорыСвязи.Прочие))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыПолученныхСообщений.Идентификатор КАК ИдентификаторСообщения,
	|	ТранспортныеСообщенияПоУчетнойЗаписи.Ссылка
	|ИЗ
	|	ИдентификаторыПолученныхСообщений КАК ИдентификаторыПолученныхСообщений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТранспортныеСообщенияПоУчетнойЗаписи КАК ТранспортныеСообщенияПоУчетнойЗаписи
	|		ПО ИдентификаторыПолученныхСообщений.Идентификатор = ТранспортныеСообщенияПоУчетнойЗаписи.ИдентификаторСообщения";
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ИдентификаторыПолученныхСообщений", ИдентификаторыПолученныхСообщений);
	
	ИдентификаторыСообщений = Новый Массив;
	ИдентификаторыСообщений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторСообщения");
	
	Возврат ИдентификаторыСообщений;

КонецФункции

Функция СоздатьТранспортныеСообщения(УчетнаяЗапись, ПочтовыеСообщения)
	
	ПолученныеСообщения = Новый Массив;
	Для Каждого ПочтовоеСообщение Из ПочтовыеСообщения Цикл
		ПолученныеСообщения.Добавить(ЗаполнитьТранспортноеСообщение(УчетнаяЗапись, ПочтовоеСообщение));
	КонецЦикла;
	
	ЗаполнитьСвойстваТранспортныхСообщений(ПолученныеСообщения);
	
	Возврат ПолученныеСообщения;
	
КонецФункции

Функция ЗаполнитьТранспортноеСообщение(УчетнаяЗапись, ПочтовоеСообщение)

	НачатьТранзакцию();
	Попытка
		ТранспортноеСообщение = Документы.ТранспортноеСообщение.СоздатьДокумент();
		
		ТранспортноеСообщение.УчетнаяЗапись = УчетнаяЗапись; 
		
		ТранспортноеСообщение.Статус = Перечисления.СтатусыПисем.Полученное;
		ТранспортноеСообщение.Тема = ОбщегоНазначенияЭДКОКлиентСервер.ЗаменитьНечитаемыеСимволы(СокрЛП(ПочтовоеСообщение.Тема));
		ТранспортноеСообщение.ИдентификаторСообщения = ПочтовоеСообщение.ИдентификаторСообщения;
		ТранспортноеСообщение.ДатаТранспорта = ПочтовоеСообщение.ДатаПолучения;
		ТранспортноеСообщение.Дата = ПочтовоеСообщение.ДатаОтправления;
		ТранспортноеСообщение.Кодировка = ПочтовоеСообщение.Кодировка;
		
		ТранспортноеСообщение.ОтКогоАдрес = ПочтовоеСообщение.Отправитель.Адрес;
		ТранспортноеСообщение.ОтКогоПредставление = ПочтовоеСообщение.Отправитель.ОтображаемоеИмя;
		
		
		ЗаполнитьАдресатов(ТранспортноеСообщение.Кому, ПочтовоеСообщение.Получатели);
		ЗаполнитьАдресатов(ТранспортноеСообщение.Копии, ПочтовоеСообщение.Копии);
		ЗаполнитьТекстПисьма(ТранспортноеСообщение, ПочтовоеСообщение);
		ЗаполнитьДополнительныеРеквизитыЗаголовка(ТранспортноеСообщение, ПочтовоеСообщение);
		
		Ссылка = Документы.ТранспортноеСообщение.ПолучитьСсылку();
		ТранспортноеСообщение.УстановитьСсылкуНового(Ссылка);
		
		ТранспортноеСообщение.Записать();
		
		РазобратьВложения(Ссылка, ПочтовоеСообщение);
		
		ЗафиксироватьТранзакцию(); 
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с контролирующими органами. Транспортное сообщение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ТранспортноеСообщение.Ссылка;

КонецФункции

Процедура ЗаполнитьАдресатов(Приемник, Источник)
	
	Для Каждого Адресат Из Источник Цикл
		НоваяСтрока = Приемник.Добавить();
		НоваяСтрока.АдресЭлектроннойПочты = Адресат.Адрес;
		НоваяСтрока.Представление = Адресат.ОтображаемоеИмя;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТекстПисьма(ТранспортноеСообщение, Сообщение)
	
	Для Каждого ТекстПисьма Из Сообщение.Тексты Цикл
		Если ЗначениеЗаполнено(ТекстПисьма.Текст) Тогда
			ТранспортноеСообщение.ТекстПисьма = ОбщегоНазначенияЭДКОКлиентСервер.ЗаменитьНечитаемыеСимволы(ТекстПисьма.Текст);
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеРеквизитыЗаголовка(ТранспортноеСообщение, Сообщение)
	
	ТипыДополнительныхРеквизитов = Новый Соответствие;
	ТипыДополнительныхРеквизитов.Вставить("X-Tax-System", Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы);
	ТипыДополнительныхРеквизитов.Вставить("X-Tax-Type", Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации);
	ТипыДополнительныхРеквизитов.Вставить("X-Tax-Reciever", Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя);
	ТипыДополнительныхРеквизитов.Вставить("X-Tax-Sender", Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя);
	ТипыДополнительныхРеквизитов.Вставить("X-Message-ID", Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения);
	
	Для Каждого ТипРеквизита Из ТипыДополнительныхРеквизитов Цикл
		ПолеЗаголовка = Сообщение.ПолучитьПолеЗаголовка(ТипРеквизита.Ключ, "");
		Если ЗначениеЗаполнено(ПолеЗаголовка) Тогда 
			НоваяСтрока = ТранспортноеСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
			НоваяСтрока.Тип = ТипРеквизита.Значение;
			НоваяСтрока.Значение = ПолеЗаголовка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура РазобратьВложения(ТранспортноеСообщение, Сообщение)
	
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		ДобавитьТранспортныйКонтейнерИзДвоичныхДанных(ТранспортноеСообщение, Вложение.Данные, Вложение.ИмяФайла);
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьТранспортныйКонтейнерИзДвоичныхДанных(ТранспортноеСообщение, Данные, ИмяФайла, Размер = Неопределено) Экспорт
	
	ОбработанноеИмяФайла = ОбщегоНазначенияЭДКОКлиентСервер.ЗаменитьНечитаемыеСимволы(ИмяФайла);
	
	НачатьТранзакцию();
	
	НовыйНаборЗаписей = РегистрыСведений.ТранспортныеКонтейнеры.СоздатьНаборЗаписей();
	НовыйНаборЗаписей.Отбор.ТранспортноеСообщение.Установить(ТранспортноеСообщение);
	НовыйНаборЗаписей.Отбор.ИмяФайла.Установить(ОбработанноеИмяФайла);
	
	НоваяЗапись = НовыйНаборЗаписей.Добавить();
	НоваяЗапись.ТранспортноеСообщение = ТранспортноеСообщение;
	НоваяЗапись.ИмяФайла = ОбработанноеИмяФайла;
	НоваяЗапись.Размер = Данные.Размер();
	
	КомпонентыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОбработанноеИмяФайла);
	УникальноеИмяФайлаБезРасширения = ОбщегоНазначенияЭДКОКлиентСервер.УникальнаяСтрока(КомпонентыИмениФайла.ИмяБезРасширения, 150);
	РасширениеФайлаБезТочки = Сред(КомпонентыИмениФайла.Расширение, 2);
	
	НовыйНаборЗаписей.Записать(Истина);
	
	АдресФайла = ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор);
	
	МассивФайлов = ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(
		ТранспортноеСообщение,
		"ТранспортноеСообщениеКонтейнерыПрисоединенныеФайлы",
		ОбработанноеИмяФайла);
	
	Если МассивФайлов.Количество() > 0 Тогда
		ПрисоединенныйФайл = МассивФайлов[0];
		ИнформацияОбОбновляемомФайле = Новый Структура;
		ИнформацияОбОбновляемомФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
		ИнформацияОбОбновляемомФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
		ИнформацияОбОбновляемомФайле.Вставить("ИмяБезРасширения", 				УникальноеИмяФайлаБезРасширения);
		ИнформацияОбОбновляемомФайле.Вставить("Расширение", 					РасширениеФайлаБезТочки);
		
		РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОбОбновляемомФайле);
		
	Иначе
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", 						Неопределено);
		ПараметрыФайла.Вставить("ВладелецФайлов", 				ТранспортноеСообщение);
		ПараметрыФайла.Вставить("ИмяБезРасширения", 			УникальноеИмяФайлаБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", 			РасширениеФайлаБезТочки);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	Неопределено);
		
		НоваяСсылкаНаФайл = РаботаСФайлами.НоваяСсылкаНаФайл(ТранспортноеСообщение, "ТранспортноеСообщениеКонтейнерыПрисоединенныеФайлы");
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла,,, НоваяСсылкаНаФайл);
	КонецЕсли;
	
	ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	
	ПрисоединенныйФайлОбъект.ИсходноеИмяФайла = ОбработанноеИмяФайла;
	
	ПрисоединенныйФайлОбъект.Записать();
	
	ЗафиксироватьТранзакцию();
	УдалитьИзВременногоХранилища(АдресФайла);
	
КонецФункции

#КонецОбласти

#Область ОбменСФТС

///////////////////////////////////////////////////////////////////////////////
// Функции с использованием общих модулей и дублирующие функции для организации
// вызовов общих модулей при документообороте с ФТС

Функция СформироватьФайлОтправкиВФТСССервера(
		КороткоеИмяФайлаВыгрузки, 
		СтрокаBase64ФайлаВыгрузки, 
		ЭтоАдреса, 
		Адрес, 
		Кодировка, 
		ПараметрыОтправки) Экспорт
	
	//файл отправки получаем, объединяя файл пакета с файлами начала и окончания POST-запроса
	
	// файл 1
	СодержимоеФайла = "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""ctl55"""
		+ Символы.ПС + Символы.ПС + Символы.ПС + "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""__EVENTTARGET"""
		+ Символы.ПС + Символы.ПС + "ctl02"
		+ Символы.ПС + "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""__EVENTARGUMENT"""
		+ Символы.ПС + Символы.ПС + "-|public|UploadFile"
		+ Символы.ПС + "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""TextFieldNote"""
		+ Символы.ПС + Символы.ПС + Символы.ПС + "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""DropDownCreateVersion"""
		+ Символы.ПС + Символы.ПС + ПараметрыОтправки.ВерсияФормированияВыгрузки + "/" + ПараметрыОтправки.ВерсияОтправкиПортала
		+ Символы.ПС + "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""actionUpload""; filename=""" + КороткоеИмяФайлаВыгрузки + """"
		+ Символы.ПС + "Content-Type: text/xml"
		+ Символы.ПС + Символы.ПС;
	
	// запишем файл в кодировке "UTF-8", затем удалим из него сигнатуру BOM
	ИмяФайлаЗапросаНачалоUTF8ССигнатурой = ПолучитьИмяВременногоФайла();
	ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапросаНачалоUTF8ССигнатурой, "utf-8");
	ЗаписываемыйФайл.Записать(СодержимоеФайла);
	ЗаписываемыйФайл.Закрыть();
	
	ИмяФайлаЗапросаНачало = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайлаЗапросаНачалоUTF8ССигнатурой = Новый ДвоичныеДанные(ИмяФайлаЗапросаНачалоUTF8ССигнатурой);
	Данные64ФайлаЗапросаНачалоUTF8ССигнатурой = Base64Строка(ДвоичныеДанныеФайлаЗапросаНачалоUTF8ССигнатурой);
	Данные64ФайлаЗапросаНачалоUTF8БезСигнатуры = Сред(Данные64ФайлаЗапросаНачалоUTF8ССигнатурой, 5);
	ДвоичныеДанныеФайлаЗапросаНачалоUTF8БезСигнатуры = Base64Значение(Данные64ФайлаЗапросаНачалоUTF8БезСигнатуры);
	ДвоичныеДанныеФайлаЗапросаНачалоUTF8БезСигнатуры.Записать(ИмяФайлаЗапросаНачало);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапросаНачалоUTF8ССигнатурой);
	
	// файл 2
	ИмяФайлаВыгрузки = ПолучитьИмяВременногоФайла();
	
	Если ЭтоАдреса Тогда
		ПолучитьИзВременногоХранилища(СтрокаBase64ФайлаВыгрузки).Записать(ИмяФайлаВыгрузки);
	Иначе
		ДвоичныеДанныеФайлаВыгрузки = Base64Значение(СтрокаBase64ФайлаВыгрузки);
		ДвоичныеДанныеФайлаВыгрузки.Записать(ИмяФайлаВыгрузки);
	КонецЕсли;
	
	Если Кодировка <> Неопределено Тогда
		ТекстовыйФайлВыгрузки = Новый ЧтениеТекста(ИмяФайлаВыгрузки, "windows-1251");
		ТекстВыгрузки = ТекстовыйФайлВыгрузки.Прочитать();
		ТекстовыйФайлВыгрузки.Закрыть();
		ТекстовыйФайлВыгрузки = Новый ЗаписьТекста(ИмяФайлаВыгрузки, Кодировка);
		ТекстовыйФайлВыгрузки.Записать(ТекстВыгрузки);
		ТекстовыйФайлВыгрузки.Закрыть();
		
		// в случае кодировки "UTF-8" удалим из файла сигнатуру BOM
		Если нрег(Кодировка) = "utf-8" Тогда
			ДанныеФайлаВыгрузкиUTF8ССигнатурой = Новый ДвоичныеДанные(ИмяФайлаВыгрузки);
			Данные64ФайлаВыгрузкиUTF8ССигнатурой = Base64Строка(ДанныеФайлаВыгрузкиUTF8ССигнатурой);
			Данные64ФайлаВыгрузкиUTF8БезСигнатуры = Сред(Данные64ФайлаВыгрузкиUTF8ССигнатурой, 5);
			ДанныеФайлаВыгрузкиUTF8БезСигнатуры = Base64Значение(Данные64ФайлаВыгрузкиUTF8БезСигнатуры);
			ДанныеФайлаВыгрузкиUTF8БезСигнатуры.Записать(ИмяФайлаВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	// файл 3
	СодержимоеФайла = Символы.ПС + Символы.ПС + "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""submitDirectEventConfig"""
		+ Символы.ПС + Символы.ПС + "{""config"":{""extraParams"":{""target"":""" + ПараметрыОтправки.ИдентификаторНеПринятойОтправкиНаСервере + """}}}"
		+ Символы.ПС + "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""__ExtNetDirectEventMarker"""
		+ Символы.ПС + Символы.ПС + "delta=true"
		+ Символы.ПС + "--My1cV8bNdr--";
	
	// запишем файл в кодировке "UTF-8", затем удалим из него сигнатуру BOM
	ИмяФайлаЗапросаОкончаниеUTF8ССигнатурой = ПолучитьИмяВременногоФайла();
	ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапросаОкончаниеUTF8ССигнатурой, "utf-8");
	ЗаписываемыйФайл.Записать(СодержимоеФайла);
	ЗаписываемыйФайл.Закрыть();
	
	ИмяФайлаЗапросаОкончание = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайлаЗапросаОкончаниеUTF8ССигнатурой = Новый ДвоичныеДанные(ИмяФайлаЗапросаОкончаниеUTF8ССигнатурой);
	Данные64ФайлаЗапросаОкончаниеUTF8ССигнатурой = Base64Строка(ДвоичныеДанныеФайлаЗапросаОкончаниеUTF8ССигнатурой);
	Данные64ФайлаЗапросаОкончаниеUTF8БезСигнатуры = Сред(Данные64ФайлаЗапросаОкончаниеUTF8ССигнатурой, 5);
	ДвоичныеДанныеФайлаЗапросаОкончаниеUTF8БезСигнатуры = Base64Значение(Данные64ФайлаЗапросаОкончаниеUTF8БезСигнатуры);
	ДвоичныеДанныеФайлаЗапросаОкончаниеUTF8БезСигнатуры.Записать(ИмяФайлаЗапросаОкончание);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапросаОкончаниеUTF8ССигнатурой);
	
	// объединение
	МассивИмен = Новый Массив;
	МассивИмен.Добавить(ИмяФайлаЗапросаНачало);
	МассивИмен.Добавить(ИмяФайлаВыгрузки);
	МассивИмен.Добавить(ИмяФайлаЗапросаОкончание);
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла();
	ОбъединитьФайлы(МассивИмен, ИмяФайлаОтправки);
	
	Если ЭтоАдреса Тогда
		Результат = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаОтправки), Адрес);
	Иначе
		ДвоичныеДанныеФайлаОтправки = Новый ДвоичныеДанные(ИмяФайлаОтправки);
		Результат = Base64Строка(ДвоичныеДанныеФайлаОтправки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ДОКУМЕНТООБОРОТ С ФТС, код без использования вызовов общих модулей
////

Функция ОбновитьРезультатКонкретнойОтправкиФТСССервера(Знач ОтправкаСсылка, Знач ОтправкаОбъектЗагружен, Знач ПараметрыОтправки, ПараметрыСоединения, Знач ЭтоВызовИзСписка = Ложь) Экспорт
	
	Если ОтправкаОбъектЗагружен Тогда
		ОсновныеРеквизитыОтправки = Новый Структура("ОтчетСсылка, ИмяФайлаВыгрузки, ИдентификаторОтправкиНаСервере, СтатусОтправки",
			ОтправкаСсылка.ОтчетСсылка, ОтправкаСсылка.ИмяФайлаВыгрузки, ОтправкаСсылка.ИдентификаторОтправкиНаСервере, ОтправкаСсылка.СтатусОтправки);
	Иначе
		ОсновныеРеквизитыОтправки = ЗначенияРеквизитовОбъекта(ОтправкаСсылка, "ОтчетСсылка, ИмяФайлаВыгрузки, ИдентификаторОтправкиНаСервере, СтатусОтправки");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ИдентификаторОтправкиНаСервере) Тогда
		ПараметрыСоединения.ИдентификаторОтправкиНаСервере = ОсновныеРеквизитыОтправки.ИдентификаторОтправкиНаСервере;
	КонецЕсли;
	
	РезультатОтправки = ПолучитьРезультатОтправкиФТС(ОсновныеРеквизитыОтправки, ПараметрыОтправки, ПараметрыСоединения, ЭтоВызовИзСписка, ОтправкаСсылка);
	
	ПараметрыСоединения.СоединениеHTTP = Неопределено;
	
	СохранитьРезультатОтправкиФТС(ОтправкаСсылка, РезультатОтправки);
	
	Возврат (РезультатОтправки <> Неопределено);
	
КонецФункции

Функция СохранитьРезультатОтправкиФТС(ОтправкаСсылка, РезультатОтправки)
	
	Если РезультатОтправки <> Неопределено Тогда
		ОтправкаОбъект = ОтправкаСсылка.ПолучитьОбъект();
		Если РезультатОтправки.СтатусОтправки <> ОтправкаОбъект.СтатусОтправки ИЛИ РезультатОтправки.СтатусОтправки <> Перечисления.СтатусыОтправки.Сдан
			ИЛИ РезультатОтправки.НаКонтроле <> ОтправкаОбъект.НаКонтроле ИЛИ РезультатОтправки.НаКонтроле
			ИЛИ НЕ ЗначениеЗаполнено(РезультатОтправки.Протокол) ИЛИ НЕ ЗначениеЗаполнено(ОтправкаОбъект.Протокол)
			ИЛИ РезультатОтправки.Протокол <> ОтправкаОбъект.Протокол.Получить() Тогда
			
			ОтправкаОбъект.ДатаПолученияРезультата = РезультатОтправки.ДатаПолученияРезультата;
			ОтправкаОбъект.СтатусОтправки = РезультатОтправки.СтатусОтправки;
			ОтправкаОбъект.Протокол = Новый ХранилищеЗначения(РезультатОтправки.Протокол);
			ОтправкаОбъект.НаКонтроле = РезультатОтправки.НаКонтроле;
			ОтправкаОбъект.Квитанция = Новый ХранилищеЗначения(РезультатОтправки.Квитанция);
			ОтправкаОбъект.Записать();
		КонецЕсли;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРезультатОтправкиФТС(ОсновныеРеквизитыОтправки, ПараметрыОтправки, ПараметрыСоединения, ЭтоВызовИзСписка, ОтправкаСсылка)
	
	СтатусОтчета = "";
	ЦветСтатуса = Новый Цвет(0, 0, 192);
	СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен;
	НаКонтроле = Ложь;
	
	//запрос результатов обработки
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	ПараметрыСоединения.ПовторятьЗапросПароля = Ложь;
	
	ЗаголовокОтчета = ПолучитьИнформациюОбОтчетеНаПорталеФТС(ПараметрыОтправки, ПараметрыСоединения);
	
	УспешноОбработан = Неопределено;
	ОтчетНаКонтроле = Ложь;
	ОтчетАннулирован = Ложь;
	ОтказаноВАннулировании = Ложь;
	ЭтоЧерновик = Ложь;
	Если ЗаголовокОтчета <> Неопределено Тогда
		УспешноОбработан = УспешноОбработанОтчетФТС(
			ЗаголовокОтчета.Состояние,
			ЗаголовокОтчета.РасширенноеСостояние,
			ОтчетНаКонтроле,
			ОтчетАннулирован,
			ОтказаноВАннулировании,
			ЭтоЧерновик);
	КонецЕсли;
	
	Если ЗаголовокОтчета <> Неопределено И НЕ ПараметрыСоединения.ПовторятьСоединение Тогда
		
		// получен протокол обработки и отсутствовали ошибки соединения
		
		// анализируем содержимое страницы протокола обработки
		Если УспешноОбработан = Истина Тогда
			// отчет принят
			СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
			СтатусОтчета = НСтр("ru = 'Отчет принят, ошибок не обнаружено.'");
			ЦветСтатуса = Новый Цвет(0, 179, 16);
			
		ИначеЕсли УспешноОбработан = Ложь ИЛИ (УспешноОбработан = Неопределено И ЭтоЧерновик) Тогда
			// отчет не принят
			СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят;
			Если УспешноОбработан = Неопределено И ЭтоЧерновик Тогда
				СтатусОтчета = НСтр("ru = 'Отчет не принят в обработку, повторите отправку.'");
			ИначеЕсли ОтчетНаКонтроле Тогда
				НаКонтроле = Истина;
				СтатусОтчета = НСтр("ru = 'Отчет зарегистрирован, поставлен на контроль с комментарием должностного лица на портале ФТС.'");
			ИначеЕсли ОтчетАннулирован Тогда
				СтатусОтчета = НСтр("ru = 'Отчет аннулирован пользователем.'");
			ИначеЕсли ОтказаноВАннулировании Тогда
				СтатусОтчета = НСтр("ru = 'Отказано в аннулировании отчета.'");
			Иначе
				СтатусОтчета = НСтр("ru = 'Отчет не принят, обнаружены ошибки.'");
			КонецЕсли;
			ЦветСтатуса = Новый Цвет(255, 0, 0);
			
		Иначе
			// отчет еще не обработан
			СтатусОтчета = НСтр("ru = 'Находится в обработке, попробуйте через некоторое время использовать в отчете кнопку ""Обновить""'");
		КонецЕсли;
		
		Протокол = ГенерироватьHTMLПротоколаОбработкиФТС(ЗаголовокОтчета, СтатусОтчета, ЦветСтатуса, СтатусОтправки, НаКонтроле, ПараметрыОтправки, ОсновныеРеквизитыОтправки.ОтчетСсылка);
		
		//заполняем результирующую структуру
		Результат = Новый Структура("ДатаПолученияРезультата, ИдентификаторОтправкиНаСервере, СтатусОтправки, Протокол, НаКонтроле, Квитанция",
			ТекущаяДатаСеанса(), ЗаголовокОтчета.ИдентификаторОтправки, СтатусОтправки, Протокол, НаКонтроле, ЗаголовокОтчета.Квитанция);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) ИЛИ НЕ ПараметрыСоединения.ПовторятьСоединение Тогда
		
		Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
			ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиБезТехническойИнформацииФТС(ПараметрыСоединения.ОписаниеОшибкиСервером);
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Результаты отправки не получены с портала. %1'"),
				ПараметрыСоединения.ОписаниеОшибкиСервером);
			
			Если ЭтоВызовИзСписка Тогда
				ПредставлениеОтчетаОтправки = ПредставлениеОтчета(ОтправкаСсылка.ОтчетСсылка);
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = '%1 Попробуйте через некоторое время использовать кнопку ""Обновить""  в отчете %2.'"),
					ТекстСообщения,
					ПредставлениеОтчетаОтправки);
			КонецЕсли;
			
			СообщитьПользователю(ТекстСообщения, ПараметрыСоединения.СообщенияПользователю);
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить результаты отправки с портала Федеральной таможенной службы.'");
			
			Если ЭтоВызовИзСписка Тогда
				ПредставлениеОтчетаОтправки = ПредставлениеОтчета(ОтправкаСсылка.ОтчетСсылка);
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = '%1 Возможно, портал перегружен. Попробуйте через некоторое время использовать кнопку ""Обновить"" в отчете %2.'"),
					ТекстСообщения,
					ПредставлениеОтчетаОтправки);
			КонецЕсли;
			
			СообщитьПользователю(ТекстСообщения, ПараметрыСоединения.СообщенияПользователю);
		КонецЕсли;
		
		Результат = Неопределено;
		
	Иначе
		
		// возможно, проблемы с доступом в интернет
		Результат = Неопределено;
		
	КонецЕсли;
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	
	Возврат Результат;
	
КонецФункции

Функция ОтправкаНаСерверФТС(ФайлыИДанныеОтправки, ОтчетСсылка, ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	ПараметрыСоединения.ПовторятьЗапросПароля = Ложь;
	
	ОтправкаПроизведена = ОтправитьВыгрузкуНаСерверФТС(ФайлыИДанныеОтправки, ПараметрыОтправки, ПараметрыСоединения);
	
	Если ОтправкаПроизведена Тогда
		
		ПараметрыСоединения.ПовторятьСоединение = Ложь;
		
		Возврат Истина;
		
	ИначеЕсли (ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) ИЛИ НЕ ПараметрыСоединения.ПовторятьСоединение) Тогда
		
		ЭтоРегламентированныйОтчет = (ТипЗнч(ОтчетСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") ИЛИ ТипЗнч(ОтчетСсылка) = Тип("Неопределено"));
		
		Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
			
			ЭтоОшибкиПроверки = Ложь;
			ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиБезТехническойИнформацииФТС(ПараметрыСоединения.ОписаниеОшибкиСервером, ЭтоОшибкиПроверки);
			
			Если ЭтоОшибкиПроверки Тогда
				ПараметрыСоединения.ОписаниеОшибокПроверки = ПараметрыСоединения.ОписаниеОшибкиСервером;
				
			Иначе
				//отправленный файл не был принят сервером, получено описание ошибки
				Если Прав(ПараметрыСоединения.ОписаниеОшибкиСервером, 1) <> "." И Прав(ПараметрыСоединения.ОписаниеОшибкиСервером, 1) <> "!" Тогда
					ПараметрыСоединения.ОписаниеОшибкиСервером = ПараметрыСоединения.ОписаниеОшибкиСервером + ".";
				КонецЕсли;
				СообщитьПользователю(ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет не принят порталом. %1'"), ПараметрыСоединения.ОписаниеОшибкиСервером) + "
					|" + ПодставитьПараметрыВСтроку(?(ЭтоРегламентированныйОтчет,
					НСтр("ru = 'Для отправки отчета возможно выгрузить его в файл, используя кнопку ""Выгрузить"", далее отправить этот файл на портале %1'"), НСтр("ru = 'Существует возможность отправить файл выгрузки отчета на портале %1'")),
					"https://" + ПараметрыОтправки.АдресСервера + "/stat"), ПараметрыСоединения.СообщенияПользователю);
			КонецЕсли;
			
		Иначе
			// в ответе сервера отсутствует описание ошибки и установлен признак повтора соединения
			СообщитьПользователю(НСтр("ru = 'Отчет не удалось отправить на портал Федеральной таможенной службы.'") + " " + ПодставитьПараметрыВСтроку(?(ЭтоРегламентированныйОтчет,
				НСтр("ru = 'Для отправки отчета возможно выгрузить его в файл, используя кнопку ""Выгрузить"", далее отправить этот файл на портале %1'"), НСтр("ru = 'Существует возможность отправить файл выгрузки отчета на портале %1'")),
				"https://" + ПараметрыОтправки.АдресСервера + "/stat"), ПараметрыСоединения.СообщенияПользователю);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОтправкаПодписанногоЗапросаНаСерверФТС(ФайлыИДанныеОтправки, ОтчетСсылка, ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	ОтправкаПроизведена = ОтправитьПодписанныйЗапросНаСерверФТС(ФайлыИДанныеОтправки, ПараметрыОтправки, ПараметрыСоединения);
	
	Если ОтправкаПроизведена Тогда
		
		ПараметрыСоединения.ПовторятьСоединение = Ложь;
		
	ИначеЕсли ПараметрыСоединения.ОрганизацияПодтверждена <> Истина Тогда
		
		ЭтоРегламентированныйОтчет = (ТипЗнч(ОтчетСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") ИЛИ ТипЗнч(ОтчетСсылка) = Тип("Неопределено"));
		
		Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
			
			ЭтоОшибкиПроверки = Ложь;
			ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиБезТехническойИнформацииФТС(ПараметрыСоединения.ОписаниеОшибкиСервером, ЭтоОшибкиПроверки);
			
			Если ЭтоОшибкиПроверки Тогда
				ПараметрыСоединения.ОписаниеОшибокПроверки = ПараметрыСоединения.ОписаниеОшибкиСервером;
				
			Иначе
				//отправленный файл не был принят сервером, получено описание ошибки
				Если Прав(ПараметрыСоединения.ОписаниеОшибкиСервером, 1) <> "." И Прав(ПараметрыСоединения.ОписаниеОшибкиСервером, 1) <> "!" Тогда
					ПараметрыСоединения.ОписаниеОшибкиСервером = ПараметрыСоединения.ОписаниеОшибкиСервером + ".";
				КонецЕсли;
				СообщитьПользователю(ПодставитьПараметрыВСтроку(НСтр("ru = 'Запрос подтверждения организации не принят порталом. %1'"), ПараметрыСоединения.ОписаниеОшибкиСервером) + " " + ПодставитьПараметрыВСтроку(?(ЭтоРегламентированныйОтчет,
					НСтр("ru = 'Для отправки отчета возможно выгрузить его в файл, используя кнопку ""Выгрузить"", далее отправить данный файл на портале %1'"), НСтр("ru = 'Существует возможность отправить файл выгрузки отчета на портале %1'")),
					"https://" + ПараметрыОтправки.АдресСервера + "/stat"), ПараметрыСоединения.СообщенияПользователю);
			КонецЕсли;
			
		Иначе
			// в ответе сервера отсутствует описание ошибки и установлен признак повтора соединения
			СообщитьПользователю(НСтр("ru = 'Подписанный запрос подтверждения организации не удалось отправить на портал Федеральной таможенной службы.'") + " " + ПодставитьПараметрыВСтроку(?(ЭтоРегламентированныйОтчет,
				НСтр("ru = 'Для отправки отчета выгрузите его в файл, используя кнопку ""Выгрузить"". Далее отправьте данный файл на портале %1'"), НСтр("ru = 'Для отправки отчета отправьте файл выгрузки отчета на портале %1'")),
				"https://" + ПараметрыОтправки.АдресСервера + "/stat"), ПараметрыСоединения.СообщенияПользователю);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОтправкаПроизведена;
	
КонецФункции

Функция ОтправкаПодписиНаСерверФТС(ФайлыИДанныеОтправки, ОтчетСсылка, ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	ОтправкаПроизведена = ОтправитьПодписьНаСерверФТС(ФайлыИДанныеОтправки, ПараметрыОтправки, ПараметрыСоединения);
	
	Если ОтправкаПроизведена Тогда
		
		ПараметрыСоединения.ПовторятьСоединение = Ложь;
		
		//отправленный файл принят сервером
		НоваяЗапись = Справочники.ОтправкиФТС.СоздатьЭлемент();
		НоваяЗапись.ОтчетСсылка = ОтчетСсылка;
		НоваяЗапись.ИдентификаторОтправкиНаСервере = ПараметрыСоединения.ИдентификаторОтправкиНаСервере;
		ДвоичныеДанныеПодписываемойВыгрузки = Новый ДвоичныеДанные(ФайлыИДанныеОтправки.ИмяФайлаПодписываемойВыгрузки);
		НоваяЗапись.ВыгрузкаДляПодписи = Новый ХранилищеЗначения(ДвоичныеДанныеПодписываемойВыгрузки);
		ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ФайлыИДанныеОтправки.ИмяФайлаПодписи);
		НоваяЗапись.Подпись = Новый ХранилищеЗначения(ДвоичныеДанныеПодписи);
		НоваяЗапись.ИмяФайлаВыгрузки = ФайлыИДанныеОтправки.КороткоеИмяФайлаВыгрузки;
		НоваяЗапись.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен;
		НоваяЗапись.ДатаОтправки = ТекущаяДатаСеанса();
		НоваяЗапись.Организация = ?(ОтчетСсылка <> Неопределено, ОтчетСсылка.Организация, Неопределено);
		НоваяЗапись.ДатаНачалаПериода = ПараметрыОтправки.ПоляДляЗаписиОтправки.ДатаНачалаПериода;
		НоваяЗапись.ДатаОкончанияПериода = ПараметрыОтправки.ПоляДляЗаписиОтправки.ДатаОкончанияПериода;
		
		Если ОтчетСсылка <> Неопределено И ТипЗнч(ОтчетСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			НоваяЗапись.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", ОтчетСсылка.ИсточникОтчета);
			
		Иначе // электронные представления
			НоваяЗапись.ВидОтчета = ?(ОтчетСсылка <> Неопределено, ОтчетСсылка.ВидОтчета, Неопределено);
		КонецЕсли;
		
		НоваяЗапись.Версия = ПараметрыОтправки.ПоляДляЗаписиОтправки.Версия;
		НоваяЗапись.ПредставлениеПериода = ПредставлениеПериода(НоваяЗапись.ДатаНачалаПериода, КонецДня(НоваяЗапись.ДатаОкончанияПериода), "ФП=Истина");
		НоваяЗапись.ПредставлениеВидаДокумента = ПредставлениеВидаДокумента(НоваяЗапись.Версия);
		НоваяЗапись.Записать();
		
		Результат = НоваяЗапись.Ссылка;
		
		Возврат Результат;
		
	ИначеЕсли (ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) ИЛИ НЕ ПараметрыСоединения.ПовторятьСоединение) Тогда
		
		ЭтоРегламентированныйОтчет = (ТипЗнч(ОтчетСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") ИЛИ ТипЗнч(ОтчетСсылка) = Тип("Неопределено"));
		
		Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
			
			ЭтоОшибкиПроверки = Ложь;
			ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиБезТехническойИнформацииФТС(ПараметрыСоединения.ОписаниеОшибкиСервером, ЭтоОшибкиПроверки);
			
			Если ЭтоОшибкиПроверки Тогда
				ПараметрыСоединения.ОписаниеОшибокПроверки = ПараметрыСоединения.ОписаниеОшибкиСервером;
				
			Иначе
				//отправленный файл не был принят сервером, получено описание ошибки
				Если Прав(ПараметрыСоединения.ОписаниеОшибкиСервером, 1) <> "." И Прав(ПараметрыСоединения.ОписаниеОшибкиСервером, 1) <> "!" Тогда
					ПараметрыСоединения.ОписаниеОшибкиСервером = ПараметрыСоединения.ОписаниеОшибкиСервером + ".";
				КонецЕсли;
				СообщитьПользователю(ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет не принят порталом. %1'"), ПараметрыСоединения.ОписаниеОшибкиСервером) + "
					|" + ПодставитьПараметрыВСтроку(?(ЭтоРегламентированныйОтчет,
					НСтр("ru = 'Для отправки отчета возможно выгрузить его в файл, используя кнопку ""Выгрузить"", далее отправить этот файл на портале %1'"), НСтр("ru = 'Существует возможность отправить файл выгрузки отчета на портале %1'")),
					"https://" + ПараметрыОтправки.АдресСервера + "/stat"), ПараметрыСоединения.СообщенияПользователю);
			КонецЕсли;
			
		Иначе
			// в ответе сервера отсутствует описание ошибки и установлен признак повтора соединения
			СообщитьПользователю(НСтр("ru = 'Подписанный пакет не удалось отправить на портал Федеральной таможенной службы.'") + " " + ПодставитьПараметрыВСтроку(?(ЭтоРегламентированныйОтчет,
				НСтр("ru = 'Для отправки отчета возможно выгрузить его в файл, используя кнопку ""Выгрузить"", далее отправить этот файл на портале %1'"), НСтр("ru = 'Существует возможность отправить файл выгрузки отчета на портале %1'")),
				"https://" + ПараметрыОтправки.АдресСервера + "/stat"), ПараметрыСоединения.СообщенияПользователю);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОтправитьПодписанныйЗапросНаСерверФТС(ФайлыИДанныеОтправки, ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	ЗагрузкаПроизведена = Ложь;
	АдресСервера = ПараметрыСоединения.ТекущийАдресСервера;
	
	СоединениеУстановлено = (ПараметрыСоединения.СоединениеHTTP <> Неопределено);
	
	Если НЕ СоединениеУстановлено Тогда
		
		// устанавливаем соединение с сервером
		ОписаниеОшибкиУстановкиСоединения = "";
		ПараметрыСоединения.СоединениеHTTP = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета("https://" + АдресСервера, ОписаниеОшибкиУстановкиСоединения);
		
		Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не удалось установить соединение с сервером:
								|%1'"), ОписаниеОшибкиУстановкиСоединения), ПараметрыСоединения.СообщенияПользователю);
			Возврат Ложь;
		КонецЕсли;
		
		СоединениеУстановлено = Истина;
		
	КонецЕсли;
	
	Если СоединениеУстановлено Тогда
		
		ЗагрузкаПроизведена = ЗагрузитьПодписанныйЗапросНаПорталФТС(ФайлыИДанныеОтправки.ИмяФайлаПодписанногоЗапроса, ПараметрыОтправки, ПараметрыСоединения);
		Если ЗагрузкаПроизведена Тогда
			НастройкиПользователя = НастройкиПользователяФТС(ПараметрыОтправки, ПараметрыСоединения);
			Если НастройкиПользователя <> Неопределено И НЕ НастройкиПользователя.ОтправленЗапросНаПодтверждениеОрганизации И НЕ НастройкиПользователя.ОрганизацияПодтверждена Тогда
				ЗагрузкаПроизведена = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
	КонецЕсли;
	
	Возврат ЗагрузкаПроизведена;
	
КонецФункции

Функция НастройкиПользователяФТС(ПараметрыОтправки, ПараметрыСоединения, СформироватьПодписываемыйЗапрос = Ложь, ПомещатьВоВременноеХранилище = Ложь)
	
	// получим свойства профиля
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.Получить("/FtsPersonalCabinetWeb/Api/GetConfig", ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		Возврат Неопределено;
		
	КонецПопытки;
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	// проанализируем свойства профиля
	Результат = Новый Структура("ОрганизацияПодтверждена, ОтправленЗапросНаПодтверждениеОрганизации, ПодписываемыйЗапрос64", Ложь, Ложь, "");
	
	ЭлементОрганизации = """Organizations"":";
	ПозицияОрганизации = СтрНайти(ТекстОтвета, ЭлементОрганизации);
	
	Если ПозицияОрганизации > 0 Тогда
		ПозицияОрганизации = ПозицияОрганизации + СтрДлина(ЭлементОрганизации);
		ТекстОтвета = Сред(ТекстОтвета, ПозицияОрганизации);
		
		Если Лев(ТекстОтвета, 2) <> "[]" Тогда
			ЭлементОрганизацияАктивна = """IsActive"":";
			ПозицияОрганизацияАктивна = СтрНайти(ТекстОтвета, ЭлементОрганизацияАктивна);
			
			Если ПозицияОрганизацияАктивна > 0 Тогда
				ПозицияОрганизацияАктивна = ПозицияОрганизацияАктивна + СтрДлина(ЭлементОрганизацияАктивна);
				
				Результат.ОрганизацияПодтверждена = (Сред(ТекстОтвета, ПозицияОрганизацияАктивна, 4) = "true");
				Результат.ОтправленЗапросНаПодтверждениеОрганизации = НЕ Результат.ОрганизацияПодтверждена;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// сформируем запрос
	Если НЕ Результат.ОтправленЗапросНаПодтверждениеОрганизации И СформироватьПодписываемыйЗапрос Тогда
		ЗаголовкиHTTP = Новый Соответствие();
		ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
		ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
		Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
			ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
		КонецЕсли;
		
		ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
		
		Попытка
			ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.Получить("/FtsPersonalCabinetWeb/Api/CreateOrganizationRequest", ИмяФайлаОтвета, ЗаголовкиHTTP);
		Исключение
			
			ПараметрыСоединения.СоединениеHTTP = Неопределено;
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
			Возврат Неопределено;
			
		КонецПопытки;
		
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
		ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		
		Если Лев(ТекстОтвета, 1) = """" И Прав(ТекстОтвета, 1) = """" Тогда
			ДлинаОтвета = СтрДлина(ТекстОтвета);
			ТекстОтвета = Сред(ТекстОтвета, 2, ДлинаОтвета - 2);
		КонецЕсли;
		ТекстОтвета = СтрЗаменить(ТекстОтвета, "\""", """");
		
		ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
		ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапроса, "utf-8");
		ЗаписываемыйФайл.Записать(ТекстОтвета);
		ЗаписываемыйФайл.Закрыть();
		
		ДанныеЗапроса = Новый ДвоичныеДанные(ИмяФайлаЗапроса);
		ПодписываемыйЗапрос64 = Base64Строка(ДанныеЗапроса);
		ПодписываемыйЗапрос64 = Сред(ПодписываемыйЗапрос64, 5);
		// удалим из файла в кодировке "UTF-8" сигнатуру BOM
		Если ПомещатьВоВременноеХранилище Тогда
			ДанныеЗапроса = Base64Значение(ПодписываемыйЗапрос64);
			Результат.ПодписываемыйЗапрос64 = ПоместитьВоВременноеХранилище(ДанныеЗапроса, Новый УникальныйИдентификатор);
		Иначе
			Результат.ПодписываемыйЗапрос64 = ПодписываемыйЗапрос64;
		КонецЕсли;
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьПодписанныйЗапросНаПорталФТС(ИмяФайлаПодписанногоЗапроса, ПараметрыОтправки, ПараметрыСоединения)
	
	ФайлПодписанногоЗапроса = Новый ЧтениеТекста(ИмяФайлаПодписанногоЗапроса, "utf-8");
	ТекстПодписанногоЗапроса = ФайлПодписанногоЗапроса.Прочитать();
	ФайлПодписанногоЗапроса.Закрыть();
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить("X-Ext.Net", "delta=true");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ТекстПодписанногоЗапросаКодированный = СтрЗаменить(ТекстПодписанногоЗапроса, """", "\""");
	ПакетДляОтправкиПодписанногоЗапроса = СтрШаблон(
		"{""signedData"":""%1""}",
		ТекстПодписанногоЗапросаКодированный);
	
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапроса, "windows-1251");
	ЗаписываемыйФайл.Записать(ПакетДляОтправкиПодписанногоЗапроса);
	ЗаписываемыйФайл.Закрыть();
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	ОтветHTTP = Неопределено;
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаЗапроса, "/FtsPersonalCabinetWeb/Api/CreateOrganizationRequest", ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		ОбъектФайлОтвета = Новый Файл(ИмяФайлаОтвета);
		Если НЕ ОбъектФайлОтвета.Существует() Тогда
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	
	Если ОтветHTTP <> Неопределено Тогда
		ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
		ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	КонецЕсли;
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаФТС(ТекстОтвета);
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
		ОписаниеОшибкиСервером = ТекстПослеПрефикса(ТекстОтвета, "System.Exception:", "---");
		ОписаниеОшибкиСервером = СокрЛП(ОписаниеОшибкиСервером);
		ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстИзHTML(ОписаниеОшибкиСервером);
	КонецЕсли;
	
	Возврат НЕ ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером);
	
КонецФункции

Функция ОтправитьВФТСССервера(ЭтоЭлектроннаяПодписьВМоделиСервиса, Знач СтрокаBase64ФайлаОтправки, Знач КороткоеИмяФайлаВыгрузки, Знач ОтчетСсылка, Знач ПараметрыОтправки, ПараметрыСоединения) Экспорт
	
	// получаем двоичные данные файлов
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		ДвоичныеДанныеФайлаОтправки = ПолучитьИзВременногоХранилища(СтрокаBase64ФайлаОтправки);
	Иначе
		ДвоичныеДанныеФайлаОтправки = Base64Значение(СтрокаBase64ФайлаОтправки);
	КонецЕсли;
	
	// выгружаем двоичные данные в файл
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайлаОтправки.Записать(ИмяФайлаОтправки);
	
	ФайлыИДанныеОтправки = Новый Структура("КороткоеИмяФайлаВыгрузки, ИмяФайлаОтправки, ЭтоЭлектроннаяПодписьВМоделиСервиса", КороткоеИмяФайлаВыгрузки, ИмяФайлаОтправки, ЭтоЭлектроннаяПодписьВМоделиСервиса);
	
	Результат = ОтправкаНаСерверФТС(ФайлыИДанныеОтправки, ОтчетСсылка, ПараметрыОтправки, ПараметрыСоединения);
	
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса И Результат И ЗначениеЗаполнено(ПараметрыСоединения.ПодписываемоеСодержимоеВыгрузки64) Тогда
		ДанныеПодписываемогоСодержимогоВыгрузки = Base64Значение(ПараметрыСоединения.ПодписываемоеСодержимоеВыгрузки64);
		ПараметрыСоединения.ПодписываемоеСодержимоеВыгрузки64 = ПоместитьВоВременноеХранилище(ДанныеПодписываемогоСодержимогоВыгрузки, Новый УникальныйИдентификатор);
	КонецЕсли;
	ПараметрыСоединения.СоединениеHTTP = Неопределено;
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтправки);
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьПодписьВФТСССервера(ЭтоЭлектроннаяПодписьВМоделиСервиса, Знач СтрокаBase64ФайлаПодписи, Знач КороткоеИмяФайлаВыгрузки, Знач ОтчетСсылка, Знач ПараметрыОтправки, ПараметрыСоединения) Экспорт
	
	// получаем двоичные данные файлов
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		ДвоичныеДанныеФайлаПодписи = ПолучитьИзВременногоХранилища(СтрокаBase64ФайлаПодписи);
		ДвоичныеДанныеФайлаПодписываемойВыгрузки = ПолучитьИзВременногоХранилища(ПараметрыСоединения.ПодписываемоеСодержимоеВыгрузки64);
	Иначе
		ДвоичныеДанныеФайлаПодписи = Base64Значение(СтрокаBase64ФайлаПодписи);
		ДвоичныеДанныеФайлаПодписываемойВыгрузки = Base64Значение(ПараметрыСоединения.ПодписываемоеСодержимоеВыгрузки64);
	КонецЕсли;
	
	// выгружаем двоичные данные в файл
	ИмяФайлаПодписи = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайлаПодписи.Записать(ИмяФайлаПодписи);
	
	ИмяФайлаПодписываемойВыгрузки = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайлаПодписываемойВыгрузки.Записать(ИмяФайлаПодписываемойВыгрузки);
	
	ФайлыИДанныеОтправки = Новый Структура;
	ФайлыИДанныеОтправки.Вставить("КороткоеИмяФайлаВыгрузки", 				КороткоеИмяФайлаВыгрузки);
	ФайлыИДанныеОтправки.Вставить("ИмяФайлаПодписи", 						ИмяФайлаПодписи);
	ФайлыИДанныеОтправки.Вставить("ИмяФайлаПодписываемойВыгрузки", 			ИмяФайлаПодписываемойВыгрузки);
	ФайлыИДанныеОтправки.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", 	ЭтоЭлектроннаяПодписьВМоделиСервиса);
	
	Результат = ОтправкаПодписиНаСерверФТС(ФайлыИДанныеОтправки, ОтчетСсылка, ПараметрыОтправки, ПараметрыСоединения);
	
	ПараметрыСоединения.СоединениеHTTP = Неопределено;
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаПодписи);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаПодписываемойВыгрузки);
	Если Результат <> Неопределено Тогда
		ПараметрыСоединения.ПодписываемоеСодержимоеВыгрузки64 = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьПодписанныйЗапросВФТСССервера(ЭтоЭлектроннаяПодписьВМоделиСервиса, Знач СтрокаBase64ФайлаПодписанногоЗапроса, Знач ОтчетСсылка, Знач ПараметрыОтправки, ПараметрыСоединения) Экспорт
	
	// получаем двоичные данные файлов
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		ДвоичныеДанныеФайлаПодписанногоЗапроса = ПолучитьИзВременногоХранилища(СтрокаBase64ФайлаПодписанногоЗапроса);
	Иначе
		ДвоичныеДанныеФайлаПодписанногоЗапроса = Base64Значение(СтрокаBase64ФайлаПодписанногоЗапроса);
	КонецЕсли;
	
	// выгружаем двоичные данные в файл
	ИмяФайлаПодписанногоЗапроса = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайлаПодписанногоЗапроса.Записать(ИмяФайлаПодписанногоЗапроса);
	
	ФайлыИДанныеОтправки = Новый Структура("ИмяФайлаПодписанногоЗапроса, ЭтоЭлектроннаяПодписьВМоделиСервиса", ИмяФайлаПодписанногоЗапроса, ЭтоЭлектроннаяПодписьВМоделиСервиса);
	
	Результат = ОтправкаПодписанногоЗапросаНаСерверФТС(ФайлыИДанныеОтправки, ОтчетСсылка, ПараметрыОтправки, ПараметрыСоединения);
	
	ПараметрыСоединения.СоединениеHTTP = Неопределено;
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаПодписанногоЗапроса);
	Если Результат И ЗначениеЗаполнено(ПараметрыСоединения.ПодписываемыйЗапрос64) Тогда
		Если ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
			УдалитьИзВременногоХранилища(ПараметрыСоединения.ПодписываемыйЗапрос64);
		КонецЕсли;
		ПараметрыСоединения.ПодписываемыйЗапрос64 = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ГенерироватьHTMLПротоколаОбработкиФТС(ЗаголовокОтчета, СтатусОтчета, ЦветСтатуса, СтатусОтправки, НаКонтроле, ПараметрыОтправки, ОтчетСсылка)
	
	// формирование заголовка протокола
	
	ТабДок = Новый ТабличныйДокумент;
	
	Шаблон = ПолучитьМакет("ФТСШаблонДляHTML");
	
	НаименованиеОрганизации = "";
	ИНН = ИННОрганизации(ПараметрыОтправки.Организация, "", НаименованиеОрганизации);
	СведенияПоОбъекту 	= СведенияПоОтправляемымОбъектам(ОтчетСсылка);
	НаименованиеОргана 	= СведенияПоОбъекту.ПредставлениеКонтролирующегоОргана;
	НаименованиеОтчета 	= СведенияПоОбъекту.Наименование;
	НаименованиеОтчета 	= СведенияПоОбъекту.Наименование;
	Если ТипЗнч(ОтчетСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВидОтчета = Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", ОтчетСсылка.ИсточникОтчета);
	ИначеЕсли ТипЗнч(ОтчетСсылка) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		ВидОтчета = ОтчетСсылка.ВидОтчета;
	Иначе
		ВидОтчета = Неопределено;
	КонецЕсли;
	Если ВидОтчета = Справочники.ВидыОтправляемыхДокументов.СтатистикаФормаУчетаПеремещенияТоваровТС Тогда
		НаименованиеОтчета = НСтр("ru = 'Статистическая форма учета перемещения товаров'");
	КонецЕсли;
	
	СекцияШапкаСЗаголовком = Шаблон.ПолучитьОбласть("ШапкаСЗаголовком");
	Если НаКонтроле Тогда
		СекцияШапкаСЗаголовком.Параметры.НаименованиеПротокола = НСтр("ru = 'Протокол'");
	ИначеЕсли СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
		СекцияШапкаСЗаголовком.Параметры.НаименованиеПротокола = НСтр("ru = 'Протокол о сдаче'");
	ИначеЕсли СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
		СекцияШапкаСЗаголовком.Параметры.НаименованиеПротокола = НСтр("ru = 'Протокол ошибок'");
	Иначе
		СекцияШапкаСЗаголовком.Параметры.НаименованиеПротокола = НСтр("ru = 'Протокол'");
	КонецЕсли;
	СекцияШапкаСЗаголовком.Параметры.Отправитель = НаименованиеОрганизации;
	СекцияШапкаСЗаголовком.Параметры.ИНН = НСтр("ru = 'ИНН'") + " " + ИНН;
	СекцияШапкаСЗаголовком.Параметры.Получатель = НаименованиеОргана;
	СекцияШапкаСЗаголовком.Параметры.Отчет = НаименованиеОтчета;
	СекцияШапкаСЗаголовком.Параметры.СтатусОтчета = СтатусОтчета;
	СекцияШапкаСЗаголовком.Области.СтатусОтчета.ЦветТекста = ЦветСтатуса;
	ТабДок.Вывести(СекцияШапкаСЗаголовком);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабДок.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.HTML);
	ТекстHTML = Новый ТекстовыйДокумент;
	ТекстHTML.Прочитать(ИмяВременногоФайла);
	ТекстHTMLЗаголовкаПротокола = ТекстHTML.ПолучитьТекст();
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	ТекстHTMLПротокола = ЗаголовокОтчета.Протокол;
	Если НЕ ЗначениеЗаполнено(ТекстHTMLПротокола) Тогда
		Возврат ТекстHTMLЗаголовкаПротокола;
	КонецЕсли;
	
	// подготовка содержимого по полученному протоколу
	
	ТекстHTMLПротокола = СтрЗаменить(ТекстHTMLПротокола, " <span class=""required"">*</span>", "");
	ТекстHTMLПротокола = СтрЗаменить(ТекстHTMLПротокола, "<span title=""FtsAlbum.Envelope.EnvelopeType"" >Конверт</span>", "");
	
	// преобразовать поля ввода в статические
	НеобработанныйТекст = ТекстHTMLПротокола;
	ОбработанныйТекст = "";
	Пока НеобработанныйТекст <> "" Цикл
		ПозицияПоля = СтрНайти(НеобработанныйТекст, "<input");
		Если ПозицияПоля = 0 Тогда
			ОбработанныйТекст = ОбработанныйТекст + НеобработанныйТекст;
			Прервать;
		КонецЕсли;
		ОбработанныйТекст = ОбработанныйТекст + Лев(НеобработанныйТекст, ПозицияПоля - 1);
		НеобработанныйТекст = Сред(НеобработанныйТекст, ПозицияПоля + 6);
		
		ПозицияЗавершения = СтрНайти(НеобработанныйТекст, "/>");
		Если ПозицияЗавершения = 0 Тогда
			ОбработанныйТекст = ОбработанныйТекст + НеобработанныйТекст;
			Прервать;
		КонецЕсли;
		ТекстАтрибутовТэга = Лев(НеобработанныйТекст, ПозицияЗавершения);
		
		ПозицияЗначения = СтрНайти(ТекстАтрибутовТэга, " value=""");
		ТекстЗначения = "";
		Если ПозицияЗначения > 0 Тогда
			ТекстЗначения = Сред(ТекстАтрибутовТэга, ПозицияЗначения + 8);
			ТекстАтрибутовТэга = Лев(ТекстАтрибутовТэга, ПозицияЗначения - 1);
			ПозицияЗавершенияЗначения = СтрНайти(ТекстЗначения, """");
			Если ПозицияЗавершенияЗначения > 0 Тогда
				ТекстЗначения = Лев(ТекстЗначения, ПозицияЗавершенияЗначения - 1);
			КонецЕсли;
		КонецЕсли;
		
		ТекстПоля = "<div style=""border-style: solid; border-width: 1px; margin: 1px;""><label" + ТекстАтрибутовТэга + ">" + ТекстЗначения + "</label></div>";
		
		НеобработанныйТекст = Сред(НеобработанныйТекст, ПозицияЗавершения + 2);
		ОбработанныйТекст = ОбработанныйТекст + ТекстПоля;
	КонецЦикла;
	ТекстHTMLПротокола = ОбработанныйТекст;
	
	// преобразовать переводы строк в многострочных полях
	НеобработанныйТекст = ТекстHTMLПротокола;
	ОбработанныйТекст = "";
	Пока НеобработанныйТекст <> "" Цикл
		ПозицияПоля = СтрНайти(НеобработанныйТекст, "<textarea");
		Если ПозицияПоля = 0 Тогда
			ОбработанныйТекст = ОбработанныйТекст + НеобработанныйТекст;
			Прервать;
		КонецЕсли;
		ОбработанныйТекст = ОбработанныйТекст + Лев(НеобработанныйТекст, ПозицияПоля - 1);
		НеобработанныйТекст = Сред(НеобработанныйТекст, ПозицияПоля + 9);
		
		ПозицияЗавершения = СтрНайти(НеобработанныйТекст, "</textarea>");
		Если ПозицияЗавершения = 0 Тогда
			ОбработанныйТекст = ОбработанныйТекст + НеобработанныйТекст;
			Прервать;
		КонецЕсли;
		ТекстАтрибутовТэгаИСодержимого = Лев(НеобработанныйТекст, ПозицияЗавершения - 1);
		
		ПозицияЗакрытия = СтрНайти(ТекстПоля, ">");
		ТекстАтрибутовТэга = ТекстАтрибутовТэгаИСодержимого;
		ТекстСодержимого = "";
		Если ПозицияЗакрытия > 0 Тогда
			ТекстАтрибутовТэга = Лев(ТекстАтрибутовТэгаИСодержимого, ПозицияЗакрытия - 1);
			ТекстСодержимого = Сред(ТекстАтрибутовТэгаИСодержимого, ПозицияЗакрытия + 1);
			ТекстСодержимого = СтрЗаменить(ТекстСодержимого, Символы.ВК + Символы.ПС, "<br>");
			ТекстСодержимого = СтрЗаменить(ТекстСодержимого, Символы.ВК, "<br>");
			ТекстСодержимого = СтрЗаменить(ТекстСодержимого, Символы.ПС, "<br>");
		КонецЕсли;
		
		ТекстМногострочногоПоля = "<div style=""border-style: solid; border-width: 1px; margin: 1px;""><label" + ТекстАтрибутовТэга + ">" + ТекстСодержимого + "</label></div>";
		
		НеобработанныйТекст = Сред(НеобработанныйТекст, ПозицияЗавершения + 11);
		ОбработанныйТекст = ОбработанныйТекст + ТекстМногострочногоПоля;
	КонецЦикла;
	ТекстHTMLПротокола = ОбработанныйТекст;
	
	ТекстHTMLПротокола = СтрЗаменить(ТекстHTMLПротокола, "></label></div>", ">&nbsp;</label></div>");
	
	ТекстHTMLПротокола = ТекстПослеПрефикса(ТекстHTMLПротокола, "<form", "</form>");
	ТекстHTMLПротокола = ТекстПослеПрефикса(ТекстHTMLПротокола, ">");
	
	// объединение заголовка и содержимого
	
	// коррекция стилей
	ТекстHTMLЗаголовкаПротокола = СтрЗаменить(ТекстHTMLЗаголовкаПротокола, "body {", ".bodyh {");
	ТекстHTMLЗаголовкаПротокола = СтрЗаменить(ТекстHTMLЗаголовкаПротокола, "table {", ".tableh {");
	ТекстHTMLЗаголовкаПротокола = СтрЗаменить(ТекстHTMLЗаголовкаПротокола, "td {", ".tdh {");
	ТекстHTMLЗаголовкаПротокола = СтрЗаменить(ТекстHTMLЗаголовкаПротокола, "<TABLE ", "<TABLE class=""tableh"" ");
	
	// добавление стилей портала
	ТекстHTMLЗаголовкаПротокола = СтрЗаменить(ТекстHTMLЗаголовкаПротокола, "</STYLE>",
		"table {border-collapse: collapse; border-spacing: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px; width: 100%;}
		|tr, td {padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;}
		|.scroller {zoom: 1; overflow: auto; position: relative;}
		|.editor {zoom: 1; padding: 5px;}
		|.header {font-size: 18px; font-weight: bold;}
		|.fieldBorder {border: solid 1px #dddddd; margin: 6px 0px 0px 0px;}
		|.fieldLabel {width: 300px; text-align: right; padding-right: 4px;}
		|.fieldHeader {padding: 4px; font-weight: 600; background-image: none; background-color: #f3f3f3;
		| background-image: -webkit-gradient(linear,50% 0,50% 100%,color-stop(0%,#fbfbfb),color-stop(100%,#e9e9e9));
		| background-image: -webkit-linear-gradient(top,#fbfbfb,#e9e9e9);
		| background-image: -moz-linear-gradient(top,#fbfbfb,#e9e9e9);
		| background-image: -o-linear-gradient(top,#fbfbfb,#e9e9e9);
		| background-image: -ms-linear-gradient(top,#fbfbfb,#e9e9e9);
		| background-image: linear-gradient(top,#fbfbfb,#e9e9e9);}
		|.fieldHeader > a {font-weight: 900;}
		|.fieldPadding {padding: 4px;}
		|</STYLE>");
	
	ТекстHTMLПротокола = СтрЗаменить(ТекстHTMLЗаголовкаПротокола, "</BODY>", ТекстHTMLПротокола + "
		|</BODY>");
	
	Возврат ТекстHTMLПротокола;
	
КонецФункции

Функция ПолучитьОсновныеСвойстваПоследнейОтправкиОтчетаВФТС(Знач ОтчетСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтправкиФТС.Ссылка,
		|	ОтправкиФТС.ИдентификаторОтправкиНаСервере КАК Идентификатор,
		|	ОтправкиФТС.ИмяФайлаВыгрузки КАК ИмяФайлаВыгрузки,
		|	ОтправкиФТС.СтатусОтправки КАК Статус
		|ИЗ
		|	Справочник.ОтправкиФТС КАК ОтправкиФТС
		|ГДЕ
		|	ОтправкиФТС.ОтчетСсылка = &ЭтотОтчет
		|	И ОтправкиФТС.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтправкиФТС.ДатаОтправки УБЫВ";
	Запрос.Параметры.Вставить("ЭтотОтчет", ОтчетСсылка);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоследнююОтправкуОтчетаВФТС(ОтчетСсылка, ИдентификаторОтправкиНаСервере = "") Экспорт
	
	Отправка = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтправкиФТС.Ссылка, 
		|	ОтправкиФТС.ИдентификаторОтправкиНаСервере КАК Идентификатор
		|ИЗ
		|	Справочник.ОтправкиФТС КАК ОтправкиФТС
		|ГДЕ
		|	ОтправкиФТС.ОтчетСсылка = &ЭтотОтчет
		|	И ОтправкиФТС.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтправкиФТС.ДатаОтправки УБЫВ";
	Запрос.Параметры.Вставить("ЭтотОтчет", ОтчетСсылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Отправка = Выборка.Ссылка;
		ИдентификаторОтправкиНаСервере = Выборка.Идентификатор;
		
	Иначе
		ИдентификаторОтправкиНаСервере = "";
	КонецЕсли;
	
	Возврат Отправка;
	
КонецФункции

Процедура ОбновитьСтатусОтправкиФТСОтчета(Отчет)
	
	// находим последнюю не помеченную на удаление отправку отчета
	ПоследняяОтправка = ПолучитьПоследнююОтправкуОтчетаВФТС(Отчет);
	
	// вычисляем значение статуса отправки (ПеречислениеСсылка.СтатусыОтправки)
	Если ЗначениеЗаполнено(ПоследняяОтправка) Тогда
		
		СтатусОтправки = ПоследняяОтправка.СтатусОтправки;
		Если СтатусОтправки = Перечисления.СтатусыОтправки.ПринятЕстьОшибки Тогда
			//введено после добавления дополнительного статуса ПринятЕстьОшибки, при котором отчет считается сданным
			СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
		КонецЕсли;
		
	Иначе
		СтатусОтправки = Неопределено;
	КонецЕсли;
	
	// сохраняем статус в базе
	ЗаписатьСтатусОтправкиФТСОтчета(Отчет, СтатусОтправки, ПоследняяОтправка);
	
КонецПроцедуры

Процедура ЗаписатьСтатусОтправкиФТСОтчета(Отчет, СтатусОтправки, ОснованиеСтатуса)
	
	Если ЗначениеЗаполнено(СтатусОтправки) Тогда
		МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		МенЗап.Объект = Отчет;
		МенЗап.Статус = СтатусОтправки;
		МенЗап.Основание = ОснованиеСтатуса;
		МенЗап.Записать(Истина);
	Иначе
		МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		МенЗап.Объект = Отчет;
		МенЗап.Прочитать();
		Если МенЗап.Выбран() Тогда
			МенЗап.Удалить();
		КонецЕсли;
	КонецЕсли;
	
	// вызываем переопределяемую процедуру отработки изменения статуса отправки
	ПриИзмененииСтатусаОтправкиДокумента(Отчет, СтатусОтправки);
	
КонецПроцедуры

Функция ПолучитьПустуюДатуЗавершенияОтправкиФТС() Экспорт
	
	Возврат '39991231235959';
	
КонецФункции

Процедура ПриЗаписиОтправкиФТС(Объект, Отказ) Экспорт
	
	Если Объект.ОтчетСсылка <> Неопределено Тогда
		// отражаем изменения в регистре статусов отправки
		ОбновитьСтатусОтправкиФТСОтчета(Объект.ОтчетСсылка);
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписьОбъектовРегламентированнойОтчетности(Объект.ОтчетСсылка, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтрокуСостоянияОтправкиОтчетаИДополнительныеСвойстваДляФТС(ОтчетСсылка, ОрганизацияСсылка, ЦветТекста, ПоказыватьКнопкуОткрытияПротокола) Экспорт
	
	ПоказыватьКнопкуОткрытияПротокола = Ложь;
	ЦветТекста = Новый Цвет(0, 0, 192);
	
	// определяем последнюю отправку
	ОтправкаСсылка = ПолучитьПоследнююОтправкуОтчетаВФТС(ОтчетСсылка);
	Если НЕ ЗначениеЗаполнено(ОтправкаСсылка) Тогда
		СтрокаСостояния = НСтр("ru = 'Отчет не отправлялся.'");
	Иначе
		СтрокаСостояния = ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет отправлен %1.'"), Формат(ОтправкаСсылка.ДатаОтправки, "ДЛФ=DDT"));
		
		Если ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
			
			СтрокаСостояния = СтрокаСостояния + " " + НСтр("ru = 'Отчет не принят, получен протокол ошибок.'");
			ЦветТекста = Новый Цвет(255, 0, 0);
			ПоказыватьКнопкуОткрытияПротокола = Истина;
			
		ИначеЕсли ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
			
			ОтчетСдан = Истина;
			СтрокаСостояния = СтрокаСостояния + " " + НСтр("ru = 'Отчет сдан: получен протокол, ошибок не обнаружено.'");
			ЦветТекста = Новый Цвет(0, 179, 16);
			ПоказыватьКнопкуОткрытияПротокола = Истина;
			
		ИначеЕсли ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен Тогда
			
			ПоказыватьКнопкуОткрытияПротокола = ЗначениеЗаполнено(ОтправкаСсылка.Протокол.Получить());
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаСостояния;
	
КонецФункции

Функция ПоляНаСервереДляЗаписиОтправкиВФТС(ОбъектСсылка) Экспорт
	
	Возврат Новый Структура("ДатаНачалаПериода, ДатаОкончанияПериода, Версия",
		ОбъектСсылка.ДатаНачала, ОбъектСсылка.ДатаОкончания, ОбъектСсылка.Версия);
	
КонецФункции

Процедура ПередЗаписьюОтправкиФТС(Объект, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		Объект.Период = СокрЛП(Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd") + Формат('39991231' - Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd"));
	КонецЕсли;
	
	Если Объект.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
			Объект.ДатаЗакрытия = ПолучитьПустуюДатуЗавершенияОтправкиФТС();
		КонецЕсли;
		
	Иначе
		Объект.ДатаЗакрытия = Объект.ДатаПолученияРезультата;
	КонецЕсли;
	
КонецПроцедуры

Функция СписокДопустимыхОрганизацийВОбъектахОбменаФТС() Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаФТС.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиОбменаФТС КАК НастройкиОбменаФТС
	|ГДЕ
	|	НастройкиОбменаФТС.ИспользоватьОбмен = ИСТИНА";
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен сервером

Функция ОтправитьВыгрузкуНаСерверФТС(ФайлыИДанныеОтправки, ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ИдентификаторОтправкиНаСервере 				= "";
	ПараметрыСоединения.ПовторятьСоединение 						= Ложь;
	ПараметрыСоединения.ОрганизацияПодтверждена 					= Неопределено;
	ПараметрыСоединения.ОтправленЗапросНаПодтверждениеОрганизации 	= Ложь;
	
	ЗагрузкаПроизведена = Ложь;
	
	АвторизацияПроизведена = (ПараметрыСоединения.СоединениеHTTP <> Неопределено);
	
	Если НЕ АвторизацияПроизведена Тогда
		// очистить пароль, если в диалоге сохранения пароля не установлена галочка сохранения
		Если НЕ ПараметрыСоединения.СохранитьПароль И ЗначениеЗаполнено(ПараметрыСоединения.СохраненныйПароль) Тогда
			ЗаписатьЛогинИПарольПорталаФТС(ПараметрыОтправки.Организация, , "");
			ПараметрыСоединения.СохраненныйПароль = "";
		КонецЕсли;
	КонецЕсли;
	
	Для НомерСервера = 1 По 2 Цикл
		АдресСервера = ПараметрыСоединения.ТекущийАдресСервера;
		
		Если НЕ АвторизацияПроизведена Тогда
			
			// устанавливаем соединение с сервером
			ОписаниеОшибкиУстановкиСоединения = "";
			ПараметрыСоединения.СоединениеHTTP = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета("https://" + АдресСервера,
				ОписаниеОшибкиУстановкиСоединения);
			
			Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
				ПараметрыСоединения.ПовторятьСоединение = Истина;
				СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Не удалось установить соединение с сервером:
									|%1'"), ОписаниеОшибкиУстановкиСоединения), ПараметрыСоединения.СообщенияПользователю);
				Возврат Ложь;
			КонецЕсли;
			
			ПараметрыСоединения.ЗначениеCookie = "";
			
			Если НомерСервера = 1 Тогда
				ЭтоВызовПередАвторизацией = Истина;
				Если НЕ УточнитьАдресСервераФТС(ПараметрыОтправки, ПараметрыСоединения, ЭтоВызовПередАвторизацией) Тогда
					ПараметрыСоединения.СоединениеHTTP = Неопределено;
					Возврат Ложь;
				КонецЕсли;
				
				Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
					// сервер сменился, нужно повторно соединиться
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			АвторизацияПроизведена = АвторизоватьсяНаПорталеФТС(ПараметрыОтправки, ПараметрыСоединения);
			
		КонецЕсли;
		
		Если АвторизацияПроизведена Тогда
			Если НомерСервера = 1 Тогда
				ЭтоВызовПередАвторизацией = Ложь;
				Если НЕ УточнитьАдресСервераФТС(ПараметрыОтправки, ПараметрыСоединения, ЭтоВызовПередАвторизацией) Тогда
					ПараметрыСоединения.СоединениеHTTP = Неопределено;
					Возврат Ложь;
				КонецЕсли;
				
				Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
					// сервер сменился, нужно повторно соединиться
					АвторизацияПроизведена = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	Если АвторизацияПроизведена Тогда
		
		ЗагрузкаПроизведена = ЗагрузитьОтчетНаПорталФТС(ФайлыИДанныеОтправки.ИмяФайлаОтправки, ФайлыИДанныеОтправки.КороткоеИмяФайлаВыгрузки, ПараметрыОтправки, ПараметрыСоединения);
		
		Если НЕ ЗагрузкаПроизведена И ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) И НЕ ПараметрыСоединения.ПовторятьСоединение Тогда
			НастройкиПользователя = НастройкиПользователяФТС(ПараметрыОтправки, ПараметрыСоединения, Истина, ФайлыИДанныеОтправки.ЭтоЭлектроннаяПодписьВМоделиСервиса);
			Если НастройкиПользователя <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыСоединения, НастройкиПользователя);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
	КонецЕсли;
	
	Возврат ЗагрузкаПроизведена;
	
КонецФункции

Функция ОтправитьПодписьНаСерверФТС(ФайлыИДанныеОтправки, ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	ЗагрузкаПроизведена = Ложь;
	АдресСервера = ПараметрыСоединения.ТекущийАдресСервера;
	
	АвторизацияПроизведена = (ПараметрыСоединения.СоединениеHTTP <> Неопределено);
	
	Если НЕ АвторизацияПроизведена Тогда
		
		// устанавливаем соединение с сервером
		ОписаниеОшибкиУстановкиСоединения = "";
		ПараметрыСоединения.СоединениеHTTP = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета("https://" + АдресСервера, ОписаниеОшибкиУстановкиСоединения);
		
		Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не удалось установить соединение с сервером:
								|%1'"), ОписаниеОшибкиУстановкиСоединения), ПараметрыСоединения.СообщенияПользователю);
			Возврат Ложь;
		КонецЕсли;
		
		ПараметрыСоединения.ЗначениеCookie = "";
		АвторизацияПроизведена = АвторизоватьсяНаПорталеФТС(ПараметрыОтправки, ПараметрыСоединения);
		
	КонецЕсли;
	
	Если АвторизацияПроизведена Тогда
		
		ЗагрузкаПроизведена = ЗагрузитьПодписьНаПорталФТС(ФайлыИДанныеОтправки.ИмяФайлаПодписи, ПараметрыОтправки, ПараметрыСоединения);
		
		Если НЕ ЗагрузкаПроизведена И ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) И НЕ ПараметрыСоединения.ПовторятьСоединение Тогда
			НастройкиПользователя = НастройкиПользователяФТС(ПараметрыОтправки, ПараметрыСоединения, Истина, ФайлыИДанныеОтправки.ЭтоЭлектроннаяПодписьВМоделиСервиса);
			Если НастройкиПользователя <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыСоединения, НастройкиПользователя);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
	КонецЕсли;
	
	Возврат ЗагрузкаПроизведена;
	
КонецФункции

Функция УточнитьАдресСервераФТС(ПараметрыОтправки, ПараметрыСоединения, ЭтоВызовПередАвторизацией)
	
	АдресСервера = ПараметрыСоединения.ТекущийАдресСервера;
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	АдресСтраницы = ?(ЭтоВызовПередАвторизацией, "/", "/FtsPersonalCabinetWeb/Services/Obtain/Stat");
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.Получить(АдресСтраницы, ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		Возврат Ложь;
		
	КонецПопытки;
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	Если ОтветHTTP.КодСостояния >= 300 И ОтветHTTP.КодСостояния < 400 Тогда
		ТекстОтвета = нрег(ТекстОтвета);
		ПолученныйАдресСервера = ТекстПослеПрефикса(ТекстОтвета, "<a href=""https://", """");
		ПозицияРазделителя = СтрНайти(ПолученныйАдресСервера, "/");
		Если ПозицияРазделителя > 0 Тогда
			ПолученныйАдресСервера = Лев(ПолученныйАдресСервера, ПозицияРазделителя - 1);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПолученныйАдресСервера) И Прав(ПолученныйАдресСервера, 11) = ".customs.ru" Тогда
			АдресСервера = ПолученныйАдресСервера;
		КонецЕсли;
	КонецЕсли;
	
	Если АдресСервера <> ПараметрыСоединения.ТекущийАдресСервера Тогда
		ПараметрыСоединения.ТекущийАдресСервера = АдресСервера;
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция АвторизоватьсяНаПорталеФТС(ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить("X-Ext.Net", "delta=true");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ПакетДляАвторизации = "login=" + ЗакодироватьПараметрСсылки(ПараметрыСоединения.Логин) + "&password=" + ЗакодироватьПараметрСсылки(ПараметрыСоединения.Пароль);
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапроса, "windows-1251");
	ЗаписываемыйФайл.Записать(ПакетДляАвторизации);
	ЗаписываемыйФайл.Закрыть();
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	ОтветHTTP = Неопределено;
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаЗапроса, "/FtsPersonalCabinetWeb/Auth/Authenticate", ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		
		ОбъектФайлОтвета = Новый Файл(ИмяФайлаОтвета);
		Если НЕ ОбъектФайлОтвета.Существует() Тогда
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
			Возврат Ложь;
		КонецЕсли;
		
	КонецПопытки;
	
	Если ОтветHTTP <> Неопределено Тогда
		ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
		ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	КонецЕсли;
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаЗапроса);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаФТС(ТекстОтвета);
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
		ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстПослеПрефикса(ТекстОтвета, "System.Exception:", " at ");
		ПараметрыСоединения.ОписаниеОшибкиСервером = СокрЛП(ПараметрыСоединения.ОписаниеОшибкиСервером);
	КонецЕсли;
	
	ПараметрыСоединения.ПовторятьЗапросПароля = ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером);
	
	// сохранить пароль при успешной авторизации
	
	Если НЕ ПараметрыСоединения.ПовторятьЗапросПароля И (ПараметрыСоединения.Логин <> ПараметрыСоединения.СохраненныйЛогин ИЛИ (ПараметрыСоединения.СохранитьПароль И ПараметрыСоединения.Пароль <> ПараметрыСоединения.СохраненныйПароль)) Тогда
		ПарольДляСохранения = ?(ПараметрыСоединения.СохранитьПароль, ПараметрыСоединения.Пароль, "");
		ЗаписатьЛогинИПарольПорталаФТС(ПараметрыОтправки.Организация, ПараметрыСоединения.Логин, ПарольДляСохранения);
		ПараметрыСоединения.СохраненныйЛогин = ПараметрыСоединения.Логин;
		ПараметрыСоединения.СохраненныйПароль = ПарольДляСохранения;
	КонецЕсли;
	
	Возврат (НЕ ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером));
	
КонецФункции

Функция ЗагрузитьОтчетНаПорталФТС(ИмяФайлаОтправки, КороткоеИмяФайлаВыгрузки, ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	
	// посылаем запрос для загрузки файла
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаОтправки, "/FtsStatFormEpExtWeb/Stat/List.aspx", ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаФТС(ТекстОтвета);
	
	Если СтрНайти(ПараметрыСоединения.ОписаниеОшибкиСервером, "подтвердить данные об организации") > 0
		И СтрНайти(ПараметрыСоединения.ОписаниеОшибкиСервером, "Add_organization.html") > 0 Тогда
		ПараметрыСоединения.ОписаниеОшибкиСервером = НСтр("ru = 'Для отправки требуется подтвердить данные об ЭП организации, отправка запроса на подтверждение выполняется автоматически, повторите попытку отправки отчета позже.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// сбрасываем отправки
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить("X-Ext.Net", "delta=true");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ПакетДляСбросаОтправок = "submitDirectEventConfig=" + ЗакодироватьПараметрСсылки("{""config"":{""extraParams"":{""currentLastExchangeIn"":null}}}")
		+ "&ctl56=&__EVENTTARGET=ctl02&__EVENTARGUMENT=" + ЗакодироватьПараметрСсылки("-|public|Refresh")
		+ "&TextFieldNote=&DropDownCreateVersion=" + ЗакодироватьПараметрСсылки(ПараметрыОтправки.ВерсияФормированияВыгрузки + "/" + ПараметрыОтправки.ВерсияОтправкиПортала);
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапроса, "windows-1251");
	ЗаписываемыйФайл.Записать(ПакетДляСбросаОтправок);
	ЗаписываемыйФайл.Закрыть();
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаЗапроса, "/FtsStatFormEpExtWeb/Stat/List.aspx", ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаФТС(ТекстОтвета);
	
	Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// посылаем запрос списка для нахождения идентификатора загруженного отчета
	
	НомерСтраницы = 1;
	ЭлементовНаСтранице = 10;
	
	Пока Истина Цикл
		
		ЗаголовкиHTTP = Новый Соответствие();
		ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
		ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
		ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
		ЗаголовкиHTTP.Вставить("X-Ext.Net", "delta=true");
		Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
			ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
		КонецЕсли;
		
		НомерСтраницыСтрокой = Формат(НомерСтраницы, "ЧН=0; ЧГ=");
		ИндексНачальногоЭлементаСтрокой = Формат((НомерСтраницы - 1) * ЭлементовНаСтранице, "ЧН=0; ЧГ=");
		ЭлементовНаСтраницеСтрокой = Формат(ЭлементовНаСтранице, "ЧН=0; ЧГ=");
		ПакетДляПолученияСписка = "submitDirectEventConfig=" + ЗакодироватьПараметрСсылки("{""config"":{""extraParams"":{""page"":" + НомерСтраницыСтрокой + ",""start"":" + ИндексНачальногоЭлементаСтрокой + ",""limit"":" + ЭлементовНаСтраницеСтрокой + ",""sort"":""[{\""property\"":\""CreatedModifiedDate\"",\""direction\"":\""DESC\""}]""}}}")
			+ "&ctl55=&__EVENTTARGET=ctl02&__EVENTARGUMENT=" + ЗакодироватьПараметрСсылки("StoreStatForms|postback|read")
			+ "&TextFieldNote=&DropDownCreateVersion=" + ЗакодироватьПараметрСсылки(ПараметрыОтправки.ВерсияФормированияВыгрузки + "/" + ПараметрыОтправки.ВерсияОтправкиПортала);
		ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
		ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапроса, "windows-1251");
		ЗаписываемыйФайл.Записать(ПакетДляПолученияСписка);
		ЗаписываемыйФайл.Закрыть();
		
		ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
		
		Попытка
			ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаЗапроса, "/FtsStatFormEpExtWeb/Stat/List.aspx", ИмяФайлаОтвета, ЗаголовкиHTTP);
		Исключение
			
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			Возврат Ложь;
			
		КонецПопытки;
		
		ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
		ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
		
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		
		ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаФТС(ТекстОтвета);
		
		Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаголовкиОтчетов = ТаблицаJSON(ТекстОтвета, "data:{data:[", "ИдентификаторЗаписи, Наименование", "Id, Note", "success:true");
		
		Если ЗаголовкиОтчетов <> Неопределено Тогда
			Для каждого ЗаголовокОтчета Из ЗаголовкиОтчетов Цикл
				Если ЗаголовокОтчета.Наименование = КороткоеИмяФайлаВыгрузки Тогда
					ПараметрыСоединения.ИдентификаторОтправкиНаСервере = ЗаголовокОтчета.ИдентификаторЗаписи;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыСоединения.ИдентификаторОтправкиНаСервере) ИЛИ ЗаголовкиОтчетов = Неопределено ИЛИ ЗаголовкиОтчетов.Количество() < ЭлементовНаСтранице Тогда
			Прервать;
		КонецЕсли;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ИдентификаторОтправкиНаСервере) Тогда
		ПараметрыСоединения.ОписаниеОшибкиСервером = НСтр("ru = 'Ошибка загрузки отчета на портал Федеральной таможенной службы.'");
		Возврат Ложь;
	КонецЕсли;
	
	// посылаем запрос идентификатора отправки отчета
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить("X-Ext.Net", "delta=true");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ПакетДляПолученияИдентификатораОтправки = "submitDirectEventConfig=" + ЗакодироватьПараметрСсылки("{""config"":{""extraParams"":{""target"":""" + ПараметрыОтправки.ВерсияФормированияВыгрузки + "/" + ПараметрыОтправки.ВерсияОтправкиПортала
		+ "|" + ТекстВШестнадцатеричныйUnicode("Подача статистической формы") + "|" + ПараметрыСоединения.ИдентификаторОтправкиНаСервере + """,""action"":""Action_" + ТекстВШестнадцатеричныйUnicode("Отправить") + """,""prevAct"":""null""}}}")
		+ "&ctl55=&__EVENTTARGET=ctl02&__EVENTARGUMENT=" + ЗакодироватьПараметрСсылки("-|public|ExecuteAction")
		+ "&TextFieldNote=&DropDownCreateVersion=" + ЗакодироватьПараметрСсылки(ПараметрыОтправки.ВерсияФормированияВыгрузки + "/" + ПараметрыОтправки.ВерсияОтправкиПортала);
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапроса, "windows-1251");
	ЗаписываемыйФайл.Записать(ПакетДляПолученияИдентификатораОтправки);
	ЗаписываемыйФайл.Закрыть();
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаЗапроса, "/FtsStatFormEpExtWeb/Stat/List.aspx", ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаФТС(ТекстОтвета);
	
	Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСоединения.ИдентификаторВыполненияОтправки = ТекстПослеПрефикса(ТекстОтвета, "result:{""Id"":""", """");
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ИдентификаторВыполненияОтправки) Тогда
		ПараметрыСоединения.ОписаниеОшибкиСервером = НСтр("ru = 'Ошибка отправки отчета на портале Федеральной таможенной службы.'");
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОтвета = Строка(ТекстПослеПрефикса(ТекстОтвета, """Data"":"""));
	ПозицияКонцаПараметров = СтрНайти(ТекстОтвета, """},""");
	ПозицияРазделителяПараметров = СтрНайти(ТекстОтвета, """,""");
	Если ПозицияКонцаПараметров > 0 ИЛИ ПозицияРазделителяПараметров > 0 Тогда
		Если (ПозицияКонцаПараметров > 0 И ПозицияРазделителяПараметров > 0 И ПозицияКонцаПараметров < ПозицияРазделителяПараметров) ИЛИ ПозицияРазделителяПараметров = 0 Тогда
			ПозицияРазделителяПараметров = ПозицияКонцаПараметров;
		КонецЕсли;
		ТекстОтвета = Лев(ТекстОтвета, ПозицияРазделителяПараметров - 1);
	КонецЕсли;
	ТекстПодписываемойВыгрузки = СтрЗаменить(ТекстОтвета, "\""", """");
	ТекстПодписываемойВыгрузки = СтрЗаменить(ТекстПодписываемойВыгрузки, "\r\n", Символы.ПС);
	
	// вместо текста подписываемой выгрузки портал ФТС теперь возвращает его готовый хеш в Base64
	ИмяВременногоФайлаПодписываемойВыгрузки = ПолучитьИмяВременногоФайла();
	ДанныеПодписываемойВыгрузки = Base64Значение(ТекстПодписываемойВыгрузки);
	ДанныеПодписываемойВыгрузки.Записать(ИмяВременногоФайлаПодписываемойВыгрузки);
	ЧтениеФайлаПодписываемойВыгрузки = Новый ЧтениеТекста(ИмяВременногоФайлаПодписываемойВыгрузки, "windows-1251");
	ТекстПодписываемойВыгрузки = ЧтениеФайлаПодписываемойВыгрузки.Прочитать();
	ЧтениеФайлаПодписываемойВыгрузки.Закрыть();
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайлаПодписываемойВыгрузки);
	
	Если Лев(ТекстПодписываемойВыгрузки, 16) = "ObjectHashBase64" Тогда
		ТекстПодписываемойВыгрузки = Сред(ТекстПодписываемойВыгрузки, 17);
	КонецЕсли;
	ТекстПодписываемойВыгрузки = "<Object xmlns=""http://www.w3.org/2000/09/xmldsig#"" Id=""Object"">" + ТекстПодписываемойВыгрузки + "</Object>";
	
	ИмяВременногоФайлаПодписываемойВыгрузки = ПолучитьИмяВременногоФайла();
	ЗаписьФайлаПодписываемойВыгрузки = Новый ЗаписьТекста(ИмяВременногоФайлаПодписываемойВыгрузки, "windows-1251");
	ЗаписьФайлаПодписываемойВыгрузки.Записать(ТекстПодписываемойВыгрузки);
	ЗаписьФайлаПодписываемойВыгрузки.Закрыть();
	ДанныеПодписываемойВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайлаПодписываемойВыгрузки);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайлаПодписываемойВыгрузки);
	ПараметрыСоединения.ПодписываемоеСодержимоеВыгрузки64 = Base64Строка(ДанныеПодписываемойВыгрузки);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ПодписываемоеСодержимоеВыгрузки64) Тогда
		ПараметрыСоединения.ОписаниеОшибкиСервером = НСтр("ru = 'Ошибка отправки отчета на портале Федеральной таможенной службы.'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НЕ ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером);
	
КонецФункции

Функция ЗагрузитьПодписьНаПорталФТС(ИмяФайлаПодписи, ПараметрыОтправки, ПараметрыСоединения)
	
	// посылаем запрос отправки с подписью
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить("X-Ext.Net", "delta=true");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ИмяФайлаПодписи);
	ТекстПодписиXMLDSig64 = Base64Строка(ДвоичныеДанныеПодписи);
	ТекстПодписиXMLDSig64 = СтрЗаменить(ТекстПодписиXMLDSig64, Символы.ВК, "");
	ТекстПодписиXMLDSig64 = СтрЗаменить(ТекстПодписиXMLDSig64, Символы.ПС, "");
	ПакетДляОтправкиПодписи = "submitDirectEventConfig=" + ЗакодироватьПараметрСсылки("{""config"":{""extraParams"":{""target"":""" + ПараметрыОтправки.ВерсияФормированияВыгрузки + "/" + ПараметрыОтправки.ВерсияОтправкиПортала
		+ "|" + ТекстВШестнадцатеричныйUnicode("Подача статистической формы") + "|" + ПараметрыСоединения.ИдентификаторОтправкиНаСервере + """,""action"":""Action_" + ТекстВШестнадцатеричныйUnicode("Отправить") + """,""prevAct"":""{\""Id\"":\"""
		+ ПараметрыСоединения.ИдентификаторВыполненияОтправки + "\"",\""DocumentForSign\"":{\""Name\"":\""" + СтрЗаменить(ТекстВШестнадцатеричныйUnicode("Статистическая форма учета перемещения товара"), "\", "\\") + "\"",\""Data\"":\"""
		+ ТекстПодписиXMLDSig64 + "\""},\""DocumentForFill\"":null,\""DocumentForView\"":null,\""DocumentForPrint\"":null,\""DocumentEditor\"":null,\""DocumentInEditor\"":null,"
		+ "\""SelectChoice\"":null,\""SelectNotedChoice\"":null,\""SelectMultipleChoice\"":null,\""MessageBox\"":null,\""InputBox\"":null,\""Window\"":null,\""Redirect\"":null,\""Download\"":null,\""Upload\"":null,\""Script\"":null,\""Progress\"":null,\""CancelResult\"":false,\""UseAllSelectors\"":false}""}}}")
		+ "&ctl55=&__EVENTTARGET=ctl02&__EVENTARGUMENT=" + ЗакодироватьПараметрСсылки("-|public|ExecuteAction")
		+ "&TextFieldNote=&DropDownCreateVersion=" + ЗакодироватьПараметрСсылки(ПараметрыОтправки.ВерсияФормированияВыгрузки + "/" + ПараметрыОтправки.ВерсияОтправкиПортала);
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапроса, "windows-1251");
	ЗаписываемыйФайл.Записать(ПакетДляОтправкиПодписи);
	ЗаписываемыйФайл.Закрыть();
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаЗапроса, "/FtsStatFormEpExtWeb/Stat/List.aspx", ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаФТС(ТекстОтвета);
	
	Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// посылаем подтверждение отправки при предупреждении о несовпадении реквизитов сертификата и имен в отчете
	
	Если СтрНайти(ТекстОтвета, """ConfirmBox"":{""Title"":""") <> 0 И ЗначениеЗаполнено(ТекстПослеПрефикса(ТекстОтвета, """ConfirmText"":""", """")) Тогда
		
		ЗаголовкиHTTP = Новый Соответствие();
		ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
		ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
		ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
		ЗаголовкиHTTP.Вставить("X-Ext.Net", "delta=true");
		Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
			ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
		КонецЕсли;
		
		ПакетДляПодтвержденияОтправки = "submitDirectEventConfig=" + ЗакодироватьПараметрСсылки("{""config"":{""extraParams"":{""target"":""" + ПараметрыОтправки.ВерсияФормированияВыгрузки + "/" + ПараметрыОтправки.ВерсияОтправкиПортала
			+ "|" + ТекстВШестнадцатеричныйUnicode("Подача статистической формы") + "|" + ПараметрыСоединения.ИдентификаторОтправкиНаСервере + """,""action"":""Action_" + ТекстВШестнадцатеричныйUnicode("Отправить") + """,""prevAct"":""{\""Id\"":\"""
			+ ПараметрыСоединения.ИдентификаторВыполненияОтправки + "\"",\""Progress\"":null,\""Script\"":null,\""Function\"":null,\""DocumentForSign\"":null,\""DocumentForFill\"":null,\""DocumentForView\"":null,\""DocumentForPrint\"":null,"
			+ "\""DocumentEditor\"":null,\""DocumentInEditor\"":null,\""SelectChoice\"":null,\""SelectNotedChoice\"":null,\""SelectMultipleChoice\"":null,\""ConfirmBox\"":{\""Title\"":null,\""Message\"":null,\""ConfirmText\"":\"""
			+ СтрЗаменить(ТекстВШестнадцатеричныйUnicode("Все равно отправить"), "\", "\\") + "\"",\""CancelText\"":\""" + СтрЗаменить(ТекстВШестнадцатеричныйUnicode("Изменить и отправить позже"), "\", "\\") + "\"","
			+ "\""Result\"":false,\""ConfirmResult\"":true},\""MessageBox\"":null,\""InfoBox\"":null,\""InputBox\"":null,\""Window\"":null,\""Redirect\"":null,\""Download\"":null,\""Upload\"":null}""}}}")
			+ "&SearchTxt=&FilterTabs=&ctl55=&__EVENTTARGET=ctl02&__EVENTARGUMENT=" + ЗакодироватьПараметрСсылки("-|public|ExecuteAction")
			+ "&TextFieldNote=&DropDownCreateVersion=" + ЗакодироватьПараметрСсылки(ПараметрыОтправки.ВерсияФормированияВыгрузки + "/" + ПараметрыОтправки.ВерсияОтправкиПортала);
		ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
		ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапроса, "windows-1251");
		ЗаписываемыйФайл.Записать(ПакетДляПодтвержденияОтправки);
		ЗаписываемыйФайл.Закрыть();
		
		ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
		
		Попытка
			ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаЗапроса, "/FtsStatFormEpExtWeb/Stat/List.aspx", ИмяФайлаОтвета, ЗаголовкиHTTP);
		Исключение
			
			ПараметрыСоединения.ПовторятьСоединение = Истина;
			Возврат Ложь;
			
		КонецПопытки;
		
		ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
		ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
		
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		
		ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаФТС(ТекстОтвета);
		
		Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаголовокОтчета = ПолучитьПротоколОбработкиОтчетаНаПорталеФТС(ПараметрыОтправки, ПараметрыСоединения, Истина);
	
	Если ЗаголовокОтчета = Неопределено ИЛИ ЗаголовокОтчета.Состояние = "Новая статформа" ИЛИ ЗаголовокОтчета.Состояние = "Черновик" Тогда
		ПараметрыСоединения.ОписаниеОшибкиСервером = НСтр("ru = 'Сбой при отправке в Федеральную таможенную службу РФ'");
		
		ИнформацияОСообщении = ТекстПослеПрефикса(ТекстОтвета, """InfoBox"":{""", "}");
		Если ЗначениеЗаполнено(ИнформацияОСообщении) Тогда
			ЗаголовокСообщения = ТекстПослеПрефикса("""" + ИнформацияОСообщении, """Title"":""", """");
			ЗаголовокСообщения = Строка(ЗаголовокСообщения);
			ЗаголовокСообщения = СтрЗаменить(ЗаголовокСообщения, "\""", """");
			ЗаголовокСообщения = СтрЗаменить(ЗаголовокСообщения, "<br>", " ");
			ЗаголовокСообщения = СтрЗаменить(ЗаголовокСообщения, "<br/>", " ");
			ЗаголовокСообщения = ТекстИзHTML(ЗаголовокСообщения);
			ЗаголовокСообщения = СокрЛП(ЗаголовокСообщения);
			ЗаголовокСообщения = СтрЗаменить(ЗаголовокСообщения, "Данные лица, ответственного за предоставление статистической формы не совпадают с данными ЭЦП",
				НСтр("ru = 'Данные лица, ответственного за предоставление статистической формы, не совпадают с данными сертификата ЭП'"));
			Если Прав(ЗаголовокСообщения, 1) <> "." И Прав(ЗаголовокСообщения, 1) <> "!" Тогда
				ЗаголовокСообщения = ЗаголовокСообщения + ".";
			КонецЕсли;
			
			ТекстСообщения = ТекстПослеПрефикса(ТекстОтвета, """Message"":""");
			ТекстСообщения = Строка(ТекстСообщения);
			КонецСообщения = СтрНайти(ТекстСообщения, """,""");
			Если КонецСообщения = 0 И Прав(ТекстСообщения, 1) = """" Тогда
				КонецСообщения = СтрДлина(КонецСообщения);
			КонецЕсли;
			Если КонецСообщения <> 0 Тогда
				ТекстСообщения = Лев(ТекстСообщения, КонецСообщения - 1);
			КонецЕсли;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "\""", """");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "Необходимо использовать электронную подпись из профиля Личного кабинета. Перейдите в раздел ""Профиль"" и нажмите ""Заменить ЭП"".",
				НСтр("ru = 'Необходимо использовать сертификат ЭП из профиля Личного кабинета на портале ФТС, будет автоматически отправлен запрос на замену сертификата ЭП в профиле на портале.'"));
			
			Если ЗначениеЗаполнено(ЗаголовокСообщения) И ЗначениеЗаполнено(ТекстСообщения) Тогда
				ПараметрыСоединения.ОписаниеОшибкиСервером = "";
				
				ПрефиксСтроки = "<td style=""border: solid 1px; font-weight: bold;"">";
				РазделительЗначений = "</td>\r\n    <td style=""border: solid 1px;"">";
				ЗавершениеСтроки = "</td>\r\n  </tr>\r\n";
				ТекстСообщенияВнутриТаблицы = ТекстПослеПрефикса(ТекстСообщения, ПрефиксСтроки, "</table>");
				Если НЕ ЗначениеЗаполнено(ТекстСообщенияВнутриТаблицы) Тогда
					ПараметрыСоединения.ОписаниеОшибкиСервером = ЗаголовокСообщения + ?(ЗаголовокСообщения <> "" И ТекстСообщения <> "", " ", "") + ТекстСообщения;
					
				Иначе
					ТекстСообщения = ПрефиксСтроки + Строка(ТекстСообщенияВнутриТаблицы);
					Пока Истина Цикл
						ПозицияПослеПостфикса = Неопределено;
						ИмяРасхождения = ТекстПослеПрефикса(ТекстСообщения, ПрефиксСтроки, РазделительЗначений, ПозицияПослеПостфикса);
						ИмяРасхождения = Строка(ИмяРасхождения);
						ИмяРасхождения = ТекстИзHTML(ИмяРасхождения);
						ТекстСообщения = Сред(ТекстСообщения, ПозицияПослеПостфикса);
						Если НЕ ЗначениеЗаполнено(ТекстСообщения) Тогда
							Прервать;
						КонецЕсли;
						ТекстСообщения = РазделительЗначений + ТекстСообщения;
						
						ЗначениеВОтчете = ТекстПослеПрефикса(ТекстСообщения, РазделительЗначений, РазделительЗначений, ПозицияПослеПостфикса);
						ЗначениеВОтчете = Строка(ЗначениеВОтчете);
						ЗначениеВОтчете = СтрЗаменить(ЗначениеВОтчете, "<br>", " ");
						ЗначениеВОтчете = СтрЗаменить(ЗначениеВОтчете, "<br/>", " ");
						ЗначениеВОтчете = ТекстИзHTML(ЗначениеВОтчете);
						ТекстСообщения = РазделительЗначений + Сред(ТекстСообщения, ПозицияПослеПостфикса);
						
						ЗначениеВСертификате = ТекстПослеПрефикса(ТекстСообщения, РазделительЗначений, ЗавершениеСтроки, ПозицияПослеПостфикса);
						ЗначениеВСертификате = Строка(ЗначениеВСертификате);
						ЗначениеВСертификате = СтрЗаменить(ЗначениеВСертификате, "<br>", " ");
						ЗначениеВСертификате = СтрЗаменить(ЗначениеВСертификате, "<br/>", " ");
						ЗначениеВСертификате = ТекстИзHTML(ЗначениеВСертификате);
						ТекстСообщения = РазделительЗначений + Сред(ТекстСообщения, ПозицияПослеПостфикса);
						
						Если СтрНайти(ЗначениеВОтчете, "style=""color: red;""") = 0 И СтрНайти(ЗначениеВСертификате, "style=""color: red;""") = 0 Тогда
							ПараметрыСоединения.ОписаниеОшибкиСервером = ПараметрыСоединения.ОписаниеОшибкиСервером
								+ " " + СтрШаблон("%1: ""%2"", в сертификате: ""%3"".", ИмяРасхождения, ЗначениеВОтчете, ЗначениеВСертификате);
						КонецЕсли;
					КонецЦикла;
					
					ПараметрыСоединения.ОписаниеОшибкиСервером = ЗаголовокСообщения + ПараметрыСоединения.ОписаниеОшибкиСервером
						+ ?(ПараметрыСоединения.ОписаниеОшибкиСервером <> "", " " + НСтр("ru = 'Исправьте ошибки и повторите отправку.'"), "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(ПараметрыСоединения.ОписаниеОшибкиСервером, "подтвердить данные об организации") > 0
		И СтрНайти(ПараметрыСоединения.ОписаниеОшибкиСервером, "Add_organization.html") > 0 Тогда
		ПараметрыСоединения.ОписаниеОшибкиСервером = НСтр("ru = 'Для отправки требуется подтвердить данные об ЭП организации, отправка запроса на подтверждение выполняется автоматически, повторите попытку отправки отчета позже.'");
	КонецЕсли;
	
	Возврат НЕ ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером);
	
КонецФункции

Функция ТекстОшибкиПорталаФТС(ТекстОтвета)
	
	ТекстОшибки = "";
	ЭтоОшибка = (СтрНайти(ТекстОтвета, "success:false") > 0);
	
	Если ЭтоОшибка ИЛИ (СтрНайти(ТекстОтвета, "success:true") = 0 И СтрНайти(ТекстОтвета, """error"":""") > 0) Тогда
		
		ТекстОшибки = НСтр("ru = 'Ошибочный ответ сервера'");
		
		Позиция = 1;
		Разделитель = "";
		ОжидаемыйРазделитель = "{";
		Пока Позиция <= СтрДлина(ТекстОтвета) Цикл
			
			Пока Позиция <= СтрДлина(ТекстОтвета) Цикл
				ИмяПараметра = СледующееЗначениеJSON(ТекстОтвета, Позиция, Разделитель);
				Если Разделитель = ОжидаемыйРазделитель Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ЗначениеПараметра = СледующееЗначениеJSON(ТекстОтвета, Позиция, Разделитель);
			Если Разделитель <> ":" Тогда
				Прервать;
			КонецЕсли;
			
			Если ИмяПараметра = "error" ИЛИ ИмяПараметра = "errorMessage" ИЛИ (ИмяПараметра = "message" И ЭтоОшибка) Тогда
				
				ЗначениеПараметра = ТекстИзHTML(ЗначениеПараметра);
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, "<br>", Символы.ВК + Символы.ПС);
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, "<br/>", Символы.ВК + Символы.ПС);
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, "<br />", Символы.ВК + Символы.ПС);
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, "\r\n", Символы.ВК + Символы.ПС);
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, "   ", " ");
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, "  ", " ");
				
				Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					ТекстОшибки = СокрЛП(ЗначениеПараметра);
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
			ОжидаемыйРазделитель = ",";
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ТекстОшибкиБезТехническойИнформацииФТС(ТекстОшибки, ЭтоОшибкиПроверки = Ложь)
	
	Результат = ТекстОшибки;
	
	ЭтоОшибкиПроверки = (СтрДлина(Результат) >= 1250);
	
	ПрефиксОшибки = "System.Exception:";
	ДлинаПрефиксаОшибки = СтрДлина(ПрефиксОшибки);
	Если СтрДлина(Результат) > ДлинаПрефиксаОшибки И Лев(Результат, ДлинаПрефиксаОшибки) = ПрефиксОшибки Тогда
		Результат = Сред(Результат, ДлинаПрефиксаОшибки + 1);
		Результат = СокрЛ(Результат);
	КонецЕсли;
	
	ОкончаниеСпискаОшибок = СтрНайти(Результат,
		"Для отображения полей с ошибками проведите проверку в web-форме статистической формы по кнопке ""Проверить""");
	Если ОкончаниеСпискаОшибок > 1 Тогда
		ЭтоОшибкиПроверки = Истина;
		Результат = Лев(Результат, ОкончаниеСпискаОшибок - 1);
		Результат = СокрП(Результат);
	КонецЕсли;
	
	ПрефиксОписанияСТехническимиПодробностями = "--->";
	ОкончаниеОписанияСТехническимиПодробностями = СтрНайти(Результат, ПрефиксОписанияСТехническимиПодробностями);
	Если ОкончаниеОписанияСТехническимиПодробностями > 5 Тогда
		Результат = Лев(Результат, ОкончаниеОписанияСТехническимиПодробностями - 1);
		Результат = СокрП(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИнформациюОбОтчетеНаПорталеФТС(ПараметрыОтправки, ПараметрыСоединения)
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = "";
	ПараметрыСоединения.ПовторятьСоединение = Ложь;
	АвторизацияПроизведена = (ПараметрыСоединения.СоединениеHTTP <> Неопределено);
	
	Если НЕ АвторизацияПроизведена Тогда
		// очистить пароль, если в диалоге сохранения пароля не установлена галочка сохранения
		Если НЕ ПараметрыСоединения.СохранитьПароль И ЗначениеЗаполнено(ПараметрыСоединения.СохраненныйПароль) Тогда
			ЗаписатьЛогинИПарольПорталаФТС(ПараметрыОтправки.Организация, , "");
			ПараметрыСоединения.СохраненныйПароль = "";
		КонецЕсли;
	КонецЕсли;
	
	Для НомерСервера = 1 По 2 Цикл
		АдресСервера = ПараметрыСоединения.ТекущийАдресСервера;
		
		Если НЕ АвторизацияПроизведена Тогда
			
			// устанавливаем соединение с сервером
			ОписаниеОшибкиУстановкиСоединения = "";
			ПараметрыСоединения.СоединениеHTTP = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета("https://" + АдресСервера, ОписаниеОшибкиУстановкиСоединения);
			
			Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
				ПараметрыСоединения.ПовторятьСоединение = Истина;
				СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Не удалось установить соединение с сервером:
									|%1'"), ОписаниеОшибкиУстановкиСоединения), ПараметрыСоединения.СообщенияПользователю);
				Возврат Неопределено;
			КонецЕсли;
			
			ПараметрыСоединения.ЗначениеCookie = "";
			
			Если НомерСервера = 1 Тогда
				ЭтоВызовПередАвторизацией = Истина;
				Если НЕ УточнитьАдресСервераФТС(ПараметрыОтправки, ПараметрыСоединения, ЭтоВызовПередАвторизацией) Тогда
					ПараметрыСоединения.СоединениеHTTP = Неопределено;
					Возврат Неопределено;
				КонецЕсли;
				
				Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
					// сервер сменился, нужно повторно соединиться
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			АвторизацияПроизведена = АвторизоватьсяНаПорталеФТС(ПараметрыОтправки, ПараметрыСоединения);
			
		КонецЕсли;
		
		Если АвторизацияПроизведена Тогда
			Если НомерСервера = 1 Тогда
				ЭтоВызовПередАвторизацией = Ложь;
				Если НЕ УточнитьАдресСервераФТС(ПараметрыОтправки, ПараметрыСоединения, ЭтоВызовПередАвторизацией) Тогда
					ПараметрыСоединения.СоединениеHTTP = Неопределено;
					Возврат Неопределено;
				КонецЕсли;
				
				Если ПараметрыСоединения.СоединениеHTTP = Неопределено Тогда
					// сервер сменился, нужно повторно соединиться
					АвторизацияПроизведена = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	Если АвторизацияПроизведена Тогда
		
		ЗаголовокОтчета = ПолучитьПротоколОбработкиОтчетаНаПорталеФТС(ПараметрыОтправки, ПараметрыСоединения);
		
		Если ЗаголовокОтчета <> Неопределено Тогда
			
			ПараметрыСоединения.ОписаниеОшибкиСервером = "";
			ПараметрыСоединения.ПовторятьСоединение = Ложь;
			
			Возврат ЗаголовокОтчета;
			
		КонецЕсли;
		
	Иначе
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьПротоколОбработкиОтчетаНаПорталеФТС(ПараметрыОтправки, ПараметрыСоединения, ТолькоНайтиЗаголовок = Ложь)
	
	Результат = Неопределено;
	
	Если НЕ ТолькоНайтиЗаголовок Тогда
		ПараметрыСоединения.ОписаниеОшибкиСервером = "";
		ПараметрыСоединения.ПовторятьСоединение = Ложь;
	КонецЕсли;
	
	// посылаем запрос списка для нахождения загруженного отчета по идентификатору
	
	НомерСтраницы = 1;
	ЭлементовНаСтранице = 10;
	
	Пока Истина Цикл
		
		ЗаголовкиHTTP = Новый Соответствие();
		ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
		ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
		ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
		ЗаголовкиHTTP.Вставить("X-Ext.Net", "delta=true");
		Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
			ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
		КонецЕсли;
		
		НомерСтраницыСтрокой = Формат(НомерСтраницы, "ЧН=0; ЧГ=");
		ИндексНачальногоЭлементаСтрокой = Формат((НомерСтраницы - 1) * ЭлементовНаСтранице, "ЧН=0; ЧГ=");
		ЭлементовНаСтраницеСтрокой = Формат(ЭлементовНаСтранице, "ЧН=0; ЧГ=");
		ПакетДляПолученияСписка = "submitDirectEventConfig=" + ЗакодироватьПараметрСсылки("{""config"":{""extraParams"":{""page"":" + НомерСтраницыСтрокой + ",""start"":" + ИндексНачальногоЭлементаСтрокой + ",""limit"":" + ЭлементовНаСтраницеСтрокой + ",""sort"":""[{\""property\"":\""CreatedModifiedDate\"",\""direction\"":\""DESC\""}]""}}}")
			+ "&ctl55=&__EVENTTARGET=ctl02&__EVENTARGUMENT=" + ЗакодироватьПараметрСсылки("StoreStatForms|postback|read")
			+ "&TextFieldNote=&DropDownCreateVersion=" + ЗакодироватьПараметрСсылки(ПараметрыОтправки.ВерсияФормированияВыгрузки + "/" + ПараметрыОтправки.ВерсияОтправкиПортала);
		ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
		ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапроса, "windows-1251");
		ЗаписываемыйФайл.Записать(ПакетДляПолученияСписка);
		ЗаписываемыйФайл.Закрыть();
		
		ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
		
		Попытка
			ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаЗапроса, "/FtsStatFormEpExtWeb/Stat/List.aspx", ИмяФайлаОтвета, ЗаголовкиHTTP);
		Исключение
			
			Если НЕ ТолькоНайтиЗаголовок Тогда
				ПараметрыСоединения.ПовторятьСоединение = Истина;
				Возврат Неопределено;
				
			Иначе
				Результат = Новый Структура();
				Результат.Вставить("ИдентификаторОтправки", 			"");
				Результат.Вставить("Состояние", 						"");
				Результат.Вставить("РасширенноеСостояние", 				"");
				Результат.Вставить("ДатаИзменения", 					Неопределено);
				Результат.Вставить("СистемныйНомер", 					"");
				Результат.Вставить("РегистрационныйНомер", 				"");
				Результат.Вставить("Наименование", 						"");
				Результат.Вставить("Период", 							"");
				Результат.Вставить("ТолькоЧтение", 						Неопределено);
				Результат.Вставить("Версия", 							"");
				Результат.Вставить("ИдентификаторПротокола", 			"");
				Результат.Вставить("ДатаСозданияПротокола", 			Неопределено);
				Результат.Вставить("ИдентификаторПросмотраПротокола", 	"");
				Результат.Вставить("Протокол", 							"");
				Результат.Вставить("Квитанция", 						"");
				Прервать;
			КонецЕсли;
			
		КонецПопытки;
		
		ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
		ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
		
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		
		ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаФТС(ТекстОтвета);
		
		Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЗаголовкиОтчетов = ТаблицаJSON(ТекстОтвета, "data:{data:[", "ИдентификаторОтправки, Состояние, РасширенноеСостояние, ДатаИзменения, СистемныйНомер, РегистрационныйНомер, Наименование, Период, ТолькоЧтение, Версия",
			"Id, StateName, StateNameExtended, CreatedModifiedDate, SysNum, RegNum, Note, Period, IsReadOnly, SoftVersion", "success:true");
		
		Если ЗаголовкиОтчетов <> Неопределено Тогда
			Для каждого ЗаголовокОтчета Из ЗаголовкиОтчетов Цикл
				Если ЗаголовокОтчета.ИдентификаторОтправки = ПараметрыСоединения.ИдентификаторОтправкиНаСервере Тогда
					ДатаИзмененияОтчета = ДатаИзСтрокиРазныхФорматов(ЗаголовокОтчета.ДатаИзменения);
					Результат = Новый Структура();
					Результат.Вставить("ИдентификаторОтправки", 			ЗаголовокОтчета.ИдентификаторОтправки);
					Результат.Вставить("Состояние", 						ЗаголовокОтчета.Состояние);
					Результат.Вставить("РасширенноеСостояние", 				ЗаголовокОтчета.РасширенноеСостояние);
					Результат.Вставить("ДатаИзменения", 					ДатаИзмененияОтчета);
					Результат.Вставить("СистемныйНомер", 					ЗаголовокОтчета.СистемныйНомер);
					Результат.Вставить("РегистрационныйНомер", 				ЗаголовокОтчета.РегистрационныйНомер);
					Результат.Вставить("Наименование", 						ЗаголовокОтчета.Наименование);
					Результат.Вставить("Период", 							ЗаголовокОтчета.Период);
					Результат.Вставить("ТолькоЧтение", 						ЗаголовокОтчета.ТолькоЧтение);
					Результат.Вставить("Версия", 							ЗаголовокОтчета.Версия);
					Результат.Вставить("ИдентификаторПротокола", 			"");
					Результат.Вставить("ДатаСозданияПротокола", 			Неопределено);
					Результат.Вставить("ИдентификаторПросмотраПротокола", 	"");
					Результат.Вставить("Протокол", 							"");
					Результат.Вставить("Квитанция", 						"");
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Результат <> Неопределено ИЛИ ЗаголовкиОтчетов = Неопределено ИЛИ ЗаголовкиОтчетов.Количество() < ЭлементовНаСтранице Тогда
			Прервать;
		КонецЕсли;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если Результат = Неопределено ИЛИ Результат.Состояние = "Новая статформа" ИЛИ Результат.Состояние = "Черновик" ИЛИ ТолькоНайтиЗаголовок Тогда
		Возврат Результат;
	КонецЕсли;
	
	// посылаем запрос журнала отправки отчета
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.Получить("/FtsStatFormEpExtWeb/Stat/Exchange.aspx?Id=" + ПараметрыСоединения.ИдентификаторОтправкиНаСервере, ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
		Возврат Неопределено;
		
	КонецПопытки;
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ЗаголовкиКвитанций = ТаблицаJSON(ТекстОтвета, "proxy:{data:[", "ИдентификаторКвитанции, ДатаСоздания, Направление", "Id, CreationDateTime, Direction", Неопределено);
	
	Если ЗаголовкиКвитанций <> Неопределено И ЗаголовкиКвитанций.Количество() > 0 И ЗаголовкиКвитанций[0].Направление = "<-" Тогда
		Результат.ИдентификаторПротокола = ЗаголовкиКвитанций[0].ИдентификаторКвитанции;
		Результат.ДатаСозданияПротокола = ДатаИзСтрокиРазныхФорматов(ЗаголовкиКвитанций[0].ДатаСоздания);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторПротокола) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// посылаем запрос на просмотр протокола
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить("X-Ext.Net", "delta=true");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ПакетДляЗапросаПросмотраПротокола = "submitDirectEventConfig=" + ЗакодироватьПараметрСсылки("{""config"":{""extraParams"":{""target"":""" + Результат.ИдентификаторПротокола + """}}}")
		+ "&__EVENTTARGET=ctl02&__EVENTARGUMENT=" + ЗакодироватьПараметрСсылки("-|public|BeginViewDocument");
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ЗаписываемыйФайл = Новый ЗаписьТекста(ИмяФайлаЗапроса, "windows-1251");
	ЗаписываемыйФайл.Записать(ПакетДляЗапросаПросмотраПротокола);
	ЗаписываемыйФайл.Закрыть();
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.ОтправитьДляОбработки(ИмяФайлаЗапроса, "/FtsStatFormEpExtWeb/Stat/Exchange.aspx?Id=" + ПараметрыСоединения.ИдентификаторОтправкиНаСервере, ИмяФайлаОтвета, ЗаголовкиHTTP);
	Исключение
		
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		Возврат Неопределено;
		
	КонецПопытки;
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
	ТекстОтвета = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ПараметрыСоединения.ОписаниеОшибкиСервером = ТекстОшибкиПорталаФТС(ТекстОтвета);
	
	Если ЗначениеЗаполнено(ПараметрыСоединения.ОписаниеОшибкиСервером) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат.ИдентификаторПросмотраПротокола = ТекстПослеПрефикса(ТекстОтвета, "result:{""id"":""", """");
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторПросмотраПротокола) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// посылаем запрос на html-протокол
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос("/FtsDocumentsMvc/PartPrint/Index/" + Результат.ИдентификаторПросмотраПротокола + "?HideMenu=True", ЗаголовкиHTTP);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		Возврат Неопределено;
		
	КонецПопытки;
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
	Результат.Протокол = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	// посылаем запрос на подписанную xml-квитанцию
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗначениеCookie) Тогда
		ЗаголовкиHTTP.Вставить("Cookie", ПараметрыСоединения.ЗначениеCookie);
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос("/FtsDocumentsMvc/PartView/FileDownload/" + Результат.ИдентификаторПросмотраПротокола, ЗаголовкиHTTP);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОтветHTTP = ПараметрыСоединения.СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		
		ПараметрыСоединения.СоединениеHTTP = Неопределено;
		ПараметрыСоединения.ПовторятьСоединение = Истина;
		Возврат Неопределено;
		
	КонецПопытки;
	
	ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
	Результат.Квитанция = ФайлОтвета.Прочитать();
	ФайлОтвета.Закрыть();
	
	ЗначениеSetCookie = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	ПараметрыСоединения.ЗначениеCookie = ОбновленноеЗначениеCookie(ПараметрыСоединения.ЗначениеCookie, ЗначениеSetCookie);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	Возврат Результат;
	
КонецФункции

Функция ЗакодироватьПараметрСсылки(ПараметрСсылки)
	
	СимволыДляЗамены = "%" + Символы.Таб + Символы.ПС + Символы.ПФ + Символы.ВК + " !""#$&'()*+,/:;<=>?@[\]^`{|}~" + Символ(127);
	ПодставляемыеПодстроки = "%25%09%0A%0C%0D%20%21%22%23%24%26%27%28%29%2A%2B%2C%2F%3A%3B%3C%3D%3E%3F%40%5B%5C%5D%5E%60%7B%7C%7D%7E%7F";
	
	Результат = ПараметрСсылки;
	Для НомерСимвола = 1 По СтрДлина(СимволыДляЗамены) Цикл
		СимволДляЗамены = Сред(СимволыДляЗамены, НомерСимвола, 1);
		ПодставляемаяПодстрока = Сред(ПодставляемыеПодстроки, (НомерСимвола - 1) * 3 + 1, 3);
		Результат = СтрЗаменить(Результат, СимволДляЗамены, ПодставляемаяПодстрока);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстВШестнадцатеричныйUnicode(Текст)
	
	Результат = "";
	Для НомерСимвола = 1 По СтрДлина(Текст) Цикл
		ТекущийСимвол = Сред(Текст, НомерСимвола, 1);
		Если КодСимвола(ТекущийСимвол) >= 256 Тогда
			КодТекущегоСимвола = КодСимвола(ТекущийСимвол);
			СтаршийБайтКодаТекущегоСимвола = Число(КодТекущегоСимвола / 256);
			ШестнадцатеричноеПредставлениеТекущегоСимвола = ЧислоВШестнадцатеричномПредставлении(СтаршийБайтКодаТекущегоСимвола, 1) + ЧислоВШестнадцатеричномПредставлении(КодТекущегоСимвола % 256, 1);
			Результат = Результат + "\u" + нрег(ШестнадцатеричноеПредставлениеТекущегоСимвола);
			
		Иначе
			Результат = Результат + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Служебные функции ФТС

Функция СерверПриемаОтчетностиФТС(ВерсияФормированияВыгрузки = Неопределено, ВерсияОтправкиПортала = Неопределено) Экспорт
	
	// Возвращаем параметры и адрес сервера
	ВерсияФормированияВыгрузки = "5.9.1";
	ВерсияОтправкиПортала = "3.3.9";
	Возврат "edata.customs.ru";
	
КонецФункции

Функция НастройкиФТС(Знач ОрганизацияСсылка, Знач ПолучитьПараметрыОнлайнПроверки = Ложь) Экспорт
	
	Результат = Новый Структура("ИспользоватьОбмен, СертификатАбонентаОтпечаток, Логин, Пароль, ИспользоватьАвтонастройку", Ложь, "", "", "", Ложь);
	
	Если ПолучитьПараметрыОнлайнПроверки Тогда
		СвойстваОрганизации = ЗначенияРеквизитовОбъекта(ОрганизацияСсылка, "ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
		
		Результат.Вставить("УчетнаяЗаписьОбмена", СвойстваОрганизации.УчетнаяЗаписьОбмена);
		Результат.Вставить("НастроенОбменВУниверсальномФормате", СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
			И ЗначениеЗаполнено(СвойстваОрганизации.УчетнаяЗаписьОбмена));
		
		Попытка
			ОбменИОнлайнПроверкаВключены = Результат.НастроенОбменВУниверсальномФормате И НЕ СвойстваОрганизации.УчетнаяЗаписьОбмена.ОбменНапрямую И СвойстваОрганизации.УчетнаяЗаписьОбмена.ИспользоватьСервисОнлайнПроверкиОтчетов;
		Исключение
			ОбменИОнлайнПроверкаВключены = Ложь;
		КонецПопытки;
		
		Результат.Вставить("ОнлайнПроверкаДоступна", ОбменИОнлайнПроверкаВключены И СвойстваОрганизации.УчетнаяЗаписьОбмена.СпецоператорСвязи <> Перечисления.СпецоператорыСвязи.Такском И СтрНайти(";" + ВРег(СокрЛП(ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(СвойстваОрганизации.УчетнаяЗаписьОбмена.СпецоператорСвязи, "ОнлайнПроверкаКонтролирующиеОрганы"))) + ";", ";ФТС;") > 0);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				   |	НастройкиОбменаФТС.ИспользоватьОбмен КАК ИспользоватьОбмен,
				   |	НастройкиОбменаФТС.СертификатАбонентаОтпечаток КАК СертификатАбонентаОтпечаток,
				   |	НастройкиОбменаФТС.Логин КАК Логин,
				   |	НастройкиОбменаФТС.Пароль КАК Пароль,
				   |	НастройкиОбменаФТС.ИспользоватьАвтонастройку КАК ИспользоватьАвтонастройку
				   |ИЗ
				   |	РегистрСведений.НастройкиОбменаФТС КАК НастройкиОбменаФТС
				   |ГДЕ
				   |	НастройкиОбменаФТС.Организация = &ОрганизацияСсылка";
	Запрос.УстановитьПараметр("ОрганизацияСсылка", ОрганизацияСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЗаписьЗапроса = РезультатЗапроса.Выгрузить()[0];
		Если ЗаписьЗапроса.ИспользоватьОбмен Тогда
			
			Результат.ИспользоватьОбмен = ЗаписьЗапроса.ИспользоватьОбмен;
			Результат.СертификатАбонентаОтпечаток = СокрЛП(ЗаписьЗапроса.СертификатАбонентаОтпечаток);
			Результат.Логин = СокрЛП(ЗаписьЗапроса.Логин);
			Результат.Пароль = СокрЛП(ЗаписьЗапроса.Пароль);
			Результат.ИспользоватьАвтонастройку = ЗаписьЗапроса.ИспользоватьАвтонастройку;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваОбменаОрганизацииДляФТС(Знач ОрганизацияСсылка, Знач ОпределитьНастроенностьОбменаВУниверсальномФормате, Знач ПолучитьОсновныеСвойстваПоследнейОтправки, Знач ОтправкаСсылка = Неопределено, ОтчетСсылка = Неопределено) Экспорт
	
	Результат = Новый Структура("НастроенОбменВУниверсальномФормате, СвойстваОтправки, НастройкиОбмена, ОрганизацияИзОтправки, ПравоИзмененияУчетнойЗаписи, ЭтоРегламентированныйОтчет, ЭтоЭлектроннаяПодписьВМоделиСервиса", Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено);
	
	Если ОрганизацияСсылка = Неопределено Тогда
		
		ОрганизацияСсылка = ОтправкаСсылка.Организация;
		Результат.ОрганизацияИзОтправки = ОрганизацияСсылка;
		
	КонецЕсли;
	
	Результат.ЭтоЭлектроннаяПодписьВМоделиСервиса = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ЭтоЭлектроннаяПодписьВМоделиСервиса(ОрганизацияСсылка);
	
	Если ОпределитьНастроенностьОбменаВУниверсальномФормате Тогда
		
		СвойстваОрганизации = ЗначенияРеквизитовОбъекта(ОрганизацияСсылка, "ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
		
		Результат.НастроенОбменВУниверсальномФормате = (СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
			И ЗначениеЗаполнено(СвойстваОрганизации.УчетнаяЗаписьОбмена));
		
	КонецЕсли;
	
	Если ПолучитьОсновныеСвойстваПоследнейОтправки Тогда
		
		СвойстваОтправки = ПолучитьОсновныеСвойстваПоследнейОтправкиОтчетаВФТС(ОтчетСсылка);
		Если СвойстваОтправки <> Неопределено Тогда
			Результат.СвойстваОтправки = Новый Структура("Ссылка, Идентификатор, ИмяФайлаВыгрузки, Статус",
				СвойстваОтправки.Ссылка, СвойстваОтправки.Идентификатор, СвойстваОтправки.ИмяФайлаВыгрузки, СвойстваОтправки.Статус);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.НастройкиОбмена = НастройкиФТС(ОрганизацияСсылка);
	
	Результат.ПравоИзмененияУчетнойЗаписи = ПравоДоступа("Изменение", Метаданные.Справочники.УчетныеЗаписиДокументооборота);
	
	Если ОтчетСсылка <> Неопределено ИЛИ ОтправкаСсылка <> Неопределено Тогда
		
		СсылкаНаОтчет = ?(ОтчетСсылка <> Неопределено, ОтчетСсылка, ОтправкаСсылка.ОтчетСсылка);
		ТипЗнчСсылкаНаОтчет = ТипЗнч(СсылкаНаОтчет);
		Результат.ЭтоРегламентированныйОтчет = (ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка.РегламентированныйОтчет") ИЛИ ТипЗнчСсылкаНаОтчет = Тип("Неопределено"));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьЛогинИПарольПорталаФТС(Организация, Логин = Неопределено, Пароль = "")
	
	Попытка
		
		МенеджерЗаписи = РегистрыСведений.НастройкиОбменаФТС.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			Если МенеджерЗаписи.ИспользоватьОбмен <> Истина Тогда
				МенеджерЗаписи.ИспользоватьОбмен = Истина;
				МенеджерЗаписи.ИспользоватьАвтонастройку = Ложь;
			КонецЕсли;
			Если Логин <> Неопределено Тогда
				МенеджерЗаписи.Логин = Логин;
			КонецЕсли;
			МенеджерЗаписи.Пароль = Пароль;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция УспешноОбработанОтчетФТС(
	СтрокаСостояния,
	СтрокаРасширенногоСостояния,
	ОтчетНаКонтроле = Ложь,
	ОтчетАннулирован = Ложь,
	ОтказаноВАннулировании = Ложь,
	ЭтоЧерновик = Ложь)
	
	ОтчетНаКонтроле = (СтрНайти(СтрокаСостояния, "контроле") > 0) ИЛИ (СтрНайти(СтрокаРасширенногоСостояния, "контроле") > 0);
	Если ОтчетНаКонтроле Тогда
		ОтчетАннулирован = Ложь;
		ОтказаноВАннулировании = Ложь;
		Возврат Ложь;
		
	Иначе
		ОтчетАннулирован = (СтрокаСостояния = "Аннулирована");
		Если ОтчетАннулирован Тогда
			ОтказаноВАннулировании = Ложь;
			Возврат Ложь;
			
		ИначеЕсли СтрНайти(СтрокаСостояния, "Отказано") > 0 Тогда
			ОтказаноВАннулировании = (СтрНайти(СтрокаСостояния, "аннулировании") > 0);
			Возврат Ложь;
			
		ИначеЕсли СтрокаСостояния = "Зарегистрирована" Тогда
			Возврат Истина;
			
		Иначе
			ЭтоЧерновик = (СтрокаСостояния = "Новая статформа" ИЛИ СтрокаСостояния = "Черновик");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов) Экспорт
	
	Если СтруктураРеквизитов.Организация <> Неопределено Тогда
		ДанныеОрганизации = СтруктураРеквизитов.СтруктураДанныхОрганизации;
		
		ДанныеИсполнителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьДанныеОтветственныхЛиц(СтруктураРеквизитов.Организация, Истина);
		ДолжностьРук = "";
		ДолжностьБух = "";
		
		Если ДанныеИсполнителей <> Неопределено И ДанныеИсполнителей.Количество() > 0 Тогда
			ДанныеРук = ДанныеИсполнителей.Получить("Руководитель");
			ДанныеБух = ДанныеИсполнителей.Получить("ГлавныйБухгалтер");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ДанныеОрганизации.ФИОРук) Тогда
			
			СтруктураФИО = Новый Структура();
			
			СтруктураФИО.Вставить("Фамилия", 	ДанныеОрганизации.ФамилияРук);
			СтруктураФИО.Вставить("Имя", 		ДанныеОрганизации.ИмяРук);
			СтруктураФИО.Вставить("Отчество", 	ДанныеОрганизации.ОтчествоРук);
			
			ДанныеОрганизации.Вставить("СтруктураФИОРук",СтруктураФИО);
			Если ДанныеРук <> Неопределено Тогда
				ДанныеОрганизации.Вставить("ДолжностьРук", ДанныеРук.Должность);
				ДанныеОрганизации.Вставить("СНИЛСРук", ДанныеРук.СНИЛС);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ДанныеОрганизации.ФИОБух) Тогда
			
			Если ЗначениеЗаполнено(ДанныеОрганизации.ФамилияБух) ИЛИ ЗначениеЗаполнено(ДанныеОрганизации.ИмяБух)
			ИЛИ ЗначениеЗаполнено(ДанныеОрганизации.ОтчествоБух) Тогда
				СтруктураФИО = Новый Структура();

				СтруктураФИО.Вставить("Фамилия", 	ДанныеОрганизации.ФамилияБух);
				СтруктураФИО.Вставить("Имя", 		ДанныеОрганизации.ИмяБух);
				СтруктураФИО.Вставить("Отчество", 	ДанныеОрганизации.ОтчествоБух);
			Иначе
				СтруктураФИО = РегламентированнаяОтчетность.РазложитьФИО(ДанныеОрганизации.ФИОБух);
			КонецЕсли;
			
			ДанныеОрганизации.Вставить("СтруктураФИОБух",СтруктураФИО);
			Если ДанныеБух <> Неопределено Тогда
				ДанныеОрганизации.Вставить("ДолжностьБух", ДанныеБух.Должность);
				ДанныеОрганизации.Вставить("СНИЛСБух", ДанныеБух.СНИЛС);
			КонецЕсли;
			
		КонецЕсли;
		СтруктураРеквизитов.Вставить("СтруктураДанныхОрганизации",ДанныеОрганизации);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Процедура ЗаполнитьДанныеОрганизации(СтруктураРеквизитов) Экспорт
	
	Если СтруктураРеквизитов.Организация <> Неопределено Тогда
		
		Организация = СтруктураРеквизитов.Организация;
		
		РеквизитыОрганизации = "ОГРН,КодОрганаФСГС,КодПодчиненностиФСС,ТелОрганизации, 
		|АдресЭлПочтыИсп,НаимЮЛПол,ИННЮЛ,КППЮЛ,КодОрганаПФР,КодНО, НаимГоловнОрг,
		|АдрФакт ,АдрЮР, АдрМЖ,АдрПрописки,
		|АдрФакт_XML ,АдрЮР_XML, АдрМЖ_XML, АдрПрописки_XML,
		|РегНомПФР, РегНомПФРЗаСебя, РегистрационныйНомерФСС, РегистрационныйНомерФССДобрСтрах,
		|БанкСчетНомер, БанкСчетНаимБанка, БанкСчетКоррСчетБанка, БанкСчетБИКБанка,";
		
		РеквизитыРуководителя = "ФИОРук, ФамилияРук, ИмяРук, ОтчествоРук, НомерУдЛичнРук, СерияУдЛичнРук, 
		|ВидУдЛичнРук, ДатаУдЛичнРук, ОрганВыданУдЛичнРук,
		|ДатаРождРук, МестоРождРук, ПолРук, КодПодрУдЛичнРук, ГраждРук, ТелРук,";
		
		РеквизитыБухгалтера = "ФИОБух, ФамилияБух, ИмяБух, ОтчествоБух, НомерУдЛичнБух, СерияУдЛичнБух, 
		|ВидУдЛичнБух, ДатаУдЛичнБух, ОрганВыданУдЛичнБух,
		|ДатаРождБух, МестоРождБух, ПолБух, КодПодрУдЛичнБух, ГраждБух, ТелБух";
		
		ЗапрашиваемыеРеквизиты = РеквизитыОрганизации + РеквизитыРуководителя + РеквизитыБухгалтера;
		
		ДанныеОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Организация,
			,
			ЗапрашиваемыеРеквизиты);
			
		ДанныеОрганизации.Вставить("Организация", Организация);
		
		// Краткое наименование
		Если Метаданные.Справочники.Организации.Реквизиты.Найти("НаименованиеСокращенное") = Неопределено Тогда
			КраткоеНаименованиеОрганизации = СокрЛП(Организация.Наименование);
		Иначе
			КраткоеНаименованиеОрганизации = СокрЛП(Организация.НаименованиеСокращенное);
		КонецЕсли;
		ДанныеОрганизации.Вставить("КраткоеНаименование", КраткоеНаименованиеОрганизации);
		
		// Номер основной поставки 1с
		ДанныеОрганизации.Вставить("НомерОсновнойПоставки1с", ПолучитьНомерОсновнойПоставки1с());
		
		Если НЕ ПустаяСтрока(ДанныеОрганизации.ВидУдЛичнБух) Тогда
			ДанныеОрганизации.Вставить("ВидУдЛичнБух", ПолучитьВидДокументаПоНаименованию(ДанныеОрганизации.ВидУдЛичнБух));
		КонецЕсли;
		Если НЕ ПустаяСтрока(ДанныеОрганизации.ВидУдЛичнРук) Тогда
			ДанныеОрганизации.Вставить("ВидУдЛичнРук", ПолучитьВидДокументаПоНаименованию(ДанныеОрганизации.ВидУдЛичнРук));
		КонецЕсли;
		
		// Юр. лицо или нет
		ЭтоЮрЛицо = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(Организация);
		ДанныеОрганизации.Вставить("ТипОрганизации",ЭтоЮрЛицо);
		
		Если ЭтоЮрЛицо Тогда 
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("ОбособленноеПодразделение") = Неопределено Тогда
				ПризнакОбособленногоПодразделения = НЕ Организация.ГоловнаяОрганизация.Ссылка = Справочники.Организации.ПустаяСсылка();
			Иначе
				ПризнакОбособленногоПодразделения = Организация.ОбособленноеПодразделение;
			КонецЕсли;
			ДанныеОрганизации.Вставить("ПризнакОбособленногоПодразделения", ПризнакОбособленногоПодразделения);
		Иначе
			ПризнакОбособленногоПодразделения = Ложь;
			
			// За себя и за сотрудников.
			ИПИспользуетТрудНаемныхРаботников = РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация);  
			Если НЕ ИПИспользуетТрудНаемныхРаботников Тогда
				ДанныеОрганизации.Вставить("РегНомПФР", ДанныеОрганизации.РегНомПФРЗаСебя); 
				ДанныеОрганизации.Вставить("РегистрационныйНомерФСС", ДанныеОрганизации.РегистрационныйНомерФССДобрСтрах);
			КонецЕсли;
			
		КонецЕсли;
		
		// Доп. код ФСС.
		Если Метаданные.Справочники.Организации.Реквизиты.Найти("ДополнительныйКодФСС") <> Неопределено Тогда
			РеквизитДопКодФСС = Организация.ДополнительныйКодФСС;
		Иначе 
			РеквизитДопКодФСС = "";
		КонецЕсли; 
		ДанныеОрганизации.Вставить("РеквизитДопКодФСС",РеквизитДопКодФСС);
		
		// Электронная почта.
		ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Организация,
			Справочники.ВидыКонтактнойИнформации.EmailОрганизации,
			ТекущаяДатаСеанса());
			
		ДанныеОрганизации.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
		
		ЗаполнитьАдресаОрганизации_ВСтаромФормате(СтруктураРеквизитов, ДанныеОрганизации);
		ЗаполнитьАдресаОрганизации_ВНовомФормате(СтруктураРеквизитов, ДанныеОрганизации);
			
	КонецЕсли;
		
	СтруктураРеквизитов.Вставить("СтруктураДанныхОрганизации",ДанныеОрганизации);
	
	Если СтруктураРеквизитов.ПриОткрытии Тогда
		ЗаполнитьДанныеСпецоператораСвязи(СтруктураРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАдресаОрганизации_ВСтаромФормате(СтруктураРеквизитов, ДанныеОрганизации)
	
	Если НЕ СтруктураРеквизитов.Свойство("ПолучитьАдрес") тогда
			
		Если СтруктураРеквизитов.ПриОткрытии И 
			НЕ ПустаяСтрока(СтруктураРеквизитов.АдресЮридический) 
			И НЕ ПустаяСтрока(СтруктураРеквизитов.АдресФактический) Тогда
			
			АдресЮридический = СтруктураРеквизитов.АдресЮридический;
			АдресФактический = СтруктураРеквизитов.АдресФактический;
			
		Иначе
			Если ДанныеОрганизации.ТипОрганизации Тогда
				АдресЮридический = ДанныеОрганизации.АдрЮР;
				АдресФактический = ДанныеОрганизации.АдрФакт;
			Иначе
				АдресЮридический = ДанныеОрганизации.АдрМЖ;
				АдресФактический = ДанныеОрганизации.АдрПрописки;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитов.ПриОткрытии 
			ИЛИ ПустаяСтрока(СтруктураРеквизитов.АдресЮридический) И ПустаяСтрока(СтруктураРеквизитов.АдресФактический) Тогда
			
			СтруктураРеквизитов.Вставить("АдресЮридический",РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(АдресЮридический));
			СтруктураРеквизитов.Вставить("АдресФактический",РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(АдресФактический));
			
		КонецЕсли;
		
		ЮрАдресВФормате9Запятых = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(
			АдресЮридический,
			Истина);
			
		СтруктураРеквизитов.Вставить("ЮрАдрес", ЮрАдресВФормате9Запятых);
		
		ФактическийАдресВФормате9Запятых = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(
			АдресФактический,
			Истина);
			
		СтруктураРеквизитов.Вставить("ФактАдрес", ФактическийАдресВФормате9Запятых);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьАдресаОрганизации_ВНовомФормате(СтруктураРеквизитов, ДанныеОрганизации)
	
	АдресЮридическийИзОрганизации = "";
	АдресФактическийИзОрганизации = "";
	
	ЭтоЮрЛицо = ДанныеОрганизации.ТипОрганизации;
	Если ЭтоЮрЛицо Тогда
		
		АдресЮридическийИзОрганизации = АдресИзДанныхОрганизации(ДанныеОрганизации, "АдрЮР");
		АдресФактическийИзОрганизации = АдресИзДанныхОрганизации(ДанныеОрганизации, "АдрФакт");
		
	Иначе
		
		АдресЮридическийИзОрганизации = АдресИзДанныхОрганизации(ДанныеОрганизации, "АдрМЖ");
		АдресФактическийИзОрганизации = АдресИзДанныхОрганизации(ДанныеОрганизации, "АдрПрописки");
		
	КонецЕсли;
	
	// Юридический адрес
	АдресЮридическийЗначение		= "";
	АдресЮридическийПредставление	= "";
	
	ПреобразоватьАдресВФорматXML(
		АдресЮридическийИзОрганизации, 
		АдресЮридическийЗначение, 
		АдресЮридическийПредставление,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		
	СтруктураРеквизитов.Вставить("АдресЮридическийЗначение", 		АдресЮридическийЗначение);
	СтруктураРеквизитов.Вставить("АдресЮридическийПредставление",	АдресЮридическийПредставление);
	
	// Фактический адрес
	АдресФактическийЗначение		= "";
	АдресФактическийПредставление	= "";
		
	ПреобразоватьАдресВФорматXML(
		АдресФактическийИзОрганизации, 
		АдресФактическийЗначение, 
		АдресФактическийПредставление,
		Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	
	СтруктураРеквизитов.Вставить("АдресФактическийЗначение", 		АдресФактическийЗначение);
	СтруктураРеквизитов.Вставить("АдресФактическийПредставление", 	АдресФактическийПредставление);
	
КонецПроцедуры

Функция КодРегионаВМастереПоАдресу(Адрес) Экспорт

	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес);
	Если ЭтоАдресПоФИАСу Тогда
		Возврат КодРегионаПоАдресуФИАССервер(Адрес); 
	Иначе
		Возврат РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Адрес).Регион; 
	КонецЕсли;

КонецФункции

Функция КодРегионаПоАдресуФИАССервер(Адрес)

	НазваниеРегиона = УправлениеКонтактнойИнформацией.РегионАдресаКонтактнойИнформации(Адрес);
	Возврат РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(НазваниеРегиона);

КонецФункции

Функция АдресИзДанныхОрганизации(ДанныеОрганизации, ИмяПоля)

	ИмяПоляСXML = ИмяПоля + "_XML";
	
	Если ЗначениеЗаполнено(ДанныеОрганизации[ИмяПоляСXML]) Тогда
		
		Адрес = ДанныеОрганизации[ИмяПоляСXML];

	ИначеЕсли ДанныеОрганизации[ИмяПоля] = ",,,,,,,,," Тогда
		
		Адрес = "";
		
	Иначе
		
		Адрес = ДанныеОрганизации[ИмяПоля];
		Адрес = РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(Адрес);
		
	КонецЕсли;
	
	Возврат Адрес;

КонецФункции 

Функция ПредставлениеАдресаИзДанныхОрганизации(ЗначениеАдреса) Экспорт
	
	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначениеАдреса); 
	
	Если НЕ ЗначениеЗаполнено(ЗначениеАдреса) Тогда
		ПредставлениеАдреса = "";
	ИначеЕсли ЭтоАдресПоФИАСу Тогда
		
		Попытка
			ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЗначениеАдреса);
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Электронный документооборот с контролирующими органами'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ПредставлениеАдреса = "";

				
		КонецПопытки;
		
	Иначе
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ЗначениеАдреса, Истина);
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

Функция АдресФИАСДляТелаЗаявления(ДокументЗаявление, ИмяРеквизита) Экспорт
	
	// Пример адреса:
	// В нем может быть два тэга <Состав; тэга <СубъектРФ> может не быть
	//
	//<КонтактнаяИнформация xmlns="http://www.v8.1c.ru/ssl/contactinfo" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Представление="368302, Дагестан Респ, Каспийск г, Кирова ул, дом № 55">
	//	<Состав xsi:type="Адрес" Страна="РОССИЯ">
	//		<Состав xsi:type="АдресРФ">
	//			<СубъектРФ>Дагестан Респ</СубъектРФ>
	//			<Город>Каспийск г</Город>
	//			<Улица>Кирова ул</Улица>
	//			<ДопАдрЭл ТипАдрЭл="10100000" Значение="368302"/>
	//			<ДопАдрЭл>
	//				<Номер Тип="1010" Значение="55"/>
	//			</ДопАдрЭл>
	//		</Состав>
	//	</Состав>
	//</КонтактнаяИнформация>

	Адрес = ДокументЗаявление[ИмяРеквизита];
	
	РаботаСАдресами.ПередЗаписьюXDTOКонтактнаяИнформация(Адрес);
	
	// Ищем вхождение второго тэга <Состав
	ПозицияНачала 	 = СтрНайти(Адрес, "<Состав", НаправлениеПоиска.СКонца);
	// Ищем начала любого следующего тэга, который и будем началом адреса
	ПозицияНачала 	 = СтрНайти(Адрес, "<",,ПозицияНачала + 1);
	ПозицияОкончания = Найти(Адрес, "</Состав>");
	АдресДляЗаявления = Сред(Адрес, ПозицияНачала, ПозицияОкончания - ПозицияНачала);
	 
	ИдентификаторАдреса = ДокументЗаявление[ИмяРеквизита + "ИдентификаторПоФИАС"];
	Если ЗначениеЗаполнено(ИдентификаторАдреса) Тогда
		АдресДляЗаявления = АдресДляЗаявления 
			+ "<ИдФиас>"
			+ ИдентификаторАдреса
			+ "</ИдФиас>";
	КонецЕсли;
			
	Возврат АдресДляЗаявления;
		
КонецФункции

Процедура ПреобразоватьАдресВФорматXML(
	АдресИсточник, 
	АдресПриемникЗначение, 
	АдресПриемникПредставление,
	ВидКонтактнойИнформации) Экспорт
	
	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресИсточник);
	
	Если ЭтоАдресПоФИАСу Тогда
		
		Попытка
		
			АдресПриемникЗначение 		= АдресИсточник;
			АдресПриемникПредставление 	= ПредставлениеАдресаИзДанныхОрганизации(АдресИсточник);
			
		Исключение
			
			ТекстОшибки = НСтр("ru = 'Электронный документооборот с контролирующими органами. Мастер по 1С-Отчетности. Получение представления адреса'", 
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(
				ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			АдресПриемникЗначение = "";
			АдресПриемникПредставление = "";
		
		КонецПопытки;
			
	ИначеЕсли АдресИсточник = ",,,,,,,,," ИЛИ НЕ ЗначениеЗаполнено(АдресИсточник) Тогда
		
		АдресПриемникЗначение = "";
		АдресПриемникПредставление = "";
		
	Иначе
		
		// Сначала получаем представление, его преобразуем в xml.
		АдресПриемникПредставление = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдресИсточник, Истина);
		
		Попытка
			АдресПриемникЗначение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(АдресПриемникПредставление, ВидКонтактнойИнформации);
		Исключение
			
			ТекстОшибки = НСтр("ru = 'Электронный документооборот с контролирующими органами. Мастер по 1С-Отчетности. Получение XML по представлению адреса'", 
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(
				ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			АдресПриемникЗначение = "";
			АдресПриемникПредставление = "";
		
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолеСертификата_2_5_4_8(АдресЮридический) Экспорт
	
	// Наименование субъекта Российской Федерации
	// Приказ ФСБ России от 27.12.2011 № 795
	// 5) stateOrProvinceName (наименование штата или области).
	// В качестве значения данного атрибута имени следует использовать текстовую строку, 
	// содержащую наименование соответствующего субъекта Российской Федерации.
	
	// Для городов федерального значение Москва и Санкт Петербург, город должен писаться в 2.5.4.8
	// Мы записываем вот так -  77 г. Москва, 78 г. Санкт-Петербург,  92 г. Севастополь, 99 г. Байконур
	
	stateOrProvinceName = "";
	
	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресЮридический);
	
	Если ЭтоАдресПоФИАСу Тогда	
		
		СведенияОбАдресе 	= СведенияОбАдресе(АдресЮридический);
		КодРегиона 			= СведенияОбАдресе.КодРегиона;
		
		Если ЗначениеЗаполнено(КодРегиона) Тогда
			
			Если ЭтоГородФедеральногоЗначения(СведенияОбАдресе.Регион) Тогда
				
				// Мы записываем вот так -  77 г. Москва, 78 г. Санкт-Петербург,  92 г. Севастополь, 99 г. Байконур
				Регион = ГородФедеральногоЗначенияБезСокращенияРегиона(СведенияОбАдресе);
				stateOrProvinceName = КодРегиона + " г. " + Регион;
				
			Иначе
				stateOrProvinceName = КодИНазваниеРегионаДляСертификата(КодРегиона);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		КодРегиона = РазобратьСтроку(АдресЮридический, ",");
		
		Если ЗначениеЗаполнено(КодРегиона) Тогда
			stateOrProvinceName = КодИНазваниеРегионаДляСертификата(КодРегиона);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат stateOrProvinceName;
	
КонецФункции

Функция ПолеСертификата_2_5_4_7(АдресЮридический) Экспорт
	
	// Наименование населенного пункта
	// Приказ ФСБ России от 27.12.2011 № 795
	// 6) localityName (наименование населенного пункта).
	// В качестве значения данного атрибута имени следует использовать текстовую строку, 
	// содержащую наименование соответствующего населенного пункта.
	
	// Пишем в L город (как в ЕГРЮЛ)
	// 2.5.4.7 - Москва г.
	
	localityName = "";
	
	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресЮридический);
	
	Если ЭтоАдресПоФИАСу Тогда
		
		СведенияОбАдресе = СведенияОбАдресе(АдресЮридический);
		Город  			 = СведенияОбАдресе.Город;
		НаселенныйПункт  = СведенияОбАдресе.НаселенныйПункт;
		
		// Город и населенный пункт может быть не указан только в регионе - городе федерального значения
		Если НЕ ЗначениеЗаполнено(Город) 
			И НЕ ЗначениеЗаполнено(НаселенныйПункт) Тогда
			
			Регион = СведенияОбАдресе.Регион;
			Если ЗначениеЗаполнено(Регион) И ЭтоГородФедеральногоЗначения(Регион) Тогда
				Город = Регион;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ДокументМассив   = РазобратьСтроку(АдресЮридический, ",");
		Город  			 = ДокументМассив[4];
		НаселенныйПункт  = ДокументМассив[5];
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Город) Тогда
		localityName = Город;
	Иначе
		localityName = НаселенныйПункт;
	КонецЕсли;
	
	Возврат localityName;
	
КонецФункции

Функция ГородФедеральногоЗначенияБезСокращенияРегиона(СведенияОбАдресе)
	
	Регион 			 = СведенияОбАдресе.Регион;
	РегионСокращение = СведенияОбАдресе.РегионСокращение;
	
	ДлинаСокращенияРегиона = СтрДлина(РегионСокращение);
	
	Город = СокрЛП(Сред(Регион, 1, СтрДлина(Регион) - ДлинаСокращенияРегиона));
	
	Возврат Город;
	
КонецФункции

Функция ПолеСертификата_2_5_4_9(АдресЮридический) Экспорт
	
	// Адрес места нахождения
	// Приказ ФСБ России от 27.12.2011 № 795
	// 7) streetAddress (название улицы, номер дома).
	// В качестве значения данного атрибута имени следует использовать текстовую строку, 
	// содержащую часть адреса места нахождения соответствующего лица, включающую 
	// - наименование улицы, 
	// - номер дома, 
	// - а также корпуса,
	// - строения,
	// - квартиры,
	// - помещения. 
	// Объектный идентификатор типа атрибута streetAddress имеет вид 2.5.4.9;
	
	streetAddress = "";
	
	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресЮридический);
	
	Если ЭтоАдресПоФИАСу Тогда
		
		СведенияОбАдресе = СведенияОбАдресе(АдресЮридический);
		
		ЧастиАдреса = Новый Массив;
		
		// Улица
		ЧастиАдреса.Добавить(СведенияОбАдресе.Улица);
		
		// Дом
		Здание = СведенияОбАдресе.Здание;
		Если Здание.Свойство("Номер") И ЗначениеЗаполнено(Здание.Номер) Тогда
			ТипЗдания = СокращеноеНазваниОбъектаАдресации(Здание.ТипЗдания);
			Дом = ТипЗдания + " " + Здание.Номер;
			ЧастиАдреса.Добавить(Дом);
		КонецЕсли;
		
		Корпуса = СведенияОбАдресе.Корпуса;
		
		// Корпуса
		Для каждого Корпус Из Корпуса Цикл
			Если ЗначениеЗаполнено(Корпус.Номер) Тогда
				ТипКорпуса = СокращеноеНазваниОбъектаАдресации(Корпус.ТипКорпуса);
				ЧастиАдреса.Добавить(ТипКорпуса + " " + Корпус.Номер);
			КонецЕсли;
		КонецЦикла;
		
		Помещения = СведенияОбАдресе.Помещения;
		
		// Помещения
		Для каждого Помещение Из Помещения Цикл
			Если ЗначениеЗаполнено(Помещение.Номер) Тогда
				ТипПомещения = СокращеноеНазваниОбъектаАдресации(Помещение.ТипПомещения);
				ЧастиАдреса.Добавить(ТипПомещения + " " + Помещение.Номер);
			КонецЕсли;
		КонецЦикла;
		
		streetAddress = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ЧастиАдреса, ", ", Истина);
		
	Иначе
	
		ЧастиАдреса = РазобратьСтроку(АдресЮридический, ",");
		
		Улица 	 = ЧастиАдреса[6];
		Дом 	 = ЧастиАдреса[7];
		Корпус 	 = ЧастиАдреса[8];
		Квартира = ?(ЧастиАдреса.Количество() = 10,ЧастиАдреса[9],"");
		
		ЧастиАдреса = Новый Массив;
		ЧастиАдреса.Добавить(Улица);
		ЧастиАдреса.Добавить(Дом);
		ЧастиАдреса.Добавить(Корпус);
		ЧастиАдреса.Добавить(Квартира);
		
		streetAddress = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ЧастиАдреса, " ", Истина);
		
	КонецЕсли;
	
	Возврат streetAddress;

КонецФункции

Функция КодИНазваниеРегионаДляСертификата(КодРегиона) Экспорт
	
	Если ПустаяСтрока(КодРегиона) Тогда
		Возврат "0";
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	МакетРегионы = КонтекстЭДОСервер.ПолучитьМакетОбработки("КодыРегионов353приказ");
	
	Для Инд = 1 По МакетРегионы.ВысотаТаблицы Цикл
		ТекРегион = МакетРегионы.Область(Инд, 1, Инд, 1).Текст;
		
		Если ТекРегион = КодРегиона Тогда
			Возврат КодРегиона + " " + СокрЛП(МакетРегионы.Область(Инд, 2, Инд, 2).Текст);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "0";
КонецФункции

Функция СведенияОбАдресе(Адрес) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("НаименованиеВключаетСокращение", Истина);
	
	Возврат РаботаСАдресами.СведенияОбАдресе(Адрес, ДополнительныеПараметры);
	
КонецФункции

Функция РазобратьСтроку(Строка, СтрокаРазделитель) экспорт
	
	НоваяСтрока = СтрЗаменить(Строка, СтрокаРазделитель, Символы.ПС);
	МассивСтрок = новый Массив();
	Для НомерСтроки = 1 По СтрЧислоСтрок(НоваяСтрока) Цикл
		МассивСтрок.Добавить(СтрПолучитьСтроку(НоваяСтрока, НомерСтроки));
	КонецЦикла;
	возврат МассивСтрок;
	
КонецФункции

Функция ЭтоГородФедеральногоЗначения(Город)
	
	Города = Новый Массив;
	Города.Добавить("МОСКВА Г");
	Города.Добавить("САНКТ-ПЕТЕРБУРГ Г");
	Города.Добавить("СЕВАСТОПОЛЬ Г");
	Города.Добавить("БАЙКОНУР Г");
	
	Результат = Города.Найти(ВРег(Город)) <> Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Взята из ОМ УправлениеКонтактнойИнформациейКлиентСервер, процедура СокращенияОбъектовАдресацииАдресаРФ,
// поскольку не является программным интерфейсом.
Функция СокращеноеНазваниОбъектаАдресации(ПолноеНазвание)
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(НСтр("ru = 'Дом'"), НСтр("ru = 'Д.'"));
	Результат.Вставить(НСтр("ru = 'Владение'"), НСтр("ru = 'Вл.'"));
	Результат.Вставить(НСтр("ru = 'Домовладение'"), НСтр("ru = 'Домовл.'"));
	
	Результат.Вставить(НСтр("ru = 'Корпус'"), НСтр("ru = 'Корп.'"));
	Результат.Вставить(НСтр("ru = 'Строение'"), НСтр("ru = 'Стр.'"));
	Результат.Вставить(НСтр("ru = 'Литера'"), НСтр("ru = 'Лит.'"));
	Результат.Вставить(НСтр("ru = 'Сооружение'"), НСтр("ru = 'Сооруж.'"));
	Результат.Вставить(НСтр("ru = 'Участок'"), НСтр("ru = 'Уч.'"));
	
	Результат.Вставить(НСтр("ru = 'Квартира'"), НСтр("ru = 'Кв.'"));
	Результат.Вставить(НСтр("ru = 'Офис'"), НСтр("ru = 'Оф.'"));
	Результат.Вставить(НСтр("ru = 'Бокс'"), НСтр("ru = 'Бокс'"));
	Результат.Вставить(НСтр("ru = 'Помещение'"), НСтр("ru = 'Пом.'"));
	Результат.Вставить(НСтр("ru = 'Комната'"), НСтр("ru = 'Ком.'"));
	Результат.Вставить(НСтр("ru = 'Этаж'"), НСтр("ru = 'Этаж'"));
	
	Возврат НРег(Результат[ПолноеНазвание]);
	
КонецФункции

Функция ДатаВремяИзСтроки(ЗначениеСтр) Экспорт
	
	ЗначСтр = СокрЛП(ЗначениеСтр);
	
	Поле = "";
	МассивПолейДаты = Новый Массив;
	Для Счетчик = 1 По СтрДлина(ЗначСтр) Цикл
		ТекСимвол = Сред(ЗначСтр, Счетчик, 1);
		Если СтрНайти("T -/:.", ТекСимвол) > 0 Тогда
			МассивПолейДаты.Добавить(Поле);
			Поле = "";
		Иначе
			Поле = Поле + ТекСимвол;
			Если Счетчик = СтрДлина(ЗначСтр) Тогда
				МассивПолейДаты.Добавить(Поле);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Возврат Дата(Число(МассивПолейДаты[2])
					,Число(МассивПолейДаты[1])
					,Число(МассивПолейДаты[0])
					,Число(?(МассивПолейДаты.ВГраница() >= 3, МассивПолейДаты[3], 0))
					,Число(?(МассивПолейДаты.ВГраница() >= 4, МассивПолейДаты[4], 0))
					,Число(?(МассивПолейДаты.ВГраница() >= 5, МассивПолейДаты[5], 0)));
	Исключение
		Возврат '00010101';
	КонецПопытки;
	
КонецФункции

Функция ДатаИзПротоколаФСГС(ТранспортноеСообщение, Типы)
	
	ДатаИзОтвета = Дата(1,1,1);
	
	// извлекаем файл уведомления из содержимого сообщения
	СтрУведомления = ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение, Истина, Типы);
	СтрУведомление = СтрУведомления[0];
	
	// записываем вложение во временный файл
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
	Попытка
		СтрУведомление.Данные.Получить().Записать(ПутьКФайлу);
	Исключение
		Возврат ДатаИзОтвета;
	КонецПопытки;
	
	ЭтоФорматXML = Ложь;
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений(ПутьКФайлу);
	Если ДеревоXML <> Неопределено Тогда
		ЭтоФорматXML = Истина;
	КонецЕсли;
	
	Если ЭтоФорматXML Тогда
		
		УзелПротокол = ДеревоXML.Строки.Найти("protocol", "Имя");
		
		Если УзелПротокол <> Неопределено Тогда
			
			УзелСтатусПротокола = УзелПротокол.Строки.Найти("status", "Имя");
			СтатусПротокола = "";
			Если УзелСтатусПротокола <> Неопределено Тогда
				СтатусПротокола = XMLЗначение(Тип("Строка"), УзелСтатусПротокола.Значение);
			КонецЕсли;
			УзелСообщениеПротокола = УзелПротокол.Строки.Найти("msg", "Имя");
			СообщениеПротокола = "";
			Если УзелСообщениеПротокола <> Неопределено Тогда
				СообщениеПротокола = XMLЗначение(Тип("Строка"), УзелСообщениеПротокола.Значение);
			КонецЕсли;
			
			УзелТитульный = УзелПротокол.Строки.Найти("title", "Имя");
			Если УзелТитульный <> Неопределено Тогда
				
				ЗначенияЭлементов = Новый Соответствие;
				УзлыЭлементы = УзелТитульный.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "item", "Э"));
				Для каждого УзелЭлемент Из УзлыЭлементы Цикл
					УзелИмяЭлемента = УзелЭлемент.Строки.Найти("name", "Имя");
					Если УзелИмяЭлемента <> Неопределено И ЗначениеЗаполнено(УзелИмяЭлемента.Значение) Тогда
						УзелЗначениеЭлемента = УзелЭлемент.Строки.Найти("value", "Имя");
						ЗначенияЭлементов.Вставить(УзелИмяЭлемента.Значение, ?(УзелЗначениеЭлемента <> Неопределено, XMLЗначение(Тип("Строка"), УзелЗначениеЭлемента.Значение), Неопределено));
					КонецЕсли;
				КонецЦикла;
				
				// определяем дату-время отправки
				ДатаВремяОтправки = ДатаВремяИзСтроки(ЗначенияЭлементов["dt_send"]);
				
			Иначе
				ЭтоФорматXML = Ложь;
			КонецЕсли;
		Иначе
			ЭтоФорматXML = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЭтоФорматXML Тогда
		
		ТекстИзФайла = ПрочитатьТекстИзФайла(ПутьКФайлу, , Истина);
		
		// определяем дату-время получения
		ДатаВремяОтправки = "";
		Для СчетчикСтрок = 1 По СтрЧислоСтрок(ТекстИзФайла) Цикл
			ТекСтрока = СтрПолучитьСтроку(ТекстИзФайла, СчетчикСтрок);
			ПозСтрДата = СтрНайти(ТекСтрока, "Дата передачи файла:");
			Если ПозСтрДата > 0 Тогда
				ДатаИзОтвета = ДатаВремяИзСтроки(СокрЛП(Сред(ТекСтрока, ПозСтрДата + 20)));
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДатаИзОтвета;
	
КонецФункции

Функция ДатаИзXMLФайлаОтвета(ТранспортноеСообщение, Типы, ИмяПоляДаты, ИмяПоляВремени = Неопределено)
	
	ДатаИзОтвета = Дата(1,1,1);
	
	// извлекаем файл уведомления из содержимого сообщения
	СтрУведомления = ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение, Истина, Типы);
	СтрУведомление = СтрУведомления[0];
	
	// записываем вложение во временный файл
	ФайлУведомления = ПолучитьИмяВременногоФайла("xml");
	Попытка
		СтрУведомление.Данные.Получить().Записать(ФайлУведомления);
	Исключение
		Возврат ДатаИзОтвета;
	КонецПопытки;
	
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений(ФайлУведомления);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлУведомления);
	Если ДеревоXML = Неопределено Тогда
		Возврат ДатаИзОтвета;
	КонецЕсли;
	
	// Дата, возможно без времени
	Узел = ДеревоXML.Строки.Найти(ИмяПоляДаты, "Имя", Истина);
	Если Узел <> Неопределено Тогда
		Дата = ДатаВремяИзСтрокиXML(Узел.Значение);
	КонецЕсли;
	
	// Время, если есть.
	Если ИмяПоляВремени = Неопределено Тогда
		
		ДатаИзОтвета = ДатаИзСтрокиРазныхФорматов(Дата);
		
	Иначе
		
		Узел = ДеревоXML.Строки.Найти(ИмяПоляВремени, "Имя", Истина);
		Если Узел = Неопределено Тогда
			ДатаИзОтвета = ДатаИзСтрокиРазныхФорматов(Дата);
		Иначе
			
			Время 		 = Узел.Значение;
			ДатаИзОтвета = СоединитьДатуИВремя(Дата, Время);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДатаИзОтвета;
	
КонецФункции

Функция СоединитьДатуИВремя(Дата, Время)
	
	Результат = Дата(1,1,1);
	
	Если ТипЗнч(Дата) <> Тип("Дата") Тогда
		Возврат Дата;
	КонецЕсли;
	
	ДатаИВремя = Формат(Дата, "ДЛФ=D") + " " + Время;
	
	Попытка
		Результат = ДатаИзСтрокиРазныхФорматов(ДатаИВремя);
	Исключение
		Результат = ДатаИВремя;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСоответствиеТиповСодержимого() Экспорт

	СоответствиеТиповСодержимого = Новый Соответствие;
	
	// отчетность ПФР
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР, "ФайлОтчетностиПФР");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияОтчетностиПФР, "ПодтверждениеПолученияОтчетностиПФР");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СведенияПриложениеПФР, "СведенияПриложениеПФР");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР, "ПротоколПФР");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПриложениеПФР, "ПротоколПриложениеПФР");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияСведенийПФР, "ФайлОписанияСведенийПФР");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись, "ЭлектронноЦифроваяПодпись");
	
	// неформализованные ПФР
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо, "Письмо");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение, "ПисьмоПриложение");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияПисьма, "ПодтверждениеПолученияПисьма");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма, "ОписаниеПисьма");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТранспортнаяИнформация, "ТранспортнаяИнформация");
	
	// запросы ПФР
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОС, "ЗапросИОС");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияЗапросаПФР, "ФайлОписанияЗапросаПФР");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросПФР, "ОтветНаЗапросПФР");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветПриложениеНаЗапросПФР, "ОтветПриложениеНаЗапросПФР");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияЗапросПФР, "ПодтверждениеПолученияЗапросПФР");
	
	// отчетность ФНС
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности, "ФайлОтчетности");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ, "Форма2НДФЛ");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность, "Доверенность");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений, "ОписаниеСведений");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений2НДФЛ, "ОписаниеСведений2НДФЛ");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправки, "ПодтверждениеДатыОтправки");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказе, "УведомлениеОбОтказе");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриеме, "КвитанцияОПриеме");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОВводе, "ИзвещениеОВводе");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточнении, "УведомлениеОбУточнении");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении, "ИзвещениеОПолучении");
	
	// 2-НДФЛ
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ, "Протокол2НДФЛ");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ, "Реестр2НДФЛ");
	
	// обращение
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение, "Обращение");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение, "Приложение");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыПолучения, "ПодтверждениеДатыПолучения");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка, "ОписаниеСведенийОбращениеПисьмоРассылка");
	
	// представление
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Представление, "Обращение");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ДоверенностьПредставление, "ДоверенностьПредставление");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПредставление, "ОписаниеПредставление");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправкиПредставление, "ПодтверждениеДатыОтправкиПредставление");
	
	// входящие неформализованные
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Рассылка, "Рассылка");
	
	// запросы
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос, "Запрос");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Ответ, "Ответ");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗапрос, "ОписаниеСведенийЗапрос");
	
	// запросы на выписку из ЕГРЮЛ/ЕГРИП	
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП, "Запрос");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросВыпискиИзЕГРЮЛ_ЕГРИП, "Ответ");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.РезультатОбработкиЗапросаНаВыпискуЕГРЮЛ_ЕГРИП, "ОписаниеСведенийЗапрос");
	
	//документ	
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Документ, "Документ");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеДокумент, "ОписаниеДокумент");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеДокумент, "УведомлениеОбОтказеДокумент");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеДокумент, "КвитанцияОПриемеДокумент");
	
	//заявление	
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Заявление, "Заявление");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗаявление, "ОписаниеСведенийЗаявление");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеЗаявления, "КвитанцияОПриемеЗаявления");
	
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПростОтметки, 		"СообщениеОПростОтметки");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеОтметки, 	"УведомлениеОбОтказеОтметки");
	
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПроверке, "СообщениеОПроверке");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОбОтзывеЗаявления, "СообщениеОбОтзывеЗаявления");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОНесоответствиях, "СообщениеОНесоответствиях");
	
	// отчетность в Росстат
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиФСГС, "ФайлОтчетностиФСГС");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолученииДокументаФСГС, "ИзвещениеОПолученииДокументаФСГС");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОператораФСГС, "ПодтверждениеОператораФСГС");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОПриемеВОбработкуОтчетаФСГС, "УведомлениеОПриемеВОбработкуОтчетаФСГС");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточненииОтчетаФСГС, "УведомлениеОбУточненииОтчетаФСГС");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОНесоответствииФорматуОтчетаФСГС, "УведомлениеОНесоответствииФорматуОтчетаФСГС");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеОтчетаФСГС, "УведомлениеОбОтказеОтчетаФСГС");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеФайлаОтчетностиФСГС, "ОписаниеФайлаОтчетностиФСГС");
	
	// переписка с Росстатом
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоФСГС, "ПисьмоФСГС");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.РассылкаФСГС, "РассылкаФСГС");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПриложениеПисьмаФСГС, "ПриложениеПисьмаФСГС");
	СоответствиеТиповСодержимого.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьмаФСГС, "ОписаниеПисьмаФСГС");
	
	Возврат СоответствиеТиповСодержимого;
	
КонецФункции

Функция ДатаИзОтвета(ПоследнийРезультатПриема, НеПолучатьДаты)
	
	ДатаИзОтвета = Дата(1,1,1);
	
	Если НЕ НеПолучатьДаты Тогда
		
		Если ТипЗнч(ПоследнийРезультатПриема) = Тип("Массив") Тогда
			
			Если ПоследнийРезультатПриема.Количество() > 0 Тогда
				
				ТранспортноеСообщение 	= ПоследнийРезультатПриема[0].Ссылка;
				ДатаИзОтвета 			= ДатаИзОтветовКонтролирующихОрганов(ТранспортноеСообщение);
			
			КонецЕсли;
				
		Иначе
				
			ДатаИзОтвета = ДатаИзОтветовКонтролирующихОрганов(ПоследнийРезультатПриема.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ДатаИзОтвета;
	
КонецФункции

Функция ДатаОтправки(ПоследнийРезультатПриема, НеПолучатьДаты)
	
	ДатаИзОтвета = Дата(1,1,1);
	
	Если НеПолучатьДаты Тогда
		
		ДатаИзОтвета = Дата(1,1,1);
		
	Иначе
		
		Если ТипЗнч(ПоследнийРезультатПриема) = Тип("Массив") Тогда
			
			ДатаИзОтвета = ?(
				ПоследнийРезультатПриема.Количество() > 0, 
				ПоследнийРезультатПриема[0].ДатаТранспорта, 
				Дата(1,1,1));
			
		Иначе
		
			ДатаИзОтвета = ПоследнийРезультатПриема.ДатаТранспорта;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДатаИзОтвета;
	
КонецФункции

#Область БанкРоссии

Функция ТаблицаЭтаповОтправкиБанкРоссии(СсылкаНаОтчет, ДополнительныеПараметры)
	
	НачальныйСтатус = НачальныйСтатусПриФормированииТаблицыЭтаповОтправки(СсылкаНаОтчет);
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НачальныйСтатус;
	СтрокаЭтапа.ТекстСтатуса				= НачальныйСтатус;
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= КомментарийКСостояниюНеОтправлено();
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	// определяем последнюю отправку
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ОтправкаСсылка = ДополнительныеПараметры.Отправка;
	Иначе
		ОтправкаСсылка =  ПолучитьПоследнююОтправкуОтчетаВБанкРоссии(СсылкаНаОтчет);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтправкаСсылка) Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в Банк России'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в Банк России'");
	СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка), ОтправкаСсылка.ДатаОтправки, Дата(1,1,1));
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается результат обработки'");
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= "";
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= ОтправкаСсылка <> Неопределено;

	
	Если ОтправкаСсылка <> Неопределено И  ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не сдано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не сдано'");
		СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка), ОтправкаСсылка.ДатаЗакрытия, Дата(1,1,1));
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте отчет еще раз'");
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол ошибок'");
		СтрокаЭтапа.Протокол					= ОтправкаСсылка;
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= Истина;
		
	Иначе
		
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Сдано'");
		СтрокаЭтапа.Дата						= ?(ЗначениеЗаполнено(ОтправкаСсылка) И ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан, ОтправкаСсылка.ДатаЗакрытия, Дата(1,1,1));
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru = 'Протокол о сдаче'");
		СтрокаЭтапа.Протокол					= ОтправкаСсылка;
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
		СтрокаЭтапа.ЭтапПройден					= ОтправкаСсылка <> Неопределено И ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
			
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ПолучитьПоследнююОтправкуОтчетаВБанкРоссии(ОтчетСсылка) Экспорт
	
	Отправка = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВБанкРоссии") Тогда
		МодульДокументооборотСБанкомРоссии = ОбщегоНазначения.ОбщийМодуль("ДокументооборотСБанкомРоссии");
		Возврат МодульДокументооборотСБанкомРоссии.ПолучитьПоследнююОтправкуОтчета(ОтчетСсылка);
	КонецЕсли;
	
	Возврат Отправка;
	
КонецФункции

Процедура ПриЗаписиОтправкиБанкРоссии(Объект, Отказ) Экспорт
	
	Если Объект.ОтчетСсылка <> Неопределено Тогда
		// отражаем изменения в регистре статусов отправки
		ОбновитьСтатусОтправкиОтчетаВБанкРоссии(Объект.ОтчетСсылка);
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписьОбъектовРегламентированнойОтчетности(Объект.ОтчетСсылка, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтатусОтправкиОтчетаВБанкРоссии(Отчет)
	
	// находим последнюю не помеченную на удаление отправку отчета
	ПоследняяОтправка = ПолучитьПоследнююОтправкуОтчетаВБанкРоссии(Отчет);
	
	// вычисляем значение статуса отправки (ПеречислениеСсылка.СтатусыОтправки)
	Если ЗначениеЗаполнено(ПоследняяОтправка) Тогда
		
		СтатусОтправки = ПоследняяОтправка.СтатусОтправки;
		Если СтатусОтправки = Перечисления.СтатусыОтправки.ПринятЕстьОшибки Тогда
			//введено после добавления дополнительного статуса ПринятЕстьОшибки, при котором отчет считается сданным
			СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
		КонецЕсли;
		
	Иначе
		СтатусОтправки = Неопределено;
	КонецЕсли;
	
	// сохраняем статус в базе
	ЗаписатьСтатусОтправкиОтчетаВБанкРоссии(Отчет, СтатусОтправки, ПоследняяОтправка);
	
КонецПроцедуры

Процедура ЗаписатьСтатусОтправкиОтчетаВБанкРоссии(Отчет, СтатусОтправки, ОснованиеСтатуса)
	
	Если ЗначениеЗаполнено(СтатусОтправки) Тогда
		МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		МенЗап.Объект = Отчет;
		МенЗап.Статус = СтатусОтправки;
		МенЗап.Основание = ОснованиеСтатуса;
		МенЗап.Записать(Истина);
	Иначе
		МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		МенЗап.Объект = Отчет;
		МенЗап.Прочитать();
		Если МенЗап.Выбран() Тогда
			МенЗап.Удалить();
		КонецЕсли;
	КонецЕсли;
	
	// вызываем переопределяемую процедуру отработки изменения статуса отправки
	ПриИзмененииСтатусаОтправкиДокумента(Отчет, СтатусОтправки);
	
КонецПроцедуры

Функция ПолучитьПустуюДатуЗавершенияОтправкиВБанкРоссии() Экспорт
	
	Возврат '39991231235959';
	
КонецФункции

Процедура ПередЗаписьюОтправкиВБанкРоссии(Объект, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		Объект.Период = Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd") + Формат('39991231' - Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd");
	КонецЕсли;
	
	Если Объект.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
			Объект.ДатаЗакрытия = ПолучитьПустуюДатуЗавершенияОтправкиВБанкРоссии();
		КонецЕсли;
		
	Иначе
		Объект.ДатаЗакрытия = Объект.ДатаПолученияРезультата;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоФайлВыгрузкиРеестраНДС(КороткоеИмяФайла) Экспорт
	
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоФайлВыгрузкиРеестраНДС(КороткоеИмяФайла);
	
КонецФункции

Функция ЭтоФайлВыгрузкиРеестраАкцизов(КороткоеИмяФайла) Экспорт
	
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоФайлВыгрузкиРеестраАкцизов(КороткоеИмяФайла);
	
КонецФункции

Функция КНДРеестраФНСПоПрефиксуФайла(КороткоеИмяФайла) Экспорт
	
	КНД = Неопределено;
	
	Если Найти(КороткоеИмяФайла, "KO_RRTDNDS") > 0 Тогда 
		// РегламентированныйОтчетРеестрНДСПриложение1
		КНД = "1155110";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RRNFTSNDS") > 0 Тогда 
		// РегламентированныйОтчетРеестрНДСПриложение2
		КНД = "1155119";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RRGAZNDS") > 0 Тогда
		// РегламентированныйОтчетРеестрНДСПриложение3
		КНД = "1155121";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RRNEFTNDS") > 0 Тогда
		// РегламентированныйОтчетРеестрНДСПриложение4
		КНД = "1155120";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RRTRDNDS") > 0 Тогда
		// РегламентированныйОтчетРеестрНДСПриложение5
		КНД = "1155111";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RRDPRNDS") > 0 Тогда
		// РегламентированныйОтчетРеестрНДСПриложение6
		КНД = "1155117";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RRZDNNDS") > 0 Тогда
		// РегламентированныйОтчетРеестрНДСПриложение7
		КНД = "1155112";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RRTRINNDS") > 0 Тогда
		// РегламентированныйОтчетРеестрНДСПриложение8
		КНД = "1155113";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RRAVNNDS") > 0 Тогда
		// РегламентированныйОтчетРеестрНДСПриложение9
		КНД = "1155114";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RRMORNDS") > 0 Тогда
		// РегламентированныйОтчетРеестрНДСПриложение10
		КНД = "1155115";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RRGDPRVZNDS") > 0 Тогда
		// РегламентированныйОтчетРеестрНДСПриложение11
		КНД = "1155122";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RRAVPRVZNDS") > 0 Тогда
		// РегламентированныйОтчетРеестрНДСПриложение12
		КНД = "1155123";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RRGDTRNDS") > 0 Тогда
		// РегламентированныйОтчетРеестрНДСПриложение13
		КНД = "1155116";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RRPRVZNDS") > 0 Тогда
		// РегламентированныйОтчетРеестрНДСПриложение14
		КНД = "1155118";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RR198.7.3TD") > 0 Тогда
		// РегламентированныйОтчетРеестрАкцизыПриложение1
		КНД = "1155124";
	ИначеЕсли Найти(КороткоеИмяФайла, "KO_RR198.7.34TD") > 0 Тогда
		// РегламентированныйОтчетРеестрАкцизыПриложение2
		КНД = "1155125";
	КонецЕсли;
	
	Возврат КНД;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Функция СформироватьПараметрыЗапроса(Запрос) Экспорт
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Запрос.Организация);
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Запрос.Организация);
	СведенияОбОрганизации.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	// определяем РегистрацияВИФНС
	ЭлРегистрацияВИФНС = Запрос.Получатель;
	Если НЕ ЗначениеЗаполнено(ЭлРегистрацияВИФНС) И Запрос.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате Тогда
		КодНалоговогоОрганаКонечногоПолучателяДокумента = СокрЛП(Запрос.Получатель.Код);
		Если НЕ ЗначениеЗаполнено(КодНалоговогоОрганаКонечногоПолучателяДокумента) И СведенияОбОрганизации.Свойство("КодНО") Тогда
			КодНалоговогоОрганаКонечногоПолучателяДокумента = СокрЛП(СведенияОбОрганизации.КодНО);
		КонецЕсли;
		ЭлРегистрацияВИФНС = РегистрацияВИФНСПоОрганизацииИКодуНО(
			Запрос.Организация,
			КодНалоговогоОрганаКонечногоПолучателяДокумента,,
			НЕ ЭтоПБОЮЛ,
			СведенияОбОрганизации);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЭлРегистрацияВИФНС) И ЗначениеЗаполнено(ЭлРегистрацияВИФНС.Доверенность) Тогда
		ДоверенностьПредставителя = ЭлРегистрацияВИФНС.Доверенность;
		// признак подписания представителем
		СведенияОбОрганизации.Вставить("ПрПодп", 2);
		СведенияОбОрганизации.Вставить("Доверенность", ПолучитьСведенияДоверенности(ЭлРегистрацияВИФНС, Запрос.Организация));
	Иначе
		// признак подписания налогоплательщиком
		СведенияОбОрганизации.Вставить("ПрПодп", 1);
	КонецЕсли;
	
	Если ЭтоПБОЮЛ Тогда
		ФИОИП = ФИОИндивидуальногоПредпринимателя(Запрос.Организация, СведенияОбОрганизации);
		Если ФИОИП = Неопределено Тогда
			СведенияОбОрганизации.Вставить("ИПФамилия", "");
			СведенияОбОрганизации.Вставить("ИПИмя", "");
			СведенияОбОрганизации.Вставить("ИПОтчество", "");
		Иначе
			СведенияОбОрганизации.Вставить("ИПФамилия", ФИОИП.Фамилия);
			СведенияОбОрганизации.Вставить("ИПИмя", ФИОИП.Имя);
			СведенияОбОрганизации.Вставить("ИПОтчество", ФИОИП.Отчество);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ЭлРегистрацияВИФНС) Тогда
			СведенияОбОрганизации.Вставить("КППЮЛ", СокрЛП(ЭлРегистрацияВИФНС.КПП));
		Иначе
			Если СведенияОбОрганизации.Свойство("КППЮЛ") Тогда
				СведенияОбОрганизации.Вставить("КППЮЛ", СокрЛП(СведенияОбОрганизации.КППЮЛ));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СведенияОбОрганизации;
	
КонецФункции

Функция РегистрацияВИФНСПоОрганизацииИКодуНО(
		Организация,
		КодНО,
		КПП = "",
		ЭтоЮридическоеЛицо = Неопределено,
		СведенияОбОрганизации = Неопределено,
		ЛюбойКПП = Ложь) Экспорт
	
	КППРегистрации = КПП;
	
	Если НЕ ЗначениеЗаполнено(КППРегистрации) И НЕ ЛюбойКПП Тогда
		Если ЭтоЮридическоеЛицо = Неопределено Тогда
			ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
		КонецЕсли;
		
		Если ЭтоЮридическоеЛицо Тогда
			Если СведенияОбОрганизации = Неопределено Тогда
				СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодНО, КППЮЛ");
			КонецЕсли;
			
			Если СокрЛП(СведенияОбОрганизации.КодНО) = СокрЛП(КодНО) Тогда
				КППРегистрации = СокрЛП(СведенияОбОрганизации.КППЮЛ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	РегистрацияВИФНС.Ссылка,
	                      |	ВЫБОР
	                      |		КОГДА РегистрацияВИФНС.Доверенность <> &ПустаяСсылкаДоверенность
	                      |			ТОГДА 1
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК ДоверенностьЗаполнена
	                      |ИЗ
	                      |	Справочник.РегистрацииВНалоговомОргане КАК РегистрацияВИФНС
	                      |ГДЕ
	                      |	(РегистрацияВИФНС.Владелец = &Организация
	                      |		ИЛИ РегистрацияВИФНС.Владелец = &ГоловнаяОрганизация)
						  |	И РегистрацияВИФНС.Код = &Код
						  |" + ?(ЗначениеЗаполнено(КППРегистрации), "И РегистрацияВИФНС.КПП = &КПП", "") + "
	                      |	И РегистрацияВИФНС.ПометкаУдаления = &ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДоверенностьЗаполнена УБЫВ");
						  
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", РегламентированнаяОтчетность.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Код", КодНО);
	Запрос.УстановитьПараметр("ПустаяСсылкаДоверенность", Справочники.ДоверенностиНалогоплательщика.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(КППРегистрации) Тогда
		Запрос.УстановитьПараметр("КПП", КППРегистрации);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Получить(0);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КПП) И НЕ ЛюбойКПП Тогда
		Возврат РегистрацияВИФНСПоОрганизацииИКодуНО(
			Организация,
			КодНО,
			КПП,
			ЭтоЮридическоеЛицо,
			СведенияОбОрганизации,
			Истина);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСведенияДоверенности(РегистрацияВИФНС, Организация = Неопределено) Экспорт
	
	
	Если НЕ ЗначениеЗаполнено(РегистрацияВИФНС) ИЛИ НЕ ЗначениеЗаполнено(РегистрацияВИФНС.Доверенность) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	// структура с результатом
	Сведения = Новый Структура;
	
	Доверенность = РегистрацияВИФНС.Доверенность;
	Если Организация = Неопределено Тогда
		Организация = РегистрацияВИФНС.Владелец;
	КонецЕсли;
	
	
	// добавляем код НО
	Сведения.Вставить("КодНО", СокрЛП(РегистрацияВИФНС.Код));
	
	
	// формируем структуру с учетными сведениями о самой доверенности
	УчетныеСведенияОДоверенности = Новый Структура("Номер, Дата, ДатаОкончания", ?(ЗначениеЗаполнено(Доверенность.НомерДовер), СокрЛП(Доверенность.НомерДовер), "БН"), Доверенность.ДатаВыдачи, Доверенность.ДатаОкончания);
	Сведения.Вставить("УчСвДов", УчетныеСведенияОДоверенности);
	
	
	// формируем сведения о представляемом лице
	СведенияОПредставляемомЛице = Новый Структура;
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		
		СведенияОПредставляемомЛице.Вставить("ЯвляетсяФЛ", Истина);
		
		// получаем все сведения о ФЛ
		СведенияОргФЛ = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "ИННФЛ, ОГРН, Гражд, ДатаРожд, ФИО, ИндексМЖ, КодСубъектМЖ, РайонМЖ, ГородМЖ, НПунктМЖ, УлицаМЖ, ДомМЖ, КорпусМЖ, КвартираМЖ, КодУдЛичн, СерияУдЛичн, НомерУдЛичн, ДатаУдЛичн, ОрганВыданУдЛичн, АдрМЖ");
		
		// общие сведения
		СведенияОПредставляемомЛице.Вставить("ИННФЛ", СокрЛП(СведенияОргФЛ.ИННФЛ));
		СведенияОПредставляемомЛице.Вставить("ОГРНИП", СокрЛП(СведенияОргФЛ.ОГРН));
		СведенияОПредставляемомЛице.Вставить("Гражданство", СокрЛП(СведенияОргФЛ.Гражд));
		СведенияОПредставляемомЛице.Вставить("ДатаРожд", СведенияОргФЛ.ДатаРожд);
		
		// формируем структуру с Ф.И.О.
		СведенияОПредставляемомЛице.Вставить("ФИО", РегламентированнаяОтчетность.РазложитьФИО(СведенияОргФЛ.ФИО));
		
		// формируем структуру с адресом предпринимателя
		АдресПредпринимателя = Новый Структура("Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт",
												СокрЛП(СведенияОргФЛ.ИндексМЖ), СокрЛП(СведенияОргФЛ.КодСубъектМЖ), СокрЛП(СведенияОргФЛ.РайонМЖ), СокрЛП(СведенияОргФЛ.ГородМЖ),
												СокрЛП(СведенияОргФЛ.НПунктМЖ), СокрЛП(СведенияОргФЛ.УлицаМЖ), СокрЛП(СведенияОргФЛ.ДомМЖ), СокрЛП(СведенияОргФЛ.КорпусМЖ), СокрЛП(СведенияОргФЛ.КвартираМЖ));
		Если НЕ ЗначениеЗаполнено(АдресПредпринимателя.КодРегион) Тогда
			АдресПредпринимателяРазложением = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(СведенияОргФЛ.АдрМЖ);
			АдресПредпринимателя.КодРегион = КодРегионаИзАдреса(АдресПредпринимателяРазложением);
		КонецЕсли;
		СведенияОПредставляемомЛице.Вставить("АдрРФ", АдресПредпринимателя);
		
		// формируем структуру со сведениями об удостоверении личности
		УдЛичнПредпринимателя = Новый Структура("ВидДок, СерНомДок, ДатаДок, ВыдДок, КодВыдДок", СокрЛП(СведенияОргФЛ.КодУдЛичн), СокрЛП(СокрЛП(СведенияОргФЛ.СерияУдЛичн) + " " + СокрЛП(СведенияОргФЛ.НомерУдЛичн)), СведенияОргФЛ.ДатаУдЛичн, СокрЛП(СведенияОргФЛ.ОрганВыданУдЛичн), "");
		СведенияОПредставляемомЛице.Вставить("УдЛичн", УдЛичнПредпринимателя);
		
	Иначе
		
		СведенияОПредставляемомЛице.Вставить("ЯвляетсяФЛ", Ложь);
		
		// получаем сведения о ЮЛ
		СведенияОргЮЛ = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "НаимЮЛПол, ИННЮЛ, ОГРН, ОргИндекс, ОргКодСубъект, ОргРайон, ОргГород, ОргНПункт, ОргУлица, ОргДом, ОргКорпус, ОргКвартира, ФИОРук, ИННРук, АдрЮР");
		
		// общие сведения
		СведенияОПредставляемомЛице.Вставить("НаимОрг", СокрЛП(СведенияОргЮЛ.НаимЮЛПол));
		СведенияОПредставляемомЛице.Вставить("ИННЮЛ", СокрЛП(СведенияОргЮЛ.ИННЮЛ));
		СведенияОПредставляемомЛице.Вставить("КПП", СокрЛП(РегистрацияВИФНС.КПП));
		СведенияОПредставляемомЛице.Вставить("ОГРН", СокрЛП(СведенияОргЮЛ.ОГРН));
		
		// формируем структуру с адресом предпринимателя
		АдресЮЛ = Новый Структура("Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт",
									СокрЛП(СведенияОргЮЛ.ОргИндекс), СокрЛП(СведенияОргЮЛ.ОргКодСубъект), СокрЛП(СведенияОргЮЛ.ОргРайон), СокрЛП(СведенияОргЮЛ.ОргГород),
									СокрЛП(СведенияОргЮЛ.ОргНПункт), СокрЛП(СведенияОргЮЛ.ОргУлица), СокрЛП(СведенияОргЮЛ.ОргДом), СокрЛП(СведенияОргЮЛ.ОргКорпус), СокрЛП(СведенияОргЮЛ.ОргКвартира));
		Если НЕ ЗначениеЗаполнено(АдресЮЛ.КодРегион) Тогда
			АдресЮЛРазложением = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(СведенияОргЮЛ.АдрЮР);
			АдресЮЛ.КодРегион = КодРегионаИзАдреса(АдресЮЛРазложением);
		КонецЕсли;
		СведенияОПредставляемомЛице.Вставить("АдрРФ", АдресЮЛ);
		
		// формируем структуру со сведениями о руководителе
		ОрганизацияВДоверенности = Доверенность.Владелец;
		Если ЗначениеЗаполнено(ОрганизацияВДоверенности) И ОрганизацияВДоверенности <> Организация Тогда
			СведенияОргЮЛДоверенность = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(ОрганизацияВДоверенности,, "ФИОРук, ИННРук");
		Иначе
			СведенияОргЮЛДоверенность = СведенияОргЮЛ;
		КонецЕсли;
		СвРукОргЮЛ = Новый Структура("ИННФЛ, ФИО", СокрЛП(СведенияОргЮЛДоверенность.ИННРук), РегламентированнаяОтчетность.РазложитьФИО(СведенияОргЮЛДоверенность.ФИОРук));
		СведенияОПредставляемомЛице.Вставить("СвРукОрг", СвРукОргЮЛ);
		
	КонецЕсли;
	
	Сведения.Вставить("СвПредст", СведенияОПредставляемомЛице);
	
	
	// формируем сведения о доверителе
	ПризнакДоверителя = Доверенность.ПризнакДоверителя;
	СвДовер = Новый Структура("ПрДов", ПризнакДоверителя);
	
	Если ПризнакДоверителя = 2 ИЛИ ПризнакДоверителя = 3 Тогда
		
		// выгружаем сведения о доверителе-ЮЛ
		Если Доверенность.ДоверительЯвляетсяЮЛ Тогда
			
			// общие сведения
			ДоверительЮЛ = Новый Структура("НаимОрг, ИННЮЛ, КПП, ОГРН", СокрЛП(Доверенность.ДоверительЮЛ_НаимОрг), СокрЛП(Доверенность.ДоверительЮЛ_ИНН), СокрЛП(Доверенность.ДоверительЮЛ_КПП), СокрЛП(Доверенность.ДоверительЮЛ_ОГРН));
			
			// адрес в РФ
			ДоверительЮЛ.Вставить("АдрЮЛ", ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительЮЛ));
			
			// сведения о руководителе
			СвРукОрг = Новый Структура("ИННФЛ, ФИО", СокрЛП(Доверенность.ДоверительРук_ИНН), ПолучитьФИОДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительРук));
			ДоверительЮЛ.Вставить("СвРукОрг", СвРукОрг);
			
			СвДовер.Вставить("СвЮЛ", ДоверительЮЛ);
			
		КонецЕсли;
		
		// выгружаем сведения о довериетеле-ФЛ или об УЛ доверителя-ЮЛ
		Если НЕ Доверенность.ДоверительЯвляетсяЮЛ ИЛИ Доверенность.ДоверительИмеетУЛ Тогда
			
			// общие сведения
			ДоверительФЛ = Новый Структура("ИННФЛ, ОГРНИП, Гражданство, ДатаРожд", СокрЛП(Доверенность.ДоверительФЛ_ИНН), СокрЛП(Доверенность.ДоверительФЛ_ОГРН), СокрЛП(Доверенность.ДоверительФЛ_Гражданство.Код), Доверенность.ДоверительФЛ_ДатаРождения);
			
			// формируем ФИО
			ДоверительФЛ.Вставить("ФИО", ПолучитьФИОДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
			
			// формируем адрес
			ДоверительФЛ.Вставить("АдрРФ", ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
			
			// формируем сведения об удостоверении личности
			ДоверительФЛ.Вставить("УдЛичн", ПолучитьУдЛичнДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
			
			СвДовер.Вставить("СвФЛ", ДоверительФЛ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Сведения.Вставить("СвДовер", СвДовер);
	
	
	// выгружаем сведения о представителе и его полномочиях
	СвУпПред = Новый Структура;
	
	// выгружаем сведения о представителе
	СвПред = Новый Структура;
	
	Если Доверенность.ПредставительЯвляетсяЮЛ Тогда
		СвПредставительЮЛ = Новый Структура("НаимОрг, ИННЮЛ, КПП, ОГРН", СокрЛП(Доверенность.ПредставительЮЛ_НаимОрг), СокрЛП(Доверенность.ПредставительЮЛ_ИНН), СокрЛП(Доверенность.ПредставительЮЛ_КПП), СокрЛП(Доверенность.ПредставительЮЛ_ОГРН));
		СвПредставительЮЛ.Вставить("АдрРФ", ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительЮЛ));
		СвПред.Вставить("СвОрг", СвПредставительЮЛ);
	КонецЕсли;
	
	СвПредставительФЛ = Новый Структура("ИННФЛ, ОГРНИП, Гражданство, ДатаРожд", СокрЛП(Доверенность.ПредставительФЛ_ИНН), СокрЛП(Доверенность.ПредставительФЛ_ОГРН), СокрЛП(Доверенность.ПредставительФЛ_Гражданство.Код), Доверенность.ПредставительФЛ_ДатаРождения);
	СвПредставительФЛ.Вставить("ФИО", ПолучитьФИОДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ));
	СвПредставительФЛ.Вставить("АдрРФ", ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ));
	СвПредставительФЛ.Вставить("УдЛичн", ПолучитьУдЛичнДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ));
	СвПредставительФЛ.Вставить("ЯвляетсяСотрудникомОрганизации", Доверенность.ПредставительЯвляетсяСотрудником);
	СвПред.Вставить("СведФизЛ", СвПредставительФЛ);
	
	СвУпПред.Вставить("СвПред", СвПред);
	
	СоответствиеРеквизитовКодамПолномочий = ПолучитьСоответствиеРеквизитовКодамПолномочийДоверенности();
	
	// выгружаем сведения о полномочиях
	ПолнДов = Новый Массив;
	Для Каждого ПолномочиеПредставителя Из Доверенность.ПолномочияПредставителя Цикл
		
		// собираем области полномочий
		ОбластиПолномочий = Новый Массив;
		Для Каждого Эл Из СоответствиеРеквизитовКодамПолномочий Цикл
			Если ПолномочиеПредставителя[Эл.Ключ] Тогда
				ОбластиПолномочий.Добавить(Эл.Значение);
			КонецЕсли;
		КонецЦикла;
		
		// собираем сведения о физ./юр.-лице по месту осуществления полномочий
		Если ЗначениеЗаполнено(ПолномочиеПредставителя.КПП) Тогда
			ОргФЛ = Новый Структура("ИННЮЛ, КПП", СокрЛП(Организация.ИНН), СокрЛП(ПолномочиеПредставителя.КПП));
		Иначе
			ОргФЛ = Новый Структура("ФЛ", СокрЛП(Организация.ИНН));
		КонецЕсли;
		
		ПолнДов.Добавить(Новый Структура("ПрОблПолн, ОргФЛ, ОКАТО", ОбластиПолномочий, ОргФЛ, СокрЛП(ПолномочиеПредставителя.ОКАТО)));
		
	КонецЦикла;
	СвУпПред.Вставить("ПолнДов", ПолнДов);
	
	Сведения.Вставить("СвУпПред", СвУпПред);
	
	
	// выгружаем сведения о нотариусе
	Если Доверенность.ЗаверенаНотариально Тогда
		
		Нотариус = Новый Структура;
		
		Если Доверенность.НотариусЯвляетсяЮЛ Тогда
			НотариусСвОрган = Новый Структура("НаимОрг, ИННЮЛ, КПП, ОГРН", СокрЛП(Доверенность.НотариусЮЛ_НаимОрг), СокрЛП(Доверенность.НотариусЮЛ_ИНН), СокрЛП(Доверенность.НотариусЮЛ_КПП), СокрЛП(Доверенность.НотариусЮЛ_ОГРН));
			Нотариус.Вставить("СвОрган", НотариусСвОрган);
		КонецЕсли;
		
		НотариусФЛФИО = ПолучитьФИОДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.НотариусФЛ);
		НотариусСвФизЛица = Новый Структура("ИННФЛ, ФИО", СокрЛП(Доверенность.НотариусФЛ_ИНН), НотариусФЛФИО);
		
		НотариусФЛАдрес = ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.НотариусФЛ);
		Если ЗначениеЗаполнено(НотариусФЛАдрес) Тогда
			НотариусСвФизЛица.Вставить("АдрРФ", НотариусФЛАдрес);
		КонецЕсли;
		
		Нотариус.Вставить("СвФизЛиц", НотариусСвФизЛица);
		
		Сведения.Вставить("Нотариус", Нотариус);
		
	КонецЕсли;
	
	
	// возвращаем полученную структуру
	Возврат Сведения;
	
КонецФункции

Функция ПолучитьАдресДоверенности(Доверенность, ТипСубъекта)
	
	АдресДоверенности = Доверенность.Адреса.Найти(ТипСубъекта, "Владелец");
	Если АдресДоверенности = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт",
								СокрЛП(АдресДоверенности.Индекс), СокрЛП(АдресДоверенности.КодРегион), СокрЛП(АдресДоверенности.Район), СокрЛП(АдресДоверенности.Город),
								СокрЛП(АдресДоверенности.НаселПункт), СокрЛП(АдресДоверенности.Улица), СокрЛП(АдресДоверенности.Дом), СокрЛП(АдресДоверенности.Корпус), СокрЛП(АдресДоверенности.Кварт));
	КонецЕсли;
	
КонецФункции

Функция ПолучитьФИОДоверенности(Доверенность, ТипСубъекта) Экспорт
	
	ФИОДоверенности = Доверенность.ФИО.Найти(ТипСубъекта, "Владелец");
	Если ФИОДоверенности = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("Фамилия, Имя, Отчество", СокрЛП(ФИОДоверенности.Фамилия), СокрЛП(ФИОДоверенности.Имя), СокрЛП(ФИОДоверенности.Отчество));
	КонецЕсли;
	
КонецФункции

Функция ПолучитьУдЛичнДоверенности(Доверенность, ТипСубъекта)
	
	УдЛичнДоверенности = Доверенность.УдЛичности.Найти(ТипСубъекта, "Владелец");
	Если УдЛичнДоверенности = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("ВидДок, СерНомДок, ДатаДок, ВыдДок, КодВыдДок",
								СокрЛП(РегламентированнаяОтчетностьПереопределяемый.ПолучитьКодВидаДокументаФизическогоЛица(УдЛичнДоверенности.ВидДок)), СокрЛП(СокрЛП(УдЛичнДоверенности.СерДок) + " " + СокрЛП(УдЛичнДоверенности.НомДок)), УдЛичнДоверенности.ДатаДок, СокрЛП(УдЛичнДоверенности.ВыдДок), СокрЛП(УдЛичнДоверенности.КодВыдДок));
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСоответствиеРеквизитовКодамПолномочийДоверенности()
	
	СоответствиеРеквизитовКодамПолномочий = Новый Соответствие;
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак01", "01");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак02", "02");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак03", "03");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак04", "04");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак05", "05");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак06", "06");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак07", "07");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак08", "08");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак09", "09");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак10", "10");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак11", "11");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак12", "12");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак13", "13");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак14", "14");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак15", "15");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак16", "16");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак17", "17");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак18", "18");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак19", "19");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак20", "20");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак21", "21");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак22", "22");
	СоответствиеРеквизитовКодамПолномочий.Вставить("ПризнакПолныеПолномочия", "99");
	
	Возврат СоответствиеРеквизитовКодамПолномочий;
	
КонецФункции

Функция Отчет2НДФЛСданЧастично(Объект) Экспорт
	
	// ищем протокол 2-НДФЛ среди содержимого сообщения
	Протоколы2НДФЛ = ПолучитьВложенияТранспортногоСообщения(
		Объект.Ссылка, 
		Истина, 
		Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ);
		
	КоличествоПротоколов = Протоколы2НДФЛ.Количество();
	Если КоличествоПротоколов = 0 Тогда
		Возврат Ложь;
	Иначе
		Протокол2НДФЛ = Протоколы2НДФЛ[0];
	КонецЕсли;
	
	// загружаем протокол из файла в строку
	ТекстОшибки = "";
	ТекстПротокола = ТекстИзФайлаВСтроку(Протокол2НДФЛ, ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(ТекстПротокола) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстПротокола = ВРег(ТекстПротокола);
	
	ВидСведений = "КОЛИЧЕСТВО ОБРАБОТАННЫХ СВЕДЕНИЙ:";
	КоличествоОбработанныхСведений = КоличествоСведенийВПротоколе2НДФЛ(ТекстПротокола, ВидСведений);
	
	ВидСведений = "КОЛИЧЕСТВО ПРИНЯТЫХ СВЕДЕНИЙ:";
	КоличествоПринятыхСведений = КоличествоСведенийВПротоколе2НДФЛ(ТекстПротокола, ВидСведений);
	
	ЕстьФайлНеПринят = СтрНайти(ТекстПротокола, "ФАЙЛ НЕ ПРИНЯТ") > 0;
	
	Возврат НЕ ЕстьФайлНеПринят
		И КоличествоОбработанныхСведений <> КоличествоПринятыхСведений;
	
КонецФункции
	
Функция КоличествоСведенийВПротоколе2НДФЛ(ТекстПротокола, КлючСтр)
	
	Для ИндСтр = 1 По СтрЧислоСтрок(ТекстПротокола) Цикл
		ТекСтр = СтрПолучитьСтроку(ТекстПротокола, ИндСтр);
		
		// ищем ключ в текущей строке
		ВхождениеКлюча = СтрНайти(ВРЕГ(ТекСтр), КлючСтр);
		Если ВхождениеКлюча <> 0 Тогда
			
			СтрокаКоличествоДокументовСОшибками = СокрЛП(СтрЗаменить(ВРЕГ(ТекСтр), КлючСтр, ""));
			
			Если НЕ ЗначениеЗаполнено(СтрокаКоличествоДокументовСОшибками) Тогда
				Возврат 0;
			КонецЕсли;
			
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаКоличествоДокументовСОшибками) Тогда
				КоличествоДокументовСОшибками = Число(СтрокаКоличествоДокументовСОшибками);
				Если КоличествоДокументовСОшибками > 0 Тогда
					Возврат КоличествоДокументовСОшибками;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

Процедура ЗаполнитьДанныеСпецоператораСвязи(СтруктураРеквизитов) Экспорт

	Макет = ПолучитьМакетОбработки("ПараметрыСпецоператоровСвязи");
	
	СтруктураРеквизитов.Вставить("СпецоператорыСвязи",					ПолучитьСпецоператоровСвязи());
	СтруктураРеквизитов.Вставить("ТекстМакетаСоглашение", 				ПросмотрМакета("ПечатьСоглашениеHTML"));
	СтруктураРеквизитов.Вставить("МакетПараметрыСпецоператоровСвязи", 	Макет);
	СтруктураРеквизитов.Вставить("Макет", 								Макет);
	СтруктураРеквизитов.Вставить("ЗначениеЗаполненияСпецоператораСвязи",Перечисления.СпецоператорыСвязи.КалугаАстрал);

КонецПроцедуры

Функция ОтчетПФРСданЧастично(Объект = Неопределено, ВложенияТранспортногоСообщения = Неопределено) Экспорт
	
	// ищем приложения к протоколу среди содержимого сообщения
	Если ВложенияТранспортногоСообщения = Неопределено Тогда
		ВложенияТранспортногоСообщения = ПолучитьВложенияТранспортногоСообщения(
			Объект.Ссылка,
			Истина,
			Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПриложениеПФР);
	КонецЕсли;
	
	XMLПриложениеКПротоколуПФР = Неопределено;
	Для каждого ВложениеТранспортногоСообщения Из ВложенияТранспортногоСообщения Цикл
		Если ВложениеТранспортногоСообщения.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПриложениеПФР Тогда
			СвойстваФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВложениеТранспортногоСообщения.ИмяФайла);
			Если ВРЕГ(СвойстваФайла.Расширение) = ВРЕГ(".xml") Тогда
				XMLПриложениеКПротоколуПФР = ВложениеТранспортногоСообщения;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если XMLПриложениеКПротоколуПФР = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	XMLПриложениеКПротоколуПФР.Данные.Получить().Записать(ИмяВременногоФайла);
	ДеревоXMLПриложенияКПротоколуПФР = ЗагрузитьXMLВДеревоЗначений(ИмяВременногоФайла);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	ЕстьПредупреждения = Ложь;
	ЕстьОшибки = Ложь;
	
	Если ДеревоXMLПриложенияКПротоколуПФР <> Неопределено Тогда
		УзлыУППКодРезультата = ДеревоXMLПриложенияКПротоколуПФР.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "УПП:КодРезультата", "Э"), Истина);
		
		Для каждого УзелУППКодРезультата Из УзлыУППКодРезультата Цикл
			ЗначениеКодаРезультата = СокрЛП(УзелУППКодРезультата.Значение);
			Если ЗначениеКодаРезультата = "30" ИЛИ ЗначениеКодаРезультата = "40" Тогда
				ЕстьПредупреждения = Истина;
			ИначеЕсли ЗначениеКодаРезультата = "50" Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат (ЕстьПредупреждения И НЕ ЕстьОшибки);
	
КонецФункции

Функция ПолучитьПоследнююОтправкуОтчета(КонтролирующийОрган, ОтчетСсылка) Экспорт
	
	Если КонтролирующийОрган = "ФСС" ИЛИ КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
		Возврат ПолучитьПоследнююОтправкуОтчетаВФСС(ОтчетСсылка);
		
	ИначеЕсли КонтролирующийОрган = "ФСРАР" ИЛИ КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
		Возврат ПолучитьПоследнююОтправкуОтчетаВФСРАР(ОтчетСсылка);
		
	ИначеЕсли КонтролирующийОрган = "РПН" ИЛИ КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
		Возврат ПолучитьПоследнююОтправкуОтчетаВРПН(ОтчетСсылка);
		
	ИначеЕсли КонтролирующийОрган = "ФТС" ИЛИ КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ФТС Тогда
		Возврат ПолучитьПоследнююОтправкуОтчетаВФТС(ОтчетСсылка);
		
	ИначеЕсли КонтролирующийОрган = "БанкРоссии" ИЛИ КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.БанкРоссии Тогда
		Возврат ПолучитьПоследнююОтправкуОтчетаВБанкРоссии(ОтчетСсылка);
		
	Иначе
		Возврат ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(ОтчетСсылка);
	КонецЕсли;
	
КонецФункции

Функция ОрганизацияИспользуетОбменСБанкомРоссии(ОрганизацияСсылка) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВБанкРоссии") Тогда
				
		МодульДокументооборотСБанкомРоссии = ОбщегоНазначения.ОбщийМодуль("ДокументооборотСБанкомРоссии");
		НастройкиОбменаСБанком = МодульДокументооборотСБанкомРоссии.ПолучитьНастройки(ОрганизацияСсылка);
		
		Возврат НастройкиОбменаСБанком.ИспользоватьОбмен;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ПользователюРазрешеноВыполнятьОбменПоУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ЭтоЭлектроннаяПодписьВМоделиСервиса = УчетнаяЗапись.ЭлектроннаяПодписьВМоделиСервиса;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись
		|ИЗ
		|	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
		|ГДЕ
		|	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись = &УчетнаяЗапись
		|	И ПользователиУчетныхЗаписейДокументооборота.Пользователь = &Пользователь
		|	И ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
		
		ОбменРазрешен = Не Запрос.Выполнить().Пустой();
		Возврат ОбменРазрешен;
		
	Иначе
		
		// Если у пользователя нет полных прав/его нет в списке пользователей - 
		// значит он не видит учетную запись в списке.
		// Проверям, видна ли учетная запись пользователю в списке учетных записей.
		// Это возможно в следующих случаях:
		// 1. У пользователя полные права.
		// 2. Нет полных прав, но пользователь указан в списке пользователей учетной записи.
		// 3. В базе нет пользователя, но это значит, что есть полные права.
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	УчетныеЗаписиДокументооборота.Наименование,
		                      |	УчетныеЗаписиДокументооборота.ОбменНапрямую,
		                      |	УчетныеЗаписиДокументооборота.ОбменНапрямуюСФСГС,
		                      |	УчетныеЗаписиДокументооборота.ИмяПользователяPOP3,
		                      |	УчетныеЗаписиДокументооборота.ПарольPOP3,
		                      |	УчетныеЗаписиДокументооборота.СерверPOP3,
		                      |	УчетныеЗаписиДокументооборота.ИмяПользователяSMTP,
		                      |	УчетныеЗаписиДокументооборота.ПарольSMTP,
		                      |	УчетныеЗаписиДокументооборота.СерверSMTP,
		                      |	УчетныеЗаписиДокументооборота.ТребуетсяSMTPАутентификация,
		                      |	УчетныеЗаписиДокументооборота.АдресЭлектроннойПочты,
		                      |	УчетныеЗаписиДокументооборота.НалоговыйОрган,
		                      |	УчетныеЗаписиДокументооборота.СерверДокументооборота,
		                      |	УчетныеЗаписиДокументооборота.СертификатРуководителя,
		                      |	УчетныеЗаписиДокументооборота.СертификатГлавногоБухгалтера,
		                      |	УчетныеЗаписиДокументооборота.СертификатДляШифрования,
		                      |	УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСФНС,
		                      |	УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСПФР,
		                      |	УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСФСГС,
		                      |	УчетныеЗаписиДокументооборота.ИдентификаторАбонента,
		                      |	УчетныеЗаписиДокументооборота.ИдентификаторСпецоператора,
		                      |	УчетныеЗаписиДокументооборота.НалоговыйОрган.Представление,
		                      |	УчетныеЗаписиДокументооборота.НалоговыйОрган.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками,
		                      |	УчетныеЗаписиДокументооборота.НалоговыйОрган.Код,
		                      |	УчетныеЗаписиДокументооборота.НалоговыйОрган.Наименование
		                      |ИЗ
		                      |	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
		                      |ГДЕ
		                      |	УчетныеЗаписиДокументооборота.Ссылка = &Ссылка");
							  
		Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
		
		ОбменРазрешен = Не Запрос.Выполнить().Пустой();
		
		Возврат ОбменРазрешен;
		
	КонецЕсли;
		
КонецФункции

Функция НезавершенныеПоследниеОтправкиФССПоОрганизации(Организация) Экспорт
	
	НастройкиОбмена   = ДокументооборотСКОВызовСервера.ПолучитьНастройкиФСС(Организация);
	ИспользоватьОбмен = НастройкиОбмена.ИспользоватьОбмен;
	
	Если ИспользоватьОбмен Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ОтправкиФСС.ОтчетСсылка,
		               |	МАКСИМУМ(ОтправкиФСС.ДатаОтправки) КАК ДатаОтправки
		               |ПОМЕСТИТЬ МаксимальныеДатыНезавершенныхОтправок
		               |ИЗ
		               |	Справочник.ОтправкиФСС КАК ОтправкиФСС
		               |ГДЕ
		               |	ОтправкиФСС.ПометкаУдаления = ЛОЖЬ
		               |	И ОтправкиФСС.Организация = &Организация
		               |	И ОтправкиФСС.СтатусОтправки = &СтатусОтправки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОтправкиФСС.ОтчетСсылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ОтправкиФСС.Ссылка
		               |ИЗ
		               |	МаксимальныеДатыНезавершенныхОтправок КАК МаксимальныеДатыНезавершенныхОтправок
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтправкиФСС КАК ОтправкиФСС
		               |		ПО МаксимальныеДатыНезавершенныхОтправок.ОтчетСсылка = ОтправкиФСС.ОтчетСсылка
		               |			И МаксимальныеДатыНезавершенныхОтправок.ДатаОтправки = ОтправкиФСС.ДатаОтправки
		               |ГДЕ
		               |	ОтправкиФСС.ПометкаУдаления = ЛОЖЬ
					   |	И ОтправкиФСС.ОтчетСсылка.ПометкаУдаления = ЛОЖЬ
		               |	И ОтправкиФСС.Организация = &Организация
		               |	И ОтправкиФСС.СтатусОтправки = &СтатусОтправки";
					   
		Запрос.Параметры.Вставить("Организация", 	Организация);
		Запрос.Параметры.Вставить("СтатусОтправки", Перечисления.СтатусыОтправки.Отправлен);
		
		ТаблицаОтправок = Запрос.Выполнить().Выгрузить();
		Отправки = ТаблицаОтправок.ВыгрузитьКолонку("Ссылка");
	Иначе
		Отправки = Новый Массив;
	КонецЕсли;
	
	Возврат Отправки;

КонецФункции

Функция НезавершенныеПоследниеОтправкиФСРАРПоОрганизации(Организация) Экспорт
	
	НастройкиОбмена = ДокументооборотСКОВызовСервера.ПолучитьНастройкиФСРАР(Организация);
	ИспользоватьОбмен = НастройкиОбмена.ИспользоватьОбмен;

	Если ИспользоватьОбмен Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ОтправкиФСРАР.ОтчетСсылка,
		               |	МАКСИМУМ(ОтправкиФСРАР.ДатаОтправки) КАК ДатаОтправки
		               |ПОМЕСТИТЬ МаксимальныеДатыНезавершенныхОтправок
		               |ИЗ
		               |	Справочник.ОтправкиФСРАР КАК ОтправкиФСРАР
		               |ГДЕ
		               |	ОтправкиФСРАР.ПометкаУдаления = ЛОЖЬ
		               |	И ОтправкиФСРАР.Организация = &Организация
		               |	И ОтправкиФСРАР.СхемаСдачиОтчетности В(&СхемыСдачиОтчетности)
		               |	И ОтправкиФСРАР.СтатусОтправки = &СтатусОтправки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОтправкиФСРАР.ОтчетСсылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ОтправкиФСРАР.Ссылка
		               |ИЗ
		               |	МаксимальныеДатыНезавершенныхОтправок КАК МаксимальныеДатыНезавершенныхОтправок
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтправкиФСРАР КАК ОтправкиФСРАР
		               |		ПО МаксимальныеДатыНезавершенныхОтправок.ОтчетСсылка = ОтправкиФСРАР.ОтчетСсылка
		               |			И МаксимальныеДатыНезавершенныхОтправок.ДатаОтправки = ОтправкиФСРАР.ДатаОтправки
		               |ГДЕ
		               |	ОтправкиФСРАР.ПометкаУдаления = ЛОЖЬ
		               |	И ОтправкиФСРАР.Организация = &Организация
					   |	И ОтправкиФСРАР.ОтчетСсылка.ПометкаУдаления = ЛОЖЬ
		               |	И ОтправкиФСРАР.СхемаСдачиОтчетности В(&СхемыСдачиОтчетности)
		               |	И ОтправкиФСРАР.СтатусОтправки = &СтатусОтправки";
					   
		Запрос.Параметры.Вставить("Организация", 	Организация);
		Запрос.Параметры.Вставить("СтатусОтправки", Перечисления.СтатусыОтправки.Отправлен);
		
		СхемыСдачиОтчетности = Новый Массив;
		СхемыСдачиОтчетности.Добавить(Перечисления.СхемыСдачиОтчетностиФСРАР.ОбщийРегиональныйИФедеральныйСервер);
		СхемыСдачиОтчетности.Добавить(Перечисления.СхемыСдачиОтчетностиФСРАР.ФедеральныйСервер);
		Запрос.Параметры.Вставить("СхемыСдачиОтчетности", СхемыСдачиОтчетности);
		
		ТаблицаОтправок = Запрос.Выполнить().Выгрузить();
		Отправки = ТаблицаОтправок.ВыгрузитьКолонку("Ссылка");
	Иначе
		Отправки = Новый Массив;
	КонецЕсли;
	
	Возврат Отправки;

КонецФункции

Функция НезавершенныеПоследниеОтправкиРПНПоОрганизации(Организация) Экспорт
	
	НастройкиОбмена = ДокументооборотСКОВызовСервера.ПолучитьНастройкиРПН(Организация);
	ИспользоватьОбмен = НастройкиОбмена.ИспользоватьОбмен;

	Если ИспользоватьОбмен Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ОтправкиРПН.ОтчетСсылка,
		               |	МАКСИМУМ(ОтправкиРПН.ДатаОтправки) КАК ДатаОтправки
		               |ПОМЕСТИТЬ МаксимальныеДатыНезавершенныхОтправок
		               |ИЗ
		               |	Справочник.ОтправкиРПН КАК ОтправкиРПН
		               |ГДЕ
		               |	ОтправкиРПН.ПометкаУдаления = ЛОЖЬ
		               |	И ОтправкиРПН.Организация = &Организация
		               |	И ОтправкиРПН.СтатусОтправки = &СтатусОтправки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОтправкиРПН.ОтчетСсылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ОтправкиРПН.Ссылка
		               |ИЗ
		               |	МаксимальныеДатыНезавершенныхОтправок КАК МаксимальныеДатыНезавершенныхОтправок
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтправкиРПН КАК ОтправкиРПН
		               |		ПО МаксимальныеДатыНезавершенныхОтправок.ОтчетСсылка = ОтправкиРПН.ОтчетСсылка
		               |			И МаксимальныеДатыНезавершенныхОтправок.ДатаОтправки = ОтправкиРПН.ДатаОтправки
		               |ГДЕ
		               |	ОтправкиРПН.ПометкаУдаления = ЛОЖЬ
					   |	И ОтправкиРПН.ОтчетСсылка.ПометкаУдаления = ЛОЖЬ
		               |	И ОтправкиРПН.Организация = &Организация
		               |	И ОтправкиРПН.СтатусОтправки = &СтатусОтправки";
		
		Запрос.Параметры.Вставить("Организация", 	Организация);
		Запрос.Параметры.Вставить("СтатусОтправки", Перечисления.СтатусыОтправки.Отправлен);
		
		ТаблицаОтправок = Запрос.Выполнить().Выгрузить();
		Отправки = ТаблицаОтправок.ВыгрузитьКолонку("Ссылка");
	Иначе
		Отправки = Новый Массив;
	КонецЕсли;
	
	Возврат Отправки;

КонецФункции

Функция ПредставлениеОтчета(СсылкаНаОтчет) Экспорт
	
	СведенияОбОтчете = СведенияПоОтправляемымОбъектам(СсылкаНаОтчет);
	
	Результат = Строка(СведенияОбОтчете.Наименование);
	
	Если ЗначениеЗаполнено(СведенияОбОтчете.ПредставлениеПериода) Тогда
		ПредставлениеПериодаОтчета = Строка(СведенияОбОтчете.ПредставлениеПериода);
		
		Результат = СтрШаблон(
			НСтр("ru = '%1 за %2'"),
			Результат,
			ПредставлениеПериодаОтчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбОтчете.ВариантОтчета) Тогда
		Если СведенияОбОтчете.ВариантОтчета = "П" Тогда
			Результат = СтрШаблон(
				НСтр("ru = '%1 (первичный)'"),
				Результат);
			
		ИначеЕсли Лев(СведенияОбОтчете.ВариантОтчета, 2) = "К/" Тогда
			НомерКорректировки = Сред(СведенияОбОтчете.ВариантОтчета, 3);
			
			Результат = СтрШаблон(
				НСтр("ru = '%1 (корректирующий / %2)'"),
				Результат,
				НомерКорректировки);
		КонецЕсли;
	КонецЕсли;
	
	Результат = ?(НЕ ЗначениеЗаполнено(Результат), Строка(СсылкаНаОтчет), Результат);
	
	Возврат Результат;
	
КонецФункции

Функция НаименованиеЕГРЮЛ_ЕГРИП(Объект) Экспорт
	
	Ссылка = Объект.Ссылка;
	
	// Наименование вида "Выписка по ИНН 980000000000, Иванов Иван"
	Наименование =НСтр("ru = 'Выписка по %1 %2%3%4'");
	Если Ссылка.ВидПараметраЗапроса = Перечисления.ВидыПараметровЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП.ИНН Тогда
		Наименование = СтрЗаменить(Наименование, "%1", "ИНН");
	ИначеЕсли Ссылка.ВидПараметраЗапроса = Перечисления.ВидыПараметровЗапросаНаВыпискуИзЕГРЮЛ_ЕГРИП.ОГРН Тогда
		Наименование = СтрЗаменить(Наименование, "%1", "ОГРН");
	Иначе
		Наименование = НСтр("ru = 'Выписка из ЕГРЮЛ/ЕГРИП'");
	КонецЕсли;
	Наименование = СтрЗаменить(Наименование, "%2", Строка(Ссылка.ПараметрЗапроса));
	
	Если ЗначениеЗаполнено(Ссылка.Контрагент) Тогда
		Наименование = СтрЗаменить(Наименование, "%3", ", ");
		Наименование = СтрЗаменить(Наименование, "%4", Ссылка.Контрагент.Наименование);
	Иначе
		
		ИННиНаименование = ИННиНаименованиеОрганизации(Ссылка.Организация);
		
		Если ИННиНаименование.ИНН = Строка(Ссылка.ПараметрЗапроса) Тогда
			Наименование = СтрЗаменить(Наименование, "%3", ", ");
			Наименование = СтрЗаменить(Наименование, "%4", ИННиНаименование.Наименование);
		Иначе
			Наименование = СтрЗаменить(Наименование, "%3", "");
			Наименование = СтрЗаменить(Наименование, "%4", "");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

Функция НезавершенныеПоследниеОтправкиФТСПоОрганизации(Организация, НастройкиОбмена = Неопределено) Экспорт
	
	НастройкиОбмена = ДокументооборотСКОВызовСервера.ПолучитьНастройкиФТС(Организация);
	ИспользоватьОбмен = НастройкиОбмена.ИспользоватьОбмен;
	
	Если ИспользоватьОбмен Тогда
		// После сдачи статформы в ФТС возможна постановка ее на контроль, ожидаем этого к течение года
		МинимальнаяДатаОтправкиСданныхТребующихОбновления = ДобавитьМесяц(ТекущаяДатаСеанса(), -6);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ОтправкиФТС.ОтчетСсылка,
		               |	МАКСИМУМ(ОтправкиФТС.ДатаОтправки) КАК ДатаОтправки
		               |ПОМЕСТИТЬ МаксимальныеДатыНезавершенныхОтправок
		               |ИЗ
		               |	Справочник.ОтправкиФТС КАК ОтправкиФТС
		               |ГДЕ
		               |	ОтправкиФТС.ПометкаУдаления = ЛОЖЬ
		               |	И ОтправкиФТС.Организация = &Организация
		               |	И (ОтправкиФТС.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Отправлен)
		               |	ИЛИ ((ОтправкиФТС.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Сдан)
		               |		ИЛИ ОтправкиФТС.НаКонтроле)
		               |		И ОтправкиФТС.ДатаОтправки >= &МинимальнаяДатаОтправкиСданныхТребующихОбновления))
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОтправкиФТС.ОтчетСсылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ОтправкиФТС.Ссылка
		               |ИЗ
		               |	МаксимальныеДатыНезавершенныхОтправок КАК МаксимальныеДатыНезавершенныхОтправок
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтправкиФТС КАК ОтправкиФТС
		               |		ПО МаксимальныеДатыНезавершенныхОтправок.ОтчетСсылка = ОтправкиФТС.ОтчетСсылка
		               |			И МаксимальныеДатыНезавершенныхОтправок.ДатаОтправки = ОтправкиФТС.ДатаОтправки
		               |ГДЕ
		               |	ОтправкиФТС.ПометкаУдаления = ЛОЖЬ
		               |	И ОтправкиФТС.Организация = &Организация
					   |	И ОтправкиФТС.ОтчетСсылка.ПометкаУдаления = ЛОЖЬ
		               |	И (ОтправкиФТС.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Отправлен)
		               |	ИЛИ ((ОтправкиФТС.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Сдан)
		               |		ИЛИ ОтправкиФТС.НаКонтроле)
		               |		И ОтправкиФТС.ДатаОтправки >= &МинимальнаяДатаОтправкиСданныхТребующихОбновления))";
		
		Запрос.Параметры.Вставить("Организация", 										Организация);
		Запрос.Параметры.Вставить("МинимальнаяДатаОтправкиСданныхТребующихОбновления", 	МинимальнаяДатаОтправкиСданныхТребующихОбновления);
		
		ТаблицаОтправок = Запрос.Выполнить().Выгрузить();
		Отправки = ТаблицаОтправок.ВыгрузитьКолонку("Ссылка");
	Иначе
		Отправки = Новый Массив;
	КонецЕсли;
	
	Возврат Отправки;
	
КонецФункции

Функция ИННиНаименованиеОрганизации(Организация)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИНН", 		 "");
	ДополнительныеПараметры.Вставить("Наименование", "");

	Если ЗначениеЗаполнено(Организация) Тогда
		ЭтоИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
		Если ЭтоИП Тогда
			
			Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "НаимЮЛСокр, ИННФЛ");
			
			ДополнительныеПараметры.Вставить("ИНН", 		 СокрЛП(Сведения.ИННФЛ));
			ДополнительныеПараметры.Вставить("Наименование", Сведения.НаимЮЛСокр);
			
		Иначе
			
			Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "НаимЮЛСокр, ИННЮЛ");
			
			ДополнительныеПараметры.Вставить("ИНН", 		 СокрЛП(Сведения.ИННЮЛ));
			ДополнительныеПараметры.Вставить("Наименование", Сведения.НаимЮЛСокр);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;

КонецФункции

#Область ПечатьСертификата

Процедура ПечатьСертификатаНаСервере(ТабличныйДокумент, Сертификат) Экспорт
	
	Макет = ПолучитьМакетОбработки("ПечатьСертификат");
	
	СвойстваСертификата = ПолучитьСвойстваСертификатаДляПечати(Сертификат);
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(СвойстваСертификата);
	
	ТабличныйДокумент.Вывести(Область);
	
	Если СвойстваСертификата.ТипВладельца = "ЮридическоеЛицо" Тогда
		Область = Макет.ПолучитьОбласть("СведенияОВладельцеЮР");
	Иначе
		Область = Макет.ПолучитьОбласть("СведенияОВладельцеФЛ");
	КонецЕсли;
	Область.Параметры.Заполнить(СвойстваСертификата);
	
	ТабличныйДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.Заполнить(СвойстваСертификата);
	
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

Функция ПолучитьСвойстваСертификатаДляПечати(Сертификат)
	
	РасширенныеСвойства = ПолучитьРасширенныеСвойстваСертификата(Сертификат);
	
	СертификатКриптографии = Новый СертификатКриптографии(Сертификат);
	
	СвойстваСертификата = РасширенныеСвойства;
	СвойстваСертификата.Вставить("СерийныйНомер", СертификатКриптографии.СерийныйНомер);
	ПериодДействия = СтрШаблон(
		НСтр("ru = '%1 по %2'"), 
		Формат(СертификатКриптографии.ДатаНачала, "ДФ='dd MMMM yyyy ''г.'' H:mm:ss'"),
		Формат(СертификатКриптографии.ДатаОкончания, "ДФ='dd MMMM yyyy ''г.'' H:mm:ss'"));
	СвойстваСертификата.Вставить("ПериодДействия", ПериодДействия);
	
	Если СертификатКриптографии.Субъект.Свойство("OID1_2_643_100_3") Тогда 
		СвойстваСертификата.Вставить("СНИЛС", СертификатКриптографии.Субъект.OID1_2_643_100_3);
	КонецЕсли;
	
	Если Лев(СертификатКриптографии.Субъект.OID1_2_643_3_131_1_1, 2) = "00" Тогда
		СвойстваСертификата.Вставить("ТипВладельца", "ЮридическоеЛицо");
		СвойстваСертификата.Вставить("Наименование", СертификатКриптографии.Субъект.CN);
		СвойстваСертификата.Вставить("ОГРН", СертификатКриптографии.Субъект.OID1_2_643_100_1);
		СвойстваСертификата.Вставить("ИНН", СертификатКриптографии.Субъект.OID1_2_643_3_131_1_1);
		
		Адрес = СтрШаблон("%1, %2, %3, %4",
			СертификатКриптографии.Субъект.OID2_5_4_6,
			СертификатКриптографии.Субъект.OID2_5_4_8,
			СертификатКриптографии.Субъект.OID2_5_4_7,
			СертификатКриптографии.Субъект.OID2_5_4_9);
		СвойстваСертификата.Вставить("Адрес", Адрес);
		СвойстваСертификата.Вставить("Фамилия", СертификатКриптографии.Субъект.OID2_5_4_4);
		СвойстваСертификата.Вставить("ИмяОтчество", СертификатКриптографии.Субъект.OID2_5_4_42);
		СвойстваСертификата.Вставить("Должность", СертификатКриптографии.Субъект.OID2_5_4_12);
		
		Владелец = СертификатКриптографии.Субъект.OID2_5_4_4 + " " + СертификатКриптографии.Субъект.OID2_5_4_42;
	Иначе
		СвойстваСертификата.Вставить("ТипВладельца", "ФизическоеЛицо");
		СвойстваСертификата.Вставить("ФИО", СертификатКриптографии.Субъект.CN);

		Владелец = СертификатКриптографии.Субъект.CN;
	КонецЕсли;
	СвойстваСертификата.Вставить("ОткрытыйКлюч", СертификатКриптографии.ОткрытыйКлюч);
	
	СвойстваСертификата.Вставить("НаименованиеУЦ", СертификатКриптографии.Издатель.CN);
	Адрес = СтрШаблон("%1, %2, %3, %4",
			СертификатКриптографии.Издатель.OID2_5_4_6,
			СертификатКриптографии.Издатель.OID2_5_4_8,
			СертификатКриптографии.Издатель.OID2_5_4_7,
			СертификатКриптографии.Издатель.OID2_5_4_9);
	СвойстваСертификата.Вставить("АдресУЦ", Адрес);
				
	
	СвойстваСертификата.Вставить("Владелец", Владелец);
	
	Возврат СвойстваСертификата;
	
КонецФункции

Функция НайтиСигнатуру(Байты, Сигнатура, Позиция)
	
	НачалаСигнатуры = -1;
	СигнатураНайдена = Ложь;
	Для Индекс = Позиция + 1 По Байты.ВГраница() Цикл
		Байт = Байты[Индекс];
		Если Байт = Сигнатура[0] Тогда
			СигнатураНайдена = Истина;
			Для Индекс2 = 1 По Сигнатура.Количество() - 1 Цикл
				Если Байты[Индекс2 + Индекс] <> Сигнатура[Индекс2] Тогда
					СигнатураНайдена = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СигнатураНайдена Тогда
				НачалаСигнатуры = Индекс;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НачалаСигнатуры;
	
КонецФункции

Функция ПолучитьРасширенныеСвойстваСертификата(Сертификат)
	
	РасширенныеСвойства = Новый Структура;
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	Сертификат.Записать(ИмяФайла);
	
	Байты = ПрочитатьФайлВМассив(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	
	Сигнатура = Новый Массив; // Ищем OID 1.2.643.100.111
	Сигнатура.Добавить(6);
	Сигнатура.Добавить(5);
	Сигнатура.Добавить(42);
	Сигнатура.Добавить(133);
	Сигнатура.Добавить(3);
	Сигнатура.Добавить(100);
	Сигнатура.Добавить(111);
	
	Позиция = 0;
	НачалоСигнатуры = НайтиСигнатуру(Байты, Сигнатура, Позиция);
	
	Если НачалоСигнатуры <> -1 Тогда
		Позиция = НачалоСигнатуры + Сигнатура.Количество();
		Размер = ПрочитатьРазмер(Байты, Позиция); // OCTET STRING	
		Позиция = Позиция + 1; // сдвиг сразу к UTF8String
		Размер = ПрочитатьРазмер(Байты, Позиция); // OCTET STRING
		Строка = ПрочитатьСтроку(Байты, Позиция, Размер);
		
		РасширенныеСвойства.Вставить("СКЗИ", Строка);
	КонецЕсли;
	
	Сигнатура = Новый Массив; // Ищем OID 1.2.643.100.112
	Сигнатура.Добавить(6);
	Сигнатура.Добавить(5);
	Сигнатура.Добавить(42);
	Сигнатура.Добавить(133);
	Сигнатура.Добавить(3);
	Сигнатура.Добавить(100);
	Сигнатура.Добавить(112);
	
	НачалоСигнатуры = НайтиСигнатуру(Байты, Сигнатура, Позиция);	
		
	Если НачалоСигнатуры <> -1 Тогда
		Позиция = НачалоСигнатуры + Сигнатура.Количество();
		//Позиция = Позиция + 1;
		Размер = ПрочитатьРазмер(Байты, Позиция); // OCTET STRING	
		Позиция = Позиция + 1; // сдвиг сразу к UTF8String
		Размер = ПрочитатьРазмер(Байты, Позиция); // OCTET STRING
		Позиция = Позиция + 1;
		Размер = ПрочитатьРазмер(Байты, Позиция); // OCTET STRING
		Строка = ПрочитатьСтроку(Байты, Позиция, Размер);
		РасширенныеСвойства.Вставить("СКЗИ", Строка);
		
		Позиция = Позиция + 1;
		Размер = ПрочитатьРазмер(Байты, Позиция); // OCTET STRING
		Строка = ПрочитатьСтроку(Байты, Позиция, Размер);
		РасширенныеСвойства.Вставить("СКЗИ_УЦ", Строка);

		
		Позиция = Позиция + 1;
		Размер = ПрочитатьРазмер(Байты, Позиция); // OCTET STRING
		Строка = ПрочитатьСтроку(Байты, Позиция, Размер);
		РасширенныеСвойства.Вставить("Заключение", Строка);
		
		Позиция = Позиция + 1;
		Размер = ПрочитатьРазмер(Байты, Позиция); // OCTET STRING
		Строка = ПрочитатьСтроку(Байты, Позиция, Размер);
		РасширенныеСвойства.Вставить("ЗаключениеУЦ", Строка);
	КонецЕсли;
	
	РасширенныеСвойства.Вставить("КлассУЦ", "КС2");

	
	Сигнатура = Новый Массив; // Ищем 1.2.643.2.2.3
	Сигнатура.Добавить(6);
	Сигнатура.Добавить(6);
	Сигнатура.Добавить(42);
	Сигнатура.Добавить(133);
	Сигнатура.Добавить(3);
	Сигнатура.Добавить(2);
	Сигнатура.Добавить(2);
	Сигнатура.Добавить(3);
	
	НачалоСигнатуры = НайтиСигнатуру(Байты, Сигнатура, Позиция);	
		
	Если НачалоСигнатуры <> -1 Тогда
		Позиция = НачалоСигнатуры + Сигнатура.Количество();
		Пока Байты[Позиция] <> 3 Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		Размер = ПрочитатьРазмер(Байты, Позиция); // OCTET STRING	
		Позиция = Позиция + 1; // сдвиг сразу к BIT STRING
		
		Подпись = Новый Массив;
		Для Индекс = 1 По Размер - 1 Цикл
			Позиция = Позиция + 1;
			Байт = Байты[Позиция];
			Подпись.Вставить(0, Байт);
		КонецЦикла;
		
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ЗаписатьФайлИзМассива(ИмяФайла, Подпись);
		
		Подпись = Новый ДвоичныеДанные(ИмяФайла);
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
	
	РасширенныеСвойства.Вставить("Алгоритм", "ГОСТ Р 34.10-2001");
	РасширенныеСвойства.Вставить("Класс", "Класс средства ЭП КС1;Класс средства ЭП КС2;");
	РасширенныеСвойства.Вставить("ОбластьИспользования", "Цифровая подпись, Неотрекаемость, Шифрование ключей, Шифрование данных");
	РасширенныеСвойства.Вставить("Подпись", Подпись);
	
	Возврат РасширенныеСвойства;
	
КонецФункции

Функция ПрочитатьРазмер(Байты, Позиция)
	
	Позиция = Позиция + 1;
	Байт = Байты[Позиция];
	БитоваяСтрока = ЧислоВСтрокуБитов(Байт);
	Если Сред(БитоваяСтрока, 1, 1) = "1" Тогда
		КоличествоБайт = СтрокаБитовВЧисло(Прав(БитоваяСтрока, 7));
		Размер = ПрочитатьЦелоеЧисло(Байты, Позиция, КоличествоБайт);
	Иначе
		Размер = Байт;		
	КонецЕсли;
	
	Возврат Размер;
	
КонецФункции

Функция ПрочитатьЦелоеЧисло(Байты, Позиция, КоличествоБайт)
	
	БитоваяСтрокаДлиныБлока = "";
	Для Индекс = 1 По КоличествоБайт Цикл
		Позиция = Позиция + 1;
		Байт = Байты[Позиция];
		БитоваяСтрокаДлиныБлока = БитоваяСтрокаДлиныБлока + ЧислоВСтрокуБитов(Байт);
	КонецЦикла;
	
	Возврат СтрокаБитовВЧисло(БитоваяСтрокаДлиныБлока);
	
КонецФункции

Функция ПрочитатьСтроку(Байты, Позиция, КоличествоБайт)
	
	БайтыДляЗаписи = Новый Массив;
	Для Индекс = 1 По КоличествоБайт Цикл
		Позиция = Позиция + 1;
		Байт = Байты[Позиция];
		БайтыДляЗаписи.Добавить(Байт);
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("txt");
	ЗаписатьФайлИзМассива(ИмяФайла, БайтыДляЗаписи);
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, "utf-8");
	Строка = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	УдалитьФайлы(ИмяФайла);
	
	Возврат Строка;
	
КонецФункции

// Переводит заданное десятичное число в соответствующую строку битов.
//
// Параметры:
// ИсходноеЧисло - Число - 10-тичное.
//
// Возвращаемое значение:
// Строка - последовательность битов, соответствующая заданному числу.
//
Функция ЧислоВСтрокуБитов(Знач ИсходноеЧисло) Экспорт

	ИсходноеЧисло = Цел(?(ИсходноеЧисло < 0, - ИсходноеЧисло, ИсходноеЧисло));
	Если ИсходноеЧисло = 0 Тогда
		Возврат "00000000";
	КонецЕсли;
	
	СтрокаБитов = "";
	
	Пока ИсходноеЧисло > 0 Цикл
		ЗначениеМладшегоБита = ИсходноеЧисло % 2;
		СтрокаБитов = Строка(ЗначениеМладшегоБита) + СтрокаБитов;
		ИсходноеЧисло = (ИсходноеЧисло - ЗначениеМладшегоБита) / 2;
	КонецЦикла;
	
	Префикс = "";
	Для Индекс = 1 По 8 - СтрДлина(СтрокаБитов) Цикл
		Префикс = Префикс + "0";
	КонецЦикла;
	
    Возврат Префикс + СтрокаБитов;
	
КонецФункции

// Переводит строку битов в соответствующее десятичное число.
//
// Параметры:
// СтрокаБитов - Строка.
//
// Возвращаемое значение:
// Число.
//
Функция СтрокаБитовВЧисло(Знач СтрокаБитов) Экспорт

	СтрокаБитов = СокрЛП(СтрокаБитов);
	ДлинаСтроки = СтрДлина(СтрокаБитов);
	Если ДлинаСтроки = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не СтрокаСодержитТолькоДопустимыеСимволы(СтрокаБитов, "01") Тогда
		ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""%1"" не является последовательностью битов'"), СтрокаБитов));
	КонецЕсли;	
	
	Число = 0;
	
	Для Индекс = 1 По ДлинаСтроки Цикл
		СимволЦифры = Сред(СтрокаБитов, Индекс, 1);
		Число = Число * 2 + Число(СимволЦифры)
	КонецЦикла;
	
    Возврат Число;
	
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(Знач ИсходнаяСтрока, Знач ДопустимыеСимволы)
	
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	Если ДлинаСтроки = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
   	Для Индекс = 1 По ДлинаСтроки Цикл 
    	ТекущийСимвол = Сред(ИсходнаяСтрока, Индекс, 1); 
	   	Если Найти(ДопустимыеСимволы, ТекущийСимвол) = 0 Тогда
		    Возврат Ложь;
	    КонецЕсли;
	КонецЦикла; 
	
   	Возврат Истина;
	
КонецФункции

#КонецОбласти

Функция ИмяФайлаЭПФайлаОписиИсходящихДокументов(Знач ИмяФайла) Экспорт
	
	ИмяФайлаБезРасширения = Сред(ИмяФайла, 1, СтрДлина(ИмяФайла) - 4);
	
	// ПРИКАЗ от 28 ноября 2016 г. N ММВ-7-6/643@
	//Имя файла ЭП имеет следующий вид:
	//ИмяФайл_XXX_N.sgn, где:
	//ИмяФайл - имя файла, представляемого в налоговый орган документа в соответствии с утвержденным форматом для данного документа, без расширения и точки;
	//XXX - постфикс файла ЭП, принимающий значение "SGN";
	//N - идентификационный номер файла (GUID);

	GUID 		= ВРЕГ(Строка(Новый УникальныйИдентификатор));
	Результат 	= ИмяФайлаБезРасширения + "_SGN_" + GUID + ".sgn";
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьИдентификаторАдресаФИАС(ПараметрыЗапуска) Экспорт
	
	Попытка
	
		Параметры = Новый Массив;
		Параметры.Добавить(ПараметрыЗапуска);
		
		ФоновыеЗадания.Выполнить(
			"ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьИдентификаторАдресаФИАСФоновоеЗадание", 
			Параметры, 
			, 
			НСтр("ru = 'Получение идентификаторов адресов ФИАС'"));
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Запуск получения идентификаторов адресов мастера по 1С-Отчетности'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
		ИнформацияОбОшибке = ИнформацияОбОшибке();
			
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	КонецПопытки;
	
КонецПроцедуры

Процедура ПолучитьИдентификаторАдресаФИАСФоновоеЗадание(Параметры) Экспорт
	
	АдресЮридическийЗначение = Параметры.АдресЮридическийЗначение;
	АдресФактическийЗначение = Параметры.АдресФактическийЗначение;
	АдресХранилища			 = Параметры.АдресХранилища;
	
	Попытка
				
		ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресЮридическийЗначение);
		Если ЭтоАдресПоФИАСу Тогда
			Идентификатор = АдресныйКлассификатор.КодыАдреса(АдресЮридическийЗначение).Идентификатор; 
		Иначе
			Идентификатор = "";
		КонецЕсли;
		Параметры.Вставить("АдресЮридическийИдентификаторПоФИАС", Идентификатор);
		
		ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресФактическийЗначение);
		Если ЭтоАдресПоФИАСу Тогда
			Идентификатор = АдресныйКлассификатор.КодыАдреса(АдресФактическийЗначение).Идентификатор;
		Иначе
			Идентификатор = "";
		КонецЕсли;
		Параметры.Вставить("АдресФактическийИдентификаторПоФИАС", Идентификатор);
		
		ПоместитьВоВременноеХранилище(Параметры, АдресХранилища);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Получение идентификатор адресов мастера по 1С-Отчетности'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		ПоместитьВоВременноеХранилище(Неопределено, АдресХранилища);
	
	КонецПопытки;
	
КонецПроцедуры

#Область ДиагностикаОтчетности_ОбщегоНазначения

&НаСервере
Функция ВЧисло(Знач Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда 
		Возврат Значение;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("Неопределено") Тогда 
		Возврат 0;
	КонецЕсли;
	Значение = СтрЗаменить(Значение, " ", "");
	Значение = СтрЗаменить(Значение, " ", "");
	Значение = СтрЗаменить(Значение, ", ", ".");
	Попытка
		Значение = Число(Значение);
	Исключение
		Значение = 0;
	КонецПопытки;
	Возврат Значение;
	
КонецФункции

&НаСервере
Функция ПротоколПоПорту(Знач Порт) Экспорт
	
	Если Порт = Неопределено Тогда 
		Порт = 80;
	КонецЕсли;
	
	Порт = ВЧисло(Порт);
	Если Порт = 80 Тогда 
		Возврат "http://";
	ИначеЕсли Порт = 8090 Тогда 
		Возврат "http://";
	ИначеЕсли Порт = 443 Тогда 
		Возврат "https://";
	ИначеЕсли Порт = 110 Тогда 
		Возврат "pop3:";
	ИначеЕсли Порт = 995 Тогда 
		Возврат "pop3s:";
	ИначеЕсли Порт = 25 Тогда 
		Возврат "smtp:";
	ИначеЕсли Порт = 465 Тогда 
		Возврат "smtps:";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция ПолучитьURL(ПП) Экспорт
	
	URL = "";
	
	Если ПП.Свойство("Адрес") Тогда 
		URL = URL + ПП.Адрес;
		Если ПП.Порт <> Неопределено И ПП.Порт <> 80 И ПП.Порт <> 443 Тогда 
			URL = URL + ":" + ПП.Порт;
		КонецЕсли;
		Если ПП.Урл = Неопределено или ПП.Урл = "" Тогда 
			URL = URL + "/";
		Иначе
			URL = URL + ПП.Урл;
		КонецЕсли;			
		URL = ПротоколПоПорту(ПП.Порт) + URL;
	Иначе
		
		Если ПП.АдресPOP3="" Тогда 
			URL = URL + ПП.АдресSMTP;
			Если ПП.ПортSMTP <> Неопределено Тогда 
				URL = URL + ":" + ПП.ПортSMTP;
			КонецЕсли;
		ИначеЕсли ПП.АдресSMTP="" Тогда 
			URL = URL + ПП.АдресPOP3;
			Если ПП.ПортPOP3 <> Неопределено Тогда 
				URL = URL + ":" + ПП.ПортPOP3;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат URL;
	
КонецФункции

&НаСервере
Функция ПростоеСклонение(Знач Числ, Форма1, Форма2, Форма3) Экспорт
	
	Числ = ?(Числ < 0, -Числ, Числ) % 100;
	Числ1 = Числ % 10;
	Если (Числ > 10) И (Числ < 20) Тогда 
		Возврат Форма3;
	КонецЕсли;
	Если (Числ1 > 1) И (Числ1 < 5) Тогда 
		Возврат Форма2;
	КонецЕсли;
	Если (Числ1 = 1) Тогда 
		Возврат Форма1;
	КонецЕсли;
	
	Возврат Форма3;
	
КонецФункции

&НаСервере
Функция ИнтервалСтрокой(Знач Дата1, Знач Дата2) Экспорт
	
	Дата1 = НачалоДня(Дата1);
	Дата2 = НачалоДня(Дата2);
	Разница = (Дата2 - Дата1) / 86400;
	Если Разница = 0 Тогда 
		Возврат "сегодня";
	ИначеЕсли Разница = 1 Тогда 
		Возврат "завтра";
	ИначеЕсли Разница = -1 Тогда 
		Возврат "вчера";
	ИначеЕсли Разница = -2 Тогда 
		Возврат "позавчера";
	ИначеЕсли Разница = 2 Тогда 
		Возврат "послезавтра";
	ИначеЕсли Разница = 7 Тогда 
		Возврат "через неделю";
	ИначеЕсли Разница = -7 Тогда 
		Возврат "неделю назад";
	ИначеЕсли Разница > 0 Тогда 
		
		Строкой = "через %1 "+ПростоеСклонение(Разница, "день", "дня", "дней");
		Строкой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Строкой, Формат(Разница, "ЧДЦ=; ЧН=; ЧГ="));
		
		Возврат Строкой;
	ИначеЕсли Разница < 0 Тогда 
		
		Строкой = "%1 "+ПростоеСклонение(Разница, "день", "дня", "дней")+" назад";
		Строкой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Строкой, Формат(-Разница, "ЧДЦ=; ЧН=; ЧГ="));
		
		Возврат Строкой;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОберткаСклонения(Что, Склонение)
	
	МодульСклонения = ОбщегоНазначения.ОбщийМодуль("СклонениеПредставленийОбъектов");
	
	Если МодульСклонения = Неопределено Тогда
		Возврат Что;
	КонецЕсли;
		
	Попытка		
		Ответ = МодульСклонения.ПросклонятьФИО(Что, Склонение);		
	Исключение
		Ответ = Что;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции
	
&НаСервере
Процедура СклонятьВРп(Знач Вх0, Исх0, 
			Знач Вх1 = Неопределено, 
			Исх1 = Неопределено, 
			Знач Вх2 = Неопределено, 
			Исх2 = Неопределено, 
			Знач Вх3 = Неопределено, 
			Исх3 = Неопределено, Знач 
			Вх4 = Неопределено, 
			Исх4 = Неопределено, 
			Знач Вх5 = Неопределено, 
			Исх5 = Неопределено) Экспорт
	
	Исх0 = ОберткаСклонения(Вх0, 2);
	Если Вх1 <> Неопределено Тогда 
		Исх1 = ОберткаСклонения(Вх1, 2);
	КонецЕсли;
	Если Вх2 <> Неопределено Тогда 
		Исх2 = ОберткаСклонения(Вх2, 2);
	КонецЕсли;
	Если Вх3 <> Неопределено Тогда 
		Исх3 = ОберткаСклонения(Вх3, 2);
	КонецЕсли;
	Если Вх4 <> Неопределено Тогда 
		Исх4 = ОберткаСклонения(Вх4, 2);
	КонецЕсли;
	Если Вх5 <> Неопределено Тогда 
		Исх5 = ОберткаСклонения(Вх5, 2);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СклонятьВВп(Знач Вх0, Исх0, 
			Знач Вх1 = Неопределено, 
			Исх1 = Неопределено, 
			Знач Вх2 = Неопределено, 
			Исх2 = Неопределено, 
			Знач Вх3 = Неопределено, 
			Исх3 = Неопределено, 
			Знач Вх4 = Неопределено, 
			Исх4 = Неопределено, 
			Знач Вх5 = Неопределено, 
			Исх5 = Неопределено) Экспорт
	
	Исх0 = ОберткаСклонения(Вх0, 4);
	Если Вх1 <> Неопределено Тогда 
		Исх1 = ОберткаСклонения(Вх1, 4);
	КонецЕсли;
	Если Вх2 <> Неопределено Тогда 
		Исх2 = ОберткаСклонения(Вх2, 4);
	КонецЕсли;
	Если Вх3 <> Неопределено Тогда 
		Исх3 = ОберткаСклонения(Вх3, 4);
	КонецЕсли;
	Если Вх4 <> Неопределено Тогда 
		Исх4 = ОберткаСклонения(Вх4, 4);
	КонецЕсли;
	Если Вх5 <> Неопределено Тогда 
		Исх5 = ОберткаСклонения(Вх5, 4);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СклонятьВДп(Знач Вх0, Исх0, 
			Знач Вх1 = Неопределено, 
			Исх1 = Неопределено, 
			Знач Вх2 = Неопределено, 
			Исх2 = Неопределено, 
			Знач Вх3 = Неопределено, 
			Исх3 = Неопределено) Экспорт
	
	Исх0 = ОберткаСклонения(Вх0, 3);
	Если Вх1 <> Неопределено Тогда 
		Исх1 = ОберткаСклонения(Вх1, 3);
	КонецЕсли;
	Если Вх2 <> Неопределено Тогда 
		Исх2 = ОберткаСклонения(Вх2, 3);
	КонецЕсли;
	Если Вх3 <> Неопределено Тогда 
		Исх3 = ОберткаСклонения(Вх3, 3);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НормализованныеФИО(Знач Фамилия, Знач Имя = "", Знач Отчество = "") Экспорт
	
	Если ТипЗнч(Фамилия) = Тип("Структура") Тогда 
		Имя = Фамилия.Имя;
		Отчество = Фамилия.Отчество;	
		Фамилия = Фамилия.Фамилия;
	КонецЕсли;
	
	Фамилия = СтрЗаменить(Фамилия, "  ", " ");
	Имя = СтрЗаменить(Имя, "  ", " ");
	Отчество = СтрЗаменить(Отчество, "  ", " ");
	
	Возврат ТРег(СокрЛП(Фамилия) + ?(ЗначениеЗаполнено(Имя), " ", "") + СокрЛП(Имя) + ?(ЗначениеЗаполнено(Отчество), " ", "") + СокрЛП(Отчество));
	
КонецФункции

&НаСервере
Функция ТекущаяДатаСеансаКлиент(ЧасовойПояс = Неопределено) Экспорт
	
	ЧасовойПояс = ЧасовойПоясСеанса();
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаСервере
Функция НайтиКриптопровайдераПоИмени(Имя) Экспорт
	
	МодульКриптографии = ОбщегоНазначения.ОбщийМодуль("КриптографияЭДКОКлиентСервер");
	
	Если МодульКриптографии = Неопределено Тогда
		Возврат Имя;
	КонецЕсли;
	
	КП = "";
	
	Список = Новый СписокЗначений;
	КП = МодульКриптографии.КриптопровайдерViPNet();
	Список.Добавить(КП.Имя, КП.Представление, Истина);
	
	КП = МодульКриптографии.КриптопровайдерCryptoPro();
	Список.Добавить(КП.Имя, КП.Представление, Истина);
	
	КП = МодульКриптографии.КриптопровайдерSignalCOM();
	Список.Добавить(КП.Имя, КП.Представление);
	
	КП = МодульКриптографии.КриптопровайдерЛИССИ();
	Список.Добавить(КП.Имя, КП.Представление);
	
	Результат = Список.НайтиПоЗначению(Имя);
	Если Результат = Неопределено Тогда 
		Возврат Имя; //
	КонецЕсли;	
	
	Возврат Результат.Представление;
	
КонецФункции

#КонецОбласти

#Область АрхивацияДО_ОбщегоНазначения

Функция ОбъектВАрхиве(Знач ОбъектОтправки, Знач ИмяФайла = "") Экспорт
	
	ВидВладельцаМета2 = Неопределено;
	
	Если ТипЗнч(ОбъектОтправки) = Тип("СправочникСсылка.ОтправкиФТС")
		Или ТипЗнч(ОбъектОтправки) = Тип("СправочникОбъект.ОтправкиФТС") Тогда		
		ВидВладельцаМета = Перечисления.ВидыАрхивируемыхМетаданныхДО.ОтправкиФТС;
		
	ИначеЕсли ТипЗнч(ОбъектОтправки) = Тип("СправочникСсылка.ОтправкиРПН")
		Или ТипЗнч(ОбъектОтправки) = Тип("СправочникОбъект.ОтправкиРПН") Тогда		
		ВидВладельцаМета = Перечисления.ВидыАрхивируемыхМетаданныхДО.ОтправкиРПН;
		
	ИначеЕсли ТипЗнч(ОбъектОтправки) = Тип("СправочникСсылка.ОтправкиФСС")
		Или ТипЗнч(ОбъектОтправки) = Тип("СправочникОбъект.ОтправкиФСС") Тогда		
		ВидВладельцаМета = Перечисления.ВидыАрхивируемыхМетаданныхДО.ОтправкиФСС;
		
	ИначеЕсли ТипЗнч(ОбъектОтправки) = Тип("СправочникСсылка.ОтправкиФСРАР")
		Или ТипЗнч(ОбъектОтправки) = Тип("СправочникОбъект.ОтправкиФСРАР") Тогда		
		ВидВладельцаМета = Перечисления.ВидыАрхивируемыхМетаданныхДО.ОтправкиФСРАР;
		
	ИначеЕсли ТипЗнч(ОбъектОтправки) = Тип("СправочникСсылка.СканированныеДокументыДляПередачиВЭлектронномВиде")
		Или ТипЗнч(ОбъектОтправки) = Тип("СправочникОбъект.СканированныеДокументыДляПередачиВЭлектронномВиде") Тогда		
		ВидВладельцаМета = Перечисления.ВидыАрхивируемыхМетаданныхДО.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов;
		
	ИначеЕсли ТипЗнч(ОбъектОтправки) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов")
		Или ТипЗнч(ОбъектОтправки) = Тип("СправочникОбъект.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда		
		ВидВладельцаМета = Перечисления.ВидыАрхивируемыхМетаданныхДО.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов;
		
	ИначеЕсли ТипЗнч(ОбъектОтправки) = Тип("СправочникСсылка.ОписиВходящихДокументовИзНалоговыхОрганов")
		Или ТипЗнч(ОбъектОтправки) = Тип("СправочникОбъект.ОписиВходящихДокументовИзНалоговыхОрганов") Тогда		
		ВидВладельцаМета = Перечисления.ВидыАрхивируемыхМетаданныхДО.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов;
		
	ИначеЕсли ТипЗнч(ОбъектОтправки) = Тип("СправочникСсылка.ОписиИсходящихДокументовВНалоговыеОрганы")
		Или ТипЗнч(ОбъектОтправки) = Тип("СправочникОбъект.ОписиИсходящихДокументовВНалоговыеОрганы") Тогда		
		ВидВладельцаМета = Перечисления.ВидыАрхивируемыхМетаданныхДО.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов;
		
	ИначеЕсли ТипЗнч(ОбъектОтправки) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов")
		Или ТипЗнч(ОбъектОтправки) = Тип("СправочникОбъект.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда		
		ВидВладельцаМета = Перечисления.ВидыАрхивируемыхМетаданныхДО.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов;
		
	ИначеЕсли ТипЗнч(ОбъектОтправки) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами")
		Или ТипЗнч(ОбъектОтправки) = Тип("СправочникОбъект.ПерепискаСКонтролирующимиОрганами") Тогда		
		ВидВладельцаМета = Перечисления.ВидыАрхивируемыхМетаданныхДО.ВложенияНеформализованныхДокументов;
		
	ИначеЕсли ТипЗнч(ОбъектОтправки) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя")
		Или ТипЗнч(ОбъектОтправки) = Тип("ДокументОбъект.ЗапросНаИнформационноеОбслуживаниеСтрахователя") Тогда		
		ВидВладельцаМета = Перечисления.ВидыАрхивируемыхМетаданныхДО.ОтветыНаЗапросыИОС;
		
	ИначеЕсли ТипЗнч(ОбъектОтправки) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика")
		Или ТипЗнч(ОбъектОтправки) = Тип("ДокументОбъект.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда		
		ВидВладельцаМета = Перечисления.ВидыАрхивируемыхМетаданныхДО.ОтветыНаЗапросыИОН;
		
	ИначеЕсли ТипЗнч(ОбъектОтправки) = Тип("ДокументСсылка.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП")
		Или ТипЗнч(ОбъектОтправки) = Тип("ДокументОбъект.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП") Тогда		
		ВидВладельцаМета = Перечисления.ВидыАрхивируемыхМетаданныхДО.ОтветыНаЗапросыВыпискиИзЕГРЮЛ_ЕГРИП;
		
	ИначеЕсли ТипЗнч(ОбъектОтправки) = Тип("ДокументСсылка.ТранспортноеСообщение")
		Или ТипЗнч(ОбъектОтправки) = Тип("ДокументОбъект.ТранспортноеСообщение") Тогда		
		ВидВладельцаМета = Перечисления.ВидыАрхивируемыхМетаданныхДО.ТранспортныеКонтейнеры;
		ВидВладельцаМета2 = Перечисления.ВидыАрхивируемыхМетаданныхДО.СодержимоеТранспортныхКонтейнеров;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	                      |	ПризнакиАрхивирования.Объект КАК Объект,
	                      |	ПризнакиАрхивирования.ИмяФайла КАК ИмяФайла,
	                      |	ПризнакиАрхивирования.Владелец КАК Владелец,
	                      |	ПризнакиАрхивирования.Архивный КАК Архивный
	                      |ИЗ
	                      |	РегистрСведений.ПризнакиАрхивированияФайловДОСКонтролирующимиОрганами КАК ПризнакиАрхивирования
	                      |ГДЕ
	                      |	ПризнакиАрхивирования.Объект = &Объект";
	
	Запрос.Параметры.Вставить("Объект", ОбъектОтправки.Ссылка);
	
	Если ИмяФайла <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ПризнакиАрхивирования.ИмяФайла = &ИмяФайла";
		Запрос.Параметры.Вставить("ИмяФайла", ИмяФайла);
	КонецЕсли;
	
	Если ВидВладельцаМета2 = Неопределено Тогда 		
		Запрос.Текст = Запрос.Текст + "
		|	И ПризнакиАрхивирования.Владелец = &Владелец";
		Запрос.Параметры.Вставить("Владелец", ВидВладельцаМета);
	Иначе
		ВидыВладельцев = Новый Массив;
		ВидыВладельцев.Добавить(ВидВладельцаМета);
		ВидыВладельцев.Добавить(ВидВладельцаМета2);	
		
		Запрос.Текст = Запрос.Текст + "
		|	И ПризнакиАрхивирования.Владелец в (&Владелец)";
		Запрос.Параметры.Вставить("Владелец", ВидыВладельцев);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ТабРезультат = Результат.Выгрузить();
	Для Каждого Запись Из ТабРезультат Цикл
		Если Запись.Архивный Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
			
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ЗаявлениеНаПереход

Процедура ПередВыгрузкойДанных(Контейнер) Экспорт
	
	ЗапомнитьМодельРаботыСКлючами(Истина);
	
КонецПроцедуры

Процедура ПослеВыгрузкиДанных(Контейнер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МодельРаботыСКлючамиПередВыгрузкой = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_МодельДанныхПередВыгрузкой");
	Константы.МодельРаботыСКлючамиПередВыгрузкой.Установить(МодельРаботыСКлючамиПередВыгрузкой);
	ХранилищеОбщихНастроек.Удалить("ДокументооборотСКонтролирующимиОрганами_МодельДанныхПередВыгрузкой", , Неопределено);
	
КонецПроцедуры

Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	ЗапомнитьМодельРаботыСКлючами(Ложь);
	
КонецПроцедуры

Процедура ЗапомнитьМодельРаботыСКлючами(ЭтоВыгрузка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьАктивныеУчетныеЗаписи = ЭлектронныйДокументооборотИспользуется();
	
	Если ЕстьАктивныеУчетныеЗаписи Тогда
		
		ТекущаяМодель = ТекущаяМодельРаботыСКлючами();
		
		Если ЭтоВыгрузка Тогда
			
			// Запоминаем предыдущую модель, чтобы потом восстановить исходное значение после выгрузки, 
			// чтобы выгрузка не повлияла на состояние выгружаемой базы.
			ХранилищеОбщихНастроек.Сохранить("ДокументооборотСКонтролирующимиОрганами_МодельДанныхПередВыгрузкой", , Константы.МодельРаботыСКлючамиПередВыгрузкой.Получить());
			Константы.МодельРаботыСКлючамиПередВыгрузкой.Установить(ТекущаяМодель);
			
		Иначе
			
			// Очищаем все "больше не показывать" и откладывания напоминаний по всем пользователям.
			// Делаем это при загрузке, потому что выгрузка может быть много раз и в этой базе признаки надо сохранить.
			ХранилищеОбщихНастроек.Удалить("ДокументооборотСКонтролирующимиОрганами_ДатыНапоминанийОПереходах", , Неопределено);
			
			Константы.ДатаЗагрузкиБазы.Установить(ТекущаяДатаСеанса());
			
			ОтметитьПослеЗагрузкиДанныхУчетныеЗаписиТребующиеПредупрежденияОбОшибках();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекущаяМодельРаботыСКлючами() Экспорт
	
	ДоступнаЭлектроннаяПодписьВМоделиСервиса = ЭлектроннаяПодписьВМоделиСервиса.ИспользованиеВозможно();
	Если ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
		ТекущаяМодель = Перечисления.МодельРаботыСКлючами.ВМоделиСервиса;
	Иначе
		ТекущаяМодель = Перечисления.МодельРаботыСКлючами.ТолькоЛокальныеКлючи;
	КонецЕсли;
	
	Возврат ТекущаяМодель;
	
КонецФункции

Процедура ОтметитьПослеЗагрузкиДанныхУчетныеЗаписиТребующиеПредупрежденияОбОшибках()
	
	БылВыполненПереход 	= БылВыполненПререходВДругуюМодельХраненияКлючей();
	
	Если НЕ БылВыполненПереход Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	Организации.УчетнаяЗаписьОбмена КАК УчетнаяЗапись,
	                      |	ВЫБОР
	                      |		КОГДА &ЭтоПереходВКоробку
	                      |					И Организации.УчетнаяЗаписьОбмена.ЭлектроннаяПодписьВМоделиСервиса
	                      |				ИЛИ &ЭтоПереходВОблако
	                      |					И НЕ Организации.УчетнаяЗаписьОбмена.ЭлектроннаяПодписьВМоделиСервиса
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК ЕстьОшибкиСменыМоделиХраненияКлючей
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	НЕ Организации.УчетнаяЗаписьОбмена.ПометкаУдаления
	                      |	И Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)
	                      |	И Организации.ПометкаУдаления = ЛОЖЬ");
	
	ТекущаяМодель 		= ТекущаяМодельРаботыСКлючами();
	ЭтоПереходВКоробку  = ТекущаяМодель = Перечисления.МодельРаботыСКлючами.ТолькоЛокальныеКлючи;
	
	Запрос.УстановитьПараметр("ЭтоПереходВКоробку", ЭтоПереходВКоробку);
	Запрос.УстановитьПараметр("ЭтоПереходВОблако",  НЕ ЭтоПереходВКоробку);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УчетнаяЗапись = Выборка.УчетнаяЗапись;
		
		УчетнаяЗаписьОбъект = УчетнаяЗапись.ПолучитьОбъект();
		УчетнаяЗаписьОбъект.ЕстьОшибкиСменыМоделиХраненияКлючей = Выборка.ЕстьОшибкиСменыМоделиХраненияКлючей;
		УчетнаяЗаписьОбъект.Записать();
	
	КонецЦикла; 

КонецПроцедуры

Функция ТаблицаОрганизацийТребующихНапоминанияОПереходе() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЗаявлениеАбонентаСпецоператораСвязиИзменившиесяРеквизитыВторичногоЗаявления.Ссылка.УчетнаяЗапись КАК УчетнаяЗапись
	                      |ПОМЕСТИТЬ УчетныеЗаписиЗаявлений
	                      |ИЗ
	                      |	Документ.ЗаявлениеАбонентаСпецоператораСвязи.ИзменившиесяРеквизитыВторичногоЗаявления КАК ЗаявлениеАбонентаСпецоператораСвязиИзменившиесяРеквизитыВторичногоЗаявления
	                      |ГДЕ
	                      |	ЗаявлениеАбонентаСпецоператораСвязиИзменившиесяРеквизитыВторичногоЗаявления.Ссылка.ДатаОтправкиЗаявления > &ДатаЗагрузкиБазы
	                      |	И ЗаявлениеАбонентаСпецоператораСвязиИзменившиесяРеквизитыВторичногоЗаявления.Ссылка.ПометкаУдаления = ЛОЖЬ
	                      |	И ЗаявлениеАбонентаСпецоператораСвязиИзменившиесяРеквизитыВторичногоЗаявления.ИзмененныйРеквизит В (ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.ПереходВКоробку), ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.ПереходВОблако), ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.ИзменениеКриптопровайдера), ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.ПереизданиеСертификата))
	                      |	И (ЗаявлениеАбонентаСпецоператораСвязиИзменившиесяРеквизитыВторичногоЗаявления.Ссылка.ДатаОтправкиЗаявления > &ДвеНеделиНазад
	                      |				И ЗаявлениеАбонентаСпецоператораСвязиИзменившиесяРеквизитыВторичногоЗаявления.Ссылка.Статус = &Отправлено
	                      |			ИЛИ ЗаявлениеАбонентаСпецоператораСвязиИзменившиесяРеквизитыВторичногоЗаявления.Ссылка.Статус = &Одобрено)
	                      |	И ЗаявлениеАбонентаСпецоператораСвязиИзменившиесяРеквизитыВторичногоЗаявления.Ссылка.ТипЗаявления = ЗНАЧЕНИЕ(Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение)
	                      |	И ЗаявлениеАбонентаСпецоператораСвязиИзменившиесяРеквизитыВторичногоЗаявления.Ссылка.УчетнаяЗапись.ЕстьОшибкиСменыМоделиХраненияКлючей = ИСТИНА
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	Организации.Ссылка КАК Организация,
	                      |	Организации.УчетнаяЗаписьОбмена КАК УчетнаяЗапись,
	                      |	ИСТИНА КАК ТребуетсяНапоминание
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
	                      |		ПО Организации.УчетнаяЗаписьОбмена.Ссылка = ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись
	                      |ГДЕ
	                      |	(&НуженОтборПоПользователям
	                      |				И ПользователиУчетныхЗаписейДокументооборота.Пользователь = &Пользователь
	                      |			ИЛИ НЕ &НуженОтборПоПользователям)
	                      |	И НЕ Организации.УчетнаяЗаписьОбмена.ПометкаУдаления
	                      |	И Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)
	                      |	И Организации.ПометкаУдаления = ЛОЖЬ
	                      |	И Организации.УчетнаяЗаписьОбмена.ДатаПодключения < &ДатаЗагрузкиБазы
	                      |	И (&ЭтоПереходВКоробку
	                      |				И Организации.УчетнаяЗаписьОбмена.ЭлектроннаяПодписьВМоделиСервиса
	                      |			ИЛИ &ЭтоПереходВОблако
	                      |				И НЕ Организации.УчетнаяЗаписьОбмена.ЭлектроннаяПодписьВМоделиСервиса)
	                      |	И НЕ Организации.УчетнаяЗаписьОбмена В
	                      |				(ВЫБРАТЬ
	                      |					УчетныеЗаписиЗаявлений.УчетнаяЗапись
	                      |				ИЗ
	                      |					УчетныеЗаписиЗаявлений КАК УчетныеЗаписиЗаявлений)
	                      |	И Организации.УчетнаяЗаписьОбмена.ЕстьОшибкиСменыМоделиХраненияКлючей = ИСТИНА");
	
	НуженОтборПоПользователям = ОбщегоНазначения.РазделениеВключено() 
		ИЛИ НЕ Пользователи.ЭтоПолноправныйПользователь();
		
	ТекущаяМодель 		= ТекущаяМодельРаботыСКлючами();
	ЭтоПереходВКоробку  = ТекущаяМодель = Перечисления.МодельРаботыСКлючами.ТолькоЛокальныеКлючи;
		
	ДатаЗагрузкиБазы = Константы.ДатаЗагрузкиБазы.Получить();
	ДвеНедели =  2 * 7 * 24 * 60 * 60;
		
	Запрос.УстановитьПараметр("Пользователь", 				Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("НуженОтборПоПользователям",  НуженОтборПоПользователям);
	Запрос.УстановитьПараметр("ДатаЗагрузкиБазы",  			ДатаЗагрузкиБазы);
	Запрос.УстановитьПараметр("ЭтоПереходВКоробку",  		ЭтоПереходВКоробку);
	Запрос.УстановитьПараметр("ЭтоПереходВОблако",  		НЕ ЭтоПереходВКоробку);
	Запрос.УстановитьПараметр("ДвеНеделиНазад",  			ТекущаяДатаСеанса() - ДвеНедели);
	Запрос.УстановитьПараметр("Одобрено",  					Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено);
	Запрос.УстановитьПараметр("Отправлено",  				Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено);
	
	ТаблицаУчетныхЗаписей = Запрос.Выполнить().Выгрузить();
	
	ОтметитьОрганизацииКоторымНужноСообщитьОПереходе(ТаблицаУчетныхЗаписей);

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТребуетсяНапоминание", Истина);
	
	ТаблицаУчетныхЗаписей = ТаблицаУчетныхЗаписей.Скопировать(ДополнительныеПараметры);
	
	Возврат ТаблицаУчетныхЗаписей;
	
КонецФункции

Функция БылВыполненПререходВДругуюМодельХраненияКлючей() Экспорт

	ПредыдущаяМодель = Константы.МодельРаботыСКлючамиПередВыгрузкой.Получить();
	ТекущаяМодель    = ТекущаяМодельРаботыСКлючами();
	ПустаяМодель     = Перечисления.МодельРаботыСКлючами.ПустаяСсылка();
	
	БылВыполненПереход = ПредыдущаяМодель <> ПустаяМодель И ТекущаяМодель <> ПустаяМодель И ПредыдущаяМодель <> ТекущаяМодель;

	Возврат БылВыполненПереход;

КонецФункции

Функция УчетныеЗаписиТребующиеНапоминанияОПереходе() Экспорт
	
	ТаблицаОрганизаций = ТаблицаОрганизацийТребующихНапоминанияОПереходе();
	УчетныеЗаписи = ТаблицаОрганизаций.ВыгрузитьКолонку("УчетнаяЗапись");
	
	Возврат УчетныеЗаписи;
	
КонецФункции

Процедура ОтметитьОрганизацииКоторымНужноСообщитьОПереходе(ТаблицаУчетныхЗаписей)

	ДатыНапоминаний = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_ДатыНапоминанийОПереходах");
	
	ТекДата = ТекущаяДатаСеанса();
	
	Для Каждого СтрокаТаблицыУчетныхЗаписей Из ТаблицаУчетныхЗаписей Цикл
		
		ПоддерживаетсяВторичноеЗаявление = ПоддерживаетсяВторичноеЗаявление(СтрокаТаблицыУчетныхЗаписей.Организация);
		Если ПоддерживаетсяВторичноеЗаявление Тогда
		
			Если ДатыНапоминаний <> Неопределено Тогда 
				
				// Проверяем, не отложил ли пользователь показ предупреждения.
				СохраненнаяДатаНапоминания = ДатыНапоминаний.Получить(СтрокаТаблицыУчетныхЗаписей.УчетнаяЗапись);
				
				Если СохраненнаяДатаНапоминания = Дата(1,1,1) Тогда 
					// Больше не показывать
					СтрокаТаблицыУчетныхЗаписей.ТребуетсяНапоминание = Ложь;
				ИначеЕсли СохраненнаяДатаНапоминания <> Неопределено Тогда
					Если ТекДата < СохраненнаяДатаНапоминания Тогда
						// Еще не подошло время
						СтрокаТаблицыУчетныхЗаписей.ТребуетсяНапоминание = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			СтрокаТаблицыУчетныхЗаписей.ТребуетсяНапоминание = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоЗаявлениеТолькоНаПереход(ДокументЗаявление) Экспорт
	
	Если ДокументЗаявление.Ссылка.ТипЗаявления <> Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИзмененныеРеквизиты = ДокументЗаявление.Ссылка.ИзменившиесяРеквизитыВторичногоЗаявления.Выгрузить().ВыгрузитьКолонку("ИзмененныйРеквизит");
	
	РеквизитыПерехода = Новый Массив;
	РеквизитыПерехода.Добавить(Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВКоробку);
	РеквизитыПерехода.Добавить(Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВОблако);
	РеквизитыПерехода.Добавить(Перечисления.ПараметрыПодключенияК1СОтчетности.ПереизданиеСертификата);
	РеквизитыПерехода.Добавить(Перечисления.ПараметрыПодключенияК1СОтчетности.ИзменениеКриптопровайдера);
	
	РеквизитыНеОтносящиесяКПереходу = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ИзмененныеРеквизиты, РеквизитыПерехода);
	
	ЗаявлениеСодержитРеквизитыПерехода = 
		ИзмененныеРеквизиты.Найти(Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВОблако) <> Неопределено
		ИЛИ ИзмененныеРеквизиты.Найти(Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВКоробку) <> Неопределено
		ИЛИ ИзмененныеРеквизиты.Найти(Перечисления.ПараметрыПодключенияК1СОтчетности.ИзменениеКриптопровайдера) <> Неопределено;
	
	Возврат РеквизитыНеОтносящиесяКПереходу.Количество() = 0 И ЗаявлениеСодержитРеквизитыПерехода;
	
КонецФункции

Функция ДополнительныеРеквизитыУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	*
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписи КАК ДополнительныеРеквизитыУчетнойЗаписи
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписи.УчетнаяЗапись = &УчетнаяЗапись";

	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат[0]);
	Иначе
		Возврат Новый Структура();
	КонецЕсли;

КонецФункции

#КонецОбласти

Функция ПолучитьСписокСпецоператоровСвязи() Экспорт
	
	СпецоператорыСвязи = ПолучитьСпецоператоровСвязи();
	
	Массив = Новый Массив();
	
	Если СпецоператорыСвязи <> Неопределено Тогда
		
		Для Каждого СпецоператорСвязи Из СпецоператорыСвязи Цикл 
			
			СтруктураПараметра = Новый Структура("ВебСервисПризнак");
			
			ЕстьВебСервис = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(
				СпецоператорСвязи.Ссылка, 
				"ВебСервисПризнак");
			
			Если ЕстьВебСервис <> Неопределено И ЕстьВебСервис Тогда
				Массив.Добавить(Спецоператорсвязи.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Массив
	
КонецФункции

Функция ПолучитьПараметрыСпецоператора(Знач Спецоператор, ПараметрыСтруктура, Макет = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Спецоператор) Тогда
		
		Если ТипЗнч(Спецоператор) = Тип("ПеречислениеСсылка.СпецоператорыСвязи") Тогда
			Имя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьИмяЗначенияПеречисленияСпецоператорыСвязиПоСинониму(Спецоператор);
		Иначе
			Имя = Спецоператор.Имя;
		КонецЕсли;
		
		Если Макет = Неопределено Тогда
			Макет = ПолучитьМакетОбработки("ПараметрыСпецоператоровСвязи");
		КонецЕсли;
		
		Для Каждого Параметр Из ПараметрыСтруктура Цикл
			
			НомерКолонки = Макет.Область(Параметр.Ключ).Лево;
			
			Для НомерСтроки = 2 По Макет.ВысотаТаблицы Цикл
				ТекРегион = Макет.Область(НомерСтроки, 1).Текст;
				
				Если нРег(ТекРегион) = нРег(Имя) Тогда
					ПараметрыСтруктура.Вставить(Параметр.Ключ,Макет.Область(НомерСтроки, НомерКолонки).Текст);
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	Возврат ПараметрыСтруктура;
	
КонецФункции

Функция ЭПНотариусаДокСкана(ПрисоединенныйФайл) Экспорт
	
	СвойстваЭП = Новый Структура();
	СвойстваЭП.Вставить("ИмяФайла", 	"");
	СвойстваЭП.Вставить("АдресДанных", 	"");
	
	Если ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл).Количество() = 0 Тогда
		Возврат СвойстваЭП;
	КонецЕсли;
	
	СвойстваПодписиПрисоединенногоФайла =  ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл)[0];
		
	ИмяФайла	= СвойстваПодписиПрисоединенногоФайла.ИмяФайлаПодписи;
	АдресДанных = ПоместитьВоВременноеХранилище(СвойстваПодписиПрисоединенногоФайла.Подпись, Новый УникальныйИдентификатор);
	
	СвойстваЭП.ИмяФайла 	= ИмяФайла;
	СвойстваЭП.АдресДанных 	= АдресДанных;
	
	Возврат СвойстваЭП;
	
КонецФункции

#Область СкрытаяОтправкаЗаявленияНаИзменение

Функция СоздатьЗаявлениеНаИзменениеВСкрытомРежиме(Организация) Экспорт
	
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_СпецоператорПоддерживаетВторичныеЗаявления(УчетнаяЗапись) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДополнительныеРеквизитыУчетнойЗаписи = СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ДополнительныеРеквизитыУчетнойЗаписи(УчетнаяЗапись);
	
	Если ДополнительныеРеквизитыУчетнойЗаписи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получаем реквизиты организации
	ДанныеЗаполнения 	= СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ДанныеЗаполнения(Организация);
	ДанныеОрганизации 	= ДанныеЗаполнения.СтруктураДанныхОрганизации;
	
	// Создаем заявление на изменение настроек подключения
	НовыйДокументЗаявление = Документы.ЗаявлениеАбонентаСпецоператораСвязи.СоздатьДокумент();
	
	СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьСведенияОрганизации(
		НовыйДокументЗаявление,
		ДополнительныеРеквизитыУчетнойЗаписи,
		ДанныеЗаполнения,
		ДанныеОрганизации,
		Организация,
		УчетнаяЗапись);
	
	СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьСлужебныеСведения(
		НовыйДокументЗаявление);
	
	СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьТелефоны(
		НовыйДокументЗаявление,
		ДополнительныеРеквизитыУчетнойЗаписи);
		
	СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьСведенияВладельцаЭП(
		НовыйДокументЗаявление,
		ДанныеОрганизации,
		ДополнительныеРеквизитыУчетнойЗаписи);
	
	СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьНаправленияСдачиОтчетности(
		НовыйДокументЗаявление,
		ДополнительныеРеквизитыУчетнойЗаписи);
	
	Возврат НовыйДокументЗаявление;
	
КонецФункции

Функция СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ДанныеЗаполнения(Организация) Экспорт
	
	СтруктураРеквизитов = Новый Структура("Организация, ПриОткрытии", Организация, Истина);
	СтруктураРеквизитов.Вставить("АдресЮридический",);
	СтруктураРеквизитов.Вставить("АдресФактический",);
	ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
	ДанныеЗаполнения = ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ДополнительныеРеквизитыУчетнойЗаписи(УчетнаяЗапись)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыУчетнойЗаписи.НомерОсновнойПоставки1с,
		|	ДополнительныеРеквизитыУчетнойЗаписи.КраткоеНаименование,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ПолноеНаименование,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ИНН,
		|	ДополнительныеРеквизитыУчетнойЗаписи.КПП,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ОГРН,
		|	ДополнительныеРеквизитыУчетнойЗаписи.РегНомерПФР,
		|	ДополнительныеРеквизитыУчетнойЗаписи.РегНомерФСС,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ЭлектроннаяПочта,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПФамилия,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПИмя,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПОтчество,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦППодразделение,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПСНИЛС,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПДолжность,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТелефонМобильный,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТелефонОсновной,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТелефонДополнительный,
		|	ДополнительныеРеквизитыУчетнойЗаписи.КодРегионаФСРАР
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписи КАК ДополнительныеРеквизитыУчетнойЗаписи
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписи.УчетнаяЗапись = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_СпецоператорПоддерживаетВторичныеЗаявления(УчетнаяЗапись)
	
	Спецоператор = УчетнаяЗапись.СпецоператорСвязи;
	
	ПараметрСпецоператора = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(
		Спецоператор, 
		"ПоддерживаетсяОтправкаВторичногоЗаявления");
	
	Возврат ПараметрСпецоператора = "Истина";
	
КонецФункции

Процедура СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьСведенияОрганизации(
		НовыйДокументЗаявление,
		ДополнительныеРеквизитыУчетнойЗаписи,
		ДанныеЗаполнения,
		ДанныеОрганизации,
		Организация,
		УчетнаяЗапись)
		
	НомерОсновнойПоставки1с 	= ДополнительныеРеквизитыУчетнойЗаписи[0].НомерОсновнойПоставки1с;
	КраткоеНаименование 		= ДополнительныеРеквизитыУчетнойЗаписи[0].КраткоеНаименование;
	ПолноеНаименование 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ПолноеНаименование;
	ИНН 						= ДополнительныеРеквизитыУчетнойЗаписи[0].ИНН;
	КПП 						= ДополнительныеРеквизитыУчетнойЗаписи[0].КПП;
	ОГРН 						= ДополнительныеРеквизитыУчетнойЗаписи[0].ОГРН;
	РегНомерПФР 				= ДополнительныеРеквизитыУчетнойЗаписи[0].РегНомерПФР;
	ЭлектроннаяПочта 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ЭлектроннаяПочта;
	
	ЭтоЮридическоеЛицо  = ДанныеОрганизации.ТипОрганизации;
	Если ЭтоЮридическоеЛицо Тогда
		ПризнакОбособленногоПодразделения = ДанныеОрганизации.ПризнакОбособленногоПодразделения;
	КонецЕсли;
	АдрЮР = ДанныеЗаполнения.АдресЮридический;
	
	НовыйДокументЗаявление.Организация							= Организация;
	НовыйДокументЗаявление.УчетнаяЗапись 						= УчетнаяЗапись;
	НовыйДокументЗаявление.ТипОрганизации						= ЭтоЮридическоеЛицо;
	НовыйДокументЗаявление.ИНН									= ИНН;
	НовыйДокументЗаявление.КПП									= КПП;
	НовыйДокументЗаявление.ПолноеНаименование					= ПолноеНаименование;
	НовыйДокументЗаявление.КраткоеНаименование					= КраткоеНаименование;
	НовыйДокументЗаявление.ПризнакОбособленногоПодразделения	= ПризнакОбособленногоПодразделения;
	НовыйДокументЗаявление.НомерОсновнойПоставки1с				= НомерОсновнойПоставки1с;
	НовыйДокументЗаявление.ДополнительныйКодФСС					= "";
	НовыйДокументЗаявление.ОГРН									= ОГРН;
	НовыйДокументЗаявление.АдресЮридический 					= РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(АдрЮР);
	НовыйДокументЗаявление.РегНомерПФР							= РегНомерПФР;
	НовыйДокументЗаявление.ЭлектроннаяПочта						= ЭлектроннаяПочта;
	НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса		= ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ЭтоЭлектроннаяПодписьВМоделиСервиса(УчетнаяЗапись);
	НовыйДокументЗаявление.СпецоператорСвязи 					= УчетнаяЗапись.СпецоператорСвязи;
		
КонецПроцедуры

Процедура СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьСлужебныеСведения(
		НовыйДокументЗаявление)
		
	НовыйДокументЗаявление.УстановитьНовыйНомер();
	
	НовыйДокументЗаявление.Дата								= ТекущаяДатаСеанса();
	НовыйДокументЗаявление.Ответственный					= Пользователи.ТекущийПользователь();
	НовыйДокументЗаявление.ДатаСозданияУчетнойЗаписи		= '00010101';
	НовыйДокументЗаявление.ТипКриптопровайдера				= Перечисления.ТипыКриптоПровайдеров.ПустаяСсылка();
	НовыйДокументЗаявление.ТипЗаявления						= Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение;
	НовыйДокументЗаявление.ИдентификаторДокументооборота	= нрег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	НовыйДокументЗаявление.Статус							= Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено;

КонецПроцедуры
	
Процедура СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьТелефоны(
		НовыйДокументЗаявление,
		ДополнительныеРеквизитыУчетнойЗаписи)
		
	ТелефонМобильный		= ДополнительныеРеквизитыУчетнойЗаписи[0].ТелефонМобильный;
	ТелефонОсновной 		= ДополнительныеРеквизитыУчетнойЗаписи[0].ТелефонОсновной;
	ТелефонДополнительный 	= ДополнительныеРеквизитыУчетнойЗаписи[0].ТелефонДополнительный;
	
	НовыйДокументЗаявление.ТелефонОсновной			= ТелефонОсновной;
	НовыйДокументЗаявление.ТелефонДополнительный	= ТелефонДополнительный;
	
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный) = "" Тогда
		НовыйДокументЗаявление.ТелефонМобильный = "";
	Иначе
		// Приведение номера телефона 89851234567 к маске +7 (999) 999-99-99
		КодВСкобках =  Сред(ТелефонМобильный, 2, 3);
		ПервыйБлокЧисел = Сред(ТелефонМобильный, 5, 3);
		ВторойБлокЧисел = Сред(ТелефонМобильный, 8, 2);
		ТретийБлокЧисел = Сред(ТелефонМобильный, 10, 2);
		НовыйДокументЗаявление.ТелефонМобильный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"+7 (%1) %2-%3-%4", КодВСкобках, ПервыйБлокЧисел, ВторойБлокЧисел, ТретийБлокЧисел);
	КонецЕсли;
		
КонецПроцедуры
		
Процедура СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьНаправленияСдачиОтчетности(
		НовыйДокументЗаявление,
		ДополнительныеРеквизитыУчетнойЗаписи)
		
	УчетнаяЗапись 		= НовыйДокументЗаявление.УчетнаяЗапись;
	РегНомерФСС 		= ДополнительныеРеквизитыУчетнойЗаписи[0].РегНомерФСС;
	КодРегионаФСРАР 	= ДополнительныеРеквизитыУчетнойЗаписи[0].КодРегионаФСРАР;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.ТипПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КодПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КПП
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписиПолучатели КАК ДополнительныеРеквизитыУчетнойЗаписиПолучатели
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.УчетнаяЗапись = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Получатели = Запрос.Выполнить().Выгрузить();
	
	// Копируем структуру таблицы
	ТаблицаКодовФНС = Получатели.Скопировать();
	ТаблицаКодовФНС.Очистить();
	
	СдаватьВФНС 	= Ложь;
	СдаватьВПФР 	= Ложь;
	КодПФР 			= "";
	СдаватьВРосстат = Ложь;
	КодРосстата 	= "";
	СдаватьВФСС 	= Ложь;
	СдаватьВФСРАР 	= Ложь;
	СдаватьВРПН 	= Ложь;
	СдаватьВФТС 	= Ложь;
	
	Для каждого СтрокаНаправлений Из Получатели Цикл
		Если СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			СдаватьВПФР = Истина;
			КодПФР 		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтрокаНаправлений.КодПолучателя);
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			СдаватьВФСС = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			СдаватьВФНС = Истина;
			НоваяСтрока = ТаблицаКодовФНС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаправлений);
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
			СдаватьВРосстат = Истина;
			КодРосстата = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтрокаНаправлений.КодПолучателя);
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
			СдаватьВФСРАР = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
			СдаватьВРПН = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФТС Тогда
			СдаватьВФТС = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Получатели = ТаблицаКодовФНС;
		
	НовыйДокументЗаявление.Получатели.Очистить();
	
	// ФНС
	Если СдаватьВФНС Тогда
		Для Каждого СтрокаНаправлений Из Получатели Цикл
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя = СтрокаНаправлений.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя = СтрокаНаправлений.КодПолучателя;
			НоваяСтрокаНаправления.КПП = СтрокаНаправлений.КПП;
		КонецЦикла;
	КонецЕсли;
	
	// ПФР
	Если СдаватьВПФР Тогда
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР;
		НоваяСтрокаНаправления.КодПолучателя = КодПФР;
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	// ФСС
	НовыйДокументЗаявление.РегНомерФСС = ?(СдаватьВФСС, РегНомерФСС, "");
	Если СдаватьВФСС Тогда
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС;
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	// Росстат
	Если СдаватьВРосстат Тогда
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
		НоваяСтрокаНаправления.КодПолучателя = КодРосстата;
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	// ФСРАР
	НовыйДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР 	= СдаватьВФСРАР;
	НовыйДокументЗаявление.КодРегионаФСРАР 						= КодРегионаФСРАР;
	
	// РПН
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН = СдаватьВРПН;
	
	// ФТС
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеФТС = СдаватьВФТС;
	
КонецПроцедуры
		
Процедура СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьСведенияВладельцаЭП(
		НовыйДокументЗаявление, 
		ДанныеОрганизации,
		ДополнительныеРеквизитыУчетнойЗаписи)
	
	Организация = НовыйДокументЗаявление.Организация;
	
	ВладелецЭЦПФамилия 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПФамилия;
	ВладелецЭЦПИмя 				= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПИмя;
	ВладелецЭЦПОтчество			= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПОтчество;
	ВладелецЭЦППодразделение 	= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦППодразделение;
	ВладелецЭЦПСНИЛС 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПСНИЛС;
	ВладелецЭЦПДолжность 		= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПДолжность;
	
	
	Руководитель = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация);
	ГлБухгалтер  = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
	
	СтруктураФИОРуководителя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(Руководитель);
	СтруктураФИОГлБухгалтер = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(ГлБухгалтер);
	
	// Пытаемся определить тип владельца ЭП исходя из ФИО
	Если СтруктураФИОРуководителя.Имя = ВладелецЭЦПИмя 
		И СтруктураФИОРуководителя.Отчество = ВладелецЭЦПОтчество
		И СтруктураФИОРуководителя.Фамилия = ВладелецЭЦПФамилия Тогда
		
		ВидВладельцаЭЦП = Перечисления.ТипыВладельцевЭЦП.Руководитель;
		ВладелецЭЦП     = Руководитель;
		
	ИначеЕсли СтруктураФИОГлБухгалтер.Имя = ВладелецЭЦПИмя 
		И СтруктураФИОГлБухгалтер.Отчество = ВладелецЭЦПОтчество
		И СтруктураФИОГлБухгалтер.Фамилия = ВладелецЭЦПФамилия Тогда
		
		ВидВладельцаЭЦП = Перечисления.ТипыВладельцевЭЦП.ГлавныйБухгалтер;
		ВладелецЭЦП     = ГлБухгалтер;
		
	Иначе
		
		ВидВладельцаЭЦП = Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник;
		ВладелецЭЦП = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ФизЛицоПоФИО(
			ВладелецЭЦПФамилия, 
			ВладелецЭЦПИмя, 
			ВладелецЭЦПОтчество, 
			ВладелецЭЦПСНИЛС, 
			Организация);
			
	КонецЕсли;
	
	ДанныеОрганизации.Вставить("Организация", Организация);
	
	ВладелецЭЦПВидДокумента        	= Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
	ВладелецЭЦПСерияДокумента      	= "";
	ВладелецЭЦПНомерДокумента      	= "";
	ВладелецЭЦПДатаВыдачиДокумента 	= "";
	ВладелецЭЦПКемВыданДокумент    	= "";
	ВладелецЭЦПДатаРождения			= Неопределено;
	ВладелецЭЦПМестоРождения		= Неопределено;
	ВладелецЭЦППол					= Неопределено;
	ВладелецЭЦПГражданство			= Неопределено;
	ВладелецЭЦПКодПодразделения		= Неопределено;
	
	Если ЗначениеЗаполнено(ВладелецЭЦП) Тогда

		ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьДанныеСотрудника(
			ВидВладельцаЭЦП, 
			ДанныеОрганизации, 
			ВладелецЭЦП);
		
		ВладелецЭЦПВидДокумента			= ДанныеСотрудника.ВидДокумента;
		ВладелецЭЦПСерияДокумента		= ДанныеСотрудника.Серия;
		ВладелецЭЦПНомерДокумента		= ДанныеСотрудника.Номер;
		ВладелецЭЦПДатаВыдачиДокумента	= ДанныеСотрудника.ДатаВыдачи;
		ВладелецЭЦПКемВыданДокумент		= ДанныеСотрудника.КемВыдан;
		ВладелецЭЦПДатаРождения			= ДанныеСотрудника.ДатаРождения;
		ВладелецЭЦПМестоРождения		= ДанныеСотрудника.МестоРождения;
		ВладелецЭЦППол					= ДанныеСотрудника.Пол;
		ВладелецЭЦПГражданство			= ДанныеСотрудника.Гражданство;
		ВладелецЭЦПКодПодразделения		= ДанныеСотрудника.КодПодразделения;
		
	КонецЕсли;
	
	НовыйДокументЗаявление.ВладелецЭЦПТип					= ВидВладельцаЭЦП;
	НовыйДокументЗаявление.ВладелецЭЦП						= ВладелецЭЦП;
	
	НовыйДокументЗаявление.ВладелецЭЦПФамилия				= СокрЛП(ВладелецЭЦПФамилия);
	НовыйДокументЗаявление.ВладелецЭЦПИмя					= СокрЛП(ВладелецЭЦПИмя);
	НовыйДокументЗаявление.ВладелецЭЦПОтчество				= СокрЛП(ВладелецЭЦПОтчество);
	НовыйДокументЗаявление.ВладелецЭЦПДолжность				= ВладелецЭЦПДолжность;
	НовыйДокументЗаявление.ВладелецЭЦППодразделение			= ВладелецЭЦППодразделение;
	
	НовыйДокументЗаявление.ВладелецЭЦПВидДокумента			= ВладелецЭЦПВидДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПНомерДокумента		= ВладелецЭЦПНомерДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПСерияДокумента		= ВладелецЭЦПСерияДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПДатаВыдачиДокумента	= ВладелецЭЦПДатаВыдачиДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПКемВыданДокумент		= ВладелецЭЦПКемВыданДокумент;
	НовыйДокументЗаявление.ВладелецЭЦПДатаРождения        	= ВладелецЭЦПДатаРождения;
	НовыйДокументЗаявление.ВладелецЭЦПМестоРождения       	= ВладелецЭЦПМестоРождения;
	НовыйДокументЗаявление.ВладелецЭЦППол                 	= ВладелецЭЦППол;
	НовыйДокументЗаявление.ВладелецЭЦПГражданство         	= ВладелецЭЦПГражданство;
	НовыйДокументЗаявление.ВладелецЭЦПКодПодразделения    	= ВладелецЭЦПКодПодразделения;
	
КонецПроцедуры

Функция СообщениеОНеподключенномНаправлении_ЗаголовокФормы(СсылкаНаОбъект, Знач ОрганСтрокой) Экспорт
	
	ВидОбъекта = ДлительнаяОтправкаКлиентСервер.ВидОбъекта(СсылкаНаОбъект);
	
	Если ВидОбъекта.ЭтоПисьмо Тогда
		Заголовок = НСтр("ru = 'Письмо не может быть отправлено в %Орган'");
	ИначеЕсли ВидОбъекта.ЭтоОтветНаТребование Тогда
		Заголовок = НСтр("ru = 'Ответ на требование не может быть отправлен в %Орган'");
	ИначеЕсли ВидОбъекта.ЭтоСверка Тогда
		Заголовок = НСтр("ru = 'Запрос на сверку не может быть отправлен в %Орган'");
	ИначеЕсли ВидОбъекта.ЭтоЕГРЮЛ Тогда
		Заголовок = НСтр("ru = 'Запрос на выписку не может быть отправлен оператору связи'");
	ИначеЕсли ВидОбъекта.ЭтоМакетПФР Тогда
		Заголовок = НСтр("ru = 'Макет пенсионных дел не может быть отправлен в %Орган'");
	Иначе
		Заголовок = НСтр("ru = 'Отчет не может быть отправлен в %Орган'");
	КонецЕсли;
	
	Если ОрганСтрокой = НСтр("ru = 'ФНС'") Тогда
		ОрганСтрокой = НСтр("ru = 'выбранную инспекцию ФНС'");
	КонецЕсли;
	
	Заголовок = СтрЗаменить(Заголовок, "%Орган", ОрганСтрокой) + НСтр("ru = ' сейчас'");
	
	Возврат Заголовок;
	
КонецФункции

Функция СообщениеОНеподключенномНаправлении_ЧтоДелать(СсылкаНаОбъект, Знач ТекстНадписи, ОрганСтрокой) Экспорт
	
	НазваниеВРодительномПадеже = ДлительнаяОтправкаКлиентСервер.НазваниеОбъектаВРодительномПадеже(СсылкаНаОбъект);
	
	ТекстНадписи = СтрЗаменить(ТекстНадписи, "<орган>",  ОрганСтрокой);
	ТекстНадписи = СтрЗаменить(ТекстНадписи, "<отчета>", НазваниеВРодительномПадеже);
	
	Возврат ТекстНадписи;
	
КонецФункции

Процедура СообщениеОНеподключенномНаправлении_ОпределитьСведенияПоОбъекту(Форма) Экспорт
	
	Форма.СсылкаНаОбъект = Форма.Параметры.СсылкаНаОбъект;
	
	СведенияПоОбъекту 	 = СведенияПоОтправляемымОбъектам(Форма.СсылкаНаОбъект);
	
	Форма.Организация 			 	= СведенияПоОбъекту.Организация;
	Форма.ВидКонтролирующегоОргана 	= СведенияПоОбъекту.ВидКонтролирующегоОргана;
	Форма.КодКонтролирующегоОргана 	= СведенияПоОбъекту.КодКонтролирующегоОргана;
	Форма.ОрганСтрокой 			 	= Строка(Форма.ВидКонтролирующегоОргана);
	
КонецПроцедуры

Процедура СообщениеОНеподключенномНаправлении_УправлениеФормой(Форма) Экспорт
	
	Элементы 		= Форма.Элементы;
	СсылкаНаОбъект 	= Форма.СсылкаНаОбъект;
	ОрганСтрокой 	= Форма.ОрганСтрокой;
	
	Форма.Заголовок = СообщениеОНеподключенномНаправлении_ЗаголовокФормы(
		СсылкаНаОбъект, 
		ОрганСтрокой);
	
	НазваниеВРодительномПадеже = ДлительнаяОтправкаКлиентСервер.НазваниеОбъектаВРодительномПадеже(СсылкаНаОбъект);
	
	Элементы.ЧтоДелать.Заголовок = СообщениеОНеподключенномНаправлении_ЧтоДелать(
		СсылкаНаОбъект, 
		Элементы.ЧтоДелать.Заголовок, 
		ОрганСтрокой);
	
КонецПроцедуры
	
Процедура СообщениеОНеподключенномНаправлении_ПриСозданииНаСервере(Форма) Экспорт
	
	СообщениеОНеподключенномНаправлении_ОпределитьСведенияПоОбъекту(Форма);
	СообщениеОНеподключенномНаправлении_УправлениеФормой(Форма);
	
КонецПроцедуры

Функция ПредставлениеОрганизацииБезПрефиксов(Знач ПредставлениеОрганизации)

	ВидыОрганизации = Новый Массив;
	ВидыОрганизации.Добавить(НСтр("ru = 'ИП'"));
	ВидыОрганизации.Добавить(НСтр("ru = 'ООО'"));
	ВидыОрганизации.Добавить(НСтр("ru = 'АО'"));
	ВидыОрганизации.Добавить(НСтр("ru = 'ПАО'"));
	ВидыОрганизации.Добавить(НСтр("ru = 'ЗАО'"));
	
	Для каждого ВидОрганизации Из ВидыОрганизации Цикл
		
		Длина = СтрДлина(ВидОрганизации) + 1; // с пробелом
		
		// Удаляем справа
		Если Прав(ПредставлениеОрганизации, Длина) = НСтр("ru = ' '") + ВидОрганизации Тогда
			ПредставлениеОрганизации = Лев(ПредставлениеОрганизации, СтрДлина(ПредставлениеОрганизации) - Длина);
		КонецЕсли;
		
		// Удаляем слева
		Если Лев(ПредставлениеОрганизации, Длина) = ВидОрганизации + НСтр("ru = ' '") Тогда
			ПредставлениеОрганизации = Прав(ПредставлениеОрганизации, СтрДлина(ПредставлениеОрганизации) - Длина);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ПредставлениеОрганизации;
	
КонецФункции

Процедура УстановитьПредставлениеЗаявленияВВидеФорматированнойСтроки(ЗаявлениеАбонента, Элемент, ВыводитьОрганизацию = Ложь) Экспорт
	
	СсылкаНаЗаявление = ПолучитьНавигационнуюСсылку(ЗаявлениеАбонента);
	СсылкаНаЗаявление = Новый ФорматированнаяСтрока(НСтр("ru = 'заявление'"),,,,СсылкаНаЗаявление);
	
	ДатаОтправкиЗаявления = НСтр("ru = ' от '") + Формат(ЗаявлениеАбонента.ДатаОтправкиЗаявления, "ДЛФ=D");
		
	ТипЗаявления = ЗаявлениеАбонента.ТипЗаявления;
	Если ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение Тогда
		ТипЗаявленияСтрокой = НСтр("ru = ' на изменение настроек по 1С-Отчетности'");
	Иначе
		ТипЗаявленияСтрокой = НСтр("ru = ' на подключение к 1С-Отчетности'");
	КонецЕсли;
	
	Если ВыводитьОрганизацию Тогда
		
		ПредставлениеОрганизации = ПредставлениеОрганизацииБезПрефиксов(Строка(ЗаявлениеАбонента.Организация));
		ТипЗаявленияСтрокой      = ТипЗаявленияСтрокой + " по организации " + ПредставлениеОрганизации;
		
	КонецЕсли;
	
	ПредставлениеЗаявления = Новый ФорматированнаяСтрока(
		СсылкаНаЗаявление,
		ТипЗаявленияСтрокой,
		ДатаОтправкиЗаявления);
		
	Если ЗаявлениеАбонента.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено Тогда
		
		Элемент.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Ваше '"),
			ПредставлениеЗаявления,
			НСтр("ru = ' еще не обработано.'"));
		
	ИначеЕсли ЗаявлениеАбонента.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено Тогда
		
		РезультатОбработкиЗаявления = Новый ФорматированнаяСтрока(НСтр("ru = ' одобрено'"),, Новый Цвет(1,128,0));
	
		Элемент.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Ваше '"),
			ПредставлениеЗаявления,
			РезультатОбработкиЗаявления);
			
	ИначеЕсли ЗаявлениеАбонента.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено Тогда
		
		РезультатОбработкиЗаявления = Новый ФорматированнаяСтрока(НСтр("ru = ' отклонено'"),, Новый Цвет(226, 40, 40));
		
		Элемент.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Ваше '"),
			ПредставлениеЗаявления,
			РезультатОбработкиЗаявления,
			НСтр("ru = ' по причине:'"));
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаспознаваниеРассылокПФРВЦиклахОбмена

Процедура РаспознатьРассылкиПФРВЦиклахОбмена() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТранспортноеСообщение.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЦиклыОбмена КАК ЦиклыОбмена
	               |		ПО ТранспортноеСообщение.ЦиклОбмена = ЦиклыОбмена.Ссылка
	               |ГДЕ
	               |	ТранспортноеСообщение.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.ПисьмоВходящееПФР)
	               |	И ТИПЗНАЧЕНИЯ(ТранспортноеСообщение.Отправитель) = ТИП(Справочник.ОрганыПФР)
	               |	И НЕ ЦиклыОбмена.Ссылка ЕСТЬ NULL
	               |	И ЦиклыОбмена.Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыЦикловОбмена.РассылкаПФР)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ВходящиеПисьмаПФР = Результат.Выгрузить();
	Для Каждого ПисьмоПФР Из ВходящиеПисьмаПФР Цикл 
		
		Объект = ПисьмоПФР.Ссылка;
		
		Вложения = ПолучитьВложенияТранспортногоСообщения(Объект, Истина);
		
		ВложенияПисьма = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо));
		ВложенияПриложенияКПисьму = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение));
		ВложенияОписанияКПисьму = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма));
		
		Если ВложенияПисьма.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВложенияОписанияКПисьму.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВложениеПисьмо = ВложенияПисьма[0];
		ВложенияОписаниеКПисьму = ВложенияОписанияКПисьму[0];
		
		// загружаем описание к письму
		ВремФайлОписаниеКПисьму = ПолучитьИмяВременногоФайла();
		ВложенияОписаниеКПисьму.Данные.Получить().Записать(ВремФайлОписаниеКПисьму);
		ДеревоОписанияКПисьму = ЗагрузитьXMLВДеревоЗначений(ВремФайлОписаниеКПисьму);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВремФайлОписаниеКПисьму);
		Если ДеревоОписанияКПисьму = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// извлекаем тему, идентификатор и дату-время отправки из описания письма
		УзелОписаниеПисьма = ДеревоОписанияКПисьму.Строки.Найти("описаниеПисьма", "Имя");
		Если УзелОписаниеПисьма = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УзелТема = УзелОписаниеПисьма.Строки.Найти("тема", "Имя");
		УзелДатаВремяОтправки = УзелОписаниеПисьма.Строки.Найти("датаВремяОтправки", "Имя");
		УзелИдентификаторПисьма = УзелОписаниеПисьма.Строки.Найти("идентификаторПисьма", "Имя");
		Если УзелТема = Неопределено ИЛИ УзелДатаВремяОтправки = Неопределено ИЛИ УзелИдентификаторПисьма = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Тема = XMLЗначениеВнутр(Тип("Строка"), УзелТема.Значение);
		ДатаВремяОтправки = XMLЗначениеВнутр(Тип("Дата"), УзелДатаВремяОтправки.Значение);
		ИдентификаторПисьма = XMLЗначениеВнутр(Тип("Строка"), УзелИдентификаторПисьма.Значение);
		
		УзелОтветНаПисьмо = УзелОписаниеПисьма.Строки.Найти("ответНаПисьмо", "Имя");
		Если УзелОтветНаПисьмо <> Неопределено Тогда
			ИдентификаторОснования = XMLЗначениеВнутр(Тип("Строка"), УзелОтветНаПисьмо.Значение);
		Иначе
			ИдентификаторОснования = "";
		КонецЕсли;
		
		УзелКатегорияПисьма = УзелОписаниеПисьма.Строки.Найти("категорияПисьма", "Имя");
		Если ЗначениеЗаполнено(УзелКатегорияПисьма) Тогда
			СтрКатегорияПисьма = XMLЗначениеВнутр(Тип("Строка"), УзелКатегорияПисьма.Значение);
			ПризнакРассылки = (нрег(СтрКатегорияПисьма) = "рассылка");
		Иначе
			ПризнакРассылки = Ложь;
		КонецЕсли;
		
		Если (ПризнакРассылки) И ЗначениеЗаполнено(Объект.ЦиклОбмена) Тогда
			ЦиклыОбмена = Объект.ЦиклОбмена.ПолучитьОбъект();			
			
			НачатьТранзакцию();			
			
			ЦиклыОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаПФР;
									
			Попытка
				ЦиклыОбмена.Записать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка записи ЦО, связанного с входящим письмом от ПФР:
					|%1'"), ИнформацияОбОшибке().Описание);					
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;		
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область ПереносТранспортныхСообщенийВПрисоединенныеФайлы

Функция ПеренестиТранспортныеСообщенияВПрисоединенныеФайлы(МаксимальноеКоличество = 10) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Обработано = 0;
	
	// перенос содержимого транспортных контейнеров
	
	ОсталосьСтрокой = Формат(МаксимальноеКоличество + 1, "ЧН=0; ЧГ=");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + ОсталосьСтрокой + "
		|	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение КАК ТранспортноеСообщение,
		|	СодержимоеТранспортныхКонтейнеров.ИмяФайла КАК ИмяФайла
		|ИЗ
		|	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТранспортноеСообщениеПрисоединенныеФайлы КАК ТранспортноеСообщениеПрисоединенныеФайлы
		|			ПО ТранспортноеСообщениеПрисоединенныеФайлы.ВладелецФайла = СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение
		|				И ТранспортноеСообщениеПрисоединенныеФайлы.ИсходноеИмяФайла = СодержимоеТранспортныхКонтейнеров.ИмяФайла
		|ГДЕ
		|	ТранспортноеСообщениеПрисоединенныеФайлы.ВладелецФайла ЕСТЬ NULL";
	
	СодержимоеТранспортныхКонтейнеров = Запрос.Выполнить().Выгрузить();
	
	Для каждого СодержимоеТранспортногоКонтейнера Из СодержимоеТранспортныхКонтейнеров Цикл
		
		Если Обработано >= МаксимальноеКоличество Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		МенеджерЗаписи = РегистрыСведений.СодержимоеТранспортныхКонтейнеров.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТранспортноеСообщение 	= СодержимоеТранспортногоКонтейнера.ТранспортноеСообщение;
		МенеджерЗаписи.ИмяФайла 				= СодержимоеТранспортногоКонтейнера.ИмяФайла;
		МенеджерЗаписи.Прочитать();
		
		ДвоичныеДанныеФайла 	= МенеджерЗаписи.Данные.Получить();
		Тип 					= МенеджерЗаписи.Тип;
		Идентификатор 			= МенеджерЗаписи.Идентификатор;
		ЭЦПСертификат 			= МенеджерЗаписи.ЭЦПСертификат;
		ЭЦПСтатусПроверки 		= МенеджерЗаписи.ЭЦПСтатусПроверки;
		ЭЦПИмяПодписанногоФайла = МенеджерЗаписи.ЭЦПИмяПодписанногоФайла;
		ЭЦПЭтоПодписьАбонента 	= МенеджерЗаписи.ЭЦПЭтоПодписьАбонента;
		ТипФайлаОтчетностиПФР 	= МенеджерЗаписи.ТипФайлаОтчетностиПФР;
		ТипСодержимогоФайла 	= МенеджерЗаписи.ТипСодержимогоФайла;
		
		Если ДвоичныеДанныеФайла = Неопределено Тогда
			ДвоичныеДанныеФайла = Base64Значение("");
		КонецЕсли;
		
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Неопределено);
		
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
		
		КомпонентыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СодержимоеТранспортногоКонтейнера.ИмяФайла);
		УникальноеИмяФайлаБезРасширения = ОбщегоНазначенияЭДКОКлиентСервер.УникальнаяСтрока(КомпонентыИмениФайла.ИмяБезРасширения, 150);
		РасширениеФайлаБезТочки = Сред(КомпонентыИмениФайла.Расширение, 2);
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", 						Неопределено);
		ПараметрыФайла.Вставить("ВладелецФайлов", 				СодержимоеТранспортногоКонтейнера.ТранспортноеСообщение);
		ПараметрыФайла.Вставить("ИмяБезРасширения", 			УникальноеИмяФайлаБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", 			РасширениеФайлаБезТочки);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	Неопределено);
		
		ИнформацияОбОбновляемомФайле = Новый Структура;
		ИнформацияОбОбновляемомФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
		ИнформацияОбОбновляемомФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
		ИнформацияОбОбновляемомФайле.Вставить("ИмяБезРасширения", 				УникальноеИмяФайлаБезРасширения);
		ИнформацияОбОбновляемомФайле.Вставить("Расширение", 					РасширениеФайлаБезТочки);
		
		Попытка
			МенеджерЗаписи.Записать(Истина);
			
			МассивФайлов = ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(
				СодержимоеТранспортногоКонтейнера.ТранспортноеСообщение,
				"ТранспортноеСообщениеПрисоединенныеФайлы",
				СодержимоеТранспортногоКонтейнера.ИмяФайла);
			
			Если МассивФайлов.Количество() > 0 Тогда
				ПрисоединенныйФайл = МассивФайлов[0];
				РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОбОбновляемомФайле);
				
			Иначе
				НоваяСсылкаНаФайл = РаботаСФайлами.НоваяСсылкаНаФайл(
					СодержимоеТранспортногоКонтейнера.ТранспортноеСообщение,
					"ТранспортноеСообщениеПрисоединенныеФайлы");
				ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла,,, НоваяСсылкаНаФайл);
			КонецЕсли;
			
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			
			ПрисоединенныйФайлОбъект.Тип = Тип;
			ПрисоединенныйФайлОбъект.Идентификатор 				= Идентификатор;
			ПрисоединенныйФайлОбъект.ЭЦПСертификат 				= ЭЦПСертификат;
			ПрисоединенныйФайлОбъект.ЭЦПСтатусПроверки 			= ЭЦПСтатусПроверки;
			ПрисоединенныйФайлОбъект.ЭЦПИмяПодписанногоФайла 	= ЭЦПИмяПодписанногоФайла;
			ПрисоединенныйФайлОбъект.ЭЦПЭтоПодписьАбонента 		= ЭЦПЭтоПодписьАбонента;
			ПрисоединенныйФайлОбъект.ТипФайлаОтчетностиПФР 		= ТипФайлаОтчетностиПФР;
			ПрисоединенныйФайлОбъект.ТипСодержимогоФайла 		= ТипСодержимогоФайла;
			ПрисоединенныйФайлОбъект.ИсходноеИмяФайла 			= СодержимоеТранспортногоКонтейнера.ИмяФайла;
			
			ПрисоединенныйФайлОбъект.Записать();
		Исключение
			ОтменитьТранзакцию();
			УдалитьИзВременногоХранилища(АдресФайла);
			ТекстОшибки = ИнформацияОбОшибке().Описание;
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось сохранить в информационной базе содержимое транспортного контейнера сообщения ""%1"".
						   |%2'"),
				Строка(СодержимоеТранспортногоКонтейнера.ТранспортноеСообщение),
				ТекстОшибки);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Перенос транспортных сообщений в механизм присоединенных файлов'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		УдалитьИзВременногоХранилища(АдресФайла);
		
		Обработано = Обработано + 1;
		
	КонецЦикла;
	
	// перенос транспортных контейнеров
	
	Осталось = МаксимальноеКоличество - Обработано + 1;
	Осталось = ?(Осталось > 0, Осталось, 1);
	ОсталосьСтрокой = Формат(Осталось, "ЧН=0; ЧГ=");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + ОсталосьСтрокой + "
		|	ТранспортныеКонтейнеры.ТранспортноеСообщение КАК ТранспортноеСообщение,
		|	ТранспортныеКонтейнеры.ИмяФайла КАК ИмяФайла
		|ИЗ
		|	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТранспортноеСообщениеКонтейнерыПрисоединенныеФайлы КАК ТранспортноеСообщениеКонтейнерыПрисоединенныеФайлы
		|			ПО ТранспортноеСообщениеКонтейнерыПрисоединенныеФайлы.ВладелецФайла = ТранспортныеКонтейнеры.ТранспортноеСообщение
		|				И ТранспортноеСообщениеКонтейнерыПрисоединенныеФайлы.ИсходноеИмяФайла = ТранспортныеКонтейнеры.ИмяФайла
		|ГДЕ
		|	ТранспортноеСообщениеКонтейнерыПрисоединенныеФайлы.ВладелецФайла ЕСТЬ NULL";
	
	ТранспортныеКонтейнеры = Запрос.Выполнить().Выгрузить();
	
	Для каждого ТранспортныйКонтейнер Из ТранспортныеКонтейнеры Цикл
		
		Если Обработано >= МаксимальноеКоличество Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		МенеджерЗаписи = РегистрыСведений.ТранспортныеКонтейнеры.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТранспортноеСообщение 	= ТранспортныйКонтейнер.ТранспортноеСообщение;
		МенеджерЗаписи.ИмяФайла 				= ТранспортныйКонтейнер.ИмяФайла;
		МенеджерЗаписи.Прочитать();
		
		ДвоичныеДанныеФайла 	= МенеджерЗаписи.Данные.Получить();
		
		Если ДвоичныеДанныеФайла = Неопределено Тогда
			ДвоичныеДанныеФайла = Base64Значение("");
		КонецЕсли;
		
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Неопределено);
		
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
		
		КомпонентыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ТранспортныйКонтейнер.ИмяФайла);
		УникальноеИмяФайлаБезРасширения = ОбщегоНазначенияЭДКОКлиентСервер.УникальнаяСтрока(КомпонентыИмениФайла.ИмяБезРасширения, 150);
		РасширениеФайлаБезТочки = Сред(КомпонентыИмениФайла.Расширение, 2);
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", 						Неопределено);
		ПараметрыФайла.Вставить("ВладелецФайлов", 				ТранспортныйКонтейнер.ТранспортноеСообщение);
		ПараметрыФайла.Вставить("ИмяБезРасширения", 			УникальноеИмяФайлаБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", 			РасширениеФайлаБезТочки);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	Неопределено);
		
		ИнформацияОбОбновляемомФайле = Новый Структура;
		ИнформацияОбОбновляемомФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
		ИнформацияОбОбновляемомФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
		ИнформацияОбОбновляемомФайле.Вставить("ИмяБезРасширения", 				УникальноеИмяФайлаБезРасширения);
		ИнформацияОбОбновляемомФайле.Вставить("Расширение", 					РасширениеФайлаБезТочки);
		
		Попытка
			МенеджерЗаписи.Записать(Истина);
			
			МассивФайлов = ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(
				ТранспортныйКонтейнер.ТранспортноеСообщение,
				"ТранспортноеСообщениеКонтейнерыПрисоединенныеФайлы",
				ТранспортныйКонтейнер.ИмяФайла);
			
			Если МассивФайлов.Количество() > 0 Тогда
				ПрисоединенныйФайл = МассивФайлов[0];
				РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОбОбновляемомФайле);
				
			Иначе
				НоваяСсылкаНаФайл = РаботаСФайлами.НоваяСсылкаНаФайл(
					ТранспортныйКонтейнер.ТранспортноеСообщение,
					"ТранспортноеСообщениеКонтейнерыПрисоединенныеФайлы");
				ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла,,, НоваяСсылкаНаФайл);
			КонецЕсли;
			
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			
			ПрисоединенныйФайлОбъект.ИсходноеИмяФайла = ТранспортныйКонтейнер.ИмяФайла;
			
			ПрисоединенныйФайлОбъект.Записать();
		Исключение
			ОтменитьТранзакцию();
			УдалитьИзВременногоХранилища(АдресФайла);
			ТекстОшибки = ИнформацияОбОшибке().Описание;
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось сохранить в информационной базе транспортный контейнер сообщения ""%1"".
						   |%2'"),
				Строка(ТранспортныйКонтейнер.ТранспортноеСообщение),
				ТекстОшибки);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Перенос транспортных сообщений в механизм присоединенных файлов'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		УдалитьИзВременногоХранилища(АдресФайла);
		
		Обработано = Обработано + 1;
		
	КонецЦикла;
	
	// перенос вложений писем
	
	Осталось = МаксимальноеКоличество - Обработано + 1;
	Осталось = ?(Осталось > 0, Осталось, 1);
	ОсталосьСтрокой = Формат(Осталось, "ЧН=0; ЧГ=");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + ОсталосьСтрокой + "
		|	ВложенияНеформализованныхДокументов.НеформализованныйДокумент КАК НеформализованныйДокумент,
		|	ВложенияНеформализованныхДокументов.ИмяФайла КАК ИмяФайла
		|ИЗ
		|	РегистрСведений.ВложенияНеформализованныхДокументов КАК ВложенияНеформализованныхДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПерепискаСКонтролирующимиОрганамиПрисоединенныеФайлы КАК ПерепискаСКонтролирующимиОрганамиПрисоединенныеФайлы
		|			ПО ПерепискаСКонтролирующимиОрганамиПрисоединенныеФайлы.ВладелецФайла = ВложенияНеформализованныхДокументов.НеформализованныйДокумент
		|				И ПерепискаСКонтролирующимиОрганамиПрисоединенныеФайлы.ИсходноеИмяФайла = ВложенияНеформализованныхДокументов.ИмяФайла
		|ГДЕ
		|	ПерепискаСКонтролирующимиОрганамиПрисоединенныеФайлы.ВладелецФайла ЕСТЬ NULL";
	
	ВложенияНеформализованныхДокументов = Запрос.Выполнить().Выгрузить();
	
	Для каждого ВложениеНеформализованногоДокумента Из ВложенияНеформализованныхДокументов Цикл
		
		Если Обработано >= МаксимальноеКоличество Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		МенеджерЗаписи = РегистрыСведений.ВложенияНеформализованныхДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.НеформализованныйДокумент 	= ВложениеНеформализованногоДокумента.НеформализованныйДокумент;
		МенеджерЗаписи.ИмяФайла 					= ВложениеНеформализованногоДокумента.ИмяФайла;
		МенеджерЗаписи.Прочитать();
		
		ДвоичныеДанныеФайла = МенеджерЗаписи.Данные.Получить();
		Тип 				= МенеджерЗаписи.Тип;
		
		Если ДвоичныеДанныеФайла = Неопределено Тогда
			ДвоичныеДанныеФайла = Base64Значение("");
		КонецЕсли;
		
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Неопределено);
		
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
		
		КомпонентыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВложениеНеформализованногоДокумента.ИмяФайла);
		УникальноеИмяФайлаБезРасширения = ОбщегоНазначенияЭДКОКлиентСервер.УникальнаяСтрока(КомпонентыИмениФайла.ИмяБезРасширения, 150);
		РасширениеФайлаБезТочки = Сред(КомпонентыИмениФайла.Расширение, 2);
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", 						Неопределено);
		ПараметрыФайла.Вставить("ВладелецФайлов", 				ВложениеНеформализованногоДокумента.НеформализованныйДокумент);
		ПараметрыФайла.Вставить("ИмяБезРасширения", 			УникальноеИмяФайлаБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", 			РасширениеФайлаБезТочки);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	Неопределено);
		
		ИнформацияОбОбновляемомФайле = Новый Структура;
		ИнформацияОбОбновляемомФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
		ИнформацияОбОбновляемомФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
		ИнформацияОбОбновляемомФайле.Вставить("ИмяБезРасширения", 				УникальноеИмяФайлаБезРасширения);
		ИнформацияОбОбновляемомФайле.Вставить("Расширение", 					РасширениеФайлаБезТочки);
		
		Попытка
			МенеджерЗаписи.Записать(Истина);
			
			МассивФайлов = ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(
				ВложениеНеформализованногоДокумента.НеформализованныйДокумент,
				"ПерепискаСКонтролирующимиОрганамиПрисоединенныеФайлы",
				ВложениеНеформализованногоДокумента.ИмяФайла);
			
			Если МассивФайлов.Количество() > 0 Тогда
				ПрисоединенныйФайл = МассивФайлов[0];
				РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОбОбновляемомФайле);
				
			Иначе
				НоваяСсылкаНаФайл = РаботаСФайлами.НоваяСсылкаНаФайл(
					ВложениеНеформализованногоДокумента.НеформализованныйДокумент,
					"ПерепискаСКонтролирующимиОрганамиПрисоединенныеФайлы");
				ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла,,, НоваяСсылкаНаФайл);
			КонецЕсли;
			
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			
			ПрисоединенныйФайлОбъект.Тип 				= Тип;
			ПрисоединенныйФайлОбъект.ИсходноеИмяФайла 	= ВложениеНеформализованногоДокумента.ИмяФайла;
			
			ПрисоединенныйФайлОбъект.Записать();
		Исключение
			ОтменитьТранзакцию();
			УдалитьИзВременногоХранилища(АдресФайла);
			ТекстОшибки = ИнформацияОбОшибке().Описание;
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось сохранить в информационной базе вложение письма ""%1"".
						   |%2'"),
				Строка(ВложениеНеформализованногоДокумента.НеформализованныйДокумент),
				ТекстОшибки);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Перенос транспортных сообщений в механизм присоединенных файлов'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		УдалитьИзВременногоХранилища(АдресФайла);
		
		Обработано = Обработано + 1;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область УпрощенноеЗаявлениеНаПодключение

Функция СкорректироватьВидУдостоверения(ВладелецЭЦПВидДокумента) Экспорт
	
	ЭтоПаспортРФ 			= ЭтоПаспортРФ(ВладелецЭЦПВидДокумента);
	ЭтоИностранныйПаспорт 	= ЭтоИностранныйПаспорт(ВладелецЭЦПВидДокумента);
	
	Если ЭтоПаспортРФ Тогда
		Результат = Перечисления.ВидыУдостоверенийВладельцаЭП.ПаспортРФ;
	ИначеЕсли ЭтоИностранныйПаспорт Тогда
		Результат = Перечисления.ВидыУдостоверенийВладельцаЭП.ИностранныйПаспорт;
	Иначе
		Результат = Перечисления.ВидыУдостоверенийВладельцаЭП.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПаспортРФ(Документ) Экспорт
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		КодВидаДокумента  = КонтекстЭДОСервер.ПолучитьКодВидаДокументаФизическогоЛица(Документ); 
		Результат 		  = СокрЛП(Строка(КодВидаДокумента)) = "21"
			ИЛИ Строка(Документ) = НСтр("ru = 'Паспорт гражданина РФ'");
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ПеречислениеСсылка.ВидыУдостоверенийВладельцаЭП") Тогда
		
		Результат = Документ = Перечисления.ВидыУдостоверенийВладельцаЭП.ПаспортРФ;
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоИностранныйПаспорт(Документ) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		КодВидаДокумента  = КонтекстЭДОСервер.ПолучитьКодВидаДокументаФизическогоЛица(Документ); 
		Результат 		  = СокрЛП(Строка(КодВидаДокумента)) = "10";
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ПеречислениеСсылка.ВидыУдостоверенийВладельцаЭП") Тогда
		
		Результат = Документ = Перечисления.ВидыУдостоверенийВладельцаЭП.ИностранныйПаспорт;
		
	Иначе
		
		Результат = Ложь;

	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура ОтправитьОбратнуюСвязьСервер(СпецоператорСвязи, Пакет) Экспорт
	
	РезультатВыполнения = Новый Структура("Выполнено", Истина);
		
	Результат = СоздатьКлиентСервисаПоСпецоператоруСвязи(СпецоператорСвязи);
	Если Результат.Выполнено Тогда
		
		Попытка
			Ответ = Результат.КлиентСервиса.SendPacket(Пакет);
			ОтветXDTO = Дессериализовать(Ответ);
			Если ОтветXDTO.code <> "0" И ОтветXDTO.code <> "60" Тогда
				РезультатВыполнения.Вставить("Выполнено", Ложь);
				Если ОтветXDTO.Свойства().Получить("errorMessage") <> Неопределено Тогда
					РезультатВыполнения.Вставить("ОписаниеОшибки", ОтветXDTO.errorMessage);
				Иначе
					РезультатВыполнения.Вставить("ОписаниеОшибки", "Ошибка при отправке расписки в получении сертификата");
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки 		= КраткоеПредставлениеОшибки(ОбщегоНазначенияЭДКОКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке()));
			КодОсновногоЯзыка	= ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Электронный документооборот с контролирующими органами. Отправка обратной связи'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			
		КонецПопытки;
	
	Иначе
		РезультатВыполнения = Результат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКонтактыПФР(АдресХранилища, КодРегиона, КодПФР) Экспорт
	
	// Листинг всех органов региона 77:
	// http://91.239.5.7:8080/export/controlling-units?request_type=listing&cont_unit_type=1&region_code=77
	// Информация по одному органу:
	// http://91.239.5.7:8080/export/controlling-units?request_type=single_cu_data&cont_unit_type=1&region_code=77&code=087-804
	// Просмотрщик ответов: http://jsonviewer.stack.hu/
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		URL = "http://91.239.5.7:8080/export/controlling-units";
		
		Соединение = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета(URL);
		
		Путь = "/export/controlling-units?request_type=single_cu_data&cont_unit_type=1&region_code=%1&code=%2";
		Путь = СтрШаблон(Путь, КодРегиона, КодПФР);
		
		Запрос = Новый HTTPЗапрос(Путь);
		
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
		
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", 	Ложь);
		Результат.Вставить("Ошибка",    	"");
		Результат.Вставить("КодСостояния", 	Ответ.КодСостояния);
		Результат.Вставить("КодРегиона", 	КодРегиона);
		Результат.Вставить("КодПФР", 		КодПФР);
		Результат.Вставить("ПолныйОтвет", 	Ответ.ПолучитьТелоКакСтроку());
		Результат.Вставить("Путь", 			"http://91.239.5.7:8080" + Путь);
		
		//400	Некорректный запрос (запрос без обязательных параметров)
		//204	Запрос успешный, но в БД нет информации, соответствующей вашему запросу.
		//200	Запрос успешен, найдены данные. Данные находятся в теле ответа.
		//500	Ошибка на стороне сервиса. Мы очень надеемся, что вам никогда не придет такой ответ.
		//503	Сервис временно недоступен. Этот код будет возвращаться тогда, когда сервис находится на обслуживании.
		//405	Недопустимый метод запроса. Допустимые методы перечислены в заголовке ответа.
		
		Если Ответ.КодСостояния = 200 Тогда
			
			ПараметрыОтвета = JsonВСтруктуру(Ответ.ПолучитьТелоКакСтроку());
			
			Телефоны = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ПараметрыОтвета.telephones, ", ");
			
			location = ПараметрыОтвета.location;
			
			ЧастиАдреса = Новый Структура();
			ЧастиАдреса.Вставить("Страна", НСтр("ru = 'Россия'"));
			ЧастиАдреса.Вставить("Индекс", СокрЛП(Строка(location.postcode)));
			ЧастиАдреса.Вставить("Регион", СокрЛП(Строка(location.region_title)));
			
			Если location.region_title <> location.settlement_title Тогда
				ЧастиАдреса.Вставить("Город",  СокрЛП(Строка(location.settlement_title)));
			КонецЕсли;
			
			ЧастиАдреса.Вставить("ГородСокращение", СокрЛП(Строка(location.settlement_type_title_short)));
			ЧастиАдреса.Вставить("Улица",  СокрЛП(Строка(location.address)));
			ЧастиАдреса.Вставить("УлицаСокращение",  СокрЛП(Строка(location.streets_types_title_short)));
			
			АдреcXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(ЧастиАдреса, , Перечисления.ТипыКонтактнойИнформации.Адрес);
			Адрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(АдреcXML,  Перечисления.ТипыКонтактнойИнформации.Адрес);
			
			ЧастиАдреса = Новый Массив();
			ЧастиАдреса.Добавить(Адрес);
			ЧастиАдреса.Добавить(СокрЛП(Строка(location.house)));
			ЧастиАдреса.Добавить(НРег(СокрЛП(Строка(location.construction_type_title_short))));
			ЧастиАдреса.Добавить(СокрЛП(Строка(location.building_number)));
			ЧастиАдреса.Добавить(НРег(СокрЛП(Строка(location.construction_type_title_short_additional))));
			ЧастиАдреса.Добавить(СокрЛП(Строка(location.building_number_additional)));
			
			Адрес = СокрЛП(СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ЧастиАдреса, " ", Истина));
		
			Результат.Вставить("Телефон", 		Телефоны);
			Результат.Вставить("Наименование", 	ПараметрыОтвета.title);
			Результат.Вставить("Адрес", 		Адрес);
			Результат.Вставить("Выполнено", 	Истина);

		КонецЕсли;
		
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами.Получение контактов ПФР http://91.239.5.7:8080/export/controlling-units'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия ,
			УровеньЖурналаРегистрации.Ошибка,,,
			Комментарий);
					
	КонецПопытки;
	
КонецПроцедуры

Функция JsonВСтруктуру(СтрокаJSON, ПараметрыПреобразования = Неопределено)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Если ТипЗнч(ПараметрыПреобразования) = Тип("Структура")
		И ПараметрыПреобразования.Свойство("ИменаСвойствДляВосстановления")
		И ЗначениеЗаполнено(ПараметрыПреобразования.ИменаСвойствДляВосстановления) Тогда
		Объект = ПрочитатьJSON(
			ЧтениеJSON,,,, 
			"ПреобразоватьBase64ВДвоичныеДанные", 
			СервисКриптографииСлужебный, 
			ПараметрыПреобразования,
			ПараметрыПреобразования.ИменаСвойствДляВосстановления);
	Иначе
		Объект = ПрочитатьJSON(ЧтениеJSON);
	КонецЕсли;
	
	ЧтениеJSON.Закрыть();
	
	Возврат Объект;
	
КонецФункции

Процедура НапоминитьПозжеПроЗаявление(ЗаявлениеАбонента, БольшеНеНапоминать = Ложь) Экспорт
	
	Если БольшеНеНапоминать
		И ЗаявлениеАбонента.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено Тогда
		
		// Для отклоненных заявлений не запоминаем признак "Больше не показывать".
		// Проставляем флаг, что заявление обработано и больше о нем напоминать не нужно.
		ОбработкаЗаявленийАбонентаВызовСервера.ОбновитьРеквизитыЗаявления(
			ЗаявлениеАбонента.Ссылка, 
			Новый Структура("НастройкаЗавершена", Истина));
			
	Иначе
		
		Заявления = ХранилищеОбщихНастроек.Загрузить(ОбработкаЗаявленийАбонента.КлючЗаявленийТребующихНапоминанияПозже());
		
		Если Заявления = Неопределено Тогда
			Заявления = ТаблицаЗаявленийТребующихНапоминанияПозже();
		КонецЕсли;
		
		ЗаявлениеВТаблице = Заявления.Найти(ЗаявлениеАбонента, "Заявление");
		Если ЗаявлениеВТаблице = Неопределено Тогда
			ЗаявлениеВТаблице = Заявления.Добавить();
			ЗаявлениеВТаблице.Заявление = ЗаявлениеАбонента;
		Конецесли;
		
		Если БольшеНеНапоминать Тогда
			// Откладываем на "конец времен".
			ЗаявлениеВТаблице.Дата = Дата(3999, 12, 31, 23, 59, 59);
		Иначе
			// Откладываем показ на 4 часа.
			ЗаявлениеВТаблице.Дата = ТекущаяДатаСеанса() + 4 * 60 * 60;
		КонецЕсли;

		ХранилищеОбщихНастроек.Сохранить(ОбработкаЗаявленийАбонента.КлючЗаявленийТребующихНапоминанияПозже(), , Заявления);
		
	КонецЕсли;

КонецПроцедуры

Функция ТаблицаЗаявленийТребующихНапоминанияПозже()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Заявление", 	Новый ОписаниеТипов("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи"));
	Таблица.Колонки.Добавить("Дата", 		Новый ОписаниеТипов("Дата")); // Когда следует начинать напоминать.
	
	Возврат Таблица;

КонецФункции

Функция ПроверитьСериюДокумента(ВидДокумента,СерияДокумента, ТихийРежим = Ложь) Экспорт
	
	ДанныеЗаполненыВерно = Истина;
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		ШаблонПроверки = ПолучитьШаблонПроверки(ВидДокумента);
	Иначе
		Если НЕ ТихийРежим Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите вид документа, удостоверяющего личность сотрудника.'"));
		КонецЕсли;
			
		Возврат Ложь;
	КонецЕсли;
	
	Если ШаблонПроверки <> "SSSSSSSSSSSSSSSSSSSSSSSSS" Тогда
		Если ПустаяСтрока(СерияДокумента) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеЗаполненыВерно;
	
КонецФункции

Функция ПолучитьШаблонПроверки(ДокументФизическогоЛица)
	
	КодДокумента = ПолучитьКодВидаДокументаФизическогоЛица(ДокументФизическогоЛица);
	
	Если ПустаяСтрока(КодДокумента) Тогда
		ЗначениеПоиска = СокрЛП(ДокументФизическогоЛица);
		ПоискПоКоду = Ложь;
	Иначе
		ЗначениеПоиска = КодДокумента;
		ПоискПоКоду = Истина;
	КонецЕсли;
	
	Макет = ПолучитьМакетОбработки("ВидыИКодыДокументовФизическихЛиц");
	
	Для Инд = 1 По Макет.ВысотаТаблицы Цикл
		
		Если ПоискПоКоду Тогда
		ЗначениеМакет = СокрЛП(Макет.Область(Инд, 1, Инд, 1).Текст);
		Иначе
		ЗначениеМакет = СокрЛП(Макет.Область(Инд, 2, Инд, 2).Текст);
		КонецЕсли;
		
		Если НРег(ЗначениеМакет) = НРег(ЗначениеПоиска) Тогда
			Возврат СокрЛП(Макет.Область(Инд, 3, Инд, 3).Текст);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "SSSSSSSSSSSSSSSSSSSSSSSSS";
	
КонецФункции

Процедура НачатьОпределениеТекстаЗаявления(АдресХранилища, ДокументЗаявление) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Выполнено", 		Ложь);
	ДополнительныеПараметры.Вставить("Результат", 		"");
	ДополнительныеПараметры.Вставить("ОписаниеОшибки", 	"");
	ДополнительныеПараметры.Вставить("ТекстОтправляемогоЗаявления", Неопределено);
	
	Попытка
	
		РезультатВыгрузки = ОбработкаЗаявленийАбонента.ВыгрузитьЗаявлениеАбонентаВМоделиСервиса(ДокументЗаявление);
		
		ДополнительныеПараметры.Выполнено = РезультатВыгрузки.Выполнено;
		
		Если ДополнительныеПараметры.Выполнено Тогда
			ДополнительныеПараметры.ТекстОтправляемогоЗаявления = РезультатВыгрузки.Заявление;
		Иначе
			ДополнительныеПараметры.ОписаниеОшибки = РезультатВыгрузки.ОписаниеОшибки;
		КонецЕсли;
		
		ПоместитьВоВременноеХранилище(ДополнительныеПараметры, АдресХранилища);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Получение текста заявления для ЭП в облаке'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия ,
			УровеньЖурналаРегистрации.Ошибка,,,
			Комментарий);
			
		ДополнительныеПараметры.ОписаниеОшибки = НСтр("ru = 'Сервис временно недоступен. Обратитесь в службу поддержки, повторите попытку позже или отправьте заявление без электронного подписания.'");
			
		ПоместитьВоВременноеХранилище(ДополнительныеПараметры, АдресХранилища);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьОтправкуОблачногоЗаявленияВБазуЗаявок(АдресХранилища, ДокументЗаявление) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Выполнено", 		Ложь);
	ДополнительныеПараметры.Вставить("ДанныеЗаявления", Неопределено);
	ДополнительныеПараметры.Вставить("ОписаниеОшибки", 	"");
	
	Попытка
		
		Если ДокументЗаявление.ПодписатьЭП Тогда
			
			СвойстваЗаявления = ОбработкаЗаявленийАбонента.ПодготовитьЗаявление(ДокументЗаявление);
			РезультатОтправки  = МенеджерСервисаКриптографии.ОтправитьПодписанноеЗаявление(СвойстваЗаявления);
			
			ДанныеЗаявления = Новый Структура;
			ДанныеЗаявления.Вставить("ДатаОтправкиЗаявления", ТекущаяДатаСеанса());
			
			Если РезультатОтправки.Выполнено Тогда
				
				Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено");
				
				ДанныеЗаявления.Вставить("ПутьКонтейнерЗакрытогоКлюча", Неопределено);
				ДанныеЗаявления.Вставить("СтатусКомментарий", 			"");
				
			Иначе
				
				Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено");
				
				ДополнительныеПараметры.Вставить("ОписаниеОшибки", 	РезультатОтправки.ОписаниеОшибки);
				
			КонецЕсли;
			
			ДанныеЗаявления.Вставить("Статус", Статус);
			
			ДополнительныеПараметры.Вставить("ДанныеЗаявления", ДанныеЗаявления);
			ДополнительныеПараметры.Вставить("Выполнено", 		РезультатОтправки.Выполнено);
			
		Иначе
			
			ДанныеЗаявления = ОбработкаЗаявленийАбонентаВызовСервера.СформироватьИОтправитьЗаявлениеВМоделиСервиса(ДокументЗаявление.Ссылка);
			ДополнительныеПараметры.Вставить("ДанныеЗаявления", ДанныеЗаявления);
			ДополнительныеПараметры.Вставить("Выполнено", 		ДанныеЗаявления.Выполнено);
			
			Если ДанныеЗаявления.Свойство("ОписаниеОшибки") Тогда
				ДополнительныеПараметры.Вставить("ОписаниеОшибки", 	ДанныеЗаявления.ОписаниеОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		ПоместитьВоВременноеХранилище(ДополнительныеПараметры, АдресХранилища);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Отправка подписанного заявления'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия ,
			УровеньЖурналаРегистрации.Ошибка,,,
			Комментарий);
			
		ДополнительныеПараметры.ОписаниеОшибки = НСтр("ru = 'Сервис временно недоступен. Обратитесь в службу поддержки или повторите попытку позже.'");
			
		ПоместитьВоВременноеХранилище(ДополнительныеПараметры, АдресХранилища);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ТОГСПоРегиону(КодРегиона, Спецоператор) Экспорт
	
	ТаблицаТОГСXML 	= ПолучитьМакетОбработки("КодыТОГС").ПолучитьТекст();
	ТаблицаТОГС 	= ОбщегоНазначения.ПрочитатьXMLВТаблицу(ТаблицаТОГСXML).Данные;
	
	Отбор = Новый Структура();
	Отбор.Вставить("КодРегиона", КодРегиона);
	
	Если ЗначениеЗаполнено(Спецоператор) Тогда
		ИмяКолонкиСпецоператора = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(
			Спецоператор, 
			"СпецоператорСвязи");
		Отбор.Вставить(ИмяКолонкиСпецоператора, "");
	КонецЕсли;
	
	СписокТОГСПоРегиону = ТаблицаТОГС.НайтиСтроки(Отбор);
	
	Если СписокТОГСПоРегиону.Количество() = 1 Тогда
		Возврат СписокТОГСПоРегиону[0].Код;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция НаименованиеТОГСаПоКоду(КодТОГСа, Спецоператор) Экспорт
	
	ТаблицаТОГСXML 	= ПолучитьМакетОбработки("КодыТОГС").ПолучитьТекст();
	ТаблицаТОГС 	= ОбщегоНазначения.ПрочитатьXMLВТаблицу(ТаблицаТОГСXML).Данные;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Код", КодТОГСа);
	
	Если ЗначениеЗаполнено(Спецоператор) Тогда
		ИмяКолонкиСпецоператора = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(
			Спецоператор, 
			"СпецоператорСвязи");
		Отбор.Вставить(ИмяКолонкиСпецоператора, "");
	КонецЕсли;
	
	СписокТОГСПоКоду = ТаблицаТОГС.НайтиСтроки(Отбор);
	
	Если СписокТОГСПоКоду.Количество() = 1 Тогда
		Возврат СписокТОГСПоКоду[0].Наименование;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура НовоеНаправление(Получатели, ТипПолучателя, КодПолучателя, КПП = "", Наименование = "") Экспорт
	
	Отбор = Новый Структура("ТипПолучателя, КодПолучателя, КПП",ТипПолучателя,КодПолучателя,КПП);
	
	Если Получатели.НайтиСтроки(Отбор).Количество() <> 0 Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяСтрокаНаправления = Получатели.Добавить();
	НоваяСтрокаНаправления.ТипПолучателя = ТипПолучателя;
	НоваяСтрокаНаправления.КодПолучателя = КодПолучателя;
	
	Если ЗначениеЗаполнено(КПП) Тогда
		НоваяСтрокаНаправления.КПП = КПП;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		НоваяСтрокаНаправления.Наименование = Наименование;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыПодключенияКПФР(Знач КодРегиона) ЭКспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВРегионеЕстьСвойБланк", 	Ложь);
	ДополнительныеПараметры.Вставить("НазваниеРегиона", 		"");
	ДополнительныеПараметры.Вставить("Ссылка", 					"http://www.pfrf.ru/strahovatelyam/for_employers/edo/");
	
	КонтекстЭДОСервер 	= ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	МакетСоглашенийПФР 	= КонтекстЭДОСервер.ПолучитьМакет("СоглашенияПФР");
	
	КолонкаРегионов 		= МакетСоглашенийПФР.Область(2, 1, МакетСоглашенийПФР.ВысотаТаблицы, 1);
	ОбластьСКодомРегиона 	= МакетСоглашенийПФР.НайтиТекст(КодРегиона, ,КолонкаРегионов, ,Истина);
	
	Если ОбластьСКодомРегиона <> Неопределено Тогда
		
		// Название региона
		ДополнительныеПараметры.Вставить(
			"НазваниеРегиона",
			МакетСоглашенийПФР.Область(ОбластьСКодомРегиона.Верх, 2, ОбластьСКодомРегиона.Верх, 2).Текст);
			
		// Ссылка
		Ссылка = МакетСоглашенийПФР.Область(ОбластьСКодомРегиона.Верх, 4, ОбластьСКодомРегиона.Верх, 4).Текст;
		
		Если ЗначениеЗаполнено(СокрЛП(Ссылка)) Тогда
			ДополнительныеПараметры.Вставить("ВРегионеЕстьСвойБланк", 	Истина);
			ДополнительныеПараметры.Вставить("Ссылка", 					Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;

КонецФункции

Функция ПараметрыФормыНаправлений(Форма) Экспорт
	
	ПараметрыФормы = 
		// ФНС
		"СдаватьВФНС,
		// Росстат
		|СдаватьВРосстат,
		// ПФР
		|СдаватьВПФР,
		|РегНомерПФР,
		|КодПФР,
		// ФСС
		|СдаватьВФСС,
		|РегНомерФСС,
		|ДополнительныйКодФСС,
		// ФСРАР
		|КодРегионаФСРАР,
		|ПодатьЗаявкуНаСертификатДляФСРАР,
		// РПН
		|ПодатьЗаявкуНаПодключениеРПН,
		// ФТС
		|ПодатьЗаявкуНаПодключениеФТС,
		// Поддержка органов
		|ПодатьЗаявкуНаПодключениеФТС,
		|ПризнакПоддержкиПФР,
		|ПризнакПоддержкиРосстат,
		|ПризнакПоддержкиРПН,
		|ПризнакПоддержкиФНС,
		|ПризнакПоддержкиФСРАР,
		|ПризнакПоддержкиФСС,
		|ПризнакПоддержкиФТС,
		// Прочее
		|Организация,
		|Спецоператор,
		|ДанныеОрганизации,
		|КодРегиона,
		|ЭтоЮридическоеЛицо,
		|АдресЮридическийЗначение,
		|ВладелецЭЦПТип,
		|ИПИспользуетТрудНаемныхРаботников,
		|ПризнакОбособленногоПодразделения,
		|ЗапретитьИзменение";
		
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Форма, ПараметрыФормы);
		
	// ФНС
	ТаблицаПолучателейФНС = Форма.РеквизитФормыВЗначение("ПолучателиФНС");
	АдресПолучателейФНС   = ПоместитьВоВременноеХранилище(ТаблицаПолучателейФНС, Новый УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("АдресПолучателейФНС", АдресПолучателейФНС);
	
	// ФСГС
	ТаблицаПолучателейФСГС = Форма.РеквизитФормыВЗначение("ПолучателиФСГС");
	АдресПолучателейФСГС   = ПоместитьВоВременноеХранилище(ТаблицаПолучателейФСГС, Новый УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("АдресПолучателейФСГС", АдресПолучателейФСГС);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция РасширенныеНастройкиУказаныКорректно(
			Форма, 
			МастерДалее = Истина, 
			ВыводитьСообщения = Истина, 
			ЭтоПроверкаИзРасширенныхНастроек = Истина) Экспорт
	
	РезультатПроверкиРеквизитов = Новый Массив;
	ТекстОшибки = "";
	
	// телефон организации
	Если ЗначениеЗаполнено(СокрЛП(Форма.ТелефонОсновной)) Тогда
		
		Если ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
				Форма.ТелефонОсновной, 
				НСтр("ru = 'Телефон организации'"), 
				"ТелефонОсновной",
				Истина,
				ТекстОшибки) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Реквизит    = "ПроверкаТелефонОсновной";
		РезультатПроверки.Поле        = "ТелефонОсновной";
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если 1С:Контрагент недоступен и это юр. лицо, тогда заполняем адрес из 1С:Контрагент'а
	// и не отображаем его в основной форме. В противном случае - отображаем в основной форме.
	Если ЭтоПроверкаИзРасширенныхНастроек И Форма.ЮрАдресВРасширенныхНастройках Тогда
		
		РезультатПроверки = ПроверитьАдресОрганизацииЗаявления(
			Форма.АдресЮридическийЗначение, 
			"АдресЮридическийЗначение", 
			НСтр("ru = 'Юридический адрес'"), 
			НСтр("ru = 'юридического адреса'"), 
			МастерДалее,
			Истина);
		РезультатПроверки.Реквизит = "ПроверкаАдресЮридическийПредставление";
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
	КонецЕсли;
		
	РезультатПроверки = ПроверитьАдресОрганизацииЗаявления(
		Форма.АдресФактическийЗначение, 
		"АдресФактическийЗначение", 
		НСтр("ru = 'Фактический адрес'"), 
		НСтр("ru = 'фактического адреса'"), 
		МастерДалее,
		Истина,
		Истина);
	РезультатПроверки.Реквизит = "ПроверкаАдресФактическийПредставление";
	РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	// Указание мобильного в расширенных настройках возможно только для ЭП в облаке
	Если Форма.ПолучатьСМС И Форма.РежимРаботыСКлючами = 1 Тогда
			
		ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(
			Форма.ТелефонМобильный);
			
		Если ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
			
			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните мобильный телефон'");
			РезультатПроверки.Пустой      = Истина;
			РезультатПроверки.Реквизит    = "ПроверкаТелефонМобильный";
			РезультатПроверки.Поле        = "ТелефонМобильный";
			
			РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
		ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(ТелефонМобильныйБезРазделителей, 11, Истина) Тогда 
			
			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Мобильный телефон должен иметь формат 
					|+7 XXX XXX-XX-XX'");
			РезультатПроверки.Реквизит    = "ПроверкаТелефонМобильный";
			РезультатПроверки.Поле        = "ТелефонМобильный";
			
			РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
		ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
				Форма.ТелефонМобильный, 
				НСтр("ru = 'Телефон мобильный'"), 
				"ТелефонМобильный",
				Истина,
				ТекстОшибки) Тогда
		
			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
			РезультатПроверки.ТекстОшибки = ТекстОшибки;
			РезультатПроверки.Реквизит    = "ПроверкаТелефонМобильный";
			РезультатПроверки.Поле        = "ТелефонМобильный";
			
			РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
		КонецЕсли;
		
	КонецЕсли;

	// Должность
	Если Форма.ЭтоЮридическоеЛицо И Форма.Доступен1СКонтрагент 
		И Форма.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") Тогда
		
		// Если 1С:Контрагент не доступен или выбран не руководитель, то Должность заполняется на основной форме
		
		РезультатПроверки = ПроверитьДолжностьВУпрощенномЗаявлении(Форма, МастерДалее, ВыводитьСообщения);
		РезультатПроверки.Реквизит = "ПроверкаВладелецЭЦПДолжность";
		РезультатПроверки.Поле     = "ВладелецЭЦПДолжность";
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
	КонецЕсли;
	
	// Подразделение
	Если ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦППодразделение, 
			НСтр("ru = 'Подразделение'"), 
			"ВладелецЭЦППодразделение",
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Реквизит    = "ПроверкаВладелецЭЦППодразделение";
		РезультатПроверки.Поле        = "ВладелецЭЦППодразделение";
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	КонецЕсли;
	
	// Рег. номер
	Если Форма.РегНомерВРасширенныхНастройках Тогда
		Если ПустаяСтрока(Форма.НомерОсновнойПоставки1с) Тогда
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните регистрационный номер программы'");
			РезультатПроверки.Пустой	  = Истина;
			РезультатПроверки.Реквизит    = "ПроверкаНомерОсновнойПоставки1с";
			РезультатПроверки.Поле        = "НомерОсновнойПоставки1с";
				
		ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
				Форма.НомерОсновнойПоставки1с, 
				НСтр("ru = 'Регистрационный номер программы'"), 
				"НомерОсновнойПоставки1с", 
				Истина, 
				ТекстОшибки) Тогда
				
			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
			РезультатПроверки.ТекстОшибки = ТекстОшибки;
			РезультатПроверки.Реквизит    = "ПроверкаНомерОсновнойПоставки1с";
			РезультатПроверки.Поле        = "НомерОсновнойПоставки1с";
			
			РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
		КонецЕсли;
	КонецЕсли;

	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;
	
	Возврат РезультатПроверкиРеквизитов;
	
КонецФункции

Функция ПаспортныеДанныеУказаныКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт
	
	ЭтоПаспортРФ = ЭтоПаспортРФ(Форма.ВладелецЭЦПВидДокумента);
	
	РезультатПроверкиРеквизитов = Новый Массив;
	ТекстОшибки = "";
	
	Если ЭтоПаспортРФ Тогда
		Реквизит = "ПроверкаВладелецЭЦПВидДокумента";
	Иначе
		Реквизит = "ПроверкаВладелецЭЦПВидДокумента1";
	Конецесли;
		
	Поле = "ВладелецЭЦПВидДокумента";
	
	// документ, удостоверяющий личность
	Если ПустаяСтрока(Форма.ВладелецЭЦПВидДокумента) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните поле ""Вид документа""'");
		РезультатПроверки.Пустой      = Истина;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦПВидДокумента,
			НСтр("ru = 'Вид документа'"),
			Поле,
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПолучитьКодВидаДокументаФизическогоЛица(Форма.ВладелецЭЦПВидДокумента)) Тогда
		
		ТекстОшибки = НСтр("ru = 'Заполните код ИФНС в виде документа ""%1""'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(Форма.ВладелецЭЦПВидДокумента));
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	КонецЕсли;
	
	// серия
	
	Если ЭтоПаспортРФ Тогда
		Реквизит = "ПроверкаВладелецЭЦПСерияДокумента";
	Иначе
		Реквизит = "ПроверкаВладелецЭЦПСерияДокумента1";
	КонецЕсли;
	
	Поле = "ВладелецЭЦПСерияДокумента";
	ВладелецЭЦПСерияДокументаБезРезделителя = ДокументооборотСКОКлиентСервер.УдалитьРазделители(Форма.ВладелецЭЦПСерияДокумента);
	Если ПустаяСтрока(Форма.ВладелецЭЦПСерияДокумента) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните поле ""Серия""'");
		РезультатПроверки.Пустой      = Истина;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦПСерияДокумента, 
			НСтр("ru = 'Серия'"), 
			Поле,
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	ИначеЕсли ЭтоПаспортРФ И НЕ ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(ВладелецЭЦПСерияДокументаБезРезделителя, 4, Истина) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Серия паспорта должна состоять из 4 цифр'");
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	КонецЕсли;
	
	// номер
	
	Если ЭтоПаспортРФ Тогда
		Реквизит = "ПроверкаВладелецЭЦПНомерДокумента";
	Иначе
		Реквизит = "ПроверкаВладелецЭЦПНомерДокумента1";
	КонецЕсли;
	
	Поле = "ВладелецЭЦПНомерДокумента";
	
	Если ПустаяСтрока(Форма.ВладелецЭЦПНомерДокумента) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните поле ""Номер""'");
		РезультатПроверки.Пустой      = Истина;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦПНомерДокумента, 
			НСтр("ru = 'Номер'"), 
			Поле,
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	ИначеЕсли ЭтоПаспортРФ И НЕ ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(Форма.ВладелецЭЦПНомерДокумента, 6, Истина) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Номер паспорта должен состоять из 6 цифр'");
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
	
	КонецЕсли;
	
	// кем выдан
	
	Если ЭтоПаспортРФ Тогда
		Реквизит = "ПроверкаВладелецЭЦПКемВыданДокумент";
	Иначе
		Реквизит = "ПроверкаВладелецЭЦПКемВыданДокумент1";
	КонецЕсли;
	
	Поле = "ВладелецЭЦПКемВыданДокумент";
	
	Если ПустаяСтрока(Форма.ВладелецЭЦПКемВыданДокумент) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните поле ""Документ выдан""'");
		РезультатПроверки.Пустой      = Истина;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦПКемВыданДокумент, 
			НСтр("ru = 'Документ выдан'"), 
			Поле,
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	КонецЕсли;
	
	// дата выдачи
	
	Если ЭтоПаспортРФ Тогда
		Реквизит = "ПроверкаВладелецЭЦПДатаВыдачиДокумента";
	Иначе
		Реквизит = "ПроверкаВладелецЭЦПДатаВыдачиДокумента1";
	КонецЕсли;
	
	Поле = "ВладелецЭЦПДатаВыдачиДокумента";
	
	Если НЕ ЗначениеЗаполнено(Форма.ВладелецЭЦПДатаВыдачиДокумента) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните поле ""Дата выдачи""'");
		РезультатПроверки.Пустой      = Истина;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	ИначеЕсли Форма.ВладелецЭЦПДатаВыдачиДокумента > ТекущаяДатаСеанса() ИЛИ Год(Форма.ВладелецЭЦПДатаВыдачиДокумента) < 1900 Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указана дата выдачи'");
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	КонецЕсли;
	
	// Код подразделения. Только для паспорта РФ.
	
	Если ЭтоПаспортРФ Тогда
		
		Реквизит = "ПроверкаВладелецЭЦПКодПодразделения";
		Поле     = "ВладелецЭЦПКодПодразделения";
		
		КодПодразделенияБезТире = СтрЗаменить(Форма.ВладелецЭЦПКодПодразделения, "-","");
		Если ПустаяСтрока(КодПодразделенияБезТире) Тогда
			
			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните поле ""Код подразделения""'");
			РезультатПроверки.Пустой      = Истина;
			РезультатПроверки.Реквизит    = Реквизит;
			РезультатПроверки.Поле        = Поле;
			
			РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
		ИначеЕсли СтрДлина(Форма.ВладелецЭЦПКодПодразделения) = 6
			И ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(КодПодразделенияБезТире, 6, Истина) Тогда
			
			// Не ошибка. Написан без тире. Исправляем сами.
			Форма.ВладелецЭЦПКодПодразделения = 
				Лев(Форма.ВладелецЭЦПКодПодразделения, 3)
				+ "-"
				+ Прав(Форма.ВладелецЭЦПКодПодразделения, 3);
			
		ИначеЕсли СтрДлина(Форма.ВладелецЭЦПКодПодразделения) <> 7
			ИЛИ НЕ ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(КодПодразделенияБезТире, 6, Истина) Тогда
			
			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Код подразделения не соответствует маске ХХХ-ХХХ, где X – любая цифра'");
			РезультатПроверки.Реквизит    = Реквизит;
			РезультатПроверки.Поле        = Поле;
			
			РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
		КонецЕсли;
	КонецЕсли;

	// Пол
	Если ЭтоПаспортРФ Тогда
		Реквизит = "ПроверкаВладелецЭЦППол";
	Иначе
		Реквизит = "ПроверкаВладелецЭЦППол1";
	КонецЕсли;
	
	Поле = "ВладелецЭЦППол";
	
	Если НЕ ЗначениеЗаполнено(Форма.ВладелецЭЦППол) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните поле ""Пол""'");
		РезультатПроверки.Пустой      = Истина;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	КонецЕсли;

	// Дата рождения
	Если ЭтоПаспортРФ Тогда
		Реквизит = "ПроверкаВладелецЭЦПДатаРождения";
	Иначе
		Реквизит = "ПроверкаВладелецЭЦПДатаРождения1";
	КонецЕсли;
	Поле     = "ВладелецЭЦПДатаРождения";
	
	Если Не ЗначениеЗаполнено(Форма.ВладелецЭЦПДатаРождения) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните поле ""Дата рождения""'");
		РезультатПроверки.Пустой      = Истина;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	ИначеЕсли Год(Форма.ВладелецЭЦПДатаРождения) = Год(ТекущаяДатаСеанса())
		ИЛИ Форма.ВладелецЭЦПДатаРождения > ТекущаяДатаСеанса()
		ИЛИ Год(Форма.ВладелецЭЦПДатаРождения) < 1900 Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Указано некорректное значение в поле ""Дата рождения""'");
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);

	КонецЕсли;
	
	// Место рождения
	Если ЭтоПаспортРФ Тогда
		Реквизит = "ПроверкаВладелецЭЦПМестоРождения";
	Иначе
		Реквизит = "ПроверкаВладелецЭЦПМестоРождения1";
	КонецЕсли;
	
	Поле = "ВладелецЭЦПМестоРождения";
	
	Если ПустаяСтрока(Форма.ВладелецЭЦПМестоРождения) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните поле ""Место рождения""'");
		РезультатПроверки.Пустой      = Истина;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦПКемВыданДокумент, 
			НСтр("ru = 'Документ выдан'"), 
			Поле,
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);

	КонецЕсли;
	
	// Гражданство
	
	Если ЭтоПаспортРФ Тогда
		Реквизит = "ПроверкаВладелецЭЦПГражданство";
	Иначе
		Реквизит = "ПроверкаВладелецЭЦПГражданство1";
	Конецесли;
	Поле = "ВладелецЭЦПГражданство";
	
	Если НЕ ЗначениеЗаполнено(Форма.ВладелецЭЦПГражданство) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните поле ""Гражданство""'");
		РезультатПроверки.Пустой      = Истина;
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	ИначеЕсли НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.КодАльфа2Заполнен(Форма.ВладелецЭЦПГражданство)
		И Форма.ВладелецЭЦПГражданство <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия") Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните код альфа-2 у страны, указанной в качестве гражданства сотрудника-владельца ЭП'");
		РезультатПроверки.Реквизит    = Реквизит;
		РезультатПроверки.Поле        = Поле;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	КонецЕсли;

	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;
	
	Возврат РезультатПроверкиРеквизитов;
	
КонецФункции

Функция ПроверитьДолжностьВУпрощенномЗаявлении(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина, ТекстОшибки = "") Экспорт
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = "ВладелецЭЦПДолжность";
	
	Если Форма.ЭтоЮридическоеЛицо Тогда
		
		Если ПустаяСтрока(Форма.ВладелецЭЦПДолжность) Тогда
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните поле ""Должность""'");
			РезультатПроверки.Пустой	  = Истина;
			
		ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
				Форма.ВладелецЭЦПДолжность, 
				НСтр("ru = 'Должность'"), 
				"ВладелецЭЦПДолжность",
				Истина,
				ТекстОшибки) Тогда
			
			РезультатПроверки.ТекстОшибки = ТекстОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	Возврат РезультатПроверки;
		
КонецФункции

Функция НаправленияУказаныКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт
	
	РезультатПроверкиРеквизитов = Новый Массив;
	ТекстОшибки = "";
	
	// ФНС ////////////////////////////////////////////////////////////////////////
	
	Реквизит = "ПроверкаСдаватьВФНС";
	Поле     = "ПолучателиФНС";
	
	Если Форма.ПризнакПоддержкиФНС И Форма.СдаватьВФНС Тогда
		
		Если Форма.ПолучателиФНС.Количество()=0 Тогда
			
			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните коды ФНС'");
			РезультатПроверки.Реквизит    = Реквизит;
			РезультатПроверки.Поле        = Поле;
			
			РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
		Иначе
				
			Для каждого Получатель Из Форма.ПолучателиФНС Цикл
				
				Если НЕ ЗначениеЗаполнено(Получатель.КодПолучателя) Тогда
					
					РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
					РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните код ИФНС'");
					РезультатПроверки.Реквизит    = Реквизит;
					РезультатПроверки.Поле        = Поле;
					
					РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
					
				КонецЕсли;
				
				Если Форма.ЭтоЮридическоеЛицо И НЕ ЗначениеЗаполнено(Получатель.КПП) Тогда
					
					РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
					РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните КПП'");
					РезультатПроверки.Реквизит    = Реквизит;
					РезультатПроверки.Поле        = Поле;
					
					РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
					
				КонецЕсли;
				
				Если ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
						Получатель.КПП, 
						НСтр("ru = 'КПП'"), 
						"ПолучателиФНС", 
						Истина,
						ТекстОшибки) Тогда
						
					РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
					РезультатПроверки.ТекстОшибки = ТекстОшибки;
					РезультатПроверки.Реквизит    = Реквизит;
					РезультатПроверки.Поле        = Поле;
					
					РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
					
				КонецЕсли;
				
				Если ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
						Получатель.КодПолучателя, 
						НСтр("ru = 'Код ФНС'"), 
						"ПолучателиФНС", 
						Истина,
						ТекстОшибки) Тогда
					
					РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
					РезультатПроверки.ТекстОшибки = ТекстОшибки;
					РезультатПроверки.Реквизит    = Реквизит;
					РезультатПроверки.Поле        = Поле;
					
					РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
					
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли;
	
	// Росстат ////////////////////////////////////////////////////////////////////////
	
	Реквизит = "ПроверкаСдаватьВРосстат";
	Поле     = "ПолучателиФСГС";
	
	Если Форма.ПризнакПоддержкиРосстат И Форма.СдаватьВРосстат Тогда
		
		Если Форма.ПолучателиФСГС.Количество() = 0 Тогда
			
			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните коды органа Росстата'");
			РезультатПроверки.Реквизит    = Реквизит;
			РезультатПроверки.Поле        = Поле;
			
			РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);

		ИначеЕсли Форма.ПолучателиФСГС.Количество() > 0 Тогда
			
			Для каждого Получатель Из Форма.ПолучателиФСГС Цикл
				
				Если ПустаяСтрока(СтрЗаменить(Получатель.КодПолучателя,"-","")) Тогда
					
					РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
					РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните поле ""Код органа Росстата""'");
					РезультатПроверки.Реквизит    = Реквизит;
					РезультатПроверки.Поле        = Поле;
					
					РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
					
				ИначеЕсли СтрДлина(СокрЛП(Получатель.КодПолучателя))<> 5 Тогда
					
					РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
					РезультатПроверки.ТекстОшибки = НСтр("ru = 'Код органа Росстата должен состоять из 4 цифр'");
					РезультатПроверки.Реквизит    = Реквизит;
					РезультатПроверки.Поле        = Поле;
					
					РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);

				ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
						Получатель.КодПолучателя, 
						НСтр("ru = 'Код органа Росстата'"), 
						"ПолучателиФСГС", 
						Истина,
						ТекстОшибки) Тогда
					
					РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
					РезультатПроверки.ТекстОшибки = ТекстОшибки;
					РезультатПроверки.Реквизит    = Реквизит;
					РезультатПроверки.Поле        = Поле;
					
					РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
					
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;
	
	// ПФР ////////////////////////////////////////////////////////////////////////
	
	Форма.РегНомерПФР = СокрЛП(Форма.РегНомерПФР);
	Форма.КодПФР = СокрЛП(Форма.КодПФР);
		
	Если Форма.ПризнакПоддержкиПФР И Форма.СдаватьВПФР Тогда
		
		// ПФР
		Форма.РегНомерПФР = СокрЛП(Форма.РегНомерПФР);
		Форма.КодПФР = СокрЛП(Форма.КодПФР);
			
		Если Форма.ПризнакПоддержкиПФР И Форма.СдаватьВПФР Тогда
			
			// Рег. номер ПФР
			РегНомерПФРБезТире = ДокументооборотСКОКлиентСервер.УдалитьРазделители(Форма.РегНомерПФР);
			РегНомерПФРПустой  = ПустаяСтрока(СтрЗаменить(РегНомерПФРБезТире,"-",""));
			
			Если РегНомерПФРПустой Тогда 
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните регистрационный номер в ПФР'");
				РезультатПроверки.Пустой      = Истина;
				РезультатПроверки.Реквизит    = "ПроверкаРегНомерПФР";
				РезультатПроверки.Поле        = "РегНомерПФР";
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
			ИначеЕсли СтрДлина(РегНомерПФРБезТире) >= 12 
				И ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(РегНомерПФРБезТире, СтрДлина(РегНомерПФРБезТире), Истина) Тогда
				
				// Не ошибка. Написан без тире. Исправляем сами.
				Форма.РегНомерПФР = 
					Лев(РегНомерПФРБезТире, 3)
					+ "-"
					+ Сред(РегНомерПФРБезТире, 4, 3)
					+ "-"
					+ Сред(РегНомерПФРБезТире, 7, 6);

			ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьРегистрационныйНомерПФР(Форма.РегНомерПФР, Истина) Тогда
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Регистрационный номер в ПФР должен состоять из 12 цифр (ХХХ-ХХХ-ХХХХХХ)'");
				РезультатПроверки.Реквизит    = "ПроверкаРегНомерПФР";
				РезультатПроверки.Поле        = "РегНомерПФР";
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
				
			КонецЕсли;
				
			// Код отделения ПФР
			КодПФРБезТире = ДокументооборотСКОКлиентСервер.УдалитьРазделители(Форма.КодПФР);
			Если ПустаяСтрока(СтрЗаменить(Форма.КодПФР,"-","")) Тогда
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните поле ""Код отделения ПФР""'");
				РезультатПроверки.Пустой      = Истина;
				РезультатПроверки.Реквизит    = "ПроверкаКодПФР";
				РезультатПроверки.Поле        = "КодПФР";
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);

			ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
					Форма.КодПФР, 
					НСтр("ru = 'Код отделения ПФР'"), 
					"КодПФР", 
					Истина,
					ТекстОшибки) Тогда
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.ТекстОшибки = ТекстОшибки;
				РезультатПроверки.Реквизит    = "ПроверкаКодПФР";
				РезультатПроверки.Поле        = "КодПФР";
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
				
			ИначеЕсли СтрДлина(КодПФРБезТире) >= 6
				И ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(КодПФРБезТире, СтрДлина(КодПФРБезТире), Истина) Тогда
				
				// Не ошибка. Написан без тире. Исправляем сами.
				Форма.КодПФР = 
					Лев(КодПФРБезТире, 3)
					+ "-"
					+ Сред(КодПФРБезТире, 4, 3);
					
			ИначеЕсли СтрДлина(СокрЛП(Форма.КодПФР))<> 7 ИЛИ СтрДлина(КодПФРБезТире) <> 6 Тогда
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Код отделения ПФР должен состоять из 6 цифр'");
				РезультатПроверки.Реквизит    = "ПроверкаКодПФР";
				РезультатПроверки.Поле        = "КодПФР";
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
					
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	// ФСС ////////////////////////////////////////////////////////////////////////
	Если Форма.ПризнакПоддержкиФСС И Форма.СдаватьВФСС Тогда
		
		// дополнительный код ФСС
		Если Форма.ПризнакОбособленногоПодразделения И Форма.ЭтоЮридическоеЛицо Тогда
			
			Если ПустаяСтрока(Форма.ДополнительныйКодФСС) Тогда 
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните дополнительный код ФСС'");
				РезультатПроверки.Пустой      = Истина;
				РезультатПроверки.Реквизит    = "ПроверкаДополнительныйКодФСС";
				РезультатПроверки.Поле        = "ДополнительныйКодФСС";
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
			
			ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(Форма.ДополнительныйКодФСС, 10, Истина) Тогда
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Дополнительный код ФСС должен состоять из 10 цифр'");
				РезультатПроверки.Реквизит    = "ПроверкаДополнительныйКодФСС";
				РезультатПроверки.Поле        = "ДополнительныйКодФСС";
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
				
			КонецЕсли;
			
		Иначе
			
			// регистрационный номер в ФСС
			Если ПустаяСтрока(Форма.РегНомерФСС) Тогда 
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните регистрационный номер в ФСС'");
				РезультатПроверки.Пустой      = Истина;
				РезультатПроверки.Реквизит    = "ПроверкаРегНомерФСС";
				РезультатПроверки.Поле        = "РегНомерФСС";
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
				
			ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(Форма.РегНомерФСС, 10, Истина) Тогда
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Регистрационный номер в ФСС должен состоять из 10 цифр'");
				РезультатПроверки.Реквизит    = "ПроверкаРегНомерФСС";
				РезультатПроверки.Поле        = "РегНомерФСС";
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	// ФСРАР ////////////////////////////////////////////////////////////////////////
	Если Форма.ПризнакПоддержкиФСРАР И Форма.ПодатьЗаявкуНаСертификатДляФСРАР Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.КодРегионаФСРАР) Тогда
			
			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните регион для Росалкогольрегулирования'");
			РезультатПроверки.Пустой      = Истина;
			РезультатПроверки.Реквизит    = "ПроверкаКодРегионаФСРАР";
			РезультатПроверки.Поле        = "КодРегионаФСРАР";
			
			РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);

		Иначе
				
			СхемаСдачиОтчетности = СхемаСдачиОтчетностиФСРАРпоКодуРегиона(Форма.КодРегионаФСРАР);
				
			Если СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную") Тогда
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните регион для Росалкогольрегулирования'");
				РезультатПроверки.Пустой      = Истина;
				РезультатПроверки.Реквизит    = "ПроверкаКодРегионаФСРАР";
				РезультатПроверки.Поле        = "КодРегионаФСРАР";
				
				РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
					
			КонецЕсли;
				
		КонецЕсли;

	КонецЕсли;
	
	// Сочетаемость выбранных контролирующих органов ////////////////////////////////////////////////////////////////////////
	Если НЕ (Форма.СдаватьВФНС 
		ИЛИ Форма.СдаватьВПФР 
		ИЛИ Форма.СдаватьВФСС 
		ИЛИ Форма.СдаватьВРосстат 
		ИЛИ Форма.ПодатьЗаявкуНаСертификатДляФСРАР 
		ИЛИ Форма.ПодатьЗаявкуНаПодключениеРПН 
		ИЛИ Форма.ПодатьЗаявкуНаПодключениеФТС) Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Укажите хотя бы один контролирующий орган, в который будет сдаваться отчетность'");
		РезультатПроверки.Реквизит    = "ПроверкаСдаватьВФНС";
		РезультатПроверки.Поле        = "ПолучателиФНС";
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	ИначеЕсли НЕ Форма.СдаватьВФНС 
		И НЕ Форма.СдаватьВПФР Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Среди контролирующих органов, в которые будет сдаваться отчетность, должены быть ФНС или ПФР'");
		РезультатПроверки.Реквизит    = "ПроверкаСдаватьВФНС";
		РезультатПроверки.Поле        = "ПолучателиФНС";
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	КонецЕсли;
	
	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;
	
	Возврат РезультатПроверкиРеквизитов;
	
КонецФункции

Процедура ВывестиОшибку(
		Знач ТекстСообщенияПользователю,
		Знач Поле = "",
		Знач УникальныйИдентификатор,
		ПроверкаПройдена = Истина) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
	Сообщение.Сообщить();
	
	ПроверкаПройдена = Ложь;
	
КонецПроцедуры

Функция СхемаСдачиОтчетностиФСРАР(ФедеральныйПортал, ТипПортала, КодРегиона) Экспорт
	
	Если ФедеральныйПортал Тогда
		Результат = Перечисления.СхемыСдачиОтчетностиФСРАР.ФедеральныйСервер;
		
	ИначеЕсли ТипПортала = "Общий" Тогда
		Результат = Перечисления.СхемыСдачиОтчетностиФСРАР.ОбщийРегиональныйИФедеральныйСервер;
		
	ИначеЕсли ТипПортала = "Типовой" Тогда
		Результат = Перечисления.СхемыСдачиОтчетностиФСРАР.ТиповойРегиональныйИФедеральныйСерверы;
		
	ИначеЕсли ТипПортала = "СвояРеализация" И КодРегиона = "77" Тогда
		Результат = Перечисления.СхемыСдачиОтчетностиФСРАР.МосковскийРегиональныйИФедеральныйСерверы;
		
	Иначе
		Результат = Перечисления.СхемыСдачиОтчетностиФСРАР.СдачаВручную;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СхемаСдачиОтчетностиФСРАРпоКодуРегиона(КодРегионаФСРАР) Экспорт
	
	ИнформацияОРегионе = ИнформацияОРегионеФСРАР(КодРегионаФСРАР);
		
	Если ИнформацияОРегионе = Неопределено Тогда
		
		СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную");
		
	Иначе
		
		СхемаСдачиОтчетности = СхемаСдачиОтчетностиФСРАР(
			Ложь, 
			ИнформацияОРегионе.ТипПортала, 
			КодРегионаФСРАР);
			
	КонецЕсли;
		
	Возврат СхемаСдачиОтчетности;
	
КонецФункции

Функция ПроверитьПараметры1СЭДО(Форма, ТихийРежим = Ложь) Экспорт
	
	МастерДалее = Истина;
	
	Если Форма.ПодключитьЭДО Тогда
	
		// оператор ЭДО
		Если НЕ ЗначениеЗаполнено(Форма.ОператорЭДО) Тогда
			
			Если ТихийРежим Тогда
				МастерДалее = Ложь;
			Иначе
				ВывестиОшибку(
					НСтр("ru = 'Заполните поле ""Оператор ЭДО""'"), 
					"ОператорЭДО",
					Форма.УникальныйИдентификатор,
					МастерДалее);
			КонецЕсли;
			
		КонецЕсли;
		
		// код ФНС
		Если ПустаяСтрока(Форма.КодНалоговогоОрганаЭДО) Тогда
			
			Если ТихийРежим Тогда
				МастерДалее = Ложь;
			Иначе
				ВывестиОшибку(
					НСтр("ru = 'Заполните поле ""Код ФНС""'"), 
					"КодНалоговогоОрганаЭДО",
					Форма.УникальныйИдентификатор,
					МастерДалее);
			КонецЕсли;
			
		ИначеЕсли СтрДлина(СокрЛП(Форма.КодНалоговогоОрганаЭДО))<> 4 Тогда
			
			Если ТихийРежим Тогда
				МастерДалее = Ложь;
			Иначе
				ВывестиОшибку(
					НСтр("ru = 'Код ФНС должен состоять из 4 цифр'"), 
					"КодНалоговогоОрганаЭДО",
					Форма.УникальныйИдентификатор,
					МастерДалее);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МастерДалее;
	
КонецФункции

Функция ПользователиУказаныКорректно(Форма, ТихийРежим = Ложь) Экспорт
	
	МастерДалее = Истина;
	
	ВыбранХотяБыОдинПользователь = Ложь;
	Для Каждого ЭлементСписка Из Форма.СписокПользователей Цикл
		
		Если ЭлементСписка.Пометка Тогда 
			ВыбранХотяБыОдинПользователь = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Форма.СписокПользователей.Количество() > 0 И НЕ ВыбранХотяБыОдинПользователь Тогда
		
		Если ТихийРежим Тогда
			МастерДалее = Ложь;
		Иначе
			ВывестиОшибку(
				НСтр("ru = 'Укажите хотя бы одного пользователя'"), 
				"СписокПользователей",
				Форма.УникальныйИдентификатор,
				МастерДалее);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат МастерДалее;
	
КонецФункции

Процедура ОтобразитьРезультатПроверкиРеквизитов(Форма, РезультатПроверки) Экспорт
	
	Элементы = Форма.Элементы;
	
	Для Каждого Элемент Из Элементы Цикл
		Если СтрНайти(Элемент.Имя, "Проверка") 
			И НЕ СтрНайти(Элемент.Имя, "РасширеннаяПодсказка") Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого РезультатПроверкиРеквизита Из РезультатПроверки Цикл
		
		РеквизитПроверки = Элементы[РезультатПроверкиРеквизита.Реквизит];
		
		Если НЕ РезультатПроверкиРеквизита.Пустой И РезультатПроверкиРеквизита.ТекстОшибки <> "" Тогда
			РеквизитПроверки.Видимость = Истина;
			РеквизитПроверки.Подсказка = РезультатПроверкиРеквизита.ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаРасписки

Функция ПрисоединитьФайлЗаявления(Заявление, АдресФайлаВоВременномХранилище, ИмяДокумента, РасширениеБезТочки = "xml") Экспорт
	
	СтрокаТаблицыЗаявление = Неопределено;
	Для Каждого СтрокаТаблицы Из Заявление.ЭлектронныеДокументы Цикл
		Если СтрокаТаблицы.Документ = ИмяДокумента Тогда
			СтрокаТаблицыЗаявление = СтрокаТаблицы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаТаблицыЗаявление <> Неопределено Тогда
		ИнформацияОФайле = Новый Структура;
		ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
		ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
		
		РаботаСФайлами.ОбновитьФайл(СтрокаТаблицыЗаявление.Файл, ИнформацияОФайле);
		
		СтрокаТаблицыЗаявление.Размер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицыЗаявление.Файл, "Размер");
		
		Возврат СтрокаТаблицыЗаявление.Файл;
		
	Иначе
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", 				Пользователи.ТекущийПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", 		Заявление.Ссылка);
		ПараметрыФайла.Вставить("ИмяБезРасширения", 	ИмяДокумента);
		ПараметрыФайла.Вставить("РасширениеБезТочки", 	РасширениеБезТочки);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);
		
		НоваяСтрока = Заявление.ЭлектронныеДокументы.Добавить();
		НоваяСтрока.Документ = ИмяДокумента;
		НоваяСтрока.Файл     = ПрисоединенныйФайл;
		НоваяСтрока.Размер   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "Размер");
		
		Возврат ПрисоединенныйФайл;
		
	КонецЕсли;

КонецФункции

Функция ПолучитьФайлАвтонастройки(СпецоператорСвязи, ИдентификаторАбонента, ДатаПоследнегоОбновления = Неопределено) Экспорт
	
	РезультатВыполнения = Новый Структура("Выполнено", Ложь);
	
	Результат = СоздатьКлиентСервисаПоСпецоператоруСвязи(СпецоператорСвязи);
	Если Не Результат.Выполнено Тогда
		Если Результат.Свойство("Результат") Тогда
 			РезультатВыполнения.Вставить("ОписаниеОшибки", Результат.ОписаниеОшибки);
		КонецЕсли;
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Попытка
		ДатаПоследнегоОбновления = ?(ЗначениеЗаполнено(ДатаПоследнегоОбновления), ДатаПоследнегоОбновления, Дата(1, 1, 1));
		Ответ = Результат.КлиентСервиса.ReceiveUpdatedPacket(ИдентификаторАбонента, ДатаПоследнегоОбновления);
		ОтветXDTO = Дессериализовать(Ответ);
		
		Результат = ОбработатьОтвет(ОтветXDTO);
		Если Результат.Выполнено Тогда
			Если Результат.ОбновлениеНеТребуется Тогда
				// получить файл из регистра
			Иначе
				Файлы = Разархивировать(ПоместитьВоВременноеХранилище(Результат.Пакет));
				Если Файлы.Количество() = 1 Тогда
					
					НастройкаXDTO = Дессериализовать(Файлы[0].Адрес);
					
					КонфЧасть = НастройкаXDTO.КонфиденциальнаяИнформация;
					
					РезультатВыполнения.Вставить("Выполнено", Истина);
					РезультатВыполнения.Вставить("КонфиденциальнаяИнформация", ПоместитьВоВременноеХранилище(Base64Значение(НастройкаXDTO.КонфиденциальнаяИнформация), Новый УникальныйИдентификатор));
					РезультатВыполнения.Вставить("Настройки", Файлы[0].Адрес);
					
					Возврат РезультатВыполнения;
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Результат.Свойство("Результат") Тогда
 				РезультатВыполнения.Вставить("ОписаниеОшибки", Результат.ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			"Электронный документооборот с контролирующими органами.Создание клиента сервиса",
		    УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		РезультатВыполнения.Выполнено = Ложь;
 		РезультатВыполнения.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция Разархивировать(ИмяИлиАдресФайлаАрхива) Экспорт

	Если ЭтоАдресВременногоХранилища(ИмяИлиАдресФайлаАрхива) Тогда
		ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
		ПолучитьИзВременногоХранилища(ИмяИлиАдресФайлаАрхива).Записать(ИмяФайлаАрхива);
		ВернутьКакАдрес = Истина;	
	Иначе
		ИмяФайлаАрхива = ИмяИлиАдресФайлаАрхива;
		ВернутьКакАдрес = Ложь;
	КонецЕсли;
	
	КаталогДляИзвлечения = ОперацииСФайламиЭДКО.СоздатьВременныйКаталог();
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
	ЧтениеZipФайла.ИзвлечьВсе(КаталогДляИзвлечения);
	
	
	Файлы = НайтиФайлы(КаталогДляИзвлечения, "*"); 
	
	ОписанияФайлов = Новый Массив;
	Для Каждого Файл Из Файлы Цикл
		ОписаниеФайла = Новый Структура;
		Если ВернутьКакАдрес Тогда
			ОписаниеФайла.Вставить("Адрес", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя), Новый УникальныйИдентификатор));			
		Иначе
			ОписаниеФайла.Вставить("Путь", Файл.Путь);
		КонецЕсли;
		ОписаниеФайла.Вставить("Имя", Файл.Имя);
		ОписанияФайлов.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	Если ВернутьКакАдрес Тогда
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогДляИзвлечения);
	КонецЕсли;
	
	Возврат ОписанияФайлов;	
	
КонецФункции

Функция ОбработатьОтвет(ОтветXDTO)
	
	Результат = Новый Структура("Выполнено,ОбновлениеНеТребуется", Ложь, Ложь);
	Если ОтветXDTO.code = "0" ИЛИ ОтветXDTO.code = "11" Тогда
		
		Если ОтветXDTO.Свойства().Получить("packet") <> Неопределено Тогда
			Результат.Выполнено = Истина;
			Результат.Вставить("Пакет", Base64Значение(ОтветXDTO.packet));
		ИначеЕсли ОтветXDTO.Свойства().Количество() = 1 Тогда  // в ответе только code 0

		Иначе
			ВызватьИсключение(НСтр("ru = 'Неизвестная структура ответа'"));			
		КонецЕсли;
		
		// message: Ошибка запроса. Не найдено заявление (обновление) для документооборота (абонента): {0}
		// description: Ответ (обновление) еще не сформирован(о).
	ИначеЕсли ОтветXDTO.code = "1" Тогда // Заявление еще обрабатывается
		
		// message: Ошибка сервера. Сервер обновления временно не доступен, повторите операцию позже.
		// description: Ошибка при получении ответа или обновления от сервера.
		
		//ИначеЕсли ОтветXDTO.Code = "17" Тогда // ошибка??
	ИначеЕсли ОтветXDTO.code = "11" Тогда
		//версия файла на сервер и в  кэше клиент совпала, скачивать не требуется
		Результат.Вставить("Выполнено", Истина);
		Результат.Вставить("ОбновлениеНеТребуется", Истина);
	ИначеЕсли ОтветXDTO.code = "94" Тогда // временная проблема с сервером КА
	Иначе // Ошибка обработки заявление - автоматически отказ
		//Результат.Отклонено	= Истина;
		//Результат.Комментарий = ПакетXDTO.errorMessage;
		Результат.Вставить("Выполнено", Ложь);
		Результат.Вставить("ОписаниеОшибки", ОтветXDTO.errorMessage);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьРаспискуНаСервере(ДокументЗаявление, ИдентификаторАбонента) Экспорт
	
	ФайлыРасписки = ПодготовитьРаспискуКОтправке(ДокументЗаявление, ИдентификаторАбонента);
	
	РезультатВыполнения = Новый Структура("Выполнено", Истина);
	Файлы = Новый Массив;
	Файлы.Добавить(ФайлыРасписки.Расписка);
	Если ФайлыРасписки.Свойство("Подпись") Тогда
		Файлы.Добавить(ФайлыРасписки.Подпись);
	КонецЕсли;
	Файлы.Добавить(ФайлыРасписки.ОписаниеПакета);
	АдресПакета = ОперацииСФайламиЭДКОВызовСервера.УпаковатьФайлы(Файлы);
	
	ПрисоединитьФайлЗаявления(ДокументЗаявление, АдресПакета, "Пакет_с_распиской", "zip");
	
	Результат = СоздатьКлиентСервисаПоСпецоператоруСвязи(ДокументЗаявление.СпецоператорСвязи);
	Если Результат.Выполнено Тогда
		Ответ = Результат.КлиентСервиса.SendPacket(Base64Строка(ПолучитьИзВременногоХранилища(АдресПакета)));
		
		//code="222" message="Заявление по документообороту {0} было обработано вручную. Расписка не требуется.
		//code="170" message="Ошибка операции. Документооборот с идентификатором {0} завершен.
		//code="213" message="Ошибка авторизации. Подпись {0} для файла {1} не прошла проверку
		//code="131" message="Ошибка авторизации. Сертификат {0} не прошел проверку
		//code="141" message="Ошибка авторизации. Сертификат {0} издан на корневом сертификате {1}, 
		//  который не входит в список аккредитованных удостоверяющих центров УФО.
		
		ОтветXDTO = Дессериализовать(Ответ);		
		Если ОтветXDTO.code <> "0" 
			И ОтветXDTO.code <> "60" 
			И ОтветXDTO.code <> "222"
			И ОтветXDTO.code <> "170" Тогда
			
			РезультатВыполнения.Вставить("Выполнено", Ложь);
			Если ОтветXDTO.Свойства().Получить("errorMessage") <> Неопределено Тогда
				РезультатВыполнения.Вставить("ОписаниеОшибки", ОтветXDTO.errorMessage);
			Иначе
				РезультатВыполнения.Вставить("ОписаниеОшибки", "Ошибка при отправке расписки в получении сертификата");
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатВыполнения.Вставить("Код", ОтветXDTO.code);
		
	Иначе
		РезультатВыполнения = Результат;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция СоздатьКлиентСервисаПоСпецоператоруСвязи(СпецоператорСвязи) Экспорт
	
	Результат = Новый Структура("Выполнено", Истина);
	
	ИменаПараметров = "ВебСервисОпределение,ВебСервисURIПространстваИменСервиса,ВебСервисИмяСервиса,ВебСервисИмяТочкиПодключения";
	ПараметрыСпецоператораСвязи = ПолучитьПараметрыСпецоператораСвязи(СпецоператорСвязи, ИменаПараметров);
	
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL 				= ПараметрыСпецоператораСвязи.ВебСервисОпределение;
	ПараметрыПодключения.URIПространстваИмен 	= ПараметрыСпецоператораСвязи.ВебСервисURIПространстваИменСервиса;
	ПараметрыПодключения.ИмяСервиса 			= ПараметрыСпецоператораСвязи.ВебСервисИмяСервиса;
	ПараметрыПодключения.ИмяТочкиПодключения 	= ПараметрыСпецоператораСвязи.ВебСервисИмяТочкиПодключения;
	ПараметрыПодключения.ИмяПользователя 		= "";
	ПараметрыПодключения.Пароль 				= "";
	ПараметрыПодключения.Таймаут 				= 120;
	
	Попытка
		КлиентаСервиса = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
		Результат.Вставить("КлиентСервиса", КлиентаСервиса);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			"Электронный документооборот с контролирующими органами.Создание клиента сервиса",
		    УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Результат.Выполнено = Ложь;
 		Результат.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Возврат Результат;
		
КонецФункции

Функция ПолучитьПараметрыСпецоператораСвязи(СпецоператорСвязи, ИменаПараметров)
	
	ПараметрыСпецоператораСвязи = Новый Структура;
	
	Если Не ЗначениеЗаполнено(СпецоператорСвязи) Тогда
		Возврат ПараметрыСпецоператораСвязи;
	КонецЕсли;
	
	ИмяСтроки = XMLСтрока(СпецоператорСвязи);
	КонтекстЭДО = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Макет = КонтекстЭДО.ПолучитьМакет("ПараметрыСпецоператоровСвязи");
	
	СписокИменПараметров = СтрРазделить(ИменаПараметров, ",");
	Для Каждого ИмяПараметра Из СписокИменПараметров Цикл
		ИмяКолонки = СокрЛП(ИмяПараметра);
		ПараметрыСпецоператораСвязи.Вставить(ИмяКолонки, СокрЛП(Макет.Область(ИмяСтроки + "|" + ИмяКолонки).Текст));	
	КонецЦикла;
	
	Возврат ПараметрыСпецоператораСвязи;
	
КонецФункции

Функция ПодготовитьРаспискуКОтправке(ДокументЗаявление, ИдентификаторАбонента)
	
	ФайлыРасписки = ПолучитьРасписку(ДокументЗаявление);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("пакет");
	ЗаписьXML.ЗаписатьАтрибут("версияФормата", "1С:1.1");
	ЗаписьXML.ЗаписатьАтрибут("версПрог", РегламентированнаяОтчетность.ВерсияПрограммы());
	ЗаписьXML.ЗаписатьАтрибут("типДокументооборота", "РегистрацияАбонента");
	ЗаписьXML.ЗаписатьАтрибут("типТранзакции", "Расписка");
	ЗаписьXML.ЗаписатьАтрибут("идентификаторДокументооборота", ДокументЗаявление.ИдентификаторДокументооборота);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("отправитель");	
	ЗаписьXML.ЗаписатьАтрибут("типСубъекта", "абонент");
	ЗаписьXML.ЗаписатьАтрибут("идентификаторСубъекта", ИдентификаторАбонента);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("получатель");	
	ЗаписьXML.ЗаписатьАтрибут("типСубъекта", "спецоператор");
	ЗаписьXML.ЗаписатьАтрибут("идентификаторСубъекта", "КалугаАстрал");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("документ");	
	ЗаписьXML.ЗаписатьАтрибут("идентификаторДокумента", ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор());
	Если ФайлыРасписки.Свойство("Подпись") Тогда 
		ЗаписьXML.ЗаписатьАтрибут("типДокумента", "РаспискаЭП");
		ЗаписьXML.ЗаписатьАтрибут("типСодержимого", "cer");
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("типДокумента", "РаспискаСкан");
		ЗаписьXML.ЗаписатьАтрибут("типСодержимого", ФайлыРасписки.Расписка.Расширение);
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("сжат", "true");
	ЗаписьXML.ЗаписатьАтрибут("зашифрован", "false");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("содержимое");	
	ЗаписьXML.ЗаписатьАтрибут("имяФайла", ФайлыРасписки.Расписка.Имя);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если ФайлыРасписки.Свойство("Подпись") Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("подпись");	
		ЗаписьXML.ЗаписатьАтрибут("имяФайла", ФайлыРасписки.Подпись.Имя);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();

	ИмяФайлаРасписки = ФайлыРасписки.Расписка.Имя;
	ФайлыРасписки.Расписка.Имя = "file";
	ФайлыРасписки.Расписка.Адрес = ОперацииСФайламиЭДКОВызовСервера.УпаковатьФайлы(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФайлыРасписки.Расписка));
	ФайлыРасписки.Расписка.Имя = ИмяФайлаРасписки;
	
	ОписаниеПакета = Новый Структура;
	ОписаниеПакета.Вставить("Имя", "packageDescription.xml");
	ОписаниеПакета.Вставить("Адрес", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), Новый УникальныйИдентификатор));
	ФайлыРасписки.Вставить("ОписаниеПакета", ОписаниеПакета);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайла);
	
	Возврат ФайлыРасписки;
	
КонецФункции

Функция ПолучитьРасписку(ДокументЗаявление)
	
	ФайлыРасписки = Новый Структура;
	
	ПрисоединенныйФайл = Неопределено;
	Для Каждого ЭлектронныйДокумент Из ДокументЗаявление.ЭлектронныеДокументы Цикл
		Если ЭлектронныйДокумент.Документ = "Расписка" Тогда
			ПрисоединенныйФайл = ЭлектронныйДокумент.Файл;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, Новый УникальныйИдентификатор, Истина);
	СвойстваФайла = Новый Структура;
	СвойстваФайла.Вставить("Имя", ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор() + ".bin");
	СвойстваФайла.Вставить("Адрес", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	СвойстваФайла.Вставить("Расширение", ДанныеФайла.Расширение);
	
	ФайлыРасписки.Вставить("Расписка", СвойстваФайла);
	
	Если ДанныеФайла.ПодписанЭП Тогда
		ДвоичныеДанныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл)[0].Подпись;
		Если ТипЗнч(ДвоичныеДанныеПодписи) = Тип("ХранилищеЗначения") Тогда
			ДвоичныеДанныеПодписи = ДвоичныеДанныеПодписи.Получить();
		КонецЕсли;
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанныеПодписи, Новый УникальныйИдентификатор);
		
		СвойстваФайла = Новый Структура;
		СвойстваФайла.Вставить("Имя", ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор() + ".bin");
		СвойстваФайла.Вставить("Адрес", Адрес);
		СвойстваФайла.Вставить("Расширение", "bin");
		
		ФайлыРасписки.Вставить("Подпись", СвойстваФайла);
	КонецЕсли;
	
	Возврат ФайлыРасписки;
		
КонецФункции

Функция Дессериализовать(ТекстXML, Фабрика = Неопределено) Экспорт
	
	УдалитьФайл = Ложь;
	
	ЧтениеXML = Новый ЧтениеXML;
	Если Найти(ТекстXML, "<") > 0 Тогда
		ЧтениеXML.УстановитьСтроку(ТекстXML);
	Иначе
		ИмяФайла = ТекстXML;
		Если ЭтоАдресВременногоХранилища(ТекстXML) Тогда
			УдалитьФайл = Истина;
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			ПолучитьИзВременногоХранилища(ТекстXML).Записать(ИмяФайла);
		КонецЕсли;
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
	КонецЕсли;
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если Фабрика = Неопределено Тогда
		Фабрика = ФабрикаXDTO;
	КонецЕсли;
	ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Если УдалитьФайл Тогда
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайла);
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ПолучитьСертификатыИзФайлаНастройки(АдресФайла) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ПолучитьИзВременногоХранилища(АдресФайла).Записать(ИмяВременногоФайла);
	
	НастройкиXDTO = Дессериализовать(ИмяВременногоФайла);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Сертификаты = Новый Массив;
	Для Каждого СертификатXDTO Из НастройкиXDTO.Сертификаты.Сертификат Цикл
		Сертификат = Новый Структура;
		Сертификат.Вставить("Сертификат", Base64Значение(СертификатXDTO.Последовательность().ПолучитьТекст(0)));
		Сертификат.Вставить("Отпечаток", СертификатXDTO.Отпечаток);
		Сертификат.Вставить("Хранилище", СертификатXDTO.Хранилище);
		
		Сертификаты.Добавить(Сертификат);
	КонецЦикла;
	
	Возврат Сертификаты;
	
КонецФункции

#КонецОбласти

#Область НастройкиОбмена

Функция НастройкиОбменаОрганизаций(Ссылки = Неопределено, Настройки = Неопределено) Экспорт
	
	МассивРезультатов = Новый Массив;
	
	НастройкиВызова = Новый Структура;
	НастройкиВызова.Вставить("НайтиСертификатыПрочихКонтролирующихОрганов", 		Ложь);
	НастройкиВызова.Вставить("ПолучитьРеквизитыКонтролирующихОргановОрганизации", 	Ложь);
	НастройкиВызова.Вставить("ПолучатьДляУдаленныхОрганизаций", 					Истина);
	НастройкиВызова.Вставить("ПолучатьПоддерживаемыеНаправленияДляОператоров", 		Истина);
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиВызова, Настройки);
	КонецЕсли;
	
	ТекущаяДатаНаСервере = ТекущаяДатаСеанса();
	ПравоЧтенияУчетныхЗаписейОбмена = ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиДокументооборота);
	
	ПоддерживаемыеНаправленияДляОператоров = ?(НастройкиВызова.ПолучатьПоддерживаемыеНаправленияДляОператоров,
		ПоддерживаемыеНаправленияОператоров(), Неопределено);
	ПоддерживаетсяСдачаОтчетностиВБанкРоссии = ОбщегоНазначения.ПодсистемаСуществует(
		"РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВБанкРоссии");
	ЕстьРеквизитОрганизацииНаименованиеСокращенное = Ложь;
	УчетныеЗаписиОрганизаций = Новый Массив;
	
	Если Ссылки = Неопределено ИЛИ ТипЗнч(Ссылки) = Тип("Массив") ИЛИ ТипЗнч(Ссылки) = Тип("ФиксированныйМассив") Тогда
		Организации = Ссылки;
		
	Иначе
		Ссылка = Ссылки;
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.УчетныеЗаписиДокументооборота") Тогда
			Организации = ОрганизацииУчетнойЗаписи(Ссылка);
			
		Иначе
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") Тогда
				Организация = Ссылка;
				
			Иначе
				Заявление = Ссылка;
				Организация = ЗначенияРеквизитовОбъекта(Заявление, "Организация", Истина).Организация;
			КонецЕсли;
			
			Организации = ?(ЗначениеЗаполнено(Организация), ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация), Новый Массив);
		КонецЕсли;
	КонецЕсли;
	
	Если ПоддерживаетсяСдачаОтчетностиВБанкРоссии Тогда
		МодульДокументооборотСБанкомРоссии = ОбщегоНазначения.ОбщийМодуль("ДокументооборотСБанкомРоссии");
		БанкРоссииТекстыДляЗапроса = МодульДокументооборотСБанкомРоссии.ПолучитьТекстыДляЗапросаСпискаНастроекОбмена();
	КонецЕсли;
	
	// настройки обмена организаций
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.Организация КАК Организация,
		|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка КАК Ссылка,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ТипЗаявления КАК ТипЗаявления,
		|	ЗаявлениеАбонентаСпецоператораСвязи.Статус КАК Статус,
		|	ЗаявлениеАбонентаСпецоператораСвязи.СтатусКомментарий КАК СтатусКомментарий,
		|	ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЗавершена КАК НастройкаЗавершена,
		|	ЗаявлениеАбонентаСпецоператораСвязи.Дата КАК Дата
		|ПОМЕСТИТЬ
		|	ПоследнееЗаявлениеАбонентаСпецоператораСвязи
		|ИЗ
		|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|			ВЫБРАТЬ
		|				ЗаявлениеАбонентаСпецоператораСвязи.Организация КАК Организация,
		|				ЗаявлениеАбонентаСпецоператораСвязи.Дата КАК Дата,
		|				МАКСИМУМ(ЗаявлениеАбонентаСпецоператораСвязи.Ссылка) КАК Ссылка
		|			ИЗ
		|				Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|						ВЫБРАТЬ
		|							ЗаявлениеАбонентаСпецоператораСвязи.Организация КАК Организация,
		|							МАКСИМУМ(ЗаявлениеАбонентаСпецоператораСвязи.Дата) КАК Дата
		|						ИЗ
		|							Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
		|						ГДЕ
		|							НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
		|						СГРУППИРОВАТЬ ПО
		|							ЗаявлениеАбонентаСпецоператораСвязи.Организация) КАК ПоследнееЗаявлениеАбонентаСпецоператораСвязи
		|					ПО ПоследнееЗаявлениеАбонентаСпецоператораСвязи.Организация = ЗаявлениеАбонентаСпецоператораСвязи.Организация
		|						И ПоследнееЗаявлениеАбонентаСпецоператораСвязи.Дата = ЗаявлениеАбонентаСпецоператораСвязи.Дата
		|			ГДЕ
		|				НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
		|			СГРУППИРОВАТЬ ПО
		|				ЗаявлениеАбонентаСпецоператораСвязи.Организация,
		|				ЗаявлениеАбонентаСпецоператораСвязи.Дата) КАК ПоследнееЗаявлениеАбонентаСпецоператораСвязи
		|		ПО ПоследнееЗаявлениеАбонентаСпецоператораСвязи.Организация = ЗаявлениеАбонентаСпецоператораСвязи.Организация
		|			И ПоследнееЗаявлениеАбонентаСпецоператораСвязи.Дата = ЗаявлениеАбонентаСпецоператораСвязи.Дата
		|			И ПоследнееЗаявлениеАбонентаСпецоператораСвязи.Ссылка = ЗаявлениеАбонентаСпецоператораСвязи.Ссылка
		|ГДЕ
		|	НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаявлениеАбонентаСпецоператораСвязи.Организация
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(ЗаявлениеАбонентаСпецоператораСвязи.ДатаПолученияОтвета) КАК ДатаПолученияОтвета,
		|	ЗаявлениеАбонентаСпецоператораСвязи.Организация КАК Организация
		|ПОМЕСТИТЬ
		|	ПервоеОдобленноеЗаявлениеАбонентаСпецоператораСвязи
		|ИЗ
		|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
		|ГДЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено)
		|	И ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЗавершена
		|	И НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
		|	И ЗаявлениеАбонентаСпецоператораСвязи.ДатаПолученияОтвета ЕСТЬ НЕ NULL
		|	И ЗаявлениеАбонентаСпецоператораСвязи.ДатаПолученияОтвета <> ДАТАВРЕМЯ(0001,1,1,0,0,0)
		|СГРУППИРОВАТЬ ПО
		|	ЗаявлениеАбонентаСпецоператораСвязи.Организация
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаявлениеАбонентаСпецоператораСвязи.Организация
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация,"
		+ ?(ЕстьРеквизитОрганизацииНаименованиеСокращенное, "
		|	ВЫБОР
		|		КОГДА Организации.НаименованиеСокращенное ЕСТЬ НЕ NULL И Организации.НаименованиеСокращенное <> """"
		|			ТОГДА Организации.НаименованиеСокращенное
		|		ИНАЧЕ Организации.Наименование
		|	КОНЕЦ КАК НаименованиеСокращенное,", "
		|	Организации.Наименование КАК НаименованиеСокращенное,") + "
		|	Организации.ПометкаУдаления КАК ПометкаУдаления,
		|	Организации.ВидОбменаСКонтролирующимиОрганами КАК ВидОбменаСКонтролирующимиОрганами,
		|	Организации.УчетнаяЗаписьОбмена КАК УчетнаяЗаписьОбмена,
		|	ЕСТЬNULL(УчетныеЗаписиДокументооборота.АдресЭлектроннойПочты, """") КАК АдресЭлектроннойПочты,
		|	ЕСТЬNULL(УчетныеЗаписиДокументооборота.ИдентификаторАбонента, """") КАК ИдентификаторАбонента,
		|	ЕСТЬNULL(УчетныеЗаписиДокументооборота.СпецоператорСвязи,
		|		ЗНАЧЕНИЕ(Перечисление.СпецоператорыСвязи.ПустаяСсылка)) КАК СпецоператорСвязи,
		|	ЕСТЬNULL(УчетныеЗаписиДокументооборота.РежимАвтонастройки,
		|		ЗНАЧЕНИЕ(Перечисление.РежимыАвтонастройкиУчетнойЗаписиНалогоплательщика.ПустаяСсылка)) КАК РежимАвтонастройки,
		|	ЕСТЬNULL(УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСФНС, ЛОЖЬ) КАК ПредназначенаДляДокументооборотаСФНС,
		|	ЕСТЬNULL(УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСПФР, ЛОЖЬ) КАК ПредназначенаДляДокументооборотаСПФР,
		|	ЕСТЬNULL(УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСФСГС, ЛОЖЬ) КАК ПредназначенаДляДокументооборотаСФСГС,
		|	ЕСТЬNULL(УчетныеЗаписиДокументооборота.СертификатРуководителя, """") КАК СертификатРуководителя,
		|	ЕСТЬNULL(УчетныеЗаписиДокументооборота.ЛицензияНаименование, """") КАК ЛицензияНаименование,
		|	УчетныеЗаписиДокументооборота.ЛицензияДатаОкончания КАК ЛицензияДатаОкончания,
		|	ЕСТЬNULL(УчетныеЗаписиДокументооборота.ЛицензияТребуетсяНапоминаниеОбОкончанииСрокаДействия,
		|		ЛОЖЬ) КАК ЛицензияТребуетсяНапоминаниеОбОкончанииСрокаДействия,
		|	ЕСТЬNULL(УчетныеЗаписиДокументооборота.ЭлектроннаяПодписьВМоделиСервиса, ЛОЖЬ) КАК ЭлектроннаяПодписьВМоделиСервиса,
		|	УчетныеЗаписиДокументооборота.ДатаПодключения КАК ДатаПодключения,
		|	ЕСТЬNULL(ПоследнееЗаявлениеАбонентаСпецоператораСвязи.Ссылка,
		|		ЗНАЧЕНИЕ(Документ.ЗаявлениеАбонентаСпецоператораСвязи.ПустаяСсылка)) КАК ЗаявлениеАбонентаСпецоператораСвязи_Ссылка,
		|	ЕСТЬNULL(ПоследнееЗаявлениеАбонентаСпецоператораСвязи.ТипЗаявления,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.ПустаяСсылка)) КАК ЗаявлениеАбонентаСпецоператораСвязи_ТипЗаявления,
		|	ЕСТЬNULL(ПоследнееЗаявлениеАбонентаСпецоператораСвязи.Статус,
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.ПустаяСсылка)) КАК ЗаявлениеАбонентаСпецоператораСвязи_Статус,
		|	ЕСТЬNULL(ПоследнееЗаявлениеАбонентаСпецоператораСвязи.СтатусКомментарий,
		|		"""") КАК ЗаявлениеАбонентаСпецоператораСвязи_СтатусКомментарий,
		|	ЕСТЬNULL(ПоследнееЗаявлениеАбонентаСпецоператораСвязи.НастройкаЗавершена,
		|		ЛОЖЬ) КАК ЗаявлениеАбонентаСпецоператораСвязи_НастройкаЗавершена,
		|	ПоследнееЗаявлениеАбонентаСпецоператораСвязи.Дата КАК ЗаявлениеАбонентаСпецоператораСвязи_Дата,
		|	ПервоеОдобленноеЗаявлениеАбонентаСпецоператораСвязи.ДатаПолученияОтвета КАК ЗаявлениеАбонентаСпецоператораСвязи_ДатаПолученияОтвета,
		|	ЕСТЬNULL(НастройкиОбменаФСС.ИспользоватьОбмен, ЛОЖЬ) КАК НастройкиОбменаФСС_ИспользоватьОбмен,
		|	ЕСТЬNULL(НастройкиОбменаФСС.СертификатСтрахователяОтпечаток, """") КАК НастройкиОбменаФСС_СертификатСтрахователяОтпечаток,
		|	ЕСТЬNULL(НастройкиОбменаФСС.ИспользоватьАвтонастройку, ЛОЖЬ) КАК НастройкиОбменаФСС_ИспользоватьАвтонастройку,
		|	ЕСТЬNULL(НастройкиОбменаФСРАР.ИспользоватьОбмен, ЛОЖЬ) КАК НастройкиОбменаФСРАР_ИспользоватьОбмен,
		|	ЕСТЬNULL(НастройкиОбменаФСРАР.СертификатАбонентаОтпечаток, """") КАК НастройкиОбменаФСРАР_СертификатАбонентаОтпечаток,
		|	ЕСТЬNULL(НастройкиОбменаФСРАР.ИспользоватьАвтонастройку, ЛОЖЬ) КАК НастройкиОбменаФСРАР_ИспользоватьАвтонастройку,
		|	ЕСТЬNULL(НастройкиОбменаРПН.ИспользоватьОбмен, ЛОЖЬ) КАК НастройкиОбменаРПН_ИспользоватьОбмен,
		|	ЕСТЬNULL(НастройкиОбменаРПН.СертификатАбонентаОтпечаток, """") КАК НастройкиОбменаРПН_СертификатАбонентаОтпечаток,
		|	ЕСТЬNULL(НастройкиОбменаРПН.ИспользоватьАвтонастройку, ЛОЖЬ) КАК НастройкиОбменаРПН_ИспользоватьАвтонастройку,
		|	ЕСТЬNULL(НастройкиОбменаФТС.ИспользоватьОбмен, ЛОЖЬ) КАК НастройкиОбменаФТС_ИспользоватьОбмен,
		|	ЕСТЬNULL(НастройкиОбменаФТС.СертификатАбонентаОтпечаток, """") КАК НастройкиОбменаФТС_СертификатАбонентаОтпечаток,
		|	ЕСТЬNULL(НастройкиОбменаФТС.ИспользоватьАвтонастройку, ЛОЖЬ) КАК НастройкиОбменаФТС_ИспользоватьАвтонастройку"
		+ ?(ПоддерживаетсяСдачаОтчетностиВБанкРоссии, ",
		|	" + БанкРоссииТекстыДляЗапроса.ПеречислениеКолонок, ",
		|	ЛОЖЬ КАК НастройкиОбменаБанкРоссии_ИспользоватьОбмен,
		|	"""" КАК НастройкиОбменаБанкРоссии_СертификатАбонентаОтпечаток") + "
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
		|		ПО УчетныеЗаписиДокументооборота.Ссылка = Организации.УчетнаяЗаписьОбмена
		|			И Организации.ВидОбменаСКонтролирующимиОрганами =
		|			ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнееЗаявлениеАбонентаСпецоператораСвязи КАК ПоследнееЗаявлениеАбонентаСпецоператораСвязи
		|		ПО ПоследнееЗаявлениеАбонентаСпецоператораСвязи.Организация = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоеОдобленноеЗаявлениеАбонентаСпецоператораСвязи КАК ПервоеОдобленноеЗаявлениеАбонентаСпецоператораСвязи
		|		ПО ПервоеОдобленноеЗаявлениеАбонентаСпецоператораСвязи.Организация = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
		|		ПО НастройкиОбменаФСС.Организация = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаФСРАР КАК НастройкиОбменаФСРАР
		|		ПО НастройкиОбменаФСРАР.Организация = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаРПН КАК НастройкиОбменаРПН
		|		ПО НастройкиОбменаРПН.Организация = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаФТС КАК НастройкиОбменаФТС
		|		ПО НастройкиОбменаФТС.Организация = Организации.Ссылка"
		+ ?(ПоддерживаетсяСдачаОтчетностиВБанкРоссии, "
		|		" + БанкРоссииТекстыДляЗапроса.СоединениеСОрганизацией, "")
		+ ?(Организации <> Неопределено, "
		|ГДЕ
		|	Организации.Ссылка В (&Организации)"
		+ ?(НастройкиВызова.ПолучатьДляУдаленныхОрганизаций, "", "
		|	И НЕ Организации.ПометкаУдаления"),
		?(НастройкиВызова.ПолучатьДляУдаленныхОрганизаций, "", "
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления") + "
		|УПОРЯДОЧИТЬ ПО
		|	Организации.Наименование");
	
	Запрос.УстановитьПараметр("Организации", Организации);
	ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	ТаблицаОрганизаций.Колонки.Добавить("ИндексОрганизации");
	
	// пользователи базы
	
	СписокПользователейБазы = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.Наименование КАК НаименованиеПользователя
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.ПометкаУдаления
		|	И НЕ Пользователи.Недействителен
		|	И НЕ Пользователи.Служебный
		|	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификаторПользователяИБ
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Наименование";
	
	Запрос.УстановитьПараметр("ПустойИдентификаторПользователяИБ", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Пользователь = ТекущийПользователь Тогда
			Картинка = БиблиотекаКартинок.Пользователь;
		Иначе
			Картинка = Неопределено;
		КонецЕсли;
		СписокПользователейБазы.Добавить(Выборка.Пользователь, Выборка.НаименованиеПользователя,, Картинка);
	КонецЦикла;
	
	Для ИндексОрганизации = 0 По ТаблицаОрганизаций.Количество() - 1 Цикл
		СвойстваОрганизации = ТаблицаОрганизаций[ИндексОрганизации];
		СвойстваОрганизации.ИндексОрганизации = ИндексОрганизации;
		
		Результат = Новый Структура;
		Для ИндексКолонки = 0 По ТаблицаОрганизаций.Колонки.Количество() - 1 Цикл
			Результат.Вставить(ТаблицаОрганизаций.Колонки[ИндексКолонки].Имя, СвойстваОрганизации[ИндексКолонки]);
		КонецЦикла;
		
		Результат.Вставить("НаименованиеОператора", "");
		Если ЗначениеЗаполнено(СвойстваОрганизации.СпецоператорСвязи) Тогда
			ИндексОператора = Перечисления.СпецоператорыСвязи.Индекс(СвойстваОрганизации.СпецоператорСвязи);
			Результат.НаименованиеОператора = Метаданные.Перечисления.СпецоператорыСвязи.ЗначенияПеречисления[ИндексОператора].Синоним;
		КонецЕсли;
		
		Организация = СвойстваОрганизации.Организация;
		
		// информация об организации
		
		Если НастройкиВызова.ПолучитьРеквизитыКонтролирующихОргановОрганизации Тогда
			ЭтоЮрЛицо = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(Организация);
			Результат.Вставить("ТипОрганизации", ЭтоЮрЛицо);
			ИПИспользуетТрудНаемныхРаботников = НЕ ЭтоЮрЛицо И РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация);
			
			ЗапрашиваемыеРеквизиты = "КодНО, КодОрганаФСГС" + ?(ЭтоЮрЛицо, ", КППЮЛ", "")
				+ ?(ЭтоЮрЛицо ИЛИ ИПИспользуетТрудНаемныхРаботников,
				", РегНомПФР, РегистрационныйНомерФСС", ", РегНомПФРЗаСебя, РегистрационныйНомерФССДобрСтрах");
			
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация,, ЗапрашиваемыеРеквизиты);
			Если НЕ ЭтоЮрЛицо Тогда
				Результат.Вставить("КППЮЛ", "");
			КонецЕсли;
			Если НЕ ЭтоЮрЛицо И НЕ ИПИспользуетТрудНаемныхРаботников Тогда
				СведенияОбОрганизации.Вставить("РегНомПФР", СведенияОбОрганизации.РегНомПФРЗаСебя);
				СведенияОбОрганизации.Удалить("РегНомПФРЗаСебя");
				СведенияОбОрганизации.Вставить("РегистрационныйНомерФСС", СведенияОбОрганизации.РегистрационныйНомерФССДобрСтрах);
				СведенияОбОрганизации.Удалить("РегистрационныйНомерФССДобрСтрах");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, СведенияОбОрганизации, Истина);
		КонецЕсли;
		
		// информация об учетной записи документооборота
		
		Результат.Вставить("ПравоЧтенияУчетнойЗаписиОбмена", ПравоЧтенияУчетныхЗаписейОбмена);
		
		Для каждого ТипПолучателя Из Метаданные.Перечисления.ТипыКонтролирующихОрганов.ЗначенияПеречисления Цикл
			Результат.Вставить("СдаватьВ" + ТипПолучателя.Имя, Ложь);
		КонецЦикла;
		Результат.Вставить("КодыФНС", 	Новый Массив);
		Результат.Вставить("КодПФР", 	"");
		Результат.Вставить("КодыФСГС", 	Новый Массив);
		Результат.Вставить("КодФСС", 	"");
		
		СписокПользователей = СписокПользователейБазы.Скопировать();
		Результат.Вставить("СписокПользователей", СписокПользователей);
		
		Если СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
			И ЗначениеЗаполнено(СвойстваОрганизации.УчетнаяЗаписьОбмена)
			И ПравоЧтенияУчетныхЗаписейОбмена Тогда
			
			УчетныеЗаписиОрганизаций.Добавить(СвойстваОрганизации.УчетнаяЗаписьОбмена);
			
			Результат.ПравоЧтенияУчетнойЗаписиОбмена = ЗначениеЗаполнено(СвойстваОрганизации.АдресЭлектроннойПочты) ИЛИ
				ЗначениеЗаполнено(СвойстваОрганизации.ИдентификаторАбонента) ИЛИ
				ЗначениеЗаполнено(СвойстваОрганизации.СпецоператорСвязи);
		КонецЕсли;
		
		Если НастройкиВызова.НайтиСертификатыПрочихКонтролирующихОрганов
			И СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
			И ЗначениеЗаполнено(СвойстваОрганизации.УчетнаяЗаписьОбмена)
			И НЕ Результат.ПравоЧтенияУчетнойЗаписиОбмена
			И (ЗначениеЗаполнено(Результат.НастройкиОбменаФСС_СертификатСтрахователяОтпечаток)
			ИЛИ ЗначениеЗаполнено(Результат.НастройкиОбменаФСРАР_СертификатАбонентаОтпечаток)
			ИЛИ ЗначениеЗаполнено(Результат.НастройкиОбменаРПН_СертификатАбонентаОтпечаток)
			ИЛИ ЗначениеЗаполнено(Результат.НастройкиОбменаФТС_СертификатАбонентаОтпечаток)
			ИЛИ ЗначениеЗаполнено(Результат.НастройкиОбменаБанкРоссии_СертификатАбонентаОтпечаток)) Тогда
			Результат.ЭлектроннаяПодписьВМоделиСервиса = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.РеквизитыУчетнойЗаписи(
				СвойстваОрганизации.УчетнаяЗаписьОбмена).ЭлектроннаяПодписьВМоделиСервиса;
		КонецЕсли;
		
		// учет информации из первого одобренного заявления
		
		Если НЕ ЗначениеЗаполнено(Результат.ДатаПодключения)
			ИЛИ (ЗначениеЗаполнено(Результат.ЗаявлениеАбонентаСпецоператораСвязи_ДатаПолученияОтвета)
			И Результат.ЗаявлениеАбонентаСпецоператораСвязи_ДатаПолученияОтвета < Результат.ДатаПодключения) Тогда
			
			Результат.ДатаПодключения = Результат.ЗаявлениеАбонентаСпецоператораСвязи_ДатаПолученияОтвета;
		КонецЕсли;
		
		ПоддерживаемыеНаправленияДляОператора = ?(ЗначениеЗаполнено(СвойстваОрганизации.СпецоператорСвязи)
			И ПоддерживаемыеНаправленияДляОператоров <> Неопределено,
			ПоддерживаемыеНаправленияДляОператоров[СвойстваОрганизации.СпецоператорСвязи], Неопределено);
		ПоддерживаемыеНаправления = ПоддерживаемыеНаправленияОрганизации(Организация, ПоддерживаемыеНаправленияДляОператора);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ПоддерживаемыеНаправления, Истина);
		
		МассивРезультатов.Добавить(Результат);
	КонецЦикла;
	
	// получатели учетных записей
	
	Если УчетныеЗаписиОрганизаций.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.УчетнаяЗапись,
			|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.ТипПолучателя,
			|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КодПолучателя,
			|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КПП
			|ИЗ
			|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписиПолучатели КАК ДополнительныеРеквизитыУчетнойЗаписиПолучатели
			|ГДЕ
			|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.УчетнаяЗапись В (&УчетныеЗаписи)";
		
		Запрос.УстановитьПараметр("УчетныеЗаписи", УчетныеЗаписиОрганизаций);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ТипПолучателя) Тогда
				МетаданныеТипаПолучателя = Выборка.ТипПолучателя.Метаданные();
				ИндексТипаПолучателя = Перечисления[МетаданныеТипаПолучателя.Имя].Индекс(Выборка.ТипПолучателя);
				ИмяТипаПолучателя = МетаданныеТипаПолучателя.ЗначенияПеречисления[ИндексТипаПолучателя].Имя;
				
				ПараметрыОтбора = Новый Структура("УчетнаяЗаписьОбмена", Выборка.УчетнаяЗапись);
				МассивСвойствОрганизаций = ТаблицаОрганизаций.НайтиСтроки(ПараметрыОтбора);
				Для каждого СвойстваОрганизации Из МассивСвойствОрганизаций Цикл
					Если СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами =
						Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
						
						Результат = МассивРезультатов[СвойстваОрганизации.ИндексОрганизации];
						
						Результат.Вставить("СдаватьВ" + ИмяТипаПолучателя, Истина);
						
						Если Выборка.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
							КодФНС = Новый Структура("Код, КПП", Выборка.КодПолучателя, Выборка.КПП);
							Результат.КодыФНС.Добавить(КодФНС);
						ИначеЕсли Выборка.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
							Результат.КодПФР = Выборка.КодПолучателя;
						ИначеЕсли Выборка.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
							Результат.КодыФСГС.Добавить(Выборка.КодПолучателя);
						КонецЕсли;
						
						МассивРезультатов[СвойстваОрганизации.ИндексОрганизации] = Результат;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// пользователи учетных записей
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись КАК УчетнаяЗапись,
			|	ПользователиУчетныхЗаписейДокументооборота.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
			|ГДЕ
			|	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись В (&УчетныеЗаписи)";
		
		Запрос.УстановитьПараметр("УчетныеЗаписи", УчетныеЗаписиОрганизаций);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ПараметрыОтбора = Новый Структура("УчетнаяЗаписьОбмена", Выборка.УчетнаяЗапись);
			МассивСвойствОрганизаций = ТаблицаОрганизаций.НайтиСтроки(ПараметрыОтбора);
			Для каждого СвойстваОрганизации Из МассивСвойствОрганизаций Цикл
				Если СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами =
					Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
					
					Результат = МассивРезультатов[СвойстваОрганизации.ИндексОрганизации];
					
					ЭлементСпискаПользователей = Результат.СписокПользователей.НайтиПоЗначению(Выборка.Пользователь);
					Если ЭлементСпискаПользователей <> Неопределено Тогда
						ЭлементСпискаПользователей.Пометка = Истина;
					КонецЕсли;
					
					МассивРезультатов[СвойстваОрганизации.ИндексОрганизации] = Результат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкиОбмена", 							МассивРезультатов);
	Результат.Вставить("ТекущаяДатаНаСервере", 						ТекущаяДатаНаСервере);
	Результат.Вставить("ПоддерживаемыеНаправленияДляОператоров", 	ПоддерживаемыеНаправленияДляОператоров);
	Результат.Вставить("ПоддерживаетсяСдачаОтчетностиВБанкРоссии", 	ПоддерживаетсяСдачаОтчетностиВБанкРоссии);
	Результат.Вставить("СписокПользователейБазы", 					СписокПользователейБазы);
	Возврат Результат;
	
КонецФункции

Функция ОрганизацииУчетнойЗаписи(УчетнаяЗапись)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)
		|	И Организации.УчетнаяЗаписьОбмена = &УчетнаяЗаписьОбмена";
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьОбмена", УчетнаяЗапись);
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗапроса.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ЗаписатьПользователейУчетнойЗаписиДокументооборота(СписокПользователей, УчетнаяЗапись) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПользователиУчетныхЗаписейДокументооборота.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	
	Для каждого СтрокаСписка Из СписокПользователей Цикл
		Если СтрокаСписка.Пометка Тогда
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.УчетнаяЗапись = УчетнаяЗапись;
			НоваяСтрока.Пользователь = СтрокаСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстИсключения = ИнформацияОбОшибке().Описание;
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось обновить список пользователей по учетной записи налогоплательщика ""%1"".'"),
			СокрЛП(УчетнаяЗапись));
		
		РегламентированнаяОтчетностьКлиентСервер.СообщитьОбОшибке(ТекстИсключения, Ложь, ТекстОшибки);
	КонецПопытки;
	
	ДокументооборотСКОВызовСервера.УстановитьПараметрСеансаТекущиеУчетныеЗаписиНалогоплательщика();
	
КонецПроцедуры

Функция ПоддерживаемыеНаправленияОператоров() Экспорт
	
	Результат = Новый Соответствие;
	
	Операторы = ПолучитьСписокСпецоператоровСвязи();
	
	СвойстваОператора = Новый Структура();
	СвойстваОператора.Вставить("ФСРАРПризнак");
	СвойстваОператора.Вставить("РПНПризнак");
	СвойстваОператора.Вставить("ФТСПризнак");
	
	Для каждого ОператорЭДО Из Операторы Цикл
		ПараметрыОператора = ПолучитьПараметрыСпецоператора(ОператорЭДО, СвойстваОператора);
		
		ПоддерживаемыеНаправления = Новый Структура;
		ПоддерживаемыеНаправления.Вставить("ПризнакПоддержкиФСРАР",
			ПараметрыОператора.ФСРАРПризнак = Истина ИЛИ ПараметрыОператора.ФСРАРПризнак = "Истина");
		ПоддерживаемыеНаправления.Вставить("ПризнакПоддержкиРПН",
			ПараметрыОператора.РПНПризнак = Истина ИЛИ ПараметрыОператора.РПНПризнак = "Истина");
		ПоддерживаемыеНаправления.Вставить("ПризнакПоддержкиФТС",
			ПараметрыОператора.ФТСПризнак = Истина ИЛИ ПараметрыОператора.ФТСПризнак = "Истина");
		
		Результат[ОператорЭДО] = ПоддерживаемыеНаправления;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПоддерживаемыеНаправленияОрганизации(Организация, ПоддерживаемыеНаправленияДляОператора = Неопределено) Экспорт
	
	ПоддерживаемыеНаправленияВызова = Новый Структура;
	ПоддерживаемыеНаправленияВызова.Вставить("ПризнакПоддержкиФСРАР", 	Истина);
	ПоддерживаемыеНаправленияВызова.Вставить("ПризнакПоддержкиРПН", 	Истина);
	ПоддерживаемыеНаправленияВызова.Вставить("ПризнакПоддержкиФТС", 	Истина);
	Если ПоддерживаемыеНаправленияДляОператора <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПоддерживаемыеНаправленияВызова, ПоддерживаемыеНаправленияДляОператора);
	КонецЕсли;
	
	Направления = Новый Массив;
	
	ПараметрыНаправления = Новый Структура;
	ПараметрыНаправления.Вставить("Орган", 		Перечисления.ТипыКонтролирующихОрганов.ФНС);
	ПараметрыНаправления.Вставить("Доступен", 	Истина);
	ПараметрыНаправления.Вставить("Подключить", Истина);
	Направления.Добавить(ПараметрыНаправления);
	
	ПараметрыНаправления = Новый Структура;
	ПараметрыНаправления.Вставить("Орган", 		Перечисления.ТипыКонтролирующихОрганов.ПФР);
	ПараметрыНаправления.Вставить("Доступен", 	Истина);
	ПараметрыНаправления.Вставить("Подключить", Истина);
	Направления.Добавить(ПараметрыНаправления);
	
	ПараметрыНаправления = Новый Структура;
	ПараметрыНаправления.Вставить("Орган", 		Перечисления.ТипыКонтролирующихОрганов.ФСГС);
	ПараметрыНаправления.Вставить("Доступен", 	Истина);
	ПараметрыНаправления.Вставить("Подключить", Истина);
	Направления.Добавить(ПараметрыНаправления);
	
	ПараметрыНаправления = Новый Структура;
	ПараметрыНаправления.Вставить("Орган", 		Перечисления.ТипыКонтролирующихОрганов.ФСС);
	ПараметрыНаправления.Вставить("Доступен", 	Истина);
	ПараметрыНаправления.Вставить("Подключить", Истина);
	Направления.Добавить(ПараметрыНаправления);
	
	Если ПоддерживаемыеНаправленияВызова.ПризнакПоддержкиФСРАР Тогда
		ПараметрыНаправления = Новый Структура;
		ПараметрыНаправления.Вставить("Орган", 		Перечисления.ТипыКонтролирующихОрганов.ФСРАР);
		ПараметрыНаправления.Вставить("Доступен", 	Истина);
		ПараметрыНаправления.Вставить("Подключить", Истина);
		Направления.Добавить(ПараметрыНаправления);
	КонецЕсли;
	
	Если ПоддерживаемыеНаправленияВызова.ПризнакПоддержкиРПН Тогда
		ПараметрыНаправления = Новый Структура;
		ПараметрыНаправления.Вставить("Орган", 		Перечисления.ТипыКонтролирующихОрганов.РПН);
		ПараметрыНаправления.Вставить("Доступен", 	Истина);
		ПараметрыНаправления.Вставить("Подключить", Истина);
		Направления.Добавить(ПараметрыНаправления);
	КонецЕсли;
	
	Если ПоддерживаемыеНаправленияВызова.ПризнакПоддержкиФТС Тогда
		ПараметрыНаправления = Новый Структура;
		ПараметрыНаправления.Вставить("Орган", 		Перечисления.ТипыКонтролирующихОрганов.ФТС);
		ПараметрыНаправления.Вставить("Доступен", 	Истина);
		ПараметрыНаправления.Вставить("Подключить", Истина);
		Направления.Добавить(ПараметрыНаправления);
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьПодключаемыеНаправленияСдачиОтчетности(Организация, Направления);
	
	Результат = Новый Структура;
	Результат.Вставить("ПризнакПоддержкиФНС", 	Ложь);
	Результат.Вставить("ПризнакПоддержкиПФР", 	Ложь);
	Результат.Вставить("ПризнакПоддержкиФСГС", 	Ложь);
	Результат.Вставить("ПризнакПоддержкиФСС", 	Ложь);
	Результат.Вставить("ПризнакПоддержкиФСРАР", Ложь);
	Результат.Вставить("ПризнакПоддержкиРПН", 	Ложь);
	Результат.Вставить("ПризнакПоддержкиФТС", 	Ложь);
	
	Для каждого НаправлениеЭДО Из Направления Цикл
		Если НаправлениеЭДО.Орган = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			Результат.ПризнакПоддержкиФНС = НаправлениеЭДО.Доступен;
			
		ИначеЕсли НаправлениеЭДО.Орган = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			Результат.ПризнакПоддержкиПФР = НаправлениеЭДО.Доступен;
			
		ИначеЕсли НаправлениеЭДО.Орган = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
			Результат.ПризнакПоддержкиФСГС = НаправлениеЭДО.Доступен;
			
		ИначеЕсли НаправлениеЭДО.Орган = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			Результат.ПризнакПоддержкиФСС = НаправлениеЭДО.Доступен;
			
		ИначеЕсли НаправлениеЭДО.Орган = Перечисления.ТипыКонтролирующихОрганов.ФСРАР
			И ПоддерживаемыеНаправленияВызова.ПризнакПоддержкиФСРАР Тогда
			
			Результат.ПризнакПоддержкиФСРАР = НаправлениеЭДО.Доступен;
			
		ИначеЕсли НаправлениеЭДО.Орган = Перечисления.ТипыКонтролирующихОрганов.РПН
			И ПоддерживаемыеНаправленияВызова.ПризнакПоддержкиРПН Тогда
			
			Результат.ПризнакПоддержкиРПН = НаправлениеЭДО.Доступен;
			
		ИначеЕсли НаправлениеЭДО.Орган = Перечисления.ТипыКонтролирующихОрганов.ФТС
			И ПоддерживаемыеНаправленияВызова.ПризнакПоддержкиФТС Тогда
			
			Результат.ПризнакПоддержкиФТС = НаправлениеЭДО.Доступен;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СкорректироватьНаправленияСдачиОтчетностиСУчетомПредыдущихЗаявлений(
		НовыйДокументЗаявление,
		ТипКонтролирующегоОргана,
		КоличествоДней = 31) Экспорт
	
	Организация = НовыйДокументЗаявление.Организация;
	
	ДатаАвтоматическогоОтказа = ТекущаяДатаСеанса() - КоличествоДней * 24 * 60 * 60;
	ДатаАвтоматическогоОтказа = НачалоДня(ДатаАвтоматическогоОтказа);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка КАК Ссылка,
		|	ЗаявлениеАбонентаСпецоператораСвязи.Статус КАК Статус,
		|	ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЗавершена КАК НастройкаЗавершена,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ТипЗаявления КАК ТипЗаявления,
		|	ЗаявлениеАбонентаСпецоператораСвязи.РегНомерПФР КАК РегНомерПФР,
		|	ЗаявлениеАбонентаСпецоператораСвязи.РегНомерФСС КАК РегНомерФСС,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ДополнительныйКодФСС КАК ДополнительныйКодФСС,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ПодатьЗаявкуНаСертификатДляФСРАР КАК ПодатьЗаявкуНаСертификатДляФСРАР,
		|	ЗаявлениеАбонентаСпецоператораСвязи.КодРегионаФСРАР КАК КодРегионаФСРАР,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ПодатьЗаявкуНаПодключениеРПН КАК ПодатьЗаявкуНаПодключениеРПН,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ПодатьЗаявкуНаПодключениеФТС КАК ПодатьЗаявкуНаПодключениеФТС,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ИзменившиесяРеквизитыВторичногоЗаявления КАК ИзменившиесяРеквизитыВторичногоЗаявления,
		|	ЗаявлениеАбонентаСпецоператораСвязи.Получатели КАК Получатели
		|ИЗ
		|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
		|ГДЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.Организация = &Организация
		|	И НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
		|	И (ЗаявлениеАбонентаСпецоператораСвязи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено)
		|		ИЛИ ЗаявлениеАбонентаСпецоператораСвязи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено))
		|	И ЗаявлениеАбонентаСпецоператораСвязи.ДатаОтправкиЗаявления >= &ДатаАвтоматическогоОтказа
		|	И (ЗаявлениеАбонентаСпецоператораСвязи.ТипЗаявления = ЗНАЧЕНИЕ(Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное)
		|		ИЛИ ЗаявлениеАбонентаСпецоператораСвязи.ТипЗаявления = ЗНАЧЕНИЕ(Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение)
		|		И ЗаявлениеАбонентаСпецоператораСвязи.ИзменившиесяРеквизитыВторичногоЗаявления.ИзмененныйРеквизит В (ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС),
		|			ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР),
		|			ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат),
		|			ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС),
		|			ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР),
		|			ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН),
		|			ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФТС)))
		|УПОРЯДОЧИТЬ ПО
		|	ЗаявлениеАбонентаСпецоператораСвязи.ДатаОтправкиЗаявления УБЫВ");
	Запрос.УстановитьПараметр("Организация", 				Организация);
	Запрос.УстановитьПараметр("ДатаАвтоматическогоОтказа", 	ДатаАвтоматическогоОтказа);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И (Выборка.Статус <> Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено
		ИЛИ НЕ Выборка.НастройкаЗавершена) Тогда
		
		// чтение направлений последнего заявления, если оно не было одобрено с завершением настройки
		
		СдачаВФНС 					= Ложь;
		КодыФНС 					= Новый Массив;
		СдачаВПФР 					= Ложь;
		ЕстьПолучательПФР 			= Ложь;
		КодПФР 						= "";
		ЗаданРегНомерПФР 			= Ложь;
		СдачаВФСГС 					= Ложь;
		КодыФСГС 					= Новый Массив;
		СдачаВФСС 					= Ложь;
		ЕстьПолучательФСС 			= Ложь;
		ЗаданРегНомерФСС 			= Ложь;
		ЗаданДополнительныйКодФСС 	= Ложь;
		СдачаВФСРАР 				= Ложь;
		СдачаВРПН 					= Ложь;
		СдачаВФТС 					= Ложь;
		
		Если Выборка.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное Тогда
			СдачаВФНС 				= Истина;
			СдачаВПФР 				= Истина;
			СдачаВФСГС 				= Истина;
			СдачаВФСС 				= Истина;
			СдачаВФСРАР 			= Истина;
			СдачаВРПН 				= Истина;
			СдачаВФТС 				= Истина;
			
		Иначе
			ТаблицаИзменившихсяРеквизитов = Выборка.ИзменившиесяРеквизитыВторичногоЗаявления.Выгрузить();
			Для каждого СтрокаТаблицы Из ТаблицаИзменившихсяРеквизитов Цикл
				Если СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС Тогда
					СдачаВФНС = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР Тогда
					СдачаВПФР = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.РегНомерПФР Тогда
					ЗаданРегНомерПФР = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат Тогда
					СдачаВФСГС = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС Тогда
					СдачаВФСС = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.РегНомерФСС Тогда
					ЗаданРегНомерФСС = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.ДополнительныйКодФСС Тогда
					ЗаданДополнительныйКодФСС = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР Тогда
					СдачаВФСРАР = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН Тогда
					СдачаВРПН = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФТС Тогда
					СдачаВФТС = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СдачаВФНС ИЛИ СдачаВПФР ИЛИ СдачаВФСГС ИЛИ СдачаВФСС Тогда
			ТаблицаПолучателей = Выборка.Получатели.Выгрузить();
			
			Для каждого СтрокаТаблицы Из ТаблицаПолучателей Цикл
				Если СтрокаТаблицы.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС И СдачаВФНС Тогда
					КодФНС = Новый Структура("КодПолучателя, КПП", СтрокаТаблицы.КодПолучателя, СтрокаТаблицы.КПП);
					КодыФНС.Добавить(КодФНС);
					
				ИначеЕсли СтрокаТаблицы.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР И СдачаВПФР Тогда
					ЕстьПолучательПФР = Истина;
					КодПФР = СтрокаТаблицы.КодПолучателя;
					Если НЕ ЗаданРегНомерПФР Тогда
						ЗаданРегНомерПФР = ЗначениеЗаполнено(Выборка.РегНомерПФР);
					КонецЕсли;
					
				ИначеЕсли СтрокаТаблицы.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС И СдачаВФСГС Тогда
					КодыФСГС.Добавить(СтрокаТаблицы.КодПолучателя);
					
				ИначеЕсли СтрокаТаблицы.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС И СдачаВФСС Тогда
					ЕстьПолучательФСС = Истина;
					Если НЕ ЗаданРегНомерФСС Тогда
						ЗаданРегНомерФСС = ЗначениеЗаполнено(Выборка.РегНомерФСС);
					КонецЕсли;
					Если НЕ ЗаданДополнительныйКодФСС Тогда
						ЗаданДополнительныйКодФСС = ЗначениеЗаполнено(Выборка.ДополнительныйКодФСС);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// задание направлений в новом заявлении
		
		Если СдачаВФНС И ТипКонтролирующегоОргана <> Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.КодыФНС;
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС;
			
			УдалитьПолучателейКонтролирующегоОргана(НовыйДокументЗаявление, Перечисления.ТипыКонтролирующихОрганов.ФНС);
			
			Для каждого КодФНС Из КодыФНС Цикл
				НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
				НоваяСтрокаНаправления.ТипПолучателя 	= Перечисления.ТипыКонтролирующихОрганов.ФНС;
				НоваяСтрокаНаправления.КодПолучателя 	= КодФНС.КодПолучателя;
				НоваяСтрокаНаправления.КПП 				= КодФНС.КПП;
			КонецЦикла;
		КонецЕсли;
		
		Если СдачаВПФР И ТипКонтролирующегоОргана <> Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			Если ЗаданРегНомерПФР Тогда
				НовыйДокументЗаявление.РегНомерПФР = Выборка.РегНомерПФР;
			КонецЕсли;
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР;
			
			УдалитьПолучателейКонтролирующегоОргана(НовыйДокументЗаявление, Перечисления.ТипыКонтролирующихОрганов.ПФР);
			
			Если ЕстьПолучательПФР Тогда
				НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
				НоваяСтрокаНаправления.ТипПолучателя 	= Перечисления.ТипыКонтролирующихОрганов.ПФР;
				НоваяСтрокаНаправления.КодПолучателя 	= КодПФР;
				НоваяСтрокаНаправления.КПП 			 	= "";
			КонецЕсли;
		КонецЕсли;
		
		Если СдачаВФСГС И ТипКонтролирующегоОргана <> Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.КодРосстата;
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат;
			
			УдалитьПолучателейКонтролирующегоОргана(НовыйДокументЗаявление, Перечисления.ТипыКонтролирующихОрганов.ФСГС);
			
			Для каждого КодФСГС Из КодыФСГС Цикл
				НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
				НоваяСтрокаНаправления.ТипПолучателя 	= Перечисления.ТипыКонтролирующихОрганов.ФСГС;
				НоваяСтрокаНаправления.КодПолучателя 	= КодФСГС;
				НоваяСтрокаНаправления.КПП 			 	= "";
			КонецЦикла;
		КонецЕсли;
		
		Если СдачаВФСС И ТипКонтролирующегоОргана <> Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			Если ЗаданРегНомерФСС Тогда
				НовыйДокументЗаявление.РегНомерФСС = Выборка.РегНомерФСС;
			КонецЕсли;
			
			Если ЗаданДополнительныйКодФСС Тогда
				НовыйДокументЗаявление.ДополнительныйКодФСС = Выборка.ДополнительныйКодФСС;
			КонецЕсли;
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС;
			
			УдалитьПолучателейКонтролирующегоОргана(НовыйДокументЗаявление, Перечисления.ТипыКонтролирующихОрганов.ФСС);
			
			Если ЕстьПолучательФСС Тогда
				НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
				НоваяСтрокаНаправления.ТипПолучателя 	= Перечисления.ТипыКонтролирующихОрганов.ФСС;
				НоваяСтрокаНаправления.КодПолучателя 	= "";
				НоваяСтрокаНаправления.КПП 			 	= "";
			КонецЕсли;
		КонецЕсли;
		
		Если СдачаВФСРАР И ТипКонтролирующегоОргана <> Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
			НовыйДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР = Выборка.ПодатьЗаявкуНаСертификатДляФСРАР;
			
			НовыйДокументЗаявление.КодРегионаФСРАР = Выборка.КодРегионаФСРАР;
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР;
		КонецЕсли;
		
		Если СдачаВРПН И ТипКонтролирующегоОргана <> Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
			НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН = Выборка.ПодатьЗаявкуНаПодключениеРПН;
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН;
		КонецЕсли;
		
		Если СдачаВФТС И ТипКонтролирующегоОргана <> Перечисления.ТипыКонтролирующихОрганов.ФТС Тогда
			НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеФТС = Выборка.ПодатьЗаявкуНаПодключениеФТС;
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФТС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПолучателейКонтролирующегоОргана(НовыйДокументЗаявление, ТипКонтролирующегоОргана) Экспорт
	
	ИндексПолучателя = НовыйДокументЗаявление.Получатели.Количество() - 1;
	Пока ИндексПолучателя >= 0 Цикл
		СтрокаНаправления = НовыйДокументЗаявление.Получатели[ИндексПолучателя];
		Если СтрокаНаправления.ТипПолучателя = ТипКонтролирующегоОргана Тогда
			НовыйДокументЗаявление.Получатели.Удалить(ИндексПолучателя);
		КонецЕсли;
		ИндексПолучателя = ИндексПолучателя - 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаявлениеСодержитМинимальноНеобходимыхПолучателей(НовыйДокументЗаявление) Экспорт
	
	Для каждого ПолучательЗаявления Из НовыйДокументЗаявление.Получатели Цикл
		Если ПолучательЗаявления.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			Возврат Истина;
		ИначеЕсли ПолучательЗаявления.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОсновнойРаздел
СоответствиеТипаСообщенияКраткомуПредставлению = Новый Соответствие;
// ФНС 534
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП, "Отчет");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО, "Подтверждение даты отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, "Извещение на подтверждение даты отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО, "Извещение о получении отчета");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО, "Результат приема");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, "Извещение о получении результата приема");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО, "Результат обработки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, "Извещение о получении результата обработки");

//ФНС Документ
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ДокументНО, "Документ");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП, "Извещение о получении документа");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП,"Результат приема документа");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНО, "Извещение о получении результата приема документа");

//ФНС Заявление
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП,						"Отчет");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО,		"Подтверждение даты отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗаявлениеНО,			"Извещение о получении отчета");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО,		"Результат приема");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО, 	"Результат обработки заявления");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО, "Результат обработки в РФ");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП,	"Извещение о получении результата обработки в РФ");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО,	"Сообщение об отзыве заявления в РФ");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП,	"Извещение о получении сообщения об отзыве заявления в РФ");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО,	"Результат обработки заявления в ТС");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП,	"Извещение о получении результата обработки заявления в ТС");

// ФНС 534 2-НДФЛ
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП, "Форма 2-НДФЛ");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО, "Подтверждение даты отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО, "Извещение о получении формы 2-НДФЛ");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО, "Результат приема");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС, "Уведомление об ошибке");

// ФНС 534 НФД
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП, "Письмо");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО, "Подтверждение даты отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО, "Извещение о получении письма");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО, "Результат приема");

// ФНС Представление
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП, "Представление");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО, "Подтверждение даты отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПредставлениеНО, "Извещение о получении представления");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО, "Результат приема");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО, "Письмо");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП, "Извещение о получении письма");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО, "Рассылка");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП, "Извещение о получении рассылки");

// ФНС 534 ИОН
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП, "Запрос");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО, "Подтверждение даты отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО, "Извещение о получении запроса");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО, "Результат приема");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО, "Результат обработки");

// ПФР
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР, "Отчет");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР, "Подтверждение получения");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР, "Протокол");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР, "Квитанция на протокол");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР, "Исходящее письмо");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР, "Квитанция на исходящее письмо");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР, "Входящее письмо");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР, "Квитанция на входящее письмо");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР, "Запрос");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР, "Подтверждение получения");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР, "Ответ на запрос");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР, "Квитанция на ответ на запрос");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР, "Уведомление об ошибке");

// Росстат
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС, "Отчет");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС, "Подтверждение даты отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС, "Извещение о получении подтверждения даты отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС, "Извещение о получении отчетности");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС, "Протокол");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС, "Извещение о получении протокола");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС, "Исходящее письмо");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС, "Извещение о получении письма его получателем");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС, "Входящее письмо");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС, "Рассылка");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС, "Извещение о получении письма его получателем");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС, "Уведомление об ошибке");
//
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка, "Критическая ошибка");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка(), "Неизвестный тип");
#КонецОбласти

#КонецЕсли