
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ВыполненныеНачисления, "ПредставлениеТипаДоначислениеПерерасчет", Документы.НачислениеЗарплаты.ПредставлениеТипаДоначислениеПерерасчет());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СледующийМесяц, "ПредставлениеТипаДоначислениеПерерасчет", Документы.НачислениеЗарплаты.ПредставлениеТипаДоначислениеПерерасчет());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ВыплатаНеОформлена, "ПредставлениеТипаДоначислениеПерерасчет", Документы.НачислениеЗарплаты.ПредставлениеТипаДоначислениеПерерасчет());
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка( 
		ВыполненныеНачисления, "ПредставлениеТипаРасчетЗарплаты", Метаданные.Документы.НачислениеЗарплаты.Синоним);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка( 
		СледующийМесяц, "ПредставлениеТипаРасчетЗарплаты", Метаданные.Документы.НачислениеЗарплаты.Синоним);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка( 
		ВыплатаНеОформлена, "ПредставлениеТипаРасчетЗарплаты", Метаданные.Документы.НачислениеЗарплаты.Синоним);
	
	ЗначенияДляЗаполнения  = Новый Структура("Организация,Месяц", "Организация", "МесяцНачисления");
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "МесяцНачисления", "МесяцНачисленияСтрокой");
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ЗарплатаКадры.ПерваяДоступнаяОрганизация();
	КонецЕсли; 
	
	УстановитьОтборСписков();
	
	ЗаполнитьИменаТаблицДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НачислениеЗарплаты"
		И Параметр.Свойство("Организация")
		И Параметр.Организация = Организация Тогда
		
		УстановитьОтображениеСообщенияОНеобходимостиПерерасчета();
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "МесяцНачисления", "МесяцНачисленияСтрокой");
	
	МесяцНачисленияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "МесяцНачисления", "МесяцНачисленияСтрокой", Ложь, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт

	МесяцНачисленияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "МесяцНачисления", "МесяцНачисленияСтрокой", Направление);
	ПодключитьОбработчикОжидания("УстановитьОтборСписковПослеИзмененияОтбора", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСписковПослеИзмененияОтбора()
	МесяцНачисленияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОНеобходимостиПерерасчетаНадписьОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Подробнее" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Организация", Организация);
		ПараметрыОткрытия.Вставить("ПериодДействия", МесяцНачисления);
		ПараметрыОткрытия.Вставить("ГруппироватьПоДокументамНачисления", Истина);
		
		ОткрытьФорму("Обработка.УправлениеПерерасчетами.Форма.ПричиныПерерасчетов",  ПараметрыОткрытия, ЭтотОбъект,
			, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Доначислить" Тогда
		
		ДоступныеДоначисления = ПерерасчетЗарплатыВызовСервера.ДокументыПерерасчета(Организация, МесяцНачисления);
		
		ДополнительныеПараметры = Новый Структура("МесяцНачисления", ДоступныеДоначисления.МесяцНачисления);
		
		Если ДоступныеДоначисления.Документы.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("РежимДоначисления", Истина);
			ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Организация", Организация);
			СтруктураОтбора.Вставить("МесяцНачисления", ДоступныеДоначисления.МесяцНачисления);
			СтруктураОтбора.Вставить("Ссылка", ДоступныеДоначисления.Документы);
			
			ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
			
			Оповещение = Новый ОписаниеОповещения("ДоначислитьСейчасЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ОткрытьФорму("Документ.НачислениеЗарплаты.ФормаСписка",
				ПараметрыОткрытия, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			Если ДоступныеДоначисления.Документы.Количество() = 1 Тогда
				ДокументДоначисления = ДоступныеДоначисления.Документы[0];
			Иначе
				ДокументДоначисления = ПредопределенноеЗначение("Документ.НачислениеЗарплаты.ПустаяСсылка");
			КонецЕсли;
			
			ДоначислитьСейчасЗавершение(ДокументДоначисления, ДополнительныеПараметры);
			
		КонецЕсли; 
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыНерассчитанныеДокументыИПериоды

&НаКлиенте
Процедура НерассчитанныеДокументыИПериодыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПередНачаломДобавленияДокумента(Параметр, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВыполненныеНачисления

&НаКлиенте
Процедура ВыполненныеНачисленияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПередНачаломДобавленияДокумента(Параметр, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСледующийМесяц

&НаКлиенте
Процедура СледующийМесяцПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПередНачаломДобавленияДокумента(Параметр, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВыплатаНеОформлена

&НаКлиенте
Процедура ВыплатаНеОформленаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПередНачаломДобавленияДокумента(Параметр, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВыплаты

&НаКлиенте
Процедура ВыплатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПередНачаломДобавленияДокумента(Параметр, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыПриИзменении(Элемент)
	
	УстановитьОтборСписков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НачислитьАванс(Команда)
	
	СоздатьДокумент("НачислениеЗаПервуюПоловинуМесяца");
	
КонецПроцедуры

&НаКлиенте
Процедура НачислитьЗарплату(Команда)
	
	СоздатьДокумент("НачислениеЗарплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура БольничныйЛист(Команда)
	
	СоздатьДокумент("БольничныйЛист");
	
КонецПроцедуры

&НаКлиенте
Процедура Отпуск(Команда)
	
	СоздатьДокумент("Отпуск");
	
КонецПроцедуры

&НаКлиенте
Процедура Командировка(Команда)
	
	СоздатьДокумент("Командировка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьЗарплатуВБухучете(Команда)
	
	СтандартнаяОбработка = Истина;
	
	РасчетЗарплатыРасширенныйКлиентПереопределяемый.СоздатьДокументОтраженияВБухучете(Организация, МесяцНачисления, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизацийРасширенная") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("БухучетХозрасчетныхОрганизацийРасширенныйКлиент");
		Модуль.ОткрытьФормуСпискаДокументаОтражениеЗарплатыВБухучете(, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьЗарплатуВБухучетеБюджетныхУчреждений(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УчетБюджетныхУчрежденийКлиент");
		Модуль.ОткрытьФормуСпискаДокументаОтражениеЗарплатыВБухучетеБюджетныхУчреждений(, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаВКассу(Команда)
	
	СоздатьДокумент("ВедомостьНаВыплатуЗарплатыВКассу");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаВБанк(Команда)
	
	СоздатьДокумент("ВедомостьНаВыплатуЗарплатыВБанк");
	
КонецПроцедуры

&НаКлиенте
Процедура Проанализировать(Команда)
	
	ПериодОтчета = Новый СтандартныйПериод(МесяцНачисления, КонецМесяца(МесяцНачисления));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "АнализФОТПоСотрудникам");
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация, ПериодОтчета", Организация, ПериодОтчета));
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.АнализПлановыхНачислений.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДоначислитьСейчасЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", Результат);
		
		ЗначенияЗаполнения = Новый Структура;
		Если Не ЗначениеЗаполнено(Результат) Тогда
			ЗначенияЗаполнения.Вставить("Организация", Организация);
			ЗначенияЗаполнения.Вставить("МесяцНачисления", ДополнительныеПараметры.МесяцНачисления);
			ЗначенияЗаполнения.Вставить("РежимДоначисления", Истина);
		КонецЕсли; 
		
		ЗначенияЗаполнения.Вставить("ЗаполнитьПриОткрытии", Истина);
		
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Документ.НачислениеЗарплаты.ФормаОбъекта", ПараметрыОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПользователя", "Организация", Организация);
	УстановитьОтборСписков();
	
КонецПроцедуры

&НаСервере
Процедура МесяцНачисленияПриИзмененииНаСервере()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПользователя", "МесяцНачисления", МесяцНачисления);
	УстановитьОтборСписков();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСписков()

	ИспользоватьМногофункциональность = ПолучитьФункциональнуюОпцию("ИспользоватьМногофункциональностьДокументовЗарплатаКадры");
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ПилотныйПроект = ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(Организация, МесяцНачисления);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НерассчитанныеДокументыИПериоды.Отбор, "Организация", Организация, , , ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НерассчитанныеДокументыИПериоды.Отбор, "МесяцНачисления", МесяцНачисления, , , ЗначениеЗаполнено(МесяцНачисления));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НерассчитанныеДокументыИПериоды, "ИспользоватьМногофункциональность", ИспользоватьМногофункциональность, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ВыполненныеНачисления.Отбор, "Организация", Организация, , , ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ВыполненныеНачисления.Отбор, "МесяцНачисления", МесяцНачисления, , , ЗначениеЗаполнено(МесяцНачисления));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ВыполненныеНачисления, "ПилотныйПроект", ПилотныйПроект, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СледующийМесяц.Отбор, "Организация", Организация, , , ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СледующийМесяц.Отбор, "МесяцНачисления", МесяцНачисления, ВидСравненияКомпоновкиДанных.Больше, , ЗначениеЗаполнено(МесяцНачисления));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ВыплатаНеОформлена.Отбор, "Организация", Организация, , , ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ВыплатаНеОформлена.Отбор, "МесяцНачисления", МесяцНачисления, , , ЗначениеЗаполнено(МесяцНачисления));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ВыплатаНеОформлена, "ДатаСеанса", ДатаСеанса, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ВыплатаНеОформлена, "Период", МесяцНачисления, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Выплаты.Отбор, "Организация", Организация, , , ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Выплаты.Отбор, "МесяцНачисления", МесяцНачисления, , , ЗначениеЗаполнено(МесяцНачисления));
	
	ОбновитьИнформационныеНадписи();
	                   
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформационныеНадписи()
	
	СуммаКВыплате = ОстатокНевыплаченнойЗарплатыНаКонецМесяца(Организация, МесяцНачисления);
	Если СуммаКВыплате >= МинимальнаяСуммаНевыплаченнойЗарплаты() Тогда
		НадписьНевыплаченнаяЗарплата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Остаток невыплаченной зарплаты на конец месяца: %1'"), СуммаКВыплате);
		Элементы.ГруппаДекорацияНевыплаченнаяЗарплата.Видимость = Истина;
	Иначе 
		Элементы.ГруппаДекорацияНевыплаченнаяЗарплата.Видимость = Ложь;
	КонецЕсли;	
	
	Элементы.ГруппаСледующийМесяц.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='После %1'"), Сред(Формат(МесяцНачисления, "ДЛФ=ДД"), 3));
	УстановитьОтображениеСообщенияОНеобходимостиПерерасчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеСообщенияОНеобходимостиПерерасчета()
	
	ПерерасчетЗарплаты.УстановитьОтображениеСообщенияОНеобходимостиПерерасчета(ЭтаФорма, Организация, МесяцНачисления);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОстатокНевыплаченнойЗарплатыНаКонецМесяца(Организация, МесяцНачисления)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период", КонецМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплате
	               |ИЗ
	               |	РегистрНакопления.ЗарплатаКВыплате.Остатки(&Период, Организация = &Организация) КАК ЗарплатаКВыплатеОстатки";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.СуммаКВыплате;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция МинимальнаяСуммаНевыплаченнойЗарплаты()
	
	Возврат 1000;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокумент(ИмяДокумента)
	
	ЗначенияЗаполнения = Новый Структура("Организация, ПериодРегистрации, МесяцНачисления", Организация, МесяцНачисления, МесяцНачисления);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломДобавленияДокумента(Параметр, Отказ)
	
	ИмяДокумента = ИменаТаблицДокументов.Получить(Параметр);
	Если ИмяДокумента <> Неопределено Тогда 
		Отказ = Истина;
		СоздатьДокумент(ИмяДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИменаТаблицДокументов()
	
	ИменаДокументов = Новый Соответствие;
	
	ДокументыНачисленияЗарплаты = Метаданные.ЖурналыДокументов.НачислениеЗарплаты.РегистрируемыеДокументы;	
	Для Каждого РегистрируемыйДокумент Из ДокументыНачисленияЗарплаты Цикл 
		ИменаДокументов.Вставить(Тип("ДокументСсылка." + РегистрируемыйДокумент.Имя), РегистрируемыйДокумент.Имя);
	КонецЦикла;
	
	ВедомостиНаВыплатуЗарплаты = Метаданные.ЖурналыДокументов.ВедомостиНаВыплатуЗарплаты.РегистрируемыеДокументы;	
	Для Каждого РегистрируемыйДокумент Из ВедомостиНаВыплатуЗарплаты Цикл 
		ИменаДокументов.Вставить(Тип("ДокументСсылка." + РегистрируемыйДокумент.Имя), РегистрируемыйДокумент.Имя);
	КонецЦикла;
	
	ИменаТаблицДокументов = Новый ФиксированноеСоответствие(ИменаДокументов);
	
КонецПроцедуры

#КонецОбласти
