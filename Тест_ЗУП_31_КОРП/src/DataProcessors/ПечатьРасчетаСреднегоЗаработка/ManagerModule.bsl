#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда	

#Область СлужебныеПроцедурыИФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	ДанныеДокументов = ДанныеДокументовРасчетаСреднегоЗаработка(МассивОбъектов);

	// Проверяем, нужно ли для макета РасчетСреднегоЗаработка формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовРасчетаСреднегоЗаработка(МассивОбъектов);
		ТабличныйДокумент = ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, "РасчетСреднегоЗаработка");
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка", НСтр("ru = 'Расчет среднего заработка'"), ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	// Проверяем, нужно ли для макета РасчетСреднегоЗаработкаВыходногоПособия формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаВыходногоПособия") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовРасчетаСреднегоЗаработка(МассивОбъектов);
		ТабличныйДокумент = ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, "РасчетСреднегоЗаработкаВыходногоПособия");
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаВыходногоПособия", НСтр("ru = 'Расчет среднего заработка (для выходного пособия)'"), ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаФорма0504425") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовРасчетаСреднегоЗаработкаДляПечатиЗапискиРасчета0504425(МассивОбъектов);
		ТабличныйДокумент = ТабличныйДокументРасчетаСреднегоЗаработка0504425(ДанныеДокументов,
		ОбъектыПечати,
		"ПФ_MXL_ЗапискаРасчетФорма0504425");
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
			"РасчетСреднегоЗаработкаФорма0504425",
			НСтр("ru = 'Записка-расчет (0504425)'"),
			ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаФорма0504425с2015") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовРасчетаСреднегоЗаработкаДляПечатиЗапискиРасчета0504425(МассивОбъектов);
		ТабличныйДокумент = ТабличныйДокументРасчетаСреднегоЗаработка0504425(ДанныеДокументов,
		ОбъектыПечати,
		"ПФ_MXL_ЗапискаРасчетФорма0504425с2015");
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
			"РасчетСреднегоЗаработкаФорма0504425с2015",
			НСтр("ru = 'Записка-расчет (0504425) с 2015 года'"),
			ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбщийСреднийЗаработок

// Функция возвращает табличный документ - печатную форму расчета среднего заработка.
//
Функция ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, ИмяМакета, ВыводитьЗаголовок = Истина) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетСреднегоЗаработка";
	
	Если ИмяМакета = "РасчетСреднегоЗаработкаКомпактный" Тогда
		ЗаполнитьТабличныйДокументРасчетаСреднегоЗаработкаКомпактный(ТабличныйДокумент, ОбъектыПечати, ИмяМакета, ДанныеДокументов);			
	Иначе	
		ЗаполнитьТабличныйДокументРасчетаСреднегоЗаработка(ТабличныйДокумент, ОбъектыПечати, ИмяМакета, ДанныеДокументов, ВыводитьЗаголовок);							
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции 	

// Подготавливает табличный документ с печатными формами для массива ссылок.
//
// Параметры:
//	МассивСсылок 		- массив ссылок на документы поддерживающие печать среднего заработка.
//	ВыводитьЗаголовок 	- признак того, что надо формировать полную печатную форму.
//	ИмяМакета 			- имя варианта печати среднего заработка.
//
// Возвращаемое значение - структура в которой содержатся
// 		- ТабличныйДокумент, табличный документ с областями для каждой ссылки из массива ссылок.
// 		- ОбъектыПечати, соответствие, ключом которой является ссылка, а значением - имя области табличного документа,
// 			в которой хранится печатная форма для этой ссылки.
//
Функция ОбластиДляВстраивания(ДанныеДокументов, ИмяМакета, ВыводитьЗаголовок = Ложь) Экспорт
	
	ОбъектыПечати = ОбъектыПечатиДляВстраиваемыхОбластей();
	
	ТабличныйДокумент = ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, ИмяМакета, ВыводитьЗаголовок);
	
	Возврат Новый Структура("ОбъектыПечати,ТабличныйДокумент", ОбъектыПечати, ТабличныйДокумент);
	
КонецФункции

#Область ПолныйВариант

Процедура ЗаполнитьТабличныйДокументРасчетаСреднегоЗаработка(ТабличныйДокумент, ОбъектыПечати, ИмяМакета, ДанныеДокументов, ВыводитьЗаголовок)
		
	ЗначенияПараметров = Новый Структура;
	
	КоллекцияСсылок = Новый Соответствие;
	Для Каждого ДанныеДокумента Из ДанныеДокументов Цикл
		
		СсылкаНаДокумент = ДанныеДокумента.РеквизитыДокумента.Ссылка;
		ДанныеСсылкиДокумента = КоллекцияСсылок.Получить(СсылкаНаДокумент);
		Если ДанныеСсылкиДокумента = Неопределено Тогда
			ДанныеСсылкиДокумента = Новый Массив;
			КоллекцияСсылок.Вставить(СсылкаНаДокумент, ДанныеСсылкиДокумента);
		КонецЕсли;
		
		ДанныеСсылкиДокумента.Добавить(ДанныеДокумента);
		
	КонецЦикла;
	
	Для Каждого ЭлементКоллекцииСсылок Из КоллекцияСсылок Цикл
		
		ДанныеДокументов = ЭлементКоллекцииСсылок.Значение;
		НомерСтрокиНачалоСсылки = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Для каждого ДанныеДокумента Из ДанныеДокументов Цикл
			
			ИспользуетсяИндексация = ИспользуетсяИндексация(ДанныеДокумента.ДанныеРасчетаСреднего.Заработок);

			ДанныеОЗаработке = ПреобразоватьДанныеОЗаработкеВТаблицыЗначений(ДанныеДокумента.ДанныеРасчетаСреднего.Заработок);
			ОтработанноеВремя = ПреобразоватьДанныеОВремениВТаблицуЗначений(ДанныеДокумента.ДанныеРасчетаСреднего.ОтработанноеВремя);

			Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

			// Подготовим макеты для формирования табличного документа.
			ОбластиМакета = ОбластиМакетаСреднегоЗаработка(ИспользуетсяИндексация, ДанныеДокумента.ПараметрыРасчета.СпособРасчета);
			
			Если ВыводитьЗаголовок Тогда
				ВывестиШапку(ТабличныйДокумент, ОбластиМакета.ОбластьШапка, ДанныеДокумента.РеквизитыДокумента, ДанныеДокумента.КадровыеДанныеСотрудника, ДанныеДокумента.ПараметрыРасчета);
			КонецЕсли;
			
			НомерРаздела = 1;
			
			ВывестиЗаработокЗаРасчетныйПериод(ТабличныйДокумент, НомерРаздела, ОбластиМакета.ОбластьШапкаЗаработка, ОбластиМакета.ОбластьСтрокаЗаработка, ОбластиМакета.ОбластьПодвалЗаработка, ДанныеОЗаработке.Заработок);
			
			ВывестиОтработанноеВремя(ТабличныйДокумент, НомерРаздела, ОбластиМакета.ОбластьШапкаОтработанногоВремени, ОбластиМакета.ОбластьСтрокаОтработанногоВремени, ОбластиМакета.ОбластьПодвалОтработанногоВремени, ОтработанноеВремя, ДанныеДокумента.ПараметрыРасчета.ИспользоватьСреднеЧасовойЗаработок);
			
			Если ДанныеОЗаработке.ПремииПропорционально.Количество() > 0 Тогда
				ВывестиДолюОтработанногоВремени(ТабличныйДокумент, ОбластиМакета.ОбластьДоляВремени, ДанныеДокумента.ДанныеРасчетаСреднего.ОтработанноеВремя, ДанныеДокумента.ПараметрыРасчета.ИспользоватьСреднеЧасовойЗаработок);
			КонецЕсли;
			
			Если ДанныеОЗаработке.ПремииПолностью.Количество() > 0 Тогда
				ВывестиПремииУчитываемыеПолностью(ТабличныйДокумент, НомерРаздела, ОбластиМакета.ОбластьШапкаПремииПолностью, ОбластиМакета.ОбластьСтрокаПремииПолностью, ОбластиМакета.ОбластьПодвалПремииПолностью, ДанныеОЗаработке.ПремииПолностью);
			Иначе
				ВывестиПремииУчитываемыеПолностьюНеВыплачивались(ТабличныйДокумент, НомерРаздела, ОбластиМакета.ОбластьПремииПолностьюНеВыплачивались);
			КонецЕсли;
			
			Если ДанныеОЗаработке.ПремииПропорционально.Количество() > 0 Тогда
				ВывестиПремииУчитываемыеПропорционально(ТабличныйДокумент, НомерРаздела, ОбластиМакета.ОбластьШапкаПремииПропорционально, ОбластиМакета.ОбластьСтрокаПремииПропорционально, ОбластиМакета.ОбластьПодвалПремииПропорционально, ДанныеОЗаработке.ПремииПропорционально);
			Иначе
				ВывестиПремииУчитываемыеПропорциональноНеВыплачивались(ТабличныйДокумент, НомерРаздела, ОбластиМакета.ОбластьПремииПропорциональноНеВыплачивались);
			КонецЕсли;
			
			Если ДанныеОЗаработке.ПремииПропорционально.Количество() > 0 Или ДанныеОЗаработке.ПремииПолностью.Количество() > 0 Тогда
				УчтеноПремийВсего = УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеОЗаработке.ПремииПропорционально, "Учтено") + УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеОЗаработке.ПремииПолностью, "Учтено");
				ВывестиУчтеноПремийВсего(ТабличныйДокумент, ОбластиМакета.ОбластьУчтеноПремийВсего, УчтеноПремийВсего);
			КонецЕсли;
			
			ВывестиРасчетСреднегоЗаработка(ТабличныйДокумент, НомерРаздела, ОбластиМакета.ОбластьРасчетСреднегоЗаработка, ДанныеДокумента.ДанныеРасчетаСреднего, ДанныеДокумента.ПараметрыРасчета.ИспользоватьСреднеЧасовойЗаработок);
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачалоСсылки, ОбъектыПечати, ЭлементКоллекцииСсылок.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ВывестиШапку(ТабличныйДокумент, ОбластьШапка, РеквизитыДокумента, КадровыеДанныеСотрудника, ПараметрыРасчета)
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("СинонимДокумента", 				РеквизитыДокумента.Ссылка.Метаданные().Синоним);
	ЗначенияПараметров.Вставить("НомерДокумента", 					ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СокрЛП(РеквизитыДокумента.НомерДокумента), Истина, Истина));
	ЗначенияПараметров.Вставить("ДатаДокумента", 					Формат(РеквизитыДокумента.ДатаДокумента, "ДЛФ=DD"));
	ЗначенияПараметров.Вставить("Ссылка", 							РеквизитыДокумента.Ссылка);                                                                                                                         
	ЗначенияПараметров.Вставить("НаименованиеОрганизации", 			РеквизитыДокумента.НаименованиеОрганизации);
	ЗначенияПараметров.Вставить("Организация", 						?(ЗначениеЗаполнено(РеквизитыДокумента.ПолноеНаименованиеОрганизации), РеквизитыДокумента.ПолноеНаименованиеОрганизации, РеквизитыДокумента.НаименованиеОрганизации));
	ЗначенияПараметров.Вставить("ДатаНачалаОтсутствия", 			Формат(РеквизитыДокумента.ДатаНачалаОтсутствия, "ДЛФ=D"));
	ЗначенияПараметров.Вставить("ДатаОкончанияОтсутствия", 			Формат(РеквизитыДокумента.ДатаОкончанияОтсутствия, "ДЛФ=D"));
	
	ЗначенияПараметров.Вставить("Сотрудник", 						РеквизитыДокумента.Сотрудник);
	ЗначенияПараметров.Вставить("ФИОРаботника", 					КадровыеДанныеСотрудника.ФИОПолные);
	ЗначенияПараметров.Вставить("ТабельныйНомер", 					ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(КадровыеДанныеСотрудника.ТабельныйНомер, Истина, Истина));
	ЗначенияПараметров.Вставить("ВидЗанятости", 					КадровыеДанныеСотрудника.ВидЗанятости);
	ЗначенияПараметров.Вставить("Подразделение", 					КадровыеДанныеСотрудника.Подразделение);
	ЗначенияПараметров.Вставить("Должность", 						КадровыеДанныеСотрудника.Должность);		
	
	ЗначенияПараметров.Вставить("СпособРасчета", 					?(ЗначениеЗаполнено(ПараметрыРасчета.СпособРасчета), ПараметрыРасчета.СпособРасчета, Нстр("ru = 'Общий средний заработок'")));
	ЗначенияПараметров.Вставить("ДатаНачалаРасчетногоПериода", 		Формат(ПараметрыРасчета.НачалоРасчетногоПериода,"ДЛФ=D"));
	ЗначенияПараметров.Вставить("ДатаОкончанияРасчетногоПериода", 	Формат(ПараметрыРасчета.ОкончаниеРасчетногоПериода,"ДЛФ=D"));
	
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
КонецПроцедуры

Процедура ВывестиЗаработокЗаРасчетныйПериод(ТабличныйДокумент, НомерРаздела, ОбластьШапкаЗаработка, ОбластьСтрокаЗаработка, ОбластьПодвалЗаработка, Заработок)
	
	ЗначенияПараметров = Новый Структура;

	УстановитьНомерРазделаВОбласти(НомерРаздела, ОбластьШапкаЗаработка);
	ТабличныйДокумент.Вывести(ОбластьШапкаЗаработка);
	
	Для каждого СтрокаЗаработка Из Заработок Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаЗаработка.Параметры, СтрокаЗаработка);
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Месяц", Формат(СтрокаЗаработка.Месяц, "ДФ='MMMM yyyy'"));
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаЗаработка.Параметры, ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьСтрокаЗаработка);
	КонецЦикла;
	
	ЗначенияПараметров.Очистить();
	ЗначенияПараметров.Вставить("Учтено", УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(Заработок, "Учтено"));
	ЗаполнитьЗначенияСвойств(ОбластьПодвалЗаработка.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьПодвалЗаработка);
	
КонецПроцедуры

Процедура ВывестиОтработанноеВремя(ТабличныйДокумент, НомерРаздела, ОбластьШапкаОтработанногоВремени, ОбластьСтрокаОтработанногоВремени, ОбластьПодвалОтработанногоВремени, ОтработанноеВремя, ИспользоватьСреднеЧасовойЗаработок)
	
	ЗначенияПараметров = Новый Структура;

	ЗначенияПараметров.Вставить("ЕдиницаИзмеренияВремени", НазваниеЕдиницыИзмеренияВремени(ИспользоватьСреднеЧасовойЗаработок)); 
	ЗаполнитьЗначенияСвойств(ОбластьШапкаОтработанногоВремени.Параметры, ЗначенияПараметров);
	УстановитьНомерРазделаВОбласти(НомерРаздела, ОбластьШапкаОтработанногоВремени);
	ТабличныйДокумент.Вывести(ОбластьШапкаОтработанногоВремени);
	
	Для каждого СтрокаОтработанноеВремя Из ОтработанноеВремя Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаОтработанногоВремени.Параметры, СтрокаОтработанноеВремя);
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Месяц", Формат(СтрокаОтработанноеВремя.Месяц, "ДФ='MMMM yyyy'"));
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаОтработанногоВремени.Параметры, ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьСтрокаОтработанногоВремени);
	КонецЦикла;
	
	ЗначенияПараметров.Очистить();
	ЗначенияПараметров.Вставить("КалендарныхДней", 			УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ОтработанноеВремя, "КалендарныхДней"));
	ЗначенияПараметров.Вставить("НормаКалендарныхДней", 	УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ОтработанноеВремя, "НормаКалендарныхДней"));
	ЗначенияПараметров.Вставить("ОтработаноПятидневка", 	УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ОтработанноеВремя, "ОтработаноПятидневка"));
	ЗначенияПараметров.Вставить("НормаПятидневка", 			УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ОтработанноеВремя, "НормаПятидневка"));
	ЗначенияПараметров.Вставить("ОтработаноДней", 			УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ОтработанноеВремя, "ОтработаноДней"));
	ЗначенияПараметров.Вставить("ОтработаноЧасов", 			УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ОтработанноеВремя, "ОтработаноЧасов"));
	ЗначенияПараметров.Вставить("Учтено", 					УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ОтработанноеВремя, "Учтено"));
	ЗаполнитьЗначенияСвойств(ОбластьПодвалОтработанногоВремени.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьПодвалОтработанногоВремени);
	
КонецПроцедуры

Процедура ВывестиДолюОтработанногоВремени(ТабличныйДокумент, ОбластьДоляВремени, ОтработанноеВремя, ИспользоватьСреднеЧасовойЗаработок)
	
	ЗначенияПараметров = Новый Структура;
	
	ЗначенияПараметров.Вставить("ВсегоОтработано", 	УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ОтработанноеВремя, "ОтработаноПятидневка"));
	ЗначенияПараметров.Вставить("ВсегоПоНорме", 	УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ОтработанноеВремя, "НормаПятидневка"));
	ЗначенияПараметров.Вставить("ДоляВремени", 		УчетСреднегоЗаработкаКлиентСервер.ДоляОтработанногоВремени(ОтработанноеВремя));
	ЗаполнитьЗначенияСвойств(ОбластьДоляВремени.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьДоляВремени);
КонецПроцедуры

Процедура ВывестиПремииУчитываемыеПолностью(ТабличныйДокумент, НомерРаздела, ОбластьШапкаПремииПолностью, ОбластьСтрокаПремииПолностью, ОбластьПодвалПремииПолностью, ПремииПолностью)
	
	ЗначенияПараметров = Новый Структура;	
	
	УстановитьНомерРазделаВОбласти(НомерРаздела, ОбластьШапкаПремииПолностью);
	ТабличныйДокумент.Вывести(ОбластьШапкаПремииПолностью);
	
	Для каждого СтрокаЗаработка Из ПремииПолностью Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаПремииПолностью.Параметры, СтрокаЗаработка);
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Месяц",		 Формат(СтрокаЗаработка.Месяц, "ДФ='MMMM yyyy'"));
		ЗначенияПараметров.Вставить("МесяцевПремии", ?(ЗначениеЗаполнено(СтрокаЗаработка.КоличествоМесяцев), "; за " + СтрокаЗаработка.КоличествоМесяцев + " мес.",""));
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаПремииПолностью.Параметры, ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьСтрокаПремииПолностью);
	КонецЦикла;
	
	ЗначенияПараметров.Очистить();
	ЗначенияПараметров.Вставить("Учтено", УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ПремииПолностью, "Учтено"));
	ЗаполнитьЗначенияСвойств(ОбластьПодвалПремииПолностью.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьПодвалПремииПолностью);
	
КонецПроцедуры

Процедура ВывестиПремииУчитываемыеПолностьюНеВыплачивались(ТабличныйДокумент, НомерРаздела, ОбластьПремииПолностьюНеВыплачивались)
	
	УстановитьНомерРазделаВОбласти(НомерРаздела, ОбластьПремииПолностьюНеВыплачивались);
	ТабличныйДокумент.Вывести(ОбластьПремииПолностьюНеВыплачивались);
	
КонецПроцедуры

Процедура ВывестиПремииУчитываемыеПропорционально(ТабличныйДокумент, НомерРаздела, ОбластьШапкаПремииПропорционально, ОбластьСтрокаПремииПропорционально, ОбластьПодвалПремииПропорционально, ПремииПропорционально)
	
	ЗначенияПараметров = Новый Структура;
	
	УстановитьНомерРазделаВОбласти(НомерРаздела, ОбластьШапкаПремииПропорционально);
	ТабличныйДокумент.Вывести(ОбластьШапкаПремииПропорционально);
	
	Для каждого СтрокаЗаработка Из ПремииПропорционально Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаПремииПропорционально.Параметры, СтрокаЗаработка);
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Месяц",			Формат(СтрокаЗаработка.Месяц, "ДФ='MMMM yyyy'"));
		ЗначенияПараметров.Вставить("МесяцевПремии", 	?(ЗначениеЗаполнено(СтрокаЗаработка.КоличествоМесяцев), "; за " + СтрокаЗаработка.КоличествоМесяцев + " мес.",""));
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаПремииПропорционально.Параметры, ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьСтрокаПремииПропорционально);
	КонецЦикла;
	
	ЗначенияПараметров.Очистить();
	ЗначенияПараметров.Вставить("Учтено", ПремииПропорционально.Итог("Учтено"));
	ЗаполнитьЗначенияСвойств(ОбластьПодвалПремииПропорционально.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьПодвалПремииПропорционально);
	
КонецПроцедуры

Процедура ВывестиПремииУчитываемыеПропорциональноНеВыплачивались(ТабличныйДокумент, НомерРаздела, ОбластьПремииПропорциональноНеВыплачивались)
	УстановитьНомерРазделаВОбласти(НомерРаздела, ОбластьПремииПропорциональноНеВыплачивались);
	ТабличныйДокумент.Вывести(ОбластьПремииПропорциональноНеВыплачивались);
КонецПроцедуры

Процедура ВывестиУчтеноПремийВсего(ТабличныйДокумент, ОбластьУчтеноПремийВсего, УчтеноПремийВсего)
	
	ЗначенияПараметров = Новый Структура;
	
	ЗначенияПараметров.Вставить("УчтеноПремий", УчтеноПремийВсего);
	ЗаполнитьЗначенияСвойств(ОбластьУчтеноПремийВсего.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьУчтеноПремийВсего);
	
КонецПроцедуры

Процедура ВывестиРасчетСреднегоЗаработка(ТабличныйДокумент, НомерРаздела, ОбластьРасчетСреднегоЗаработка, ДанныеРасчетаСреднего, ИспользоватьСреднеЧасовойЗаработок)
	
	УстановитьНомерРазделаВОбласти(НомерРаздела, ОбластьРасчетСреднегоЗаработка);
	
	ЗначенияПараметров = Новый Структура;
	
	ЗначенияПараметров.Вставить("УчтеноВремени", 	УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего.ОтработанноеВремя, "Учтено")); 
	ЗначенияПараметров.Вставить("УчтеноЗаработок", 	УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего.Заработок, "Учтено"));
	ЗначенияПараметров.Вставить("СреднедневнойЗаработок", УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработок(ЗначенияПараметров.УчтеноЗаработок, ЗначенияПараметров.УчтеноВремени)); 
	ЗначенияПараметров.Вставить("ОписаниеЗаработка", НазваниеСреднегоЗаработка(ИспользоватьСреднеЧасовойЗаработок)); 
 	ЗначенияПараметров.Вставить("ЕдиницаИзмеренияВремени", НазваниеЕдиницыИзмеренияВремени(ИспользоватьСреднеЧасовойЗаработок)); 
	
	ЗаполнитьЗначенияСвойств(ОбластьРасчетСреднегоЗаработка.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьРасчетСреднегоЗаработка);
	
КонецПроцедуры

Функция ОбластиМакетаСреднегоЗаработка(ИспользуетсяИндексация = Истина, СпособРасчетаОтпуска = Неопределено)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьРасчетаСреднегоЗаработка.ПФ_MXL_РасчетСреднегоЗаработка");
	
	ОбластиМакета = Новый Структура;
	
	ОбластиМакета.Вставить("ОбластьШапка", 							Макет.ПолучитьОбласть("Шапка"));
	Если ИспользуетсяИндексация Тогда                               
		ОбластиМакета.Вставить("ОбластьШапкаЗаработка",  			Макет.ПолучитьОбласть("ЗаработокШапка"));
		ОбластиМакета.Вставить("ОбластьСтрокаЗаработка",  			Макет.ПолучитьОбласть("ЗаработокСтрока"));
		ОбластиМакета.Вставить("ОбластьПодвалЗаработка",  			Макет.ПолучитьОбласть("ЗаработокПодвал"));
		ОбластиМакета.Вставить("ОбластьШапкаПремииПолностью",  		Макет.ПолучитьОбласть("ПремииПолностьюШапка"));
		ОбластиМакета.Вставить("ОбластьСтрокаПремииПолностью",  	Макет.ПолучитьОбласть("ПремииПолностьюСтрока"));
		ОбластиМакета.Вставить("ОбластьПодвалПремииПолностью",  	Макет.ПолучитьОбласть("ПремииПолностьюПодвал"));
		ОбластиМакета.Вставить("ОбластьШапкаПремииПропорционально", Макет.ПолучитьОбласть("ПремииПропорциональноШапка"));
		ОбластиМакета.Вставить("ОбластьСтрокаПремииПропорционально",Макет.ПолучитьОбласть("ПремииПропорциональноСтрока"));
		ОбластиМакета.Вставить("ОбластьПодвалПремииПропорционально", Макет.ПолучитьОбласть("ПремииПропорциональноПодвал"));	
	Иначе	
		ОбластиМакета.Вставить("ОбластьШапкаЗаработка", 			Макет.ПолучитьОбласть("ЗаработокШапкаБезИндексации"));
		ОбластиМакета.Вставить("ОбластьСтрокаЗаработка",			Макет.ПолучитьОбласть("ЗаработокСтрокаБезИндексации"));
		ОбластиМакета.Вставить("ОбластьПодвалЗаработка",			Макет.ПолучитьОбласть("ЗаработокПодвалБезИндексации"));
		ОбластиМакета.Вставить("ОбластьШапкаПремииПолностью",  		Макет.ПолучитьОбласть("ПремииПолностьюШапкаБезИндексации"));
		ОбластиМакета.Вставить("ОбластьСтрокаПремииПолностью",  	Макет.ПолучитьОбласть("ПремииПолностьюСтрокаБезИндексации"));
		ОбластиМакета.Вставить("ОбластьПодвалПремииПолностью",  	Макет.ПолучитьОбласть("ПремииПолностьюПодвалБезИндексации"));
		ОбластиМакета.Вставить("ОбластьШапкаПремииПропорционально", Макет.ПолучитьОбласть("ПремииПропорциональноШапкаБезИндексации"));
		ОбластиМакета.Вставить("ОбластьСтрокаПремииПропорционально",Макет.ПолучитьОбласть("ПремииПропорциональноСтрокаБезИндексации"));
		ОбластиМакета.Вставить("ОбластьПодвалПремииПропорционально",Макет.ПолучитьОбласть("ПремииПропорциональноПодвалБезИндексации"));
	КонецЕсли;
	
	Если СпособРасчетаОтпуска = Неопределено Тогда
		ОбластиМакета.Вставить("ОбластьШапкаОтработанногоВремени",  			Макет.ПолучитьОбласть("ОтработанноеВремяШапка"));
		ОбластиМакета.Вставить("ОбластьСтрокаОтработанногоВремени",  			Макет.ПолучитьОбласть("ОтработанноеВремяСтрока"));
		ОбластиМакета.Вставить("ОбластьПодвалОтработанногоВремени",  			Макет.ПолучитьОбласть("ОтработанноеВремяПодвал"));
	Иначе 	
		ОбластиМакета.Вставить("ОбластьШапкаОтработанногоВремени",  			Макет.ПолучитьОбласть("ОтработанноеВремяШапкаОтпуск"));
		ОбластиМакета.Вставить("ОбластьСтрокаОтработанногоВремени",  			Макет.ПолучитьОбласть("ОтработанноеВремяСтрокаОтпуск"));
		ОбластиМакета.Вставить("ОбластьПодвалОтработанногоВремени",  			Макет.ПолучитьОбласть("ОтработанноеВремяПодвалОтпуск"));
	КонецЕсли;
	
	ОбластиМакета.Вставить("ОбластьДоляВремени",  							Макет.ПолучитьОбласть("ДоляВремени"));
	
	ОбластиМакета.Вставить("ОбластьПремииПолностьюНеВыплачивались",  		Макет.ПолучитьОбласть("ПремииПолностьюШапка_НеВыплачивались"));
	ОбластиМакета.Вставить("ОбластьПремииПропорциональноНеВыплачивались", 	Макет.ПолучитьОбласть("ПремииПропорциональноШапка_НеВыплачивались"));
	ОбластиМакета.Вставить("ОбластьУчтеноПремийВсего",  					Макет.ПолучитьОбласть("УчтеноПремий"));
	ОбластиМакета.Вставить("ОбластьРасчетСреднегоЗаработка",  				Макет.ПолучитьОбласть("РасчетСреднегоЗаработка"));
	
	Возврат ОбластиМакета;	
	
КонецФункции 

Функция ПреобразоватьДанныеОЗаработкеВТаблицыЗначений(ДанныеОЗаработке)
	
	Заработок 				= Новый Массив;
	ПремииПолностью 		= Новый Массив;
	ПремииПропорционально 	= Новый Массив;
	
	Для каждого СтрокаЗаработка Из ДанныеОЗаработке Цикл
		Если Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.Премии().Найти(СтрокаЗаработка.СоставнаяЧасть) <> Неопределено Тогда
			Если СтрокаЗаработка.КоэффициентНормирования <> 1 Тогда
				ПремииПропорционально.Добавить(СтрокаЗаработка);
			Иначе
				ПремииПолностью.Добавить(СтрокаЗаработка);
			КонецЕсли;
		Иначе
			Заработок.Добавить(СтрокаЗаработка);
		КонецЕсли;
	КонецЦикла;		
	
	Заработок = МассивСтруктурВТаблицуЗначений(Заработок);
	Если Заработок.Количество() > 0 Тогда
		Заработок.Сортировать("Месяц");
	КонецЕсли;
	
	ПремииПропорционально = МассивСтруктурВТаблицуЗначений(ПремииПропорционально);
	Если ПремииПропорционально.Количество() > 0 Тогда
		ПремииПропорционально.Сортировать("Месяц");
	КонецЕсли;
	
	ПремииПолностью = МассивСтруктурВТаблицуЗначений(ПремииПолностью);
	Если ПремииПолностью.Количество() > 0 Тогда
		ПремииПолностью.Сортировать("Месяц");
	КонецЕсли;
	
	Возврат Новый Структура("Заработок,ПремииПропорционально,ПремииПолностью", Заработок, ПремииПропорционально, ПремииПолностью);	
	
КонецФункции

Функция ПреобразоватьДанныеОВремениВТаблицуЗначений(ОтработанноеВремя)
	
	ОтработанноеВремя = МассивСтруктурВТаблицуЗначений(ОтработанноеВремя);  	
	Если ОтработанноеВремя.Количество() > 0 Тогда
		ОтработанноеВремя.Сортировать("Месяц");		
	КонецЕсли;
	
	Возврат ОтработанноеВремя;	
	
КонецФункции

Функция ИспользуетсяИндексация(Заработок)
	
	ИспользуетсяИндексация = Ложь;
	
	Для каждого СтрокаЗаработка Из Заработок Цикл
		Если СтрокаЗаработка.КоэффициентИндексации > 1 Тогда
			ИспользуетсяИндексация = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;		
	
	Возврат ИспользуетсяИндексация;	
	
	
КонецФункции 
	
#КонецОбласти

#Область КомпактныйВариант

Процедура ЗаполнитьТабличныйДокументРасчетаСреднегоЗаработкаКомпактный(ТабличныйДокумент, ОбъектыПечати, ИмяМакета, ДанныеДокументов)
		
	ЗначенияПараметров = Новый Структура;

	Для Каждого ДанныеДокумента Из ДанныеДокументов Цикл
		
		// Подготовим макеты для формирования табличного документа.
		ОбластиМакета = ОбластиМакетаСреднегоЗаработкаКомпактный();
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("ЕдиницаИзмеренияВремени", НазваниеЕдиницыИзмеренияВремени(ДанныеДокумента.ПараметрыРасчета.ИспользоватьСреднеЧасовойЗаработок));	
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьШапкаКомпактный.Параметры, ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьШапкаКомпактный);
		
		СводнаяТаблица = СводнаяТаблицаЗаработкаИВремени(ДанныеДокумента.ДанныеРасчетаСреднего.Заработок, ДанныеДокумента.ДанныеРасчетаСреднего.ОтработанноеВремя);
		
		Для каждого Строка Из СводнаяТаблица Цикл														
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьСтрокаКомпактный.Параметры, Строка);
			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьСтрокаКомпактный);
		КонецЦикла;
		
		ЗначенияПараметров.Очистить();
		
		ЗначенияПараметров.Вставить("Заработок", 				СводнаяТаблица.Итог("Заработок"));	
		ЗначенияПараметров.Вставить("Премии", 					СводнаяТаблица.Итог("Премии"));	
		ЗначенияПараметров.Вставить("УчтеноЗаработок", 			ЗначенияПараметров.Заработок + ЗначенияПараметров.Премии);	
		ЗначенияПараметров.Вставить("УчтеноВремени", 			СводнаяТаблица.Итог("Время"));	
		ЗначенияПараметров.Вставить("СреднедневнойЗаработок", 	УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработок(ЗначенияПараметров.УчтеноЗаработок, ЗначенияПараметров.УчтеноВремени));	
		ЗначенияПараметров.Вставить("ОписаниеСреднегоЗаработка", НазваниеСреднегоЗаработка(ДанныеДокумента.ПараметрыРасчета.ИспользоватьСреднеЧасовойЗаработок));	
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьПодвалКомпактный.Параметры, ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьПодвалКомпактный);
		
		ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.РеквизитыДокумента.Ссылка, ДанныеДокумента.РеквизитыДокумента.Сотрудник);
	КонецЦикла;
	
КонецПроцедуры 

Функция СводнаяТаблицаЗаработкаИВремени(Заработок, Время)
	
	СводнаяТаблица = Новый ТаблицаЗначений;
	СводнаяТаблица.Колонки.Добавить("Месяц", 		Новый ОписаниеТипов("Дата"));
	СводнаяТаблица.Колонки.Добавить("Заработок", 	Новый ОписаниеТипов("Число"));
	СводнаяТаблица.Колонки.Добавить("Премии", 		Новый ОписаниеТипов("Число"));
	СводнаяТаблица.Колонки.Добавить("Время", 		Новый ОписаниеТипов("Число"));
	
	Для каждого Строка Из Заработок Цикл
		НоваяСтрока 			= СводнаяТаблица.Добавить();
		НоваяСтрока.Месяц 		= Строка.Месяц;
		Если Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.Премии().Найти(Строка.СоставнаяЧасть) <> Неопределено Тогда
			НоваяСтрока.Премии 		= Строка.Учтено;
		Иначе
			НоваяСтрока.Заработок 	= Строка.Учтено;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из Время Цикл
		НоваяСтрока 		= СводнаяТаблица.Добавить();
		НоваяСтрока.Месяц 	= Строка.Месяц;
		НоваяСтрока.Время 	= Строка.Учтено;
	КонецЦикла;
	
	СводнаяТаблица.Свернуть("Месяц", "Заработок,Премии,Время");
	СводнаяТаблица.Сортировать("Месяц");
	
	Возврат СводнаяТаблица;
	
КонецФункции

Функция ОбластиМакетаСреднегоЗаработкаКомпактный()
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьРасчетаСреднегоЗаработка.ПФ_MXL_РасчетСреднегоЗаработка");
	
	ОбластиМакета = Новый Структура;
	ОбластиМакета.Вставить("ОбластьШапкаКомпактный",  Макет.ПолучитьОбласть("ШапкаКомпактный"));
	ОбластиМакета.Вставить("ОбластьСтрокаКомпактный", Макет.ПолучитьОбласть("СтрокаКомпактный"));
	ОбластиМакета.Вставить("ОбластьПодвалКомпактный", Макет.ПолучитьОбласть("ПодвалКомпактный"));
	
	Возврат ОбластиМакета;	
	
КонецФункции 
	
#КонецОбласти

Функция НазваниеЕдиницыИзмеренияВремени(ИспользоватьСреднеЧасовойЗаработок)
	Возврат ?(ИспользоватьСреднеЧасовойЗаработок, Нстр("ru = 'часов'"), Нстр("ru = 'дней'"));
КонецФункции

Функция НазваниеСреднегоЗаработка(ИспользоватьСреднеЧасовойЗаработок)
	Возврат ?(ИспользоватьСреднеЧасовойЗаработок, Нстр("ru = 'Среднечасовой'"), Нстр("ru = 'Среднедневной'"));
КонецФункции

Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Если МассивСтруктур.Количество() = 0 Тогда
		Возврат ТаблицаЗначений;
	КонецЕсли;
	
	Для каждого Свойство Из МассивСтруктур[0] Цикл
		ТаблицаЗначений.Колонки.Добавить(Свойство.Ключ);
	КонецЦикла;
	
	Для каждого Элемент Из МассивСтруктур Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(), Элемент);
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Процедура УстановитьНомерРазделаВОбласти(НомерРаздела, Область)
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("НомерРаздела", НомерРаздела);
	ЗаполнитьЗначенияСвойств(Область.Параметры, ЗначенияПараметров);
	НомерРаздела = НомерРаздела + 1;
КонецПроцедуры

Функция ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка() Экспорт 
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("РеквизитыДокумента", 			ПустаяСтруктураРеквизитовДокументаДляПечатиСреднегоЗаработка());
	СтруктураДанных.Вставить("КадровыеДанныеСотрудника", 	ПустаяСтруктураКадровыхДанныхСотрудникаДляПечатиСреднегоЗаработка());
	СтруктураДанных.Вставить("ПараметрыРасчета", 			ПустаяСтруктураПараметровРасчетаСреднегоЗаработка());
	СтруктураДанных.Вставить("ДанныеРасчетаСреднего", 		Новый Массив);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПустаяСтруктураРеквизитовДокументаДляПечатиСреднегоЗаработка()
	
	ПустаяСтруктура = Новый Структура;
	
	ПустаяСтруктура.Вставить("Ссылка");
	ПустаяСтруктура.Вставить("Организация");
	ПустаяСтруктура.Вставить("Сотрудник");
	ПустаяСтруктура.Вставить("ПолноеНаименованиеОрганизации");
	ПустаяСтруктура.Вставить("НаименованиеОрганизации");
	ПустаяСтруктура.Вставить("КодПоОКПО");
	ПустаяСтруктура.Вставить("ИНН");
	ПустаяСтруктура.Вставить("КПП");
	ПустаяСтруктура.Вставить("НомерДокумента");
	ПустаяСтруктура.Вставить("ДатаДокумента");
	ПустаяСтруктура.Вставить("Основание");
	ПустаяСтруктура.Вставить("ДатаНачалаОтсутствия");
	ПустаяСтруктура.Вставить("ДатаОкончанияОтсутствия");
	ПустаяСтруктура.Вставить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");
	ПустаяСтруктура.Вставить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск");
	ПустаяСтруктура.Вставить("НачалоПериодаРасчетаЗарплаты");
	ПустаяСтруктура.Вставить("РассчитатьЗарплату");
	ПустаяСтруктура.Вставить("УчитыватьДвиженияДругихРегистраторов", Ложь);
	
	Возврат ПустаяСтруктура;

КонецФункции

Функция ПустаяСтруктураКадровыхДанныхСотрудникаДляПечатиСреднегоЗаработка()
	
	ПустаяСтруктура = Новый Структура;
	ПустаяСтруктура.Вставить("ФизическоеЛицо");
	ПустаяСтруктура.Вставить("ФИОПолные");
	ПустаяСтруктура.Вставить("ТабельныйНомер");
	ПустаяСтруктура.Вставить("Подразделение");
	ПустаяСтруктура.Вставить("Должность");
	ПустаяСтруктура.Вставить("ВидЗанятости");
	
	Возврат ПустаяСтруктура;

КонецФункции

Функция ПустаяСтруктураПараметровРасчетаСреднегоЗаработка()
	
	ПустаяСтруктура = Новый Структура;
	ПустаяСтруктура.Вставить("СпособРасчета");
	ПустаяСтруктура.Вставить("ИспользоватьСреднеЧасовойЗаработок");
	ПустаяСтруктура.Вставить("НачалоРасчетногоПериода");
	ПустаяСтруктура.Вставить("ОкончаниеРасчетногоПериода");
	
	Возврат ПустаяСтруктура;

КонецФункции

Функция ДанныеДокументовРасчетаСреднегоЗаработка(МассивСсылок)
	
	ДанныеДокументов = Новый Массив;
	
	ДокументыСгруппированныеПоТипам = ДокументыСгруппированныеПоТипам(МассивСсылок);
	
	Для каждого ОписаниеТипаДокумента Из ДокументыСгруппированныеПоТипам Цикл
		
		Менеджер = ОписаниеТипаДокумента.Ключ;
		МассивСсылок = ОписаниеТипаДокумента.Значение;
		
		ДанныеДокументовПоТипу = Менеджер.ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивСсылок);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеДокументов, ДанныеДокументовПоТипу);
	     		
	КонецЦикла;

	Возврат ДанныеДокументов
	
КонецФункции

#КонецОбласти

#Область Форма0504425

// Функция возвращает табличный документ - печатную форму расчета среднего заработка.
//
Функция ТабличныйДокументРасчетаСреднегоЗаработка0504425(ДанныеДокументов, ОбъектыПечати, ИдентификаторШаблона = "ПФ_MXL_ЗапискаРасчетФорма0504425с2015") Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Если ИдентификаторШаблона = "ПФ_MXL_ЗапискаРасчетФорма0504425с2015" Тогда
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетСреднегоЗаработкаФорма0504425с2015";
	Иначе
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетСреднегоЗаработкаФорма0504425";
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		МодульУчетБюджетныхУчреждений = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		МодульУчетБюджетныхУчреждений.ЗаполнитьТабличныйДокументРасчетаСреднегоЗаработкаФорма0504425(ТабличныйДокумент, ОбъектыПечати, ДанныеДокументов, ИдентификаторШаблона);
	КонецЕсли;
		
	Возврат ТабличныйДокумент;
	
КонецФункции 	

Функция ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка0504425() Экспорт 
	
	СтруктураДанных = ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка();
	ДополнитьСтруктуруРеквизитовДокументаДляПечатиЗапискиРасчета0504425(СтруктураДанных.РеквизитыДокумента);
	
	Возврат СтруктураДанных;
	
КонецФункции

Процедура ДополнитьСтруктуруРеквизитовДокументаДляПечатиЗапискиРасчета0504425(ПустаяСтруктура)
	
	ПустаяСтруктура.Вставить("Начисление");
	ПустаяСтруктура.Вставить("ГлавныйБухгалтерРасшифровкаПодписи");
	ПустаяСтруктура.Вставить("БухгалтерРасшифровкаПодписи");
	ПустаяСтруктура.Вставить("ИсполнительРасшифровкаПодписи");
	ПустаяСтруктура.Вставить("ДолжностьИсполнителя");
	ПустаяСтруктура.Вставить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");
	ПустаяСтруктура.Вставить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск");
	ПустаяСтруктура.Вставить("ДнейОсновногоОтпуска");
	ПустаяСтруктура.Вставить("ДнейДополнительногоОтпуска");
	ПустаяСтруктура.Вставить("ДнейОтпускаВсего");
	ПустаяСтруктура.Вставить("НачисленияУдержанияДокумента");
	ПустаяСтруктура.Вставить("НаименованиеСобытия");
	ПустаяСтруктура.Вставить("РассчитатьЗарплату");
	ПустаяСтруктура.Вставить("НачалоПериодаРасчетаЗарплаты");
	ПустаяСтруктура.Вставить("УчитыватьДвиженияДругихРегистраторов", Ложь);
	
КонецПроцедуры

Функция ДанныеДокументовРасчетаСреднегоЗаработкаДляПечатиЗапискиРасчета0504425(МассивСсылок)
	
	ДанныеДокументов = Новый Массив;
	
	ДокументыСгруппированныеПоТипам = ДокументыСгруппированныеПоТипам(МассивСсылок);
	
	Для каждого ОписаниеТипаДокумента Из ДокументыСгруппированныеПоТипам Цикл
		
		Менеджер = ОписаниеТипаДокумента.Ключ;
		МассивСсылок = ОписаниеТипаДокумента.Значение;
		
		ДанныеДокументовПоТипу = Менеджер.ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка0504425(МассивСсылок);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеДокументов, ДанныеДокументовПоТипу);
	     		
	КонецЦикла;

	Возврат ДанныеДокументов
	
КонецФункции

#КонецОбласти

Функция ДокументыСгруппированныеПоТипам(МассивСсылок)
	
	ДокументыСгруппированныеПоТипам = Новый Соответствие;
	
	Для каждого Ссылка Из МассивСсылок Цикл
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
		
		МассивСсылок = ДокументыСгруппированныеПоТипам.Получить(Менеджер);
		
		Если МассивСсылок = Неопределено Тогда
			ДокументыСгруппированныеПоТипам.Вставить(Менеджер, Новый Массив);
			МассивСсылок = ДокументыСгруппированныеПоТипам.Получить(Менеджер);
		КонецЕсли;
		
		МассивСсылок.Добавить(Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументыСгруппированныеПоТипам;
	
КонецФункции

#Область ИменованиеОбластейДляНавигацииПоТабличномуДокументу

// Задает область печати объекта в табличном документе.
// Применяется для связывания области в табличном документе, с объектом печати (ссылка).
// Необходимо вызывать при формировании очередной области печатной формы в табличном
// документе.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - печатная форма;
//  НомерСтрокиНачало - Число - позиция начала очередной области в документе;
//  ОбъектыПечати - СписокЗначений - список объектов печати;
//  Ссылка - ЛюбаяСсылка - объект печати.
Процедура ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка, Сотрудник) Экспорт
	
	Если ТипЗнч(ОбъектыПечати) = Тип("СписокЗначений") Тогда
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
	Иначе
		ЗадатьОбластьПечатиВстраиваемойОбласти(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка, Сотрудник);		
	КонецЕсли;	
	
КонецПроцедуры

Функция ОбъектыПечатиДляВстраиваемыхОбластей() Экспорт
	ОбъектыПечати = Новый ТаблицаЗначений;
	ОбъектыПечати.Колонки.Добавить("Ссылка");
	ОбъектыПечати.Колонки.Добавить("Сотрудник");
	ОбъектыПечати.Колонки.Добавить("ИмяОбласти");
	Возврат ОбъектыПечати;
КонецФункции 

Функция ИмяВстраиваемойОбласти(ОбъектыПечати, Ссылка, Сотрудник = Неопределено) Экспорт
	
	ИмяВстраиваемойОбласти = Неопределено;
	ВстраиваемаяОбласть = ВстраиваемаяОбласть(ОбъектыПечати, Ссылка, Сотрудник);
	Если НЕ ВстраиваемаяОбласть = Неопределено Тогда
	   ИмяВстраиваемойОбласти = ВстраиваемаяОбласть.ИмяОбласти;
	КонецЕсли;
	
	Возврат ИмяВстраиваемойОбласти;
	
КонецФункции

Процедура ЗадатьОбластьПечатиВстраиваемойОбласти(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка, Сотрудник)
	
	Элемент = ВстраиваемаяОбласть(ОбъектыПечати, Ссылка, Сотрудник);
	Если Элемент = Неопределено Тогда
		Элемент = НоваяВстраиваемаяОбласть(ОбъектыПечати, Ссылка, Сотрудник);
		Элемент.ИмяОбласти = "Документ_" + Формат(ОбъектыПечати.Количество() + 1, "ЧН=; ЧГ=");
	КонецЕсли;
	
	НомерСтрокиОкончание = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(НомерСтрокиНачало, , НомерСтрокиОкончание, ).Имя = Элемент.ИмяОбласти;		
	
КонецПроцедуры

Функция ВстраиваемаяОбласть(ОбъектыПечати, Ссылка, Сотрудник = Неопределено)
	
	ВстраиваемаяОбласть = Неопределено;
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат ВстраиваемаяОбласть;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ссылка", Ссылка);
	Если НЕ Сотрудник = Неопределено Тогда
		Отбор.Вставить("Сотрудник", Сотрудник);
	КонецЕсли;
	
	СтрокиПоОтбору = ОбъектыПечати.НайтиСтроки(Отбор);
	Если СтрокиПоОтбору.Количество() > 0 Тогда
		ВстраиваемаяОбласть = СтрокиПоОтбору[0];
	КонецЕсли;
	
	Возврат ВстраиваемаяОбласть;

КонецФункции

Функция НоваяВстраиваемаяОбласть(ОбъектыПечати, Ссылка, Сотрудник)
	НоваяВстраиваемаяОбласть = ОбъектыПечати.Добавить();
	НоваяВстраиваемаяОбласть.Ссылка = Ссылка;
	НоваяВстраиваемаяОбласть.Сотрудник = Сотрудник;
	Возврат НоваяВстраиваемаяОбласть;	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли