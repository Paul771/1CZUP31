

#Область ОбработчикиПодписокНаСобытия

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		
	Если Параметры <> Неопределено И Параметры.Свойство("ОткрытаПоСценарию") Тогда
		СтандартнаяОбработка = Ложь;
		ВидИнформации = Параметры.ВидКонтактнойИнформации;
		ВыбраннаяФорма = ИмяФормыВводаКонтактнойИнформации(ВидИнформации);
	
		Если ВыбраннаяФорма = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не обрабатываемый тип адреса: """ + ВидИнформации + """'");
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Возвращает имя формы для редактирования типа контактной информации.
//
// Параметры:
//      ВидИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации, СправочникСсылка.ВидыКонтактнойИнформации -
//                      запрашиваемый тип.
//
// Возвращаемое значение:
//      Строка - полное имя формы.
//
Функция ИмяФормыВводаКонтактнойИнформации(Знач ВидИнформации)
	
	ТипИнформации = ТипВидаКонтактнойИнформации(ВидИнформации);
	
	ВсеТипы = "Перечисление.ТипыКонтактнойИнформации.";
	Если ТипИнформации = ПредопределенноеЗначение(ВсеТипы + "Адрес") Тогда
		Возврат "Обработка.ВводКонтактнойИнформации.Форма.ВводАдреса";
		
	ИначеЕсли ТипИнформации = ПредопределенноеЗначение(ВсеТипы + "Телефон") Тогда
		Возврат "Обработка.ВводКонтактнойИнформации.Форма.ВводТелефона";
		
	ИначеЕсли ТипИнформации = ПредопределенноеЗначение(ВсеТипы + "Факс") Тогда
		Возврат "Обработка.ВводКонтактнойИнформации.Форма.ВводТелефона";
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТипВидаКонтактнойИнформации(Знач ВидИнформации)
	Результат = Неопределено;
	
	Тип = ТипЗнч(ВидИнформации);
	Если Тип = Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
		Результат = ВидИнформации;
	ИначеЕсли Тип = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Результат = ВидИнформации.Тип;
	ИначеЕсли ВидИнформации <> Неопределено Тогда
		Данные = Новый Структура("Тип");
		ЗаполнитьЗначенияСвойств(Данные, ВидИнформации);
		Результат = Данные.Тип;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает сведения об адресах в виде структуру частей адреса и кодов КЛАДР.
//
Функция СведенияОбАдресахВВидеСтруктуры(Адреса, ДополнительныеПараметры) Экспорт
	Результат = Новый Массив;
	Для каждого Адрес Из Адреса Цикл
		Результат.Добавить(СведенияОбАдресеВВидеСтруктуры(Адрес, ДополнительныеПараметры));
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Возвращает сведения об адресе в виде структуру частей адреса и кодов КЛАДР.
//
Функция СведенияОбАдресеВВидеСтруктуры(Адрес, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ПолноеНаименованиеСокращений = ?(ДополнительныеПараметры.Свойство("ПолноеНаименованиеСокращений"), ДополнительныеПараметры.ПолноеНаименованиеСокращений, Ложь);
		НаименованиеВключаетСокращение = ?(ДополнительныеПараметры.Свойство("НаименованиеВключаетСокращение"), ДополнительныеПараметры.НаименованиеВключаетСокращение, Ложь);
		ЗаполнятьКоды = ?(ДополнительныеПараметры.Свойство("КодыКЛАДР"), ДополнительныеПараметры.КодыКЛАДР, Ложь);
	Иначе
		НаименованиеВключаетСокращение = Ложь;
		ПолноеНаименованиеСокращений   = Ложь;
		ЗаполнятьКоды                  = Ложь;
	КонецЕсли;
	
	НаименованиеСтраны = "";
	Результат = СтруктураАдреса();
	Формат9Запятых = Ложь;
	
	ЭлементыАдреса = Новый Соответствие;
	
	Если ТипЗнч(Адрес) = Тип("Строка") Тогда
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес) Тогда
			XDTOАдрес = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Адрес);
		Иначе
			Если СтрЧислоВхождений(Адрес, ",") = 9 Тогда
				Формат9Запятых = Истина;
				АдресРФ        = Адрес;
			Иначе
				XDTOАдрес      = ДесериализацияАдресаОбщая(Адрес, "");
			КонецЕсли;
		КонецЕсли;
	Иначе
		XDTOАдрес = Адрес
	КонецЕсли;

	Если НЕ Формат9Запятых Тогда
		
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		Состав = XDTOАдрес.Состав;
		
		Если Состав = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		XDTOТип = Состав.Тип();
		
		Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			
			Результат.Вставить("Страна", Состав.Страна);
			Страна = ?(ПустаяСтрока(Состав.Страна),
					РаботаСАдресами.ОсновнаяСтрана(),
					Справочники.СтраныМира.НайтиПоНаименованию(Состав.Страна, Истина));
			НаименованиеСтраны = Страна.Наименование;
			Результат.Вставить("КодСтраны", СокрЛП(Страна.Код));
			
			АдресРФ = Состав.Состав;
			
		ИначеЕсли XDTOТип = ФабрикаXDTO.Тип(РаботаСАдресами.ПространствоИмен(), "АдресРФ") Тогда
			АдресРФ = Состав;
		Иначе
			Возврат Результат;
		КонецЕсли;
		
		Если АдресРФ = Неопределено Тогда
			Возврат Результат;
		ИначеЕсли ТипЗнч(АдресРФ) = Тип("Строка") Тогда
			Если СтрЧислоВхождений(АдресРФ, ",") = 9 Тогда
				ЭлементыАдреса = СтруктураАдресаПоФормату9Запятых(АдресРФ);
				Формат9Запятых = Истина;
			Иначе
				// адрес в свободной форме (РФ или Иностранный)
				ЭлементыАдреса.Вставить("Страна", НаименованиеСтраны);
				ЭлементыАдреса.Вставить("Индекс", "");
				ЭлементыАдреса.Вставить("Регион", "");
				ЭлементыАдреса.Вставить("Район", "");
				ЭлементыАдреса.Вставить("Город", "");
				ЭлементыАдреса.Вставить("НаселенныйПункт", "");
				ЭлементыАдреса.Вставить("Улица", "");
				ЭлементыАдреса.Вставить("Округ", "");
				ЭлементыАдреса.Вставить("ВнутригРайон", "");
				ЭлементыАдреса.Вставить("Дом","");
				ЭлементыАдреса.Вставить("Корпус", "");
				ЭлементыАдреса.Вставить("Квартира", "");
				ЭлементыАдреса.Вставить("ДополнительнаяТерритория", "");
				ЭлементыАдреса.Вставить("ЭлементДополнительнойТерритории", "");
			КонецЕсли;
		Иначе
			ЭлементыАдреса.Вставить("Страна", НаименованиеСтраны);
			ЭлементыАдреса.Вставить("Индекс", ПочтовыйИндексАдреса(АдресРФ));
			ЭлементыАдреса.Вставить("Регион", АдресРФ.СубъектРФ);
			ЭлементыАдреса.Вставить("Район", РайонАдреса(АдресРФ));
			ЭлементыАдреса.Вставить("Город", АдресРФ.Город);
			ЭлементыАдреса.Вставить("НаселенныйПункт", АдресРФ.НаселПункт);
			ЭлементыАдреса.Вставить("Улица", АдресРФ.Улица);
			ЭлементыАдреса.Вставить("Округ", АдресРФ.Округ);
			ЭлементыАдреса.Вставить("ВнутригРайон", АдресРФ.ВнутригРайон);
			ЭлементыАдреса.Вставить("Дом","");
			ЭлементыАдреса.Вставить("Корпус", "");
			ЭлементыАдреса.Вставить("Квартира", "");
			ЭлементыАдреса.Вставить("ДополнительнаяТерритория", НайтиДополнительныйЭлементАдреса(АдресРФ).Значение);
			ЭлементыАдреса.Вставить("ЭлементДополнительнойТерритории", 
			ДополнительныйЭлементАдреса(АдресРФ, РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(91)));
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеСокращений = Новый Соответствие;
	
	ЭтоНациональныйАдрес = ?(СтрСравнить(НаименованиеСтраны, РаботаСАдресами.ОсновнаяСтрана().Наименование) = 0, Истина, Ложь);
	Если ЭтоНациональныйАдрес Тогда
		Результат.Вставить("КодРегиона", КодРегиона(ЭлементыАдреса["Регион"]));
	КонецЕсли;
	
	Результат.Вставить("Индекс", ЭлементыАдреса.Получить("Индекс"));
	
	ОпределитьСоответствиеСокращений(Результат, ЭлементыАдреса["Регион"], "Регион", СоответствиеСокращений, НаименованиеВключаетСокращение, 1);
	ОпределитьСоответствиеСокращений(Результат, ЭлементыАдреса["Округ"], "Округ", СоответствиеСокращений, НаименованиеВключаетСокращение, 2);
	ОпределитьСоответствиеСокращений(Результат, ЭлементыАдреса["Район"], "Район", СоответствиеСокращений, НаименованиеВключаетСокращение, 3);
	ОпределитьСоответствиеСокращений(Результат, ЭлементыАдреса["Город"], "Город", СоответствиеСокращений, НаименованиеВключаетСокращение, 4);
	ОпределитьСоответствиеСокращений(Результат, ЭлементыАдреса["ВнутригРайон"], "ВнутригородскойРайон", СоответствиеСокращений, НаименованиеВключаетСокращение, 5);
	ОпределитьСоответствиеСокращений(Результат, ЭлементыАдреса["НаселенныйПункт"], "НаселенныйПункт", СоответствиеСокращений, НаименованиеВключаетСокращение, 6);
	ОпределитьСоответствиеСокращений(Результат, ЭлементыАдреса["Улица"], "Улица", СоответствиеСокращений, НаименованиеВключаетСокращение, 7);
	ОпределитьСоответствиеСокращений(Результат, ЭлементыАдреса["ДополнительнаяТерритория"], "ДополнительнаяТерритория", СоответствиеСокращений, НаименованиеВключаетСокращение, 90);
	ОпределитьСоответствиеСокращений(Результат, ЭлементыАдреса["ЭлементДополнительнойТерритории"], "ЭлементДополнительнойТерритории", СоответствиеСокращений, НаименованиеВключаетСокращение, 91);
	
	Если ПолноеНаименованиеСокращений  = Истина Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
			МодульАдресныйКлассификаторСлужебный.ПолныеНаименованияСокращений(СоответствиеСокращений);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("РегионСокращение", СоответствиеСокращений[1]);
	Результат.Вставить("ОкругСокращение", СоответствиеСокращений[2]);
	Результат.Вставить("РайонСокращение", СоответствиеСокращений[3]);
	Результат.Вставить("ГородСокращение", СоответствиеСокращений[4]);
	Результат.Вставить("ВнутригородскойРайонСокращение", СоответствиеСокращений[5]);
	Результат.Вставить("НаселенныйПунктСокращение", СоответствиеСокращений[6]);
	Результат.Вставить("УлицаСокращение", СоответствиеСокращений[7]);
	Результат.Вставить("ДополнительнаяТерриторияСокращение", СоответствиеСокращений[90]);
	Результат.Вставить("ЭлементДополнительнойТерриторииСокращение", СоответствиеСокращений[91]);
	Результат.Вставить("Здание", Новый Структура("ТипЗдания, Номер"));
	Результат.Вставить("Корпуса", Новый Массив);
	Результат.Вставить("Помещения", Новый Массив);
	
	Если НЕ Формат9Запятых Тогда
		
		ЗданияИПомещения = ЗданияИПомещенияАдреса(АдресРФ);
		Для каждого Здание Из ЗданияИПомещения.Здания Цикл
			Если Здание.Вид = 1 Тогда
				Результат.Здание.ТипЗдания = Здание.Тип;
				Результат.Здание.Номер = Здание.Значение;
			Иначе
				Результат.Корпуса.Добавить(Новый Структура("ТипКорпуса, Номер", Здание.Тип, Здание.Значение));
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Помещение Из ЗданияИПомещения.Помещения Цикл
			Результат.Помещения.Добавить(Новый Структура("ТипПомещения, Номер", Помещение.Тип, Помещение.Значение));
		КонецЦикла;
		
	Иначе
		Здание = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["Дом"]);
		Результат.Здание.ТипЗдания = Здание.Наименование;
		Результат.Здание.Номер = Здание.Сокращение;
		
		Корпус = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["Корпус"]);
		Результат.Корпуса.Добавить(Новый Структура("ТипКорпуса, Номер", Корпус.Наименование, Корпус.Сокращение));
		
		Квартира = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементыАдреса["Квартира"]);
		Результат.Помещения.Добавить(Новый Структура("ТипПомещения, Номер", Квартира.Наименование, Квартира.Сокращение));
	КонецЕсли;
	
	Если ЗаполнятьКоды И ЭтоНациональныйАдрес Тогда
		ЗаполнитьКодыАдреса(Результат, Адрес);
		ОпределитьФорматКодов(Результат, АдресРФ);
	КонецЕсли;
	
	// Из XDTO пустые значение приходят как Неопределено
	УправлениеКонтактнойИнформациейСлужебный.ЗаменитьВСтруктуреНеопределеноНаПустуюСтроку(Результат);
	
	Возврат Результат;
КонецФункции

Функция СтруктураАдреса()
	
	ЭлементыАдреса = Новый Структура;
	
	ЭлементыАдреса.Вставить("Страна", "");
	ЭлементыАдреса.Вставить("КодСтраны", "");
	ЭлементыАдреса.Вставить("Индекс", "");
	ЭлементыАдреса.Вставить("Регион", "");
	ЭлементыАдреса.Вставить("РегионСокращение", "");
	ЭлементыАдреса.Вставить("Округ", "");
	ЭлементыАдреса.Вставить("ОкругСокращение", "");
	ЭлементыАдреса.Вставить("Район", "");
	ЭлементыАдреса.Вставить("РайонСокращение", "");
	ЭлементыАдреса.Вставить("Город", "");
	ЭлементыАдреса.Вставить("ГородСокращение", "");
	ЭлементыАдреса.Вставить("ВнутригРайон", "");
	ЭлементыАдреса.Вставить("ВнутригородскойРайонСокращение", "");
	ЭлементыАдреса.Вставить("НаселенныйПункт", "");
	ЭлементыАдреса.Вставить("НаселенныйПунктСокращение", "");
	ЭлементыАдреса.Вставить("Улица", "");
	ЭлементыАдреса.Вставить("УлицаСокращение", "");
	ЭлементыАдреса.Вставить("Дом","");
	ЭлементыАдреса.Вставить("Корпус", "");
	ЭлементыАдреса.Вставить("Квартира", "");
	ЭлементыАдреса.Вставить("ДополнительнаяТерритория", "");
	ЭлементыАдреса.Вставить("ДополнительнаяТерриторияСокращение", "");
	ЭлементыАдреса.Вставить("ЭлементДополнительнойТерритории", "");
	ЭлементыАдреса.Вставить("ЭлементДополнительнойТерриторииСокращение", "");
	ЭлементыАдреса.Вставить("Здание", Новый Структура("ТипЗдания, Номер"));
	ЭлементыАдреса.Вставить("Корпуса", Новый Массив);
	ЭлементыАдреса.Вставить("Помещения", Новый Массив);
	ЭлементыАдреса.Вставить("КодыКЛАДР", Новый Структура);
	ЭлементыАдреса.Вставить("ДополнительныеКоды", Новый Структура);
	
	Возврат ЭлементыАдреса;
	
КонецФункции

#Область ВзаимодействиеСАдреснымКлассификатором

// Определение режима работы форм ввода.
// 
// Возвращаемое значение:
//     Булево - Истина, если работа с классификатором ведется через веб-сервис.
//
Функция КлассификаторДоступенЧерезВебСервис() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	Источник = МодульАдресныйКлассификаторСлужебный.ИсточникДанныхАдресногоКлассификатора();
	
	Возврат Не ПустаяСтрока(Источник);
КонецФункции

// Возвращает флаг того, что текущий пользователь может загружать или очищать адресный классификатор.
//
// Возвращаемое значение:
//     Булево- результат проверки.
//
Функция ЕстьВозможностьИзмененияАдресногоКлассификатора() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		ОбъектКонтроля = Метаданные.РегистрыСведений.Найти("АдресныеОбъекты");
		Возврат ОбъектКонтроля <> Неопределено И ПравоДоступа("Изменение", ОбъектКонтроля) И НЕ ОбщегоНазначения.РазделениеВключено();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверка доступности поставщика - локальной базы или сервиса. Запрос версии.
// 
// Возвращаемое значение:
//     Структура - описание состояния.
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * Данные                       - Строка - Описание версии поставщика.
//
Функция ВерсияПоставщикаДанныхКлассификатора()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		Возврат МодульАдресныйКлассификаторСлужебный.ВерсияПоставщикаДанных();
	КонецЕсли;
	
	Результат = СтруктураОшибкиПоставщикаАдресногоКлассификатора();
	Результат.Вставить("Версия");
	Возврат Результат;
	
КонецФункции

// Проверяет доступность классификатора и помещает результат в хранилище
//
Процедура ПроверитьДоступностьКлассификатора(ДоступностьКлассификатораАдрес, АдресРезультата) Экспорт
	
	ПоместитьВоВременноеХранилище(ВерсияПоставщикаДанныхКлассификатора(), АдресРезультата);
	
КонецПроцедуры

// Возвращает наименование региона по его коду.
//
//  Параметры:
//      Код - Строка, Число - код региона.
//
// Возвращаемое значение:
//      Строка - полное наименование региона с сокращением.
//      Неопределено - если нет ни одной подсистемы адресного классификатора.
// 
Функция РегионКода(Знач Код)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификатор");
		Возврат МодульАдресныйКлассификатор.НаименованиеРегионаПоКоду(Код);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает код региона по его полному наименованию.
//
//  Параметры:
//      НаименованиеРегиона - Строка - полное наименование региона с сокращением.
//
// Возвращаемое значение:
//      Строка - код региона из двух цифр. Пустая строка, если наименование определить не удалось.
//      Неопределено - если нет ни одной подсистемы адресного классификатора.
// 
Функция КодРегиона(Знач ПолноеНаименование)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификатор");
		Код = МодульАдресныйКлассификатор.КодРегионаПоНаименованию(ПолноеНаименование);
		Возврат Формат(Код, "ЧЦ=2; ЧН=; ЧВН=");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает адрес по представлению.
//
//  Параметры:
//      Текст                      - Строка - текст автоподбора.
Функция НаселенныеПунктыПоПредставлению(Знач Текст) Экспорт
	
	Результат = Новый СписокЗначений;
	
	ДанныеАнализа = ЧастиАдресаТаблицей(Текст);
	Если ДанныеАнализа.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	АдресРФ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(РаботаСАдресами.ПространствоИмен(), "АдресРФ"));
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		АдресПоУровням = МодульАдресныйКлассификаторСлужебный.УстановитьСоответствиеЧастейАдресаИхУровнюДляНаселенногоПункта(ДанныеАнализа, УровниАдресныхОбъектов("НаселенныйПункт"));
		Если АдресПоУровням <> Неопределено Тогда
			ПоместитьАдресВXDTO(АдресРФ, АдресПоУровням);
			
			// Что-то осталось, добавляем это на уровень населенного пункта.
			Фильтр = Новый Структура("Уровень", 0);
			СтрокиСУровнем0 = АдресПоУровням.НайтиСтроки(Фильтр);
			Разделитель = "";
			НаселПункт = "";
			Для каждого ЭлементАдреса Из СтрокиСУровнем0 Цикл
				НаселПункт = НаселПункт + Разделитель + ЭлементАдреса.Значение;
				Разделитель = ", ";
			КонецЦикла;
		Иначе
			НаселПункт = Текст;
		КонецЕсли;
	Иначе
		ПозицияСубъектРФ = СтрНайти(Текст, ",", НаправлениеПоиска.СКонца);
		Если ПозицияСубъектРФ > 0 Тогда
			Регион = СокрЛП(Сред(Текст, ПозицияСубъектРФ + 1));
			УстановитьСвойствоПоXPath(АдресРФ, "СубъектРФ", Регион);
			НаселПункт = СокрЛП(Лев(Текст, ПозицияСубъектРФ - 1));
		Иначе
			НаселПункт = Текст;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НаселПункт) Тогда
		Если ЗначениеЗаполнено(АдресРФ.НаселПункт) Тогда
			НаселПункт = НаселПункт + ", " + АдресРФ.НаселПункт;
		КонецЕсли;
		УстановитьСвойствоПоXPath(АдресРФ, "НаселПункт", НаселПункт);
	КонецЕсли;
	
	Возврат АдресРФ;
	
КонецФункции

// Возвращает структуру с полем "ДанныеВыбора", содержащую список вариантов населенных пунктов 
//  по иерархическому представлению младший-старший.
//
//  Параметры:
//      ИдентификаторНаселенногоПункта - УникальныйИдентификатор - код классификатора для ограничения подбора.
//      Текст                          - Текст  - строка автоподбора.
//      СкрыватьНеактуальныеАдреса     - Булево - флаг того, что неактуальные адреса не должны попадать в автоподбор.
//      ВыбиратьСтрок                  - Число  - ограничение на количество результатов.
//
// Возвращаемое значение:
//      Структура - результат поиска данных. Содержит поля:
//         * СлишкомМногоДанных - Булево - признак того, что результирующий список не полон.
//         * ДанныеВыбора       - СписокЗначений - данные для автоподбора.
//
Функция УлицыПоПредставлению(ИдентификаторНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса = Ложь, ВыбиратьСтрок = 50) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторНаселенногоПункта)
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			ЧастиАдреса = ЧастиАдресаТаблицей(Текст);
			Если ЧастиАдреса.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
			МодульАдресныйКлассификаторСлужебный.УстановитьУровниУлицыПоЧастямАдреса(ИдентификаторНаселенногоПункта, ЧастиАдреса);
			Возврат ЧастиАдреса;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает структуру, описывающую населенный пункт в иерархии младший-старший
//  для текущего адресного классификатора. Имена ключей структуры зависят от 
//  классификатора.
//
//  Параметры:
//      Идентификатор - УникальныйИдентификатор - Идентификатор объекта. Если указан, то структура 
//                                                заполняется данными для этого объекта.
//      ВариантКлассификатора                   - Строка - Требуемый вид классификатора. 
// 
// Возвращаемое значение:
//      Структура - описание населенного пункта.
//
Функция СписокРеквизитовНаселенныйПункт(Идентификатор = Неопределено, ВариантКлассификатора = "КЛАДР") Экспорт
	
	Результат = РаботаСАдресамиКлиентСервер.СтруктураЧастейАдресаНаселенногоПункта(ВариантКлассификатора);
	
	Если Идентификатор = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Заполняем данные по идентификатору.
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	СтруктураДанных = МодульАдресныйКлассификаторСлужебный.АктуальныеАдресныеСведения(Идентификатор);
	
	Если Не СтруктураДанных.Отказ Тогда
		Адрес = СтруктураДанных.Данные;
		Для Каждого КлючЗначение Из Результат Цикл
			Часть = КлючЗначение.Значение;
			Часть.Представление = СокрЛП(ПолучитьXDTOРеквизитОбъекта(Адрес, Часть.ПутьXPath));
			НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(Часть.Представление);
			Часть.Наименование = НаименованиеСокращение.Наименование;
			Часть.Сокращение = НаименованиеСокращение.Сокращение;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Устанавливает значения полей населенного пункта в XDTO адресе.
//  
//  Параметры:
//      XDTOАдрес    - ОбъектXDTO - адрес РФ.
//      Идентификатор - УникальныйИдентификатор - Источник данных для заполнения.
//
Процедура УстановитьНаселенныйПунктАдресаПоИдентификатору(XDTOАдрес, Идентификатор) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат;
	КонецЕсли;
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	ДанныеАдреса = МодульАдресныйКлассификаторСлужебный.АктуальныеАдресныеСведения(Идентификатор);
	Если ДанныеАдреса.Отказ Тогда
		// Классификатор поломан
		Возврат;
	КонецЕсли;
	
	Эталон = ДанныеАдреса.Данные;
	
	ЧастиАдреса = РаботаСАдресамиКлиентСервер.СтруктураЧастейАдресаНаселенногоПункта();
	Для Каждого КлючЗначение Из ЧастиАдреса Цикл
		Если КлючЗначение.Значение.Уровень < 7 Тогда
			Путь = КлючЗначение.Значение.ПутьXPath;
			УстановитьXDTOРеквизитОбъекта(XDTOАдрес, Путь, ПолучитьXDTOРеквизитОбъекта(Эталон, Путь));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значения полей улицы.
//  
//  Параметры:
//      XDTOАдрес    - ОбъектXDTO - адрес РФ.
//      Идентификатор - УникальныйИдентификатор - Источник данных для заполнения.
//
Процедура УстановитьУлицуАдресаПоИдентификатору(XDTOАдрес, Идентификатор) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат;
	КонецЕсли;
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	ДанныеАдреса = МодульАдресныйКлассификаторСлужебный.АктуальныеАдресныеСведения(Идентификатор);
	Если ДанныеАдреса.Отказ Тогда
		// Классификатор поломан
		Возврат;
	КонецЕсли;
	
	Эталон = ДанныеАдреса.Данные;
	КодСериализацииПочтовогоИндекса = РаботаСАдресамиКлиентСервер.КодСериализацииПочтовогоИндекса();
	КодСериализацииДополнительногоОбъектаАдресации = РаботаСАдресамиКлиентСервер.КодСериализацииДополнительногоОбъектаАдресации(91);
	
	ЧастиАдреса = РаботаСАдресамиКлиентСервер.СтруктураЧастейАдресаНаселенногоПункта();
	Для Каждого КлючЗначение Из ЧастиАдреса Цикл
		Если КлючЗначение.Значение.Уровень = 90 Тогда
			Для каждого ДопАдрЭл Из Эталон.ДопАдрЭл Цикл
				Если ДопАдрЭл.ТипАдрЭл <> КодСериализацииДополнительногоОбъектаАдресации 
					И ДопАдрЭл.ТипАдрЭл <> КодСериализацииПочтовогоИндекса Тогда
						Путь = "ДопАдрЭл[ТипАдрЭл='" + ДопАдрЭл.ТипАдрЭл + "']";
						УстановитьXDTOРеквизитОбъекта(XDTOАдрес, Путь, ПолучитьXDTOРеквизитОбъекта(Эталон, Путь));
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли КлючЗначение.Значение.Уровень = 91 Тогда
			Для каждого ДопАдрЭл Из Эталон.ДопАдрЭл Цикл
				Если ДопАдрЭл.ТипАдрЭл = КодСериализацииДополнительногоОбъектаАдресации Тогда
					Путь = РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(91, ДопАдрЭл.ТипАдрЭл);
					УстановитьXDTOРеквизитОбъекта(XDTOАдрес, Путь, ПолучитьXDTOРеквизитОбъекта(Эталон, Путь));
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли КлючЗначение.Значение.Уровень = 7 Тогда
			Путь = КлючЗначение.Значение.ПутьXPath;
			УстановитьXDTOРеквизитОбъекта(XDTOАдрес, Путь, ПолучитьXDTOРеквизитОбъекта(Эталон, Путь));
		КонецЕсли;
	КонецЦикла;
	

	
КонецПроцедуры

// Устанавливает значения идентификаторов для частей адреса.
//  
//  Параметры:
//      НаселенныйПунктДетально  - Структура - части адреса.
//      ИдентификаторАдреса - УникальныйИдентификатор - Источник данных для заполнения.
//
Процедура ЗаполнитьИдентификаторыНаселенногоПункта(НаселенныйПунктДетально) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		МодульАдресныйКлассификаторСлужебный.УстановитьИдентификаторыНаселенногоПункта(НаселенныйПунктДетально);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьАдресВXML(АдресВXML, РезультатПроверки, ПараметрыПроверкиАдреса = Неопределено) Экспорт
	
	Источник = АдресXMLВXDTO(АдресВXML,, Перечисления.ТипыКонтактнойИнформации.Адрес);
	ЕстьОшибки = Ложь;
	
	ФорматАдреса = "КЛАДР";
	ТолькоНациональныйАдрес = Истина;
	Если ТипЗнч(ПараметрыПроверкиАдреса) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		ПараметрыПроверки = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(ПараметрыПроверкиАдреса);
		ФорматАдреса = ?(ПараметрыПроверки.ПроверятьПоФИАС, "ФИАС", "КЛАДР");
		ТолькоНациональныйАдрес = ПараметрыПроверки.ТолькоНациональныйАдрес;
	Иначе 
		ПараметрыПроверки = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации();
		Если ПараметрыПроверкиАдреса <> Неопределено Тогда
			Если ПараметрыПроверкиАдреса.Свойство("ФорматАдреса") И ЗначениеЗаполнено(ПараметрыПроверкиАдреса.ФорматАдреса) Тогда
				ФорматАдреса = ПараметрыПроверкиАдреса.ФорматАдреса;
			КонецЕсли;
			Если ПараметрыПроверкиАдреса.Свойство("ТолькоНациональныйАдрес") И ЗначениеЗаполнено(ПараметрыПроверкиАдреса.ТолькоНациональныйАдрес) Тогда
				ТолькоНациональныйАдрес = ПараметрыПроверкиАдреса.ТолькоНациональныйАдрес;
			КонецЕсли;
		КонецЕсли;
		ПараметрыПроверки.ПроверятьКорректность = Истина;
	КонецЕсли;
	
	Если ВРег(ФорматАдреса) = "ФИАС" Тогда
		ПараметрыПроверки.Вставить("ПроверятьПоФИАС", Истина);
	КонецЕсли;

	ПараметрыПроверки.Вставить("ФорматАдреса", ФорматАдреса);
	ПараметрыПроверки.Вставить("ТолькоНациональныйАдрес ", ТолькоНациональныйАдрес);
	
	Адрес = Источник.Состав;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Если Адрес <> Неопределено И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		СписокОшибок = ОшибкиЗаполненияАдресаXDTO(Адрес, ПараметрыПроверки);
	КонецЕсли;
	
	Если СписокОшибок.Количество() = 0 Тогда
		РезультатПроверки.Результат = "Корректный";
	Иначе
		Если НЕ СписокОшибок[0].Пометка Тогда
			РезультатПроверки.Результат = "НеПроверен";
		Иначе
			РезультатПроверки.Результат = "СодержитОшибки";
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки.СписокОшибок = СписокОшибок;
	
	
КонецПроцедуры

// Возвращает данные классификатора по почтовому индексу.
//
// Параметры:
//     Индекс - Строка, Число - почтовый индекс, для которого необходимо получать данные.
//
//     ДополнительныеПараметры - Структура - Описывает настройки поиска. Состоит из необязательных полей:
//         * СкрыватьНеактуальные - Булево - Флаг исключения из выборки неактуальных адресов. По умолчанию Ложь.
//         * ФорматАдреса - Строка - тип используемого классификатора.
//
// Возвращаемое значение:
//     Структура -  найденные варианты. Содержит поля:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * ОбщаяЧастьПредставления      - Строка - Общая часть представлений адреса.
//       * Данные                       - ТаблицаЗначений - Содержит данные для выбора. Колонки:
//                                           ** Неактуален    - Булево - Флаг неактуальности строки данных.
//                                           ** Идентификатор - УникальныйИдентификатор - Код классификатора для поиска
//                                                                                        вариантов по индексу.
//                                           ** Представление - Строка - Представление варианта.
//
Функция АдресаКлассификатораПоПочтовомуИндексу(Знач Индекс, Знач ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		
		ТипЧисло = Новый ОписаниеТипов("Число");
		ИндексЧислом = ТипЧисло.ПривестиЗначение(Индекс);
		
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		Возврат МодульАдресныйКлассификаторСлужебный.АдресаПоПочтовомуИндексуКлассификатора(ИндексЧислом, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Результат = СтруктураОшибкиПоставщикаАдресногоКлассификатора();
	Результат.Вставить("Данные", Новый ТаблицаЗначений);
	Возврат Результат;
	
КонецФункции

// Возвращает данные классификатора поля выбора по уровню.
//
// Параметры:
//     Родитель                - УникальныйИдентификатор - Родительский объект.
//     Уровень                 - Число                   - Требуемый уровень данных. 1-7, 90, 91 - адресные объекты, -1
//                                                         - ориентиры.
//     ДополнительныеПараметры - Структура               - Описание настройке поиска. Поля:
//         * СкрыватьНеактуальные              - Булево - Флаг исключения из выборки неактуальных адресов. По умолчанию
//                                                        Ложь.
//         * ФорматАдреса - Строка - тип используемого классификатора.
//
//         * РазмерПорции - Число                   - Необязательный размер порции возвращаемых данных. Если не указано
//                                                    или 0, то возвращает все элементы.
//         * ПерваяЗапись - УникальныйИдентификатор - Элемент, с которого начинается порция данных. Сам элемент не
//                                                    входит в выборку.
//         * Сортировка   - Строка                  - Направление сортировки для порции.
//
// Возвращаемое значение:
//     Структура -  найденные варианты. Содержит поля:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * Заголовок                    - Строка - Строка с предложением выбора.
//       * Данные                       - ТаблицаЗначений - Содержит данные для выбора. Колонки:
//             ** Неактуален    - Булево - Флаг неактуальности строки данных.
//             ** Идентификатор - УникальныйИдентификатор - Код классификатора для поиска вариантов по индексу.
//             ** Представление - Строка - Представление варианта.
//
Функция АдресаДляИнтерактивногоВыбора(Родитель, Уровень, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		Возврат МодульАдресныйКлассификаторСлужебный.АдресаДляИнтерактивногоВыбора(Родитель, Уровень, ДополнительныеПараметры);
	КонецЕсли;
	
	Результат = СтруктураОшибкиПоставщикаАдресногоКлассификатора();
	Результат.Вставить("Заголовок");
	Результат.Вставить("Данные", Новый ТаблицаЗначений);
	Возврат Результат;

КонецФункции

// Возвращает список для автоподбора населенного пункта, поиск по подобию. Список ограничен 20 записями.
//
// Параметры:
//     Текст                   - Строка    - Текст, введенный в поле.
//     ИмяЧастиАдреса          - Строка    - Идентификатор обрабатываемой части адреса.
//     ЧастиАдреса             - Структура - Значения для других частей адреса.
//     ДополнительныеПараметры - Структура - Описание настройке поиска. Поля:
//         * СкрыватьНеактуальные              - Булево      - Флаг исключения из выборки неактуальных адресов. По
//                                                             умолчанию Ложь.
//         * ФорматАдреса - Строка      - Тип используемого классификатора.
//
// Возвращаемое значение:
//     Структура -  найденные варианты. Содержит поля:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * Данные                       - СписокЗначений - результат для автоподбора.
//
Функция СписокАвтоподбораЧастиАдреса(Текст, ИмяЧастиАдреса, ЧастиАдреса, ДополнительныеПараметры) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Результат = Новый Структура("Данные", Новый СписокЗначений);
		Возврат СтруктураОшибкиПоставщикаАдресногоКлассификатора(Результат);
	КонецЕсли;
	
	ЧастьАдреса = ЧастиАдреса[ИмяЧастиАдреса];
	Родитель = УправлениеКонтактнойИнформациейКлиентСервер.ИдентификаторРодителяЧастиАдресаЭлемента(ЧастьАдреса, ЧастиАдреса);
	
	Уровни = Новый Массив;
	Уровни.Добавить(ЧастьАдреса.Уровень);
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	Результат = МодульАдресныйКлассификаторСлужебный.ВариантыАвтоподбора(Текст, Родитель, Уровни, ДополнительныеПараметры);
	
	ТабличныеДанные = Результат.Данные;
	
	Результат.Данные = Новый СписокЗначений;
	Если Не Результат.Отказ Тогда
		ЗаполнитьСписокАвтоподбораИзТаблицы(Результат.Данные, ТабличныеДанные, Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСписокАвтоподбораИзТаблицы(Результат, ТабличныеДанные, ЭтоПодборУлицы)
	
	Для Каждого Строка Из ТабличныеДанные Цикл
		
		Если Строка.Неактуален Тогда
			Пометка        = Истина;
			Представление = Новый ФорматированнаяСтрока(Строка.Представление,, ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
			Предупреждение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Адрес ""%1"" неактуален.'"), Строка.Представление);
		Иначе
			Предупреждение = Неопределено;
			Пометка        = Ложь;
			Представление = Строка.Представление;
		КонецЕсли;
		
		ЗначениеЭлемента = Новый Структура;
		ЗначениеЭлемента.Вставить("Идентификатор",  Строка.Идентификатор);
		ЗначениеЭлемента.Вставить("Представление",  Строка.Представление);
		ЗначениеЭлемента.Вставить("Автоподбор", Истина);
		ЗначениеЭлемента.Вставить("РегионЗагружен", Строка.РегионЗагружен);
		Если ЭтоПодборУлицы Тогда
			Если Строка.Уровень = 90 Тогда
				ЗначениеЭлемента.Вставить("Улица", "");
				ЗначениеЭлемента.Вставить("ДополнительныйЭлемент", Строка.Представление);
				ЗначениеЭлемента.Вставить("ПодчиненныйЭлемент", "");
			ИначеЕсли Строка.Уровень = 91 Тогда
				ЗначениеЭлемента.Вставить("Улица", "");
				ЗначениеЭлемента.Вставить("ДополнительныйЭлемент", "");
				ЗначениеЭлемента.Вставить("ПодчиненныйЭлемент", Строка.Представление);
			Иначе
				ЗначениеЭлемента.Вставить("Улица", Строка.Представление);
				ЗначениеЭлемента.Вставить("ДополнительныйЭлемент", "");
				ЗначениеЭлемента.Вставить("ПодчиненныйЭлемент", "");
			КонецЕсли;
			ЗначениеЭлемента.Вставить("ТипАдресногоЭлемента", Строка.ТипАдресногоЭлемента);
			
		КонецЕсли;
		
		Результат.Добавить(
			Новый Структура("Предупреждение, Значение", Предупреждение, ЗначениеЭлемента),
			Представление, Пометка);
	КонецЦикла;
	
КонецПроцедуры


//  Возвращает структуру с полем "Данные", содержащую список для автоподбора населенного пункта 
//  по иерархическому представлению младший-старший.
//
//  Параметры:
//      Текст                                - Строка - текст автоподбора.
//      ДополнительныеПараметры              - Структура - Описывает настройки поиска. Состоит из необязательных полей:
//         * СкрыватьНеактуальные              - Булево - Флаг исключения из выборки неактуальных адресов. По умолчанию
//                                                        Ложь.
//         * ФорматАдреса - Строка - тип используемого классификатора.
//
// Возвращаемое значение:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * ОбщаяЧастьПредставления      - Строка - Общая часть представлений адреса.
//       * Данные                       - СписокЗначений - результат для автоподбора.
//
Функция СписокАвтоподбораНаселенногоПункта(Текст, ДополнительныеПараметры) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Результат = Новый Структура("Данные", Новый СписокЗначений);
		Возврат СтруктураОшибкиПоставщикаАдресногоКлассификатора(Результат);
	КонецЕсли;
	
	ЧастиАдреса = РаботаСАдресамиКлиентСервер.СтруктураЧастейАдресаНаселенногоПункта(ДополнительныеПараметры.ФорматАдреса);
	
	Родитель = Неопределено;
	Уровни = Новый Массив;
	Для Каждого КлючЗначение Из ЧастиАдреса Цикл
		Если КлючЗначение.Значение.Уровень < 7 Тогда
			Уровни.Добавить(КлючЗначение.Значение.Уровень);
		КонецЕсли;
	КонецЦикла;
	
	ПреобразоватьВводАдреса(Текст);
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	Результат = МодульАдресныйКлассификаторСлужебный.ВариантыАвтоподбора(Текст, Родитель, Уровни, ДополнительныеПараметры);
	
	ТабличныеДанные = Результат.Данные;
	
	Результат.Данные = Новый СписокЗначений;
	Если Не Результат.Отказ Тогда
		ЗаполнитьСписокАвтоподбораИзТаблицы(Результат.Данные, ТабличныеДанные, Ложь);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Преобразует введенные английские буквы к русской раскладке при подборе адреса
//
Процедура ПреобразоватьВводАдреса(Текст)
	РусскиеКлавиши = "ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁ";
	АнглийскиеКлавиши = "QWERTYUIOP[]ASDFGHJKL;'ZXCVBNM,.`";
	Текст = ВРег(Текст);
	Для Позиция = 0 По СтрДлина(Текст) Цикл
		Символ = Сред(Текст, Позиция, 1);
		ПозицияСимвола = СтрНайти(АнглийскиеКлавиши, Символ);
		Если ПозицияСимвола > 0 Тогда
			Текст = СтрЗаменить(Текст, Символ, Сред(РусскиеКлавиши, ПозицияСимвола, 1));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру с полем "Данные", содержащую список для автоподбора улицы
//  по иерархическому представлению младший-старший.
//
//  Параметры:
//      НаселенныйПункт         - УникальныйИдентификатор - Населенный пункт.
//      Текст                   - Строка - Текст автоподбора.
//      ДополнительныеПараметры - Структура - Описывает настройки поиска. Состоит из необязательных полей:
//         * СкрыватьНеактуальные              - Булево - Флаг исключения из выборки неактуальных адресов. По умолчанию
//                                                        Ложь.
//         * ФорматАдреса - Строка - Тип используемого классификатора.
//         * РазмерПорции                      - Число  - Количество возвращаемых данных.
//
// Возвращаемое значение:
//       * Отказ                        - Булево - Поставщик не доступен.
//       * ПодробноеПредставлениеОшибки - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * КраткоеПредставлениеОшибки   - Строка - Описание ошибки, если поставщик недоступен. Неопределено, если Отказ
//                                                 = Ложь.
//       * ОбщаяЧастьПредставления      - Строка - Общая часть представлений адреса.
//       * Данные                       - СписокЗначений - результат для автоподбора.
//
Функция СписокАвтоподбораУлицы(НаселенныйПункт, Текст, ДополнительныеПараметры) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Результат = Новый Структура("Данные", Новый СписокЗначений);
		Возврат СтруктураОшибкиПоставщикаАдресногоКлассификатора(Результат);
	КонецЕсли;
	
	ЧастиАдреса = РаботаСАдресамиКлиентСервер.СтруктураЧастейАдресаНаселенногоПункта(ДополнительныеПараметры.ФорматАдреса);
	
	Уровни = Новый Массив;
	Для Каждого КлючЗначение Из ЧастиАдреса Цикл
		Если КлючЗначение.Значение.Уровень > 6 Тогда 
			Уровни.Добавить(КлючЗначение.Значение.Уровень);
		КонецЕсли;
	КонецЦикла;
	
	ПреобразоватьВводАдреса(Текст);
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	Результат = МодульАдресныйКлассификаторСлужебный.ВариантыАвтоподбора(Текст, НаселенныйПункт, Уровни, ДополнительныеПараметры);
	
	ТабличныеДанные = Результат.Данные;
	
	Результат.Данные = Новый СписокЗначений;
	Если Не Результат.Отказ Тогда
		ЗаполнитьСписокАвтоподбораИзТаблицы(Результат.Данные, ТабличныеДанные, Истина);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает список значение содержащий номера домов для автоподбора.
//
//  Параметры:
//      ИдентификаторАдресногоОбъекта         - УникальныйИдентификатор - Населенный пункт или улица.
//      СтрокаПоиска                   - Строка - Текст автоподбора.
// Возвращаемое значение:
//       СписокЗначений - результат для автоподбора.
//
Функция СписокАвтоподбораНомераДомов(ИдентификаторАдресногоОбъекта, СтрокаПоиска) Экспорт
	
	ВариантыДомов = Новый СписокЗначений;
	
	СписокДомов = СписокДомов(ИдентификаторАдресногоОбъекта, СтрокаПоиска);
	Если СписокДомов <> Неопределено Тогда
		ВариантыДомов = Новый СписокЗначений;
		Для каждого Строка Из СписокДомов Цикл
			ВариантыДомов.Добавить(Строка.Значение, Строка.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВариантыДомов;
КонецФункции

// Возвращает список домов по идентификатору адресного объекта, поиск по подобию.
//
// Параметры:
//     ИдентификаторАдресногоОбъекта - УникальныйИдентификатор - Родительский объект.
//     СтрокаПоиска                  - Строка                  - Текст, отбора в списке домов.
//
// Возвращаемое значение:
//     ТаблицаЗначений  -  найденные варианты.
//
Функция СписокДомов(ИдентификаторАдресногоОбъекта, СтрокаПоиска = "") Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		СписокДомов = МодульАдресныйКлассификаторСлужебный.СписокДомов(ИдентификаторАдресногоОбъекта, СтрокаПоиска);
		Возврат СписокДомов;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет коды по структуре адреса.
//
Процедура ЗаполнитьКодыАдреса(Результат, Адрес)
	
	КодыКЛАДР = Новый Структура("Регион, Округ, Город, ВнутригородскойРайон, НаселенныйПункт, Улица");
	ДополнительныеКоды = Новый Структура("ОКТМО, ОКАТО, КодИФНСФЛ, КодИФНСЮЛ, КодУчасткаИФНСФЛ, КодУчасткаИФНСЮЛ");
	Результат.Вставить("КодыКЛАДР", КодыКЛАДР);
	Результат.Вставить("ДополнительныеКоды", ДополнительныеКоды);
	
	Если ПустаяСтрока(Результат.Регион) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		АдресныеКоды = МодульАдресныйКлассификаторСлужебный.КодыАдресаИКодыКЛАДР(Адрес);
		Результат.ДополнительныеКоды = АдресныеКоды.КодыАдреса;
		Результат.КодыКЛАДР = АдресныеКоды.КодыКЛАДР;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//======================================================================================================================
// Служебные

// Внутреннее для сериализации.
Функция ДесериализацияАдресаОбщая(Знач ЗначенияПолей, Знач Представление, Знач ОжидаемыйТип = Неопределено)
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации.
		Возврат УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	Если ОжидаемыйТип <> Неопределено Тогда
		Если ОжидаемыйТип <> Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес'");
		КонецЕсли;
	КонецЕсли;
	
	// Старый формат через разделитель строк и равенство.
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	Результат.Комментарий = "";
	Результат.Состав      = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	
	НазваниеОсновнойСтраны  = ВРег(РаботаСАдресами.ОсновнаяСтрана().Наименование);
	ЭлементКвартира = Неопределено;
	ЭлементКорпус   = Неопределено;
	ЭлементДом      = Неопределено;
	
	// Национальный
	НациональныйАдрес = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(РаботаСАдресами.ПространствоИмен(), "АдресРФ"));
	
	// Общий состав
	Адрес = Результат.Состав;
	Адрес.Страна = НазваниеОсновнойСтраны; // Страна по умолчанию
	АдресРоссийский = Истина;
	
	ТипЗначенийПолей = ТипЗнч(ЗначенияПолей);
	Если ТипЗначенийПолей = Тип("СписокЗначений") Тогда
		СписокПолей = ЗначенияПолей;
	ИначеЕсли ТипЗначенийПолей = Тип("Структура") Тогда
		СписокПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(
			РаботаСАдресамиКлиентСервер.СтрокаПолей(ЗначенияПолей, Ложь));
	Иначе
		// Уже преобразовано в строку
		СписокПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;
	
	ТипКвартирыНеопределен = Истина;
	ТипКорпусаНеопределен  = Истина;
	ТипДомаНеопределен     = Истина;
	ПолеПредставления      = "";
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		ИмяПоля = ВРег(ЭлементСписка.Представление);
		
		Если ИмяПоля="ИНДЕКС" Тогда
			ЭлементИндекс = СоздатьДопАдрЭлемента(НациональныйАдрес);
			ЭлементИндекс.ТипАдрЭл = РаботаСАдресамиКлиентСервер.КодСериализацииПочтовогоИндекса();
			ЭлементИндекс.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "СТРАНА" Тогда
			Адрес.Страна = ЭлементСписка.Значение;
			Если ВРег(ЭлементСписка.Значение) <> НазваниеОсновнойСтраны Тогда
				АдресРоссийский = Ложь;
			КонецЕсли;
			
		ИначеЕсли ИмяПоля = "КОДСТРАНЫ" Тогда
			// действия не требуется
			
		ИначеЕсли ИмяПоля = "КОДРЕГИОНА" Тогда
			НациональныйАдрес.СубъектРФ = РегионКода(ЭлементСписка.Значение);
			
		ИначеЕсли ИмяПоля = "РЕГИОН" Тогда
			НациональныйАдрес.СубъектРФ = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "РАЙОН" Тогда
			Если НациональныйАдрес.СвРайМО = Неопределено Тогда
				НациональныйАдрес.СвРайМО = ФабрикаXDTO.Создать( НациональныйАдрес.Тип().Свойства.Получить("СвРайМО").Тип )
			КонецЕсли;
			НациональныйАдрес.СвРайМО.Район = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ГОРОД" Тогда
			НациональныйАдрес.Город = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "НАСЕЛЕННЫЙПУНКТ" Тогда
			НациональныйАдрес.НаселПункт = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "УЛИЦА" Тогда
			НациональныйАдрес.Улица = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПДОМА" Тогда
			Если ЭлементДом = Неопределено Тогда
				ЭлементДом = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
			КонецЕсли;
			ЭлементДом.Тип = РаботаСАдресамиКлиентСервер.КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипДомаНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "ДОМ" Тогда
			Если ЭлементДом = Неопределено Тогда
				ЭлементДом = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
			КонецЕсли;
			ЭлементДом.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПКОРПУСА" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
			КонецЕсли;
			ЭлементКорпус.Тип = РаботаСАдресамиКлиентСервер.КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипКорпусаНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "КОРПУС" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
			КонецЕсли;
			ЭлементКорпус.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПКВАРТИРЫ" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
			КонецЕсли;
			ЭлементКвартира.Тип = РаботаСАдресамиКлиентСервер.КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипКвартирыНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "КВАРТИРА" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
			КонецЕсли;
			ЭлементКвартира.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ПРЕДСТАВЛЕНИЕ" Тогда
			ПолеПредставления = СокрЛП(ЭлементСписка.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Умолчания
	Если ТипДомаНеопределен И ЭлементДом <> Неопределено Тогда
		ЭлементДом.Тип = РаботаСАдресамиКлиентСервер.КодСериализацииОбъектаАдресации("Дом");
	КонецЕсли;
	
	Если ТипКорпусаНеопределен И ЭлементКорпус <> Неопределено Тогда
		ЭлементКорпус.Тип = РаботаСАдресамиКлиентСервер.КодСериализацииОбъектаАдресации("Корпус");
	КонецЕсли;
	
	Если ТипКвартирыНеопределен И ЭлементКвартира <> Неопределено Тогда
		ЭлементКвартира.Тип = РаботаСАдресамиКлиентСервер.КодСериализацииОбъектаАдресации("Квартира");
	КонецЕсли;
	
	// Представление с приоритетами.
	Если Не ПустаяСтрока(Представление) Тогда
		Результат.Представление = Представление;
	Иначе
		Результат.Представление = ПолеПредставления;
	КонецЕсли;
	
	Адрес.Состав = ?(АдресРоссийский, НациональныйАдрес, Результат.Представление);
	
	Возврат Результат;
КонецФункции

// Преобразует строку в XDTO контактную информацию адреса.
//
//  Параметры:
//      ЗначенияПолей - Строка - сериализованная информация, значения полей.
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей
//                               пусто.
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция АдресXMLВXDTO(Знач ЗначенияПолей, Знач Представление = "", Знач ОжидаемыйТип = Неопределено) Экспорт
	
	Если Метаданные.Обработки.Найти("РасширенныйВводКонтактнойИнформации") <> Неопределено Тогда
		
		ТипЗначения = ТипЗнч(ЗначенияПолей);
		РазбиратьПоПолям = (ТипЗначения = Тип("СписокЗначений") Или ТипЗначения = Тип("Структура")
			Или (ТипЗначения = Тип("Строка") И Не ПустаяСтрока(ЗначенияПолей)));
		Если РазбиратьПоПолям Тогда
			// Разбираем из значений полей.
			Возврат ДесериализацияАдресаОбщая(ЗначенияПолей, Представление, ОжидаемыйТип);
		КонецЕсли;
		
		// Разбираем адрес из его представления по классификатору.
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			Возврат СформироватьАдресПоПредставлению(Представление);
		КонецЕсли;
		
	КонецЕсли;
	
	// Пустой объект с представлением.
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Результат.Состав.Состав = Представление;
	Результат.Представление = Представление;
	Возврат Результат;
	
КонецФункции


Функция СтруктураАдресаПоФормату9Запятых(АдресВФормате9Запятых)
	Результат = Новый Соответствие;
	АдресМассив = СтрРазделить(АдресВФормате9Запятых, ",", Истина);
	Результат.Вставить("Страна", АдресМассив[0]);
	Результат.Вставить("Индекс", АдресМассив[1]);
	Результат.Вставить("Регион", АдресМассив[2]);
	Результат.Вставить("Район", АдресМассив[3]);
	Результат.Вставить("Город", АдресМассив[4]);
	Результат.Вставить("НаселенныйПункт", АдресМассив[5]);
	Результат.Вставить("Улица", АдресМассив[6]);
	Результат.Вставить("Дом", АдресМассив[7]);
	Результат.Вставить("Корпус", АдресМассив[8]);
	Результат.Вставить("Квартира", АдресМассив[9]);
	
	Результат.Вставить("Округ", Неопределено);
	Результат.Вставить("ВнутригРайон", Неопределено);
	Возврат Результат;
	
КонецФункции

// Функция раскладывает строку с данными об адресе (в формате 9 запятых) на элементы структуры.
Функция РазложитьАдресВСтруктуру(Знач СтрокаАдрес) Экспорт
	
	Страна = "";
	Индекс = "";
	Регион = "";
	Район = "";
	Город = "";
	НаселенныйПункт = "";
	Улица ="";
	Дом ="";
	Корпус ="";
	Квартира ="";

	МассивАдрес = СтрРазделить(СтрокаАдрес, ",", Истина);
	ЭлементовВМассиве = МассивАдрес.Количество();

	Если ЭлементовВМассиве > 0 Тогда
		Страна = СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве > 1 Тогда
		ИндексСтрокой = СокрЛП(МассивАдрес[1]);
		Если СтрДлина(ИндексСтрокой) = 6 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрокой) Тогда
			Индекс = ИндексСтрокой;
		КонецЕсли;
	КонецЕсли;
	Если ЭлементовВМассиве > 2 Тогда
		Регион = СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве > 3 Тогда
		Район = СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве > 4 Тогда
		Город = СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве > 5 Тогда
		НаселенныйПункт = СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве > 6 Тогда
		Улица = СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве > 7 Тогда
		Дом = СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве > 8 Тогда
		Корпус = СокрЛП(МассивАдрес[8]);
	КонецЕсли;
	Если ЭлементовВМассиве> 9 Тогда
		Квартира = СокрЛП(МассивАдрес[9]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Страна",Страна);
	СтруктураВозврата.Вставить("Индекс",Индекс);
	СтруктураВозврата.Вставить("Регион",Регион);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Город",Город);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Улица",Улица);
	СтруктураВозврата.Вставить("Дом",Дом);
	СтруктураВозврата.Вставить("Корпус",Корпус);
	СтруктураВозврата.Вставить("Квартира",Квартира);

	Возврат СтруктураВозврата;
	
КонецФункции

Функция СформироватьАдресПоПредставлению(Представление)
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Результат.Представление = Представление;
	
	Адрес = Результат.Состав;
	
	НаименованиеОсновнаяСтрана = СокрЛП(РаботаСАдресами.ОсновнаяСтрана().Наименование);
	ДанныеАнализа = ЧастиАдресаТаблицей(Представление);
	Если ДанныеАнализа.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОпределитьСтрануИИндекс(ДанныеАнализа);
	СтрокаСтраны = ДанныеАнализа.Найти(-2, "Уровень");
	Если СтрокаСтраны = Неопределено Тогда
		Адрес.Страна = НаименованиеОсновнаяСтрана;
	Иначе
		Адрес.Страна = СокрЛП(ВРег(СтрокаСтраны.Значение));
		// Проверка наличия страны в справочнике Страны мира и неявное добавление ее в случае отсутствия.
		СтранаМира = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(Адрес.Страна);
	КонецЕсли;
	
	Если Адрес.Страна = НаименованиеОсновнаяСтрана Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			НациональныйАдрес = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(РаботаСАдресами.ПространствоИмен(), "АдресРФ"));
			МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
			АдресПоУровням = МодульАдресныйКлассификаторСлужебный.УстановитьСоответствиеЧастейАдресаИхУровню(ДанныеАнализа, УровниАдресныхОбъектов());
			Если АдресПоУровням <> Неопределено Тогда
				ПоместитьАдресВXDTO(НациональныйАдрес, АдресПоУровням);
			КонецЕсли;
			
			Если АдресПоУровням.Найти(0, "Уровень") <> Неопределено Тогда
				// Что-то осталось, считаем адресом в свободной форме.
				НациональныйАдрес.Адрес_По_Документу = Представление;
			КонецЕсли;
			Адрес.Состав = НациональныйАдрес;
		КонецЕсли;
	Иначе
		// Состав без страны, она остается в представлении.
		Позиция = СтрокаСтраны.Начало + СтрокаСтраны.Длина;
		Длина   = СтрДлина(Представление);
		Разделители = "," + Символы.ПС;
		Пока Позиция <= Длина И СтрНайти(Разделители, Сред(Представление, Позиция, 1)) <= 0 Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		Пока Позиция <= Длина И СтрНайти(Разделители, Сред(Представление, Позиция, 1)) > 0 Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		Адрес.Состав = СокрЛП(Лев(Представление, СтрокаСтраны.Начало - 1) + " " + СокрЛП(Сред(Представление, Позиция)));

	КонецЕсли;
		
	Возврат Результат;
КонецФункции

Функция ПредставлениеАдреса(Знач ВидИнформации, НациональныйАдрес, Страна) Экспорт
	
	// Значимые части
	Адрес = Новый Массив;
	Адрес.Добавить(ДополнительныйЭлементАдреса(НациональныйАдрес, РаботаСАдресамиКлиентСервер.XPathПочтовогоИндекса()));
	Адрес.Добавить(НациональныйАдрес.СубъектРФ);
	Если ВидИнформации.ФорматАдреса = "ФИАС" Тогда
		Адрес.Добавить(НациональныйАдрес.Округ);
	КонецЕсли;
	Адрес.Добавить(РайонАдреса(НациональныйАдрес));
	Адрес.Добавить(НациональныйАдрес.Город);
	Если ВидИнформации.ФорматАдреса = "ФИАС" Тогда
		Адрес.Добавить(НациональныйАдрес.ВнутригРайон);
	КонецЕсли;
	Адрес.Добавить(НациональныйАдрес.НаселПункт);
	Адрес.Добавить(НациональныйАдрес.Улица);
	
	ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(НациональныйАдрес, РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "СНТ"));
	Если ДополнительныйЭлементАдреса = Неопределено Тогда
		ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(НациональныйАдрес, РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "ГСК"));
		Если ДополнительныйЭлементАдреса = Неопределено Тогда
			ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(НациональныйАдрес, РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "ТЕР"));
			Если ДополнительныйЭлементАдреса = Неопределено Тогда
				ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(НациональныйАдрес, РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(90));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Адрес.Добавить(ДополнительныйЭлементАдреса);
	Адрес.Добавить(ДополнительныйЭлементАдреса(НациональныйАдрес, РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(91)));
	
	Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Адрес);
	
	// Строения и помещения
	НомерНеВыведен = Истина;
	Данные = ЗданияИПомещенияАдреса(НациональныйАдрес);
	Для Каждого Строка Из Данные.Здания Цикл
		Здания = Новый Массив;
		Здания.Добавить(Представление); 
		Здания.Добавить(СокрЛП(Строка.Сокращение + ?(НомерНеВыведен, " № ", " ") + Строка.Значение));
		Представление =  УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Здания);
		НомерНеВыведен = Ложь;
	КонецЦикла;
	
	Для Каждого Строка Из Данные.Помещения Цикл
		Помещения = Новый Массив;
		Помещения.Добавить(Представление);
		Помещения.Добавить(СокрЛП(Строка.Сокращение + " " + Строка.Значение));
		Представление =  УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Помещения);
	КонецЦикла;
	
	// При пустом представлении страну нет смысла выводить.
	Если ПустаяСтрока(Представление) Тогда
		Страна = "";
	КонецЕсли;

	Возврат Представление;
КонецФункции

// Возвращает представление младший-старший для населенного пункта.
//
//  Параметры:
//      ОбъектАдреса - ОбъектXDTO - адрес РФ.
//
//  Возвращаемое значение:
//      Строка - представление.
//
Функция ПредставлениеНаселенногоПункта(ОбъектАдреса) Экспорт
	
	АдресРФ = НациональныйАдрес(ОбъектАдреса);
	Если АдресРФ = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если АдресРФ.СвРайМО = Неопределено Тогда
		Район = "";
	ИначеЕсли АдресРФ.СвРайМО.Район <> Неопределено Тогда
		Район = АдресРФ.СвРайМО.Район;
	ИначеЕсли АдресРФ.СвРайМО.СвМО <> Неопределено Тогда
		Районы = Новый Массив(АдресРФ.СвРайМО.СвМО.МунОбр2, АдресРФ.СвРайМО.СвМО.МунОбр1);
		Район = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Районы);
	Иначе
		Район = "";
	КонецЕсли;
	
	Адрес = Новый Массив;
	Адрес.Добавить(АдресРФ.НаселПункт);
	Адрес.Добавить(АдресРФ.ВнутригРайон);
	Адрес.Добавить(АдресРФ.Город);
	Адрес.Добавить(Район);
	Адрес.Добавить(АдресРФ.Округ);
	Адрес.Добавить(АдресРФ.СубъектРФ);
	
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Адрес);
	
КонецФункции

//  Возвращает представление младший-старший для населенного пункта.
//
//  Параметры:
//      ОбъектАдреса - ОбъектXDTO - адрес РФ.
//
//  Возвращаемое значение:
//      Строка - представление.
//
Функция ПредставлениеУлицы(ОбъектАдреса) Экспорт
	
	АдресРФ = НациональныйАдрес(ОбъектАдреса);
	Если АдресРФ = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Адрес = Новый Массив;
	Адрес.Добавить(АдресРФ.Улица);
	
	ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "СНТ"));
	Если ДополнительныйЭлементАдреса = Неопределено Тогда
		ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "ГСК"));
		Если ДополнительныйЭлементАдреса = Неопределено Тогда
			ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(90, "ТЕР"));
			Если ДополнительныйЭлементАдреса = Неопределено Тогда
				ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(90));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Адрес.Добавить(ДополнительныйЭлементАдреса);
	Адрес.Добавить(ДополнительныйЭлементАдреса(АдресРФ, РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(91)));
	
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(Адрес);
	
КонецФункции


//======================================================================================================================
// Структура и поля адреса.

//  Возвращает флаг того, что переданный адрес - российский.
//
//  Параметры:
//      XDTOАдрес - ОбъектXDTO - Контактная информация или XDTO адреса.
//
//  Возвращаемое значение:
//      Булево - результат проверки.
//
Функция ЭтоНациональныйАдрес(XDTOАдрес) Экспорт
	Возврат НациональныйАдрес(XDTOАдрес) <> Неопределено;
КонецФункции

// Возвращает извлеченный XDTO российского адреса или Неопределено для адреса иностранного.
//
//  Параметры:
//      ОбъектИнформации - ОбъектXDTO - Контактная информация или XDTO адреса.
//
//  Возвращаемое значение:
//      ОбъектXDTO - российский адрес.
//      Неопределено - нет российского адреса.
//
Функция НациональныйАдрес(ОбъектИнформации) Экспорт
	Результат = Неопределено;
	ТипXDTO   = Тип("ОбъектXDTO");
	
	Если ТипЗнч(ОбъектИнформации) = ТипXDTO Тогда
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		
		Если ОбъектИнформации.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") Тогда
			Адрес = ОбъектИнформации.Состав;
		Иначе
			Адрес = ОбъектИнформации;
		КонецЕсли;
		
		Если ТипЗнч(Адрес) = ТипXDTO И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Адрес = Адрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(Адрес) = ТипXDTO Тогда
			Результат = Адрес;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает почтовый индекс и ОКТМО для адреса по данным классификатора.
//
//  Параметры:
//      XDTOАдрес - ОбъектXDTO - Контактная информация или XDTO адреса.
//
//  Возвращаемое значение:
//      Структура - почтовый индекс и ОКТМО.
//        * Индекс - почтовый индекс.
//        * ОКТМО - ОКТМО
//      Неопределено - индекс не найден или адрес иностранный.
//
Функция ОпределитьПочтовыйИндексИОКТМОАдреса(XDTOАдрес, Идентификатор = Неопределено) Экспорт
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Если XDTOАдрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		XDTOАдресРФ = XDTOАдрес.Состав;
	Иначе 
		XDTOАдресРФ = XDTOАдрес;
	КонецЕсли;
	
	Если XDTOАдресРФ = Неопределено Или XDTOАдресРФ.Тип() <> ФабрикаXDTO.Тип(РаботаСАдресами.ПространствоИмен(), "АдресРФ") Тогда
		Возврат Неопределено;// Иностранный или пустой адрес.
	КонецЕсли;
	
	ИндексИОКМТО = Новый Структура("Индекс, ОКТМО");
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		// Вызов анализа и возврат индекса варианта.
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		ИндексИОКМТО = МодульАдресныйКлассификаторСлужебный.ИндексИОКТМОАдресаПоЧастямАдреса(XDTOАдресРФ, Идентификатор);
	КонецЕсли;
	
	Возврат ИндексИОКМТО;
КонецФункции

Процедура ОпределитьСтрануИИндекс(ДанныеАдреса)
	
	Классификатор = УправлениеКонтактнойИнформацией.ТаблицаКлассификатора();
	Для каждого ЭлементАдреса Из ДанныеАдреса Цикл
		ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
		Индекс = ОписаниеТипаЧисло.ПривестиЗначение(ЭлементАдреса.Наименование);
		Если Индекс >= 100000 И Индекс < 1000000 Тогда
			ЭлементАдреса.Уровень = -1;
		Иначе
			Если Классификатор.Найти(ВРег(ЭлементАдреса.Наименование), "Наименование") <> Неопределено Тогда
				ЭлементАдреса.Уровень = -2;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Читает и устанавливает почтовый индекс адреса.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Строка     - устанавливаемое значение.
//
//  Возвращаемое значение:
//      Строка - почтовый индекс.
//
Функция ПочтовыйИндексАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	
	АдресРФ = НациональныйАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НовоеЗначение = Неопределено Тогда
		// Чтение
		Результат = АдресРФ.Получить( РаботаСАдресамиКлиентСервер.XPathПочтовогоИндекса() );
		Если Результат <> Неопределено Тогда
			Результат = Результат.Значение;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	// Запись
	КодИндекса = РаботаСАдресамиКлиентСервер.КодСериализацииПочтовогоИндекса();
	
	ЗаписьИндекса = АдресРФ.Получить(РаботаСАдресамиКлиентСервер.XPathПочтовогоИндекса());
	Если ЗаписьИндекса = Неопределено Тогда
		ЗаписьИндекса = АдресРФ.ДопАдрЭл.Добавить(ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип));
		ЗаписьИндекса.ТипАдрЭл = КодИндекса;
	КонецЕсли;
	
	ЗаписьИндекса.Значение = СокрЛП(НовоеЗначение);
	Возврат НовоеЗначение;
КонецФункции

// Читает и устанавливает район адреса.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Строка - устанавливаемое значение.
//
//  Возвращаемое значение:
//      Строка - новое значение.
//
Функция РайонАдреса(XDTOАдрес, НовоеЗначение = Неопределено)
	
	Если НовоеЗначение = Неопределено Тогда
		// Чтение
		
		Результат = Неопределено;
		
		XDTOТип = XDTOАдрес.Тип();
		Если XDTOТип = ФабрикаXDTO.Тип(РаботаСАдресами.ПространствоИмен(), "АдресРФ") Тогда
			АдресРФ = XDTOАдрес;
		Иначе
			АдресРФ = XDTOАдрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
			Возврат ПолучитьXDTOРеквизитОбъекта(АдресРФ, РаботаСАдресамиКлиентСервер.XPathРайона());
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Запись
	Запись = СвРайМО(XDTOАдрес);
	Запись.Район = НовоеЗначение;
	Возврат НовоеЗначение;
КонецФункции

Функция СвРайМО(АдресРФ)
	Если АдресРФ.СвРайМО <> Неопределено Тогда
		Возврат АдресРФ.СвРайМО;
	КонецЕсли;
	
	АдресРФ.СвРайМО = ФабрикаXDTO.Создать( АдресРФ.Свойства().Получить("СвРайМО").Тип );
	Возврат АдресРФ.СвРайМО;
КонецФункции

// Возвращает значения уровней 90(дополнительный элемент) и 91(подчиненный) из адреса.
//
Функция ЗначениеДополнительныхЭлементов(Знач XDTOАдрес)
	
	Результат = Новый Структура("ДополнительныйЭлемент, ПодчиненныйЭлемент");
	
	АдресРФ = НациональныйАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	
	ДополнительныйЭлементАдреса = НайтиДополнительныйЭлементАдреса(АдресРФ).Значение;

	Результат.ДополнительныйЭлемент = ДополнительныйЭлементАдреса;
	Результат.ПодчиненныйЭлемент = ДополнительныйЭлементАдреса(АдресРФ, РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(91));
	
	Возврат Результат;
	
КонецФункции

// Читает дополнительные элемент адреса по его пути.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      XPathЭлемента -  Строка - Путь к элементу.
//
//  Возвращаемое значение:
//      Строка - значение элемента.
Функция ДополнительныйЭлементАдреса(XDTOАдрес, XPathЭлемента)
	
	АдресРФ = НациональныйАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = АдресРФ.Получить(XPathЭлемента);
	Если Результат <> Неопределено Тогда
		Возврат Результат.Значение;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает дополнительный адреса.
//
Функция НайтиДополнительныйЭлементАдреса(АдресРФ) Экспорт
	
	ВариантыДополнительногоЭлементаАдреса = ВариантыДополнительногоЭлементаАдреса();
	
	XPath = "";
	ДополнительныйЭлементАдреса = Неопределено;
	Для каждого ВариантДополнительныйЭлементАдреса Из ВариантыДополнительногоЭлементаАдреса Цикл
		XPath = РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(90, ВариантДополнительныйЭлементАдреса);
		ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, XPath);
		Если ДополнительныйЭлементАдреса <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Значение, XPath", ДополнительныйЭлементАдреса, XPath);
	
КонецФункции

Функция ВариантыДополнительногоЭлементаАдреса()
	
	ВариантыДополнительногоЭлементаАдреса = Новый Массив;
	ВариантыДополнительногоЭлементаАдреса.Добавить("СНТ");
	ВариантыДополнительногоЭлементаАдреса.Добавить("ГСК");
	ВариантыДополнительногоЭлементаАдреса.Добавить("ТЕР");
	ВариантыДополнительногоЭлементаАдреса.Добавить("");
	Возврат ВариантыДополнительногоЭлементаАдреса;

КонецФункции

Функция СоздатьНомерДопАдрЭлемента(АдресРФ)
	ДопАдрЭл = СоздатьДопАдрЭлемента(АдресРФ);
	ДопАдрЭл.Номер = ФабрикаXDTO.Создать(ДопАдрЭл.Тип().Свойства.Получить("Номер").Тип);
	Возврат ДопАдрЭл.Номер;
КонецФункции

Функция СоздатьДопАдрЭлемента(АдресРФ)
	СвойствоДопАдрЭлемента = АдресРФ.ДопАдрЭл.ВладеющееСвойство;
	ДопАдрЭлемента = ФабрикаXDTO.Создать(СвойствоДопАдрЭлемента.Тип);
	АдресРФ.ДопАдрЭл.Добавить(ДопАдрЭлемента);
	Возврат ДопАдрЭлемента;
КонецФункции

// Добавляет дополнительные элемент адреса по его пути.
//
Процедура ДобавитьДополнительныеЭлементыАдреса(XDTOАдрес, НовоеЗначение, Уровень) Экспорт
	
	АдресРФ = НациональныйАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Уровень = 90 Тогда
		НаименованиеИСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(НовоеЗначение);
		КодСериализацииДополнительногоОбъектаАдресации = РаботаСАдресамиКлиентСервер.КодСериализацииДополнительногоОбъектаАдресации(90, НаименованиеИСокращение.Сокращение);
	ИначеЕсли Уровень = 91 Тогда
		КодСериализацииДополнительногоОбъектаАдресации = РаботаСАдресамиКлиентСервер.КодСериализацииДополнительногоОбъектаАдресации(91);
	Иначе
		КодСериализацииДополнительногоОбъектаАдресации = РаботаСАдресамиКлиентСервер.КодСериализацииДополнительногоОбъектаАдресации(0);
	КонецЕсли;

	XPathЭлемента = "ДопАдрЭл[ТипАдрЭл='" + КодСериализацииДополнительногоОбъектаАдресации + "']";
	ЗначениеПоля = АдресРФ.Получить(XPathЭлемента);
	Если ЗначениеПоля = Неопределено Тогда
		ЗначениеПоля = АдресРФ.ДопАдрЭл.Добавить(ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип));
		ЗначениеПоля.ТипАдрЭл = КодСериализацииДополнительногоОбъектаАдресации;
	КонецЕсли;
	ЗначениеПоля.Значение = НовоеЗначение;
	
КонецПроцедуры

// Читает и устанавливает здания и помещения адреса. 
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Структура  - устанавливаемое значение. Ожидаются поля:
//                          * Здания - ТаблицаЗначений с колонками:
//                                        ** Тип      - Строка - тип внутреннего классификатора дополнительных адресных
//                                                               объектов. Например "Корпус".
//                                        ** Значение - Строка  - значение номера дома, квартиры и т.п.
//                          * Помещения - ТаблицаЗначений с колонками, аналогично полю Здание.
//
//  Возвращаемое значение:
//      Структура - текущие данные. Содержит поля:
//          * Здания - ТаблицаЗначений с колонками:
//                        ** Тип        - Строка - тип внутреннего классификатора дополнительных адресных объектов.
//                                                 Например "Корпус".
//                        ** Сокращение - Строка - сокращение названия для использования в представлении.
//                        ** Значение   - Строка - значение номера дома, квартиры и т.п.
//                        ** ПутьXPath  - Строка - путь к значению объекта.
//          * Помещения - ТаблицаЗначений с колонками, аналогично полю Здание.
//
Функция ЗданияИПомещенияАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	
	Результат = Новый Структура("Здания, Помещения", 
		ТаблицаЗначений("Тип, Значение, Сокращение, ПутьXPath, Вид", "Тип, Вид"),
		ТаблицаЗначений("Тип, Значение, Сокращение, ПутьXPath, Вид", "Тип, Вид"));
	
	АдресРФ = НациональныйАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НовоеЗначение <> Неопределено Тогда
		// Запись
		Если НовоеЗначение.Свойство("Здания") Тогда
			Для Каждого Строка Из НовоеЗначение.Здания Цикл
				ВставитьЗданиеПомещение(XDTOАдрес, Строка.Тип, Строка.Значение);
			КонецЦикла;
		КонецЕсли;
		Если НовоеЗначение.Свойство("Помещения") Тогда
			Для Каждого Строка Из НовоеЗначение.Помещения Цикл
				ВставитьЗданиеПомещение(XDTOАдрес, Строка.Тип, Строка.Значение);
			КонецЦикла;
		КонецЕсли;
		Возврат НовоеЗначение
	КонецЕсли;
	
	// Чтение
	Для Каждого ДопЭлемент Из АдресРФ.ДопАдрЭл Цикл
			Если ДопЭлемент.Номер <> Неопределено Тогда
			КодОбъекта = Строка(ДопЭлемент.Номер.Тип);
			ТипОбъекта = РаботаСАдресамиКлиентСервер.ТипОбъектаПоКодуСериализации(КодОбъекта);
			Если ТипОбъекта <> Неопределено Тогда
				Вид = ТипОбъекта.Тип;
				Если Вид = 1 Или Вид = 2 Тогда
					НоваяСтрока = Результат.Здания.Добавить();
				ИначеЕсли Вид = 3 Тогда
					НоваяСтрока = Результат.Помещения.Добавить();
				Иначе
					НоваяСтрока = Неопределено;
				КонецЕсли;
				Если НоваяСтрока <> Неопределено Тогда
					НоваяСтрока.Тип        = Строка(ТипОбъекта.Наименование);
					НоваяСтрока.Значение   = Строка(ДопЭлемент.Номер.Значение);
					НоваяСтрока.Сокращение = Строка(ТипОбъекта.Сокращение);
					НоваяСтрока.ПутьXPath  = РаботаСАдресамиКлиентСервер.XPathНомераДополнительногоОбъектаАдресации(НоваяСтрока.Тип);
					НоваяСтрока.Вид        = Вид;
				КонецЕсли;
			Иначе
				НоваяСтрока = Результат.Помещения.Добавить();
				НоваяСтрока.Тип        = КодОбъекта;
				НоваяСтрока.Значение   = Строка(ДопЭлемент.Номер.Значение);
				НоваяСтрока.Сокращение = КодОбъекта;
				НоваяСтрока.ПутьXPath  = РаботаСАдресамиКлиентСервер.XPathНомераДополнительногоОбъектаАдресации("2000");
				НоваяСтрока.Вид        = 3;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Здания.Сортировать("Вид");
	Результат.Помещения.Сортировать("Вид");
	
	Возврат Результат;
КонецФункции

Функция ЗначениеЗданияИлиПомещения(Данные, Варианты, ВсеЗначенияВарианта)
	
	Результат = ТаблицаЗначений("Тип, Значение");
	
	Для каждого СведенияОбОбъекте Из Данные Цикл
		Для каждого Вариант Из Варианты.ВариантыТипа Цикл
			Если СтрСравнить(Вариант, СведенияОбОбъекте.Тип) = 0 Тогда
				ЗаполнитьЗначенияСвойств(Результат.Добавить(), СведенияОбОбъекте);
				Если Не ВсеЗначенияВарианта Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВставитьЗданиеПомещение(XDTOАдрес, Тип, Значение)
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Запись = XDTOАдрес.Получить(РаботаСАдресамиКлиентСервер.XPathНомераДополнительногоОбъектаАдресации(Тип));
	Если Запись = Неопределено Тогда
		Запись = XDTOАдрес.ДопАдрЭл.Добавить( ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип));
		Запись.Номер = ФабрикаXDTO.Создать(Запись.Свойства().Получить("Номер").Тип);
		Запись.Номер.Значение = Значение;
		
		КодТипа = РаботаСАдресамиКлиентСервер.КодСериализацииОбъектаАдресации(Тип);
		Если КодТипа = Неопределено Тогда
			КодТипа = Тип;
		КонецЕсли;
		Запись.Номер.Тип = КодТипа
	Иначе
		Запись.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры

// Конструктор таблицы значений.
//
Функция ТаблицаЗначений(СписокКолонок, СписокИндексов = "")
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	Для Каждого КлючЗначение Из (Новый Структура(СписокКолонок)) Цикл
		ТаблицаРезультата.Колонки.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	СтрокиИндексов = СтрЗаменить(СписокИндексов, "|", Символы.ПС);
	Для НомерИндекса = 1 По СтрЧислоСтрок(СтрокиИндексов) Цикл
		КолонкиИндекса = СокрЛП(СтрПолучитьСтроку(СтрокиИндексов, НомерИндекса));
		Для Каждого КлючЗначение Из (Новый Структура(КолонкиИндекса)) Цикл
			ТаблицаРезультата.Индексы.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
КонецФункции

Процедура ОпределитьСоответствиеСокращений(Результат, ЭлементаАдреса, ИмяЭлемента, СоответствиеСокращений, НаименованиеВключаетСокращение, Уровень)
	
	НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементаАдреса);
	Результат.Вставить(ИмяЭлемента, ?(НаименованиеВключаетСокращение, ЭлементаАдреса, НаименованиеСокращение.Наименование));
	СоответствиеСокращений.Вставить(Уровень, НаименованиеСокращение.Сокращение);
	
КонецПроцедуры

// Возвращает ОКТОМ в правильном формате 8 или 11 символов.
//
// Параметры:
//  ОКТМО - Строка, Число - Код ОКТМО.
// 
// Возвращаемое значение:
//  Строка - Код ОКТМО.
//
Функция ОКТМО(ОКТМО) Экспорт
	
	ОКТМОСтрока = Формат(ОКТМО, "ЧГ=0");
	
	Если СтрДлина(ОКТМОСтрока) < 8 Тогда
		Возврат Формат(ОКТМО, "ЧЦ=8; ЧВН=; ЧГ=0");
	ИначеЕсли СтрДлина(ОКТМОСтрока) = 10 Тогда
		Возврат Формат(ОКТМО, "ЧЦ=11; ЧВН=; ЧГ=0");
	КонецЕсли;
	
	Возврат ОКТМОСтрока;
	
КонецФункции

Процедура ОпределитьФорматКодов(Результат, АдресРФ)
	Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
		Если ЗначениеЗаполнено(АдресРФ.ОКТМО) Тогда
			Результат.ДополнительныеКоды.ОКТМО = ОКТМО(АдресРФ.ОКТМО);
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресРФ.ОКАТО) Тогда
			Результат.ДополнительныеКоды.ОКАТО = Формат(АдресРФ.ОКАТО, "ЧГ=0");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьАдресВXDTO(АдресРФ, АдресПоУровням)
	
	ТаблицаЗданийПомещений = Новый ТаблицаЗначений;
	ТаблицаЗданийПомещений.Колонки.Добавить("Тип");
	ТаблицаЗданийПомещений.Колонки.Добавить("Значение");

	Для каждого ЭлементАдреса Из АдресПоУровням Цикл
		// XPath
		Если ЭлементАдреса.Уровень = 1 Тогда
			Путь = "СубъектРФ";
		ИначеЕсли ЭлементАдреса.Уровень = 2 Тогда
			Путь = "Округ";
		ИначеЕсли ЭлементАдреса.Уровень = 3 Тогда
			Путь = "СвРайМО/Район";
		ИначеЕсли ЭлементАдреса.Уровень = 4 Тогда
			Путь = "Город";
		ИначеЕсли ЭлементАдреса.Уровень = 5 Тогда
			Путь = "ВнутригРайон";
		ИначеЕсли ЭлементАдреса.Уровень = 6 Тогда
			Путь = "НаселПункт";
		ИначеЕсли ЭлементАдреса.Уровень = 7 Тогда
			Путь = "Улица";
		ИначеЕсли ЭлементАдреса.Уровень = 90 Тогда
			ДобавитьДополнительныеЭлементыАдреса(АдресРФ, ЭлементАдреса.Значение, 90);
		ИначеЕсли ЭлементАдреса.Уровень = 91 Тогда
			ДобавитьДополнительныеЭлементыАдреса(АдресРФ, ЭлементАдреса.Значение, 91);
		ИначеЕсли ЭлементАдреса.Уровень = -3 Тогда
			Продолжить;
		ИначеЕсли ЭлементАдреса.Уровень = -1 Тогда
			ПочтовыйИндексАдреса(АдресРФ, ЭлементАдреса.Наименование);
		Иначе
			// Проверка на квартиру или здание.
			Тип = СокрЛП(СтрЗаменить(ЭлементАдреса.Наименование, "№", ""));
			Если РаботаСАдресамиКлиентСервер.КодСериализацииОбъектаАдресации(Тип) <> Неопределено Тогда
				 // Вставляем в начало, так как порядок результата запроса у нас обратный.
				НоваяСтрока = ТаблицаЗданийПомещений.Вставить(0);
				НоваяСтрока.Значение = СокрЛП(СтрЗаменить(ЭлементАдреса.Сокращение, "№", ""));
				НоваяСтрока.Тип      = Тип;
				ЭлементАдреса.Уровень = -3;
			КонецЕсли;

			Продолжить;
		КонецЕсли;
		
		Если ЭлементАдреса.Уровень > 0 И ЭлементАдреса.Уровень < 90 Тогда
			УстановитьСвойствоПоXPath(АдресРФ, Путь, ЭлементАдреса.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗданияИПомещения = Новый Структура("Здания, Помещения", ТаблицаЗданийПомещений, ТаблицаЗданийПомещений);
	ЗданияИПомещенияАдреса(АдресРФ, ЗданияИПомещения);
	
КонецПроцедуры

Функция ЧастиАдресаТаблицей(Знач Текст)
	
	ТипСтрока = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(128));
	ТипЧисло  = Новый ОписаниеТипов("Число");
	
	Результат = Новый ТаблицаЗначений;
	Колонки = Результат.Колонки;
	Колонки.Добавить("Уровень", ТипЧисло);
	Колонки.Добавить("Позиция", ТипЧисло);
	Колонки.Добавить("Значение", ТипСтрока);
	Колонки.Добавить("Наименование", ТипСтрока);
	Колонки.Добавить("Сокращение", ТипСтрока);
	Колонки.Добавить("Начало", ТипЧисло);
	Колонки.Добавить("Длина", ТипЧисло);
	Колонки.Добавить("Идентификатор", ТипСтрока);
	
	Номер = 1;
	Для Каждого Часть Из СловаТекстаТаблицей(Текст, "," + Символы.ПС) Цикл
		Значение = СокрЛП(Часть.Значение);
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = Результат.Добавить();
		
		Строка.Уровень = 0;
		Строка.Позиция  = Номер;
		Номер = Номер + 1;
		
		Строка.Начало = Часть.Начало;
		Строка.Длина  = Часть.Длина;
		
		Позиция = СтрДлина(Значение);
		Пока Позиция > 0 Цикл
			Символ = Сред(Значение, Позиция, 1);
			Если ПустаяСтрока(Символ) Тогда
				Строка.Наименование = СокрЛП(Лев(Значение, Позиция-1));
				Прервать;
			КонецЕсли;
			Строка.Сокращение = Символ + Строка.Сокращение;
			Позиция = Позиция - 1;
		КонецЦикла;
		
		Если ПустаяСтрока(Строка.Наименование) Тогда
			Строка.Наименование = СокрЛП(Строка.Сокращение);
			Строка.Сокращение   = "";
		КонецЕсли;
		Строка.Значение = Строка.Наименование + " " + Строка.Сокращение; // Значение;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СловаТекстаТаблицей(Знач Текст, Знач Разделители = Неопределено)
	
	// Удаление из текста спец. символов "точек", "номеров".
	Текст = СтрЗаменить(Текст, "№", "");
	
	НачалоСлова = 0;
	Состояние   = 0;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	
	Результат = Новый ТаблицаЗначений;
	Колонки = Результат.Колонки;
	Колонки.Добавить("Значение", ТипСтрока);
	Колонки.Добавить("Начало",   ТипЧисло);
	Колонки.Добавить("Длина",    ТипЧисло);
	
	Для Позиция = 1 По СтрДлина(Текст) Цикл
		ТекущийСимвол = Сред(Текст, Позиция, 1);
		ЭтоРазделитель = ?(Разделители = Неопределено, ПустаяСтрока(ТекущийСимвол), СтрНайти(Разделители, ТекущийСимвол) > 0);
		
		Если Состояние = 0 И (Не ЭтоРазделитель) Тогда
			НачалоСлова = Позиция;
			Состояние   = 1;
		ИначеЕсли Состояние = 1 И ЭтоРазделитель Тогда
			Строка = Результат.Добавить();
			Строка.Начало = НачалоСлова;
			Строка.Длина  = Позиция-НачалоСлова;
			Строка.Значение = Сред(Текст, Строка.Начало, Строка.Длина);
			Состояние = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если Состояние = 1 Тогда
		Строка = Результат.Добавить();
		Строка.Начало = НачалоСлова;
		Строка.Длина  = Позиция-НачалоСлова;
		Строка.Значение = Сред(Текст, Строка.Начало, Строка.Длина)
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция УровниАдресныхОбъектов(ТипАдресногоОбъекта = "Полный")
	Уровни = Новый Массив;
	Если ТипАдресногоОбъекта = "Улица" Тогда
		Уровни.Добавить(7);
		Уровни.Добавить(90);
		Уровни.Добавить(91);
	ИначеЕсли ТипАдресногоОбъекта = "НаселенныйПункт" Тогда
		Уровни.Добавить(1);
		Уровни.Добавить(2);
		Уровни.Добавить(3);
		Уровни.Добавить(4);
		Уровни.Добавить(5);
		Уровни.Добавить(6);
	Иначе
		Уровни.Добавить(1);
		Уровни.Добавить(2);
		Уровни.Добавить(3);
		Уровни.Добавить(4);
		Уровни.Добавить(5);
		Уровни.Добавить(6);
		Уровни.Добавить(7);
		Уровни.Добавить(90);
		Уровни.Добавить(91);
	КонецЕсли;
	
	Возврат Уровни;
КонецФункции

// Установка глубокого свойства объекта.
Процедура УстановитьСвойствоПоXPath(ОбъектXTDO, XPath, Значение)
	
	// Переносов строки в XPath не ожидаем.
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		ОбъектXTDO.Установить(СтрокаСвойств, Значение);
		Возврат;
	ИначеЕсли ЧислоСвойств < 1 Тогда
		Возврат;
	КонецЕсли;
		
	РодительскийОбъект = Неопределено;
	ТекущийОбъект      = ОбъектXTDO;
	Для Индекс = 1 По ЧислоСвойств Цикл
		
		ТекущееИмя = СтрПолучитьСтроку(СтрокаСвойств, Индекс);
		Если ТекущийОбъект.Установлено(ТекущееИмя) Тогда
			РодительскийОбъект = ТекущийОбъект;
			ТекущийОбъект = ТекущийОбъект.ПолучитьXDTO(ТекущееИмя);
		Иначе
			НовыйТип = ТекущийОбъект.Свойства().Получить(ТекущееИмя).Тип;
			ТипТипа = ТипЗнч(НовыйТип);
			Если ТипТипа = Тип("ТипОбъектаXDTO") Тогда
				НовыйОбъект = ФабрикаXDTO.Создать(НовыйТип);
				ТекущийОбъект.Установить(ТекущееИмя, НовыйОбъект);
				РодительскийОбъект = ТекущийОбъект;
				ТекущийОбъект = НовыйОбъект; 
			ИначеЕсли ТипТипа = Тип("ТипЗначенияXDTO") Тогда
				// Непосредственное значение
				ТекущийОбъект.Установить(ТекущееИмя, Значение);
				РодительскийОбъект = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РодительскийОбъект <> Неопределено Тогда
		РодительскийОбъект.Установить(ТекущееИмя, Значение);
	КонецЕсли;
	
КонецПроцедуры

// Получение глубокого свойства объекта.
//
Функция ПолучитьXDTOРеквизитОбъекта(ОбъектXTDO, XPath) Экспорт
	
	// Переносов строки в XPath не ожидаем.
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		Результат = ОбъектXTDO.Получить(СтрокаСвойств);
		Если ТипЗнч(Результат) = Тип("ОбъектXDTO") Тогда 
			Возврат Результат.Значение;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Результат = ?(ЧислоСвойств = 0, Неопределено, ОбъектXTDO);
	Для Индекс = 1 По ЧислоСвойств Цикл
		Результат = Результат.Получить(СтрПолучитьСтроку(СтрокаСвойств, Индекс));
		Если Результат = Неопределено Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Устанавливает в XDTO адресе значение по XPath.
//
Процедура УстановитьXDTOРеквизитОбъекта(ОбъектXDTO, ПутьXPath, Значение) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Части XPath
	ЧастиПути  = СтрЗаменить(ПутьXPath, "/", Символы.ПС);
	ЧастейПути = СтрЧислоСтрок(ЧастиПути);
	
	ВедущийОбъект = ОбъектXDTO;
	Объект        = ОбъектXDTO;
	
	Для Позиция = 1 По ЧастейПути Цикл
		ЧастьПути = СтрПолучитьСтроку(ЧастиПути, Позиция);
		Если ЧастейПути = 1 Тогда
			Прервать;
		КонецЕсли;
		
		Свойство = Объект.Свойства().Получить(ЧастьПути);
		Если Не Объект.Установлено(Свойство) Тогда
			Объект.Установить(Свойство, ФабрикаXDTO.Создать(Свойство.Тип));
		КонецЕсли;
		ВедущийОбъект = Объект;
		Объект        = Объект[ЧастьПути];
	КонецЦикла;
	
	Если Объект <> Неопределено Тогда
		
		Если СтрНайти(ЧастьПути, "ДопАдрЭл") = 0 Тогда
			Объект[ЧастьПути] = Значение;
		Иначе
			КодПутьXPath = Сред(ЧастьПути, 20, 8);
			ЗначениеПоля = Объект.ДопАдрЭл.Добавить(ФабрикаXDTO.Создать(Объект.ДопАдрЭл.ВладеющееСвойство.Тип));
			ЗначениеПоля.ТипАдрЭл = КодПутьXPath;
			ЗначениеПоля.Значение = Значение;
		КонецЕсли;
		
	ИначеЕсли ВедущийОбъект <> Неопределено Тогда
		ВедущийОбъект[ЧастьПути] =  Значение;
		
	КонецЕсли;
	
КонецПроцедуры

//======================================================================================================================
// Проверка адреса

// Возвращает перечень ошибок для адреса.
//
// Параметры:
//     XDTOАдрес         - ОбъектXDTO, СписокЗначений, Строка - описание адреса.
//     ВидИнформации     - СправочникСсылка.ВидыКонтактнойИнформации, Структура - ссылка на соответствующий вид
//                         контактной информации.
//     РезультатГруппами - Булево - если указана Истина, то будет возвращен массив групп ошибок, иначе - список
//                                  значений.
//
// Возвращаемое значение:
//     СписокЗначений - если параметр РезультатГруппами равен Ложь. Внутри представление - текст ошибки, значение -
//                      XPath ошибочного поля.
//     Массив         - если параметр РезультатГруппами равен Истина. Содержит структуры с полями:
//                         ** ТипОшибки - Строка - наименование группы (типа) ошибки. Возможные значения:
//                               "ПредставлениеНеСоответствуетНаборуПолей"
//                               "НеЗаполненыОбязательныеПоля"
//                               "НеУказаныСокращенияПолей"
//                               "НедопустимыеСимволыПолей"
//                               "НеСоответствуетДлинаПолей"
//                               "ОшибкиПоКлассификатору".
//                         ** Сообщение - Строка - подробный текст ошибки.
//                         ** Поля      - Массив - содержит структуры описания ошибочных полей. Каждая структура имеет
//                                                 реквизиты:
//                               *** ИмяПоля   - Строка - внутренний идентификатор ошибочного элемента адреса.
//                               *** Сообщение - Строка - подробный текст ошибки для этого поля.
//
Функция ОшибкиЗаполненияАдресаXDTO(XDTOАдрес, ВидИнформации, РезультатГруппами = Ложь) Экспорт
	
	Если ТипЗнч(XDTOАдрес) = Тип("ОбъектXDTO") Тогда
		АдресРФ = XDTOАдрес.Состав;
	Иначе
		XTDOКонтактная = АдресXMLВXDTO(XDTOАдрес);
		Адрес = XTDOКонтактная.Состав;
		АдресРФ = ?(Адрес = Неопределено, Неопределено, Адрес.Состав);
	КонецЕсли;
	
	// Флаги проверки
	Если ТипЗнч(ВидИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		ФлагиПроверки = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(ВидИнформации);
	Иначе
		ФлагиПроверки = ВидИнформации;
	КонецЕсли;
	
	Если ТипЗнч(АдресРФ) <> Тип("ОбъектXDTO") Или АдресРФ.Тип() <> ФабрикаXDTO.Тип(РаботаСАдресами.ПространствоИмен(), "АдресРФ") Тогда
		// Адрес за пределами РФ
		Результат = ?(РезультатГруппами, Новый Массив, Новый СписокЗначений);
		
		Если ФлагиПроверки.ТолькоНациональныйАдрес Тогда
			ТекстОшибки = НСтр("ru = 'Адрес должен быть только российским.'");
			Если РезультатГруппами Тогда
				Результат.Добавить(Новый Структура("Поля, ТипОшибки, Сообщение", Новый Массив,
					"НеЗаполненыОбязательныеПоля", ТекстОшибки));
			Иначе
				Результат.Добавить("/", ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	// Отдельно проверяем пустой адрес, если необходимо его заполнение.
	Если Не УправлениеКонтактнойИнформациейСлужебный.XDTOКонтактнаяИнформацияЗаполнена(АдресРФ) Тогда
		// Адрес пуст
		Если ФлагиПроверки.ОбязательноеЗаполнение Тогда
			// Но должен быть заполнен
			ТекстОшибки = НСтр("ru = 'Адрес не заполнен.'");
			
			Если РезультатГруппами Тогда
				Результат = Новый Массив;
				Результат.Добавить(Новый Структура("Поля, ТипОшибки, Сообщение", Новый Массив,
					"НеЗаполненыОбязательныеПоля", ТекстОшибки));
			Иначе
				Результат = Новый СписокЗначений;
				Результат.Добавить("/", ТекстОшибки);
			КонецЕсли;
			
			Возврат Результат
		КонецЕсли;
		
		// Адрес пуст и не должен быть заполнен - считаем его корректным.
		Возврат ?(РезультатГруппами, Новый Массив, Новый СписокЗначений);
	КонецЕсли;
	
	ВсеОшибки = ОбщиеГруппыОшибокЗаполненияАдреса(АдресРФ, ФлагиПроверки);
	ПроверятьКлассификатор = Истина;
	
	Для Каждого Группа Из ВсеОшибки Цикл
		Если СтрНайти("НеУказаныСокращенияПолей, НедопустимыеСимволыПолей", Группа.ТипОшибки) > 0 Тогда
			// Некорректные данные в полях, проверять их по классификатору нет смысла.
			ПроверятьКлассификатор = Ложь;
			Прервать;
		КонецЕсли
	КонецЦикла;
	
	ОшибкиКлассификатора = Новый СписокЗначений;
	Если ПроверятьКлассификатор И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		ЗаполнитьОшибкиАдресаПоКлассификатору(АдресРФ, ФлагиПроверки, ОшибкиКлассификатора);
	КонецЕсли;
		
	Если РезультатГруппами Тогда
		НаименованиеГруппыОшибки = "ОшибкиПоКлассификатору";
		КоличествоОшибок = ОшибкиКлассификатора.Количество();
		
		Если КоличествоОшибок = 1 И ОшибкиКлассификатора[0].Значение <> Неопределено
			И ОшибкиКлассификатора[0].Значение.ПутьXPath = Неопределено Тогда
			ВсеОшибки.Добавить(ГруппаОшибокАдреса(НаименованиеГруппыОшибки, ОшибкиКлассификатора[0].Представление));
			
		ИначеЕсли КоличествоОшибок > 0 Тогда
			// Подробное описание ошибок
			ВсеОшибки.Добавить(ГруппаОшибокАдреса(НаименованиеГруппыОшибки,
				НСтр("ru = 'Части адреса не соответствуют адресному классификатору:'")));
				
			ГруппаОшибокКлассификатора = ВсеОшибки[ВсеОшибки.ВГраница()];
			
			СписокСущностей = "";
			Для Каждого Элемент Из ОшибкиКлассификатора Цикл
				ЭлементОшибки = Элемент.Значение;
				Если ЭлементОшибки = Неопределено Тогда
					// Абстрактная ошибка
					ДобавитьОшибкуЗаполненияАдреса(ГруппаОшибокКлассификатора, "", Элемент.Представление);
				Иначе
					ДобавитьОшибкуЗаполненияАдреса(ГруппаОшибокКлассификатора, ЭлементОшибки.ПутьXPath, Элемент.Представление);
					СписокСущностей = СписокСущностей + ", " + ЭлементОшибки.СущностьПоля;
				КонецЕсли;
			КонецЦикла;
			
			ГруппаОшибокКлассификатора.Сообщение = ГруппаОшибокКлассификатора.Сообщение + Сред(СписокСущностей, 2);
		КонецЕсли;
		
		Возврат ВсеОшибки;
	КонецЕсли;
	
	// Объединяем все в список
	Результат = Новый СписокЗначений;
	Для Каждого Группа Из ВсеОшибки Цикл
		Для Каждого Поле Из Группа.Поля Цикл
			Результат.Добавить(Поле.ИмяПоля, Поле.Сообщение, Истина);
		КонецЦикла;
	КонецЦикла;
	Для Каждого ЭлементСписка Из ОшибкиКлассификатора Цикл
		Результат.Добавить(ЭлементСписка.Значение.ПутьXPath, ЭлементСписка.Представление, ЭлементСписка.Значение.АдресПроверен);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Общие проверки на корректность адреса.
//
//  Параметры:
//      ДанныеАдреса  - Строка, СписокЗначений - XML, XDTO с данными адреса РФ.
//      ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - ссылка на соответствующий вид контактной информации.
//
// Возвращаемое значение:
//      Массив - содержит структуры с полями:
//         * ТипОшибки - Строка - идентификатор группы ошибки. Может принимать значение:
//              "ПредставлениеНеСоответствуетНаборуПолей",
//              "НеЗаполненыОбязательныеПоля"
//              "НеУказаныСокращенияПолей"
//              "НедопустимыеСимволыПолей"
//              "НеСоответствуетДлинаПолей".
//         * Сообщение - Строка - Подробный текст ошибки.
//         * Поля - Массив структур с полями:
//             ** ИмяПоля - внутренний идентификатор ошибочного поля.
//             ** Сообщение - подробный текст ошибки для поля.
//
Функция ОбщиеГруппыОшибокЗаполненияАдреса(Знач ДанныеАдреса, Знач ВидИнформации)
	Результат = Новый Массив;
	
	Если ТипЗнч(ДанныеАдреса) = Тип("ОбъектXDTO") Тогда
		АдресРФ = ДанныеАдреса;
		
	Иначе
		XTDOКонтактная = АдресXMLВXDTO(ДанныеАдреса);
		Адрес = XTDOКонтактная.Состав;
		Если Не ЭтоНациональныйАдрес(Адрес) Тогда
			Возврат Результат;
		КонецЕсли;
		АдресРФ = Адрес.Состав;
		
		// С) совпадение представления и набора данных.
		Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеАдреса(АдресРФ, ВидИнформации);
		Если XTDOКонтактная.Представление <> Представление Тогда
			Результат.Добавить(ГруппаОшибокАдреса("ПредставлениеНеСоответствуетНаборуПолей",
				НСтр("ru = 'Адрес не соответствует значениям в наборе полей.'")));
			ДобавитьОшибкуЗаполненияАдреса(Результат[0], "",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Представление адреса для вида контактной информации ""%1"" отличается от данных в адресе.'"),
				Строка(ВидИнформации.Наименование)));
		КонецЕсли;
	КонецЕсли;
	
	НеЗаполненыОбязательныеПоля = ГруппаОшибокАдреса("НеЗаполненыОбязательныеПоля",
		НСтр("ru = 'Не заполнены обязательные поля:'"));
	Результат.Добавить(НеЗаполненыОбязательныеПоля);
	
	НеУказаныСокращенияПолей = ГруппаОшибокАдреса("НеУказаныСокращенияПолей",
		НСтр("ru = 'Не указано сокращение для полей:'"));
	Результат.Добавить(НеУказаныСокращенияПолей);
	
	НедопустимыеСимволыПолей = ГруппаОшибокАдреса("НедопустимыеСимволыПолей",
		НСтр("ru = 'Найдены недопустимые символы в полях:'"));
	Результат.Добавить(НедопустимыеСимволыПолей);
	
	НеСоответствуетДлинаПолей = ГруппаОшибокАдреса("НеСоответствуетДлинаПолей",
		НСтр("ru = 'Не соответствует установленной длина полей:'"));
	Результат.Добавить(НеСоответствуетДлинаПолей);
	
	// 2) Индекс, Регион, Дом должны быть заполнены.
	Индекс = ПочтовыйИндексАдреса(АдресРФ);
	Если ПустаяСтрока(Индекс) Тогда
		ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, РаботаСАдресамиКлиентСервер.XPathПочтовогоИндекса(),
			НСтр("ru = 'Не указан почтовый индекс.'"), "Индекс");
	КонецЕсли;
	
	Регион = АдресРФ.СубъектРФ;
	Если ПустаяСтрока(Регион) Тогда
		ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "СубъектРФ",
			НСтр("ru = 'Не указан регион.'"), "Регион");
	КонецЕсли;
	
	ЗданияПомещения = ЗданияИПомещенияАдреса(АдресРФ);
	
	// 3) Регион, Район, Город, НаселенныйПункт, Улица должны:
	//      - иметь сокращение.
	//      - не длинней 50 символов.
	//      - только кириллица.
	
	ДопустимоКромеКириллицы = "/,-. 0123456789_N";
	
	// Регион
	Если Не ПустаяСтрока(Регион) Тогда
		Поле = "СубъектРФ";
		Если ПустаяСтрока(УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(Регион)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, "СубъектРФ",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указано сокращение в названии региона ""%1"".'"), Регион), НСтр("ru = 'Регион'"));
		КонецЕсли;
		Если СтрДлина(Регион) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Название региона ""%1"" должно быть короче 50 символов.'"),Регион), НСтр("ru = 'Регион'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Регион, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В названии региона ""%1"" есть не кириллические символы.'"), Регион), НСтр("ru = 'Регион'"));
		КонецЕсли
	КонецЕсли;
	
	// Район
	Район = РайонАдреса(АдресРФ);
	Если Не ПустаяСтрока(Район) Тогда
		Поле = РаботаСАдресамиКлиентСервер.XPathРайона();
		Если ПустаяСтрока(УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(Район)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указано сокращение в названии района ""%1"".'"), Район), НСтр("ru = 'Район'"));
		КонецЕсли;
		Если СтрДлина(Район) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Название района ""%1"" должно быть короче 50 символов.'"), Район), НСтр("ru = 'Район'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Район, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В названии района ""%1"" есть не кириллические символы.'"), Район), НСтр("ru = 'Район'"));
		КонецЕсли;
	КонецЕсли;
	
	// Город
	Город = АдресРФ.Город;
	Если Не ПустаяСтрока(Город) Тогда
		Поле = "Город";
		Если ПустаяСтрока(УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(Город)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указано сокращение в названии города ""%1"".'"), Город), НСтр("ru = 'Город'"));
		КонецЕсли;
		Если СтрДлина(Город) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Название города ""%1"" должно быть короче 50 символов.'"), Город), НСтр("ru = 'Город'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Город, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В названии города ""%1"" есть не кириллические символы.'"), Город), НСтр("ru = 'Город'"));
		КонецЕсли;
	КонецЕсли;
	
	// Населенный пункт
	НаселенныйПункт = АдресРФ.НаселПункт;
	Если Не ПустаяСтрока(НаселенныйПункт) Тогда
		Поле = "НаселПункт";
		Если ПустаяСтрока(УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(НаселенныйПункт)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указано сокращение в названии населенного пункта ""%1"".'"), НаселенныйПункт),
					НСтр("ru = 'Населенный пункт'"));
		КонецЕсли;
		Если СтрДлина(НаселенныйПункт) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Название населенного пункта ""%1"" должно быть короче 50 символов.'"), НаселенныйПункт),
				НСтр("ru = 'Населенный пункт'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(НаселенныйПункт, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В названии населенного пункта ""%1"" есть не кириллические символы.'"), НаселенныйПункт),
					НСтр("ru = 'Населенный пункт'"));
		КонецЕсли;
	КонецЕсли;
	
	// Улица
	Улица = АдресРФ.Улица;
	Если Не ПустаяСтрока(Улица) Тогда
		Поле = "Улица";
		Если ПустаяСтрока(УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(Улица)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указано сокращение в названии улицы ""%1"".'"), Улица), НСтр("ru = 'Улица'"));
		КонецЕсли;
		Если СтрДлина(Район) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Название улицы ""%1"" должно быть короче 50 символов.'"), Улица), НСтр("ru = 'Улица'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Улица, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В названии улицы ""%1"" есть не кириллические символы.'"), Улица), НСтр("ru = 'Улица'"));
		КонецЕсли;
	КонецЕсли;
	
	// Дополнительный элемент
	ДополнительныйЭлемент = НайтиДополнительныйЭлементАдреса(АдресРФ).Значение;
	Если ЗначениеЗаполнено(ДополнительныйЭлемент) Тогда
		Поле = "Улица";
		Если ПустаяСтрока(УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(ДополнительныйЭлемент)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указано сокращение у дополнительного элемента ""%1"".'"), ДополнительныйЭлемент),
				НСтр("ru = 'Улица'"));
		КонецЕсли;
		Если СтрДлина(Район) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Название дополнительного элемента ""%1"" должно быть короче 50 символов.'"), ДополнительныйЭлемент),
				НСтр("ru = 'ДополнительныйЭлемент'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(ДополнительныйЭлемент, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В названии дополнительного элемента ""%1"" есть не кириллические символы.'"), ДополнительныйЭлемент),
				НСтр("ru = 'ДополнительныйЭлемент'"));
		КонецЕсли;
	КонецЕсли;
	
	// 4) Индекс - если есть, то 6 цифр.
	Если Не ПустаяСтрока(Индекс) Тогда
		Поле = РаботаСАдресамиКлиентСервер.XPathПочтовогоИндекса();
		Если СтрДлина(Индекс) <> 6 Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Индекс) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				НСтр("ru = 'Почтовый индекс должен состоять из 6 цифр.'"),
				НСтр("ru = 'Индекс'"));
		КонецЕсли;
	КонецЕсли;
	
	// 5) Дом, Корпус, Квартира не длинней 12 символов.
	Для Каждого ДанныеЗдания Из ЗданияПомещения.Здания Цикл
		Если СтрДлина(ДанныеЗдания.Значение) > 12 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, ДанныеЗдания.ПутьXPath,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Значение поля ""%1"" должно быть короче 12 символов.'"), ДанныеЗдания.Тип), ДанныеЗдания.Тип);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ДанныеПомещения Из ЗданияПомещения.Помещения Цикл
		Если СтрДлина(ДанныеПомещения.Значение) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, ДанныеПомещения.ПутьXPath,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Значение поля ""%1"" должно быть короче 50 символов.'"), ДанныеПомещения.Тип), ДанныеПомещения.Тип);
		КонецЕсли;
	КонецЦикла;
	
	// 6) Поля Город и НаселенныйПункт могут быть одновременно пустые только в регионе - городе ФЗ.
	Если ПустаяСтрока(Город) И ПустаяСтрока(НаселенныйПункт) И ПустаяСтрока(Район) Тогда
		Если НазванияГородовФедеральногоЗначения().Найти(ВРег(Регион)) = Неопределено Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "Город",
				НСтр("ru = 'Город может быть не указан только в регионе - городе федерального значения.'"),
				НСтр("ru = 'Город'"));
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "НаселПункт",
				НСтр("ru = 'Населенный пункт может быть не указан только в регионе - городе федерального значения.'"),
				НСтр("ru = 'Населенный пункт'"));
		КонецЕсли;
	КонецЕсли;
	
	// 7) Улица не может быть пустой если НаселенныйПункт пустой.
	Если Не ИсключатьПроверкуУлицыВАдресе(АдресРФ) Тогда
		
		Если ПустаяСтрока(Город) И ПустаяСтрока(НаселенныйПункт) И ПустаяСтрока(Улица) И НЕ ЗначениеЗаполнено(ДополнительныйЭлемент) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "Улица",
				НСтр("ru = 'Город или населенный пункт должен содержать название улицы.'"), 
				НСтр("ru = 'Улица'"));
		КонецЕсли;
		
	КонецЕсли;
	
	// Все. Убираем пустые результаты, корректируем сообщение группы.
	Для Индекс = 1-Результат.Количество() По 0 Цикл
		Группа = Результат[-Индекс];
		Поля = Группа.Поля;
		СписокСущностей = "";
		Для ИндексПоля = 1-Поля.Количество() По 0 Цикл
			Поле = Поля[-ИндексПоля];
			Если ПустаяСтрока(Поле.Сообщение) Тогда
				Поля.Удалить(-ИндексПоля);
			Иначе
				СписокСущностей = ", " + Поле.СущностьПоля + СписокСущностей;
				Поле.Удалить("СущностьПоля");
			КонецЕсли;
		КонецЦикла;
		Если Поля.Количество() = 0 Тогда
			Результат.Удалить(-Индекс);
		ИначеЕсли Не ПустаяСтрока(СписокСущностей) Тогда
			Группа.Сообщение = Группа.Сообщение + Сред(СписокСущностей, 2);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ГруппаОшибокАдреса(ТипОшибки, Сообщение)
	Возврат Новый Структура("ТипОшибки, Сообщение, Поля", ТипОшибки, Сообщение, Новый Массив);
КонецФункции

Процедура ДобавитьОшибкуЗаполненияАдреса(Группа, ИмяПоля = "", Сообщение = "", СущностьПоля = "")
	Группа.Поля.Добавить(Новый Структура("ИмяПоля, Сообщение, СущностьПоля", ИмяПоля, Сообщение, СущностьПоля));
КонецПроцедуры

Процедура ЗаполнитьОшибкиАдресаПоКлассификатору(XDTOАдресРФ, ФлагиПроверки, Результат)
	
	Адреса = Новый Массив;
	
	Если ФлагиПроверки.ПроверятьПоФИАС Тогда
		Адреса.Добавить( Новый Структура("Адрес, ФорматАдреса", XDTOАдресРФ, "ФИАС") );
	ИначеЕсли ФлагиПроверки.ПроверятьКорректность Тогда
		Адреса.Добавить( Новый Структура("Адрес, ФорматАдреса", XDTOАдресРФ, "КЛАДР") );
	КонецЕсли;
	
	Если Адреса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	РезультатыАнализа = МодульАдресныйКлассификаторСлужебный.РезультатПроверкиАдресовПоКлассификатору(Адреса);
	Если РезультатыАнализа.Отказ Тогда
		Результат.Добавить( Новый Структура("ПутьXPath, СущностьПоля, АдресПроверен", "/",, Ложь), РезультатыАнализа.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	// Только уникальные ошибки - мы могли проверить адрес два раза.
	Обработанные = Новый Соответствие;
	Для Каждого РезультатПроверки Из РезультатыАнализа.Данные Цикл
			Для Каждого ОшибкаАдреса Из РезультатПроверки.Ошибки Цикл
				Ключ = ОшибкаАдреса.Ключ;
				Если Обработанные[Ключ] = Неопределено Тогда
					Результат.Добавить(Новый Структура("ПутьXPath, СущностьПоля, АдресПроверен", Ключ,, РезультатПроверки.АдресПроверен), 
						СокрЛП(ОшибкаАдреса.Текст + Символы.ПС + ОшибкаАдреса.Подсказка));
					Обработанные[Ключ] = Истина;
				КонецЕсли;
			КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Локальные исключения при проверке адреса.
//
Функция ИсключатьПроверкуУлицыВАдресе(Знач АдресРФ)
	Результат = Ложь;
	
	// В Зеленограде улицы не проверяем.
	Если ВРег(СокрЛП(АдресРФ.СубъектРФ)) = НСтр("ru = 'МОСКВА Г'") И ВРег(СокрЛП(АдресРФ.Город)) = НСтр("ru = 'ЗЕЛЕНОГРАД Г'") Тогда
		Результат = Истина;
	КонецЕсли;
	
	// Дополнительные элементы адреса могут быть без улиц.
	ДополнительныеЭлементы = ЗначениеДополнительныхЭлементов(АдресРФ);
	Если ЗначениеЗаполнено(ДополнительныеЭлементы.ДополнительныйЭлемент) Тогда
		Результат = Истина;
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

// Возвращает массив наименований регионов - городов федерального значения.
Функция НазванияГородовФедеральногоЗначения()
	
	Результат = Новый Массив;
	Результат.Добавить("МОСКВА Г");
	Результат.Добавить("САНКТ-ПЕТЕРБУРГ Г");
	Результат.Добавить("СЕВАСТОПОЛЬ Г");
	Результат.Добавить("БАЙКОНУР Г");
	
	Возврат Результат;
КонецФункции

Функция СтруктураОшибкиПоставщикаАдресногоКлассификатора(ИсходнаяСтруктура = Неопределено)
	
	Если ИсходнаяСтруктура = Неопределено Тогда
		ИсходнаяСтруктура = Новый Структура;
	КонецЕсли;
		
	ИсходнаяСтруктура.Вставить("Отказ", Ложь);
	ИсходнаяСтруктура.Вставить("ПодробноеПредставлениеОшибки");
	ИсходнаяСтруктура.Вставить("КраткоеПредставлениеОшибки");

	Возврат ИсходнаяСтруктура;
КонецФункции

Процедура ЗаполнитьСвойстваXDTOКонтактнойИнформацииДляРасширенныхАдресов(Знач Владелец, Знач Игнорируемые, Знач ПространствоИмен, Знач ТипВладельца) Экспорт
	
	Если ТипВладельца = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
		// Игнорируем список с пустыми значениями и возможно непустыми типами.
		Список = Владелец.ПолучитьСписок("ДопАдрЭл");
		Если Список <> Неопределено Тогда
			Для Каждого СвойствоСписка Из Список Цикл
				Если ПустаяСтрока(СвойствоСписка.Значение) Тогда
					Игнорируемые.Вставить(СвойствоСписка, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРасширенныеРеквизитыТабличнойЧастиДляАдреса(Знач Адрес, Знач СтрокаТабличнойЧасти) Экспорт
	
	АдресРФ = НациональныйАдрес(Адрес);
	Если АдресРФ <> Неопределено Тогда
		// Российский адрес
		СтрокаТабличнойЧасти.Регион = АдресРФ.СубъектРФ;
		СтрокаТабличнойЧасти.Город  = АдресРФ.Город;
	КонецЕсли;

КонецПроцедуры

//======================================================================================================================
// Обратная совместимость

// Возвращает поля контактной информации.
//
// Параметры:
//   XDTOКонтактнаяИнформация - ОбъектXDTO, Строка - контактная информация или строка XML.
//   СтарыйСоставПолей        - Булево - необязательный флаг того, что из состава полей будут исключены
//                                          поля, отсутствующие в версиях БСП младше 2.1.3.
//
// Возвращаемое значение:
//   Структура - данные. Содержит поля:
//     * Представление        - Строка - представление адреса.
//     * ЗначенияПолей        - СписокЗначений - значения. Состав значений для адреса:
//        ** Страна           - Строка - текстовое представление страны.
//        ** КодСтраны        - Строка - код страны по ОКСМ.
//        ** Индекс           - Строка - почтовый индекс (только для адресов РФ).
//        ** Регион           - Строка - текстовое представление региона РФ (только для адресов РФ).
//        ** КодРегиона       - Строка - код региона РФ (только для адресов РФ).
//        ** РегионСокращение - Строка - сокращение региона (если СтарыйСоставПолей = Ложь).
//        ** Район            - Строка - текстовое представление района (только для адресов РФ).
//        ** РайонСокращение  - Строка - сокращение района (если СтарыйСоставПолей = Ложь).
//        ** Город            - Строка - текстовое представление города (только для адресов РФ).
//        ** ГородСокращение  - Строка - сокращение города (только для адресов РФ).
//        ** НаселенныйПункт  - Строка - текстовое представление населенного пункта (только для адресов РФ).
//        ** НаселенныйПунктСокращение - сокращение населенного пункта (если СтарыйСоставПолей = Ложь).
//        ** ТипДома          - Строка - см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ().
//        ** Дом              - Строка - текстовое представление дома (только для адресов РФ).
//        ** ТипКорпуса       - Строка - см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ().
//        ** Корпус           - Строка - текстовое представление корпуса (только для адресов РФ).
//        ** ТипКвартиры      - Строка - см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ().
//        ** Квартира         - Строка - текстовое представление квартиры (только для адресов РФ).
//       Состав значений для телефона:
//        ** КодСтраны        - Строка - код страны. Например, +7.
//        ** КодГорода        - Строка - код города. Например, 495.
//        ** НомерТелефона    - Строка - номер телефона.
//        ** Добавочный       - Строка - добавочный номер телефона.
//
Функция КонтактнаяИнформацияВСтаруюСтруктуру(XDTOКонтактнаяИнформация, СтарыйСоставПолей = Ложь) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XDTOКонтактнаяИнформация) Тогда
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(XDTOКонтактнаяИнформация);
	Иначе
		XDTOКонтактная = XDTOКонтактнаяИнформация
	КонецЕсли;
	
	Результат = Новый Структура("Представление, ЗначенияПолей", XDTOКонтактная.Представление, Новый СписокЗначений);
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Состав = XDTOКонтактная.Состав;
	
	Если Состав = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Тип = Состав.Тип();
	Если Тип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		Результат.ЗначенияПолей = АдресВСтарыйСписокПолей(Состав, Не СтарыйСоставПолей);
		Результат.ЗначенияПолей.Добавить(Результат.Представление, "Представление");
		
	ИначеЕсли Тип = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
		Результат.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.НомерТелефонаВСтарыйСписокПолей(Состав);
		Результат.ЗначенияПолей.Добавить(XDTOКонтактная.Комментарий, "Комментарий");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Преобразует адрес формата XDTO в старый список полей типа СписокЗначений.
//
// Параметры:
//     XDTOАдрес               - ОбъектXDTO, Строка - контактная информация или строка XML.
//     РасширенныйСоставПолей - Булево - необязательный флаг того, что состав полей будет сокращен для совместимости
//                                     с обменом БСП 2.1.2.
//
//  Возвращаемое значение:
//     СписокЗначений 
//
Функция АдресВСтарыйСписокПолей(XDTOАдрес, РасширенныйСоставПолей = Истина)
	Список = Новый СписокЗначений;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	XDTOТип = XDTOАдрес.Тип();
	Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		
		// Страна с кодом
		ДобавитьЗначение(Список, "Страна", XDTOАдрес.Страна);
		Если ПустаяСтрока(XDTOАдрес.Страна) Тогда
			КодСтраны = "";
		Иначе
			Страна = Справочники.СтраныМира.НайтиПоНаименованию(XDTOАдрес.Страна, Истина);
			КодСтраны = СокрЛП(Страна.Код);
		КонецЕсли;
		ДобавитьЗначение(Список, "КодСтраны", КодСтраны);
		
		Если Не ЭтоНациональныйАдрес(XDTOАдрес) Тогда
			Возврат Список;
		КонецЕсли;
		
		АдресРФ = XDTOАдрес.Состав;
		
	ИначеЕсли XDTOТип = ФабрикаXDTO.Тип(РаботаСАдресами.ПространствоИмен(), "АдресРФ") Тогда
		АдресРФ = XDTOАдрес;
		
	Иначе
		Возврат Список;
		
	КонецЕсли;
	
	ДобавитьЗначение(Список, "Индекс", ПочтовыйИндексАдреса(АдресРФ) );
	
	ДобавитьЗначение(Список, "Регион", АдресРФ.СубъектРФ);
	ДобавитьЗначение(Список, "КодРегиона", КодРегиона(АдресРФ.СубъектРФ) );
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "РегионСокращение", УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(АдресРФ.СубъектРФ));
	КонецЕсли;
	
	Район = РайонАдреса(АдресРФ);
	ДобавитьЗначение(Список, "Район", Район);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "РайонСокращение", УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(Район));
	КонецЕсли;
	
	ДобавитьЗначение(Список, "Город", АдресРФ.Город);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "ГородСокращение", УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(АдресРФ.Город));
	КонецЕсли;
	
	// преобразование ФИАС в КЛАДР
	НаселенныйПункт                 = АдресРФ.НаселПункт;
	Улица                           = АдресРФ.Улица;
	ДополнительныйЭлементАдреса     = НайтиДополнительныйЭлементАдреса(АдресРФ).Значение;
	ПодчиненныйЭлементЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ,
		РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(91));
	
	ЕстьУлица                           = ЗначениеЗаполнено(Улица);
	ЕстьДополнительныйЭлементАдреса     = ЗначениеЗаполнено(ДополнительныйЭлементАдреса);
	ЕстьПодчиненныйЭлементЭлементАдреса = ЗначениеЗаполнено(ПодчиненныйЭлементЭлементАдреса);
	
	Если ЕстьДополнительныйЭлементАдреса Тогда
		
		Если ЕстьПодчиненныйЭлементЭлементАдреса Тогда
			НаселенныйПункт = ДополнительныйЭлементАдреса;
			Улица = ПодчиненныйЭлементЭлементАдреса;
		Иначе
			Улица = ДополнительныйЭлементАдреса;
		КонецЕсли;
		
	ИначеЕсли ЕстьПодчиненныйЭлементЭлементАдреса Тогда
		Улица = ПодчиненныйЭлементЭлементАдреса;
	КонецЕсли;
	
	ДобавитьЗначение(Список, "НаселенныйПункт", НаселенныйПункт);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "НаселенныйПунктСокращение", УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(НаселенныйПункт));
	КонецЕсли;

	ДобавитьЗначение(Список, "Улица", Улица);
	
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "УлицаСокращение", УправлениеКонтактнойИнформациейКлиентСервер.Сокращение(Улица));
	КонецЕсли;
	
	// Дом и корпус
	ЗданияИПомещения = ЗданияИПомещенияАдреса(АдресРФ);
	
	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Здания, ВариантыДанныхДом(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
		ДобавитьЗначение(Список, "ТипДома", "");
		ДобавитьЗначение(Список, "Дом",     "");
	Иначе
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл
			ДобавитьЗначение(Список, "ТипДома", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
			ДобавитьЗначение(Список, "Дом",     СтрокаОбъекта.Значение, РасширенныйСоставПолей);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Здания, ВариантыДанныхСтроение(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
		ДобавитьЗначение(Список, "ТипКорпуса", "");
		ДобавитьЗначение(Список, "Корпус",     "");
	ИначеЕсли ПараметрыОбъекта.Количество() = 1 Тогда
		СтрокаОбъекта  = ПараметрыОбъекта[0];
		ДобавитьЗначение(Список, "ТипКорпуса", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
		ДобавитьЗначение(Список, "Корпус",     СтрокаОбъекта.Значение, РасширенныйСоставПолей);
	Иначе
		ТипКорпуса  = ПараметрыОбъекта[0].Тип;
		ЗначениеКорпуса = "";
		Разделитель = "";
		Сокращения = РаботаСАдресамиКлиентСервер.СокращенияОбъектовАдресацииАдресаРФ();
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл
			ИмяЗдания = ?(ЗначениеЗаполнено(Сокращения[СтрокаОбъекта.Тип]), Сокращения[СтрокаОбъекта.Тип], СтрокаОбъекта.Тип);
			ЗначениеКорпуса  = ЗначениеКорпуса  + Разделитель + ИмяЗдания + " " + СтрокаОбъекта.Значение;
			Разделитель = ", " ;
		КонецЦикла;
		ДобавитьЗначение(Список, "ТипКорпуса", ТипКорпуса,      РасширенныйСоставПолей);
		ДобавитьЗначение(Список, "Корпус",     ЗначениеКорпуса  , РасширенныйСоставПолей);
	КонецЕсли;
	
	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Помещения, ВариантыДанныхПомещение(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
		ДобавитьЗначение(Список, "ТипКвартиры", "");
		ДобавитьЗначение(Список, "Квартира",    "");
	ИначеЕсли ПараметрыОбъекта.Количество() = 1 Тогда
		СтрокаОбъекта  = ПараметрыОбъекта[0];
		ДобавитьЗначение(Список, "ТипКвартиры", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
		ДобавитьЗначение(Список, "Квартира",    СтрокаОбъекта.Значение, РасширенныйСоставПолей);
	Иначе
		ТипПомещения  = ПараметрыОбъекта[0].Тип;
		ЗначениеПомещения = "";
		Разделитель = "";
		Сокращения = РаботаСАдресамиКлиентСервер.СокращенияОбъектовАдресацииАдресаРФ();
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл
			ИмяПомещения = ?(ЗначениеЗаполнено(Сокращения[СтрокаОбъекта.Тип]), Сокращения[СтрокаОбъекта.Тип], СтрокаОбъекта.Тип);
			ЗначениеПомещения = ЗначениеПомещения + Разделитель + ИмяПомещения + " " + СтрокаОбъекта.Значение;
			Разделитель = ", " ;
		КонецЦикла;
		ДобавитьЗначение(Список, "ТипКвартиры", ТипПомещения,      РасширенныйСоставПолей);
		ДобавитьЗначение(Список, "Квартира",    ЗначениеПомещения, РасширенныйСоставПолей);
	КонецЕсли;
	
	Возврат Список;
КонецФункции

Процедура ДобавитьЗначение(Список, ИмяПоля, Значение, РазрешитьДубли = Ложь)
	
	Если Не РазрешитьДубли Тогда
		Для Каждого Элемент Из Список Цикл
			Если Элемент.Представление = ИмяПоля Тогда
				Элемент.Значение = Строка(Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Список.Добавить(Строка(Значение), ИмяПоля);
КонецПроцедуры

// Возвращает варианты типов домов (по признаку владения).
Функция ВариантыДанныхДом() Экспорт
	
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", 
		РаботаСАдресамиКлиентСервер.НаименованияОбъектовАдресацииПоТипу(1), Ложь);
		
КонецФункции

// Возвращает варианты типов домов (по признаку строения).
Функция ВариантыДанныхСтроение() Экспорт
	
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", 
		РаботаСАдресамиКлиентСервер.НаименованияОбъектовАдресацииПоТипу(2), Ложь);
		
КонецФункции

// Возвращает варианты типов помещений.
Функция ВариантыДанныхПомещение() Экспорт
	
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", 
		РаботаСАдресамиКлиентСервер.НаименованияОбъектовАдресацииПоТипу(3, Ложь), Ложь);
		
КонецФункции

#КонецОбласти

#КонецЕсли


