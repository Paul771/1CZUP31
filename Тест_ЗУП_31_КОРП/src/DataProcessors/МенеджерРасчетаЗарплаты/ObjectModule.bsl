#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

Перем МенеджерВременныхТаблиц;
Перем МесяцНачисления;
Перем МесяцыРасчета;
Перем ПериодРасчета;
Перем Организация;
Перем ВременныйРегистратор;
Перем НаборыЗаписей;
Перем НаборыЗаписейНакопляемые;
Перем МенеджерДанныхУчетаВремени;
Перем РасчетБазыНачислений;
Перем РасчетБазыУдержаний;
Перем РасчетОдногоМесяца;
Перем НастройкиУчета;

Перем ВыявленныеПоказатели;
Перем ВычеркиваемыеСтроки;
Перем ОпределяющиеПоказатели;
Перем ОтборПерерасчетовНачислений;
Перем ОтборПерерасчетовУдержаний;
Перем ДатыНачалаСобытия;
Перем ВычеркнутыеПериоды;

Перем Зарплата Экспорт;
Перем ЗарплатаМесяца;

Перем ИсключаемыйРегистратор Экспорт;
Перем ИсправленныйДокумент Экспорт;
Перем ЭтоИсправлениеТекущимПериодом Экспорт;
Перем ВызыватьИсключение Экспорт;

Перем НастройкиРасчета Экспорт;
Перем НастройкиУдержаний Экспорт;
Перем НастройкиНДФЛ Экспорт;
Перем НастройкиЗаймов Экспорт;

Перем НастройкиПересчета;
Перем ПересчетСотрудников;
Перем ПересчетФизическихЛиц;

Перем ДополнительныеСвойства Экспорт;

Перем НастройкиБухучета Экспорт;
Перем ПараметрыБухучета;
Перем БухучетВыполняемыеДействия;
Перем НастройкиОбновленияБухучета;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Инициализация

// Инициализация менеджера расчета зарплаты.
// Предназначен для служебного использования.
// Потребителям вместо него рекомендуется использовать РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета.
//
// Параметры
//	ПериодРасчета - тип СтандартныйПериод, период начисления зарплаты.
//	ОрганизацияПараметр - тип СправочникСсылка.Организации.
//
Процедура Инициализировать(ПериодРасчетаПараметр, ОрганизацияПараметр) Экспорт
	
	ПериодРасчета = ПериодРасчетаПараметр;
	МесяцНачисления = НачалоМесяца(ПериодРасчета.ДатаОкончания);
	МесяцыРасчета.Добавить(МесяцНачисления);
	Пока МесяцНачисления > ПериодРасчета.ДатаНачала Цикл
		МесяцНачисления = НачалоМесяца(МесяцНачисления - 1);
		МесяцыРасчета.Вставить(0, МесяцНачисления);
	КонецЦикла;
	
	Организация = ОрганизацияПараметр;
	
	НастройкиУчета = Новый Структура(
		"ИспользоватьТерриторииУсловияТруда,
		|ИспользоватьТерритории,
		|ИспользоватьСтатьиФинансирования");
	НастройкиУчета.ИспользоватьТерриторииУсловияТруда = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация);
	НастройкиУчета.ИспользоватьТерритории = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториям(Организация);
	НастройкиУчета.ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	
	Зарплата = Новый Структура(
		"Начисления,
		|ДоговорыПодряда,
		|Удержания,
		|НДФЛ,
		|КорректировкиВыплаты,
		|Взносы,
		|ПогашениеЗаймов");
		
	НастройкиРасчета = Новый Структура(
		"РассчитыватьНачисления,
		|РассчитыватьДоговорыПодряда,
		|РассчитыватьУдержания,
		|РассчитыватьНДФЛ, 
		|РассчитыватьКорректировкиВыплаты, 
		|РассчитыватьВзносы, 
		|РассчитыватьЗаймы,
		|ПерваяПоловинаМесяца,
		|ИсключатьРанееОплаченныеПериоды,
		|ОкончательныйРасчет,
		|РасчетЗарплаты,
		|СохранятьИсправления,
		|Сотрудники, 
		|ФизическиеЛица");

	НастройкиУдержаний = Новый Структура(
		"РассчитыватьТолькоПоТекущемуДокументу");
	
	НастройкиНДФЛ = Новый Структура(
		"Сотрудники,
		|ДатаВыплаты, 
		|ОкончательныйРасчет,
		|ДоходПолученНаТерриторииРФ");
		
	НастройкиЗаймов = Новый Структура(
		"Сотрудники, 
		|ДатаПогашения");
		
	УстановитьНастройкиРасчетаПоУмолчанию();
		
	Зарплата.Начисления = ТаблицаНачислений();	
	Зарплата.ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	Зарплата.Удержания = ТаблицаУдержаний();
	Зарплата.КорректировкиВыплаты = ТаблицаКорректировокВыплаты();
	Зарплата.ПогашениеЗаймов = ЗаймыСотрудникам.ТаблицаПогашениеЗаймов();
	Зарплата.НДФЛ = УчетНДФЛ.ТаблицаНДФЛ();
	Зарплата.Взносы = ТаблицаВзносы();
	
	ЗарплатаМесяца = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Зарплата);
	
	ПересчетСотрудников = ТаблицаПересчетаСотрудников();
	ПересчетФизическихЛиц = ТаблицаПересчетаФизическихЛиц();
	
	ОпределяющиеПоказатели = ТаблицаОпределяющихПоказателей();
	
	ВычеркнутыеПериоды = ТаблицаВычеркнутыеПериоды();
	
	НастройкиПересчета = Новый Структура(
		"ИсточникИзменений,
		|ВыполнятьПересчет,
		|СоответствиеСтрокНачислений,
		|СоответствиеСтрокДоговоровПодряда,
		|СоответствиеСтрокУдержаний,
		|ФизическиеЛицаРасчетаВзносов,
		|ФизическиеЛицаРасчетаНДФЛ,
		|ФизическиеЛицаКорректировокВыплаты,
		|ФизическиеЛицаПогашенияЗаймов");
	НастройкиПересчета.ИсточникИзменений = ТаблицаИсточниковИзменений();
	НастройкиПересчета.ВыполнятьПересчет = Ложь;
	НастройкиПересчета.СоответствиеСтрокНачислений = Новый Соответствие;
	НастройкиПересчета.СоответствиеСтрокДоговоровПодряда = Новый Соответствие;
	НастройкиПересчета.СоответствиеСтрокУдержаний = Новый Соответствие;
	НастройкиПересчета.ФизическиеЛицаРасчетаВзносов = Новый Массив;
	НастройкиПересчета.ФизическиеЛицаРасчетаНДФЛ = Новый Массив;
	НастройкиПересчета.ФизическиеЛицаКорректировокВыплаты = Новый Массив;
	НастройкиПересчета.ФизическиеЛицаПогашенияЗаймов = Новый Массив;
	
	НастройкиБухучета = Новый Структура(
		"ПроверятьРегистрациюПроцентаЕНВД,
		|НастройкиБухучетаДокумента,
		|КоэффициентыСреднегоЗаработкаДокумента,
		|КоэффициентыСреднегоЗаработкаФССДокумента,
		|ПроверятьНеобходимостьПересчетаВзносов,
		|ПроверятьНеобходимостьПересчетаНДФЛ");
		
	НастройкиБухучета.ПроверятьРегистрациюПроцентаЕНВД 			= Ложь;
	НастройкиБухучета.ПроверятьНеобходимостьПересчетаВзносов 	= Ложь;
	НастройкиБухучета.ПроверятьНеобходимостьПересчетаНДФЛ		= Ложь;
	НастройкиБухучета.НастройкиБухучетаДокумента 				= ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаБухучетЗарплатыПервичныхДокументов();
	НастройкиБухучета.КоэффициентыСреднегоЗаработкаДокумента 	= Новый Соответствие;
	НастройкиБухучета.КоэффициентыСреднегоЗаработкаФССДокумента = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаКоэффициентыРаспределенияСреднегоЗаработка();
	
	БухучетВыполняемыеДействия = Новый Структура("
		|ВыполнятьБухучетНачислений,
		|ВыполнятьБухучетДоговоров,
		|ВыполнятьБухучетНДФЛ,
		|ВыполнятьБухучетУдержаний,
		|ВыполнятьБухучетЗаймов,
		|ВыполнятьБухучетКорректировокВыплаты");
	
	БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ 	  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов     = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты = Ложь;
	
	НастройкиОбновленияБухучета = Новый Структура(
		"РежимОбновленияБухучетаРасчетов,
		|ОбновитьВсеТаблицы,
		|ИменаТаблицДляОбновления,
		|Сотрудник,
		|ФизическоеЛицо,
		|ЗависимыеНачисления,
		|ПроверятьНеобходимостьПересчетаВзносов,
		|ТребуетсяПересчетВзносов,
		|ФизическиеЛицаРасчетаВзносов,
		|ПроверятьНеобходимостьПересчетаНДФЛ,
		|ТребуетсяПересчетНДФЛ,
		|ФизическиеЛицаДляПересчетаНДФЛ");
		
	НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов	= Ложь;
	НастройкиОбновленияБухучета.ОбновитьВсеТаблицы 	= Ложь;
	НастройкиОбновленияБухучета.Сотрудник 			= Неопределено;
	НастройкиОбновленияБухучета.ФизическоеЛицо 		= Неопределено;
	НастройкиОбновленияБухучета.ЗависимыеНачисления = Новый Массив;
	НастройкиОбновленияБухучета.ТребуетсяПересчетВзносов = Ложь;
	НастройкиОбновленияБухучета.ИменаТаблицДляОбновления = "";
	НастройкиОбновленияБухучета.ФизическиеЛицаРасчетаВзносов = Новый Массив;
	НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов = Ложь;
	НастройкиОбновленияБухучета.ТребуетсяПересчетНДФЛ = Ложь;
	НастройкиОбновленияБухучета.ФизическиеЛицаДляПересчетаНДФЛ = Новый Массив;
	НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаНДФЛ = Ложь;
	
	ПараметрыБухучета = Новый Структура(
		"ПлательщикЕНВД, 
		|ПроцентЕНВД,
		|ИмяВТБухучетНачислений,
		|ИмяВТБухучетНачисленийПоДоговорам,
		|ИмяВТБухучетВсехНачислений");
		
	ЗаполнитьПараметрыБухучета();
	
КонецПроцедуры

// Возвращает структуру НастройкиРасчета, определяющую поведение менеджера расчета, в положение по умолчанию.
//
Процедура УстановитьНастройкиРасчетаПоУмолчанию() Экспорт
		
	НастройкиРасчета.РассчитыватьНачисления = Истина;
	НастройкиРасчета.РассчитыватьДоговорыПодряда = Ложь;
	НастройкиРасчета.РассчитыватьУдержания = Ложь;
	НастройкиРасчета.РассчитыватьНДФЛ = Ложь;
	НастройкиРасчета.РассчитыватьКорректировкиВыплаты = Ложь;
	НастройкиРасчета.РассчитыватьВзносы = Ложь;
	НастройкиРасчета.РассчитыватьЗаймы = Ложь;
	
	НастройкиРасчета.РасчетЗарплаты = Ложь;
	НастройкиРасчета.ПерваяПоловинаМесяца = Ложь;
	НастройкиРасчета.ОкончательныйРасчет = Ложь;
	НастройкиРасчета.ИсключатьРанееОплаченныеПериоды = Истина;
	
	НастройкиРасчета.СохранятьИсправления = Ложь;
	
	НастройкиРасчета.Сотрудники = Неопределено;
	НастройкиРасчета.ФизическиеЛица = Неопределено;
	
	НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу = Ложь;
	
	НастройкиНДФЛ.ДоходПолученНаТерриторииРФ = Ложь;
	
КонецПроцедуры

// Устанавливает менеджер временных таблиц, в том случае если необходимо работать с уже существующими временными таблицами.
//
// Параметры
//	МенеджерВременныхТаблицПараметр - тип МенеджерВременныхТаблиц.
//
Процедура УстановитьМенеджерВременныхТаблиц(МенеджерВременныхТаблицПараметр) Экспорт
	МенеджерВременныхТаблиц = МенеджерВременныхТаблицПараметр;
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеНачислений

// Заполняет коллекцию Зарплата.Начисления 
//	- начислениями сотрудника за периоды, указанные в НачисленияПериоды,
//	- начислениями сотрудника (плановыми и пр.) за ПериодВыявления (если он указан).
//
// Параметры
//	Сотрудник - тип СправочникСсылка.Сотрудники,
//	НачисленияПериоды - тип ТаблицаЗначений, см. ТаблицаИсходныеДанныеНачисленияЗарплатыПоНачислениям,
//	ПериодВыявления - тип СтандартныйПериод, необязательный, если заполнен, 
//		то в Зарплата.Начисления будут в первую очередь включены выявленные начисления сотрудника за ПериодВыявления.
//
Процедура ЗаполнитьНачисленияСотрудникаЗаПериод(Сотрудник, НачисленияПериоды, ПериодВыявления = Неопределено) Экспорт
	
	ВыявлятьНачисления = ПериодВыявления <> Неопределено;
	
	Начисления = ТаблицаНачислений();
	Если ВыявлятьНачисления Тогда
		ТаблицаСотрудников = ТаблицаСотрудниковПоСотрудникуПериоду(Сотрудник, ПериодВыявления.ДатаНачала, ПериодВыявления.ДатаОкончания);
		ДополнитьТаблицуСотрудниковПериодов(НачисленияПериоды, ТаблицаСотрудников);
		ТаблицаСотрудников.ЗаполнитьЗначения(Сотрудник, "Сотрудник");
		ЗаполнитьВыявленнымиНачислениями(ТаблицаСотрудников, Начисления);
		ВычеркнутьНачисленияПоПериодуВыявления(Начисления, ПериодВыявления);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НачисленияПериоды, Начисления);
	
	ЗаполнитьНачисленияСотрудников(Начисления);
	
КонецПроцедуры

// Заполняет коллекцию Зарплата.Начисления начислениями сотрудников за периоды, указанные в НачисленияПериоды.
//
// Параметры
//	НачисленияПериоды - тип ТаблицаЗначений, см. ТаблицаИсходныеДанныеНачисленияЗарплатыПоНачислениям.
//
Процедура ЗаполнитьНачисленияСотрудниковЗаПериод(Сотрудники, НачисленияПериоды, ПериодВыявления = Неопределено) Экспорт
	
	ВыявлятьНачисления = ПериодВыявления <> Неопределено;
	
	Начисления = ТаблицаНачислений();
	Если ВыявлятьНачисления Тогда
		ТаблицаСотрудников = ТаблицаСотрудниковПоСотрудникамПериоду(Сотрудники, ПериодВыявления.ДатаНачала, ПериодВыявления.ДатаОкончания);
		ДополнитьТаблицуСотрудниковПериодов(НачисленияПериоды, ТаблицаСотрудников);
		ЗаполнитьВыявленнымиНачислениями(ТаблицаСотрудников, Начисления);
		ВычеркнутьНачисленияПоПериодуВыявления(Начисления, ПериодВыявления);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НачисленияПериоды, Начисления);
	
	ЗаполнитьНачисленияСотрудников(Начисления);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеУдержаний

// Заполняет коллекцию Зарплата.Удержания 
//	- удержаниями сотрудника за периоды, указанные в УдержанияПериоды,
//	- удержаниями сотрудника (плановыми и пр.), выявленными за период с Начало по Окончание.
//
// Параметры
//	Сотрудник - тип СправочникСсылка.Сотрудники,
//	Начало - тип Дата, дата начала периода выявления удержаний,
//	Окончание - тип Дата, дата окончания периода выявления удержаний,
//	УдержанияПериоды - тип ТаблицаЗначений, см. ТаблицаИсходныеДанныеУдержанияПериоды.
//
Процедура ЗаполнитьУдержанияСотрудникаЗаПериод(Сотрудник, Начало, Окончание, УдержанияПериоды = Неопределено) Экспорт
	
	ТаблицаСотрудников = ТаблицаСотрудниковПоСотрудникуПериоду(Сотрудник, Начало, Окончание);
	
	Удержания = ТаблицаУдержаний();
	ЗаполнитьВыявленнымиУдержаниями(ТаблицаСотрудников, Удержания);
	
	Если УдержанияПериоды <> Неопределено Тогда
		ДобавитьУдержанияПериодыКУдержаниям(Сотрудник, УдержанияПериоды, Удержания);
	КонецЕсли;
	
	ЗаполнитьУдержанияСотрудников(Удержания);
	
КонецПроцедуры

// Заполняет коллекцию Зарплата.Удержания удержаниями сотрудников (плановыми и пр.), выявленными за период с Начало по Окончание.
//
// Параметры
//	Сотрудники - тип Массив элементов типа СправочникСсылка.Сотрудники,
//	Начало - тип Дата, дата начала периода выявления удержаний,
//	Окончание - тип Дата, дата окончания периода выявления удержаний.
//
Процедура ЗаполнитьУдержанияСотрудниковЗаПериод(Сотрудники, Начало, Окончание) Экспорт
	
	ТаблицаСотрудников = ТаблицаСотрудниковПоСотрудникамПериоду(Сотрудники, Начало, Окончание);
	
	Удержания = ТаблицаУдержаний();
	ЗаполнитьВыявленнымиУдержаниями(ТаблицаСотрудников, Удержания);
	
	ЗаполнитьУдержанияСотрудников(Удержания);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументаПолностью

// Заполняет документ, выполняющий начисление зарплаты.
// Состав заполняемых коллекций определяется структурой НастройкиРасчета.
// Если НастройкиРасчета.СохранятьИсправления = Истина, 
//	то исправленные строки, содержащиеся в коллекциях объекта Зарплата, будут сохранены.
// Для расчета полученных коллекций необходимо выполнить РассчитатьЗарплату().
//
// Параметры
//	ТаблицаСотрудников - тип ТаблицаЗначений, см. ТаблицаСотрудников()
//	Отборы - тип Структура, см. СоздатьОтборы(), необязательный
//	ТаблицаУдержаний - тип ТаблицаЗначений, см. ТаблицаСотрудников(), необязательный, 
//		если не задан - для выявления удержаний будут использованы сотрудники из ТаблицаСотрудников за период расчета.
//
Процедура ЗаполнитьНачислениеЗарплаты(ТаблицаСотрудников, Отборы = Неопределено, ТаблицаУдержаний = Неопределено, НачисленияПериоды = Неопределено) Экспорт
	
	Если НачисленияПериоды <> Неопределено Тогда
		ДополнитьТаблицуСотрудниковПериодов(НачисленияПериоды, ТаблицаСотрудников);
	КонецЕсли;
	
	Начисления = НачисленияЗарплаты(ТаблицаСотрудников, Отборы, НачисленияПериоды);
	
	ОбъединитьНачисления(Начисления);
	
	ДоговорыПодряда = ДоговорыПодряда(ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник"), Отборы);
	ОбъединитьДоговорыПодряда(ДоговорыПодряда);
	
	Если ТаблицаУдержаний = Неопределено Тогда
		ТаблицаУдержаний = ТаблицаСотрудников.Скопировать();
		ТаблицаУдержаний.ЗаполнитьЗначения(ПериодРасчета.ДатаНачала, "ДатаНачала");
		ТаблицаУдержаний.ЗаполнитьЗначения(ПериодРасчета.ДатаОкончания, "ДатаОкончания");
	КонецЕсли;
	Удержания = Удержания(ТаблицаУдержаний, Отборы);
	ОбъединитьУдержания(Удержания);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументаПолностью

// Добавляет отбор, используемый при фильтрации выявленных начислений.
// Для указанного сотрудника в указанном месяце останутся только строки с приведенными видами расчетов.
//
// Параметры
//	Сотрудник - тип СправочникСсылка.Сотрудники,
//	Месяц - тип Дата,
//	ВидыРасчета - тип Массив элементов типа ПланВидовРасчетаСсылка.Начисления.
//
Процедура ДобавитьОтборПерерасчетовНачислений(Сотрудник, Месяц, ВидыРасчета) Экспорт
	
	Если ОтборПерерасчетовНачислений = Неопределено Тогда
		ОтборПерерасчетовНачислений = ТаблицаОтборПерерасчетовНачислений();
	КонецЕсли;
	
	НоваяСтрока = ОтборПерерасчетовНачислений.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.ПериодДействия = Месяц;
	НоваяСтрока.ВидыРасчета = ВидыРасчета;
	
КонецПроцедуры

// Добавляет отбор, используемый при фильтрации выявленных удержаний.
// Для указанного физического лица в указанном месяце останутся только строки с приведенными видами расчетов.
//
// Параметры
//	ФизическоеЛицо - тип СправочникСсылка.ФизическиеЛица,
//	Месяц - тип Дата,
//	ВидРасчета - тип Массив элементов типа ПланВидовРасчетаСсылка.Удержания,
//	ДокументОснование - тип ДокументСсылка.
//
Процедура ДобавитьОтборПерерасчетовУдержаний(ФизическоеЛицо, Месяц, ВидРасчета, ДокументОснование) Экспорт
	
	Если ОтборПерерасчетовУдержаний = Неопределено Тогда
		ОтборПерерасчетовУдержаний = ТаблицаОтборПерерасчетовУдержаний();
	КонецЕсли;
	
	НоваяСтрока = ОтборПерерасчетовУдержаний.Добавить();
	НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
	НоваяСтрока.ПериодДействия = Месяц;
	НоваяСтрока.Удержание = ВидРасчета;
	НоваяСтрока.ДокументОснование = ДокументОснование;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетВсехКоллекций

// Рассчитывает коллекции, содержащиеся в объекте Зарплата.
// Состав рассчитываемых коллекций определяется структурой НастройкиРасчета.
// Если НастройкиРасчета.СохранятьИсправления = Истина, 
//	то исправленные строки, содержащиеся в коллекциях объекта Зарплата, будут сохранены.
// Если предварительно использовался метод ДобавитьИсточникИзменений, 
//	то расчет будет выполняться только с учетом источников изменений.
//
Процедура РассчитатьЗарплату() Экспорт
	
	ЗаполнитьТаблицыПересчетаПоИсточникамИзменений();
	ЗаполнитьВыполняемыеДействияБухучетаПриРасчетеКоллекций();
	
	РассчитатьЗарплатуСлужебный();
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетОтдельныхКоллекций 

// Пересчитывает таблицу НДФЛ в документе начисления зарплаты и все, зависимые от НДФЛ, коллекции.
// Если НастройкиРасчета.СохранятьИсправления = Истина, 
//	то исправленные строки, содержащиеся в коллекциях объекта Зарплата, будут сохранены.
// Требует обязательного заполнения НастройкиРасчета.Сотрудники или НастройкиРасчета.ФизическиеЛица, 
//	НДФЛ будет пересчитываться именно по перечисленным там сотрудникам (физическим лицам).
//
Процедура ПересчитатьНДФЛ() Экспорт
	
	ЗаполнитьТаблицыПересчетаПриПересчетеНДФЛ();
	ЗаполнитьВыполняемыеДействияБухучетаПриРасчетеКоллекций();
	
	РассчитатьЗарплатуСлужебный();
	
КонецПроцедуры

// Пересчитывает таблицу Взносы в документе начисления зарплаты и все, зависимые от взносов, коллекции.
// Если НастройкиРасчета.СохранятьИсправления = Истина, 
//	то исправленные строки, содержащиеся в коллекциях объекта Зарплата, будут сохранены.
// Требует обязательного заполнения НастройкиРасчета.Сотрудники или НастройкиРасчета.ФизическиеЛица, 
//	взносы будут пересчитываться именно по перечисленным там сотрудникам (физическим лицам).
//
Процедура ПересчитатьВзносы() Экспорт
	
	ЗаполнитьТаблицыПересчетаПриПересчетеВзносов();
	ЗаполнитьВыполняемыеДействияБухучетаПриРасчетеКоллекций();
	
	РассчитатьЗарплатуСлужебный();
	
КонецПроцедуры

// Выполняет пересчет страховых взносов после изменения доли ЕНВД у начислений.
// Общая сумма исчисленных взносов не меняется, меняется только распределение взносов между ЕНВД и не ЕНВД.
// Пересчет зависимых коллекций не требуется.
//
Процедура ПересчитатьВзносыПриИзмененииДолиЕНВД(ФизическиеЛицаДляРасчетаВзносов)

	НастройкиРасчетаПрежнееЗначение = Новый Структура;
	Для каждого КлючИЗначение Из НастройкиРасчета Цикл
		НастройкиРасчетаПрежнееЗначение.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	НастройкиРасчета.РассчитыватьНачисления = Ложь;
	НастройкиРасчета.РассчитыватьДоговорыПодряда = Ложь;
	НастройкиРасчета.РассчитыватьУдержания = Ложь;
	НастройкиРасчета.РассчитыватьНДФЛ = Ложь;
	НастройкиРасчета.РассчитыватьКорректировкиВыплаты = Ложь;
	НастройкиРасчета.РассчитыватьВзносы = Истина;
	НастройкиРасчета.РассчитыватьЗаймы = Ложь;
	
	БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ 	  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов     = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты = Ложь;
	
	НастройкиПересчета.ВыполнятьПересчет = Истина;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ПересчетФизическихЛиц, ФизическиеЛицаДляРасчетаВзносов, "ФизическоеЛицо");
	Для Каждого НастройкаПересчета Из ПересчетФизическихЛиц Цикл
		НастройкаПересчета.ПересчитыватьВзносы = Истина;
	КонецЦикла;
	ПересчетФизическихЛиц.Свернуть("ФизическоеЛицо", СтрСоединить(ИменаНастроекПересчетаФизическихЛиц(), ","));
	
	РассчитатьЗарплатуСлужебный();
	
	Для каждого КлючИЗначение Из НастройкиРасчетаПрежнееЗначение Цикл
		НастройкиРасчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;

КонецПроцедуры

// Пересчитывает таблицу НДФЛ  и все, зависимые от НДФЛ, коллекции.
// Если НастройкиРасчета.СохранятьИсправления = Истина, 
//	то исправленные строки, содержащиеся в коллекциях объекта Зарплата, будут сохранены.
//
Процедура ПересчитатьНДФЛПриИзмененииДолиГранта(ФизическиеЛицаДляРасчетаНДФЛ)
	
	НастройкиПересчета.ВыполнятьПересчет = Истина;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ПересчетФизическихЛиц, ФизическиеЛицаДляРасчетаНДФЛ, "ФизическоеЛицо");
	Для Каждого НастройкаПересчета Из ПересчетФизическихЛиц Цикл
		ЗаполнитьСтрокуПересчетаПоНДФЛ(НастройкаПересчета);
		НастройкаПересчета.ПересчитыватьНДФЛ = Истина;
	КонецЦикла;
	ПересчетФизическихЛиц.Свернуть("ФизическоеЛицо", СтрСоединить(ИменаНастроекПересчетаФизическихЛиц(), ","));
	
	НастройкиРасчетаПрежнееЗначение = Новый Структура;
	Для каждого КлючИЗначение Из НастройкиРасчета Цикл
		НастройкиРасчетаПрежнееЗначение.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	НастройкиРасчета.РассчитыватьНачисления = Истина;
	НастройкиРасчета.РассчитыватьДоговорыПодряда = Истина;
	НастройкиРасчета.РассчитыватьУдержания = Истина;
	НастройкиРасчета.РассчитыватьНДФЛ = Истина;
	НастройкиРасчета.РассчитыватьКорректировкиВыплаты = Истина;
	НастройкиРасчета.РассчитыватьВзносы = Ложь;
	НастройкиРасчета.РассчитыватьЗаймы = Ложь;
	
	БухучетВыполняемыеДействияПрежнееЗначение = Новый Структура;
	Для каждого КлючИЗначение Из БухучетВыполняемыеДействия Цикл
		БухучетВыполняемыеДействияПрежнееЗначение.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ 	  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов     = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты = Ложь;
	
	РассчитатьЗарплатуСлужебный();
	
	Для каждого КлючИЗначение Из БухучетВыполняемыеДействияПрежнееЗначение Цикл
		БухучетВыполняемыеДействия.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из НастройкиРасчетаПрежнееЗначение Цикл
		НастройкиРасчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетЗарплаты

// Применяется при пересчете зарплаты в документе после интерактивного изменения пользователем одной или нескольких коллекций.
// Используется для указания причины пересчета.
//
// Параметры:
//	- ИмяКоллекции - Строка, название измененной коллекции, используется один из ключей объекта Зарплата.
//	- ФизическоеЛицо - СправочникСсылка.ФизическиеЛица, физическое лицо, данные которого были изменены.
//	- Сотрудник - СправочникСсылка.Сотрудники (необязательный), сотрудник, данные которого были изменены,
//		Для коллекций, где используется сотрудник обязательный.
//	- ВидРасчета - ПланВидовРасчетаСсылка.Начисления, ПланВидовРасчетаСсылка.Удержания (необязательный), вид начисления или удержания.
//		Для коллекции удержаний указывается обязательно.
//
Процедура ДобавитьИсточникИзменений(ИмяКоллекции, ФизическоеЛицо, Сотрудник = Неопределено, ВидРасчета = Неопределено) Экспорт
	
	ИсточникИзменений = НастройкиПересчета.ИсточникИзменений.Добавить();
	ИсточникИзменений.ИмяКоллекции = ИмяКоллекции;
	ИсточникИзменений.Сотрудник = Сотрудник;
	ИсточникИзменений.ФизическоеЛицо = ФизическоеЛицо;
	ИсточникИзменений.ВидРасчета = ВидРасчета;
	
	ПроверитьИсточникИзменений(ИсточникИзменений);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнениеСтрок

// Конструктор требований заполнения сведений в строках начислений, 
// необходимых для расчета, для метода ЗаполнитьСведенияНачисленийДляРасчета.
//
// Параметры
//	ПоложениеПоУмолчанию - тип Булево, необязательный, по умолчанию Ложь.
//		Определяет положение настроек по умолчанию, если Истина все требования будут "включены".
//
Функция ТребованияЗаполненияСведенийНачисленийДляРасчета(ПоложениеПоУмолчанию = Ложь) Экспорт
	
	Требования = Новый Структура(
		"КадровыеДанные,
		|ИсточникиДанныхВремени,
		|КатегорияНачисления,
		|БазовыйПериод,
		|ПериодДействия,
		|ВремяВЧасах");
		
	Для Каждого КлючИЗначение Из Требования Цикл
		Требования[КлючИЗначение.Ключ] = ПоложениеПоУмолчанию;
	КонецЦикла;
	
	Возврат Требования;
	
КонецФункции

// Заполняет требуемые сведения для расчета в строках начислений.
// Перечень заполняемых сведений
// - ПериодРегистрацииВремени,
// - ПериодДействия,
// - ГрафикРаботы,
// - ВремяВЧасах,
// - Организация,
// - Подразделение,
// - Должность,
// - ДолжностьПоШтатномуРасписанию,
// - Категория,
// - Базовый период.
//
// Параметры
//	Начисления - таблица значений, см. ТаблицаНачислений,
//	Требования - структура, см. ТребованияЗаполненияСведенийНачисленийДляРасчета.
//
Процедура ЗаполнитьСведенияНачисленийДляРасчета(Начисления, Требования = Неопределено) Экспорт
	
	Если Требования = Неопределено Тогда
		Требования = ТребованияЗаполненияСведенийНачисленийДляРасчета(Истина);
	КонецЕсли;
	
	ЗаполнитьСведенияНачисленийДляРасчетаСлужебный(Начисления, Требования);
	
КонецПроцедуры

// Заполняет значения показателей в строках начислений.
//
// Параметры
//	Начисления - таблица значений, см. ТаблицаНачислений.
//
Процедура ЗаполнитьЗначенияПоказателейНачислений(Начисления) Экспорт
	ЗаполнитьЗначенияПоказателейНачисленийСлужебный(Начисления);
КонецПроцедуры

// Заполняет требуемые сведения для расчета в строках удержаний.
// Перечень заполняемых сведений
//	- Сотрудник,
//	- Организация,
//	- Подразделение.
//
// Параметры
//	Удержания - таблица значений, см. ТаблицаУдержаний.
//
Процедура ЗаполнитьСведенияУдержанийДляРасчета(Удержания) Экспорт
	ЗаполнитьСведенияУдержанийДляРасчетаСлужебный(Удержания);
КонецПроцедуры

// Заполняет значения показателей в строках удержаний.
//
// Параметры
//	Удержания - таблица значений, см. ТаблицаУдержаний.
//
Процедура ЗаполнитьЗначенияПоказателейУдержаний(Удержания) Экспорт
	ЗаполнитьЗначенияПоказателейУдержанийСлужебный(Удержания);
КонецПроцедуры

#КонецОбласти

#Область ИзвестныеПоказатели

// Применяется в случаях, когда потребителю заранее известен один или несколько значений показателей начислений.
// Является расширением методов 
//	ЗаполнитьНачисленияСотрудникаЗаПериод
//	ЗаполнитьНачисленияСотрудниковЗаПериод
//	ДополнитьСтрокиНачислений
//	ЗаполнитьУдержанияСотрудникаЗаПериод
//	ЗаполнитьУдержанияСотрудниковЗаПериод
//
// Параметры
//	Строка - тип Строка таблицы значений, созданной ТаблицаИсходныеДанныеНачисленияЗарплатыПоНачислениям(),
//	Показатель - тип СправочникСсылка.ПоказателиРасчетаЗарплаты,
//	Значение - тип ОпределяемыйТип.ЗначениеПоказателяРасчетаЗарплаты.
//
Процедура ДобавитьИзвестноеЗначениеПоказателя(Строка, Показатель, Значение) Экспорт
	
	Если Строка.ИзвестныеПоказатели.Количество() = 0 Тогда
		Строка.ИзвестныеПоказатели = ТаблицаПоказателей();
	КонецЕсли;
	
	// Добавляем в удерживаемую таблицу, затем при обращении к значениям показателей объединяем с данными из ИБ.
	НоваяСтрока = Строка.ИзвестныеПоказатели.Добавить();
	НоваяСтрока.Показатель = Показатель;
	НоваяСтрока.Значение = Значение;
	
КонецПроцедуры

// Применяется при наличии в документе сведений о показателях, являющихся определяющими для начислений, 
// то есть провоцирующих появление начислений.
// Добавленное значения определяющего показателя будет учитываться при последующем вызове выявления 
// начислений наряду с другими разовыми и оперативными показателями.
// 
// Параметры
//	Сотрудник - тип СправочникСсылка.Сотрудники,
//	Организация - тип СправочникСсылка.Организации,
//	Показатель - тип СправочникСсылка.ПоказателиРасчетаЗарплаты,
//	Значение - тип ОпределяемыйТип.ЗначениеПоказателяРасчетаЗарплаты,
//	Дата - тип Дата.
//
Процедура ДобавитьЗначениеОпределяющегоПоказателя(Сотрудник, Организация, Показатель, Значение, Дата) Экспорт
	
	НоваяСтрока = ОпределяющиеПоказатели.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Показатель = Показатель;
	НоваяСтрока.Значение = Значение;
	НоваяСтрока.Дата = Дата;
	
КонецПроцедуры

#КонецОбласти

#Область ДатаНачалаСобытия

// Применяется в случае, когда для проведения дальнейших расчетов важна дата начала события, 
// связанного с сохранением среднего заработка, определяемая в документе.
// Например, при расчете коэффициента индексации, используемого при расчете оплаты отпуска.
//
// Параметры
//	Сотрудник - тип СправочникСсылка.Сотрудники,
//	Дата - тип Дата, дата начала события.
//
Процедура ДобавитьДатуНачалаСобытия(Сотрудник, Дата) Экспорт
	
	Если ДатыНачалаСобытия = Неопределено Тогда
		ДатыНачалаСобытия = ТаблицаДатыНачалаСобытия();
	КонецЕсли;
	
	НоваяСтрока = ДатыНачалаСобытия.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Дата = Дата;
	
КонецПроцедуры

#КонецОбласти

#Область ДатаЗавершенияРаботы

// Применяется при расчете зарплаты, связанной с событием завершения работы.
// Учитывается, например, при уточнении периода действия начислений в целом за месяц при расчете базовых начислений.
//
// Параметры
//	Сотрудник - тип СправочникСсылка.Сотрудники,
//	Дата - тип Дата, дата завершения работы.
//
Процедура ДобавитьДатуЗавершенияРаботы(Сотрудник, Дата) Экспорт
	
	ДатыЗавершенияРаботы = Неопределено;
	ДополнительныеСвойства.Свойство("ДатыЗавершенияРаботы", ДатыЗавершенияРаботы);
	Если ДатыЗавершенияРаботы = Неопределено Тогда
		ДатыЗавершенияРаботы = ТаблицаДатыЗавершенияРаботы();
	КонецЕсли;
	
	НоваяСтрока = ДатыЗавершенияРаботы.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Дата = Дата;
	
	ДополнительныеСвойства.Вставить("ДатыЗавершенияРаботы", ДатыЗавершенияРаботы);
	
КонецПроцедуры	

#КонецОбласти

#Область ВыявлениеНачислений

// Выявляет начисления, полагающиеся сотрудникам в заданном периоде.
// Включаются плановые начисления, начисления по значениям определяющих показателей и видам времени.
// Начисления не рассчитываются. Для расчета начислений следует использовать РассчитатьЗарплату().
// 
// Параметры
//	Сотрудники - тип Массив элементов типа СправочникСсылка.Сотрудники,
//	Начало - тип Дата, дата начала периода, за который будут выявлены начисления,
//	Окончание - тип Дата, дата окончания периода, за который будут выявлены начисления,
//	Отборы - тип Структура, см. СоздатьОтборы().
//
// Возвращаемое значение - тип ТаблицаЗначений, см. ТаблицаНачислений().
//
Функция НачисленияЗарплатыЗаПериод(Сотрудники, Начало, Окончание, Отборы = Неопределено) Экспорт
	
	ТаблицаСотрудников = ТаблицаСотрудников();
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ДатаНачала = Начало;
		НоваяСтрока.ДатаОкончания = Окончание;
	КонецЦикла;
	
	Возврат НачисленияЗарплаты(ТаблицаСотрудников, Отборы);
	
КонецФункции

// Выявляет начисления, полагающиеся сотруднику в заданном периоде.
// Подробнее см. НачисленияЗарплатыЗаПериод().
//
Функция НачисленияЗарплатыСотрудникаЗаПериод(Сотрудник, Начало, Окончание, Отборы = Неопределено) Экспорт
	
	ТаблицаСотрудников = ТаблицаСотрудников();
	
	НоваяСтрока = ТаблицаСотрудников.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.ДатаНачала = Начало;
	НоваяСтрока.ДатаОкончания = Окончание;
	
	Возврат НачисленияЗарплаты(ТаблицаСотрудников, Отборы);
	
КонецФункции

#КонецОбласти

#Область ВыявлениеУдержаний

// Выявляет удержания, применяемые к сотрудникам в заданном периоде.
// Включаются плановые удержания и удержания по значениям определяющих показателей.
// Удержания не рассчитываются. Для расчета удержаний следует использовать РассчитатьЗарплату().
// 
// Параметры
//	Сотрудники - тип Массив элементов типа СправочникСсылка.Сотрудники,
//	Начало - тип Дата, дата начала периода, за который будут выявлены удержания,
//	Окончание - тип Дата, дата окончания периода, за который будут выявлены удержания,
//	Отборы - тип Структура, см. СоздатьОтборы().
//
// Возвращаемое значение - тип ТаблицаЗначений, см. ТаблицаУдержаний().
//
Функция УдержанияЗаПериод(Сотрудники, Начало, Окончание, Отборы = Неопределено) Экспорт
	
	ТаблицаСотрудников = ТаблицаСотрудников();
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ДатаНачала = Начало;
		НоваяСтрока.ДатаОкончания = Окончание;
	КонецЦикла;
	
	Возврат Удержания(ТаблицаСотрудников, Отборы);
	
КонецФункции

// Выявляет удержания, применяемые к сотруднику в заданном периоде.
// Подробнее см. УдержанияЗаПериод().
//
Функция УдержанияСотрудникаЗаПериод(Сотрудник, Начало, Окончание, Отборы = Неопределено) Экспорт
	
	ТаблицаСотрудников = ТаблицаСотрудников();
	
	НоваяСтрока = ТаблицаСотрудников.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.ДатаНачала = Начало;
	НоваяСтрока.ДатаОкончания = Окончание;
	
	Возврат Удержания(ТаблицаСотрудников, Отборы);
	
КонецФункции

#КонецОбласти

#Область КонструкторыКоллекций

// Конструктор таблицы сотрудников, используется для заполнения параметров других методов.
//
Функция ТаблицаСотрудников() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ПериодПерерасчета", Новый ОписаниеТипов("Булево"));

	Возврат Таблица;
	
КонецФункции

// Конструктор структуры отборов, используется для заполнения параметров других методов.
//
Функция СоздатьОтборы() Экспорт
	
	Отбор = Новый Структура(
		"Подразделение");
		
	Возврат Отбор;
	
КонецФункции

// Конструктор таблицы исходных данных начислений, используется для заполнения параметров других методов.
//
Функция ТаблицаИсходныеДанныеНачисленияЗарплатыПоНачислениям() Экспорт
		
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Начисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Начисления.Колонки.Добавить("ИзвестныеПоказатели", Новый ОписаниеТипов("ТаблицаЗначений"));

	Возврат Начисления;
	
КонецФункции

// Конструктор таблицы исходных данных удержаний, используется для заполнения параметров других методов.
//
Функция ТаблицаИсходныеДанныеУдержанияПериоды() Экспорт
	
	Удержания = Новый ТаблицаЗначений;
	Удержания.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Удержания.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Удержания.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Удержания.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	
	Удержания.Колонки.Добавить("ИзвестныеПоказатели", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Удержания;
	
КонецФункции

// Конструктор таблицы начислений, используется для заполнения параметров других методов.
//
Функция ТаблицаНачислений() Экспорт
		
	Возврат Обработки.МенеджерРасчетаЗарплаты.ТаблицаНачислений();
	
КонецФункции

// Конструктор строки таблицы начислений коллекции типа Зарплата.Начисления.
//
Функция СтрокаТаблицыНачислений() Экспорт
	
	Возврат Обработки.МенеджерРасчетаЗарплаты.СтрокаТаблицыНачислений(Зарплата.Начисления);
	
КонецФункции

// Конструктор строки таблицы территорий, условий труда коллекции Зарплата.Начисления.
//
Функция СтрокаТаблицыТерриторииУсловияТруда(СтрокаНачисления) Экспорт
	
	НоваяСтрока = СтрокаНачисления.ТерриторииУсловияТруда.Добавить();
	НоваяСтрока.Показатели = ТаблицаПоказателей();
	Возврат НоваяСтрока;
	
КонецФункции

// Конструктор таблицы удержаний, используется для заполнения Зарплата.Удержания.
//
Функция ТаблицаУдержаний() Экспорт
	
	Возврат Обработки.МенеджерРасчетаЗарплаты.ТаблицаУдержаний();
	
КонецФункции

// Конструктор строки таблицы начислений коллекции Зарплата.Удержания.
//
Функция СтрокаТаблицыУдержаний() Экспорт
	
	Возврат Обработки.МенеджерРасчетаЗарплаты.СтрокаТаблицыУдержаний(Зарплата.Удержания);
	
КонецФункции

// Конструктор таблицы показателей, используемой в коллекциях Зарплата.Начисления, Зарплата.Удержания.
//
Функция ТаблицаПоказателей() Экспорт
		
	Возврат Обработки.МенеджерРасчетаЗарплаты.ТаблицаПоказателей();
	
КонецФункции

// Конструктор таблицы взносы, используемой в коллекциях Зарплата.Взносы.
//
Функция ТаблицаВзносы() Экспорт
		
	Возврат Обработки.МенеджерРасчетаЗарплаты.ТаблицаВзносы();
	
КонецФункции

#КонецОбласти

#Область ОбновлениеБухучета

// Обновляет бухучет в коллекциях строк объекта Зарплата.
// Коллекции и строки коллекций, в которых будет обновлен бухучет вычисляются на основании настроек структуры НастройкиОбновленияБухучета.
//
Процедура ОбновитьБухучетРезультатовРасчета() Экспорт

	ЗаполнитьВыполняемыеДействияПриОбновленииБухучета();
	ПодготовитьДанныеДляОбновленияБухучетаРезультатовРасчета();
	
	ВыполнитьОтражениеНачисленийВБухучете();
	ВыполнитьОтражениеНачисленийПоДоговорамВБухучете();
	
	Если НастройкиОбновленияБухучета.ТребуетсяПересчетНДФЛ Тогда
		ПересчитатьНДФЛПриИзмененииДолиГранта(НастройкиОбновленияБухучета.ФизическиеЛицаДляПересчетаНДФЛ);
	ИначеЕсли (Зарплата.Начисления.Количество() > 0 Или Зарплата.ДоговорыПодряда.Количество() > 0)
		И (БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ Или БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты) Тогда
		Если НаборыЗаписей = Неопределено Тогда
			НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременныйРегистратор);	
		КонецЕсли;
		СформироватьДоходыНДФЛ(Зарплата.Начисления, Зарплата.ДоговорыПодряда);	
	КонецЕсли;
	
	ВыполнитьОтражениеНДФЛИКорректировокВыплатыВБухучете();
	ВыполнитьОтражениеУдержанийИЗаймовВБухучете();
	
	// уничтожим все временные таблицы
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если НастройкиОбновленияБухучета.ТребуетсяПересчетВзносов Тогда
		ПересчитатьВзносыПриИзмененииДолиЕНВД(НастройкиОбновленияБухучета.ФизическиеЛицаРасчетаВзносов);
	КонецЕсли;

КонецПроцедуры

// Заполняет структуру НастройкиОбновленияБухучета на основании переданного параметра ИсходныеДанныеОбновленияЗависимыхТаблиц.
//		Если параметр не передан, необходимо обновить все коллекции объекта Зарплата.
//
//  Параметры:
//		ИсходныеДанныеОбновленияЗависимыхТаблиц - структура, см описание ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ОписаниеИсходныхДанныхДляОбновленияЗависимыхТаблиц.
//
Процедура ЗаполнитьНастройкиОбновленияБухучета(ИсходныеДанныеОбновленияЗависимыхТаблиц = Неопределено) Экспорт
	
	НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Если Не Модуль.ИспользуютсяГрантыНеоблагаемыеНДФЛ() Тогда
			НастройкиБухучета.ПроверятьНеобходимостьПересчетаНДФЛ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ИсходныеДанныеОбновленияЗависимыхТаблиц = Неопределено Тогда
		// будем обновлять бухучет всех таблиц документа
		НастройкиОбновленияБухучета.ОбновитьВсеТаблицы = Истина;
		НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов = НастройкиБухучета.ПроверятьНеобходимостьПересчетаВзносов И ПараметрыБухучета.ПлательщикЕНВД;
		НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаНДФЛ    = НастройкиБухучета.ПроверятьНеобходимостьПересчетаНДФЛ;
	Иначе
		// обновление бухучета зависимых таблиц
		НастройкиОбновленияБухучета.ОбновитьВсеТаблицы       = Ложь;
		НастройкиОбновленияБухучета.ИменаТаблицДляОбновления = ИсходныеДанныеОбновленияЗависимыхТаблиц.ИменаТаблицДляОбновления;
		НастройкиОбновленияБухучета.ТребуетсяПересчетВзносов = НастройкиБухучета.ПроверятьНеобходимостьПересчетаВзносов И ИсходныеДанныеОбновленияЗависимыхТаблиц.ИзмениласьДоляЕНВД;
		
		Если ЗначениеЗаполнено(ИсходныеДанныеОбновленияЗависимыхТаблиц.ВидРасчета) И ТипЗнч(ИсходныеДанныеОбновленияЗависимыхТаблиц.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
			НастройкиОбновленияБухучета.ЗависимыеНачисления = ЗависимыеНачисленияСоСтратегиейБухучетаПоБазовымРасчетам(ИсходныеДанныеОбновленияЗависимыхТаблиц.ВидРасчета);
		КонецЕсли;
		
		Если  ТипЗнч(ИсходныеДанныеОбновленияЗависимыхТаблиц.Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда 
			НастройкиОбновленияБухучета.Сотрудник 	   = ИсходныеДанныеОбновленияЗависимыхТаблиц.Сотрудник;
			НастройкиОбновленияБухучета.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходныеДанныеОбновленияЗависимыхТаблиц.Сотрудник, "ФизическоеЛицо"); 
		Иначе
			НастройкиОбновленияБухучета.ФизическоеЛицо = ИсходныеДанныеОбновленияЗависимыхТаблиц.Сотрудник;
		КонецЕсли;
		
		Если НастройкиОбновленияБухучета.ТребуетсяПересчетВзносов Тогда
			НастройкиОбновленияБухучета.ФизическиеЛицаРасчетаВзносов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НастройкиОбновленияБухучета.ФизическоеЛицо);
		Иначе
			НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов = НастройкиБухучета.ПроверятьНеобходимостьПересчетаВзносов И ПараметрыБухучета.ПлательщикЕНВД;
		КонецЕсли;
		
		НастройкиОбновленияБухучета.ТребуетсяПересчетНДФЛ = НастройкиБухучета.ПроверятьНеобходимостьПересчетаНДФЛ И ИсходныеДанныеОбновленияЗависимыхТаблиц.ТребуетсяПересчетНДФЛ;
		Если НастройкиОбновленияБухучета.ТребуетсяПересчетНДФЛ Тогда
			НастройкиОбновленияБухучета.ФизическиеЛицаДляПересчетаНДФЛ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НастройкиОбновленияБухучета.ФизическоеЛицо);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыИнтеграцииСДругимиПодсистемами

Процедура ПриЗаполненииСведенийНачисленийДляРасчета(Начисления)
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		РеализацияРасчетДенежногоДовольствия = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");	
		РеализацияРасчетДенежногоДовольствия.ПриЗаполненииСведенийНачисленийДляРасчета(Начисления);
	КонецЕсли;		
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыявлениеНачислений

Функция НачисленияЗарплаты(ТаблицаСотрудников, Знач Отборы = Неопределено, НачисленияПериоды = Неопределено) 
	
	ИмяЗамера = "НачислениеЗарплаты.ВыявлениеНачислений";
	Замер = НачатьЗамерВремени();
	
	Начисления = ТаблицаНачислений();
	Если НачисленияПериоды <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НачисленияПериоды, Начисления);
	КонецЕсли;
	
	Если Не НастройкиРасчета.РассчитыватьНачисления Тогда
		Возврат Начисления;
	КонецЕсли;
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда
		Возврат Начисления;
	КонецЕсли;
	
	Если Отборы = Неопределено Тогда
		Отборы = СоздатьОтборы();
	КонецЕсли;
	
	ЗаполнитьВыявленнымиНачислениями(ТаблицаСотрудников, Начисления, Отборы);
	ВычеркнутьСтрокиПоОтборуПерерасчетовНачислений(Начисления);	
	
	РазбитьСтрокиНачислений(Начисления);
	
	ЗаполнитьСведенияНачисленийДляРасчета(Начисления);
	
	ЗаполнитьЗначенияПоказателейНачислений(Начисления);
	ВычеркнутьСтрокиПоПоказателям(Начисления);
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	Возврат Начисления;
	
КонецФункции

Процедура ЗаполнитьВыявленнымиНачислениями(ТаблицаСотрудников, Начисления, Отборы = Неопределено)
	
	УдалитьВТ = Новый Массив;
	
	СоздатьВТСотрудникиПериоды(ТаблицаСотрудников);
	УдалитьВТ.Добавить("ВТСотрудникиПериоды");
	
	ОписаниеВТСотрудникиПериоды = ОписаниеВТСПериодами();
	ОписаниеВТСотрудникиПериоды.ИмяВТ = "ВТСотрудникиПериоды";
	ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	ОписаниеВТСотрудникиПериоды.Измерения.Добавить("Сотрудник");
	ОписаниеВТСотрудникиПериоды.Измерения.Добавить("Организация");
	
	ИнициализироватьМенеджерУчетаВремени(ОписаниеВТСотрудникиПериоды);
	
	ЗаполнитьКадровыеСведенияВТСПериодами(ОписаниеВТСотрудникиПериоды);
	ВычеркнутьНеСоответствующиеКадровомуОтбору(ОписаниеВТСотрудникиПериоды, Отборы);
	ВычеркнутьРанееОплаченныеПериоды(ОписаниеВТСотрудникиПериоды);
	
	ДополнитьВТСотрудникиПериодыПрименениемНачислений(ОписаниеВТСотрудникиПериоды);
	ДополнитьВТСотрудникиПериоды(ОписаниеВТСотрудникиПериоды);
	
	ОписаниеВТНачисления = ОписаниеВТНачисления();
	ОписаниеВТНачисления.ИмяВТ = "ВТСотрудникиПериоды";
	ОписаниеВТНачисления.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТНачисления.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТПоказателиРасчетаНачисления(ОписаниеВТНачисления);
	УдалитьВТ.Добавить("ВТПоказателиРасчета");
	
	ДобавитьПлановыеНачисления(ОписаниеВТСотрудникиПериоды, Начисления);
	ДобавитьНачисленияПоЗначениямОперативныхПоказателей(ОписаниеВТСотрудникиПериоды, Начисления);
	ДобавитьНачисленияПоЗначениямРазовыхПоказателей(ОписаниеВТСотрудникиПериоды, Начисления, Истина);
	ДобавитьНачисленияПоВидамВремени(ОписаниеВТСотрудникиПериоды, Начисления);
	ДобавитьНачисленияПоИзвестнымЗначениямОпределяющихПоказателей(ОписаниеВТСотрудникиПериоды, Начисления);
	
	РасчетЗарплатыРасширенныйПереопределяемый.ЗаполнитьДополнительныеНачисленияЗарплаты(МенеджерВременныхТаблиц, Начисления);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ДополнитьВТСотрудникиПериодыПрименениемНачислений(ОписаниеВТСотрудникиПериоды)
	
	УдалитьВТ = Новый Массив;
	
	СоздатьВТПрименениеПлановыхНачисленийИнтервалы(ОписаниеВТСотрудникиПериоды);
	
	ПоляИсключения = Новый Массив;
	ПоляИсключения.Добавить("Применение");
	ПоляИсключения.Добавить("ДатаНачала");
	ПоляИсключения.Добавить("ДатаОкончания");
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	ЕСТЬNULL(ПрименениеПлановыхНачислений.НачалоПериода, СотрудникиПериоды.ДатаНачала) КАК ДатаНачала,
		|	ЕСТЬNULL(ПрименениеПлановыхНачислений.КонецПериода, СотрудникиПериоды.ДатаОкончания) КАК ДатаОкончания,
		|	ЕСТЬNULL(ПрименениеПлановыхНачислений.Применение, ИСТИНА) КАК Применение
		|ПОМЕСТИТЬ ВТВсеСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийИнтервалы КАК ПрименениеПлановыхНачислений
		|		ПО (ПрименениеПлановыхНачислений.Сотрудник = СотрудникиПериоды.Сотрудник)
		|			И (ПрименениеПлановыхНачислений.ДатаНачала = СотрудникиПериоды.ДатаНачала)
		|			И (ПрименениеПлановыхНачислений.ДатаОкончания = СотрудникиПериоды.ДатаОкончания)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ИменаПолей,
		|	СотрудникиПериоды.ДатаНачала,
		|	МИНИМУМ(СотрудникиПериоды.ДатаОкончания),
		|	ИСТИНА
		|ИЗ
		|	(ВЫБРАТЬ
		|		&ИменаПолей,
		|		СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|		СотрудникиПериоды.ДатаНачала КАК ДатаНачала,
		|		ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПрименениеПлановыхНачислений.НачалоПериода, ДЕНЬ), СЕКУНДА, -1) КАК ДатаОкончания
		|	ИЗ
		|		ВТСотрудникиПериоды КАК СотрудникиПериоды
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийИнтервалы КАК ПрименениеПлановыхНачислений
		|			ПО (ПрименениеПлановыхНачислений.Сотрудник = СотрудникиПериоды.Сотрудник)
		|				И (ПрименениеПлановыхНачислений.ДатаНачала = СотрудникиПериоды.ДатаНачала)
		|				И (ПрименениеПлановыхНачислений.ДатаОкончания = СотрудникиПериоды.ДатаОкончания)
		|				И (СотрудникиПериоды.ДатаНачала < НАЧАЛОПЕРИОДА(ПрименениеПлановыхНачислений.НачалоПериода, ДЕНЬ))
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийИнтервалы КАК ПрименениеПлановыхНачисленийПервыйИнтервал
		|			ПО (ПрименениеПлановыхНачисленийПервыйИнтервал.Сотрудник = СотрудникиПериоды.Сотрудник)
		|				И (ПрименениеПлановыхНачисленийПервыйИнтервал.ДатаНачала = СотрудникиПериоды.ДатаНачала)
		|				И (ПрименениеПлановыхНачисленийПервыйИнтервал.ДатаОкончания = СотрудникиПериоды.ДатаОкончания)
		|				И (ПрименениеПлановыхНачисленийПервыйИнтервал.ДатаНачала = ПрименениеПлановыхНачисленийПервыйИнтервал.НачалоПериода)
		|	ГДЕ
		|		ПрименениеПлановыхНачисленийПервыйИнтервал.НачалоПериода ЕСТЬ NULL ) КАК СотрудникиПериоды
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.ДатаНачала,
		|	&ИменаПолей";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, ОписаниеВТСотрудникиПериоды.ИмяВТ, "СотрудникиПериоды", ПоляИсключения);
	Запрос.Выполнить();
	УничтожитьВТ(ОписаниеВТСотрудникиПериоды.ИмяВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	СотрудникиПериоды.Применение КАК НачислятьОплатуТруда,
		|	СотрудникиПериоды.ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТВсеСотрудникиПериоды КАК СотрудникиПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТВсеСотрудникиПериоды", "СотрудникиПериоды", ПоляИсключения);
	Запрос.Выполнить();
	УничтожитьВТ("ВТВсеСотрудникиПериоды");
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ДополнитьВТСотрудникиПериоды(ОписаниеВТСотрудникиПериоды)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриВыявленииНачисленийДополнитьВТСотрудникиПериоды(МенеджерВременныхТаблиц, ОписаниеВТСотрудникиПериоды, ДополнительныеСвойства);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПлановыеНачисления(ОписаниеВТСотрудникиПериоды, Начисления)
	
	ОписаниеВТНачисления = ОписаниеВТНачисления();
	ЗаполнитьЗначенияСвойств(ОписаниеВТНачисления, ОписаниеВТСотрудникиПериоды);
	ОписаниеВТНачисления.ИмяПоляНачисление = Неопределено;
	СоздатьВТПлановыеНачисленияИнтервалы(ОписаниеВТНачисления);
	
	УдалитьВТ = Новый Массив;
	
	ОписаниеВТНачисления = ОписаниеВТНачисления();
	ОписаниеВТНачисления.ИмяВТ = "ВТПлановыеНачисленияИнтервалы";
	ОписаниеВТНачисления.ИмяПоляНачисление = "Начисление";
	СоздатьВТРазбиениеСтрокНачислений(ОписаниеВТНачисления);
	УдалитьВТ.Добавить("ВТРазбиениеСтрокНачислений");
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("КатегорииПособий", ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком());
	Запрос.УстановитьПараметр("ПерерассчитыватьПособия", ПерерасчетЗарплаты.ПерерассчитыватьПособия(Организация));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.Организация,
		|	СотрудникиПериоды.НачислятьОплатуТруда,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РазбиениеСтрок.РазбиватьСтроку, ИСТИНА) = ИСТИНА
		|				И ПлановыеНачисления.Начисление.НачисляетсяВЦеломЗаМесяц = ЛОЖЬ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РазбиватьСтроку,
		|	ПлановыеНачисления.НачалоПериода КАК ДатаНачала,
		|	ПлановыеНачисления.КонецПериода КАК ДатаОкончания
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияИнтервалы КАК ПлановыеНачисления
		|		ПО (ПлановыеНачисления.Сотрудник = СотрудникиПериоды.Сотрудник)
		|			И (ПлановыеНачисления.ГоловнаяОрганизация = СотрудникиПериоды.ГоловнаяОрганизация)
		|			И (ПлановыеНачисления.ДатаНачала = СотрудникиПериоды.ДатаНачала)
		|			И (ПлановыеНачисления.ДатаОкончания = СотрудникиПериоды.ДатаОкончания)
		|			И (ПлановыеНачисления.Используется)
		|			И (ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ВТПоказателиРасчета КАК ПоказателиРасчета
		|				ГДЕ
		|					ПоказателиРасчета.ВидРасчета = ПлановыеНачисления.Начисление))
		|			И (ВЫБОР
		|				КОГДА ПлановыеНачисления.Начисление.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете)
		|					ТОГДА ИСТИНА В
		|							(ВЫБРАТЬ ПЕРВЫЕ 1
		|								ИСТИНА
		|							ИЗ
		|								ПланВидовРасчета.Начисления.МесяцыНачисления КАК НомераМесяцев
		|							ГДЕ
		|								НомераМесяцев.Ссылка = ПлановыеНачисления.Начисление
		|								И НомераМесяцев.Месяц = МЕСЯЦ(ПлановыеНачисления.НачалоПериода))
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА НЕ ПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииПособий)
		|					ТОГДА СотрудникиПериоды.НачислятьОплатуТруда = ИСТИНА
		|				ИНАЧЕ &ПерерассчитыватьПособия ИЛИ НЕ СотрудникиПериоды.ПериодПерерасчета
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазбиениеСтрокНачислений КАК РазбиениеСтрок
		|		ПО (РазбиениеСтрок.Начисление = ПлановыеНачисления.Начисление)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.Организация,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование,
		|	ДатаНачала";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Начисление") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
					ПредыдущаяСтрока = Неопределено;
					Пока Выборка.Следующий() Цикл
						ДобавитьНачисление(Начисления, Выборка, ПредыдущаяСтрока);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ДобавитьНачисление(Начисления, Выборка, ПредыдущаяСтрока, ПроверятьНаличие = Ложь)
	
	Если ПредыдущаяСтрока = Неопределено Тогда
		// Это первая строка, ее просто добавляем.
		ДобавитьСтрокуНачисления(Начисления, Выборка, ПредыдущаяСтрока, ПроверятьНаличие);
		Возврат;
	КонецЕсли;
	
	Если Выборка.РазбиватьСтроку Тогда
		// Это интервальное начисление.
		ДобавитьСтрокуНачисления(Начисления, Выборка, ПредыдущаяСтрока, ПроверятьНаличие);
		Возврат;
	КонецЕсли;
	
	Если НачалоМесяца(Выборка.ДатаНачала) <> НачалоМесяца(ПредыдущаяСтрока.ДатаНачала) Тогда
		// Это начисление из другого месяца.
		ДобавитьСтрокуНачисления(Начисления, Выборка, ПредыдущаяСтрока, ПроверятьНаличие);
		Возврат;
	КонецЕсли;
	
	// Просто продлеваем предыдущую строку.
	ПредыдущаяСтрока.ДатаОкончания = Выборка.ДатаОкончания;
	
КонецПроцедуры

Процедура ДобавитьСтрокуНачисления(Начисления, Выборка, ПредыдущаяСтрока, ПроверятьНаличие = Ложь)
	
	Если Не Выборка.РазбиватьСтроку Тогда
		ОтборСтрок = Новый Структура(
			"Сотрудник, 
			|ПериодДействия");
		ОтборСтрок.Сотрудник = Выборка.Сотрудник;
		ОтборСтрок.ПериодДействия = НачалоМесяца(Выборка.ДатаОкончания);
		НайденныеСтроки = ВычеркнутыеПериоды.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			// Не добавляем строку в целом за месяц, если в этом месяце по сотруднику последний период вычеркнут (из-за отбора).
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверятьНаличие Тогда
		ОтборСтрок = Новый Структура(
			"Сотрудник,
			|Начисление,
			|ДатаНачала,
			|ДатаОкончания");
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
		НайденныеСтроки = Начисления.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока = Начисления.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	ПредыдущаяСтрока = НоваяСтрока;
	
КонецПроцедуры

Процедура ДобавитьНачисленияПоЗначениямРазовыхПоказателей(ОписаниеВТСотрудникиПериоды, Начисления, ПроверятьНаличие = Ложь)
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.Организация,
		|	НАЧАЛОПЕРИОДА(СотрудникиПериоды.ДатаНачала, МЕСЯЦ) КАК Месяц
		|ПОМЕСТИТЬ ВТСотрудникиМесяцы
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ВТПоказателиРасчета КАК ПоказателиРасчета
		|			ГДЕ
		|				ПоказателиРасчета.РазовыйПоказательСотрудника = ИСТИНА
		|				И ПоказателиРасчета.ОпределяющийПоказательНачисления = ИСТИНА
		|				И ПоказателиРасчета.ВидРасчета.ВАрхиве = ЛОЖЬ)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСотрудникиМесяцы");
	
	Если Не ВТСодержитСтроки("ВТСотрудникиМесяцы") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	ОписаниеВТ = ОписаниеВТРазовыхПоказателей();
	ОписаниеВТ.ИмяВТ = "ВТСотрудникиМесяцы";
	СоздатьВТЗначенияРазовыхПоказателейСотрудников(ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.Организация КАК Организация,
		|	СотрудникиПериоды.ДатаНачала КАК ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания КАК ДатаОкончания,
		|	ПоказателиРасчета.ВидРасчета КАК Начисление,
		|	НЕ ПоказателиРасчета.ВидРасчета.НачисляетсяВЦеломЗаМесяц КАК РазбиватьСтроку
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.РазовыйПоказательСотрудника = ИСТИНА)
		|			И (ПоказателиРасчета.ОпределяющийПоказательНачисления = ИСТИНА)
		|			И (ПоказателиРасчета.ВидРасчета.ВАрхиве = ЛОЖЬ)
		|			И (ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ВТЗначенияРазовыхПоказателейСотрудников КАК ЗначенияПоказателей
		|				ГДЕ
		|					ЗначенияПоказателей.Сотрудник = СотрудникиПериоды.Сотрудник
		|					И ЗначенияПоказателей.Организация = СотрудникиПериоды.Организация
		|					И ЗначенияПоказателей.Показатель = ПоказателиРасчета.Показатель
		|					И ЗначенияПоказателей.ПериодДействия = НАЧАЛОПЕРИОДА(СотрудникиПериоды.ДатаНачала, МЕСЯЦ)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Организация,
		|	Начисление,
		|	ДатаНачала";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Начисление") Цикл
				ПредыдущаяСтрока = Неопределено;
				Пока Выборка.Следующий() Цикл
					ДобавитьНачисление(Начисления, Выборка, ПредыдущаяСтрока, ПроверятьНаличие);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ДобавитьНачисленияПоЗначениямОперативныхПоказателей(ОписаниеВТСотрудникиПериоды, Начисления)	
	Запрос = НовыйЗапрос();	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТПоказателиРасчета КАК ПоказателиРасчета
		|ГДЕ
		|	ПоказателиРасчета.ОпределяющийПоказательНачисления = ИСТИНА
		|	И ПоказателиРасчета.ВидРасчета.ВАрхиве = ЛОЖЬ
		|	И ПоказателиРасчета.ОперативныйПоказательСотрудника = ИСТИНА";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВТ = ОписаниеВТОперативныхПоказателей();
	ОписаниеВТ.ИмяВТ = ОписаниеВТСотрудникиПериоды.ИмяВТ;
	ОписаниеВТ.ИмяПоляНачалоПериода = ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода;
	ОписаниеВТ.ИмяПоляОкончаниеПериода = ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода;
	ОписаниеВТ.ИмяПоляФизическоеЛицо = "Сотрудник.ФизическоеЛицо";
	ОписаниеВТ.ИмяПоляГоловнаяОрганизация = "Организация.ГоловнаяОрганизация";
	
	СоздатьВТЗначенияОперативныхПоказателейСотрудников(ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.Организация КАК Организация,
		|	СотрудникиПериоды.ДатаНачала КАК ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания КАК ДатаОкончания,
		|	ПоказателиРасчета.ВидРасчета КАК Начисление,
		|	НЕ ПоказателиРасчета.ВидРасчета.НачисляетсяВЦеломЗаМесяц КАК РазбиватьСтроку
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ОперативныйПоказательСотрудника = ИСТИНА)
		|			И (ПоказателиРасчета.ОпределяющийПоказательНачисления = ИСТИНА)
		|			И (ПоказателиРасчета.ВидРасчета.ВАрхиве = ЛОЖЬ)
		|			И (ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ВТЗначенияОперативныхПоказателейСотрудников КАК ЗначенияПоказателей
		|				ГДЕ
		|					ЗначенияПоказателей.Сотрудник = СотрудникиПериоды.Сотрудник
		|					И ЗначенияПоказателей.Организация = СотрудникиПериоды.Организация
		|					И ЗначенияПоказателей.Показатель = ПоказателиРасчета.Показатель
		|					И ЗначенияПоказателей.Период МЕЖДУ СотрудникиПериоды.ДатаНачала И СотрудникиПериоды.ДатаОкончания))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Организация,
		|	Начисление,
		|	ДатаНачала,
		|	ДатаОкончания";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Начисление") Цикл
				ПредыдущаяСтрока = Неопределено;
				Пока Выборка.Следующий() Цикл
					ДобавитьНачисление(Начисления, Выборка, ПредыдущаяСтрока);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНачисленияПоВидамВремени(ОписаниеВТСотрудникиПериоды, Начисления)
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыВремени.Ссылка КАК Начисление,
		|	ВидыВремени.ВидВремени,
		|	ВидыВремени.ОпределяющийЗаПраздничныеДни КАК УчитыватьТолькоПраздники
		|ПОМЕСТИТЬ ВТВидыВремени
		|ИЗ
		|	ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|ГДЕ
		|	ВидыВремени.ОпределяющийВидВремени = ИСТИНА
		|	И ВидыВремени.Ссылка.ВАрхиве = ЛОЖЬ
		|	И ВидыВремени.Ссылка В
		|			(ВЫБРАТЬ
		|				ПоказателиРасчета.ВидРасчета
		|			ИЗ
		|				ВТПоказателиРасчета КАК ПоказателиРасчета)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТВидыВремени");
	
	Если Не ВТСодержитСтроки("ВТВидыВремени") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	МенеджерУчетаВремени = МенеджерУчетаВремени(ОписаниеВТСотрудникиПериоды);
	
	ОписаниеФильтра = МенеджерУчетаВремени.ОписаниеФильтраВТНаличиеЗарегистрированныхНаборовВидовВремениВИтервале();
	ОписаниеФильтра.ИмяТаблицы = ОписаниеВТСотрудникиПериоды.ИмяВТ;
	ОписаниеФильтра.ИмяПоляСотрудник = "Сотрудник";
	ОписаниеФильтра.ИмяПоляДатаНачала = ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода;
	ОписаниеФильтра.ИмяПоляДатаОкончания = ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода;
	
	ОписаниеТаблицы = МенеджерУчетаВремени.ОписаниеТаблицыНаборовВидовВремени();
	ОписаниеТаблицы.ИмяТаблицы = "ВТВидыВремени";
	ОписаниеТаблицы.ИмяПоляКлюч = "Начисление";
	ОписаниеТаблицы.ИмяПоляВидВремени = "ВидВремени";
	ОписаниеТаблицы.ИмяПоляУчитыватьТолькоПраздники = "УчитыватьТолькоПраздники";
	МенеджерУчетаВремени.СоздатьВТЗарегистрированныеНаборыВидовВремени(ОписаниеФильтра, ОписаниеТаблицы);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.Организация,
		|	СотрудникиПериоды.ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания,
		|	НачисленияПоВидамВремени.КлючНабораВидовВремени КАК Начисление,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК Вытесняемые
		|				ГДЕ
		|					Вытесняемые.ВидРасчета = НачисленияПоВидамВремени.КлючНабораВидовВремени)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВытесняющееНачисление
		|ПОМЕСТИТЬ ВТНачисленияПоВидамВремени
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗарегистрированныеНаборыВидовВремени КАК НачисленияПоВидамВремени
		|		ПО (НачисленияПоВидамВремени.Сотрудник = СотрудникиПериоды.Сотрудник)
		|			И (НачисленияПоВидамВремени.ДатаНачала = СотрудникиПериоды.ДатаНачала)
		|			И (НачисленияПоВидамВремени.ДатаОкончания = СотрудникиПериоды.ДатаОкончания)
		|			И (СотрудникиПериоды.НачислятьОплатуТруда = ИСТИНА)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТНачисленияПоВидамВремени");
	
	ОписаниеФильтра = МенеджерУчетаВремени.ОписаниеФильтраВТПериодыДействияНаборовВидовВремени();
	ОписаниеФильтра.ИмяТаблицы = "ВТНачисленияПоВидамВремени";
	ОписаниеФильтра.ИмяПоляСотрудник = "Сотрудник";
	ОписаниеФильтра.ИмяПоляДатаНачала = "ДатаНачала";
	ОписаниеФильтра.ИмяПоляДатаОкончания = "ДатаОкончания";
	ОписаниеФильтра.ИмяПоляКлючНабораВидовВремени = "Начисление";
	
	ОтборРассчитываемыйНабор = МенеджерУчетаВремени.ОписаниеОтбораПоТаблицеФильтру();
	ОтборРассчитываемыйНабор.ЛевоеЗначение = "ВытесняющееНачисление";
	ОтборРассчитываемыйНабор.ПравоеЗначение = "ИСТИНА";
	ОтборРассчитываемыйНабор.ПараметрПравоеЗначение = Истина;
	ОписаниеФильтра.Отбор.Добавить(ОтборРассчитываемыйНабор);
	
	МенеджерУчетаВремени.СоздатьВТПериодыДействияНаборовВидовВремени(ОписаниеФильтра, ОписаниеТаблицы);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияПоВидамВремени.Сотрудник,
		|	НачисленияПоВидамВремени.Организация,
		|	ЕСТЬNULL(ПериодыДействияВытесняющих.ДатаНачала, НачисленияПоВидамВремени.ДатаНачала) КАК ДатаНачала,
		|	ЕСТЬNULL(ПериодыДействияВытесняющих.ДатаОкончания, НачисленияПоВидамВремени.ДатаОкончания) КАК ДатаОкончания,
		|	НачисленияПоВидамВремени.Начисление
		|ИЗ
		|	ВТНачисленияПоВидамВремени КАК НачисленияПоВидамВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыДействияНаборовВидовВремени КАК ПериодыДействияВытесняющих
		|		ПО НачисленияПоВидамВремени.Сотрудник = ПериодыДействияВытесняющих.Сотрудник
		|			И НачисленияПоВидамВремени.Начисление = ПериодыДействияВытесняющих.КлючНабораВидовВремени
		|			И НачисленияПоВидамВремени.ДатаНачала = ПериодыДействияВытесняющих.ДатаНачалаИсходная
		|			И НачисленияПоВидамВремени.ДатаОкончания = ПериодыДействияВытесняющих.ДатаОкончанияИсходная";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ДобавитьНачисленияПоИзвестнымЗначениямОпределяющихПоказателей(ОписаниеВТСотрудникиПериоды, Начисления)
	
	Если ОпределяющиеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СоздатьВТОпределяющиеПоказатели();
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.Организация КАК Организация,
		|	СотрудникиПериоды.ДатаНачала КАК ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания КАК ДатаОкончания,
		|	ПоказателиРасчета.ВидРасчета КАК Начисление,
		|	НЕ ПоказателиРасчета.ВидРасчета.НачисляетсяВЦеломЗаМесяц КАК РазбиватьСтроку
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.РазовыйПоказательСотрудника = ИСТИНА
		|				ИЛИ ПоказателиРасчета.ОперативныйПоказательСотрудника = ИСТИНА)
		|			И (ПоказателиРасчета.ОпределяющийПоказательНачисления = ИСТИНА)
		|			И (ПоказателиРасчета.ВидРасчета.ВАрхиве = ЛОЖЬ)
		|			И (ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ВТОпределяющиеПоказатели КАК ЗначенияПоказателей
		|				ГДЕ
		|					ЗначенияПоказателей.Сотрудник = СотрудникиПериоды.Сотрудник
		|					И ЗначенияПоказателей.Организация = СотрудникиПериоды.Организация
		|					И ЗначенияПоказателей.Показатель = ПоказателиРасчета.Показатель
		|					И ЗначенияПоказателей.Дата МЕЖДУ СотрудникиПериоды.ДатаНачала И СотрудникиПериоды.ДатаОкончания))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Организация,
		|	Начисление,
		|	ДатаНачала,
		|	ДатаОкончания";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Начисление") Цикл
				ПредыдущаяСтрока = Неопределено;
				Пока Выборка.Следующий() Цикл
					ДобавитьНачисление(Начисления, Выборка, ПредыдущаяСтрока);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ВычеркнутьНачисленияПоПериодуВыявления(Начисления, ПериодВыявления)
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого Строка Из Начисления Цикл
		Если Не ДатаМежду(Строка.ДатаНачала, ПериодВыявления.ДатаНачала, ПериодВыявления.ДатаОкончания) 
			Или Не ДатаМежду(Строка.ДатаОкончания, ПериодВыявления.ДатаНачала, ПериодВыявления.ДатаОкончания) Тогда
			УдаляемыеСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Начисления.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВычеркнутьРанееОплаченныеПериоды(ОписаниеВТСотрудникиПериоды)
	Если Не НастройкиРасчета.ИсключатьРанееОплаченныеПериоды Тогда
		Возврат;
	КонецЕсли;	
		
	УдалитьВТ = Новый Массив;
	
	СоздатьВТРанееОплаченныеПериоды(ОписаниеВТСотрудникиПериоды);	
	УдалитьВТ.Добавить("ВТРанееОплаченныеПериоды");
	
	Если Не ВТСодержитСтроки("ВТРанееОплаченныеПериоды") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.Организация КАК Организация,
		|	СотрудникиПериоды.ДатаНачала КАК ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания КАК ДатаОкончания,
		|	ОплаченныеПериоды.ДатаНачала КАК Дата,
		|	&ИменаПолей
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРанееОплаченныеПериоды КАК ОплаченныеПериоды
		|		ПО СотрудникиПериоды.Сотрудник = ОплаченныеПериоды.Сотрудник
		|			И (ОплаченныеПериоды.ДатаНачала > СотрудникиПериоды.ДатаНачала)
		|			И (ОплаченныеПериоды.ДатаНачала < СотрудникиПериоды.ДатаОкончания)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.Организация,
		|	СотрудникиПериоды.ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания,
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОплаченныеПериоды.ДатаОкончания, ДЕНЬ), ДЕНЬ, 1),
		|	&ИменаПолей
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРанееОплаченныеПериоды КАК ОплаченныеПериоды
		|		ПО СотрудникиПериоды.Сотрудник = ОплаченныеПериоды.Сотрудник
		|			И (ОплаченныеПериоды.ДатаОкончания > СотрудникиПериоды.ДатаНачала)
		|			И (ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОплаченныеПериоды.ДатаОкончания, ДЕНЬ), ДЕНЬ, 1) < СотрудникиПериоды.ДатаОкончания)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Организация,
		|	ДатаНачала,
		|	ДатаОкончания,
		|	Дата";
	
	ПоляИсключения = Новый Массив;
	ПоляИсключения.Добавить("Сотрудник");
	ПоляИсключения.Добавить("Организация");
	ПоляИсключения.Добавить("ДатаНачала");
	ПоляИсключения.Добавить("ДатаОкончания");
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТСотрудникиПериоды", "СотрудникиПериоды", ПоляИсключения);
	
	СотрудникиПериоды = ТаблицаЗначенийПоОписаниюКолонок(Запрос.МенеджерВременныхТаблиц.Таблицы["ВТСотрудникиПериоды"].Колонки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("ДатаНачала") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("ДатаОкончания") Цикл
					НоваяСтрока = СотрудникиПериоды.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					ПрежняяСтрока = НоваяСтрока;
					Пока Выборка.Следующий() Цикл
						НоваяСтрока = СотрудникиПериоды.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						НоваяСтрока.ДатаНачала = Выборка.Дата;
						ПрежняяСтрока.ДатаОкончания = НачалоДня(Выборка.Дата) - 1;
						ПрежняяСтрока = НоваяСтрока;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СотрудникиПериоды", СотрудникиПериоды);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей
		|ПОМЕСТИТЬ ВТПересекающиесяПериоды
		|ИЗ
		|	&СотрудникиПериоды КАК СотрудникиПериоды";
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТСотрудникиПериоды", "СотрудникиПериоды");
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТПересекающиесяПериоды");
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей
		|ПОМЕСТИТЬ ВТВсеСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРанееОплаченныеПериоды КАК ОплаченныеПериоды
		|		ПО СотрудникиПериоды.Сотрудник = ОплаченныеПериоды.Сотрудник
		|			И (ОплаченныеПериоды.ДатаОкончания >= СотрудникиПериоды.ДатаНачала)
		|			И (ОплаченныеПериоды.ДатаНачала <= СотрудникиПериоды.ДатаОкончания)
		|ГДЕ
		|	ОплаченныеПериоды.Сотрудник ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ИменаПолей
		|ИЗ
		|	ВТПересекающиесяПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРанееОплаченныеПериоды КАК ОплаченныеПериоды
		|		ПО СотрудникиПериоды.Сотрудник = ОплаченныеПериоды.Сотрудник
		|			И (ОплаченныеПериоды.ДатаНачала = СотрудникиПериоды.ДатаНачала)
		|			И (НАЧАЛОПЕРИОДА(ОплаченныеПериоды.ДатаОкончания, ДЕНЬ) = НАЧАЛОПЕРИОДА(СотрудникиПериоды.ДатаОкончания, ДЕНЬ))
		|ГДЕ
		|	ОплаченныеПериоды.Сотрудник ЕСТЬ NULL ";
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТСотрудникиПериоды", "СотрудникиПериоды");
	Запрос.Выполнить();
	УничтожитьВТ("ВТСотрудникиПериоды");
	УдалитьВТ.Добавить("ВТВсеСотрудникиПериоды");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТВсеСотрудникиПериоды КАК СотрудникиПериоды";
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТВсеСотрудникиПериоды", "СотрудникиПериоды");
	Запрос.Выполнить();
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТМаксимальныеДатыПериодовСотрудников(ОписаниеВТСотрудникиПериоды)
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник,
		|	НАЧАЛОПЕРИОДА(СотрудникиПериоды.ДатаОкончания, МЕСЯЦ) КАК ПериодДействия,
		|	МАКСИМУМ(СотрудникиПериоды.ДатаОкончания) КАК МаксимальнаяДата
		|ПОМЕСТИТЬ ВТМаксимальныеДатыПериодовСотрудников
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиПериоды.Сотрудник,
		|	НАЧАЛОПЕРИОДА(СотрудникиПериоды.ДатаОкончания, МЕСЯЦ)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТаблицаСотрудниковПоСотрудникуПериоду(Сотрудник, Начало, Окончание)
	
	ТаблицаСотрудников = ТаблицаСотрудников();
	
	НоваяСтрока = ТаблицаСотрудников.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.ДатаНачала = Начало;
	НоваяСтрока.ДатаОкончания = Окончание;
	
	Возврат ТаблицаСотрудников;
	
КонецФункции

Функция ТаблицаСотрудниковПоСотрудникамПериоду(Сотрудники, Начало, Окончание)
	
	ТаблицаСотрудников = ТаблицаСотрудников();
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ДатаНачала = Начало;
		НоваяСтрока.ДатаОкончания = Окончание;
	КонецЦикла;
	
	Возврат ТаблицаСотрудников;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеНачислений

Процедура ЗаполнитьНачисленияСотрудников(Начисления)
	
	РазбитьСтрокиНачислений(Начисления);
	
	ЗаполнитьСведенияНачисленийДляРасчета(Начисления);
	ЗаполнитьЗначенияПоказателейНачислений(Начисления);
	
	ВычеркнутьСтрокиПоПоказателям(Начисления);
	
	Зарплата.Начисления = Начисления;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеУдержаний

Процедура ЗаполнитьУдержанияСотрудников(Удержания)
	
	РазбитьСтрокиУдержаний(Удержания);
	
	ЗаполнитьСведенияУдержанийДляРасчета(Удержания);
	ЗаполнитьЗначенияПоказателейУдержаний(Удержания);
	
	ВычеркнутьСтрокиПоПоказателям(Удержания);
	
	ОбъединитьУдержания(Удержания);
	
КонецПроцедуры

// Заполняет коллекцию Зарплата.Удержания удержаниями Физических лиц (плановыми и пр.), выявленными за период с Начало
// по Окончание.
//
// Параметры
//	ФизическиеЛица - тип Массив элементов типа СправочникСсылка.ФизическиеЛица,
//  Организация - тип СправочникСсылка.Организации
//	Начало - тип Дата, дата начала периода выявления удержаний,
//	Окончание - тип Дата, дата окончания периода выявления удержаний.
//
Процедура ЗаполнитьУдержанияФизическихЛицЗаПериод(ФизическиеЛица, ГоловнаяОрганизация, Начало, Окончание) Экспорт
	
	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
	ТаблицаФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));

	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		НоваяСтрока = ТаблицаФизическихЛиц.Добавить();
		НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
		НоваяСтрока.ДатаНачала = Начало;
		НоваяСтрока.ДатаОкончания = Окончание;
	КонецЦикла;

	Удержания = ТаблицаУдержаний();
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.ФизическоеЛицо,
		|	ФизическиеЛица.ГоловнаяОрганизация,
		|	ФизическиеЛица.ДатаНачала,
		|	ФизическиеЛица.ДатаОкончания
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
		|ИЗ
		|	&ТаблицаФизическихЛиц КАК ФизическиеЛица";
	Запрос.УстановитьПараметр("ТаблицаФизическихЛиц", ТаблицаФизическихЛиц);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФизическиеЛицаПериоды");
	
	ОписаниеВТУдержания = ОписаниеВТУдержания();
	СоздатьВТПоказателиРасчетаУдержания(ОписаниеВТУдержания);
	УдалитьВТ.Добавить("ВТПоказателиРасчета");
	
	ОписаниеВТФизическиеЛицаПериоды = ОписаниеВТФизическиеЛицаПериоды();
	ОписаниеВТФизическиеЛицаПериоды.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТФизическиеЛицаПериоды.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	ДобавитьПлановыеУдержания(ОписаниеВТФизическиеЛицаПериоды, Удержания);
	ДобавитьУдержанияПоЗначениямРазовыхПоказателей(ОписаниеВТФизическиеЛицаПериоды, Удержания);
	ДобавитьУдержанияПоЗначениямОперативныхПоказателей(ОписаниеВТФизическиеЛицаПериоды, Удержания);
	
	РасчетЗарплатыРасширенныйПереопределяемый.ЗаполнитьДополнительныеНачисленияЗарплаты(МенеджерВременныхТаблиц, Удержания);
	
	УничтожитьВТ(УдалитьВТ);
	
	ЗаполнитьУдержанияСотрудников(Удержания);
	
КонецПроцедуры

#КонецОбласти

#Область ВыявлениеУдержаний

Функция Удержания(ТаблицаСотрудников, Отборы = Неопределено)
	
	ИмяЗамера = "НачислениеЗарплаты.ВыявлениеУдержаний";
	Замер = НачатьЗамерВремени();
	
	Удержания = ТаблицаУдержаний();
	
	Если Не НастройкиРасчета.РассчитыватьУдержания Тогда
		Возврат Удержания;
	КонецЕсли;
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда
		Возврат Удержания;
	КонецЕсли;
	
	ЗаполнитьВыявленнымиУдержаниями(ТаблицаСотрудников, Удержания);
	
	РазбитьСтрокиУдержаний(Удержания);
	
	ЗаполнитьСведенияУдержанийДляРасчета(Удержания);
	ЗаполнитьЗначенияПоказателейУдержаний(Удержания);
	
	ВычеркнутьСтрокиПоПоказателям(Удержания);
	ВычеркнутьСтрокиПоОтборуПерерасчетовУдержаний(Удержания);
	ВычеркнутьСтрокиПоРабочимМестам(Удержания, ТаблицаСотрудников);
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	Возврат Удержания;
	
КонецФункции

Процедура ЗаполнитьВыявленнымиУдержаниями(ТаблицаСотрудников, Удержания)
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;

	// Получаем физических лиц из сотрудников.
	СоздатьВТСотрудникиПериоды(ТаблицаСотрудников);
	УдалитьВТ.Добавить("ВТСотрудникиПериоды");
	
	ОписаниеВТСотрудникиПериоды = ОписаниеВТСотрудникиПериоды();
	ОписаниеВТСотрудникиПериоды.ИмяВТ = "ВТСотрудникиПериоды";
	ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТФизическиеЛицаСотрудников(ОписаниеВТСотрудникиПериоды);
	УдалитьВТ.Добавить("ВТФизическиеЛицаСотрудников");
	
	// Преобразованная исходная таблица с физическими лицами и головными организациями.
	СоздатьВТФизическиеЛицаПериоды(ОписаниеВТСотрудникиПериоды);
	УдалитьВТ.Добавить("ВТФизическиеЛицаПериоды");
	
	ОписаниеВТУдержания = ОписаниеВТУдержания();
	ОписаниеВТУдержания.ИмяВТ = "ВТСотрудникиПериоды";
	ОписаниеВТУдержания.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТУдержания.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТПоказателиРасчетаУдержания(ОписаниеВТУдержания);
	УдалитьВТ.Добавить("ВТПоказателиРасчета");
	
	ОписаниеВТФизическиеЛицаПериоды = ОписаниеВТФизическиеЛицаПериоды();
	ОписаниеВТФизическиеЛицаПериоды.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТФизическиеЛицаПериоды.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	ДобавитьПлановыеУдержания(ОписаниеВТФизическиеЛицаПериоды, Удержания);
	ДобавитьУдержанияПоЗначениямРазовыхПоказателей(ОписаниеВТФизическиеЛицаПериоды, Удержания);
	ДобавитьУдержанияПоЗначениямОперативныхПоказателей(ОписаниеВТФизическиеЛицаПериоды, Удержания);
	ДобавитьПогашениеЗадолженностиПоУдержаниям(ОписаниеВТФизическиеЛицаПериоды, Удержания);
	
	ПерерасчетЗарплаты.ЗаполнитьПерерассчитываемыеУдержания(МенеджерВременныхТаблиц, Удержания, ДополнительныеСвойства);
	
	РасчетЗарплатыРасширенныйПереопределяемый.ЗаполнитьДополнительныеУдержанияЗарплаты(МенеджерВременныхТаблиц, Удержания);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ДобавитьПлановыеУдержания(ОписаниеВТФизическиеЛицаПериоды, Удержания)
	
	ОписаниеВТУдержания = ОписаниеВТУдержания();
	ЗаполнитьЗначенияСвойств(ОписаниеВТУдержания, ОписаниеВТФизическиеЛицаПериоды);
	ОписаниеВТУдержания.ИмяПоляУдержание = Неопределено;
	СоздатьВТПлановыеУдержанияИнтервалы(ОписаниеВТУдержания);
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛицаПериоды.ФизическоеЛицо,
		|	ФизическиеЛицаПериоды.ГоловнаяОрганизация,
		|	ПлановыеУдержания.Удержание,
		|	ПлановыеУдержания.ДокументОснование,
		|	ВЫБОР
		|		КОГДА ПлановыеУдержания.ДатаНачала > ФизическиеЛицаПериоды.ДатаНачала
		|			ТОГДА ПлановыеУдержания.ДатаНачала
		|		ИНАЧЕ ФизическиеЛицаПериоды.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ПлановыеУдержания.ДатаОкончания < ФизическиеЛицаПериоды.ДатаОкончания
		|			ТОГДА ПлановыеУдержания.ДатаОкончания
		|		ИНАЧЕ ФизическиеЛицаПериоды.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания
		|ИЗ
		|	ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеУдержанияИнтервалы КАК ПлановыеУдержания
		|		ПО (ПлановыеУдержания.ФизическоеЛицо = ФизическиеЛицаПериоды.ФизическоеЛицо)
		|			И (ПлановыеУдержания.Организация = ФизическиеЛицаПериоды.ГоловнаяОрганизация)
		|			И (ПлановыеУдержания.ДатаНачала < ФизическиеЛицаПериоды.ДатаОкончания)
		|			И (ПлановыеУдержания.ДатаОкончания > ФизическиеЛицаПериоды.ДатаНачала)
		|			И (ПлановыеУдержания.Используется)
		|			И (ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ВТПоказателиРасчета КАК ПоказателиРасчета
		|				ГДЕ
		|					ПоказателиРасчета.ВидРасчета = ПлановыеУдержания.Удержание))";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаПериоды", ОписаниеВТФизическиеЛицаПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.ДатаНачала", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.ДатаОкончания", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляОкончаниеПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Удержания.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьУдержанияПоЗначениямРазовыхПоказателей(ОписаниеВТФизическиеЛицаПериоды, Удержания)
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаПериоды.ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(ФизическиеЛицаПериоды.ДатаНачала, МЕСЯЦ) КАК Месяц
		|ПОМЕСТИТЬ ВТФизическиеЛицаМесяцы
		|ИЗ
		|	ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ВТПоказателиРасчета КАК ПоказателиУдержаний
		|			ГДЕ
		|				ПоказателиУдержаний.РазовыйПоказательСотрудника = ИСТИНА
		|				И ПоказателиУдержаний.ОпределяющийПоказательУдержания = ИСТИНА)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаПериоды", ОписаниеВТФизическиеЛицаПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.ДатаНачала", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.ДатаОкончания", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляОкончаниеПериода);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФизическиеЛицаМесяцы");
	
	Если Не ВТСодержитСтроки("ВТФизическиеЛицаМесяцы") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	ОписаниеВТ = ОписаниеВТРазовыхПоказателей();
	ОписаниеВТ.ИмяВТ = "ВТФизическиеЛицаМесяцы";
	СоздатьВТЗначенияРазовыхПоказателейФизическихЛиц(ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаПериоды.ФизическоеЛицо,
		|	ФизическиеЛицаПериоды.ГоловнаяОрганизация,
		|	ФизическиеЛицаПериоды.ДатаНачала,
		|	ФизическиеЛицаПериоды.ДатаОкончания,
		|	ПоказателиУдержаний.ВидРасчета КАК Удержание
		|ИЗ
		|	ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.РазовыйПоказательСотрудника = ИСТИНА)
		|			И (ПоказателиУдержаний.ОпределяющийПоказательУдержания = ИСТИНА)
		|			И (ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ВТЗначенияРазовыхПоказателейФизическихЛиц КАК ЗначенияПоказателей
		|				ГДЕ
		|					ЗначенияПоказателей.ФизическоеЛицо = ФизическиеЛицаПериоды.ФизическоеЛицо
		|					И ЗначенияПоказателей.ГоловнаяОрганизация = ФизическиеЛицаПериоды.ГоловнаяОрганизация
		|					И ЗначенияПоказателей.Показатель = ПоказателиУдержаний.Показатель
		|					И ЗначенияПоказателей.ПериодДействия = НАЧАЛОПЕРИОДА(ФизическиеЛицаПериоды.ДатаНачала, МЕСЯЦ)))";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаПериоды", ОписаниеВТФизическиеЛицаПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.ДатаНачала", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.ДатаОкончания", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляОкончаниеПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Удержания.Добавить(), Выборка);
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ДобавитьУдержанияПоЗначениямОперативныхПоказателей(ОписаниеВТФизическиеЛицаПериоды, Удержания)
		
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	ВТПоказателиРасчета КАК ПоказателиУдержаний
	|ГДЕ
	|	ПоказателиУдержаний.ОперативныйПоказательСотрудника = ИСТИНА
	|	И ПоказателиУдержаний.ОпределяющийПоказательУдержания = ИСТИНА";
	Запрос.Выполнить();
		
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВТ = ОписаниеВТОперативныхПоказателей();
	ОписаниеВТ.ИмяВТ = ОписаниеВТФизическиеЛицаПериоды.ИмяВТ;
	ОписаниеВТ.ИмяПоляНачалоПериода = ОписаниеВТФизическиеЛицаПериоды.ИмяПоляНачалоПериода;
	ОписаниеВТ.ИмяПоляОкончаниеПериода = ОписаниеВТФизическиеЛицаПериоды.ИмяПоляОкончаниеПериода;
	ОписаниеВТ.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	ОписаниеВТ.ИмяПоляГоловнаяОрганизация = "ГоловнаяОрганизация";

	СоздатьВТЗначенияОперативныхПоказателейСотрудников(ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаПериоды.ФизическоеЛицо,
		|	ФизическиеЛицаПериоды.ГоловнаяОрганизация,
		|	ФизическиеЛицаПериоды.ДатаНачала КАК ДатаНачала,
		|	ФизическиеЛицаПериоды.ДатаОкончания КАК ДатаОкончания,
		|	ПоказателиУдержаний.ВидРасчета КАК Удержание
		|ИЗ
		|	ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.ОперативныйПоказательСотрудника = ИСТИНА)
		|			И (ПоказателиУдержаний.ОпределяющийПоказательУдержания = ИСТИНА)
		|			И (ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ВТЗначенияОперативныхПоказателейСотрудников КАК ЗначенияПоказателей
		|				ГДЕ
		|					ЗначенияПоказателей.ФизическоеЛицо = ФизическиеЛицаПериоды.ФизическоеЛицо
		|					И ЗначенияПоказателей.ГоловнаяОрганизация = ФизическиеЛицаПериоды.ГоловнаяОрганизация
		|					И ЗначенияПоказателей.Показатель = ПоказателиУдержаний.Показатель
		|					И ЗначенияПоказателей.Период МЕЖДУ ФизическиеЛицаПериоды.ДатаНачала И ФизическиеЛицаПериоды.ДатаОкончания))";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаПериоды", ОписаниеВТФизическиеЛицаПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.ДатаНачала", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.ДатаОкончания", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляОкончаниеПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Удержания.Добавить(), Выборка);
	КонецЦикла;
		
КонецПроцедуры

Процедура ДобавитьУдержанияПериодыКУдержаниям(Сотрудник, УдержанияПериоды, Удержания)
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПериоды, Удержания);
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыСотрудника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сотрудник, "ФизическоеЛицо, ГоловнаяОрганизация");
	УстановитьПривилегированныйРежим(Ложь);
	
	Удержания.ЗаполнитьЗначения(РеквизитыСотрудника.ФизическоеЛицо, "ФизическоеЛицо");
	Удержания.ЗаполнитьЗначения(РеквизитыСотрудника.ГоловнаяОрганизация, "ГоловнаяОрганизация");
	
КонецПроцедуры

Процедура ДобавитьПогашениеЗадолженностиПоУдержаниям(ОписаниеВТФизическиеЛицаПериоды, Удержания)
	
	Если НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлаты") Тогда 
		Возврат;
	КонецЕсли;
	
	СоздатьВТЗадолженностьПоУдержаниямФизическихЛиц(ОписаниеВТФизическиеЛицаПериоды);
	
	СписокОснований = Новый Массив;
	Для Каждого СтрокаУдержаний Из Удержания Цикл
		Если СтрокаУдержаний.ДатаНачала >= МесяцНачисления Тогда 
			СписокОснований.Добавить(СтрокаУдержаний.ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("СписокОснований", СписокОснований);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Организация КАК Организация,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Удержание КАК Удержание,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТПогашениеЗадолженности
		|ИЗ
		|	ВТЗадолженностьПоУдержаниямФизическихЛиц КАК ЗадолженностьПоУдержаниямФизическихЛиц
		|ГДЕ
		|	НЕ ЗадолженностьПоУдержаниямФизическихЛиц.ДокументОснование В (&СписокОснований)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаПериоды", ОписаниеВТФизическиеЛицаПериоды.ИмяВТ);
	Запрос.Выполнить();
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТПогашениеЗадолженности") Тогда
		Возврат;
	КонецЕсли;
	
	// Платежные агенты
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент КАК ИсполнительныйДокумент
		|ПОМЕСТИТЬ ВТИсполнительныеДокументы
		|ИЗ
		|	РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу.СрезПоследних(
		|			&МесяцНачисления,
		|			ИсполнительныйДокумент В
		|				(ВЫБРАТЬ
		|					ПогашениеЗадолженности.ДокументОснование
		|				ИЗ
		|					ВТПогашениеЗадолженности КАК ПогашениеЗадолженности)) КАК УсловияУдержанияПоИсполнительномуДокументу
		|ГДЕ
		|	УсловияУдержанияПоИсполнительномуДокументу.ПлатежныйАгент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеУдержания.ДокументОснование КАК ДокументОснование,
		|	ПлановыеУдержания.Удержание КАК Удержание,
		|	МАКСИМУМ(ПлановыеУдержания.ДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТПлановыеУдержанияМаксимальныеДаты
		|ИЗ
		|	ВТПлановыеУдержанияИнтервалы КАК ПлановыеУдержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
		|		ПО ПлановыеУдержания.Удержание = Удержания.Ссылка
		|			И (Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсполнительныеДокументы КАК ИсполнительныеДокументы
		|		ПО ПлановыеУдержания.ДокументОснование = ИсполнительныеДокументы.ИсполнительныйДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеУдержания.ДокументОснование,
		|	ПлановыеУдержания.Удержание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеУдержания.Организация КАК ГоловнаяОрганизация,
		|	ПлановыеУдержания.Организация КАК Организация,
		|	ПлановыеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПлановыеУдержания.Удержание КАК Удержание,
		|	ПлановыеУдержания.ДокументОснование КАК ДокументОснование,
		|	&МесяцНачисления КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ) КАК ДатаОкончания
		|ИЗ
		|	ВТПлановыеУдержанияИнтервалы КАК ПлановыеУдержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеУдержанияМаксимальныеДаты КАК ПлановыеУдержанияМаксимальныеДаты
		|		ПО ПлановыеУдержания.ДокументОснование = ПлановыеУдержанияМаксимальныеДаты.ДокументОснование
		|			И ПлановыеУдержания.Удержание = ПлановыеУдержанияМаксимальныеДаты.Удержание
		|			И ПлановыеУдержания.ДатаНачала = ПлановыеУдержанияМаксимальныеДаты.ДатаНачала
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПогашениеЗадолженности.Организация,
		|	ПогашениеЗадолженности.Организация,
		|	ПогашениеЗадолженности.ФизическоеЛицо,
		|	ПогашениеЗадолженности.Удержание,
		|	ПогашениеЗадолженности.ДокументОснование,
		|	&МесяцНачисления,
		|	КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|ИЗ
		|	ВТПогашениеЗадолженности КАК ПогашениеЗадолженности
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ДокументОснование,
		|	Удержание";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Удержания.Добавить(), Выборка);
	КонецЦикла;
	
	ИменаВТ = Новый Массив;
	ИменаВТ.Добавить("ВТИсполнительныеДокументы");
	ИменаВТ.Добавить("ВТПлановыеУдержанияМаксимальныеДаты");
	УничтожитьВТ(ИменаВТ);
	
КонецПроцедуры

Процедура СоздатьВТЗадолженностьПоУдержаниямФизическихЛиц(ОписаниеВТФизическиеЛицаПериоды)
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Организация КАК Организация,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Удержание КАК Удержание,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ДокументОснование КАК ДокументОснование,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.СуммаОстаток КАК Сумма
		|ПОМЕСТИТЬ ВТЗадолженностьПоУдержаниямФизическихЛицПредварительно
		|ИЗ
		|	РегистрНакопления.ЗадолженностьПоУдержаниямФизическихЛиц.Остатки(
		|			&МесяцНачисления,
		|			(Организация, ФизическоеЛицо) В
		|				(ВЫБРАТЬ
		|					ФизическиеЛицаПериоды.ГоловнаяОрганизация,
		|					ФизическиеЛицаПериоды.ФизическоеЛицо
		|				ИЗ
		|					ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды)) КАК ЗадолженностьПоУдержаниямФизическихЛиц
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Организация,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Удержание,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ДокументОснование,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Сумма
		|ИЗ
		|	РегистрНакопления.ЗадолженностьПоУдержаниямФизическихЛиц КАК ЗадолженностьПоУдержаниямФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		|		ПО ЗадолженностьПоУдержаниямФизическихЛиц.Организация = ФизическиеЛицаПериоды.ГоловнаяОрганизация
		|			И ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо = ФизическиеЛицаПериоды.ФизическоеЛицо
		|			И (ЗадолженностьПоУдержаниямФизическихЛиц.Период < &МесяцНачисления)
		|			И (ЗадолженностьПоУдержаниямФизическихЛиц.Регистратор = &ИсключаемыйРегистратор)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Организация,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Удержание,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ДокументОснование,
		|	-ЗадолженностьПоУдержаниямФизическихЛиц.Сумма
		|ИЗ
		|	РегистрНакопления.ЗадолженностьПоУдержаниямФизическихЛиц КАК ЗадолженностьПоУдержаниямФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		|		ПО ЗадолженностьПоУдержаниямФизическихЛиц.Организация = ФизическиеЛицаПериоды.ГоловнаяОрганизация
		|			И ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо = ФизическиеЛицаПериоды.ФизическоеЛицо
		|			И (ЗадолженностьПоУдержаниямФизическихЛиц.Период = &МесяцНачисления)
		|			И (ЗадолженностьПоУдержаниямФизическихЛиц.Регистратор <> &ИсключаемыйРегистратор)
		|			И (ЗадолженностьПоУдержаниямФизическихЛиц.ПогашениеЗадолженности)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадолженностьПоУдержаниямФизическихЛицПредварительно.Организация КАК Организация,
		|	ЗадолженностьПоУдержаниямФизическихЛицПредварительно.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТЗадолженностьПоУдержаниямФизическихЛицПредварительно КАК ЗадолженностьПоУдержаниямФизическихЛицПредварительно
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация";
	
	ИсключаемыеСотрудники = Новый Массив;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаПериоды", ОписаниеВТФизическиеЛицаПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.ГоловнаяОрганизация", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляГоловнаяОрганизация);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл 
		ГоловнаяОрганизация = Выборка.Организация;
	    ФизическиеЛица = Новый Массив;
		Пока Выборка.Следующий() Цикл 
			ФизическиеЛица.Добавить(Выборка.ФизическоеЛицо);
		КонецЦикла;
		СписокСотрудников = Обработки.МенеджерРасчетаЗарплаты.ИсключаемыеИзРасчетаВзысканийСотрудники(ГоловнаяОрганизация, МесяцНачисления, ФизическиеЛица);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеСотрудники, СписокСотрудников);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ИсключаемыеСотрудники", ИсключаемыеСотрудники);
		
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТИсключаемыеФизическиеЛица
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&ИсключаемыеСотрудники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Организация КАК Организация,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Удержание КАК Удержание,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ДокументОснование КАК ДокументОснование,
		|	СУММА(ЗадолженностьПоУдержаниямФизическихЛиц.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТЗадолженностьПоУдержаниямФизическихЛиц
		|ИЗ
		|	ВТЗадолженностьПоУдержаниямФизическихЛицПредварительно КАК ЗадолженностьПоУдержаниямФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеФизическиеЛица КАК ИсключаемыеФизическиеЛица
		|		ПО ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо = ИсключаемыеФизическиеЛица.ФизическоеЛицо
		|ГДЕ
		|	ИсключаемыеФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Организация,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Удержание,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ДокументОснование
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗадолженностьПоУдержаниямФизическихЛиц.Сумма) > 0";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаПериоды", ОписаниеВТФизическиеЛицаПериоды.ИмяВТ);
	Запрос.Выполнить();
	
	ИменаВТ = Новый Массив;
	ИменаВТ.Добавить("ВТЗадолженностьПоУдержаниямФизическихЛицПредварительно");
	ИменаВТ.Добавить("ВТИсключаемыеФизическиеЛица");
	УничтожитьВТ(ИменаВТ);
	
КонецПроцедуры

#КонецОбласти

#Область РазбиениеСтрокНачислений

Процедура РазбитьСтрокиНачислений(Начисления)
	
	// Анализируем виды расчета на предмет того, что могло бы их разрезать.
		// - кадровые изменения
		// - общий график
		// - изменение значений показателей
		// - даты начала месяцев.
		
		// * - изменение периодических показателей организаций и подразделений
		// * - для начислений, в базу которых входят плановые начисления, 
		// датами разреза является еще и даты изменения этих плановых начислений и/или их показателей.
		
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СтрокиПоИдентификатору = Новый Соответствие;
	СоздатьВТНачисления(Начисления, СтрокиПоИдентификатору);
	УдалитьВТ.Добавить("ВТНачисления");
	УдалитьВТ.Добавить("ВТИзвестныеПоказателиНачислений");
	
	// Определяем необходимость разбиения.
	ОписаниеВТ = ОписаниеВТНачисления();
	ОписаниеВТ.ИмяВТ = "ВТНачисления";
	ОписаниеВТ.ИмяПоляНачисление = "Начисление";
	СоздатьВТПоказателиРасчетаНачисления(ОписаниеВТ);
	УдалитьВТ.Добавить("ВТПоказателиРасчета");
	
	СоздатьВТТребованияНачислений();
	УдалитьВТ.Добавить("ВТТребованияНачислений");
	
	СоздатьВТУсловияРазбиенияСтрокНачислений();
	УдалитьВТ.Добавить("ВТУсловияРазбиения");
	УсловияРазбиения = УсловияРазбиенияСтрокНачислений();
	
	// Последовательно пересоздаем ВТНачисления, разбивая интервалы по датам изменений.
	ОписаниеВТСПериодами = ОписаниеВТНачисленияКакВТСПериодами();
	РазбитьВТСПериодамиПоМесяцам(ОписаниеВТСПериодами, УсловияРазбиения);
	РазбитьВТНачисленияПоКадровымИзменениям(УсловияРазбиения);
	
	РазбитьВТНачисленияПоИзменениямГрафика(УсловияРазбиения);
	РазбитьВТНачисленияПоИзменениямВремяВЧасах(УсловияРазбиения);
	
	РазбитьВТНачисленияПоИзменениямЗначенийПоказателейСотрудников(УсловияРазбиения);
	РазбитьВТНачисленияПоИзменениямЗначенийПоказателейОрганизации(УсловияРазбиения);
	РазбитьВТНачисленияПоИзменениямЗначенийПоказателейПодразделения(УсловияРазбиения);
	
	РазбитьВТНачисленияПоПрименениюПлановыхНачислений(УсловияРазбиения);
	
	РазбитьВТНачисленияПоДатамРазбиенияБазовыхНачислений(УсловияРазбиения);
	РазбитьВТНачисленияПоДатамНачисленийЗависящихОтСтажа(УсловияРазбиения);
	РазбитьВТНачисленияПоДатамУсловийОплатыПособий(УсловияРазбиения);
	РазбитьВТНачисленияПоДатамПроцентаСевернойНадбавки(УсловияРазбиения);
	РазбитьВТНачисленияПоДатамБазовогоТарифаГруппы(УсловияРазбиения);
	РазбитьВТНачисленияПоДатамИзмененияСовокупнойСтавки(УсловияРазбиения);
	
	РазбитьВТНачисленияПоДругимДатам(УсловияРазбиения);
	
	// Разбиваем физически строки таблицы Начисления по данным ВТНачисления.
	РазбитьСтрокиТаблицыПоДатам(ОписаниеВТСПериодами, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТНачисленияПоДатамРазбиенияБазовыхНачислений(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияБазовыхНачислений Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	БазовыеНачисления.ДатаНачала КАК Дата
		|ПОМЕСТИТЬ ВТДатыПоИдентификатору
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияРазбиения КАК УсловияРазбиения
		|		ПО (УсловияРазбиения.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (УсловияРазбиения.УчитыватьИзмененияБазовыхНачислений = ИСТИНА)
		|			И (УсловияРазбиения.РазбиватьСтроку = ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК БазовыеВидыРасчета
		|		ПО (БазовыеВидыРасчета.Ссылка = Начисления.Начисление)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК БазовыеНачисления
		|		ПО (БазовыеВидыРасчета.ВидРасчета = БазовыеНачисления.Начисление)
		|			И Начисления.Сотрудник = БазовыеНачисления.Сотрудник
		|			И (БазовыеНачисления.ДатаНачала > Начисления.ДатаНачала)
		|			И (БазовыеНачисления.ДатаНачала < Начисления.ДатаОкончания)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДатыПоИдентификатору");
	
	ОписаниеВТСПериодами = ОписаниеВТНачисленияКакВТСПериодами();
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТСПериодами);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТНачисленияПоДатамНачисленийЗависящихОтСтажа(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияСтажа Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель КАК Показатель,
		|	ПоказателиРасчета.Показатель.ВидСтажа КАК ВидСтажа,
		|	Начисления.ДатаНачала КАК Дата,
		|	Начисления.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериодыВидыСтажа
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиРасчета.ПоказательЧисловойЗависящийОтСтажа = ИСТИНА)";
	Запрос.Выполнить();
	
	УдалитьВТ.Добавить("ВТСотрудникиПериодыВидыСтажа");
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчетРасширенный.СоздатьВТСтажиСотрудников(МенеджерВременныхТаблиц, Ложь, "ВТСотрудникиПериодыВидыСтажа");
	УстановитьПривилегированныйРежим(Ложь);
	
	УдалитьВТ.Добавить("ВТСтажиСотрудников");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтажиСотрудников.НачалоБудущегоМесяца КАК Дата,
		|	СотрудникиПериодыВидыСтажа.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТДатыПоИдентификатору
		|ИЗ
		|	ВТСотрудникиПериодыВидыСтажа КАК СотрудникиПериодыВидыСтажа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажа
		|		ПО СотрудникиПериодыВидыСтажа.Показатель = ШкалаОценкиСтажа.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажиСотрудников КАК СтажиСотрудников
		|		ПО СотрудникиПериодыВидыСтажа.Сотрудник = СтажиСотрудников.Сотрудник
		|			И СотрудникиПериодыВидыСтажа.ВидСтажа = СтажиСотрудников.ВидСтажа
		|			И (СтажиСотрудников.НачалоБудущегоМесяца МЕЖДУ СотрудникиПериодыВидыСтажа.Дата И СотрудникиПериодыВидыСтажа.ДатаОкончания)
		|ГДЕ
		|	НЕ СтажиСотрудников.Прерван
		|	И ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа = СтажиСотрудников.РазмерМесяцев + 1";
	
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДатыПоИдентификатору");
	
	ОписаниеВТСПериодами = ОписаниеВТНачисленияКакВТСПериодами();
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТСПериодами);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТНачисленияПоДатамУсловийОплатыПособий(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияУсловийОплатыПособия Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	УчетПособийСоциальногоСтрахованияРасширенный.СоздатьВТДатыИзмененияУсловийОплатыПособийДоПолутораЛет(МенеджерВременныхТаблиц, "ВТДатыПоИдентификатору");
	УдалитьВТ.Добавить("ВТДатыПоИдентификатору");
	
	ОписаниеВТСПериодами = ОписаниеВТНачисленияКакВТСПериодами();
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТСПериодами);
	
	УничтожитьВТ(УдалитьВТ);

КонецПроцедуры

Процедура РазбитьВТНачисленияПоДатамПроцентаСевернойНадбавки(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьПроцентСевернойНадбавки Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	КадровыйУчетРасширенный.СоздатьВТДатыИзмененияСевернойНадбавки(МенеджерВременныхТаблиц, "ВТДатыПоИдентификатору");
	УдалитьВТ.Добавить("ВТДатыПоИдентификатору");
	
	ОписаниеВТСПериодами = ОписаниеВТНачисленияКакВТСПериодами();
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТСПериодами);
	
	УничтожитьВТ(УдалитьВТ);

КонецПроцедуры

Процедура РазбитьВТНачисленияПоДатамБазовогоТарифаГруппы(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияБазовогоТарифаГруппы Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВТ = ОписаниеВТНачисления();
	ЗаполнитьКадровуюДолжностьВТСПериодами(ОписаниеВТ);
	
	УдалитьВТ = Новый Массив;
	
	РазрядыКатегорииДолжностей.СоздатьВТДатыИзмененияБазовогоТарифа(МенеджерВременныхТаблиц, "ВТДатыПоИдентификатору");
	УдалитьВТ.Добавить("ВТДатыПоИдентификатору");
	
	ОписаниеВТСПериодами = ОписаниеВТНачисленияКакВТСПериодами();
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТСПериодами);
	
	УничтожитьВТ(УдалитьВТ);

КонецПроцедуры

Процедура РазбитьВТНачисленияПоДатамИзмененияСовокупнойСтавки(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияСовокупнойСтавки Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст =                                                                                                        
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания
		|ПОМЕСТИТЬ ВТФильтрЗначенийСовокупнойСтавки
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияРазбиения КАК УсловияРазбиения
		|		ПО (УсловияРазбиения.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (УсловияРазбиения.УчитыватьИзмененияСовокупнойСтавки = ИСТИНА)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрЗначенийСовокупнойСтавки");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТФильтрЗначенийСовокупнойСтавки", "Сотрудник");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПлановыйФОТИтоги", 
		МенеджерВременныхТаблиц, 
		Истина, 
		ОписаниеФильтра);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ЗначениеСовокупныхСтавок.Период КАК Дата
		|ПОМЕСТИТЬ ВТДатыПоИдентификатору
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияРазбиения КАК УсловияРазбиения
		|		ПО (УсловияРазбиения.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (УсловияРазбиения.УчитыватьИзмененияСовокупнойСтавки = ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыйФОТИтоги КАК ЗначениеСовокупныхСтавок
		|		ПО (ЗначениеСовокупныхСтавок.Сотрудник = Начисления.Сотрудник)
		|			И (ЗначениеСовокупныхСтавок.Период > Начисления.ДатаНачала)
		|			И (ЗначениеСовокупныхСтавок.Период < Начисления.ДатаОкончания)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДатыПоИдентификатору");
	
	ОписаниеВТСПериодами = ОписаниеВТНачисленияКакВТСПериодами();
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТСПериодами);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТНачисленияПоДругимДатам(УсловияРазбиения)
	
	ИменаВТ = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.СоздатьВТДатыИзмененияОкладовЗаКлассныйЧин(МенеджерВременныхТаблиц, ИменаВТ);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.СоздатьВТДатыИзмененияОкладовЗаЗвание(МенеджерВременныхТаблиц, ИменаВТ);
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйПереопределяемый.СоздатьВТДатыИзмененияОтдельныхНачислений(МенеджерВременныхТаблиц, ИменаВТ);
	
	Если ИменаВТ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "";
	Для Каждого ИмяВТ Из ИменаВТ Цикл
		ТекстФрагмента = 
			"ВЫБРАТЬ
			|	ДатыИзменения.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ДатыИзменения.Дата КАК Дата
			|ПОМЕСТИТЬ ВТДатыПоИдентификатору
			|ИЗ
			|	ВТДатыИзменения КАК ДатыИзменения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияРазбиения КАК УсловияРазбиения
			|		ПО ДатыИзменения.ИдентификаторСтроки = УсловияРазбиения.ИдентификаторСтроки
			|			И НЕ (ЕСТЬNULL(УсловияРазбиения.НачисляетсяВЦеломЗаМесяц, ЛОЖЬ))";
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "ВТДатыИзменения", ИмяВТ);
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "ПОМЕСТИТЬ ВТДатыПоИдентификатору", "");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстФрагмента;
	КонецЦикла;                                                                               
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	ИменаВТ.Добавить("ВТДатыПоИдентификатору");
	
	ОписаниеВТСПериодами = ОписаниеВТНачисленияКакВТСПериодами();
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТСПериодами);
	
	УничтожитьВТ(ИменаВТ);
	
КонецПроцедуры

Процедура РазбитьСтрокиТаблицыПоДатам(ОписаниеВТ, СтрокиПоИдентификатору)
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.ДатаНачала КАК Дата
		|ИЗ
		|	ВТНачисления КАК Начисления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки,
		|	ДатаНачала";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТ.ИмяВТ);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Пока Выборка.Следующий() Цикл
			Если Не ДатаМежду(Выборка.Дата, Строка.ДатаНачала, КонецДня(Строка.ДатаОкончания), Ложь) Тогда
				Продолжить;
			КонецЕсли;
			ВладелецСтрок = Строка.Владелец();
			МестоВставки = ВладелецСтрок.Индекс(Строка) + 1;
			НоваяСтрока = ВладелецСтрок.Вставить(МестоВставки);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			Если ТипЗнч(Строка.Дополнительно) = Тип("Структура") Тогда
				НоваяСтрока.Дополнительно = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Строка.Дополнительно);
			КонецЕсли;
			НоваяСтрока.ДатаНачала = Выборка.Дата;
			Строка.ДатаОкончания = НачалоДня(Выборка.Дата) - 1;
			Строка = НоваяСтрока;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
	
Процедура РазбитьВТСПериодамиПоМесяцам(ОписаниеВТСПериодами, УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьДатыНачалаМесяцев Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, УсловияРазбиения.МинимальнаяДата, УсловияРазбиения.МаксимальнаяДата, "МЕСЯЦ", "Период", "ВТДатыНачалаМесяцев");
	УдалитьВТ.Добавить("ВТДатыНачалаМесяцев");
	
	ОписаниеВТУсловия = ОписаниеВТУсловияРазбиения();
	ДобавитьОписаниеОтбора(ОписаниеВТУсловия.Отбор, "УчитыватьДатыНачалаМесяцев");
	
	ОписаниеВТДаты = ОписаниеВТДатыРазбиения();
	ОписаниеВТДаты.ИмяВТ = "ВТДатыНачалаМесяцев";
	
	РазбитьВТСПериодамиПоДатамВТ(ОписаниеВТСПериодами, ОписаниеВТУсловия, ОписаниеВТДаты);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТРанееОплаченныеПериоды(ОписаниеВТСПериодами)	
	Если ВТСуществует("ВТРанееОплаченныеПериоды") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиРасчета.ИсключатьРанееОплаченныеПериоды Тогда 
		СоздатьВТРанееОплаченныеПериодыПустая();
	ИначеЕсли НастройкиРасчета.ПерваяПоловинаМесяца Тогда	
		СоздатьВТРанееОплаченныеПериодыПерваяПоловинаМесяца(ОписаниеВТСПериодами);
	Иначе	
		СоздатьВТРанееОплаченныеПериодыОкончательныйРасчет(ОписаниеВТСПериодами);
	КонецЕсли;	
КонецПроцедуры

Процедура СоздатьВТРанееОплаченныеПериодыПустая(ИмяВТРезультат = "ВТРанееОплаченныеПериоды")
	// Готовим пустышку.
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТРанееОплаченныеПериоды";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРанееОплаченныеПериоды", ИмяВТРезультат);	
	Запрос.Выполнить();	
КонецПроцедуры	

Процедура СоздатьВТРанееОплаченныеПериодыОкончательныйРасчет(ОписаниеВТСПериодами)		
	РанееОплаченныеПериоды = РанееОплаченныеПериодыОкончательныйРасчет(ОписаниеВТСПериодами);	
	ОбъединитьПересекающиесяРанееОплаченныеПериоды(РанееОплаченныеПериоды);	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, РанееОплаченныеПериоды, "ВТРанееОплаченныеПериоды");	
КонецПроцедуры

Функция РанееОплаченныеПериодыОкончательныйРасчет(ОписаниеВТСПериодами)
	// Ранее оплаченные периоды получаем по-разному для окончательного расчета и расчета первой половины.
	// Игнорируем ранее оплаченные периоды для записей в прошлом по отношению к периоду регистрации (это перерасчеты).
		
	КатегорииПособийПоУходуЗаРебенком = ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком();
	КатегорияОплатыКомандировки = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.УстановитьПараметр("КатегорииПособийПоУходуЗаРебенком", КатегорииПособийПоУходуЗаРебенком);
	Запрос.УстановитьПараметр("КатегорияОплатыКомандировки", КатегорияОплатыКомандировки);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА Начисления.ПериодДействияНачало > СотрудникиПериоды.ДатаНачала
		|			ТОГДА Начисления.ПериодДействияНачало
		|		ИНАЧЕ СотрудникиПериоды.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА Начисления.ПериодДействияКонец < СотрудникиПериоды.ДатаОкончания
		|			ТОГДА Начисления.ПериодДействияКонец
		|		ИНАЧЕ СотрудникиПериоды.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ПО (СотрудникиПериоды.Сотрудник = Начисления.Сотрудник)
		|			И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
		|			И (Начисления.Регистратор <> &ИсправленныйДокумент)
		|			И (Начисления.ПериодДействия МЕЖДУ НАЧАЛОПЕРИОДА(СотрудникиПериоды.ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(СотрудникиПериоды.ДатаОкончания, МЕСЯЦ))
		|			И Начисления.ПериодДействияНачало <= СотрудникиПериоды.ДатаОкончания
		|			И Начисления.ПериодДействияКонец >= СотрудникиПериоды.ДатаНачала
		|			И (Начисления.ВидРасчета.ЗачетНормыВремени = ИСТИНА
		|					И Начисления.ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА
		|				ИЛИ Начисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииПособийПоУходуЗаРебенком)
		|				ИЛИ Начисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорияОплатыКомандировки)
		|					И Начисления.ДокументОснование <> Начисления.Регистратор)
		|			И (Начисления.ПериодРегистрации <= &МесяцНачисления)
		|			И (СотрудникиПериоды.ДатаНачала >= &МесяцНачисления)
		|			И (Начисления.Сторно = ЛОЖЬ)
		|			И (Начисления.СторноТекущегоПериода = НЕОПРЕДЕЛЕНО)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК СторноНачисления
		|		ПО (СторноНачисления.Сотрудник = Начисления.Сотрудник)
		|			И (СторноНачисления.ПериодДействияНачало = Начисления.ПериодДействияНачало)
		|			И (СторноНачисления.ПериодДействияКонец = Начисления.ПериодДействияКонец)
		|			И (СторноНачисления.ВидРасчета = Начисления.ВидРасчета)
		|			И (СторноНачисления.Сторно = ИСТИНА)
		|			И (СторноНачисления.Регистратор <> &ИсключаемыйРегистратор)
		|			И (СторноНачисления.ПериодРегистрации > Начисления.ПериодРегистрации)
		|ГДЕ
		|	СторноНачисления.Сотрудник ЕСТЬ NULL";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСПериодами.ИмяПоляОкончаниеПериода);
	
	УстановитьПривилегированныйРежим(Истина);	
	РанееОплаченныеПериоды = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);	
	
	Возврат РанееОплаченныеПериоды;
КонецФункции	

Процедура СоздатьВТРанееОплаченныеПериодыПерваяПоловинаМесяца(ОписаниеВТСПериодами)
	РанееОплаченныеПериоды = РанееОплаченныеПериодыОкончательныйРасчет(ОписаниеВТСПериодами);
	РанееОплаченныеПериодыПерваяПоловинаМесяца = РанееОплаченныеПериодыПерваяПоловинаМесяца(ОписаниеВТСПериодами);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РанееОплаченныеПериодыПерваяПоловинаМесяца, РанееОплаченныеПериоды);
	
	ОбъединитьПересекающиесяРанееОплаченныеПериоды(РанееОплаченныеПериоды);
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, РанееОплаченныеПериоды, "ВТРанееОплаченныеПериоды");
КонецПроцедуры

Функция РанееОплаченныеПериодыПерваяПоловинаМесяца(ОписаниеВТСПериодами)	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА Начисления.ДатаНачала > СотрудникиПериоды.ДатаНачала
	|			ТОГДА Начисления.ДатаНачала
	|		ИНАЧЕ СотрудникиПериоды.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Начисления.ДатаОкончания < СотрудникиПериоды.ДатаОкончания
	|			ТОГДА Начисления.ДатаОкончания
	|		ИНАЧЕ СотрудникиПериоды.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.НачислениеЗаПервуюПоловинуМесяца.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
	|		ПО (СотрудникиПериоды.Сотрудник = Начисления.Сотрудник)
	|			И (Начисления.Ссылка.Проведен)
	|			И (Начисления.Ссылка <> &ИсключаемыйРегистратор)
	|			И (Начисления.Ссылка <> &ИсправленныйДокумент)
	|			И (Начисления.ПериодДействия МЕЖДУ НАЧАЛОПЕРИОДА(СотрудникиПериоды.ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(СотрудникиПериоды.ДатаОкончания, МЕСЯЦ))
	|			И Начисления.ДатаНачала <= СотрудникиПериоды.ДатаОкончания
	|			И Начисления.ДатаОкончания >= СотрудникиПериоды.ДатаНачала
	|			И (Начисления.Начисление.ЗачетНормыВремени = ИСТИНА)
	|			И (Начисления.Начисление.ЗачетОтработанногоВремени = ИСТИНА)
	|			И (Начисления.Ссылка.МесяцНачисления <= &МесяцНачисления)
	|			И (СотрудникиПериоды.ДатаНачала >= &МесяцНачисления)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСПериодами.ИмяПоляОкончаниеПериода);
	
	УстановитьПривилегированныйРежим(Истина);	
	РанееОплаченныеПериоды = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);	
	
	Возврат РанееОплаченныеПериоды;	
КонецФункции	

Процедура ОбъединитьПересекающиесяРанееОплаченныеПериоды(РанееОплаченныеПериоды)
	РанееОплаченныеПериоды.Сортировать("Сотрудник, ДатаНачала, ДатаОкончания", Новый СравнениеЗначений);
	
	ТекущийСотрудник = Неопределено;
	ПредыдущийПериод = Неопределено;
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого ТекущийПериод Из РанееОплаченныеПериоды Цикл
		Если ТекущийСотрудник <> ТекущийПериод.Сотрудник Тогда
			ПредыдущийПериод = Неопределено;
			ТекущийСотрудник = ТекущийПериод.Сотрудник;
		КонецЕсли;
		
		Если ПредыдущийПериод <> Неопределено И ТекущийПериод.ДатаНачала <= ПредыдущийПериод.ДатаОкончания Тогда  
			СтрокиКУдалению.Добавить(ТекущийПериод);
			Если ТекущийПериод.ДатаОкончания >= ПредыдущийПериод.ДатаОкончания Тогда
				ПредыдущийПериод.ДатаОкончания = ТекущийПериод.ДатаОкончания;
			КонецЕсли;	
		Иначе
			ПредыдущийПериод = ТекущийПериод;	
		КонецЕсли;
	КонецЦикла;	
		
	Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		РанееОплаченныеПериоды.Удалить(УдаляемаяСтрока);
	КонецЦикла;		
КонецПроцедуры	

Процедура РазбитьВТНачисленияПоКадровымИзменениям(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьКадровыеИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВТСотрудники = ОписаниеВТСотрудникиПериоды();	
	ОписаниеВТСотрудники.ИмяВТ = "ВТНачисления";
	ОписаниеВТСотрудники.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТСотрудники.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТКадровыеИзмененияИнтервалы(ОписаниеВТСотрудники);
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	КадроваяИстория.НачалоПериода КАК Дата
		|ПОМЕСТИТЬ ВТДатыПоИдентификатору
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияРазбиения КАК УсловияРазбиения
		|		ПО (УсловияРазбиения.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (УсловияРазбиения.УчитыватьКадровыеИзменения = ИСТИНА)
		|			И (УсловияРазбиения.РазбиватьСтроку = ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеИзмененияИнтервалы КАК КадроваяИстория
		|		ПО (КадроваяИстория.Сотрудник = Начисления.Сотрудник)
		|			И (КадроваяИстория.ДатаНачала = Начисления.ДатаНачала)
		|			И (КадроваяИстория.ДатаОкончания = Начисления.ДатаОкончания)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДатыПоИдентификатору");
	
	ОписаниеВТСПериодами = ОписаниеВТНачисленияКакВТСПериодами();
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТСПериодами);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТНачисленияПоИзменениямГрафика(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияОбщегоГрафика Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	
	ОписаниеФильтра = МенеджерУчетаВремени.ОписаниеФильтраВТПериодыИзмененияИсточниковДанныхУчетаВремени();
	ОписаниеФильтра.ИмяТаблицы = "ВТНачисления";
	МенеджерУчетаВремени.СоздатьВТПериодыИзмененияИсточниковДанныхУчетаВремени(ОписаниеФильтра);	
	УдалитьВТ.Добавить("ВТПериодыИзмененияИсточниковДанныхУчетаВремени");
	
	ОписаниеВТУсловия = ОписаниеВТУсловияРазбиения();
	ОписаниеВТУсловия.Измерения.Добавить("Сотрудник");
	ДобавитьОписаниеОтбора(ОписаниеВТУсловия.Отбор, "РазбиватьСтроку");
	ДобавитьОписаниеОтбора(ОписаниеВТУсловия.Отбор, "УчитыватьИзмененияОбщегоГрафика");
	
	ОписаниеВТДаты = ОписаниеВТДатыРазбиения();
	ОписаниеВТДаты.ИмяВТ = "ВТПериодыИзмененияИсточниковДанныхУчетаВремени";
	
	ОписаниеВТСПериодами = ОписаниеВТНачисленияКакВТСПериодами();
	РазбитьВТСПериодамиПоДатамВТ(ОписаниеВТСПериодами, ОписаниеВТУсловия, ОписаниеВТДаты);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТНачисленияПоИзменениямВремяВЧасах(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияВремяВЧасах Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СоздатьВТДатыРегистрацииНаборовВидовВремени();
	УдалитьВТ.Добавить("ВТДатыРегистрацииНаборовВидовВремени");

	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ДатыРегистрацииВремени.Сотрудник,
		|	ДатыРегистрацииВремени.ДатаНачала,
		|	ДатыРегистрацииВремени.ДатаОкончания,
		|	ДатыРегистрацииВремени.КлючНабораВидовВремени КАК Начисление,
		|	ДатыРегистрацииВремени.Дата,
		|	МАКСИМУМ(ДатыРегистрацииСлева.Дата) КАК ДатаСлева
		|ПОМЕСТИТЬ ВТДатыПоИдентификатору
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияРазбиения КАК УсловияРазбиения
		|		ПО (УсловияРазбиения.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (УсловияРазбиения.УчитыватьИзмененияВремяВЧасах)
		|			И (УсловияРазбиения.РазбиватьСтроку)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыРегистрацииНаборовВидовВремени КАК ДатыРегистрацииВремени
		|		ПО (ДатыРегистрацииВремени.Сотрудник = Начисления.Сотрудник)
		|			И (ДатыРегистрацииВремени.ДатаНачала = Начисления.ДатаНачала)
		|			И (ДатыРегистрацииВремени.ДатаОкончания = Начисления.ДатаОкончания)
		|			И (ДатыРегистрацииВремени.КлючНабораВидовВремени = Начисления.Начисление)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыРегистрацииНаборовВидовВремени КАК ДатыРегистрацииСлева
		|		ПО (ДатыРегистрацииВремени.Сотрудник = ДатыРегистрацииСлева.Сотрудник)
		|			И (ДатыРегистрацииВремени.ДатаНачала = ДатыРегистрацииСлева.ДатаНачала)
		|			И (ДатыРегистрацииВремени.ДатаОкончания = ДатыРегистрацииСлева.ДатаОкончания)
		|			И (ДатыРегистрацииВремени.КлючНабораВидовВремени = ДатыРегистрацииСлева.КлючНабораВидовВремени)
		|			И (ДатыРегистрацииВремени.Дата > ДатыРегистрацииСлева.Дата)
		|			И (ДатыРегистрацииВремени.ВремяВЧасах <> ДатыРегистрацииСлева.ВремяВЧасах)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ИдентификаторСтроки,
		|	ДатыРегистрацииВремени.Сотрудник,
		|	ДатыРегистрацииВремени.ДатаНачала,
		|	ДатыРегистрацииВремени.ДатаОкончания,
		|	ДатыРегистрацииВремени.КлючНабораВидовВремени,
		|	ДатыРегистрацииВремени.Дата
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ДатыРегистрацииСлева.Дата) ЕСТЬ НЕ NULL ";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДатыПоИдентификатору");
	
	ОписаниеВТ = ОписаниеВТНачисленияКакВТСПериодами();
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТ);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТНачисленияПоИзменениямЗначенийПоказателейСотрудников(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейСотрудников Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Организация,
		|	ВЫБОР
		|		КОГДА ПоказателиНачислений.ЗапрашиваетсяПриВводеНачисления = ИСТИНА
		|			ТОГДА Начисления.ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументОснование,
		|	ПоказателиНачислений.Показатель
		|ПОМЕСТИТЬ ВТФильтрЗначенийПоказателей
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиНачислений.ПериодическийПоказательСотрудника)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрЗначенийПоказателей");
	
	ОписаниеВТСотрудники = ОписаниеВТСотрудникиПериоды();
	ОписаниеВТСотрудники.ИмяВТ = "ВТФильтрЗначенийПоказателей";
	ОписаниеВТСотрудники.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТСотрудники.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТЗначенияПериодическихПоказателейСотрудниковИнтервалы(ОписаниеВТСотрудники);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ЗначенияПоказателейСотрудников.НачалоПериода КАК Дата
		|ПОМЕСТИТЬ ВТДатыПоИдентификатору
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиНачислений.ПериодическийПоказательСотрудника)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияРазбиения КАК УсловияРазбиения
		|		ПО (УсловияРазбиения.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейСотрудников = ИСТИНА)
		|			И (УсловияРазбиения.РазбиватьСтроку = ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейСотрудниковИнтервалы КАК ЗначенияПоказателейСотрудников
		|		ПО (ЗначенияПоказателейСотрудников.Сотрудник = Начисления.Сотрудник)
		|			И (ЗначенияПоказателейСотрудников.Организация = Начисления.Организация)
		|			И (ЗначенияПоказателейСотрудников.ДокументОснование = Начисления.ДокументОснование)
		|			И (ЗначенияПоказателейСотрудников.Показатель = ПоказателиНачислений.Показатель)
		|			И (ЗначенияПоказателейСотрудников.ДатаНачала = Начисления.ДатаНачала)
		|			И (ЗначенияПоказателейСотрудников.ДатаОкончания = Начисления.ДатаОкончания)
		|			И (ЗначенияПоказателейСотрудников.НачалоПериода МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДатыПоИдентификатору");
	
	ОписаниеВТСПериодами = ОписаниеВТНачисленияКакВТСПериодами();
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТСПериодами);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТНачисленияПоИзменениямЗначенийПоказателейОрганизации(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	// Формируем ВТ с параметрами для получения значений показателей.
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Организация
		|ПОМЕСТИТЬ ВТОрганизацииПоказатели
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиНачислений.ПериодическийПоказательОрганизации)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТОрганизацииПоказатели");
	
	ОписаниеВТ = ОписаниеВТСПериодами();
	ОписаниеВТ.ИмяВТ = "ВТОрганизацииПоказатели";
	ОписаниеВТ.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТЗначенияПериодическихПоказателейОрганизацийИнтервалы(ОписаниеВТ);
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ИдентификаторСтроки,
		|	ЗначенияПоказателейОрганизации.НачалоПериода КАК Дата
		|ПОМЕСТИТЬ ВТДатыПоИдентификатору
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиНачислений.ПериодическийПоказательОрганизации)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияРазбиения КАК УсловияРазбиения
		|		ПО (УсловияРазбиения.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейОрганизации = ИСТИНА)
		|			И (УсловияРазбиения.РазбиватьСтроку = ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизацийИнтервалы КАК ЗначенияПоказателейОрганизации
		|		ПО (ЗначенияПоказателейОрганизации.Организация = Начисления.Организация)
		|			И (ЗначенияПоказателейОрганизации.Показатель = ПоказателиНачислений.Показатель)
		|			И (ЗначенияПоказателейОрганизации.ДатаНачала = Начисления.ДатаНачала)
		|			И (ЗначенияПоказателейОрганизации.ДатаОкончания = Начисления.ДатаОкончания)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДатыПоИдентификатору");
	
	ОписаниеВТ = ОписаниеВТНачисленияКакВТСПериодами();
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТ);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТНачисленияПоИзменениямЗначенийПоказателейПодразделения(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейПодразделения Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВТ = ОписаниеВТНачисления();
	ЗаполнитьКадровоеПодразделениеВТСПериодами(ОписаниеВТ);
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Подразделение
		|ПОМЕСТИТЬ ВТПодразделенияПоказатели
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиНачислений.ПериодическийПоказательПодразделения)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТПодразделенияПоказатели");
	
	ОписаниеВТ = ОписаниеВТСПериодами();
	ОписаниеВТ.ИмяВТ = "ВТПодразделенияПоказатели";
	ОписаниеВТ.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТЗначенияПериодическихПоказателейПодразделенийИнтервалы(ОписаниеВТ);
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ЗначенияПоказателейПодразделения.НачалоПериода КАК Дата
		|ПОМЕСТИТЬ ВТДатыПоИдентификатору
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиНачислений.ПериодическийПоказательПодразделения)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияРазбиения КАК УсловияРазбиения
		|		ПО (УсловияРазбиения.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейПодразделения = ИСТИНА)
		|			И (УсловияРазбиения.РазбиватьСтроку = ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделенийИнтервалы КАК ЗначенияПоказателейПодразделения
		|		ПО (ЗначенияПоказателейПодразделения.Подразделение = Начисления.Подразделение)
		|			И (ЗначенияПоказателейПодразделения.Показатель = ПоказателиНачислений.Показатель)
		|			И (ЗначенияПоказателейПодразделения.ДатаНачала = Начисления.ДатаНачала)
		|			И (ЗначенияПоказателейПодразделения.ДатаОкончания = Начисления.ДатаОкончания)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДатыПоИдентификатору");
	
	ОписаниеВТ = ОписаниеВТНачисленияКакВТСПериодами();
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТ);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТНачисленияПоПрименениюПлановыхНачислений(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияПлановыхНачислений Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВТСотрудники = ОписаниеВТСотрудникиПериоды();
	ОписаниеВТСотрудники.ИмяВТ = "ВТНачисления";
	ОписаниеВТСотрудники.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТСотрудники.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТПрименениеПлановыхНачисленийИнтервалы(ОписаниеВТСотрудники);
	
	ОписаниеВТУсловия = ОписаниеВТУсловияРазбиения();
	ОписаниеВТУсловия.Измерения.Добавить("Сотрудник");
	ОписаниеВТУсловия.Измерения.Добавить("ДатаНачала");
	ОписаниеВТУсловия.Измерения.Добавить("ДатаОкончания");
	ДобавитьОписаниеОтбора(ОписаниеВТУсловия.Отбор, "УчитыватьИзмененияПлановыхНачислений");
	
	ОписаниеВТДаты = ОписаниеВТДатыРазбиения();
	ОписаниеВТДаты.ИмяВТ = "ВТПрименениеПлановыхНачисленийИнтервалы";
	ОписаниеВТДаты.ИмяПоляДата = "НачалоПериода";
	
	ОписаниеВТСПериодами = ОписаниеВТНачисленияКакВТСПериодами();
	РазбитьВТСПериодамиПоДатамВТ(ОписаниеВТСПериодами, ОписаниеВТУсловия, ОписаниеВТДаты);
	
КонецПроцедуры

Процедура СоздатьВТДатыПоИдентификатору(ОписаниеВТУсловияРазбиения, ОписаниеВТДатыРазбиения)
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УсловияРазбиения.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ДатыРазбиения.Дата КАК Дата
		|ПОМЕСТИТЬ ВТДатыПоИдентификатору
		|ИЗ
		|	ВТУсловияРазбиения КАК УсловияРазбиения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыРазбиения КАК ДатыРазбиения
		|		ПО (ДатыРазбиения.Дата > УсловияРазбиения.ДатаНачала)
		|			И (ДатыРазбиения.Дата < КОНЕЦПЕРИОДА(УсловияРазбиения.ДатаОкончания, ДЕНЬ))
		|			И (&СвязьИзмерений)
		|			И (&УсловиеОтбора)";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУсловияРазбиения", ОписаниеВТУсловияРазбиения.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДатыРазбиения", ОписаниеВТДатыРазбиения.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДатыРазбиения.Дата", "ДатыРазбиения." + ОписаниеВТДатыРазбиения.ИмяПоляДата);
	
	ИменаИзмерений = "";
	СвязьИзмерений = "";
	Для Каждого ИмяИзмерения Из ОписаниеВТУсловияРазбиения.Измерения Цикл
		ИменаИзмерений = ИменаИзмерений + "УсловияРазбиения." + ИмяИзмерения + ", ";
		СвязьИзмерений = СвязьИзмерений + "ДатыРазбиения." + ИмяИзмерения + " = УсловияРазбиения." + ИмяИзмерения + " И ";
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ИменаИзмерений, 2);
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СвязьИзмерений, 2);
	Если ОписаниеВТУсловияРазбиения.Измерения.Количество() = 0 Тогда
		ИменаИзмерений = "ИСТИНА";
		СвязьИзмерений = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИменаИзмерений", ИменаИзмерений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СвязьИзмерений", СвязьИзмерений);
	
	УсловиеОтбора = "";
	Для Каждого ОписаниеОтбора Из ОписаниеВТУсловияРазбиения.Отбор Цикл
		Если Не ПустаяСтрока(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		УсловиеОтбора = УсловиеОтбора + "УсловияРазбиения." + ОписаниеОтбора.ИмяПоля + " " + ОписаниеОтбора.ВидСравнения + " " + ОписаниеОтбора.ПравоеЗначение;
	КонецЦикла;
	Если ОписаниеВТУсловияРазбиения.Отбор.Количество() = 0 Тогда
		УсловиеОтбора = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", УсловиеОтбора);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДатыРегистрацииНаборовВидовВремени()
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.Начисление,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания
		|ПОМЕСТИТЬ ВТФильтрВТДатыРегистрацииНаборовВидовВремени
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТребованияНачислений КАК ТребованияНачислений
		|		ПО (ТребованияНачислений.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (ТребованияНачислений.ТребуютсяИзмененияВремяВЧасах)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрВТДатыРегистрацииНаборовВидовВремени");
	
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	
	ОписаниеФильтра = МенеджерУчетаВремени.ОписаниеФильтраВТДатыРегистрацииНаборовВидовВремени();
	ОписаниеФильтра.ИмяТаблицы = "ВТФильтрВТДатыРегистрацииНаборовВидовВремени";
	ОписаниеФильтра.ИмяПоляДатаНачала = "ДатаНачала";
	ОписаниеФильтра.ИмяПоляДатаОкончания = "ДатаОкончания";
	ОписаниеФильтра.ИмяПоляКлючНабораВидовВремени = "Начисление";
	
	ОписаниеТаблицыНаборов = МенеджерУчетаВремени.ОписаниеТаблицыНаборовВидовВремени();
	ОписаниеТаблицыНаборов.ИмяТаблицы = "ПланВидовРасчета.Начисления.ВидыВремени";
	ОписаниеТаблицыНаборов.ИмяПоляКлюч = "Ссылка";
	ОписаниеТаблицыНаборов.ИмяПоляВидВремени = "ВидВремени";
	ОписаниеТаблицыНаборов.ИмяПоляУчитыватьТолькоПраздники = "ОпределяющийЗаПраздничныеДни";
	
	МенеджерУчетаВремени.СоздатьВТДатыРегистрацииНаборовВидовВремени(ОписаниеФильтра, ОписаниеТаблицыНаборов);	
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТСПериодами)
	
	Если Не ВТСодержитСтроки("ВТДатыПоИдентификатору") Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	// Пересоздаем таблицу ВТНачисления с разбитыми строками.
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.ДатаНачала КАК НачалоПериода,
		|	Начисления.ДатаОкончания КАК ОкончаниеПериода,
		|	ДатыРазбиения.Дата КАК Дата
		|ПОМЕСТИТЬ ВТДатыИнтервалов
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоИдентификатору КАК ДатыРазбиения
		|		ПО Начисления.ИдентификаторСтроки = ДатыРазбиения.ИдентификаторСтроки
		|			И (ДатыРазбиения.Дата > Начисления.ДатаНачала)
		|			И (ДатыРазбиения.Дата < КОНЕЦПЕРИОДА(Начисления.ДатаОкончания, ДЕНЬ))";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаОкончания", "Начисления." + ОписаниеВТСПериодами.ИмяПоляОкончаниеПериода);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДатыИнтервалов");
	
	Измерения = Новый Массив;
	Измерения.Добавить("ИдентификаторСтроки");
	СоздатьВТИнтервалыПоВТДаты("ВТДатыИнтервалов", "ВТИнтервалы", Измерения);
	УдалитьВТ.Добавить("ВТИнтервалы");
	
	ДобавляемыеПоля = Новый Массив;
	ДобавляемыеПоля.Добавить("ИдентификаторСтроки");
	ДобавляемыеПоля.Добавить("ДатаНачала");
	ДобавляемыеПоля.Добавить("ДатаОкончания");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	&ИменаПолей,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания
		|ПОМЕСТИТЬ ВТВсеНачисления
		|ИЗ
		|	ВТНачисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	&ИменаПолей,
		|	Интервалы.ДатаНачала КАК ДатаНачала,
		|	Интервалы.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТВсеНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИнтервалы КАК Интервалы
		|		ПО (Интервалы.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (Интервалы.НачалоПериода = Начисления.ДатаНачала)
		|			И (Интервалы.ОкончаниеПериода = Начисления.ДатаОкончания)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	&ИменаПолей,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания
		|ИЗ
		|	ВТВсеНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПоИдентификатору КАК ДатыРазбиения
		|		ПО Начисления.ИдентификаторСтроки = ДатыРазбиения.ИдентификаторСтроки
		|			И (ДатыРазбиения.Дата > Начисления.ДатаНачала)
		|			И (ДатыРазбиения.Дата < КОНЕЦПЕРИОДА(Начисления.ДатаОкончания, ДЕНЬ))
		|ГДЕ
		|	ДатыРазбиения.ИдентификаторСтроки ЕСТЬ NULL ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаОкончания", "Начисления." + ОписаниеВТСПериодами.ИмяПоляОкончаниеПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, ОписаниеВТСПериодами.ИмяВТ, "Начисления", ДобавляемыеПоля);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТВсеНачисления");
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТСПериодамиПоДатамВТ(ОписаниеВТСПериодами, ОписаниеВТУсловияРазбиения, ОписаниеВТДатыРазбиения)
	
	УдалитьВТ = Новый Массив;
	
	СоздатьВТДатыПоИдентификатору(ОписаниеВТУсловияРазбиения, ОписаниеВТДатыРазбиения);
	УдалитьВТ.Добавить("ВТДатыПоИдентификатору");
	
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТСПериодами);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Функция ОписаниеВТУсловияРазбиения()
	
	Описание = Новый Структура(
		"ИмяВТ,
		|Измерения,
		|Отбор");
		
	Описание.ИмяВТ = "ВТУсловияРазбиения";
	Описание.Измерения = Новый Массив;
	Описание.Отбор = Новый Массив;
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеВТДатыРазбиения()
	
	Описание = Новый Структура(
		"ИмяВТ,
		|ИмяПоляДата");
		
	Описание.ИмяПоляДата = "Период";
	
	Возврат Описание;
	
КонецФункции

Процедура ДобавитьОписаниеОтбора(Отбор, ИмяПоля, ВидСравнения = "=", ПравоеЗначение = "ИСТИНА")
	
	ОписаниеОтбора = Новый Структура(
		"ИмяПоля, 
		|ВидСравнения, 
		|ПравоеЗначение");
		
	ОписаниеОтбора.ИмяПоля = ИмяПоля;
	ОписаниеОтбора.ВидСравнения = ВидСравнения;
	ОписаниеОтбора.ПравоеЗначение = ПравоеЗначение;
		
	Отбор.Добавить(ОписаниеОтбора);
	
КонецПроцедуры

#КонецОбласти

#Область РазбиениеСтрокУдержаний

Процедура РазбитьСтрокиУдержаний(Удержания)
	
	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СтрокиПоИдентификатору = Новый Соответствие;
	СоздатьВТУдержания(Удержания, СтрокиПоИдентификатору, Ложь);
	УдалитьВТ.Добавить("ВТУдержания");
	УдалитьВТ.Добавить("ВТИзвестныеПоказателиУдержаний");
	
	// Определяем необходимость разбиения.
	ОписаниеВТ = ОписаниеВТУдержания();
	ОписаниеВТ.ИмяВТ = "ВТУдержания";
	ОписаниеВТ.ИмяПоляУдержание = "Удержание";
	СоздатьВТПоказателиРасчетаУдержания(ОписаниеВТ);
	
	СоздатьВТТребованияУдержаний();
	УдалитьВТ.Добавить("ВТТребованияУдержаний");
	ТребованияУдержаний = ТребованияУдержаний();
	
	СоздатьВТУсловияРазбиенияСтрокУдержаний();
	УдалитьВТ.Добавить("ВТУсловияРазбиения");
	УсловияРазбиения = УсловияРазбиенияСтрокУдержаний();
	
	ОписаниеВТСПериодами = ОписаниеВТУдержанияКакВТСПериодами(); 
	
	РазбитьВТСПериодамиПоМесяцам(ОписаниеВТСПериодами, УсловияРазбиения);

	РазбитьВТУдержанияПоИзменениямРабочегоМестаУдержаний(ОписаниеВТСПериодами, УсловияРазбиения);
	ЗаполнитьОсновногоСотрудникаВТУдержаний(ОписаниеВТСПериодами, ТребованияУдержаний, "ТребуетсяСотрудникДляРазбиенияСтрокУдержаний");
	РазбитьВТУдержанияПоКадровымИзменениямСотрудников(УсловияРазбиения);
	ЗаполнитьКадровыеСведенияВТСПериодами(ОписаниеВТСПериодами, Ложь);
	
	РазбитьВТУдержанияПоИзменениямЗначенийПоказателейСотрудников(УсловияРазбиения);
	РазбитьВТУдержанияПоИзменениямЗначенийПоказателейОрганизации(УсловияРазбиения);
	РазбитьВТУдержанияПоИзменениямЗначенийПоказателейПодразделения(УсловияРазбиения);
	
	// Разбиваем физически строки таблицы Удержания по данным ВТУдержания.
	РазбитьСтрокиТаблицыПоДатам(ОписаниеВТСПериодами, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТУдержанияПоИзменениямРабочегоМестаУдержаний(ОписаниеВТСПериодами, УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияРабочихМестУдержаний Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьВТРабочиеМестаУдержанийИнтервалы(ОписаниеВТСПериодами);
	
	ДобавляемыеПоля = Новый Массив;
	ДобавляемыеПоля.Добавить("Сотрудник");
	ДобавляемыеПоля.Добавить("ДатаНачала");
	ДобавляемыеПоля.Добавить("ДатаОкончания");
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	ЕСТЬNULL(РабочиеМестаУдержаний.РабочееМесто, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
		|	ЕСТЬNULL(РабочиеМестаУдержаний.НачалоПериода, УдержанияПериоды.ДатаНачала) КАК ДатаНачала,
		|	ЕСТЬNULL(РабочиеМестаУдержаний.КонецПериода, УдержанияПериоды.ДатаОкончания) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТВсеУдержанияПериоды
		|ИЗ
		|	ВТУдержанияПериоды КАК УдержанияПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаУдержанийИнтервалы КАК РабочиеМестаУдержаний
		|		ПО (РабочиеМестаУдержаний.ФизическоеЛицо = УдержанияПериоды.ФизическоеЛицо)
		|			И (РабочиеМестаУдержаний.ДокументОснование = УдержанияПериоды.ДокументОснование)
		|			И УдержанияПериоды.ДатаНачала = РабочиеМестаУдержаний.ДатаНачала
		|			И УдержанияПериоды.ДатаОкончания = РабочиеМестаУдержаний.ДатаОкончания";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУдержанияПериоды", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "УдержанияПериоды.ДатаНачала", "УдержанияПериоды." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "УдержанияПериоды.ДатаОкончания", "УдержанияПериоды." + ОписаниеВТСПериодами.ИмяПоляОкончаниеПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, ОписаниеВТСПериодами.ИмяВТ, "УдержанияПериоды", ДобавляемыеПоля);
	Запрос.Выполнить();
	УничтожитьВТ(ОписаниеВТСПериодами.ИмяВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	УдержанияПериоды.Сотрудник,
		|	УдержанияПериоды.ДатаНачала,
		|	УдержанияПериоды.ДатаОкончания
		|ПОМЕСТИТЬ ВТУдержанияПериоды
		|ИЗ
		|	ВТВсеУдержанияПериоды КАК УдержанияПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУдержанияПериоды", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "УдержанияПериоды.ДатаНачала", "УдержанияПериоды." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "УдержанияПериоды.ДатаОкончания", "УдержанияПериоды." + ОписаниеВТСПериодами.ИмяПоляОкончаниеПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТВсеУдержанияПериоды", "УдержанияПериоды", ДобавляемыеПоля);
	Запрос.Выполнить();
	УничтожитьВТ("ВТВсеУдержанияПериоды");
	
КонецПроцедуры

Процедура ЗаполнитьРабочиеМестаВТУдержаний(ОписаниеВТСПериодами, УсловияРазбиения)
	
	СоздатьВТРабочиеМестаУдержанийИнтервалы(ОписаниеВТСПериодами);
	
	Если Не ВТСодержитСтроки("ВТРабочиеМестаУдержанийИнтервалы") Тогда
		Возврат;
	КонецЕсли;
	
	ДобавляемыеПоля = Новый Массив;
	ДобавляемыеПоля.Добавить("Сотрудник");
	ДобавляемыеПоля.Добавить("ДатаНачала");
	ДобавляемыеПоля.Добавить("ДатаОкончания");
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	ЕСТЬNULL(РабочиеМестаУдержаний.РабочееМесто, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
		|	УдержанияПериоды.ДатаНачала КАК ДатаНачала,
		|	УдержанияПериоды.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТВсеУдержанияПериоды
		|ИЗ
		|	ВТУдержанияПериоды КАК УдержанияПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаУдержанийИнтервалы КАК РабочиеМестаУдержаний
		|		ПО (РабочиеМестаУдержаний.ФизическоеЛицо = УдержанияПериоды.ФизическоеЛицо)
		|			И (РабочиеМестаУдержаний.ДокументОснование = УдержанияПериоды.ДокументОснование)
		|			И (УдержанияПериоды.ДатаНачала МЕЖДУ РабочиеМестаУдержаний.НачалоПериода И РабочиеМестаУдержаний.КонецПериода)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУдержанияПериоды", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "УдержанияПериоды.ДатаНачала", "УдержанияПериоды." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "УдержанияПериоды.ДатаОкончания", "УдержанияПериоды." + ОписаниеВТСПериодами.ИмяПоляОкончаниеПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, ОписаниеВТСПериодами.ИмяВТ, "УдержанияПериоды", ДобавляемыеПоля);
	Запрос.Выполнить();
	УничтожитьВТ(ОписаниеВТСПериодами.ИмяВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	УдержанияПериоды.Сотрудник,
		|	УдержанияПериоды.ДатаНачала,
		|	УдержанияПериоды.ДатаОкончания
		|ПОМЕСТИТЬ ВТУдержанияПериоды
		|ИЗ
		|	ВТВсеУдержанияПериоды КАК УдержанияПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУдержанияПериоды", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "УдержанияПериоды.ДатаНачала", "УдержанияПериоды." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "УдержанияПериоды.ДатаОкончания", "УдержанияПериоды." + ОписаниеВТСПериодами.ИмяПоляОкончаниеПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТВсеУдержанияПериоды", "УдержанияПериоды", ДобавляемыеПоля);
	Запрос.Выполнить();
	УничтожитьВТ("ВТВсеУдержанияПериоды");
	
КонецПроцедуры

Процедура ЗаполнитьОсновногоСотрудникаВТУдержаний(ОписаниеВТСПериодами, ТребованияУдержаний, ИмяТребования)
	
	Если ТребованияУдержаний[ИмяТребования] = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ФизическоеЛицо,
		|	Удержания.НачалоПериода КАК ДатаНачала,
		|	Удержания.ОкончаниеПериода КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТФильтрОсновныхСотрудников
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТребованияУдержаний КАК ТребованиеУдержаний
		|		ПО (ТребованиеУдержаний.ИдентификаторСтроки = Удержания.ИдентификаторСтроки)
		|			И (ЕСТЬNULL(Удержания.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
		|			И (ТребованиеУдержаний.УчитыватьИзмененияОсновногоСотрудника)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУдержания", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.НачалоПериода", "Удержания." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.ОкончаниеПериода", "Удержания." + ОписаниеВТСПериодами.ИмяПоляОкончаниеПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТребованиеУдержаний.УчитыватьИзмененияОсновногоСотрудника", "ТребованиеУдержаний." + ИмяТребования);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрОсновныхСотрудников");
	
	ОписаниеВТФизическиеЛицаПериоды = ОписаниеВТФизическиеЛицаПериоды();
	ОписаниеВТФизическиеЛицаПериоды.ИмяВТ = "ВТФильтрОсновныхСотрудников";
	ОписаниеВТФизическиеЛицаПериоды.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТФизическиеЛицаПериоды.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТОсновныеСотрудникиФизическихЛиц(ОписаниеВТФизическиеЛицаПериоды);
	
	ДобавляемыеПоля = Новый Массив;
	ДобавляемыеПоля.Добавить("Сотрудник");
	ДобавляемыеПоля.Добавить("ДатаНачала");
	ДобавляемыеПоля.Добавить("ДатаОкончания");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	ЕСТЬNULL(ОсновныеСотрудники.Сотрудник, Удержания.Сотрудник) КАК Сотрудник,
		|	Удержания.ДатаНачала,
		|	Удержания.ДатаОкончания
		|ПОМЕСТИТЬ ВТВсеУдержанияПериоды
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудники
		|		ПО (ОсновныеСотрудники.ФизическоеЛицо = Удержания.ФизическоеЛицо)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУдержания", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.ДатаНачала", "Удержания." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.ДатаОкончания", "Удержания." + ОписаниеВТСПериодами.ИмяПоляОкончаниеПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, ОписаниеВТСПериодами.ИмяВТ, "Удержания", ДобавляемыеПоля);
	Запрос.Выполнить();
	УничтожитьВТ(ОписаниеВТСПериодами.ИмяВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	УдержанияПериоды.Сотрудник,
		|	УдержанияПериоды.ДатаНачала,
		|	УдержанияПериоды.ДатаОкончания
		|ПОМЕСТИТЬ ВТУдержанияПериоды
		|ИЗ
		|	ВТВсеУдержанияПериоды КАК УдержанияПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУдержанияПериоды", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "УдержанияПериоды.ДатаНачала", "УдержанияПериоды." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "УдержанияПериоды.ДатаОкончания", "УдержанияПериоды." + ОписаниеВТСПериодами.ИмяПоляОкончаниеПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТВсеУдержанияПериоды", "УдержанияПериоды", ДобавляемыеПоля);
	Запрос.Выполнить();
	УничтожитьВТ("ВТВсеУдержанияПериоды");
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТУдержанияПоКадровымИзменениямСотрудников(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияОсновногоСотрудника Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВТСотрудники = ОписаниеВТСотрудникиПериоды();	
	ОписаниеВТСотрудники.ИмяВТ = "ВТУдержания";
	ОписаниеВТСотрудники.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТСотрудники.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТКадровыеИзмененияИнтервалы(ОписаниеВТСотрудники);
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	Удержания.Сотрудник,
		|	Удержания.ДатаНачала,
		|	Удержания.ДатаОкончания
		|ПОМЕСТИТЬ ВТФильтрРазбиенияПоКадровымИзменениям
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияРазбиения КАК УсловияРазбиения
		|		ПО (УсловияРазбиения.ИдентификаторСтроки = Удержания.ИдентификаторСтроки)
		|			И (УсловияРазбиения.УчитыватьИзмененияОсновногоСотрудника)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрРазбиенияПоКадровымИзменениям");
	
	ОписаниеВТУсловия = ОписаниеВТУсловияРазбиения();
	ОписаниеВТУсловия.ИмяВТ = "ВТФильтрРазбиенияПоКадровымИзменениям";
	ОписаниеВТУсловия.Измерения.Добавить("Сотрудник");
	
	ОписаниеВТДаты = ОписаниеВТДатыРазбиения();
	ОписаниеВТДаты.ИмяВТ = "ВТКадровыеИзмененияИнтервалы";
	ОписаниеВТДаты.ИмяПоляДата = "НачалоПериода";
	
	ОписаниеВТСПериодами = ОписаниеВТУдержанияКакВТСПериодами();
	РазбитьВТСПериодамиПоДатамВТ(ОписаниеВТСПериодами, ОписаниеВТУсловия, ОписаниеВТДаты);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТУдержанияПоИзменениямЗначенийПоказателейСотрудников(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейСотрудников Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	Удержания.ФизическоеЛицо,
		|	Удержания.ГоловнаяОрганизация,
		|	Удержания.ДокументОснование,
		|	Удержания.ДатаНачала,
		|	Удержания.ДатаОкончания,
		|	ПоказателиУдержаний.Показатель,
		|	УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейСотрудников
		|ПОМЕСТИТЬ ВТУсловияРазбиенияЗначенияПоказателей
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияРазбиения КАК УсловияРазбиения
		|		ПО (УсловияРазбиения.ИдентификаторСтроки = Удержания.ИдентификаторСтроки)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.ВидРасчета = Удержания.Удержание)
		|			И (ПоказателиУдержаний.ПериодическийПоказательСотрудника)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТУсловияРазбиенияЗначенияПоказателей");
	
	ОписаниеВТФизическиеЛицаПериоды = ОписаниеВТФизическиеЛицаПериоды();
	ОписаниеВТФизическиеЛицаПериоды.ИмяВТ = "ВТУсловияРазбиенияЗначенияПоказателей";
	ОписаниеВТФизическиеЛицаПериоды.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТФизическиеЛицаПериоды.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТЗначенияПериодическихПоказателейФизическихЛицИнтервалы(ОписаниеВТФизическиеЛицаПериоды);
	
	ОписаниеВТУсловия = ОписаниеВТУсловияРазбиения();
	ОписаниеВТУсловия.ИмяВТ = "ВТУсловияРазбиенияЗначенияПоказателей";
	ОписаниеВТУсловия.Измерения.Добавить("ФизическоеЛицо");
	ОписаниеВТУсловия.Измерения.Добавить("ДокументОснование");
	ОписаниеВТУсловия.Измерения.Добавить("Показатель");
	ДобавитьОписаниеОтбора(ОписаниеВТУсловия.Отбор, "УчитыватьИзмененияПериодическихПоказателейСотрудников");
	
	ОписаниеВТДаты = ОписаниеВТДатыРазбиения();
	ОписаниеВТДаты.ИмяВТ = "ВТЗначенияПериодическихПоказателейФизическихЛицИнтервалы";
	ОписаниеВТДаты.ИмяПоляДата = "НачалоПериода";
	
	ОписаниеВТСПериодами = ОписаниеВТУдержанияКакВТСПериодами();
	РазбитьВТСПериодамиПоДатамВТ(ОписаниеВТСПериодами, ОписаниеВТУсловия, ОписаниеВТДаты);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТУдержанияПоИзменениямЗначенийПоказателейОрганизации(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	// Формируем ВТ с параметрами для получения значений показателей.
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ДатаНачала,
		|	Удержания.ДатаОкончания,
		|	Удержания.Организация
		|ПОМЕСТИТЬ ВТОрганизацииПоказатели
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияРазбиения КАК УсловияРазбиения
		|		ПО (УсловияРазбиения.ИдентификаторСтроки = Удержания.ИдентификаторСтроки)
		|			И (УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейОрганизации)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.ВидРасчета = Удержания.Удержание)
		|			И (ПоказателиУдержаний.ПериодическийПоказательОрганизации)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТОрганизацииПоказатели");
	
	ОписаниеВТ = ОписаниеВТСПериодами();
	ОписаниеВТ.ИмяВТ = "ВТОрганизацииПоказатели";
	ОписаниеВТ.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТЗначенияПериодическихПоказателейОрганизацийИнтервалы(ОписаниеВТ);
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	ЗначенияПоказателейОрганизации.ДатаНачала КАК Дата
		|ПОМЕСТИТЬ ВТДатыПоИдентификатору
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияРазбиения КАК УсловияРазбиения
		|		ПО (УсловияРазбиения.ИдентификаторСтроки = Удержания.ИдентификаторСтроки)
		|			И (УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейОрганизации)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.ВидРасчета = Удержания.Удержание)
		|			И (ПоказателиУдержаний.ПериодическийПоказательОрганизации)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизацийИнтервалы КАК ЗначенияПоказателейОрганизации
		|		ПО (ЗначенияПоказателейОрганизации.Организация = Удержания.Организация)
		|			И (ЗначенияПоказателейОрганизации.Показатель = ПоказателиУдержаний.Показатель)
		|			И (ЗначенияПоказателейОрганизации.НачалоПериода МЕЖДУ Удержания.ДатаНачала И Удержания.ДатаОкончания)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДатыПоИдентификатору");
	
	ОписаниеВТ = ОписаниеВТУдержанияКакВТСПериодами();
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТ);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РазбитьВТУдержанияПоИзменениямЗначенийПоказателейПодразделения(УсловияРазбиения)
	
	Если Не УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейПодразделения Тогда
		Возврат;
	КонецЕсли;
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ДатаНачала,
		|	Удержания.ДатаОкончания,
		|	Удержания.Подразделение
		|ПОМЕСТИТЬ ВТПодразделенияПоказатели
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.ВидРасчета = Удержания.Удержание)
		|			И (ПоказателиУдержаний.ПериодическийПоказательПодразделения)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТПодразделенияПоказатели");
	
	ОписаниеВТ = ОписаниеВТСПериодами();
	ОписаниеВТ.ИмяВТ = "ВТПодразделенияПоказатели";
	ОписаниеВТ.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТЗначенияПериодическихПоказателейПодразделенийИнтервалы(ОписаниеВТ);
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	ЗначенияПоказателейПодразделения.ДатаНачала КАК Дата
		|ПОМЕСТИТЬ ВТДатыПоИдентификатору
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.ВидРасчета = Удержания.Удержание)
		|			И (ПоказателиУдержаний.ПериодическийПоказательПодразделения)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделенийИнтервалы КАК ЗначенияПоказателейПодразделения
		|		ПО (ЗначенияПоказателейПодразделения.Подразделение = Удержания.Подразделение)
		|			И (ЗначенияПоказателейПодразделения.Показатель = ПоказателиУдержаний.Показатель)
		|			И (ЗначенияПоказателейПодразделения.ДатаНачала МЕЖДУ Удержания.ДатаНачала И Удержания.ДатаОкончания)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДатыПоИдентификатору");
	
	ОписаниеВТ = ОписаниеВТНачисленияКакВТСПериодами();
	ПересоздатьВТСПериодамиПоДатамРазбиения(ОписаниеВТ);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

#КонецОбласти

#Область ВычеркиваниеСтрокНачислений

Процедура ВычеркнутьСтрокиПоПоказателям(Строки, СтрокиПоИдентификатору = Неопределено, НаборЗаписей = Неопределено)
	
	// Вычеркиваем строки, при расчете значений показателей которых выяснилось, что определяющих показателей нет.
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	Для Каждого ИдентификаторСтроки Из ВычеркиваемыеСтроки Цикл
		Отбор.ИдентификаторСтроки = ИдентификаторСтроки;
		НайденныеСтроки = Строки.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если СтрокиПоИдентификатору <> Неопределено Тогда
				СтрокиПоИдентификатору.Удалить(ИдентификаторСтроки);
			КонецЕсли;
			Если НаборЗаписей <> Неопределено Тогда
				НаборЗаписей.Удалить(НайденнаяСтрока.ЗаписьРасчета);
			КонецЕсли;
			НастройкиПересчета.СоответствиеСтрокНачислений.Удалить(НайденнаяСтрока);
			Строки.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	ВычеркиваемыеСтроки.Очистить();
	
	Если НаборЗаписей <> Неопределено Тогда
		// Пересоздаем ВТ по набору записей.
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборЗаписей, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВычеркнутьНеСоответствующиеКадровомуОтбору(ОписаниеВТСотрудникиПериоды, Отборы)
	
	ПоляИсключения = Новый Массив;
	ПоляИсключения.Добавить("ДатаНачала");
	ПоляИсключения.Добавить("ДатаОкончания");
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей КАК ИменаПолей,
		|	СотрудникиПериоды.ДатаНачала КАК ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТВсеСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|ГДЕ
		|	СотрудникиПериоды.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И СотрудникиПериоды.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И СотрудникиПериоды.Подразделение В ИЕРАРХИИ(&ПодразделениеОтбор)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	&ИменаПолей,
		|	СотрудникиПериоды.ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|ГДЕ
		|	СотрудникиПериоды.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И СотрудникиПериоды.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И СотрудникиПериоды.ПериодПерерасчета = ИСТИНА";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, ОписаниеВТСотрудникиПериоды.ИмяВТ, "СотрудникиПериоды", ПоляИсключения);
	
	ОтбиратьПоПодразделению = Ложь;
	Если Отборы <> Неопределено Тогда
		Если ЗначениеЗаполнено(Отборы.Подразделение) Тогда
			Запрос.УстановитьПараметр("ПодразделениеОтбор", Отборы.Подразделение);
			ОтбиратьПоПодразделению = Истина;
			ДобавитьВычеркнутыеПериодыПоПодразделению(ОписаниеВТСотрудникиПериоды, Отборы.Подразделение);
		КонецЕсли;
	КонецЕсли;
	Если Не ОтбиратьПоПодразделению Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СотрудникиПериоды.Подразделение В ИЕРАРХИИ(&ПодразделениеОтбор)", "");
	КонецЕсли;
	Запрос.Выполнить();
	УничтожитьВТ(ОписаниеВТСотрудникиПериоды.ИмяВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	СотрудникиПериоды.ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТВсеСотрудникиПериоды КАК СотрудникиПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТВсеСотрудникиПериоды", "СотрудникиПериоды", ПоляИсключения);
	Запрос.Выполнить();
	УничтожитьВТ("ВТВсеСотрудникиПериоды");
	
КонецПроцедуры

Функция ТаблицаВычеркнутыеПериоды()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	
	Возврат Таблица;
	
КонецФункции

Процедура ДобавитьВычеркнутыеПериодыПоПодразделению(ОписаниеВТСотрудникиПериоды, ПодразделениеОтбор)
	
	СоздатьВТМаксимальныеДатыПериодовСотрудников(ОписаниеВТСотрудникиПериоды);
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ПодразделениеОтбор", ПодразделениеОтбор);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник,
		|	НАЧАЛОПЕРИОДА(СотрудникиПериоды.ДатаОкончания, МЕСЯЦ) КАК ПериодДействия
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаксимальныеДатыПериодовСотрудников КАК МаксимальныеДаты
		|		ПО (МаксимальныеДаты.Сотрудник = СотрудникиПериоды.Сотрудник)
		|			И (МаксимальныеДаты.МаксимальнаяДата = СотрудникиПериоды.ДатаОкончания)
		|			И (МаксимальныеДаты.ПериодДействия = НАЧАЛОПЕРИОДА(СотрудникиПериоды.ДатаОкончания, МЕСЯЦ))
		|ГДЕ
		|	СотрудникиПериоды.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И СотрудникиПериоды.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И НЕ СотрудникиПериоды.Подразделение В ИЕРАРХИИ (&ПодразделениеОтбор)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ВычеркнутыеПериоды.Добавить(), Выборка);
	КонецЦикла;
	
	ВычеркнутыеПериоды.Индексы.Добавить("Сотрудник,ПериодДействия");
	
КонецПроцедуры

Процедура ВычеркнутьСтрокиПоОтборуПерерасчетовНачислений(Начисления)
	
	Если ОтборПерерасчетовНачислений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборПерерасчетовНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Сотрудник");
	
	Для Каждого СтрокаОтбора Из ОтборПерерасчетовНачислений Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаОтбора);
		НайденныеСтроки = Начисления.НайтиСтроки(ОтборСтрок);
		УдаляемыеСтроки = Новый Массив;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НачалоМесяца(НайденнаяСтрока.ДатаНачала) = СтрокаОтбора.ПериодДействия Тогда
				Если СтрокаОтбора.ВидыРасчета.Найти(НайденнаяСтрока.Начисление) = Неопределено Тогда
					УдаляемыеСтроки.Добавить(НайденнаяСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Начисления.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВычеркнутьСтрокиПоОтборуПерерасчетовУдержаний(Удержания)
	
	Если ОтборПерерасчетовУдержаний = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборПерерасчетовУдержаний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура(
		"ФизическоеЛицо,
		|ГоловнаяОрганизация,
		|Удержание, 
		|ДокументОснование");
	
	Для Каждого СтрокаОтбора Из ОтборПерерасчетовУдержаний Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаОтбора);
		НайденныеСтроки = Удержания.НайтиСтроки(ОтборСтрок);
		УдаляемыеСтроки = Новый Массив;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если СтрокаОтбора.ПериодДействия = НачалоМесяца(НайденнаяСтрока.ДатаНачала) Тогда
				УдаляемыеСтроки.Добавить(НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Удержания.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВычеркнутьСтрокиПоРабочимМестам(Удержания, ТаблицаСотрудников)
	
	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСотрудников.Индексы.Добавить("Сотрудник");
	ОтборСтрок = Новый Структура("Сотрудник");
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаТаблицы Из Удержания Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		ОтборСтрок.Сотрудник = СтрокаТаблицы.Сотрудник;
		НайденныеСтроки = ТаблицаСотрудников.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() = 0 Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Удержания.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаОтборПерерасчетовНачислений()
	
	ОтборПерерасчетов = Новый ТаблицаЗначений;
	ОтборПерерасчетов.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ОтборПерерасчетов.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ОтборПерерасчетов.Колонки.Добавить("ВидыРасчета", Новый ОписаниеТипов("Массив"));

	Возврат ОтборПерерасчетов;
	
КонецФункции

Функция ТаблицаОтборПерерасчетовУдержаний()
	
	ОтборПерерасчетов = Новый ТаблицаЗначений;
	ОтборПерерасчетов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ОтборПерерасчетов.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ОтборПерерасчетов.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ОтборПерерасчетов.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	ОтборПерерасчетов.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.ПлановыеУдержания.Измерения.ДокументОснование.Тип);

	Возврат ОтборПерерасчетов;
	
КонецФункции

#КонецОбласти

#Область ЗначенияПоказателей

#Область ЗначенияПоказателейНачислений

Процедура ЗаполнитьЗначенияПоказателейНачисленийСлужебный(Начисления)
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СтрокиПоИдентификатору = Новый Соответствие;
	СоздатьВТНачисления(Начисления, СтрокиПоИдентификатору);
	УдалитьВТ.Добавить("ВТНачисления");
	УдалитьВТ.Добавить("ВТИзвестныеПоказателиНачислений");
	
	ОписаниеВТ = ОписаниеВТНачисления();
	ОписаниеВТ.ИмяВТ = "ВТНачисления";
	ОписаниеВТ.ИмяПоляНачисление = "Начисление";
	СоздатьВТПоказателиРасчетаНачисления(ОписаниеВТ);
	УдалитьВТ.Добавить("ВТПоказателиРасчета");
	
	// Определяем какие показатели вообще требуются.
	СоздатьВТТребованияНачислений();
	УдалитьВТ.Добавить("ВТТребованияНачислений");
	ТребованияНачислений = ТребованияНачислений();
	
	// Получаем значения показателей
		// - периодических: сотрудников, подразделений, организаций,
		// - разовых: сотрудников, подразделений, организаций,
		// - накапливаемых: сотрудников, подразделений, организаций.
		
	ЗаполнитьФиксированныеСуммыНачислений(ТребованияНачислений, СтрокиПоИдентификатору);		
		
	ЗаполнитьЗначенияПериодическихПоказателейСотрудников(ТребованияНачислений, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияПериодическихПоказателейОрганизаций(ТребованияНачислений, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияПериодическихПоказателейПодразделений(ТребованияНачислений, СтрокиПоИдентификатору);
	
	ЗаполнитьЗначенияРазовыхПоказателейСотрудников(ТребованияНачислений, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияРазовыхПоказателейОрганизаций(ТребованияНачислений, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияРазовыхПоказателейПодразделений(ТребованияНачислений, СтрокиПоИдентификатору);
	
	ЗаполнитьЗначенияОперативныхПоказателейСотрудников(ТребованияНачислений, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияОперативныхПоказателейОрганизаций(ТребованияНачислений, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияОперативныхПоказателейПодразделений(ТребованияНачислений, СтрокиПоИдентификатору);
	
	ЗаполнитьЗначенияИзвестныхПоказателей(СтрокиПоИдентификатору, "ВТИзвестныеПоказателиНачислений");
	ЗаполнитьЗначенияИзвестныхОпределяющихПоказателей(СтрокиПоИдентификатору);
	
	// Собираем значения дополнительных показателей у потребителей.
	ЗаполнитьЗначенияДополнительныхПоказателейНачислений(ТребованияНачислений, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТТребованияНачислений()
	
	СоздатьВТОпределяющиеПоказатели();
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Праздники", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПериодическийПоказательСотрудника, ЛОЖЬ)) КАК ТребуютсяЗначенияПериодическихПоказателейСотрудников,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПериодическийПоказательОрганизации, ЛОЖЬ)) КАК ТребуютсяЗначенияПериодическихПоказателейОрганизаций,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПериодическийПоказательПодразделения, ЛОЖЬ)) КАК ТребуютсяЗначенияПериодическихПоказателейПодразделений,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.РазовыйПоказательСотрудника, ЛОЖЬ)) КАК ТребуютсяЗначенияРазовыхПоказателейСотрудников,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.РазовыйПоказательОрганизации, ЛОЖЬ)) КАК ТребуютсяЗначенияРазовыхПоказателейОрганизаций,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.РазовыйПоказательПодразделения, ЛОЖЬ)) КАК ТребуютсяЗначенияРазовыхПоказателейПодразделений,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ОперативныйПоказательСотрудника, ЛОЖЬ)) КАК ТребуютсяЗначенияОперативныхПоказателейСотрудников,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ОперативныйПоказательОрганизации, ЛОЖЬ)) КАК ТребуютсяЗначенияОперативныхПоказателейОрганизаций,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ОперативныйПоказательПодразделения, ЛОЖЬ)) КАК ТребуютсяЗначенияОперативныхПоказателейПодразделений,
		|	МАКСИМУМ(ЕСТЬNULL(ВидыРасчета.УчитыватьИзмененияВремяВЧасах, ЛОЖЬ)) КАК ТребуютсяИзмененияВремяВЧасах,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Начисления.ФиксЗаполнение = ЛОЖЬ
		|					И Начисления.ФиксРасчет = ЛОЖЬ
		|					И Начисления.ФиксСторно = ЛОЖЬ
		|					И ВидыРасчета.Рассчитывается = ЛОЖЬ
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ТребуютсяФиксированныеСуммы,
		|	МАКСИМУМ(ЕСТЬNULL(ВидыРасчета.УчетВремениВДняхЧасах, ЛОЖЬ)) КАК ТребуютсяВремяВДняхЧасах,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВидыРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ТребуютсяЗаПраздничныеДниПриОкончательномРасчете,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательКалендарныеДни, ЛОЖЬ)) КАК ТребуетсяПоказательКалендарныеДни,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательНормаВремени, ЛОЖЬ)) КАК ТребуетсяПоказательНормаВремени,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Начисления.ФиксРасчетВремени = ЛОЖЬ
		|					И (ЕСТЬNULL(ПоказателиРасчета.ПоказательРабочегоВремени, ЛОЖЬ) = ИСТИНА
		|						ИЛИ ВидыРасчета.НачисляетсяВЦеломЗаМесяц = ЛОЖЬ)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ТребуетсяПоказательРабочегоВремени,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательОтработаноСверхурочно, ЛОЖЬ)) КАК ТребуетсяПоказательОтработаноСверхурочно,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательКалендарныеДниБезПраздников, ЛОЖЬ)) КАК ТребуетсяПоказательКалендарныеДниБезПраздников,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательОтработаноВсего, ЛОЖЬ)) КАК ТребуетсяПоказательОтработаноВсего,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательКоличествоДнейОтпуска, ЛОЖЬ)) КАК ТребуетсяПоказательКоличествоДнейОтпуска,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательСдельныйЗаработок, ЛОЖЬ)) КАК ТребуетсяПоказательСдельныйЗаработок,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательКоэффициентИндексации, ЛОЖЬ)) КАК ТребуетсяПоказательКоэффициентИндексации,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательДоляНеполногоРабочегоВремени, ЛОЖЬ)) КАК ТребуетсяПоказательДоляНеполногоРабочегоВремени,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательСтоимостьЧаса, ЛОЖЬ)) КАК ТребуетсяПоказательСтоимостьЧаса,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательРазмерПособияДоТрехЛет, ЛОЖЬ)) КАК ТребуетсяПоказательРазмерПособияДоТрехЛет,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательПроцентСевернойНадбавки, ЛОЖЬ)) КАК ТребуетсяПоказательПроцентСевернойНадбавки,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательРайонныйКоэффициентРФ, ЛОЖЬ)) КАК ТребуетсяПоказательРайонныйКоэффициентРФ,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательПроцентДоплатыЗаНочные, ЛОЖЬ)) КАК ТребуетсяПоказательПроцентДоплатыЗаНочные,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательПроцентДоплатыЗаВечерние, ЛОЖЬ)) КАК ТребуетсяПоказательПроцентДоплатыЗаВечерние,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательБазовыйТарифГруппы, ЛОЖЬ)) КАК ТребуетсяПоказательБазовыйТарифГруппы,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательЧисловойЗависящийОтСтажа, ЛОЖЬ)) КАК ТребуетсяПоказательЧисловойЗависящийОтСтажа,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательОтработаноСмен, ЛОЖЬ)) КАК ТребуетсяПоказательОтработаноСмен
		|ПОМЕСТИТЬ ВТТребованияНачислений
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремениВидаРасчета
		|		ПО (ВидыВремениВидаРасчета.Ссылка = Начисления.Начисление)
		|			И (ВидыВремениВидаРасчета.ВидВремени.ОсновноеВремя = &Праздники)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|			И (ВЫБОР
		|				КОГДА ЕСТЬNULL(ПоказателиРасчета.ПоказательВремени, ЛОЖЬ) = ИСТИНА
		|					ТОГДА Начисления.ФиксРасчетВремени = ЛОЖЬ
		|				ИНАЧЕ Начисления.ФиксЗаполнение = ЛОЖЬ
		|			КОНЕЦ)
		|			И (НЕ ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТИзвестныеПоказателиНачислений КАК ИзвестныеПоказатели
		|					ГДЕ
		|						ИзвестныеПоказатели.ИдентификаторСтроки = Начисления.ИдентификаторСтроки
		|						И ИзвестныеПоказатели.Показатель = ПоказателиРасчета.Показатель))
		|			И (НЕ ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТОпределяющиеПоказатели КАК ОпределяющиеПоказатели
		|					ГДЕ
		|						ОпределяющиеПоказатели.Сотрудник = Начисления.Сотрудник
		|						И ОпределяющиеПоказатели.Организация = Начисления.Организация
		|						И ОпределяющиеПоказатели.Показатель = ПоказателиРасчета.Показатель
		|						И ОпределяющиеПоказатели.Дата МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания))
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ИдентификаторСтроки";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТребованияНачислений()
	
	ТребованияНачислений = Новый Структура(
		"ТребуютсяЗначенияПериодическихПоказателейСотрудников,
		|ТребуютсяЗначенияПериодическихПоказателейОрганизаций,
		|ТребуютсяЗначенияПериодическихПоказателейПодразделений,
		|ТребуютсяЗначенияРазовыхПоказателейСотрудников,
		|ТребуютсяЗначенияРазовыхПоказателейОрганизаций,
		|ТребуютсяЗначенияРазовыхПоказателейПодразделений,
		|ТребуютсяЗначенияОперативныхПоказателейСотрудников,
		|ТребуютсяЗначенияОперативныхПоказателейОрганизаций,
		|ТребуютсяЗначенияОперативныхПоказателейПодразделений,
		|ТребуютсяФиксированныеСуммы,
		|ТребуютсяВремяВДняхЧасах,
		|ТребуютсяЗаПраздничныеДниПриОкончательномРасчете,
		|ТребуютсяИзмененияВремяВЧасах,
		|ТребуетсяПоказательКалендарныеДни,
		|ТребуетсяПоказательНормаВремени,
		|ТребуетсяПоказательРабочегоВремени,
		|ТребуетсяПоказательОтработаноСверхурочно,
		|ТребуетсяПоказательКалендарныеДниБезПраздников,
		|ТребуетсяПоказательОтработаноВсего,
		|ТребуетсяПоказательКоличествоДнейОтпуска,
		|ТребуетсяПоказательСдельныйЗаработок,
		|ТребуетсяПоказательКоэффициентИндексации,
		|ТребуетсяПоказательДоляНеполногоРабочегоВремени,
		|ТребуетсяПоказательСтоимостьЧаса,
		|ТребуетсяПоказательРазмерПособияДоТрехЛет,
		|ТребуетсяПоказательПроцентСевернойНадбавки,
		|ТребуетсяПоказательРайонныйКоэффициентРФ,
		|ТребуетсяПоказательПроцентДоплатыЗаНочные,
		|ТребуетсяПоказательПроцентДоплатыЗаВечерние,
		|ТребуетсяПоказательБазовыйТарифГруппы,
		|ТребуетсяПоказательЧисловойЗависящийОтСтажа,
		|ТребуетсяПоказательОтработаноСмен");
		
	Для Каждого КлючИЗначение Из ТребованияНачислений Цикл
		ТребованияНачислений[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	
	Если Не ВТСуществует("ВТТребованияНачислений") Тогда
		Возврат ТребованияНачислений;
	КонецЕсли;
	
	Если Не ВТСодержитСтроки("ВТТребованияНачислений") Тогда
		Возврат ТребованияНачислений;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ТребованияНачислений.ТребуютсяЗначенияПериодическихПоказателейСотрудников) КАК ТребуютсяЗначенияПериодическихПоказателейСотрудников,
		|	МАКСИМУМ(ТребованияНачислений.ТребуютсяЗначенияПериодическихПоказателейОрганизаций) КАК ТребуютсяЗначенияПериодическихПоказателейОрганизаций,
		|	МАКСИМУМ(ТребованияНачислений.ТребуютсяЗначенияПериодическихПоказателейПодразделений) КАК ТребуютсяЗначенияПериодическихПоказателейПодразделений,
		|	МАКСИМУМ(ТребованияНачислений.ТребуютсяЗначенияРазовыхПоказателейСотрудников) КАК ТребуютсяЗначенияРазовыхПоказателейСотрудников,
		|	МАКСИМУМ(ТребованияНачислений.ТребуютсяЗначенияРазовыхПоказателейОрганизаций) КАК ТребуютсяЗначенияРазовыхПоказателейОрганизаций,
		|	МАКСИМУМ(ТребованияНачислений.ТребуютсяЗначенияРазовыхПоказателейПодразделений) КАК ТребуютсяЗначенияРазовыхПоказателейПодразделений,
		|	МАКСИМУМ(ТребованияНачислений.ТребуютсяЗначенияОперативныхПоказателейСотрудников) КАК ТребуютсяЗначенияОперативныхПоказателейСотрудников,
		|	МАКСИМУМ(ТребованияНачислений.ТребуютсяЗначенияОперативныхПоказателейОрганизаций) КАК ТребуютсяЗначенияОперативныхПоказателейОрганизаций,
		|	МАКСИМУМ(ТребованияНачислений.ТребуютсяЗначенияОперативныхПоказателейПодразделений) КАК ТребуютсяЗначенияОперативныхПоказателейПодразделений,
		|	МАКСИМУМ(ТребованияНачислений.ТребуютсяФиксированныеСуммы) КАК ТребуютсяФиксированныеСуммы,
		|	МАКСИМУМ(ТребованияНачислений.ТребуютсяВремяВДняхЧасах) КАК ТребуютсяВремяВДняхЧасах,
		|	МАКСИМУМ(ТребованияНачислений.ТребуютсяЗаПраздничныеДниПриОкончательномРасчете) КАК ТребуютсяЗаПраздничныеДниПриОкончательномРасчете,
		|	МАКСИМУМ(ТребованияНачислений.ТребуютсяИзмененияВремяВЧасах) КАК ТребуютсяИзмененияВремяВЧасах,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательКалендарныеДни) КАК ТребуетсяПоказательКалендарныеДни,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательНормаВремени) КАК ТребуетсяПоказательНормаВремени,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательРабочегоВремени) КАК ТребуетсяПоказательРабочегоВремени,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательОтработаноСверхурочно) КАК ТребуетсяПоказательОтработаноСверхурочно,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательКалендарныеДниБезПраздников) КАК ТребуетсяПоказательКалендарныеДниБезПраздников,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательОтработаноВсего) КАК ТребуетсяПоказательОтработаноВсего,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательКоличествоДнейОтпуска) КАК ТребуетсяПоказательКоличествоДнейОтпуска,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательСдельныйЗаработок) КАК ТребуетсяПоказательСдельныйЗаработок,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательКоэффициентИндексации) КАК ТребуетсяПоказательКоэффициентИндексации,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательДоляНеполногоРабочегоВремени) КАК ТребуетсяПоказательДоляНеполногоРабочегоВремени,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательСтоимостьЧаса) КАК ТребуетсяПоказательСтоимостьЧаса,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательРазмерПособияДоТрехЛет) КАК ТребуетсяПоказательРазмерПособияДоТрехЛет,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательПроцентСевернойНадбавки) КАК ТребуетсяПоказательПроцентСевернойНадбавки,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательРайонныйКоэффициентРФ) КАК ТребуетсяПоказательРайонныйКоэффициентРФ,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательПроцентДоплатыЗаНочные) КАК ТребуетсяПоказательПроцентДоплатыЗаНочные,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательПроцентДоплатыЗаВечерние) КАК ТребуетсяПоказательПроцентДоплатыЗаВечерние,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательБазовыйТарифГруппы) КАК ТребуетсяПоказательБазовыйТарифГруппы,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательЧисловойЗависящийОтСтажа) КАК ТребуетсяПоказательЧисловойЗависящийОтСтажа,
		|	МАКСИМУМ(ТребованияНачислений.ТребуетсяПоказательОтработаноСмен) КАК ТребуетсяПоказательОтработаноСмен
		|ИЗ
		|	ВТТребованияНачислений КАК ТребованияНачислений";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ТребованияНачислений, Выборка);
	КонецЕсли;
	
	Возврат ТребованияНачислений;
	
КонецФункции

Процедура СоздатьВТПоказателиРасчетаНачисления(ОписаниеВТНачисления)
	
	Если ВТСуществует("ВТПоказателиРасчета") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ПоказателиТерриторийУсловийТруда", Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда());
	Запрос.УстановитьПараметр("КалендарныеДни", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни"));
	Запрос.УстановитьПараметр("КалендарныеДниМесяца", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца"));
	Запрос.УстановитьПараметр("НормаДней", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней"));
	Запрос.УстановитьПараметр("НормаВремениВДнях", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях"));
	Запрос.УстановитьПараметр("НормаВремениВЧасах", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах"));
	Запрос.УстановитьПараметр("ВремяВДнях", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях"));
	Запрос.УстановитьПараметр("ВремяВДняхЧасах", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах"));
	Запрос.УстановитьПараметр("ВремяВЧасах", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах"));
	Запрос.УстановитьПараметр("ОтработаноСверхурочно", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочно"));
	Запрос.УстановитьПараметр("ОтработаноСверхурочноВПределах2Часов", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочноВПределах2Часов"));
	Запрос.УстановитьПараметр("КалендарныеДниБезПраздников", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников"));
	Запрос.УстановитьПараметр("ОтработаноДней", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней"));
	Запрос.УстановитьПараметр("ОтработаноЧасов", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов"));
	Запрос.УстановитьПараметр("КоличествоДнейОтпуска", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска"));
	Запрос.УстановитьПараметр("СдельныйЗаработок", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок"));
	Запрос.УстановитьПараметр("КоэффициентИндексацииСреднегоЗаработка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСреднегоЗаработка"));
	Запрос.УстановитьПараметр("КоэффициентИндексацииСохраняемогоДенежногоСодержания", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСохраняемогоДенежногоСодержания"));
	Запрос.УстановитьПараметр("ДоляНеполногоРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени"));
	Запрос.УстановитьПараметр("СтоимостьЧаса", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса"));
	Запрос.УстановитьПараметр("СтоимостьДня", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня"));
	Запрос.УстановитьПараметр("СтоимостьДняЧаса", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса"));
	Запрос.УстановитьПараметр("РазмерПособияДоТрехЛет", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерПособияПоУходуЗаРебенкомДоТрехЛет"));
	Запрос.УстановитьПараметр("ПроцентСевернойНадбавки", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	Запрос.УстановитьПараметр("РайонныйКоэффициентРФ", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициентРФ"));
	Запрос.УстановитьПараметр("ПроцентДоплатыЗаНочные", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВНочноеВремя"));
	Запрос.УстановитьПараметр("ПроцентДоплатыЗаВечерние", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВВечернееВремя"));
	Запрос.УстановитьПараметр("БазовыйТарифГруппы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.БазовыйТарифГруппы"));
	Запрос.УстановитьПараметр("ОтработаноСмен", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСмен"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРасчета.Ссылка КАК ВидРасчета,
		|	ВидыРасчета.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
		|	ПоказателиРасчета.Показатель КАК Показатель,
		|	ПоказателиРасчета.ЗапрашиватьПриВводе КАК ЗапрашиваетсяПриВводеНачисления,
		|	СправочникПоказатели.ЗначениеРассчитываетсяАвтоматически КАК ЗначениеРассчитываетсяАвтоматически,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Ссылка.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете)
		|				И ПоказателиРасчета.ОпределяющийПоказатель
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОпределяющийПоказательНачисления,
		|	ВЫБОР
		|		КОГДА СправочникПоказатели.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВводитсяПриРасчете,
		|	СправочникПоказатели.ПериодическийПоказательСотрудника КАК ПериодическийПоказательСотрудника,
		|	СправочникПоказатели.ПериодическийПоказательОрганизации КАК ПериодическийПоказательОрганизации,
		|	СправочникПоказатели.ПериодическийПоказательПодразделения КАК ПериодическийПоказательПодразделения,
		|	СправочникПоказатели.РазовыйПоказательСотрудника КАК РазовыйПоказательСотрудника,
		|	СправочникПоказатели.РазовыйПоказательОрганизации КАК РазовыйПоказательОрганизации,
		|	СправочникПоказатели.РазовыйПоказательПодразделения КАК РазовыйПоказательПодразделения,
		|	СправочникПоказатели.ОперативныйПоказательСотрудника КАК ОперативныйПоказательСотрудника,
		|	СправочникПоказатели.ОперативныйПоказательОрганизации КАК ОперативныйПоказательОрганизации,
		|	СправочникПоказатели.ОперативныйПоказательПодразделения КАК ОперативныйПоказательПодразделения,
		|	ВЫБОР
		|		КОГДА СправочникПоказатели.Ссылка В (&ПоказателиТерриторийУсловийТруда)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательТерриторийУсловийТруда,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &КалендарныеДни
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &КалендарныеДниМесяца
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &НормаДней
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &НормаВремениВДнях
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &НормаВремениВЧасах
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &ВремяВДнях
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &ВремяВДняхЧасах
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &ВремяВЧасах
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &ОтработаноСверхурочно
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &ОтработаноСверхурочноВПределах2Часов
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &КалендарныеДниБезПраздников
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &ОтработаноДней
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &ОтработаноЧасов
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &КоличествоДнейОтпуска
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательВремени,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &КалендарныеДни
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &КалендарныеДниМесяца
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательКалендарныеДни,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &НормаДней
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &НормаВремениВДнях
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &НормаВремениВЧасах
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательНормаВремени,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &ВремяВДнях
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &ВремяВДняхЧасах
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &ВремяВЧасах
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательРабочегоВремени,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &ОтработаноСверхурочно
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &ОтработаноСверхурочноВПределах2Часов
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательОтработаноСверхурочно,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &КалендарныеДниБезПраздников
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательКалендарныеДниБезПраздников,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &ОтработаноДней
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &ОтработаноЧасов
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательОтработаноВсего,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &КоличествоДнейОтпуска
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательКоличествоДнейОтпуска,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &СдельныйЗаработок
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательСдельныйЗаработок,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСреднегоЗаработка
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСохраняемогоДенежногоСодержания
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательКоэффициентИндексации,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &ДоляНеполногоРабочегоВремени
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательДоляНеполногоРабочегоВремени,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &СтоимостьЧаса
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &СтоимостьДня
		|			ТОГДА ИСТИНА
		|		КОГДА ПоказателиРасчета.Показатель = &СтоимостьДняЧаса
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательСтоимостьЧаса,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &РазмерПособияДоТрехЛет
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательРазмерПособияДоТрехЛет,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &ПроцентСевернойНадбавки
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательПроцентСевернойНадбавки,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &РайонныйКоэффициентРФ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательРайонныйКоэффициентРФ,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &ПроцентДоплатыЗаНочные
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательПроцентДоплатыЗаНочные,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &ПроцентДоплатыЗаВечерние
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательПроцентДоплатыЗаВечерние,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &БазовыйТарифГруппы
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательБазовыйТарифГруппы,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &ОтработаноСмен
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательОтработаноСмен,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательЧисловойЗависящийОтСтажа
		|ПОМЕСТИТЬ ВТПоказателиРасчета
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиРасчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК СправочникПоказатели
		|			ПО (СправочникПоказатели.Ссылка = ПоказателиРасчета.Показатель)
		|		ПО (ПоказателиРасчета.Ссылка = ВидыРасчета.Ссылка)
		|ГДЕ
		|	ИСТИНА
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ВТНачисления КАК Начисления
		|			ГДЕ
		|				ВидыРасчета.Ссылка = Начисления.Начисление)
		|	И ВидыРасчета.НачисляетсяПриРасчетеПервойПоловиныМесяца = ИСТИНА";
		
	Если Не НастройкиРасчета.ПерваяПоловинаМесяца Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВидыРасчета.НачисляетсяПриРасчетеПервойПоловиныМесяца = ИСТИНА", " И ИСТИНА");
	КонецЕсли;
	
	Если ОписаниеВТНачисления.ИмяПоляНачисление = Неопределено Тогда
		ТекстУсловия = "
			|	И ИСТИНА В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				ВТНачисления КАК Начисления
			|			ГДЕ
			|				ВидыРасчета.Ссылка = Начисления.Начисление)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстУсловия, " И ИСТИНА");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТНачисления.ИмяВТ);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьФиксированныеСуммыНачислений(ТребованияНачислений, СтрокиПоИдентификатору)
	
	Если Не ТребованияНачислений.ТребуютсяФиксированныеСуммы Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.Организация,
		|	Начисления.Начисление,
		|	Начисления.ДокументОснование,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания
		|ПОМЕСТИТЬ ВТНачисленияФиксированныеСуммы
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|			И (ВидыРасчета.Рассчитывается = ЛОЖЬ)
		|			И (Начисления.ФиксРасчет = ЛОЖЬ)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТНачисленияФиксированныеСуммы");
	
	ОписаниеВТ = ОписаниеВТНачисления();
	ОписаниеВТ.ИмяВТ = "ВТНачисленияФиксированныеСуммы";
	ОписаниеВТ.ИмяПоляНачисление = "Начисление";
	СоздатьВТПлановыеНачисленияИнтервалы(ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.Организация,
		|	Начисления.Начисление,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	ПлановыеНачисления.Размер
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|			И (ВидыРасчета.Рассчитывается = ЛОЖЬ)
		|			И (Начисления.ФиксРасчет = ЛОЖЬ)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияИнтервалы КАК ПлановыеНачисления
		|		ПО (ПлановыеНачисления.Сотрудник = Начисления.Сотрудник)
		|			И (ПлановыеНачисления.ГоловнаяОрганизация = Начисления.Организация.ГоловнаяОрганизация)
		|			И (ПлановыеНачисления.Начисление = Начисления.Начисление)
		|			И (ПлановыеНачисления.ДокументОснование = Начисления.ДокументОснование)
		|			И (Начисления.ДатаОкончания МЕЖДУ ПлановыеНачисления.НачалоПериода И ПлановыеНачисления.КонецПериода)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Строка.Результат = Выборка.Размер;
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПериодическихПоказателейСотрудников(ТребованияНачислений, СтрокиПоИдентификатору)
	
	Если Не ТребованияНачислений.ТребуютсяЗначенияПериодическихПоказателейСотрудников Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.Организация,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.ЗапрашиваетсяПриВводеНачисления = ИСТИНА
		|			ТОГДА Начисления.ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументОснование,
		|	ПоказателиРасчета.Показатель,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодическиеПоказателиСотрудников
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиРасчета.ПериодическийПоказательСотрудника = ИСТИНА)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТПериодическиеПоказателиСотрудников");
	
	ОписаниеВТ = ОписаниеВТСотрудникиПериоды();
	ОписаниеВТ.ИмяВТ = "ВТПериодическиеПоказателиСотрудников";
	ОписаниеВТ.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТЗначенияПериодическихПоказателейСотрудниковИнтервалы(ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.Организация,
		|	ПоказателиРасчета.Показатель КАК Показатель,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	ИнтервалыЗначений.Значение
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиРасчета.ПериодическийПоказательСотрудника = ИСТИНА)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейСотрудниковИнтервалы КАК ИнтервалыЗначений
		|		ПО (ИнтервалыЗначений.Сотрудник = Начисления.Сотрудник)
		|			И (ИнтервалыЗначений.Организация = Начисления.Организация)
		|			И (ИнтервалыЗначений.Показатель = ПоказателиРасчета.Показатель)
		|			И (ВЫБОР
		|				КОГДА ПоказателиРасчета.ЗапрашиваетсяПриВводеНачисления = ИСТИНА
		|					ТОГДА Начисления.ДокументОснование = ИнтервалыЗначений.ДокументОснование
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА ПоказателиРасчета.НачисляетсяВЦеломЗаМесяц
		|					ТОГДА Начисления.ДатаОкончания МЕЖДУ ИнтервалыЗначений.НачалоПериода И ИнтервалыЗначений.КонецПериода
		|				ИНАЧЕ Начисления.ДатаНачала МЕЖДУ ИнтервалыЗначений.НачалоПериода И ИнтервалыЗначений.КонецПериода
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки,
		|	Показатель";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Истина);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРазовыхПоказателейСотрудников(ТребованияНачислений, СтрокиПоИдентификатору)
	
	Если Не ТребованияНачислений.ТребуютсяЗначенияРазовыхПоказателейСотрудников Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.Организация,
		|	ПоказателиРасчета.Показатель,
		|	НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) КАК Месяц
		|ПОМЕСТИТЬ ВТСотрудникиМесяцы
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиРасчета.РазовыйПоказательСотрудника = ИСТИНА)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСотрудникиМесяцы");
	
	ОписаниеВТ = ОписаниеВТРазовыхПоказателей();
	ОписаниеВТ.ИмяВТ = "ВТСотрудникиМесяцы";
	ОписаниеВТ.ИмяПоляПоказатель = "Показатель";
	СоздатьВТЗначенияРазовыхПоказателейСотрудников(ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель КАК Показатель,
		|	ЗначенияПоказателей.Значение
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиРасчета.РазовыйПоказательСотрудника = ИСТИНА)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхПоказателейСотрудников КАК ЗначенияПоказателей
		|		ПО (ЗначенияПоказателей.Сотрудник = Начисления.Сотрудник)
		|			И (ЗначенияПоказателей.Организация = Начисления.Организация)
		|			И (ЗначенияПоказателей.Показатель = ПоказателиРасчета.Показатель)
		|			И (ЗначенияПоказателей.ПериодДействия = НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ))
		|ГДЕ
		|	ЗначенияПоказателей.Значение ЕСТЬ НЕ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки,
		|	Показатель";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияОперативныхПоказателейСотрудников(ТребованияНачислений, СтрокиПоИдентификатору)
	
	Если Не ТребованияНачислений.ТребуютсяЗначенияОперативныхПоказателейСотрудников Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВТ = ОписаниеВТОперативныхПоказателей();
	ОписаниеВТ.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	ОписаниеВТ.ИмяПоляФизическоеЛицо = "Сотрудник.ФизическоеЛицо";
	ОписаниеВТ.ИмяПоляГоловнаяОрганизация = "Организация.ГоловнаяОрганизация";
	ОписаниеВТ.ИмяВТ = "ВТНачисления";
	
	СоздатьВТЗначенияОперативныхПоказателейСотрудников(ОписаниеВТ);
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель КАК Показатель,
		|	СУММА(ЕСТЬNULL(ЗначенияПоказателей.Значение, 0)) КАК Значение
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиРасчета.ОперативныйПоказательСотрудника = ИСТИНА)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхПоказателейСотрудников КАК ЗначенияПоказателей
		|		ПО (ЗначенияПоказателей.Сотрудник = Начисления.Сотрудник)
		|			И (ЗначенияПоказателей.Организация = Начисления.Организация)
		|			И (ЗначенияПоказателей.Показатель = ПоказателиРасчета.Показатель)
		|			И (ЗначенияПоказателей.Период МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
		|ГДЕ
		|	(ЗначенияПоказателей.Значение ЕСТЬ НЕ NULL 
		|			ИЛИ ПоказателиРасчета.ОпределяющийПоказательНачисления)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки,
		|	Показатель";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
КонецПроцедуры

#Область ДополнительныеПоказателиНачислений

Процедура ЗаполнитьЗначенияДополнительныхПоказателейНачислений(ТребованияНачислений, СтрокиПоИдентификатору)
	
	УдалитьВТ = Новый Массив;
	
	СоздатьВТДополнительныеПоказателиНачислений();
	УдалитьВТ.Добавить("ВТДополнительныеПоказатели");
	
	Если Не ВТСодержитСтроки("ВТДополнительныеПоказатели") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияПредопределенныхПоказателейНачислений(ТребованияНачислений, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияПереопределяемыхПоказателейНачислений(ТребованияНачислений, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТДополнительныеПоказателиНачислений()
	
	// Составим ВТ с показателями, значения которых до сих пор не удалось определить.
	СоздатьВТВыявленныеПоказатели();
	
	// Формируем ВТ с параметрами для получения значений показателей.
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.Начисление,
		|	Начисления.Организация,
		|	Начисления.Подразделение,
		|	ПоказателиРасчета.Показатель,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.ВремяВЧасах
		|ПОМЕСТИТЬ ВТДополнительныеПоказатели
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиРасчета.ВводитсяПриРасчете = ЛОЖЬ)
		|			И (ВЫБОР
		|				КОГДА ЕСТЬNULL(ПоказателиРасчета.ПоказательВремени, ЛОЖЬ) = ИСТИНА
		|					ТОГДА Начисления.ФиксРасчетВремени = ЛОЖЬ
		|				ИНАЧЕ Начисления.ФиксЗаполнение = ЛОЖЬ
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыявленныеПоказатели КАК ВыявленныеПоказатели
		|		ПО (ВыявленныеПоказатели.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (ПоказателиРасчета.Показатель = ВыявленныеПоказатели.Показатель)
		|ГДЕ
		|	ВыявленныеПоказатели.Показатель ЕСТЬ NULL ";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПредопределенныхПоказателейНачислений(ТребованияНачислений, СтрокиПоИдентификатору)
	
	ЗаполнитьЗначенияПоказателяДоляНеполногоРабочегоВремени(ТребованияНачислений, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияПоказателейСтоимостьЧасаДня(ТребованияНачислений, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияПоказателейТипаЧислоЗависящееОтСтажа(ТребованияНачислений, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияПоказателяРазмерПособияПоУходуЗаРебенком(ТребованияНачислений, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияПоказателяПроцентСевернойНадбавки(ТребованияНачислений, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияПоказателяРайонныйКоэффициентРФ(ТребованияНачислений, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияПоказателейПроцентДоплатыЗаРаботуВНочноеВечернееВремя(ТребованияНачислений, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияПоказателяБазовыйТарифГруппы(ТребованияНачислений, СтрокиПоИдентификатору);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПереопределяемыхПоказателейНачислений(ТребованияНачислений, СтрокиПоИдентификатору)
	
	ДополнительныеПоказатели = ТаблицаПоказателей();
	
	ПростоиСотрудников.ЗаполнитьЗначенияПоказателяТарифПростоя(МенеджерВременныхТаблиц, ДополнительныеПоказатели, ВыявленныеПоказатели);
	ЗарплатаКадрыРасширенный.ЗаполнитьЗначенияПоказателейРасчетаЗарплаты(МенеджерВременныхТаблиц, ДополнительныеПоказатели);
	УчетСреднегоЗаработка.ЗаполнитьЗначенияПоказателейРасчетаЗарплаты(МенеджерВременныхТаблиц, ДополнительныеПоказатели);
	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьЗначенияПоказателейРасчетаЗарплаты(МенеджерВременныхТаблиц, ДополнительныеПоказатели);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.ЗаполнитьЗначенияПоказателейЭффективностиСотрудников(МенеджерВременныхТаблиц, ДополнительныеПоказатели);
	КонецЕсли;	

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.РассчитатьПоказательСреднемесячноеКоличествоДней(МенеджерВременныхТаблиц, ДополнительныеПоказатели);
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйПереопределяемый.ЗаполнитьЗначенияДополнительныхПоказателейПоВТ(МенеджерВременныхТаблиц, ДополнительныеПоказатели);
	
	Для Каждого СтрокаПоказателя Из ДополнительныеПоказатели Цикл
		Строка = СтрокиПоИдентификатору[СтрокаПоказателя.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, СтрокаПоказателя.Показатель, СтрокаПоказателя.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияПереопределяемыхПоказателейПрежнейВерсии(СтрокиПоИдентификатору);
	
КонецПроцедуры

// Процедура для совместимости с предыдущей реализацией переопределяемого метода.
//
Процедура ЗаполнитьЗначенияПереопределяемыхПоказателейПрежнейВерсии(СтрокиПоИдентификатору)
	
	// Для сохранения совместимости выгружаем в таблицу значений оставшиеся не выявленные показатели.
	
	// Пересоздадим ВТВыявленныеПоказатели, чтобы обновить в ее составе уже вычисленные показатели.
	УничтожитьВТ("ВТВыявленныеПоказатели");
	СоздатьВТВыявленныеПоказатели();
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеПоказатели.ИдентификаторСтроки,
		|	ДополнительныеПоказатели.Сотрудник,
		|	ДополнительныеПоказатели.Организация,
		|	ДополнительныеПоказатели.Подразделение,
		|	ДополнительныеПоказатели.ДатаНачала,
		|	ДополнительныеПоказатели.ДатаОкончания,
		|	ДополнительныеПоказатели.Начисление,
		|	ДополнительныеПоказатели.Показатель,
		|	ДополнительныеПоказатели.ВремяВЧасах
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыявленныеПоказатели КАК ВыявленныеПоказатели
		|		ПО (ВыявленныеПоказатели.ИдентификаторСтроки = ДополнительныеПоказатели.ИдентификаторСтроки)
		|			И ДополнительныеПоказатели.Показатель = ВыявленныеПоказатели.Показатель
		|ГДЕ
		|	ВыявленныеПоказатели.Показатель ЕСТЬ NULL ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПоказатели = ПустаяТаблицаДоопределяемыхПоказателей();	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДополнительныеПоказатели.Добавить(), Выборка);
	КонецЦикла;
	
	// Заполняем значения показателей других подсистем.
	РасчетЗарплатыРасширенныйПереопределяемый.ЗаполнитьЗначенияДополнительныхПоказателей(ДополнительныеПоказатели);
	
	// Переносим полученный результат
	НайденныеСтроки = ДополнительныеПоказатели.НайтиСтроки(Новый Структура("ЗначениеОпределено", Истина));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Строка = СтрокиПоИдентификатору[НайденнаяСтрока.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, НайденнаяСтрока.Показатель, НайденнаяСтрока.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяТаблицаДоопределяемыхПоказателей()
	
	ДополнительныеПоказатели = Новый ТаблицаЗначений;
	ДополнительныеПоказатели.Колонки.Добавить("ИдентификаторСтроки");
	ДополнительныеПоказатели.Колонки.Добавить("Сотрудник");
	ДополнительныеПоказатели.Колонки.Добавить("Организация");
	ДополнительныеПоказатели.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ДополнительныеПоказатели.Колонки.Добавить("ДатаНачала");
	ДополнительныеПоказатели.Колонки.Добавить("ДатаОкончания");
	ДополнительныеПоказатели.Колонки.Добавить("Начисление");
	ДополнительныеПоказатели.Колонки.Добавить("Показатель");
	ДополнительныеПоказатели.Колонки.Добавить("Значение");
	ДополнительныеПоказатели.Колонки.Добавить("ВремяВЧасах");
	ДополнительныеПоказатели.Колонки.Добавить("КомандаРасшифровки");
	ДополнительныеПоказатели.Колонки.Добавить("ЗначениеОпределено", Новый ОписаниеТипов("Булево"));
	
	Возврат ДополнительныеПоказатели;
	
КонецФункции

Процедура СоздатьВТВыявленныеПоказатели()
	
	Если ВТСуществует("ВТВыявленныеПоказатели") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыявленныеПоказатели = Неопределено Тогда
		ВыявленныеПоказатели = ТаблицаПоказателей();
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ВыявленныеПоказатели", ВыявленныеПоказатели);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыявленныеПоказатели.ИдентификаторСтроки,
		|	ВыявленныеПоказатели.Показатель,
		|	ВыявленныеПоказатели.Значение
		|ПОМЕСТИТЬ ВТВыявленныеПоказатели
		|ИЗ
		|	&ВыявленныеПоказатели КАК ВыявленныеПоказатели";
	Запрос.Выполнить();
	
КонецПроцедуры

#Область ЗначенияПредопределенныхПоказателей

// Вычисляет значение показателя «Доля неполного рабочего времени».
//
Процедура ЗаполнитьЗначенияПоказателяДоляНеполногоРабочегоВремени(ТребованияНачислений, СтрокиПоИдентификатору)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательДоляНеполногоРабочегоВремени Тогда
		Возврат;
	КонецЕсли;
	
	Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени");

	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ПоказательДоляНеполногоРабочегоВремениСсылка", Показатель);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеПоказатели.Сотрудник,
		|	ДополнительныеПоказатели.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель = &ПоказательДоляНеполногоРабочегоВремениСсылка";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСотрудникиПериоды");
	
	Если Не ВТСодержитСтроки("ВТСотрудникиПериоды") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	ОписаниеВТ = ОписаниеВТСотрудникиПериоды();
	СоздатьВТКадровыеДанныеСотрудниковПоОписаниюВТСотрудники(ОписаниеВТ, "ДоляНеполногоРабочегоВремени");
	УдалитьВТ.Добавить("ВТКадровыеДанныеСотрудников");

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеПоказатели.ИдентификаторСтроки,
		|	ДополнительныеПоказатели.Показатель,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени, 0) КАК Значение
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО (КадровыеДанныеСотрудников.Сотрудник = ДополнительныеПоказатели.Сотрудник)
		|			И (КадровыеДанныеСотрудников.Период = ДополнительныеПоказатели.ДатаНачала)
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель = &ПоказательДоляНеполногоРабочегоВремениСсылка";
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры	

#Область СтоимостьЧасаДня

// Вычисляет значения показателей «Стоимость часа» и «Стоимость дня» в соответствии 
// с настройками порядка пересчета.
//
Процедура ЗаполнитьЗначенияПоказателейСтоимостьЧасаДня(ТребованияНачислений, СтрокиПоИдентификатору)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательСтоимостьЧаса Тогда
		Возврат;
	КонецЕсли;
	
	СтоимостьЧасаДня = Обработки.МенеджерРасчетаЗарплаты.СтоимостьЧасаДня(МенеджерВременныхТаблиц, "ВТДополнительныеПоказатели", МенеджерУчетаВремени());
	
	Для Каждого КлючИЗначение Из СтоимостьЧасаДня Цикл
		СтрокаНачисления = СтрокиПоИдентификатору[КлючИЗначение.Ключ];
		ЗначенияПоказателей = КлючИЗначение.Значение;
		Для Каждого СтрокаПоказателя Из ЗначенияПоказателей Цикл
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаНачисления, СтрокаПоказателя.Показатель, СтрокаПоказателя.Значение);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

// Вычисляет значение показателя типа ЧислоЗависящееОтСтажа.
//
Процедура ЗаполнитьЗначенияПоказателейТипаЧислоЗависящееОтСтажа(ТребованияНачислений, СтрокиПоИдентификатору)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательЧисловойЗависящийОтСтажа Тогда
		Возврат;
	КонецЕсли;
	
	ТипПоказателяЧислоЗависящееОтСтажа = Перечисления.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ТипПоказателяЧислоЗависящееОтСтажа", ТипПоказателяЧислоЗависящееОтСтажа);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеПоказатели.Сотрудник,
		|	ДополнительныеПоказатели.Показатель,
		|	ДополнительныеПоказатели.ДатаНачала КАК Дата,
		|	СправочникПоказатели.ВидСтажа
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК СправочникПоказатели
		|		ПО (СправочникПоказатели.Ссылка = ДополнительныеПоказатели.Показатель)
		|			И (СправочникПоказатели.ТипПоказателя = &ТипПоказателяЧислоЗависящееОтСтажа)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТИсходныеДанные");
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если Не ВТСодержитСтроки("ВТИсходныеДанные") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	СоздатьВТСтажиСотрудников("ВТИсходныеДанные");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ИсходныеДанные.Дата КАК ДатаНачала,
		|	ИсходныеДанные.Показатель КАК Показатель,
		|	СтажСотрудников.РазмерМесяцев КАК РазмерМесяцев,
		|	МАКСИМУМ(ШкалаОценкиСтажа.ЗначениеПоказателя) КАК МаксимальноеЗначениеПоказателя
		|ПОМЕСТИТЬ ВТСтажСотрудниковДляРасчетаПоказателей
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажиСотрудников КАК СтажСотрудников
		|		ПО ИсходныеДанные.Сотрудник = СтажСотрудников.Сотрудник
		|			И ИсходныеДанные.ВидСтажа = СтажСотрудников.ВидСтажа
		|			И ИсходныеДанные.Дата = СтажСотрудников.Дата
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажа
		|		ПО ИсходныеДанные.Показатель = ШкалаОценкиСтажа.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.Дата,
		|	ИсходныеДанные.Показатель,
		|	СтажСотрудников.РазмерМесяцев
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтажСотрудниковДляРасчетаПоказателей.Показатель,
		|	ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа КАК ВерхняяГраница,
		|	ШкалаОценкиСтажа.ЗначениеПоказателя,
		|	МАКСИМУМ(ЕСТЬNULL(ШкалаОценкиСтажаНижняяГраница.ВерхняяГраницаИнтервалаСтажа, 0)) КАК НижняяГраница
		|ПОМЕСТИТЬ ВТИнтервалыСтажаПоказателя
		|ИЗ
		|	ВТСтажСотрудниковДляРасчетаПоказателей КАК СтажСотрудниковДляРасчетаПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажа
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажаНижняяГраница
		|			ПО ШкалаОценкиСтажа.Ссылка = ШкалаОценкиСтажаНижняяГраница.Ссылка
		|				И (ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа > ШкалаОценкиСтажаНижняяГраница.ВерхняяГраницаИнтервалаСтажа
		|					ИЛИ ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа = 0)
		|		ПО СтажСотрудниковДляРасчетаПоказателей.Показатель = ШкалаОценкиСтажа.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СтажСотрудниковДляРасчетаПоказателей.Показатель,
		|	ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа,
		|	ШкалаОценкиСтажа.ЗначениеПоказателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеПоказатели.ИдентификаторСтроки,
		|	ДополнительныеПоказатели.Сотрудник,
		|	ДополнительныеПоказатели.ДатаНачала,
		|	ДополнительныеПоказатели.Показатель,
		|	ЕСТЬNULL(ИнтервалыСтажаПоказателя.ЗначениеПоказателя, 0) КАК Значение,
		|	ИнтервалыСтажаПоказателя.ВерхняяГраница,
		|	ИнтервалыСтажаПоказателя.НижняяГраница,
		|	СтажСотрудниковДляРасчетаПоказателей.РазмерМесяцев,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СтажСотрудниковДляРасчетаПоказателей.МаксимальноеЗначениеПоказателя, 0) > 0
		|				И ЕСТЬNULL(ИнтервалыСтажаПоказателя.ЗначениеПоказателя, 0) >= ЕСТЬNULL(СтажСотрудниковДляРасчетаПоказателей.МаксимальноеЗначениеПоказателя, 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДостигнутоМаксимальноеЗначение
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажСотрудниковДляРасчетаПоказателей КАК СтажСотрудниковДляРасчетаПоказателей
		|		ПО ДополнительныеПоказатели.Сотрудник = СтажСотрудниковДляРасчетаПоказателей.Сотрудник
		|			И ДополнительныеПоказатели.ДатаНачала = СтажСотрудниковДляРасчетаПоказателей.ДатаНачала
		|			И ДополнительныеПоказатели.Показатель = СтажСотрудниковДляРасчетаПоказателей.Показатель
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыСтажаПоказателя КАК ИнтервалыСтажаПоказателя
		|		ПО (СтажСотрудниковДляРасчетаПоказателей.Показатель = ИнтервалыСтажаПоказателя.Показатель)
		|			И (СтажСотрудниковДляРасчетаПоказателей.РазмерМесяцев >= ИнтервалыСтажаПоказателя.НижняяГраница)
		|			И (ИнтервалыСтажаПоказателя.ВерхняяГраница = 0
		|				ИЛИ СтажСотрудниковДляРасчетаПоказателей.РазмерМесяцев < ИнтервалыСтажаПоказателя.ВерхняяГраница)
		|ГДЕ
		|	ЕСТЬNULL(ИнтервалыСтажаПоказателя.ЗначениеПоказателя, 0) <> 0";
	
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
		
	УдалитьВТ.Добавить("ВТСтажСотрудниковДляРасчетаПоказателей");	
	УдалитьВТ.Добавить("ВТИнтервалыСтажаПоказателя");	
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

// Вычисляет значение показателя «Размер пособия по уходу за ребенком до трех лет».
//
Процедура ЗаполнитьЗначенияПоказателяРазмерПособияПоУходуЗаРебенком(ТребованияНачислений, СтрокиПоИдентификатору)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательРазмерПособияДоТрехЛет Тогда
		Возврат;
	КонецЕсли;
	
	РазмерПособияДоТрехЛет = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерПособияПоУходуЗаРебенкомДоТрехЛет");
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("РазмерПособияДоТрехЛет", РазмерПособияДоТрехЛет);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ДополнительныеПоказатели.Начисление.НачисляетсяВЦеломЗаМесяц
		|			ТОГДА ДополнительныеПоказатели.ДатаОкончания
		|		ИНАЧЕ ДополнительныеПоказатели.ДатаНачала
		|	КОНЕЦ КАК Период
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель = &РазмерПособияДоТрехЛет";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТИсходныеДанные");
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если Не ВТСодержитСтроки("ВТИсходныеДанные") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РазмерыГосударственныхПособий",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанные"));
	УдалитьВТ.Добавить("ВТРазмерыГосударственныхПособийСрезПоследних");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеПоказатели.ИдентификаторСтроки,
		|	ДополнительныеПоказатели.Показатель,
		|	РазмерПособия.ПоУходуЗаРебенкомДоТрехЛет КАК Значение
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыГосударственныхПособийСрезПоследних КАК РазмерПособия
		|		ПО (ВЫБОР
		|				КОГДА ДополнительныеПоказатели.Начисление.НачисляетсяВЦеломЗаМесяц
		|					ТОГДА РазмерПособия.Период = ДополнительныеПоказатели.ДатаОкончания
		|				ИНАЧЕ РазмерПособия.Период = ДополнительныеПоказатели.ДатаНачала
		|			КОНЕЦ)
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель = &РазмерПособияДоТрехЛет";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

// Вычисляет значение показателя «Процент северной надбавки».
//
Процедура ЗаполнитьЗначенияПоказателяПроцентСевернойНадбавки(ТребованияНачислений, СтрокиПоИдентификатору)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательПроцентСевернойНадбавки Тогда
		Возврат;
	КонецЕсли;
	
	ПроцентСевернойНадбавкиПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка");
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ПроцентСевернойНадбавкиПоказатель", ПроцентСевернойНадбавкиПоказатель);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеПоказатели.Сотрудник,
		|	ДополнительныеПоказатели.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель = &ПроцентСевернойНадбавкиПоказатель";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСотрудникиПериоды");
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если Не ВТСодержитСтроки("ВТСотрудникиПериоды") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	СоздатьВТПроцентСевернойНадбавкиСотрудников("ВТСотрудникиПериоды");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеПоказатели.ИдентификаторСтроки,
		|	ДополнительныеПоказатели.Показатель,
		|	ПроцентНадбавки.ПроцентСевернойНадбавки КАК Значение
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентНадбавки
		|		ПО (ПроцентНадбавки.Сотрудник = ДополнительныеПоказатели.Сотрудник)
		|			И (ПроцентНадбавки.Период = ДополнительныеПоказатели.ДатаНачала)
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель = &ПроцентСевернойНадбавкиПоказатель";

	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
		
КонецПроцедуры

// Вычисляет значение показателя «Районный коэффициент РФ».
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателяРайонныйКоэффициентРФ(ТребованияНачислений, СтрокиПоИдентификатору)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательРайонныйКоэффициентРФ Тогда
		Возврат;
	КонецЕсли;
	
	РайонныйКоэффициентРФ = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициентРФ");
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("РайонныйКоэффициентРФ", РайонныйКоэффициентРФ);
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	ДополнительныеПоказатели.ИдентификаторСтроки,
		|	ДополнительныеПоказатели.Показатель,
		|	ДополнительныеПоказатели.Подразделение
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель = &РайонныйКоэффициентРФ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Значение = РасчетЗарплатыРасширенный.РайонныйКоэффициентРФ(Выборка.Подразделение);
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Выборка.Показатель, Значение);
	КонецЦикла;
	
КонецПроцедуры

// Вычисляет значения показателей «Процент доплаты за работу в ночное время» и «Процент доплаты за работу в вечернее
// время».
//
Процедура ЗаполнитьЗначенияПоказателейПроцентДоплатыЗаРаботуВНочноеВечернееВремя(ТребованияНачислений, СтрокиПоИдентификатору)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательПроцентДоплатыЗаНочные 
		И Не ТребованияНачислений.ТребуетсяПоказательПроцентДоплатыЗаВечерние Тогда
		Возврат;
	КонецЕсли;
	
	ПроцентДоплатыЗаНочные = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВНочноеВремя");
	ПроцентДоплатыЗаВечерние = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВВечернееВремя");
	
	Показатели = Новый Массив;
	Показатели.Добавить(ПроцентДоплатыЗаНочные);
	Показатели.Добавить(ПроцентДоплатыЗаВечерние);
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ПроцентДоплатыНочныеВечерние", Показатели);
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	ДополнительныеПоказатели.ИдентификаторСтроки,
		|	ДополнительныеПоказатели.Показатель,
		|	ДополнительныеПоказатели.Организация
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель В (&ПроцентДоплатыНочныеВечерние)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Если ЗначениеЗаполнено(ПроцентДоплатыЗаНочные) И Выборка.Показатель = ПроцентДоплатыЗаНочные Тогда
			СтруктураЗначений = ЗарплатаКадрыРасширенныйПовтИсп.ПроцентДоплатыЗаРаботуВНочноеВечернееВремя(Выборка.Организация);
			Значение = СтруктураЗначений.ПроцентДоплатыЗаРаботуВНочноеВремя;
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Выборка.Показатель, Значение);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПроцентДоплатыЗаВечерние) И Выборка.Показатель = ПроцентДоплатыЗаВечерние Тогда
			СтруктураЗначений = ЗарплатаКадрыРасширенныйПовтИсп.ПроцентДоплатыЗаРаботуВНочноеВечернееВремя(Выборка.Организация);
			Значение = СтруктураЗначений.ПроцентДоплатыЗаРаботуВВечернееВремя;
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Выборка.Показатель, Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вычисляет значение показателя «Оклад тарифной группы».
//
Процедура ЗаполнитьЗначенияПоказателяБазовыйТарифГруппы(ТребованияНачислений, СтрокиПоИдентификатору)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательБазовыйТарифГруппы Тогда
		Возврат;
	КонецЕсли;
	
	БазовыйТарифГруппы = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.БазовыйТарифГруппы");
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("БазовыйТарифГруппыПоказатель", БазовыйТарифГруппы);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеПоказатели.Сотрудник,
		|	ДополнительныеПоказатели.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель = &БазовыйТарифГруппыПоказатель";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСотрудники");
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если Не ВТСодержитСтроки("ВТСотрудники") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	ОписаниеВТСотрудники = ОписаниеВТСотрудникиПериоды();
	ОписаниеВТСотрудники.ИмяВТ = "ВТСотрудники";
	СоздатьВТКадровыеДанныеСотрудниковПоОписаниюВТСотрудники(ОписаниеВТСотрудники, "ТарифнаяСетка");
	УдалитьВТ.Добавить("ВТКадровыеДанныеСотрудников");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТКадровыеДанныеСотрудников","Период,ТарифнаяСетка");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ЗначенияБазовыхТарифов", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	УдалитьВТ.Добавить("ВТЗначенияБазовыхТарифовСрезПоследних");
	
	Запрос.Текст = 	
		"ВЫБРАТЬ
		|	ДополнительныеПоказатели.ИдентификаторСтроки,
		|	ДополнительныеПоказатели.Показатель,
		|	ЕСТЬNULL(ЗначенияБазовыхТарифов.Тариф, 0) КАК Значение
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО (КадровыеДанныеСотрудников.Сотрудник = ДополнительныеПоказатели.Сотрудник)
		|			И (КадровыеДанныеСотрудников.Период = ДополнительныеПоказатели.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияБазовыхТарифовСрезПоследних КАК ЗначенияБазовыхТарифов
		|		ПО (КадровыеДанныеСотрудников.ТарифнаяСетка = ЗначенияБазовыхТарифов.ТарифнаяСетка)
		|			И (КадровыеДанныеСотрудников.Период = ЗначенияБазовыхТарифов.Период)
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель = &БазовыйТарифГруппыПоказатель";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#Область РасчетПоказателейНачислений

Процедура РассчитатьЗначенияПоказателейНормыВремени(СтрокиПоИдентификатору, ТребованияНачислений)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательНормаВремени Тогда
		Возврат;
	КонецЕсли;
	
	НормаДней = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней");
	НормаВремениВДнях = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях");
	НормаВремениВЧасах = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах");
	
	Показатели = Новый Массив;
	Показатели.Добавить(НормаДней);
	Показатели.Добавить(НормаВремениВДнях);
	Показатели.Добавить(НормаВремениВЧасах);
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ПоказателиНормыВремени", Показатели);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ГрафикРаботыНорма,
		|	Начисления.ПериодРегистрацииВремени,
		|	Начисления.ПериодРегистрацииНормыВремени,
		|	Начисления.ПериодДействия КАК ПериодДействия
		|ПОМЕСТИТЬ ВТФильтрНормаВремениПоИсточникамДанных
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ФиксРасчетВремени = ЛОЖЬ
		|	И Начисления.ФиксСторно = ЛОЖЬ
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ВТПоказателиРасчета КАК ПоказателиРасчета
		|			ГДЕ
		|				ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета
		|				И ПоказателиРасчета.Показатель В (&ПоказателиНормыВремени))";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрНормаВремениПоИсточникамДанных");
	
	Если Не ВТСодержитСтроки("ВТФильтрНормаВремениПоИсточникамДанных") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	ОписаниеФильтра = МенеджерУчетаВремени.ОписаниеФильтраВТНормаВремениПоИсточникамДанных();
	ОписаниеФильтра.ИмяТаблицы = "ВТФильтрНормаВремениПоИсточникамДанных";
	ОписаниеФильтра.ИмяПоляИсточникДанныхНормыВремени = "ГрафикРаботыНорма";
	ОписаниеФильтра.ИмяПоляИсточникДанныхФактическогоВремени = "ГрафикРаботы";
	ОписаниеФильтра.ИмяПоляМесяц = "ПериодДействия";
	ОписаниеФильтра.ИмяПоляПериодРегистрацииВремени = "ПериодРегистрацииНормыВремени";
	МенеджерУчетаВремени.СоздатьВТНормаВремениПоИсточникамДанных(ОписаниеФильтра);
	УдалитьВТ.Добавить("ВТНормаВремениПоИсточникамДанных");
	
	ПараметрыПроверки = УчетРабочегоВремениРасширенный.ПараметрыДляПроверитьЗаполнениеНормыВремени("ВТНормаВремениПоИсточникамДанных", "Месяц");
	УчетРабочегоВремениРасширенный.ДобавитьОписаниеПоляНормыВремени(ПараметрыПроверки, "НормаДней", "ИсточникДанныхНормыВремени");
	УчетРабочегоВремениРасширенный.ДобавитьОписаниеПоляНормыВремени(ПараметрыПроверки, "НормаДнейПолная", "ИсточникДанныхНормыВремени");
	УчетРабочегоВремениРасширенный.ДобавитьОписаниеПоляНормыВремени(ПараметрыПроверки, "НормаЧасовПолная", "ИсточникДанныхНормыВремени");
	УчетРабочегоВремениРасширенный.ПроверитьЗаполнениеНормыВремени(МенеджерВременныхТаблиц, ПараметрыПроверки);
	
	Запрос.УстановитьПараметр("НормаДней", НормаДней);
	Запрос.УстановитьПараметр("НормаВремениВДнях", НормаВремениВДнях);
	Запрос.УстановитьПараметр("НормаВремениВЧасах", НормаВремениВЧасах);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &НормаДней
		|			ТОГДА НормаВремени.НормаДней
		|		КОГДА ПоказателиРасчета.Показатель = &НормаВремениВДнях
		|			ТОГДА НормаВремени.НормаДнейПолная
		|		ИНАЧЕ НормаВремени.НормаДней
		|	КОНЕЦ КАК НормаДней,
		|	НормаВремени.НормаЧасовПолная КАК НормаЧасов,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &НормаДней
		|			ТОГДА НормаВремени.НормаДней
		|		КОГДА ПоказателиРасчета.Показатель = &НормаВремениВДнях
		|			ТОГДА НормаВремени.НормаДнейПолная
		|		КОГДА ПоказателиРасчета.Показатель = &НормаВремениВЧасах
		|			ТОГДА НормаВремени.НормаЧасовПолная
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Значение
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета)
		|			И (ПоказателиРасчета.Показатель В (&ПоказателиНормыВремени))
		|			И (Начисления.ФиксРасчетВремени = ЛОЖЬ)
		|			И (Начисления.ФиксСторно = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоИсточникамДанных КАК НормаВремени
		|		ПО (НормаВремени.ИсточникДанныхНормыВремени = Начисления.ГрафикРаботыНорма)
		|			И (НормаВремени.ИсточникДанныхФактическогоВремени = Начисления.ГрафикРаботы)
		|			И (НормаВремени.Месяц = Начисления.ПериодДействия)
		|			И (НормаВремени.ПериодРегистрацииВремени = Начисления.ПериодРегистрацииНормыВремени)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	ЗаполнитьЗначенияПоказателейПоВыборкеЗапроса(Выборка, СтрокиПоИдентификатору, Истина);
	
	Выборка.Сбросить();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Строка.НормаДней = Выборка.НормаДней;
		Строка.НормаЧасов = Выборка.НормаЧасов;
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейРабочегоВремени(СтрокиПоИдентификатору, ТребованияНачислений)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательРабочегоВремени Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ПериодРегистрацииВремени,
		|	Начисления.ОбщийГрафик,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ПериодДействияНачало КАК ДатаНачала,
		|	Начисления.ПериодДействияКонец КАК ДатаОкончания,
		|	Начисления.ВидРасчета
		|ПОМЕСТИТЬ ВТФильтрЗарегистрированноеВремяПоНаборамВидовВремени
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|ГДЕ
		|	Начисления.РассчитываемыйНабор
		|	И (НЕ Начисления.ВидРасчета.НачисляетсяВЦеломЗаМесяц
		|			ИЛИ Начисления.ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц)
		|	И НЕ Начисления.ФиксСторно
		|	И НЕ Начисления.ФиксРасчетВремени";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрЗарегистрированноеВремяПоНаборамВидовВремени");
	
	Если Не ВТСодержитСтроки("ВТФильтрЗарегистрированноеВремяПоНаборамВидовВремени") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	ОписаниеФильтра = МенеджерУчетаВремени.ОписаниеФильтраВТЗарегистрированноеВремяПоНаборамВидовВремени();
	ОписаниеФильтра.ИмяТаблицы = "ВТФильтрЗарегистрированноеВремяПоНаборамВидовВремени";
	ОписаниеФильтра.ИмяПоляСотрудник = "Сотрудник";
	ОписаниеФильтра.ИмяПоляИсточникДанных = "ГрафикРаботы";
	ОписаниеФильтра.ИмяПоляПериодРегистрацииВремени = "ПериодРегистрацииВремени";
	ОписаниеФильтра.ИмяПоляОбщийГрафик = "ОбщийГрафик";
	ОписаниеФильтра.ИмяПоляМесяц = "ПериодДействия";
	ОписаниеФильтра.ИмяПоляДатаНачала = "ДатаНачала";
	ОписаниеФильтра.ИмяПоляДатаОкончания = "ДатаОкончания";
	ОписаниеФильтра.ИмяПоляКлючНабораВидовВремени = "ВидРасчета";
	ОписаниеФильтра.КлючевыеПоля.Добавить("ИдентификаторСтроки");
	
	ОписаниеВидовВремени = МенеджерУчетаВремени.ОписаниеТаблицыНаборовВидовВремени();
	ОписаниеВидовВремени.ИмяТаблицы = "ПланВидовРасчета.Начисления.ВидыВремени";
	ОписаниеВидовВремени.ИмяПоляКлюч = "Ссылка";
	ОписаниеВидовВремени.ИмяПоляВидВремени = "ВидВремени";
	ОписаниеВидовВремени.ИмяПоляУчитыватьТолькоПраздники = "ОпределяющийЗаПраздничныеДни";
	
	МенеджерУчетаВремени.СоздатьВТЗарегистрированноеВремяПоНаборамВидовВремени(ОписаниеФильтра, ОписаниеВидовВремени);
	УдалитьВТ.Добавить("ВТЗарегистрированноеВремяПоНаборамВидовВремени");
	
	ВремяВДнях = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях");
	ВремяВДняхЧасах = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах");
	ВремяВЧасах = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах");
	
	Показатели = Новый Массив;
	Показатели.Добавить(ВремяВДнях);
	Показатели.Добавить(ВремяВДняхЧасах);
	Показатели.Добавить(ВремяВЧасах);
	
	Запрос.УстановитьПараметр("ВремяВДнях", ВремяВДнях);
	Запрос.УстановитьПараметр("ВремяВДняхЧасах", ВремяВДняхЧасах);
	Запрос.УстановитьПараметр("ВремяВЧасах", ВремяВЧасах);
	Запрос.УстановитьПараметр("ПоказателиРабочегоВремени", Показатели);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &ВремяВДнях
		|			ТОГДА РабочееВремя.Дней
		|		КОГДА ПоказателиРасчета.Показатель = &ВремяВДняхЧасах
		|			ТОГДА ВЫБОР
		|					КОГДА Начисления.ВремяВЧасах
		|						ТОГДА РабочееВремя.Часов
		|					ИНАЧЕ РабочееВремя.Дней
		|				КОНЕЦ
		|		КОГДА ПоказателиРасчета.Показатель = &ВремяВЧасах
		|			ТОГДА РабочееВремя.Часов
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Значение
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета)
		|			И (ПоказателиРасчета.Показатель В (&ПоказателиРабочегоВремени))
		|			И (Начисления.РассчитываемыйНабор)
		|			И (НЕ Начисления.ФиксРасчетВремени)
		|			И (НЕ Начисления.ФиксСторно)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированноеВремяПоНаборамВидовВремени КАК РабочееВремя
		|		ПО (РабочееВремя.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (ВЫБОР
		|				КОГДА Начисления.ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете)
		|					ТОГДА РабочееВремя.Дней <> 0
		|							ИЛИ РабочееВремя.Часов <> 0
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Истина);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ВидыРасчета.ИспользуетФормулу КАК ИспользуетФормулу,
		|	ВидыРасчета.ФормулаРасчета КАК ФормулаРасчета,
		|	ВидыРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	ВидыРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
		|	ВидыРасчета.ВидВремени КАК ВидВремени,
		|	ВидыРасчета.ТребуетсяРасчетСверхурочных КАК РасчетСверхурочных,
		|	РабочееВремя.Дней КАК Дней,
		|	РабочееВремя.Часов КАК Часов
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.ВидРасчета)
		|			И (НЕ ВидыРасчета.НачисляетсяВЦеломЗаМесяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированноеВремяПоНаборамВидовВремени КАК РабочееВремя
		|		ПО (РабочееВремя.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|ГДЕ
		|	Начисления.РассчитываемыйНабор
		|	И НЕ Начисления.ФиксРасчетВремени
		|	И НЕ Начисления.ФиксСторно";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Сбросить();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Строка.ОплаченоДней = Выборка.Дней;
		Строка.ОплаченоЧасов = Выборка.Часов;
		Если Выборка.ИспользуетФормулу И Выборка.ФормулаРасчета = "0" Тогда
			Строка.ОплаченоДней = 0;
			Строка.ОплаченоЧасов = 0;
		КонецЕсли;
		Если Выборка.ЗачетНормыВремени = Истина Тогда
			Строка.ОтработаноДней = Выборка.Дней;
			Строка.ОтработаноЧасов = Выборка.Часов;
		КонецЕсли;
		Если Выборка.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы Тогда
			Если Не Выборка.РасчетСверхурочных Тогда
				Строка.ОтработаноДней = Выборка.Дней;
			КонецЕсли;
			Строка.ОтработаноЧасов = Выборка.Часов;
		КонецЕсли;
		Если Выборка.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное Тогда
			Строка.ОтработаноЧасов = Выборка.Часов;
		КонецЕсли;
	КонецЦикла;
		
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейСверхурочно(СтрокиПоИдентификатору, ТребованияНачислений)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательОтработаноСверхурочно Тогда
		Возврат;
	КонецЕсли;
	
	ОтработаноСверхурочно = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочно");
	ОтработаноСверхурочноВПределах2Часов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочноВПределах2Часов");
	
	Показатели = Новый Массив;
	Показатели.Добавить(ОтработаноСверхурочно);
	Показатели.Добавить(ОтработаноСверхурочноВПределах2Часов);
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ПоказателиСверхурочно", Показатели);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ПериодРегистрацииВремени,
		|	Начисления.ОбщийГрафик,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ПериодДействияНачало КАК ДатаНачала,
		|	Начисления.ПериодДействияКонец КАК ДатаОкончания,
		|	Начисления.ВидРасчета
		|ПОМЕСТИТЬ ВТФильтрЗарегистрированноеВремяПоНаборамВидовВремени
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|ГДЕ
		|	Начисления.РассчитываемыйНабор
		|	И НЕ Начисления.ФиксРасчетВремени
		|	И НЕ Начисления.ФиксСторно
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ВТПоказателиРасчета КАК ПоказателиРасчета
		|			ГДЕ
		|				ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета
		|				И ПоказателиРасчета.Показатель В (&ПоказателиСверхурочно))";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрЗарегистрированноеВремяПоНаборамВидовВремени");
	
	Если Не ВТСодержитСтроки("ВТФильтрЗарегистрированноеВремяПоНаборамВидовВремени") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	ОписаниеФильтра = МенеджерУчетаВремени.ОписаниеФильтраВТЗарегистрированноеВремяПоНаборамВидовВремени();
	ОписаниеФильтра.ИмяТаблицы = "ВТФильтрЗарегистрированноеВремяПоНаборамВидовВремени";
	ОписаниеФильтра.ИмяПоляСотрудник = "Сотрудник";
	ОписаниеФильтра.ИмяПоляИсточникДанных = "ГрафикРаботы";
	ОписаниеФильтра.ИмяПоляПериодРегистрацииВремени = "ПериодРегистрацииВремени";
	ОписаниеФильтра.ИмяПоляОбщийГрафик = "ОбщийГрафик";
	ОписаниеФильтра.ИмяПоляМесяц = "ПериодДействия";
	ОписаниеФильтра.ИмяПоляДатаНачала = "ДатаНачала";
	ОписаниеФильтра.ИмяПоляДатаОкончания = "ДатаОкончания";
	ОписаниеФильтра.ИмяПоляКлючНабораВидовВремени = "ВидРасчета";
	ОписаниеФильтра.КлючевыеПоля.Добавить("ИдентификаторСтроки");
	
	Запрос.УстановитьПараметр("Сверхурочные", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	Запрос.УстановитьПараметр("СверхурочныеБезПовышеннойОплаты", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СверхурочныеБезПовышеннойОплаты"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыВремени.Ссылка КАК Начисление,
		|	ВидыВремени.ВидВремени КАК ВидВремени,
		|	ВидыВремени.ОпределяющийЗаПраздничныеДни
		|ПОМЕСТИТЬ ВТВидыВремениСверхурочно
		|ИЗ
		|	ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК СправочникВидыВремени
		|		ПО (СправочникВидыВремени.Ссылка = ВидыВремени.ВидВремени)
		|			И (СправочникВидыВремени.ОсновноеВремя В (&Сверхурочные, &СверхурочныеБезПовышеннойОплаты))
		|			И (ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ВТПоказателиРасчета КАК ПоказателиРасчета
		|				ГДЕ
		|					ПоказателиРасчета.ВидРасчета = ВидыВремени.Ссылка
		|					И ПоказателиРасчета.Показатель В (&ПоказателиСверхурочно)))";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТВидыВремениСверхурочно");
	
	ОписаниеВидовВремени = МенеджерУчетаВремени.ОписаниеТаблицыНаборовВидовВремени();
	ОписаниеВидовВремени.ИмяТаблицы = "ВТВидыВремениСверхурочно";
	ОписаниеВидовВремени.ИмяПоляКлюч = "Начисление";
	ОписаниеВидовВремени.ИмяПоляВидВремени = "ВидВремени";
	ОписаниеВидовВремени.ИмяПоляУчитыватьТолькоПраздники = "ОпределяющийЗаПраздничныеДни";
	
	МенеджерУчетаВремени.СоздатьВТЗарегистрированноеВремяПоНаборамВидовВремени(ОписаниеФильтра, ОписаниеВидовВремени);
	УдалитьВТ.Добавить("ВТЗарегистрированноеВремяПоНаборамВидовВремени");
	
	Запрос.УстановитьПараметр("ОтработаноСверхурочно", ОтработаноСверхурочно);
	Запрос.УстановитьПараметр("ОтработаноСверхурочноВПределах2Часов", ОтработаноСверхурочноВПределах2Часов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &ОтработаноСверхурочно
		|			ТОГДА РабочееВремя.Часов
		|		КОГДА ПоказателиРасчета.Показатель = &ОтработаноСверхурочноВПределах2Часов
		|			ТОГДА РабочееВремя.ЧасовВПределах2Часов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Значение
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета)
		|			И (ПоказателиРасчета.Показатель В (&ПоказателиСверхурочно))
		|			И (Начисления.РассчитываемыйНабор)
		|			И (НЕ Начисления.ФиксРасчетВремени)
		|			И (НЕ Начисления.ФиксСторно)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированноеВремяПоНаборамВидовВремени КАК РабочееВремя
		|		ПО (РабочееВремя.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Истина);
		
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателяОтработаноСмен(СтрокиПоИдентификатору, ТребованияНачислений)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательОтработаноСмен Тогда
		Возврат;
	КонецЕсли;
	
	ОтработаноСмен = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСмен");
		
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОтработаноСмен", ОтработаноСмен);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ГрафикРаботы КАК ГрафикРаботы,
		|	Начисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|	Начисления.ОбщийГрафик КАК ОбщийГрафик,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ПериодДействияНачало КАК ДатаНачала,
		|	Начисления.ПериодДействияКонец КАК ДатаОкончания,
		|	Начисления.ВидРасчета КАК ВидРасчета
		|ПОМЕСТИТЬ ВТФильтрЗарегистрированноеВремяПоНаборамВидовВремени
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|ГДЕ
		|	Начисления.РассчитываемыйНабор
		|	И НЕ Начисления.ФиксРасчетВремени
		|	И НЕ Начисления.ФиксСторно
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ВТПоказателиРасчета КАК ПоказателиРасчета
		|			ГДЕ
		|				ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета
		|				И ПоказателиРасчета.Показатель = &ОтработаноСмен)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрЗарегистрированноеВремяПоНаборамВидовВремени");
	
	Если Не ВТСодержитСтроки("ВТФильтрЗарегистрированноеВремяПоНаборамВидовВремени") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	ОписаниеФильтра = МенеджерУчетаВремени.ОписаниеФильтраВТЗарегистрированноеВремяПоНаборамВидовВремени();
	ОписаниеФильтра.ИмяТаблицы = "ВТФильтрЗарегистрированноеВремяПоНаборамВидовВремени";
	ОписаниеФильтра.ИмяПоляСотрудник = "Сотрудник";
	ОписаниеФильтра.ИмяПоляИсточникДанных = "ГрафикРаботы";
	ОписаниеФильтра.ИмяПоляПериодРегистрацииВремени = "ПериодРегистрацииВремени";
	ОписаниеФильтра.ИмяПоляОбщийГрафик = "ОбщийГрафик";
	ОписаниеФильтра.ИмяПоляМесяц = "ПериодДействия";
	ОписаниеФильтра.ИмяПоляДатаНачала = "ДатаНачала";
	ОписаниеФильтра.ИмяПоляДатаОкончания = "ДатаОкончания";
	ОписаниеФильтра.ИмяПоляКлючНабораВидовВремени = "ВидРасчета";
	ОписаниеФильтра.КлючевыеПоля.Добавить("ИдентификаторСтроки");
	
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Показатели.Ссылка КАК Начисление,
		|	&РабочееВремя КАК ВидВремени,
		|	ЛОЖЬ КАК ОпределяющийЗаПраздничныеДни
		|ПОМЕСТИТЬ ВТВидыВремениДляПолученияСмен
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК Показатели
		|ГДЕ
		|	Показатели.Показатель = &ОтработаноСмен";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТВидыВремениДляПолученияСмен");
	
	ОписаниеВидовВремени = МенеджерУчетаВремени.ОписаниеТаблицыНаборовВидовВремени();
	ОписаниеВидовВремени.ИмяТаблицы = "ВТВидыВремениДляПолученияСмен";
	ОписаниеВидовВремени.ИмяПоляКлюч = "Начисление";
	ОписаниеВидовВремени.ИмяПоляВидВремени = "ВидВремени";
	ОписаниеВидовВремени.ИмяПоляУчитыватьТолькоПраздники = "ОпределяющийЗаПраздничныеДни";
	
	МенеджерУчетаВремени.СоздатьВТЗарегистрированноеВремяПоНаборамВидовВремени(ОписаниеФильтра, ОписаниеВидовВремени);
	УдалитьВТ.Добавить("ВТЗарегистрированноеВремяПоНаборамВидовВремени");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель КАК Показатель,
		|	РабочееВремя.Дней КАК Значение
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета)
		|			И (ПоказателиРасчета.Показатель = &ОтработаноСмен)
		|			И (Начисления.РассчитываемыйНабор)
		|			И (НЕ Начисления.ФиксРасчетВремени)
		|			И (НЕ Начисления.ФиксСторно)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированноеВремяПоНаборамВидовВремени КАК РабочееВремя
		|		ПО (РабочееВремя.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Истина);
		
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейКалендарныеДниНачислений(СтрокиПоИдентификатору, ТребованияНачислений)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательКалендарныеДни Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВТНачисления = ОписаниеВТНачисления();
	ОписаниеВТНачисления.ИмяВТ = "ВТРегистрРасчета_Начисления_ФактическийПериодДействия";
	ОписаниеВТНачисления.ИмяПоляНачалоПериода = "ПериодДействияНачало";
	ОписаниеВТНачисления.ИмяПоляОкончаниеПериода = "ПериодДействияКонец";
	ОписаниеВТНачисления.ИмяПоляНачисление = "ВидРасчета";
	РассчитатьЗначенияПоказателейКалендарныеДни(СтрокиПоИдентификатору, ОписаниеВТНачисления);
	
	ОписаниеВТНачисления.ИмяВТ = "ВТРегистрРасчета_Начисления";
	
	РассчитатьЗначенияПоказателейКалендарныеДниМесяца(СтрокиПоИдентификатору, ОписаниеВТНачисления);
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейКалендарныеДни(СтрокиПоИдентификатору, ОписаниеВТНачисления, ОтборПоРассчитываемомуНабору = Истина)
	
	КалендарныеДни = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни");
	
	Показатели = Новый Массив;
	Показатели.Добавить(КалендарныеДни);
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ПоказателиКалендарныеДни", Показатели);
	Запрос.УстановитьПараметр("КалендарныеДни", КалендарныеДни);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель КАК Показатель,
		|	СУММА(РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, ДЕНЬ), НАЧАЛОПЕРИОДА(Начисления.ПериодДействияКонец, ДЕНЬ), ДЕНЬ) + 1) КАК Значение
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета)
		|			И (ПоказателиРасчета.Показатель В (&ПоказателиКалендарныеДни))
		|			И (Начисления.ФиксРасчетВремени = ЛОЖЬ)
		|			И (Начисления.ФиксСторно = ЛОЖЬ)
		|			И (Начисления.РассчитываемыйНабор)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРегистрРасчета_Начисления_ФактическийПериодДействия", ОписаниеВТНачисления.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ПериодДействияНачало", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ПериодДействияКонец", "Начисления." + ОписаниеВТНачисления.ИмяПоляОкончаниеПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ВидРасчета", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачисление);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ФиксРасчетВремени", "Начисления." + ОписаниеВТНачисления.ИмяПоляФиксРасчетВремени);
	Если Не ОтборПоРассчитываемомуНабору Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РассчитываемыйНабор", "ИСТИНА");
	КонецЕсли;
	
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Истина);
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейКалендарныеДниМесяца(СтрокиПоИдентификатору, ОписаниеВТНачисления)
	
	КалендарныеДниМесяца = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца");
	
	Показатели = Новый Массив;
	Показатели.Добавить(КалендарныеДниМесяца);
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ПоказателиКалендарныеДни", Показатели);
	Запрос.УстановитьПараметр("КалендарныеДниМесяца", КалендарныеДниМесяца);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &КалендарныеДниМесяца
		|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, МЕСЯЦ), КОНЕЦПЕРИОДА(Начисления.ПериодДействияНачало, МЕСЯЦ), ДЕНЬ) + 1
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Значение
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета)
		|			И (ПоказателиРасчета.Показатель В (&ПоказателиКалендарныеДни))
		|			И (Начисления.ФиксРасчетВремени = ЛОЖЬ)
		|			И (Начисления.ФиксСторно = ЛОЖЬ)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРегистрРасчета_Начисления_ФактическийПериодДействия", ОписаниеВТНачисления.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ПериодДействияНачало", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ПериодДействияКонец", "Начисления." + ОписаниеВТНачисления.ИмяПоляОкончаниеПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ВидРасчета", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачисление);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ФиксРасчетВремени", "Начисления." + ОписаниеВТНачисления.ИмяПоляФиксРасчетВремени);
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Истина);
		
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейКалендарныеДниБезУчетаПраздников(СтрокиПоИдентификатору, ТребованияНачислений)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательКалендарныеДниБезПраздников Тогда
		Возврат;
	КонецЕсли;
	
	КалендарныеДниБезПраздников = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников");
	
	Показатели = Новый Массив;
	Показатели.Добавить(КалендарныеДниБезПраздников);
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ПоказателиКалендарныеДни", Показатели);
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.ОбщийГрафик,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ПериодДействияНачало КАК ДатаНачала,
		|	Начисления.ПериодДействияКонец КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТФильтрДанныеПроизводственногоКалендаряПоСотрудникам
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|ГДЕ
		|	Начисления.РассчитываемыйНабор
		|	И НЕ Начисления.ФиксРасчетВремени
		|	И НЕ Начисления.ФиксСторно
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ВТПоказателиРасчета КАК ПоказателиРасчета
		|			ГДЕ
		|				ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета
		|				И ПоказателиРасчета.Показатель В (&ПоказателиКалендарныеДни))";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрДанныеПроизводственногоКалендаряПоСотрудникам");
	
	Если Не ВТСодержитСтроки("ВТФильтрДанныеПроизводственногоКалендаряПоСотрудникам") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	ОписаниеФильтра = МенеджерУчетаВремени.ОписаниеФильтраВТДанныеПроизводственногоКалендаряПоОбщимГрафикам();
	ОписаниеФильтра.ИмяТаблицы = "ВТФильтрДанныеПроизводственногоКалендаряПоСотрудникам";
	ОписаниеФильтра.ИмяПоляОбщийГрафик = "ОбщийГрафик";
	ОписаниеФильтра.ИмяПоляДатаНачала = "ДатаНачала";
	ОписаниеФильтра.ИмяПоляДатаОкончания = "ДатаОкончания";
	ОписаниеФильтра.КлючевыеПоля.Добавить("ИдентификаторСтроки");
	МенеджерУчетаВремени.СоздатьВТДанныеПроизводственногоКалендаряПоОбщимГрафикам(ОписаниеФильтра);
	
	УдалитьВТ.Добавить("ВТДанныеПроизводственногоКалендаряПоОбщимГрафикам");
	
	Запрос.УстановитьПараметр("КалендарныеДниБезПраздников", КалендарныеДниБезПраздников);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель КАК Показатель,
		|	СУММА(ЕСТЬNULL(ДанныеКалендаря.ДнейКалендарныхБезУчетаПраздников, 0)) КАК Значение
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета)
		|			И (ПоказателиРасчета.Показатель В (&ПоказателиКалендарныеДни))
		|			И (Начисления.РассчитываемыйНабор)
		|			И (НЕ Начисления.ФиксРасчетВремени)
		|			И (НЕ Начисления.ФиксСторно)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряПоОбщимГрафикам КАК ДанныеКалендаря
		|		ПО (ДанныеКалендаря.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (ДанныеКалендаря.ДатаНачала = Начисления.ПериодДействияНачало)
		|			И (ДанныеКалендаря.ДатаОкончания = Начисления.ПериодДействияКонец)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Истина);
		
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейОтработаноВсего(СтрокиПоИдентификатору, ТребованияНачислений)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательОтработаноВсего Тогда
		Возврат;
	КонецЕсли;
	
	ОтработаноДней = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней");
	ОтработаноЧасов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов");
	
	Показатели = Новый Массив;
	Показатели.Добавить(ОтработаноДней);
	Показатели.Добавить(ОтработаноЧасов);
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ПоказателиОтработаноВсего", Показатели);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ПериодРегистрацииВремени,
		|	Начисления.ОбщийГрафик,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ПериодДействияНачало КАК ДатаНачала,
		|	Начисления.ПериодДействияКонец КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТФильтрОтработаноВсего
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|ГДЕ
		|	Начисления.РассчитываемыйНабор
		|	И НЕ Начисления.ФиксРасчетВремени
		|	И НЕ Начисления.ФиксСторно
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ВТПоказателиРасчета КАК ПоказателиРасчета
		|			ГДЕ
		|				ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета
		|				И ПоказателиРасчета.Показатель В (&ПоказателиОтработаноВсего))";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрОтработаноВсего");
	
	Если Не ВТСодержитСтроки("ВТФильтрОтработаноВсего") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	ОписаниеФильтра = МенеджерУчетаВремени.ОписаниеФильтраВТОтработаноВсего();
	ОписаниеФильтра.ИмяТаблицы = "ВТФильтрОтработаноВсего";
	ОписаниеФильтра.ИмяПоляСотрудник = "Сотрудник";
	ОписаниеФильтра.ИмяПоляИсточникДанных = "ГрафикРаботы";
	ОписаниеФильтра.ИмяПоляПериодРегистрацииВремени = "ПериодРегистрацииВремени";
	ОписаниеФильтра.ИмяПоляОбщийГрафик = "ОбщийГрафик";
	ОписаниеФильтра.ИмяПоляМесяц = "ПериодДействия";
	ОписаниеФильтра.ИмяПоляДатаНачала = "ДатаНачала";
	ОписаниеФильтра.ИмяПоляДатаОкончания = "ДатаОкончания";
	ОписаниеФильтра.КлючевыеПоля.Добавить("ИдентификаторСтроки");
	
	МенеджерУчетаВремени.СоздатьВТОтработаноВсего(ОписаниеФильтра);
	
	Запрос.УстановитьПараметр("ОтработаноДней", ОтработаноДней);
	Запрос.УстановитьПараметр("ОтработаноЧасов", ОтработаноЧасов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчета.Показатель = &ОтработаноДней
		|			ТОГДА ОтработаноВсего.Дней
		|		КОГДА ПоказателиРасчета.Показатель = &ОтработаноЧасов
		|			ТОГДА ОтработаноВсего.Часов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Значение
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета)
		|			И (ПоказателиРасчета.Показатель В (&ПоказателиОтработаноВсего))
		|			И (Начисления.РассчитываемыйНабор)
		|			И (НЕ Начисления.ФиксРасчетВремени)
		|			И (НЕ Начисления.ФиксСторно)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноВсего КАК ОтработаноВсего
		|		ПО (ОтработаноВсего.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Истина);
	
	УдалитьВТ.Добавить("ВТОтработаноВсего");

	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейКоличествоДнейОтпуска(СтрокиПоИдентификатору, ТребованияНачислений)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательКоличествоДнейОтпуска Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДнейОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска");
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("КоличествоДнейОтпуска", КоличествоДнейОтпуска);
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ОбщийГрафик,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ПериодДействияНачало КАК ДатаНачала,
		|	Начисления.ПериодДействияКонец КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТФильтрДанныеПроизводственногоКалендаряПоСотрудникам
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|ГДЕ
		|	Начисления.РассчитываемыйНабор
		|	И НЕ Начисления.ФиксРасчетВремени
		|	И НЕ Начисления.ФиксСторно
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ВТПоказателиРасчета КАК ПоказателиРасчета
		|			ГДЕ
		|				ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета
		|				И ПоказателиРасчета.Показатель = &КоличествоДнейОтпуска)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрДанныеПроизводственногоКалендаряПоСотрудникам");
	
	Если Не ВТСодержитСтроки("ВТФильтрДанныеПроизводственногоКалендаряПоСотрудникам") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	ОписаниеФильтра = МенеджерУчетаВремени.ОписаниеФильтраВТДанныеПроизводственногоКалендаряПоОбщимГрафикам();
	ОписаниеФильтра.ИмяТаблицы = "ВТФильтрДанныеПроизводственногоКалендаряПоСотрудникам";
	ОписаниеФильтра.ИмяПоляОбщийГрафик = "ОбщийГрафик";
	ОписаниеФильтра.ИмяПоляДатаНачала = "ДатаНачала";
	ОписаниеФильтра.ИмяПоляДатаОкончания = "ДатаОкончания";
	ОписаниеФильтра.КлючевыеПоля.Добавить("ИдентификаторСтроки");
	МенеджерУчетаВремени.СоздатьВТДанныеПроизводственногоКалендаряПоОбщимГрафикам(ОписаниеФильтра);
	
	УдалитьВТ.Добавить("ВТДанныеПроизводственногоКалендаряПоОбщимГрафикам");
	
	ОстаткиОтпусков.СоздатьВТДоговорыСотрудниковСОтпускомВРабочихДнях(МенеджерВременныхТаблиц, "ВТФильтрДанныеПроизводственногоКалендаряПоСотрудникам", "Сотрудник,ДатаНачала");
	УдалитьВТ.Добавить("ВТДоговорыСотрудниковСОтпускомВРабочихДнях");

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель,
		|	СУММА(ВЫБОР
		|			КОГДА ВидыОтпусков.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВРабочихДнях)
		|				ТОГДА ДанныеКалендаря.ДнейПоШестидневке
		|			КОГДА ВидыОтпусков.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВКалендарныхИлиРабочихДняхВЗависимостиОтТрудовогоДоговора)
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ДоговорыСотрудников.ОтпускВРабочихДняхПоДоговору, ЛОЖЬ) = ИСТИНА
		|							ТОГДА ДанныеКалендаря.ДнейПоШестидневке
		|						ИНАЧЕ ВЫБОР
		|								КОГДА ВидыОтпусков.ОтпускЯвляетсяЕжегодным
		|									ТОГДА ДанныеКалендаря.ДнейКалендарныхБезУчетаПраздников
		|								ИНАЧЕ ДанныеКалендаря.ДнейКалендарных
		|							КОНЕЦ
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ВидыОтпусков.ОтпускЯвляетсяЕжегодным
		|						ТОГДА ДанныеКалендаря.ДнейКалендарныхБезУчетаПраздников
		|					ИНАЧЕ ДанныеКалендаря.ДнейКалендарных
		|				КОНЕЦ
		|		КОНЕЦ) КАК Значение
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета)
		|			И (ПоказателиРасчета.Показатель = &КоличествоДнейОтпуска)
		|			И (Начисления.РассчитываемыйНабор)
		|			И (НЕ Начисления.ФиксРасчетВремени)
		|			И (НЕ Начисления.ФиксСторно)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряПоОбщимГрафикам КАК ДанныеКалендаря
		|		ПО (ДанныеКалендаря.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (ДанныеКалендаря.ДатаНачала = Начисления.ПериодДействияНачало)
		|			И (ДанныеКалендаря.ДатаОкончания = Начисления.ПериодДействияКонец)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоговорыСотрудниковСОтпускомВРабочихДнях КАК ДоговорыСотрудников
		|		ПО (ДоговорыСотрудников.Период = Начисления.ПериодДействияНачало)
		|			И (ДоговорыСотрудников.Сотрудник = Начисления.Сотрудник)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|			ПО ВидыРасчета.ВидОтпуска = ВидыОтпусков.Ссылка
		|		ПО Начисления.ВидРасчета = ВидыРасчета.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Истина);
		
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейКоэффициентИндексацииСреднегоЗаработка(СтрокиПоИдентификатору, ТребованияНачислений)
	
	Если Не ТребованияНачислений.ТребуетсяПоказательКоэффициентИндексации Тогда
		Возврат;
	КонецЕсли;
	
	КоэффициентИндексацииСреднегоЗаработка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСреднегоЗаработка");
	КоэффициентИндексацииСохраняемогоДенежногоСодержания = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСохраняемогоДенежногоСодержания");
	
	Показатели = Новый Массив;
	Показатели.Добавить(КоэффициентИндексацииСреднегоЗаработка);
	Показатели.Добавить(КоэффициентИндексацииСохраняемогоДенежногоСодержания);
	
	// В соответствии с положением о расчете среднего заработка 
	// «..если повышение произошло в период сохранения среднего заработка, 
	// - часть среднего заработка повышается с даты повышения тарифной ставки...».
	// Это значит, что необходимо 
	// - выбрать все месяцы, с даты начала оплачиваемого события
	// - получить коэффициенты индексации заработка за эти месяцы
	// - последовательно начиная с первого месяца агрегировать умножением, получая коэффициент на каждый месяц
	// - сделать все это в разрезе сотрудников.
	
	СоздатьВТДатыНачалаСобытия();
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Показатели", Показатели);
	Запрос.УстановитьПараметр("КоэффициентИндексацииСохраняемогоДенежногоСодержания", КоэффициентИндексацииСохраняемогоДенежногоСодержания);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ПериодДействия КАК Месяц,
		|	Начисления.ВидРасчета,
		|	ПоказателиРасчета.Показатель,
		|	Начисления.ДокументОснование КАК ДокументОснование,
		|	Начисления.ИдентификаторСтроки,
		|	ЕСТЬNULL(КоэффициентыИндексации.Коэффициент, 1) КАК КоэффициентИндексации
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета)
		|			И (ПоказателиРасчета.Показатель В (&Показатели))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСреднегоЗаработка КАК ДатыНачалаСобытия
		|		ПО (ДатыНачалаСобытия.ДокументОснование = Начисления.ДокументОснование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыНачалаСобытия КАК ДатыНачалаСобытияВТ
		|		ПО (ДатыНачалаСобытияВТ.Сотрудник = Начисления.Сотрудник)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентИндексацииЗаработка КАК КоэффициентыИндексации
		|		ПО (КоэффициентыИндексации.Сотрудник = Начисления.Сотрудник)
		|		    И ВЫБОР
		|		    	КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСохраняемогоДенежногоСодержания
		|		        	ТОГДА (КоэффициентыИндексации.Период > ЕСТЬNULL(ДатыНачалаСобытияВТ.Дата, ДатыНачалаСобытия.ДатаНачалаСобытия) И КоэффициентыИндексации.Период <= Начисления.ПериодДействияКонец)
		|		        ИНАЧЕ (КоэффициентыИндексации.Период МЕЖДУ ЕСТЬNULL(ДатыНачалаСобытияВТ.Дата, ДатыНачалаСобытия.ДатаНачалаСобытия) И Начисления.ПериодДействияКонец)
		|			  КОНЕЦ
		|ГДЕ
		|	Начисления.Сторно = ЛОЖЬ
		|	И Начисления.ФиксЗаполнение = ЛОЖЬ
		|	И Начисления.ФиксСторно = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.ИдентификаторСтроки";
		
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		КоэффициентИндексации = 1;
		Пока Выборка.Следующий() Цикл
			КоэффициентИндексации = КоэффициентИндексации * Выборка.КоэффициентИндексации;
		КонецЦикла;
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Выборка.Показатель, КоэффициентИндексации, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТДатыНачалаСобытия()
	
	Если ВТСуществует("ВТДатыНачалаСобытия") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатыНачалаСобытия = Неопределено Тогда
		ДатыНачалаСобытия = ТаблицаДатыНачалаСобытия();
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ДатыНачалаСобытия", ДатыНачалаСобытия);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДатыНачалаСобытия.Сотрудник,
		|	ДатыНачалаСобытия.Дата
		|ПОМЕСТИТЬ ВТДатыНачалаСобытия
		|ИЗ
		|	&ДатыНачалаСобытия КАК ДатыНачалаСобытия";
	Запрос.Выполнить();
	
КонецПроцедуры

#Область СдельныйЗаработок

Процедура РассчитатьЗначенияПоказателейСдельныйЗаработок(СтрокиПоИдентификатору, ТребованияНачислений)
	
	СдельныйЗаработок = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок");
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("СдельныйЗаработок", СдельныйЗаработок);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.ФизическоеЛицо,
		|	&СдельныйЗаработок КАК Показатель,
		|	Начисления.ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц КАК ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		|	Начисления.Организация КАК Организация,
		|	Начисления.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Начисления.ПериодДействия КАК Месяц,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ
		|			ТОГДА Начисления.ПериодДействияНачало
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, МЕСЯЦ)
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ
		|			ТОГДА Начисления.ПериодДействияКонец
		|		ИНАЧЕ КОНЕЦПЕРИОДА(Начисления.ПериодДействияКонец, МЕСЯЦ)
		|	КОНЕЦ КАК ДатаОкончания,
		|	Начисления.ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТДанныеДляРасчета
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|ГДЕ
		|	Начисления.РассчитываемыйНабор
		|	И НЕ Начисления.ФиксЗаполнение
		|	И НЕ Начисления.ФиксСторно
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ВТПоказателиРасчета КАК ПоказателиРасчета
		|			ГДЕ
		|				ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета
		|				И ПоказателиРасчета.Показатель = &СдельныйЗаработок)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДанныеДляРасчета");
	
	Если Не ВТСодержитСтроки("ВТДанныеДляРасчета") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ДанныеДляРасчета.ДатаНачала) КАК МинимальнаяДата,
		|	МАКСИМУМ(ДанныеДляРасчета.ДатаОкончания) КАК МаксимальнаяДата
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	МинимальнаяДата = Выборка.МинимальнаяДата;
	МаксимальнаяДата = Выборка.МаксимальнаяДата;
	
	ОписаниеВТ = ОписаниеВТСПериодами();
	ОписаниеВТ.ИмяВТ = "ВТДанныеДляРасчета";
	ОписаниеВТ.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТСтоимостьВыполненныхРабот(ОписаниеВТ, МинимальнаяДата, МаксимальнаяДата);
	УдалитьВТ.Добавить("ВТСтоимостьВыполненныхРабот");
	
	ОписаниеВТ = ОписаниеВТОперативныхПоказателей();
	ОписаниеВТ.ИмяВТ = "ВТДанныеДляРасчета";
	ОписаниеВТ.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	ОписаниеВТ.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	ОписаниеВТ.ИмяПоляГоловнаяОрганизация = "ГоловнаяОрганизация";
	СоздатьВТЗначенияОперативныхПоказателейСотрудников(ОписаниеВТ);
			
	Запрос.УстановитьПараметр("МинимальнаяДата", МинимальнаяДата);
	Запрос.УстановитьПараметр("МаксимальнаяДата", МаксимальнаяДата);
	Запрос.Текст =
		"ВЫБРАТЬ 
		|	ЗначенияПоказателя.ИдентификаторСтроки,
		|	&СдельныйЗаработок КАК Показатель,
		|	СУММА(ЗначенияПоказателя.Значение) КАК Значение
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеДляРасчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		ЗначенияОперативногоПоказателя.Значение КАК Значение
		|	ИЗ
		|		ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхПоказателейСотрудников КАК ЗначенияОперативногоПоказателя
		|			ПО ДанныеДляРасчета.ФизическоеЛицо = ЗначенияОперативногоПоказателя.ФизическоеЛицо
		|				И ДанныеДляРасчета.Организация = ЗначенияОперативногоПоказателя.Организация
		|				И (ЗначенияОперативногоПоказателя.Показатель = &СдельныйЗаработок)
		|				И (ЗначенияОперативногоПоказателя.Период МЕЖДУ ДанныеДляРасчета.ДатаНачала И ДанныеДляРасчета.ДатаОкончания)
		|				И (ЗначенияОперативногоПоказателя.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|					ИЛИ ЗначенияОперативногоПоказателя.Сотрудник = ДанныеДляРасчета.Сотрудник)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СтоимостьПоВидамРабот.ИдентификаторСтроки,
		|		СтоимостьПоВидамРабот.Значение
		|	ИЗ
		|		ВТСтоимостьВыполненныхРабот КАК СтоимостьПоВидамРабот) КАК ЗначенияПоказателя
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателя.ИдентификаторСтроки";
	
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Истина);
		
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТСтоимостьВыполненныхРабот(ОписаниеВТ, МинимальнаяДата, МаксимальнаяДата)
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("НачалоПервогоМесяца", НачалоМесяца(МинимальнаяДата));
	Запрос.УстановитьПараметр("КонецПоследнегоМесяца", КонецМесяца(МаксимальнаяДата));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыполненныеРаботы.Период КАК Месяц,
		|	ВыполненныеРаботы.Сотрудник,
		|	ВыполненныеРаботы.ВидРабот,
		|	ВыполненныеРаботы.ОбъемВыполненныхРаботОборот КАК ОбъемВыполненныхРабот
		|ПОМЕСТИТЬ ВТВыполненныеРаботыПоМесяцам
		|ИЗ
		|	РегистрНакопления.ВыполненныеРаботыСотрудников.Обороты(
		|			&НачалоПервогоМесяца,
		|			&КонецПоследнегоМесяца,
		|			Месяц,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					ДанныеДляРасчета.Сотрудник
		|				ИЗ
		|					ВТДанныеДляРасчета КАК ДанныеДляРасчета)) КАК ВыполненныеРаботы";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДанныеДляРасчета", ОписаниеВТ.ИмяВТ);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТВыполненныеРаботыПоМесяцам");
	
	Если Не ВТСодержитСтроки("ВТВыполненныеРаботыПоМесяцам") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	0 КАК ИдентификаторСтроки,
			|	0 КАК Значение
			|ПОМЕСТИТЬ ВТСтоимостьВыполненныхРабот";
		Запрос.Выполнить();
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
		
	Запрос.УстановитьПараметр("МинимальнаяДата", МинимальнаяДата);
	Запрос.УстановитьПараметр("МаксимальнаяДата", МаксимальнаяДата);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыполненныеРаботы.ВидРабот,
		|	ВыполненныеРаботы.Период
		|ПОМЕСТИТЬ ВТВидыРаботПериоды
		|ИЗ
		|	РегистрНакопления.ВыполненныеРаботыСотрудников КАК ВыполненныеРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ПО (ДанныеДляРасчета.Сотрудник = ВыполненныеРаботы.Сотрудник)
		|			И (ВыполненныеРаботы.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата)
		|			И (ВыполненныеРаботы.Период МЕЖДУ ДанныеДляРасчета.ДатаНачала И ДанныеДляРасчета.ДатаОкончания)
		|			И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыполненныеРаботыПоМесяцам.ВидРабот,
		|	ВыполненныеРаботыПоМесяцам.Месяц
		|ИЗ
		|	ВТВыполненныеРаботыПоМесяцам КАК ВыполненныеРаботыПоМесяцам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ПО (ДанныеДляРасчета.Сотрудник = ВыполненныеРаботыПоМесяцам.Сотрудник)
		|			И ВыполненныеРаботыПоМесяцам.Месяц = ДанныеДляРасчета.Месяц
		|			И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДанныеДляРасчета", ОписаниеВТ.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДляРасчета.ДатаНачала", "ДанныеДляРасчета." + ОписаниеВТ.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДляРасчета.ДатаОкончания", "ДанныеДляРасчета." + ОписаниеВТ.ИмяПоляОкончаниеПериода);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТВидыРаботПериоды");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТВидыРаботПериоды", "ВидРабот");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("РасценкиРаботСотрудников", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	УдалитьВТ.Добавить("ВТРасценкиРаботСотрудниковСрезПоследних");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляРасчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ЕСТЬNULL(ВыполненныеРаботы.ОбъемВыполненныхРабот, 0) * ЕСТЬNULL(РасценкиРаботСотрудников.Расценка, 0) КАК Значение
		|ПОМЕСТИТЬ ВТСтоимостьВыполненныхРабот
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыполненныеРаботыСотрудников КАК ВыполненныеРаботы
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРасценкиРаботСотрудниковСрезПоследних КАК РасценкиРаботСотрудников
		|			ПО ВыполненныеРаботы.ВидРабот = РасценкиРаботСотрудников.ВидРабот
		|				И ВыполненныеРаботы.Период = РасценкиРаботСотрудников.Период
		|		ПО ДанныеДляРасчета.Сотрудник = ВыполненныеРаботы.Сотрудник
		|			И (ВыполненныеРаботы.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата)
		|			И (ВыполненныеРаботы.Период МЕЖДУ ДанныеДляРасчета.ДатаНачала И ДанныеДляРасчета.ДатаОкончания)
		|			И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДляРасчета.ИдентификаторСтроки,
		|	ВыполненныеРаботы.ОбъемВыполненныхРабот * ЕСТЬNULL(РасценкиРаботСотрудников.Расценка, 0)
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВыполненныеРаботыПоМесяцам КАК ВыполненныеРаботы
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРасценкиРаботСотрудниковСрезПоследних КАК РасценкиРаботСотрудников
		|			ПО ВыполненныеРаботы.ВидРабот = РасценкиРаботСотрудников.ВидРабот
		|				И ВыполненныеРаботы.Месяц = РасценкиРаботСотрудников.Период
		|		ПО ДанныеДляРасчета.Сотрудник = ВыполненныеРаботы.Сотрудник
		|			И (ВыполненныеРаботы.Месяц = ДанныеДляРасчета.Месяц)
		|			И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДанныеДляРасчета", ОписаниеВТ.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДляРасчета.ДатаНачала", "ДанныеДляРасчета." + ОписаниеВТ.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДляРасчета.ДатаОкончания", "ДанныеДляРасчета." + ОписаниеВТ.ИмяПоляОкончаниеПериода);
	Запрос.Выполнить();
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗначенияПоказателейУдержаний

Процедура ЗаполнитьЗначенияПоказателейУдержанийСлужебный(Удержания)
	
	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СтрокиПоИдентификатору = Новый Соответствие;
	СоздатьВТУдержания(Удержания, СтрокиПоИдентификатору);
	УдалитьВТ.Добавить("ВТУдержания");
	УдалитьВТ.Добавить("ВТИзвестныеПоказателиУдержаний");
	
	ОписаниеВТ = ОписаниеВТУдержания();
	ОписаниеВТ.ИмяВТ = "ВТУдержания";
	ОписаниеВТ.ИмяПоляУдержание = "Удержание";
	СоздатьВТПоказателиРасчетаУдержания(ОписаниеВТ);
	УдалитьВТ.Добавить("ВТПоказателиРасчета");
	
	// Определяем какие показатели вообще требуются.
	СоздатьВТТребованияУдержаний();
	УдалитьВТ.Добавить("ВТТребованияУдержаний");
	ТребованияУдержаний = ТребованияУдержаний();
	
	// Получаем значения показателей
		// - периодических: сотрудников, подразделений, организаций,
		// - разовых: сотрудников, подразделений, организаций,
		// - накапливаемых: сотрудников, подразделений, организаций.
	ОписаниеВТ = ОписаниеВТНачисления();
	ОписаниеВТ.ИмяВТ = "ВТУдержания";
	ОписаниеВТ.ИмяПоляНачисление = "Удержание";
	
	ЗаполнитьФиксированныеСуммыУдержаний(ТребованияУдержаний, СтрокиПоИдентификатору);

	ЗаполнитьЗначенияПериодическихПоказателейФизическихЛиц(ТребованияУдержаний, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияПериодическихПоказателейОрганизаций(ТребованияУдержаний, СтрокиПоИдентификатору, ОписаниеВТ);
	ЗаполнитьЗначенияПериодическихПоказателейПодразделений(ТребованияУдержаний, СтрокиПоИдентификатору, ОписаниеВТ);
	
	ЗаполнитьЗначенияРазовыхПоказателейФизическихЛиц(ТребованияУдержаний, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияРазовыхПоказателейОрганизаций(ТребованияУдержаний, СтрокиПоИдентификатору, ОписаниеВТ);
	ЗаполнитьЗначенияРазовыхПоказателейПодразделений(ТребованияУдержаний, СтрокиПоИдентификатору, ОписаниеВТ);
	
	ЗаполнитьЗначенияОперативныхПоказателейФизическихЛиц(ТребованияУдержаний, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияОперативныхПоказателейОрганизаций(ТребованияУдержаний, СтрокиПоИдентификатору, ОписаниеВТ);
	ЗаполнитьЗначенияОперативныхПоказателейПодразделений(ТребованияУдержаний, СтрокиПоИдентификатору, ОписаниеВТ);
	
	ЗаполнитьЗначенияДополнительныхПоказателейУдержаний(ТребованияУдержаний, СтрокиПоИдентификатору);
	
	ЗаполнитьЗначенияИзвестныхПоказателей(СтрокиПоИдентификатору, "ВТИзвестныеПоказателиУдержаний");
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияДополнительныхПоказателейУдержаний(ТребованияНачислений, СтрокиПоИдентификатору)
	
	УдалитьВТ = Новый Массив;
	
	СоздатьВТДополнительныеПоказателиУдержаний();
	УдалитьВТ.Добавить("ВТДополнительныеПоказатели");
	
	Если Не ВТСодержитСтроки("ВТДополнительныеПоказатели") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияПереопределяемыхПоказателейУдержаний(ТребованияНачислений, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТДополнительныеПоказателиУдержаний()
	
	// Составим ВТ с показателями, значения которых до сих пор не удалось определить.
	СоздатьВТВыявленныеПоказатели();
	
	// Формируем ВТ с параметрами для получения значений показателей.
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель,
		|	Удержания.Удержание,
		|	Удержания.ДатаНачала,
		|	Удержания.ДатаОкончания
		|ПОМЕСТИТЬ ВТДополнительныеПоказатели
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Удержания.Удержание)
		|			И (Удержания.ФиксЗаполнение = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыявленныеПоказатели КАК ВыявленныеПоказатели
		|		ПО (ВыявленныеПоказатели.ИдентификаторСтроки = Удержания.ИдентификаторСтроки)
		|			И (ПоказателиРасчета.Показатель = ВыявленныеПоказатели.Показатель)
		|ГДЕ
		|	ВыявленныеПоказатели.Показатель ЕСТЬ NULL ";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПереопределяемыхПоказателейУдержаний(ТребованияУдержаний, СтрокиПоИдентификатору)
	
	ДополнительныеПоказатели = ТаблицаПоказателей();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.РассчитатьПоказательСреднемесячноеКоличествоДней(МенеджерВременныхТаблиц, ДополнительныеПоказатели);
	КонецЕсли;
		
	Для Каждого СтрокаПоказателя Из ДополнительныеПоказатели Цикл
		Строка = СтрокиПоИдентификатору[СтрокаПоказателя.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, СтрокаПоказателя.Показатель, СтрокаПоказателя.Значение);
	КонецЦикла;
		
КонецПроцедуры

Процедура СоздатьВТТребованияУдержаний()
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("КатегорииУдержанийВлияющихНаНДФЛ", ПланыВидовРасчета.Удержания.КатегорииУдержанийВлияющихНаНДФЛ());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.ПериодическийПоказательСотрудника, ЛОЖЬ)) КАК ТребуютсяЗначенияПериодическихПоказателейСотрудников,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.ПериодическийПоказательОрганизации, ЛОЖЬ)) КАК ТребуютсяЗначенияПериодическихПоказателейОрганизаций,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.ПериодическийПоказательПодразделения, ЛОЖЬ)) КАК ТребуютсяЗначенияПериодическихПоказателейПодразделений,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.РазовыйПоказательСотрудника, ЛОЖЬ)) КАК ТребуютсяЗначенияРазовыхПоказателейСотрудников,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.РазовыйПоказательОрганизации, ЛОЖЬ)) КАК ТребуютсяЗначенияРазовыхПоказателейОрганизаций,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.РазовыйПоказательПодразделения, ЛОЖЬ)) КАК ТребуютсяЗначенияРазовыхПоказателейПодразделений,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.ОперативныйПоказательСотрудника, ЛОЖЬ)) КАК ТребуютсяЗначенияОперативныхПоказателейСотрудников,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.ОперативныйПоказательОрганизации, ЛОЖЬ)) КАК ТребуютсяЗначенияОперативныхПоказателейОрганизаций,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.ОперативныйПоказательПодразделения, ЛОЖЬ)) КАК ТребуютсяЗначенияОперативныхПоказателейПодразделений,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.ПоказательРасчетнаяБазаСтраховыеВзносы, ЛОЖЬ)) КАК ТребуетсяПоказательРасчетнаяБазаСтраховыеВзносы,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.ПоказательРасчетнаяБазаИсполнительногоЛиста, ЛОЖЬ)) КАК ТребуетсяПоказательРасчетнаяБазаИсполнительногоЛиста,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.ПоказательРасчетнаяБаза, ЛОЖЬ)) КАК ТребуетсяПоказательРасчетнаяБаза,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПоказателиУдержаний.ПериодическийПоказательПодразделения
		|					ИЛИ ПоказателиУдержаний.ПериодическийПоказательОрганизации
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ТребуетсяСотрудникДляРазбиенияСтрокУдержаний,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПоказателиУдержаний.ПериодическийПоказательПодразделения
		|					ИЛИ ПоказателиУдержаний.ПериодическийПоказательОрганизации
		|					ИЛИ ПоказателиУдержаний.РазовыйПоказательПодразделения
		|					ИЛИ ПоказателиУдержаний.РазовыйПоказательОрганизации
		|					ИЛИ ПоказателиУдержаний.ОперативныйПоказательПодразделения
		|					ИЛИ ПоказателиУдержаний.ОперативныйПоказательОрганизации
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ТребуетсяСотрудникДляЗаполненияЗначенийПоказателей,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Удержания.ФиксЗаполнение = ЛОЖЬ
		|					И Удержания.ФиксРасчет = ЛОЖЬ
		|					И Удержания.ФиксСторно = ЛОЖЬ
		|					И ВидыРасчета.Рассчитывается = ЛОЖЬ
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ТребуютсяФиксированныеСуммы,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВидыРасчета.КатегорияУдержания В (&КатегорииУдержанийВлияющихНаНДФЛ)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ТребуетсяРегистрацияСоциальныхВычетовНДФЛ
		|ПОМЕСТИТЬ ВТТребованияУдержаний
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Удержания.Удержание)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.ВидРасчета = Удержания.Удержание)
		|			И (НЕ Удержания.ФиксЗаполнение)
		|			И (НЕ ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТИзвестныеПоказателиУдержаний КАК ИзвестныеПоказатели
		|					ГДЕ
		|						ИзвестныеПоказатели.ИдентификаторСтроки = Удержания.ИдентификаторСтроки
		|						И ИзвестныеПоказатели.Показатель = ПоказателиУдержаний.Показатель))
		|
		|СГРУППИРОВАТЬ ПО
		|	Удержания.ИдентификаторСтроки";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТребованияУдержаний()
	
	ТребованияУдержаний = Новый Структура(
		"ТребуютсяЗначенияПериодическихПоказателейСотрудников,
		|ТребуютсяЗначенияПериодическихПоказателейОрганизаций,
		|ТребуютсяЗначенияПериодическихПоказателейПодразделений,
		|ТребуютсяЗначенияРазовыхПоказателейСотрудников,
		|ТребуютсяЗначенияРазовыхПоказателейОрганизаций,
		|ТребуютсяЗначенияРазовыхПоказателейПодразделений,
		|ТребуютсяЗначенияОперативныхПоказателейСотрудников,
		|ТребуютсяЗначенияОперативныхПоказателейОрганизаций,
		|ТребуютсяЗначенияОперативныхПоказателейПодразделений,
		|ТребуетсяПоказательРасчетнаяБазаСтраховыеВзносы,
		|ТребуетсяПоказательРасчетнаяБазаИсполнительногоЛиста,
		|ТребуетсяПоказательРасчетнаяБаза,
		|ТребуетсяСотрудникДляРазбиенияСтрокУдержаний,
		|ТребуетсяСотрудникДляЗаполненияЗначенийПоказателей,
		|ТребуютсяФиксированныеСуммы, 
		|ТребуетсяРегистрацияСоциальныхВычетовНДФЛ");
		
	Для Каждого КлючИЗначение Из ТребованияУдержаний Цикл
		ТребованияУдержаний[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	
	Если Не ВТСуществует("ВТТребованияУдержаний") Тогда
		Возврат ТребованияУдержаний;
	КонецЕсли;
	
	Если Не ВТСодержитСтроки("ВТТребованияУдержаний") Тогда
		Возврат ТребованияУдержаний;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ТребованияУдержаний.ТребуютсяЗначенияПериодическихПоказателейСотрудников) КАК ТребуютсяЗначенияПериодическихПоказателейСотрудников,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуютсяЗначенияПериодическихПоказателейОрганизаций) КАК ТребуютсяЗначенияПериодическихПоказателейОрганизаций,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуютсяЗначенияПериодическихПоказателейПодразделений) КАК ТребуютсяЗначенияПериодическихПоказателейПодразделений,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуютсяЗначенияРазовыхПоказателейСотрудников) КАК ТребуютсяЗначенияРазовыхПоказателейСотрудников,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуютсяЗначенияРазовыхПоказателейОрганизаций) КАК ТребуютсяЗначенияРазовыхПоказателейОрганизаций,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуютсяЗначенияРазовыхПоказателейПодразделений) КАК ТребуютсяЗначенияРазовыхПоказателейПодразделений,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуютсяЗначенияОперативныхПоказателейСотрудников) КАК ТребуютсяЗначенияОперативныхПоказателейСотрудников,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуютсяЗначенияОперативныхПоказателейОрганизаций) КАК ТребуютсяЗначенияОперативныхПоказателейОрганизаций,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуютсяЗначенияОперативныхПоказателейПодразделений) КАК ТребуютсяЗначенияОперативныхПоказателейПодразделений,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуетсяСотрудникДляРазбиенияСтрокУдержаний) КАК ТребуетсяСотрудникДляРазбиенияСтрокУдержаний,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуетсяСотрудникДляЗаполненияЗначенийПоказателей) КАК ТребуетсяСотрудникДляЗаполненияЗначенийПоказателей,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуетсяПоказательРасчетнаяБазаСтраховыеВзносы) КАК ТребуетсяПоказательРасчетнаяБазаСтраховыеВзносы,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуетсяПоказательРасчетнаяБазаИсполнительногоЛиста) КАК ТребуетсяПоказательРасчетнаяБазаИсполнительногоЛиста,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуетсяПоказательРасчетнаяБаза) КАК ТребуетсяПоказательРасчетнаяБаза,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуютсяФиксированныеСуммы) КАК ТребуютсяФиксированныеСуммы,
		|	МАКСИМУМ(ТребованияУдержаний.ТребуетсяРегистрацияСоциальныхВычетовНДФЛ) КАК ТребуетсяРегистрацияСоциальныхВычетовНДФЛ
		|ИЗ
		|	ВТТребованияУдержаний КАК ТребованияУдержаний";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ТребованияУдержаний, Выборка);
	КонецЕсли;
	
	Возврат ТребованияУдержаний;
	
КонецФункции

Процедура СоздатьВТПоказателиРасчетаУдержания(ОписаниеВТУдержания)
	
	Если ВТСуществует("ВТПоказателиРасчета") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("РасчетнаяБазаСтраховыеВзносы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаСтраховыеВзносы"));
	Запрос.УстановитьПараметр("РасчетнаяБазаИсполнительногоЛиста", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаИсполнительногоЛиста"));
	Запрос.УстановитьПараметр("РасчетнаяБаза", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРасчета.Ссылка КАК ВидРасчета,
		|	ВидыРасчета.УдерживаетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
		|	ПоказателиУдержаний.Показатель КАК Показатель,
		|	СправочникПоказатели.ЗначениеРассчитываетсяАвтоматически,
		|	ВЫБОР
		|		КОГДА ПоказателиУдержаний.Ссылка.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ПоЗначениюПоказателяПриОкончательномРасчете)
		|				И ПоказателиУдержаний.ОпределяющийПоказатель
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОпределяющийПоказательУдержания,
		|	СправочникПоказатели.ПериодическийПоказательСотрудника КАК ПериодическийПоказательСотрудника,
		|	СправочникПоказатели.ПериодическийПоказательОрганизации КАК ПериодическийПоказательОрганизации,
		|	СправочникПоказатели.ПериодическийПоказательПодразделения КАК ПериодическийПоказательПодразделения,
		|	СправочникПоказатели.РазовыйПоказательСотрудника КАК РазовыйПоказательСотрудника,
		|	СправочникПоказатели.РазовыйПоказательОрганизации КАК РазовыйПоказательОрганизации,
		|	СправочникПоказатели.РазовыйПоказательПодразделения КАК РазовыйПоказательПодразделения,
		|	СправочникПоказатели.ОперативныйПоказательСотрудника КАК ОперативныйПоказательСотрудника,
		|	СправочникПоказатели.ОперативныйПоказательОрганизации КАК ОперативныйПоказательОрганизации,
		|	СправочникПоказатели.ОперативныйПоказательПодразделения КАК ОперативныйПоказательПодразделения,
		|	ВЫБОР
		|		КОГДА СправочникПоказатели.Ссылка = &РасчетнаяБазаСтраховыеВзносы
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательРасчетнаяБазаСтраховыеВзносы,
		|	ВЫБОР
		|		КОГДА СправочникПоказатели.Ссылка = &РасчетнаяБазаИсполнительногоЛиста
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательРасчетнаяБазаИсполнительногоЛиста,
		|	ВЫБОР
		|		КОГДА СправочникПоказатели.Ссылка = &РасчетнаяБаза
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоказательРасчетнаяБаза
		|ПОМЕСТИТЬ ВТПоказателиРасчета
		|ИЗ
		|	ПланВидовРасчета.Удержания КАК ВидыРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК ПоказателиУдержаний
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК СправочникПоказатели
		|			ПО (СправочникПоказатели.Ссылка = ПоказателиУдержаний.Показатель)
		|		ПО (ПоказателиУдержаний.Ссылка = ВидыРасчета.Ссылка)
		|ГДЕ
		|	ИСТИНА
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ВТУдержания КАК Удержания
		|			ГДЕ
		|				ВидыРасчета.Ссылка = Удержания.Удержание)
		|	И ВидыРасчета.УчаствуетВРасчетеПервойПоловиныМесяца = ИСТИНА";
		
	Если Не НастройкиРасчета.ПерваяПоловинаМесяца И (НастройкиРасчета.ОкончательныйРасчет Или НастройкиРасчета.РасчетЗарплаты) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВидыРасчета.УчаствуетВРасчетеПервойПоловиныМесяца = ИСТИНА", " И ИСТИНА");
	КонецЕсли;
	
	Если ОписаниеВТУдержания.ИмяПоляУдержание = Неопределено Тогда
		ТекстУсловия = "
			|	И ИСТИНА В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				ВТУдержания КАК Удержания
			|			ГДЕ
			|				ВидыРасчета.Ссылка = Удержания.Удержание)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстУсловия, " И ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУдержания", ОписаниеВТУдержания.ИмяВТ);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПериодическихПоказателейФизическихЛиц(ТребованияУдержаний, СтрокиПоИдентификатору)
	
	Если Не ТребованияУдержаний.ТребуютсяЗначенияПериодическихПоказателейСотрудников Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ФизическоеЛицо,
		|	Удержания.ГоловнаяОрганизация,
		|	Удержания.ДокументОснование,
		|	ПоказателиУдержаний.Показатель,
		|	Удержания.ДатаНачала,
		|	Удержания.ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодическиеПоказателиФизическихЛиц
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.ВидРасчета = Удержания.Удержание)
		|			И (ПоказателиУдержаний.ПериодическийПоказательСотрудника = ИСТИНА)
		|			И (Удержания.ФиксЗаполнение = ЛОЖЬ)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТПериодическиеПоказателиФизическихЛиц");
	
	ОписаниеВТ = ОписаниеВТФизическиеЛицаПериоды();
	ОписаниеВТ.ИмяВТ = "ВТПериодическиеПоказателиФизическихЛиц";
	ОписаниеВТ.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТЗначенияПериодическихПоказателейФизическихЛицИнтервалы(ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПоказателиУдержаний.Показатель КАК Показатель,
		|	ИнтервалыЗначений.Значение
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.ВидРасчета = Удержания.Удержание)
		|			И (ПоказателиУдержаний.ПериодическийПоказательСотрудника = ИСТИНА)
		|			И (Удержания.ФиксЗаполнение = ЛОЖЬ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейФизическихЛицИнтервалы КАК ИнтервалыЗначений
		|		ПО (ИнтервалыЗначений.ФизическоеЛицо = Удержания.ФизическоеЛицо)
		|			И (ИнтервалыЗначений.Организация.ГоловнаяОрганизация = Удержания.ГоловнаяОрганизация)
		|			И (ИнтервалыЗначений.ДокументОснование = Удержания.ДокументОснование)
		|			И (ИнтервалыЗначений.Показатель = ПоказателиУдержаний.Показатель)
		|			И (Удержания.ДатаНачала МЕЖДУ ИнтервалыЗначений.НачалоПериода И ИнтервалыЗначений.КонецПериода)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки,
		|	Показатель";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРазовыхПоказателейФизическихЛиц(ТребованияУдержаний, СтрокиПоИдентификатору)
	
	Если Не ТребованияУдержаний.ТребуютсяЗначенияРазовыхПоказателейСотрудников Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ФизическоеЛицо,
		|	ПоказателиРасчета.Показатель,
		|	НАЧАЛОПЕРИОДА(Удержания.ДатаНачала, МЕСЯЦ) КАК Месяц
		|ПОМЕСТИТЬ ВТФизическиеЛицаМесяцы
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Удержания.Удержание)
		|			И (ПоказателиРасчета.РазовыйПоказательСотрудника = ИСТИНА)
		|			И (Удержания.ФиксЗаполнение = ЛОЖЬ)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФизическиеЛицаМесяцы");
	
	ОписаниеВТ = ОписаниеВТРазовыхПоказателей();
	ОписаниеВТ.ИмяВТ = "ВТФизическиеЛицаМесяцы";
	ОписаниеВТ.ИмяПоляПоказатель = "Показатель";
	СоздатьВТЗначенияРазовыхПоказателейФизическихЛиц(ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель КАК Показатель,
		|	ЗначенияПоказателей.Значение
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Удержания.Удержание)
		|			И (ПоказателиРасчета.РазовыйПоказательСотрудника = ИСТИНА)
		|			И (Удержания.ФиксЗаполнение = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхПоказателейФизическихЛиц КАК ЗначенияПоказателей
		|		ПО (ЗначенияПоказателей.ФизическоеЛицо = Удержания.ФизическоеЛицо)
		|			И (ЗначенияПоказателей.ГоловнаяОрганизация = Удержания.ГоловнаяОрганизация)
		|			И (ЗначенияПоказателей.Показатель = ПоказателиРасчета.Показатель)
		|			И (ЗначенияПоказателей.ПериодДействия = НАЧАЛОПЕРИОДА(Удержания.ДатаНачала, МЕСЯЦ))
		|ГДЕ
		|	(ЗначенияПоказателей.Значение ЕСТЬ НЕ NULL 
		|			ИЛИ ПоказателиРасчета.ОпределяющийПоказательУдержания)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки,
		|	Показатель";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияОперативныхПоказателейФизическихЛиц(ТребованияУдержаний, СтрокиПоИдентификатору)
	
	Если Не ТребованияУдержаний.ТребуютсяЗначенияОперативныхПоказателейСотрудников Тогда
		Возврат;
	КонецЕсли;
				
	ОписаниеВТ = ОписаниеВТОперативныхПоказателей();
	ОписаниеВТ.ИмяВТ = "ВТУдержания";
	ОписаниеВТ.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	ОписаниеВТ.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	ОписаниеВТ.ИмяПоляГоловнаяОрганизация = "ГоловнаяОрганизация";
	
	СоздатьВТЗначенияОперативныхПоказателейСотрудников(ОписаниеВТ);
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель КАК Показатель,
		|	СУММА(ЗначенияПоказателей.Значение) КАК Значение
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Удержания.Удержание)
		|			И (ПоказателиРасчета.ОперативныйПоказательСотрудника = ИСТИНА)
		|			И (Удержания.ФиксЗаполнение = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхПоказателейСотрудников КАК ЗначенияПоказателей
		|		ПО (ЗначенияПоказателей.ФизическоеЛицо = Удержания.ФизическоеЛицо)
		|			И (ЗначенияПоказателей.ГоловнаяОрганизация = Удержания.ГоловнаяОрганизация)
		|			И (ЗначенияПоказателей.Показатель = ПоказателиРасчета.Показатель)
		|			И (ЗначенияПоказателей.Период МЕЖДУ Удержания.ДатаНачала И Удержания.ДатаОкончания)
		|ГДЕ
		|	(ЗначенияПоказателей.Значение ЕСТЬ НЕ NULL 
		|			ИЛИ ПоказателиРасчета.ОпределяющийПоказательУдержания)
		|
		|СГРУППИРОВАТЬ ПО
		|	Удержания.ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки,
		|	Показатель";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);	
	
КонецПроцедуры

Процедура ЗаполнитьФиксированныеСуммыУдержаний(ТребованияУдержаний, СтрокиПоИдентификатору)
	
	Если Не ТребованияУдержаний.ТребуютсяФиксированныеСуммы Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ФизическоеЛицо,
		|	Удержания.ГоловнаяОрганизация,
		|	Удержания.ДокументОснование,
		|	Удержания.Удержание,
		|	Удержания.ДатаНачала,
		|	Удержания.ДатаОкончания
		|ПОМЕСТИТЬ ВТУдержанияФиксированныеСуммы
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Удержания.Удержание)
		|			И (ВидыРасчета.Рассчитывается = ЛОЖЬ)
		|			И (Удержания.ФиксЗаполнение = ЛОЖЬ)
		|			И (Удержания.ФиксРасчет = ЛОЖЬ)
		|			И (Удержания.ФиксСторно = ЛОЖЬ)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТУдержанияФиксированныеСуммы");
	
	ОписаниеВТ = ОписаниеВТУдержания();
	ОписаниеВТ.ИмяВТ = "ВТУдержанияФиксированныеСуммы";
	ОписаниеВТ.ИмяПоляУдержание = "Удержание";
	СоздатьВТПлановыеУдержанияИнтервалы(ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПлановыеУдержания.Размер
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Удержания.Удержание)
		|			И (ВидыРасчета.Рассчитывается = ЛОЖЬ)
		|			И (Удержания.ФиксЗаполнение = ЛОЖЬ)
		|			И (Удержания.ФиксРасчет = ЛОЖЬ)
		|			И (Удержания.ФиксСторно = ЛОЖЬ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеУдержанияИнтервалы КАК ПлановыеУдержания
		|		ПО (ПлановыеУдержания.ФизическоеЛицо = Удержания.ФизическоеЛицо)
		|			И (ПлановыеУдержания.Организация.ГоловнаяОрганизация = Удержания.ГоловнаяОрганизация)
		|			И (ПлановыеУдержания.ДокументОснование = Удержания.ДокументОснование)
		|			И (Удержания.ДатаНачала МЕЖДУ ПлановыеУдержания.ДатаНачала И ПлановыеУдержания.ДатаОкончания)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Строка.Результат = Выборка.Размер;
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

#Область РасчетПоказателейУдержаний

Процедура РассчитатьЗначенияПоказателейКалендарныеДниУдержаний(СтрокиПоИдентификатору)
	
	ОписаниеВТНачисления = ОписаниеВТНачисления();
	ОписаниеВТНачисления.ИмяВТ = "ВТУдержания";
	ОписаниеВТНачисления.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТНачисления.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	ОписаниеВТНачисления.ИмяПоляНачисление = "Удержание";
	ОписаниеВТНачисления.ИмяПоляФиксРасчетВремени = "ФиксЗаполнение";
	РассчитатьЗначенияПоказателейКалендарныеДни(СтрокиПоИдентификатору, ОписаниеВТНачисления, Ложь);
	РассчитатьЗначенияПоказателейКалендарныеДниМесяца(СтрокиПоИдентификатору, ОписаниеВТНачисления);
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателяРасчетнаяБазаСтраховыеВзносы(ОчередностьРасчета, СтрокиПоИдентификатору)
	
	РасчетнаяБазаСтраховыеВзносы = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаСтраховыеВзносы");
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.УстановитьПараметр("РасчетнаяБазаСтраховыеВзносы", РасчетнаяБазаСтраховыеВзносы);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	Удержания.ФизическоеЛицо,
		|	Удержания.Организация КАК ГоловнаяОрганизация,
		|	Удержания.Сотрудник,
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК Месяц,
		|	Удержания.БазовыйПериодНачало КАК ДатаНачала,
		|	Удержания.БазовыйПериодКонец КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДанныеДляРасчета
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.ВидРасчета = Удержания.ВидРасчета)
		|			И (ПоказателиУдержаний.Показатель = &РасчетнаяБазаСтраховыеВзносы)
		|			И (Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета)
		|			И (НЕ Удержания.ФиксЗаполнение)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДанныеДляРасчета");
	
	Если Не ВТСодержитСтроки("ВТДанныеДляРасчета") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляРасчета.ФизическоеЛицо,
		|	ДанныеДляРасчета.ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТФизлицаОрганизаций
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФизлицаОрганизаций");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ДанныеДляРасчета.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(ДанныеДляРасчета.ДатаОкончания) КАК ДатаОкончания
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(
		НачалоМесяца(Выборка.ДатаНачала), КонецМесяца(Выборка.ДатаОкончания), Организация, МенеджерВременныхТаблиц, , , , , , Истина);
	УдалитьВТ.Добавить("ВТСведенияОДоходах");

	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ВременныйРегистратор", ВременныйРегистратор);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляРасчета.ИдентификаторСтроки,
		|	&РасчетнаяБазаСтраховыеВзносы КАК Показатель,
		|	СУММА(СведенияОДоходах.БазаПФР) КАК Значение
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенияОДоходах КАК СведенияОДоходах
		|		ПО (СведенияОДоходах.ФизическоеЛицо = ДанныеДляРасчета.ФизическоеЛицо)
		|			И (СведенияОДоходах.ГоловнаяОрганизация = ДанныеДляРасчета.ГоловнаяОрганизация)
		|			И (СведенияОДоходах.Период = ДанныеДляРасчета.Месяц)
		|			И (СведенияОДоходах.Регистратор <> &ИсключаемыйРегистратор)
		|			И (СведенияОДоходах.Регистратор В (&ВременныйРегистратор))
		|			И (ВЫБОР
		|				КОГДА ДанныеДляРасчета.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|					ТОГДА СведенияОДоходах.Сотрудник = ДанныеДляРасчета.Сотрудник
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляРасчета.ИдентификаторСтроки";
	
	Если Не НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (СведенияОДоходах.Регистратор В (&ВременныйРегистратор))", "");
	КонецЕсли;
	
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

#Область РасчетнаяБазаУдержаний

Процедура СоздатьВТРасчетнаяБазаУдержаний()
	Если Не ВТСуществует("ВТРасчетнаяБазаУдержаний") Тогда
		РасчетБазыУдержаний.СоздатьВТРасчетнаяБазаУдержаний();
	КонецЕсли;	
КонецПроцедуры	

Процедура РассчитатьЗначениеПоказателяРасчетнаяБазаУдержаний(ОчередностьРасчета, СтрокиПоИдентификатору)	
	СоздатьВТРасчетнаяБазаУдержаний();
	
	РасчетнаяБаза = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	РасчетнаяБазаИсполнительногоЛиста = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаИсполнительногоЛиста");
	
	ПоказателиРасчетнаяБаза = Новый Массив;
	ПоказателиРасчетнаяБаза.Добавить(РасчетнаяБаза);
	ПоказателиРасчетнаяБаза.Добавить(РасчетнаяБазаИсполнительногоЛиста);
	
	УдалитьВТ = Новый Массив;
		
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("РасчетнаяБаза", ПоказателиРасчетнаяБаза);
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
	    "ВЫБРАТЬ
	    |	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки
	    |ПОМЕСТИТЬ ВТИдентификаторыСтрок
	    |ИЗ
	    |	ВТРегистрРасчета_Удержания КАК Удержания
	    |ГДЕ
	    |	Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
	    |	И Удержания.ФиксЗаполнение = ЛОЖЬ
	    |	И ИСТИНА В
	    |			(ВЫБРАТЬ ПЕРВЫЕ 1
	    |				ИСТИНА
	    |			ИЗ
	    |				ВТПоказателиРасчета КАК ПоказателиРасчета
	    |			ГДЕ
	    |				ПоказателиРасчета.ВидРасчета = Удержания.ВидРасчета
	    |				И ПоказателиРасчета.Показатель В (&РасчетнаяБаза))";
	Запрос.Выполнить();	
	УдалитьВТ.Добавить("ВТИдентификаторыСтрок");
	
	Если Не ВТСодержитСтроки("ВТИдентификаторыСтрок") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	// Месяцем удержания считаем месяц базового периода удержания.
	
	// Расчетная база удержания в общем случае складывается из трех составляющих:
	// 1) начисления, зарегистрированные в месяце удержания, период действия которых совпадает с периодом регистрации,
	// 2) начисления, зарегистрированные в месяце удержания, период действия которых больше периода регистрации (например,
	// будущий отпуск)
	// 3) начисления, зарегистрированные в месяце удержания, период действия которых меньше периода регистрации (например,
	// больничный за прошлый месяц).
	
	// Включаем части расчетной базы в следующие группы удержаний
	// - для удержаний, которые начинаются в текущем месяце, включаем только 1 и 2 части
	// - для удержаний, которые заканчиваются в текущем месяце, включаем только 1 и 3 части
	// - для остальных удержаний, включаем все части.
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("РассчитыватьПоРегистратору", НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу);
		
	ОписаниеВТ = ОписаниеВТУдержания();
	ОписаниеВТ.ИмяВТ = "ВТОсновныеЗаписиУдержаний";
	ОписаниеВТ.ИмяПоляНачалоПериода = "БазовыйПериодНачало";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "БазовыйПериодКонец";
	НалогПоДоходам = ИсполнительныеЛисты.ИсчисленныйПоДоходамНалог(МенеджерВременныхТаблиц, ОписаниеВТ, МесяцНачисления, ЗарплатаМесяца.ПогашениеЗаймов, ИсключаемыйРегистратор, НастройкиУдержаний, ОчередностьРасчета, ЭтоИсправлениеТекущимПериодом);
	ДополнениеРасчетнойБазы = ДополнениеРасчетнойБазыУдержаний(ОписаниеВТ, НалогПоДоходам);

	
	Запрос.УстановитьПараметр("ВременныйРегистратор", ВременныйРегистратор);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазаУдержаний.НомерСтроки КАК НомерСтроки,
		|	БазаУдержаний.БазовоеНачисление КАК БазовоеНачисление,
		|	БазаУдержаний.НомерСтрокиБазовогоНачисления КАК НомерСтрокиБазовогоНачисления,
		|	БазаУдержаний.РегистраторБазовогоНачисления КАК РегистраторБазовогоНачисления,
		|	СУММА(БазаУдержаний.РасчетнаяБаза) КАК РасчетнаяБаза,
		|	СУММА(БазаУдержаний.ЦеломесячнаяБаза) КАК ЦеломесячнаяБаза
		|ПОМЕСТИТЬ ВТРасшифровкаБазы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОсновныеЗаписи.НомерСтроки КАК НомерСтроки,
		|		РасчетнаяБаза.ВидРасчетаРазрез КАК БазовоеНачисление,
		|		РасчетнаяБаза.НомерСтрокиРазрез КАК НомерСтрокиБазовогоНачисления,
		|		РасчетнаяБаза.РегистраторРазрез КАК РегистраторБазовогоНачисления,
		|		РасчетнаяБаза.РезультатБаза КАК РасчетнаяБаза,
		|		0 КАК ЦеломесячнаяБаза
		|	ИЗ
		|		ВТОсновныеЗаписиУдержаний КАК ОсновныеЗаписи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасчетнаяБазаУдержаний КАК РасчетнаяБаза
		|			ПО ОсновныеЗаписи.НомерСтроки = РасчетнаяБаза.НомерСтроки
		|				И ОсновныеЗаписи.Регистратор = РасчетнаяБаза.Регистратор
		|				И (ОсновныеЗаписи.ОригинальнаяЗапись = ИСТИНА)
		|				И (&УсловиеИсключаемыйРегистратор)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИскусственныеЗаписи.НомерСтроки,
		|		ЦеломесячнаяБазаУдержаний.ВидРасчетаРазрез,
		|		ЦеломесячнаяБазаУдержаний.НомерСтрокиРазрез,
		|		ЦеломесячнаяБазаУдержаний.РегистраторРазрез,
		|		0,
		|		ЦеломесячнаяБазаУдержаний.РезультатБаза
		|	ИЗ
		|		ВТОсновныеЗаписиУдержаний КАК ИскусственныеЗаписи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасчетнаяБазаУдержаний КАК ЦеломесячнаяБазаУдержаний
		|			ПО ИскусственныеЗаписи.НомерСтроки = ЦеломесячнаяБазаУдержаний.НомерСтроки
		|				И ИскусственныеЗаписи.Регистратор = ЦеломесячнаяБазаУдержаний.Регистратор
		|				И (ИскусственныеЗаписи.ОригинальнаяЗапись = ЛОЖЬ)
		|				И (&УсловиеИсключаемыйРегистраторЦеломесяцныеЗаписи)) КАК БазаУдержаний
		|
		|СГРУППИРОВАТЬ ПО
		|	БазаУдержаний.НомерСтроки,
		|	БазаУдержаний.БазовоеНачисление,
		|	БазаУдержаний.НомерСтрокиБазовогоНачисления,
		|	БазаУдержаний.РегистраторБазовогоНачисления
		|
		|ИМЕЮЩИЕ
		|	(СУММА(БазаУдержаний.РасчетнаяБаза) <> 0
		|		ИЛИ СУММА(БазаУдержаний.ЦеломесячнаяБаза) <> 0)";
	Если НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИсключаемыйРегистраторЦеломесяцныеЗаписи", "ЦеломесячнаяБазаУдержаний.РегистраторРазрез = &ВременныйРегистратор");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИсключаемыйРегистратор", "РасчетнаяБаза.РегистраторРазрез = &ВременныйРегистратор");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИсключаемыйРегистраторЦеломесяцныеЗаписи", "ИСТИНА");	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИсключаемыйРегистратор", "ИСТИНА");	
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	УдалитьВТ.Добавить("ВТРасшифровкаБазы");
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдержанияБаза.НомерСтроки КАК НомерСтроки,
		|	СУММА(УдержанияБаза.РасчетнаяБаза) КАК РасчетнаяБаза
		|ПОМЕСТИТЬ ВТРезультатБаза
		|ИЗ
		|	ВТРасшифровкаБазы КАК УдержанияБаза
		|
		|СГРУППИРОВАТЬ ПО
		|	УдержанияБаза.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК Месяц,
		|	Удержания.ДокументОснование КАК ДокументОснование,
		|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ЕСТЬNULL(УдержанияБаза.РасчетнаяБаза, 0) КАК РасчетнаяБаза,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ВТОсновныеЗаписиУдержаний КАК ЗаписиНеполныйМесяц
		|				ГДЕ
		|					Удержания.НомерСтроки = ЗаписиНеполныйМесяц.НомерСтроки
		|					И ЗаписиНеполныйМесяц.ОригинальнаяЗапись = ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеполныйМесяц,
		|	РасшифровкаБазы.БазовоеНачисление КАК БазовоеНачисление,
		|	ВидыНачислений.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияБазовогоНачисления,
		|	ЕСТЬNULL(РасшифровкаБазы.РасчетнаяБаза, 0) КАК РасчетнаяБазаПоНачислению,
		|	ЕСТЬNULL(РасшифровкаБазы.ЦеломесячнаяБаза, 0) КАК ЦеломесячнаяБаза,
		|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, ДЕНЬ), НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодКонец, ДЕНЬ), ДЕНЬ) + 1 КАК РазностьДат
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИдентификаторыСтрок КАК ИдентификаторыСтрок
		|		ПО (ИдентификаторыСтрок.ИдентификаторСтроки = Удержания.ИдентификаторСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезультатБаза КАК УдержанияБаза
		|		ПО Удержания.НомерСтроки = УдержанияБаза.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасшифровкаБазы КАК РасшифровкаБазы
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыНачислений
		|			ПО (ВидыНачислений.Ссылка = РасшифровкаБазы.БазовоеНачисление)
		|		ПО Удержания.НомерСтроки = РасшифровкаБазы.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ),
		|	Удержания.ДокументОснование,
		|	Удержания.ИдентификаторСтроки";
	
	УдалитьВТ.Добавить("ВТРезультатБаза");
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
			КоэффициентыРаспределения = Новый Массив;
			РазностьДат = Новый Массив;
			СтрокиКРаспределению = Новый Массив;
			СуммаНачисленийНеРаспределяемая = 0;
			СуммаНДФЛНеРаспределяемая = 0;
			СуммаНачисленийРаспределяемая = 0;
			СуммаНДФЛРаспределяемая = 0;
			Отбор = Новый Структура("ДокументОснование,Месяц", Выборка.ДокументОснование, Выборка.Месяц);
			СтрокиДополнения = ДополнениеРасчетнойБазы.НайтиСтроки(Отбор);
			ЕстьДополнениеРасчетнойБазы = СтрокиДополнения.Количество() > 0;
			ФизическоеЛицо = Выборка.ФизическоеЛицо;
			СтрокиНачислений = Новый Соответствие;
			Для Каждого СтрокаДополнения Из СтрокиДополнения Цикл 
				Если СтрокаДополнения.Распределять Тогда 
					СуммаНачисленийРаспределяемая = СтрокаДополнения.СуммаНачислений;
					СуммаНДФЛРаспределяемая = СтрокаДополнения.СуммаНДФЛ;
				Иначе 
					СуммаНачисленийНеРаспределяемая = СтрокаДополнения.СуммаНачислений;
					СуммаНДФЛНеРаспределяемая = СтрокаДополнения.СуммаНДФЛ;
				КонецЕсли;
			КонецЦикла;
			Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
				Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
				ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, РасчетнаяБаза, Окр(Выборка.РасчетнаяБаза, 2), Истина);
				Если Выборка.НеполныйМесяц = Ложь Тогда
					КоэффициентыРаспределения.Добавить(Окр(Выборка.РасчетнаяБаза, 2));
					Если ЕстьДополнениеРасчетнойБазы Тогда
						СтрокиКРаспределению.Добавить(Строка.Дополнительно);
						РазностьДат.Добавить(Выборка.РазностьДат);
					КонецЕсли;
				КонецЕсли;
				Строка.Дополнительно.Вставить("НеполныйМесяц", Выборка.НеполныйМесяц);
				Строка.Дополнительно.Вставить("РасшифровкаРасчетнойБазы", ТаблицаРасшифровкиРасчетнойБазы());
				Строка.Дополнительно.Вставить("СуммаДополнения", СуммаНачисленийНеРаспределяемая);
				Строка.Дополнительно.Вставить("СуммаНДФЛ", СуммаНДФЛНеРаспределяемая);
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = Строка.Дополнительно.РасшифровкаРасчетнойБазы.Добавить();
					НоваяСтрока.БазовоеНачисление = Выборка.БазовоеНачисление;
					НоваяСтрока.КатегорияБазовогоНачисления = Выборка.КатегорияБазовогоНачисления;
					НоваяСтрока.Сумма = Выборка.РасчетнаяБазаПоНачислению;
					НоваяСтрока.СуммаЦеломесячная = Выборка.ЦеломесячнаяБаза;
					НоваяСтрока.НеполныйМесяц = Выборка.НеполныйМесяц;
					СтрокиНачисления = СтрокиНачислений[НоваяСтрока.БазовоеНачисление];
					Если СтрокиНачисления = Неопределено Тогда 
						СтрокиНачисления = Новый Массив;
						СтрокиНачислений.Вставить(НоваяСтрока.БазовоеНачисление, СтрокиНачисления);
					КонецЕсли;
					СтрокиНачисления.Добавить(НоваяСтрока);
					Если Выборка.НеполныйМесяц = Истина Тогда
						КоэффициентыРаспределения.Добавить(Выборка.ЦеломесячнаяБаза);
						Если ЕстьДополнениеРасчетнойБазы Тогда
							СтрокиКРаспределению.Добавить(НоваяСтрока);
							РазностьДат.Добавить(Выборка.РазностьДат);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Для Каждого КлючИЗначение Из СтрокиНачислений Цикл 
				Начисление = КлючИЗначение.Ключ;
				СтрокиНачисления = КлючИЗначение.Значение;
				Отбор = Новый Структура("Месяц,ФизическоеЛицо,Начисление", Выборка.Месяц, ФизическоеЛицо, Начисление);
				СтрокиНалога = НалогПоДоходам.НайтиСтроки(Отбор);
				Если СтрокиНалога.Количество() > 0 Тогда
					Если СтрокиНачисления.Количество() = 1 Тогда
						СтрокаНачисления = СтрокиНачисления[0];
						Коэффициент = ?(СтрокаНачисления.НеполныйМесяц, ?(СтрокаНачисления.СуммаЦеломесячная = 0, 0, СтрокаНачисления.Сумма / СтрокаНачисления.СуммаЦеломесячная), 1);
						СтрокаНачисления.СуммаНДФЛ = СтрокиНалога[0].Налог * Коэффициент;
					ИначеЕсли СтрокиНачисления.Количество() > 1 Тогда 
						КоэффициентыНачисления = Новый Массив;
						Для Каждого СтрокаНачисления Из СтрокиНачисления Цикл
							КоэффициентыНачисления.Добавить(?(СтрокаНачисления.СуммаЦеломесячная = 0, СтрокаНачисления.Сумма, СтрокаНачисления.СуммаЦеломесячная));
						КонецЦикла;
						РаспределениеСуммыНалога = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокиНалога[0].Налог, КоэффициентыНачисления);
						Если РаспределениеСуммыНалога <> Неопределено Тогда 
							Индекс = 0;
							Для Каждого СтрокаНачисления Из СтрокиНачисления Цикл
								Коэффициент = ?(СтрокаНачисления.НеполныйМесяц, ?(СтрокаНачисления.СуммаЦеломесячная = 0, 0, СтрокаНачисления.Сумма / СтрокаНачисления.СуммаЦеломесячная), 1);
								СтрокаНачисления.СуммаНДФЛ = РаспределениеСуммыНалога[Индекс] * Коэффициент;
								Индекс = Индекс + 1;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Не ЕстьДополнениеРасчетнойБазы Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокиКРаспределению.Количество() = 1 Тогда
				ЗаполнитьСтрокуДополненияРасчетнойБазы(СтрокиКРаспределению[0], СуммаНачисленийРаспределяемая, СуммаНДФЛРаспределяемая);
				Продолжить;
			КонецЕсли;
			РаспределениеСуммыДополнения = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаНачисленийРаспределяемая, КоэффициентыРаспределения);
			Если РаспределениеСуммыДополнения = Неопределено Тогда
				РаспределениеСуммыДополнения = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаНачисленийРаспределяемая, РазностьДат);
			КонецЕсли;
			РаспределениеСуммыНДФЛ = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаНДФЛРаспределяемая, КоэффициентыРаспределения);
			Если РаспределениеСуммыНДФЛ = Неопределено Тогда
				РаспределениеСуммыНДФЛ = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаНДФЛРаспределяемая, РазностьДат);
			КонецЕсли;
			Индекс = 0;
			Для Каждого Строка Из СтрокиКРаспределению Цикл
				СуммаДополнения = 0;
				Если РаспределениеСуммыДополнения <> Неопределено Тогда
					СуммаДополнения = РаспределениеСуммыДополнения[Индекс];
				КонецЕсли;
				СуммаНДФЛ = 0;
				Если РаспределениеСуммыНДФЛ <> Неопределено Тогда
					СуммаНДФЛ = РаспределениеСуммыНДФЛ[Индекс];
				КонецЕсли;
				ЗаполнитьСтрокуДополненияРасчетнойБазы(Строка, СуммаДополнения, СуммаНДФЛ);
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДополненияРасчетнойБазы(Строка, РаспределениеСуммыДополнения, РаспределениеСуммыНДФЛ)
	
	КоэффициентНеполногоМесяца = 1;
	Если Строка.НеполныйМесяц = Истина И ЗначениеЗаполнено(Строка.СуммаЦеломесячная) Тогда
		КоэффициентНеполногоМесяца = Строка.Сумма / Строка.СуммаЦеломесячная;
	КонецЕсли;
	Если РаспределениеСуммыДополнения <> Неопределено Тогда
		Строка.СуммаДополнения = Строка.СуммаДополнения + РаспределениеСуммыДополнения * КоэффициентНеполногоМесяца;
	КонецЕсли;
	Если РаспределениеСуммыНДФЛ <> Неопределено Тогда
		Строка.СуммаНДФЛ = Строка.СуммаНДФЛ + РаспределениеСуммыНДФЛ * КоэффициентНеполногоМесяца;
	КонецЕсли;
	
КонецПроцедуры

// Для удержаний, выполняемых не за целый месяц, рассчитывает коэффициент целомесячности 
// как отношение базы к базе аналогичной записи за полный месяц
// - выявляем записи, которые выполняются не за целый месяц,
// - для тех из них, которые в совокупности не образуют полный месяц, 
// составляем искусственные записи для получения расчетной базы за целый месяц.
//
Процедура ДополнитьЦеломесячнымиЗаписямиУдержаний()
	ИсполнительныеЛисты.ДополнитьЦеломесячнымиЗаписямиУдержаний(МенеджерВременныхТаблиц);
КонецПроцедуры

// Ожидается ВТ с полями
//	- ДокументОснование
//	- ФизическоеЛицо
//	- Организация (Головная организация)
//	- Месяц.
//
Функция ДополнениеРасчетнойБазыУдержаний(ОписаниеВТ, НалогПоДоходам)
	
	// Дополнение расчетной базы включает в себя
	//	- начисления по договорам,
	//	- материальную помощь
	// вычесть - НДФЛ.
	
	УдалитьВТ = Новый Массив;
	
	// Выбираем удержания, которые поддерживают дополнение.
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("КатегорииДополненияРасчетнойБазы", КатегорииДополненияРасчетнойБазыУдержаний());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ДокументОснование КАК ДокументОснование,
		|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Удержания.Организация КАК Организация,
		|	НАЧАЛОПЕРИОДА(Удержания.НачалоПериода, МЕСЯЦ) КАК Месяц
		|ПОМЕСТИТЬ ВТФильтрДополненияРасчетнойБазы
		|ИЗ
		|	ВТУдержания КАК Удержания
		|ГДЕ
		|	Удержания.ОригинальнаяЗапись
		|	И Удержания.ВидРасчета.КатегорияУдержания В(&КатегорииДополненияРасчетнойБазы)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУдержания", ОписаниеВТ.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.НачалоПериода", "Удержания." + ОписаниеВТ.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.ОкончаниеПериода", "Удержания." + ОписаниеВТ.ИмяПоляОкончаниеПериода);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрДополненияРасчетнойБазы");
	
	ДополнениеРасчетнойБазы = Новый ТаблицаЗначений;
	ДополнениеРасчетнойБазы.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ДополнениеРасчетнойБазы.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержания.Тип);
	ДополнениеРасчетнойБазы.Колонки.Добавить("СуммаНачислений", Новый ОписаниеТипов("Число"));
	ДополнениеРасчетнойБазы.Колонки.Добавить("СуммаНДФЛ", Новый ОписаниеТипов("Число"));
	ДополнениеРасчетнойБазы.Колонки.Добавить("Распределять", Новый ОписаниеТипов("Булево"));
	
	Если Не ВТСодержитСтроки("ВТФильтрДополненияРасчетнойБазы") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат ДополнениеРасчетнойБазы;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(Удержания.НачалоПериода) КАК НачалоПериода,
		|	МАКСИМУМ(Удержания.ОкончаниеПериода) КАК ОкончаниеПериода
		|ИЗ
		|	ВТУдержания КАК Удержания";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУдержания", ОписаниеВТ.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.НачалоПериода", "Удержания." + ОписаниеВТ.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.ОкончаниеПериода", "Удержания." + ОписаниеВТ.ИмяПоляОкончаниеПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрНакопления.НачисленияУдержанияПоСотрудникам");
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам");
	
	ВидыНачисленийДополнения = Обработки.МенеджерРасчетаЗарплаты.ВидыНачисленийДополненияРасчетнойБазыУдержаний();
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Выборка.НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Выборка.ОкончаниеПериода));
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ВременныйРегистратор", ВременныйРегистратор);
	Запрос.УстановитьПараметр("ВидыНачисленийДополнения", ВидыНачисленийДополнения);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДляРасчета.Месяц КАК Месяц,
		|	ДанныеДляРасчета.ДокументОснование КАК ДокументОснование,
		|	ДанныеДляРасчета.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДляРасчета.Начисление КАК Начисление,
		|	ДанныеДляРасчета.Распределять КАК Распределять,
		|	СУММА(ДанныеДляРасчета.СуммаНачислений) КАК СуммаНачислений
		|ИЗ
		|	(ВЫБРАТЬ
		|		Фильтр.Месяц КАК Месяц,
		|		Фильтр.ДокументОснование КАК ДокументОснование,
		|		Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|		Начисления.НачислениеУдержание КАК Начисление,
		|		Начисления.Сумма КАК СуммаНачислений,
		|		ИСТИНА КАК Распределять
		|	ИЗ
		|		РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФильтрДополненияРасчетнойБазы КАК Фильтр
		|			ПО (Начисления.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|				И (Фильтр.Месяц = НАЧАЛОПЕРИОДА(Начисления.Период, МЕСЯЦ))
		|				И (Фильтр.ФизическоеЛицо = Начисления.ФизическоеЛицо)
		|				И (Фильтр.Организация = Начисления.Организация.ГоловнаяОрганизация)
		|				И (Начисления.НачислениеУдержание В (&ВидыНачисленийДополнения))
		|				И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
		|				И (Начисления.Регистратор = &ВременныйРегистратор)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Фильтр.Месяц,
		|		Фильтр.ДокументОснование,
		|		Начисления.ФизическоеЛицо,
		|		Начисления.НачислениеУдержание,
		|		Начисления.Сумма,
		|		ИСТИНА
		|	ИЗ
		|		ВТРегистрНакопления_НачисленияУдержанияПоСотрудникам КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФильтрДополненияРасчетнойБазы КАК Фильтр
		|			ПО (Начисления.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|				И (Фильтр.Месяц = НАЧАЛОПЕРИОДА(Начисления.Период, МЕСЯЦ))
		|				И (Фильтр.ФизическоеЛицо = Начисления.ФизическоеЛицо)
		|				И (Фильтр.Организация = Начисления.Организация.ГоловнаяОрганизация)
		|				И (Начисления.НачислениеУдержание В (&ВидыНачисленийДополнения))
		|				И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
		|				И (Начисления.Регистратор = &ВременныйРегистратор)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Фильтр.Месяц,
		|		Фильтр.ДокументОснование,
		|		Начисления.ФизическоеЛицо,
		|		Начисления.НачислениеУдержание,
		|		Начисления.Сумма,
		|		ЛОЖЬ
		|	ИЗ
		|		РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФильтрДополненияРасчетнойБазы КАК Фильтр
		|			ПО (Начисления.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|				И (Фильтр.Месяц = НАЧАЛОПЕРИОДА(Начисления.Период, МЕСЯЦ))
		|				И (Фильтр.ФизическоеЛицо = Начисления.ФизическоеЛицо)
		|				И (Фильтр.Организация = Начисления.Организация.ГоловнаяОрганизация)
		|				И (Начисления.НачислениеУдержание В (&ВидыНачисленийДополнения))
		|				И (Начисления.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))
		|				И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
		|				И (Начисления.Регистратор = &ВременныйРегистратор)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Фильтр.Месяц,
		|		Фильтр.ДокументОснование,
		|		Начисления.ФизическоеЛицо,
		|		Начисления.НачислениеУдержание,
		|		Начисления.Сумма,
		|		ЛОЖЬ
		|	ИЗ
		|		ВТРегистрНакопления_НачисленияУдержанияПоКонтрагентамАкционерам КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФильтрДополненияРасчетнойБазы КАК Фильтр
		|			ПО (Начисления.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|				И (Фильтр.Месяц = НАЧАЛОПЕРИОДА(Начисления.Период, МЕСЯЦ))
		|				И (Фильтр.ФизическоеЛицо = Начисления.ФизическоеЛицо)
		|				И (Фильтр.Организация = Начисления.Организация.ГоловнаяОрганизация)
		|				И (Начисления.НачислениеУдержание В (&ВидыНачисленийДополнения))
		|				И (Начисления.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))
		|				И (Начисления.Регистратор <> &ИсключаемыйРегистратор)) КАК ДанныеДляРасчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляРасчета.Месяц,
		|	ДанныеДляРасчета.ДокументОснование,
		|	ДанныеДляРасчета.ФизическоеЛицо,
		|	ДанныеДляРасчета.Начисление,
		|	ДанныеДляРасчета.Распределять";
		
	Если Не НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (Начисления.Регистратор = &ВременныйРегистратор)", "");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = ДополнениеРасчетнойБазы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Отбор = Новый Структура("Месяц,ФизическоеЛицо,Начисление", Выборка.Месяц, Выборка.ФизическоеЛицо, Выборка.Начисление);
		СтрокиНалога = НалогПоДоходам.НайтиСтроки(Отбор);
		Если СтрокиНалога.Количество() > 0 Тогда 
			НоваяСтрока.СуммаНДФЛ = СтрокиНалога[0].Налог;
		КонецЕсли;
	КонецЦикла;
	
	ДополнениеРасчетнойБазы.Свернуть("Месяц,ДокументОснование,Распределять", "СуммаНачислений,СуммаНДФЛ"); 
	ДополнениеРасчетнойБазы.Индексы.Добавить("ДокументОснование,Месяц");
	
	УничтожитьВТ(УдалитьВТ);
	
	Возврат ДополнениеРасчетнойБазы;
	
КонецФункции

Функция КатегорииДополненияРасчетнойБазыУдержаний()
	
	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииУдержаний.ИсполнительныйЛист);
	
	Возврат Категории;
	
КонецФункции

#КонецОбласти

#КонецОбласти

// Ожидается ВТ с полями (имена полей параметризуются через описание)
//	- Организация
//	- ИдентификаторСтроки
//	- ДатаНачала
//	- ДатаОкончания.
//
Процедура ЗаполнитьЗначенияПериодическихПоказателейОрганизаций(ТребованияНачислений, СтрокиПоИдентификатору, ОписаниеВТНачисления = Неопределено)
	
	Если Не ТребованияНачислений.ТребуютсяЗначенияПериодическихПоказателейОрганизаций Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Если ОписаниеВТНачисления = Неопределено Тогда
		ОписаниеВТНачисления = ОписаниеВТНачисления();
		ОписаниеВТНачисления.ИмяПоляНачисление = "Начисление";
	КонецЕсли;
	
	// Формируем ВТ с параметрами для получения значений показателей.
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	Начисления.ДатаОкончания КАК ДатаОкончания,
		|	Начисления.Организация
		|ПОМЕСТИТЬ ВТОрганизацииПоказатели
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиНачислений.ПериодическийПоказательОрганизации)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТНачисления.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачисление);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачалоПериода);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаОкончания", "Начисления." + ОписаниеВТНачисления.ИмяПоляОкончаниеПериода);	
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТОрганизацииПоказатели");
	
	ОписаниеВТ = ОписаниеВТСПериодами();
	ОписаниеВТ.ИмяВТ = "ВТОрганизацииПоказатели";
	ОписаниеВТ.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТЗначенияПериодическихПоказателейОрганизацийИнтервалы(ОписаниеВТ);
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ЗначенияПоказателейОрганизации.Показатель,
		|	ЗначенияПоказателейОрганизации.Значение
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиНачислений.ПериодическийПоказательОрганизации)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизацийИнтервалы КАК ЗначенияПоказателейОрганизации
		|		ПО (ЗначенияПоказателейОрганизации.Организация = Начисления.Организация)
		|			И (ЗначенияПоказателейОрганизации.Показатель = ПоказателиНачислений.Показатель)
		|			И (ВЫБОР
		|				КОГДА ПоказателиНачислений.НачисляетсяВЦеломЗаМесяц
		|					ТОГДА Начисления.ДатаОкончания МЕЖДУ ЗначенияПоказателейОрганизации.НачалоПериода И ЗначенияПоказателейОрганизации.КонецПериода
		|				ИНАЧЕ Начисления.ДатаНачала МЕЖДУ ЗначенияПоказателейОрганизации.НачалоПериода И ЗначенияПоказателейОрганизации.КонецПериода
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.ИдентификаторСтроки,
		|	ЗначенияПоказателейОрганизации.Показатель";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТНачисления.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачисление);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачалоПериода);	
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПериодическихПоказателейПодразделений(ТребованияНачислений, СтрокиПоИдентификатору, ОписаниеВТНачисления = Неопределено)
	
	Если Не ТребованияНачислений.ТребуютсяЗначенияПериодическихПоказателейПодразделений Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Если ОписаниеВТНачисления = Неопределено Тогда
		ОписаниеВТНачисления = ОписаниеВТНачисления();
		ОписаниеВТНачисления.ИмяПоляНачисление = "Начисление";
	КонецЕсли;
	
	// Формируем ВТ с параметрами для получения значений показателей.
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Подразделение,
		|	ПоказателиНачислений.Показатель
		|ПОМЕСТИТЬ ВТПодразделенияПоказатели
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиНачислений.ПериодическийПоказательПодразделения)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТНачисления.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачисление);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачалоПериода);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаОкончания", "Начисления." + ОписаниеВТНачисления.ИмяПоляОкончаниеПериода);	
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТПодразделенияПоказатели");
	
	ОписаниеВТ = ОписаниеВТСПериодами();
	ОписаниеВТ.ИмяВТ = "ВТПодразделенияПоказатели";
	ОписаниеВТ.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	СоздатьВТЗначенияПериодическихПоказателейПодразделенийИнтервалы(ОписаниеВТ);
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ЗначенияПоказателейПодразделений.Показатель,
		|	ЗначенияПоказателейПодразделений.Значение
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиНачислений.ПериодическийПоказательПодразделения)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделенийИнтервалы КАК ЗначенияПоказателейПодразделений
		|		ПО (ЗначенияПоказателейПодразделений.Подразделение = Начисления.Подразделение)
		|			И (ЗначенияПоказателейПодразделений.Показатель = ПоказателиНачислений.Показатель)
		|			И (ВЫБОР
		|				КОГДА ПоказателиНачислений.НачисляетсяВЦеломЗаМесяц
		|					ТОГДА Начисления.ДатаОкончания МЕЖДУ ЗначенияПоказателейПодразделений.ДатаНачала И ЗначенияПоказателейПодразделений.ДатаОкончания
		|				ИНАЧЕ Начисления.ДатаНачала МЕЖДУ ЗначенияПоказателейПодразделений.ДатаНачала И ЗначенияПоказателейПодразделений.ДатаОкончания
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.ИдентификаторСтроки,
		|	ЗначенияПоказателейПодразделений.Показатель";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТНачисления.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачисление);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачалоПериода);	
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРазовыхПоказателейОрганизаций(ТребованияНачислений, СтрокиПоИдентификатору, ОписаниеВТНачисления = Неопределено)
	
	Если Не ТребованияНачислений.ТребуютсяЗначенияРазовыхПоказателейОрганизаций Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Если ОписаниеВТНачисления = Неопределено Тогда
		ОписаниеВТНачисления = ОписаниеВТНачисления();
		ОписаниеВТНачисления.ИмяПоляНачисление = "Начисление";
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Организация,
		|	ПоказателиРасчета.Показатель,
		|	НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) КАК Месяц
		|ПОМЕСТИТЬ ВТОрганизацииМесяцы
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиРасчета.РазовыйПоказательОрганизации = ИСТИНА)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТНачисления.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачисление);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачалоПериода);	
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТОрганизацииМесяцы");
	
	ОписаниеВТ = ОписаниеВТРазовыхПоказателей();
	ОписаниеВТ.ИмяВТ = "ВТОрганизацииМесяцы";
	СоздатьВТЗначенияРазовыхПоказателейОрганизаций(ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель КАК Показатель,
		|	ЗначенияПоказателей.Значение
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиРасчета.РазовыйПоказательОрганизации = ИСТИНА)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхПоказателейОрганизаций КАК ЗначенияПоказателей
		|		ПО (ЗначенияПоказателей.Организация = Начисления.Организация)
		|			И (ЗначенияПоказателей.Показатель = ПоказателиРасчета.Показатель)
		|			И (ЗначенияПоказателей.ПериодДействия = НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки,
		|	Показатель";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТНачисления.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачисление);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачалоПериода);	
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРазовыхПоказателейПодразделений(ТребованияНачислений, СтрокиПоИдентификатору, ОписаниеВТНачисления = Неопределено)
	
	Если Не ТребованияНачислений.ТребуютсяЗначенияРазовыхПоказателейПодразделений Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Если ОписаниеВТНачисления = Неопределено Тогда
		ОписаниеВТНачисления = ОписаниеВТНачисления();
		ОписаниеВТНачисления.ИмяПоляНачисление = "Начисление";
	КонецЕсли;
	
	// Формируем ВТ с параметрами для получения значений показателей.
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Подразделение,
		|	ПоказателиНачислений.Показатель,
		|	НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) КАК Месяц
		|ПОМЕСТИТЬ ВТПодразделенияМесяцы
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиНачислений.РазовыйПоказательПодразделения = ИСТИНА)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТНачисления.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачисление);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачалоПериода);	
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТПодразделенияМесяцы");
	
	ОписаниеВТ = ОписаниеВТРазовыхПоказателей();
	ОписаниеВТ.ИмяВТ = "ВТПодразделенияМесяцы";
	СоздатьВТЗначенияРазовыхПоказателейПодразделений(ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель КАК Показатель,
		|	ЗначенияПоказателей.Значение
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиРасчета.РазовыйПоказательПодразделения = ИСТИНА)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхПоказателейПодразделений КАК ЗначенияПоказателей
		|		ПО (ЗначенияПоказателей.Подразделение = Начисления.Подразделение)
		|			И (ЗначенияПоказателей.Показатель = ПоказателиРасчета.Показатель)
		|			И (ЗначенияПоказателей.ПериодДействия = НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки,
		|	Показатель";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТНачисления.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачисление);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачалоПериода);	
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьЗначенияОперативныхПоказателейОрганизаций(ТребованияНачислений, СтрокиПоИдентификатору, ОписаниеВТНачисления = Неопределено)
	
	Если Не ТребованияНачислений.ТребуютсяЗначенияОперативныхПоказателейОрганизаций Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Если ОписаниеВТНачисления = Неопределено Тогда
		ОписаниеВТНачисления = ОписаниеВТНачисления();
		ОписаниеВТНачисления.ИмяПоляНачисление = "Начисление";
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Организация,
		|	ПоказателиРасчета.Показатель,
		|	Начисления.ДатаНачала КАК НачалоПериода,
		|	Начисления.ДатаОкончания КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТОрганизацииПериоды
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиРасчета.ОперативныйПоказательОрганизации = ИСТИНА)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТНачисления.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачисление);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачалоПериода);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаОкончания", "Начисления." + ОписаниеВТНачисления.ИмяПоляОкончаниеПериода);	
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТОрганизацииПериоды");
	
	ОписаниеВТ = ОписаниеВТОперативныхПоказателей();
	ОписаниеВТ.ИмяВТ = "ВТОрганизацииПериоды";
	СоздатьВТЗначенияОперативныхПоказателейОрганизаций(ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель КАК Показатель,
		|	СУММА(ЗначенияПоказателей.Значение) КАК Значение
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиРасчета.ОперативныйПоказательОрганизации = ИСТИНА)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхПоказателейОрганизаций КАК ЗначенияПоказателей
		|		ПО (ЗначенияПоказателей.Организация = Начисления.Организация)
		|			И (ЗначенияПоказателей.Показатель = ПоказателиРасчета.Показатель)
		|			И (ЗначенияПоказателей.Период МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки,
		|	Показатель";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТНачисления.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачисление);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачалоПериода);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаОкончания", "Начисления." + ОписаниеВТНачисления.ИмяПоляОкончаниеПериода);	
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияОперативныхПоказателейПодразделений(ТребованияНачислений, СтрокиПоИдентификатору, ОписаниеВТНачисления = Неопределено)
	
	Если Не ТребованияНачислений.ТребуютсяЗначенияОперативныхПоказателейПодразделений Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Если ОписаниеВТНачисления = Неопределено Тогда
		ОписаниеВТНачисления = ОписаниеВТНачисления();
		ОписаниеВТНачисления.ИмяПоляНачисление = "Начисление";
	КонецЕсли;
	
	// Формируем ВТ с параметрами для получения значений показателей.
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Подразделение,
		|	ПоказателиНачислений.Показатель,
		|	Начисления.ДатаНачала КАК НачалоПериода,
		|	Начисления.ДатаОкончания КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТПодразделенияПериоды
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиНачислений.ОперативныйПоказательПодразделения = ИСТИНА)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТНачисления.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачисление);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачалоПериода);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаОкончания", "Начисления." + ОписаниеВТНачисления.ИмяПоляОкончаниеПериода);	
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТПодразделенияПериоды");
	
	ОписаниеВТ = ОписаниеВТОперативныхПоказателей();
	ОписаниеВТ.ИмяВТ = "ВТПодразделенияПериоды";
	СоздатьВТЗначенияОперативныхПоказателейПодразделений(ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель КАК Показатель,
		|	СУММА(ЗначенияПоказателей.Значение) КАК Значение
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|			И (ПоказателиРасчета.ОперативныйПоказательПодразделения = ИСТИНА)
		|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхПоказателейПодразделений КАК ЗначенияПоказателей
		|		ПО (ЗначенияПоказателей.Подразделение = Начисления.Подразделение)
		|			И (ЗначенияПоказателей.Показатель = ПоказателиРасчета.Показатель)
		|			И (ЗначенияПоказателей.Период МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ИдентификаторСтроки,
		|	ПоказателиРасчета.Показатель
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки,
		|	Показатель";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТНачисления.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачисление);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТНачисления.ИмяПоляНачалоПериода);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаОкончания", "Начисления." + ОписаниеВТНачисления.ИмяПоляОкончаниеПериода);	
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Замещать = Ложь)
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ЗаполнитьЗначенияПоказателейПоВыборкеЗапроса(Выборка, СтрокиПоИдентификатору, Замещать);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейПоВыборкеЗапроса(Выборка, СтрокиПоИдентификатору, Замещать = Ложь)
	
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнятьВремя = ЗаполнятьОплаченноеОтработанноеВремя(Строка);
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Выборка.Показатель, Выборка.Значение, Замещать);
			Если ЗаполнятьВремя Тогда
				ЗаполнитьОплаченноеВремяПоЗначениюПоказателя(Строка, Выборка.Показатель, Выборка.Значение);	
			КонецЕсли;
			Если Выборка.Значение = NULL Тогда
				Если Не Строка.Сторно 
					И Не Строка.ФиксСтрока Тогда
					ВычеркиваемыеСтроки.Добавить(Выборка.ИдентификаторСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Значение, Замещать = Ложь)
	
	Если Строка.Показатели.Количество() = 0 Тогда
		Строка.Показатели = ТаблицаПоказателей();
	КонецЕсли;
	
	Если Замещать Тогда
		// Сначала удаляем строки с этим показателем.
		Отбор = Новый Структура("Показатель");
		Отбор.Показатель = Показатель;
		НайденныеСтроки = Строка.Показатели.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Строка.Показатели.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	НоваяСтрока = Строка.Показатели.Добавить();
	НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтроки;
	НоваяСтрока.Показатель = Показатель;
	НоваяСтрока.Значение = Значение;
	
	Если ВыявленныеПоказатели = Неопределено Тогда
		// Собираем таблицу выявленных показателей для того, чтобы 
		ВыявленныеПоказатели = ТаблицаПоказателей();
	КонецЕсли;
	НоваяСтрока = ВыявленныеПоказатели.Добавить();
	НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтроки;
	НоваяСтрока.Показатель = Показатель;
	НоваяСтрока.Значение = Значение;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияИзвестныхПоказателей(СтрокиПоИдентификатору, ИмяВТИзвестныеПоказатели)
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзвестныеПоказатели.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ИзвестныеПоказатели.Показатель КАК Показатель,
		|	ИзвестныеПоказатели.Значение КАК Значение
		|ИЗ
		|	ВТИзвестныеПоказатели КАК ИзвестныеПоказатели
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки,
		|	Показатель";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИзвестныеПоказатели", ИмяВТИзвестныеПоказатели);
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияИзвестныхОпределяющихПоказателей(СтрокиПоИдентификатору)
	
	СоздатьВТОпределяющиеПоказатели();
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ОпределяющиеПоказатели.Показатель КАК Показатель,
		|	ОпределяющиеПоказатели.Значение КАК Значение
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.Начисление)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОпределяющиеПоказатели КАК ОпределяющиеПоказатели
		|		ПО (ОпределяющиеПоказатели.Сотрудник = Начисления.Сотрудник)
		|			И (ОпределяющиеПоказатели.Организация = Начисления.Организация)
		|			И (ОпределяющиеПоказатели.Показатель = ПоказателиРасчета.Показатель)
		|			И (ОпределяющиеПоказатели.Дата = Начисления.ДатаНачала)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки,
		|	Показатель";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Истина);
	
КонецПроцедуры

#Область КолонкиОтработаноОплаченоНормаДнейЧасов

Процедура ЗаполнитьОплаченноеВремяПоЗначениюПоказателя(Строка, Показатель, Значение)
	
	Если Строка.ФиксСторно Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	
	ЗаполнитьОплаченноеВремяКоличествомДней(Строка, Показатель, Значение, СтандартнаяОбработка);
	ЗаполнитьОплаченноеВремяКоличествомЧасов(Строка, Показатель, Значение, СтандартнаяОбработка);
	ЗаполнитьОплаченноеВремяДнейЧасовВыходногоПособия(Строка, Показатель, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ЗаполнитьОплаченноеВремяКоличествомДней(Строка, Показатель, Значение, СтандартнаяОбработка)
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПоказателиДней = Новый Массив;
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейКомпенсации"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска"));
	
	Если ПоказателиДней.Найти(Показатель) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка.ОплаченоДней = Значение;
	Строка.ОплаченоЧасов = Неопределено;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемКоличествоДней(Строка)
	
	ПоказателиДней = Новый Массив;
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейКомпенсации"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска"));
	
	Для Каждого Показатель Из ПоказателиДней Цикл
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоДней, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОплаченноеВремяКоличествомЧасов(Строка, Показатель, Значение, СтандартнаяОбработка)
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПоказателиДней = Новый Массив;
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочно"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПереработаноПоСуммированномуУчету"));
	
	Если ПоказателиДней.Найти(Показатель) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка.ОплаченоДней = Неопределено;
	Строка.ОплаченоЧасов = Значение;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемКоличествоЧасов(Строка)
	
	ПоказателиДней = Новый Массив;
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочно"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПереработаноПоСуммированномуУчету"));
	
	Для Каждого Показатель Из ПоказателиДней Цикл
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоЧасов, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОплаченноеВремяДнейЧасовВыходногоПособия(Строка, Показатель, Значение, СтандартнаяОбработка)
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейЧасовВыходногоПособия") Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка.ВремяВЧасах = Ложь Тогда
		Строка.ОплаченоДней = Значение;
		Строка.ОплаченоЧасов = Неопределено;
	Иначе
		Строка.ОплаченоДней = Неопределено;
		Строка.ОплаченоЧасов = Значение;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемДниЧасыВыходногоПособия(Строка)
	
	Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейЧасовВыходногоПособия");
	
	Если Строка.ВремяВЧасах = Ложь Тогда
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоДней, Истина);
	Иначе
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоЧасов, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнятьОплаченноеОтработанноеВремя(Строка)
	
	Если ТипЗнч(Строка.Категория) = Тип("ПеречислениеСсылка.КатегорииУдержаний") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьОплаченнымВременемВремяВДнях(Строка)
	
	Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях");
	ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоДней, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемВремяВДняхЧасах(Строка)
	
	Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах");
	
	Если Строка.ВремяВЧасах = Ложь Тогда
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоДней, Истина);
	Иначе
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоЧасов, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемВремяВЧасах(Строка)
	
	Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах");	
	ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоЧасов, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемНормуДней(Строка)
	
	ПоказателиДней = Новый Массив;
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях"));
	
	Для Каждого Показатель Из ПоказателиДней Цикл
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.НормаДней, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемНормуЧасов(Строка)
	
	Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах");
	ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.НормаЧасов, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиНачисленийПоОплаченномуВремени(СтрокиПоИдентификатору)
	
	Для Каждого КлючИЗначение Из СтрокиПоИдентификатору Цикл
		Строка = КлючИЗначение.Значение;
		Если Не Строка.ФиксРасчетВремени Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьОплаченнымВременемКоличествоДней(Строка);
		ЗаполнитьОплаченнымВременемКоличествоЧасов(Строка);
		ЗаполнитьОплаченнымВременемДниЧасыВыходногоПособия(Строка);
		ЗаполнитьОплаченнымВременемВремяВДнях(Строка);
		ЗаполнитьОплаченнымВременемВремяВДняхЧасах(Строка);
		ЗаполнитьОплаченнымВременемВремяВЧасах(Строка);
		ЗаполнитьОплаченнымВременемНормуДней(Строка);
		ЗаполнитьОплаченнымВременемНормуЧасов(Строка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СведенияДляРасчета

Процедура ЗаполнитьСведенияНачисленийДляРасчетаСлужебный(Начисления, ТребованияЗаполнения) 
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СтрокиПоИдентификатору = Новый Соответствие;
	СоздатьВТНачисления(Начисления, СтрокиПоИдентификатору);
	УдалитьВТ.Добавить("ВТНачисления");
	УдалитьВТ.Добавить("ВТИзвестныеПоказателиНачислений");
	
	СоздатьВТКадровыеСведенияНачислений(ТребованияЗаполнения, УдалитьВТ);

	СоздатьВТБазовыйПериодНачислений(ТребованияЗаполнения);
	УдалитьВТ.Добавить("ВТБазовыйПериодНачислений");

	СоздатьВТИсточникиДанныхУчетаВремениНаДаты(ТребованияЗаполнения);
	УдалитьВТ.Добавить("ВТИсточникиДанныхУчетаВремениНаДаты");
	
	СоздатьВТПризнакВремяВЧасах(ТребованияЗаполнения, УдалитьВТ);
	УдалитьВТ.Добавить("ВТПризнакВремяВЧасах");
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	КадровыеИзменения.Организация,
		|	КадровыеИзменения.Подразделение,
		|	КадровыеИзменения.Должность,
		|	КадровыеИзменения.ДолжностьПоШтатномуРасписанию,
		|	КадровыеИзменения.ВидЗанятости,
		|	ИсточникиДанныхВремени.ИсточникДанныхФактическогоВремени,
		|	ИсточникиДанныхВремени.ПериодРегистрацииФактическогоВремени,
		|	ИсточникиДанныхВремени.ПериодРегистрацииНормыВремени,
		|	ИсточникиДанныхВремени.ОбщийГрафик,
		|	ИсточникиДанныхВремени.ИсточникДанныхНормыВремени,
		|	ПризнакВремяВЧасах.ВремяВЧасах КАК ВремяВЧасах,
		|	ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления,
		|	БазовыйПериод.НачалоБазовогоПериода,
		|	БазовыйПериод.ОкончаниеБазовогоПериода
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыйПериодНачислений КАК БазовыйПериод
		|		ПО (БазовыйПериод.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеИзмененияИнтервалы КАК КадровыеИзменения
		|		ПО (КадровыеИзменения.Сотрудник = Начисления.Сотрудник)
		|			И (Начисления.ДатаНачала МЕЖДУ КадровыеИзменения.НачалоПериода И КадровыеИзменения.КонецПериода)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсточникиДанныхУчетаВремениНаДаты КАК ИсточникиДанныхВремени
		|		ПО (ИсточникиДанныхВремени.Сотрудник = Начисления.Сотрудник)
		|			И (ИсточникиДанныхВремени.Дата = Начисления.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПризнакВремяВЧасах КАК ПризнакВремяВЧасах
		|		ПО (ПризнакВремяВЧасах.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		ЗаполнитьИсточникДанныхВремениСтрокиНачисления(Строка, Выборка, ТребованияЗаполнения);
		ЗаполнитьКадровыеДанныеСтрокиНачисления(Строка, Выборка, ТребованияЗаполнения);
		ЗаполнитьБазовыйПериодСтрокиНачисления(Строка, Выборка, ТребованияЗаполнения);
		ЗаполнитьПериодДействияСтрокиНачисления(Строка, Выборка, ТребованияЗаполнения);
		ЗаполнитьПризнакВремяВЧасахСтрокиНачисления(Строка, Выборка, ТребованияЗаполнения);
		ЗаполнитьКатегориюСтрокиНачисления(Строка, Выборка, ТребованияЗаполнения);
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	
	ПриЗаполненииСведенийНачисленийДляРасчета(Начисления);	
КонецПроцедуры

Процедура СоздатьВТБазовыйПериодНачислений(ТребованияЗаполнения)
	
	Если Не ТребованияЗаполнения.БазовыйПериод Тогда
		Запрос = НовыйЗапрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	0 КАК ИдентификаторСтроки,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК НачалоБазовогоПериода,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ОкончаниеБазовогоПериода
			|ПОМЕСТИТЬ ВТБазовыйПериодНачислений";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц)
		|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ), МЕСЯЦ, -1)
		|		КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал)
		|			ТОГДА НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, КВАРТАЛ)
		|		КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал)
		|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, КВАРТАЛ), КВАРТАЛ, -1)
		|		КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод)
		|			ТОГДА НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, ГОД)
		|		КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод)
		|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, ГОД), ГОД, -1)
		|		КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев)
		|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ), МЕСЯЦ, -ВидыРасчета.КоличествоМесяцевБазовогоПериода - ВидыРасчета.СдвигБазовогоПериода + 1)
		|	КОНЕЦ КАК НачалоБазовогоПериода,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц)
		|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Начисления.ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ)
		|		КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал)
		|			ТОГДА КОНЕЦПЕРИОДА(Начисления.ДатаНачала, КВАРТАЛ)
		|		КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал)
		|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Начисления.ДатаНачала, КВАРТАЛ, -1), КВАРТАЛ)
		|		КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод)
		|			ТОГДА КОНЕЦПЕРИОДА(Начисления.ДатаНачала, ГОД)
		|		КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод)
		|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Начисления.ДатаНачала, ГОД, -1), ГОД)
		|		КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев)
		|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Начисления.ДатаНачала, МЕСЯЦ, -ВидыРасчета.СдвигБазовогоПериода), МЕСЯЦ)
		|	КОНЕЦ КАК ОкончаниеБазовогоПериода
		|ПОМЕСТИТЬ ВТБазовыйПериодНачислений
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьБазовыйПериодСтрокиНачисления(Строка, Выборка, ТребованияЗаполнения)
	
	Если Не ТребованияЗаполнения.БазовыйПериод Тогда
		Возврат;
	КонецЕсли;
	
	Строка.НачалоБазовогоПериода = Выборка.НачалоБазовогоПериода;
	Строка.ОкончаниеБазовогоПериода = Выборка.ОкончаниеБазовогоПериода;
	
КонецПроцедуры

Процедура СоздатьВТИсточникиДанныхУчетаВремениНаДаты(ТребованияЗаполнения)
	
	Если Не ТребованияЗаполнения.ИсточникиДанныхВремени И Не ТребованияЗаполнения.ВремяВЧасах Тогда
		Запрос = НовыйЗапрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
			|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
			|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка) КАК ИсточникДанныхФактическогоВремени,
			|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка) КАК ОбщийГрафик,
			|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка) КАК ИсточникДанныхНормыВремени,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодРегистрацииФактическогоВремени,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодРегистрацииНормыВремени,
			|	ЛОЖЬ КАК СуммированныйУчетРабочегоВремени
			|ПОМЕСТИТЬ ВТИсточникиДанныхУчетаВремениНаДаты";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	ОписаниеФильтра = МенеджерУчетаВремени.ОписаниеФильтраВТИсточникиДанныхУчетаВремениНаДаты();
	ОписаниеФильтра.ИмяТаблицы = "ВТНачисления";
	ОписаниеФильтра.ИмяПоляДата = "ДатаНачала";
	МенеджерУчетаВремени.СоздатьВТИсточникиДанныхУчетаВремениНаДаты(ОписаниеФильтра);
	
КонецПроцедуры

Процедура ЗаполнитьИсточникДанныхВремениСтрокиНачисления(Строка, Выборка, ТребованияЗаполнения)
	
	Если Не ТребованияЗаполнения.ИсточникиДанныхВремени Тогда
		Возврат;
	КонецЕсли;
	
	Строка.ГрафикРаботы = Выборка.ИсточникДанныхФактическогоВремени;
	Строка.ОбщийГрафик = Выборка.ОбщийГрафик;
	Строка.ГрафикРаботыНорма = Выборка.ИсточникДанныхНормыВремени;
	Строка.ПериодРегистрацииВремени = Выборка.ПериодРегистрацииФактическогоВремени;
	Строка.ПериодРегистрацииНормыВремени = Выборка.ПериодРегистрацииНормыВремени;
	
КонецПроцедуры

Процедура СоздатьВТКадровыеСведенияНачислений(ТребованияЗаполнения, УдалитьВТ)
	
	Если ТребованияЗаполнения.КадровыеДанные Тогда
		ОписаниеВТ = ОписаниеВТНачисления();
		ОписаниеВТ.ИмяВТ = "ВТНачисления";
		ОписаниеВТ.ИмяПоляНачисление = "Начисление";
		СоздатьВТКадровыеИзмененияИнтервалы(ОписаниеВТ);
		Возврат;
	КонецЕсли;
	
	// Если кадровые изменения не требуются, создаем пустышку, если пока кадровые данные не запрашивались.
	// Но пустышку нужно будет удалить.
	
	Если ВТСуществует("ВТКадровыеИзмененияИнтервалы") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК НачалоПериода,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК КонецПериода,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка) КАК Должность,
		|	ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка) КАК ДолжностьПоШтатномуРасписанию,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка) КАК ВидЗанятости
		|ПОМЕСТИТЬ ВТКадровыеИзмененияИнтервалы";
	Запрос.Выполнить();
	
	УдалитьВТ.Добавить("ВТКадровыеИзмененияИнтервалы");
	
КонецПроцедуры

Процедура ЗаполнитьКадровыеДанныеСтрокиНачисления(Строка, Выборка, ТребованияЗаполнения)
	
	Если Не ТребованияЗаполнения.КадровыеДанные Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Строка.Организация) Тогда
		Строка.Организация = Выборка.Организация;
	КонецЕсли;
	
	Строка.Подразделение = Выборка.Подразделение;
	Строка.Должность = Выборка.Должность;
	Строка.ДолжностьПоШтатномуРасписанию = Выборка.ДолжностьПоШтатномуРасписанию;
	Строка.ВидЗанятости = Выборка.ВидЗанятости;
	
КонецПроцедуры

Процедура ЗаполнитьПериодДействияСтрокиНачисления(Строка, Выборка, ТребованияЗаполнения)
	
	Если Не ТребованияЗаполнения.ПериодДействия Тогда
		Возврат;
	КонецЕсли;
	
	Строка.ПериодДействия = НачалоМесяца(Строка.ДатаНачала);
	
КонецПроцедуры

Процедура СоздатьВТПризнакВремяВЧасах(ТребованияЗаполнения, УдалитьВТ)
	
	Если Не ТребованияЗаполнения.ВремяВЧасах Тогда
		Запрос = НовыйЗапрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	0 КАК ИдентификаторСтроки,
			|	ЛОЖЬ КАК ВремяВЧасах
			|ПОМЕСТИТЬ ВТПризнакВремяВЧасах";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	ОписаниеВТ = ОписаниеВТНачисления();
	ОписаниеВТ.ИмяВТ = "ВТНачисления";
	ОписаниеВТ.ИмяПоляНачисление = "Начисление";
	СоздатьВТПоказателиРасчетаНачисления(ОписаниеВТ);
	УдалитьВТ.Добавить("ВТПоказателиРасчета");
	
	СоздатьВТТребованияНачислений();
	УдалитьВТ.Добавить("ВТТребованияНачислений");
	ТребованияНачислений = ТребованияНачислений();
	
	СоздатьВТДатыРегистрацииНаборовВидовВремениПоТребованию(ТребованияНачислений);
	УдалитьВТ.Добавить("ВТДатыРегистрацииНаборовВидовВремени");
	
	СоздатьВТПочасоваяОплатаТрудаПоТребованию(ОписаниеВТ, ТребованияНачислений);
	УдалитьВТ.Добавить("ВТПочасоваяОплатаТруда");
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.УчетВремениВЧасах
		|			ТОГДА ИСТИНА
		|		КОГДА ВидыРасчета.УчетВремениВДняхЧасах
		|			ТОГДА ВЫБОР
		|					КОГДА ВидыРасчета.ИспользуетСреднийЗаработокОбщий = ИСТИНА
		|						ТОГДА ИсточникиДанныхВремени.СуммированныйУчетРабочегоВремени
		|					КОГДА ТребованияНачислений.ТребуютсяЗаПраздничныеДниПриОкончательномРасчете
		|						ТОГДА ПочасоваяОплатаТруда.УчетВремениВЧасах
		|					КОГДА ТребованияНачислений.ТребуютсяИзмененияВремяВЧасах
		|						ТОГДА ДатыРегистрацииВремени.ВремяВЧасах
		|					ИНАЧЕ ПочасоваяОплатаТруда.УчетВремениВЧасах
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВремяВЧасах
		|ПОМЕСТИТЬ ВТПризнакВремяВЧасах
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТребованияНачислений КАК ТребованияНачислений
		|		ПО (ТребованияНачислений.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсточникиДанныхУчетаВремениНаДаты КАК ИсточникиДанныхВремени
		|		ПО (ИсточникиДанныхВремени.Сотрудник = Начисления.Сотрудник)
		|			И (ИсточникиДанныхВремени.Дата = Начисления.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыРегистрацииНаборовВидовВремени КАК ДатыРегистрацииВремени
		|		ПО (ДатыРегистрацииВремени.Сотрудник = Начисления.Сотрудник)
		|			И (ДатыРегистрацииВремени.ДатаНачала = Начисления.ДатаНачала)
		|			И (ДатыРегистрацииВремени.ДатаОкончания = Начисления.ДатаОкончания)
		|			И (ДатыРегистрацииВремени.КлючНабораВидовВремени = Начисления.Начисление)
		|			И (ДатыРегистрацииВремени.Дата МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПочасоваяОплатаТруда КАК ПочасоваяОплатаТруда
		|		ПО (ПочасоваяОплатаТруда.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьПризнакВремяВЧасахСтрокиНачисления(Строка, Выборка, ТребованияЗаполнения)
	
	Если Не ТребованияЗаполнения.ПериодДействия Тогда
		Возврат;
	КонецЕсли;
	
	Строка.ВремяВЧасах = Выборка.ВремяВЧасах;
	
КонецПроцедуры

Процедура ЗаполнитьКатегориюСтрокиНачисления(Строка, Выборка, ТребованияЗаполнения)
	
	Если Не ТребованияЗаполнения.КатегорияНачисления Тогда
		Возврат;
	КонецЕсли;
	
	Строка.Категория = Выборка.КатегорияНачисления;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУдержанийДляРасчетаСлужебный(Удержания) 
	
	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняется
	// - принадлежность к коллекции,
	// - рабочее место,
	// - основной сотрудник и его кадровые сведения, если это требуется (есть показатели подразделения, организации).
	
	УдалитьВТ = Новый Массив;
	
	СтрокиПоИдентификатору = Новый Соответствие;
	СоздатьВТУдержания(Удержания, СтрокиПоИдентификатору);
	УдалитьВТ.Добавить("ВТУдержания");
	
	// Определяем необходимость разбиения.
	ОписаниеВТ = ОписаниеВТУдержания();
	ОписаниеВТ.ИмяВТ = "ВТУдержания";
	ОписаниеВТ.ИмяПоляУдержание = "Удержание";
	СоздатьВТПоказателиРасчетаУдержания(ОписаниеВТ);
	
	СоздатьВТУсловияРазбиенияСтрокУдержаний();
	УдалитьВТ.Добавить("ВТУсловияРазбиения");
	УсловияРазбиения = УсловияРазбиенияСтрокУдержаний();
	
	СоздатьВТТребованияУдержаний();
	УдалитьВТ.Добавить("ВТТребованияУдержаний");
	ТребованияУдержаний = ТребованияУдержаний();
	
	ОписаниеВТСПериодами = ОписаниеВТУдержанияКакВТСПериодами(); 
	ЗаполнитьРабочиеМестаВТУдержаний(ОписаниеВТСПериодами, УсловияРазбиения);
	ЗаполнитьОсновногоСотрудникаВТУдержаний(ОписаниеВТСПериодами, ТребованияУдержаний, "ТребуетсяСотрудникДляЗаполненияЗначенийПоказателей");
	ЗаполнитьКадровыеСведенияВТСПериодами(ОписаниеВТСПериодами, Ложь);
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	Удержания.Сотрудник,
		|	Удержания.Организация,
		|	Удержания.Подразделение,
		|	ВидыРасчета.КатегорияУдержания КАК Категория
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Удержания.Удержание)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Удержания.ИдентификаторСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		ЗаполнитьЗначенияСвойств(Строка, Выборка);
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетЗарплаты

Процедура РассчитатьЗарплатуСлужебный()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетЗарплаты";
	Замер = НачатьЗамерВремени();
	
	РасчетОдногоМесяца = МесяцыРасчета.Количество() = 1;
	МесяцНачисления = МесяцыРасчета[0];
	
	НаборыЗаписейНакопляемые = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, Документы.НачислениеЗарплаты.ПолучитьСсылку());
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременныйРегистратор);
	
	РассчитатьНачисления();
	
	Для Каждого МесяцРасчета Из МесяцыРасчета Цикл
		
		МесяцНачисления = МесяцРасчета;
		УдалитьВТ = Новый Массив;
		ПоследнийМесяцРасчета = МесяцРасчета = МесяцыРасчета[МесяцыРасчета.ВГраница()];
		
		Если РасчетОдногоМесяца Тогда 
			ЗарплатаМесяца = Зарплата;
		Иначе
			НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременныйРегистратор);
			НачатьРасчетЗарплатыЗаМесяц(ПоследнийМесяцРасчета);
		КонецЕсли;
		
		РассчитатьДоговорыПодряда();
		
		ВыполнитьОтражениеНачисленийВБухучете();
		ВыполнитьОтражениеНачисленийПоДоговорамВБухучете();
		
		СтрокиУдержаний = Новый Соответствие;
		НачатьРасчетУдержаний(УдалитьВТ, СтрокиУдержаний);
		
		// Формируем доходы для страховых взносов, которые также нужны для расчета показателя удержаний.
		ТребованияУдержаний = ТребованияУдержаний();
		СформироватьДоходыСтраховыхВзносов(ТребованияУдержаний);
		
		// Рассчитать все удержания, кроме требующих рассчитанности НДФЛ.
		КатегорииУдержанийУчитывающихНДФЛ = ПланыВидовРасчета.Удержания.КатегорииУдержанийУчитывающихНДФЛ();
		
		Если НастройкиРасчета.РассчитыватьУдержания
			И СтрокиУдержаний.Количество() > 0 Тогда
			
			ИнициализироватьРасчетБазыУдержаний();			
		КонецЕсли;
		
		ЗаполнитьЗадолженностьПоУдержаниям(СтрокиУдержаний);
		РассчитатьУдержанияОчередности(СтрокиУдержаний, ТребованияУдержаний, ОтборИсключаяКатегории(КатегорииУдержанийУчитывающихНДФЛ));
		
		РассчитатьНДФЛ();
		
		Если ПоследнийМесяцРасчета Тогда
			РассчитатьКорректировкиВыплаты();
		КонецЕсли;
		
		РассчитатьПогашениеЗаймов();
		
		// Рассчитать удержания, учитывающие НДФЛ.
		РассчитатьУдержанияОчередности(СтрокиУдержаний, ТребованияУдержаний, ОтборВключаяКатегории(КатегорииУдержанийУчитывающихНДФЛ));
		ОграничитьРазмерУдержанийДоПредела(УдалитьВТ, СтрокиУдержаний);
		
		ЗавершитьРасчетБазыУдержаний();
		ЗавершитьРасчетУдержаний(УдалитьВТ, СтрокиУдержаний);
		
		ВыполнитьОтражениеНДФЛИКорректировокВыплатыВБухучете();
		ВыполнитьОтражениеУдержанийИЗаймовВБухучете();
		
		РассчитатьВзносы();
		Если Не РасчетОдногоМесяца Тогда
			ЗавершитьРасчетЗарплатыЗаМесяц();
		КонецЕсли;
		УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетНачислений);
		УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
		УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетВсехНачислений);
		УничтожитьВТ(УдалитьВТ, Истина);
	КонецЦикла;
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетНачислений

Процедура РассчитатьНачисления()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетНачислений";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьНачисления Тогда
		Возврат;
	КонецЕсли;
	
	Начисления = Зарплата.Начисления;
	НачатьПересчетНачислений(Начисления);	
	
	Если Начисления.Количество() = 0 Тогда
		ЗавершитьПересчетНачислений();
		ЗаполнитьИдентификаторСтроки(Зарплата.Начисления);
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СтрокиПоИдентификатору = Новый Соответствие;
	СоздатьВТНачисления(Начисления, СтрокиПоИдентификатору);
	УдалитьВТ.Добавить("ВТНачисления");
	
	ОписаниеВТНачисления = ОписаниеВТНачисления();
	ОписаниеВТНачисления.ИмяПоляНачисление = "Начисление";
	СоздатьВТПоказателиРасчетаНачисления(ОписаниеВТНачисления);
	УдалитьВТ.Добавить("ВТПоказателиРасчета");
	
	СоздатьВТТребованияНачислений();
	УдалитьВТ.Добавить("ВТТребованияНачислений");
	ТребованияНачислений = ТребованияНачислений();
	
	РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, Начисления);
	ЗаполнитьСтрокиНабораПоИдентификатору(НаборыЗаписей.Начисления, СтрокиПоИдентификатору);
	СоздатьВТПоРегиструРасчета(НаборыЗаписей.Начисления);
	
	РассчитатьЗначенияПоказателейНачислений(СтрокиПоИдентификатору, ТребованияНачислений);
	
	ЗаполнитьТерриторииУсловияТруда(СтрокиПоИдентификатору);
	РассчитатьНачисленияОчередности(СтрокиПоИдентификатору);
	
	ВычеркнутьПолностьюВытесненныеНачисления(СтрокиПоИдентификатору, НаборыЗаписей.Начисления);
	ВычеркнутьСтрокиПоПоказателям(Начисления, СтрокиПоИдентификатору, НаборыЗаписей.Начисления);
	
	ПослеРасчетаНачислений(СтрокиПоИдентификатору, НаборыЗаписей.Начисления);
	
	ЗавершитьПересчетНачислений();
	
	УничтожитьВТ(УдалитьВТ);
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
		
КонецПроцедуры

Процедура ЗаполнитьСтрокиНабораПоИдентификатору(НаборЗаписей, СтрокиПоИдентификатору)
	
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		Строка = СтрокиПоИдентификатору[СтрокаНабора.ИдентификаторСтроки];
		Строка.ЗаписьРасчета = СтрокаНабора;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПослеРасчетаНачислений(СтрокиПоИдентификатору, НаборЗаписей)
	УчетПособийСоциальногоСтрахованияРасширенный.ПослеРасчетаНачислений(МенеджерВременныхТаблиц, Организация, МесяцНачисления, СтрокиПоИдентификатору, НаборЗаписей);
КонецПроцедуры

Функция ТребуетсяНастоящийФПД()
	
	// Настоящий ФПД не требуется, если в этом периоде по сотруднику пока еще нет ни одной записи.
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК НачисленияВТ
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрРасчета.Начисления КАК НачисленияРегистр
		|			ГДЕ
		|				НачисленияРегистр.Сотрудник = НачисленияВТ.Сотрудник
		|				И НачисленияРегистр.ПериодДействия = НачисленияВТ.ПериодДействия
		|				И НачисленияРегистр.Регистратор <> &ИсключаемыйРегистратор)";
		
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Но, в самом наборе могут быть взаимно вытесняющие записи, поэтому грубо проверим их состав.
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК ВытесняющиеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК ВытесняющиеВидыРасчета
		|		ПО (ВытесняющиеВидыРасчета.ВидРасчета = ВытесняющиеНачисления.ВидРасчета)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистрРасчета_Начисления КАК Начисления
		|		ПО (Начисления.ВидРасчета = ВытесняющиеВидыРасчета.Ссылка)
		|			И (Начисления.Сотрудник = ВытесняющиеНачисления.Сотрудник)
		|			И (Начисления.ПериодДействия = ВытесняющиеНачисления.ПериодДействия)";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура СоздатьВТПоддельныйФПД()
	
	УничтожитьВТ("ВТРегистрРасчета_Начисления_ФактическийПериодДействия", Истина);
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК РассчитываемыйНабор,
		|	Начисления.*
		|ПОМЕСТИТЬ ВТРегистрРасчета_Начисления_ФактическийПериодДействия
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления";
	Запрос.Выполнить();
		
КонецПроцедуры

Процедура СоздатьВТПоРегиструРасчета(НаборЗаписей)
	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборЗаписей, Истина);
	Если Не ТребуетсяНастоящийФПД() Тогда
		СоздатьВТПоддельныйФПД();
		Возврат;
	КонецЕсли;
	
	ОтменятьТранзакцию = Ложь;
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьТранзакцию = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РегистрыРасчета.Начисления.ЕстьДвиженияПоРегистратору(ИсключаемыйРегистратор) И ОтменятьТранзакцию Тогда
		НаборИсключаемогоРегистратора = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
		НаборИсключаемогоРегистратора.Отбор.Регистратор.Установить(ИсключаемыйРегистратор);
		НаборИсключаемогоРегистратора.ДополнительныеСвойства.Вставить("ЭтоВременныйНаборЗаписей", Истина);
		НаборИсключаемогоРегистратора.Записать();
	КонецЕсли;	
	
	НаборЗаписей.Записать();
	
	РегистраторНабора = НаборЗаписей.Отбор.Регистратор.Значение;
	
	ТаблицаФПД = ФактическийПериодДействияТаблицейЗначенийПоРегистратору(РегистраторНабора);
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	Иначе 
		НаборОчистки = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременныйРегистратор);
		НаборОчистки.Записать();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ТаблицаФПД, "ВТРегистрРасчета_Начисления_ФактическийПериодДействия", Истина);
	
КонецПроцедуры

Функция ФактическийПериодДействияТаблицейЗначенийПоРегистратору(РегистраторНабора)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегистраторНабора", РегистраторНабора);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ВидРасчета
		|ПОМЕСТИТЬ ВТВидыРасчета
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Регистратор = &РегистраторНабора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Вытесняющие.Ссылка КАК ВидРасчета
		|ПОМЕСТИТЬ ВТВытесняющиеВидыРасчета
		|ИЗ
		|	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК Вытесняющие
		|ГДЕ
		|	Вытесняющие.ВидРасчета В
		|			(ВЫБРАТЬ
		|				ВТВидыРасчета.ВидРасчета
		|			ИЗ
		|				ВТВидыРасчета)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Вытесняющие.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.ПериодДействия
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Регистратор = &РегистраторНабора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки
		|ПОМЕСТИТЬ ВТОтборНачислений
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ПО (СотрудникиПериоды.Сотрудник = Начисления.Сотрудник)
		|			И (СотрудникиПериоды.ПериодДействия = Начисления.ПериодДействия)
		|			И (Начисления.Регистратор = &РегистраторНабора
		|				ИЛИ Начисления.ВидРасчета В
		|					(ВЫБРАТЬ
		|						Вытесняющие.ВидРасчета
		|					ИЗ
		|						ВТВытесняющиеВидыРасчета КАК Вытесняющие))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ФПД.Регистратор = &РегистраторНабора
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РассчитываемыйНабор,
		|	ФПД.*
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			(Регистратор, НомерСтроки) В
		|				(ВЫБРАТЬ
		|					Отбор.Регистратор,
		|					Отбор.НомерСтроки
		|				ИЗ
		|					ВТОтборНачислений КАК Отбор)) КАК ФПД";
		
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура РассчитатьЗначенияПоказателейНачислений(СтрокиПоИдентификатору, ТребованияНачислений)
	
	РассчитатьЗначенияПоказателейРабочегоВремени(СтрокиПоИдентификатору, ТребованияНачислений);
	РассчитатьЗначенияПоказателейКалендарныеДниНачислений(СтрокиПоИдентификатору, ТребованияНачислений);
	РассчитатьЗначенияПоказателейНормыВремени(СтрокиПоИдентификатору, ТребованияНачислений);
	РассчитатьЗначенияПоказателейСверхурочно(СтрокиПоИдентификатору, ТребованияНачислений);
	РассчитатьЗначенияПоказателейКалендарныеДниБезУчетаПраздников(СтрокиПоИдентификатору, ТребованияНачислений);
	РассчитатьЗначенияПоказателейОтработаноВсего(СтрокиПоИдентификатору, ТребованияНачислений);
	РассчитатьЗначенияПоказателейКоличествоДнейОтпуска(СтрокиПоИдентификатору, ТребованияНачислений);
	РассчитатьЗначенияПоказателейСдельныйЗаработок(СтрокиПоИдентификатору, ТребованияНачислений);
	РассчитатьЗначенияПоказателейКоэффициентИндексацииСреднегоЗаработка(СтрокиПоИдентификатору, ТребованияНачислений);
	РассчитатьЗначенияПоказателяОтработаноСмен(СтрокиПоИдентификатору, ТребованияНачислений);
	
	ЗаполнитьПоказателиНачисленийПоОплаченномуВремени(СтрокиПоИдентификатору);
	ЗаполнитьЗначенияИзвестныхПоказателей(СтрокиПоИдентификатору, "ВТИзвестныеПоказателиНачислений");
	
КонецПроцедуры

Процедура РассчитатьНачисленияОчередности(СтрокиПоИдентификатору)
	ИнициализироватьРасчетБазыНачислений();
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ВидРасчета.ОчередностьРасчета КАК ОчередностьРасчета,
		|	МАКСИМУМ(Начисления.ВидРасчета.ТребуетсяРасчетБазы) КАК ТребуетсяРасчетБазы
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ВидРасчета.ОчередностьРасчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередностьРасчета";
	Выборка = Запрос.Выполнить().Выбрать();
	РасчитанныеНачисленияПредыдущихИтераций = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТребуетсяРасчетБазы Тогда
			РассчитатьЗначениеПоказателяРасчетнаяБазаНачислений(Выборка.ОчередностьРасчета, СтрокиПоИдентификатору, РасчитанныеНачисленияПредыдущихИтераций);
		КонецЕсли;	
		РассчитатьНачисленияПоФормуле(Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		РассчитатьНачисленияПредопределеннымСпособом(Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		СкорректироватьИскажениеРезультата(Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		
		РасчитанныеНачисленияПредыдущихИтераций = НаборыЗаписей.Начисления.Выгрузить();
		РасчитанныеНачисленияПредыдущихИтераций.ЗаполнитьЗначения(НаборыЗаписей.Начисления.Отбор.Регистратор.Значение, "Регистратор");
	КонецЦикла;
	
	ЗавершитьРасчетБазыНачислений();
	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.Начисления, Истина);
КонецПроцедуры

Процедура СкорректироватьИскажениеРезультата(ОчередностьРасчета, СтрокиПоИдентификатору)
	
	ИмяЗамера = "НачислениеЗарплаты.КорректировкаИскаженияРезультата";
	Замер = НачатьЗамерВремени();
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.ДокументОснование,
		|	Начисления.ПериодДействия,
		|	Начисления.ОбщийГрафик
		|ПОМЕСТИТЬ ВТИсточникиИскаженияРезультата
		|ИЗ
		|	(ВЫБРАТЬ
		|		Начисления.Сотрудник КАК Сотрудник,
		|		Начисления.ВидРасчета КАК ВидРасчета,
		|		Начисления.ДокументОснование КАК ДокументОснование,
		|		Начисления.ПериодДействия КАК ПериодДействия,
		|		Начисления.ОбщийГрафик КАК ОбщийГрафик,
		|		КОЛИЧЕСТВО(Начисления.ИдентификаторСтроки) КАК КоличествоСтрок,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА Начисления.ПериодДействияНачало = НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, МЕСЯЦ)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ) КАК ЕстьНачалоМесяца,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА Начисления.ПериодДействияКонец = КОНЕЦПЕРИОДА(Начисления.ПериодДействияКонец, МЕСЯЦ)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ) КАК ЕстьКонецМесяца
		|	ИЗ
		|		ВТРегистрРасчета_Начисления КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|			ПО (ВидыРасчета.Ссылка = Начисления.ВидРасчета)
		|				И (ВидыРасчета.ИспользуетФормулу = ИСТИНА)
		|				И (ВидыРасчета.ТребуетсяРасчетВремени = ИСТИНА)
		|				И (ВидыРасчета.ТребуетсяРасчетНормыВремени = ИСТИНА)
		|				И (ВидыРасчета.ОчередностьРасчета = &ОчередностьРасчета)
		|				И (Начисления.ФиксРасчет = ЛОЖЬ)
		|				И (Начисления.ФиксСторно = ЛОЖЬ)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Начисления.Сотрудник,
		|		Начисления.ВидРасчета,
		|		Начисления.ДокументОснование,
		|		Начисления.ПериодДействия,
		|		Начисления.ОбщийГрафик
		|	
		|	ИМЕЮЩИЕ
		|		КОЛИЧЕСТВО(Начисления.ИдентификаторСтроки) > 1) КАК Начисления
		|ГДЕ
		|	Начисления.ЕстьНачалоМесяца = ИСТИНА
		|	И Начисления.ЕстьКонецМесяца = ИСТИНА";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТИсточникиИскаженияРезультата");
	
	Если Не ВТСодержитСтроки("ВТИсточникиИскаженияРезультата") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	Начисления.ДокументОснование КАК ДокументОснование,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ОбщийГрафик КАК ОбщийГрафик,
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.ВремяВЧасах,
		|	ПоказателиРасчета.Показатель,
		|	ПоказателиРасчета.Показатель.Идентификатор КАК ИдентификаторПоказателя,
		|	ПоказателиРасчета.Показатель.ОтображатьВДокументахНачисления КАК ОтображаемыйПоказатель,
		|	ВидыРасчета.ФормулаРасчетаДляВыполнения КАК ФормулаДляВыполнения,
		|	ВидыРасчета.ФормулаРасчета КАК ФормулаДляПредставления
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсточникиИскаженияРезультата КАК ИсточникиИскажения
		|		ПО (ИсточникиИскажения.Сотрудник = Начисления.Сотрудник)
		|			И (ИсточникиИскажения.ВидРасчета = Начисления.ВидРасчета)
		|			И (ИсточникиИскажения.ДокументОснование = Начисления.ДокументОснование)
		|			И (ИсточникиИскажения.ПериодДействия = Начисления.ПериодДействия)
		|			И (ИсточникиИскажения.ОбщийГрафик = Начисления.ОбщийГрафик)
		|			И (Начисления.ФиксРасчет = ЛОЖЬ)
		|			И (Начисления.ФиксСторно = ЛОЖЬ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.ВидРасчета)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодДействия,
		|	Сотрудник,
		|	ВидРасчета,
		|	ДокументОснование,
		|	ОбщийГрафик,
		|	ИдентификаторСтроки";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ПериодДействия") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("ОбщийГрафик") Цикл
						СкорректироватьИскажениеРезультатаСтрокВыборки(Выборка, СтрокиПоИдентификатору);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура СкорректироватьИскажениеРезультатаСтрокВыборки(Выборка, СтрокиПоИдентификатору)
	
	СуммаРезультат = 0;
	СуммаОплаченоДней = 0;
	СуммаОплаченоЧасов = 0;
	ЗначенияПредыдущейСтроки = Неопределено;
	
	КорректироватьИскажение = Истина;
	МассивСтрок = Новый Массив;
	МассивРезультатов = Новый Массив;
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		МассивСтрок.Добавить(Строка);
		МассивРезультатов.Добавить(Строка.Результат);
		СуммаРезультат = СуммаРезультат + Строка.Результат;
		СуммаОплаченоДней = СуммаОплаченоДней + Строка.ОплаченоДней;
		СуммаОплаченоЧасов = СуммаОплаченоЧасов + Строка.ОплаченоЧасов;
		ЗначенияПоказателей = Новый Структура;
		ЗначенияОтображаемые = Новый Структура;
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначениеПоказателяПоИдентификатору(ЗначенияПоказателей, Строка.Показатели, Выборка.Показатель, Выборка.ИдентификаторПоказателя);
			Если Выборка.ОтображаемыйПоказатель Тогда
				ЗаполнитьЗначениеПоказателяПоИдентификатору(ЗначенияОтображаемые, Строка.Показатели, Выборка.Показатель, Выборка.ИдентификаторПоказателя);
			КонецЕсли;
		КонецЦикла;
		Если ЗначенияПредыдущейСтроки <> Неопределено Тогда
			// Сравниваем набор отображаемых показателей.
			Если Не ОбщегоНазначения.КоллекцииИдентичны(ЗначенияОтображаемые, ЗначенияПредыдущейСтроки) Тогда
				КорректироватьИскажение = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		ЗначенияПредыдущейСтроки = ЗначенияОтображаемые;
	КонецЦикла;
	
	Если Не КорректироватьИскажение Тогда
		// Различаются показатели.
		Возврат;
	КонецЕсли;
	
	Если СуммаОплаченоДней <> Строка.НормаДней Или СуммаОплаченоЧасов <> Строка.НормаЧасов Тогда
		// Не весь месяц отработан.
		Возврат;
	КонецЕсли;
	
	// Заменяем показатели времени на суммы.
	ЗначенияПоказателей.Вставить("ВремяВДнях", СуммаОплаченоДней);
	ЗначенияПоказателей.Вставить("ВремяВЧасах", СуммаОплаченоЧасов);
	ЗначенияПоказателей.Вставить("ВремяВДняхЧасах", ?(Выборка.ВремяВЧасах = Истина, СуммаОплаченоЧасов, СуммаОплаченоДней));
	ЗначенияПоказателей.Вставить("ОтработаноДней", СуммаОплаченоДней);
	ЗначенияПоказателей.Вставить("ОтработаноЧасов", СуммаОплаченоЧасов);
	
	// Рассчитываем результат так, как если бы была только одна строка за весь месяц.
	Результат = РезультатПоФормуле(ЗначенияПоказателей, Выборка.ФормулаДляВыполнения, Выборка.ФормулаДляПредставления, Строка);
	Если Результат = СуммаРезультат Тогда
		// Сумма не требует корректировки.
		Возврат;
	КонецЕсли;
	
	// Распределяем результат, рассчитанный как бы за весь месяц среди строк.
	Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(Результат, МассивРезультатов);
	Если Результаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = 0;
	Пока Индекс < Результаты.Количество() Цикл
		Строка = МассивСтрок[Индекс];
		Строка.Результат = Результаты[Индекс];
		Строка.ЗаписьРасчета.Результат = Строка.Результат;
		РаспределитьСтрокуПоТерриториямУсловиямТруда(Строка);
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВычеркнутьПолностьюВытесненныеНачисления(СтрокиПоИдентификатору, НаборЗаписей)
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК ФПД
		|		ПО (ФПД.Регистратор = Начисления.Регистратор)
		|			И (ФПД.НомерСтроки = Начисления.НомерСтроки)
		|ГДЕ
		|	Начисления.ФиксСторно = ЛОЖЬ
		|	И ФПД.НомерСтроки ЕСТЬ NULL ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		// 1. Удаляем запись из набора.
		НаборЗаписей.Удалить(Строка.ЗаписьРасчета);
		// 2. Удаляем строку из мапа пересчета.
		НастройкиПересчета.СоответствиеСтрокНачислений.Удалить(Строка);
		// 3. Удаляем строку из таблицы.
		ТаблицаНачислений = Строка.Владелец();
		ТаблицаНачислений.Удалить(Строка);
		// 4. Удаляем ключ из мапа.
		СтрокиПоИдентификатору.Удалить(Выборка.ИдентификаторСтроки);
	КонецЦикла;
	
	// Пересоздаем ВТ по набору записей.
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборЗаписей, Истина);
	
КонецПроцедуры

#Область РасчетнаяБазаНачислений

Процедура РассчитатьЗначениеПоказателяРасчетнаяБазаНачислений(ОчередностьРасчета, СтрокиПоИдентификатору, РасчитанныеНачисленияПредыдущихИтераций = Неопределено)
	УдалитьВТ = Новый Массив;
	
	РасчетБазыНачислений.СоздатьВТРасчетнаяБазаНачислений(РасчитанныеНачисленияПредыдущихИтераций, ОчередностьРасчета);
	
	РасчетнаяБаза = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("РасчетнаяБаза", РасчетнаяБаза);
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПоказателиРасчета.Показатель КАК Показатель,
	|	ВЫРАЗИТЬ(СУММА(РасчетнаяБаза.РезультатБаза) КАК ЧИСЛО(15, 2)) КАК Значение
	|ИЗ
	|	ВТРегистрРасчета_Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК СвойстваНачислений
	|		ПО Начисления.ВидРасчета = СвойстваНачислений.Ссылка
	|			И (СвойстваНачислений.ОчередностьРасчета = &ОчередностьРасчета)
	|			И (Начисления.ФиксЗаполнение = ЛОЖЬ)
	|			И (Начисления.ФиксСторно = ЛОЖЬ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
	|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета)
	|			И (ПоказателиРасчета.Показатель = &РасчетнаяБаза)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасчетнаяБазаНачислений КАК РасчетнаяБаза
	|		ПО (РасчетнаяБаза.Регистратор = Начисления.Регистратор)
	|			И (РасчетнаяБаза.НомерСтроки = Начисления.НомерСтроки)
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.ИдентификаторСтроки,
	|	ПоказателиРасчета.Показатель";
		
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Истина);
	
	УдалитьВТ.Добавить("ВТРасчетнаяБазаНачислений");
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетПоФормуле

Процедура РассчитатьНачисленияПоФормуле(ОчередностьРасчета, СтрокиПоИдентификатору)
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ВидыРасчета.Рассчитывается,
		|	ВидыРасчета.ФормулаРасчетаДляВыполнения КАК ФормулаДляВыполнения,
		|	ВидыРасчета.ФормулаРасчета КАК ФормулаДляПредставления,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ВТПоказателиРасчета КАК ПоказателиТерриторийУсловийТруда
		|				ГДЕ
		|					ПоказателиТерриторийУсловийТруда.ВидРасчета = Начисления.ВидРасчета
		|					И ПоказателиТерриторийУсловийТруда.ПоказательТерриторийУсловийТруда)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьПоказателиТерриторийУсловийТруда,
		|	ПоказателиРасчета.Показатель,
		|	СправочникПоказатели.Идентификатор КАК ИдентификаторПоказателя,
		|	ПоказателиРасчета.ПоказательТерриторийУсловийТруда
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.ВидРасчета)
		|			И (ВидыРасчета.ОчередностьРасчета = &ОчередностьРасчета)
		|			И (ВидыРасчета.ИспользуетФормулу = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК СправочникПоказатели
		|			ПО (СправочникПоказатели.Ссылка = ПоказателиРасчета.Показатель)
		|		ПО (ПоказателиРасчета.ВидРасчета = Начисления.ВидРасчета)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.ИдентификаторСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Если РасчетНачисленияЗафиксирован(Строка.ЗаписьРасчета) Тогда
			Строка.Результат = Строка.ЗаписьРасчета.Результат;
			РаспределитьСтрокуПоТерриториямУсловиямТруда(Строка);
		Иначе
			Если Не Выборка.Рассчитывается Тогда
				РаспределитьСтрокуПоТерриториямУсловиямТруда(Строка);
			Иначе
				ИсходныеДанные = Новый Структура;
				Пока Выборка.Следующий() Цикл
					ЗаполнитьЗначениеПоказателяПоИдентификатору(ИсходныеДанные, Строка.Показатели, Выборка.Показатель, Выборка.ИдентификаторПоказателя)
				КонецЦикла;
				РассчитатьРезультатНачисленияПоФормуле(Строка, ИсходныеДанные, Выборка.ФормулаДляВыполнения, Выборка.ФормулаДляПредставления, Выборка.ЕстьПоказателиТерриторийУсловийТруда);
			КонецЕсли;
			Если Строка.Сторно Тогда
				Строка.Результат = - Строка.Результат;
			КонецЕсли;
			Строка.ЗаписьРасчета.Результат = Строка.Результат;
		КонецЕсли;
		
		Если Строка.Сторно 
			И Не Строка.ФиксСторно Тогда
			Строка.ОплаченоДней = - Строка.ОплаченоДней;
			Строка.ОплаченоЧасов = - Строка.ОплаченоЧасов;
			Строка.ОтработаноДней = - Строка.ОтработаноДней;
			Строка.ОтработаноЧасов = - Строка.ОтработаноЧасов;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеПоказателяПоИдентификатору(ЗначенияПоИдентификатору, Показатели, Показатель, ИдентификаторПоказателя)
	
	Если Не ЗначениеЗаполнено(Показатель) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПоказателя = ЗначениеПоказателяПоСсылке(Показатели, Показатель);
	Если ЗначениеПоказателя = Неопределено Тогда
		ЗначениеПоказателя = 0;
	КонецЕсли;
	ЗначенияПоИдентификатору.Вставить(ИдентификаторПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры

Процедура РассчитатьРезультатНачисленияПоФормуле(Строка, ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, ЕстьПоказателиТерриторийУсловийТруда = Ложь)
	
	Если Не НастройкиУчета.ИспользоватьТерриторииУсловияТруда Тогда
		Строка.Результат = РезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, Строка);
		Возврат;
	КонецЕсли;
	
	Если Строка.ТерриторииУсловияТруда.Количество() = 0 Тогда
		Строка.Результат = РезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, Строка);
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьПоказателиТерриторийУсловийТруда Тогда
		Строка.Результат = РезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, Строка);
		РаспределитьСтрокуПоТерриториямУсловиямТруда(Строка);
		Возврат;
	КонецЕсли;
	
	// Нормируем доли распределения по единице.
	ДолиРаспределения = ОбщегоНазначения.ВыгрузитьКолонку(Строка.ТерриторииУсловияТруда, "ДоляРаспределения");
	ДолиРаспределения = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(1, ДолиРаспределения, 9);
	Если ДолиРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если показатели есть, то результат является суммой отдельно рассчитанных строк распределения.
	// Последовательно повторяем расчет для каждой строки распределения, подставляя значения определяемых показателей.
	// Результат расчета будет суммой результата распределения.
	Строка.Результат = 0;
	Индекс = 0;
	Для Каждого СтрокаРаспределения Из Строка.ТерриторииУсловияТруда Цикл
		ИсходныеДанныеТерритории = Новый Структура;
		// Заполняем показатели строки начисления.
		Для Каждого КлючИЗначение Из ИсходныеДанные Цикл
			ИсходныеДанныеТерритории.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		// Если в конкретной строке распределения определено значение показателя по территории или условиям труда, 
		// то подставляем его в исходные данные и выполняем расчет.
		Для Каждого СтрокаПоказателя Из СтрокаРаспределения.Показатели Цикл
			ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(СтрокаПоказателя.Показатель);
			ИсходныеДанныеТерритории.Вставить(ИдентификаторПоказателя, СтрокаПоказателя.Значение);
		КонецЦикла;
		СтрокаРаспределения.Результат = РезультатПоФормуле(ИсходныеДанныеТерритории, ФормулаДляВыполнения, ФормулаДляПредставления, Строка);
		СтрокаРаспределения.Результат = СтрокаРаспределения.Результат * ДолиРаспределения[Индекс];
		Строка.Результат = Строка.Результат + СтрокаРаспределения.Результат;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьУдержанияПоФормуле(ОчередностьРасчета, СтрокиПоИдентификатору)
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	ВидыРасчета.ФормулаРасчетаДляВыполнения КАК ФормулаДляВыполнения,
		|	ВидыРасчета.ФормулаРасчета КАК ФормулаДляПредставления,
		|	ПоказателиРасчета.Показатель,
		|	СправочникПоказатели.Идентификатор КАК ИдентификаторПоказателя
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Удержания.ВидРасчета)
		|			И (ВидыРасчета.ОчередностьРасчета = &ОчередностьРасчета)
		|			И (ВидыРасчета.ИспользуетФормулу = ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРасчета КАК ПоказателиРасчета
		|		ПО (ПоказателиРасчета.ВидРасчета = Удержания.ВидРасчета)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК СправочникПоказатели
		|		ПО (СправочникПоказатели.Ссылка = ПоказателиРасчета.Показатель)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Удержания.ИдентификаторСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПогашениеЗадолженности = Обработки.МенеджерРасчетаЗарплаты.ОснованияПогашенияЗадолженности(МенеджерВременныхТаблиц);
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Если РасчетУдержанияЗафиксирован(Строка.ЗаписьРасчета) Тогда
			Строка.Результат = Строка.ЗаписьРасчета.Результат;
			Продолжить;
		КонецЕсли;
		ИсходныеДанные = Новый Структура;
		Пока Выборка.Следующий() Цикл
			ЗначениеПоказателя = ЗначениеПоказателяПоСсылке(Строка.Показатели, Выборка.Показатель);
			Если ЗначениеПоказателя = Неопределено Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;
			ИсходныеДанные.Вставить(Выборка.ИдентификаторПоказателя, ЗначениеПоказателя);
		КонецЦикла;
		РассчитатьРезультатУдержанияПоФормуле(Строка, ИсходныеДанные, Выборка.ФормулаДляВыполнения, Выборка.ФормулаДляПредставления);
		// Если удержание добавлено только для погашения задолженности - обнуляем результат
		ТолькоЗадолженность = ПогашениеЗадолженности.Найти(Строка.ДокументОснование) <> Неопределено;
		Если ТолькоЗадолженность Тогда
			Строка.Результат = 0;
		КонецЕсли;
		Строка.Результат = Строка.Результат + Строка.Задолженность;
		Строка.ЗаписьРасчета.Результат = Строка.Результат;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьРезультатУдержанияПоФормуле(Строка, ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления)
	Строка.Результат = РезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, Строка, "Удержание");
КонецПроцедуры

Процедура РассчитатьУдержанияФиксированнойСуммой(ОчередностьРасчета, СтрокиПоИдентификатору)
	
	Если Не ПолучитьФункциональнуюОпцию("ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлаты") Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Удержания.ВидРасчета)
		|			И (ВидыРасчета.ОчередностьРасчета = &ОчередностьРасчета)
		|			И (ВидыРасчета.Рассчитывается = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Удержания.ИдентификаторСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Если РасчетУдержанияЗафиксирован(Строка.ЗаписьРасчета) Тогда
			Продолжить;
		КонецЕсли;
		Строка.Результат = Строка.Результат + Строка.Задолженность;
		Строка.ЗаписьРасчета.Результат = Строка.Результат;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеПоказателяПоСсылке(Показатели, Показатель)
	
	Возврат РасчетЗарплатыРасширенный.ЗначениеПоказателяПоСсылке(Показатели, Показатель);

КонецФункции

Функция ЗначениеПоказателяПоИдентификатору(Показатели, Идентификатор)
	
	Показатель = ЗарплатаКадрыРасширенный.ПоказательПоИдентификатору(Идентификатор);
	Возврат РасчетЗарплатыРасширенный.ЗначениеПоказателяПоСсылке(Показатели, Показатель);
	
КонецФункции

Функция ЕслиНеопределено(ИсходноеЗначение, ЗначениеПоУмолчанию)
	
	Если ИсходноеЗначение = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат ИсходноеЗначение;
	
КонецФункции

Функция РезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, СтрокаРасчета, ИмяПоляВидРасчета = "Начисление")
	
	ФормулаДляВычисления = СтрЗаменить(ФормулаДляВыполнения, "ИсходныеДанные.", "Параметры.");
	
	Попытка 
		Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(ФормулаДляВычисления, ИсходныеДанные);
	Исключение
		Если Не ВызыватьИсключение Тогда
			Возврат 0;
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При расчете начисления «%1» за %5 для сотрудника %2 возникла ошибка: %4
					  |Формула, используемая при расчете: %3'"),
				СтрокаРасчета[ИмяПоляВидРасчета], 
				СтрокаРасчета.ФизическоеЛицо, 
				ФормулаДляПредставления, 
				ИнформацияОбОшибке().Описание, 
				Формат(СтрокаРасчета.ДатаНачала, "ДФ='ММММ гггг'"));
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область РасчетНачисленийПредопределеннымСпособом

Процедура РассчитатьНачисленияПредопределеннымСпособом(ОчередностьРасчета, СтрокиПоИдентификатору)
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ВидыРасчета.СпособРасчета КАК СпособРасчета
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.ВидРасчета)
		|			И (ВидыРасчета.ОчередностьРасчета = &ОчередностьРасчета)
		|			И (ВидыРасчета.ИспользуетФормулу = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СпособРасчета";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("СпособРасчета") Цикл
		СтрокиПоСпособуРасчета = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
			Если РасчетНачисленияЗафиксирован(Строка.ЗаписьРасчета) Тогда
				Строка.Результат = Строка.ЗаписьРасчета.Результат;
				РаспределитьСтрокуПоТерриториямУсловиямТруда(Строка);
				Продолжить;
			КонецЕсли;
			СтрокиПоСпособуРасчета.Добавить(Строка);
		КонецЦикла;
		РассчитатьСтрокиНачисленийПредопределеннымСпособом(Выборка.СпособРасчета, СтрокиПоСпособуРасчета);
		РаспределитьСтрокиПоТерриториямУсловиямТруда(СтрокиПоСпособуРасчета);
		// Обновляем результат в наборе записей.
		Для Каждого Строка Из СтрокиПоСпособуРасчета Цикл
			Если Строка.Сторно Тогда
				Строка.Результат = - Строка.Результат;
			КонецЕсли;
			Строка.ЗаписьРасчета.Результат = Строка.Результат;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура РассчитатьСтрокиНачисленийПредопределеннымСпособом(СпособРасчета, СтрокиРасчета)
	
	РассчитатьДоплатуДоСреднегоЗаработка(СпособРасчета, СтрокиРасчета);
	РассчитатьДоплатуДоСреднегоЗаработкаФСС(СпособРасчета, СтрокиРасчета);
	РассчитатьДоплатуДоСохраняемогоДенежногоСодержанияЗаДниБолезни(СпособРасчета, СтрокиРасчета);
	
	УчетПособийСоциальногоСтрахованияРасширенный.РассчитатьПособие(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц, ДополнительныеСвойства);
	
	ПростоиСотрудников.РассчитатьОплатуПростоя(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриРасчетеЗарплатыПредопределеннымСпособом(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц, ИсключаемыйРегистратор, НаборыЗаписей);
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйПереопределяемый.РассчитатьСтрокуПредопределеннымСпособом(СпособРасчета, СтрокиРасчета);
	
КонецПроцедуры

#Область ДоплатаДоСреднегоЗаработка

// Метод выполняет расчет записей с предопределенным способом расчета ДоплатаДоСреднегоЗаработка.
//
Процедура РассчитатьДоплатуДоСреднегоЗаработка(СпособРасчета, СтрокиРасчета)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиРасчета Цикл
		СреднийЗаработокОбщий = ЕслиНеопределено(ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "СреднийЗаработокОбщий"), 0);
		ВремяВДняхЧасах = ЕслиНеопределено(ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "ВремяВДняхЧасах"), 0);
		РасчетнаяБаза = ЕслиНеопределено(ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "РасчетнаяБаза"), 0);
		Строка.Результат = Макс(СреднийЗаработокОбщий * ВремяВДняхЧасах - РасчетнаяБаза, 0);
	КонецЦикла;
	
КонецПроцедуры

// Метод выполняет расчет записей с предопределенным способом расчета ДоплатаДоСреднегоЗаработкаФСС.
//
Процедура РассчитатьДоплатуДоСреднегоЗаработкаФСС(СпособРасчета, СтрокиРасчета)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиРасчета Цикл
		СреднийЗаработокФСС = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "СреднийЗаработокФСС");
		КалендарныеДни = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "КалендарныеДни");
		ПроцентДоплатыЗаДниНетрудоспособности = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "ПроцентДоплатыЗаДниНетрудоспособности");
		РасчетнаяБаза = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "РасчетнаяБаза");
		Строка.Результат = Макс(((СреднийЗаработокФСС * КалендарныеДни) * ПроцентДоплатыЗаДниНетрудоспособности / 100) - РасчетнаяБаза, 0);
	КонецЦикла;
	
КонецПроцедуры

// Метод выполняет расчет записей с предопределенным способом расчета ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни.
//
Процедура РассчитатьДоплатуДоСохраняемогоДенежногоСодержанияЗаДниБолезни(СпособРасчета, СтрокиРасчета)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиРасчета Цикл
		НормаДней = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "НормаДней");
		СохраняемоеДенежноеСодержание = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "СохраняемоеДенежноеСодержание");
		КоэффициентИндексацииСохраняемогоДенежногоСодержания = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "КоэффициентИндексацииСохраняемогоДенежногоСодержания");
		ВремяВДнях = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "ВремяВДнях");
		РасчетнаяБаза = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "РасчетнаяБаза");
		Строка.Результат = 0;
		Если НормаДней <> 0 Тогда
			Строка.Результат = Макс(СохраняемоеДенежноеСодержание * КоэффициентИндексацииСохраняемогоДенежногоСодержания * ВремяВДнях / НормаДней - РасчетнаяБаза, 0);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РасчетУдержанийПредопределеннымСпособом

Процедура РассчитатьУдержанияПредопределеннымСпособом(ОчередностьРасчета, СтрокиПоИдентификатору)
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	ВидыРасчета.СпособРасчета КАК СпособРасчета
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Удержания.ВидРасчета)
		|			И (ВидыРасчета.ОчередностьРасчета = &ОчередностьРасчета)
		|			И (ВидыРасчета.ИспользуетФормулу = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СпособРасчета";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("СпособРасчета") Цикл
		СтрокиПоСпособуРасчета = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
			Если РасчетУдержанияЗафиксирован(Строка.ЗаписьРасчета) Тогда
				Строка.Результат = Строка.ЗаписьРасчета.Результат;
				Продолжить;
			КонецЕсли;
			СтрокиПоСпособуРасчета.Добавить(Строка);
		КонецЦикла;
		РассчитатьСтрокиУдержанийПредопределеннымСпособом(Выборка.СпособРасчета, СтрокиПоСпособуРасчета);
		// Обновляем результат в наборе записей.
		Для Каждого Строка Из СтрокиПоСпособуРасчета Цикл
			Строка.ЗаписьРасчета.Результат = Строка.Результат;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура РассчитатьСтрокиУдержанийПредопределеннымСпособом(СпособРасчета, СтрокиРасчета)
	
	ИсполнительныеЛисты.РассчитатьУдержанияПоИсполнительнымЛистам(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц, ИсключаемыйРегистратор, МесяцНачисления);
	ИсполнительныеЛисты.РассчитатьВознагражденияПлатежныхАгентов(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц, ИсключаемыйРегистратор);
	
	РасчетЗарплатыРасширенныйПереопределяемый.РассчитатьСтрокуПредопределеннымСпособом(СпособРасчета, СтрокиРасчета);
	
КонецПроцедуры

#КонецОбласти

#Область СервисныеМетодыРасчета

// Определяет необходимость расчета результата
//
Функция РасчетНачисленияЗафиксирован(Строка)
	
	Если Строка.ФиксРасчет Или Строка.ФиксСторно Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет необходимость расчета результата
//
Функция РасчетУдержанияЗафиксирован(Строка)
	
	Если Строка.ФиксРасчет Или Строка.ФиксСторно Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РаспределениеПоТерриториямУсловиямТруда

// Выполняется распределение результата расчета по территориям и условиям труда, в которых сотрудник был задействован в
// течение месяца.
//
Процедура ЗаполнитьТерриторииУсловияТруда(СтрокиПоИдентификатору)
		
	Если Не НастройкиУчета.ИспользоватьТерриторииУсловияТруда Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	
	ОписаниеФильтра = МенеджерУчетаВремени.ОписаниеФильтраВТОтработанноеВремяПоТерриториямУсловиямТруда();
	ОписаниеФильтра.ИмяТаблицы = "ВТРегистрРасчета_Начисления_ФактическийПериодДействия";
	ОписаниеФильтра.ИмяПоляСотрудник = "Сотрудник";
	ОписаниеФильтра.ИмяПоляИсточникДанных = "ГрафикРаботы";
	ОписаниеФильтра.ИмяПоляПериодРегистрацииВремени = "ПериодРегистрацииВремени";
	ОписаниеФильтра.ИмяПоляОбщийГрафик = "ОбщийГрафик";
	ОписаниеФильтра.ИмяПоляМесяц = "ПериодДействия";
	ОписаниеФильтра.ИмяПоляДатаНачала = "ПериодДействияНачало";
	ОписаниеФильтра.ИмяПоляДатаОкончания = "ПериодДействияКонец";
	ОписаниеФильтра.ИмяПоляКлючНабораВидовВремени = "ВидРасчета";
	ОписаниеФильтра.ИмяПоляКлючСтроки = "ИдентификаторСтроки";
	ОписаниеФильтра.КлючевыеПоля.Добавить("ИдентификаторСтроки");
	ОписаниеФильтра.КлючевыеПоля.Добавить("Регистратор");
	
	ОтборРассчитываемыйНабор = МенеджерУчетаВремени.ОписаниеОтбораПоТаблицеФильтру();
	ОтборРассчитываемыйНабор.ЛевоеЗначение = "РассчитываемыйНабор";
	ОтборРассчитываемыйНабор.ПравоеЗначение = "ИСТИНА";
	ОтборРассчитываемыйНабор.ПараметрПравоеЗначение = Истина;
	ОписаниеФильтра.Отбор.Добавить(ОтборРассчитываемыйНабор);
	
	СоздатьВТВидыРасчетаРаспределениеПоКалендарнымДням();
	УдалитьВТ.Добавить("ВТВидыРасчетаРаспределениеПоКалендарнымДням");
	
	ОписаниеВидовВремени = МенеджерУчетаВремени.ОписаниеТаблицыНаборовВидовВремени();
	СоздатьВТНаборыВидовВремениДляРаспределенияПоТерриториямУсловиямТруда(ОписаниеВидовВремени);
	УдалитьВТ.Добавить("ВТНаборыВидовВремениДляРаспределенияПоТерриториямУсловиямТруда");
	
	МенеджерУчетаВремени.СоздатьВТОтработанноеВремяПоТерриториямУсловиямТруда(ОписаниеФильтра, ОписаниеВидовВремени);
	УдалитьВТ.Добавить("ВТОтработанноеВремяПоТерриториямУсловиямТруда");
	
	ПоказательРайонныйКоэффициент = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент");
	ПоказательНадбавкаЗаВредность = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность");

	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ИспользуетсяРайонныйКоэффициент", ЗначениеЗаполнено(ПоказательРайонныйКоэффициент));
	Запрос.УстановитьПараметр("ИспользуетсяНадбавкаЗаВредность", ЗначениеЗаполнено(ПоказательНадбавкаЗаВредность));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВремяПоТерриториямУсловиямТруда.Территория КАК Территория,
		|	ВремяПоТерриториямУсловиямТруда.УсловияТруда КАК УсловияТруда,
		|	ВЫБОР
		|		КОГДА ВидыРасчетаРаспределениеПоКалендарнымДням.ВидРасчета ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РаспределениеПоКалендарнымДням,
		|	ВремяПоТерриториямУсловиямТруда.Дней,
		|	ВремяПоТерриториямУсловиямТруда.Часов,
		|	СправочникТерритории.РайонныйКоэффициент,
		|	СправочникУсловияТруда.ПроцентНадбавкиЗаВредность
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтработанноеВремяПоТерриториямУсловиямТруда КАК ВремяПоТерриториямУсловиямТруда
		|		ПО (ВремяПоТерриториямУсловиямТруда.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (ВремяПоТерриториямУсловиямТруда.Регистратор = Начисления.Регистратор)
		|			И (НЕ Начисления.ФиксСторно)
		|			И (НЕ Начисления.ФиксРасчет)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыРасчетаРаспределениеПоКалендарнымДням КАК ВидыРасчетаРаспределениеПоКалендарнымДням
		|		ПО (ВидыРасчетаРаспределениеПоКалендарнымДням.ВидРасчета = Начисления.ВидРасчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТерриторииВыполненияРабот КАК СправочникТерритории
		|		ПО (СправочникТерритории.Ссылка = ВремяПоТерриториямУсловиямТруда.Территория)
		|			И (&ИспользуетсяРайонныйКоэффициент)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УсловияТруда КАК СправочникУсловияТруда
		|		ПО (СправочникУсловияТруда.Ссылка = ВремяПоТерриториямУсловиямТруда.УсловияТруда)
		|			И (&ИспользуетсяНадбавкаЗаВредность)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки,
		|	Территория,
		|	УсловияТруда";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДолиРаспределения = Новый ТаблицаЗначений;
	ДолиРаспределения.Колонки.Добавить("СтрокаТерриторийУсловийТруда");
	ДолиРаспределения.Колонки.Добавить("Дней");
	ДолиРаспределения.Колонки.Добавить("Часов");

	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		ТерриторииУсловияТруда = ТаблицаТерриторийУсловийТруда();
		ЕстьЗаполненныеТерриторииУсловияТруда = Ложь;
		ДолиРаспределения.Очистить();
		РаспределятьПоДням = Истина;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Территория) Или ЗначениеЗаполнено(Выборка.УсловияТруда) Тогда
				ЕстьЗаполненныеТерриторииУсловияТруда = Истина;
			КонецЕсли;
			Если Выборка.Часов > 0 Тогда
				РаспределятьПоДням = Ложь;
			КонецЕсли;
			НоваяСтрока = ТерриторииУсловияТруда.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Показатели = ТаблицаПоказателей();
			Если ЗначениеЗаполнено(Выборка.Территория) И ЗначениеЗаполнено(ПоказательРайонныйКоэффициент) Тогда
				НоваяСтрокаПоказателя = НоваяСтрока.Показатели.Добавить();
				НоваяСтрокаПоказателя.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
				НоваяСтрокаПоказателя.Показатель = ПоказательРайонныйКоэффициент;
				НоваяСтрокаПоказателя.Значение = Выборка.РайонныйКоэффициент;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.УсловияТруда) И ЗначениеЗаполнено(ПоказательНадбавкаЗаВредность) Тогда
				НоваяСтрокаПоказателя = НоваяСтрока.Показатели.Добавить();
				НоваяСтрокаПоказателя.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
				НоваяСтрокаПоказателя.Показатель = ПоказательНадбавкаЗаВредность;
				НоваяСтрокаПоказателя.Значение = Выборка.ПроцентНадбавкиЗаВредность;
			КонецЕсли;
			СтрокаДолиРаспределения = ДолиРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДолиРаспределения, Выборка);
			СтрокаДолиРаспределения.СтрокаТерриторийУсловийТруда = НоваяСтрока;
		КонецЦикла;
		Если ЕстьЗаполненныеТерриторииУсловияТруда Тогда
			Строка.ТерриторииУсловияТруда = ТерриторииУсловияТруда;
		КонецЕсли;
		Для Каждого СтрокаДолиРаспределения Из ДолиРаспределения Цикл
			Если Выборка.РаспределениеПоКалендарнымДням Или РаспределятьПоДням Тогда
				СтрокаДолиРаспределения.СтрокаТерриторийУсловийТруда.ДоляРаспределения = СтрокаДолиРаспределения.Дней;
			Иначе
				СтрокаДолиРаспределения.СтрокаТерриторийУсловийТруда.ДоляРаспределения = СтрокаДолиРаспределения.Часов;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТВидыРасчетаРаспределениеПоКалендарнымДням()
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиРасчета.ВидРасчета
		|ПОМЕСТИТЬ ВТВидыРасчетаРаспределениеПоКалендарнымДням
		|ИЗ
		|	ВТПоказателиРасчета КАК ПоказателиРасчета
		|ГДЕ
		|	(ПоказателиРасчета.ПоказательКоличествоДнейОтпуска
		|			ИЛИ ПоказателиРасчета.ПоказательКалендарныеДни
		|			ИЛИ ПоказателиРасчета.ПоказательКалендарныеДниБезПраздников)";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТНаборыВидовВремениДляРаспределенияПоТерриториямУсловиямТруда(ОписаниеВТ)
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыВремениНачислений.Ссылка КАК Ключ,
		|	ВидыВремениНачислений.ВидВремени,
		|	ВидыВремениНачислений.ОпределяющийЗаПраздничныеДни КАК УчитыватьТолькоПраздники
		|ПОМЕСТИТЬ ВТНаборыВидовВремениДляРаспределенияПоТерриториямУсловиямТруда
		|ИЗ
		|	ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремениНачислений
		|ГДЕ
		|	ВидыВремениНачислений.Ссылка В
		|			(ВЫБРАТЬ
		|				ПоказателиРасчета.ВидРасчета
		|			ИЗ
		|				ВТПоказателиРасчета КАК ПоказателиРасчета)
		|	И НЕ ВидыВремениНачислений.Ссылка В
		|				(ВЫБРАТЬ
		|					ВидыРасчета.ВидРасчета
		|				ИЗ
		|					ВТВидыРасчетаРаспределениеПоКалендарнымДням КАК ВидыРасчета)";
	Запрос.Выполнить();
	
	ОписаниеВТ.ИмяТаблицы = "ВТНаборыВидовВремениДляРаспределенияПоТерриториямУсловиямТруда";
	ОписаниеВТ.ИмяПоляКлюч = "Ключ";
	ОписаниеВТ.ИмяПоляВидВремени = "ВидВремени";
	ОписаниеВТ.ИмяПоляУчитыватьТолькоПраздники = "УчитыватьТолькоПраздники";
	
КонецПроцедуры

Процедура РаспределитьСтрокиПоТерриториямУсловиямТруда(СтрокиРасчета)
	
	Для Каждого Строка Из СтрокиРасчета Цикл
		РаспределитьСтрокуПоТерриториямУсловиямТруда(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьСтрокуПоТерриториямУсловиямТруда(СтрокаРасчета)
	
	Если Не НастройкиУчета.ИспользоватьТерриторииУсловияТруда Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРасчета.ФиксСторно Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРасчета.ТерриторииУсловияТруда.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРасчета.Результат = 0 Тогда
		СтрокаРасчета.ТерриторииУсловияТруда.ЗаполнитьЗначения(0, "Результат");
		Возврат;
	КонецЕсли;
	
	Если СтрокаРасчета.ТерриторииУсловияТруда.Количество() = 1 Тогда
		ЗаполнитьРезультатТерриторииУсловийТруда(СтрокаРасчета.Результат, СтрокаРасчета.ТерриторииУсловияТруда[0], СтрокаРасчета);
		Возврат;
	КонецЕсли;
	
	ПолеРаспределения = "ДоляРаспределения";
	Если РасчетНачисленияЗафиксирован(СтрокаРасчета) Тогда
		ПолеРаспределения = "Результат";
	КонецЕсли;
	
	КоэффициентыРаспределения = ОбщегоНазначения.ВыгрузитьКолонку(СтрокаРасчета.ТерриторииУсловияТруда, ПолеРаспределения);
	РаспределенныеСуммы = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаРасчета.Результат, КоэффициентыРаспределения);
	Если РаспределенныеСуммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = 0;
	Пока Индекс < СтрокаРасчета.ТерриторииУсловияТруда.Количество() Цикл
		ЗаполнитьРезультатТерриторииУсловийТруда(РаспределенныеСуммы[Индекс], СтрокаРасчета.ТерриторииУсловияТруда[Индекс], СтрокаРасчета);
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатТерриторииУсловийТруда(Результат, СтрокаТерриторийУсловийТруда, СтрокаРасчета)
	
	СтрокаТерриторийУсловийТруда.Результат = Результат;
	
	Если СтрокаРасчета.Сторно Тогда
		СтрокаТерриторийУсловийТруда.Результат = - Результат;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаТерриторийУсловийТруда()
	
	Возврат Обработки.МенеджерРасчетаЗарплаты.ТаблицаТерриторийУсловийТруда();
	
КонецФункции

#КонецОбласти

#Область РасчетУдержаний

Процедура НачатьРасчетУдержаний(УдалитьВТ, СтрокиПоИдентификатору)
	
	Если Не НастройкиРасчета.РассчитыватьУдержания Тогда
		Возврат;
	КонецЕсли;
	
	Удержания = ЗарплатаМесяца.Удержания;
	НачатьПересчетУдержаний(Удержания);
	
	Если Удержания.Количество() = 0 Тогда
		ЗавершитьПересчетУдержаний();
		Возврат;
	КонецЕсли;
	
	СоздатьВТУдержания(Удержания, СтрокиПоИдентификатору);
	УдалитьВТ.Добавить("ВТУдержания");
	
	ОписаниеВТ = ОписаниеВТУдержания();
	ОписаниеВТ.ИмяВТ = "ВТУдержания";
	ОписаниеВТ.ИмяПоляУдержание = "Удержание";
	СоздатьВТПоказателиРасчетаУдержания(ОписаниеВТ);
	УдалитьВТ.Добавить("ВТПоказателиРасчета");
	
	// Определяем какие показатели вообще требуются.
	СоздатьВТТребованияУдержаний();
	УдалитьВТ.Добавить("ВТТребованияУдержаний");
	ТребованияУдержаний = ТребованияУдержаний();
	
	// Регистрируем данные удержаний.
	РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(НаборыЗаписей, Ложь, Организация, МесяцНачисления, Удержания);
	
	// Составляем соответствие строк для более быстрого поиска.
	ЗаполнитьСтрокиНабораПоИдентификатору(НаборыЗаписей.Удержания, СтрокиПоИдентификатору);
	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.Удержания);
	УдалитьВТ.Добавить("ВТРегистрРасчета_Удержания");
	
	СоздатьВТУдержанныеСуммы();
	УдалитьВТ.Добавить("ВТУдержанныеСуммы");
	
	РассчитатьЗначенияПоказателейУдержаний(СтрокиПоИдентификатору);
	ВычеркнутьСтрокиПоПоказателям(Удержания, СтрокиПоИдентификатору, НаборыЗаписей.Удержания);
	
КонецПроцедуры

Процедура ЗавершитьРасчетУдержаний(УдалитьВТ, СтрокиПоИдентификатору)
	
	Если Не НастройкиРасчета.РассчитыватьУдержания Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗарплатаМесяца.Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВычеркнутьНулевыеУдержания(СтрокиПоИдентификатору);
	
	ЗавершитьПересчетУдержаний();
	
КонецПроцедуры

Процедура СоздатьВТУдержанныеСуммы()
	
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрНакопления.НачисленияУдержанияПоСотрудникам");
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам");
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК Месяц,
		|	Удержания.Организация,
		|	Удержания.ФизическоеЛицо,
		|	Удержания.ВидРасчета,
		|	Удержания.ДокументОснование
		|ПОМЕСТИТЬ ВТФильтр
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТребованияУдержаний КАК ТребованияУдержаний
		|		ПО (ТребованияУдержаний.ИдентификаторСтроки = Удержания.ИдентификаторСтроки)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержания КАК ТаблицаУдержаний
		|		ПО (ТаблицаУдержаний.ИдентификаторСтроки = Удержания.ИдентификаторСтроки)
		|ГДЕ
		|	&РассчитыватьТолькоПоТекущемуДокументу";
	
	Если НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда
		ТекстЗамены = "(ТребованияУдержаний.ТребуетсяПоказательРасчетнаяБаза = ЛОЖЬ
			|	И ТребованияУдержаний.ТребуетсяПоказательРасчетнаяБазаИсполнительногоЛиста = ЛОЖЬ)
			|	ИЛИ (ТаблицаУдержаний.УдерживаетсяВЦеломЗаМесяц = ИСТИНА)";
	Иначе
		ТекстЗамены = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РассчитыватьТолькоПоТекущемуДокументу", ТекстЗамены);
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(УдержаноЗаМесяц.БазовыйПериодНачало, МЕСЯЦ) КАК Месяц,
	|	УдержаноЗаМесяц.Организация КАК Организация,
	|	УдержаноЗаМесяц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдержаноЗаМесяц.ВидРасчета КАК ВидРасчета,
	|	УдержаноЗаМесяц.ДокументОснование КАК ДокументОснование,
	|	СУММА(УдержаноЗаМесяц.Результат) КАК Сумма
	|ПОМЕСТИТЬ ВТУдержанныеСуммы
	|ИЗ
	|	РегистрРасчета.Удержания КАК УдержаноЗаМесяц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФильтр КАК Удержания
	|		ПО УдержаноЗаМесяц.Организация = Удержания.Организация
	|			И УдержаноЗаМесяц.ФизическоеЛицо = Удержания.ФизическоеЛицо
	|			И УдержаноЗаМесяц.ВидРасчета = Удержания.ВидРасчета
	|			И УдержаноЗаМесяц.ДокументОснование = Удержания.ДокументОснование
	|			И НАЧАЛОПЕРИОДА(УдержаноЗаМесяц.БазовыйПериодНачало, МЕСЯЦ) = Удержания.Месяц
	|			И (УдержаноЗаМесяц.Регистратор <> &ИсключаемыйРегистратор)
	|			И (УдержаноЗаМесяц.Регистратор <> &ИсправленныйДокумент)
	|			И (НЕ УдержаноЗаМесяц.ОграничениеВзыскания)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(УдержаноЗаМесяц.БазовыйПериодНачало, МЕСЯЦ),
	|	УдержаноЗаМесяц.Организация,
	|	УдержаноЗаМесяц.ФизическоеЛицо,
	|	УдержаноЗаМесяц.ВидРасчета,
	|	УдержаноЗаМесяц.ДокументОснование";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	УничтожитьВТ("ВТФильтр");
	
КонецПроцедуры

Процедура ВычеркнутьНулевыеУдержания(СтрокиПоИдентификатору)
	
	Если СтрокиПоИдентификатору.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|ГДЕ
		|	Удержания.Результат = 0";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокиПоИдентификатору.Удалить(Выборка.ИдентификаторСтроки);
		СтрокаСоответствия = НастройкиПересчета.СоответствиеСтрокУдержаний[Строка];
		Если СтрокаСоответствия <> Неопределено Тогда
			Таблица = СтрокаСоответствия.Владелец();
			Таблица.Удалить(СтрокаСоответствия);
			НастройкиПересчета.СоответствиеСтрокУдержаний.Удалить(Строка);
		КонецЕсли;
		Таблица = Строка.Владелец();
		Таблица.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейУдержаний(СтрокиПоИдентификатору)
	
	РассчитатьЗначенияПоказателейКалендарныеДниУдержаний(СтрокиПоИдентификатору);

КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейУдержанийОчередности(ОчередностьРасчета, СтрокиПоИдентификатору)
	
	РассчитатьЗначенияПоказателяРасчетнаяБазаСтраховыеВзносы(ОчередностьРасчета, СтрокиПоИдентификатору);
	РассчитатьЗначениеПоказателяРасчетнаяБазаУдержаний(ОчередностьРасчета, СтрокиПоИдентификатору);

КонецПроцедуры

Процедура РассчитатьУдержанияОчередности(СтрокиПоИдентификатору, ТребованияУдержаний, Отбор = Неопределено)
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетУдержанийОчередности";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьУдержания Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокиПоИдентификатору.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ВидРасчета.ОчередностьРасчета КАК ОчередностьРасчета
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|ГДЕ
		|	&УсловиеОтбора
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередностьРасчета";
	ЗаполнитьУсловиеОтбораВЗапросеОтбораУдержанийПоОчередности(Запрос, Отбор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РассчитатьЗначенияПоказателейУдержанийОчередности(Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		РассчитатьУдержанияПоФормуле(Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		РассчитатьУдержанияФиксированнойСуммой(Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		РассчитатьУдержанияПредопределеннымСпособом(Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		УчестьРанееУдержанныеСуммы(Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		ПерерасчетЗарплаты.ЗаполнитьРезультатыФиксСторноУдержаний(МенеджерВременныхТаблиц, Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		ЗарегистрироватьРезультатыРасчетаОчередностиУдержаний(Выборка.ОчередностьРасчета, ТребованияУдержаний);
	КонецЦикла;
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура ЗаполнитьУсловиеОтбораВЗапросеОтбораУдержанийПоОчередности(Запрос, Отбор)
	
	Если Отбор = Неопределено Тогда
		УсловиеОтбора = "ИСТИНА";
	Иначе
		УсловиеОтбора = "";
		Для Каждого СтрокаОтбора Из Отбор Цикл
			Если Не ПустаяСтрока(УсловиеОтбора) Тогда
				УсловиеОтбора = УсловиеОтбора + " И ";
			КонецЕсли;
			ИмяПоля = СтрЗаменить(СтрокаОтбора.ИмяПоля, ".", "_");
			Если ТипЗнч(СтрокаОтбора.Значение) = Тип("Массив") Тогда
				УсловиеОтбора = УсловиеОтбора + "Удержания." + СтрокаОтбора.ИмяПоля + " " + СтрокаОтбора.ВидСравнения + " (&" + ИмяПоля + ")";
			Иначе
				УсловиеОтбора = УсловиеОтбора + "Удержания." + СтрокаОтбора.ИмяПоля + " " + СтрокаОтбора.ВидСравнения + " &" + ИмяПоля;
			КонецЕсли;
			Запрос.УстановитьПараметр(ИмяПоля, СтрокаОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", УсловиеОтбора);
	
КонецПроцедуры

Функция ОтборВключаяКатегории(Категории)
	
	Отбор = Новый Массив;
	
	ЭлементОтбора = Новый Структура("ИмяПоля, ВидСравнения, Значение");
	ЭлементОтбора.ИмяПоля = "ВидРасчета.КатегорияУдержания";
	ЭлементОтбора.ВидСравнения = "В";
	ЭлементОтбора.Значение = Категории;
	
	Отбор.Добавить(ЭлементОтбора);
	
	Возврат Отбор;
	
КонецФункции

Функция ОтборИсключаяКатегории(Категории)
	
	Отбор = Новый Массив;
	
	ЭлементОтбора = Новый Структура("ИмяПоля, ВидСравнения, Значение");
	ЭлементОтбора.ИмяПоля = "ВидРасчета.КатегорияУдержания";
	ЭлементОтбора.ВидСравнения = "НЕ В";
	ЭлементОтбора.Значение = Категории;
	
	Отбор.Добавить(ЭлементОтбора);
	
	Возврат Отбор;
	
КонецФункции

Процедура УчестьРанееУдержанныеСуммы(ОчередностьРасчета, СтрокиПоИдентификатору)
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ФизическоеЛицо,
		|	Удержания.Организация,
		|	Удержания.ВидРасчета,
		|	Удержания.ДокументОснование,
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК Месяц,
		|	Удержания.ИдентификаторСтроки,
		|	УдержанныеСуммы.Сумма
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержанныеСуммы КАК УдержанныеСуммы
		|		ПО (УдержанныеСуммы.ФизическоеЛицо = Удержания.ФизическоеЛицо)
		|			И (УдержанныеСуммы.Организация = Удержания.Организация)
		|			И (УдержанныеСуммы.ВидРасчета = Удержания.ВидРасчета)
		|			И (УдержанныеСуммы.ДокументОснование = Удержания.ДокументОснование)
		|			И (УдержанныеСуммы.Месяц = НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ))
		|			И (Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета)
		|			И (НЕ Удержания.ФиксРасчет)
		|			И (НЕ Удержания.ФиксСторно)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТребованияУдержаний КАК ТребованияУдержаний
		|		ПО (ТребованияУдержаний.ИдентификаторСтроки = Удержания.ИдентификаторСтроки)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержания КАК ТаблицаУдержаний
		|		ПО (ТаблицаУдержаний.ИдентификаторСтроки = Удержания.ИдентификаторСтроки)
		|ГДЕ
		|	&РассчитыватьТолькоПоТекущемуДокументу
		|
		|УПОРЯДОЧИТЬ ПО
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ),
		|	Удержания.Организация,
		|	Удержания.ФизическоеЛицо,
		|	Удержания.ВидРасчета,
		|	Удержания.ДокументОснование";
	
	Если НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда
		ТекстЗамены = "(ТребованияУдержаний.ТребуетсяПоказательРасчетнаяБаза = ЛОЖЬ)
			|	ИЛИ (ТаблицаУдержаний.УдерживаетсяВЦеломЗаМесяц = ИСТИНА)";
	Иначе
		ТекстЗамены = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РассчитыватьТолькоПоТекущемуДокументу", ТекстЗамены);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
						РанееУдержано = Выборка.Сумма;
						Пока Выборка.Следующий() Цикл
							Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
							Строка.Результат = Строка.Результат - РанееУдержано;
							Строка.ЗаписьРасчета.Результат = Строка.Результат;
							РанееУдержано = 0;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьРезультатыРасчетаОчередностиУдержаний(ОчередностьРасчета, ТребованияУдержаний)
	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.Удержания, Истина);
	ЗарегистрироватьСоциальныеВычетыНДФЛОчередности(ОчередностьРасчета, ТребованияУдержаний);
	
	ИсполнительныеЛисты.ЗарегистрироватьРасчетУдержанийПоИсполнительнымДокументам(ОчередностьРасчета, НаборыЗаписей, МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ЗарегистрироватьСоциальныеВычетыНДФЛОчередности(ОчередностьРасчета, ТребованияУдержаний)
	
	Если Не НастройкиРасчета.РассчитыватьНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТребованияУдержаний.ТребуетсяРегистрацияСоциальныхВычетовНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("КатегорииУдержанийВлияющихНаНДФЛ", ПланыВидовРасчета.Удержания.КатегорииУдержанийВлияющихНаНДФЛ());
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ФизическоеЛицо,
		|	Удержания.ВидРасчета.КатегорияУдержания КАК Категория,
		|	Удержания.ВидРасчета КАК Удержание,
		|	Удержания.ДокументОснование,
		|	Удержания.Результат
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|ГДЕ
		|	Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
		|	И Удержания.ВидРасчета.КатегорияУдержания В(&КатегорииУдержанийВлияющихНаНДФЛ)";
		
	ЗарегистрироватьСоциальныеВычетыНДФЛ(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ЗарегистрироватьСоциальныеВычетыНДФЛ(Удержания)
	
	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Удержания.Колонки["Результат"].Имя = "Сумма";
	Удержания.Колонки["Категория"].Имя = "КатегорияУдержания";
	
	УстановитьПривилегированныйРежим(Истина);
	УчетНДФЛРасширенный.СформироватьСоциальныеВычетыПоУдержаниям(
		ИсключаемыйРегистратор, 
		НаборыЗаписей, 
		Ложь, 
		Организация, 
		КонецМесяца(МесяцНачисления),
		МесяцНачисления, 
		Удержания, 
		Ложь, 
		НастройкиНДФЛ.ОкончательныйРасчет);
		
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ);

КонецПроцедуры

Процедура ОграничитьРазмерУдержанийДоПредела(УдалитьВТ, СтрокиПоИдентификатору)
	
	Если СтрокиПоИдентификатору.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВТСуществует("ВТПредельныеСуммыУдержанийСотрудников") Тогда 
		ОписаниеВТ = ОписаниеВТУдержания();
		ОписаниеВТ.ИмяВТ = "ВТРегистрРасчета_Удержания";
		ОписаниеВТ.ИмяПоляУдержание = "ВидРасчета";
		СоздатьВТПредельныеСуммыУдержанийСотрудников(ОписаниеВТ);
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Удержания.ДокументОснование КАК ДокументОснование,
		|	Удержания.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|	Удержания.Результат КАК Результат,
		|	ПредельныеСуммыУдержанийСотрудников.Остаток КАК Остаток
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПредельныеСуммыУдержанийСотрудников КАК ПредельныеСуммыУдержанийСотрудников
		|		ПО Удержания.ДокументОснование = ПредельныеСуммыУдержанийСотрудников.ДокументОснование
		|			И Удержания.ВидРасчета = ПредельныеСуммыУдержанийСотрудников.Удержание
		|
		|УПОРЯДОЧИТЬ ПО
		|	Удержания.ДокументОснование,
		|	Удержания.БазовыйПериодНачало";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		Остаток = Выборка.Остаток;
		Пока Выборка.Следующий() Цикл
			СтрокаУдержаний = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
			СтрокаУдержаний.Результат = Мин(СтрокаУдержаний.Результат - СтрокаУдержаний.Задолженность, Остаток);
			Остаток = Остаток - СтрокаУдержаний.Результат;
			СтрокаУдержаний.Результат = СтрокаУдержаний.Результат + СтрокаУдержаний.Задолженность;
			СтрокаУдержаний.ЗаписьРасчета.Результат = СтрокаУдержаний.Результат;
			
			НоваяСтрока = НаборыЗаписей.УдержанияДоПределаПоСотрудникам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Сумма = СтрокаУдержаний.Результат;
			НоваяСтрока.Период = МесяцНачисления;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		КонецЦикла;
	КонецЦикла;
	
	УдалитьВТ.Добавить("ВТПредельныеСуммыУдержанийСотрудников");
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.Удержания, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьЗадолженностьПоУдержаниям(СтрокиПоИдентификатору)
	
	Если Не НастройкиРасчета.РассчитыватьУдержания Тогда 
		Возврат;
	КонецЕсли;
	
	Если НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлаты") Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрокиПоИдентификатору.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ВТСуществует("ВТПредельныеСуммыУдержанийСотрудников") Тогда 
		ОписаниеВТФизическиеЛицаПериоды = ОписаниеВТФизическиеЛицаПериоды();
		ОписаниеВТФизическиеЛицаПериоды.ИмяВТ = "ВТРегистрРасчета_Удержания";
		ОписаниеВТФизическиеЛицаПериоды.ИмяПоляГоловнаяОрганизация = "Организация";
		СоздатьВТЗадолженностьПоУдержаниямФизическихЛиц(ОписаниеВТФизическиеЛицаПериоды);
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ДокументОснование КАК ДокументОснование,
		|	МАКСИМУМ(Удержания.БазовыйПериодНачало) КАК БазовыйПериодНачало
		|ПОМЕСТИТЬ ВТУдержанияМаксимальныеПериоды
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|
		|СГРУППИРОВАТЬ ПО
		|	Удержания.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Удержания.ДокументОснование КАК ДокументОснование,
		|	МИНИМУМ(Удержания.ИдентификаторСтроки) КАК ИдентификаторСтроки,
		|	МИНИМУМ(ЗадолженностьПоУдержаниям.Сумма) КАК Задолженность
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗадолженностьПоУдержаниямФизическихЛиц КАК ЗадолженностьПоУдержаниям
		|		ПО Удержания.ДокументОснование = ЗадолженностьПоУдержаниям.ДокументОснование
		|			И Удержания.ВидРасчета = ЗадолженностьПоУдержаниям.Удержание
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержанияМаксимальныеПериоды КАК УдержанияМаксимальныеПериоды
		|		ПО Удержания.ДокументОснование = УдержанияМаксимальныеПериоды.ДокументОснование
		|			И Удержания.БазовыйПериодНачало = УдержанияМаксимальныеПериоды.БазовыйПериодНачало
		|
		|СГРУППИРОВАТЬ ПО
		|	Удержания.ДокументОснование";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаУдержаний = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаУдержаний.Задолженность = Выборка.Задолженность;
	КонецЦикла;
	
	ИменаВТ = Новый Массив;
	ИменаВТ.Добавить("ВТУдержанияМаксимальныеПериоды");
	УничтожитьВТ(ИменаВТ);
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетЗарплаты

Процедура ЗаполнитьТаблицуПересчетаФизическимиЛицами()
	
	УсловиеПроверки = НастройкиРасчета.Сотрудники <> Неопределено Или НастройкиРасчета.ФизическиеЛица <> Неопределено;
	ТекстСообщения = НСтр("ru = 'Заполнение НастройкиРасчета.Сотрудники или НастройкиРасчета.ФизическиеЛица является обязательным.'");
	ОбщегоНазначенияКлиентСервер.Проверить(УсловиеПроверки, ТекстСообщения, "ЗаполнитьТаблицыПересчетаПриПересчетеНДФЛ");
	
	Если НастройкиРасчета.Сотрудники = Неопределено Тогда
		ФизическиеЛица = НастройкиРасчета.ФизическиеЛица;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ФизическиеЛица = КадровыйУчет.ФизическиеЛицаСотрудников(НастройкиРасчета.Сотрудники);
		УстановитьПривилегированныйРежим(Ложь);
		Если НастройкиРасчета.ФизическиеЛица <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛица, НастройкиРасчета.ФизическиеЛица, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ПересчетФизическихЛиц, ФизическиеЛица, "ФизическоеЛицо");
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыПересчетаПриПересчетеНДФЛ()
	
	НастройкиПересчета.ВыполнятьПересчет = Истина;
	
	ЗаполнитьТаблицуПересчетаФизическимиЛицами();
	
	Для Каждого НастройкаПересчета Из ПересчетФизическихЛиц Цикл
		ЗаполнитьСтрокуПересчетаПоНДФЛ(НастройкаПересчета);
		НастройкаПересчета.ПересчитыватьНДФЛ = Истина;
	КонецЦикла;
	
	ПересчетФизическихЛиц.Свернуть("ФизическоеЛицо", СтрСоединить(ИменаНастроекПересчетаФизическихЛиц(), ","));
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыПересчетаПриПересчетеВзносов()
	
	НастройкиПересчета.ВыполнятьПересчет = Истина;
	
	ЗаполнитьТаблицуПересчетаФизическимиЛицами();
	
	Для Каждого НастройкаПересчета Из ПересчетФизическихЛиц Цикл
		ЗаполнитьСтрокуПересчетаПоВзносам(НастройкаПересчета);
		НастройкаПересчета.ПересчитыватьВзносы = Истина;
	КонецЦикла;
	
	ПересчетФизическихЛиц.Свернуть("ФизическоеЛицо", СтрСоединить(ИменаНастроекПересчетаФизическихЛиц(), ","));
	
КонецПроцедуры

Процедура ПроверитьИсточникИзменений(ИсточникИзменений)
	
	Если Не Зарплата.Свойство(ИсточникИзменений.ИмяКоллекции) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Указано несуществующее имя коллекции (%1) в таблице источников изменений.'"), 
			ИсточникИзменений.ИмяКоллекции);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СотрудникОбязателен = Новый Массив;
	СотрудникОбязателен.Добавить("Начисления");
	СотрудникОбязателен.Добавить("ДоговорыПодряда");
	Если СотрудникОбязателен.Найти(ИсточникИзменений.ИмяКоллекции) <> Неопределено 
		И Не ЗначениеЗаполнено(ИсточникИзменений.Сотрудник) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнен сотрудник в таблице источников изменений. 
                  |Для коллекции %1 заполнение сотрудника является обязательным.'"), 
			ИсточникИзменений.ИмяКоллекции);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ВидРасчетаОбязателен = Новый Массив;
	ВидРасчетаОбязателен.Добавить("Удержания");
	Если ВидРасчетаОбязателен.Найти(ИсточникИзменений.ИмяКоллекции) <> Неопределено 
		И Не ЗначениеЗаполнено(ИсточникИзменений.ВидРасчета) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнен вид расчета в таблице источников изменений. 
                  |Для коллекции %1 заполнение вида расчета является обязательным.'"), 
			ИсточникИзменений.ИмяКоллекции);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыПересчетаПоИсточникамИзменений()
	
	Если НастройкиПересчета.ИсточникИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиПересчета.ВыполнятьПересчет = Истина;
	
	Для Каждого СтрокаИзменений Из НастройкиПересчета.ИсточникИзменений Цикл
		ЗаполнитьНастройкуПересчетаПоНачислениям(СтрокаИзменений);
		ЗаполнитьНастройкуПересчетаПоДоговорамПодряда(СтрокаИзменений);
		ЗаполнитьНастройкуПересчетаПоУдержаниям(СтрокаИзменений);
		ЗаполнитьНастройкуПересчетаПоНДФЛ(СтрокаИзменений);
		ЗаполнитьНастройкуПересчетаПоВзносам(СтрокаИзменений);
		ЗаполнитьНастройкуПересчетаПоПогашениюЗаймов(СтрокаИзменений);
	КонецЦикла;
	
	ПересчетСотрудников.Свернуть("Сотрудник", СтрСоединить(ИменаНастроекПересчетаСотрудников(), ","));
	ПересчетФизическихЛиц.Свернуть("ФизическоеЛицо", СтрСоединить(ИменаНастроекПересчетаФизическихЛиц(), ","));
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПересчетаПоНачислениям(СтрокаИзменений)
	
	Если СтрокаИзменений.ИмяКоллекции <> "Начисления" Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПересчета = ПересчетСотрудников.Добавить();
	НастройкаПересчета.Сотрудник = СтрокаИзменений.Сотрудник;
	НастройкаПересчета.ПересчитыватьНачисления = Истина;
	НастройкаПересчета.ПересчитыватьДоговорыПодряда = Ложь;
	
	НастройкаПересчета = ПересчетФизическихЛиц.Добавить();
	НастройкаПересчета.ФизическоеЛицо = СтрокаИзменений.ФизическоеЛицо;
	НастройкаПересчета.ПересчитыватьУдержанияОтНачислений = Истина;
	НастройкаПересчета.ПересчитыватьНДФЛ = Истина;
	НастройкаПересчета.ПересчитыватьУдержанияОтНДФЛ = Истина;
	НастройкаПересчета.ПересчитыватьКорректировкиВыплаты = Истина;
	НастройкаПересчета.ПересчитыватьВзносы = Истина;
	НастройкаПересчета.ПересчитыватьУдержанияОтВзносов = Истина;
	НастройкаПересчета.ПересчитыватьЗаймы = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПересчетаПоДоговорамПодряда(СтрокаИзменений)
	
	Если СтрокаИзменений.ИмяКоллекции <> "ДоговорыПодряда" Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПересчета = ПересчетСотрудников.Добавить();
	НастройкаПересчета.Сотрудник = СтрокаИзменений.Сотрудник;
	НастройкаПересчета.ПересчитыватьНачисления = Ложь;
	НастройкаПересчета.ПересчитыватьДоговорыПодряда = Истина;
	
	НастройкаПересчета = ПересчетФизическихЛиц.Добавить();
	НастройкаПересчета.ФизическоеЛицо = СтрокаИзменений.ФизическоеЛицо;
	НастройкаПересчета.ПересчитыватьУдержанияОтНачислений = Истина;
	НастройкаПересчета.ПересчитыватьНДФЛ = Истина;
	НастройкаПересчета.ПересчитыватьУдержанияОтНДФЛ = Истина;
	НастройкаПересчета.ПересчитыватьКорректировкиВыплаты = Истина;
	НастройкаПересчета.ПересчитыватьВзносы = Истина;
	НастройкаПересчета.ПересчитыватьУдержанияОтВзносов = Истина;
	НастройкаПересчета.ПересчитыватьЗаймы = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПересчетаПоУдержаниям(СтрокаИзменений)
	
	Если СтрокаИзменений.ИмяКоллекции <> "Удержания" Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПересчета = ПересчетФизическихЛиц.Добавить();
	НастройкаПересчета.ФизическоеЛицо = СтрокаИзменений.ФизическоеЛицо;
	НастройкаПересчета.ПересчитыватьУдержанияОтНачислений = Истина;
	Если УдержаниеВлияетНаНДФЛ(СтрокаИзменений.ВидРасчета) Тогда
		НастройкаПересчета.ПересчитыватьНДФЛ = Истина;
		НастройкаПересчета.ПересчитыватьУдержанияОтНДФЛ = Истина;
		НастройкаПересчета.ПересчитыватьКорректировкиВыплаты = Истина;
	КонецЕсли;
	НастройкаПересчета.ПересчитыватьВзносы = Ложь;
	НастройкаПересчета.ПересчитыватьУдержанияОтВзносов = Ложь;
	НастройкаПересчета.ПересчитыватьЗаймы = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПересчетаПоНДФЛ(СтрокаИзменений)
	
	Если СтрокаИзменений.ИмяКоллекции <> "НДФЛ" Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПересчета = ПересчетФизическихЛиц.Добавить();
	НастройкаПересчета.ФизическоеЛицо = СтрокаИзменений.ФизическоеЛицо;
	ЗаполнитьСтрокуПересчетаПоНДФЛ(НастройкаПересчета);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуПересчетаПоНДФЛ(СтрокаПересчета)
	
	СтрокаПересчета.ПересчитыватьУдержанияОтНачислений = Истина;
	СтрокаПересчета.ПересчитыватьНДФЛ = Ложь;
	СтрокаПересчета.ПересчитыватьУдержанияОтНДФЛ = Истина;
	СтрокаПересчета.ПересчитыватьКорректировкиВыплаты = Истина;
	СтрокаПересчета.ПересчитыватьВзносы = Ложь;
	СтрокаПересчета.ПересчитыватьУдержанияОтВзносов = Ложь;
	СтрокаПересчета.ПересчитыватьЗаймы = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПересчетаПоВзносам(СтрокаИзменений)
	
	Если СтрокаИзменений.ИмяКоллекции <> "Взносы" Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПересчета = ПересчетФизическихЛиц.Добавить();
	НастройкаПересчета.ФизическоеЛицо = СтрокаИзменений.ФизическоеЛицо;
	ЗаполнитьСтрокуПересчетаПоВзносам(НастройкаПересчета);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуПересчетаПоВзносам(СтрокаПересчета)
	
	СтрокаПересчета.ПересчитыватьУдержанияОтНачислений = Истина;
	СтрокаПересчета.ПересчитыватьНДФЛ = Ложь;
	СтрокаПересчета.ПересчитыватьУдержанияОтНДФЛ = Истина;
	СтрокаПересчета.ПересчитыватьКорректировкиВыплаты = Истина;
	СтрокаПересчета.ПересчитыватьВзносы = Ложь;
	СтрокаПересчета.ПересчитыватьУдержанияОтВзносов = Истина;
	СтрокаПересчета.ПересчитыватьЗаймы = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПересчетаПоПогашениюЗаймов(СтрокаИзменений)
	
	Если СтрокаИзменений.ИмяКоллекции <> "ПогашениеЗаймов" Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПересчета = ПересчетФизическихЛиц.Добавить();
	НастройкаПересчета.ФизическоеЛицо = СтрокаИзменений.ФизическоеЛицо;
	НастройкаПересчета.ПересчитыватьУдержанияОтНачислений = Истина;
	НастройкаПересчета.ПересчитыватьНДФЛ = Ложь;
	НастройкаПересчета.ПересчитыватьУдержанияОтНДФЛ = Истина;
	НастройкаПересчета.ПересчитыватьКорректировкиВыплаты = Истина;
	НастройкаПересчета.ПересчитыватьВзносы = Ложь;
	НастройкаПересчета.ПересчитыватьУдержанияОтВзносов = Ложь;
	НастройкаПересчета.ПересчитыватьЗаймы = Ложь;
	
КонецПроцедуры

Функция УдержаниеВлияетНаНДФЛ(ВидРасчета)
	
	КатегорияУдержания = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета).КатегорияУдержания;
	
	КатегорииВлияющиеНаНДФЛ = ПланыВидовРасчета.Удержания.КатегорииУдержанийВлияющихНаНДФЛ();
	Возврат КатегорииВлияющиеНаНДФЛ.Найти(КатегорияУдержания) <> Неопределено;
	
КонецФункции

Функция УдержаниеЗависитОтНДФЛ(КатегорияУдержания)
	
	КатегорииУдержанийУчитывающихНДФЛ = ПланыВидовРасчета.Удержания.КатегорииУдержанийУчитывающихНДФЛ();
	Возврат КатегорииУдержанийУчитывающихНДФЛ.Найти(КатегорияУдержания) <> Неопределено;
	
КонецФункции

Функция УдержаниеЗависитОтВзносов(КатегорияУдержания)
	
	КатегорииЗависящиеОтВзносов = ПланыВидовРасчета.Удержания.КатегорииУдержанийЗависящиеОтСтраховыхВзносов();
	Возврат КатегорииЗависящиеОтВзносов.Найти(КатегорияУдержания) <> Неопределено;
	
КонецФункции

Функция УдержаниеЗависитОтНачислений(ВидУдержания)
	
	Если Не ЗначениеЗаполнено(ВидУдержания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидУдержания).ТребуетсяРасчетБазы;
	
КонецФункции

Процедура НачатьПересчетНачислений(Начисления)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ПересчетСотрудников.НайтиСтроки(Новый Структура("ПересчитыватьНачисления", Истина));
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "Сотрудник");
	
	Начисления = ТаблицаНачислений();
	НастройкиПересчета.СоответствиеСтрокНачислений.Очистить();
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаНачислений Из Зарплата.Начисления Цикл
		Если Сотрудники.Найти(СтрокаНачислений.Сотрудник) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
		НастройкиПересчета.СоответствиеСтрокНачислений.Вставить(НоваяСтрока, СтрокаНачислений);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьПересчетНачислений()
		
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиРасчета = Новый Соответствие;
	Для Каждого КлючИЗначение Из НастройкиПересчета.СоответствиеСтрокНачислений Цикл
		ЗаполнитьЗначенияСвойств(КлючИЗначение.Значение, КлючИЗначение.Ключ);
		СотрудникиРасчета.Вставить(КлючИЗначение.Значение.Сотрудник, КлючИЗначение.Значение.ФизическоеЛицо);
	КонецЦикла;
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтНачислений", Истина));
	ФизическиеЛицаБезРасчета = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо");
	Если ФизическиеЛицаБезРасчета.Количество() > 0 Тогда
		НайденныеСтроки = НайтиСтрокиОтборПоМассиву(Зарплата.Начисления, "ФизическоеЛицо", ФизическиеЛицаБезРасчета);
		Начисления = Новый Массив;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СотрудникиРасчета[Строка.Сотрудник] = Неопределено Тогда
				Начисления.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, Начисления);
		СоздатьВТПоРегиструРасчета(НаборыЗаписей.Начисления);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПересчетУдержаний(Удержания)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;

	// Собираем строки пересчета вообще хотя бы каких-то удержаний.
	СтрокиПересчета = Новый Массив;
	Для Каждого СтрокаПересчета Из ПересчетФизическихЛиц Цикл
		Если СтрокаПересчета.ПересчитыватьУдержанияОтНачислений
			Или СтрокаПересчета.ПересчитыватьУдержанияОтВзносов
			Или СтрокаПересчета.ПересчитыватьУдержанияОтНДФЛ Тогда
			СтрокиПересчета.Добавить(СтрокаПересчета);
		КонецЕсли;
	КонецЦикла;
	
	Удержания = ТаблицаУдержаний();
	Если СтрокиПересчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдержанияБезРасчета = ТаблицаУдержаний();
	
	НастройкиПересчета.СоответствиеСтрокУдержаний.Очистить();
	Для Каждого СтрокаУдержаний Из ЗарплатаМесяца.Удержания Цикл
		ПересчитыватьСтроку = Ложь;
		Для Каждого СтрокаПересчета Из СтрокиПересчета Цикл
			Если СтрокаУдержаний.ФизическоеЛицо = СтрокаПересчета.ФизическоеЛицо Тогда
				Если СтрокаПересчета.ПересчитыватьУдержанияОтНачислений 
					И УдержаниеЗависитОтНачислений(СтрокаУдержаний.Удержание) Тогда
					ПересчитыватьСтроку = Истина;
				ИначеЕсли СтрокаПересчета.ПересчитыватьУдержанияОтВзносов
					И УдержаниеЗависитОтВзносов(СтрокаУдержаний.Категория) Тогда
					ПересчитыватьСтроку = Истина;
				ИначеЕсли СтрокаПересчета.ПересчитыватьУдержанияОтНДФЛ
					И УдержаниеЗависитОтНДФЛ(СтрокаУдержаний.Категория) Тогда
					ПересчитыватьСтроку = Истина;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПересчитыватьСтроку Тогда
			НоваяСтрока = Удержания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			НастройкиПересчета.СоответствиеСтрокУдержаний.Вставить(НоваяСтрока, СтрокаУдержаний);
		Иначе
			Если СтрокаПересчета.ПересчитыватьНДФЛ И УдержаниеВлияетНаНДФЛ(СтрокаУдержаний.Удержание) Тогда
				// Удержание не требует расчета, но его нужно зарегистрировать для вычета НДФЛ.
				ЗаполнитьЗначенияСвойств(УдержанияБезРасчета.Добавить(), СтрокаУдержаний);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗарегистрироватьСоциальныеВычетыНДФЛ(УдержанияБезРасчета);
	
КонецПроцедуры

Процедура ЗавершитьПересчетУдержаний()
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из НастройкиПересчета.СоответствиеСтрокУдержаний Цикл
		ЗаполнитьЗначенияСвойств(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбъединениеСохранениемИсправлений

Процедура ОбъединитьНачисления(Начисления)
	
	ПоляКлюча = 
		"Сотрудник,
		|Начисление,
		|ДокументОснование, 
		|ПериодДействия";
		
	ПоляФиксЗаполнение = 
		"Организация,
		|Подразделение,
		|ГрафикРаботы,
		|ГрафикРаботыНорма,
		|ОбщийГрафик,
		|ПериодРегистрацииВремени,
		|ВремяВЧасах,
		|Категория,
		|Показатели";
	
	ПризнакиИсправления = Новый Массив;
	ПризнакиИсправления.Добавить("ФиксРасчет");
	ПризнакиИсправления.Добавить("ФиксЗаполнение");
	ПризнакиИсправления.Добавить("ФиксСтрока");
	ПризнакиИсправления.Добавить("ФиксРасчетВремени");
		
	ОбъединитьТаблицыСохраняяИсправления(Начисления, Зарплата.Начисления, ПризнакиИсправления, ПоляКлюча, ПоляФиксЗаполнение);
	
КонецПроцедуры

Процедура ОбъединитьДоговорыПодряда(ДоговорыПодряда)
	
	ПоляКлюча = 
		"Сотрудник,
		|ДокументОснование";
		
	ПоляФиксЗаполнение = 
		"Подразделение,
		|КодВычета,
		|КодДохода";
		
	ПризнакиИсправления = Новый Массив;
	ПризнакиИсправления.Добавить("ФиксРасчет");
	ПризнакиИсправления.Добавить("ФиксСтрока");
		
	ОбъединитьТаблицыСохраняяИсправления(ДоговорыПодряда, Зарплата.ДоговорыПодряда, ПризнакиИсправления, ПоляКлюча, ПоляФиксЗаполнение, Ложь);
	
КонецПроцедуры

Процедура ОбъединитьУдержания(Удержания)
	
	ПоляКлюча = 
		"ФизическоеЛицо,
		|Удержание,
		|ДокументОснование";
		
	ПоляФиксЗаполнение = 
		"Организация,
		|Подразделение,
		|Сотрудник,
		|Категория,
		|Показатели";
		
	ПризнакиИсправления = Новый Массив;
	ПризнакиИсправления.Добавить("ФиксРасчет");
	ПризнакиИсправления.Добавить("ФиксЗаполнение");
	ПризнакиИсправления.Добавить("ФиксСтрока");
		
	ОбъединитьТаблицыСохраняяИсправления(Удержания, Зарплата.Удержания, ПризнакиИсправления, ПоляКлюча, ПоляФиксЗаполнение);
	
КонецПроцедуры

Процедура ОбъединитьНДФЛ(НДФЛ)
	
	ПоляКлюча = ПоляКлючаОбъединенияНДФЛ();
	
	ПризнакиИсправления = ПризнакиИсправленияНДФЛ();
	ОбъединитьТаблицыСохраняяИсправления(НДФЛ, ЗарплатаМесяца.НДФЛ, ПризнакиИсправления, ПоляКлюча);
	
КонецПроцедуры

Функция ПоляКлючаОбъединенияНДФЛ()
	
	ПоляКлюча = 
		"ФизическоеЛицо,
		|МесяцНалоговогоПериода";
		
	Возврат ПоляКлюча;
	
КонецФункции

Функция ПризнакиИсправленияНДФЛ()
	
	Признаки = Новый Массив;
	Признаки.Добавить("ФиксРасчет");
	Признаки.Добавить("ФиксСтрока");
		
	Возврат Признаки;
	
КонецФункции

Процедура ОбъединитьТаблицыСохраняяИсправления(ТаблицаИсточник, ТаблицаПриемник, ПризнакиИсправления, ПоляКлюча, ПоляФиксЗаполнение = Неопределено, ПроверятьФиксЗаполнение = Истина)
	
	ИмяЗамера = "НачислениеЗарплаты.ОбъединениеКоллекцийССохранениемИсправлений";
	Замер = НачатьЗамерВремени();
	
	Если ТаблицаПриемник.Количество() = 0 Тогда
		// Нет исправлений.
		ТаблицаПриемник = ТаблицаИсточник;
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиРасчета.СохранятьИсправления Тогда
		// Не сохраняем исправления.
		ТаблицаПриемник = ТаблицаИсточник;
		Возврат;
	КонецЕсли;
	
	СочетанияОбъединения = ТаблицаПриемник.Скопировать(, ПоляКлюча);
	СочетанияОбъединения.Свернуть(ПоляКлюча);
	
	ОтборСтрок = Новый Структура(ПоляКлюча);
	Для Каждого Сочетание Из СочетанияОбъединения Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Сочетание);
		СтрокиПриемника = ТаблицаПриемник.НайтиСтроки(ОтборСтрок);
		СтрокиИсточника = ТаблицаИсточник.НайтиСтроки(ОтборСтрок);
		ЗаменитьИсправленныеСтроки(СтрокиПриемника, СтрокиИсточника, ТаблицаИсточник, ПризнакиИсправления, ПоляФиксЗаполнение, ПроверятьФиксЗаполнение);
	КонецЦикла;
	
	ТаблицаПриемник = ТаблицаИсточник;
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура ОбъединитьМассивыСтрокСохраняяИсправления(ТаблицаИсточник, ТаблицаПриемник, СтрокиПриемника, ПоляКлюча, ПризнакиИсправления)
	
	ИмяЗамера = "НачислениеЗарплаты.ОбъединениеКоллекцийССохранениемИсправлений";
	Замер = НачатьЗамерВремени();
	
	Если ТаблицаПриемник.Количество() = 0 Тогда
		// Нет исправлений.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник);
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиРасчета.СохранятьИсправления Тогда
		// Не сохраняем исправления.
		Для Каждого СтрокаПриемника Из СтрокиПриемника Цикл
			ТаблицаПриемник.Удалить(СтрокаПриемника);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник);
		Возврат;
	КонецЕсли;
	
	СочетанияОбъединения = ТаблицаПриемник.СкопироватьКолонки(ПоляКлюча);
	УдалитьСтрокиПриемника = Новый Массив;
	Для Каждого СтрокаПриемника Из СтрокиПриемника Цикл
		ЗаполнитьЗначенияСвойств(СочетанияОбъединения.Добавить(), СтрокаПриемника);
		УдалитьСтрокиПриемника.Добавить(СтрокаПриемника);
	КонецЦикла;	
	СочетанияОбъединения.Свернуть(ПоляКлюча);
	
	ОтборСтрок = Новый Структура(ПоляКлюча);
	Для Каждого Сочетание Из СочетанияОбъединения Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Сочетание);
		СтрокиПриемника = ТаблицаПриемник.НайтиСтроки(ОтборСтрок);
		СтрокиИсточника = ТаблицаИсточник.НайтиСтроки(ОтборСтрок);
		ЗаменитьИсправленныеСтроки(СтрокиПриемника, СтрокиИсточника, ТаблицаИсточник, ПризнакиИсправления, , Ложь);
	КонецЦикла;
	
	Для Каждого СтрокаПриемника Из УдалитьСтрокиПриемника Цикл
		ТаблицаПриемник.Удалить(СтрокаПриемника);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник);
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура ЗаменитьИсправленныеСтроки(СтрокиПриемника, СтрокиИсточника, ТаблицаИсточник, ПризнакиИсправления, ПоляФиксЗаполнение = Неопределено, ПроверятьФиксЗаполнение = Истина)
	
	УдалитьСтрокиПриемника = Новый Массив;
	ЕстьИсправленныеСтроки = Ложь;
	Для Каждого СтрокаПриемника Из СтрокиПриемника Цикл
		Если СтрокаИсправлена(СтрокаПриемника, ПризнакиИсправления) Тогда
			ЕстьИсправленныеСтроки = Истина;
		КонецЕсли;
		Если СтрокиИсточника.Количество() = 0 Тогда 
			// Если в учете уже нет строк с таким ключом, удаляем их, если они только не были добавлены вручную (ФиксСтрока).
			Если Не СтрокаПриемника.ФиксСтрока Тогда
				УдалитьСтрокиПриемника.Добавить(СтрокаПриемника);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ПоляФиксЗаполнение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Если строки есть, и в них 
		//	- зафиксировано заполнение - оставляем как есть,
		//	- не зафиксировано заполнение - пытаемся совместить и обновляем заполнение.
		Если ПроверятьФиксЗаполнение И СтрокаПриемника.ФиксЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаИсточника Из СтрокиИсточника Цикл
			Если СтрокаИсточника.ДатаНачала = СтрокаПриемника.ДатаНачала Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника, ПоляФиксЗаполнение);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЕстьИсправленныеСтроки Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из УдалитьСтрокиПриемника Цикл
		ИндексСтроки = СтрокиПриемника.Найти(Строка);
		СтрокиПриемника.Удалить(ИндексСтроки);
	КонецЦикла;
	Для Каждого Строка Из СтрокиИсточника Цикл
		ТаблицаИсточник.Удалить(Строка);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиПриемника, ТаблицаИсточник);
	
КонецПроцедуры

Функция СтрокаИсправлена(Строка, ПризнакиИсправления)
	
	Для Каждого Признак Из ПризнакиИсправления Цикл
		Если Строка[Признак] = Истина Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ДатаНачалаСобытия

Функция ТаблицаДатыНачалаСобытия() 
	
	ДатыНачалаСобытия = Новый ТаблицаЗначений;
	ДатыНачалаСобытия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДатыНачалаСобытия.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Возврат ДатыНачалаСобытия;
	
КонецФункции

#КонецОбласти

#Область КадровыйУчет

Функция ТаблицаДатыЗавершенияРаботы() 
	
	ДатыЗавершенияРаботы = Новый ТаблицаЗначений;
	ДатыЗавершенияРаботы.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДатыЗавершенияРаботы.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Возврат ДатыЗавершенияРаботы;
	
КонецФункции

Процедура СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, ТолькоРазрешенные, КадровыеДанные) Экспорт
	
	Если СтрНайти(КадровыеДанные, "ДатаЗавершенияРаботы") = 0 И СтрНайти(КадровыеДанные, "ДатаУвольнения") = 0 Тогда
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, КадровыеДанные);
		Возврат;
	КонецЕсли;
	
	ДатыЗавершенияРаботы = Неопределено;
	ДополнительныеСвойства.Свойство("ДатыЗавершенияРаботы", ДатыЗавершенияРаботы);
	Если ДатыЗавершенияРаботы = Неопределено Тогда
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, КадровыеДанные);
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	ИмяИтоговойВТ = ОписательВТ.ИмяВТКадровыеДанныеСотрудников;
	ОписательВТ.ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудниковВременная";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, КадровыеДанные);
	УдалитьВТ.Добавить("ВТКадровыеДанныеСотрудниковВременная");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательВТ.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатыЗавершенияРаботы", ДатыЗавершенияРаботы);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыЗавершенияРаботы.Сотрудник,
		|	ДатыЗавершенияРаботы.Дата
		|ПОМЕСТИТЬ ВТДатыЗавершенияРаботы
		|ИЗ
		|	&ДатыЗавершенияРаботы КАК ДатыЗавершенияРаботы";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДатыЗавершенияРаботы");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник,
		|	ЕСТЬNULL(ДатыЗавершенияРаботы.Дата, КадровыеДанные.ДатаЗавершенияРаботы) КАК ДатаЗавершенияРаботы,
		|	ЕСТЬNULL(ДатыЗавершенияРаботы.Дата, КадровыеДанные.ДатаУвольнения) КАК ДатаУвольнения,
		|	&КадровыеДанные
		|ПОМЕСТИТЬ ВТИмяИтоговойВТ
		|ИЗ
		|	ВТКадровыеДанныеСотрудниковВременная КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыЗавершенияРаботы КАК ДатыЗавершенияРаботы
		|		ПО (ДатыЗавершенияРаботы.Сотрудник = КадровыеДанные.Сотрудник)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИмяИтоговойВТ", ИмяИтоговойВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КадровыеДанные", КадровыеДанные);
	Если СтрНайти(КадровыеДанные, "ДатаЗавершенияРаботы") = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕСТЬNULL(ДатыЗавершенияРаботы.Дата, КадровыеДанные.ДатаЗавершенияРаботы) КАК ДатаЗавершенияРаботы,", "");
	КонецЕсли;
	Если СтрНайти(КадровыеДанные, "ДатаУвольнения") = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕСТЬNULL(ДатыЗавершенияРаботы.Дата, КадровыеДанные.ДатаУвольнения) КАК ДатаУвольнения,", "");
	КонецЕсли;
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(ОписательВТ.МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТКадровыеИзмененияИнтервалы(ОписаниеВТСотрудникиПериоды)
	
	Если ВТСуществует("ВТКадровыеИзмененияИнтервалы") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписаниеВТСотрудникиПериоды.ИмяВТ, 
		"Сотрудник,Организация");
	
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраПериоды(
		"КадроваяИсторияСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТИнтервалыКадроваяИсторияСотрудников");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписаниеВТСотрудникиПериоды.ИмяВТ, 
		"Сотрудник");
	
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраПериоды(
		"ВидыЗанятостиСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТИнтервалыВидыЗанятостиСотрудников");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(КадроваяИстория.Сотрудник, ВидыЗанятости.Сотрудник) КАК Сотрудник,
		|	ЕСТЬNULL(КадроваяИстория.ГоловнаяОрганизация, ВидыЗанятости.ГоловнаяОрганизация) КАК ГоловнаяОрганизация,
		|	ЕСТЬNULL(КадроваяИстория.ФизическоеЛицо, ВидыЗанятости.ФизическоеЛицо) КАК ФизическоеЛицо,
		|	ЕСТЬNULL(КадроваяИстория.ДатаНачала, ВидыЗанятости.ДатаНачала) КАК ДатаНачала,
		|	ЕСТЬNULL(КадроваяИстория.НачалоПериода, ВидыЗанятости.НачалоПериода) КАК НачалоПериода,
		|	ЕСТЬNULL(КадроваяИстория.ДатаОкончания, ВидыЗанятости.ДатаОкончания) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТВсеДатыНачала
		|ИЗ
		|	ВТИнтервалыКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТИнтервалыВидыЗанятостиСотрудников КАК ВидыЗанятости
		|		ПО КадроваяИстория.Сотрудник = ВидыЗанятости.Сотрудник
		|			И КадроваяИстория.ГоловнаяОрганизация = ВидыЗанятости.ГоловнаяОрганизация
		|			И КадроваяИстория.ФизическоеЛицо = ВидыЗанятости.ФизическоеЛицо
		|			И КадроваяИстория.НачалоПериода = ВидыЗанятости.НачалоПериода
		|			И КадроваяИстория.ДатаОкончания = ВидыЗанятости.ДатаОкончания
		|			И КадроваяИстория.ДатаНачала = ВидыЗанятости.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеДатыНачала.Сотрудник КАК Сотрудник,
		|	ВсеДатыНачала.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВсеДатыНачала.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВсеДатыНачала.ДатаНачала КАК ДатаНачала,
		|	ВсеДатыНачала.НачалоПериода КАК НачалоПериода,
		|	ВсеДатыНачала.ДатаОкончания КАК ДатаОкончания,
		|	ЕСТЬNULL(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(МИНИМУМ(ВсеДатыНачалаСледующие.НачалоПериода), ДЕНЬ, -1), ДЕНЬ), ВсеДатыНачала.ДатаОкончания) КАК КонецПериода,
		|	ДатыНачалаСведений.НачалоПериодаКадроваяИстория КАК НачалоПериодаКадроваяИстория,
		|	ДатыНачалаСведений.НачалоПериодаВидыЗанятости КАК НачалоПериодаВидыЗанятости
		|ПОМЕСТИТЬ ВТКадровыеИзмененияСДатамиНачала
		|ИЗ
		|	ВТВсеДатыНачала КАК ВсеДатыНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеДатыНачала КАК ВсеДатыНачалаСледующие
		|		ПО ВсеДатыНачала.Сотрудник = ВсеДатыНачалаСледующие.Сотрудник
		|			И ВсеДатыНачала.ГоловнаяОрганизация = ВсеДатыНачалаСледующие.ГоловнаяОрганизация
		|			И ВсеДатыНачала.ФизическоеЛицо = ВсеДатыНачалаСледующие.ФизическоеЛицо
		|			И ВсеДатыНачала.ДатаОкончания = ВсеДатыНачалаСледующие.ДатаОкончания
		|			И ВсеДатыНачала.ДатаНачала = ВсеДатыНачалаСледующие.ДатаНачала
		|			И ВсеДатыНачала.НачалоПериода < ВсеДатыНачалаСледующие.НачалоПериода
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВсеДатыНачала.Сотрудник КАК Сотрудник,
		|			ВсеДатыНачала.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|			ВсеДатыНачала.ФизическоеЛицо КАК ФизическоеЛицо,
		|			ВсеДатыНачала.ДатаНачала КАК ДатаНачала,
		|			ВсеДатыНачала.НачалоПериода КАК НачалоПериода,
		|			ВсеДатыНачала.ДатаОкончания КАК ДатаОкончания,
		|			МАКСИМУМ(КадроваяИстория.НачалоПериода) КАК НачалоПериодаКадроваяИстория,
		|			МАКСИМУМ(ВидыЗанятости.НачалоПериода) КАК НачалоПериодаВидыЗанятости
		|		ИЗ
		|			ВТВсеДатыНачала КАК ВсеДатыНачала
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыКадроваяИсторияСотрудников КАК КадроваяИстория
		|				ПО ВсеДатыНачала.Сотрудник = КадроваяИстория.Сотрудник
		|					И ВсеДатыНачала.ГоловнаяОрганизация = КадроваяИстория.ГоловнаяОрганизация
		|					И ВсеДатыНачала.ФизическоеЛицо = КадроваяИстория.ФизическоеЛицо
		|					И ВсеДатыНачала.НачалоПериода >= КадроваяИстория.НачалоПериода
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыВидыЗанятостиСотрудников КАК ВидыЗанятости
		|				ПО ВсеДатыНачала.Сотрудник = ВидыЗанятости.Сотрудник
		|					И ВсеДатыНачала.ГоловнаяОрганизация = ВидыЗанятости.ГоловнаяОрганизация
		|					И ВсеДатыНачала.ФизическоеЛицо = ВидыЗанятости.ФизическоеЛицо
		|					И ВсеДатыНачала.НачалоПериода >= ВидыЗанятости.НачалоПериода
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВсеДатыНачала.Сотрудник,
		|			ВсеДатыНачала.ГоловнаяОрганизация,
		|			ВсеДатыНачала.ФизическоеЛицо,
		|			ВсеДатыНачала.ДатаНачала,
		|			ВсеДатыНачала.НачалоПериода,
		|			ВсеДатыНачала.ДатаОкончания) КАК ДатыНачалаСведений
		|		ПО ВсеДатыНачала.Сотрудник = ДатыНачалаСведений.Сотрудник
		|			И ВсеДатыНачала.ГоловнаяОрганизация = ДатыНачалаСведений.ГоловнаяОрганизация
		|			И ВсеДатыНачала.ФизическоеЛицо = ДатыНачалаСведений.ФизическоеЛицо
		|			И ВсеДатыНачала.ДатаНачала = ДатыНачалаСведений.ДатаНачала
		|			И ВсеДатыНачала.НачалоПериода = ДатыНачалаСведений.НачалоПериода
		|			И ВсеДатыНачала.ДатаОкончания = ДатыНачалаСведений.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеДатыНачала.Сотрудник,
		|	ВсеДатыНачала.ГоловнаяОрганизация,
		|	ВсеДатыНачала.ФизическоеЛицо,
		|	ВсеДатыНачала.ДатаНачала,
		|	ВсеДатыНачала.НачалоПериода,
		|	ВсеДатыНачала.ДатаОкончания,
		|	ДатыНачалаСведений.НачалоПериодаКадроваяИстория,
		|	ДатыНачалаСведений.НачалоПериодаВидыЗанятости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеИзмененияСДатамиНачала.Сотрудник КАК Сотрудник,
		|	КадровыеИзмененияСДатамиНачала.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадровыеИзмененияСДатамиНачала.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеИзмененияСДатамиНачала.ДатаНачала КАК ДатаНачала,
		|	КадровыеИзмененияСДатамиНачала.НачалоПериода КАК НачалоПериода,
		|	КадровыеИзмененияСДатамиНачала.КонецПериода КАК КонецПериода,
		|	КадровыеИзмененияСДатамиНачала.ДатаОкончания КАК ДатаОкончания,
		|	КадроваяИстория.*,
		|	ВидыЗанятости.*
		|ПОМЕСТИТЬ ВТКадровыеИзмененияИнтервалы
		|ИЗ
		|	ВТКадровыеИзмененияСДатамиНачала КАК КадровыеИзмененияСДатамиНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО КадровыеИзмененияСДатамиНачала.Сотрудник = КадроваяИстория.Сотрудник
		|			И КадровыеИзмененияСДатамиНачала.ГоловнаяОрганизация = КадроваяИстория.ГоловнаяОрганизация
		|			И КадровыеИзмененияСДатамиНачала.ФизическоеЛицо = КадроваяИстория.ФизическоеЛицо
		|			И КадровыеИзмененияСДатамиНачала.НачалоПериодаКадроваяИстория = КадроваяИстория.НачалоПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыВидыЗанятостиСотрудников КАК ВидыЗанятости
		|		ПО КадровыеИзмененияСДатамиНачала.Сотрудник = ВидыЗанятости.Сотрудник
		|			И КадровыеИзмененияСДатамиНачала.ГоловнаяОрганизация = ВидыЗанятости.ГоловнаяОрганизация
		|			И КадровыеИзмененияСДатамиНачала.ФизическоеЛицо = ВидыЗанятости.ФизическоеЛицо
		|			И КадровыеИзмененияСДатамиНачала.НачалоПериодаВидыЗанятости = ВидыЗанятости.НачалоПериода";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТКадровыеДанныеСотрудниковПоОписаниюВТСотрудники(ОписаниеВТСотрудники, ПоляДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, ОписаниеВТСотрудники.ИмяВТ);
	СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, ПоляДанных);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьВТСтажиСотрудников(ИмяВТИсходныеДанные)
	
	Если ВТСуществует("ВТСтажиСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчетРасширенный.СоздатьВТСтажиСотрудников(МенеджерВременныхТаблиц, Ложь, ИмяВТИсходныеДанные, "ВТСтажиСотрудников");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьВТПроцентСевернойНадбавкиСотрудников(ИмяВТСотрудникиПериоды)
	
	Если ВТСуществует("ВТПроцентСевернойНадбавкиСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	ОписательТаблиц = КадровыйУчетРасширенный.ОписательВременныхТаблицДляСоздатьВТПроцентСевернойНадбавкиСотрудников(
		МенеджерВременныхТаблиц,
		ИмяВТСотрудникиПериоды,
		"ВТПроцентСевернойНадбавкиСотрудников");
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчетРасширенный.СоздатьВТПроцентСевернойНадбавкиСотрудников(ОписательТаблиц);	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьВТОсновныеСотрудникиФизическихЛиц(ОписаниеВТФизическиеЛицаПериоды)
	
	Если ВТСуществует("ВТОсновныеСотрудникиФизическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	// Выбираем физических лиц.
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаПериоды.ФизическоеЛицо
		|ИЗ
		|	ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаПериоды", ОписаниеВТФизическиеЛицаПериоды.ИмяВТ);
		
	ФизическиеЛицаМассив = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФизическиеЛицаМассив.Добавить(Выборка.ФизическоеЛицо);
	КонецЦикла;
	
	// Выбираем даты.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МИНИМУМ(ФизическиеЛицаПериоды.НачалоПериода) КАК МинимальнаяДата,
		|	МАКСИМУМ(ФизическиеЛицаПериоды.ОкончаниеПериода) КАК МаксимальнаяДата
		|ИЗ
		|	ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаПериоды", ОписаниеВТФизическиеЛицаПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.НачалоПериода", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.ОкончаниеПериода", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляОкончаниеПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	// Получаем сотрудников с организациями.
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц(
		МенеджерВременныхТаблиц, 
		Ложь, 
		ФизическиеЛицаМассив, 
		ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация), 
		Выборка.МинимальнаяДата, 
		Выборка.МинимальнаяДата);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область НДФЛ

Процедура РассчитатьНДФЛ()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетНДФЛСУчетомДоходов";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	Начисления = ЗарплатаМесяца.Начисления;
	ДоговорыПодряда = ЗарплатаМесяца.ДоговорыПодряда;
	
	НачатьПересчетНДФЛ(Начисления, ДоговорыПодряда);
	
	УдалитьВТ = Новый Массив;
	
	СформироватьДоходыНДФЛ(Начисления, ДоговорыПодряда);
	
	СоздатьВТФизическиеЛица(Начисления, ДоговорыПодряда);
	
	НДФЛ = РезультатРасчетаНДФЛ();
	ЗавершитьПересчетНДФЛ(НДФЛ);
	
	ЗарегистрироватьНДФЛ();
	
	УничтожитьВТ(УдалитьВТ);
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Функция РезультатРасчетаНДФЛ()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетНДФЛ";
	Замер = НачатьЗамерВремени();
	
	УстановитьПривилегированныйРежим(Истина);
	НДФЛ = УчетНДФЛ.РассчитатьНалогПоОсновнойСтавке(
		ИсключаемыйРегистратор, 
		Организация, 
		МесяцНачисления, 
		МенеджерВременныхТаблиц, , , , 
		НастройкиНДФЛ.ОкончательныйРасчет, 
		НастройкиНДФЛ.ДатаВыплаты);
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатРасчетаНДФЛВТаблицу(НДФЛ);
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	Возврат НДФЛ;
	
КонецФункции

Процедура РезультатРасчетаНДФЛВТаблицу(НДФЛ)
	
	Для Каждого СтрокаНДФЛ Из НДФЛ Цикл
		СтрокаНДФЛ.Налог = СтрокаНДФЛ.НалогПоСтавке13;
		СтрокаНДФЛ.ЗачтеноАвансовыхПлатежей = СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13;
		СтрокаНДФЛ.ПримененныйВычетЛичныйКодВычета = СтрокаНДФЛ.КодВычетаЛичный;
		СтрокаНДФЛ.Сумма = СтрокаНДФЛ.НалогПоСтавке13 - СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13;
	КонецЦикла;
	
КонецПроцедуры

Процедура ТаблицуНДФЛВРезультатРасчета(НДФЛ)
	
	Для Каждого СтрокаНДФЛ Из НДФЛ Цикл
		СтрокаНДФЛ.НалогПоСтавке13 = СтрокаНДФЛ.Налог;
		СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13 = СтрокаНДФЛ.ЗачтеноАвансовыхПлатежей;
		СтрокаНДФЛ.КодВычетаЛичный = СтрокаНДФЛ.ПримененныйВычетЛичныйКодВычета;
		СтрокаНДФЛ.Сумма = СтрокаНДФЛ.НалогПоСтавке13 - СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьНДФЛ()
	
	ЗамерРегистрацияНДФЛ = НачатьЗамерВремени();
	
	Если Не РасчетОдногоМесяца Тогда
		НДФЛ = ЗарплатаМесяца.НДФЛ.Скопировать();
	Иначе
		НДФЛ = ЗарплатаМесяца.НДФЛ;
	КонецЕсли;
	
	НачатьРегистрациюНДФЛ(НДФЛ);
	
	УстановитьПривилегированныйРежим(Истина);
	УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(
		НаборыЗаписей, 
		Ложь, 
		Организация, 
		МесяцНачисления, 
		НДФЛ, 
		МенеджерВременныхТаблиц, 
		Неопределено, 
		Ложь, 
		Истина, 
		Не НастройкиНДФЛ.ОкончательныйРасчет);	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.НачисленияУдержанияПоСотрудникам, Истина);
	
	Если Не РасчетОдногоМесяца 
		И НастройкиНДФЛ.ОкончательныйРасчет Тогда
		НДФЛ.Колонки.Удалить("РаспределениеПоСтатьям");
		УчетНДФЛ.СформироватьНалогиВычеты(
			НаборыЗаписей,
			Ложь,
			Организация,
			КонецМесяца(МесяцНачисления),
			НДФЛ,,
			НастройкиРасчета.ОкончательныйРасчет);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗакончитьЗамерВремени("НачислениеЗарплаты.РегистрацияНДФЛ", ЗамерРегистрацияНДФЛ);
	
КонецПроцедуры

Процедура НачатьРегистрациюНДФЛ(НДФЛ)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	НДФЛ = УчетНДФЛ.ТаблицаНДФЛ();
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтНДФЛ", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
	
	Для Каждого СтрокаТаблицы Из ЗарплатаМесяца.НДФЛ Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаТаблицы.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НДФЛ.Добавить(), СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура НачатьПересчетНДФЛ(Начисления, ДоговорыПодряда)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицуНДФЛВРезультатРасчета(ЗарплатаМесяца.НДФЛ);
	
	Начисления = ТаблицаНачислений();
	ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьНДФЛ", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
	НастройкиПересчета.ФизическиеЛицаРасчетаНДФЛ = ФизическиеЛицаМассив;
	
	Для Каждого СтрокаНачислений Из ЗарплатаМесяца.Начисления Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаНачислений.ФизическоеЛицо) <> Неопределено Тогда
			НоваяСтрока = Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
			НастройкиПересчета.СоответствиеСтрокНачислений.Вставить(НоваяСтрока, СтрокаНачислений);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНачислений Из ЗарплатаМесяца.ДоговорыПодряда Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаНачислений.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДоговорыПодряда.Добавить(), СтрокаНачислений);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьПересчетНДФЛ(НДФЛ)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		ОбъединитьНДФЛ(НДФЛ);
		Возврат;
	КонецЕсли;
	
	Если НастройкиПересчета.ФизическиеЛицаРасчетаНДФЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем из коллекции строки по физическим лицам, по которым был выполнен пересчет.
	НайденныеСтроки = НайтиСтрокиОтборПоМассиву(ЗарплатаМесяца.НДФЛ, "ФизическоеЛицо", НастройкиПересчета.ФизическиеЛицаРасчетаНДФЛ);
	ОбъединитьМассивыСтрокСохраняяИсправления(НДФЛ, ЗарплатаМесяца.НДФЛ, НайденныеСтроки, ПоляКлючаОбъединенияНДФЛ(), ПризнакиИсправленияНДФЛ());
	
	УничтожитьВТ("ВТФизическиеЛица");
	
КонецПроцедуры

Процедура СоздатьВТРаспределениеПоТерриториямУсловиямТруда(Начисления)
	
	Если ВТСуществует("ВТРаспределениеПоТерриториямУсловиямТруда") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиУчета.ИспользоватьТерриторииУсловияТруда Тогда
		Запрос = НовыйЗапрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	0 КАК ИдентификаторСтроки,
			|	ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка) КАК Территория,
			|	ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка) КАК УсловияТруда,
			|	0 КАК Результат,
			|	0 КАК СуммаВычета
			|ПОМЕСТИТЬ ВТРаспределениеПоТерриториямУсловиямТруда";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	ТерриторииУсловияТруда = ТаблицаТерриторийУсловийТруда();
	
	Для Каждого Строка Из Начисления Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Строка.ТерриторииУсловияТруда, ТерриторииУсловияТруда);
	КонецЦикла;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ТерриторииУсловияТруда", ТерриторииУсловияТруда);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТерриторииУсловияТруда.ИдентификаторСтроки,
		|	ТерриторииУсловияТруда.Территория,
		|	ТерриторииУсловияТруда.УсловияТруда,
		|	ТерриторииУсловияТруда.Результат,
		|	ТерриторииУсловияТруда.СуммаВычета
		|ПОМЕСТИТЬ ВТРаспределениеПоТерриториямУсловиямТруда
		|ИЗ
		|	&ТерриторииУсловияТруда КАК ТерриторииУсловияТруда";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТНачисленияДляРегистрацииДоходовНДФЛ(Начисления)
	
	УдалитьВТ = Новый Массив;
	
	ДобавитьИдентификаторСтрокиБухучета(Начисления);
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.ИдентификаторСтрокиБухучет КАК ИдентификаторСтрокиБухучет,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Начисления.Сторно
	|				ИЛИ Начисления.ФиксСторно
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Сторно,
	|	Начисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	Начисления.Результат КАК Результат,
	|	Начисления.СуммаВычета КАК СуммаВычета,
	|	Начисления.КодВычета КАК КодВычета,
	|	Начисления.КоличествоДетей КАК КоличествоДетей,
	|	Начисления.ВычетПредоставленныйДругомуРодителю КАК ВычетПредоставленныйДругомуРодителю,
	|	Начисления.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТНачисленияТаблица
	|ИЗ
	|	&Начисления КАК Начисления";
	
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТНачисленияТаблица");
	
	ЗаполнитьВычетыКДоходамНДФЛ(Начисления);
	
	СоздатьВТРаспределениеПоТерриториямУсловиямТруда(Начисления);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтрокиБухучет КАК ИдентификаторСтроки,
	|	0 КАК СуммаЗаСчетГрантов,
	|	ЕСТЬNULL(Распределение.Результат, Начисления.Результат) КАК СуммаДохода,
	|	ЕСТЬNULL(Распределение.СуммаВычета, Начисления.СуммаВычета) КАК СуммаВычетаНДФЛ,
	|	ВЫБОР
	|		КОГДА Распределение.Территория ЕСТЬ НЕ NULL 
	|				И Распределение.Территория <> НЕОПРЕДЕЛЕНО
	|				И Распределение.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
	|			ТОГДА Распределение.Территория
	|		ИНАЧЕ Начисления.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	Распределение.Территория КАК ТерриторияВыполненияРаботВОрганизации,
	|	ЕСТЬNULL(Распределение.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)) КАК УсловияТруда,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Начисление,
	|	Начисления.ДатаНачала,
	|	Начисления.Сторно,
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.Подразделение КАК ПодразделениеОрганизации,
	|	Начисления.КодВычета КАК КодВычетаНДФЛ
	|ПОМЕСТИТЬ ВТНачисленияДляРегистрацииДоходовНДФЛ
	|ИЗ
	|	ВТНачисленияТаблица КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториямУсловиямТруда КАК Распределение
	|		ПО (Распределение.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)";
	Запрос.Выполнить();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Если Модуль.ИспользуютсяГрантыНеоблагаемыеНДФЛ() Тогда
			БухучетНачислений = БухучетНачисленийИзКоллекцииСтрок(Начисления);
			ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетНачислений, "БухучетНачисленийДляРегистрацииДоходовНДФЛ");
			УдалитьВТ.Добавить("БухучетНачисленийДляРегистрацииДоходовНДФЛ");
			Модуль.ВыделитьСуммуЗаСчетГрантовИзНачислений(МенеджерВременныхТаблиц, "ВТНачисленияДляРегистрацииДоходовНДФЛ", "БухучетНачисленийДляРегистрацииДоходовНДФЛ");
		КонецЕсли;
	КонецЕсли;
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СформироватьДоходыНДФЛ(Начисления, ДоговорыПодряда)
	
	ИмяЗамера = "НачислениеЗарплаты.ФормированиеДоходовНДФЛ";
	Замер = НачатьЗамерВремени();
	
	ДатаОперации = КонецМесяца(МесяцНачисления);
	Если Не ЗначениеЗаполнено(НастройкиНДФЛ.ДатаВыплаты) Тогда 
		НастройкиНДФЛ.ДатаВыплаты = ДатаОперации;
	КонецЕсли;
	
	Если ЭтоИсправлениеТекущимПериодом Тогда
		ПараметрыСторнирования = Новый Структура;
		ПараметрыСторнирования.Вставить("ИсправлениеВТекущемПериоде", Истина);
		ПараметрыСторнирования.Вставить("ОтменаДокумента", Ложь);
		ПараметрыСторнирования.Вставить("ПериодРегистрации", МесяцНачисления);
		
		УчетНДФЛРасширенный.СторнироватьДвиженияДокумента(НаборыЗаписей, ИсправленныйДокумент, ПараметрыСторнирования, ИсключаемыйРегистратор);
	КонецЕсли;

	
	СформироватьДоходыНДФЛПоНачислениям(Начисления, ДатаОперации);
	СформироватьДоходыНДФЛПоДоговорамПодряда(ДоговорыПодряда, ДатаОперации);
	
	ПроведениеРасширенныйСервер.ВыполнитьЗапланированныеКорректировкиДвижений(НаборыЗаписей);
	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.СведенияОДоходахНДФЛ);
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.АвансовыеПлатежиИностранцевПоНДФЛ);
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.ИмущественныеВычетыНДФЛ);
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ, Истина);
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.РасчетыНалогоплательщиковСБюджетомПоНДФЛ);
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура СформироватьДоходыНДФЛПоНачислениям(Начисления, ДатаОперации)
	
	Если Не НастройкиРасчета.РассчитыватьНачисления Тогда
		Возврат;
	КонецЕсли;
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СоздатьВТНачисленияДляРегистрацииДоходовНДФЛ(Начисления);
	УдалитьВТ.Добавить("ВТНачисленияДляРегистрацииДоходовНДФЛ");
	
	УстановитьПривилегированныйРежим(Истина);
	УчетНДФЛРасширенный.СформироватьДоходыНДФЛПоНачислениям(
		НаборыЗаписей, 
		Ложь, 
		Организация, 
		ДатаОперации, 
		НастройкиНДФЛ.ДатаВыплаты, 
		МенеджерВременныхТаблиц, 
		МесяцНачисления, 
		Ложь, 
		НастройкиНДФЛ.ОкончательныйРасчет, 
		"ВТНачисленияДляРегистрацииДоходовНДФЛ", 
		ИсключаемыйРегистратор, 
		МенеджерКадровогоУчета(),
		НастройкиНДФЛ.ДоходПолученНаТерриторииРФ);
	УстановитьПривилегированныйРежим(Ложь);
		
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СформироватьДоходыНДФЛПоДоговорамПодряда(ДоговорыПодряда, ДатаОперации)
	
	Если Не НастройкиРасчета.РассчитыватьДоговорыПодряда Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоговорыПодряда.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиУчета.ИспользоватьТерритории Тогда
		ДоговорыСТерриториями = ДоговорыПодряда.СкопироватьКолонки();
		ДоговорыСТерриториями.Колонки.Подразделение.Имя = "ПодразделениеСотрудника";
		ДоговорыСТерриториями.Колонки.Добавить("Подразделение", Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип);
		Для Каждого СтрокаДоговора Из ДоговорыПодряда Цикл
			Если СтрокаДоговора.ТерриторииУсловияТруда.Количество() = 0 Тогда
				СтрокаДоговораСТерриториями = ДоговорыСТерриториями.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоговораСТерриториями, СтрокаДоговора);
				СтрокаДоговораСТерриториями.ПодразделениеСотрудника = СтрокаДоговора.Подразделение;
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаТерритории Из СтрокаДоговора.ТерриторииУсловияТруда Цикл
				СтрокаДоговораСТерриториями = ДоговорыСТерриториями.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоговораСТерриториями, СтрокаДоговора);
				ЗаполнитьЗначенияСвойств(СтрокаДоговораСТерриториями, СтрокаТерритории, "Результат, СуммаВычета");
				СтрокаДоговораСТерриториями.ПодразделениеСотрудника = СтрокаДоговора.Подразделение;
				Если ЗначениеЗаполнено(СтрокаТерритории.Территория) Тогда
					СтрокаДоговораСТерриториями.Подразделение = СтрокаТерритории.Территория;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ДоговорыСТерриториями = ДоговорыПодряда;
		ДоговорыСТерриториями.Колонки.Добавить("ПодразделениеСотрудника", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ДоговорыСТерриториями.ЗагрузитьКолонку(ДоговорыСТерриториями.ВыгрузитьКолонку("Подразделение"), "ПодразделениеСотрудника");
	КонецЕсли;
	
	ДоходыОтобранные = ДоходыПоДоговорамПодрядаОблагаемыеНДФЛ(ДоговорыСТерриториями);
	
	ИменаКолонок = 
		"Сотрудник,
		|ФизическоеЛицо,
		|Начисление,
		|ПланируемаяДатаВыплаты,
		|КодДохода,
		|КатегорияДохода,
		|КодДоходаСтраховыеВзносы,
		|Результат,
		|КодВычета,
		|СуммаВычета,
		|Подразделение,
		|ПодразделениеСотрудника";
	
	Доходы = ДоходыОтобранные.Скопировать(, ИменаКолонок);
	Доходы.Колонки["ПланируемаяДатаВыплаты"].Имя = "ДатаПолученияДохода";
	Доходы.Колонки["Результат"].Имя = "СуммаДохода";
	
	ОтборСтрокПустаяДата = Новый Структура("ДатаПолученияДохода", Дата(1, 1, 1));
	УдаляемыеСтроки = Доходы.НайтиСтроки(ОтборСтрокПустаяДата);
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Доходы.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(
		НаборыЗаписей, 
		Ложь, 
		Организация, 
		ДатаОперации, 
		Доходы, 
		Ложь, 
		НастройкиНДФЛ.ОкончательныйРасчет);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ДоходыПоДоговорамПодрядаОблагаемыеНДФЛ(ДоговорыПодряда)
	Количество = ДоговорыПодряда.Количество();
	Если Количество = 0 Тогда
		Возврат ДоговорыПодряда;
	КонецЕсли;
	ФильтроватьПоФлажкуНДФЛ = РасчетЗарплатыРасширенный.ВыплатыПоДоговорамГПХМогутНеОблагатьсяНДФЛ();
	ФильтроватьПоСтатьеФинансированияГрантов = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ");
	Если Не ФильтроватьПоФлажкуНДФЛ И Не ФильтроватьПоСтатьеФинансированияГрантов Тогда
		Возврат ДоговорыПодряда;
	КонецЕсли;
	
	Доходы = ДоговорыПодряда.Скопировать();
	
	Если ФильтроватьПоФлажкуНДФЛ Тогда
		ОбратныйИндекс = Количество;
		Пока ОбратныйИндекс > 0 Цикл
			ОбратныйИндекс = ОбратныйИндекс - 1;
			Если Доходы[ОбратныйИндекс].НеОблагаетсяНДФЛ Тогда
				Доходы.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ФильтроватьПоСтатьеФинансированияГрантов Тогда
		УдалитьВТ = Новый Массив;
		
		Если Не ВТСуществует(ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам) Тогда
			
			ДобавитьИдентификаторСтрокиБухучета(Доходы);
			БухучетДоговорыГПХ = БухучетНачисленийИзКоллекцииСтрок(Доходы);
			
			ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетДоговорыГПХ, ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
			УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяВТБухучетНачислений", ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
		ДополнительныеПараметры.Вставить("ИмяКолонкиИдентификаторСтроки", "ИдентификаторСтрокиБухучет");
		ДополнительныеПараметры.Вставить("ИмяКолонкиСуммаДохода", "Результат");
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Модуль.ОтобратьДоходыПоДоговорамПодрядаОблагаемыеНДФЛ(МенеджерВременныхТаблиц, Доходы, ДополнительныеПараметры);
		
		УничтожитьВТ(УдалитьВТ);
	КонецЕсли;
	
	Возврат Доходы;
КонецФункции

Процедура СоздатьВТФизическиеЛицаПоСотрудникам()
	
	ТекстСообщения = НСтр("ru = 'Заполнение НастройкиРасчета.Сотрудники является обязательным.'");
	ОбщегоНазначенияКлиентСервер.Проверить(НастройкиРасчета.Сотрудники <> Неопределено, ТекстСообщения, "СоздатьВТФизическиеЛицаПоСотрудникам");
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Сотрудники", НастройкиРасчета.Сотрудники);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)";
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьВТФизическиеЛицаПоТаблицеПересчета()
	
	Если ПересчетФизическихЛиц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ПересчетФизическихЛиц", ПересчетФизическихЛиц);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПересчетФизическихЛиц.ФизическоеЛицо,
		|	ПересчетФизическихЛиц.ПересчитыватьНДФЛ,
		|	ПересчетФизическихЛиц.ПересчитыватьВзносы
		|ПОМЕСТИТЬ ВТПересчетФизическихЛиц
		|ИЗ
		|	&ПересчетФизическихЛиц КАК ПересчетФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПересчетФизическихЛиц.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	ВТПересчетФизическихЛиц КАК ПересчетФизическихЛиц
		|ГДЕ
		|	(ПересчетФизическихЛиц.ПересчитыватьНДФЛ = ИСТИНА
		|			ИЛИ ПересчетФизическихЛиц.ПересчитыватьВзносы = ИСТИНА)";
	Запрос.Выполнить();
	
	УничтожитьВТ("ВТПересчетФизическихЛиц");
	
КонецПроцедуры

Процедура СоздатьВТФизическиеЛица(Начисления, ДоговорыПодряда)
	
	Если ВТСуществует("ВТФизическиеЛица") Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиПересчета.ВыполнятьПересчет Тогда
		СоздатьВТФизическиеЛицаПоТаблицеПересчета();
		Возврат;
	КонецЕсли;
	
	Если НастройкиРасчета.ОкончательныйРасчет Тогда
		СоздатьВТФизическиеЛицаПоСотрудникам();
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Если НастройкиРасчета.РассчитыватьНачисления И Не НастройкиРасчета.РассчитыватьДоговорыПодряда Тогда
		Запрос.УстановитьПараметр("Начисления", Начисления);
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Начисления.ФизическоеЛицо
			|ПОМЕСТИТЬ ВТФизическиеЛица
			|ИЗ
			|	&Начисления КАК Начисления";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиРасчета.РассчитыватьНачисления И НастройкиРасчета.РассчитыватьДоговорыПодряда Тогда
		Запрос.УстановитьПараметр("ДоговорыПодряда", ДоговорыПодряда);
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДоговорыПодряда.ФизическоеЛицо
			|ПОМЕСТИТЬ ВТФизическиеЛица
			|ИЗ
			|	&ДоговорыПодряда КАК ДоговорыПодряда";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
		
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.УстановитьПараметр("ДоговорыПодряда", ДоговорыПодряда);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаНачисления
		|ИЗ
		|	&Начисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорыПодряда.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаДоговорыПодряда
		|ИЗ
		|	&ДоговорыПодряда КАК ДоговорыПодряда
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	ВТФизическиеЛицаНачисления КАК Начисления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДоговорыПодряда.ФизическоеЛицо
		|ИЗ
		|	ВТФизическиеЛицаДоговорыПодряда КАК ДоговорыПодряда";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФизическиеЛицаНачисления");
	УдалитьВТ.Добавить("ВТФизическиеЛицаДоговорыПодряда");
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ЗаполнитьВычетыКДоходамНДФЛ(Начисления)
	
	ИмяЗамера = "НачислениеЗарплаты.ЗаполнениеВычетовКДоходамНДФЛ";
	Замер = НачатьЗамерВремени();
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определим необходимость заполнения вычетов, есть ли среди доходов такие, к которым требуются вычеты.
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГОД(Начисления.ДатаНачала) КАК НалоговыйПериод
		|ИЗ
		|	ВТНачисленияТаблица КАК Начисления";
		
	ДоходыСВычетами = Новый Массив;	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВычетыДоходов = УчетНДФЛ.ВычетыКДоходам(Выборка.НалоговыйПериод);
		МассивДоходов = ОбщегоНазначения.ВыгрузитьКолонку(ВычетыДоходов, "Ключ");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоходыСВычетами, МассивДоходов, Истина);
	КонецЦикла;
	
	Если ДоходыСВычетами.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ДоходыСВычетами", ДоходыСВычетами);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТНачисленияТаблица КАК Начисления
		|ГДЕ
		|	Начисления.Начисление.КодДоходаНДФЛ В(&ДоходыСВычетами)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос.УстановитьПараметр("ВременныйРегистратор", ВременныйРегистратор);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Начисление.КодДоходаНДФЛ КАК КодДохода,
		|	Начисления.Результат КАК Сумма,
		|	Начисления.КодВычета КАК КодВычета,
		|	Начисления.КоличествоДетей,
		|	Начисления.ВычетПредоставленныйДругомуРодителю,
		|	Начисления.ИдентификаторСтрокиБухучет КАК НомерСтроки,
		|	&ВременныйРегистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТНачисленияЗаполнениеВычетов
		|ИЗ
		|	ВТНачисленияТаблица КАК Начисления
		|ГДЕ
		|	Начисления.Начисление.КодДоходаНДФЛ В(&ДоходыСВычетами)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Начисление.КодДоходаНДФЛ КАК КодДохода,
		|	Начисления.СуммаВычета
		|ПОМЕСТИТЬ ВТПредоставленныеВычеты
		|ИЗ
		|	ВТНачисленияТаблица КАК Начисления
		|ГДЕ
		|	Начисления.Начисление.КодДоходаНДФЛ В(&ДоходыСВычетами)
		|	И Начисления.Сторно = ИСТИНА
		|	И Начисления.СуммаВычета <> 0";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТНачисленияЗаполнениеВычетов");
	УдалитьВТ.Добавить("ВТПредоставленныеВычеты");

	УчетНДФЛ.СоздатьВТВычетыКДоходамФизическихЛиц(
		ИсключаемыйРегистратор, 
		Организация, 
		НастройкиНДФЛ.ДатаВыплаты, 
		МенеджерВременныхТаблиц, 
		"ВТНачисленияЗаполнениеВычетов", 
		"ВТПредоставленныеВычеты");
	УдалитьВТ.Добавить("ВТВычетыКДоходамФизическихЛиц");
		
	ПоляИсключения = Новый Массив;
	ПоляИсключения.Добавить("ИдентификаторСтроки");
	ПоляИсключения.Добавить("КодВычета");
	ПоляИсключения.Добавить("СуммаВычета");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	&ИменаПолей
		|ПОМЕСТИТЬ ВТВсеНачисленияТаблица
		|ИЗ
		|	ВТНачисленияТаблица КАК Начисления";
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТНачисленияТаблица", "Начисления", ПоляИсключения);
	Запрос.Выполнить();
	УничтожитьВТ("ВТНачисленияТаблица");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ВычетыКДоходам.КодВычета,
		|	ВычетыКДоходам.СуммаВычета,
		|	&ИменаПолей
		|ПОМЕСТИТЬ ВТНачисленияТаблица
		|ИЗ
		|	ВТВсеНачисленияТаблица КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыКДоходамФизическихЛиц КАК ВычетыКДоходам
		|		ПО (ВычетыКДоходам.Регистратор = &ВременныйРегистратор)
		|			И (ВычетыКДоходам.НомерСтроки = Начисления.ИдентификаторСтрокиБухучет)";
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТВсеНачисленияТаблица", "Начисления", ПоляИсключения);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТВсеНачисленияТаблица");
	
	// Нужно заполнить еще и в самой таблице Начисления.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтрокиБухучет,
		|	Начисления.КодВычета,
		|	Начисления.СуммаВычета
		|ИЗ
		|	ВТНачисленияТаблица КАК Начисления
		|ГДЕ
		|	Начисления.Начисление.КодДоходаНДФЛ В(&ДоходыСВычетами)
		|	И Начисления.Сторно = ЛОЖЬ
		|	И (Начисления.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|			ИЛИ Начисления.СуммаВычета <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.ИдентификаторСтрокиБухучет";
	Выборка = Запрос.Выполнить().Выбрать();
	ОтборСтрок = Новый Структура("ИдентификаторСтрокиБухучет");
	Пока Выборка.Следующий() Цикл
		ОтборСтрок.ИдентификаторСтрокиБухучет = Выборка.ИдентификаторСтрокиБухучет;
		НайденныеСтроки = Начисления.НайтиСтроки(ОтборСтрок);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка);
			РаспределитьСуммуВычетаПоТерриториямУсловиямТруда(НайденнаяСтрока, Выборка.СуммаВычета);
			СтрокаСоответствия = НастройкиПересчета.СоответствиеСтрокНачислений[НайденнаяСтрока];
			Если СтрокаСоответствия <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаСоответствия, Выборка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура РаспределитьСуммуВычетаПоТерриториямУсловиямТруда(Строка, СуммаВычета)
	
	Если Строка.ТерриторииУсловияТруда.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Если СуммаВычета = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = Строка.ТерриторииУсловияТруда.ВыгрузитьКолонку("Результат");
	Распределение = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаВычета, Коэффициенты, 0);
	
	Индекс = 0;
	Пока Индекс < Распределение.Количество() Цикл
		Строка.ТерриторииУсловияТруда[Индекс].СуммаВычета = Распределение[Индекс];
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КорректировкиВыплаты

Процедура РассчитатьКорректировкиВыплаты()
	
	ИмяЗамера = "НачислениеЗарплаты.КорректировкаВыплат";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	НДФЛ = Зарплата.НДФЛ.Скопировать();
	Если Не РасчетОдногоМесяца Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗарплатаМесяца.НДФЛ, НДФЛ);
	КонецЕсли;
			
	НачатьРасчетКорректировокВыплаты(НДФЛ);
	
	ИсчисленныйНалог = УчетНДФЛ.ИсчисленныйНалогФизическихЛицПоРезультатамРасчета(НДФЛ);
	
	ТекущиеКорректировки = ВзаиморасчетыССотрудниками.КорректировкиВыплаты(
		Организация, 
		МесяцНачисления, 
		ИсчисленныйНалог.ВыгрузитьКолонку("ФизическоеЛицо"), 
		ИсключаемыйРегистратор);
		
	УстановитьПривилегированныйРежим(Истина);	
	КорректировкиПоФизическомуЛицу = РасчетЗарплаты.РекомендуемыеКорректировкиВыплаты(ИсчисленныйНалог, ТекущиеКорректировки);
	УстановитьПривилегированныйРежим(Ложь);
	
	КорректировкиПоФизическомуЛицу.Свернуть("ФизическоеЛицо", "КорректировкаВыплаты");
	
	КорректировкиВыплаты = ТаблицаКорректировокВыплаты();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КорректировкиПоФизическомуЛицу, КорректировкиВыплаты);
	
	ЗавершитьРасчетКорректировокВыплаты(КорректировкиВыплаты);
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура НачатьРасчетКорректировокВыплаты(НДФЛ)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьКорректировкиВыплаты", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
	НастройкиПересчета.ФизическиеЛицаКорректировокВыплаты = ФизическиеЛицаМассив;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из НДФЛ Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаТаблицы.ФизическоеЛицо) = Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаУдаления Из СтрокиКУдалению Цикл
		НДФЛ.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьРасчетКорректировокВыплаты(КорректировкиВыплаты)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		ЗарплатаМесяца.КорректировкиВыплаты = КорректировкиВыплаты;
		Возврат;
	КонецЕсли;
	
	Если НастройкиПересчета.ФизическиеЛицаКорректировокВыплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем из коллекции строки по физическим лицам, по которым был выполнен пересчет.
	НайденныеСтроки = НайтиСтрокиОтборПоМассиву(ЗарплатаМесяца.КорректировкиВыплаты, "ФизическоеЛицо", НастройкиПересчета.ФизическиеЛицаКорректировокВыплаты);
	ОбъединитьМассивыСтрокСохраняяИсправления(КорректировкиВыплаты, ЗарплатаМесяца.КорректировкиВыплаты, НайденныеСтроки, "ФизическоеЛицо", ПризнакиИсправленияНДФЛ());
	
КонецПроцедуры

Функция ТаблицаКорректировокВыплаты()
	
	Возврат Обработки.МенеджерРасчетаЗарплаты.ТаблицаКорректировокВыплаты();
	
КонецФункции

#КонецОбласти

#Область Займы

Процедура РассчитатьПогашениеЗаймов()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетЗаймов";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьЗаймы Тогда
		Возврат;
	КонецЕсли;
	
	Если МесяцНачисления < НачалоМесяца(НастройкиЗаймов.ДатаПогашения) Тогда
		ДатаПогашения = МесяцНачисления;
	Иначе
		ДатаПогашения = НастройкиЗаймов.ДатаПогашения;
	КонецЕсли;
	Сотрудники = СотрудникиВМассиве(НастройкиЗаймов.Сотрудники);
	
	НачатьПересчетПогашенияЗаймов(Сотрудники);
	
	ПогашениеЗаймов = РасчетЗарплатыРасширенный.РезультатРасчетаЗаймов(Организация, ДатаПогашения, ИсключаемыйРегистратор, Сотрудники);
	
	ЗавершитьПересчетПогашенияЗаймов(ПогашениеЗаймов);
	
	ЗарегистрироватьНалогНаМатериальнуюВыгоду();
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура ЗарегистрироватьНалогНаМатериальнуюВыгоду()
	
	Если ЗарплатаМесяца.ПогашениеЗаймов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПогашениеЗаймов = ЗарплатаМесяца.ПогашениеЗаймов;
	НачатьРегистрациюНалогаНаМатериальнуюВыгоду(ПогашениеЗаймов);
	
	Если ПогашениеЗаймов.Итог("НалогНаМатериальнуюВыгоду") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНДФЛ = ПогашениеЗаймов.Скопировать(, "ФизическоеЛицо, Подразделение, НалогНаМатериальнуюВыгоду");
	ТаблицаНДФЛ.Свернуть("ФизическоеЛицо, Подразделение", "НалогНаМатериальнуюВыгоду");
	
	ТаблицаНДФЛ.Колонки.Добавить("ПодразделениеСотрудника");
	ТаблицаНДФЛ.ЗагрузитьКолонку(ТаблицаНДФЛ.ВыгрузитьКолонку("Подразделение"), "ПодразделениеСотрудника");
	
	ТаблицаНДФЛ.Колонки.НалогНаМатериальнуюВыгоду.Имя = "Сумма";
	
	УстановитьПривилегированныйРежим(Истина);
	УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(
		НаборыЗаписей, 
		Ложь, 
		Организация, 
		МесяцНачисления, 
		ТаблицаНДФЛ, 
		МенеджерВременныхТаблиц, 
		Неопределено, 
		Ложь, 
		Ложь, 
		Не НастройкиНДФЛ.ОкончательныйРасчет);	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.НачисленияУдержанияПоСотрудникам, Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура НачатьПересчетПогашенияЗаймов(Сотрудники)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьЗаймы", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Сотрудники = Новый Массив;
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
	НастройкиПересчета.ФизическиеЛицаПогашенияЗаймов = ФизическиеЛицаМассив;
	
	УстановитьПривилегированныйРежим(Истина);
	ФизическиеЛицаСотрудников = КадровыйУчет.ФизическиеЛицаСотрудников(Сотрудники);
	УстановитьПривилегированныйРежим(Ложь);
	
	УдаляемыеСотрудники = Новый Массив;
	Для Каждого Сотрудник Из Сотрудники Цикл
		ФизическоеЛицоСотрудника = ФизическиеЛицаСотрудников[Сотрудник];
		Если ФизическиеЛицаМассив.Найти(ФизическоеЛицоСотрудника) = Неопределено Тогда
			УдаляемыеСотрудники.Добавить(Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Сотрудники = ОбщегоНазначенияКлиентСервер.СократитьМассив(Сотрудники, УдаляемыеСотрудники);
		
КонецПроцедуры

Процедура ЗавершитьПересчетПогашенияЗаймов(ПогашениеЗаймов)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		ЗарплатаМесяца.ПогашениеЗаймов = ПогашениеЗаймов;
		Возврат;
	КонецЕсли;
	
	Если НастройкиПересчета.ФизическиеЛицаПогашенияЗаймов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем из коллекции строки по физическим лицам, по которым был выполнен пересчет.
	НайденныеСтроки = НайтиСтрокиОтборПоМассиву(ЗарплатаМесяца.ПогашениеЗаймов, "ФизическоеЛицо", НастройкиПересчета.ФизическиеЛицаПогашенияЗаймов);;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ЗарплатаМесяца.ПогашениеЗаймов.Удалить(НайденнаяСтрока);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПогашениеЗаймов, ЗарплатаМесяца.ПогашениеЗаймов);
	
КонецПроцедуры

Процедура НачатьРегистрациюНалогаНаМатериальнуюВыгоду(ПогашениеЗаймов)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	ПогашениеЗаймов = ЗаймыСотрудникам.ТаблицаПогашениеЗаймов();
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтНДФЛ", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
	
	Для Каждого СтрокаТаблицы Из ЗарплатаМесяца.ПогашениеЗаймов Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаТаблицы.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПогашениеЗаймов.Добавить(), СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИзвестныеПоказатели

Процедура СоздатьВТИзвестныеПоказатели(ИзвестныеПоказатели, ИмяВТ)
	
	Если ВТСуществует(ИмяВТ) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ИзвестныеПоказатели", ИзвестныеПоказатели);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзвестныеПоказатели.ИдентификаторСтроки,
		|	ИзвестныеПоказатели.Показатель,
		|	ИзвестныеПоказатели.Значение
		|ПОМЕСТИТЬ ВТИзвестныеПоказатели
		|ИЗ
		|	&ИзвестныеПоказатели КАК ИзвестныеПоказатели";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИзвестныеПоказатели", ИмяВТ);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТОпределяющиеПоказатели()
	
	Если ВТСуществует("ВТОпределяющиеПоказатели") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОпределяющиеПоказатели", ОпределяющиеПоказатели);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОпределяющиеПоказатели.Сотрудник,
		|	ОпределяющиеПоказатели.Организация,
		|	ОпределяющиеПоказатели.Показатель,
		|	ОпределяющиеПоказатели.Значение,
		|	ОпределяющиеПоказатели.Дата
		|ПОМЕСТИТЬ ВТОпределяющиеПоказатели
		|ИЗ
		|	&ОпределяющиеПоказатели КАК ОпределяющиеПоказатели";
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область Бухучет

Функция ИзмениласьДоляЕНВД(ИсходноеРаспределениеРезультатов, НовоеРаспределениеРезультатов)

	БылаДоляЕНВД = 0;
	Для каждого СтрокаРаспределения Из ИсходноеРаспределениеРезультатов Цикл
		Если СтрокаРаспределения.ОблагаетсяЕНВД Тогда
			БылаДоляЕНВД = БылаДоляЕНВД + СтрокаРаспределения.Результат;
		КонецЕсли;
	КонецЦикла;
	
	СталаДоляЕНВД = 0;
	Для каждого СтрокаРаспределения Из НовоеРаспределениеРезультатов Цикл
		Если СтрокаРаспределения.ОблагаетсяЕНВД Тогда
			СталаДоляЕНВД = СталаДоляЕНВД + СтрокаРаспределения.Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат БылаДоляЕНВД <> СталаДоляЕНВД;

КонецФункции

Процедура ВыполнитьОтражениеНачисленийВБухучете()
	
	Если Не БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СоответствиеСтрокНачислений = Новый Соответствие;
	Начисления = ЗарплатаМесяца.Начисления;
	ОтобратьСтрокиТаблицыНачисленийПоУсловиям(Начисления, СоответствиеСтрокНачислений);
		
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	БухучетНачислений = ПолучитьБухучетНачисленийСоздатьВременнуюТаблицу(Начисления, ПараметрыБухучета.ИмяВТБухучетНачислений);
	
	СтрокиИзмениласьДоляГранта = Новый Соответствие;
	Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаНДФЛ Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
			Если Модуль.СоздатьВТПолучателиГрантов(МенеджерВременныхТаблиц, ПараметрыБухучета.ИмяВТБухучетНачислений) Тогда
				ТекущийБухучетНачислений = БухучетНачисленийИзКоллекцииСтрок(Начисления);
				ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, ТекущийБухучетНачислений, "ВТТекущийБухучетНачислений");
				УдалитьВТ.Добавить("ВТТекущийБухучетНачислений");
				УдалитьВТ.Добавить("ВТПолучателиГрантов");
				СтрокиИзмениласьДоляГранта = Модуль.СтрокиИзмениласьДоляГранта(МенеджерВременныхТаблиц, "ВТТекущийБухучетНачислений", ПараметрыБухучета.ИмяВТБухучетНачислений);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// поместим бухучет начислений в строки основной таблицы
	БухучетНачислений.Индексы.Добавить("ИдентификаторСтроки");
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	ФизическиеЛицаДляВзносов = Новый Массив;
	ФизическиеЛицаДляПересчетаНДФЛ = Новый Массив;
	
	Если СоответствиеСтрокНачислений.Количество() > 0 Тогда
		
		Для каждого ЭлементКоллекции Из СоответствиеСтрокНачислений Цикл
			Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
			БухучетСтроки = БухучетНачислений.Скопировать(Отбор);
			Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов И ИзмениласьДоляЕНВД(ЭлементКоллекции.Значение.РаспределениеПоСтатьям, БухучетСтроки) Тогда
				ФизическиеЛицаДляВзносов.Добавить(ЭлементКоллекции.Значение.ФизическоеЛицо);
			КонецЕсли;
			Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаНДФЛ И СтрокиИзмениласьДоляГранта[ЭлементКоллекции.Ключ] = Истина Тогда
				ФизическиеЛицаДляПересчетаНДФЛ.Добавить(ЭлементКоллекции.Значение.ФизическоеЛицо);
			КонецЕсли;
			ЭлементКоллекции.Значение.РаспределениеПоСтатьям = БухучетСтроки;
		КонецЦикла;
		
		УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетНачислений);
		
	Иначе
		
		Для каждого СтрокаТЗ Из ЗарплатаМесяца.Начисления Цикл
			Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
			БухучетСтроки = БухучетНачислений.Скопировать(Отбор);
			Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов И ИзмениласьДоляЕНВД(СтрокаТЗ.РаспределениеПоСтатьям, БухучетСтроки) Тогда
				ФизическиеЛицаДляВзносов.Добавить(СтрокаТЗ.ФизическоеЛицо);
			КонецЕсли;
			Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаНДФЛ И СтрокиИзмениласьДоляГранта[СтрокаТЗ.ИдентификаторСтрокиБухучет] = Истина Тогда
				ФизическиеЛицаДляПересчетаНДФЛ.Добавить(СтрокаТЗ.ФизическоеЛицо);
			КонецЕсли;
			СтрокаТЗ.РаспределениеПоСтатьям = БухучетСтроки;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов И ФизическиеЛицаДляВзносов.Количество()>0 Тогда
		НастройкиОбновленияБухучета.ТребуетсяПересчетВзносов = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НастройкиОбновленияБухучета.ФизическиеЛицаРасчетаВзносов, ФизическиеЛицаДляВзносов, Истина);
	КонецЕсли;
	
	Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаНДФЛ И ФизическиеЛицаДляПересчетаНДФЛ.Количество()>0 Тогда
		НастройкиОбновленияБухучета.ТребуетсяПересчетНДФЛ = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НастройкиОбновленияБухучета.ФизическиеЛицаДляПересчетаНДФЛ, ФизическиеЛицаДляПересчетаНДФЛ, Истина);
	КонецЕсли;
	
	Если УдалитьВТ.Количество() > 0 Тогда
		УничтожитьВТ(УдалитьВТ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОтражениеНачисленийПоДоговорамВБухучете()

	Если Не БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СоответствиеСтрокНачислений = Новый Соответствие;
	ДоговорыПодряда = ЗарплатаМесяца.ДоговорыПодряда;
	ОтобратьСтрокиТаблицыДоговорыПодрядаПоУсловиям(ДоговорыПодряда, СоответствиеСтрокНачислений);
	
	Если ДоговорыПодряда.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	БухучетНачислений = ПолучитьБухучетНачисленийПоДоговорамСоздатьВременнуюТаблицу(ДоговорыПодряда, ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
	
	ФизическиеЛицаДляВзносов = Новый Массив;
	
	// поместим бухучет в строки основной таблицы
	БухучетНачислений.Индексы.Добавить("ИдентификаторСтроки");
	Отбор = Новый Структура("ИдентификаторСтроки");
	Если СоответствиеСтрокНачислений.Количество() > 0 Тогда
		
		Для каждого ЭлементКоллекции Из СоответствиеСтрокНачислений Цикл
			Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
			БухучетСтроки = БухучетНачислений.Скопировать(Отбор);
			Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов Тогда
				Если ИзмениласьДоляЕНВД(ЭлементКоллекции.Значение.РаспределениеПоСтатьям, БухучетСтроки) Тогда
					ФизическиеЛицаДляВзносов.Добавить(ЭлементКоллекции.Значение.ФизическоеЛицо);
				КонецЕсли;
			КонецЕсли;
			ЭлементКоллекции.Значение.РаспределениеПоСтатьям = БухучетСтроки;
		КонецЦикла;
		
		// удалим из менеджера временную таблицу с бухучетом  
		УдалитьВТ = Новый Массив;
		УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
		УничтожитьВТ(УдалитьВТ);
		
	Иначе
		
		Для каждого СтрокаТЗ Из ЗарплатаМесяца.ДоговорыПодряда Цикл
			Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
			БухучетСтроки = БухучетНачислений.Скопировать(Отбор);
			Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов Тогда
				Если ИзмениласьДоляЕНВД(СтрокаТЗ.РаспределениеПоСтатьям, БухучетСтроки) Тогда
					ФизическиеЛицаДляВзносов.Добавить(СтрокаТЗ.ФизическоеЛицо);
				КонецЕсли;
			КонецЕсли;
			СтрокаТЗ.РаспределениеПоСтатьям = БухучетСтроки;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов И ФизическиеЛицаДляВзносов.Количество()>0 Тогда
		НастройкиОбновленияБухучета.ТребуетсяПересчетВзносов = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НастройкиОбновленияБухучета.ФизическиеЛицаРасчетаВзносов, ФизическиеЛицаДляВзносов,Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьОтражениеНДФЛИКорректировокВыплатыВБухучете()

	Если Не НастройкиУчета.ИспользоватьСтатьиФинансирования Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНДФЛ = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаРезультатРасчетаНДФЛ();
	НДФЛКЗачету = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаКорректировкиВыплаты();
	НДФЛЗачтено = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаКорректировкиВыплаты();
	
	СоответствиеСтрокНДФЛ = Новый Соответствие;
	СоответствиеСтрокКорректировокВыплаты = Новый Соответствие;
	
	Если БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ И ЗарплатаМесяца.НДФЛ.Количество() > 0 Тогда
		
		НДФЛРезультатыРасчета = ЗарплатаМесяца.НДФЛ;
		ОтобратьСтрокиТаблицыНДФЛПоУсловиям(НДФЛРезультатыРасчета, СоответствиеСтрокНДФЛ);
		
		Для каждого СтрокаТЗ Из НДФЛРезультатыРасчета Цикл
			Сумма = СтрокаТЗ.Налог - СтрокаТЗ.ЗачтеноАвансовыхПлатежей;
			Если Сумма <> 0 Тогда
				НоваяСтрока = ТаблицаНДФЛ.Добавить();
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
				НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
				НоваяСтрока.ДатаПолученияДохода = СтрокаТЗ.МесяцНалоговогоПериода;
				НоваяСтрока.Территория 			= СтрокаТЗ.Подразделение;
				НоваяСтрока.Сумма 				= Сумма;
				НоваяСтрока.ВидУдержания 		= Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты И ЗарплатаМесяца.КорректировкиВыплаты.Количество() > 0 Тогда
		
		КорректировкиВыплаты = ЗарплатаМесяца.КорректировкиВыплаты;
		ОтобратьСтрокиТаблицыКорректировкиВыплатыПоУсловиям(КорректировкиВыплаты, СоответствиеСтрокКорректировокВыплаты);
		
		Для каждого СтрокаТЗ Из КорректировкиВыплаты Цикл
			Сумма = СтрокаТЗ.КорректировкаВыплаты;
			Если Сумма < 0 Тогда
				НоваяСтрока = НДФЛКЗачету.Добавить();
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
				НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
				НоваяСтрока.Сумма 				= Сумма;
				НоваяСтрока.ВидУдержания 		= Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету;
			ИначеЕсли Сумма > 0 Тогда
				НоваяСтрока = НДФЛЗачтено.Добавить();
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
				НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
				НоваяСтрока.Сумма 				= Сумма;
				НоваяСтрока.ВидУдержания 		= Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Если ТаблицаНДФЛ.Количество()=0 И НДФЛКЗачету.Количество()=0 И НДФЛЗачтено.Количество()=0 Тогда
		Возврат;
	КонецЕсли;

	СоздатьВТБухучетВсехНачисленийДляБухучетаУдержанийНДФЛ();
	
	ИсходныеДанные = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеИсходныхДанныхДляОтраженияУдержанийВБухучете();
	ИсходныеДанные.МенеджерВременныхТаблиц  = МенеджерВременныхТаблиц;
	ИсходныеДанные.Организация    			= Организация;
	ИсходныеДанные.МесяцНачисления 			= МесяцНачисления;
	ИсходныеДанные.ИмяВТБухучетНачислений 	= ПараметрыБухучета.ИмяВТБухучетВсехНачислений;
	ИсходныеДанные.ОкончательныйРасчет		= НастройкиНДФЛ.ОкончательныйРасчет;
	ИсходныеДанные.ИсключаемыйРегистратор 	= ИсключаемыйРегистратор;
	ИсходныеДанные.РезультатРасчетаНДФЛ		= ТаблицаНДФЛ;
	ИсходныеДанные.НДФЛКЗачету		 		= НДФЛКЗачету;
	ИсходныеДанные.НДФЛЗачтено		 		= НДФЛЗачтено;
	
	РезультатыОтраженияВБухучете = ОтражениеЗарплатыВБухучетеРасширенный.ВыполнитьОтражениеНДФЛИКорректировокВыплатыВБухучете(ИсходныеДанные);
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	БухучетНДФЛ = РезультатыОтраженияВБухучете.БухучетНДФЛ;
	Если БухучетНДФЛ.Количество() > 0 Тогда
		
		БухучетНДФЛ.Индексы.Добавить("ИдентификаторСтроки");
		
		Если СоответствиеСтрокНДФЛ.Количество() > 0 Тогда
			Для каждого ЭлементКоллекции Из СоответствиеСтрокНДФЛ Цикл
				Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;	
				ЭлементКоллекции.Значение.РаспределениеПоСтатьям = БухучетНДФЛ.Скопировать(Отбор);
			КонецЦикла;
		Иначе
			Для каждого СтрокаТЗ Из ЗарплатаМесяца.НДФЛ Цикл
				Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
				СтрокаТЗ.РаспределениеПоСтатьям = БухучетНДФЛ.Скопировать(Отбор);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	БухучетКорректировкиВыплаты = РезультатыОтраженияВБухучете.БухучетКорректировкиВыплаты;
	Если БухучетКорректировкиВыплаты.Количество() > 0 Тогда
		
		БухучетКорректировкиВыплаты.Индексы.Добавить("ИдентификаторСтроки");
		
		Если СоответствиеСтрокКорректировокВыплаты.Количество() > 0 Тогда
			Для каждого ЭлементКоллекции Из СоответствиеСтрокКорректировокВыплаты Цикл
				Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;	
				ЭлементКоллекции.Значение.РаспределениеПоСтатьям = БухучетКорректировкиВыплаты.Скопировать(Отбор);
			КонецЦикла;
		Иначе
			Для каждого СтрокаТЗ Из ЗарплатаМесяца.КорректировкиВыплаты Цикл
				Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
				СтрокаТЗ.РаспределениеПоСтатьям = БухучетКорректировкиВыплаты.Скопировать(Отбор);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОтражениеУдержанийИЗаймовВБухучете()

	Если Не НастройкиУчета.ИспользоватьСтатьиФинансирования Тогда
		Возврат;
	КонецЕсли;

	ТаблицаУдержаний = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаРезультатРасчетаУдержаний();
	ТаблицаЗаймов    = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаРезультатПогашениеЗаймов();
	
	СоответствиеСтрокУдержаний = Новый Соответствие;
	СоответствиеСтрокЗаймов = Новый Соответствие;
	
	Если БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний И ЗарплатаМесяца.Удержания.Количество() > 0 Тогда
		
		Удержания = ЗарплатаМесяца.Удержания;
		ОтобратьСтрокиТаблицыУдержанийПоУсловиям(Удержания, СоответствиеСтрокУдержаний);
		
		Для каждого СтрокаТЗ Из Удержания Цикл
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.ВидУдержания = СтрокаТЗ.Удержание;
			НоваяСтрока.Сумма = СтрокаТЗ.Результат;
			НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
		КонецЦикла;
		
	КонецЕсли;
	
	Если БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов И ЗарплатаМесяца.ПогашениеЗаймов.Количество() > 0 Тогда
		
		ПогашениеЗаймов = ЗарплатаМесяца.ПогашениеЗаймов;
		ОтобратьСтрокиТаблицыПогашениеЗаймовПоУсловиям(ПогашениеЗаймов, СоответствиеСтрокЗаймов);
		
		Для каждого СтрокаТЗ Из ПогашениеЗаймов Цикл
			Если СтрокаТЗ.ПогашениеЗайма <> 0 Тогда
				НоваяСтрока = ТаблицаЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Сумма 	  = СтрокаТЗ.ПогашениеЗайма;
				НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПогашениеЗаймаИзЗарплаты;
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
			КонецЕсли;
			Если СтрокаТЗ.НалогНаМатериальнуюВыгоду <> 0 Тогда
				НоваяСтрока = ТаблицаЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Сумма 	  = СтрокаТЗ.НалогНаМатериальнуюВыгоду;
				НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
			КонецЕсли;	
			Если СтрокаТЗ.ПогашениеПроцентов <> 0 Тогда
				НоваяСтрока = ТаблицаЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Сумма 	  = СтрокаТЗ.ПогашениеПроцентов;
				НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПроцентыПоЗайму;
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
			КонецЕсли;	
			Если СтрокаТЗ.НачисленоПроцентов <> 0 Тогда
				НоваяСтрока = ТаблицаЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Сумма 	  = СтрокаТЗ.НачисленоПроцентов;
				НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму;
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
			КонецЕсли;	
			Если СтрокаТЗ.МатериальнаяВыгода <> 0 Тогда
				НоваяСтрока = ТаблицаЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Сумма 	  = СтрокаТЗ.МатериальнаяВыгода;
				НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам;
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаУдержаний.Количество()=0 И ТаблицаЗаймов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьВТБухучетВсехНачисленийДляБухучетаУдержанийНДФЛ();
	
	ИсходныеДанные = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеИсходныхДанныхДляОтраженияУдержанийВБухучете();
	ИсходныеДанные.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ИсходныеДанные.Организация    			= Организация;
	ИсходныеДанные.МесяцНачисления 			= МесяцНачисления;
	ИсходныеДанные.ИмяВТБухучетНачислений 	= ПараметрыБухучета.ИмяВТБухучетВсехНачислений;
	ИсходныеДанные.ОкончательныйРасчет		= Не НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу;
	ИсходныеДанные.ИсключаемыйРегистратор 	= ИсключаемыйРегистратор;
	ИсходныеДанные.ТаблицаУдержаний			= ТаблицаУдержаний;
	ИсходныеДанные.ТаблицаЗаймов			= ТаблицаЗаймов;
	ИсходныеДанные.ВидыНачисленийДополненияРасчетнойБазы = Обработки.МенеджерРасчетаЗарплаты.ВидыНачисленийДополненияРасчетнойБазыУдержаний();
	
	РезультатыОтраженияВБухучете = ОтражениеЗарплатыВБухучетеРасширенный.ВыполнитьОтражениеУдержанийИЗаймовВБухучете(ИсходныеДанные);
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	БухучетУдержаний = РезультатыОтраженияВБухучете.БухучетУдержаний;
	Если БухучетУдержаний.Количество() > 0 Тогда
		
		БухучетУдержаний.Индексы.Добавить("ИдентификаторСтроки");
		
		Если СоответствиеСтрокУдержаний.Количество() > 0 Тогда
			Для каждого ЭлементКоллекции Из СоответствиеСтрокУдержаний Цикл
				Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;	
				ЭлементКоллекции.Значение.РаспределениеПоСтатьям = БухучетУдержаний.Скопировать(Отбор);
			КонецЦикла;
		Иначе
			Для каждого СтрокаТЗ Из ЗарплатаМесяца.Удержания Цикл
				Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
				СтрокаТЗ.РаспределениеПоСтатьям = БухучетУдержаний.Скопировать(Отбор);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	БухучетЗаймов = РезультатыОтраженияВБухучете.БухучетЗаймов;
	Если БухучетЗаймов.Количество() > 0 Тогда
		
		БухучетЗаймов.Индексы.Добавить("ИдентификаторСтроки");
		
		Если СоответствиеСтрокЗаймов.Количество() > 0 Тогда
			Для каждого ЭлементКоллекции Из СоответствиеСтрокЗаймов Цикл
				Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;	
				ЭлементКоллекции.Значение.РаспределениеПоСтатьям = БухучетЗаймов.Скопировать(Отбор);
			КонецЦикла;
		Иначе
			Для каждого СтрокаТЗ Из ЗарплатаМесяца.ПогашениеЗаймов Цикл
				Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
				СтрокаТЗ.РаспределениеПоСтатьям = БухучетЗаймов.Скопировать(Отбор);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

//	Создание временной таблицы ВТНачисленияСДаннымиЕНВД для регистрации доходов страховых взносов.
Процедура СоздатьВТНачисленияСДаннымиЕНВД(Начисления, ИмяВТНачисления)
	
	Если Не ПараметрыБухучета.ПлательщикЕНВД Или Не НастройкиРасчета.РассчитыватьВзносы Тогда
		
		// Если не применяется ЕНВД или доходы регистрируются не для расчета страховых взносов
		// указываем для всех начислений долю ЕНВД = 0.
		ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВДНулеваяДоляЕНВД(МенеджерВременныхТаблиц, ИмяВТНачисления);
	Иначе
		
		УдалитьВТ = Новый Массив;
		
		Если НастройкиБухучета.ПроверятьРегистрациюПроцентаЕНВД И ПараметрыБухучета.ПроцентЕНВД = Неопределено Тогда
			// Если процент ЕНВД нужен, но не задан на текущий месяц,
			// проверим есть ли в таблице начисления, для которых нужен процент для распределения,
			// и если такие начисления есть будет вызвано исключение.
			ДобавитьИдентификаторСтрокиБухучета(Начисления);
			СоздатьВТНачисленияДляОтраженияВБухучете(Начисления, "ВТНачисленияДляПроверкиРегистрацииПроцентаЕНВД");
			УдалитьВТ.Добавить("ВТНачисленияДляПроверкиРегистрацииПроцентаЕНВД");
			ОтражениеЗарплатыВБухучете.ПроверитьНеобходимостьРегистрацииПроцентаЕНВДНаТекущийМесяцВызватьИсключение(Организация, МесяцНачисления, МенеджерВременныхТаблиц, "ВТНачисленияДляПроверкиРегистрацииПроцентаЕНВД", "Сотрудник,ДатаНачала");
		КонецЕсли;
		
		ИмяВТБухучетНачислений = "ВТБухучетНачисленийДляРегистрацииДоходовСтраховыхВзносов";
		СоздатьВТБухучетНачисленийДляРегистрацииДоходовСтраховыхВзносов(Начисления, ИмяВТБухучетНачислений);
		ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВДПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, ИмяВТБухучетНачислений, ИмяВТНачисления);
		
		УдалитьВТ.Добавить(ИмяВТБухучетНачислений);
		УничтожитьВТ(УдалитьВТ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьБухучетНачисленийСоздатьВременнуюТаблицу(Начисления, ИмяВТБухучетНачислений)

	УдалитьВТ = Новый Массив;
	
	ИмяВТНачисления = "ВТНачисленияДляОтраженияВБухучете";
	СоздатьВТНачисленияДляОтраженияВБухучете(Начисления, ИмяВТНачисления);
	УдалитьВТ.Добавить(ИмяВТНачисления);
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТДокументыОснования
	|ИЗ
	|	ВТНачисленияДляОтраженияВБухучете КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Коэффициенты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Коэффициенты.СтатьяРасходов КАК СтатьяРасходов,
	|	Коэффициенты.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Коэффициенты.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	Коэффициенты.Коэффициент КАК Коэффициент
	|ИЗ
	|	ВТДокументыОснования КАК НачисленияТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыРаспределенияСреднегоЗаработка КАК Коэффициенты
	|		ПО НачисленияТаблица.ДокументОснование = Коэффициенты.ДокументОснование
	|			И (Коэффициенты.ДокументОснование <> &ИсключаемыйРегистратор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтроки";
	УдалитьВТ.Добавить("ВТДокументыОснования");
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	СтрокиКоэффициентыСреднегоЗаработка = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
		Таблица = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаКоэффициентыРаспределенияСреднегоЗаработка();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Выборка);
		КонецЦикла;
		СтрокиКоэффициентыСреднегоЗаработка.Вставить(ИдентификаторСтроки, Таблица);
	КонецЦикла;

	СтрокиБухучетСторноНачислений = СтрокиБухучетСторноНачислений(Начисления, ИмяВТНачисления);
	
	ИсходныеДанные = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеИсходныхДанныхДляОтраженияНачисленийВБухучете();
	ИсходныеДанные.МенеджерВременныхТаблиц    = МенеджерВременныхТаблиц;
	ИсходныеДанные.МенеджерКадровогоУчета 	  = МенеджерКадровогоУчета();
	ИсходныеДанные.Организация    			  = Организация;
	ИсходныеДанные.МесяцНачисления 			  = МесяцНачисления;
	ИсходныеДанные.ИмяВТБухучетНачислений     = ИмяВТБухучетНачислений;
	ИсходныеДанные.ИмяВТНачисления			  = ИмяВТНачисления;
	ИсходныеДанные.БухучетПервичногоДокумента = НастройкиБухучета.НастройкиБухучетаДокумента;
	ИсходныеДанные.ИсключаемыйРегистратор	  = ИсключаемыйРегистратор;
	ИсходныеДанные.ПроцентЕНВД    			  = ПараметрыБухучета.ПроцентЕНВД;
	ИсходныеДанные.ПлательщикЕНВД             = ПараметрыБухучета.ПлательщикЕНВД;
	ИсходныеДанные.СтрокиБухучетСторноНачислений 			 = СтрокиБухучетСторноНачислений;
	ИсходныеДанные.СтрокиКоэффициентыСреднегоЗаработка   	 = СтрокиКоэффициентыСреднегоЗаработка;
	ИсходныеДанные.КоэффициентыСреднегоЗаработкаДокумента    = НастройкиБухучета.КоэффициентыСреднегоЗаработкаДокумента;
	ИсходныеДанные.КоэффициентыСреднегоЗаработкаФССДокумента = НастройкиБухучета.КоэффициентыСреднегоЗаработкаФССДокумента;
	ИсходныеДанные.МенеджерДанныхУчетаВремени = МенеджерДанныхУчетаВремени;
	
	// В менеджере временных таблиц будет создана таблица с именем ИмяВТБухучетНачислений.
	БухучетНачислений = ОтражениеЗарплатыВБухучетеРасширенный.ВыполнитьОтражениеНачисленийВБухучете(ИсходныеДанные);
	УничтожитьВТ(УдалитьВТ);
	
	Возврат БухучетНачислений;
	
КонецФункции

Функция ПолучитьБухучетНачисленийПоДоговорамСоздатьВременнуюТаблицу(ДоговорыПодряда, ИмяВТБухучетНачислений)

	УдалитьВТ = Новый Массив;
	
	ИмяВТНачисления = "ВТНачисленияПоДоговорамДляОтраженияВБухучете";
	СоздатьВТНачисленияПоДоговорамДляОтраженияВБухучете(ДоговорыПодряда, ИмяВТНачисления);
	УдалитьВТ.Добавить(ИмяВТНачисления);
	
	ИсходныеДанные = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеИсходныхДанныхДляОтраженияНачисленийВБухучете();
	ИсходныеДанные.Организация    			  = Организация;
	ИсходныеДанные.ИмяВТБухучетНачислений     = ИмяВТБухучетНачислений;
	ИсходныеДанные.ИмяВТНачисления		      = ИмяВТНачисления;
	ИсходныеДанные.МенеджерВременныхТаблиц    = МенеджерВременныхТаблиц;
	ИсходныеДанные.ПлательщикЕНВД             = ПараметрыБухучета.ПлательщикЕНВД;
	
	// В менеджере временных таблиц будет создана таблица с именем ИмяВТБухучетНачисленийПоДоговорам.
	БухучетНачислений = ОтражениеЗарплатыВБухучетеРасширенный.ВыполнитьОтражениеНачисленийПоДоговорамВБухучете(ИсходныеДанные);
	УничтожитьВТ(УдалитьВТ);
	
	Возврат БухучетНачислений;

КонецФункции

Процедура ОтобратьСтрокиТаблицыНачисленийПоУсловиям(Начисления, СоответствиеСтрокКоллекции)

	Если НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиОбновленияБухучета.Сотрудник) Тогда
			ДобавитьИдентификаторСтрокиБухучета(Начисления);
			Возврат;
		КонецЕсли;
		
		Начисления = ТаблицаНачислений();
		ДобавитьИдентификаторСтрокиБухучета(Начисления);
		
		// выполним отбор строк по сотруднику и зависимым начислениям
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.Начисления Цикл
			Если СтрокаТЗ.Сотрудник = НастройкиОбновленияБухучета.Сотрудник
					И НастройкиОбновленияБухучета.ЗависимыеНачисления.Найти(СтрокаТЗ.Начисление) <> Неопределено Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, Начисления, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
			ДобавитьИдентификаторСтрокиБухучета(Начисления);
			Возврат;
		КонецЕсли;
		
		Начисления = ТаблицаНачислений();
		ДобавитьИдентификаторСтрокиБухучета(Начисления);
		
		НайденныеСтроки = ПересчетСотрудников.НайтиСтроки(Новый Структура("ПересчитыватьНачисления", Истина));
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "Сотрудник");
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.Начисления Цикл
			Если Сотрудники.Найти(СтрокаТЗ.Сотрудник) <> Неопределено Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, Начисления, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтобратьСтрокиТаблицыДоговорыПодрядаПоУсловиям(ДоговорыПодряда, СоответствиеСтрокКоллекции)

	Если НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиОбновленияБухучета.Сотрудник) Тогда
			ДобавитьИдентификаторСтрокиБухучета(ДоговорыПодряда);
			Возврат;
		КонецЕсли;
		
		ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
		ДобавитьИдентификаторСтрокиБухучета(ДоговорыПодряда);
		
		// выполним отбор строк по сотруднику, зависимым начислениям у договоров нет
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.ДоговорыПодряда Цикл
			Если СтрокаТЗ.Сотрудник = НастройкиОбновленияБухучета.Сотрудник Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, ДоговорыПодряда, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
			ДобавитьИдентификаторСтрокиБухучета(ДоговорыПодряда);
			Возврат;
		КонецЕсли;
		
		ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
		ДобавитьИдентификаторСтрокиБухучета(ДоговорыПодряда);
		
		НайденныеСтроки = ПересчетСотрудников.НайтиСтроки(Новый Структура("ПересчитыватьДоговорыПодряда", Истина));
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "Сотрудник");
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.ДоговорыПодряда Цикл
			Если Сотрудники.Найти(СтрокаТЗ.Сотрудник) <> Неопределено Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, ДоговорыПодряда, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ОтобратьСтрокиТаблицыНДФЛПоУсловиям(НДФЛРезультатыРасчета, СоответствиеСтрокКоллекции)

	Если НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиОбновленияБухучета.ФизическоеЛицо) Тогда
			ДобавитьИдентификаторСтрокиБухучета(НДФЛРезультатыРасчета);
			Возврат;
		КонецЕсли;
		
		НДФЛРезультатыРасчета = НДФЛРезультатыРасчета.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(НДФЛРезультатыРасчета);
		
		// выполним отбор строк по физическому лицу
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.НДФЛ Цикл
			Если СтрокаТЗ.ФизическоеЛицо = НастройкиОбновленияБухучета.ФизическоеЛицо Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, НДФЛРезультатыРасчета, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
			ДобавитьИдентификаторСтрокиБухучета(НДФЛРезультатыРасчета);
			Возврат;
		КонецЕсли;
		
		НДФЛРезультатыРасчета = НДФЛРезультатыРасчета.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(НДФЛРезультатыРасчета);
		
		НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьНДФЛ", Истина));
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.НДФЛ Цикл
			Если ФизическиеЛицаМассив.Найти(СтрокаТЗ.ФизическоеЛицо) <> Неопределено Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, НДФЛРезультатыРасчета, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ОтобратьСтрокиТаблицыКорректировкиВыплатыПоУсловиям(КорректировкиВыплаты, СоответствиеСтрокКоллекции)

	Если НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиОбновленияБухучета.ФизическоеЛицо) Тогда
			ДобавитьИдентификаторСтрокиБухучета(КорректировкиВыплаты);
			Возврат;
		КонецЕсли;
		
		КорректировкиВыплаты = КорректировкиВыплаты.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(КорректировкиВыплаты);
		
		// выполним отбор строк по физическому лицу
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.КорректировкиВыплаты Цикл
			Если СтрокаТЗ.ФизическоеЛицо = НастройкиОбновленияБухучета.ФизическоеЛицо Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, КорректировкиВыплаты, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
			ДобавитьИдентификаторСтрокиБухучета(КорректировкиВыплаты);
			Возврат;
		КонецЕсли;
		
		КорректировкиВыплаты = КорректировкиВыплаты.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(КорректировкиВыплаты);
		
		НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьКорректировкиВыплаты", Истина));
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.КорректировкиВыплаты Цикл
			Если ФизическиеЛицаМассив.Найти(СтрокаТЗ.ФизическоеЛицо) <> Неопределено Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, КорректировкиВыплаты, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ОтобратьСтрокиТаблицыУдержанийПоУсловиям(Удержания, СоответствиеСтрокКоллекции)

	Если НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиОбновленияБухучета.ФизическоеЛицо) Тогда
			ДобавитьИдентификаторСтрокиБухучета(Удержания);
			Возврат;
		КонецЕсли;
		
		Удержания = Удержания.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(Удержания);
		
		// выполним отбор строк по физическому лицу
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.Удержания Цикл
			Если СтрокаТЗ.ФизическоеЛицо = НастройкиОбновленияБухучета.ФизическоеЛицо Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, Удержания, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
			ДобавитьИдентификаторСтрокиБухучета(Удержания);
			Возврат;
		КонецЕсли;
		
		Удержания = Удержания.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(Удержания);
		
		НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтНачислений", Истина));
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
		
		НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтВзносов", Истина));
		ФизическиеЛицаМассивУдержания = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ФизическиеЛицаМассивУдержания, Истина);
		
		НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтНДФЛ", Истина));
		ФизическиеЛицаМассивУдержания = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ФизическиеЛицаМассивУдержания, Истина);
		
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.Удержания Цикл
			Если ФизическиеЛицаМассив.Найти(СтрокаТЗ.ФизическоеЛицо) <> Неопределено Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, Удержания, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ОтобратьСтрокиТаблицыПогашениеЗаймовПоУсловиям(ПогашениеЗаймов, СоответствиеСтрокКоллекции)

	Если НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиОбновленияБухучета.ФизическоеЛицо) Тогда
			ДобавитьИдентификаторСтрокиБухучета(ПогашениеЗаймов);
			Возврат;
		КонецЕсли;
		
		ПогашениеЗаймов = ПогашениеЗаймов.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(ПогашениеЗаймов);
		
		// выполним отбор строк по физическому лицу
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.ПогашениеЗаймов Цикл
			Если СтрокаТЗ.ФизическоеЛицо = НастройкиОбновленияБухучета.ФизическоеЛицо Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, ПогашениеЗаймов, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
			ДобавитьИдентификаторСтрокиБухучета(ПогашениеЗаймов);
			Возврат;
		КонецЕсли;
		
		ПогашениеЗаймов = ПогашениеЗаймов.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(ПогашениеЗаймов);
		
		НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьЗаймы", Истина));
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.ПогашениеЗаймов Цикл
			Если ФизическиеЛицаМассив.Найти(СтрокаТЗ.ФизическоеЛицо) <> Неопределено Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, ПогашениеЗаймов, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(ИсходнаяСтрока, КоллекцияСтрок, СоответствиеСтрокКоллекции, ИдентификаторСтроки)

	НоваяСтрока = КоллекцияСтрок.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
	НоваяСтрока.ИдентификаторСтрокиБухучет = ИдентификаторСтроки;
	СоответствиеСтрокКоллекции.Вставить(ИдентификаторСтроки, ИсходнаяСтрока);
	ИдентификаторСтроки = ИдентификаторСтроки + 1;

КонецПроцедуры

Процедура ДобавитьИдентификаторСтрокиБухучета(Таблица)
	
	Если Таблица.Колонки.Найти("ИдентификаторСтрокиБухучет") = Неопределено Тогда
		Таблица.Колонки.Добавить("ИдентификаторСтрокиБухучет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7,0)));
	КонецЕсли;
	
	ИдентификаторСтроки = 1;
	Для каждого Строка Из Таблица Цикл
		Строка.ИдентификаторСтрокиБухучет = ИдентификаторСтроки;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокиБухучетСторноНачислений(Начисления, ИмяВТНачисления)

	СтрокиБухучетСторноНачислений = Новый Соответствие;
	Если Не НастройкиУчета.ИспользоватьСтатьиФинансирования Тогда
		Возврат СтрокиБухучетСторноНачислений;
	КонецЕсли;
		
	// Заполним соответствие СтрокиБухучетСторноНачислений,
	// ключ - ИдентификаторСтроки,
	// значение - таблица значений с распределением из строки таблицы Начисления.
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	ВТНачисленияДляОтраженияВБухучете КАК Начисления
	|ГДЕ
	|	Начисления.Сторно
	|	И НЕ Начисления.ФиксСторно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ИдентификаторСтроки
	|ИЗ
	|	ВТНачисленияДляОтраженияВБухучете КАК Начисления
	|ГДЕ
	|	Начисления.ФиксСторно";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляОтраженияВБухучете", ИмяВТНачисления);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Начисления.Индексы.Добавить("ИдентификаторСтрокиБухучет");
		Отбор = Новый Структура("ИдентификаторСтрокиБухучет");
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Отбор.ИдентификаторСтрокиБухучет = Выборка.ИдентификаторСтроки;
			НайденныеСтроки = Начисления.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				РезультатыРаспределения = НайденныеСтроки[0].РаспределениеПоСтатьям;
				Если РезультатыРаспределения.Количество()>0 Тогда
					СтрокиБухучетСторноНачислений.Вставить(Выборка.ИдентификаторСтроки, РезультатыРаспределения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Начисления.Индексы.Очистить();
		
	КонецЕсли;
	
	Возврат СтрокиБухучетСторноНачислений;

КонецФункции

Функция НоваяТаблицаНачисленияДляБухучета()

	ОписаниеТипаДата = Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата));
	МассивТиповНачислениеУдержание = Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам.Измерения.НачислениеУдержание.Тип.Типы();
	МассивТиповДокументОснование   = Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам.Реквизиты.ДокументОснование.Тип.Типы();
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7,0)));
	Таблица.Колонки.Добавить("Организация", 			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", 		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сотрудник",  			Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение",		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("Начисление", 			Новый ОписаниеТипов(МассивТиповНачислениеУдержание));
	Таблица.Колонки.Добавить("Результат",			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ПериодРегистрации",	ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ПериодДействия", 		ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ДатаНачала", 			ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ДатаОкончания", 		ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ДокументОснование", 	Новый ОписаниеТипов(МассивТиповДокументОснование));
	Таблица.Колонки.Добавить("Территория",			Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	Таблица.Колонки.Добавить("Сторно", 				Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ФиксСторно", 			Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ВидОперации", 			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	
	Возврат Таблица;

КонецФункции 

Функция НоваяТаблицаТерриторииДляБухучета()

	Территории = Новый ТаблицаЗначений;
	Территории.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Территории.Колонки.Добавить("Территория", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	Территории.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число"));
	
	Возврат Территории;

КонецФункции

Процедура СоздатьВТНачисленияДляОтраженияВБухучете(Начисления, ИмяВТНачисления)
	
	УдалитьВТ = Новый Массив;
	
	ИспользоватьОбособленныеТерритории = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории", Новый Структура("Организация", Организация));
	НачислениеУдержаниеВидОперации = ОтражениеЗарплатыВУчете.НачислениеУдержаниеВидОперации();
	
	ТаблицаНачисленияПоСотрудникам 	= НоваяТаблицаНачисленияДляБухучета();
	Территории 						= НоваяТаблицаТерриторииДляБухучета();
	
	НачисленияРегистрируемыеДокументом = Неопределено;
	Если ИсключаемыйРегистратор <> Неопределено Тогда
		ВидДокумента = РасчетЗарплатыРасширенный.ВидДокументаНачисленияПоДокументу(ИсключаемыйРегистратор);
		ВидыДокументовНачислений = ЗарплатаКадрыРасширенныйПовтИсп.ВидыДокументовНачислений();
		НачисленияРегистрируемыеДокументом = ВидыДокументовНачислений[ВидДокумента];
	КонецЕсли;
	
	Для каждого Строка Из Начисления Цикл
		
		Если ИспользоватьОбособленныеТерритории Тогда
			Для каждого СтрокаТерртиории Из Строка.ТерриторииУсловияТруда Цикл
				НоваяСтрокаТерритории = Территории.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТерритории, СтрокаТерртиории);
			    НоваяСтрокаТерритории.ИдентификаторСтроки = Строка.ИдентификаторСтрокиБухучет;
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНачисленияПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПериодРегистрации = МесяцНачисления;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ВидОперации = НачислениеУдержаниеВидОперации[НоваяСтрока.Начисление];
		НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтрокиБухучет;
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.ДокументОснование) Тогда
			Если Строка.Дополнительно.Свойство("СтраховойСлучай") И ЗначениеЗаполнено(Строка.Дополнительно.СтраховойСлучай) Тогда
				НоваяСтрока.ДокументОснование = Строка.Дополнительно.СтраховойСлучай;
			ИначеЕсли НачисленияРегистрируемыеДокументом <> Неопределено И НачисленияРегистрируемыеДокументом.Найти(НоваяСтрока.Начисление) <> Неопределено Тогда
				НоваяСтрока.ДокументОснование = ИсключаемыйРегистратор;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Начисления", ТаблицаНачисленияПоСотрудникам);
	Запрос.УстановитьПараметр("Территории", Территории);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Территории.ИдентификаторСтроки,
	|	Территории.Территория,
	|	Территории.Результат
	|ПОМЕСТИТЬ ВТТерриторииСтрокНачисленийВременная
	|ИЗ
	|	&Территории КАК Территории
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТерриторииСтрокНачислений.ИдентификаторСтроки,
	|	ТерриторииСтрокНачислений.Территория,
	|	СУММА(ТерриторииСтрокНачислений.Результат) КАК Результат
	|ПОМЕСТИТЬ ВТТерриторииСтрокНачислений
	|ИЗ
	|	ВТТерриторииСтрокНачисленийВременная КАК ТерриторииСтрокНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТерриторииСтрокНачислений.ИдентификаторСтроки,
	|	ТерриторииСтрокНачислений.Территория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.Организация,
	|	Начисления.ПериодРегистрации,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Подразделение,
	|	Начисления.Начисление,
	|	Начисления.ПериодДействия,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Результат,
	|	Начисления.ДокументОснование,
	|	Начисления.Сторно,
	|	Начисления.ФиксСторно,
	|	Начисления.ВидОперации
	|ПОМЕСТИТЬ ВТНачисленияТаблица
	|ИЗ
	|	&Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТТерриторииСтрокНачисленийВременная";
	УдалитьВТ.Добавить("ВТНачисленияТаблица");
	УдалитьВТ.Добавить("ВТТерриторииСтрокНачислений");
	Запрос.Выполнить();
	
	РасчетЗарплатыРасширенный.СкорректироватьПериодВТНачислений(МенеджерВременныхТаблиц, "ВТНачисленияТаблица");

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ПериодРегистрации,
	|	Начисления.Организация,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.Начисление,
	|	Начисления.ДокументОснование,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.Сторно,
	|	Начисления.ФиксСторно,
	|	ЕСТЬNULL(Территории.Результат, Начисления.Результат) КАК Сумма,
	|	ЕСТЬNULL(Территории.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)) КАК ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ВТНачисленияДляОтраженияВБухучете
	|ИЗ
	|	ВТНачисленияТаблица КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриторииСтрокНачислений КАК Территории
	|		ПО (Территории.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляОтраженияВБухучете", ИмяВТНачисления);
	Запрос.Выполнить();
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТНачисленияПоДоговорамДляОтраженияВБухучете(Начисления, ИмяВТНачисления)
	
	УдалитьВТ = Новый Массив;
	
	ИспользоватьОбособленныеТерритории = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории", Новый Структура("Организация", Организация));
	НачислениеУдержаниеВидОперации = ОтражениеЗарплатыВУчете.НачислениеУдержаниеВидОперации();
	
	ТаблицаНачисленияПоСотрудникам 	= НоваяТаблицаНачисленияДляБухучета();
	Территории 						= НоваяТаблицаТерриторииДляБухучета();
	
	Для каждого Строка Из Начисления Цикл
		
		Если ИспользоватьОбособленныеТерритории Тогда
			Для каждого СтрокаТерртиории Из Строка.ТерриторииУсловияТруда Цикл
				НоваяСтрокаТерритории = Территории.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТерритории, СтрокаТерртиории);
			    НоваяСтрокаТерритории.ИдентификаторСтроки = Строка.ИдентификаторСтрокиБухучет;
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНачисленияПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПериодРегистрации = МесяцНачисления;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ВидОперации = НачислениеУдержаниеВидОперации[НоваяСтрока.Начисление];
		НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтрокиБухучет;
		
	КонецЦикла;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Начисления", ТаблицаНачисленияПоСотрудникам);
	Запрос.УстановитьПараметр("Территории", Территории);
	Запрос.УстановитьПараметр("ПериодРегистрации", МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Территории.ИдентификаторСтроки,
	|	Территории.Территория,
	|	Территории.Результат
	|ПОМЕСТИТЬ ВТТерриторииСтрокНачисленийВременная
	|ИЗ
	|	&Территории КАК Территории
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТерриторииСтрокНачислений.ИдентификаторСтроки,
	|	ТерриторииСтрокНачислений.Территория,
	|	СУММА(ТерриторииСтрокНачислений.Результат) КАК Результат
	|ПОМЕСТИТЬ ВТТерриторииСтрокНачислений
	|ИЗ
	|	ВТТерриторииСтрокНачисленийВременная КАК ТерриторииСтрокНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТерриторииСтрокНачислений.ИдентификаторСтроки,
	|	ТерриторииСтрокНачислений.Территория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Подразделение,
	|	Начисления.Начисление,
	|	Начисления.ДатаНачала,
	|	Начисления.Датаокончания,
	|	Начисления.Результат,
	|	Начисления.ВидОперации,
	|	Начисления.ДокументОснование
	|ПОМЕСТИТЬ ВТНачисленияТаблица
	|ИЗ
	|	&Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	&Организация КАК Организация,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ДатаНачала,
	|	Начисления.Датаокончания,
	|	Начисления.Начисление,
	|	Начисления.ВидОперации,
	|	Начисления.ДокументОснование,
	|	Начисления.ИдентификаторСтроки,
	|	ЛОЖЬ КАК Сторно,
	|	ЛОЖЬ КАК ФиксСторно,
	|	ЕСТЬNULL(Территории.Результат, Начисления.Результат) КАК Сумма,
	|	ЕСТЬNULL(Территории.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)) КАК ТерриторияВыполненияРаботВОрганизации
	|ПОМЕСТИТЬ ВТНачисленияДляОтраженияВБухучете
	|ИЗ
	|	ВТНачисленияТаблица КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриторииСтрокНачислений КАК Территории
	|		ПО Начисления.ИдентификаторСтроки = Территории.ИдентификаторСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляОтраженияВБухучете", ИмяВТНачисления);
	Запрос.Выполнить();
	
	УдалитьВТ.Добавить("ВТНачисленияТаблица");
	УдалитьВТ.Добавить("ВТТерриторииСтрокНачисленийВременная");
	УдалитьВТ.Добавить("ВТТерриторииСтрокНачислений");
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Функция БухучетНачисленийИзКоллекцииСтрок(Начисления)

	БухучетНачислений = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаБухучетНачислений();
	
	Если Начисления.Колонки.Найти("ИдентификаторСтрокиБухучет") <> Неопределено Тогда
		ИмяПоляИдентификаторСтроки = "ИдентификаторСтрокиБухучет";
	Иначе
		ИмяПоляИдентификаторСтроки = "ИдентификаторСтроки";
	КонецЕсли;
	
	Для Каждого Строка Из Начисления Цикл
		Для каждого РезультатРаспределения Из Строка.РаспределениеПоСтатьям Цикл
			НоваяСтрока = БухучетНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатРаспределения);
			НоваяСтрока.ИдентификаторСтроки = Строка[ИмяПоляИдентификаторСтроки];
			НоваяСтрока.Сумма = РезультатРаспределения.Результат;
			НоваяСтрока.Организация = Организация;
		КонецЦикла;
	КонецЦикла;
	
	Возврат БухучетНачислений;

КонецФункции

Процедура СоздатьВТБухучетВсехНачисленийДляБухучетаУдержанийНДФЛ()

	Если ВТСуществует(ПараметрыБухучета.ИмяВТБухучетВсехНачислений) Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СуществуетВТБухучетНачислений  = ВТСуществует(ПараметрыБухучета.ИмяВТБухучетНачислений);
	СуществуетВТБухучетДоговорыГПХ = ВТСуществует(ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
	
	Если Не СуществуетВТБухучетНачислений Тогда
		БухучетНачислений = БухучетНачисленийИзКоллекцииСтрок(ЗарплатаМесяца.Начисления);
	КонецЕсли;
	Если Не СуществуетВТБухучетДоговорыГПХ Тогда
		БухучетДоговорыГПХ = БухучетНачисленийИзКоллекцииСтрок(ЗарплатаМесяца.ДоговорыПодряда);
	КонецЕсли;
	
	Если Не СуществуетВТБухучетНачислений И Не СуществуетВТБухучетДоговорыГПХ Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(БухучетДоговорыГПХ, БухучетНачислений);
		ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетНачислений, ПараметрыБухучета.ИмяВТБухучетВсехНачислений);
		Возврат;
	КонецЕсли;
			
	Если Не СуществуетВТБухучетНачислений Тогда
		ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетНачислений, ПараметрыБухучета.ИмяВТБухучетНачислений);
		УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетНачислений);
	ИначеЕсли Не СуществуетВТБухучетДоговорыГПХ Тогда
		ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетДоговорыГПХ, ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
		УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
	КонецЕсли;
	
	ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетВсехНачисленийДляБухучетаУдержанийНДФЛ(МенеджерВременныхТаблиц, ПараметрыБухучета);
		
	Если УдалитьВТ.Количество()>0 Тогда
		УничтожитьВТ(УдалитьВТ);
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьВТБухучетНачисленийДляРегистрацииДоходовСтраховыхВзносов(Начисления, ИмяВТБухучетНачислений)
	
	Если НастройкиУчета.ИспользоватьСтатьиФинансирования Тогда
		// Получим бухучет из таблицы Начисления и поместим данные во временную таблицу с именем ИмяВТБухучетНачислений.
		БухучетНачислений = БухучетНачисленийИзКоллекцииСтрок(Начисления);
		ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетНачислений, ИмяВТБухучетНачислений);
		РасчетЗарплатыРасширенный.СкорректироватьПериодВТНачислений(МенеджерВременныхТаблиц, ИмяВТБухучетНачислений);
	Иначе
		
		// Выполним отражение в бухучете начислений, результат будет помещен в таблицу ИмяВТБухучетНачислений.
		ДобавитьИдентификаторСтрокиБухучета(Начисления);
		ПолучитьБухучетНачисленийСоздатьВременнуюТаблицу(Начисления, ИмяВТБухучетНачислений);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыБухучета()

	ПараметрыБухучета.ПлательщикЕНВД = ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, МесяцНачисления);
	ПараметрыБухучета.ПроцентЕНВД    = ?(Не ПараметрыБухучета.ПлательщикЕНВД, 0, ОтражениеЗарплатыВБухучете.ПроцентЕНВД(Организация, МесяцНачисления));
	ПараметрыБухучета.ИмяВТБухучетВсехНачислений		 = "ВТБухучетВсехНачисленийМенеджераРасчета";
	ПараметрыБухучета.ИмяВТБухучетНачислений		     = "ВТБухучетНачисленийМенеджераРасчета";
	ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам  = "ВТБухучетНачисленийПоДоговорамМенеджераРасчета";
	
КонецПроцедуры

Процедура ЗаполнитьВыполняемыеДействияБухучетаПриРасчетеКоллекций()

	Если Не НастройкиУчета.ИспользоватьСтатьиФинансирования Тогда
		
		БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений = Ложь;
		БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров  = Ложь;
		БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ 	  = Ложь;
		БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний  = Ложь;
		БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов     = Ложь;
		БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты = Ложь;
		
	Иначе
		
		БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений = НастройкиРасчета.РассчитыватьНачисления;
		БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров  = НастройкиРасчета.РассчитыватьДоговорыПодряда;
		
		РассчитывалисьНачисления = НастройкиРасчета.РассчитыватьНачисления Или НастройкиРасчета.РассчитыватьДоговорыПодряда;
		
		БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ		 = НастройкиРасчета.РассчитыватьНДФЛ Или РассчитывалисьНачисления;
		БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний = НастройкиРасчета.РассчитыватьУдержания Или РассчитывалисьНачисления;
		БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов    = НастройкиРасчета.РассчитыватьЗаймы Или РассчитывалисьНачисления;
		БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты = НастройкиРасчета.РассчитыватьКорректировкиВыплаты Или РассчитывалисьНачисления;
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьВыполняемыеДействияПриОбновленииБухучета()

	Если НастройкиОбновленияБухучета.ОбновитьВсеТаблицы Тогда
		
		БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений = Истина;
		БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров  = Истина;
		БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ 	  = Истина;
		БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний  = Истина;
		БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов     = Истина;
		БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты = Истина;
		
	Иначе
		
		СоответсвиеИмен = Новый Соответствие;
		СоответсвиеИмен.Вставить("Начисления", 				 "Начисления");
		СоответсвиеИмен.Вставить("НачисленияПерерасчет", 	 "Начисления");
		СоответсвиеИмен.Вставить("ОплатаТруда", 			 "Начисления");
		СоответсвиеИмен.Вставить("Пособия", 				 "Начисления");
		СоответсвиеИмен.Вставить("Льготы", 					 "Начисления");
		СоответсвиеИмен.Вставить("ОплатаЛьгот", 			 "Начисления");
		СоответсвиеИмен.Вставить("ДоначисленияИПерерасчеты", "Начисления");
		СоответсвиеИмен.Вставить("НачисленияПоДоговорам", 	 "ДоговорыПодряда");
		СоответсвиеИмен.Вставить("ПогашениеЗаймов", 		 "ПогашениеЗаймов");
		СоответсвиеИмен.Вставить("НДФЛ", 					 "НДФЛ");
		СоответсвиеИмен.Вставить("Удержания", 				 "Удержания");
		СоответсвиеИмен.Вставить("КорректировкиВыплаты", 	 "КорректировкиВыплаты");	
		
		ИменаТаблицДляОбновленияМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НастройкиОбновленияБухучета.ИменаТаблицДляОбновления, ",");
		
		Для каждого ИмяТаблицыДокумента Из ИменаТаблицДляОбновленияМассив Цикл
			
			ИмяТаблицыМенеджера = СоответсвиеИмен[ИмяТаблицыДокумента];
			Если ИмяТаблицыМенеджера = "Начисления" И НастройкиОбновленияБухучета.ЗависимыеНачисления.Количество()>0 Тогда
				БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений = Истина;
			ИначеЕсли ИмяТаблицыМенеджера = "ДоговорыПодряда" Тогда
				БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров  = Истина;
			ИначеЕсли ИмяТаблицыМенеджера = "ПогашениеЗаймов" Тогда
				БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов  = Истина;
			ИначеЕсли ИмяТаблицыМенеджера = "НДФЛ" Тогда
				БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ  = Истина;
			ИначеЕсли ИмяТаблицыМенеджера = "Удержания" Тогда
				БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний  = Истина;
			ИначеЕсли ИмяТаблицыМенеджера = "КорректировкиВыплаты" Тогда
				БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты  = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьДанныеДляОбновленияБухучетаРезультатовРасчета()
	
	ДобавитьИдентификаторСтрокиБухучета(Зарплата.Начисления);
	ДобавитьИдентификаторСтрокиБухучета(Зарплата.ДоговорыПодряда);
	ДобавитьИдентификаторСтрокиБухучета(Зарплата.Удержания);
	ДобавитьИдентификаторСтрокиБухучета(Зарплата.НДФЛ);
	ДобавитьИдентификаторСтрокиБухучета(Зарплата.КорректировкиВыплаты);
	ДобавитьИдентификаторСтрокиБухучета(Зарплата.ПогашениеЗаймов);
	
	Если Не НастройкиОбновленияБухучета.ОбновитьВсеТаблицы Тогда
		// Выполняем распределение зависимых результатов после редактирования бухучета в форме.
		
		Если БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений Тогда
			// Таблица с бухучетом начислений до обновления, для получения бухучета зависимых начислений.
			ИмяВТ = "ВТБухучетНачисленийИзФормы";
			БухучетНачислений = БухучетНачисленийИзКоллекцииСтрок(Зарплата.Начисления);
			ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетНачислений, ИмяВТ);
			РасчетЗарплатыРасширенный.СкорректироватьПериодВТНачислений(МенеджерВременныхТаблиц, ИмяВТ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений И Зарплата.Начисления.Количество()>0 Тогда
		НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременныйРегистратор);
		РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, Зарплата.Начисления);
		СоздатьВТПоРегиструРасчета(НаборыЗаписей.Начисления);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗависимыеНачисленияСоСтратегиейБухучетаПоБазовымРасчетам(ВидРасчета)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БазовыеВидыРасчета.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК БазовыеВидыРасчета
	|ГДЕ
	|	БазовыеВидыРасчета.ВидРасчета = &ВидРасчета
	|	И БазовыеВидыРасчета.Ссылка.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");	

КонецФункции

#КонецОбласти

#Область Прочее

Функция ОписаниеВТСотрудникиПериоды()
	
	Описание = Новый Структура(
		"ИмяВТ, 
		|ИмяПоляСотрудник,
		|ИмяПоляНачалоПериода,
		|ИмяПоляОкончаниеПериода");
		
	Описание.ИмяВТ = "ВТСотрудникиПериоды";
	Описание.ИмяПоляСотрудник = "Сотрудник";
	Описание.ИмяПоляНачалоПериода = "НачалоПериода";
	Описание.ИмяПоляОкончаниеПериода = "ОкончаниеПериода";
		
	Возврат Описание;
	
КонецФункции

Функция ОписаниеВТФизическиеЛицаПериоды()
	
	Описание = Новый Структура(
		"ИмяВТ, 
		|ИмяПоляФизическоеЛицо,
		|ИмяПоляГоловнаяОрганизация,
		|ИмяПоляНачалоПериода,
		|ИмяПоляОкончаниеПериода");
		
	Описание.ИмяВТ = "ВТФизическиеЛицаПериоды";
	Описание.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	Описание.ИмяПоляГоловнаяОрганизация = "ГоловнаяОрганизация";
	Описание.ИмяПоляНачалоПериода = "НачалоПериода";
	Описание.ИмяПоляОкончаниеПериода = "ОкончаниеПериода";
		
	Возврат Описание;
	
КонецФункции

Функция ОписаниеВТНачисления()
	
	Описание = Новый Структура(
		"ИмяВТ, 
		|ИмяПоляСотрудник,
		|ИмяПоляНачисление,
		|ИмяПоляНачалоПериода,
		|ИмяПоляОкончаниеПериода, 
		|ИмяПоляФиксРасчетВремени");
		
	Описание.ИмяВТ = "ВТНачисления";
	Описание.ИмяПоляСотрудник = "Сотрудник";
	Описание.ИмяПоляНачалоПериода = "ДатаНачала";
	Описание.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	Описание.ИмяПоляФиксРасчетВремени = "ФиксРасчетВремени";
		
	Возврат Описание;
	
КонецФункции

Функция ОписаниеВТУдержания()
	
	Описание = Новый Структура(
		"ИмяВТ, 
		|ИмяПоляФизическоеЛицо,
		|ИмяПоляУдержание,
		|ИмяПоляНачалоПериода,
		|ИмяПоляОкончаниеПериода");
		
	Описание.ИмяВТ = "ВТУдержания";
	Описание.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	Описание.ИмяПоляНачалоПериода = "ДатаНачала";
	Описание.ИмяПоляОкончаниеПериода = "ДатаОкончания";
		
	Возврат Описание;
	
КонецФункции

Функция ОписаниеВТСПериодами()
	
	Описание = Новый Структура(
		"ИмяВТ, 
		|ИмяПоляНачалоПериода,
		|ИмяПоляОкончаниеПериода,
		|Измерения");
		
	Описание.ИмяВТ = "ВТСотрудникиПериоды";
	Описание.ИмяПоляНачалоПериода = "НачалоПериода";
	Описание.ИмяПоляОкончаниеПериода = "ОкончаниеПериода";
	Описание.Измерения = Новый Массив;
		
	Возврат Описание;
	
КонецФункции

Функция ОписаниеВТНачисленияКакВТСПериодами()
	
	ОписаниеВТ = ОписаниеВТСПериодами();
	ОписаниеВТ.ИмяВТ = "ВТНачисления";
	ОписаниеВТ.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	
	ОписаниеВТ.Измерения.Добавить("ИдентификаторСтроки");
	ОписаниеВТ.Измерения.Добавить("Сотрудник");
	ОписаниеВТ.Измерения.Добавить("Организация");
	ОписаниеВТ.Измерения.Добавить("Подразделение");
	ОписаниеВТ.Измерения.Добавить("Начисление");
	ОписаниеВТ.Измерения.Добавить("ДокументОснование");
	ОписаниеВТ.Измерения.Добавить("ВремяВЧасах");
	
	Возврат ОписаниеВТ;
	
КонецФункции

Процедура ЗаполнитьИдентификаторСтроки(Начисления)
	
	ИдентификаторСтроки = 1;
	Для Каждого Строка Из Начисления Цикл
		Строка.ИдентификаторСтроки = ИдентификаторСтроки;
		Если Строка.Показатели.Количество() > 0 Тогда
			Строка.Показатели.ЗаполнитьЗначения(ИдентификаторСтроки, "ИдентификаторСтроки");
		КонецЕсли;
		Если Строка.ТерриторииУсловияТруда.Количество() > 0 Тогда
			Строка.ТерриторииУсловияТруда.ЗаполнитьЗначения(ИдентификаторСтроки, "ИдентификаторСтроки");
		КонецЕсли;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТНачисления(Начисления, СтрокиПоИдентификатору)
	
	ИзвестныеПоказатели = ТаблицаПоказателей();
	
	ИдентификаторСтроки = 1;
	Для Каждого Строка Из Начисления Цикл
		Если Не ЗначениеЗаполнено(Строка.Организация) Тогда
			Строка.Организация = Организация;
		КонецЕсли;
		Строка.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокиПоИдентификатору.Вставить(ИдентификаторСтроки, Строка);
		Для Каждого СтрокаПоказателя Из Строка.ИзвестныеПоказатели Цикл
			НоваяСтрока = ИзвестныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказателя);
			НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		КонецЦикла;
		Если Строка.Показатели.Количество() > 0 Тогда
			Строка.Показатели.ЗаполнитьЗначения(ИдентификаторСтроки, "ИдентификаторСтроки");
		КонецЕсли;
		Если Строка.ТерриторииУсловияТруда.Количество() > 0 Тогда
			Строка.ТерриторииУсловияТруда.ЗаполнитьЗначения(ИдентификаторСтроки, "ИдентификаторСтроки");
		КонецЕсли;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.Организация,
		|	Начисления.Подразделение,
		|	Начисления.Начисление,
		|	Начисления.ДокументОснование,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.ВремяВЧасах,
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.ФиксЗаполнение,
		|	Начисления.ФиксРасчетВремени,
		|	Начисления.ФиксРасчет,
		|	Начисления.ФиксСторно
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&Начисления КАК Начисления";
	Запрос.Выполнить();
	
	СоздатьВТИзвестныеПоказатели(ИзвестныеПоказатели, "ВТИзвестныеПоказателиНачислений");
	
КонецПроцедуры

Процедура СоздатьВТРазбиениеСтрокНачислений(ОписаниеВТ)
	
	ИменаВТ = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.СоздатьВТРазбиениеСтрокНачислений(МенеджерВременныхТаблиц, ОписаниеВТ, ИменаВТ);
	КонецЕсли;
	
	Если ИменаВТ.Количество() = 0 Тогда
		Запрос = НовыйЗапрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	0 КАК Начисление,
			|	ИСТИНА КАК РазбиватьСтроку
			|ПОМЕСТИТЬ ВТРазбиениеСтрокНачислений";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "";
	Для Каждого ИмяВТ Из ИменаВТ Цикл
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		ТекстФрагмента = 
			"ВЫБРАТЬ
			|	РазбиениеСтрок.Начисление,
			|	РазбиениеСтрок.РазбиватьСтроку
			|ПОМЕСТИТЬ ВТРазбиениеСтрокНачислений
			|ИЗ
			|	#ИмяВТ КАК РазбиениеСтрок";
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "#ИмяВТ", ИмяВТ);
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "ПОМЕСТИТЬ ВТРазбиениеСтрокНачислений", "");
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстФрагмента;
	КонецЦикла;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	УничтожитьВТ(ИменаВТ);
	
КонецПроцедуры

Процедура СоздатьВТУсловияРазбиенияСтрокНачислений()

	УдалитьВТ = Новый Массив;
	
	ОписаниеВТНачисления = ОписаниеВТНачисления();
	ОписаниеВТНачисления.ИмяВТ = "ВТНачисления";
	ОписаниеВТНачисления.ИмяПоляНачисление = "Начисление";
	СоздатьВТРазбиениеСтрокНачислений(ОписаниеВТНачисления);
	УдалитьВТ.Добавить("ВТРазбиениеСтрокНачислений");
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Праздники", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	Начисления.ДатаОкончания КАК ДатаОкончания,
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВидыРасчета.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
		|	ЕСТЬNULL(РазбиениеСтрок.РазбиватьСтроку, ИСТИНА) КАК РазбиватьСтроку,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыРасчета.НачисляетсяВЦеломЗаМесяц, ЛОЖЬ) = ЛОЖЬ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьКадровыеИзменения,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ТребуетсяРасчетВремени
		|				ИЛИ ВидыРасчета.ТребуетсяРасчетНормыВремени
		|				ИЛИ ВидыРасчета.ТребуетсяРасчетКалендарныхДнейБезПраздников
		|				ИЛИ ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТПоказателиРасчета КАК ПоказателиРасчета
		|					ГДЕ
		|						ПоказателиРасчета.ВидРасчета = ВидыРасчета.Ссылка
		|						И ПоказателиРасчета.ПоказательКоличествоДнейОтпуска)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияОбщегоГрафика,
		|	ЕСТЬNULL(ВидыРасчета.УчитыватьИзмененияВремяВЧасах, ЛОЖЬ) КАК УчитыватьИзмененияВремяВЧасах,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыРасчета.НачисляетсяВЦеломЗаМесяц, ЛОЖЬ) = ЛОЖЬ
		|				И ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТПоказателиРасчета КАК ПоказателиРасчета
		|					ГДЕ
		|						ПоказателиРасчета.ВидРасчета = ВидыРасчета.Ссылка
		|						И ПоказателиРасчета.ПериодическийПоказательСотрудника)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияПериодическихПоказателейСотрудников,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыРасчета.НачисляетсяВЦеломЗаМесяц, ЛОЖЬ) = ЛОЖЬ
		|				И ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТПоказателиРасчета КАК ПоказателиРасчета
		|					ГДЕ
		|						ПоказателиРасчета.ВидРасчета = ВидыРасчета.Ссылка
		|						И ПоказателиРасчета.ПериодическийПоказательОрганизации)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияПериодическихПоказателейОрганизации,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыРасчета.НачисляетсяВЦеломЗаМесяц, ЛОЖЬ) = ЛОЖЬ
		|				И ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТПоказателиРасчета КАК ПоказателиРасчета
		|					ГДЕ
		|						ПоказателиРасчета.ВидРасчета = ВидыРасчета.Ссылка
		|						И ПоказателиРасчета.ПериодическийПоказательПодразделения)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияПериодическихПоказателейПодразделения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыРасчета.НачисляетсяВЦеломЗаМесяц, ЛОЖЬ) = ЛОЖЬ
		|				И ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТПоказателиРасчета КАК ПоказателиРасчета
		|					ГДЕ
		|						ПоказателиРасчета.ВидРасчета = ВидыРасчета.Ссылка
		|						И ПоказателиРасчета.ПоказательЧисловойЗависящийОтСтажа)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияСтажа,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыРасчета.НачисляетсяВЦеломЗаМесяц, ЛОЖЬ) = ЛОЖЬ
		|				И ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТПоказателиРасчета КАК ПоказателиРасчета
		|					ГДЕ
		|						ПоказателиРасчета.ВидРасчета = ВидыРасчета.Ссылка
		|						И ПоказателиРасчета.ПоказательБазовыйТарифГруппы)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияБазовогоТарифаГруппы,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыРасчета.НачисляетсяВЦеломЗаМесяц, ЛОЖЬ) = ЛОЖЬ
		|				И ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТПоказателиРасчета КАК ПоказателиРасчета
		|					ГДЕ
		|						ПоказателиРасчета.ВидРасчета = ВидыРасчета.Ссылка
		|						И ПоказателиРасчета.ПоказательСтоимостьЧаса)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияСовокупнойСтавки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыРасчета.НачисляетсяВЦеломЗаМесяц, ЛОЖЬ) = ЛОЖЬ
		|				И (ВидыРасчета.Ссылка ЕСТЬ NULL
		|					ИЛИ ВидыРасчета.СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете)))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияПлановыхНачислений,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыРасчета.НачисляетсяВЦеломЗаМесяц, ЛОЖЬ) = ЛОЖЬ
		|				И ЕСТЬNULL(ВидыРасчета.ТребуетсяРасчетБазы, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияБазовыхНачислений,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыРасчета.НачисляетсяВЦеломЗаМесяц, ЛОЖЬ) = ЛОЖЬ
		|				И (ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет)
		|					ИЛИ ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияУсловийОплатыПособия,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыРасчета.НачисляетсяВЦеломЗаМесяц, ЛОЖЬ) = ЛОЖЬ
		|				И ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьПроцентСевернойНадбавки,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(Начисления.ДатаОкончания, МЕСЯЦ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьДатыНачалаМесяцев
		|ПОМЕСТИТЬ ВТУсловияРазбиения
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазбиениеСтрокНачислений КАК РазбиениеСтрок
		|		ПО (РазбиениеСтрок.Начисление = Начисления.Начисление)";
	Запрос.Выполнить();
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Функция УсловияРазбиенияСтрокНачислений()
	
	УсловияРазбиения = Новый Структура(
		"УчитыватьКадровыеИзменения,
		|УчитыватьИзмененияОбщегоГрафика,
		|УчитыватьИзмененияВремяВЧасах,
		|УчитыватьИзмененияПериодическихПоказателейСотрудников,
		|УчитыватьИзмененияПериодическихПоказателейОрганизации,
		|УчитыватьИзмененияПериодическихПоказателейПодразделения,
		|УчитыватьИзмененияСтажа,
		|УчитыватьИзмененияБазовогоТарифаГруппы,
		|УчитыватьИзмененияСовокупнойСтавки,
		|УчитыватьИзмененияПлановыхНачислений,
		|УчитыватьИзмененияБазовыхНачислений,
		|УчитыватьИзмененияУсловийОплатыПособия,
		|УчитыватьПроцентСевернойНадбавки,
		|УчитыватьДатыНачалаМесяцев,
		|МинимальнаяДата,
		|МаксимальнаяДата");
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(УсловияРазбиения.УчитыватьКадровыеИзменения) КАК УчитыватьКадровыеИзменения,
		|	МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияОбщегоГрафика) КАК УчитыватьИзмененияОбщегоГрафика,
		|	МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияВремяВЧасах) КАК УчитыватьИзмененияВремяВЧасах,
		|	МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейСотрудников) КАК УчитыватьИзмененияПериодическихПоказателейСотрудников,
		|	МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейОрганизации) КАК УчитыватьИзмененияПериодическихПоказателейОрганизации,
		|	МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейПодразделения) КАК УчитыватьИзмененияПериодическихПоказателейПодразделения,
		|	МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияСтажа) КАК УчитыватьИзмененияСтажа,
		|	МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияБазовогоТарифаГруппы) КАК УчитыватьИзмененияБазовогоТарифаГруппы,
		|	МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияСовокупнойСтавки) КАК УчитыватьИзмененияСовокупнойСтавки,
		|	МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияПлановыхНачислений) КАК УчитыватьИзмененияПлановыхНачислений,
		|	МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияБазовыхНачислений) КАК УчитыватьИзмененияБазовыхНачислений,
		|	МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияУсловийОплатыПособия) КАК УчитыватьИзмененияУсловийОплатыПособия,
		|	МАКСИМУМ(УсловияРазбиения.УчитыватьПроцентСевернойНадбавки) КАК УчитыватьПроцентСевернойНадбавки,
		|	МАКСИМУМ(УсловияРазбиения.УчитыватьДатыНачалаМесяцев) КАК УчитыватьДатыНачалаМесяцев,
		|	МИНИМУМ(УсловияРазбиения.ДатаНачала) КАК МинимальнаяДата,
		|	МАКСИМУМ(УсловияРазбиения.ДатаОкончания) КАК МаксимальнаяДата
		|ИЗ
		|	ВТУсловияРазбиения КАК УсловияРазбиения
		|ГДЕ
		|	УсловияРазбиения.РазбиватьСтроку = ИСТИНА";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(УсловияРазбиения, Выборка);
	
	Возврат УсловияРазбиения;
	
КонецФункции

Функция ОписаниеВТУдержанияКакВТСПериодами()
	
	ОписаниеВТ = ОписаниеВТСПериодами();
	ОписаниеВТ.ИмяВТ = "ВТУдержания";
	ОписаниеВТ.ИмяПоляНачалоПериода = "ДатаНачала";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "ДатаОкончания";
	
	ОписаниеВТ.Измерения.Добавить("ИдентификаторСтроки");
	ОписаниеВТ.Измерения.Добавить("ФизическоеЛицо");
	ОписаниеВТ.Измерения.Добавить("ГоловнаяОрганизация");
	ОписаниеВТ.Измерения.Добавить("Удержание");
	ОписаниеВТ.Измерения.Добавить("ДокументОснование");
	ОписаниеВТ.Измерения.Добавить("Сотрудник");
	
	Возврат ОписаниеВТ;
	
КонецФункции

Процедура СоздатьВТУдержания(Удержания, СтрокиПоИдентификатору, ЗаполнятьДополнительныеПоля = Истина)
	
	ИзвестныеПоказатели = ТаблицаПоказателей();
	
	ИдентификаторСтроки = 1;
	Для Каждого Строка Из Удержания Цикл
		Строка.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокиПоИдентификатору.Вставить(ИдентификаторСтроки, Строка);
		Для Каждого СтрокаПоказателя Из Строка.ИзвестныеПоказатели Цикл
			НоваяСтрока = ИзвестныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказателя);
			НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		КонецЦикла;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Удержания", Удержания);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ФизическоеЛицо,
		|	Удержания.ГоловнаяОрганизация,
		|	Удержания.Удержание,
		|	Удержания.ДокументОснование,
		|	Удержания.ДатаНачала,
		|	Удержания.ДатаОкончания,
		|	Удержания.ИдентификаторСтроки,
		|	Удержания.Сотрудник,
		|	Удержания.Организация,
		|	Удержания.Подразделение,
		|	Удержания.ФиксЗаполнение,
		|	Удержания.ФиксРасчет,
		|	Удержания.ФиксСторно
		|ПОМЕСТИТЬ ВТТаблицаУдержаний
		|ИЗ
		|	&Удержания КАК Удержания";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТТаблицаУдержаний");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ФизическоеЛицо,
		|	Удержания.ГоловнаяОрганизация,
		|	Удержания.Удержание,
		|	Удержания.ДокументОснование,
		|	Удержания.ДатаНачала,
		|	Удержания.ДатаОкончания,
		|	Удержания.ИдентификаторСтроки,
		|	Удержания.Сотрудник,
		|	Удержания.Организация,
		|	Удержания.Подразделение,
		|	Удержания.ФиксЗаполнение,
		|	Удержания.ФиксРасчет,
		|	Удержания.ФиксСторно,
		|	ВидыРасчета.УдерживаетсяВЦеломЗаМесяц
		|ПОМЕСТИТЬ ВТУдержания
		|ИЗ
		|	ВТТаблицаУдержаний КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Удержания.Удержание)";
	Запрос.Выполнить();
	
	Если ЗаполнятьДополнительныеПоля Тогда
		ЗаполнитьДополнительныеПоляВТУдержания();
	КонецЕсли;
	
	СоздатьВТИзвестныеПоказатели(ИзвестныеПоказатели, "ВТИзвестныеПоказателиУдержаний");
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеПоляВТУдержания()
	ИсполнительныеЛисты.ЗаполнитьПризнакУдерживаетсяВЦеломЗаМесяц(МенеджерВременныхТаблиц);
КонецПроцедуры

Процедура СоздатьВТУсловияРазбиенияСтрокУдержаний()

	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ФизическоеЛицо,
		|	Удержания.ГоловнаяОрганизация,
		|	Удержания.Удержание,
		|	Удержания.ДатаНачала,
		|	Удержания.ДатаОкончания,
		|	Удержания.ИдентификаторСтроки,
		|	ВЫБОР
		|		КОГДА НЕ ВидыРасчета.УдерживаетсяВЦеломЗаМесяц
		|				И ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТПоказателиРасчета КАК ПоказателиУдержаний
		|					ГДЕ
		|						ПоказателиУдержаний.ВидРасчета = ВидыРасчета.Ссылка
		|						И ПоказателиУдержаний.ПериодическийПоказательСотрудника)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияПериодическихПоказателейСотрудников,
		|	ВЫБОР
		|		КОГДА НЕ ВидыРасчета.УдерживаетсяВЦеломЗаМесяц
		|				И ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТПоказателиРасчета КАК ПоказателиУдержаний
		|					ГДЕ
		|						ПоказателиУдержаний.ВидРасчета = ВидыРасчета.Ссылка
		|						И ПоказателиУдержаний.ПериодическийПоказательОрганизации)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияПериодическихПоказателейОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ ВидыРасчета.УдерживаетсяВЦеломЗаМесяц
		|				И ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТПоказателиРасчета КАК ПоказателиУдержаний
		|					ГДЕ
		|						ПоказателиУдержаний.ВидРасчета = ВидыРасчета.Ссылка
		|						И ПоказателиУдержаний.ПериодическийПоказательПодразделения)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияПериодическихПоказателейПодразделения,
		|	ВЫБОР
		|		КОГДА НЕ ВидыРасчета.УдерживаетсяВЦеломЗаМесяц
		|				И ВидыРасчета.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияПлановыхУдержаний,
		|	ВЫБОР
		|		КОГДА НЕ ВидыРасчета.УдерживаетсяВЦеломЗаМесяц
		|				И ВидыРасчета.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияРабочихМестУдержаний,
		|	ВЫБОР
		|		КОГДА НЕ ВидыРасчета.УдерживаетсяВЦеломЗаМесяц
		|				И ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТПоказателиРасчета КАК ПоказателиУдержаний
		|					ГДЕ
		|						ПоказателиУдержаний.ВидРасчета = ВидыРасчета.Ссылка
		|						И (ПоказателиУдержаний.ПериодическийПоказательПодразделения
		|							ИЛИ ПоказателиУдержаний.ПериодическийПоказательОрганизации))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияОсновногоСотрудника,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(Удержания.ДатаНачала, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(Удержания.ДатаОкончания, МЕСЯЦ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьДатыНачалаМесяцев
		|ПОМЕСТИТЬ ВТУсловияРазбиения
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Удержания.Удержание)";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция УсловияРазбиенияСтрокУдержаний()
	
	УсловияРазбиения = Новый Структура(
		"УчитыватьИзмененияПериодическихПоказателейСотрудников,
		|УчитыватьИзмененияПериодическихПоказателейОрганизации,
		|УчитыватьИзмененияПериодическихПоказателейПодразделения,
		|УчитыватьИзмененияПлановыхУдержаний,
		|УчитыватьИзмененияРабочихМестУдержаний,
		|УчитыватьИзмененияОсновногоСотрудника,
		|УчитыватьДатыНачалаМесяцев,
		|МинимальнаяДата,
		|МаксимальнаяДата");
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейСотрудников), ЛОЖЬ) КАК УчитыватьИзмененияПериодическихПоказателейСотрудников,
		|	ЕСТЬNULL(МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейОрганизации), ЛОЖЬ) КАК УчитыватьИзмененияПериодическихПоказателейОрганизации,
		|	ЕСТЬNULL(МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияПериодическихПоказателейПодразделения), ЛОЖЬ) КАК УчитыватьИзмененияПериодическихПоказателейПодразделения,
		|	ЕСТЬNULL(МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияПлановыхУдержаний), ЛОЖЬ) КАК УчитыватьИзмененияПлановыхУдержаний,
		|	ЕСТЬNULL(МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияРабочихМестУдержаний), ЛОЖЬ) КАК УчитыватьИзмененияРабочихМестУдержаний,
		|	ЕСТЬNULL(МАКСИМУМ(УсловияРазбиения.УчитыватьИзмененияОсновногоСотрудника), ЛОЖЬ) КАК УчитыватьИзмененияОсновногоСотрудника,
		|	ЕСТЬNULL(МАКСИМУМ(УсловияРазбиения.УчитыватьДатыНачалаМесяцев), ЛОЖЬ) КАК УчитыватьДатыНачалаМесяцев,
		|	МИНИМУМ(УсловияРазбиения.ДатаНачала) КАК МинимальнаяДата,
		|	МАКСИМУМ(УсловияРазбиения.ДатаОкончания) КАК МаксимальнаяДата
		|ИЗ
		|	ВТУсловияРазбиения КАК УсловияРазбиения";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(УсловияРазбиения, Выборка);
	
	Возврат УсловияРазбиения;
	
КонецФункции

Процедура ЗаполнитьКадровыеСведенияВТСПериодами(ОписаниеВТСПериодами, РазбиватьВТПериоды = Истина)
	
	СоздатьВТКадровыеИзмененияИнтервалы(ОписаниеВТСПериодами);
	
	ПоляКадровыхСведений = Новый Массив;
	ПоляКадровыхСведений.Добавить("Организация");
	ПоляКадровыхСведений.Добавить("ГоловнаяОрганизация");
	ПоляКадровыхСведений.Добавить("Подразделение");
	ПоляКадровыхСведений.Добавить("ДолжностьПоШтатномуРасписанию");
	ПоляКадровыхСведений.Добавить("ВидСобытия");
	ПоляКадровыхСведений.Добавить("ДатаНачала");
	ПоляКадровыхСведений.Добавить("ДатаОкончания");
	
	Запрос = НовыйЗапрос();
	Если РазбиватьВТПериоды Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	&ИменаПолей,
			|	КадровыеИзменения.Организация,
			|	КадровыеИзменения.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	КадровыеИзменения.Подразделение,
			|	КадровыеИзменения.ДолжностьПоШтатномуРасписанию,
			|	КадровыеИзменения.ВидСобытия,
			|	ЕСТЬNULL(КадровыеИзменения.НачалоПериода, СотрудникиПериоды.ДатаНачала) КАК ДатаНачала,
			|	ЕСТЬNULL(КадровыеИзменения.КонецПериода, СотрудникиПериоды.ДатаОкончания) КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТВсеСотрудникиПериоды
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеИзмененияИнтервалы КАК КадровыеИзменения
			|		ПО (КадровыеИзменения.Сотрудник = СотрудникиПериоды.Сотрудник)
			|			И (КадровыеИзменения.ДатаНачала = СотрудникиПериоды.ДатаНачала)
			|			И (КадровыеИзменения.ДатаОкончания = СотрудникиПериоды.ДатаОкончания)";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	&ИменаПолей,
			|	КадровыеИзменения.Организация,
			|	КадровыеИзменения.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	КадровыеИзменения.Подразделение,
			|	КадровыеИзменения.ДолжностьПоШтатномуРасписанию,
			|	КадровыеИзменения.ВидСобытия,
			|	СотрудникиПериоды.ДатаНачала КАК ДатаНачала,
			|	СотрудникиПериоды.ДатаОкончания КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТВсеСотрудникиПериоды
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеИзмененияИнтервалы КАК КадровыеИзменения
			|		ПО (КадровыеИзменения.Сотрудник = СотрудникиПериоды.Сотрудник)
			|			И (СотрудникиПериоды.ДатаНачала МЕЖДУ КадровыеИзменения.ДатаНачала И КадровыеИзменения.ДатаОкончания)";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСПериодами.ИмяПоляОкончаниеПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, ОписаниеВТСПериодами.ИмяВТ, "СотрудникиПериоды", ПоляКадровыхСведений);
	Запрос.Выполнить();
	УничтожитьВТ(ОписаниеВТСПериодами.ИмяВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	СотрудникиПериоды.Организация,
		|	СотрудникиПериоды.ГоловнаяОрганизация,
		|	СотрудникиПериоды.Подразделение,
		|	СотрудникиПериоды.ДолжностьПоШтатномуРасписанию,
		|	СотрудникиПериоды.ВидСобытия,
		|	СотрудникиПериоды.ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТВсеСотрудникиПериоды КАК СотрудникиПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + ОписаниеВТСПериодами.ИмяПоляОкончаниеПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТВсеСотрудникиПериоды", "СотрудникиПериоды", ПоляКадровыхСведений);
	Запрос.Выполнить();
	УничтожитьВТ("ВТВсеСотрудникиПериоды");
	
КонецПроцедуры

Процедура ЗаполнитьКадровоеПодразделениеВТСПериодами(ОписаниеВТСПериодами)
	
	СоздатьВТКадровыеИзмененияИнтервалы(ОписаниеВТСПериодами);
	
	ПоляКадровыхСведений = Новый Массив;
	ПоляКадровыхСведений.Добавить("Подразделение");
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	КадровыеИзменения.Подразделение
		|ПОМЕСТИТЬ ВТВсеСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеИзмененияИнтервалы КАК КадровыеИзменения
		|		ПО (КадровыеИзменения.Сотрудник = СотрудникиПериоды.Сотрудник)
		|			И (СотрудникиПериоды.ДатаНачала МЕЖДУ КадровыеИзменения.НачалоПериода И КадровыеИзменения.КонецПериода)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, ОписаниеВТСПериодами.ИмяВТ, "СотрудникиПериоды", ПоляКадровыхСведений);
	Запрос.Выполнить();
	УничтожитьВТ(ОписаниеВТСПериодами.ИмяВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	СотрудникиПериоды.Подразделение
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТВсеСотрудникиПериоды КАК СотрудникиПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСПериодами.ИмяВТ);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТВсеСотрудникиПериоды", "СотрудникиПериоды", ПоляКадровыхСведений);
	Запрос.Выполнить();
	УничтожитьВТ("ВТВсеСотрудникиПериоды");
	
КонецПроцедуры

Процедура ЗаполнитьКадровуюДолжностьВТСПериодами(ОписаниеВТСПериодами)
	
	СоздатьВТКадровыеИзмененияИнтервалы(ОписаниеВТСПериодами);
	
	ПоляКадровыхСведений = Новый Массив;
	ПоляКадровыхСведений.Добавить("ДолжностьПоШтатномуРасписанию");
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	КадровыеИзменения.ДолжностьПоШтатномуРасписанию
		|ПОМЕСТИТЬ ВТВсеСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеИзмененияИнтервалы КАК КадровыеИзменения
		|		ПО (КадровыеИзменения.Сотрудник = СотрудникиПериоды.Сотрудник)
		|			И (СотрудникиПериоды.ДатаНачала МЕЖДУ КадровыеИзменения.НачалоПериода И КадровыеИзменения.КонецПериода)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСПериодами.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + ОписаниеВТСПериодами.ИмяПоляНачалоПериода);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, ОписаниеВТСПериодами.ИмяВТ, "СотрудникиПериоды", ПоляКадровыхСведений);
	Запрос.Выполнить();
	УничтожитьВТ(ОписаниеВТСПериодами.ИмяВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	СотрудникиПериоды.ДолжностьПоШтатномуРасписанию
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТВсеСотрудникиПериоды КАК СотрудникиПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСПериодами.ИмяВТ);
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТВсеСотрудникиПериоды", "СотрудникиПериоды", ПоляКадровыхСведений);
	Запрос.Выполнить();
	УничтожитьВТ("ВТВсеСотрудникиПериоды");
	
КонецПроцедуры

Процедура ЗаполнитьСохраняемыеПоляВТ(ТекстЗапроса, ИмяВТ, ПсевдонимТаблицы, ПоляИсключения = Неопределено)
	Если ПоляИсключения = Неопределено Тогда
		ПоляИсключения = Новый Массив;
	КонецЕсли;	
	ЗарплатаКадры.ЗаполнитьИменаПолейВТ(ТекстЗапроса, МенеджерВременныхТаблиц, ИмяВТ, ПсевдонимТаблицы, ПоляИсключения)
КонецПроцедуры

Функция ТаблицаРасшифровкиРасчетнойБазы()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("БазовоеНачисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("СуммаЦеломесячная", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("КатегорияБазовогоНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени"));
	Таблица.Колонки.Добавить("СуммаДополнения", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("СуммаНДФЛ", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("НеполныйМесяц", Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

Функция ТаблицаОпределяющихПоказателей()
		
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Показатели.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Показатели.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	Показатели.Колонки.Добавить("Значение", Метаданные.ОпределяемыеТипы.ЗначениеПоказателяРасчетаЗарплаты.Тип);
	Показатели.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));

	Возврат Показатели;
	
КонецФункции

Процедура ДополнитьТаблицуСотрудниковПериодов(ТаблицаИсточник, ТаблицаПриемник)
	
	СтрокиПриемника = ТаблицаПриемник.Скопировать(, "Сотрудник, ДатаНачала, ДатаОкончания");
	СтрокиПриемника.Свернуть("Сотрудник, ДатаНачала, ДатаОкончания");
	
	Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
		ДобавлятьСтроку = Истина;
		Для Каждого СтрокаПриемника Из СтрокиПриемника Цикл
			Если СтрокаИсточника.Сотрудник = СтрокаПриемника.Сотрудник
				И ДатаМежду(СтрокаИсточника.ДатаНачала, СтрокаПриемника.ДатаНачала, СтрокаПриемника.ДатаОкончания)
				И ДатаМежду(СтрокаИсточника.ДатаОкончания, СтрокаПриемника.ДатаНачала, СтрокаПриемника.ДатаОкончания) Тогда
				ДобавлятьСтроку = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ДобавлятьСтроку Тогда
			НоваяСтрока = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВТЗначенияПоказателей

#Область ВТЗначенияПериодическихПоказателей

// Ожидается ВТ с полями
// - Сотрудник
// - Организация
// - Показатель
//
Процедура СоздатьВТЗначенияПериодическихПоказателейСотрудниковИнтервалы(ОписаниеВТСотрудникиПериоды)
	
	Если ВТСуществует("ВТЗначенияПериодическихПоказателейСотрудниковИнтервалы") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписаниеВТСотрудникиПериоды.ИмяВТ, 
		"Сотрудник,Организация,Показатель,ДокументОснование");
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраПериоды(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейСотрудниковИнтервалы");
	
КонецПроцедуры

// Ожидается ВТ с полями
// - ФизическоеЛицо
// - ГоловнаяОрганизация
// - ДокументОснование
// - Показатель
//
Процедура СоздатьВТЗначенияПериодическихПоказателейФизическихЛицИнтервалы(ОписаниеВТФизическиеЛицаПериоды)
	
	Если ВТСуществует("ВТЗначенияПериодическихПоказателейФизическихЛицИнтервалы") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписаниеВТФизическиеЛицаПериоды.ИмяВТ, 
		"ФизическоеЛицо,ДокументОснование,Показатель");
	
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраПериоды(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейФизическихЛицИнтервалы");
	
КонецПроцедуры

// Ожидается ВТ с полями
// - Организация
// - Показатель
// - НачалоПериода
// - ОкончаниеПериода
//
Процедура СоздатьВТЗначенияПериодическихПоказателейОрганизацийИнтервалы(ОписаниеВТОрганизацииПериоды)
	
	Если ВТСуществует("ВТЗначенияПериодическихПоказателейОрганизацийИнтервалы") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписаниеВТОрганизацииПериоды.ИмяВТ, 
		"Организация");
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраПериоды(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейОрганизацийИнтервалы");
	
КонецПроцедуры

// Ожидается ВТ с полями
// - Подразделение
// - Показатель
// - НачалоПериода
// - ОкончаниеПериода
//
Процедура СоздатьВТЗначенияПериодическихПоказателейПодразделенийИнтервалы(ОписаниеВТПодразделенияПериоды)
	
	Если ВТСуществует("ВТЗначенияПериодическихПоказателейПодразделенийИнтервалы") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписаниеВТПодразделенияПериоды.ИмяВТ, "Подразделение");
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраПериоды(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейПодразделенийИнтервалы");
	
КонецПроцедуры

#КонецОбласти

#Область ВТЗначенияРазовыхПоказателей

Функция ОписаниеВТРазовыхПоказателей()
	
	Описание = Новый Структура(
		"ИмяВТ, 
		|ИмяПоляПоказатель,
		|ИмяПоляМесяц");
		
	Описание.ИмяВТ = "ВТИзмеренияМесяцы";
	Описание.ИмяПоляМесяц = "Месяц";
		
	Возврат Описание;
	
КонецФункции

// Ожидается ВТ с полями
// - Сотрудник
// - Организация
// - Месяц
// - Показатель (опционально, если не указан, выполняется поиск всех показателей).
//
Процедура СоздатьВТЗначенияРазовыхПоказателейСотрудников(ОписаниеВТ)
	
	Если ВТСуществует("ВТЗначенияРазовыхПоказателейСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияРазовыхСотрудников.ПериодДействия,
		|	ЗначенияРазовыхСотрудников.Сотрудник,
		|	ЗначенияРазовыхСотрудников.Показатель,
		|	ЗначенияРазовыхСотрудников.Организация,
		|	ЗначенияРазовыхСотрудников.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхПоказателейСотрудников
		|ИЗ
		|	РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиМесяцы КАК СотрудникиМесяцы
		|		ПО (СотрудникиМесяцы.Месяц = ЗначенияРазовыхСотрудников.ПериодДействия)
		|			И (СотрудникиМесяцы.Сотрудник = ЗначенияРазовыхСотрудников.Сотрудник)
		|			И (СотрудникиМесяцы.Организация = ЗначенияРазовыхСотрудников.Организация)
		|			И (СотрудникиМесяцы.Показатель = ЗначенияРазовыхСотрудников.Показатель)
		|			И (ЗначенияРазовыхСотрудников.Регистратор <> &ИсключаемыйРегистратор)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиМесяцы", ОписаниеВТ.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиМесяцы.Месяц", ОписаниеВТ.ИмяПоляМесяц);
	Если ОписаниеВТ.ИмяПоляПоказатель = Неопределено Тогда
		// Если поле показатель не определено, выполняем поиск по всем показателям.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (СотрудникиМесяцы.Показатель = ЗначенияРазовыхСотрудников.Показатель)", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиМесяцы.Показатель", "СотрудникиМесяцы." + ОписаниеВТ.ИмяПоляПоказатель);
	КонецЕсли;
	Запрос.Выполнить();
	
КонецПроцедуры

// Ожидается ВТ с полями
// - ФизическоеЛицо
// - Месяц
// - Показатель (опционально, если не указан, выполняется поиск всех показателей).
//
Процедура СоздатьВТЗначенияРазовыхПоказателейФизическихЛиц(ОписаниеВТ)
	
	Если ВТСуществует("ВТЗначенияРазовыхПоказателейФизическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияРазовыхСотрудников.ПериодДействия,
		|	ЗначенияРазовыхСотрудников.Сотрудник,
		|	ЗначенияРазовыхСотрудников.Показатель,
		|	ЗначенияРазовыхСотрудников.Организация,
		|	ЗначенияРазовыхСотрудников.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЗначенияРазовыхСотрудников.ФизическоеЛицо,
		|	ЗначенияРазовыхСотрудников.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхПоказателейФизическихЛиц
		|ИЗ
		|	РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаМесяцы КАК ФизическиеЛицаМесяцы
		|		ПО (ФизическиеЛицаМесяцы.Месяц = ЗначенияРазовыхСотрудников.ПериодДействия)
		|			И (ФизическиеЛицаМесяцы.ФизическоеЛицо = ЗначенияРазовыхСотрудников.ФизическоеЛицо)
		|			И (ФизическиеЛицаМесяцы.Показатель = ЗначенияРазовыхСотрудников.Показатель)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаМесяцы", ОписаниеВТ.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаМесяцы.Месяц", ОписаниеВТ.ИмяПоляМесяц);
	Если ОписаниеВТ.ИмяПоляПоказатель = Неопределено Тогда
		// Если поле показатель не определено, выполняем поиск по всем показателям.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (ФизическиеЛицаМесяцы.Показатель = ЗначенияРазовыхСотрудников.Показатель)", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаМесяцы.Показатель", "ФизическиеЛицаМесяцы." + ОписаниеВТ.ИмяПоляПоказатель);
	КонецЕсли;
	Запрос.Выполнить();
	
КонецПроцедуры

// Ожидается ВТ с полями
// - Организация
// - Показатель
// - Месяц
//
Процедура СоздатьВТЗначенияРазовыхПоказателейОрганизаций(ОписаниеВТ)
	
	Если ВТСуществует("ВТЗначенияРазовыхПоказателейОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияРазовыхОрганизаций.ПериодДействия,
		|	ЗначенияРазовыхОрганизаций.Организация,
		|	ЗначенияРазовыхОрганизаций.Показатель,
		|	ЗначенияРазовыхОрганизаций.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхПоказателейОрганизаций
		|ИЗ
		|	РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыОрганизаций КАК ЗначенияРазовыхОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизацииМесяцы КАК ОрганизацииМесяцы
		|		ПО (ОрганизацииМесяцы.Месяц = ЗначенияРазовыхОрганизаций.ПериодДействия)
		|			И (ОрганизацииМесяцы.Организация = ЗначенияРазовыхОрганизаций.Организация)
		|			И (ОрганизацииМесяцы.Показатель = ЗначенияРазовыхОрганизаций.Показатель)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОрганизацииМесяцы", ОписаниеВТ.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОрганизацииМесяцы.Месяц", ОписаниеВТ.ИмяПоляМесяц);	
	Запрос.Выполнить();
	
КонецПроцедуры

// Ожидается ВТ с полями
// - Подразделение
// - Показатель
// - Месяц
//
Процедура СоздатьВТЗначенияРазовыхПоказателейПодразделений(ОписаниеВТ)
	
	Если ВТСуществует("ВТЗначенияРазовыхПоказателейПодразделений") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияРазовыхПодразделений.ПериодДействия,
		|	ЗначенияРазовыхПодразделений.Показатель,
		|	ЗначенияРазовыхПодразделений.Подразделение,
		|	ЗначенияРазовыхПодразделений.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхПоказателейПодразделений
		|ИЗ
		|	РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыПодразделений КАК ЗначенияРазовыхПодразделений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодразделенияМесяцы КАК ПодразделенияМесяцы
		|		ПО (ПодразделенияМесяцы.Месяц = ЗначенияРазовыхПодразделений.ПериодДействия)
		|			И (ПодразделенияМесяцы.Подразделение = ЗначенияРазовыхПодразделений.Подразделение)
		|			И (ПодразделенияМесяцы.Показатель = ЗначенияРазовыхПодразделений.Показатель)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПодразделенияМесяцы", ОписаниеВТ.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПодразделенияМесяцы.Месяц", ОписаниеВТ.ИмяПоляМесяц);	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ВТЗначенияОперативныхПоказателей

Функция ОписаниеВТОперативныхПоказателей()	
	Описание = Новый Структура(
		"ИмяВТ, 
		|СодержитПоляФизическоеЛицоГоловнаяОрганизация,
		|ИмяПоляНачалоПериода,
		|ИмяПоляОкончаниеПериода,
		|ИмяПоляГоловнаяОрганизация,
		|ИмяПоляФизическоеЛицо");
		
	Описание.ИмяВТ = "ВТИзмеренияПериоды";
	Описание.ИмяПоляНачалоПериода = "НачалоПериода";
	Описание.ИмяПоляОкончаниеПериода = "ОкончаниеПериода";
	Описание.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	Описание.ИмяПоляГоловнаяОрганизация = "ГоловнаяОрганизация";

	Описание.СодержитПоляФизическоеЛицоГоловнаяОрганизация = Ложь;
		
	Возврат Описание;	
КонецФункции


// Ожидается ВТ с полями
// - Сотрудник (или ФизическоеЛицо + ГоловнаяОрганизация)
// - Показатель
// - Организация
// - НачалоПериода
// - ОкончаниеПериода.
//
Процедура СоздатьВТЗначенияОперативныхПоказателейСотрудников(ОписаниеВТ)
	
	Если ВТСуществует("ВТЗначенияОперативныхПоказателейСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	// Запрашиваем показатели сразу по физическим лицам впрок для удержаний.	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	НАЧАЛОПЕРИОДА(СотрудникиПериоды.НачалоПериода, МЕСЯЦ) КАК Месяц,
	|	МИНИМУМ(СотрудникиПериоды.НачалоПериода) КАК НачалоПериода,
	|	МАКСИМУМ(СотрудникиПериоды.ОкончаниеПериода) КАК ОкончаниеПериода,
	|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СотрудникиПериоды.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТФильтрОперативныхПоказателей
	|ИЗ
	|	ВТСотрудникиПериоды КАК СотрудникиПериоды
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СотрудникиПериоды.НачалоПериода, МЕСЯЦ),
	|	СотрудникиПериоды.ФизическоеЛицо,
	|	СотрудникиПериоды.ГоловнаяОрганизация";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТ.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.НачалоПериода", "СотрудникиПериоды." + ОписаниеВТ.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ОкончаниеПериода", "СотрудникиПериоды." + ОписаниеВТ.ИмяПоляОкончаниеПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ФизическоеЛицо", "СотрудникиПериоды." + ОписаниеВТ.ИмяПоляФизическоеЛицо);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ГоловнаяОрганизация", "СотрудникиПериоды." + ОписаниеВТ.ИмяПоляГоловнаяОрганизация);	
	
	УстановитьПривилегированныйРежим(Истина);	
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);	
	УдалитьВТ.Добавить("ВТФильтрОперативныхПоказателей");
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияОперативныхСотрудников.Период,
		|	ЗначенияОперативныхСотрудников.Сотрудник,
		|	ЗначенияОперативныхСотрудников.Показатель,
		|	ЗначенияОперативныхСотрудников.Организация,
		|	ЗначенияОперативныхСотрудников.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЗначенияОперативныхСотрудников.ФизическоеЛицо,
		|	ЗначенияОперативныхСотрудников.Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхПоказателейСотрудников
		|ИЗ
		|	РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФильтрОперативныхПоказателей КАК ФизическиеЛицаПериоды
		|		ПО (ЗначенияОперативныхСотрудников.Период МЕЖДУ ФизическиеЛицаПериоды.НачалоПериода И ФизическиеЛицаПериоды.ОкончаниеПериода)
		|			И (ФизическиеЛицаПериоды.ФизическоеЛицо = ЗначенияОперативныхСотрудников.ФизическоеЛицо)";
	Запрос.Выполнить();
	
	УничтожитьВТ(УдалитьВТ);	
КонецПроцедуры

// Ожидается ВТ с полями
// - Организация
// - Показатель
// - НачалоПериода
// - ОкончаниеПериода
//
Процедура СоздатьВТЗначенияОперативныхПоказателейОрганизаций(ОписаниеВТ)
	
	Если ВТСуществует("ВТЗначенияОперативныхПоказателейОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияОперативныхОрганизаций.Период,
		|	ЗначенияОперативныхОрганизаций.Организация,
		|	ЗначенияОперативныхОрганизаций.Показатель,
		|	ЗначенияОперативныхОрганизаций.Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхПоказателейОрганизаций
		|ИЗ
		|	РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыОрганизаций КАК ЗначенияОперативныхОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизацииПериоды КАК ОрганизацииПериоды
		|		ПО (ЗначенияОперативныхОрганизаций.Период МЕЖДУ ОрганизацииПериоды.НачалоПериода И ОрганизацииПериоды.ОкончаниеПериода)
		|			И (ОрганизацииПериоды.Организация = ЗначенияОперативныхОрганизаций.Организация)
		|			И (ОрганизацииПериоды.Показатель = ЗначенияОперативныхОрганизаций.Показатель)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОрганизацииПериоды", ОписаниеВТ.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОрганизацииПериоды.НачалоПериода", ОписаниеВТ.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОрганизацииПериоды.ОкончаниеПериода", ОписаниеВТ.ИмяПоляОкончаниеПериода);
	Запрос.Выполнить();
	
КонецПроцедуры

// Ожидается ВТ с полями
// - Подразделение
// - Показатель
// - НачалоПериода
// - ОкончаниеПериода
//
Процедура СоздатьВТЗначенияОперативныхПоказателейПодразделений(ОписаниеВТ)
	
	Если ВТСуществует("ВТЗначенияОперативныхПоказателейПодразделений") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияОперативныхПодразделений.Период,
		|	ЗначенияОперативныхПодразделений.Подразделение,
		|	ЗначенияОперативныхПодразделений.Показатель,
		|	ЗначенияОперативныхПодразделений.Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхПоказателейПодразделений
		|ИЗ
		|	РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыПодразделений КАК ЗначенияОперативныхПодразделений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодразделениеПериоды КАК ПодразделенияПериоды
		|		ПО (ЗначенияОперативныхПодразделений.Период МЕЖДУ ПодразделенияПериоды.НачалоПериода И ПодразделенияПериоды.ОкончаниеПериода)
		|			И (ПодразделенияПериоды.Подразделение = ЗначенияОперативныхПодразделений.Подразделение)
		|			И (ПодразделенияПериоды.Показатель = ЗначенияОперативныхПодразделений.Показатель)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПодразделениеПериоды", ОписаниеВТ.ИмяВТ);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПодразделенияПериоды.НачалоПериода", ОписаниеВТ.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПодразделенияПериоды.ОкончаниеПериода", ОписаниеВТ.ИмяПоляОкончаниеПериода);
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

Процедура СоздатьВТДатыРегистрацииНаборовВидовВремениПоТребованию(ТребованияНачислений)
	
	Если ВТСуществует("ВТДатыРегистрацииНаборовВидовВремени") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТребованияНачислений.ТребуютсяИзмененияВремяВЧасах Тогда
		// Пустышка.
		Запрос = НовыйЗапрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
			|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) КАК КлючНабораВидовВремени,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
			|	ЛОЖЬ КАК ВремяВЧасах
			|ПОМЕСТИТЬ ВТДатыРегистрацииНаборовВидовВремени";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	СоздатьВТДатыРегистрацииНаборовВидовВремени();
	
КонецПроцедуры

Процедура СоздатьВТПочасоваяОплатаТрудаПоТребованию(ОписаниеВТ, ТребованияНачислений)
	
	Если ВТСуществует("ВТПочасоваяОплатаТруда") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТребованияНачислений.ТребуютсяВремяВДняхЧасах Тогда
		// Пустышка.
		Запрос = НовыйЗапрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	0 КАК ИдентификаторСтроки,
			|	ЛОЖЬ КАК УчетВремениВЧасах
			|ПОМЕСТИТЬ ВТПочасоваяОплатаТруда";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	СоздатьВТПочасоваяОплатаТруда(ОписаниеВТ);
	
КонецПроцедуры

#КонецОбласти

#Область ПлановыеНачисленияУдержания

Процедура СоздатьВТПлановыеНачисленияИнтервалы(ОписаниеВТСотрудникиПериоды)
	
	Если ВТСуществует("ВТПлановыеНачисленияИнтервалы") Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.Организация,
		|	СотрудникиПериоды.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	СотрудникиПериоды.Начисление КАК Начисление,
		|	СотрудникиПериоды.НачалоПериода КАК ДатаНачала,
		|	СотрудникиПериоды.ОкончаниеПериода КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТФильтрПлановыеНачисления
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.НачалоПериода", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ОкончаниеПериода", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляОкончаниеПериода);
	Если ОписаниеВТСотрудникиПериоды.ИмяПоляНачисление = Неопределено Тогда
		// Удаляем начисление из запроса.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.Начисление КАК Начисление,", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.Начисление", "СотрудникиПериоды." + ОписаниеВТСотрудникиПериоды.ИмяПоляНачисление);
	КонецЕсли;
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрПлановыеНачисления");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	ИзмеренияФильтра = "Сотрудник,ГоловнаяОрганизация,Начисление";
	Если ОписаниеВТСотрудникиПериоды.ИмяПоляНачисление = Неопределено Тогда
		ИзмеренияФильтра = СтрЗаменить(ИзмеренияФильтра, ",Начисление", "");
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТФильтрПлановыеНачисления", ИзмеренияФильтра);
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраПериоды(
		"ПлановыеНачисления", 
		МенеджерВременныхТаблиц, 
		Истина, 
		ОписаниеФильтра, 
		ПараметрыПостроения, 
		"ВТПлановыеНачисленияИнтервалы");
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТПлановыеУдержанияИнтервалы(ОписаниеВТФизическиеЛицаПериоды)
	
	Если ВТСуществует("ВТПлановыеУдержанияИнтервалы") Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаПериоды.ФизическоеЛицо,
		|	ФизическиеЛицаПериоды.ГоловнаяОрганизация КАК Организация,
		|	ФизическиеЛицаПериоды.Удержание КАК Удержание,
		|	ФизическиеЛицаПериоды.НачалоПериода КАК ДатаНачала,
		|	ФизическиеЛицаПериоды.ОкончаниеПериода КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТФильтрПлановыеУдержания
		|ИЗ
		|	ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаПериоды", ОписаниеВТФизическиеЛицаПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.НачалоПериода", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.ОкончаниеПериода", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляОкончаниеПериода);
	Если ОписаниеВТФизическиеЛицаПериоды.ИмяПоляУдержание = Неопределено Тогда
		// Удаляем из запроса.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.Удержание КАК Удержание,", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.Удержание", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляУдержание);
	КонецЕсли;
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрПлановыеУдержания");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	ИзмеренияФильтра = "ФизическоеЛицо,Организация,Удержание";
	Если ОписаниеВТФизическиеЛицаПериоды.ИмяПоляУдержание = Неопределено Тогда
		ИзмеренияФильтра = СтрЗаменить(ИзмеренияФильтра, ",Удержание", "");
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТФильтрПлановыеУдержания", ИзмеренияФильтра);
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПлановыеУдержания",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения, 
		"ВТПлановыеУдержанияСрезИДвижения");
	УдалитьВТ.Добавить("ВТПлановыеУдержанияСрезИДвижения");
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлановыеУдержания.ФизическоеЛицо,
		|	ПлановыеУдержания.Организация,
		|	ПлановыеУдержания.Удержание,
		|	ПлановыеУдержания.Удержание.КатегорияУдержания КАК КатегорияУдержания,
		|	ПлановыеУдержания.ДокументОснование,
		|	Фильтр.ДатаНачала КАК НачалоПериода,
		|	Фильтр.ДатаОкончания КАК ОкончаниеПериода,
		|	ПлановыеУдержания.Период КАК Дата
		|ПОМЕСТИТЬ ВТПлановыеУдержанияПредварительно
		|ИЗ
		|	ВТФильтрПлановыеУдержания КАК Фильтр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеУдержанияСрезИДвижения КАК ПлановыеУдержания
		|		ПО (ПлановыеУдержания.ФизическоеЛицо = Фильтр.ФизическоеЛицо)
		|			И (ПлановыеУдержания.Организация = Фильтр.Организация)
		|			И (ПлановыеУдержания.Период МЕЖДУ Фильтр.ДатаНачала И Фильтр.ДатаОкончания)
		|			И (ПлановыеУдержания.Удержание = Фильтр.Удержание)";
	Если ОписаниеВТФизическиеЛицаПериоды.ИмяПоляУдержание = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (ПлановыеУдержания.Удержание = Фильтр.Удержание)", "");
	КонецЕсли;
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТПлановыеУдержанияПредварительно");
	
	ОписаниеВТ = ОписаниеВТУдержания();
	ОписаниеВТ.ИмяВТ = "ВТПлановыеУдержанияПредварительно";
	ОписаниеВТ.ИмяПоляУдержание = "Удержание";
	СоздатьВТПредельныеСуммыУдержанийСотрудников(ОписаниеВТ);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПлановыеУдержанияПредварительно.ФизическоеЛицо,
	               |	ПлановыеУдержанияПредварительно.Организация,
	               |	ПлановыеУдержанияПредварительно.Удержание,
	               |	ПлановыеУдержанияПредварительно.ДокументОснование,
	               |	ПлановыеУдержанияПредварительно.НачалоПериода,
	               |	ПлановыеУдержанияПредварительно.ОкончаниеПериода,
	               |	ПлановыеУдержанияПредварительно.Дата
	               |ПОМЕСТИТЬ ВТПлановыеУдержания
	               |ИЗ
	               |	ВТПлановыеУдержанияПредварительно КАК ПлановыеУдержанияПредварительно
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредельныеСуммыУдержанийСотрудников КАК ПредельныеСуммыУдержанийСотрудников
	               |		ПО ПлановыеУдержанияПредварительно.Организация = ПредельныеСуммыУдержанийСотрудников.Организация
	               |			И ПлановыеУдержанияПредварительно.ФизическоеЛицо = ПредельныеСуммыУдержанийСотрудников.ФизическоеЛицо
	               |			И ПлановыеУдержанияПредварительно.ДокументОснование = ПредельныеСуммыУдержанийСотрудников.ДокументОснование
	               |			И (ПредельныеСуммыУдержанийСотрудников.Остаток <= 0)
	               |			И (ПлановыеУдержанияПредварительно.Удержание = ПредельныеСуммыУдержанийСотрудников.Удержание
	               |				ИЛИ ПлановыеУдержанияПредварительно.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента))
	               |ГДЕ
	               |	ПредельныеСуммыУдержанийСотрудников.ФизическоеЛицо ЕСТЬ NULL";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТПлановыеУдержания");
	
	ПреобразоватьВТДатыВИнтервалы("ВТПлановыеУдержания", "ВТПлановыеУдержанияСрезИДвижения", "ФизическоеЛицо,Организация,Удержание,ДокументОснование");
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТРабочиеМестаУдержанийИнтервалы(ОписаниеВТФизическиеЛицаПериоды)
	
	Если ВТСуществует("ВТРабочиеМестаУдержанийИнтервалы") Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаПериоды.ФизическоеЛицо,
		|	ФизическиеЛицаПериоды.ДокументОснование,
		|	ФизическиеЛицаПериоды.НачалоПериода КАК ДатаНачала,
		|	ФизическиеЛицаПериоды.ОкончаниеПериода КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТФильтрРабочиеМеста
		|ИЗ
		|	ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаПериоды", ОписаниеВТФизическиеЛицаПериоды.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.НачалоПериода", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛицаПериоды.ОкончаниеПериода", "ФизическиеЛицаПериоды." + ОписаниеВТФизическиеЛицаПериоды.ИмяПоляОкончаниеПериода);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрРабочиеМеста");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	ИзмеренияФильтра = "ФизическоеЛицо,ДокументОснование";
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТФильтрРабочиеМеста", ИзмеренияФильтра);
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраПериоды(
		"РабочиеМестаУдержаний",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТРабочиеМестаУдержанийИнтервалы");
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТПрименениеПлановыхНачисленийИнтервалы(ОписаниеВТСотрудникиПериоды)
	
	Если ВТСуществует("ВТПрименениеПлановыхНачисленийИнтервалы") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписаниеВТСотрудникиПериоды.ИмяВТ, "Сотрудник");
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраПериоды(
		"ПрименениеПлановыхНачислений", 
		МенеджерВременныхТаблиц, 
		Истина, 
		ОписаниеФильтра, 
		ПараметрыПостроения, 
		"ВТПрименениеПлановыхНачисленийИнтервалы");
	
КонецПроцедуры

Процедура СоздатьВТПочасоваяОплатаТруда(ОписаниеВТ)
	
	Если ВТСуществует("ВТПочасоваяОплатаТруда") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВТНачисления = ОписаниеВТНачисления();
	ЗаполнитьЗначенияСвойств(ОписаниеВТНачисления, ОписаниеВТ);
	ОписаниеВТНачисления.ИмяПоляНачисление = Неопределено;
	СоздатьВТПлановыеНачисленияИнтервалы(ОписаниеВТНачисления);
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ВТПлановыеНачисленияИнтервалы КАК ПлановыеНачисления
		|				ГДЕ
		|					ПлановыеНачисления.Сотрудник = Начисления.Сотрудник
		|					И ПлановыеНачисления.ГоловнаяОрганизация = Начисления.Организация.ГоловнаяОрганизация
		|					И Начисления.ДатаНачала МЕЖДУ ПлановыеНачисления.НачалоПериода И ПлановыеНачисления.КонецПериода
		|					И ПлановыеНачисления.Начисление.ЗачетНормыВремени = ИСТИНА
		|					И ПлановыеНачисления.Начисление.УчетВремениВЧасах = ИСТИНА)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчетВремениВЧасах
		|ПОМЕСТИТЬ ВТПочасоваяОплатаТруда
		|ИЗ
		|	ВТНачисления КАК Начисления";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ОписаниеВТ.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Сотрудник", "Начисления." + ОписаниеВТ.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления." + ОписаниеВТ.ИмяПоляНачалоПериода);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПредельныеСуммыУдержанийСотрудников(ОписаниеВТ)
	
	Если ВТСуществует("ВТПредельныеСуммыУдержанийСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрНакопления.УдержанияДоПределаПоСотрудникам");
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Период", КонецМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПлановыеУдержанияПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ПлановыеУдержанияПредварительно.Организация КАК Организация,
	               |	ПлановыеУдержанияПредварительно.Удержание КАК Удержание,
	               |	ПлановыеУдержанияПредварительно.ДокументОснование КАК ДокументОснование
	               |ПОМЕСТИТЬ ВТФильтрУдержанияДоПредела
	               |ИЗ
	               |	ВТПлановыеУдержанияПредварительно КАК ПлановыеУдержанияПредварительно
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УдержанияДоПределаПоСотрудникам.Организация,
	               |	УдержанияДоПределаПоСотрудникам.ФизическоеЛицо,
	               |	УдержанияДоПределаПоСотрудникам.Удержание,
	               |	УдержанияДоПределаПоСотрудникам.ДокументОснование
	               |ПОМЕСТИТЬ ВТУдержанияДоПредела
	               |ИЗ
	               |	РегистрНакопления.УдержанияДоПределаПоСотрудникам КАК УдержанияДоПределаПоСотрудникам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФильтрУдержанияДоПредела КАК ФильтрУдержанияДоПредела
	               |		ПО УдержанияДоПределаПоСотрудникам.Организация = ФильтрУдержанияДоПредела.Организация
	               |			И УдержанияДоПределаПоСотрудникам.ФизическоеЛицо = ФильтрУдержанияДоПредела.ФизическоеЛицо
	               |			И УдержанияДоПределаПоСотрудникам.Удержание = ФильтрУдержанияДоПредела.Удержание
	               |			И УдержанияДоПределаПоСотрудникам.ДокументОснование = ФильтрУдержанияДоПредела.ДокументОснование
	               |			И (УдержанияДоПределаПоСотрудникам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	               |			И (УдержанияДоПределаПоСотрудникам.Период <= &Период)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдержанияДоПределаПоСотрудникамОстатки.Организация,
	               |	УдержанияДоПределаПоСотрудникамОстатки.ФизическоеЛицо,
	               |	УдержанияДоПределаПоСотрудникамОстатки.Удержание,
	               |	УдержанияДоПределаПоСотрудникамОстатки.ДокументОснование,
	               |	УдержанияДоПределаПоСотрудникамОстатки.СуммаОстаток
	               |ПОМЕСТИТЬ ВТУдержанияДоПределаОстатки
	               |ИЗ
	               |	РегистрНакопления.УдержанияДоПределаПоСотрудникам.Остатки(
	               |			&Период,
	               |			(Организация, ФизическоеЛицо, Удержание, ДокументОснование) В
	               |				(ВЫБРАТЬ
	               |					УдержанияДоПредела.Организация,
	               |					УдержанияДоПредела.ФизическоеЛицо,
	               |					УдержанияДоПредела.Удержание,
	               |					УдержанияДоПредела.ДокументОснование
	               |				ИЗ
	               |					ВТУдержанияДоПредела КАК УдержанияДоПредела)) КАК УдержанияДоПределаПоСотрудникамОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УдержанияДоПределаПоСотрудникам.Организация,
	               |	УдержанияДоПределаПоСотрудникам.ФизическоеЛицо,
	               |	УдержанияДоПределаПоСотрудникам.Удержание,
	               |	УдержанияДоПределаПоСотрудникам.ДокументОснование,
	               |	УдержанияДоПределаПоСотрудникам.Сумма
	               |ИЗ
	               |	РегистрНакопления.УдержанияДоПределаПоСотрудникам КАК УдержанияДоПределаПоСотрудникам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержанияДоПредела КАК УдержанияДоПредела
	               |		ПО УдержанияДоПределаПоСотрудникам.Организация = УдержанияДоПредела.Организация
	               |			И УдержанияДоПределаПоСотрудникам.ФизическоеЛицо = УдержанияДоПредела.ФизическоеЛицо
	               |			И УдержанияДоПределаПоСотрудникам.Удержание = УдержанияДоПредела.Удержание
	               |			И УдержанияДоПределаПоСотрудникам.ДокументОснование = УдержанияДоПредела.ДокументОснование
	               |			И (УдержанияДоПределаПоСотрудникам.Регистратор В (&ИсключаемыйРегистратор, &ИсправленныйДокумент))
	               |			И (УдержанияДоПределаПоСотрудникам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УдержанияДоПределаПоСотрудникам.Организация,
	               |	УдержанияДоПределаПоСотрудникам.ФизическоеЛицо,
	               |	УдержанияДоПределаПоСотрудникам.Удержание,
	               |	УдержанияДоПределаПоСотрудникам.ДокументОснование,
	               |	-УдержанияДоПределаПоСотрудникам.Сумма
	               |ИЗ
	               |	ВТРегистрНакопления_УдержанияДоПределаПоСотрудникам КАК УдержанияДоПределаПоСотрудникам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержанияДоПредела КАК УдержанияДоПредела
	               |		ПО УдержанияДоПределаПоСотрудникам.Организация = УдержанияДоПредела.Организация
	               |			И УдержанияДоПределаПоСотрудникам.ФизическоеЛицо = УдержанияДоПредела.ФизическоеЛицо
	               |			И УдержанияДоПределаПоСотрудникам.Удержание = УдержанияДоПредела.Удержание
	               |			И УдержанияДоПределаПоСотрудникам.ДокументОснование = УдержанияДоПредела.ДокументОснование
	               |			И (УдержанияДоПределаПоСотрудникам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдержанияДоПредела.Организация,
	               |	УдержанияДоПредела.ФизическоеЛицо,
	               |	УдержанияДоПредела.Удержание,
	               |	УдержанияДоПредела.ДокументОснование,
	               |	СУММА(ЕСТЬNULL(УдержанияДоПределаОстатки.СуммаОстаток, 0)) КАК Остаток
	               |ПОМЕСТИТЬ ВТПредельныеСуммыУдержанийСотрудников
	               |ИЗ
	               |	ВТУдержанияДоПредела КАК УдержанияДоПредела
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержанияДоПределаОстатки КАК УдержанияДоПределаОстатки
	               |		ПО УдержанияДоПредела.Организация = УдержанияДоПределаОстатки.Организация
	               |			И УдержанияДоПредела.ФизическоеЛицо = УдержанияДоПределаОстатки.ФизическоеЛицо
	               |			И УдержанияДоПредела.Удержание = УдержанияДоПределаОстатки.Удержание
	               |			И УдержанияДоПредела.ДокументОснование = УдержанияДоПределаОстатки.ДокументОснование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УдержанияДоПредела.Организация,
	               |	УдержанияДоПредела.ФизическоеЛицо,
	               |	УдержанияДоПредела.Удержание,
	               |	УдержанияДоПредела.ДокументОснование";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПлановыеУдержанияПредварительно", ОписаниеВТ.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПлановыеУдержанияПредварительно.Удержание", "ПлановыеУдержанияПредварительно" + "." + ОписаниеВТ.ИмяПоляУдержание);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрУдержанияДоПредела");
	УдалитьВТ.Добавить("ВТУдержанияДоПредела");
	УдалитьВТ.Добавить("ВТУдержанияДоПределаОстатки");
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

#КонецОбласти

#Область ДоговорыПодряда

Функция ДоговорыПодряда(Сотрудники, Отборы = Неопределено)
	
	ИмяЗамера = "НачислениеЗарплаты.ВыявлениеДоговоровПодряда";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьДоговорыПодряда Тогда
		Возврат РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	КонецЕсли;
	
	Если Отборы = Неопределено Тогда
		Отборы = СоздатьОтборы();
	КонецЕсли;
	
	ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	
	Для Каждого МесяцРасчета Из МесяцыРасчета Цикл
		
		НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, Документы.НачислениеЗарплаты.ПустаяСсылка());
		
		ДоговорыПодрядаМесяца = РасчетЗарплатыРасширенный.РезультатНачисленияПоДоговорам(
			Организация, 
			МесяцРасчета,
			МенеджерВременныхТаблиц,
			ИсключаемыйРегистратор, 
			Отборы.Подразделение, 
			Сотрудники, 
			НастройкиНДФЛ.ДатаВыплаты);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДоговорыПодрядаМесяца, ДоговорыПодряда);
		
		РасчетЗарплатыРасширенный.СформироватьДвиженияНачисленийПоДоговорам(
			НаборыЗаписей,
			Ложь,
			Организация,
			МесяцРасчета,
			ДоговорыПодряда);
			
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.НачисленияПоДоговорамГПХ, Истина);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.ОплаченныеДоговоры, Истина);
	КонецЦикла;
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	Возврат ДоговорыПодряда;
	
КонецФункции

Процедура РассчитатьДоговорыПодряда()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетДоговоровПодряда";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьДоговорыПодряда Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорыПодряда = ЗарплатаМесяца.ДоговорыПодряда;
	НачатьПересчетДоговоровПодряда(ДоговорыПодряда);
	
	Если ДоговорыПодряда.Количество() = 0 Тогда
		ЗавершитьПересчетДоговоровПодряда();
		Возврат;
	КонецЕсли;
	
	ОбновитьСуммыРаспределенияПоТерриториямДоговоров(ДоговорыПодряда);
	
	ЗарегистрироватьДоговорыПодрядаПоТаблице(ДоговорыПодряда);
	
	ЗавершитьПересчетДоговоровПодряда();
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
		
КонецПроцедуры

Процедура ОбновитьСуммыРаспределенияПоТерриториямДоговоров(ДоговорыПодряда)
	
	Найденные = ДоговорыПодряда.НайтиСтроки(Новый Структура("ФиксРасчет", Истина));
	Для Каждого СтрокаДоговора Из Найденные Цикл
		ТерриторииУсловияТруда = СтрокаДоговора.ТерриторииУсловияТруда;
		Если ТипЗнч(ТерриторииУсловияТруда) <> Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		Если Не НастройкиУчета.ИспользоватьТерритории Тогда
			ТерриторииУсловияТруда.Очистить();
			Продолжить;
		КонецЕсли;
		Количество = ТерриторииУсловияТруда.Количество();
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		// Сумма вычета распределяется в тех-же долях, в которых 
		БывшиийРезультат = ТерриторииУсловияТруда.Итог("Результат");
		БывшаяСуммаВычета = ТерриторииУсловияТруда.Итог("СуммаВычета");
		ОбновлятьРезультат = (БывшиийРезультат <> СтрокаДоговора.Результат);
		ОбновлятьСуммуВычета = ОбновлятьРезультат Или (БывшаяСуммаВычета <> СтрокаДоговора.СуммаВычета);
		Если Не ОбновлятьРезультат И Не ОбновлятьСуммуВычета Тогда
			Продолжить;
		КонецЕсли;
		ОстатокПоРезультату = СтрокаДоговора.Результат;
		ОстатокПоСуммеВычета = СтрокаДоговора.СуммаВычета;
		// С первой строки до предпоследней перевычисляем сумму согласно весу старых строк.
		Для Индекс = 0 По Количество - 2 Цикл
			СтрокаТерритории = ТерриторииУсловияТруда[Индекс];
			Если БывшиийРезультат = 0 Тогда
				Коэффициент = 1 / Количество;
			Иначе
				Коэффициент = СтрокаТерритории.Результат / БывшиийРезультат;
			КонецЕсли;
			Если ОбновлятьРезультат Тогда
				СтрокаТерритории.Результат = СтрокаДоговора.Результат * Коэффициент;
				ОстатокПоРезультату = ОстатокПоРезультату - СтрокаТерритории.Результат;
			КонецЕсли;
			Если ОбновлятьСуммуВычета Тогда
				СтрокаТерритории.СуммаВычета = СтрокаДоговора.СуммаВычета * Коэффициент;
				ОстатокПоСуммеВычета = ОстатокПоСуммеВычета - СтрокаТерритории.СуммаВычета;
			КонецЕсли;
		КонецЦикла;
		// В последнюю строку записываем остаток.
		СтрокаТерритории = ТерриторииУсловияТруда[Количество - 1];
		Если ОбновлятьРезультат Тогда
			СтрокаТерритории.Результат = ОстатокПоРезультату;
		КонецЕсли;
		Если ОбновлятьСуммуВычета Тогда
			СтрокаТерритории.СуммаВычета = ОстатокПоСуммеВычета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура НачатьПересчетДоговоровПодряда(ДоговорыПодряда)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ПересчетСотрудников.НайтиСтроки(Новый Структура("ПересчитыватьДоговорыПодряда", Истина));
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "Сотрудник");
	
	НастройкиПересчета.СоответствиеСтрокДоговоровПодряда.Очистить();
	
	ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	Для Каждого СтрокаНачислений Из ЗарплатаМесяца.ДоговорыПодряда Цикл
		Если Сотрудники.Найти(СтрокаНачислений.Сотрудник) <> Неопределено Тогда
			НоваяСтрока = ДоговорыПодряда.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
			НастройкиПересчета.СоответствиеСтрокДоговоровПодряда.Вставить(НоваяСтрока, СтрокаНачислений);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьПересчетДоговоровПодряда()
		
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаРасчета = Новый Массив;
	Для Каждого КлючИЗначение Из НастройкиПересчета.СоответствиеСтрокДоговоровПодряда Цикл
		ЗаполнитьЗначенияСвойств(КлючИЗначение.Значение, КлючИЗначение.Ключ);
		ФизическиеЛицаРасчета.Добавить(КлючИЗначение.Значение.ФизическоеЛицо);
	КонецЦикла;
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтНачислений", Истина));
	ФизическиеЛицаБезРасчета = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо");
	ФизическиеЛицаБезРасчета = ОбщегоНазначенияКлиентСервер.СократитьМассив(ФизическиеЛицаБезРасчета, ФизическиеЛицаРасчета);
	
	Если ФизическиеЛицаБезРасчета.Количество() > 0 Тогда
		ДоговорыПодряда = НайтиСтрокиОтборПоМассиву(ЗарплатаМесяца.ДоговорыПодряда, "ФизическоеЛицо", ФизическиеЛицаБезРасчета);
		ЗарегистрироватьДоговорыПодрядаПоМассивуСтрок(ДоговорыПодряда);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьДоговорыПодрядаПоТаблице(ДоговорыПодряда)
	
	Если ДоговорыПодряда.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорыПодряда.Колонки["Результат"].Имя = "Сумма";
	ЗарегистрироватьДоговорыПодряда(ДоговорыПодряда);
	ДоговорыПодряда.Колонки["Сумма"].Имя = "Результат";
	
КонецПроцедуры

Процедура ЗарегистрироватьДоговорыПодрядаПоМассивуСтрок(ДоговорыПодряда)
	
	Если ДоговорыПодряда.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДоговорыПодряда, Таблица);
	Таблица.Колонки["Результат"].Имя = "Сумма";
	
	ЗарегистрироватьДоговорыПодряда(Таблица);
	
КонецПроцедуры

Процедура ЗарегистрироватьДоговорыПодряда(ДоговорыПодряда)
	
	УстановитьПривилегированныйРежим(Истина);
	УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(
		НаборыЗаписей, 
		Ложь, 
		Организация, 
		МесяцНачисления, 
		ДоговорыПодряда, 
		Неопределено, 
		Неопределено, 
		Неопределено);
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.НачисленияУдержанияПоСотрудникам, Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Взносы

Процедура РассчитатьВзносы()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетВзносов";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьВзносы Тогда
		Возврат;
	КонецЕсли;
	
	Начисления = ЗарплатаМесяца.Начисления;
	ДоговорыПодряда = ЗарплатаМесяца.ДоговорыПодряда;
	
	НачатьРасчетВзносовПриПересчете(Начисления, ДоговорыПодряда);
	
	СоздатьВТФизическиеЛица(Начисления, ДоговорыПодряда);
	
	Взносы = УчетСтраховыхВзносов.РассчитатьВзносы(ИсключаемыйРегистратор, Организация, МесяцНачисления, МенеджерВременныхТаблиц);
	
	ЗавершиьРасчетВзносовПриПересчете(Взносы);
	
	Если Не РасчетОдногоМесяца Тогда
		УчетСтраховыхВзносов.СформироватьИсчисленныеВзносы(
			НаборыЗаписей,
			Ложь,
			Организация,
			МесяцНачисления,
			ЗарплатаМесяца.Взносы,
			Ложь);
	КонецЕсли;
		
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура НачатьРасчетВзносовПриПересчете(Начисления, ДоговорыПодряда)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	Начисления = ТаблицаНачислений();
	ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьВзносы", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо");
	НастройкиПересчета.ФизическиеЛицаРасчетаВзносов = ФизическиеЛицаМассив;
	
	Для Каждого СтрокаНачислений Из ЗарплатаМесяца.Начисления Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаНачислений.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Начисления.Добавить(), СтрокаНачислений);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНачислений Из ЗарплатаМесяца.ДоговорыПодряда Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаНачислений.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДоговорыПодряда.Добавить(), СтрокаНачислений);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершиьРасчетВзносовПриПересчете(Взносы)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		ЗарплатаМесяца.Взносы.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Взносы, ЗарплатаМесяца.Взносы);
		Возврат;
	КонецЕсли;
	
	Если НастройкиПересчета.ФизическиеЛицаРасчетаВзносов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем из коллекции взносов строки по физическим лицам, по которым был выполнен пересчет.
	НайденныеСтроки = НайтиСтрокиОтборПоМассиву(ЗарплатаМесяца.Взносы, "ФизическоеЛицо", НастройкиПересчета.ФизическиеЛицаРасчетаВзносов);;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ЗарплатаМесяца.Взносы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
	// Переносим рассчитанные строки.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Взносы, ЗарплатаМесяца.Взносы);
	
	// Удаляем таблицу ВТФизическиеЛица, так как для НДФЛ она может отличаться по составу.
	УничтожитьВТ("ВТФизическиеЛица");
	
КонецПроцедуры

Процедура СформироватьДоходыСтраховыхВзносов(ТребованияУдержаний)
	
	ИмяЗамера = "НачислениеЗарплаты.ФормированиеДоходовСтраховыхВзносов";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьВзносы И Не ТребованияУдержаний.ТребуетсяПоказательРасчетнаяБазаСтраховыеВзносы Тогда
		Возврат;
	КонецЕсли;
	
	Начисления = ЗарплатаМесяца.Начисления;
	ДоговорыПодряда = ЗарплатаМесяца.ДоговорыПодряда;
	НачатьФормированиеДоходовСтраховыхВзносовПриПересчете(Начисления, ДоговорыПодряда);
	
	СформироватьДоходыСтраховыхВзносовПоНачислениям(Начисления);
	СформироватьДоходыСтраховыхВзносовПоДоговорамПодряда(ДоговорыПодряда);
	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.СведенияОДоходахСтраховыеВзносы);
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура НачатьФормированиеДоходовСтраховыхВзносовПриПересчете(Начисления, ДоговорыПодряда)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	// Обнуляем коллекции для подготовки доходов.
	Начисления = ТаблицаНачислений();
	ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	
	// Для формирования доходов при пересчете отбираем физических, 
	// для которых пересчитываются или взносы, или удержания, рассчитываемые от доходов для взносов.
	ФизическиеЛицаМассив = Новый Массив;
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтВзносов", Истина));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ФизическиеЛицаМассив, 
		ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо"), 
		Истина);
		
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьВзносы", Истина));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ФизическиеЛицаМассив, 
		ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо"), 
		Истина);
		
	Если ФизическиеЛицаМассив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаНачислений Из ЗарплатаМесяца.Начисления Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаНачислений.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Начисления.Добавить(), СтрокаНачислений);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНачислений Из ЗарплатаМесяца.ДоговорыПодряда Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаНачислений.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДоговорыПодряда.Добавить(), СтрокаНачислений);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДоходыСтраховыхВзносовПоНачислениям(Начисления)
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	ИмяВТНачисления = "ВТНачисления";
	
	СоздатьВТНачисленияДляРегистрацииДоходовСтраховыхВзносов(Начисления, ИмяВТНачисления);
	УдалитьВТ.Добавить(ИмяВТНачисления);
	
	СоздатьВТНачисленияСДаннымиЕНВД(Начисления, ИмяВТНачисления);
	УдалитьВТ.Добавить("ВТНачисленияСДаннымиЕНВД");
	
	УстановитьПривилегированныйРежим(Истина);
	УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(
		НаборыЗаписей, 
		Неопределено, 
		Организация, 
		МесяцНачисления, 
		МенеджерВременныхТаблиц, 
		Истина, 
		Ложь, 
		ИсключаемыйРегистратор);
	УстановитьПривилегированныйРежим(Ложь);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СформироватьДоходыСтраховыхВзносовПоДоговорамПодряда(ДоговорыПодряда)
	
	Если Не НастройкиРасчета.РассчитыватьДоговорыПодряда Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоговорыПодряда.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	СведенияОДоходахСтраховыеВзносы = СведенияОДоходахПоДоговорамСтраховыеВзносы(ДоговорыПодряда);
		
	УстановитьПривилегированныйРежим(Истина);
	УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(
		НаборыЗаписей, 
		Неопределено, 
		Организация, 
		МесяцНачисления, 
		СведенияОДоходахСтраховыеВзносы, 
		Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
	
Функция СведенияОДоходахПоДоговорамСтраховыеВзносы(ДоговорыПодряда)
	
	Если Не ПараметрыБухучета.ПлательщикЕНВД Тогда
		
		Доходы = ДоговорыПодряда.Скопировать();
		Доходы.Колонки["Результат"].Имя = "Сумма";
		Доходы.Колонки["СуммаВычета"].Имя = "Скидка";
		Доходы.Колонки["КодДоходаСтраховыеВзносы"].Имя = "ВидДохода";
		
	Иначе
		
		ДобавитьИдентификаторСтрокиБухучета(ДоговорыПодряда);
		
		Если НастройкиУчета.ИспользоватьСтатьиФинансирования Тогда
			БухучетДоговоры = БухучетНачисленийИзКоллекцииСтрок(ДоговорыПодряда);
		Иначе
			УдалитьВТ = Новый Массив;
			ИмяВТБухучетНачислений = "ВТБухучетНачисленийДляРегистрацииДоходовСтраховыхВзносов";
			БухучетДоговоры = ПолучитьБухучетНачисленийПоДоговорамСоздатьВременнуюТаблицу(ДоговорыПодряда, ИмяВТБухучетНачислений);
			БухучетДоговоры.Колонки["Результат"].Имя = "Сумма";
			УничтожитьВТ(ИмяВТБухучетНачислений);
		КонецЕсли;
		
		БухучетДоговоры.Индексы.Добавить("ИдентификаторСтроки");
		Отбор = Новый Структура("ИдентификаторСтроки");
		
		Доходы = ДоговорыПодряда.СкопироватьКолонки();
		Доходы.Колонки["Результат"].Имя = "Сумма";
		Доходы.Колонки["СуммаВычета"].Имя = "Скидка";
		Доходы.Колонки["КодДоходаСтраховыеВзносы"].Имя = "ВидДохода";
		Доходы.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
		
		Для каждого СтрокаДоговор Из ДоговорыПодряда Цикл  
			
			Если СтрокаДоговор.Результат = 0 Тогда
				НоваяСтрока = Доходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДоговор);
				НоваяСтрока.ВидДохода = СтрокаДоговор.КодДоходаСтраховыеВзносы;
			Иначе
				Отбор.ИдентификаторСтроки = СтрокаДоговор.ИдентификаторСтрокиБухучет;
				БухучетСтроки = БухучетДоговоры.Скопировать(Отбор);
				БухучетСтроки.Свернуть("ОблагаетсяЕНВД","Сумма");
				Для каждого СтрокаБухучет Из БухучетСтроки Цикл
					НоваяСтрока = Доходы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДоговор);
					НоваяСтрока.ВидДохода = СтрокаДоговор.КодДоходаСтраховыеВзносы;
					НоваяСтрока.Сумма = СтрокаБухучет.Сумма;
					НоваяСтрока.ОблагаетсяЕНВД = СтрокаБухучет.ОблагаетсяЕНВД;
					Если СтрокаБухучет.ОблагаетсяЕНВД Тогда
						НоваяСтрока.Скидка = Окр(СтрокаДоговор.СуммаВычета * СтрокаБухучет.Сумма / СтрокаДоговор.Результат, 2);
					Иначе
						НоваяСтрока.Скидка = СтрокаДоговор.СуммаВычета - Окр(СтрокаДоговор.СуммаВычета * (СтрокаДоговор.Результат - СтрокаБухучет.Сумма) / СтрокаДоговор.Результат, 2);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Доходы;

КонецФункции	

Процедура СоздатьВТНачисленияДляРегистрацииДоходовСтраховыхВзносов(Начисления, ИмяВТНачисления)
	
	УдалитьВТ = Новый Массив;
	
	СоздатьВТРаспределениеПоТерриториямУсловиямТруда(Начисления);
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Начисление,
		|	Начисления.ПериодДействия,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Результат,
		|	Начисления.СуммаВычета,
		|	Начисления.Сторно,
		|	Начисления.СторнируемыйДокумент,
		|	Начисления.Подразделение
		|ПОМЕСТИТЬ ВТНачисленияТаблица
		|ИЗ
		|	&Начисления КАК Начисления";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТНачисленияТаблица");
	
	РасчетЗарплатыРасширенный.СкорректироватьПериодВТНачислений(МенеджерВременныхТаблиц, "ВТНачисленияТаблица");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(Распределение.Результат, Начисления.Результат) КАК СуммаДохода,
		|	ЕСТЬNULL(Распределение.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)) КАК УсловияТруда,
		|	Начисления.Сотрудник,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Начисление,
		|	Начисления.ДатаНачала,
		|	Начисления.Подразделение КАК ПодразделениеОрганизации,
		|	Начисления.СуммаВычета КАК СуммаВычетаВзносы,
		|	Начисления.Сторно,
		|	Начисления.СторнируемыйДокумент		
		|ПОМЕСТИТЬ ВТНачисленияДляРегистрацииДоходовСтраховыхВзносов
		|ИЗ
		|	ВТНачисленияТаблица КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториямУсловиямТруда КАК Распределение
		|		ПО (Распределение.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)";	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРегистрацииДоходовСтраховыхВзносов", ИмяВТНачисления);
	Запрос.Выполнить();
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

#КонецОбласти

#Область ВТИнтервалы

Процедура СоздатьВТИнтервалыПоВТДаты(ИмяВТДаты, ИмяВТИнтервалы, Измерения)
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаИзмерений,
		|	ДатыИзменений.НачалоПериода,
		|	ДатыИзменений.ОкончаниеПериода,
		|	ДатыИзменений.Дата КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ДатыИзмененийРядом.Дата) ЕСТЬ NULL 
		|			ТОГДА ДатыИзменений.ОкончаниеПериода
		|		ИНАЧЕ МИНИМУМ(ДОБАВИТЬКДАТЕ(ДатыИзмененийРядом.Дата, СЕКУНДА, -1))
		|	КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТИнтервалы
		|ИЗ
		|	ВТДатыИзменений КАК ДатыИзменений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыИзменений КАК ДатыИзмененийРядом
		|		ПО ДатыИзменений.Дата < ДатыИзмененийРядом.Дата
		|			И ДатыИзменений.НачалоПериода = ДатыИзмененийРядом.НачалоПериода
		|			И ДатыИзменений.ОкончаниеПериода = ДатыИзмененийРядом.ОкончаниеПериода
		|			И (&СвязьИзмерений)
		|
		|СГРУППИРОВАТЬ ПО
		|	&ИменаИзмерений,
		|	ДатыИзменений.Дата,
		|	ДатыИзменений.НачалоПериода,
		|	ДатыИзменений.ОкончаниеПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ИменаИзмерений,
		|	ДатыИзменений.НачалоПериода,
		|	ДатыИзменений.ОкончаниеПериода,
		|	ДатыИзменений.НачалоПериода,
		|	ДОБАВИТЬКДАТЕ(ДатыИзменений.Дата, СЕКУНДА, -1)
		|ИЗ
		|	ВТДатыИзменений КАК ДатыИзменений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыИзменений КАК ДатыИзмененийРядом
		|		ПО ДатыИзменений.Дата > ДатыИзмененийРядом.Дата
		|			И ДатыИзменений.НачалоПериода = ДатыИзмененийРядом.НачалоПериода
		|			И ДатыИзменений.ОкончаниеПериода = ДатыИзмененийРядом.ОкончаниеПериода
		|			И (&СвязьИзмерений)
		|ГДЕ
		|	ДатыИзмененийРядом.Дата ЕСТЬ NULL 
		|	И ДатыИзменений.Дата > ДатыИзменений.НачалоПериода";
		
	ИменаИзмерений = "";
	СвязьИзмерений = "";
	Для Каждого ИмяИзмерения Из Измерения Цикл
		ИменаИзмерений = ИменаИзмерений + "ДатыИзменений." + ИмяИзмерения + ", ";
		СвязьИзмерений = СвязьИзмерений + "ДатыИзменений." + ИмяИзмерения + " = ДатыИзмененийРядом." + ИмяИзмерения + " И ";
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ИменаИзмерений, 2);
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СвязьИзмерений, 2);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИменаИзмерений", ИменаИзмерений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СвязьИзмерений", СвязьИзмерений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДатыИзменений", ИмяВТДаты);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИнтервалы", ИмяВТИнтервалы);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПреобразоватьВТДатыВИнтервалы(ИмяВТДатыИзменений, ИмяВТИзменения, ИменаИзмерений = "Сотрудник", ИмяПоляПериодИзменений = "Период", Отбор = Неопределено)
	
	Измерения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаИзмерений, ",");
	СоздатьВТИнтервалыПоВТДаты(ИмяВТДатыИзменений, "ВТИнтервалы", Измерения);
		
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ИменаИзмерений,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Изменения.*
		|ПОМЕСТИТЬ ВТИнтервалыИзменений
		|ИЗ
		|	ВТИнтервалы КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзменения КАК Изменения
		|		ПО (&СвязьИзмерений)
		|			И (Изменения.Период = Интервалы.ДатаНачала)
		|			И (&УсловиеОтбора)";
		
	ИменаИзмерений = "";
	СвязьИзмерений = "";
	Для Каждого ИмяИзмерения Из Измерения Цикл
		ИменаИзмерений = ИменаИзмерений + "Интервалы." + ИмяИзмерения + ", ";
		СвязьИзмерений = СвязьИзмерений + "Изменения." + ИмяИзмерения + " = Интервалы." + ИмяИзмерения + " И ";
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ИменаИзмерений, 2);
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СвязьИзмерений, 2);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИменаИзмерений", ИменаИзмерений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СвязьИзмерений", СвязьИзмерений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИзменения", ИмяВТИзменения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Изменения.Период", "Изменения." + ИмяПоляПериодИзменений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИнтервалыИзменений", ИмяВТДатыИзменений + "Интервалы");
	
	УсловиеОтбора = "";
	Если Отбор = Неопределено Тогда
		Отбор = Новый Массив;
	КонецЕсли;
	Для Каждого ОписаниеОтбора Из Отбор Цикл
		УсловиеОтбора = УсловиеОтбора + "Изменения." + ОписаниеОтбора.ИмяПоля + " " + ОписаниеОтбора.ВидСравнения + " " + ОписаниеОтбора.ПравоеЗначение;
	КонецЦикла;
	Если Отбор.Количество() = 0 Тогда
		УсловиеОтбора = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", УсловиеОтбора);
	
	Запрос.Выполнить();
	
	УничтожитьВТ("ВТИнтервалы");
	
КонецПроцедуры

#КонецОбласти

#Область СервисныеМетодыМенеджераРасчета

Функция МенеджерУчетаВремени(ОписаниеВТ = Неопределено)
	
	Если МенеджерДанныхУчетаВремени <> Неопределено Тогда
		Возврат МенеджерДанныхУчетаВремени;
	КонецЕсли;
	
	ИнициализироватьМенеджерУчетаВремени(ОписаниеВТ);
	
	Возврат МенеджерДанныхУчетаВремени;
	
КонецФункции

Функция МенеджерКадровогоУчета()
	Возврат ЭтотОбъект;
КонецФункции

Процедура ИнициализироватьМенеджерУчетаВремени(ОписаниеВТ)
	
	Если ОписаниеВТ = Неопределено Тогда
		ОписаниеВТ = ОписаниеВТНачисления();
	КонецЕсли;
	
	Описание = УчетРабочегоВремениРасширенный.ОписаниеНабораСотрудниковДляИнициализацииМенеджераДанных();
	Описание.ТипИсточникаДанных = Тип("МенеджерВременныхТаблиц");
	Описание.ТаблицаИстчоникДанных = ОписаниеВТ.ИмяВТ;
	Описание.ИмяПоляДатаНачала = ОписаниеВТ.ИмяПоляНачалоПериода;
	Описание.ИмяПоляДатаОкончания = ОписаниеВТ.ИмяПоляОкончаниеПериода;
	
	МенеджерДанныхУчетаВремени = УчетРабочегоВремениРасширенный.СоздатьМенеджерДанныхПоНаборуСотрудникиПериоды(МенеджерВременныхТаблиц, МесяцНачисления, Описание);
	
КонецПроцедуры

Процедура ИнициализироватьРасчетБазыНачислений()
	Если РасчетБазыНачислений <> Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = НовыйЗапрос();	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияФПД.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияФПД.Регистратор КАК Регистратор,
	|	НачисленияФПД.НомерСтроки КАК НомерСтроки,
	|	НачисленияФПД.Сотрудник КАК Сотрудник,
	|	НачисленияФПД.ВидРасчета КАК ВидРасчета,
	|	НачисленияФПД.ВидРасчета.ОчередностьРасчета КАК ОчередностьРасчета,
	|	НачисленияФПД.ПериодДействияНачало КАК БазовыйПериодНачало,
	|	НачисленияФПД.ПериодДействияКонец КАК БазовыйПериодКонец
	|ПОМЕСТИТЬ ВТОсновныеЗаписиНачислений
	|ИЗ
	|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК НачисленияФПД
	|ГДЕ
	|	НачисленияФПД.РассчитываемыйНабор
	|	И НачисленияФПД.ФиксСторно = ЛОЖЬ
	|	И НачисленияФПД.ФиксЗаполнение = ЛОЖЬ
	|	И НачисленияФПД.ВидРасчета.ТребуетсяРасчетБазы
	|	И НачисленияФПД.ВидРасчета.ПериодДействияБазовый
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.ПериодРегистрации,
	|	Начисления.Регистратор,
	|	Начисления.НомерСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.ВидРасчета.ОчередностьРасчета,
	|	Начисления.БазовыйПериодНачало,
	|	Начисления.БазовыйПериодКонец
	|ИЗ
	|	ВТРегистрРасчета_Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ВидРасчета.ТребуетсяРасчетБазы
	|	И НЕ Начисления.ВидРасчета.ПериодДействияБазовый
	|	И Начисления.ФиксЗаполнение = ЛОЖЬ
	|	И Начисления.ФиксСторно = ЛОЖЬ";
	
	Запрос.Выполнить();	

	ОписаниеРасчитываемогоНабора = РасчетЗарплатыРасширенный.ОписаниеРасчитываемогоНабораНачислений();
	ОписаниеРасчитываемогоНабора.ИмяВТРасчитываемыеЗаписи = "ВТОсновныеЗаписиНачислений";
	ОписаниеРасчитываемогоНабора.ИмяТаблицыбазовыеЗаписи = "ПланВидовРасчета.Начисления.БазовыеВидыРасчета";
	ОписаниеРасчитываемогоНабора.ИмяПоляОчередностьРасчета = "ОчередностьРасчета";

	ОписаниеТекущегоНабораРегистраНачисления = РасчетЗарплатыРасширенный.ОписаниеТекущегоНабораРегистраНачисления();
	ОписаниеТекущегоНабораРегистраНачисления.Регистратор = ВременныйРегистратор;
	ОписаниеТекущегоНабораРегистраНачисления.ИмяВТРегистрРасчета = "ВТРегистрРасчета_Начисления";
	ОписаниеТекущегоНабораРегистраНачисления.ИмяВТРегистрРасчетаФПД = "ВТРегистрРасчета_Начисления_ФактическийПериодДействия";
	ОписаниеТекущегоНабораРегистраНачисления.ИсключаемыйРегистратор = ИсключаемыйРегистратор;

	ОписаниеРасчитываемогоНабора.ОписаниеТекущегоНабораРегистраНачисления = ОписаниеТекущегоНабораРегистраНачисления;
	
	РасчетБазыНачислений = РасчетЗарплатыРасширенный.РасчетБазыНачислений(МенеджерВременныхТаблиц, ОписаниеРасчитываемогоНабора, МенеджерДанныхУчетаВремени, МенеджерКадровогоУчета());
	
КонецПроцедуры

Процедура ЗавершитьРасчетБазыНачислений()
	Если РасчетБазыНачислений <> Неопределено Тогда
		РасчетБазыНачислений.ЗавершитьРасчетБазы();
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТОсновныеЗаписиНачислений");
		
		РасчетБазыНачислений = Неопределено;
	КонецЕсли;		
КонецПроцедуры	

Процедура ИнициализироватьРасчетБазыУдержаний()
	Если РасчетБазыУдержаний <> Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	РасчетнаяБаза = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	РасчетнаяБазаИсполнительногоЛиста = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаИсполнительногоЛиста");
	
	ПоказателиРасчетнаяБаза = Новый Массив;
	ПоказателиРасчетнаяБаза.Добавить(РасчетнаяБаза);
	ПоказателиРасчетнаяБаза.Добавить(РасчетнаяБазаИсполнительногоЛиста);
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ПоказателиРасчетнаяБаза", ПоказателиРасчетнаяБаза);

	Запрос.УстановитьПараметр("РассчитыватьПоРегистратору", НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.ПериодРегистрации КАК ПериодРегистрации,
	|	Удержания.Регистратор КАК Регистратор,
	|	Удержания.НомерСтроки КАК НомерСтроки,
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Организация КАК Организация,
	|	Удержания.Сотрудник КАК Сотрудник,
	|	Удержания.ВидРасчета.ОчередностьРасчета КАК ОчередностьРасчета,
	|	Удержания.ВидРасчета КАК ВидРасчета,
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	Удержания.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	Удержания.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК МесяцУдержания,
	|	ВЫБОР
	|		КОГДА Удержания.БазовыйПериодНачало > НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Начинается,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(Удержания.БазовыйПериодКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Удержания.БазовыйПериодКонец, МЕСЯЦ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Заканчивается,
	|	ИСТИНА КАК ОригинальнаяЗапись
	|ПОМЕСТИТЬ ВТОсновныеЗаписиУдержаний
	|ИЗ
	|	ВТРегистрРасчета_Удержания КАК Удержания
	|ГДЕ
	|	Удержания.ФиксЗаполнение = ЛОЖЬ
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ВТПоказателиРасчета КАК ПоказателиРасчета
	|			ГДЕ
	|				ПоказателиРасчета.ВидРасчета = Удержания.ВидРасчета
	|				И ПоказателиРасчета.Показатель В (&ПоказателиРасчетнаяБаза))";
	
	Запрос.Выполнить();	

	ДополнитьЦеломесячнымиЗаписямиУдержаний();
	
	ОписаниеРасчитываемогоНабора = РасчетЗарплатыРасширенный.ОписаниеРасчитываемогоНабораУдержаний();
	ОписаниеРасчитываемогоНабора.ИмяВТРасчитываемыеЗаписи = "ВТОсновныеЗаписиУдержаний";
	ОписаниеРасчитываемогоНабора.ИмяТаблицыбазовыеЗаписи = "ПланВидовРасчета.Удержания.БазовыеВидыРасчета";
	ОписаниеРасчитываемогоНабора.ИмяПоляОчередностьРасчета = "ОчередностьРасчета";

	Если ВТСуществует("ВТРегистрРасчета_Начисления") Тогда
		ОписаниеТекущегоНабораРегистраНачисления = РасчетЗарплатыРасширенный.ОписаниеТекущегоНабораРегистраНачисления();
		ОписаниеТекущегоНабораРегистраНачисления.Регистратор = ВременныйРегистратор;
		ОписаниеТекущегоНабораРегистраНачисления.ИмяВТРегистрРасчета = "ВТРегистрРасчета_Начисления";
		ОписаниеТекущегоНабораРегистраНачисления.ИмяВТРегистрРасчетаФПД = "ВТРегистрРасчета_Начисления_ФактическийПериодДействия";
		ОписаниеТекущегоНабораРегистраНачисления.ИсключаемыйРегистратор = ИсключаемыйРегистратор;

		ОписаниеРасчитываемогоНабора.ОписаниеТекущегоНабораРегистраНачисления = ОписаниеТекущегоНабораРегистраНачисления;
	КонецЕсли;	

	ОписаниеРасчитываемогоНабора.ОписаниеТекущегоНабораРегистраНачисления = ОписаниеТекущегоНабораРегистраНачисления;
	
	УстановитьПривилегированныйРежим(Истина);
	РасчетБазыУдержаний = РасчетЗарплатыРасширенный.РасчетБазыУдержаний(МенеджерВременныхТаблиц, ОписаниеРасчитываемогоНабора, МенеджерДанныхУчетаВремени, МенеджерКадровогоУчета());
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура ЗавершитьРасчетБазыУдержаний()
	Если РасчетБазыУдержаний <> Неопределено Тогда
		РасчетБазыУдержаний.ЗавершитьРасчетБазы();
		
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТОсновныеЗаписиУдержаний");
		Если ВТСуществует("ВТРасчетнаяБазаУдержаний") Тогда 
			ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТРасчетнаяБазаУдержаний");
		КонецЕсли;
		РасчетБазыУдержаний = Неопределено;
	КонецЕсли;		
КонецПроцедуры

Функция ДатаМежду(Знач Дата, Знач ЛеваяГраница, Знач ПраваяГраница, ВключаяГраницу = Истина)
	
	Дата = НачалоДня(Дата);
	ЛеваяГраница = ЛеваяГраница;
	ПраваяГраница = ПраваяГраница;
	
	Если Дата < ЛеваяГраница Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Дата > ПраваяГраница Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ВключаяГраницу Тогда
		Если Дата = ЛеваяГраница Или Дата = ПраваяГраница Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ТаблицаИсточниковИзменений()
	
	ТаблицаИсточников = Новый ТаблицаЗначений;
	ТаблицаИсточников.Колонки.Добавить("ИмяКоллекции", Новый ОписаниеТипов("Строка"));
	ТаблицаИсточников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаИсточников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаИсточников.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления, ПланВидовРасчетаСсылка.Удержания"));
	
	Возврат ТаблицаИсточников;
	
КонецФункции

Функция ТаблицаПересчетаСотрудников()
	
	ТаблицаПересчета = Новый ТаблицаЗначений;
	ТаблицаПересчета.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	ИменаНастроек = ИменаНастроекПересчетаСотрудников();
	Для Каждого ИмяНастройки Из ИменаНастроек Цикл
		ТаблицаПересчета.Колонки.Добавить(ИмяНастройки, Новый ОписаниеТипов("Булево"));
	КонецЦикла;
	
	Возврат ТаблицаПересчета;
	
КонецФункции

Функция ИменаНастроекПересчетаСотрудников()
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("ПересчитыватьНачисления");
	МассивИмен.Добавить("ПересчитыватьДоговорыПодряда");
	
	Возврат МассивИмен;
	
КонецФункции

Функция ТаблицаПересчетаФизическихЛиц()
	
	ТаблицаПересчета = Новый ТаблицаЗначений;
	ТаблицаПересчета.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	ИменаНастроек = ИменаНастроекПересчетаФизическихЛиц();
	Для Каждого ИмяНастройки Из ИменаНастроек Цикл
		ТаблицаПересчета.Колонки.Добавить(ИмяНастройки, Новый ОписаниеТипов("Булево"));
	КонецЦикла;
	
	Возврат ТаблицаПересчета;
	
КонецФункции

Функция ИменаНастроекПересчетаФизическихЛиц()
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("ПересчитыватьУдержанияОтНачислений");
	МассивИмен.Добавить("ПересчитыватьУдержанияОтВзносов");
	МассивИмен.Добавить("ПересчитыватьУдержанияОтНДФЛ");
	МассивИмен.Добавить("ПересчитыватьНДФЛ");
	МассивИмен.Добавить("ПересчитыватьКорректировкиВыплаты");
	МассивИмен.Добавить("ПересчитыватьВзносы");
	МассивИмен.Добавить("ПересчитыватьЗаймы");
	
	Возврат МассивИмен;
	
КонецФункции

Функция НайтиСтрокиОтборПоМассиву(КоллекцияСтрок, ИмяПоля, МассивЗначений)
	
	НайденныеСтроки = Новый Массив;
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		Если МассивЗначений.Найти(СтрокаКоллекции[ИмяПоля]) <> Неопределено Тогда
			НайденныеСтроки.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

Функция ТаблицаЗначенийПоОписаниюКолонок(ОписаниеКолонок)
	Таблица = Новый ТаблицаЗначений;
	
	Для Каждого ОписаниеТекущейКолонки Из ОписаниеКолонок Цикл
		Таблица.Колонки.Добавить(ОписаниеТекущейКолонки.Имя, ОписаниеТекущейКолонки.ТипЗначения);
	КонецЦикла;	
	
	Возврат Таблица;
КонецФункции	

Процедура НачатьРасчетЗарплатыЗаМесяц(ПоследнийМесяцРасчета)
	
	ЗаполнитьКоллекциюКРасчетуЗарплатыЗаМесяц("Начисления", "ПериодДействия");
	ЗаполнитьКоллекциюКРасчетуЗарплатыЗаМесяц("ДоговорыПодряда", "ДатаНачала");
	ЗаполнитьКоллекциюКРасчетуЗарплатыЗаМесяц("Удержания", "ДатаНачала");
	ЗаполнитьКоллекциюКРасчетуЗарплатыЗаМесяц("НДФЛ", "МесяцНалоговогоПериода");
	ЗаполнитьКоллекциюКРасчетуЗарплатыЗаМесяц("ПогашениеЗаймов", "ДатаНачала");
	ЗаполнитьКоллекциюКРасчетуЗарплатыЗаМесяц("Взносы", "ДатаПолученияДохода");
	
	Если ПоследнийМесяцРасчета Тогда
		ЗарплатаМесяца.КорректировкиВыплаты = Зарплата.КорректировкиВыплаты;
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, ЗарплатаМесяца.Начисления);
	СоздатьВТПоРегиструРасчета(НаборыЗаписей.Начисления);
	
	Если НастройкиРасчета.РассчитыватьВзносы Тогда
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.СведенияОДоходахСтраховыеВзносы, Истина);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.ИсчисленныеСтраховыеВзносы, Истина);
	КонецЕсли;
	Если НастройкиРасчета.РассчитыватьНДФЛ
		И НастройкиНДФЛ.ОкончательныйРасчет Тогда
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.СведенияОДоходахНДФЛ, Истина);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.АвансовыеПлатежиИностранцевПоНДФЛ, Истина);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.ИмущественныеВычетыНДФЛ, Истина);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ, Истина);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.РасчетыНалогоплательщиковСБюджетомПоНДФЛ, Истина);
	КонецЕсли;
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.УдержанияДоПределаПоСотрудникам, Истина);
	
КонецПроцедуры

Процедура ЗавершитьРасчетЗарплатыЗаМесяц()
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗарплатаМесяца.Начисления, Зарплата.Начисления);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗарплатаМесяца.ДоговорыПодряда, Зарплата.ДоговорыПодряда);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗарплатаМесяца.Удержания, Зарплата.Удержания);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗарплатаМесяца.НДФЛ, Зарплата.НДФЛ);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗарплатаМесяца.ПогашениеЗаймов, Зарплата.ПогашениеЗаймов);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗарплатаМесяца.Взносы, Зарплата.Взносы);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	МенеджерДанныхУчетаВремени = Неопределено;
	СохранитьРассчитанныеНаборыЗаписей();
	
КонецПроцедуры

Процедура СохранитьРассчитанныеНаборыЗаписей()
	Для Каждого КлючИЗначение Из НаборыЗаписей Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КлючИЗначение.Значение, НаборыЗаписейНакопляемые[КлючИЗначение.Ключ]);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьКоллекциюКРасчетуЗарплатыЗаМесяц(ИмяКоллекции, ПолеПериод)
	
	Если МесяцНачисления = МесяцыРасчета[0] Тогда
		НачалоПериода = Дата(1, 1, 1);
	Иначе
		НачалоПериода = НачалоМесяца(МесяцНачисления);
	КонецЕсли;
	КонецПериода = КонецМесяца(МесяцНачисления);
	СтрокиКУдалению = Новый Массив;
	ЗарплатаМесяца[ИмяКоллекции].Очистить();
	
	Для Каждого СтрокаКоллекции Из Зарплата[ИмяКоллекции] Цикл
		Если СтрокаКоллекции[ПолеПериод] <= КонецПериода 
			И СтрокаКоллекции[ПолеПериод] >= НачалоПериода Тогда
			ЗаполнитьЗначенияСвойств(ЗарплатаМесяца[ИмяКоллекции].Добавить(), СтрокаКоллекции);
			СтрокиКУдалению.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаУдаления Из СтрокиКУдалению Цикл
		Зарплата[ИмяКоллекции].Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры

#Область РаботаСЗапросами

Функция НовыйЗапрос()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос;
	
КонецФункции

Функция ВТСодержитСтроки(ИмяВТ)
	Возврат ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, ИмяВТ);
КонецФункции

Функция ВТСуществует(ИмяВТ)
	
	Возврат ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, ИмяВТ);
	
КонецФункции

Процедура УничтожитьВТ(ИменаВТ, ПроверятьНаличие = Ложь)
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ, ПроверятьНаличие);
КонецПроцедуры

#КонецОбласти

#Область ВТСотрудникиФизическиеЛица

Процедура СоздатьВТСотрудникиПериоды(ТаблицаСотрудников, ИмяВТ = "ВТСотрудникиПериоды")
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник,
		|	&Организация КАК Организация,
		|	СотрудникиПериоды.ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания,
		|	СотрудникиПериоды.ПериодПерерасчета
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&ТаблицаСотрудников КАК СотрудникиПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТ);	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТФизическиеЛицаСотрудников(ОписаниеВТ)
	
	Если ВТСуществует("ВТФизическиеЛицаСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТФизическиеЛицаСотрудников
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В
		|			(ВЫБРАТЬ
		|				СотрудникиПериоды.Сотрудник
		|			ИЗ
		|				ВТСотрудникиПериоды КАК СотрудникиПериоды)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТ.ИмяВТ);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьВТФизическиеЛицаПериоды(ОписаниеВТСотрудникиПериоды)
	
	Если ВТСуществует("ВТФизическиеЛицаПериоды") Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьВТФизическиеЛицаСотрудников(ОписаниеВТСотрудникиПериоды);
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаСотрудников.ФизическоеЛицо,
		|	ФизическиеЛицаСотрудников.ГоловнаяОрганизация,
		|	СотрудникиПериоды.ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаСотрудников КАК ФизическиеЛицаСотрудников
		|		ПО (ФизическиеЛицаСотрудников.Сотрудник = СотрудникиПериоды.Сотрудник)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СотрудникиВМассиве(Сотрудники)
	
	Если ТипЗнч(Сотрудники) = Тип("Массив") Тогда
		Возврат Сотрудники;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	
КонецФункции

#КонецОбласти

#Область ОценкаПроизводительности

Функция ИспользоватьТехнологическиеЗамерыВремени()
	Возврат Истина;
КонецФункции

Функция НачатьЗамерВремени()
	
	Если Не ИспользоватьТехнологическиеЗамерыВремени() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Замер = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Возврат Замер;

КонецФункции

Процедура ЗакончитьЗамерВремени(ИмяЗамера, Замер)
	
	Если Не ИспользоватьТехнологическиеЗамерыВремени() Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический(ИмяЗамера, Замер);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Дополняет строки таблицы сведениями для расчета и значениями показателей.
//
// Параметры
//	Начисления - таблица значений, см. ТаблицаНачислений,
//	ЗаполнятьСведенияДляРасчета - тип Булево, необязательный, по умолчанию Истина,
//	ЗаполнятьЗначенияПоказателей - тип Булево, необязательный, по умолчанию Истина.
//
Процедура ДополнитьСтрокиНачислений(Начисления, ЗаполнятьСведенияДляРасчета = Истина, ЗаполнятьЗначенияПоказателей = Истина) Экспорт
	
	Если ЗаполнятьСведенияДляРасчета Тогда
		ЗаполнитьСведенияНачисленийДляРасчета(Начисления);
	КонецЕсли;
	
	Если ЗаполнятьЗначенияПоказателей Тогда
		ЗаполнитьЗначенияПоказателейНачислений(Начисления);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область Инициализация

МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
МесяцНачисления = Дата(1, 1, 1);
МесяцыРасчета = Новый Массив;
ПериодРасчета = Новый СтандартныйПериод;
Организация = Справочники.Организации.ПустаяСсылка();
ВычеркиваемыеСтроки = Новый Массив;
ВременныйРегистратор = Документы.НачислениеЗарплаты.ПолучитьСсылку();
ВызыватьИсключение = Истина;
ЭтоИсправлениеТекущимПериодом = Ложь;

ДополнительныеСвойства = Новый Структура;

#КонецОбласти


#КонецЕсли