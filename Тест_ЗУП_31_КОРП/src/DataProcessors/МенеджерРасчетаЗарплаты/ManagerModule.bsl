#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

// Рассчитывает значение показателей стоимости часа и дня.
//
// Параметры
//	МенеджерВременныхТаблиц - менеджер временных таблиц, в котором должна быть таблица с полями
//	- ИдентификаторСтроки - любой тип, уникальное значение, характеризующее строку,
//	- Сотрудник - тип СправочникСсылка.Сотрудники,
//	- ДатаНачала - тип Дата, дата, на которую будет рассчитываться значение показателей,
//	- Показатель - тип СправочникСсылка.ПоказателиРасчетаЗарплаты, показатель, который требуется рассчитать (один из трех),
//	- ВремяВЧасах - тип Булево, модификатор для показателя СтоимостьДняЧаса, если Истина значение этого показателя будет рассчитано в часах.
//
//	Возвращаемое значение - тип Соответствие, ключом которого является содержимое поля ИдентификаторСтроки, а значением - таблица значений с показателями.
//
Функция СтоимостьЧасаДня(МенеджерВременныхТаблиц, ИмяВТИсходныеДанные = "ВТДополнительныеПоказатели", МенеджерУчетаВремени = Неопределено) Экспорт
	
	СтоимостьЧасаДня = Новый Соответствие;
	
	СтоимостьЧасаПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса");
	СтоимостьДняПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня");
	СтоимостьДняЧасаПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса");
	
	ВычисляемыеПоказатели = Новый Массив;
	ВычисляемыеПоказатели.Добавить(СтоимостьЧасаПоказатель);
	ВычисляемыеПоказатели.Добавить(СтоимостьДняПоказатель);
	ВычисляемыеПоказатели.Добавить(СтоимостьДняЧасаПоказатель);
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПоказателиСтоимостиЕдиницыВремени", ВычисляемыеПоказатели);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеПоказатели.Сотрудник,
		|	ДополнительныеПоказатели.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель В (&ПоказателиСтоимостиЕдиницыВремени)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДополнительныеПоказатели", ИмяВТИсходныеДанные);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСотрудники");
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТСотрудники") Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат СтоимостьЧасаДня;
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.СоздатьВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудников(МенеджерВременныхТаблиц);
	УдалитьВТ.Добавить("ВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудниковСрезПоследних");
	
	РасчетЗарплатыРасширенный.СоздатьВТЗначенияСовокупныхТарифныхСтавокСотрудников(МенеджерВременныхТаблиц);
	УдалитьВТ.Добавить("ВТЗначенияСовокупныхТарифныхСтавокСотрудников");
	
	Запрос.УстановитьПараметр("СтоимостьЧасаПоказатель", СтоимостьЧасаПоказатель);
	Запрос.УстановитьПараметр("СтоимостьДняПоказатель", СтоимостьДняПоказатель);
	Запрос.УстановитьПараметр("СтоимостьДняЧасаПоказатель", СтоимостьДняЧасаПоказатель);
	Запрос.УстановитьПараметр("ПорядокРасчетаПоУмолчанию", РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты().ПорядокРасчетаСтоимостиЕдиницыВремени);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеПоказатели.Сотрудник,
		|	ДополнительныеПоказатели.ДатаНачала,
		|	ДополнительныеПоказатели.Показатель,
		|	ДополнительныеПоказатели.ВремяВЧасах,
		|	ВЫБОР
		|		КОГДА ДополнительныеПоказатели.Показатель = &СтоимостьЧасаПоказатель
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка)
		|		КОГДА ДополнительныеПоказатели.Показатель = &СтоимостьДняПоказатель
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка)
		|		КОГДА ДополнительныеПоказатели.Показатель = &СтоимостьДняЧасаПоказатель
		|			ТОГДА ВЫБОР
		|					КОГДА ДополнительныеПоказатели.ВремяВЧасах
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка)
		|				КОНЕЦ
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка)
		|	КОНЕЦ КАК ЕдиницаСтоимости,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки, ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
		|		ИНАЧЕ ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки
		|	КОНЕЦ КАК ВидТарифнойСтавки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПорядокРасчетаСтоимостиЕдиницыВремени.ПорядокРасчета, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПустаяСсылка)
		|			ТОГДА &ПорядокРасчетаПоУмолчанию
		|		ИНАЧЕ ПорядокРасчетаСтоимостиЕдиницыВремени.ПорядокРасчета
		|	КОНЕЦ КАК ПорядокРасчета,
		|	ЕСТЬNULL(ЗначенияСовокупныхТарифныхСтавок.СовокупнаяТарифнаяСтавка, 0) КАК ЗначениеСтавки
		|ПОМЕСТИТЬ ВТВидТарифнойСтавкиПорядокРасчета
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудниковСрезПоследних КАК ПорядокРасчетаСтоимостиЕдиницыВремени
		|		ПО ДополнительныеПоказатели.Сотрудник = ПорядокРасчетаСтоимостиЕдиницыВремени.Сотрудник
		|			И ДополнительныеПоказатели.ДатаНачала = ПорядокРасчетаСтоимостиЕдиницыВремени.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавок
		|		ПО ДополнительныеПоказатели.Сотрудник = ЗначенияСовокупныхТарифныхСтавок.Сотрудник
		|			И ДополнительныеПоказатели.ДатаНачала = ЗначенияСовокупныхТарифныхСтавок.Период
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель В(&ПоказателиСтоимостиЕдиницыВремени)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДополнительныеПоказатели", ИмяВТИсходныеДанные);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТВидТарифнойСтавкиПорядокРасчета");
	
	// Запрашиваем норму только для случаев, когда:
	// - вид тарифной ставки не совпадает с единицей измерения стоимости времени, 
	// например, ставка месячная, а нужна СтоимостьЧаса,
	// - порядок расчета ПоНормеВремениГрафикаСотрудника (после переработки метода получения нормы).
	
	СоздатьВТДанныеГрафиковДляПолученияСтоимостиЧасаДня(МенеджерВременныхТаблиц, ИмяВТИсходныеДанные, МенеджерУчетаВремени);
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТСотрудники");
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, "ОсновноеНачисление,ДоляНеполногоРабочегоВремени");
	УстановитьПривилегированныйРежим(Ложь);
	УдалитьВТ.Добавить("ВТКадровыеДанныеСотрудников");

	Запрос.УстановитьПараметр("ДоляНеполногоРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеПоказатели.ИдентификаторСтроки,
		|	ДополнительныеПоказатели.Сотрудник,
		|	ДополнительныеПоказатели.ДатаНачала,
		|	ДополнительныеПоказатели.Показатель,
		|	ВидТарифнойСтавкиПорядокРасчета.ВидТарифнойСтавки,
		|	ВидТарифнойСтавкиПорядокРасчета.ЕдиницаСтоимости,
		|	ВидТарифнойСтавкиПорядокРасчета.ЗначениеСтавки КАК ЗначениеПоказателя,
		|	ВидТарифнойСтавкиПорядокРасчета.ПорядокРасчета,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейКалендаряМесяц, 0) КАК НормаДнейКалендаряМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовКалендаряМесяц, 0) КАК НормаЧасовКалендаряМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейКалендаряГод, 0) КАК НормаДнейКалендаряГод,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовКалендаряГод, 0) КАК НормаЧасовКалендаряГод,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейГрафикаМесяц, 0) КАК НормаДнейГрафикаМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовГрафикаМесяц, 0) КАК НормаЧасовГрафикаМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейПолногоГрафикаМесяц, 0) КАК НормаДнейПолногоГрафикаМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовПолногоГрафикаМесяц, 0) КАК НормаЧасовПолногоГрафикаМесяц,
		|	ДанныеГрафиков.ГрафикРаботы.ГрафикПолногоРабочегоВремени КАК ГрафикПолногоВремени,
		|	ЕСТЬNULL(ДанныеГрафиков.ГрафикРаботы.НеполныйРабочийДень, ЛОЖЬ) КАК НеполныйРабочийДень,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ОсновноеНачисление.УчетВремениВЧасах, ЛОЖЬ) КАК УчетВремениВЧасах,
		|	КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачисления
		|				ГДЕ
		|					КадровыеДанныеСотрудников.ОсновноеНачисление = ПоказателиНачисления.Ссылка
		|					И ПоказателиНачисления.Показатель = &ДоляНеполногоРабочегоВремени)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьПоказательДоляНеполногоРабочегоВремени
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеГрафиков КАК ДанныеГрафиков
		|		ПО (ДанныеГрафиков.Сотрудник = ДополнительныеПоказатели.Сотрудник)
		|			И ДополнительныеПоказатели.ДатаНачала = ДанныеГрафиков.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидТарифнойСтавкиПорядокРасчета КАК ВидТарифнойСтавкиПорядокРасчета
		|		ПО ДополнительныеПоказатели.Сотрудник = ВидТарифнойСтавкиПорядокРасчета.Сотрудник
		|			И ДополнительныеПоказатели.ДатаНачала = ВидТарифнойСтавкиПорядокРасчета.ДатаНачала
		|			И ДополнительныеПоказатели.Показатель = ВидТарифнойСтавкиПорядокРасчета.Показатель
		|			И ДополнительныеПоказатели.ВремяВЧасах = ВидТарифнойСтавкиПорядокРасчета.ВремяВЧасах
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ДополнительныеПоказатели.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ДополнительныеПоказатели.ДатаНачала = КадровыеДанныеСотрудников.Период
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель В(&ПоказателиСтоимостиЕдиницыВремени)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДополнительныеПоказатели", ИмяВТИсходныеДанные);

	Выборка = Запрос.Выполнить().Выбрать();
	
	// 1. Получаем значения основного показателя для указанных сотрудников.
	// 2. Для сотрудников, у которых основным показателем является 
	//	- часовая ставка 
	//		* для стоимости часа - не пересчитываем
	//		* для стоимости дня - пересчитываем по соотношению часов к дням
	//	- дневная ставка
	//		* для стоимости часа - пересчитываем по соотношению дней к часам
	//		* для стоимости дня - не пересчитываем
	//	- месячная ставка (оклад)
	//		* для стоимости часа - пересчитываем на основании данных о количестве часов в месяце
	//		* для стоимости дня - пересчитываем на основании данных о количестве дней в месяце.
	
	ТочностьПоказателей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВычисляемыеПоказатели, "Точность");
	Пока Выборка.Следующий() Цикл
		ПорядокРасчета = Выборка.ПорядокРасчета;
		Значение = Неопределено;
		// Требуется рассчитать:
		// - стоимость часа
		ЕдиницаСтоимости = Выборка.ЕдиницаСтоимости;
		// - стоимость дня
		РассчитатьЗначениеСтоимостиЧаса(Значение, ЕдиницаСтоимости, Выборка);
		РассчитатьЗначениеСтоимостиДня(Значение, ЕдиницаСтоимости, Выборка);
		// Если удалось рассчитать значение - заполняем.
		Если Значение <> Неопределено Тогда
			Точность = ТочностьПоказателей.Получить(Выборка.Показатель);
			Значение = Окр(Значение, Точность);
			ЗначенияПоказателей = СтоимостьЧасаДня[Выборка.ИдентификаторСтроки];
			Если ЗначенияПоказателей = Неопределено Тогда
				ЗначенияПоказателей = ТаблицаПоказателей();
				СтоимостьЧасаДня.Вставить(Выборка.ИдентификаторСтроки, ЗначенияПоказателей);
			КонецЕсли;
			НоваяСтрока = ЗначенияПоказателей.Добавить();
			НоваяСтрока.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
			НоваяСтрока.Показатель = Выборка.Показатель;
			НоваяСтрока.Значение = Значение;
		КонецЕсли;
	КонецЦикла;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат СтоимостьЧасаДня;
	
КонецФункции

#Область КонструкторыКоллекций

// Конструктор таблицы показателей, используемой в коллекциях Зарплата.Начисления, Зарплата.Удержания.
//
Функция ТаблицаПоказателей() Экспорт
		
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Показатели.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	Показатели.Колонки.Добавить("Значение", Метаданные.ОпределяемыеТипы.ЗначениеПоказателяРасчетаЗарплаты.Тип);

	Возврат Показатели;
	
КонецФункции

// Конструктор строки таблицы начислений коллекции типа Зарплата.Начисления.
//
// Параметры
//	ТаблицаНачислений - тип ТаблицаЗначений, таблица, в которой создается строка.
//		Должна быть создана конструктором ТаблицаНачислений().
//
Функция СтрокаТаблицыНачислений(ТаблицаНачислений) Экспорт
	
	НоваяСтрока = ТаблицаНачислений.Добавить();
	НоваяСтрока.Показатели = ТаблицаПоказателей();
	НоваяСтрока.ИзвестныеПоказатели = ТаблицаПоказателей();
	НоваяСтрока.ТерриторииУсловияТруда = ТаблицаТерриторийУсловийТруда();
	НоваяСтрока.РаспределениеПоСтатьям = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаРаспределениеРезультатовНачислений();
	
	Возврат НоваяСтрока;
	
КонецФункции

// Конструктор строки таблицы начислений коллекции Зарплата.Удержания.
//
// Параметры
//	ТаблицаНачислений - тип ТаблицаЗначений, таблица, в которой создается строка.
//		Должна быть создана конструктором ТаблицаУдержаний().
//
Функция СтрокаТаблицыУдержаний(ТаблицаУдержаний) Экспорт
	
	НоваяСтрока = ТаблицаУдержаний.Добавить();
	НоваяСтрока.Показатели = ТаблицаПоказателей();
	НоваяСтрока.РаспределениеПоСтатьям = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаРаспределениеРезультатовУдержаний();
	
	Возврат НоваяСтрока;
	
КонецФункции

// Конструктор таблицы начислений, используется для заполнения параметров других методов.
//
Функция ТаблицаНачислений() Экспорт
		
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Начисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	Начисления.Колонки.Добавить("Показатели", Новый ОписаниеТипов("ТаблицаЗначений"));
	Начисления.Колонки.Добавить("ИзвестныеПоказатели", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Начисления.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Начисления.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	Начисления.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников,СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("ГрафикРаботыНорма", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников,СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("ОбщийГрафик", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	Начисления.Колонки.Добавить("ПериодРегистрацииВремени", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ПериодРегистрацииНормыВремени", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	
	Начисления.Колонки.Добавить("Категория", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени"));
	Начисления.Колонки.Добавить("ВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
	
	Начисления.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Начисления.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	
	Начисления.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	Начисления.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));

	Начисления.Колонки.Добавить("Сумма", ОписаниеТиповСуммаРезультат());
	Начисления.Колонки.Добавить("Результат", ОписаниеТиповСуммаРезультат());
	
	Начисления.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	Начисления.Колонки.Добавить("СуммаВычета", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	Начисления.Колонки.Добавить("СторнируемыйДокумент", Документы.ТипВсеСсылки());
	Начисления.Колонки.Добавить("КоличествоДетей", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(7, 0)));
	Начисления.Колонки.Добавить("ВычетПредоставленныйДругомуРодителю", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(7, 0)));
	
	Начисления.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
	
	Начисления.Колонки.Добавить("ЗаписьРасчета", Новый ОписаниеТипов("РегистрРасчетаЗапись.Начисления"));
	
	Начисления.Колонки.Добавить("Дополнительно", Новый ОписаниеТипов("Структура"));
	Начисления.Колонки.Добавить("ТерриторииУсловияТруда", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Начисления.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксРасчетВремени", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	
	Начисления.Колонки.Добавить("ОтработаноДней", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0)));
	Начисления.Колонки.Добавить("ОтработаноЧасов", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 2)));
	Начисления.Колонки.Добавить("ОплаченоДней", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 2)));
	Начисления.Колонки.Добавить("ОплаченоЧасов", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 2)));
	Начисления.Колонки.Добавить("НормаДней", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(2, 0)));
	Начисления.Колонки.Добавить("НормаЧасов", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 2)));
	
	Начисления.Колонки.Добавить("РаспределениеПоСтатьям", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Начисления.Колонки.Добавить("НачалоБазовогоПериода", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ОкончаниеБазовогоПериода", Новый ОписаниеТипов("Дата"));
	
	Начисления.Колонки.Добавить("Владелец");
	
	Возврат Начисления;
	
КонецФункции

// Конструктор таблицы удержаний, используется для заполнения Зарплата.Удержания.
//
Функция ТаблицаУдержаний() Экспорт
	
	Удержания = Новый ТаблицаЗначений;
	Удержания.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Удержания.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Удержания.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Удержания.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Удержания.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	Удержания.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.ПлановыеУдержания.Измерения.ДокументОснование.Тип);
	Удержания.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Удержания.Колонки.Добавить("Результат", ОписаниеТиповСуммаРезультат());
	Удержания.Колонки.Добавить("Задолженность", ОписаниеТиповСуммаРезультат());
	
	Удержания.Колонки.Добавить("Показатели", Новый ОписаниеТипов("ТаблицаЗначений"));
	Удержания.Колонки.Добавить("ИзвестныеПоказатели", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Удержания.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	Удержания.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	Удержания.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	Удержания.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
	Удержания.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	
	Удержания.Колонки.Добавить("Категория", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииУдержаний"));
	
	Удержания.Колонки.Добавить("ЗаписьРасчета", Новый ОписаниеТипов("РегистрРасчетаЗапись.Удержания"));
	
	Удержания.Колонки.Добавить("Дополнительно", Новый ОписаниеТипов("Структура"));
	
	// Рабочее место, если оно определено, или основной сотрудник в случае, если он необходим для показателей организации/подразделения.
	Удержания.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	// Кадровые сведения, если они необходимы для показателей организации/подразделения.
	Удержания.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Удержания.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	Удержания.Колонки.Добавить("Получатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Удержания.Колонки.Добавить("ПлатежныйАгент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	Удержания.Колонки.Добавить("РаспределениеПоСтатьям", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Удержания;
	
КонецФункции

// Создает пустую таблицу корректировок выплаты
//
Функция ТаблицаКорректировокВыплаты() Экспорт
	
	КорректировкиВыплаты = Новый ТаблицаЗначений;
	КорректировкиВыплаты.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	КорректировкиВыплаты.Колонки.Добавить("КорректировкаВыплаты", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	КорректировкиВыплаты.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	КорректировкиВыплаты.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	КорректировкиВыплаты.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(7));
	КорректировкиВыплаты.Колонки.Добавить("РаспределениеПоСтатьям", Новый ОписаниеТипов("ТаблицаЗначений"));
	КорректировкиВыплаты.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	КорректировкиВыплаты.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	
	Возврат КорректировкиВыплаты;
	
КонецФункции

// Создает пустую таблицу взносы.
Функция ТаблицаВзносы() Экспорт
	
	ПоляВзносов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносов.РассчитываемыеВзносы());
	
	ТаблицаВзносы = Новый ТаблицаЗначений;
	ТаблицаВзносы.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВзносы.Колонки.Добавить("ДатаПолученияДохода", Новый ОписаниеТипов("Дата"));
	Для каждого ИмяПоля Из ПоляВзносов Цикл
		ТаблицаВзносы.Колонки.Добавить(ИмяПоля, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	КонецЦикла;
	
	Возврат ТаблицаВзносы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтоимостьЧасаДня

Процедура СоздатьВТДанныеГрафиковДляПолученияСтоимостиЧасаДня(МенеджерВременныхТаблиц, ИмяВТИсходныеДанные = "ВТДополнительныеПоказатели", МенеджерУчетаВремени = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиНормаВремени
		|ИЗ
		|	ВТВидТарифнойСтавкиПорядокРасчета КАК Сотрудники
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Сотрудники.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ Сотрудники.ЕдиницаСтоимости <> Сотрудники.ВидТарифнойСтавки
		|		КОНЕЦ";
	Запрос.Выполнить();
	
	Если МенеджерУчетаВремени = Неопределено Тогда
		Описание = УчетРабочегоВремениРасширенный.ОписаниеНабораСотрудниковДляИнициализацииМенеджераДанных();
		Описание.ТипИсточникаДанных = Тип("МенеджерВременныхТаблиц");
		Описание.ТаблицаИстчоникДанных = ИмяВТИсходныеДанные;
		Описание.ИмяПоляДатаНачала = "ДатаНачала";
		Описание.ИмяПоляДатаОкончания = "ДатаНачала";
		МенеджерУчетаВремени = УчетРабочегоВремениРасширенный.СоздатьМенеджерДанныхПоНаборуСотрудникиПериоды(МенеджерВременныхТаблиц, ТекущаяДатаСеанса(), Описание);
	КонецЕсли;
	
	ОписаниеФильтра = МенеджерУчетаВремени.ОписаниеФильтраВТНормаВремениСотрудников();
	ОписаниеФильтра.ИмяТаблицы = "ВТСотрудникиНормаВремени";
	МенеджерУчетаВремени.СоздатьВТНормаВремениСотрудников(ОписаниеФильтра, "ВТДанныеГрафиков");
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТСотрудникиНормаВремени");
	
КонецПроцедуры

Процедура РассчитатьЗначениеСтоимостиЧаса(Значение, ЕдиницаСтоимости, Выборка)
	
	Если ЕдиницаСтоимости <> Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
		Возврат;
	КонецЕсли;
	
	// * Если показатель сотрудника - часовая ставка, значение не пересчитываем.
	Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
		Значение = Выборка.ЗначениеПоказателя;
		Возврат;
	КонецЕсли;
	
	// * Если показатель сотрудника - дневная ставка, пересчитываем в часовую.
	Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
		Если Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
			Если Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
				Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовГрафикаМесяц * Выборка.НормаДнейГрафикаМесяц;
			КонецЕсли;
		ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
			Если Выборка.НормаЧасовКалендаряМесяц <> 0 Тогда
				Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовКалендаряМесяц * Выборка.НормаДнейКалендаряМесяц;
			КонецЕсли;
		ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
			Если Выборка.НормаЧасовКалендаряГод <> 0 Тогда
				Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовКалендаряГод * Выборка.НормаДнейКалендаряГод;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// * Если показатель сотрудника - месячная ставка (оклад), пересчитываем в часовую.
	Если Выборка.ВидТарифнойСтавки <> Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка Тогда
		Возврат;
	КонецЕсли;
	
	Если Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
		Если ЗначениеЗаполнено(Выборка.ГрафикПолногоВремени) Тогда 
			Если Выборка.УчетВремениВЧасах Тогда
				Если Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 Тогда
					Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовПолногоГрафикаМесяц;
				КонецЕсли;
			Иначе 
				Если Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени И Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 Тогда
					Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовПолногоГрафикаМесяц;
				ИначеЕсли Не Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени И Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
					Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовГрафикаМесяц;
				КонецЕсли;
			КонецЕсли;
		Иначе 
			Если Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
				Если Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени Тогда
					Значение = Выборка.ЗначениеПоказателя * Выборка.ДоляНеполногоРабочегоВремени / Выборка.НормаЧасовГрафикаМесяц;
				Иначе
					Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовГрафикаМесяц;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
		Если Выборка.НормаЧасовКалендаряМесяц <> 0 Тогда
			Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовКалендаряМесяц;
		КонецЕсли;
	ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
		Если Выборка.НормаЧасовКалендаряГод <> 0 Тогда
			Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовКалендаряГод * 12;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьЗначениеСтоимостиДня(Значение, ЕдиницаСтоимости, Выборка)
	
	Если ЕдиницаСтоимости <> Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
		Возврат;
	КонецЕсли;
	
	// * Если показатель сотрудника - дневная ставка, значение не пересчитываем.
	Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
		Значение = Выборка.ЗначениеПоказателя;
		Возврат;
	КонецЕсли;
	
	// * Если показатель сотрудника - часовая ставка, пересчитываем в дневную.
	Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
		Если Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
			Если Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
				Значение = Выборка.ЗначениеПоказателя * Выборка.НормаЧасовГрафикаМесяц / Выборка.НормаДнейГрафикаМесяц;
			КонецЕсли;
		ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
			Если Выборка.НормаЧасовКалендаряМесяц <> 0 Тогда
				Значение = Выборка.ЗначениеПоказателя * Выборка.НормаЧасовКалендаряМесяц / Выборка.НормаДнейКалендаряМесяц;
			КонецЕсли;
		ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
			Если Выборка.НормаЧасовКалендаряГод <> 0 Тогда
				Значение = Выборка.ЗначениеПоказателя * Выборка.НормаЧасовКалендаряГод / Выборка.НормаДнейКалендаряГод;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	// * Если показатель сотрудника - месячная ставка (оклад), пересчитываем в часовую.
	Если Выборка.ВидТарифнойСтавки <> Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка Тогда
		Возврат;
	КонецЕсли;
	
	Если Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
		Если ЗначениеЗаполнено(Выборка.ГрафикПолногоВремени) Тогда 
			Если Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 И Выборка.НормаДнейГрафикаМесяц <> 0 Тогда
				Значение = Выборка.ЗначениеПоказателя * Выборка.НормаЧасовГрафикаМесяц / Выборка.НормаЧасовПолногоГрафикаМесяц / Выборка.НормаДнейГрафикаМесяц;
			КонецЕсли;
		Иначе 
			Если Выборка.НормаДнейГрафикаМесяц <> 0 Тогда
				Если Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени Тогда
					Значение = Выборка.ЗначениеПоказателя * Выборка.ДоляНеполногоРабочегоВремени / Выборка.НормаДнейГрафикаМесяц;
				Иначе
					Значение = Выборка.ЗначениеПоказателя / Выборка.НормаДнейГрафикаМесяц;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
		Если Выборка.НормаДнейКалендаряМесяц <> 0 Тогда
			Если Выборка.УчетВремениВЧасах И Выборка.НеполныйРабочийДень 
				И ЗначениеЗаполнено(Выборка.ГрафикПолногоВремени) И Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 Тогда
				Значение = Выборка.ЗначениеПоказателя * Выборка.НормаЧасовГрафикаМесяц / Выборка.НормаЧасовПолногоГрафикаМесяц / Выборка.НормаДнейКалендаряМесяц;
			Иначе 
				Если Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени Тогда
					Значение = Выборка.ЗначениеПоказателя * Выборка.ДоляНеполногоРабочегоВремени / Выборка.НормаДнейКалендаряМесяц;		
				Иначе
					Значение = Выборка.ЗначениеПоказателя / Выборка.НормаДнейКалендаряМесяц;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
		Если Выборка.НормаДнейКалендаряГод <> 0 Тогда
			Если Выборка.УчетВремениВЧасах И Выборка.НеполныйРабочийДень 
				И ЗначениеЗаполнено(Выборка.ГрафикПолногоВремени) И Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 Тогда
				Значение = Выборка.ЗначениеПоказателя * Выборка.НормаЧасовГрафикаМесяц / Выборка.НормаЧасовПолногоГрафикаМесяц / Выборка.НормаДнейКалендаряГод * 12;
			Иначе 
				Если Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени Тогда
					Значение = Выборка.ЗначениеПоказателя  * Выборка.ДоляНеполногоРабочегоВремени / Выборка.НормаДнейКалендаряГод * 12;	
				Иначе	
					Значение = Выборка.ЗначениеПоказателя / Выборка.НормаДнейКалендаряГод * 12;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ТаблицаТерриторийУсловийТруда() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Территория", Новый ОписаниеТипов("СправочникСсылка.ТерриторииВыполненияРабот"));
	Таблица.Колонки.Добавить("УсловияТруда", Новый ОписаниеТипов("СправочникСсылка.УсловияТруда"));
	Таблица.Колонки.Добавить("ДоляРаспределения", Метаданные.ОпределяемыеТипы.ЗначениеПоказателяРасчетаЗарплаты.Тип);
	Таблица.Колонки.Добавить("Результат", ОписаниеТиповСуммаРезультат());
	Таблица.Колонки.Добавить("СуммаВычета", ОписаниеТиповСуммаРезультат());
	
	Таблица.Колонки.Добавить("Показатели", Новый ОписаниеТипов("ТаблицаЗначений"));

	Возврат Таблица;
	
КонецФункции

Функция ОписаниеТиповСуммаРезультат()
	Возврат	Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
КонецФункции

// Функция определяет состав видов особых начислений, 
//	включаемых в состав расчетной базы.
//
Функция ВидыНачисленийДополненияРасчетнойБазыУдержаний() Экспорт 
	
	ВидыНачислений = Новый Массив;
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов);
	
	// Прочие доходы
	НезарплатныеВидыДоходов = ЗарплатаКадрыРасширенныйПовтИсп.НезарплатныеВидыДоходовДополненияРасчетнойБазыУдержаний();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыНачислений, НезарплатныеВидыДоходов);

	Возврат ВидыНачислений;
	
КонецФункции

// Функция определяет состав видов удержания НДФЛ, 
//	исключаемых из состава расчетной базы.
//
Функция ВидыНДФЛДополненияРасчетнойБазыУдержаний() Экспорт 
	
	ВидыНачислений = Новый Массив;
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛДоходыКонтрагентов);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛПрочиеРасчетыСПерсоналом);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НФДЛДивиденды);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НФДЛДивидендыСотрудникам);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛРасчетыСБывшимиСотрудниками);
	
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛДоходыКонтрагентов);
	
	Возврат ВидыНачислений;
	
КонецФункции

// Возвращает список документов-оснований удержаний, у которых истек срок,
// но которые были добавлены в менеджер расчета, поскольку по ним осталась задолженность.
//
Функция ОснованияПогашенияЗадолженности(МенеджерВременныхТаблиц) Экспорт 
	
	ПогашениеЗадолженности = Новый Массив;
	
	Если Не ПолучитьФункциональнуюОпцию("ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлаты") Тогда 
		Возврат ПогашениеЗадолженности;
	КонецЕсли;
	
	Если Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТПогашениеЗадолженности") Тогда 
		Возврат ПогашениеЗадолженности;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПогашениеЗадолженности.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	ВТПогашениеЗадолженности КАК ПогашениеЗадолженности";
	ПогашениеЗадолженности = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	
	Возврат ПогашениеЗадолженности;
	
КонецФункции

// Уволенные со всех рабочих мест сотрудники, для которых не применяется механизм ограничения взысканий.
Функция ИсключаемыеИзРасчетаВзысканийСотрудники(Организация, МесяцНачисления, ФизическиеЛица) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация  = Организация;
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоМесяца(МесяцНачисления);
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	ПараметрыПолученияСотрудников.КадровыеДанные = "ДатаПриема,ДатаУвольнения";
	
	Если ФизическиеЛица <> Неопределено Тогда
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;	
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников, "ВТСотрудникиОрганизации");
	
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТУволенныеФизическиеЛица
	               |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |ГДЕ
	               |	СотрудникиОрганизации.ДатаУвольнения МЕЖДУ &МесяцНачисления И КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	               |	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	СотрудникиОрганизации.ДатаПриема КАК ДатаПриема,
	               |	СотрудникиОрганизации.ДатаУвольнения КАК ДатаУвольнения
	               |ПОМЕСТИТЬ ВТУволенныеСотрудники
	               |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУволенныеФизическиеЛица КАК УволенныеФизическиеЛица
	               |		ПО СотрудникиОрганизации.ФизическоеЛицо = УволенныеФизическиеЛица.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УволенныеСотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТОтработавшиеЦелыйМесяц
	               |ИЗ
	               |	ВТУволенныеСотрудники КАК УволенныеСотрудники
	               |ГДЕ
	               |	УволенныеСотрудники.ДатаПриема <= &МесяцНачисления
	               |	И (УволенныеСотрудники.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ УволенныеСотрудники.ДатаУвольнения > КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УволенныеСотрудники.Сотрудник КАК Сотрудник,
	               |	УволенныеСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	УволенныеСотрудники.ДатаПриема КАК ДатаПриема,
	               |	УволенныеСотрудники.ДатаУвольнения КАК ДатаУвольнения
	               |ИЗ
	               |	ВТУволенныеСотрудники КАК УволенныеСотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработавшиеЦелыйМесяц КАК ОтработавшиеЦелыйМесяц
	               |		ПО УволенныеСотрудники.ФизическоеЛицо = ОтработавшиеЦелыйМесяц.ФизическоеЛицо
	               |ГДЕ
	               |	ОтработавшиеЦелыйМесяц.ФизическоеЛицо ЕСТЬ NULL
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ФизическоеЛицо,
	               |	ДатаПриема,
	               |	ДатаУвольнения";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ИсключаемыеСотрудники = Новый Массив;
	
	ОтработанныеПериоды = Новый ТаблицаЗначений;
	ОтработанныеПериоды.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
	ОтработанныеПериоды.Колонки.Добавить("ОкончаниеПериода", Новый ОписаниеТипов("Дата"));
	
	НачалоМесяцаНачисления = МесяцНачисления;
	НачалоСледующегоМесяца = КонецМесяца(МесяцНачисления) + 1;
	
	УволенныеСотрудники = Новый ТаблицаЗначений;
	УволенныеСотрудники.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	УволенныеСотрудники.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	УволенныеСотрудники.Колонки.Добавить("ДатаУвольнения", Новый ОписаниеТипов("Дата"));
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		ОтработанныеПериоды.Очистить();
		УволенныеСотрудники.Очистить();
		Пока Выборка.Следующий() Цикл 
			ДанныеИзменены = Ложь;
			ДатаПриема = Макс(Выборка.ДатаПриема, НачалоМесяцаНачисления);
			ДатаУвольнения = ?(ЗначениеЗаполнено(Выборка.ДатаУвольнения), Мин(Выборка.ДатаУвольнения, НачалоСледующегоМесяца), НачалоСледующегоМесяца);
			Для Каждого ОтработанныйПериод Из ОтработанныеПериоды Цикл 
				Если ДатаУвольнения >= ОтработанныйПериод.НачалоПериода И ДатаПриема <= ОтработанныйПериод.ОкончаниеПериода Тогда 
					ОтработанныйПериод.НачалоПериода = Мин(ДатаПриема, ОтработанныйПериод.НачалоПериода);
					ОтработанныйПериод.ОкончаниеПериода = Макс(ДатаУвольнения, ОтработанныйПериод.ОкончаниеПериода);
					ДанныеИзменены = Истина;
				КонецЕсли;
			КонецЦикла;
			Если Не ДанныеИзменены Тогда 
				НоваяСтрока = ОтработанныеПериоды.Добавить();
				НоваяСтрока.НачалоПериода = ДатаПриема;
				НоваяСтрока.ОкончаниеПериода = ДатаУвольнения;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ДатаУвольнения) И Выборка.ДатаУвольнения < НачалоСледующегоМесяца Тогда 
				ЗаполнитьЗначенияСвойств(УволенныеСотрудники.Добавить(), Выборка);
			КонецЕсли;
		КонецЦикла;
		// Если работник был уволен и снова принят в том же месяце - взыскания нового сотрудника необходимо ограничить.
		НачалоРабочегоПериода = НачалоСледующегоМесяца;
		Для Каждого ОтработанныйПериод Из ОтработанныеПериоды Цикл
			Если ОтработанныйПериод.ОкончаниеПериода = НачалоСледующегоМесяца Тогда 
				НачалоРабочегоПериода = Мин(НачалоРабочегоПериода, ОтработанныйПериод.НачалоПериода);
			КонецЕсли;
		КонецЦикла;
		Для Каждого УволенныйСотрудник Из УволенныеСотрудники Цикл 
			Если УволенныйСотрудник.ДатаУвольнения < НачалоРабочегоПериода Тогда 
				ИсключаемыеСотрудники.Добавить(УволенныйСотрудник.Сотрудник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИсключаемыеСотрудники;
	
КонецФункции

#КонецОбласти

#КонецЕсли