#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущаяПозиция;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Организация", "Видимость", ИспользоватьШтатноеРасписание);
	
	ИспользоватьИндивидуальныеЛьготыСотрудников = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеЛьготыСотрудников");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСамообслуживание", "Видимость", ИспользоватьИндивидуальныеЛьготыСотрудников);
	
	ЗаполнитьСписокПозиций();
	ПрочитатьДанныеЛьгот();
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыЛьгот();
	ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыВидовРасчета, "Начисления", 3);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтрокиДерева = Позиции.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл 
		Элементы.Позиции.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("СохранитьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДоступныВсеЛьготыПриИзменении(Элемент)
	
	УстановитьДоступностьИндивидуальныхЛьгот();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЛимитПриИзменении(Элемент)
	
	УстановитьДоступностьРазмераЛимита(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПозиции

&НаКлиенте
Процедура ПозицииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Позиции.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьДанныеПозиции", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЛьготы

&НаКлиенте
Процедура ЛьготыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийПриНачалеРедактирования(ЭтотОбъект, "Льготы", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Льготы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ЛьготаОрганизации Тогда 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыЛьготаПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыЛьгот();
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийНачислениеПриИзменении(ЭтотОбъект, ОписаниеТаблицыВидовРасчета, 1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИндивидуальныеЛьготы

&НаКлиенте
Процедура ИндивидуальныеЛьготыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ИндивидуальныеЛьготы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ЛьготаОрганизации Тогда 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьДанныеНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокПозиций()
	
	Позиции.ПолучитьЭлементы().Очистить();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТПозиции(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТПозиции.Организация КАК Организация,
	               |	ВТПозиции.Подразделение КАК Подразделение,
	               |	ВТПозиции.Должность КАК Должность,
	               |	ВТПозиции.Позиция КАК Позиция,
	               |	ВТПозиции.ПорядокПодразделения КАК ПорядокПодразделения,
	               |	ВТПозиции.ПорядокДолжности КАК ПорядокДолжности
	               |ИЗ
	               |	ВТПозиции КАК ВТПозиции
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТПозиции.Организация.Наименование,
	               |	ВТПозиции.Подразделение.РеквизитДопУпорядочиванияИерархического,
	               |	ПорядокДолжности,
	               |	ВТПозиции.Позиция.Наименование
	               |ИТОГИ ПО
	               |	Организация,
	               |	Подразделение ИЕРАРХИЯ";
				   
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	ДеревоПозиций = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);			   
	
	ДополнитьДеревоПозиций(ДеревоПозиций, Позиции);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьДеревоПозиций(ДеревоИсточник, ДеревоПриемник)
	
	СтрокиПриемника = ДеревоПриемник.ПолучитьЭлементы();
	
	Для Каждого СтрокаИсточника Из ДеревоИсточник.Строки Цикл
		
		Значение = ?(ЗначениеЗаполнено(СтрокаИсточника.Позиция), СтрокаИсточника.Позиция, 
			?(ЗначениеЗаполнено(СтрокаИсточника.Подразделение), СтрокаИсточника.Подразделение, СтрокаИсточника.Организация));
			
		Если ТипЗнч(ДеревоПриемник) = Тип("ДанныеФормыЭлементДерева") И ДеревоПриемник.Позиция = Значение Тогда 
			
			ДополнитьДеревоПозиций(СтрокаИсточника, ДеревоПриемник);
			
		Иначе
			
			СтрокаПриемника = СтрокиПриемника.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
			СтрокаПриемника.Позиция = Значение;
			ДополнитьДеревоПозиций(СтрокаИсточника, СтрокаПриемника);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеЛьгот()
	
	// Льготы позиций
	ТаблицаОписанийПозиций = ЛьготыСотрудников.ТаблицаОписанийПозиций();
	ЗаполнитьТаблицуОписанийПозиций(Позиции.ПолучитьЭлементы(), ТаблицаОписанийПозиций);
	
	Запрос = ЛьготыСотрудников.ЗапросДанныеЛьгот(ТаблицаОписанийПозиций);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЛьготПозиций = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[4].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Позиция") Цикл 
		ДанныеЛьгот = Новый Соответствие;
		Пока Выборка.Следующий() Цикл 
			ДанныеЛьгот.Вставить(Выборка.Льгота, Выборка.Размер);
		КонецЦикла;
		ДанныеЛьготПозиций.Вставить(Выборка.Позиция, ДанныеЛьгот);
	КонецЦикла;
	
	ЛьготыПозиций = Новый ФиксированноеСоответствие(ДанныеЛьготПозиций);
	
	ДанныеПоказателейЛьготПозиций = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[5].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Позиция") Цикл 
		ДанныеПоказателейЛьгот = Новый Соответствие;
		Пока Выборка.СледующийПоЗначениюПоля("Льгота") Цикл 
			ЗначенияПоказателей = Новый Соответствие;
			Пока Выборка.Следующий() Цикл 
				ЗначенияПоказателей.Вставить(Выборка.Показатель, Выборка.Значение);
			КонецЦикла;
			ДанныеПоказателейЛьгот.Вставить(Выборка.Льгота, ЗначенияПоказателей);
		КонецЦикла;
		ДанныеПоказателейЛьготПозиций.Вставить(Выборка.Позиция, ДанныеПоказателейЛьгот);
	КонецЦикла;
	
	ПоказателиЛьготПозиций = Новый ФиксированноеСоответствие(ДанныеПоказателейЛьготПозиций);
	
	ДанныеИндивидуальныхЛьготПозиций = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[6].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Позиция") Цикл
		ДанныеИндивидуальныхЛьгот = Новый Соответствие;
		Пока Выборка.Следующий() Цикл 
			ДанныеИндивидуальныхЛьгот.Вставить(Выборка.Льгота, Истина);
		КонецЦикла;
		ДанныеИндивидуальныхЛьготПозиций.Вставить(Выборка.Позиция, ДанныеИндивидуальныхЛьгот);
	КонецЦикла;
	
	ИндивидуальныеЛьготыПозиций = Новый ФиксированноеСоответствие(ДанныеИндивидуальныхЛьготПозиций);
	
	// Льготы организаций и подразделений
	МассивОрганизаций = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаОписанийПозиций, "Организация", Истина);
	
	ТаблицаПодразделений = ТаблицаОписанийПозиций.Скопировать();
	ТаблицаПодразделений.Свернуть("Организация, Подразделение");
	
	ТаблицаОписанийОрганизаций = ЛьготыСотрудников.ТаблицаОписанийПозиций();
	
	Для Каждого Организация Из МассивОрганизаций Цикл 
		ТаблицаОписанийОрганизаций.Добавить().Организация = Организация; 
	КонецЦикла;
	
	Для Каждого ДанныеПодразделения Из ТаблицаПодразделений Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОписанийОрганизаций.Добавить(), ДанныеПодразделения);
	КонецЦикла;
	
	Запрос = ЛьготыСотрудников.ЗапросДанныеЛьгот(ТаблицаОписанийОрганизаций);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЛьготОрганизаций = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[4].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
			Организация = ?(ЗначениеЗаполнено(Выборка.Подразделение), Выборка.Подразделение, Выборка.Организация);
			ДанныеЛьгот = Новый Соответствие;
			Пока Выборка.Следующий() Цикл 
				ДанныеЛьгот.Вставить(Выборка.Льгота, Выборка.Размер);
			КонецЦикла;
			ДанныеЛьготОрганизаций.Вставить(Организация, ДанныеЛьгот);
		КонецЦикла;
	КонецЦикла;
	
	ЛьготыОрганизаций = Новый ФиксированноеСоответствие(ДанныеЛьготОрганизаций);
	
	ДанныеПоказателейЛьготОрганизаций = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[5].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл 
		Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
			Организация = ?(ЗначениеЗаполнено(Выборка.Подразделение), Выборка.Подразделение, Выборка.Организация);
			ДанныеПоказателейЛьгот = Новый Соответствие;
			Пока Выборка.СледующийПоЗначениюПоля("Льгота") Цикл 
				ЗначенияПоказателей = Новый Соответствие;
				Пока Выборка.Следующий() Цикл 
					ЗначенияПоказателей.Вставить(Выборка.Показатель, Выборка.Значение);
				КонецЦикла;
				ДанныеПоказателейЛьгот.Вставить(Выборка.Льгота, ЗначенияПоказателей);
			КонецЦикла;
			ДанныеПоказателейЛьготОрганизаций.Вставить(Организация, ДанныеПоказателейЛьгот);
		КонецЦикла;
	КонецЦикла;
	
	ПоказателиЛьготОрганизаций = Новый ФиксированноеСоответствие(ДанныеПоказателейЛьготОрганизаций);
	
	ДанныеИндивидуальныхЛьготОрганизаций = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[6].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
			Организация = ?(ЗначениеЗаполнено(Выборка.Подразделение), Выборка.Подразделение, Выборка.Организация);
			ДанныеИндивидуальныхЛьгот = Новый Соответствие;
			Пока Выборка.Следующий() Цикл 
				ДанныеИндивидуальныхЛьгот.Вставить(Выборка.Льгота, Истина);
			КонецЦикла;
			ДанныеИндивидуальныхЛьготОрганизаций.Вставить(Организация, ДанныеИндивидуальныхЛьгот);
		КонецЦикла;
	КонецЦикла;
	
	ИндивидуальныеЛьготыОрганизаций = Новый ФиксированноеСоответствие(ДанныеИндивидуальныхЛьготОрганизаций);
	
	// Лимиты пакетов льгот позиций
	Запрос = ЛьготыСотрудников.ЗапросДанныеЛимитовЛьготПозиций(ТаблицаОписанийПозиций);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЛимитов = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ДанныеЛимита = ЛьготыСотрудников.СтруктураДанныхЛимита();
		ЗаполнитьЗначенияСвойств(ДанныеЛимита, Выборка);
		ДанныеЛимитов.Вставить(Выборка.Позиция, ДанныеЛимита);
	КонецЦикла;
	
	ЛимитыЛьготСотрудникамПоШтатномуРасписанию = Новый ФиксированноеСоответствие(ДанныеЛимитов);
	
	// Лимиты пакетов льгот организаций и подразделений
	Запрос = ЛьготыСотрудников.ЗапросДанныеЛимитовЛьготПозиций(ТаблицаОписанийОрганизаций);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЛимитовОрганизаций = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ДанныеЛимита = ЛьготыСотрудников.СтруктураДанныхЛимита();
		ЗаполнитьЗначенияСвойств(ДанныеЛимита, Выборка);
		Организация = ?(ЗначениеЗаполнено(Выборка.Подразделение), Выборка.Подразделение, Выборка.Организация);
		ДанныеЛимитовОрганизаций.Вставить(Организация, ДанныеЛимита);
	КонецЦикла;
	
	ЛимитыЛьготОрганизаций = Новый ФиксированноеСоответствие(ДанныеЛимитовОрганизаций);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОписанийПозиций(ДеревоПозиций, ТаблицаОписанийПозиций)
	
	ТипПозиции = ?(ИспользоватьШтатноеРасписание, Тип("СправочникСсылка.ШтатноеРасписание"), Тип("СправочникСсылка.Должности"));
	
	Для Каждого ДанныеПозиции Из ДеревоПозиций Цикл
		
		Если ТипЗнч(ДанныеПозиции.Позиция) = ТипПозиции И ЗначениеЗаполнено(ДанныеПозиции.Позиция) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаОписанийПозиций.Добавить(), ДанныеПозиции);
		КонецЕсли;	
		
		ЗаполнитьТаблицуОписанийПозиций(ДанныеПозиции.ПолучитьЭлементы(), ТаблицаОписанийПозиций);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТПозиции(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ИспользоватьШтатноеРасписание Тогда 
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ШтатноеРасписание.Владелец КАК Организация,
		               |	ШтатноеРасписание.Подразделение КАК Подразделение,
		               |	ШтатноеРасписание.Должность КАК Должность,
		               |	ШтатноеРасписание.Ссылка КАК Позиция,
		               |	ШтатноеРасписание.Подразделение.РеквизитДопУпорядочиванияИерархического КАК ПорядокПодразделения,
		               |	ШтатноеРасписание.Должность.РеквизитДопУпорядочивания КАК ПорядокДолжности
		               |ПОМЕСТИТЬ ВТПозиции
		               |ИЗ
		               |	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		               |ГДЕ
		               |	НЕ ШтатноеРасписание.Закрыта
		               |	И НЕ ШтатноеРасписание.ПометкаУдаления
		               |	И НЕ ШтатноеРасписание.ГруппаПозицийПодразделения";
					   
	Иначе 
		
		ДатаПолученияДанных = КонецМесяца(ТекущаяДатаСеанса());
		
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.НачалоПериода = ДатаПолученияДанных;
		ПараметрыПолученияСотрудников.ОкончаниеПериода = ДатаПолученияДанных;
		ПараметрыПолученияСотрудников.КадровыеДанные = "Организация, Подразделение, Должность";
		СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		
		Запрос.УстановитьПараметр("СотрудникиОрганизации", СотрудникиОрганизации);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	СотрудникиОрганизации.Организация,
		               |	СотрудникиОрганизации.Подразделение,
		               |	СотрудникиОрганизации.Должность КАК Позиция
		               |ПОМЕСТИТЬ ВТКадровыеДанные
		               |ИЗ
		               |	&СотрудникиОрганизации КАК СотрудникиОрганизации
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	КадровыеДанные.Организация КАК Организация,
		               |	КадровыеДанные.Подразделение КАК Подразделение,
		               |	КадровыеДанные.Позиция КАК Должность,
		               |	КадровыеДанные.Позиция КАК Позиция,
		               |	КадровыеДанные.Подразделение.РеквизитДопУпорядочиванияИерархического КАК ПорядокПодразделения,
		               |	КадровыеДанные.Позиция.РеквизитДопУпорядочивания КАК ПорядокДолжности
		               |ПОМЕСТИТЬ ВТПозиции
		               |ИЗ
		               |	ВТКадровыеДанные КАК КадровыеДанные";
				   
	КонецЕсли;			   
				   
	Запрос.Выполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПозиции()
	
	ТекущиеДанные = Элементы.Позиции.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Позиция <> ТекущаяПозиция Тогда
		РеквизитыВДанные = ТекущаяПозиция <> Неопределено;
		ЗаполнитьДанныеПозицииНаСервере(РеквизитыВДанные, ТекущаяПозиция);
		ТекущаяПозиция = ТекущиеДанные.Позиция;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(Позиция = Неопределено)
	
	Если Позиция = Неопределено Тогда 
		ИдентификаторСтрокиПозиции = Элементы.Позиции.ТекущаяСтрока;
		Если ИдентификаторСтрокиПозиции = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		Позиция = Позиции.НайтиПоИдентификатору(ИдентификаторСтрокиПозиции).Позиция;
	КонецЕсли;
	
	// Льготы, назначаемые кадровыми приказами
	СтруктураЛьгот = СтруктураЛьготПозиции(Позиция);
	
	Если ТипЗнч(Позиция) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда 
		
		ДанныеЛьготПозиций = Новый Соответствие(ЛьготыПозиций);
		ДанныеЛьготПозиций.Вставить(Позиция, СтруктураЛьгот.ДанныеЛьгот);
		ЛьготыПозиций = Новый ФиксированноеСоответствие(ДанныеЛьготПозиций);
		
		ДанныеПоказателейЛьготПозиций = Новый Соответствие(ПоказателиЛьготПозиций);
		ДанныеПоказателейЛьготПозиций.Вставить(Позиция, СтруктураЛьгот.ДанныеПоказателейЛьгот);
		ПоказателиЛьготПозиций = Новый ФиксированноеСоответствие(ДанныеПоказателейЛьготПозиций);
		
		// Льготы, выбираемые сотрудником
		ДанныеИндивидуальныхЛьготПозиций = Новый Соответствие(ИндивидуальныеЛьготыПозиций);
		ДанныеИндивидуальныхЛьгот = СтруктураЛьгот.ДанныеИндивидуальныхЛьгот;
		
		ДанныеИндивидуальныхЛьготПозиций.Вставить(Позиция, ДанныеИндивидуальныхЛьгот);
		ИндивидуальныеЛьготыПозиций = Новый ФиксированноеСоответствие(ДанныеИндивидуальныхЛьготПозиций);
		
		// Лимиты пакетов льгот
		ЛимитыПозиций = Новый Соответствие(ЛимитыЛьготСотрудникамПоШтатномуРасписанию);
		
		ДанныеЛимита = ЛьготыСотрудников.СтруктураДанныхЛимита();
		ДанныеЛимита.ИспользоватьЛимит = ИспользоватьЛимит;
		ДанныеЛимита.КоличествоБаллов = ?(ИспользоватьЛимит, КоличествоБаллов, 0);
		ДанныеЛимита.ДоступныВсеЛьготы = ?(ДоступныВсеЛьготы = 0, Истина, Ложь);
		
		ЛимитыПозиций.Вставить(Позиция, ДанныеЛимита);
		ЛимитыЛьготСотрудникамПоШтатномуРасписанию = Новый ФиксированноеСоответствие(ЛимитыПозиций);
		
	ИначеЕсли ТипЗнч(Позиция) = Тип("СправочникСсылка.Организации") Или ТипЗнч(Позиция) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		ДанныеЛьгот = ЛьготыОрганизаций.Получить(Позиция);
		ДанныеПоказателейЛьгот = ПоказателиЛьготОрганизаций.Получить(Позиция);
		ДанныеИндивидуальныхЛьгот = ИндивидуальныеЛьготыОрганизаций.Получить(Позиция);
		ДанныеЛимита = ЛимитыЛьготОрганизаций.Получить(Позиция);
		
		Если ДанныеЛьгот = Неопределено Тогда 
			ДанныеЛьгот = Новый Соответствие;
		КонецЕсли;
		
		Если ДанныеПоказателейЛьгот = Неопределено Тогда 
			ДанныеПоказателейЛьгот = Новый Соответствие;
		КонецЕсли;
		
		Если ДанныеИндивидуальныхЛьгот = Неопределено Тогда 
			ДанныеИндивидуальныхЛьгот = Новый Соответствие;
		КонецЕсли;
		
		Если ДанныеЛимита = Неопределено Тогда 
			ДанныеЛимита = ЛьготыСотрудников.СтруктураДанныхЛимита();
			ДанныеЛимита.ИспользоватьЛимит = Ложь;
			ДанныеЛимита.КоличествоБаллов = 0;
			ДанныеЛимита.ДоступныВсеЛьготы = Ложь;
		КонецЕсли;
		
		НазначаемыеЛьготыИдентичны = НазначаемыеЛьготыИдентичны(ДанныеЛьгот, ДанныеПоказателейЛьгот, СтруктураЛьгот.ДанныеЛьгот, СтруктураЛьгот.ДанныеПоказателейЛьгот);
		ИндивидуальныеЛьготыИдентичны = ИндивидуальныеЛьготыИдентичны(ДанныеИндивидуальныхЛьгот, ДанныеЛимита, СтруктураЛьгот.ДанныеИндивидуальныхЛьгот, СтруктураЛьгот.ДанныеЛимита);
		ДанныеЛимитаИдентичны = ДанныеЛимитаИдентичны(ДанныеЛимита, СтруктураЛьгот.ДанныеЛимита);
		
		Если НазначаемыеЛьготыИдентичны И ИндивидуальныеЛьготыИдентичны И ДанныеЛимитаИдентичны Тогда 	
			Возврат;
		КонецЕсли;
		
		ДанныеСравнения = Новый Структура;
		ДанныеСравнения.Вставить("НазначаемыеЛьготыИдентичны", НазначаемыеЛьготыИдентичны);
		ДанныеСравнения.Вставить("ИндивидуальныеЛьготыИдентичны", ИндивидуальныеЛьготыИдентичны);
		ДанныеСравнения.Вставить("ДанныеЛимитаИдентичны", ДанныеЛимитаИдентичны);
		
		ДанныеПозиции = Неопределено;
		ПолучитьДанныеПозиции(Позиции, Позиция, ДанныеПозиции);
		
		ДанныеЛьготОрганизаций = Новый Соответствие(ЛьготыОрганизаций);
		ДанныеПоказателейЛьготОрганизаций = Новый Соответствие(ПоказателиЛьготОрганизаций);
		ДанныеИндивидуальныхЛьготОрганизаций = Новый Соответствие(ИндивидуальныеЛьготыОрганизаций);
		ДанныеЛимитовОрганизаций = Новый Соответствие(ЛимитыЛьготОрганизаций);
		
		ДанныеЛьготОрганизаций.Вставить(СтруктураЛьгот.Позиция, СтруктураЛьгот.ДанныеЛьгот);
		ДанныеПоказателейЛьготОрганизаций.Вставить(СтруктураЛьгот.Позиция, СтруктураЛьгот.ДанныеПоказателейЛьгот);
		ДанныеИндивидуальныхЛьготОрганизаций.Вставить(СтруктураЛьгот.Позиция, СтруктураЛьгот.ДанныеИндивидуальныхЛьгот);
		ДанныеЛимитовОрганизаций.Вставить(СтруктураЛьгот.Позиция, СтруктураЛьгот.ДанныеЛимита);
		
		ЗаполнитьЛьготыПодчиненныхПодразделений(ДанныеПозиции, СтруктураЛьгот, ДанныеЛьготОрганизаций, ДанныеПоказателейЛьготОрганизаций, ДанныеИндивидуальныхЛьготОрганизаций, ДанныеЛимитовОрганизаций, ДанныеСравнения);
		
		ЛьготыОрганизаций = Новый ФиксированноеСоответствие(ДанныеЛьготОрганизаций);
		ПоказателиЛьготОрганизаций = Новый ФиксированноеСоответствие(ДанныеПоказателейЛьготОрганизаций);
		ИндивидуальныеЛьготыОрганизаций = Новый ФиксированноеСоответствие(ДанныеИндивидуальныхЛьготОрганизаций);
		ЛимитыЛьготОрганизаций = Новый ФиксированноеСоответствие(ДанныеЛимитовОрганизаций);
		
		ДанныеЛьготПозиций = Новый Соответствие(ЛьготыПозиций);
		ДанныеПоказателейЛьготПозиций = Новый Соответствие(ПоказателиЛьготПозиций);
		ДанныеИндивидуальныхЛьготПозиций = Новый Соответствие(ИндивидуальныеЛьготыПозиций);
		ДанныеЛимитовПозиций = Новый Соответствие(ЛимитыЛьготСотрудникамПоШтатномуРасписанию);
		
		ЗаполнитьЛьготыПодчиненныхПозиций(ДанныеПозиции, СтруктураЛьгот, ДанныеЛьготПозиций, ДанныеПоказателейЛьготПозиций, ДанныеИндивидуальныхЛьготПозиций, ДанныеЛимитовПозиций, ДанныеСравнения);
		
		ЛьготыПозиций = Новый ФиксированноеСоответствие(ДанныеЛьготПозиций);
		ПоказателиЛьготПозиций = Новый ФиксированноеСоответствие(ДанныеПоказателейЛьготПозиций);
		ИндивидуальныеЛьготыПозиций = Новый ФиксированноеСоответствие(ДанныеИндивидуальныхЛьготПозиций);
		ЛимитыЛьготСотрудникамПоШтатномуРасписанию = Новый ФиксированноеСоответствие(ДанныеЛимитовПозиций);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НазначаемыеЛьготыИдентичны(ДанныеЛьгот1, ДанныеПоказателей1, ДанныеЛьгот2, ДанныеПоказателей2)
	
	Возврат ОбщегоНазначения.КоллекцииИдентичны(ДанныеЛьгот1, ДанныеЛьгот2, "Ключ,Значение") И КоллекцииПоказателейИдентичны(ДанныеПоказателей1, ДанныеПоказателей2);
	
КонецФункции

&НаСервере
Функция КоллекцииПоказателейИдентичны(Коллекция1, Коллекция2)
	
	Если Коллекция1.Количество() <> Коллекция2.Количество() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Коллекция1 Цикл  
		ПоказателиЛьготы = Коллекция2.Получить(КлючИЗначение.Ключ);
		Если ПоказателиЛьготы = Неопределено Тогда 
			Возврат Ложь;
		КонецЕсли;
		Если Не ОбщегоНазначения.КоллекцииИдентичны(КлючИЗначение.Значение, ПоказателиЛьготы, "Ключ,Значение") Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ИндивидуальныеЛьготыИдентичны(ДанныеЛьгот1, ДанныеЛимита1, ДанныеЛьгот2, ДанныеЛимита2)
	
	Возврат (ДанныеЛимита1.ДоступныВсеЛьготы = ДанныеЛимита2.ДоступныВсеЛьготы) И ОбщегоНазначения.КоллекцииИдентичны(ДанныеЛьгот1, ДанныеЛьгот2, "Ключ,Значение");
	
КонецФункции

&НаСервере
Функция ДанныеЛимитаИдентичны(ДанныеЛимита1, ДанныеЛимита2)
	
	Возврат (ДанныеЛимита1.ИспользоватьЛимит = ДанныеЛимита2.ИспользоватьЛимит) И (ДанныеЛимита1.КоличествоБаллов = ДанныеЛимита2.КоличествоБаллов);
	
КонецФункции

&НаСервере
Процедура ПолучитьДанныеПозиции(ДеревоПозиций, Позиция, ДанныеПозиции)
	
	Если ДанныеПозиции <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокиПозиций = ДеревоПозиций.ПолучитьЭлементы();
	
	Для Каждого СтрокаПозиции Из СтрокиПозиций Цикл
		Если СтрокаПозиции.Позиция = Позиция Тогда 
			ДанныеПозиции = СтрокаПозиции;
			Прервать;
		КонецЕсли;
		ПолучитьДанныеПозиции(СтрокаПозиции, Позиция, ДанныеПозиции);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛьготыПодчиненныхПодразделений(ДеревоПозиций, СтруктураЛьгот, ДанныеЛьготОрганизаций, ДанныеПоказателейЛьготОрганизаций, ДанныеИндивидуальныхЛьготОрганизаций, ДанныеЛимитовОрганизаций, ДанныеСравнения)
	
	ДанныеЛьгот = СтруктураЛьгот.ДанныеЛьгот;
	ДанныеПоказателейЛьгот = СтруктураЛьгот.ДанныеПоказателейЛьгот;
	ДанныеИндивидуальныхЛьгот = СтруктураЛьгот.ДанныеИндивидуальныхЛьгот;
	ДанныеИндивидуальныхЛьгот = СтруктураЛьгот.ДанныеИндивидуальныхЛьгот;
	ДанныеЛимита = СтруктураЛьгот.ДанныеЛимита;
	
	СтрокиПозиций = ДеревоПозиций.ПолучитьЭлементы();
	
	Для Каждого ДанныеПозиции Из СтрокиПозиций Цикл 
		
		Если ТипЗнч(ДанныеПозиции.Позиция) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
			
			Если Не ДанныеСравнения.НазначаемыеЛьготыИдентичны Тогда 
			
				ДанныеЛьготПодразделения = ДанныеЛьготОрганизаций.Получить(ДанныеПозиции.Позиция);
				Если ДанныеЛьготПодразделения = Неопределено Тогда 
					ДанныеЛьготПодразделения = Новый Соответствие;
					ДанныеЛьготОрганизаций.Вставить(ДанныеПозиции.Позиция, ДанныеЛьготПодразделения);
				КонецЕсли;
				
				Для Каждого ДанныеЛьготы Из ДанныеЛьгот Цикл
					ДанныеЛьготПодразделения.Вставить(ДанныеЛьготы.Ключ, ДанныеЛьготы.Значение);
				КонецЦикла;
				
				ДанныеПоказателейЛьготПодразделения = ДанныеПоказателейЛьготОрганизаций.Получить(ДанныеПозиции.Позиция);
				Если ДанныеПоказателейЛьготПодразделения = Неопределено Тогда 
					ДанныеПоказателейЛьготПодразделения = Новый Соответствие;
					ДанныеПоказателейЛьготОрганизаций.Вставить(ДанныеПозиции.Позиция, ДанныеПоказателейЛьготПодразделения);
				КонецЕсли;
				
				Для Каждого ДанныеПоказателейЛьготы Из ДанныеПоказателейЛьгот Цикл
					ДанныеПоказателейЛьготПодразделения.Вставить(ДанныеПоказателейЛьготы.Ключ, ДанныеПоказателейЛьготы.Значение);
				КонецЦикла;
				
			КонецЕсли;
			
			Если Не ДанныеСравнения.ИндивидуальныеЛьготыИдентичны Тогда 
			
				ДанныеИндивидуальныхЛьготПодразделения = ДанныеИндивидуальныхЛьготОрганизаций.Получить(ДанныеПозиции.Позиция);
				Если ДанныеИндивидуальныхЛьготПодразделения = Неопределено Тогда
					ДанныеИндивидуальныхЛьготПодразделения = Новый Соответствие;
					ДанныеИндивидуальныхЛьготОрганизаций.Вставить(ДанныеПозиции.Позиция, ДанныеИндивидуальныхЛьготПодразделения);
				КонецЕсли;
				
				Для Каждого ДанныеЛьготы Из ДанныеИндивидуальныхЛьгот Цикл
					ДанныеИндивидуальныхЛьготПодразделения.Вставить(ДанныеЛьготы.Ключ, ДанныеЛьготы.Значение);
				КонецЦикла;
				
				ДанныеЛимитаПодразделения = ДанныеЛимитовОрганизаций.Получить(ДанныеПозиции.Позиция);
				Если ДанныеЛимитаПодразделения = Неопределено Тогда
					ДанныеЛимитаПодразделения = ЛьготыСотрудников.СтруктураДанныхЛимита();
					ДанныеЛимитаПодразделения.ИспользоватьЛимит = Ложь;
					ДанныеЛимитаПодразделения.КоличествоБаллов = 0;
					ДанныеЛимитовОрганизаций.Вставить(ДанныеПозиции.Позиция, ДанныеЛимитаПодразделения);
				КонецЕсли;
				
				ДанныеЛимитаПодразделения.ДоступныВсеЛьготы = ДанныеЛимита.ДоступныВсеЛьготы;
				
			КонецЕсли;
			
			Если Не ДанныеСравнения.ДанныеЛимитаИдентичны Тогда
				
				ДанныеЛимитаПодразделения = ДанныеЛимитовОрганизаций.Получить(ДанныеПозиции.Позиция);
				Если ДанныеЛимитаПодразделения = Неопределено Тогда
					ДанныеЛимитаПодразделения = ЛьготыСотрудников.СтруктураДанныхЛимита();
					ДанныеЛимитаПодразделения.ДоступныВсеЛьготы = Ложь;
					ДанныеЛимитовОрганизаций.Вставить(ДанныеПозиции.Позиция, ДанныеЛимитаПодразделения);
				КонецЕсли;
				
				ДанныеЛимитаПодразделения.ИспользоватьЛимит = ДанныеЛимита.ИспользоватьЛимит;
				ДанныеЛимитаПодразделения.КоличествоБаллов = ДанныеЛимита.КоличествоБаллов;
				
			КонецЕсли;
			
			ЗаполнитьЛьготыПодчиненныхПодразделений(ДанныеПозиции, СтруктураЛьгот, ДанныеЛьготОрганизаций, ДанныеПоказателейЛьготОрганизаций, ДанныеИндивидуальныхЛьготОрганизаций, ДанныеЛимитовОрганизаций, ДанныеСравнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛьготыПодчиненныхПозиций(ДеревоПозиций, СтруктураЛьгот, ДанныеЛьготПозиций, ДанныеПоказателейЛьготПозиций, ДанныеИндивидуальныхЛьготПозиций, ДанныеЛимитовПозиций, ДанныеСравнения)
	
	ДанныеЛьгот = СтруктураЛьгот.ДанныеЛьгот;
	ДанныеПоказателейЛьгот = СтруктураЛьгот.ДанныеПоказателейЛьгот;
	ДанныеИндивидуальныхЛьгот = СтруктураЛьгот.ДанныеИндивидуальныхЛьгот;
	ДанныеЛимита = СтруктураЛьгот.ДанныеЛимита;
	
	СтрокиПозиций = ДеревоПозиций.ПолучитьЭлементы();
	
	Для Каждого ДанныеПозиции Из СтрокиПозиций Цикл 
		
		Если ТипЗнч(ДанныеПозиции.Позиция) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда 
			
			Если Не ДанныеСравнения.НазначаемыеЛьготыИдентичны Тогда 
			
				ДанныеЛьготПозиции = ДанныеЛьготПозиций.Получить(ДанныеПозиции.Позиция);
				Если ДанныеЛьготПозиции = Неопределено Тогда 
					ДанныеЛьготПозиции = Новый Соответствие;
					ДанныеЛьготПозиций.Вставить(ДанныеПозиции.Позиция, ДанныеЛьготПозиции);
				КонецЕсли;
				
				Для Каждого ДанныеЛьготы Из ДанныеЛьгот Цикл
					ДанныеЛьготПозиции.Вставить(ДанныеЛьготы.Ключ, ДанныеЛьготы.Значение);
				КонецЦикла;
				
				ДанныеПоказателейЛьготПозиции = ДанныеПоказателейЛьготПозиций.Получить(ДанныеПозиции.Позиция);
				Если ДанныеПоказателейЛьготПозиции = Неопределено Тогда 
					ДанныеПоказателейЛьготПозиции = Новый Соответствие;
					ДанныеПоказателейЛьготПозиций.Вставить(ДанныеПозиции.Позиция, ДанныеПоказателейЛьготПозиции);
				КонецЕсли;
				
				Для Каждого ДанныеПоказателейЛьготы Из ДанныеПоказателейЛьгот Цикл
					ДанныеПоказателейЛьготПозиции.Вставить(ДанныеПоказателейЛьготы.Ключ, ДанныеПоказателейЛьготы.Значение);
				КонецЦикла;
				
			КонецЕсли;
			
			Если Не ДанныеСравнения.ИндивидуальныеЛьготыИдентичны Тогда 
				
				ДанныеИндивидуальныхЛьготПозиции = ДанныеИндивидуальныхЛьготПозиций.Получить(ДанныеПозиции.Позиция);
				Если ДанныеИндивидуальныхЛьготПозиции = Неопределено Тогда
					ДанныеИндивидуальныхЛьготПозиции = Новый Соответствие;
					ДанныеИндивидуальныхЛьготПозиций.Вставить(ДанныеПозиции.Позиция, ДанныеИндивидуальныхЛьготПозиции);
				КонецЕсли;
				
				Для Каждого ДанныеЛьготы Из ДанныеИндивидуальныхЛьгот Цикл
					ДанныеИндивидуальныхЛьготПозиции.Вставить(ДанныеЛьготы.Ключ, ДанныеЛьготы.Значение);
				КонецЦикла;
				
				ДанныеЛимитаПозиции = ДанныеЛимитовПозиций.Получить(ДанныеПозиции.Позиция);
				Если ДанныеЛимитаПозиции = Неопределено Тогда
					ДанныеЛимитаПозиции = ЛьготыСотрудников.СтруктураДанныхЛимита();
					ДанныеЛимитаПозиции.ИспользоватьЛимит = Ложь;
					ДанныеЛимитаПозиции.КоличествоБаллов = 0;
					ДанныеЛимитовПозиций.Вставить(ДанныеПозиции.Позиция, ДанныеЛимитаПозиции);
				КонецЕсли;
				
				ДанныеЛимитаПозиции.ДоступныВсеЛьготы = ДанныеЛимита.ДоступныВсеЛьготы;
				
			КонецЕсли;
			
			Если Не ДанныеСравнения.ДанныеЛимитаИдентичны Тогда
				
				ДанныеЛимитаПозиции = ДанныеЛимитовПозиций.Получить(ДанныеПозиции.Позиция);
				Если ДанныеЛимитаПозиции = Неопределено Тогда
					ДанныеЛимитаПозиции = ЛьготыСотрудников.СтруктураДанныхЛимита();
					ДанныеЛимитаПозиции.ДоступныВсеЛьготы = Ложь;
					ДанныеЛимитовПозиций.Вставить(ДанныеПозиции.Позиция, ДанныеЛимитаПозиции);
				КонецЕсли;
				
				ДанныеЛимитаПозиции.ИспользоватьЛимит = ДанныеЛимита.ИспользоватьЛимит;
				ДанныеЛимитаПозиции.КоличествоБаллов = ДанныеЛимита.КоличествоБаллов;
			
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЛьготыПодчиненныхПозиций(ДанныеПозиции, СтруктураЛьгот, ДанныеЛьготПозиций, ДанныеПоказателейЛьготПозиций, ДанныеИндивидуальныхЛьготПозиций, ДанныеЛимитовПозиций, ДанныеСравнения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтруктураЛьготПозиции(Позиция)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыЛьгот();
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтотОбъект, ЭтотОбъект, ОписаниеТаблицыВидовРасчета, 1);	
	
	ДанныеЛьгот = Новый Соответствие;
	ДанныеПоказателейЛьгот = Новый Соответствие;
	
	Для Каждого ДанныеЛьготы Из Льготы Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеЛьготы.Льгота) Тогда 
			Продолжить;
		КонецЕсли;
		
		Размер = 0;
		Если ДанныеЛьготы.ФиксированнаяСумма Тогда 
			Размер = ДанныеЛьготы.Значение1;
		КонецЕсли;
		
		ДанныеЛьгот.Вставить(ДанныеЛьготы.Льгота, Размер);
		
		СтруктураОтбора = Новый Структура("ИдентификаторСтрокиВидаРасчета", ДанныеЛьготы.ИдентификаторСтрокиВидаРасчета);
		СтрокиПоказателей = Показатели.НайтиСтроки(СтруктураОтбора);
		
		ЗначенияПоказателей = Новый Соответствие;
		Для Каждого ДанныеПоказателя Из СтрокиПоказателей Цикл 
			ЗначенияПоказателей.Вставить(ДанныеПоказателя.Показатель, ДанныеПоказателя.Значение);
		КонецЦикла;
		
		ДанныеПоказателейЛьгот.Вставить(ДанныеЛьготы.Льгота, ЗначенияПоказателей);
		
	КонецЦикла;
	
	ДанныеИндивидуальныхЛьгот = Новый Соответствие;
	Для Каждого ДанныеЛьготы Из ИндивидуальныеЛьготы Цикл
		Если Не ЗначениеЗаполнено(ДанныеЛьготы.Льгота) Тогда 
			Продолжить;
		КонецЕсли;
		ДанныеИндивидуальныхЛьгот.Вставить(ДанныеЛьготы.Льгота, Истина);
	КонецЦикла;
	
	ДанныеЛимита = ЛьготыСотрудников.СтруктураДанныхЛимита();
	ДанныеЛимита.ИспользоватьЛимит = ИспользоватьЛимит;
	ДанныеЛимита.КоличествоБаллов = ?(ИспользоватьЛимит, КоличествоБаллов, 0);
	ДанныеЛимита.ДоступныВсеЛьготы = ?(ДоступныВсеЛьготы = 0, Истина, Ложь);
	
	ЛьготыОрганизации = Новый Структура;
	ЛьготыОрганизации.Вставить("Позиция", Позиция);
	ЛьготыОрганизации.Вставить("ДанныеЛьгот", ДанныеЛьгот);
	ЛьготыОрганизации.Вставить("ДанныеПоказателейЛьгот", ДанныеПоказателейЛьгот);
	ЛьготыОрганизации.Вставить("ДанныеИндивидуальныхЛьгот", ДанныеИндивидуальныхЛьгот);
	ЛьготыОрганизации.Вставить("ДанныеЛимита", ДанныеЛимита);
	
	Возврат ЛьготыОрганизации;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПозицииНаСервере(РеквизитыВДанные, Позиция)
	
	Если РеквизитыВДанные Тогда 
		РеквизитыВДанные(Позиция);
	КонецЕсли;
	
	Льготы.Очистить();
	Показатели.Очистить();
	ИндивидуальныеЛьготы.Очистить();
	
	ТекущиеДанные = Позиции.НайтиПоИдентификатору(Элементы.Позиции.ТекущаяСтрока);
	
	ЭтоПозиция = ТипЗнч(ТекущиеДанные.Позиция) = Тип("СправочникСсылка.ШтатноеРасписание");
	
	// Льготы, назначаемые кадровыми приказами
	ДанныеЛьгот = ?(ЭтоПозиция, ЛьготыПозиций.Получить(ТекущиеДанные.Позиция), ЛьготыОрганизаций.Получить(ТекущиеДанные.Позиция));
	
	Если ДанныеЛьгот <> Неопределено Тогда 
	
		ЛьготыОрганизации = ЛьготыОрганизаций.Получить(ТекущиеДанные.Подразделение);
		
		ДанныеПоказателейЛьгот = ?(ЭтоПозиция, ПоказателиЛьготПозиций.Получить(ТекущиеДанные.Позиция), ПоказателиЛьготОрганизаций.Получить(ТекущиеДанные.Позиция));
		
		ИдентификаторСтрокиВидаРасчета = 1;
		Для Каждого ДанныеЛьготы Из ДанныеЛьгот Цикл
			НоваяСтрока = Льготы.Добавить();
			НоваяСтрока.Льгота = ДанныеЛьготы.Ключ;
			НоваяСтрока.Размер = ДанныеЛьготы.Значение;
			НоваяСтрока.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			Если ЭтоПозиция И ЛьготыОрганизации <> Неопределено И ЛьготыОрганизации[ДанныеЛьготы.Ключ] <> Неопределено Тогда 
				НоваяСтрока.ЛьготаОрганизации = Истина;
			КонецЕсли;
			Если ДанныеПоказателейЛьгот <> Неопределено Тогда 
				ЗначенияПоказателей = ДанныеПоказателейЛьгот.Получить(ДанныеЛьготы.Ключ);
				Если ЗначенияПоказателей <> Неопределено Тогда 
					Для Каждого КлючИЗначение Из ЗначенияПоказателей Цикл 
						НоваяСтрока = Показатели.Добавить();
						НоваяСтрока.Показатель = КлючИЗначение.Ключ;
						НоваяСтрока.Значение = КлючИЗначение.Значение;
						НоваяСтрока.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
		КонецЦикла;
		
		Льготы.Сортировать("ЛьготаОрганизации Убыв, Льгота");
		
		ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыЛьгот();
		ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 1);	
		
	КонецЕсли;
	
	// Льготы, выбираемые сотрудником
	ДанныеИндивидуальныхЛьгот = ?(ЭтоПозиция, ИндивидуальныеЛьготыПозиций.Получить(ТекущиеДанные.Позиция), ИндивидуальныеЛьготыОрганизаций.Получить(ТекущиеДанные.Позиция));
	
	Если ДанныеИндивидуальныхЛьгот <> Неопределено Тогда 
		ИндивидуальныеЛьготыОрганизации = ИндивидуальныеЛьготыОрганизаций.Получить(ТекущиеДанные.Подразделение);
		Для Каждого ДанныеЛьготы Из ДанныеИндивидуальныхЛьгот Цикл
			НоваяСтрока = ИндивидуальныеЛьготы.Добавить();
			НоваяСтрока.Льгота = ДанныеЛьготы.Ключ;
			Если ЭтоПозиция И ИндивидуальныеЛьготыОрганизации <> Неопределено И ИндивидуальныеЛьготыОрганизации[ДанныеЛьготы.Ключ] <> Неопределено Тогда 
				НоваяСтрока.ЛьготаОрганизации = Истина;
			КонецЕсли;
		КонецЦикла;
		ИндивидуальныеЛьготы.Сортировать("ЛьготаОрганизации Убыв, Льгота");
	КонецЕсли;
	
	// Лимиты пакетов льгот
	ДанныеЛимита = ?(ЭтоПозиция, ЛимитыЛьготСотрудникамПоШтатномуРасписанию.Получить(ТекущиеДанные.Позиция), ЛимитыЛьготОрганизаций.Получить(ТекущиеДанные.Позиция));
	Если ДанныеЛимита <> Неопределено Тогда 
		ИспользоватьЛимит = ДанныеЛимита.ИспользоватьЛимит;
		КоличествоБаллов = ДанныеЛимита.КоличествоБаллов;
		ДоступныВсеЛьготы = ?(ДанныеЛимита.ДоступныВсеЛьготы, 0, 1);
	Иначе 
		ИспользоватьЛимит = Ложь;
		КоличествоБаллов = 0;
		ДоступныВсеЛьготы = 1;
	КонецЕсли;
	
	УстановитьДоступностьРазмераЛимита(ЭтотОбъект);
	УстановитьДоступностьИндивидуальныхЛьгот();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Результат, ДополнительныеПараметры) Экспорт 
	
	СохранитьДанныеНаСервере();
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеНаСервере()
	
	РеквизитыВДанные();
	
	ТаблицаОписанийПозиций = ЛьготыСотрудников.ТаблицаОписанийПозиций();
	ЗаполнитьТаблицуОписанийПозиций(Позиции.ПолучитьЭлементы(), ТаблицаОписанийПозиций);
	
	Для Каждого КлючИЗначение Из ЛьготыПозиций Цикл 
		
		Позиция = КлючИЗначение.Ключ;
		
		Отбор = Новый Структура("Позиция", Позиция);
		НайденныеСтроки = ТаблицаОписанийПозиций.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ОписаниеПозиции = НайденныеСтроки[0];
		
		НаборЗаписей = РегистрыСведений.ПакетыЛьготСотрудникамПоШтатномуРасписанию.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ОписаниеПозиции.Организация);
		НаборЗаписей.Отбор.Подразделение.Установить(ОписаниеПозиции.Подразделение);
		НаборЗаписей.Отбор.Должность.Установить(ОписаниеПозиции.Должность);
		НаборЗаписей.Отбор.Позиция.Установить(ОписаниеПозиции.Позиция);
		
		Для Каждого ДанныеЛьготы Из КлючИЗначение.Значение Цикл 
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ОписаниеПозиции);
			НоваяЗапись.Льгота = ДанныеЛьготы.Ключ;
			НоваяЗапись.Размер = ДанныеЛьготы.Значение;
		КонецЦикла;
		
		ДанныеЛимита = ЛимитыЛьготСотрудникамПоШтатномуРасписанию.Получить(Позиция);
		Если ДанныеЛимита = Неопределено Или Не ДанныеЛимита.ДоступныВсеЛьготы Тогда 
			ИндивидуальныеЛьготыПозиции = ИндивидуальныеЛьготыПозиций.Получить(Позиция);
			Если ИндивидуальныеЛьготыПозиции <> Неопределено Тогда 
				Для Каждого ДанныеИндивидуальныхЛьгот Из ИндивидуальныеЛьготыПозиции Цикл 
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ОписаниеПозиции);
					НоваяЗапись.Льгота = ДанныеИндивидуальныхЛьгот.Ключ;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Для Каждого ДанныеПоказателейЛьгот Из ПоказателиЛьготПозиций Цикл 
		
		Позиция = ДанныеПоказателейЛьгот.Ключ;
		
		Отбор = Новый Структура("Позиция", Позиция);
		НайденныеСтроки = ТаблицаОписанийПозиций.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ОписаниеПозиции = НайденныеСтроки[0];
		
		НаборЗаписей = РегистрыСведений.ЗначенияПоказателейЛьготСотрудникамПоШтатномуРасписанию.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ОписаниеПозиции.Организация);
		НаборЗаписей.Отбор.Подразделение.Установить(ОписаниеПозиции.Подразделение);
		НаборЗаписей.Отбор.Должность.Установить(ОписаниеПозиции.Должность);
		НаборЗаписей.Отбор.Позиция.Установить(ОписаниеПозиции.Позиция);
		
		УникальныеПоказатели = Новый Соответствие;
		Для Каждого ЗначенияПоказателей Из ДанныеПоказателейЛьгот.Значение Цикл 
			Для Каждого ДанныеПоказателя Из ЗначенияПоказателей.Значение Цикл 
				Если УникальныеПоказатели[ДанныеПоказателя.Ключ] <> Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ОписаниеПозиции);
				НоваяЗапись.Показатель = ДанныеПоказателя.Ключ;
				НоваяЗапись.Значение = ДанныеПоказателя.Значение;
		        УникальныеПоказатели.Вставить(ДанныеПоказателя.Ключ, Истина);
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ЛьготыОрганизаций Цикл 
		
		Если ТипЗнч(КлючИЗначение.Ключ) = Тип("СправочникСсылка.Организации") Тогда 
			
			Организация = КлючИЗначение.Ключ;
			
			НаборЗаписей = РегистрыСведений.ПакетыЛьготСотрудникамПоШтатномуРасписанию.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация);
			НаборЗаписей.Отбор.Подразделение.Установить(Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
			НаборЗаписей.Отбор.Должность.Установить(Справочники.Должности.ПустаяСсылка());
			НаборЗаписей.Отбор.Позиция.Установить(Справочники.ШтатноеРасписание.ПустаяСсылка());
			
			Для Каждого ДанныеЛьготы Из КлючИЗначение.Значение Цикл 
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Организация = Организация;
				НоваяЗапись.Льгота = ДанныеЛьготы.Ключ;
				НоваяЗапись.Размер = ДанныеЛьготы.Значение;
			КонецЦикла;
			
			ДанныеЛимита = ЛимитыЛьготОрганизаций.Получить(Организация);
			Если ДанныеЛимита = Неопределено Или Не ДанныеЛимита.ДоступныВсеЛьготы Тогда 
				ИндивидуальныеЛьготыПозиции = ИндивидуальныеЛьготыОрганизаций.Получить(Организация);
				Если ИндивидуальныеЛьготыПозиции <> Неопределено Тогда 
					Для Каждого ДанныеИндивидуальныхЛьгот Из ИндивидуальныеЛьготыПозиции Цикл 
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Организация = Организация;
						НоваяЗапись.Льгота = ДанныеИндивидуальныхЛьгот.Ключ;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
		Иначе 
			
			Подразделение = КлючИЗначение.Ключ;
			
			Отбор = Новый Структура("Подразделение", Подразделение);
			НайденныеСтроки = ТаблицаОписанийПозиций.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			ОписаниеПозиции = НайденныеСтроки[0];
		    Организация = ОписаниеПозиции.Организация;
			
			НаборЗаписей = РегистрыСведений.ПакетыЛьготСотрудникамПоШтатномуРасписанию.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация);
			НаборЗаписей.Отбор.Подразделение.Установить(Подразделение);
			НаборЗаписей.Отбор.Должность.Установить(Справочники.Должности.ПустаяСсылка());
			НаборЗаписей.Отбор.Позиция.Установить(Справочники.ШтатноеРасписание.ПустаяСсылка());
			
			Для Каждого ДанныеЛьготы Из КлючИЗначение.Значение Цикл 
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Организация = Организация;
				НоваяЗапись.Подразделение = Подразделение;
				НоваяЗапись.Льгота = ДанныеЛьготы.Ключ;
				НоваяЗапись.Размер = ДанныеЛьготы.Значение;
			КонецЦикла;
			
			ДанныеЛимита = ЛимитыЛьготОрганизаций.Получить(Подразделение);
			Если ДанныеЛимита = Неопределено Или Не ДанныеЛимита.ДоступныВсеЛьготы Тогда 
				ИндивидуальныеЛьготыПозиции = ИндивидуальныеЛьготыОрганизаций.Получить(Подразделение);
				Если ИндивидуальныеЛьготыПозиции <> Неопределено Тогда 
					Для Каждого ДанныеИндивидуальныхЛьгот Из ИндивидуальныеЛьготыПозиции Цикл 
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Организация = Организация;
						НоваяЗапись.Подразделение = Подразделение;
						НоваяЗапись.Льгота = ДанныеИндивидуальныхЛьгот.Ключ;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДанныеПоказателейЛьгот Из ПоказателиЛьготОрганизаций Цикл 
		
		Если ТипЗнч(ДанныеПоказателейЛьгот.Ключ) = Тип("СправочникСсылка.Организации") Тогда 
		
			Организация = ДанныеПоказателейЛьгот.Ключ;
			
			НаборЗаписей = РегистрыСведений.ЗначенияПоказателейЛьготСотрудникамПоШтатномуРасписанию.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация);
			НаборЗаписей.Отбор.Подразделение.Установить(Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
			НаборЗаписей.Отбор.Должность.Установить(Справочники.Должности.ПустаяСсылка());
			НаборЗаписей.Отбор.Позиция.Установить(Справочники.ШтатноеРасписание.ПустаяСсылка());
			
			УникальныеПоказатели = Новый Соответствие;
			Для Каждого ЗначенияПоказателей Из ДанныеПоказателейЛьгот.Значение Цикл 
				Для Каждого ДанныеПоказателя Из ЗначенияПоказателей.Значение Цикл 
					Если УникальныеПоказатели[ДанныеПоказателя.Ключ] <> Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Организация = Организация;
					НоваяЗапись.Показатель = ДанныеПоказателя.Ключ;
					НоваяЗапись.Значение = ДанныеПоказателя.Значение;
			        УникальныеПоказатели.Вставить(ДанныеПоказателя.Ключ, Истина);
				КонецЦикла;
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
		Иначе 
			
			Подразделение = ДанныеПоказателейЛьгот.Ключ;
			
			Отбор = Новый Структура("Подразделение", Подразделение);
			НайденныеСтроки = ТаблицаОписанийПозиций.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			ОписаниеПозиции = НайденныеСтроки[0];
		    Организация = ОписаниеПозиции.Организация;
			
			НаборЗаписей = РегистрыСведений.ЗначенияПоказателейЛьготСотрудникамПоШтатномуРасписанию.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация);
			НаборЗаписей.Отбор.Подразделение.Установить(Подразделение);
			НаборЗаписей.Отбор.Должность.Установить(Справочники.Должности.ПустаяСсылка());
			НаборЗаписей.Отбор.Позиция.Установить(Справочники.ШтатноеРасписание.ПустаяСсылка());
			
			УникальныеПоказатели = Новый Соответствие;
			Для Каждого ЗначенияПоказателей Из ДанныеПоказателейЛьгот.Значение Цикл 
				Для Каждого ДанныеПоказателя Из ЗначенияПоказателей.Значение Цикл 
					Если УникальныеПоказатели[ДанныеПоказателя.Ключ] <> Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Организация = Организация;
					НоваяЗапись.Подразделение = Подразделение;
					НоваяЗапись.Показатель = ДанныеПоказателя.Ключ;
					НоваяЗапись.Значение = ДанныеПоказателя.Значение;
			        УникальныеПоказатели.Вставить(ДанныеПоказателя.Ключ, Истина);
				КонецЦикла;
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ЛимитыЛьготСотрудникамПоШтатномуРасписанию Цикл 
		
		Позиция = КлючИЗначение.Ключ;
		
		Отбор = Новый Структура("Позиция", Позиция);
		НайденныеСтроки = ТаблицаОписанийПозиций.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ОписаниеПозиции = НайденныеСтроки[0];
		
		ДанныеЛимита = КлючИЗначение.Значение;
		
		НаборЗаписей = РегистрыСведений.ЛимитыЛьготСотрудникамПоШтатномуРасписанию.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ОписаниеПозиции.Организация);
		НаборЗаписей.Отбор.Подразделение.Установить(ОписаниеПозиции.Подразделение);
		НаборЗаписей.Отбор.Должность.Установить(ОписаниеПозиции.Должность);
		НаборЗаписей.Отбор.Позиция.Установить(ОписаниеПозиции.Позиция);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ОписаниеПозиции);
		НоваяЗапись.ИспользоватьЛимит = ДанныеЛимита.ИспользоватьЛимит;
		НоваяЗапись.КоличествоБаллов = ДанныеЛимита.КоличествоБаллов;
		НоваяЗапись.ДоступныВсеЛьготы = ДанныеЛимита.ДоступныВсеЛьготы;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ЛимитыЛьготОрганизаций Цикл 
		
		Если ТипЗнч(КлючИЗначение.Ключ) = Тип("СправочникСсылка.Организации") Тогда 
		
			Организация = КлючИЗначение.Ключ;
			ДанныеЛимита = КлючИЗначение.Значение;
			
			НаборЗаписей = РегистрыСведений.ЛимитыЛьготСотрудникамПоШтатномуРасписанию.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация);
			НаборЗаписей.Отбор.Подразделение.Установить(Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
			НаборЗаписей.Отбор.Должность.Установить(Справочники.Должности.ПустаяСсылка());
			НаборЗаписей.Отбор.Позиция.Установить(Справочники.ШтатноеРасписание.ПустаяСсылка());
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Организация = Организация;
			НоваяЗапись.ИспользоватьЛимит = ДанныеЛимита.ИспользоватьЛимит;
			НоваяЗапись.КоличествоБаллов = ДанныеЛимита.КоличествоБаллов;
			НоваяЗапись.ДоступныВсеЛьготы = ДанныеЛимита.ДоступныВсеЛьготы;
			
		Иначе 
			
			Подразделение = КлючИЗначение.Ключ;
			ДанныеЛимита = КлючИЗначение.Значение;
			
			Отбор = Новый Структура("Подразделение", Подразделение);
			НайденныеСтроки = ТаблицаОписанийПозиций.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			ОписаниеПозиции = НайденныеСтроки[0];
			
			НаборЗаписей = РегистрыСведений.ЛимитыЛьготСотрудникамПоШтатномуРасписанию.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(ОписаниеПозиции.Организация);
			НаборЗаписей.Отбор.Подразделение.Установить(ОписаниеПозиции.Подразделение);
			НаборЗаписей.Отбор.Должность.Установить(Справочники.Должности.ПустаяСсылка());
			НаборЗаписей.Отбор.Позиция.Установить(Справочники.ШтатноеРасписание.ПустаяСсылка());
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Организация = ОписаниеПозиции.Организация;
			НоваяЗапись.Подразделение = ОписаниеПозиции.Подразделение;
			НоваяЗапись.ИспользоватьЛимит = ДанныеЛимита.ИспользоватьЛимит;
			НоваяЗапись.КоличествоБаллов = ДанныеЛимита.КоличествоБаллов;
			НоваяЗапись.ДоступныВсеЛьготы = ДанныеЛимита.ДоступныВсеЛьготы;
			
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыЛьгот()
	
	ОписаниеТаблицыВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыПлановыхНачислений(Ложь, Ложь);
	ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "Льготы";
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета = "Льгота";
	ОписаниеТаблицыВидовРасчета.ПутьКДанным = "Льготы";
	ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей = "Показатели";
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаФиксРасчет = "ЛьготыФиксРасчет";
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование = "";
	ОписаниеТаблицыВидовРасчета.ИмяПоляРезультат = "";
	
	Возврат ОписаниеТаблицыВидовРасчета;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Льготы.ЛьготаОрганизации");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Льготы");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаКнопки);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Льготы.ЛьготаОрганизации");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Льготы");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИндивидуальныеЛьготы.ЛьготаОрганизации");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИндивидуальныеЛьготы");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаКнопки);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИндивидуальныеЛьготы.ЛьготаОрганизации");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИндивидуальныеЛьготы");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРазмераЛимита(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "КоличествоБаллов", "Доступность", Форма.ИспользоватьЛимит);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИндивидуальныхЛьгот()
	
	Если ДоступныВсеЛьготы = 0 Тогда 
		ИндивидуальныеЛьготы.Очистить();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИндивидуальныеЛьготы", "ТолькоПросмотр", ДоступныВсеЛьготы = 0);
	
КонецПроцедуры

#КонецОбласти
