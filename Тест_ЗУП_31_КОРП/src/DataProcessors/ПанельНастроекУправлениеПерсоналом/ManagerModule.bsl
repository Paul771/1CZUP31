#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция СтруктураПараметровНастроек() Экспорт
	
	// ПараметрыНастроек – структура, 
	//		Ключ – имя настройки или действия
	//		Значение – тип Булево, если Истина, то эту настройку надо будет сохранить.
	
	ПараметрыНастроек = Новый Структура;
	ПараметрыНастроек.Вставить("НастройкиСпециальнойОценкиУсловийТруда", Ложь);
	ПараметрыНастроек.Вставить("НастройкиНесчастныхСлучаевНаПроизводстве", Ложь);
	ПараметрыНастроек.Вставить("ИспользоватьИнструктажиПоОхранеТруда", Ложь);
	ПараметрыНастроек.Вставить("НастройкиГрейдов", Ложь);
	ПараметрыНастроек.Вставить("НастройкиПодбораПерсонала", Ложь);
	ПараметрыНастроек.Вставить("НастройкиКлючевыхПоказателейЭффективности", Ложь);
	ПараметрыНастроек.Вставить("НастройкиЛьготСотрудников", Ложь);
	ПараметрыНастроек.Вставить("НастройкиОбученияРазвития", Ложь);
	ПараметрыНастроек.Вставить("НастройкиКадровогоРезерва", Ложь);
	ПараметрыНастроек.Вставить("НастройкиОценкиПерсонала", Ложь);
	ПараметрыНастроек.Вставить("НастройкиСамообслуживанияСотрудников", Ложь);
	
	// СтруктураПараметров – элементы структуры значения настроек для сохранения
	СтруктураПараметров = Новый Структура("
	|ПараметрыНастроек,
	|НастройкиСпециальнойОценкиУсловийТруда,
	|НастройкиНесчастныхСлучаевНаПроизводстве,
	|ИспользоватьИнструктажиПоОхранеТруда,
	|НастройкиГрейдов,
	|НастройкиПодбораПерсонала,
	|НастройкиКлючевыхПоказателейЭффективности,
	|НастройкиЛьготСотрудников,
	|НастройкиОбученияРазвития,
	|НастройкиКадровогоРезерва,
	|НастройкиОценкиПерсонала,
	|НастройкиСамообслуживанияСотрудников");
	
	СтруктураПараметров.ПараметрыНастроек = ПараметрыНастроек;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ЗаполнитьСтруктуруПараметровНастроек(ИмяНастройки) Экспорт
	
	СтруктураПараметров = СтруктураПараметровНастроек();
	Настройки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяНастройки);
	Для каждого Настройка Из Настройки Цикл
		СтруктураПараметров.ПараметрыНастроек[Настройка] = Истина;
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции 

Процедура ЗаписатьНастройки(Параметры, АдресХранилища) Экспорт
	
	// Параметры описаны в СтруктураПараметровНастроек.
	ПараметрыНастроек = Параметры.ПараметрыНастроек;
	
	НачатьТранзакцию();
	
	Если ПараметрыНастроек.НастройкиСпециальнойОценкиУсловийТруда Тогда
		
		Настройки = РегистрыСведений.НастройкиСпециальнойОценкиУсловийТруда.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиСпециальнойОценкиУсловийТруда);
		Настройки.Записать();
		
	КонецЕсли;
	
	Если ПараметрыНастроек.НастройкиНесчастныхСлучаевНаПроизводстве Тогда
		
		Настройки = РегистрыСведений.НастройкиНесчастныхСлучаевНаПроизводстве.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиНесчастныхСлучаевНаПроизводстве);
		Настройки.Записать();
		
	КонецЕсли;
	
	Если ПараметрыНастроек.ИспользоватьИнструктажиПоОхранеТруда Тогда
		
		Константы.ИспользоватьИнструктажиПоОхранеТруда.Установить(Параметры.ИспользоватьИнструктажиПоОхранеТруда);
		
	КонецЕсли;
	
	Если ПараметрыНастроек.НастройкиПодбораПерсонала Тогда
		
		Настройки = РегистрыСведений.НастройкиПодбораПерсонала.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиПодбораПерсонала);
		Настройки.Записать();
		
	КонецЕсли;
	
	Если ПараметрыНастроек.НастройкиЛьготСотрудников Тогда
		
		Настройки = РегистрыСведений.НастройкиЛьготСотрудников.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиЛьготСотрудников);
		Настройки.Записать();
		
	КонецЕсли;
	
	Если ПараметрыНастроек.НастройкиОбученияРазвития Тогда
		
		Настройки = РегистрыСведений.НастройкиОбученияРазвития.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиОбученияРазвития);
		Настройки.Записать();
		
	КонецЕсли;
	
	Если ПараметрыНастроек.НастройкиКадровогоРезерва Тогда
		
		Настройки = РегистрыСведений.НастройкиКадровогоРезерва.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиКадровогоРезерва);
		Настройки.Записать();
		
	КонецЕсли;
	
	Если ПараметрыНастроек.НастройкиОценкиПерсонала Тогда
		
		Настройки = РегистрыСведений.НастройкиОценкиПерсонала.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиОценкиПерсонала);
		Настройки.Записать();
		
	КонецЕсли;
	
	Если ПараметрыНастроек.НастройкиСамообслуживанияСотрудников Тогда
		
		Настройки = РегистрыСведений.НастройкиСамообслуживанияСотрудников.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиСамообслуживанияСотрудников);
		Настройки.Записать();
		
		СамообслуживаниеСотрудников.ЗаполнитьОграниченияПродолжительностиСеансаПоУмолчанию();
		СамообслуживаниеСотрудников.ЗаполнитьОграниченияНаКоличествоСеансовПоУмолчанию();
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.ПанельУправлениеПерсоналомЗаписатьНастройкиГрейдов(Параметры, ПараметрыНастроек);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ПоместитьВоВременноеХранилище(Истина, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли