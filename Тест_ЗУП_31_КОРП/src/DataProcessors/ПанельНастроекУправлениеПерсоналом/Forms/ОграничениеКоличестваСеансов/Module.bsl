
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыДоступаБезОграниченийНаКоличествоСеансов.ГруппаДоступа
	               |ИЗ
	               |	РегистрСведений.ГруппыДоступаБезОграниченийНаКоличествоСеансов КАК ГруппыДоступаБезОграниченийНаКоличествоСеансов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КоличествоОдновременныхСеансовГруппДоступа.ГруппаДоступа,
	               |	КоличествоОдновременныхСеансовГруппДоступа.КоличествоСеансов
	               |ИЗ
	               |	РегистрСведений.КоличествоОдновременныхСеансовГруппДоступа КАК КоличествоОдновременныхСеансовГруппДоступа";
				   
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьЗначенияСвойств(ГруппыДоступаБезОграничений.Добавить(), Выборка);
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьЗначенияСвойств(ОграничениеКоличестваСеансов.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Отказ = Ложь;
	СохранитьДанныеНаСервере(Отказ);
	
	Если Не Отказ Тогда 
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СохранитьДанныеНаСервере(Отказ)
	
	ПроверитьЗаполнениеНаСервере(Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ГруппыДоступаБезОграниченийНаКоличествоСеансов.СоздатьНаборЗаписей();
	Для Каждого СтрокаГруппыДоступа Из ГруппыДоступаБезОграничений Цикл 
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаГруппыДоступа);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.КоличествоОдновременныхСеансовГруппДоступа.СоздатьНаборЗаписей();
	Для Каждого СтрокаГруппыДоступа Из ОграничениеКоличестваСеансов Цикл 
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаГруппыДоступа);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНаСервере(Отказ)
	
	УникальныеГруппыДоступа = Новый Соответствие;
	
	Для Каждого СтрокаГруппыДоступа Из ГруппыДоступаБезОграничений Цикл 
		
		Отбор = Новый Структура("ГруппаДоступа", СтрокаГруппыДоступа.ГруппаДоступа);
		Если ОграничениеКоличестваСеансов.НайтиСтроки(Отбор).Количество() <> 0 Тогда 
			ИндексСтроки = ГруппыДоступаБезОграничений.Индекс(СтрокаГруппыДоступа);
			ТекстСообщения = НСтр("ru = 'Группа доступа %1 присутствует в обоих списках.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаГруппыДоступа.ГруппаДоступа);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ГруппыДоступаБезОграничений[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].ГруппаДоступа", , Отказ);
		КонецЕсли;
		
		Если УникальныеГруппыДоступа[СтрокаГруппыДоступа.ГруппаДоступа] <> Неопределено Тогда 
			ИндексСтроки = ГруппыДоступаБезОграничений.Индекс(СтрокаГруппыДоступа);
			ТекстСообщения = НСтр("ru = 'Группа доступа %1 уже указана в списке ранее.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаГруппыДоступа.ГруппаДоступа);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ГруппыДоступаБезОграничений[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].ГруппаДоступа", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаГруппыДоступа.ГруппаДоступа) Тогда 
			ИндексСтроки = ГруппыДоступаБезОграничений.Индекс(СтрокаГруппыДоступа);
			ТекстСообщения = НСтр("ru = 'Не указана группа доступа.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ГруппыДоступаБезОграничений[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].ГруппаДоступа", , Отказ);
		КонецЕсли;
		
		УникальныеГруппыДоступа.Вставить(СтрокаГруппыДоступа.ГруппаДоступа, Истина);
		
	КонецЦикла;
	
	УникальныеГруппыДоступа = Новый Соответствие;
	
	Для Каждого СтрокаГруппыДоступа Из ОграничениеКоличестваСеансов Цикл
		
		Если УникальныеГруппыДоступа[СтрокаГруппыДоступа.ГруппаДоступа] <> Неопределено Тогда 
			ИндексСтроки = ОграничениеКоличестваСеансов.Индекс(СтрокаГруппыДоступа);
			ТекстСообщения = НСтр("ru = 'Группа доступа %1 уже указана в списке ранее.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаГруппыДоступа.ГруппаДоступа);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОграничениеКоличестваСеансов[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].ГруппаДоступа", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаГруппыДоступа.ГруппаДоступа) Тогда 
			ИндексСтроки = ОграничениеКоличестваСеансов.Индекс(СтрокаГруппыДоступа);
			ТекстСообщения = НСтр("ru = 'Не указана группа доступа.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОграничениеКоличестваСеансов[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].ГруппаДоступа", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаГруппыДоступа.КоличествоСеансов) Тогда 
			ИндексСтроки = ОграничениеКоличестваСеансов.Индекс(СтрокаГруппыДоступа);
			ТекстСообщения = НСтр("ru = 'Не указано количество сеансов.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОграничениеКоличестваСеансов[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].КоличествоСеансов", , Отказ);
		КонецЕсли;
		
		УникальныеГруппыДоступа.Вставить(СтрокаГруппыДоступа.ГруппаДоступа, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
