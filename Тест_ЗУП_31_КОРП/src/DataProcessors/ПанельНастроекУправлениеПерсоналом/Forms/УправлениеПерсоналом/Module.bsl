
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьНастройки();
	
	ОбновитьФормуПоНастройкам();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбщаяКомандаНастройкиЭлектронногоОбучения", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧислоПриИзменении(Элемент)
	
	СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧислоПриИзмененииНаСервере();
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГрейдыПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГрейдыКлиентСервер");
		Модуль.ПанельУправлениеПерсоналомИспользоватьГрейдыПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	ЗаписатьНастройкиНаКлиенте("НастройкиГрейдов");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГрейдыКлиентСервер");
		Модуль.ОбновитьПанельУправлениеПерсоналомПоНастройкеИспользоватьГрейды(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныеГрейдыЧислоПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиГрейдов");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСозданиеГрейдовПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиГрейдов");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГрейдыКлиентСервер");
		Модуль.ОбновитьПанельУправлениеПерсоналомПоНастройкеИспользоватьГрейды(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПодборПерсоналаПриИзменении(Элемент)
	
	НастройкиПодбораПерсоналаПрежняя.ИспользоватьПодборПерсонала = НастройкиПодбораПерсонала.ИспользоватьПодборПерсонала;
	
	УстановитьЗначенияЗависимыхНастроекПодбораПерсонала();
	
	ЗаписатьНастройкиНаКлиенте("НастройкиПодбораПерсонала");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьПодборПерсонала(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеВакансииТребуетСогласованияПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиПодбораПерсонала");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодбораПерсоналаРассчитыватьЭффективностьИсточниковПодбораПерсоналаПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиПодбораПерсонала");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЧатботовПриИзменении(Элемент)
	ИспользоватьЧатботовПриИзмененииНаСервере(КонстантыНабор.ИспользоватьЧатботов);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКлючевыеПоказателиЭффективностиПриИзменении(Элемент)
	
	ИспользоватьКлючевыеПоказателиЭффективностиУстановить(КонстантыНабор.ИспользоватьКлючевыеПоказателиЭффективности);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьКлючевыеПоказателиЭффективностиУстановить(Значение)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.ПанельУправлениеПерсоналомЗаписатьНастройкиКлючевыхПоказателейЭффективности(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЛьготыСотрудниковПриИзменении(Элемент)
	
	НастройкиЛьготСотрудниковПрежняя.ИспользоватьЛьготыСотрудников = НастройкиЛьготСотрудников.ИспользоватьЛьготыСотрудников;
	
	УстановитьЗначенияЗависимыхНастроекЛьгот();
	
	ЗаписатьНастройкиНаКлиенте("НастройкиЛьготСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьЛьготыСотрудников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныеЛьготыСотрудниковПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиЛьготСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбучениеРазвитиеСотрудниковПриИзменении(Элемент)
	
	НастройкиОбученияРазвитияПрежняя.ИспользоватьОбучениеРазвитиеСотрудников = НастройкиОбученияРазвития.ИспользоватьОбучениеРазвитиеСотрудников;
	
	УстановитьЗначенияЗависимыхНастроекОбученияРазвития();
	
	ЗаписатьНастройкиНаКлиенте("НастройкиОбученияРазвития");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьОбучениеРазвитиеСотрудников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУченическиеДоговорыПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиОбученияРазвития");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭлектронноеОбучениеПриИзменении(Элемент)
	
	ИспользоватьЭлектронноеОбучениеУстановить(КонстантыНабор.ИспользоватьЭлектронноеОбучение);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьЭлектронноеОбучениеУстановить(Значение)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеОбучение");
		Модуль.ОбновитьИспользованиеЭлектронногоОбучения(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАнализТекучестиПерсоналаПриИзменении(Элемент)
	
	АнализТекучестиПерсоналаУстановить(КонстантыНабор.ИспользоватьАнализТекучестиПерсонала);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АнализТекучестиПерсоналаУстановить(Значение)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АнализТекучестиПерсонала");
		Модуль.ОбновитьИспользованиеАнализаТекучестиПерсонала(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКадровыйРезервПриИзменении(Элемент)
	
	НастройкиКадровогоРезерваПрежняя.ИспользоватьКадровыйРезерв = НастройкиКадровогоРезерва.ИспользоватьКадровыйРезерв;
	
	УстановитьЗначенияЗависимыхНастроекКадровогоРезерва();
	
	ЗаписатьНастройкиНаКлиенте("НастройкиКадровогоРезерва");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьКадровыйРезерв(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаявкиНаВключениеВКадровыйРезервПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиКадровогоРезерва");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКадровыйРезервПоВидамПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиКадровогоРезерва");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОценкуПерсоналаПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиОценкиПерсонала");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАдаптациюУвольнениеПриИзменении(Элемент)
	
	ИспользоватьАдаптациюУвольнениеУстановить(КонстантыНабор.ИспользоватьАдаптациюУвольнение);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСамообслуживаниеСотрудниковПриИзменении(Элемент)
	
	НастройкиСамообслуживанияСотрудниковПрежняя.ИспользоватьСамообслуживаниеСотрудников = НастройкиСамообслуживанияСотрудников.ИспользоватьСамообслуживаниеСотрудников;
	
	УстановитьЗначенияЗависимыхНастроекСамообслуживанияСотрудников();
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьСамообслуживаниеСотрудников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗапросыСправокСотрудникомПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаявкиНаЕдиновременнуюКомпенсациюПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаявкиНаКомандировкуПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаявкиНаОтпускПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСообщенияОбОтсутствииПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьПродолжительностьСеансаПользователейПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьСамообслуживаниеСотрудников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьКоличествоОдновременныхСеансовПользователейПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьСамообслуживаниеСотрудников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСозданиеПользователейРегламентнымЗаданиемПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьСамообслуживаниеСотрудников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентноеЗаданиеДляЗапретаВходаВПрограммуУволеннымСотрудникамПриИзменении(Элемент)
	
	ЗаписатьНастройкиНаКлиенте("НастройкиСамообслуживанияСотрудников");
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
	ОбновитьФормуПоНастройкеИспользоватьСамообслуживаниеСотрудников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковДоступНеЗапрещается(Команда)
	ОткрытьФорму("Обработка.ПанельНастроекУправлениеПерсоналом.Форма.СписокСотрудниковДоступНеЗапрещается", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУчетныхЗаписейСотрудников(Команда)
	ОткрытьФорму("Обработка.ПанельНастроекУправлениеПерсоналом.Форма.НастройкиУчетныхЗаписейСотрудников", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУправленияПерсоналом(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПолеСортировкиРазделов", 5); 
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("КлючВарианта", "НастройкиПоРазделам");
	
	ОткрытьФорму("Отчет.НастройкиПрограммыЗарплатаКадры.Форма", ПараметрыФормы, ЭтотОбъект, Истина);

КонецПроцедуры

&НаКлиенте
Процедура НастройкиПродолжительностиСеансов(Команда)
	
	ОткрытьФорму("Обработка.ПанельНастроекУправлениеПерсоналом.Форма.ПродолжительностьСеансовПользователей", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКоличестваОдновременныхСеансов(Команда)
	
	ОткрытьФорму("Обработка.ПанельНастроекУправлениеПерсоналом.Форма.ОграничениеКоличестваСеансов", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИнтеграциюРекрутинговыхСайтовПриИзменении(Элемент)
	
	ИспользоватьИнтеграциюРекрутинговыхСайтовПриИзмененииНаСервере();
	
	ОбновитьФормуПоНастройкеИспользоватьИнтеграциюРекрутинговыхСайтов(ЭтотОбъект);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИнтеграциюРекрутинговыхСайтовРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СсылкаНаПерсональныеНастройки" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ОбщаяФорма.ПерсональныеНастройки", , ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭлектронноеИнтервьюПриИзменении(Элемент)
	
	ИспользоватьЭлектронноеИнтервьюУстановить(КонстантыНабор.ИспользоватьЭлектронноеИнтервью);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРабочийКалендарьПриИзменении(Элемент)
	
	ИспользоватьРабочийКалендарьПриИзмененииНаСервере(КонстантыНабор.ИспользоватьРабочийКалендарь);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБронированиеПомещенийПриИзменении(Элемент)
	
	ИспользоватьБронированиеПомещенийПриИзмененииНаСервере(КонстантыНабор.ИспользоватьБронированиеПомещений);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьНастройки()
		
	СтрокаКонстант = 
		"СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц, 
		|ИспользоватьИнтеграциюРекрутинговыхСайтов,
		|ИспользоватьАнализТекучестиПерсонала,
		|ИспользоватьАдаптациюУвольнение,
		|ИспользоватьЭлектронноеОбучение,
		|ИспользоватьЭлектронноеИнтервью,
		|ИспользоватьЧатботов,
		|ИспользоватьРабочийКалендарь,
		|ИспользоватьБронированиеПомещений";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.ПанельУправлениеПерсоналомДополнитьСтрокуКонстант(СтрокаКонстант);
	КонецЕсли;
	
	Настройка = Константы.СоздатьНабор(СтрокаКонстант);
	Настройка.Прочитать();
	ЗначениеВРеквизитФормы(Настройка, "КонстантыНабор");
	
	СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло = ?(Не КонстантыНабор.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц, 1, 0);
	
	ИспользоватьИнтеграциюРекрутинговыхСайтов = КонстантыНабор.ИспользоватьИнтеграциюРекрутинговыхСайтов;

	Настройки = РегистрыСведений.НастройкиПодбораПерсонала.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиПодбораПерсонала");
	
	Настройки = РегистрыСведений.НастройкиОбученияРазвития.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиОбученияРазвития");
	
	Настройки = РегистрыСведений.НастройкиОценкиПерсонала.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиОценкиПерсонала");
	
	Настройки = РегистрыСведений.НастройкиСамообслуживанияСотрудников.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиСамообслуживанияСотрудников");
	
	Настройки = РегистрыСведений.НастройкиКадровогоРезерва.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиКадровогоРезерва");
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда 
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
			Модуль.ПанельУправлениеПерсоналомПрочитатьНастройкиГрейдов(ЭтаФорма);
		КонецЕсли;
		
		Настройки = РегистрыСведений.НастройкиЛьготСотрудников.СоздатьМенеджерЗаписи();
		Настройки.Прочитать();
		ЗначениеВРеквизитФормы(Настройки, "НастройкиЛьготСотрудников");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧислоПриИзмененииНаСервере()
	Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Установить(?(СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло = 1, Ложь, Истина));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияЗависимыхНастроекПодбораПерсонала()
	
	Если Не НастройкиПодбораПерсонала.ИспользоватьПодборПерсонала Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПодбораПерсоналаПрежняя, НастройкиПодбораПерсонала);
		НастройкиПодбораПерсонала.ОткрытиеВакансииТребуетСогласования = Ложь;
		НастройкиПодбораПерсонала.ИспользоватьОценкуЭффективностиИсточниковИнформацииОКандидатах = Ложь;
		
		ИспользоватьИнтеграциюРекрутинговыхСайтовПрежняя = ИспользоватьИнтеграциюРекрутинговыхСайтов;
		ИспользоватьИнтеграциюРекрутинговыхСайтов = Ложь;
	Иначе
		ЗаполнитьЗначенияСвойств(НастройкиПодбораПерсонала, НастройкиПодбораПерсоналаПрежняя);
		ИспользоватьИнтеграциюРекрутинговыхСайтов = ИспользоватьИнтеграциюРекрутинговыхСайтовПрежняя;
		КонстантыНабор.ИспользоватьРабочийКалендарь = Истина;
	КонецЕсли;
	
	ИспользоватьИнтеграциюРекрутинговыхСайтовПриИзменении(Элементы.ИспользоватьИнтеграциюРекрутинговыхСайтов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияЗависимыхНастроекЛьгот()
	
	Если Не НастройкиЛьготСотрудников.ИспользоватьЛьготыСотрудников Тогда
		
		ЗаполнитьЗначенияСвойств(НастройкиЛьготСотрудниковПрежняя, НастройкиЛьготСотрудников);
		НастройкиЛьготСотрудников.ИспользоватьИндивидуальныеЛьготыСотрудников = Ложь;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(НастройкиЛьготСотрудников, НастройкиЛьготСотрудниковПрежняя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияЗависимыхНастроекОбученияРазвития()
	
	Если Не НастройкиОбученияРазвития.ИспользоватьОбучениеРазвитиеСотрудников Тогда
		
		ЗаполнитьЗначенияСвойств(НастройкиОбученияРазвитияПрежняя, НастройкиОбученияРазвития);
		
		НастройкиОбученияРазвития.ИспользоватьУченическиеДоговоры = Ложь;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(НастройкиОбученияРазвития, НастройкиОбученияРазвитияПрежняя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияЗависимыхНастроекКадровогоРезерва()
	
	Если Не НастройкиКадровогоРезерва.ИспользоватьКадровыйРезерв Тогда
		
		ЗаполнитьЗначенияСвойств(НастройкиКадровогоРезерваПрежняя, НастройкиКадровогоРезерва);
		
		НастройкиКадровогоРезерва.ИспользоватьЗаявкиНаВключениеВКадровыйРезерв = Ложь;
		НастройкиКадровогоРезерва.ИспользоватьКадровыйРезервПоВидам = Ложь;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(НастройкиКадровогоРезерва, НастройкиКадровогоРезерваПрежняя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияЗависимыхНастроекСамообслуживанияСотрудников()
	
	Если Не НастройкиСамообслуживанияСотрудников.ИспользоватьСамообслуживаниеСотрудников Тогда
		
		ЗаполнитьЗначенияСвойств(НастройкиСамообслуживанияСотрудниковПрежняя, НастройкиСамообслуживанияСотрудников);
		
		НастройкиСамообслуживанияСотрудников.ИспользоватьЗаявкиНаКомандировку = Ложь;
		НастройкиСамообслуживанияСотрудников.ИспользоватьЗаявкиНаОтпуск = Ложь;
		НастройкиСамообслуживанияСотрудников.ИспользоватьРегламентноеЗаданиеДляЗапретаВходаВПрограммуУволеннымСотрудникам = Ложь;
		НастройкиСамообслуживанияСотрудников.ИспользоватьСозданиеПользователейРегламентнымЗаданием = Ложь;
		НастройкиСамообслуживанияСотрудников.ИспользоватьСообщенияОбОтсутствии = Ложь;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(НастройкиСамообслуживанияСотрудников, НастройкиСамообслуживанияСотрудниковПрежняя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьПодборПерсонала(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ОткрытиеВакансииТребуетСогласования", "Доступность", Форма.НастройкиПодбораПерсонала.ИспользоватьПодборПерсонала);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьИнтеграциюРекрутинговыхСайтов", "Доступность", Форма.НастройкиПодбораПерсонала.ИспользоватьПодборПерсонала);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьОценкуЭффективностиИсточниковИнформацииОКандидатах", "Доступность", Форма.НастройкиПодбораПерсонала.ИспользоватьПодборПерсонала);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьЧатботов", "Доступность", Форма.НастройкиПодбораПерсонала.ИспользоватьПодборПерсонала);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьИнтеграциюРекрутинговыхСайтов(Форма)
		
	Если Форма.ИспользоватьИнтеграциюРекрутинговыхСайтов Тогда
		
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(НСтр("ru = 'Выгрузка/загрузка на рекрутинговые сайты вакансий, кандидатов, их откликов и резюме'"));
		ЧастиСтроки.Добавить(".");
		ЧастиСтроки.Добавить(Символы.ПС);
		ЧастиСтроки.Добавить(НСтр("ru = 'Настроить использование отдельных рекрутинговых сайтов пользователи могут в своих'"));
		ЧастиСтроки.Добавить(" ");	
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока("персональных настройках", , , , "СсылкаНаПерсональныеНастройки"));
				
	Иначе
		
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(НСтр("ru = 'Выгрузка/загрузка на рекрутинговые сайты вакансий, кандидатов, их откликов и резюме'"));
		ЧастиСтроки.Добавить(".");
		ЧастиСтроки.Добавить(Символы.ПС);
		ЧастиСтроки.Добавить(НСтр("ru = 'Настроить использование отдельных рекрутинговых сайтов пользователи могут в своих персональных настройках'"));
		
	КонецЕсли;
	
	Форма.Элементы.ИспользоватьИнтеграциюРекрутинговыхСайтовРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьЛьготыСотрудников(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьИндивидуальныеЛьготыСотрудников", "Доступность", Форма.НастройкиЛьготСотрудников.ИспользоватьЛьготыСотрудников);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьОбучениеРазвитиеСотрудников(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьУченическиеДоговоры", "Доступность",
		Форма.НастройкиОбученияРазвития.ИспользоватьОбучениеРазвитиеСотрудников);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьКадровыйРезерв(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьЗаявкиНаВключениеВКадровыйРезерв", "Доступность",
		Форма.НастройкиКадровогоРезерва.ИспользоватьКадровыйРезерв);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "ИспользоватьКадровыйРезервПоВидам", "Доступность",
		Форма.НастройкиКадровогоРезерва.ИспользоватьКадровыйРезерв);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкеИспользоватьСамообслуживаниеСотрудников(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "СамообслуживаниеЛеваяГруппа", "Доступность",
		Форма.НастройкиСамообслуживанияСотрудников.ИспользоватьСамообслуживаниеСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "СамообслуживаниеПраваяГруппа", "Доступность",
		Форма.НастройкиСамообслуживанияСотрудников.ИспользоватьСамообслуживаниеСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "НастройкиПродолжительностиСеансов", "Доступность",
		Форма.НастройкиСамообслуживанияСотрудников.ИспользоватьСамообслуживаниеСотрудников
			И Форма.НастройкиСамообслуживанияСотрудников.ОграничиватьПродолжительностьСеансаПользователей);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "НастройкиКоличестваОдновременныхСеансов", "Доступность",
		Форма.НастройкиСамообслуживанияСотрудников.ИспользоватьСамообслуживаниеСотрудников
			И Форма.НастройкиСамообслуживанияСотрудников.ОграничиватьКоличествоОдновременныхСеансовПользователей);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "НастройкиУчетныхЗаписейСотрудников", "Доступность",
		Форма.НастройкиСамообслуживанияСотрудников.ИспользоватьСамообслуживаниеСотрудников
			И Форма.НастройкиСамообслуживанияСотрудников.ИспользоватьСозданиеПользователейРегламентнымЗаданием);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "СписокСотрудниковДоступНеЗапрещается", "Доступность",
		Форма.НастройкиСамообслуживанияСотрудников.ИспользоватьСамообслуживаниеСотрудников
			И Форма.НастройкиСамообслуживанияСотрудников.ИспользоватьРегламентноеЗаданиеДляЗапретаВходаВПрограммуУволеннымСотрудникам);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоНастройкам()
	
	ОбновитьФормуПоНастройкеИспользоватьПодборПерсонала(ЭтотОбъект);
	ОбновитьФормуПоНастройкеИспользоватьИнтеграциюРекрутинговыхСайтов(ЭтотОбъект);
	ОбновитьФормуПоНастройкеИспользоватьЛьготыСотрудников(ЭтотОбъект);
	ОбновитьФормуПоНастройкеИспользоватьОбучениеРазвитиеСотрудников(ЭтотОбъект);
	ОбновитьФормуПоНастройкеИспользоватьКадровыйРезерв(ЭтотОбъект);
	ОбновитьФормуПоНастройкеИспользоватьСамообслуживаниеСотрудников(ЭтотОбъект);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрейдыКлиентСервер");
		Модуль.ОбновитьПанельУправлениеПерсоналомПоНастройкеИспользоватьГрейды(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияОбновленияИнтерфейса() Экспорт
	
	ТребуетсяОбновлениеИнтерфейса = Истина;
	
	#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновленияИнтерфейса", 1, Истина);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработчикОжиданияОбновленияИнтерфейса()
	
	ОбновитьИнтерфейс();
	
	ТребуетсяОбновлениеИнтерфейса = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиНаКлиенте(ИмяНастройки)
	
	ЗаписатьНастройкиНаСервере(ИмяНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиНаСервере(ИмяНастройки)
	
	ПараметрыНастроек = Обработки.ПанельНастроекУправлениеПерсоналом.ЗаполнитьСтруктуруПараметровНастроек(ИмяНастройки);
	
	ПараметрыНастроек.НастройкиПодбораПерсонала = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиПодбораПерсонала, Метаданные.РегистрыСведений.НастройкиПодбораПерсонала);
	ПараметрыНастроек.НастройкиЛьготСотрудников = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиЛьготСотрудников, Метаданные.РегистрыСведений.НастройкиЛьготСотрудников);
	ПараметрыНастроек.НастройкиОбученияРазвития = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиОбученияРазвития, Метаданные.РегистрыСведений.НастройкиОбученияРазвития);
	ПараметрыНастроек.НастройкиКадровогоРезерва = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиКадровогоРезерва, Метаданные.РегистрыСведений.НастройкиКадровогоРезерва);
	ПараметрыНастроек.НастройкиОценкиПерсонала = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиОценкиПерсонала, Метаданные.РегистрыСведений.НастройкиОценкиПерсонала);
	ПараметрыНастроек.НастройкиСамообслуживанияСотрудников = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиСамообслуживанияСотрудников, Метаданные.РегистрыСведений.НастройкиСамообслуживанияСотрудников);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.ПанельУправлениеПерсоналомЗаполнитьНастройкиГрейдов(ЭтаФорма, ПараметрыНастроек);
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Обработки.ПанельНастроекУправлениеПерсоналом.ЗаписатьНастройки(ПараметрыНастроек, АдресХранилища);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьИнтеграциюРекрутинговыхСайтовПриИзмененииНаСервере()
	
	Константы.ИспользоватьИнтеграциюРекрутинговыхСайтов.Установить(ИспользоватьИнтеграциюРекрутинговыхСайтов);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияРекрутинговыхСайтов");
		Модуль.УстановитьФОИспользуетсяВзаимодействиеСРекрутинговымиСайтами();
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьЭлектронноеИнтервьюУстановить(ИспользоватьЭлектронноеИнтервьюУстановить)
	Константы.ИспользоватьЭлектронноеИнтервью.Установить(ИспользоватьЭлектронноеИнтервьюУстановить);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьЧатботовПриИзмененииНаСервере(Использование)
	Константы.ИспользоватьЧатботов.Установить(Использование);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьАдаптациюУвольнениеУстановить(Использование)
	Константы.ИспользоватьАдаптациюУвольнение.Установить(Использование);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьРабочийКалендарьПриИзмененииНаСервере(Использование)
	Константы.ИспользоватьРабочийКалендарь.Установить(Использование);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьБронированиеПомещенийПриИзмененииНаСервере(Использование)
	Константы.ИспользоватьБронированиеПомещений.Установить(Использование);
КонецПроцедуры

#КонецОбласти
