#Область ОписаниеПеременных

&НаКлиенте
Перем МассивТикетовСбербанк; // хранит массив тикетов отправленных запросов

&НаКлиенте
Перем ТикетСбербанк; // тикет на запрос статусов запросов выписки

&НаКлиенте
Перем ОповещениеПослеПолученияОтветаПоТикетуСбербанк; // хранит оповещение, которое должно быть вызвано после получения ответа по тикету

&НаКлиенте
Перем СертификатПодписиСбербанк; // сертификат, с использованием которого подписываются запросы новых документов

&НаКлиенте
Перем ИдентификаторСертификатаСбербанк; // идентификатор сертификата подписи

&НаКлиенте
Перем ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк; // параметры подключаемой процедуры при ожидании конечного статуса запросов выписки

&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // Параметры обработчика ожидания для длительных операций

&НаКлиенте
Перем ПараметрыОжиданияПолученияВыписки; // Параметры обработчика ожидания при получении выписки

&НаКлиенте
Перем ИтогКолОтправленных; // Количество отправленных документов

&НаКлиенте
Перем ИтогКолПолученных; // Количество полученных документов

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Параметры.НастройкаОбмена;
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена,
		"Организация, Банк, ПрограммаБанка, ИдентификаторОрганизации, ИмяВнешнегоМодуля, ИспользуетсяКриптография");
	
	ПрограммаБанка = РеквизитыНастройкиОбмена.ПрограммаБанка;
	БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыНастройкиОбмена.Банк, "Код");
	ИмяВнешнегоМодуля = РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля;
	ИдентификаторОрганизации = РеквизитыНастройкиОбмена.ИдентификаторОрганизации;
	ИсходныйТикетСбербанк = Параметры.ИсходныйТикетСбербанк;
	ИспользуетсяКриптография = РеквизитыНастройкиОбмена.ИспользуетсяКриптография;
	
	Если Параметры.ВидОперации = "ПолучениеВыписки" Тогда
		МассивБанковскихСчетов = Новый Массив;
		Если ЗначениеЗаполнено(Параметры.НомерСчета) Тогда
			МассивБанковскихСчетов.Добавить(Параметры.НомерСчета);
		Иначе
			ОбменСБанкамиПереопределяемый.ПолучитьНомераБанковскихСчетов(
				РеквизитыНастройкиОбмена.Организация, РеквизитыНастройкиОбмена.Банк, МассивБанковскихСчетов);
		КонецЕсли;
		
		МассивБанковскихСчетовСсылка = ПоместитьВоВременноеХранилище(МассивБанковскихСчетов, УникальныйИдентификатор);
		Заголовок = НСтр("ru = 'Получение выписки'");
		
		// Если пришли запросы выписок Сбербанка, то необходимо получить тексты запросов на сервере.
		Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн И Параметры.ГотовыеВыписки.Количество() = 0 Тогда
			Если РеквизитыНастройкиОбмена.ИспользуетсяКриптография Тогда
				ДанныеЗапросовВыписокСбербанк = ДанныеЗапросовВыписокСбербанк(Параметры.МассивСообщенийОбмена);
				ТекстыЗапросовВыписокСбербанк = ПоместитьВоВременноеХранилище(ДанныеЗапросовВыписокСбербанк, УникальныйИдентификатор);
			ИначеЕсли Параметры.МассивТикетов.Количество() Тогда
				МассивТикетовСсылкаСбербанк = ПоместитьВоВременноеХранилище(Параметры.МассивТикетов, УникальныйИдентификатор);
				ЗапросыВыписокОтправленыСбербанк = Истина;
			КонецЕсли;
			ДатаНачалаОперацииСбербанк = ТекущаяДатаСеанса();
		КонецЕсли;
	ИначеЕсли Параметры.ВидОперации = "ВыполнениеСинхронизации" Тогда
		Заголовок = НСтр("ru = 'Выполнение синхронизации'");
	ИначеЕсли Параметры.ВидОперации = "ПолучениеСостоянияДокумента" Тогда
		Заголовок = НСтр("ru = 'Получение состояния электронного документа'");
	ИначеЕсли Параметры.ВидОперации = "Тестирование" Тогда
		Заголовок = НСтр("ru = 'Тестирование обмена данными'")
	ИначеЕсли Параметры.ВидОперации = "ИнициализацияПодтвержденияПлатежа" Тогда
		Заголовок = НСтр("ru = 'Получение SMS сообщения'")
	ИначеЕсли Параметры.ВидОперации = "ПолучениеРезультатаПодтверждения" Тогда
		Заголовок = НСтр("ru = 'Проверка SMS пароля в банке'")
	КонецЕсли;
	
	СообщениеОбмена = Параметры.СообщениеОбмена;
	
	Логин = Параметры.Логин;
	Пароль = Параметры.Пароль;
	ИдентификаторСессии = Параметры.ИдентификаторСессии;
	ДатаОкончания = Параметры.ДатаОкончания;
	ДатаНачала = Параметры.ДатаНачала;
	ГотовыеВыпискиСсылка =  ПоместитьВоВременноеХранилище(Параметры.ГотовыеВыписки, УникальныйИдентификатор);
	ДанныеСертификатаСсылка = ПоместитьВоВременноеХранилище(Параметры.ДанныеСертификата, УникальныйИдентификатор);
	ВидОперации = Параметры.ВидОперации;
	МассивСообщенийОбменаСсылка = ПоместитьВоВременноеХранилище(Параметры.МассивСообщенийОбмена, УникальныйИдентификатор);
	
	ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(НастройкаОбмена);
		
	ИспользоватьЖурналирование = ПараметрыЖурналирования.ИспользоватьЖурналирование;
	КаталогДляЖурналирования = ПараметрыЖурналирования.КаталогДляЖурналирования;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Перем ЗапросОтправлен, ВыпискаБанка;
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		Если ВидОперации = "ПолучениеВыписки" Тогда
			ПодключитьОбработчикОжидания("НачатьОтправкуЗапросаВыпискиВБанк", 0.1, Истина);
		ИначеЕсли ВидОперации = "ПолучениеСостоянияДокумента" Тогда
			ПодключитьОбработчикОжидания("НачатьОтправкуЗапросаСтатусаЭД", 0.1, Истина);
		Иначе
			ПодключитьОбработчикОжидания("НачатьОтправкуЗапросаЗонда", 0.1, Истина);
		КонецЕсли
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		Если ВидОперации = "ПолучениеСостоянияДокумента" Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("ПолучитьИзвещениеОСостоянииДокументаСбербанк", 0.1, Истина);
		ИначеЕсли ВидОперации = "ВыполнениеСинхронизации" Тогда
			ПодключитьОбработчикОжидания("ПолучитьНовыеДокументыСбербанк", 0.1, Истина);
		ИначеЕсли ВидОперации = "ИнициализацияПодтвержденияПлатежа" Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьИдентификаторКриптопрофиляСбербанк", 0.1, Истина);
		ИначеЕсли ВидОперации = "ПолучениеРезультатаПодтверждения" Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьРезультатПроверкиSMSСбербанк", 0.1, Истина);
		Иначе // получение выписки
			ГотовыеВыписки = ПолучитьИзВременногоХранилища(ГотовыеВыпискиСсылка);
			Если ГотовыеВыписки.Количество() Тогда
				ОповеститьОВыборе(ГотовыеВыписки);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			Если ЗапросыВыписокОтправленыСбербанк Тогда // возможно только при обмене через логин-пароль
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПолучитьВнешниеИдентификаторыЗапросовВыпискиБазоваяАутентификацияСбербанк", 0.1, Истина);
			Иначе
				ПодключитьОбработчикОжидания("НачатьОтправкуЗапросовВыписокСбербанк", 0.1, Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
		ОбменСБанкамиСлужебныйКлиент.ПроцессПрерван(НастройкаОбмена);
		Если ВидОперации = "ПолучениеСостоянияДокумента" Тогда
			ПолучитьСостояниеЭДЧерезВК();
		Иначе
			ПолучитьВыпискуЧерезВК();
		КонецЕсли;
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ПолучитьВыпискуЧерезДополнительнуюОбработку();
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн") Тогда
		ПодключитьОбработчикОжидания("НачатьОтправкуЗапросаВыпискиВБанк", 0.1, Истина);
	КонецЕсли;
	
	Если ЗакрытьФорму Тогда
		Отказ = Истина;
	Иначе
		ФормаОткрыта = Истина;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПроизошлаОшибка Тогда
		Отказ = Истина;
		ПроизошлаОшибка = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.Ошибка;
		Элементы.ФормаОтмена.Заголовок = "Закрыть";
		
		Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
			ОтключитьОбработчикОжидания("Подключаемый_ПолучитьНовыеДокументыСбербанк");
		КонецЕсли;
	Иначе
		ФормаОткрыта = Ложь;
	КонецЕсли;
	
	ОбменСБанкамиСлужебныйКлиент.ПрерватьПроцессыНаКлиенте(НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере(ИдентификаторЗадания);
	КонецЕсли;
	
	ФормаОткрыта = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НачатьОтправкуЗапросаВыпискиВБанк()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыЗапроса.Вставить("Логин", Логин);
	ПараметрыЗапроса.Вставить("Пароль", Пароль);
	
	ОперацияВыполнена = ОтправитьЗапросВыпискиНаСервере(
		МассивСообщенийОбменаСсылка, ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания);
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатЗапросаВыписки();
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
		
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗаданияЗапросаВыписки", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуЗапросаСтатусаЭД()
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыЗапроса.Вставить("СообщениеОбмена", СообщениеОбмена);
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	ОперацияВыполнена = ОтправитьЗапросСостоянияЭДНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, ПроизошлаОшибка);
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатЗапросаСостоянияЭД();
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗаданияЗапросаСостоянияЭД", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуЗапросаЗонда()
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыЗапроса.Вставить("СообщениеОбмена", СообщениеОбмена);
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	Результат = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияОтправкиЗапросЗондаНаСервере(
		ПараметрыЗапроса, УникальныйИдентификатор);
		
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросЗонда", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеОтправкиЗапросЗонда(Результат, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтправитьЗапросВыпискиНаСервере(Знач МассивЗапросовСсылка, Знач ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПараметрыЗапроса.Вставить("МассивСообщенийОбмена", ПолучитьИзВременногоХранилища(МассивЗапросовСсылка));
	
	ЗаданиеВыполнено = Ложь;
		
	НаименованиеЗадания = НСтр("ru = 'Отправка запроса выписки в банк'");
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПараметрыЗапроса);
	ПараметрыВыполнения.Добавить(АдресХранилища);
		
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросВыпискиВБанк", ПараметрыВыполнения, , НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;

	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
	КонецЕсли;
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьЗапросСостоянияЭДНаСервере(Знач ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, ЕстьОшибка)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ЗаданиеВыполнено = Ложь;
		
	НаименованиеЗадания = НСтр("ru = 'Отправка запроса состояния ЭД в банк'");
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПараметрыЗапроса);
	ПараметрыВыполнения.Добавить(АдресХранилища);
		
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросСостоянияЭДВБанк", ПараметрыВыполнения, , НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;

	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
	КонецЕсли;
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере(Знач ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗапросаСостоянияЭД()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатЗапросаСостоянияЭД();
			Возврат;
		КонецЕсли;
	Исключение
		ЗакрытьФормуНаКлиенте();
		ВызватьИсключение;
	КонецПопытки;

	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗаданияЗапросаСостоянияЭД", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗапросаВыписки()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатЗапросаВыписки();
			Возврат;
		КонецЕсли;
	Исключение
		ЗакрытьФормуНаКлиенте();
		ВызватьИсключение;
	КонецПопытки;

	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗаданияЗапросаВыписки", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаВыписки()
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн") Тогда
		ОбработатьРезультатПолученияВыпискиСинхронныйОбмен();
		Возврат;
	КонецЕсли;

	МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(ИдентификаторЗадания);
	
	Если МассивСообщений.Количество() Тогда
		
		Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
		ЗакрытьФормуНаКлиенте(Истина);
		Оповестить("ОбновитьСостояниеОбменСБанками");
		Возврат;
	КонецЕсли;

	ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
	
	ТекстОповещения = НСтр("ru = 'Отправлено документов: (1)'");
	
	Оповестить("ОбновитьСостояниеОбменСБанками");
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	Если НЕ ПроизошлаОшибка Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОжиданияПолученияВыписки);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПолучитьВыпискуАсинхронныйОбмен",ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПолученияВыпискиСинхронныйОбмен()
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если СтруктураВозврата.Свойство("ДанныеЭП") И СтруктураВозврата.ДанныеЭП.Количество() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияПолученныхПодписейВыпискиСинхронныйОбмен", ЭтотОбъект);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеЭП", СтруктураВозврата.ДанныеЭП);
		ДополнительныеПараметры.Вставить("ЕстьОшибка", Ложь);
		ДополнительныеПараметры.Вставить("ОповещениеПослеСохраненияПодписей", Оповещение);
		
		СохранитьОчереднуюПодпись(ДополнительныеПараметры);
		
		Возврат;
		
	КонецЕсли;
	
	ПослеСохраненияПолученныхПодписейВыпискиСинхронныйОбмен(Ложь, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияПолученныхПодписейВыпискиСинхронныйОбмен(ЕстьОшибка, ДополнительныеПараметры) Экспорт
	
	МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(ИдентификаторЗадания);
	Если МассивСообщений.Количество() Тогда
		Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ВыпискаБанка = СтруктураВозврата.ВыпискаБанка;
	
	Если ВыпискаБанка = Неопределено Тогда // Произошла ошибка
		ПроизошлаОшибка = Истина;
		ОповеститьОВыборе(Неопределено);
	Иначе
		ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
		ТекстОповещения = НСтр("ru = 'Получено документов: (1).'");
		Оповестить("ОбновитьСостояниеОбменСБанками");
		ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
		ОповеститьОВыборе(ВыпискаБанка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьВыпискуАсинхронныйОбмен()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗадания = ЗапускЗаданияПолученияВыпискиАсинхронныйОбмен(ПараметрыЗапроса, УникальныйИдентификатор);
	
	Если РезультатЗадания.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

		Оповещение = Новый ОписаниеОповещения("ПослеПолученияВыпискиАсинхронныйОбмен", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗадания, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеПолученияВыпискиАсинхронныйОбмен(РезультатЗадания)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияВыпискиАсинхронныйОбмен(РезультатЗадания, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатЗадания = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;
	
	Если РезультатЗадания.Статус = "Ошибка" Тогда
		ВидОперации = НСтр("ru = 'Получение выписки банка.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, РезультатЗадания.ПодробноеПредставлениеОшибки, РезультатЗадания.КраткоеПредставлениеОшибки, "ОбменСБанками");
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	Иначе // выполнено
		Результат = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		Для Каждого Сообщение Из РезультатЗадания.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
		Если Результат = Неопределено Тогда
			ЗакрытьФормуНаКлиенте();
		Иначе
			ОбменСБанкамиСлужебныйКлиент.ВызватьОповещения(Результат);
			Оповестить("ОбновитьСостояниеОбменСБанками", Результат.ПараметрОповещения);
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Результат", Результат);
			
			Если Результат.Свойство("ДанныеЭП") И Результат.ДанныеЭП.Количество() Тогда
				ДополнительныеПараметры.Вставить("ДанныеЭП", Результат.ДанныеЭП);
				ДополнительныеПараметры.Вставить("ЕстьОшибка", Ложь);
				Оповещение = Новый ОписаниеОповещения("ПослеСохраненияПолученныхПодписейВыписки", ЭтотОбъект, ДополнительныеПараметры);
				ДополнительныеПараметры.Вставить("ОповещениеПослеСохраненияПодписей", Оповещение);
				СохранитьОчереднуюПодпись(ДополнительныеПараметры);
			
			Иначе
				ПослеСохраненияПолученныхПодписейВыписки(Ложь, ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//
	//
	//СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаСостоянияЭД()

	МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(ИдентификаторЗадания);

	Если МассивСообщений.Количество() Тогда
		
		Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
		ЗакрытьФормуНаКлиенте(Истина);
		Оповестить("ОбновитьСостояниеОбменСБанками");
		Возврат;
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеОбменСБанками");
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);

	ПараметрыЗапроса.Вставить("СообщениеОбмена", СтруктураВозврата.СообщениеОбменаЗапросСостояния);
	
	Результат = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияПолученияИзвещенияОСостоянииЭДНаСервере(
		ПараметрыЗапроса, УникальныйИдентификатор);
		
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПолучитьИзвещениеОСостоянииЭД", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПолучитьИзвещениеОСостоянииЭД(Результат, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросЗонда(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки, , , , ПроизошлаОшибка);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	КолОтправленных = 0;
	КолПолученных = 0;
	
	Оповестить("ОбновитьСостояниеОбменСБанками");
	
	Результат = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияПолученияИзвещенияОСостоянииЭДНаСервере(
		ПараметрыЗапроса, УникальныйИдентификатор);
		
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПолучитьИзвещениеОСостоянииЭД", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПолучитьИзвещениеОСостоянииЭД(Результат, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияПолученияВыпискиАсинхронныйОбмен(Знач ПараметрыЗапроса, Знач УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение выписки из банка'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьНовыеДокументыИзБанка", ПараметрыЗапроса, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура СохранитьОчереднуюПодпись(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ДанныеЭП.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеСохраненияПодписей, ДополнительныеПараметры.ЕстьОшибка);
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДополнительныеПараметры.ДанныеЭП Цикл
		Прервать;
	КонецЦикла;
	
	ДополнительныеПараметры.ДанныеЭП.Удалить(КлючЗначение.Ключ);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияПодписейСообщенияОбмена", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ДобавитьПодписиИОпределитьСтатусы(Оповещение, КлючЗначение.Ключ, КлючЗначение.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияПодписейСообщенияОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ДополнительныеПараметры.Вставить("ЕстьОшибка", Истина);
	КонецЕсли;
	
	СохранитьОчереднуюПодпись(ДополнительныеПараметры)
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияПолученныхПодписейВыписки(ЕстьОшибка, ДополнительныеПараметры) Экспорт
	
	Если ЕстьОшибка Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ДополнительныеПараметры.Результат;
	
	Если СтруктураВозврата.ТребуетсяПовторнаяАутентификация Тогда
		ПроизошлаОшибка = Ложь;
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("НастройкаОбмена", НастройкаОбмена);
		ПараметрыОбработки.Вставить("ПроцедураОбработчик", "ПродолжитьПолучениеВыпискиПослеПолученияМаркераБанка");
		ПараметрыАвторизации = Новый Структура;
		Если ОбменСБанкамиСлужебныйКлиент.ПолученыДанныеАвторизации(НастройкаОбмена, ПараметрыАвторизации) Тогда
			ОбработатьПолучениеДанныхАутентификации(ПараметрыАвторизации, ПараметрыОбработки);
		Иначе
			Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеДанныхАутентификации", ЭтотОбъект, ПараметрыОбработки);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеАутентификации(Оповещение, НастройкаОбмена);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ВыпискиБанка = ВыпискиПоЗапросам(МассивСообщенийОбменаСсылка);
	
	Если ВыпискиБанка = Неопределено Тогда // Произошла ошибка
		ПроизошлаОшибка = Истина;
		ОповеститьОВыборе(Неопределено);
	ИначеЕсли ВыпискиБанка.Количество() Тогда
		ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
		ТекстОповещения = НСтр("ru = 'Получено документов: (%1).'");
		ТекстОповещения = СтрШаблон(ТекстОповещения, ВыпискиБанка.Количество());
		Оповестить("ОбновитьСостояниеОбменСБанками");
		ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
		ОповеститьОВыборе(ВыпискиБанка);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОжиданияПолученияВыписки);
		
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПолучитьВыпискуАсинхронныйОбмен", ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыпискиПоЗапросам(Знач МассивЗапросовСсылка)
	
	МассивЗапросов = ПолучитьИзВременногоХранилища(МассивЗапросовСсылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.СообщениеРодитель В(&МассивЗапросов)
	|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ВыпискаБанка)";
	Запрос.УстановитьПараметр("МассивЗапросов", МассивЗапросов);

	МассивВозврата = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() >= МассивЗапросов.Количество() Тогда
		Пока Выборка.Следующий() Цикл
			МассивВозврата.Добавить(Выборка.Ссылка);
		КонецЦикла;
	Иначе
		ЗапросОшибки = Новый Запрос;
		ЗапросОшибки.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СообщениеОбменСБанками.Ссылка,
			|	СообщениеОбменСБанками.ПричинаОтклонения
			|ИЗ
			|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
			|ГДЕ
			|	СообщениеОбменСБанками.Ссылка В(&МассивЗапросов)
			|	И СообщениеОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.ОтклоненБанком)";
		ЗапросОшибки.УстановитьПараметр("МассивЗапросов", МассивЗапросов);
		Результат = ЗапросОшибки.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();

			ТекстСообщения = НСтр("ru = 'Запрос отклонен.
										|Причина отклонения: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ПричинаОтклонения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьИзвещениеОСостоянииЭД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки, , , , ПроизошлаОшибка);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	АдресХранилища = Результат.АдресРезультата;
	СтруктураВозврата = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ОбменСБанкамиСлужебныйКлиент.ВызватьОповещения(СтруктураВозврата);

	Если СтруктураВозврата.Свойство("ДанныеЭП") И СтруктураВозврата.ДанныеЭП.Количество() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияПолученныхПодписейИзвещения", ЭтотОбъект);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеЭП", СтруктураВозврата.ДанныеЭП);
		ДополнительныеПараметры.Вставить("ЕстьОшибка", Ложь);
		ДополнительныеПараметры.Вставить("ОповещениеПослеСохраненияПодписей", Оповещение);
		
		СохранитьОчереднуюПодпись(ДополнительныеПараметры);
		
		Возврат;

	КонецЕсли;
	
	ПослеСохраненияПолученныхПодписейИзвещения(Ложь, Неопределено)
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияПолученныхПодписейИзвещения(ЕстьОшибка, ДополнительныеПараметры) Экспорт
	
	Если ЕстьОшибка Тогда
		ПроизошлаОшибка = Истина;
		Если НЕ ФормаОткрыта Тогда
			ПриЗакрытииНаСервере(ИдентификаторЗадания);
			ЗакрытьФорму = Истина;
		Иначе
			Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);

	ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
	ТекстОповещения = НСтр("ru = 'Отправлено документов: (1).
								|Получено документов: (%1).'");
	ТекстОповещения = СтрШаблон(ТекстОповещения, СтруктураВозврата.КолПолученныхПакетов);
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
		
	МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(ИдентификаторЗадания);

	Если МассивСообщений.Количество() Тогда
		Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
		ПроизошлаОшибка = Истина;
		Если НЕ ФормаОткрыта Тогда
			ПриЗакрытииНаСервере(ИдентификаторЗадания);
			ЗакрытьФорму = Истина;
		Иначе
			Закрыть();
		КонецЕсли;
		Оповестить("ОбновитьСостояниеОбменСБанками");
		Возврат;
	КонецЕсли;
	
	Если СтруктураВозврата.ТребуетсяПовторнаяАутентификация Тогда
		ПроизошлаОшибка = Ложь;
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("НастройкаОбмена", НастройкаОбмена);
		ПараметрыОбработки.Вставить("ПроцедураОбработчик", "ПродолжитьПолучениеИзвещенияПослеПолученияМаркераБанка");
		ПараметрыАвторизации = Новый Структура;
		Если ОбменСБанкамиСлужебныйКлиент.ПолученыДанныеАвторизации(НастройкаОбмена, ПараметрыАвторизации) Тогда
			ОбработатьПолучениеДанныхАутентификации(ПараметрыАвторизации, ПараметрыОбработки);
		Иначе
			Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеДанныхАутентификации", ЭтотОбъект, ПараметрыОбработки);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеАутентификации(Оповещение, НастройкаОбмена);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Оповестить("ОбновитьСостояниеОбменСБанками");
	
	ПараметрыВозврата = Новый Структура("Успех", Истина);
		
	Если НЕ ФормаОткрыта Тогда
		Если НЕ ОписаниеОповещенияОЗакрытии = Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, ПараметрыВозврата);
		КонецЕсли;
		ЗакрытьФорму = Истина;
	Иначе
		Закрыть(ПараметрыВозврата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВыпискуЧерезДополнительнуюОбработку()
	
	ВнешнийПодключаемыйМодуль = ОбменСБанкамиСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
		ИмяВнешнегоМодуля);
	ДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСертификатаСсылка);
	
	ПараметрыВыписки = Новый Структура;
	ДатаНачалаСтрокой = Формат(ДатаНачала,    "ДЛФ=D");
	ДатаОкончанияСтрокой = Формат(ДатаОкончания, "ДЛФ=D");
	НазваниеЭД = НСтр("ru = 'Выписка банка за период с %1 по %2'");
	НазваниеЭД = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НазваниеЭД, ДатаНачалаСтрокой, ДатаОкончанияСтрокой);
	КолПолученных = 0;
	
	МассивНомеровБанковскихСчетов = ПолучитьИзВременногоХранилища(МассивБанковскихСчетовСсылка);
	СообщенияОбменаДляПроверки = Новый Массив;
	
	Для Каждого НомерСчета Из МассивНомеровБанковскихСчетов Цикл
		ПараметрыВыписки.Вставить("НомерСчета",        НомерСчета);
		ПараметрыВыписки.Вставить("БИК",               БИК);
		ПараметрыВыписки.Вставить("ДатаНачала"   ,     Формат(ДатаНачала,    "ДЛФ=D"));
		ПараметрыВыписки.Вставить("ДатаОкончания",     Формат(ДатаОкончания, "ДЛФ=D"));
		ПараметрыВыписки.Вставить("ВерсияСхемыДанных", ОбменСБанкамиКлиентСервер.ВерсияФорматаСинхронногоОбмена());
		ДанныеВыписки = ОбменСБанкамиСлужебныйКлиент.ОтправитьЗапросЧерезДополнительнуюОбработку(
			ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата, 2, ПараметрыВыписки);
		Если ДанныеВыписки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Подпись Из ДанныеВыписки.Подписи Цикл
			
			ДанныеСертификатаПодписи = ОбменСБанкамиСлужебныйКлиент.ДанныеСертификатаЧерезДополнительнуюОбработку(
				ВнешнийПодключаемыйМодуль, Подпись.Сертификат);
			Если ДанныеСертификатаПодписи = Неопределено Тогда
				ПроизошлаОшибка = Истина;
				Возврат;
			КонецЕсли;
			Подпись.Вставить("ДанныеСертификата", ДанныеСертификатаПодписи);
			
		КонецЦикла;
		
		СообщениеОбменаВыписка = СохранитьВыписку(ДанныеВыписки, НастройкаОбмена, НазваниеЭД);
		СообщенияОбменаДляПроверки.Добавить(СообщениеОбменаВыписка);
		ОбменСБанкамиСлужебныйВызовСервера.ОпределитьИсполненныеПлатежныеПоручения(СообщениеОбменаВыписка);
		КолПолученных = КолПолученных + 1;
	КонецЦикла;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить(
		"МассивСообщенийОбменаДляПроверкиЧерезДополнительнуюОбработку", СообщенияОбменаДляПроверки);
	ПараметрыПроверки.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
	ПараметрыПроверки.Вставить("ТекущийИндексПроверкиПодписейЧерезДополнительнуюОбработку", 0);
	ПараметрыПроверки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ОбменСБанкамиСлужебныйКлиент.НачатьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ПараметрыПроверки);
	
	ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
			
	Если КолПолученных = 0 Тогда
		ТекстОповещения = НСтр("ru = 'Полученных документов нет.'");
	Иначе
		ТекстОповещения = НСтр("ru = 'Получено документов: (%1).'");
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, КолПолученных);
	КонецЕсли;
		
	Оповестить("ОбновитьСостояниеОбменСБанками");
		
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	ОповеститьОВыборе(СообщениеОбменаВыписка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СохранитьВыписку(Знач ДанныеВыписки, Знач НастройкаОбмена, Знач НазваниеЭД)
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена, "Организация, Банк");
	
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеВыписки.Выписка);
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("ПредставлениеДокумента", НазваниеЭД);
	ПараметрыСообщения.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	ПараметрыСообщения.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСообщения.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
	ПараметрыСообщения.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
	ПараметрыСообщения.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
	ПараметрыСообщения.Вставить("СсылкаНаОбъект", НастройкаОбмена);
	
	НовоеСообщение = Неопределено;
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(ПараметрыСообщения, НовоеСообщение);
	
	Для Каждого Подпись Из ДанныеВыписки.Подписи Цикл
		СтруктураСертификата = Новый Структура;
		СтруктураСертификата.Вставить("Отпечаток", Подпись.ДанныеСертификата.Отпечаток);
		СтруктураСертификата.Вставить("КомуВыдан", Подпись.ДанныеСертификата.ВладелецФИО);
		СтруктураСертификата.Вставить("ДвоичныеДанные", Подпись.Сертификат);
		ОбменСБанкамиСлужебныйВызовСервера.ДобавитьПодпись(НовоеСообщение, Подпись.Подпись, СтруктураСертификата);
	КонецЦикла;
	
	Возврат НовоеСообщение;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолучениеДанныхАутентификации(ДанныеАутентификации, ПараметрыОбработки) Экспорт
	
	Если ДанныеАутентификации = Неопределено Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;
	
	РеквизитыНастройкиОбмена = Новый Структура("АдресСервера, ИдентификаторОрганизации, ВерсияФормата");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(НастройкаОбмена, РеквизитыНастройкиОбмена);
	
	Обработчик = Новый ОписаниеОповещения(ПараметрыОбработки.ПроцедураОбработчик, ЭтотОбъект, ПараметрыОбработки);
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик, РеквизитыНастройкиОбмена.АдресСервера,
		РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ДанныеАутентификации, РеквизитыНастройкиОбмена.ВерсияФормата,
		НастройкаОбмена);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеВыпискиПослеПолученияМаркераБанка(Маркер, ПараметрыОбработки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.ИдентификаторСессии = Маркер;
	
	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОжиданияПолученияВыписки);
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПолучитьВыпискуАсинхронныйОбмен", ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеИзвещенияПослеПолученияМаркераБанка(Маркер, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.ИдентификаторСессии = Маркер;
	
	Результат = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияПолученияИзвещенияОСостоянииЭДНаСервере(
		ПараметрыЗапроса, УникальныйИдентификатор);
		
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПолучитьИзвещениеОСостоянииЭД", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПолучитьИзвещениеОСостоянииЭД(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуНаКлиенте(ЕстьОшибка = Ложь, ПараметрЗакрытия = Неопределено)
	
	ПроизошлаОшибка = ЕстьОшибка;
	
	Если НЕ ФормаОткрыта Тогда
		ЗакрытьФорму = Истина;
	Иначе
		Закрыть(ПараметрЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбменЧерезВК

&НаКлиенте
Процедура ПолучитьВыпискуЧерезВК()
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьНовыеДокументыПослеПодключенияВК", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ПодключитьИИнициализироватьВК(Оповещение, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНовыеДокументыПослеПодключенияВК(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	ИначеЕсли Результат = Неопределено Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = Результат;
	
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", Результат);
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияНовыхДокументовЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ПолучитьНовыеДокументыВК(Оповещение, Результат, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеЭДЧерезВК()
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьНовыеДокументыПослеПодключенияВК", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ПодключитьИИнициализироватьВК(Оповещение, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияНовыхДокументовЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат.Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Результат);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	Если Результат.Результат = Неопределено ИЛИ Результат.Результат = Ложь Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	Если ОбменСБанкамиСлужебныйКлиент.ПроцессПрерван(НастройкаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
		Извещение = Неопределено;
		ИзвещениеПолучено = ОбменСБанкамиСлужебныйВызовСервера.ПолученоИзвещениеПоЗапросу(СообщениеОбмена, ПроизошлаОшибка);
		
		Если ПроизошлаОшибка ИЛИ ИзвещениеПолучено Тогда
			ЗакрытьФормуНаКлиенте(ПроизошлаОшибка);
			Возврат;
		КонецЕсли;
		
		ПолучитьНовыеДокументыПослеПодключенияВК(ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры);
		
	Иначе
	
		ВыпискиБанка = ВыпискиПоЗапросам(МассивСообщенийОбменаСсылка);
	
		Если ВыпискиБанка = Неопределено Тогда // Произошла ошибка
			ЗакрытьФормуНаКлиенте(Истина);
		ИначеЕсли ВыпискиБанка.Количество() Тогда
			ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
			ТекстОповещения = НСтр("ru = 'Получено документов: (%1).'");
			ТекстОповещения = СтрШаблон(ТекстОповещения, ВыпискиБанка.Количество());
			Оповестить("ОбновитьСостояниеОбменСБанками");
			ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
			ОповеститьОВыборе(ВыпискиБанка);
		Иначе
			ПолучитьНовыеДокументыПослеПодключенияВК(ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сбербанк

&НаКлиенте
Процедура ПослеОтправкиОчередногоЗапросаВыпискиСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	МассивТикетовСбербанк.Добавить(Результат);
	
	ОтправитьЗапросыВыписокРекурсивноСбербанк(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаСтатусаЗапросаСостоянияСбербанк(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	Если Ответ = "<!--NOT PROCESSED YET-->" ИЛИ Ответ = "<!--NOT_PROCESSED_YET-->" Тогда
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"ПолучитьИзвещениеОСостоянииДокументаСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	ИначеЕсли Ответ = "<!--REQUEST NOT FOUND-->" ИЛИ Ответ = "<!--REQUEST_NOT_FOUND-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка: запрос не найден.
							|Повторите операцию позже.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	ИначеЕсли Ответ = "<!--REQUESTID DUBLIC-->" ИЛИ Ответ = "<!--REQUESTID_DUBLIC-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка: запрос с таким идентификатором уже существует.
							|Повторите операцию позже.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	Иначе
		МассивНовыхСообщенийОбмена = Новый Массив;
		Попытка
			ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(
				Ответ, НастройкаОбмена, МассивНовыхСообщенийОбмена, ИсходныйТикетСбербанк);
		Исключение
			ВидОперации = НСтр("ru = 'Чтение ответа Сбербанка.'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
			ЗакрытьФормуНаКлиенте(Истина);
			Возврат;
		КонецПопытки;
		
		Оповещение = Новый ОписаниеОповещения("ПустойОбработчик", ЭлектронноеВзаимодействиеСлужебныйКлиент);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(
			Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
		Оповестить("ОбновитьСостояниеОбменСБанками");
		ЗакрытьФормуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтветаПоТикетуЗапросаНовыхДокументовСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	МассивНовыхСообщенийОбмена = Новый Массив;
	Попытка
		КоличествоТомов = 0;
		ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(
			Результат, НастройкаОбмена, МассивНовыхСообщенийОбмена, ТикетСбербанк, КоличествоТомов);
		Если КоличествоТомов > 0 Тогда
			Оповещение = Новый ОписаниеОповещения(
				"ОтправитьЗапросСостоянияПлатежныхДокументовПослеПолученияБольшогоПакетаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьМноготомныйДокументЧерезТокенСбербанк(
				Оповещение, НастройкаОбмена, ИдентификаторОрганизации, ТикетСбербанк, КоличествоТомов);
			Возврат;
		КонецЕсли;
	Исключение
		ВидОперации = НСтр("ru = 'Чтение ответа Сбербанка.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецПопытки;
	
	Если МассивНовыхСообщенийОбмена.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ПустойОбработчик", ЭлектронноеВзаимодействиеСлужебныйКлиент);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(
			Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
		ИтогКолПолученных = ИтогКолПолученных + МассивНовыхСообщенийОбмена.Количество();
		Оповестить("ОбновитьСостояниеОбменСБанками");
	КонецЕсли;

	ОтправитьЗапросСостоянияПлатежныхДокументовЧерезТокенСбербанк()
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросСостоянияПлатежныхДокументовЧерезТокенСбербанк()
	
	МассивТикетовСбербанк = Новый Массив;
	ТекстЗапросаСостоянияПлатежныеДокументов = ОбменСБанкамиСлужебныйВызовСервера.ТекстЗапросаСостоянияОбработкиПлатежныхДокументовСбербанк(
		НастройкаОбмена, МассивТикетовСбербанк);
	
	Если ЗначениеЗаполнено(ТекстЗапросаСостоянияПлатежныеДокументов) Тогда
		ТикетСбербанк = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросаСостоянияПлатежныхДокументов", ЭтотОбъект);
		
		ОбменСБанкамиСлужебныйКлиент.ВыполнитьОтправкуДанныхЧерезТокенСбербанк(
			Оповещение, ТекстЗапросаСостоянияПлатежныеДокументов, НастройкаОбмена);
		Возврат;
	КонецЕсли;
	
	Если МассивТикетовСбербанк.Количество() = 0 Тогда
		ЗакрытьФормуНаКлиенте();
	Иначе
		НачатьПолучениеДокументовПоТикетамСбербанк();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросСостоянияПлатежныхДокументовПослеПолученияБольшогоПакетаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	МассивНовыхСообщенийОбмена = Новый Массив;

	ОбменСБанкамиСлужебныйВызовСервера.СохранитьБольшойПакетСбербанк(
		НастройкаОбмена, ТикетСбербанк, Результат.МассивТомов, МассивНовыхСообщенийОбмена);
		
	Если МассивНовыхСообщенийОбмена.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ПустойОбработчик", ЭлектронноеВзаимодействиеСлужебныйКлиент);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(
			Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
		ИтогКолПолученных = ИтогКолПолученных + МассивНовыхСообщенийОбмена.Количество();
		Оповестить("ОбновитьСостояниеОбменСБанками");
	КонецЕсли;

	ОтправитьЗапросСостоянияПлатежныхДокументовЧерезТокенСбербанк()
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтветаПоТикетуЗапросовВыпискиСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	МассивНовыхСообщенийОбмена = Новый Массив;
	Попытка
		ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(Результат, НастройкаОбмена, МассивНовыхСообщенийОбмена);
	Исключение
		ВидОперации = НСтр("ru = 'Чтение ответа Сбербанка.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецПопытки;
	
	Если МассивНовыхСообщенийОбмена.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ПустойОбработчик", ЭлектронноеВзаимодействиеСлужебныйКлиент);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
		Оповестить("ОбновитьСостояниеОбменСБанками");
	КонецЕсли;

	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(
		ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк);
	ПодключитьОбработчикОжидания("ПолучитьКонечныеСтатусыЗапросовВыпискиСбербанк",
		ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтветаПоТикетуСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	МассивНовыхСообщенийОбмена = Новый Массив;
	
	Попытка
		КоличествоТомов = 0;
		ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(
			Результат, НастройкаОбмена, МассивНовыхСообщенийОбмена, ТикетСбербанк, КоличествоТомов);
		Если КоличествоТомов > 0 Тогда
			Оповещение = Новый ОписаниеОповещения(
				"ПродолжитьПолучениеДокументовПоТикетамПослеОбработкиБольшогоПакетаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьМноготомныйДокументЧерезТокенСбербанк(
				Оповещение, НастройкаОбмена, ИдентификаторОрганизации, ТикетСбербанк, КоличествоТомов);
		Возврат;
		КонецЕсли;
	Исключение
		ВидОперации = НСтр("ru = 'Чтение ответа Сбербанка.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецПопытки;
	
	Если МассивНовыхСообщенийОбмена.Количество() Тогда
		Оповестить("ОбновитьСостояниеОбменСБанками");
		Оповещение = Новый ОписаниеОповещения("ПустойОбработчик", ЭлектронноеВзаимодействиеСлужебныйКлиент);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(
			Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
	КонецЕсли;

	НачатьПолучениеДокументовПоТикетамСбербанк()

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеДокументовПоТикетамПослеОбработкиБольшогоПакетаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	МассивНовыхСообщенийОбмена = Новый Массив;

	ОбменСБанкамиСлужебныйВызовСервера.СохранитьБольшойПакетСбербанк(
		НастройкаОбмена, ТикетСбербанк, Результат.МассивТомов, МассивНовыхСообщенийОбмена);
		
	Если МассивНовыхСообщенийОбмена.Количество() Тогда
		Оповестить("ОбновитьСостояниеОбменСБанками");
		Оповещение = Новый ОписаниеОповещения("ПустойОбработчик", ЭлектронноеВзаимодействиеСлужебныйКлиент);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(
			Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
	КонецЕсли;

	НачатьПолучениеДокументовПоТикетамСбербанк()
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОчередногоСтатусаЗапросаСбербанк(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	Если Ответ = "<!--NOT PROCESSED YET-->" ИЛИ Ответ = "<!--NOT_PROCESSED_YET-->" Тогда
		ДополнительныеПараметры.МассивТикетовСбербанкКопия.Добавить(ДополнительныеПараметры.Тикет);
	ИначеЕсли Ответ = "<!--REQUEST NOT FOUND-->" ИЛИ Ответ = "<!--REQUEST_NOT_FOUND-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка: запрос не найден.
							|Повторите операцию позже.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	ИначеЕсли Ответ = "<!--REQUESTID DUBLIC-->" ИЛИ Ответ = "<!--REQUESTID_DUBLIC-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка: запрос с таким идентификатором уже существует.
								|Повторите операцию позже.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	Иначе
		МассивНовыхСообщенийОбмена = Новый Массив;
		
		Попытка
			ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(Ответ, НастройкаОбмена, МассивНовыхСообщенийОбмена);
		Исключение
			ВидОперации = НСтр("ru = 'Чтение ответа Сбербанка.'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
			ЗакрытьФормуНаКлиенте(Истина);
			Возврат;
		КонецПопытки;
		
		Если МассивНовыхСообщенийОбмена.Количество() Тогда
			Оповещение = Новый ОписаниеОповещения("ПустойОбработчик", ЭлектронноеВзаимодействиеСлужебныйКлиент);
			ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
			Оповестить("ОбновитьСостояниеОбменСБанками");
		КонецЕсли;
	КонецЕсли;

	ПолучитьСтатусыЗапросовРекурсивноСбербанк(ДополнительныеПараметры)
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСтатусаЗапросаСбербанк(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Ответ) Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	Если Ответ = "<!--NOT PROCESSED YET-->" ИЛИ Ответ = "<!--NOT_PROCESSED_YET-->" Тогда
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПолучитьОтветПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	ИначеЕсли Ответ = "<!--REQUEST NOT FOUND-->" ИЛИ Ответ = "<!--REQUEST_NOT_FOUND-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка: запрос не найден.
							|Повторите операцию позже.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	ИначеЕсли Ответ = "<!--REQUESTID DUBLIC-->" ИЛИ Ответ = "<!--REQUESTID_DUBLIC-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка: запрос с таким идентификатором уже существует.
							|Повторите операцию позже.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	Иначе // Ответ получен
		ВыполнитьОбработкуОповещения(ОповещениеПослеПолученияОтветаПоТикетуСбербанк, Ответ);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаСтатусаЗапросаВыпискиСбербанк(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	ТикетСбербанк = Ответ;
	
	ОповещениеПослеПолученияОтветаПоТикетуСбербанк = Новый ОписаниеОповещения(
		"ПослеПолученияОтветаПоТикетуЗапросовВыпискиСбербанк", ЭтотОбъект);
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("ПолучитьОтветПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаСостоянияПлатежныхДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	МассивТикетовСбербанк.Добавить(Результат);
	НачатьПолучениеДокументовПоТикетамСбербанк();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыпискиПолученыСбербанк(Знач НастройкаОбмена, Знач ЗапросыВыписокСсылка, Знач ДатаНачала, Знач ДатаОкончания, Знач БанковскиеСчетаСсылка, Знач ДатаНачалаОперации, ВыпискиБанка)

	МассивЗапросов = ПолучитьИзВременногоХранилища(ЗапросыВыписокСсылка);
	МассивБанковскихСчетов = ПолучитьИзВременногоХранилища(БанковскиеСчетаСсылка);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	1 КАК Поле1
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.Ссылка В(&МассивСсылок)
	               |	И СообщениеОбменСБанками.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Обработан)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивЗапросов);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда // есть хоть один запрос, по которому еще не пришла выписка
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СообщениеОбменСБанками.Ссылка,
	               |	СообщениеОбменСБанками.ДатаСообщения КАК ДатаСообщения,
	               |	СообщениеОбменСБанками.НомерСчета КАК НомерСчета,
	               |	СообщениеОбменСБанками.Дата
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.ДатаСообщения >= &ДатаНачала
	               |	И СообщениеОбменСБанками.ДатаСообщения <= &ДатаОкончания
	               |	И СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	               |	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ВыпискаБанка)
	               |	И СообщениеОбменСБанками.НомерСчета В(&МассивСчетов)
	               |	И СообщениеОбменСБанками.Дата >= &ДатаНачалаОперации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаСообщения УБЫВ,
	               |	НомерСчета";
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("МассивСчетов", МассивБанковскихСчетов);
	Запрос.УстановитьПараметр("ДатаНачалаОперации", ДатаНачалаОперации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТекСчет = Неопределено; ТекДата = Неопределено;
	ВыпискиБанка = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДатаСообщения <> ТекДата ИЛИ Выборка.НомерСчета <> ТекСчет Тогда
			ТекДата = Выборка.ДатаСообщения;
			ТекСчет = Выборка.НомерСчета;
			ВыпискиБанка.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ДанныеЗапросовВыписокСбербанк(МассивСообщенийОбмена)
	
	СоответствиеВозврата = Новый Соответствие;
	
	Для Каждого СообщениеОбмена Из МассивСообщенийОбмена Цикл
		ПакетXML = ОбменСБанкамиСлужебныйВызовСервера.ПакетXMLСбербанка(СообщениеОбмена, НастройкаОбмена);
		СоответствиеВозврата.Вставить(СообщениеОбмена, ПакетXML);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

&НаКлиенте
Процедура НачатьОтправкуЗапросовВыписокСбербанк()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользуетсяКриптография Тогда
		Оповещение = Новый ОписаниеОповещения("ОтправитьЗапросыВыпискиПослеАутентификацииНаСервереСбербанк", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.УстановитьСоединениеИАутентифицироватьсяНаСервереСбербанк(Оповещение, НастройкаОбмена);
	Иначе
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
		ПараметрыОтправки.Вставить("МассивСообщенийОбменаСсылка", МассивСообщенийОбменаСсылка);
		ПараметрыОтправки.Вставить("ВидЭД", ПредопределенноеЗначение("Перечисление.ВидыЭДОбменСБанками.ЗапросВыписки"));
		ПараметрыОтправки.Вставить("ПолучитьСтатусыДокументов", Ложь);
		ПараметрыОтправки.Вставить("АдресРезультата");
		РезультатОтправки = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияПоОтправкеДокументовВСбербанк(ПараметрыОтправки);
		Если РезультатОтправки.Статус = "Выполняется" Тогда
			ИдентификаторЗадания = РезультатОтправки.ИдентификаторЗадания;
			ПараметрыОбработчикаОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			ПараметрыОбработчикаОжидания.ВыводитьСообщения = Истина;
			ПараметрыОбработчикаОжидания.ВыводитьОкноОжидания = Ложь;
			Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросовВыписокСбербанк", ЭтотОбъект);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатОтправки, Оповещение, ПараметрыОбработчикаОжидания);
		Иначе
			ПослеОтправкиЗапросовВыписокСбербанк(РезультатОтправки, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеДокументовПоТикетамСбербанк()
	
	Если МассивТикетовСбербанк.Количество() = 0 Тогда // все ответы получены
		ПараметрЗакрытия = Новый Структура("ИтогКолОтправленных, ИтогКолПолученных", ИтогКолОтправленных, ИтогКолПолученных);
		ЗакрытьФормуНаКлиенте( , ПараметрЗакрытия);
		Возврат;
	КонецЕсли;
	
	ТикетСбербанк = МассивТикетовСбербанк[0];
	МассивТикетовСбербанк.Удалить(0);
		
	ОповещениеПослеПолученияОтветаПоТикетуСбербанк = Новый ОписаниеОповещения(
		"ПослеПолученияОтветаПоТикетуСбербанк", ЭтотОбъект);
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("ПолучитьОтветПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьВыпискуСбербанк()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьОтветПоТикетуПослеОтправкиЗапросаНовыхДокументовСбербанк", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.ОтправитьЗапросНовыхДокументовСбербанк(
		Оповещение, НастройкаОбмена, СертификатПодписиСбербанк, ИдентификаторСертификатаСбербанк);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросыВыпискиПослеАутентификацииНаСервереСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	СоответствиеТекстовЗапросов = ПолучитьИзВременногоХранилища(ТекстыЗапросовВыписокСбербанк);
	МассивТекстовЗапросов = Новый Массив;
	МассивТикетовСбербанк = Новый Массив;
	
	Для Каждого КлючЗначение Из СоответствиеТекстовЗапросов Цикл
		МассивТекстовЗапросов.Добавить(КлючЗначение.Значение);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивТекстовЗапросов", МассивТекстовЗапросов);
	ДополнительныеПараметры.Вставить("СоответствиеТекстовЗапросов", СоответствиеТекстовЗапросов);
	
	ОтправитьЗапросыВыписокРекурсивноСбербанк(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросыВыписокРекурсивноСбербанк(ДополнительныеПараметры)
	
	Если НЕ ДополнительныеПараметры.МассивТекстовЗапросов.Количество() Тогда // все запросы отправлены
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"ПолучитьВнешниеИдентификаторыЗапросовВыпискиСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		Возврат;
	КонецЕсли;
	
	ТекущийТекстЗапроса = ДополнительныеПараметры.МассивТекстовЗапросов.Получить(0);
	ДополнительныеПараметры.МассивТекстовЗапросов.Удалить(0);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеОтправкиОчередногоЗапросаВыпискиСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбменСБанкамиСлужебныйКлиент.ВыполнитьОтправкуДанныхЧерезТокенСбербанк(Оповещение, ТекущийТекстЗапроса, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВнешниеИдентификаторыЗапросовВыпискиСбербанк()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("МассивТикетовСбербанкКопия", Новый Массив);
	
	ПолучитьСтатусыЗапросовРекурсивноСбербанк(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыпискуПослеПолученияОтветаПоТикетуЗапросаНовыхДокументовСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	МассивНовыхСообщенийОбмена = Новый Массив;

	Попытка
		КоличествоТомов = 0;
		ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(
			Результат, НастройкаОбмена, МассивНовыхСообщенийОбмена, ТикетСбербанк, КоличествоТомов);
		Если КоличествоТомов > 0 Тогда
			Оповещение = Новый ОписаниеОповещения(
				"ПроверитьНаличиеВыписокПослеПолученияБольшогоПакетаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьМноготомныйДокументЧерезТокенСбербанк(
				Оповещение, НастройкаОбмена, ИдентификаторОрганизации, ТикетСбербанк, КоличествоТомов);
			Возврат;
		КонецЕсли;
	Исключение
		ВидОперации = НСтр("ru = 'Чтение ответа Сбербанка.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецПопытки;
	
	Если МассивНовыхСообщенийОбмена.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ПроверитьНаличиеВыписокПослеПроверкиПодписейСбербанк", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
	Иначе
		ПроверитьНаличиеВыписокСбербанк();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеВыписокПослеПроверкиПодписейСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Оповестить("ОбновитьСостояниеОбменСБанками");
	ПроверитьНаличиеВыписокСбербанк();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеВыписокПослеПолученияБольшогоПакетаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	МассивНовыхСообщенийОбмена = Новый Массив;

	ОбменСБанкамиСлужебныйВызовСервера.СохранитьБольшойПакетСбербанк(
		НастройкаОбмена, ТикетСбербанк, Результат.МассивТомов, МассивНовыхСообщенийОбмена);
		
	Если МассивНовыхСообщенийОбмена.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ПустойОбработчик", ЭлектронноеВзаимодействиеСлужебныйКлиент);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(
			Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
		ИтогКолПолученных = ИтогКолПолученных + МассивНовыхСообщенийОбмена.Количество();
		Оповестить("ОбновитьСостояниеОбменСБанками");
	КонецЕсли;

	ПроверитьНаличиеВыписокСбербанк();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеВыписокСбербанк()
	
	ВыпискиБанка = Неопределено;
	ПолученыВсеВыписки = ВыпискиПолученыСбербанк(НастройкаОбмена, МассивСообщенийОбменаСсылка, ДатаНачала, ДатаОкончания,
		МассивБанковскихСчетовСсылка, ДатаНачалаОперацииСбербанк, ВыпискиБанка);
	
	Если ПолученыВсеВыписки Тогда
		ОповеститьОВыборе(ВыпискиБанка);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ОжидатьВыпискуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзвещениеОСостоянииДокументаСбербанк()
	
	Если ИспользуетсяКриптография Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросаСтатусаЗапросаСостоянияСбербанк", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ПолучитьСтатусЗапросаСбербанк(
			Оповещение, ИдентификаторОрганизации, ИсходныйТикетСбербанк, НастройкаОбмена);
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьИзвещениеОСостоянияПлатежногоДокумента",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКонечныеСтатусыЗапросовВыпискиСбербанк()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибка = Ложь;
	ТекстЗапроса = ТекстЗапросаСостоянияЗапросовВыписокСбербанк(НастройкаОбмена, МассивСообщенийОбменаСсылка, ЕстьОшибка);
	
	Если ЕстьОшибка Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда // есть запросы в не конечном статусе
		ТикетСбербанк = Неопределено;
		Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросаСтатусаЗапросаВыпискиСбербанк", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ВыполнитьОтправкуДанныхЧерезТокенСбербанк(Оповещение, ТекстЗапроса, НастройкаОбмена);
	Иначе // все запросы выписок имеют конечный статус
		Оповещение = Новый ОписаниеОповещения("ПослеОпределенияСертификатаСбербанк", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСертификатПодписиСбербанк(Оповещение, ИмяВнешнегоМодуля, НастройкаОбмена);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНовыеДокументыСбербанк()

	ТикетСбербанк = ИсходныйТикетСбербанк;
	ОповещениеПослеПолученияОтветаПоТикетуСбербанк = Новый ОписаниеОповещения(
		"ПослеПолученияОтветаПоТикетуЗапросаНовыхДокументовСбербанк", ЭтотОбъект);
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("ПолучитьОтветПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОтветПоТикетуПослеОтправкиЗапросаНовыхДокументовСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	ТикетСбербанк = Результат.Тикет;
	
	ОповещениеПослеПолученияОтветаПоТикетуСбербанк = Новый ОписаниеОповещения(
		"ПолучитьВыпискуПослеПолученияОтветаПоТикетуЗапросаНовыхДокументовСбербанк", ЭтотОбъект);
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("ПолучитьОтветПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОтветПоТикетуСбербанк()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияСтатусаЗапросаСбербанк", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьСтатусЗапросаСбербанк(
		Оповещение, ИдентификаторОрганизации, ТикетСбербанк, НастройкаОбмена);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусыЗапросовРекурсивноСбербанк(ДополнительныеПараметры)
	
	Если НЕ МассивТикетовСбербанк.Количество() Тогда
		
		Если ДополнительныеПараметры.МассивТикетовСбербанкКопия.Количество() Тогда
			МассивТикетовСбербанк = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(
				ДополнительныеПараметры.МассивТикетовСбербанкКопия);
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"ПолучитьВнешниеИдентификаторыЗапросовВыпискиСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		Иначе
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(
				ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк);
			ПодключитьОбработчикОжидания("ПолучитьКонечныеСтатусыЗапросовВыпискиСбербанк",
				ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк.ТекущийИнтервал, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Тикет = МассивТикетовСбербанк.Получить(0);
	МассивТикетовСбербанк.Удалить(0);
	ДополнительныеПараметры.Вставить("Тикет", Тикет);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеПолученияОчередногоСтатусаЗапросаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьСтатусЗапросаСбербанк(
		Оповещение, ИдентификаторОрганизации, Тикет, НастройкаОбмена);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаСостоянияЗапросовВыписокСбербанк(Знач НастройкаОбмена, Знач МассивСообщенийОбменаСсылка, ЕстьОшибка)
	
	МассивСообщенийОбмена = ПолучитьИзВременногоХранилища(МассивСообщенийОбменаСсылка);
	
	Попытка
		ТекстЗапроса = ОбменСБанкамиСлужебный.ТекстЗапросаСостоянияЗапросовВыписокСбербанк(НастройкаОбмена, МассивСообщенийОбмена);
	Исключение
		ВидОперации = НСтр("ru = 'Формирование запроса состояния запроса выписки'");
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
		ЕстьОшибка = Истина;
	КонецПопытки;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ПослеОпределенияСертификатаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда // Пользователь не выбрал сертификат
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;
	
	СертификатПодписиСбербанк = Результат.СертификатСсылка;
	ИдентификаторСертификатаСбербанк = Результат.ИдентификаторСертификата;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("ОжидатьВыпискуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьРезультатПроверкиSMSСбербанк()
	
	Если Не ФормаОткрыта Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии);
		Возврат;
	КонецЕсли;
	
	Результат = ЗапускЗаданияПолученияРезультатовПроверкиСбербанк(
		НастройкаОбмена, СообщениеОбмена, ИсходныйТикетСбербанк);
	
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияРезультатовПроверкиSMSСбербанк", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеПолученияРезультатовПроверкиSMSСбербанк(Результат, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияРезультатовПроверкиSMSСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИспользоватьЖурналирование Тогда
		ОбменСБанкамиСлужебныйКлиент.СохранитьЖурналВФайл(НастройкаОбмена, КаталогДляЖурналирования);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ЗакрытьФормуНаКлиенте();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
	Иначе // выполнено
		Результат = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если Результат = Неопределено Тогда // банк еще не обработал запрос
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПолучитьРезультатПроверкиSMSСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			Возврат;
		ИначеЕсли Результат Тогда
			// Необходимо получить статус документа, т.к. возможно требуется установки второй подписи.
			Результат = ЗапускЗаданияОтправкиЗапросаСтатусаПлатежаСбербанк(НастройкаОбмена, СообщениеОбмена);
			ДополнительныеПараметры = Новый Структура("АутентификацияПроизводилась", Ложь);
			Если Результат.Статус = "Выполняется" Тогда
				ПараметрыОбработчикаОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
				ПараметрыОбработчикаОжидания.ВыводитьСообщения = Истина;
				ПараметрыОбработчикаОжидания.ВыводитьОкноОжидания = Ложь;
				Оповещение = Новый ОписаниеОповещения(
					"ПослеОтправкиЗапросаСтатусаПлатежаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
				ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОбработчикаОжидания);
			Иначе
				ПослеОтправкиЗапросаСтатусаПлатежаСбербанк(Результат, ДополнительныеПараметры)
			КонецЕсли;
			ПоказатьОповещениеПользователя(НСтр("ru = 'Платеж подтвержден'"), , , БиблиотекаКартинок.Успешно32);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru = 'Платеж не подтвержден'"), , , БиблиотекаКартинок.Ошибка32);
			Оповестить("ОбновитьСостояниеОбменСБанками");
			ЗакрытьФормуНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаСтатусаПлатежаСбербанк(РезультатЗадания, ДополнительныеПараметры) Экспорт
	
	Если ИспользоватьЖурналирование Тогда
		ОбменСБанкамиСлужебныйКлиент.СохранитьЖурналВФайл(НастройкаОбмена, КаталогДляЖурналирования);
	КонецЕсли;
	
	Если РезультатЗадания = Неопределено Тогда // задание было отменено
		Возврат;
	КонецЕсли;
	
	Если РезультатЗадания.Статус = "Ошибка" Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатЗадания.КраткоеПредставлениеОшибки);
	Иначе // выполнено
		РезультатОперации = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		Если РезультатОперации.ТребуетсяАутентификация Тогда
			Если ДополнительныеПараметры.АутентификацияПроизводилась Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка аутентификации на сервере банка'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ЗакрытьФормуНаКлиенте(Истина);
				Возврат;
			Иначе
				Обработчик = Новый ОписаниеОповещения(
					"ОтправитьЗапросСтатусаПлатежаПослеБазовойАутентификацииСбербанк", ЭтотОбъект, ДополнительныеПараметры);
				ОбменСБанкамиСлужебныйКлиент.ВыполнитьБазовуюАутентификациюСбербанк(
					Обработчик, ИмяВнешнегоМодуля, НастройкаОбмена, НастройкаОбмена);
			КонецЕсли
		Иначе // запрос был отправлен
			ИсходныйТикетСбербанк = РезультатОперации.Тикет;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("ПолучитьИзвещениеОСостоянииДокументаСбербанк", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросСтатусаПлатежаПослеБазовойАутентификацииСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		Результат = ЗапускЗаданияОтправкиЗапросаСтатусаПлатежаСбербанк(НастройкаОбмена, СообщениеОбмена);
		Если Результат.Статус = "Выполняется" Тогда
			ПараметрыОбработчикаОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			ПараметрыОбработчикаОжидания.ВыводитьСообщения = Истина;
			ПараметрыОбработчикаОжидания.ВыводитьОкноОжидания = Ложь;
			ДополнительныеПараметры = Новый Структура("АутентификацияПроизводилась", Истина);
			Оповещение = Новый ОписаниеОповещения(
				"ПослеОтправкиЗапросаСтатусаПлатежаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОбработчикаОжидания);
		Иначе
			ПослеОтправкиЗапросаСтатусаПлатежаСбербанк(Результат, ДополнительныеПараметры)
		КонецЕсли;
	ИначеЕсли Результат.ТребуетсяТокен Тогда
		ВидОперации = НСтр("ru = 'Аутентификация на сервере Сбербанка'");
		ОбменСБанкамиКлиентСервер.СообщитьОбОшибкеСбербанк(ВидОперации, "GA==", НастройкаОбмена);
		ЗакрытьФормуНаКлиенте(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияОтправкиЗапросаСтатусаПлатежаСбербанк(Знач НастройкаОбмена, Знач СообщениеОбмена)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение статуса платежа Сбербанка.'");
	
	ПараметрыСинхронизации = Новый Структура;
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("СообщениеОбмена", СообщениеОбмена);
		
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросСтатусаПлатежногоДокумента", ПараметрыСинхронизации, ПараметрыВыполнения);

КонецФункции

&НаСервереБезКонтекста
Функция ЗапускЗаданияПолученияРезультатовПроверкиСбербанк(Знач НастройкаОбмена, Знач СообщениеОбмена, Знач Тикет)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение результатов проверки SMS из Сбербанка.'");
	
	ПараметрыОтправки = Новый Структура;
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	ПараметрыОтправки.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОтправки.Вставить("Тикет", Тикет);
	ПараметрыОтправки.Вставить("СообщениеОбмена", СообщениеОбмена);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьРезультатПроверкиSMSСбербанк", ПараметрыОтправки, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПолучитьИдентификаторКриптопрофиляСбербанк()
	
	Если Не ФормаОткрыта Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии);
		Возврат;
	КонецЕсли;
	
	Результат = ЗапускЗаданияПолученияИдентификатораКриптопрофиляСбербанк(НастройкаОбмена, ИсходныйТикетСбербанк);
	
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияИдентификатораКриптопрофиляСбербанк", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеПолученияИдентификатораКриптопрофиляСбербанк(Результат, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияПолученияИдентификатораКриптопрофиляСбербанк(Знач НастройкаОбмена, Знач Тикет)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение идентификатора криптопрофиля из Сбербанка.'");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("ТекущаяСессия", ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена));
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОтправки.Вставить("Тикет", Тикет);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьИдентификаторКриптопрофиляСбербанк", ПараметрыОтправки, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПослеПолученияИдентификатораКриптопрофиляСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИспользоватьЖурналирование Тогда
		ОбменСБанкамиСлужебныйКлиент.СохранитьЖурналВФайл(НастройкаОбмена, КаталогДляЖурналирования);
	КонецЕсли;
	
	Если Не ФормаОткрыта Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии);
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ЗакрытьФормуНаКлиенте();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
	Иначе // выполнено
		ИдентификаторКриптопрофиля = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ИдентификаторКриптопрофиля = Неопределено Тогда // банк еще не успел подготовить ответ
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьИдентификаторКриптопрофиляСбербанк",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		Иначе
			ЗакрытьФормуНаКлиенте( , ИдентификаторКриптопрофиля);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросовВыписокСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(НастройкаОбмена);
	Если ПараметрыЖурналирования.ИспользоватьЖурналирование Тогда
		ОбменСБанкамиСлужебныйКлиент.СохранитьЖурналВФайл(НастройкаОбмена, ПараметрыЖурналирования.КаталогДляЖурналирования);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки, НастройкаОбмена);
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОтправки.ТребуетсяАутентификация Тогда // неверный идентификатор сессии.
			ВидОперации = НСтр("ru = 'Отправка запроса выписки в Сбербанк.'");
			ТекстСообщения = НСтр("ru = 'Неверный идентификатора сессии.
										|Обратитесь в техническую поддержку.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстСообщения, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
			ЗакрытьФормуНаКлиенте(Истина)
		Иначе
			МассивТикетовСсылкаСбербанк = ПоместитьВоВременноеХранилище(
				РезультатОтправки.МассивТикетов, УникальныйИдентификатор);
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПолучитьВнешниеИдентификаторыЗапросовВыпискиБазоваяАутентификацияСбербанк",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьВнешниеИдентификаторыЗапросовВыпискиБазоваяАутентификацияСбербанк()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ЗапускЗаданияПолученияСтатусовЗапросовСбербанк(НастройкаОбмена, МассивТикетовСсылкаСбербанк);
	
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияСтатусовЗапросовСбербанк", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеПолученияСтатусовЗапросовСбербанк(Результат, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСтатусовЗапросовСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИспользоватьЖурналирование Тогда
		ОбменСБанкамиСлужебныйКлиент.СохранитьЖурналВФайл(НастройкаОбмена, КаталогДляЖурналирования);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Результат.КраткоеПредставлениеОшибки, НастройкаОбмена, , , ПроизошлаОшибка);
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОтправки.Количество() Тогда // есть еще не обработанные токены
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПолучитьВнешниеИдентификаторыЗапросовВыпискиБазоваяАутентификацияСбербанк",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		Иначе
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(
				ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк);
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьКонечныеСтатусыЗапросовВыпискиБазоваяАутентификацияСбербанк",
				ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк.ТекущийИнтервал, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьКонечныеСтатусыЗапросовВыпискиБазоваяАутентификацияСбербанк()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОтправки = ЗапускЗаданияЗапросаСтатусаЗапросовСбербанк(НастройкаОбмена, МассивСообщенийОбменаСсылка);

	Если РезультатОтправки.Статус = "Выполняется" Тогда
		ИдентификаторЗадания = РезультатОтправки.ИдентификаторЗадания;
		ПараметрыОбработчикаОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОбработчикаОжидания.ВыводитьСообщения = Истина;
		ПараметрыОбработчикаОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросовСтатусовЗапросовВыписокСбербанк", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатОтправки, Оповещение, ПараметрыОбработчикаОжидания);
	Иначе
		ПослеОтправкиЗапросовСтатусовЗапросовВыписокСбербанк(РезультатОтправки, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросовСтатусовЗапросовВыписокСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИспользоватьЖурналирование Тогда
		ОбменСБанкамиСлужебныйКлиент.СохранитьЖурналВФайл(НастройкаОбмена, КаталогДляЖурналирования);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки, НастройкаОбмена);
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОтправки = Неопределено Тогда // все запросы имеют конечные статусы
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОжиданияПолученияВыписки);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ОжидатьВыпискуСбербанк", ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал, Истина);
		Иначе
			МассивТикетовСсылкаСбербанк = Результат.АдресРезультата;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПолучитьИзвещенияНаЗапросыВыписокСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжидатьВыпискуСбербанк()
	
	Результат = ЗапускЗаданияОтправкиЗапросаНовыхДокументовСбербанк(НастройкаОбмена);
	
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияТикетаНаЗапросНовыхДокументовСбербанк", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеПолученияТикетаНаЗапросНовыхДокументовСбербанк(Результат, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияТикетаНаЗапросНовыхДокументовСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИспользоватьЖурналирование Тогда
		ОбменСБанкамиСлужебныйКлиент.СохранитьЖурналВФайл(НастройкаОбмена, КаталогДляЖурналирования);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Результат.КраткоеПредставлениеОшибки, НастройкаОбмена, , , ПроизошлаОшибка);
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		МассивТикетовСсылкаСбербанк = Результат.АдресРезультата;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПолучитьНовыеДокументыПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьНовыеДокументыПоТикетуСбербанк()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ЗапускЗаданияПолученияСтатусовЗапросовСбербанк(НастройкаОбмена, МассивТикетовСсылкаСбербанк);
	
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияНовыхДокументовСбербанк", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеПолученияНовыхДокументовСбербанк(Результат, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияНовыхДокументовСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Результат.КраткоеПредставлениеОшибки, НастройкаОбмена, , , ПроизошлаОшибка);
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОтправки.Количество() Тогда // есть еще не обработанные токены
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПолучитьНовыеДокументыПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		Иначе
			ВыпискиБанка = Неопределено;
			ПолученыВсеВыписки = ВыпискиПолученыСбербанк(НастройкаОбмена, МассивСообщенийОбменаСсылка, ДатаНачала, ДатаОкончания,
				МассивБанковскихСчетовСсылка, ДатаНачалаОперацииСбербанк, ВыпискиБанка);

			Если ПолученыВсеВыписки Тогда
				ОповеститьОВыборе(ВыпискиБанка);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОжиданияПолученияВыписки);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ОжидатьВыпискуСбербанк", ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияОтправкиЗапросаНовыхДокументовСбербанк(Знач НастройкаОбмена)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка запроса новых документов в Сбербанк.'");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("ТекущаяСессия", ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена));
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросНовыхДокументовСбербанк", ПараметрыОтправки, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПолучитьИзвещенияНаЗапросыВыписокСбербанк()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ЗапускЗаданияПолученияСтатусовЗапросовСбербанк(НастройкаОбмена, МассивТикетовСсылкаСбербанк);
	
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияПромежуточныхСтатусовЗапросовСбербанк", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеПолученияПромежуточныхСтатусовЗапросовСбербанк(Результат, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияПромежуточныхСтатусовЗапросовСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Результат.КраткоеПредставлениеОшибки, НастройкаОбмена, , , ПроизошлаОшибка);
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОтправки.Количество() Тогда // есть еще не обработанные токены
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПолучитьВнешниеИдентификаторыЗапросовВыпискиБазоваяАутентификацияСбербанк",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(
				ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк);
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьКонечныеСтатусыЗапросовВыпискиБазоваяАутентификацияСбербанк",
				ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк.ТекущийИнтервал, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияЗапросаСтатусаЗапросовСбербанк(Знач НастройкаОбмена, Знач МассивСообщенийОбменаСсылка)
	
	МассивСообщенийОбмена = ПолучитьИзВременногоХранилища(МассивСообщенийОбменаСсылка);
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка запроса статуса запросов выписки Сбербанка.'");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("ТекущаяСессия", ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена));
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОтправки.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросыСтатусовЗапросовСбербанк", ПараметрыОтправки, ПараметрыВыполнения);

	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапускЗаданияПолученияСтатусовЗапросовСбербанк(Знач НастройкаОбмена, Знач МассивТикетовСсылка)
	
	МассивТикетов = ПолучитьИзВременногоХранилища(МассивТикетовСсылка);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение статусов запросов выписки Сбербанк.'");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("ТекущаяСессия", ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена));
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОтправки.Вставить("МассивТикетов", МассивТикетов);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьСтатусыЗапросовСбербанк", ПараметрыОтправки, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПолучитьИзвещениеОСостоянияПлатежногоДокумента()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ЗапускЗаданияПолученияСтатусаПлатежногоДокументаСбербанк(НастройкаОбмена, ИсходныйТикетСбербанк);
	
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияСтатусаПлатежаСбербанк", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеПолученияСтатусаПлатежаСбербанк(Результат, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСтатусаПлатежаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИспользоватьЖурналирование Тогда
		ОбменСБанкамиСлужебныйКлиент.СохранитьЖурналВФайл(НастройкаОбмена, КаталогДляЖурналирования);
	КонецЕсли;

	Если Результат = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Результат.КраткоеПредставлениеОшибки, НастройкаОбмена, , , ПроизошлаОшибка);
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОтправки.Количество() Тогда // есть еще не обработанные токены
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьИзвещениеОСостоянияПлатежногоДокумента",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		Иначе
			Оповестить("ОбновитьСостояниеОбменСБанками");
			ЗакрытьФормуНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияПолученияСтатусаПлатежногоДокументаСбербанк(Знач НастройкаОбмена, Знач Тикет)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение статуса платежного документа из Сбербанка.'");
	
	МассивТикетов = Новый Массив;
	МассивТикетов.Добавить(Тикет);
	
	ПараметрыОтправки = Новый Структура;
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	ПараметрыОтправки.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОтправки.Вставить("МассивТикетов", МассивТикетов);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьСтатусыЗапросовСбербанк", ПараметрыОтправки, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

ИтогКолОтправленных = 0;
ИтогКолПолученных = 0;

#КонецОбласти
