
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ВыбранныйДляПереносаИсполняемыйФайлПлатформы77;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ДекорацияНазваниеКонфигурацииПриемника.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.ДекорацияНазваниеКонфигурацииПриемника.Заголовок, Метаданные.Синоним);
	СоздатьОписанияСтраницИЭтапов();
		
	// Определяем список вариантов начала работы
	// если не веб-клиент, заполним список выбора программ для переноса данных.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СистемнаяИнформация.ИнформацияПрограммыПросмотра) Тогда
		
		НедоступенПереносЗУПКОРП = Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы");
		НедоступенПереносМЗКБУ   = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") И ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации();
		
		Для Каждого Макет Из Метаданные.ОбщиеМакеты Цикл
			Если СтрНайти(Макет.Имя, "ЗарплатаКадрыПереносДанныхИз") = 1 Тогда
				Если СтрНайти(Макет.Имя, "ЗУП25КОРП") > 0 И НедоступенПереносЗУПКОРП Тогда
					Продолжить;
				КонецЕсли;
				Если СтрНайти(Макет.Имя, "МЗКБУ10") > 0 И НедоступенПереносМЗКБУ Тогда
					Продолжить;
				КонецЕсли;
				Элементы.ВариантыНачалаРаботы.СписокВыбора.Добавить(Макет.Имя, Макет.Синоним);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверка варианта открытия формы,
	// РежимПереносДанных = Истина когда форма открыта из командного интерфейса для выполнения переноса данных.
	РежимПереносДанных = Параметры.РежимПереносДанных;
	
	Если РежимПереносДанных Тогда
		
		Если Элементы.ВариантыНачалаРаботы.СписокВыбора.Количество() = 0 Тогда
			// Нет доступных вариантов переноса данных из другой программы.
			Отказ = Истина;
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		ВариантыНачалаРаботы = Элементы.ВариантыНачалаРаботы.СписокВыбора[0].Значение;
		Элементы.ГруппаСтраницыШапка.ТекущаяСтраница = Элементы.СтраницаШапкаПустоеДействие;
		
		ПорядокСтраниц   = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
		ОбновитьИндикатор(ЭтаФорма);
		
		НачальнаяСтраницаИмя  = ПорядокСтраниц[0];
		УстановитьНачальнуюСтраницу(ЭтаФорма, НачальнаяСтраницаИмя);
		
		ЭтаФорма.Заголовок = НСтр("ru = 'Перенос данных из прежних программ'");
		Элементы.Завершить.Заголовок = НСтр("ru = 'Завершить перенос'");
		Элементы.ГруппаОписаниеПерваяСтраница.Видимость = Ложь;
		
	Иначе
		
		ЗаполнитьРеквизитыФормыЗначениямиУмолчания();
		
		НачальнаяНастройкаПрограммы.ДополнитьФормуНачальнаяНастройкаПрограммы(ЭтаФорма);
		
		Если Элементы.ВариантыНачалаРаботы.СписокВыбора.Количество() > 0 Тогда
			ЕстьДоступныеВариантыПереносаДанных = Истина;
			ОписаниеВарианта = НСтр("ru = 'Настроить систему для работы ""с нуля""'"); 
			Элементы.ВариантыНачалаРаботы.СписокВыбора.Вставить(0,"",ОписаниеВарианта);
			ВариантыНачалаРаботы = Элементы.ВариантыНачалаРаботы.СписокВыбора[0].Значение;
		КонецЕсли;
		
		Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
			
			РежимТолькоПросмотр = Истина;
			Элементы.ШапкаФормы.Доступность = Ложь;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаНетДоступа;
			
		Иначе
			
			СохраненныеНастройкиХранилище = Константы.НачальнаяНастройкаПрограммыОтветыПользователя.Получить();
			СохраненныеНастройки = СохраненныеНастройкиХранилище.Получить();
			Если СохраненныеНастройки <> Неопределено Тогда
				СохраненныеНастройкиВРеквизитыФормы(СохраненныеНастройки);
			КонецЕсли;
			
			Если Не МодифицированностьФормы Тогда
				ПолучитьНастройкиПрограммы();
			КонецЕсли;
			ЭтаФорма.Модифицированность = МодифицированностьФормы;
			
			ЗаполнитьКодыНДФЛДляПремий();
			
			ОбновитьФормуПоНастройкам();
			ОбновитьФормуПервоначальногоВводаПоНастройкам();
			
			НачальнаяСтраницаИмя  = ХранилищеОбщихНастроек.Загрузить("НачальнаяНастройкаПрограммыЗК","НачальнаяСтраница");
			УстановитьНачальнуюСтраницу(ЭтаФорма, НачальнаяСтраницаИмя);
			
			НачальнаяСтраницаИмя = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
			РазрешеноПрименениеНастроек = Не ((Найти(НачальнаяСтраницаИмя, "ПереносДанных")>0) Или (Найти(НачальнаяСтраницаИмя, "ВыгрузкаЗагрузкаДанных")>0));
			
			ЗаголовокТекущейСтраницы = ЗаголовокСтраницы(ЭтаФорма);
			ТекущийЭтапНастройкиПрограммы = Новый ФиксированнаяСтруктура(ТекущийЭтапНастройкиПрограммы(ЭтаФорма));
			ОбновитьИндикатор(ЭтаФорма);
			ОбновитьКнопки(ЭтаФорма);
			
			Если Не ПолучитьФункциональнуюОпцию("ВыполнятьНачальнуюНастройкуПрограммы") Тогда
				// Помощник открыт через команду "Все функции".
				Элементы.ГруппаЗавершениеРаботы.Видимость = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ОтказОтНачальнойНастройкиГруппа.Видимость = Не ИспользуетсяБазоваяВерсия;
		
	КонецЕсли;
	
	ОбновитьОписаниеВариантаПереноса(ПереноситьНачисленияПредыдущейПрограммы, ОписаниеВариантаПереноса);
	
	Если Не ПолучитьФункциональнуюОпцию("НеИспользуетсяБазоваяВерсия") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИспользоватьПодработкиГруппа",
			"Видимость",
			Ложь);
		
	КонецЕсли; 
	
	ОбновитьДоступностьГруппыРегистрироватьСдельнуюОплатуВБухучете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И Модифицированность Тогда
		СохранитьРеквизитыФормыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не РежимТолькоПросмотр И Не РежимПереносДанных Тогда
		Отказ = Отказ Или (Модифицированность И ЗавершениеРаботы);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьПодборПерсоналаПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекПодборПерсонала(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Вперед(Команда)
	
	Отмена = Ложь;
	ВыполнитьДействияПередСменойСтраницы(Отмена,1);
	
	Если Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	
	ОбработатьКомандуСменыСтраницы(1);
		
	ВыполнитьДействияПослеСменыСтраницы(ТекущаяСтраницаИмя);
	
	ОбновитьФормуПриСменеСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПередСменойСтраницы(Отмена,Направление)

	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	
	Если Направление = 1 И ТекущаяСтраницаИмя = "СтраницаГотово" Тогда
		
		Если Модифицированность Тогда
			Отмена = Истина;
			ЗаписьПередПереходомКНастройкам = Истина;
			Результат = ЗаписатьНастройкиНаСервере();
			ЗаписатьНастройкиНаКлиенте(Результат);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеСменыСтраницы(БылаСтраницаИмя)
	
	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	РазрешеноПрименениеНастроек = Не ((Найти(ТекущаяСтраницаИмя, "ПереносДанных")>0) Или (Найти(ТекущаяСтраницаИмя, "ВыгрузкаЗагрузкаДанных")>0));
	
	Если ТекущаяСтраницаИмя = "ПереносДанныхИзИБ" И БылаСтраницаИмя = "ПерваяСтраница" Тогда
		
		ОпределитьКонфигурациюИПолучитьФайлы(ПереносДанныхИзПредприятия8);  
		
		ПрименятьУпрощенныйПеренос = (Найти(ВариантыНачалаРаботы, "БП30") = 0);
		ПереноситьНачисленияПредыдущейПрограммы = НЕ ПрименятьУпрощенныйПеренос;
		Элементы.СтраницыВыборВариантаПереноса.ТекущаяСтраница = Элементы.СтраницаЕстьВыборНастройки;
		
		ОбновитьОписаниеВариантаПереноса(ПереноситьНачисленияПредыдущейПрограммы, ОписаниеВариантаПереноса);
		ОбновитьНастройкиВариантаВыгрузки();
		
		ПорядокСтраниц   = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
		ОбновитьИндикатор(ЭтаФорма);
		
		Если ПереносДанныхИзПредприятия8 Тогда
			ПолучитьСписокИБ8();
		Иначе
			ПолучитьСписокИБ77();
		КонецЕсли;
		
		ПериодГод	= Год(ТекущаяДата()) - 2;
		ОписаниеПериодов();
		
		Если Не ЗначениеЗаполнено(МесяцНачалаЭксплуатации) Тогда
			МесяцНачалаЭксплуатации = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "МесяцНачалаЭксплуатации", "МесяцНачалаЭксплуатацииСтрокой");
		
		ОбновитьНастройкиВариантаВыгрузки();
		
		ОписаниеЭтапов = Новый Соответствие;
		ОписаниеЭтапов.Вставить(1, "Подключение");
		ОписаниеЭтапов.Вставить(2, "Выгрузка");
		ОписаниеЭтапов.Вставить(3, "Загрузка");
		
		Этапы = Новый ФиксированноеСоответствие(ОписаниеЭтапов);
		
	ИначеЕсли ТекущаяСтраницаИмя = "ВыгрузкаЗагрузкаДанныхИзИБ" Тогда
		
		Перерисовать(1, "ВОчереди");
		Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница	= Элементы.СтраницаЗаголовокПереносНеНачат;
		Элементы.СтраницыРезультат.ТекущаяСтраница			= Элементы.Процесс;
		ЭтапКонвертации = "";
		
	ИначеЕсли ТекущаяСтраницаИмя = "ПерваяСтраница" Тогда
		// если вернулись на первую страницу, сбрасываем информацию о выполненном переносе
		ВыполненУпрощенныйПеренос = Ложь;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПослеСменыСтраницы", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияПослеСменыСтраницы()

	СохранитьИмяТекущейСтраницы(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ОбработатьКомандуСменыСтраницы(-1);
	ВыполнитьДействияПослеСменыСтраницы(ТекущаяСтраницаИмя);
	ОбновитьФормуПриСменеСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Результат = ЗаписатьНастройкиНаСервере();
	ЗаписатьНастройкиНаКлиенте(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиНаКлиенте(Результат)
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
	Иначе
		
		ПослеЗаписиНастроекНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	Если РежимПереносДанных Тогда
		Закрыть();
	ИначеЕсли ТекущийЭтапНастройкиПрограммы.ДействиеКомандыПримененияНастроек = "ЗаписатьНастройки" Тогда
		Результат = ЗаписатьНастройкиНаСервере();
		ЗавершитьНастройкуПослеЗаписи = Истина;
		ЗаписатьНастройкиНаКлиенте(Результат);
	Иначе
		Модифицированность = Ложь;
		ОбновитьПовторноИспользуемыеЗначения();
		ЗавершитьНачальнуюНастройкуПрограммыНаСервере();
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводНачальныхДанных(Команда)
	ЗавершитьНачальнуюНастройкуПрограммыНаСервере();
	ОбновитьИнтерфейс();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗагрузитьФайлыПФР(Команда)
	
	ПараметрыДляВыбора = ПараметрыДляВыбораФайлов();
	ПараметрыДляВыбора.ТипФайловСведений = ПредопределенноеЗначение("Перечисление.ТипыФайловСведенийФизическихЛиц.КвартальнаяОтчетностьВПФР");
	
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьСведенияИзФайловПослеВыбора", ЭтаФорма, "ПФР");
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("ОбщаяФорма.ВыборФайловСведенийФизическихЛиц", ПараметрыДляВыбора, ЭтаФорма,,,, Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗагрузитьФайлыИФНС(Команда)
	
	ПараметрыДляВыбора = ПараметрыДляВыбораФайлов();
	ПараметрыДляВыбора.ТипФайловСведений = ПредопределенноеЗначение("Перечисление.ТипыФайловСведенийФизическихЛиц.СправкиОДоходахВФНС");
	
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьСведенияИзФайловПослеВыбора", ЭтаФорма, "ФНС");
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("ОбщаяФорма.ВыборФайловСведенийФизическихЛиц", ПараметрыДляВыбора, ЭтаФорма,,,, Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗагрузитьФайлыРСВ(Команда)
	
	ПараметрыДляВыбора = ПараметрыДляВыбораФайлов();
	ПараметрыДляВыбора.ТипФайловСведений = ПредопределенноеЗначение("Перечисление.ТипыФайловСведенийФизическихЛиц.КвартальнаяОтчетностьРСВ");
	
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьСведенияИзФайловПослеВыбора", ЭтаФорма, "РСВ_ФНС");
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("ОбщаяФорма.ВыборФайловСведенийФизическихЛиц", ПараметрыДляВыбора, ЭтаФорма,,,, Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеШкалыНадбавокЗаСтаж(Команда)
	
	ПоказательСсылка = ПоказательПроцентНадбавкиЗаВыслугуЛетСсылка();
	ПараметрыФормы = Новый Структура("Ключ", ПоказательСсылка);
	ОткрытьФорму("Справочник.ПоказателиРасчетаЗарплаты.ФормаОбъекта", ПараметрыФормы, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПоказательПроцентНадбавкиЗаВыслугуЛетСсылка()
	Возврат Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательНадбавкаЗаВыслугуЛет();
КонецФункции

&НаКлиенте
Процедура ИнформационнаяСсылкаНажатие(Элемент)
	ПерейтиПоНавигационнойСсылке(ИнформационнаяСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ВыборВариантаПереноса(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПереноситьНачисленияПредыдущейПрограммы", ПереноситьНачисленияПредыдущейПрограммы);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПереноситьНачисленияПредыдущейПрограммы", ПереноситьНачисленияПредыдущейПрограммы);
	ОписаниеОповещенияПриЗакрытии = Новый ОписаниеОповещения("ВыборВариантаПереносаЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("Обработка.НачальнаяНастройкаПрограммы.Форма.ФормаВыбораВариантаПереносаДанных",ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещенияПриЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВариантаПереносаЗавершение(РезультатОповещения, ПараметрыОповещения) Экспорт

	ПереноситьНачисленияПредыдущейПрограммы = РезультатОповещения.ПереноситьНачисленияПредыдущейПрограммы;
	ОбновитьОписаниеВариантаПереноса(ПереноситьНачисленияПредыдущейПрограммы, ОписаниеВариантаПереноса);
	ОбновитьНастройкиВариантаВыгрузки();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиВариантаВыгрузки()
	
	Если ПереноситьНачисленияПредыдущейПрограммы Тогда
		Элементы.ГруппаПереносДанныхИзИБНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаПолныйПереносНастройки;
	Иначе
		Элементы.ГруппаПереносДанныхИзИБНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаУпрощенныйПереносНастройки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзEStaff(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодборПерсоналаКлиент");
		Модуль.ОткрытьФормуЗагрузкиДанныхИзEStaff(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПроизводственныйКалендарьРоссийскойФедерации()
	
	Возврат КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации();
	
КонецФункции

&НаСервереБезКонтекста
Функция РегиональныйПроизводственныйКалендарь()

	КалендарьРФ = ПроизводственныйКалендарьРоссийскойФедерации();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КалендарьРФ", КалендарьРФ);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПроизводственныеКалендари.Ссылка
	|ИЗ
	|	Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
	|ГДЕ
	|	ПроизводственныеКалендари.Ссылка <> &КалендарьРФ
	|	И НЕ ПроизводственныеКалендари.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроизводственныеКалендари.Код";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ПроизводственныеКалендари.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;

КонецФункции 

&НаКлиенте
Процедура ОбработатьКомандуСменыСтраницы(Направление) Экспорт
	
	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИндексСтраницы = ПорядокСтраниц.Найти(ТекущаяСтраницаИмя);
	Если ИндексСтраницы = Неопределено Тогда
		ИндексНовойСтраницы = 0;
	Иначе
		ИндексНовойСтраницы = ИндексСтраницы + Направление;
	КонецЕсли;
	
	Если ИндексНовойСтраницы > ПорядокСтраниц.ВГраница() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИндексНовойСтраницы < 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтраницаИмя = ПорядокСтраниц.Получить(ИндексНовойСтраницы);
	Если НоваяСтраницаИмя <> Неопределено Тогда
		НоваяСтраница = Элементы.Найти(НоваяСтраницаИмя); 
		Если НоваяСтраница <> Неопределено Тогда          
			Элементы.ГруппаСтраницы.ТекущаяСтраница = НоваяСтраница;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#Область ЗагрузкаСведенийИзФайловПФРиФНС

&НаКлиенте
Функция ПараметрыДляВыбораФайлов()
	
	ПараметрыДляВыбора = Новый Структура();
	ПараметрыДляВыбора.Вставить("ЗагрузкаОрганизацийИФизическихЛиц",Истина);
	ПараметрыДляВыбора.Вставить("ТипФайловСведений", Неопределено);
	ПараметрыДляВыбора.Вставить("ИспользуетсяБазоваяВерсия", ИспользуетсяБазоваяВерсия);
	
	Возврат ПараметрыДляВыбора;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСведенияИзФайловПослеВыбора(СоответствиеИмпортируемыхФайлов, ТипФайловСтрока) Экспорт
	
	Если СоответствиеИмпортируемыхФайлов = Неопределено ИЛИ СоответствиеИмпортируемыхФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипФайловСтрока = "ПФР" Тогда  
		ЗагрузитьСведенияИзФайловПФРНаСервере(СоответствиеИмпортируемыхФайлов);
	ИначеЕсли ТипФайловСтрока = "ФНС" Тогда
		ЗагрузитьСведенияИзФайловИФНСНаСервере(СоответствиеИмпортируемыхФайлов);
	ИначеЕсли ТипФайловСтрока = "РСВ_ФНС" Тогда
		ЗагрузитьСведенияИзФайловРСВНаСервере(СоответствиеИмпортируемыхФайлов);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСведенияИзФайловПФРНаСервере(СоответствиеИмпортируемыхФайлов)
	
	Для Каждого ОписаниеФайлаАДВ Из СоответствиеИмпортируемыхФайлов Цикл 
		ЗагрузитьСведенияИзФайлаПФРНаСервере(ОписаниеФайлаАДВ);
	КонецЦикла;
	
	// Уточним сведения об организациях.
	ЗаполнитьДанныеОбОрганизациях();
	Элементы.СписокОрганизаций.Обновить();
	ОбновитьФормуПоНастройкам();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСведенияИзФайлаПФРНаСервере(ОписаниеФайлаАДВ)
	
	МассивИменПачек = Новый Массив;
	ИмяФайлаАДВ = ОписаниеФайлаАДВ.Ключ;
	СоответствиеИменФайлов = Новый Соответствие;
	Для Каждого ОписаниеПомещенногоФайла Из ОписаниеФайлаАДВ.Значение.МассивВыбранныхФайлов Цикл
		Если ОписаниеПомещенногоФайла.Имя <> ИмяФайлаАДВ Тогда
			МассивИменПачек.Добавить(ОписаниеПомещенногоФайла.Имя);
		КонецЕсли; 
		СоответствиеИменФайлов.Вставить(ОписаниеПомещенногоФайла.Имя, ОписаниеПомещенногоФайла.Хранение);
	КонецЦикла;
	
	ХранениеФайлаАДВ = СоответствиеИменФайлов.Получить(ИмяФайлаАДВ);
	ДеревоСведенийГоловногоДокумента = ПерсонифицированныйУчет.ДеревоСведенийИзВременногоХранилища(ХранениеФайлаАДВ);
	
	Если ДеревоСведенийГоловногоДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	МассивСведенийСЗВ = Новый Массив;
	
	Для Каждого ИмяПачки Из МассивИменПачек Цикл
		
		ХранениеФайлаСЗВ = СоответствиеИменФайлов.Получить(ИмяПачки);
		ДеревоСведенийСЗВ = ПерсонифицированныйУчет.ДеревоСведенийИзВременногоХранилища(ХранениеФайлаСЗВ);
		
		Если ДеревоСведенийСЗВ <> Неопределено Тогда
			МассивСведенийСЗВ.Добавить(ДеревоСведенийСЗВ);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОрганизаций = ТаблицаОрганизацийДляЗагрузкиИзФайлов();
	
	Если ЭтоДокументАДВ_6_2(ДеревоСведенийГоловногоДокумента) Тогда
		СоставительПачки = ПерсонифицированныйУчет.СписокXDTOИзДерева(ДеревоСведенийГоловногоДокумента, "ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ")[0];
		ОрганизацияИзФайлаПФР = ДобавитьОрганизациюПоДаннымИзФайлаАДВ_6_2(СоставительПачки, ТаблицаОрганизаций);
	ИначеЕсли  ЭтоДокументРСВ(ДеревоСведенийГоловногоДокумента) Тогда
		ОрганизацияИзФайлаПФР = ДобавитьОрганизациюПоДаннымИзФайлаРСВ_1(ДеревоСведенийГоловногоДокумента, ТаблицаОрганизаций);		
	Иначе
		Возврат;
	КонецЕсли;
	
	
	МассивФизическихЛиц = Новый Массив;
	Для каждого ДеревоСведенийСЗВ Из МассивСведенийСЗВ Цикл
		
		Если ПерсонифицированныйУчет.ЭтоДокументСЗВ_6(ДеревоСведенийСЗВ) Тогда
			ИмяСписка = ПерсонифицированныйУчет.ИмяСпискаЗастрахованныхЛицПоТипуФормы("СЗВ_6");
		ИначеЕсли ПерсонифицированныйУчет.ЭтоДокументСЗВ_6_4(ДеревоСведенийСЗВ) Тогда
			ИмяСписка = ПерсонифицированныйУчет.ИмяСпискаЗастрахованныхЛицПоТипуФормы("СЗВ_6_4");
		ИначеЕсли ПерсонифицированныйУчет.ЭтоПачкаРаздела6РСВ1(ДеревоСведенийСЗВ) Тогда
			ИмяСписка = ПерсонифицированныйУчет.ИмяСпискаЗастрахованныхЛицПоТипуФормы("ПАЧКА_РАЗДЕЛОВ6РСВ1");
		КонецЕсли;
		Если ПустаяСтрока(ИмяСписка) Тогда
			Продолжить;
		КонецЕсли;
		МассивЗастрахованных = ПерсонифицированныйУчет.СписокXDTOИзДерева(ДеревоСведенийСЗВ, ИмяСписка);
		
		СтраховыеНомераФизическихЛиц = СтраховыеНомераФизическихЛиц();
		ДанныеФизическогоЛица = Новый Структура("ФизическоеЛицо, Фамилия, Имя, Отчество, СтраховойНомерПФР, ИНН, ДатаРождения, УдостоверениеЛичностиВид, УдостоверениеЛичностиСерияНомер");
		
		Для каждого СтрокаЗастрахованного Из МассивЗастрахованных Цикл
			
			ЗаполнитьДанныеФизическогоЛицаИзЗначенияXDTO(ДанныеФизическогоЛица, СтрокаЗастрахованного, СтраховыеНомераФизическихЛиц, Истина);
			ФизическоеЛицо = ДанныеФизическогоЛица.ФизическоеЛицо;
			Если ФизическоеЛицо = Неопределено Тогда
				
				ФизическоеЛицо = НовоеФизическоеЛицо(ДанныеФизическогоЛица);
				
				СтруктураАдреса = ПерсонифицированныйУчет.СтрокаАдресаПоXDTO(ПерсонифицированныйУчет.ОбъектXDTOИзДерева(СтрокаЗастрахованного, "АдресЗЛ"));
				Если ЗначениеЗаполнено(СтруктураАдреса) Тогда
					УправлениеКонтактнойИнформацией.ЗаполнитьКонтактнуюИнформациюОбъекта(
					ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица,
					СтруктураАдреса);
				КонецЕсли;
				
			Иначе
				
				ДополнитьСведенияФизическогоЛица(ФизическоеЛицо, ДанныеФизическогоЛица);
				
			КонецЕсли;
			
			Если МассивФизическихЛиц.Найти(ФизическоеЛицо) = Неопределено Тогда
				МассивФизическихЛиц.Добавить(ФизическоеЛицо);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СоздатьСотрудниковОрганизации(МассивФизическихЛиц, ОрганизацияИзФайлаПФР);
	
КонецПроцедуры

&НаСервере
Функция ЭтоДокументАДВ_6_2(ДеревоXML)
	Возврат ДеревоXML.Свойства().Получить("ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ") <> Неопределено;
КонецФункции 

&НаСервере
Функция ЭтоДокументРСВ(ДеревоXML)
		
	Если ДеревоXML.Свойства().Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_2014") <> Неопределено 
		Или ДеревоXML.Свойства().Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_2015") <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции 

&НаСервере
Процедура ЗаполнитьДанныеФизическогоЛицаИзЗначенияXDTO(ДанныеФизическогоЛица, ЗначениеXDTO, СоответствиеФизическихЛиц, ЭтоФайлПФР)
	
	ФизическоеЛицо = Неопределено;
	
	Если ЭтоФайлПФР Тогда
		
		Фамилия 	= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ФИО/Фамилия");
		Фамилия     = Лев(Фамилия,1) + НРег(Сред(Фамилия,2));
		
		Имя 		= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ФИО/Имя");
		Имя 		= Лев(Имя,1) + НРег(Сред(Имя,2));
		
		Отчество 	= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ФИО/Отчество");
		Отчество 	= Лев(Отчество,1) + НРег(Сред(Отчество,2));
		
		СтраховойНомерПФР = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "СтраховойНомер");
		
		Если ЗначениеЗаполнено(СтраховойНомерПФР) Тогда
			// Пробуем найти ФизЛицо по СтраховойНомерПФР.
			ФизическоеЛицо = СоответствиеФизическихЛиц[СтраховойНомерПФР];
		КонецЕсли;
		Если ФизическоеЛицо = Неопределено Тогда
			// Пробуем найти ФизЛицо ФИО
			ФизическоеЛицо = СоответствиеФизическихЛиц[Фамилия + " " + Имя + " " +Отчество];
		КонецЕсли;
		
		ДанныеФизическогоЛица.ФизическоеЛицо = ФизическоеЛицо;
		ДанныеФизическогоЛица.Фамилия  = Фамилия;
		ДанныеФизическогоЛица.Имя	   = Имя;
		ДанныеФизическогоЛица.Отчество = Отчество;
		ДанныеФизическогоЛица.СтраховойНомерПФР = СтраховойНомерПФР;
		
	Иначе
		
		Фамилия			= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ПолучДох/ФИО/Фамилия");
		Фамилия			= Лев(Фамилия,1) + НРег(Сред(Фамилия,2));
		
		Имя				= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ПолучДох/ФИО/Имя");
		Имя				= Лев(Имя,1) + НРег(Сред(Имя,2));
		
		Отчество		= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ПолучДох/ФИО/Отчество");
		Отчество		= Лев(Отчество,1) + НРег(Сред(Отчество,2));
		
		ИНН				= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ПолучДох/ИННФЛ");
		
		ДатаРожденияСтрокой	= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ПолучДох/ДатаРожд");
		ДатаРождения		= Дата(1, 1, 1);
		Если Не ПустаяСтрока(ДатаРожденияСтрокой) Тогда
			ДатаРождения= Дата(Прав(ДатаРожденияСтрокой, 4), Сред(ДатаРожденияСтрокой, 4, 2), Лев(ДатаРожденияСтрокой, 2));
		КонецЕсли;
		
		УдостоверениеЛичностиВид		= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ПолучДох/УдЛичнФЛ/КодУдЛичн");
		УдостоверениеЛичностиСерияНомер	= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ПолучДох/УдЛичнФЛ/СерНомДок");
		
		Если ЗначениеЗаполнено(ИНН) Тогда
			// Пробуем найти ФизЛицо по ИНН.
			ФизическоеЛицо = СоответствиеФизическихЛиц[ИНН];
		КонецЕсли;
		Если ФизическоеЛицо = Неопределено Тогда
			// Пробуем найти ФизЛицо ФИО
			ФизическоеЛицо = СоответствиеФизическихЛиц[Фамилия + " " + Имя + " " +Отчество];
		КонецЕсли;
		
		ДанныеФизическогоЛица.ФизическоеЛицо	= ФизическоеЛицо;
		ДанныеФизическогоЛица.Фамилия			= Фамилия;
		ДанныеФизическогоЛица.Имя				= Имя;
		ДанныеФизическогоЛица.Отчество			= Отчество;
		ДанныеФизическогоЛица.ИНН				= ИНН;
		ДанныеФизическогоЛица.ДатаРождения		= ДатаРождения;
		ДанныеФизическогоЛица.УдостоверениеЛичностиВид			= УдостоверениеЛичностиВид;
		ДанныеФизическогоЛица.УдостоверениеЛичностиСерияНомер	= УдостоверениеЛичностиСерияНомер;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоответствиеДокументовУдостоверяющихЛичность()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДокументовФизическихЛиц.Ссылка,
	|	ВидыДокументовФизическихЛиц.КодМВД КАК КодДокумента
	|ИЗ
	|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц";
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеДокументовУдостоверяющихЛичность = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СоответствиеДокументовУдостоверяющихЛичность.Вставить(Выборка.КодДокумента, Выборка.Ссылка)
	КонецЦикла;
	
	Возврат СоответствиеДокументовУдостоверяющихЛичность;

КонецФункции


&НаСервере
Процедура ЗагрузитьСведенияИзФайловИФНСНаСервере(СоответствиеИмпортируемыхФайлов)
	
	Для Каждого ОписаниеСправкиНДФЛ Из СоответствиеИмпортируемыхФайлов Цикл 
		ЗагрузитьСведенияИзФайлаИФНСНаСервере(ОписаниеСправкиНДФЛ);
	КонецЦикла;
	
	// Уточним сведения об организациях.
	ЗаполнитьДанныеОбОрганизациях();
	Элементы.СписокОрганизаций.Обновить();
	ОбновитьФормуПоНастройкам();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСведенияИзФайлаИФНСНаСервере(ОписаниеСправкиНДФЛ)
	
	КодыДоходов = Новый Массив;
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.КодДоходаПоУмолчанию.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2010.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2201.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2202.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2203.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2204.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2205.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2206.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2207.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2208.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2209.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2210.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2760.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2762.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2770.Код);
	КодыДоходов.Добавить(Справочники.ВидыДоходовНДФЛ.Код2791.Код);
	
	МассивИменПачек = Новый Массив;
	ИмяФайлаНДФЛ = ОписаниеСправкиНДФЛ.Ключ;
	СоответствиеИменФайлов = Новый Соответствие;
	Для Каждого ОписаниеПомещенногоФайла Из ОписаниеСправкиНДФЛ.Значение.МассивВыбранныхФайлов Цикл
		Если ОписаниеПомещенногоФайла.Имя <> ИмяФайлаНДФЛ Тогда
			МассивИменПачек.Добавить(ОписаниеПомещенногоФайла.Имя);
		КонецЕсли; 
		СоответствиеИменФайлов.Вставить(ОписаниеПомещенногоФайла.Имя, ОписаниеПомещенногоФайла.Хранение);
	КонецЦикла;
	
	ХранениеФайлаНДФЛ = СоответствиеИменФайлов.Получить(ИмяФайлаНДФЛ);
	ДеревоСведенийСправкиНДФЛ = ДеревоСведенийНДФЛИзВременногоХранилища(ХранениеФайлаНДФЛ);
	
	Если ДеревоСведенийСправкиНДФЛ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОрганизаций = ТаблицаОрганизацийДляЗагрузкиИзФайлов();
	
	ОрганизацияИзФайлаФНС = ДобавитьОрганизациюПоДаннымИзФайлаИФНС(ДеревоСведенийСправкиНДФЛ.СвРекв, ДеревоСведенийСправкиНДФЛ.Документ, ТаблицаОрганизаций);
	
	МассивДанныеФизическихЛиц = ПерсонифицированныйУчет.СписокXDTOИзДерева(ДеревоСведенийСправкиНДФЛ, "Документ");
	
	ИННФизическихЛиц = ИННФизическихЛиц();
	СоответствиеДокументовУдостоверяющихЛичность = СоответствиеДокументовУдостоверяющихЛичность();
	ДанныеФизическогоЛица = Новый Структура("ФизическоеЛицо, Фамилия, Имя, Отчество, СтраховойНомерПФР, ИНН, ДатаРождения, УдостоверениеЛичностиВид, УдостоверениеЛичностиСерияНомер");
	
	МассивФизическихЛиц = Новый Массив;
	Для Каждого СтрокаФизическоеЛицо Из МассивДанныеФизическихЛиц Цикл
		
		ЗаполнитьДанныеФизическогоЛицаИзЗначенияXDTO(ДанныеФизическогоЛица, СтрокаФизическоеЛицо, ИННФизическихЛиц, Ложь);
		ФизическоеЛицо = ДанныеФизическогоЛица.ФизическоеЛицо;
		
		Если ФизическоеЛицо = Неопределено Тогда
			
			ФизическоеЛицо = НовоеФизическоеЛицо(ДанныеФизическогоЛица, СоответствиеДокументовУдостоверяющихЛичность);
			
		Иначе
			
			ДополнитьСведенияФизическогоЛица(ФизическоеЛицо, ДанныеФизическогоЛица, СоответствиеДокументовУдостоверяющихЛичность);
			
		КонецЕсли;
		
		СтруктураАдреса = СтрокаАдресаПоXDTO(ПерсонифицированныйУчет.ОбъектXDTOИзДерева(СтрокаФизическоеЛицо, "ПолучДох/АдрМЖРФ"), Истина);
		Если ЗначениеЗаполнено(СтруктураАдреса) Тогда
			УправлениеКонтактнойИнформацией.ЗаполнитьКонтактнуюИнформациюОбъекта(
			ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица,
			СтруктураАдреса);
		Иначе
			
			СтруктураАдреса = СтрокаАдресаПоXDTO(ПерсонифицированныйУчет.ОбъектXDTOИзДерева(СтрокаФизическоеЛицо, "ПолучДох/АдрИНО"), Ложь);
			Если ЗначениеЗаполнено(СтруктураАдреса) Тогда
				УправлениеКонтактнойИнформацией.ЗаполнитьКонтактнуюИнформациюОбъекта(
				ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица,
				СтруктураАдреса);
			КонецЕсли;
			
		КонецЕсли;
		
		СвСумДох = ПерсонифицированныйУчет.СписокXDTOИзДерева(СтрокаФизическоеЛицо, "СведДох/ДохВыч/СвСумДох");
		Для каждого СтрокаДохода Из СвСумДох Цикл
			КодДоход = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(СтрокаДохода, "КодДоход");
			Если КодыДоходов.Найти(КодДоход) <> Неопределено Тогда
				МассивФизическихЛиц.Добавить(ФизическоеЛицо);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	СоздатьСотрудниковОрганизации(МассивФизическихЛиц, ОрганизацияИзФайлаФНС);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСведенияИзФайловРСВНаСервере(СоответствиеИмпортируемыхФайлов)

	Для Каждого ОписаниеФайла Из СоответствиеИмпортируемыхФайлов Цикл 
		ЗагрузитьСведенияИзФайлаРСВНаСервере(ОписаниеФайла);
	КонецЦикла;
	
	// Уточним сведения об организациях.
	ЗаполнитьДанныеОбОрганизациях();
	Элементы.СписокОрганизаций.Обновить();
	ОбновитьФормуПоНастройкам();	

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСведенияИзФайлаРСВНаСервере(ОписаниеФайла)

	АдресВХранилище = ОписаниеФайла.Значение.МассивВыбранныхФайлов[0].Хранение;
	
	ФайлСведений = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ФайлСведений.Записать(ИмяВременногоФайла);
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
		ДеревоXML = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
	Исключение
		Возврат;
	КонецПопытки;
	УдалитьФайлы(ИмяВременногоФайла);
	
	ТаблицаОрганизаций = ТаблицаОрганизацийДляЗагрузкиИзФайлов();
	
	ИННИзФайла = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ДеревоXML,"Документ/СвНП/НПЮЛ/ИННЮЛ");
	Если ИННИзФайла = Неопределено Тогда
		Юрлицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		ИННИзФайла = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ДеревоXML,"Документ/СвНП/НПФЛ/ИННФЛ"); 
		КППИзФайла = "";
		НаименованиеОрганизацииИзФайла = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ДеревоXML,"Документ/СвНП/НПФЛ/ФИО/Фамилия");
	Иначе
		Юрлицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КППИзФайла = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ДеревоXML,"Документ/СвНП/НПЮЛ/КПП");
		НаименованиеОрганизацииИзФайла = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ДеревоXML,"Документ/СвНП/НПЮЛ/НаимОрг");
	КонецЕсли;
	
	ПараметрыОрганизации = ПараметрыОрганизацииСозданиеИзФайловЗагрузки();
	ПараметрыОрганизации.Наименование = НаименованиеОрганизацииИзФайла;
	ПараметрыОрганизации.ИНН = ИННИзФайла;
	ПараметрыОрганизации.КПП = КППИзФайла;
	ПараметрыОрганизации.ЮридическоеФизическоеЛицо = Юрлицо;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИНН", ИННИзФайла); 
	Строки = ТаблицаОрганизаций.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		ОрганизацияИзФайла = НоваяОрганизация(ПараметрыОрганизации);
		НоваяСтрока = ТаблицаОрганизаций.Добавить();
		НоваяСтрока.ИНН = ИННИзФайла;
		НоваяСтрока.КПП = КППИзФайла;
	Иначе
		ДополнитьСведенияОрганизации(Строки[0], ПараметрыОрганизации);
		ОрганизацияИзФайла = Строки[0].Организация;	
	КонецЕсли;
	
	ДанныеФизическихЛиц = ПерсонифицированныйУчет.СписокXDTOИзДерева(ДеревоXML.Документ.РасчетСВ, "ПерсСвСтрахЛиц");
	Если ДанныеФизическихЛиц = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИННФизическихЛиц = ИННФизическихЛиц();
	СтраховыеНомераФизическихЛиц = СтраховыеНомераФизическихЛиц();
	СоответствиеДокументовУдостоверяющихЛичность = СоответствиеДокументовУдостоверяющихЛичность();
	
	МассивФизическихЛиц = Новый Массив;
	Для Каждого ЗначениеXDTO Из ДанныеФизическихЛиц Цикл
		
		ДанныеФизическогоЛица = Новый Структура("
		|ФизическоеЛицо,
		|Фамилия, Имя, Отчество, Пол,
		|СтраховойНомерПФР,
		|ИНН, ДатаРождения,
		|УдостоверениеЛичностиВид,
		|УдостоверениеЛичностиСерияНомер");
		
		Фамилия			= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ДанФЛПолуч/ФИО/Фамилия");
		Фамилия			= Лев(Фамилия,1) + НРег(Сред(Фамилия,2));
		
		Имя				= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ДанФЛПолуч/ФИО/Имя");
		Имя				= Лев(Имя,1) + НРег(Сред(Имя,2));
		
		Отчество		= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ДанФЛПолуч/ФИО/Отчество");
		Отчество		= Лев(Отчество,1) + НРег(Сред(Отчество,2));
		
		Пол				= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ДанФЛПолуч/Пол");
		Пол 			= ?(Пол = "1", Перечисления.ПолФизическогоЛица.Мужской, Перечисления.ПолФизическогоЛица.Женский);
		
		ИНН				= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ДанФЛПолуч/ИННФЛ");
		СНИЛС			= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ДанФЛПолуч/СНИЛС");
		
		ДатаРожденияСтрокой	= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ДанФЛПолуч/ДатаРожд");
		ДатаРождения		= Дата(1, 1, 1);
		Если Не ПустаяСтрока(ДатаРожденияСтрокой) Тогда
			ДатаРождения= Дата(Прав(ДатаРожденияСтрокой, 4), Сред(ДатаРожденияСтрокой, 4, 2), Лев(ДатаРожденияСтрокой, 2));
		КонецЕсли;
		
		УдостоверениеЛичностиВид		= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ДанФЛПолуч/КодВидДок");
		УдостоверениеЛичностиСерияНомер	= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(ЗначениеXDTO, "ДанФЛПолуч/СерНомДок");
		
		Если ЗначениеЗаполнено(ИНН) Тогда
			// Пробуем найти ФизЛицо по ИНН.
			ФизическоеЛицо = ИННФизическихЛиц[ИНН];
		КонецЕсли;
		Если ФизическоеЛицо = Неопределено И ЗначениеЗаполнено(СНИЛС) Тогда
			// Пробуем найти ФизЛицо по СНИЛС.
			ФизическоеЛицо = СтраховыеНомераФизическихЛиц[СНИЛС];
		КонецЕсли;
		
		ДанныеФизическогоЛица.ФизическоеЛицо	= ФизическоеЛицо;
		ДанныеФизическогоЛица.Фамилия			= Фамилия;
		ДанныеФизическогоЛица.Имя				= Имя;
		ДанныеФизическогоЛица.Отчество			= Отчество;
		ДанныеФизическогоЛица.Пол				= Пол;
		ДанныеФизическогоЛица.ИНН				= ИНН;
		ДанныеФизическогоЛица.СтраховойНомерПФР = СНИЛС;
		ДанныеФизическогоЛица.ДатаРождения		= ДатаРождения;
		ДанныеФизическогоЛица.УдостоверениеЛичностиВид			= УдостоверениеЛичностиВид;
		ДанныеФизическогоЛица.УдостоверениеЛичностиСерияНомер	= УдостоверениеЛичностиСерияНомер;
		
		Если ФизическоеЛицо = Неопределено Тогда
			ФизическоеЛицо = НовоеФизическоеЛицо(ДанныеФизическогоЛица, СоответствиеДокументовУдостоверяющихЛичность);
			МассивФизическихЛиц.Добавить(ФизическоеЛицо);
		Иначе
			ДополнитьСведенияФизическогоЛица(ФизическоеЛицо, ДанныеФизическогоЛица, СоответствиеДокументовУдостоверяющихЛичность);
		КонецЕсли;
		
	КонецЦикла;
	
	СоздатьСотрудниковОрганизации(МассивФизическихЛиц, ОрганизацияИзФайла);

КонецПроцедуры

&НаСервере
Функция НовоеФизическоеЛицо(ДанныеФизическогоЛица, СоответствиеДокументовУдостоверяющихЛичность = Неопределено)
	
	ФизическоеЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	
	ФизическоеЛицоОбъект.Наименование = 
	КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(ДанныеФизическогоЛица.Фамилия, ДанныеФизическогоЛица.Имя, ДанныеФизическогоЛица.Отчество, "");
	ФизическоеЛицоОбъект.ФИО = ФизическоеЛицоОбъект.Наименование;
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.ИНН) Тогда
		ФизическоеЛицоОбъект.ИНН = ДанныеФизическогоЛица.ИНН;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.СтраховойНомерПФР) Тогда
		ФизическоеЛицоОбъект.СтраховойНомерПФР = ДанныеФизическогоЛица.СтраховойНомерПФР;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.ДатаРождения) Тогда
		ФизическоеЛицоОбъект.ДатаРождения = ДанныеФизическогоЛица.ДатаРождения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.Отчество) И Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.Пол) Тогда
		ФизическоеЛицоОбъект.Пол = СотрудникиКлиентСервер.ОпределитьПолПоОтчеству(ДанныеФизическогоЛица.Отчество);
	КонецЕсли;
	
	ФизическоеЛицоОбъект.Записать();
	
	ФизическоеЛицо = ФизическоеЛицоОбъект.Ссылка;
	
	ПериодДанных = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	
	Набор = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
	Набор.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	
	Запись = Набор.Добавить();
	Запись.Фамилия	= ДанныеФизическогоЛица.Фамилия;
	Запись.Имя		= ДанныеФизическогоЛица.Имя;
	Запись.Отчество	= ДанныеФизическогоЛица.Отчество;
	Запись.ФизическоеЛицо	= ФизическоеЛицо;
	Запись.Период	= ПериодДанных;
	
	Набор.Записать();
	
	Если СоответствиеДокументовУдостоверяющихЛичность <> Неопределено Тогда
		
		ВидДокумента = СоответствиеДокументовУдостоверяющихЛичность.Получить(ДанныеФизическогоЛица.УдостоверениеЛичностиВид);
		Если ЗначениеЗаполнено(ВидДокумента) И ЗначениеЗаполнено(ДанныеФизическогоЛица.УдостоверениеЛичностиСерияНомер) Тогда
			Набор = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
			Набор.Отбор.Физлицо.Установить(ФизическоеЛицо);
			
			Запись = Набор.Добавить();
			Запись.Физлицо	= ФизическоеЛицо;
			Запись.ВидДокумента	= ВидДокумента;
			
			НачалоНомера = СтрНайти(ДанныеФизическогоЛица.УдостоверениеЛичностиСерияНомер, " ", НаправлениеПоиска.СКонца);
			Если НачалоНомера = 0 Тогда
				Запись.Номер	= ДанныеФизическогоЛица.УдостоверениеЛичностиСерияНомер;
			Иначе
				Запись.Серия	= Сред(ДанныеФизическогоЛица.УдостоверениеЛичностиСерияНомер, 1, НачалоНомера - 1);
				Запись.Номер	= Сред(ДанныеФизическогоЛица.УдостоверениеЛичностиСерияНомер, НачалоНомера + 1);
			КонецЕсли;
			Запись.Период	= ПериодДанных;
			
			Запись.ЯвляетсяДокументомУдостоверяющимЛичность	= Истина;
			
			Набор.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФизическоеЛицо;
	
КонецФункции

&НаСервере
Процедура СоздатьСотрудниковОрганизации(МассивФизическихЛиц, ОрганизацияСотрудников)
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(ОрганизацияСотрудников);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица",МассивФизическихЛиц);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ГоловнаяОрганизация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо В(&ФизическиеЛица)
	|	И Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	Для каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл
		
		Если МассивСсылок.Найти(ФизическоеЛицо) = Неопределено Тогда
			НовыйСотрудник = Справочники.Сотрудники.СоздатьЭлемент();
			НовыйСотрудник.ГоловнаяОрганизация = ГоловнаяОрганизация;
			НовыйСотрудник.ФизическоеЛицо = ФизическоеЛицо;
			НовыйСотрудник.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "Наименование");
			НовыйСотрудник.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаОрганизацийДляЗагрузкиИзФайлов()
	
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ТаблицаОрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОрганизаций.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	ТаблицаОрганизаций.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	ТаблицаОрганизаций.Колонки.Добавить("РегистрационныйНомерПФР", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатаАктуальности = ТекущаяДатаСеанса();
	Пока Выборка.Следующий() Цикл
		ДанныеОрганизации = ПерсонифицированныйУчет.СведенияОбОрганизации(Выборка.Организация, ДатаАктуальности);
		НоваяСтрока = ТаблицаОрганизаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеОрганизации);
	КонецЦикла;
	
	Возврат ТаблицаОрганизаций;
	
КонецФункции

&НаСервере
Функция ПараметрыОрганизацииСозданиеИзФайловЗагрузки()
	
	ПараметрыОрганизации = Новый Структура;
	ПараметрыОрганизации.Вставить("Наименование", "");
	ПараметрыОрганизации.Вставить("НаименованиеСокращенное", "");
	ПараметрыОрганизации.Вставить("НаименованиеПолное", "");
	ПараметрыОрганизации.Вставить("ИНН", "");
	ПараметрыОрганизации.Вставить("КПП", "");
	ПараметрыОрганизации.Вставить("ОГРН", "");
	ПараметрыОрганизации.Вставить("РегистрационныйНомерПФР", "");
	ПараметрыОрганизации.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПараметрыОрганизации.Вставить("КодНО", "");
	
	Возврат ПараметрыОрганизации;
	
КонецФункции 

&НаСервере
Функция ДобавитьОрганизациюПоДаннымИзФайлаАДВ_6_2(СоставительПачки, ТаблицаОрганизаций)
	
	СоставительПачкиИНН = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(СоставительПачки, "Страхователь/НалоговыйНомер/ИНН");
	Если СтрДлина(СоставительПачкиИНН) = 10 Тогда
		СоставительПачкиКодЕГРЮЛ = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(СоставительПачки, "Страхователь/КодЕГРЮЛ");
		ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		СоставительПачкиКПП = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(СоставительПачки, "Страхователь/НалоговыйНомер/КПП");
	Иначе
		СоставительПачкиКодЕГРЮЛ = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(СоставительПачки, "Страхователь/КодЕГРИП");
		ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		СоставительПачкиКПП = "";
	КонецЕсли;
	СоставительПачкиНаименованиеОрганизации = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(СоставительПачки, "Страхователь/НаименованиеОрганизации");
	СоставительПачкиНаименованиеКраткое = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(СоставительПачки, "Страхователь/НаименованиеКраткое");
	СоставительПачкиРегистрационныйНомер = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(СоставительПачки, "Страхователь/РегистрационныйНомер");
	
	ПараметрыОрганизации = ПараметрыОрганизацииСозданиеИзФайловЗагрузки();
	
	ПараметрыОрганизации.Наименование = СоставительПачкиНаименованиеКраткое;
	ПараметрыОрганизации.НаименованиеСокращенное = СоставительПачкиНаименованиеКраткое;
	ПараметрыОрганизации.НаименованиеПолное = СоставительПачкиНаименованиеОрганизации;
	ПараметрыОрганизации.ИНН = СоставительПачкиИНН;
	ПараметрыОрганизации.КПП = СоставительПачкиКПП;
	ПараметрыОрганизации.ОГРН = СоставительПачкиКодЕГРЮЛ;
	ПараметрыОрганизации.РегистрационныйНомерПФР = СоставительПачкиРегистрационныйНомер;
	ПараметрыОрганизации.ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицо;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИНН", СоставительПачкиИНН); 
	Строки = ТаблицаОрганизаций.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		
		НоваяОрганизация = НоваяОрганизация(ПараметрыОрганизации);
		
		НоваяСтрока = ТаблицаОрганизаций.Добавить();
		НоваяСтрока.ИНН = СоставительПачкиИНН;
		НоваяСтрока.КПП = СоставительПачкиКПП;
		НоваяСтрока.РегистрационныйНомерПФР = СоставительПачкиРегистрационныйНомер;
		
		Возврат НоваяОрганизация;
		
	Иначе
		
		ДополнитьСведенияОрганизации(Строки[0], ПараметрыОрганизации);
		Возврат Строки[0].Организация;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДобавитьОрганизациюПоДаннымИзФайлаРСВ_1(ПачкаДокументов, ТаблицаОрганизаций)
	
	Если ПачкаДокументов.Свойства().Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_2014") <> Неопределено Тогда
		ДанныеОтчета = ПачкаДокументов.РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_2014;
	ИначеЕсли ПачкаДокументов.Свойства().Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_2015") <> Неопределено Тогда
		ДанныеОтчета = ПачкаДокументов.РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_2015;
	КонецЕсли;	
	
	СоставительПачкиИНН = ДанныеОтчета.ИННсимвольный;
	Если СтрДлина(СоставительПачкиИНН) = 10 Тогда
		ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		СоставительПачкиКПП = ДанныеОтчета.КПП;
		СоставительПачкиНаименованиеОрганизации = ДанныеОтчета.НаименованиеОрганизации;
	Иначе
		ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		СоставительПачкиКПП = "";
		СоставительПачкиНаименованиеОрганизации = ДанныеОтчета.ФИОфизическогоЛица.Фамилия;
	КонецЕсли;
	СоставительПачкиНаименованиеКраткое  = СоставительПачкиНаименованиеОрганизации;
	СоставительПачкиРегистрационныйНомер = ДанныеОтчета.РегистрационныйНомерПФР;
	
	ПараметрыОрганизации = ПараметрыОрганизацииСозданиеИзФайловЗагрузки();
	
	ПараметрыОрганизации.Наименование = СоставительПачкиНаименованиеКраткое;
	ПараметрыОрганизации.НаименованиеСокращенное = СоставительПачкиНаименованиеКраткое;
	ПараметрыОрганизации.НаименованиеПолное = СоставительПачкиНаименованиеОрганизации;
	ПараметрыОрганизации.ИНН = СоставительПачкиИНН;
	ПараметрыОрганизации.КПП = СоставительПачкиКПП;
	ПараметрыОрганизации.РегистрационныйНомерПФР = СоставительПачкиРегистрационныйНомер;
	ПараметрыОрганизации.ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицо;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИНН", СоставительПачкиИНН); 
	Строки = ТаблицаОрганизаций.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		
		НоваяОрганизация = НоваяОрганизация(ПараметрыОрганизации);
		
		НоваяСтрока = ТаблицаОрганизаций.Добавить();
		НоваяСтрока.ИНН = СоставительПачкиИНН;
		НоваяСтрока.КПП = СоставительПачкиКПП;
		НоваяСтрока.РегистрационныйНомерПФР = СоставительПачкиРегистрационныйНомер;
		
		Возврат НоваяОрганизация;
		
	Иначе
		
		ДополнитьСведенияОрганизации(Строки[0], ПараметрыОрганизации);
		Возврат Строки[0].Организация;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДобавитьОрганизациюПоДаннымИзФайлаИФНС(СоставительПачки, СписокФизическихЛиц, ТаблицаОрганизаций)
	
	СоставительПачкиИНН	= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(СоставительПачки, "СвФЛ/ИННФЛ");
	СоставительПачкиКПП	= "";
	СоставительПачкиНаименованиеОрганизации = "";
	КодНО = "";
	Если СоставительПачкиИНН = Неопределено Тогда
		ЮридическоеФизическоеЛицо	= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		СоставительПачкиИНН			= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(СоставительПачки, "СвЮЛ/ИННЮЛ");
		СоставительПачкиКПП			= ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(СоставительПачки, "СвЮЛ/КПП");
		
		Если ТипЗнч(СписокФизическихЛиц) = Тип("ОбъектXDTO") Тогда
			СоставительПачкиНаименованиеОрганизации = СписокФизическихЛиц.СвНА.СвНАЮЛ.НаимОрг;
			
		Иначе
			Если СписокФизическихЛиц.Количество() > 0 Тогда
				СоставительПачкиНаименованиеОрганизации = СписокФизическихЛиц[0].СвНА.СвНАЮЛ.НаимОрг;
				КодНО = СписокФизическихЛиц[0].КодНО;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ЮридическоеФизическоеЛицо	= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
		Если ТипЗнч(СписокФизическихЛиц) = Тип("ОбъектXDTO") Тогда
			СоставительПачкиНаименованиеОрганизации = СписокФизическихЛиц.СвНА.СвНАФЛ.ФИО.Фамилия;
			
		Иначе
			Если СписокФизическихЛиц.Количество() > 0 Тогда
				СоставительПачкиНаименованиеОрганизации = СписокФизическихЛиц[0].СвНА.СвНАФЛ.ФИО.Фамилия;
				КодНО = СписокФизическихЛиц[0].КодНО;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(КодНО) Тогда
		Если Лев(СоставительПачкиКПП,4) <> КодНО Тогда
			СоставительПачкиКПП = "";
		КонецЕсли;
	Иначе
		СоставительПачкиКПП = "";
	КонецЕсли;
	
	ПараметрыОрганизации = ПараметрыОрганизацииСозданиеИзФайловЗагрузки();
	ПараметрыОрганизации.Наименование = СоставительПачкиНаименованиеОрганизации;
	ПараметрыОрганизации.ИНН = СоставительПачкиИНН;
	ПараметрыОрганизации.КПП = СоставительПачкиКПП;
	ПараметрыОрганизации.ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицо;
	ПараметрыОрганизации.КодНО = КодНО;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИНН", СоставительПачкиИНН); 
	Строки = ТаблицаОрганизаций.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		
		НоваяОрганизация = НоваяОрганизация(ПараметрыОрганизации);
		
		НоваяСтрока = ТаблицаОрганизаций.Добавить();
		НоваяСтрока.ИНН = СоставительПачкиИНН;
		НоваяСтрока.КПП = СоставительПачкиКПП;
		
		Возврат НоваяОрганизация;
		
	Иначе
		
		ДополнитьСведенияОрганизации(Строки[0], ПараметрыОрганизации);
		Возврат Строки[0].Организация;	
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДеревоСведенийНДФЛИзВременногоХранилища(АдресВХранилище) 
	
	ФайлСведений = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ФайлСведений.Записать(ИмяВременногоФайла);
	
	Отказ = Ложь;
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
		ДеревоXML = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	Если Не Отказ Тогда
		
		Попытка
			ВерсияФормата = ДеревоXML.Получить("/ВерсФорм");
		Исключение
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли; 
	
	ВерсияПодходит = ВерсияФормата = "5.02" Или ВерсияФормата = "5.03" Или ВерсияФормата = "5.04"  Или ВерсияФормата = "5.05";
	
	Отказ = Отказ Или Не ВерсияПодходит;
	
	Если Отказ Тогда
		ДеревоСведений = Неопределено;
		
	Иначе
		ДеревоСведений = ДеревоXML;
		
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ДеревоСведений;
	
КонецФункции

&НаСервере
Функция СтраховыеНомераФизическихЛиц()
	
	СтраховыеНомераФизическихЛиц = Новый Соответствие; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.СтраховойНомерПФР
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФИОФизическихЛиц.ФизическоеЛицо,
	|	ФИОФизическихЛиц.Фамилия + "" "" + ФИОФизическихЛиц.Имя + "" "" + ФИОФизическихЛиц.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
	|ГДЕ
	|	ФИОФизическихЛиц.ФизическоеЛицо.СтраховойНомерПФР = """"";
	Выборка =Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтраховыеНомераФизическихЛиц[Выборка.СтраховойНомерПФР] = Выборка.Ссылка
	КонецЦикла;
	
	Возврат СтраховыеНомераФизическихЛиц;
	
КонецФункции 

&НаСервере
Функция ИННФизическихЛиц()
	
	ИННФизическихЛиц = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.ИНН
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФИОФизическихЛиц.ФизическоеЛицо,
	|	ФИОФизическихЛиц.Фамилия + "" "" + ФИОФизическихЛиц.Имя + "" "" + ФИОФизическихЛиц.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
	|ГДЕ
	|	ФИОФизическихЛиц.ФизическоеЛицо.ИНН = """"";
	Выборка =Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИННФизическихЛиц[Выборка.ИНН] = Выборка.Ссылка
	КонецЦикла;
	
	Возврат ИННФизическихЛиц;
	
КонецФункции 

&НаСервере
Функция СтрокаАдресаПоXDTO(АдресXDTO, ЭтоАдресРФ)
	
	Если АдресXDTO = Неопределено Тогда
		Возврат "";
	КонецЕсли; 
	СтруктураАдреса = РаботаСАдресамиКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Если ЭтоАдресРФ Тогда
		
		Индекс = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(АдресXDTO,"Индекс");
		
		Если Не ПустаяСтрока(Индекс) Тогда
			СтруктураАдреса.Индекс = Индекс;
		КонецЕсли;
		
		КодРегион = "" + ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(АдресXDTO,"КодРегион");
		Если Не ПустаяСтрока(КодРегион) Тогда
			НаименованиеРегиона = АдресныйКлассификатор.НаименованиеРегионаПоКоду(КодРегион);
			Если НаименованиеРегиона <> Неопределено Тогда
				СтруктураАдреса.Регион = НаименованиеРегиона;
				РегионСокращение = "";
				МассивСлов = СтрРазделить(НаименованиеРегиона, " ", Ложь);
				Если МассивСлов.Количество() > 1 Тогда
					РегионСокращение = МассивСлов[МассивСлов.Количество() - 1];
				КонецЕсли;
				СтруктураАдреса.РегионСокращение = РегионСокращение;
			КонецЕсли;
		КонецЕсли;
		
		Район = "" + ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(АдресXDTO,"Район");
		
		Если Не ПустаяСтрока(Район) Тогда
			СтруктураАдреса.Район = Район;
		КонецЕсли;
		
		Город = "" + ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(АдресXDTO,"Город");
		
		Если Не ПустаяСтрока(Город) Тогда
			СтруктураАдреса.Город = Город;
		КонецЕсли;
		
		НаселенныйПункт = "" + ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(АдресXDTO,"НаселПункт");
		
		Если Не ПустаяСтрока(НаселенныйПункт) Тогда
			СтруктураАдреса.НаселенныйПункт = НаселенныйПункт;
		КонецЕсли;
		
		Улица = "" + ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(АдресXDTO,"Улица");
		
		Если Не ПустаяСтрока(Улица) Тогда
			СтруктураАдреса.Улица = Улица;
		КонецЕсли;
		
		Дом = "" + ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(АдресXDTO,"Дом");
		
		Если Не ПустаяСтрока(Дом) Тогда
			СтруктураАдреса.Дом = Дом;
			СтруктураАдреса.ТипДома = "Дом";
		КонецЕсли;
		
		Корпус = "" + ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(АдресXDTO,"Корпус");
		
		Если Не ПустаяСтрока(Корпус) Тогда
			СтруктураАдреса.Корпус = Корпус;
			СтруктураАдреса.ТипКорпуса = "Корпус";
		КонецЕсли;
		
		Квартира = "" + ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(АдресXDTO,"Кварт");
		
		Если Не ПустаяСтрока(Квартира) Тогда
			СтруктураАдреса.Квартира = Квартира;
			СтруктураАдреса.ТипКвартиры = "Квартира";
		КонецЕсли;
		
		Представление = "";
		УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса, Представление);
		СтруктураАдреса.Вставить("Представление", Представление);
		
	Иначе
		
		АдрТекст = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(АдресXDTO,"АдрТекст");
		КодСтраны = ПерсонифицированныйУчет.ЗначениеXDTOИзДерева(АдресXDTO,"КодСтр");
		Если Не ПустаяСтрока(КодСтраны) Тогда
			ДанныеСтраны = Справочники.СтраныМира.ДанныеСтраныМира(КодСтраны);
			Если ДанныеСтраны <> Неопределено Тогда
				Представление = ДанныеСтраны.Наименование;
				СтруктураАдреса.Вставить("НаименованиеСтраны", ДанныеСтраны.Наименование);
				СтруктураАдреса.Вставить("КодСтраны",КодСтраны);
				Если Не ЗначениеЗаполнено(ДанныеСтраны.Ссылка) Тогда
					Ссылка = Справочники.СтраныМира.НайтиПоКоду(ДанныеСтраны.Код);
					ЭтоНовый = Не ЗначениеЗаполнено(Ссылка);
					Если ЭтоНовый Тогда
						Страна = Справочники.СтраныМира.СоздатьЭлемент();
						ЗаполнитьЗначенияСвойств(Страна, ДанныеСтраны);
						Страна.Записать();
						ДанныеСтраны.Ссылка = Страна.Ссылка;
					КонецЕсли;
				КонецЕсли;
				СтруктураАдреса.Вставить("Страна", ДанныеСтраны.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Представление = "";
		УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса, Представление);
		Представление = Представление + ?(Не ПустаяСтрока(Представление),", ","") + АдрТекст;
		СтруктураАдреса.Вставить("Представление", Представление);
		
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

&НаСервере
Процедура УдалитьСозданнуюОрганизацию()
	
	ОрганизацияОбъект = СсылкаНаСозданнуюОрганизацию.ПолучитьОбъект();
	НаименованиеОрганизацииПоУмолчанию = НачальнаяНастройкаПрограммы.НаименованиеОрганизацииПоУмолчанию();
	Если ОрганизацияОбъект.Наименование <> НаименованиеОрганизацииПоУмолчанию Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ОрганизацияОбъект.Удалить();
	СсылкаНаСозданнуюОрганизацию = Справочники.Организации.ПустаяСсылка();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Функция НоваяОрганизация(ПараметрыОрганизации)
	
	Если ИспользуетсяБазоваяВерсия И ЗначениеЗаполнено(СсылкаНаСозданнуюОрганизацию) Тогда
		УдалитьСозданнуюОрганизацию();
	КонецЕсли;
	
	СсылкаНовойОрганизации = Справочники.Организации.ПолучитьСсылку();
	
	НоваяОрганизация = Справочники.Организации.СоздатьЭлемент();
	НоваяОрганизация.УстановитьСсылкуНового(СсылкаНовойОрганизации);
	ЗаполнитьЗначенияСвойств(НоваяОрганизация, ПараметрыОрганизации);
	
	Если ПараметрыОрганизации.Свойство("РегистрационныйНомерПФР") Тогда
		ПерсонифицированныйУчет.ЗарегистрироватьРегистрационныйНомерПФР(
		СсылкаНовойОрганизации,
		ПараметрыОрганизации.РегистрационныйНомерПФР,
		ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений());
	КонецЕсли;
	
	Регистрация = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
	СсылкаНового = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку();
	Регистрация.УстановитьСсылкуНового(СсылкаНового);
	НоваяОрганизация.РегистрацияВНалоговомОргане = СсылкаНового;
	
	НоваяОрганизация.Записать();
	
	Регистрация.Владелец = НоваяОрганизация.Ссылка;
	Регистрация.КПП = ПараметрыОрганизации.КПП;
	Если ПараметрыОрганизации.Свойство("КодНО") Тогда
		Регистрация.Код = ПараметрыОрганизации.КодНО;
	КонецЕсли;
	Регистрация.Наименование = "ИФНС";
	Регистрация.НаименованиеИФНС = "ИФНС";
	Регистрация.Записать();
	
	Обработки.НачальнаяНастройкаПрограммы.ЗарегистрироватьРегистрациюВНалоговомОргане(НоваяОрганизация.Ссылка, Регистрация.Ссылка);
	
	Возврат НоваяОрганизация.Ссылка;
	
КонецФункции

&НаСервере
Процедура ДополнитьСведенияОрганизации(ДанныеОрганизации, ПараметрыОрганизации)
	
	ОрганизацияОбъектИзФайла = ДанныеОрганизации.Организация.ПолучитьОбъект();
	ЗаписыватьОбъект = Ложь;
	Если ЗначениеЗаполнено(ПараметрыОрганизации.НаименованиеСокращенное) И Не ЗначениеЗаполнено(ОрганизацияОбъектИзФайла.НаименованиеСокращенное) Тогда
		ОрганизацияОбъектИзФайла.НаименованиеСокращенное = ПараметрыОрганизации.НаименованиеСокращенное;
		ЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОрганизации.НаименованиеПолное) И Не ЗначениеЗаполнено(ОрганизацияОбъектИзФайла.НаименованиеПолное) Тогда
		ОрганизацияОбъектИзФайла.НаименованиеПолное = ПараметрыОрганизации.НаименованиеПолное;
		ЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОрганизации.ОГРН) И Не ЗначениеЗаполнено(ОрганизацияОбъектИзФайла.ОГРН) Тогда
		ОрганизацияОбъектИзФайла.ОГРН = ПараметрыОрганизации.ОГРН;
		ЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОрганизации.РегистрационныйНомерПФР) И Не ЗначениеЗаполнено(ДанныеОрганизации.РегистрационныйНомерПФР) Тогда
		ПерсонифицированныйУчет.ЗарегистрироватьРегистрационныйНомерПФР(
		ДанныеОрганизации.Организация,
		ПараметрыОрганизации.РегистрационныйНомерПФР,
		ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений());
		ЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОрганизации.КПП) И Не ЗначениеЗаполнено(ДанныеОрганизации.КПП) Тогда
		РегистрацияСсылка = ОрганизацияОбъектИзФайла.РегистрацияВНалоговомОргане;
		Если ЗначениеЗаполнено(РегистрацияСсылка) Тогда
			Регистрация = РегистрацияСсылка.ПолучитьОбъект();
			Регистрация.КПП = ПараметрыОрганизации.КПП;
			Если ПараметрыОрганизации.Свойство("КодНО") Тогда
				Регистрация.Код = ПараметрыОрганизации.КодНО;
			КонецЕсли;
			Регистрация.Наименование = "ИФНС";
			Регистрация.НаименованиеИФНС = "ИФНС";
			Регистрация.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписыватьОбъект Тогда
		ОрганизацияОбъектИзФайла.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСведенияФизическогоЛица(ФизическоеЛицо, ДанныеФизическогоЛица, СоответствиеДокументовУдостоверяющихЛичность = Неопределено)
	
	ФизическоеЛицоОбъект = ФизическоеЛицо.ПолучитьОбъект();
	ЗаписыватьОбъект = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.СтраховойНомерПФР) И Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.СтраховойНомерПФР) Тогда
		ФизическоеЛицоОбъект.СтраховойНомерПФР = ДанныеФизическогоЛица.СтраховойНомерПФР;
		ЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.ИНН) И Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.ИНН) Тогда
		ФизическоеЛицоОбъект.ИНН = ДанныеФизическогоЛица.ИНН;
		ЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.ДатаРождения) И Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.ДатаРождения) Тогда
		ФизическоеЛицоОбъект.ДатаРождения = ДанныеФизическогоЛица.ДатаРождения;
		ЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если СоответствиеДокументовУдостоверяющихЛичность <> Неопределено Тогда
		
		ВидДокумента = СоответствиеДокументовУдостоверяющихЛичность.Получить(ДанныеФизическогоЛица.УдостоверениеЛичностиВид);
		Если ЗначениеЗаполнено(ВидДокумента) И ЗначениеЗаполнено(ДанныеФизическогоЛица.УдостоверениеЛичностиСерияНомер) Тогда
			ЗаписыватьОбъект = Истина;
			Набор = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
			Набор.Отбор.Физлицо.Установить(ФизическоеЛицо);
			
			Запись = Набор.Добавить();
			Запись.Физлицо	= ФизическоеЛицо;
			Запись.ВидДокумента	= ВидДокумента;
			
			НачалоНомера = СтрНайти(ДанныеФизическогоЛица.УдостоверениеЛичностиСерияНомер, " ", НаправлениеПоиска.СКонца);
			Если НачалоНомера = 0 Тогда
				Запись.Номер	= ДанныеФизическогоЛица.УдостоверениеЛичностиСерияНомер;
			Иначе
				Запись.Серия	= Сред(ДанныеФизическогоЛица.УдостоверениеЛичностиСерияНомер, 1, НачалоНомера - 1);
				Запись.Номер	= Сред(ДанныеФизическогоЛица.УдостоверениеЛичностиСерияНомер, НачалоНомера + 1);
			КонецЕсли;
			Запись.Период	= ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
			
			Запись.ЯвляетсяДокументомУдостоверяющимЛичность	= Истина;
			
			Набор.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаписыватьОбъект Тогда
		ФизическоеЛицоОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьКодыНДФЛДляПремий()

	КодДоходаПоУмолчанию = Справочники.ВидыДоходовНДФЛ.КодДоходаПоУмолчанию;
	Если Не ЗначениеЗаполнено(ЕжемесячнаяПремияКодДоходаНДФЛ) Тогда
		ЕжемесячнаяПремияКодДоходаНДФЛ = КодДоходаПоУмолчанию;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КвартальнаяПремияКодДоходаНДФЛ) Тогда
		КвартальнаяПремияКодДоходаНДФЛ = КодДоходаПоУмолчанию;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ГодоваяПремияКодДоходаНДФЛ) Тогда
		ГодоваяПремияКодДоходаНДФЛ = КодДоходаПоУмолчанию;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПремияРазоваяКодДоходаНДФЛ) Тогда
		ПремияРазоваяКодДоходаНДФЛ = КодДоходаПоУмолчанию;
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьРеквизитыФормыЗначениямиУмолчания()
	
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	РаботаВКОРП = ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
	
	ИспользуетсяБазоваяВерсия = ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации();
	
	Если ИспользуетсяБазоваяВерсия Тогда
		
		ИспользоватьИндексациюЗаработкаИнфоТекст = НСтр("ru = 'Индексация (повышение) заработка сотрудников выполняется в целом по организации (структурному подразделению) и учитывается при расчете среднего заработка.'");
		
		ВыборВидаОрганизацииНастройкаЗаголовок = НСтр("ru = 'Программа может применяться юридическими лицами и индивидуальными предпринимателями.
		|Если программа применяется для индивидуального предпринимателя, установите этот флажок.'");
		
	Иначе
		
		ИспользоватьИндексациюЗаработкаИнфоТекст = НСтр("ru = 'Индексация (повышение) заработка сотрудников выполняется в целом по организации (филиалу, структурному подразделению) и учитывается при расчете среднего заработка.'");
		
		ВыборВидаОрганизацииНастройкаЗаголовок = НСтр("ru = 'Программа может применяться юридическими лицами и индивидуальными предпринимателями.
		|Если программа применяется для индивидуального предпринимателя или ваше предприятие кроме юридических лиц включает в себя индивидуальных предпринимателей, установите этот флажок.'");
		
	КонецЕсли;
	
	ПрочиеДоходыИнфо = НСтр("ru = 'На предприятии могут выплачиваться доходы сторонним физическим лицам (аренда автотранспорта, выплата призов и т.д.)'");
	
	ЗаймыИнфо = НСтр("ru = 'Если на предприятии выдаются займы сотрудникам, их необходимо регистрировать не только для целей погашения займа из зарплаты, но и для регистрации материальной выгоды в случае применения пониженного процента по займу.'");
	
	ИспользоватьОплатуПростоевОписание = НСтр("ru = 'Если на предприятии бывают простои (временная приостановка работы по причинам экономического, технологического, технического или организационного характера), установите этот флажок.'");
	
	ИспользоватьОплатуВнутрисменныхПростоевЗаголовок = НСтр("ru = 'Если на предприятии бывают простои в несколько часов не занимающие весь рабочий день, установите этот флажок.'");
	ИспользоватьОплатуВнутрисменныхПростоевОписание = НСтр("ru = 'Это востребовано только в том случае, если на предприятии бывают краткосрочные простои сотрудников, оплачиваемых по часовому тарифу или сдельно.'");
	
	ИспользоватьДоплатуЗаВыполнениеПланаОписание = НСтр("ru = 'Если на предприятии применяется доплата к зарплате сотрудников за выполнение плановых показателей, установите этот флажок.'");
	
	ДоплатаЗаВыполнениеПланаОписание1 = НСтр("ru = 'Доплата к зарплате может автоматически начисляться как коэффициент выполнения плана.'");
	ДоплатаЗаВыполнениеПланаОписание2 = НСтр("ru = 'Другой способ начисления - процент выручки от продаж, которую обеспечил сотрудник.'");
	
	ШтатноеРасписаниеИсторияИнфоТекст1 = НСтр("ru = 'Вы можете утверждать штатное расписание специальными документами и хранить историю его изменения. Это позволит просмотреть штатное расписание на любую прошлую дату.'");
	ШтатноеРасписаниеИсторияИнфоТекст2 = НСтр("ru = 'Используйте эту возможность, если у вас большая организация с устоявшейся дисциплиной ведения штатного расписания.'");
	
	РасчетЗарплатыПоПодразделениямИнфоНадпись1 = НСтр("ru = 'Если у вас одна или несколько небольших организаций (50-100 сотрудников) и за расчет зарплаты каждой организации отвечает один человек, установите этот флажок.'");
	РасчетЗарплатыПоПодразделениямИнфоНадпись2 = НСтр("ru = 'Это позволит вам выполнять расчет и выплату зарплаты по всей организации сразу, не вводя несколько документов по разным подразделениям.'");
	
	ИспользоватьНесколькоТарифныхСтавокИнфоНадпись = НСтр("ru = 'Применение одновременно нескольких тарифных ставок для одного сотрудника может использоваться, например, при оплате по другому тарифу времени ремонта для водителей, дней в пути при работе вахтовым методом и т.п.'");
	
	ИспользоватьКвалификационнуюНадбавкуОписание = НСтр("ru = 'Если в организации используются квалификационные категории и квалификационные надбавки при описании позиции штатного расписания и при расчете заработной платы, установите этот флажок.'");
	
	КоличествоОрганизацийИнфоНадпись = НСтр("ru = 'В программе можно вести кадровый учет и расчет зарплаты сотрудников нескольких организаций или организации и ее филиалов (обособленных подразделений).'");
	
	Если РаботаВБюджетномУчреждении Тогда
		Элементы.ИспользоватьТарифныеСеткиПриРасчетеЗарплаты.Заголовок = НСтр("ru = 'Используются ПКГ и ПКУ'");
		ИспользоватьТарифныеСеткиПриРасчетеЗарплатыОписание = НСтр("ru = 'Если в организации используются профессиональные квалификационные группы и уровни при описании позиции штатного расписания и при расчете заработной платы, установите этот флажок.'");
	Иначе
		Элементы.ИспользоватьТарифныеСеткиПриРасчетеЗарплаты.Заголовок = НСтр("ru = 'Используются тарифные группы'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КвалификационнаяНадбавка", "Видимость", РаботаВБюджетномУчреждении);
	
	ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТрудаПоСреднегодовомуЗначению = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению;
	ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТрудаПустаяСсылка = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПустаяСсылка();
	
	ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветСтиляЦветТекстаПоля 		= ЦветаСтиля.ЦветТекстаПоля;
	
	Элементы.РазрядыКатегории.Видимость = Не РаботаВБюджетномУчреждении;
	
	МассивМесяцы = Новый Массив;
	МассивМесяцы.Добавить(НСтр("ru = 'Январь'"));
	МассивМесяцы.Добавить(НСтр("ru = 'Февраль'"));
	МассивМесяцы.Добавить(НСтр("ru = 'Март'"));
	МассивМесяцы.Добавить(НСтр("ru = 'Апрель'"));
	МассивМесяцы.Добавить(НСтр("ru = 'Май'"));
	МассивМесяцы.Добавить(НСтр("ru = 'Июнь'"));
	МассивМесяцы.Добавить(НСтр("ru = 'Июль'"));
	МассивМесяцы.Добавить(НСтр("ru = 'Август'"));
	МассивМесяцы.Добавить(НСтр("ru = 'Сентябрь'"));
	МассивМесяцы.Добавить(НСтр("ru = 'Октябрь'"));
	МассивМесяцы.Добавить(НСтр("ru = 'Ноябрь'"));
	МассивМесяцы.Добавить(НСтр("ru = 'Декабрь'"));
	Элементы.ГодоваяПремияМесяцНачисления.СписокВыбора.ЗагрузитьЗначения(МассивМесяцы);
	МесяцыСтрокой = Новый ФиксированныйМассив(МассивМесяцы);
	
	ВариантыНалогообложения = Новый Массив;
	НДФЛ = Новый Структура();
	Взносы = Новый Структура();
	
	НДФЛ.Вставить("_0",Справочники.ВидыДоходовНДФЛ.Код4800); 
	Взносы.Вставить("_0",Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом);
	ВариантыНалогообложения.Добавить(НСтр("ru = 'Облагается НДФЛ (код 4800) и взносами'"));
	
	НДФЛ.Вставить("_1",Справочники.ВидыДоходовНДФЛ.Код4800); 
	Взносы.Вставить("_1",Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом);
	ВариантыНалогообложения.Добавить(НСтр("ru = 'Облагается НДФЛ (код 4800), не облагается взносами'"));
	
	НДФЛ.Вставить("_2",Справочники.ВидыДоходовНДФЛ.ПустаяСсылка()); 
	Взносы.Вставить("_2",Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом);
	ВариантыНалогообложения.Добавить(НСтр("ru = 'Не облагается НДФЛ и взносами (например, компенсации, предусмотренные законодательством)'"));
	
	Элементы.КомпенсационныеВыплатыНалогообложение.СписокВыбора.ЗагрузитьЗначения(ВариантыНалогообложения);
	ВариантыНДФЛКомпенсаций = Новый ФиксированнаяСтруктура(НДФЛ);
	ВариантыВзносыКомпенсаций = Новый ФиксированнаяСтруктура(Взносы);
	ВариантыНалогообложенияКомпенсаций = Новый ФиксированныйМассив(ВариантыНалогообложения);
	
	// параметры выбора кодов дохода НДФЛ для Премий
	ДоступныеКоды = Новый Массив;
	ДоступныеКоды.Добавить("2000");
	ДоступныеКоды.Добавить("2002");
	ДоступныеКоды.Добавить("2003");
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Код", Новый ФиксированныйМассив(ДоступныеКоды)));
	Элементы.ЕжемесячнаяПремияКодДоходаНДФЛ.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	Элементы.КвартальнаяПремияКодДоходаНДФЛ.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	Элементы.ГодоваяПремияКодДоходаНДФЛ.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	Элементы.ПремияРазоваяКодДоходаНДФЛ.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	
	// Заполним реквизиты формы
	//	КоличествоОрганизацийВИБ
	//	ТекущиеОрганизации - массив
	//	ИспользоватьНесколькоОрганизаций.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ТекущиеОрганизации = Новый ФиксированныйМассив(МассивОрганизаций);
	КоличествоОрганизацийВИБ = ТекущиеОрганизации.Количество();
	
	ИспользоватьНесколькоОрганизаций = Константы.ИспользоватьНесколькоОрганизаций.Получить();
	Если КоличествоОрганизацийВИБ > 1 Тогда
		// Если организаций больше одной, то принудительно устанавливаем использование нескольких организаций в ИБ.
		ИспользоватьНесколькоОрганизаций = Истина;
	КонецЕсли;
	
	Если КоличествоОрганизацийВИБ > 0 Тогда
		
		Отбор = Новый Структура("Организация");
		Для каждого ЗначениеМассива Из МассивОрганизаций Цикл
			
			Отбор.Организация = ЗначениеМассива;
			НайденныеСтроки = СсылкиНаДокументы.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = СсылкиНаДокументы.Добавить();
				НоваяСтрока.Организация = ЗначениеМассива;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	ПрямыеВыплатыПособийСоциальногоСтрахованияКлиентСервер.ЗаполнитьСписокВыбораДатыВступленияВПилотныйПроект(Элементы.ДатаПередачиФССВыплатыПособий.СписокВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКнопки(Форма)
	
	ТекущаяСтраницаИмя = Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИндексСтраницы = Форма.ПорядокСтраниц.Найти(ТекущаяСтраницаИмя);
	Если ИндексСтраницы = Неопределено Тогда
		ИндексСтраницы = 0;
	КонецЕсли;
	
	Форма.Элементы.Назад.Доступность  = (ИндексСтраницы > 0);
	Форма.Элементы.Назад1.Доступность = Форма.Элементы.Назад.Доступность;
	Форма.Элементы.Назад2.Доступность = Форма.Элементы.Назад.Доступность;
	Форма.Элементы.Назад3.Доступность = Форма.Элементы.Назад.Доступность;
	
	ПоследняяСтраница = Не (ИндексСтраницы < (Форма.ПорядокСтраниц.Количество() - 1));
	
	Форма.Элементы.Вперед.Доступность = Не ПоследняяСтраница;
	Форма.Элементы.Вперед1.Доступность = Форма.Элементы.Вперед.Доступность;
	Форма.Элементы.Вперед2.Доступность = Форма.Элементы.Вперед.Доступность;
	Форма.Элементы.Вперед3.Доступность = Форма.Элементы.Вперед.Доступность;
	
	Если Форма.РежимПереносДанных Тогда
		
		// форма открыта для переноса данных из прошлых программ
		Форма.Элементы.ГруппаСтраницыШапка.ТекущаяСтраница = Форма.Элементы.СтраницаШапкаЗавершить;
		
	ИначеЕсли ИндексСтраницы = 0 Тогда
		
		// Или не найдена текущая страница в списке порядка страниц
		// или это первая страница помощника.
		Форма.Элементы.ГруппаСтраницыШапка.ТекущаяСтраница = Форма.Элементы.СтраницаШапкаПустоеДействие;	
		
	ИначеЕсли Форма.ТекущийЭтапНастройкиПрограммы.Этап = "ПереносДанных" Тогда
		
		// форма в режиме начальной настройки, выполняется этап перенос данных   
		Если Не Форма.ПереносДанныхВыполнен Тогда
			// перенос данных еще не выполнен
			Форма.Элементы.ГруппаСтраницыШапка.ТекущаяСтраница = Форма.Элементы.СтраницаШапкаПустоеДействие;
		Иначе
			// перенос данных выполнен
			Если Форма.ПереноситьНачисленияПредыдущейПрограммы Тогда
				Форма.Элементы.ГруппаСтраницыШапка.ТекущаяСтраница = Форма.Элементы.СтраницаШапкаЗавершить;
			Иначе
				Форма.Элементы.ГруппаСтраницыШапка.ТекущаяСтраница = Форма.Элементы.СтраницаШапкаПустоеДействие;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Форма.ТекущийЭтапНастройкиПрограммы.Этап = "НачальнаяНастройка" Тогда
		
		Если ПоследняяСтраница Тогда
			Форма.Элементы.ГруппаСтраницыШапка.ТекущаяСтраница = Форма.Элементы.СтраницаШапкаЗавершить;
		Иначе
			Форма.Элементы.ГруппаСтраницыШапка.ТекущаяСтраница = Форма.Элементы.СтраницаШапкаПрименитьНастройки;
		КонецЕсли;
		
	Иначе 
		
		// первоначальный ввод данных	
		Форма.Элементы.ГруппаСтраницыШапка.ТекущаяСтраница = Форма.Элементы.СтраницаШапкаЗавершитьНастройки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНачальнуюСтраницу(Форма, НачальнаяСтраницаИмя) Экспорт

	Элементы = Форма.Элементы;
	ПорядокСтраниц = Форма.ПорядокСтраниц;
	
	Если НачальнаяСтраницаИмя = Неопределено Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Найти(ПорядокСтраниц[0]);
		
	Иначе
		
		ИндексСтраницы = ПорядокСтраниц.Найти(НачальнаяСтраницаИмя);
		Если ИндексСтраницы <> Неопределено Тогда
			НачальнаяСтраниц = Элементы.Найти(НачальнаяСтраницаИмя);
			Если НачальнаяСтраниц <> Неопределено Тогда
				Элементы.ГруппаСтраницы.ТекущаяСтраница = НачальнаяСтраниц;
			КонецЕсли;
		Иначе
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Найти(ПорядокСтраниц[0]);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокСтраницы(Форма) Экспорт

	ТекущаяСтраницаИмя = Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	Если Форма.ЗаголовкиСтраниц.Свойство(ТекущаяСтраницаИмя) Тогда
		Возврат Форма.ЗаголовкиСтраниц[ТекущаяСтраницаИмя];
	КонецЕсли;
	
	Возврат "";

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИндикатор(Форма) Экспорт

	ТекущаяСтраницаИмя = Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИндексСтраницы = Форма.ПорядокСтраниц.Найти(ТекущаяСтраницаИмя);
	Если ИндексСтраницы <> Неопределено Тогда
		Если Форма.ПорядокСтраниц.Количество() <= 1 Тогда
			Форма.ИндикаторТекущаяСтраница = 100;
		Иначе
			Форма.ИндикаторТекущаяСтраница = 100 * ИндексСтраницы / (Форма.ПорядокСтраниц.Количество() - 1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийЭтапНастройкиПрограммы(Форма)

	// текущий этап определяется по текущей странице формы
	ТекущаяСтраницаИмя = Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	Для каждого ЭтапКлючИЗначение Из Форма.ЭтапыНастройкиПрограммы Цикл
		Если ЭтапКлючИЗначение.Значение.СтраницыЭтапа.Свойство(ТекущаяСтраницаИмя) Тогда
			Возврат ЭтапКлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеЭтапаНастройкиПрограммы();

КонецФункции 

&НаКлиенте
Процедура ОбновитьФормуПриСменеСтраницы()
	
	ЗаголовокТекущейСтраницы = ЗаголовокСтраницы(ЭтаФорма);
	ТекущийЭтапНастройкиПрограммы = Новый ФиксированнаяСтруктура(ТекущийЭтапНастройкиПрограммы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	ОбновитьКнопки(ЭтаФорма);   
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПорядокСтраницПоНастройкамФормы(Форма)
	
	Элементы = Форма.Элементы;
	ПорядокСтраниц = Новый Массив;
	
	Если Форма.РежимПереносДанных Тогда
		
		ПорядокСтраниц.Добавить("ПерваяСтраница");
		ПорядокСтраниц.Добавить("ПереносДанныхИзИБ");
		Если Форма.ПрименятьУпрощенныйПеренос Тогда
			ПорядокСтраниц.Добавить("ПереносДанныхИзИБНастройки");
		КонецЕсли;
		ПорядокСтраниц.Добавить("ВыгрузкаЗагрузкаДанныхИзИБ");
		
	Иначе
		
		Если Форма.РаботаВКОРП Тогда
			
			Форма.ИспользоватьНачислениеЗарплаты = Истина;
			Форма.НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание = Истина;
			
			Если Форма.ВыполняетсяПереносДанных Тогда
				
				ПорядокСтраниц.Добавить("ПереносДанныхИзИБ");
				Если Форма.ПрименятьУпрощенныйПеренос Тогда
					ПорядокСтраниц.Добавить("ПереносДанныхИзИБНастройки");
				КонецЕсли;
				ПорядокСтраниц.Добавить("ВыгрузкаЗагрузкаДанныхИзИБ");
				
			Иначе
				
				Если Не Форма.ВыполненУпрощенныйПеренос Тогда
					
					Если Форма.ЕстьДоступныеВариантыПереносаДанных Тогда
						ПорядокСтраниц.Добавить("ПерваяСтраница");
					КонецЕсли;
					ПорядокСтраниц.Добавить("ПерваяСтраницаНачальнойНастройки");
					
				КонецЕсли;
				
				ПорядокСтраниц.Добавить("НастройкиКОРП_1");
				
				Если Не Форма.РаботаВБюджетномУчреждении Тогда 
					ПорядокСтраниц.Добавить("НастройкиКОРП_2");
				КонецЕсли;
				
				ПорядокСтраниц.Добавить("НастройкиКОРП_3");
				ПорядокСтраниц.Добавить("НастройкиКОРП_ОхранаТруда");
				ПорядокСтраниц.Добавить("НастройкиКОРП_4");
				ПорядокСтраниц.Добавить("НастройкиКОРП_Готово");
				
			КонецЕсли;
			
		ИначеЕсли Форма.ВыполненУпрощенныйПеренос Тогда
			
			Если Форма.РаботаВБюджетномУчреждении Тогда
				ПорядокСтраниц.Добавить("ОсобенностиБюджетнойОрганизации");
				Если Форма.ИспользоватьМуниципальнуюСлужбу Тогда
					ПорядокСтраниц.Добавить("МуниципальныеСлужащие");
				КонецЕсли; 
				Если Форма.ИспользоватьГосударственнуюСлужбу Тогда
					ПорядокСтраниц.Добавить("ГосударственныеСлужащие");
				КонецЕсли;
				Если Форма.ИспользоватьВоеннуюСлужбу Тогда
					ПорядокСтраниц.Добавить("Военнослужащие");
				КонецЕсли;
			КонецЕсли;
			
			НаименованиеЗаполнено = Ложь;
			Если Форма.ОрганизацияИндивидуальныйПредприниматель Тогда
				НаименованиеЗаполнено = Не ПустаяСтрока(Форма.ИндивидуальныйПредприниматель.ФИО);
			Иначе
				НаименованиеЗаполнено = Не ПустаяСтрока(Форма.Организация.Наименование);
			КонецЕсли;
			Если Не Форма.ИспользуетсяБазоваяВерсия И Форма.ИспользоватьНесколькоОрганизаций Тогда
				ПорядокСтраниц.Добавить("НесколькоОрганизаций");
			Иначе
				ПорядокСтраниц.Добавить("ОднаОрганизация");
				Если НаименованиеЗаполнено И Форма.ИспользоватьНачислениеЗарплаты Тогда
					ПорядокСтраниц.Добавить("СведенияОРегистрацииВНалоговомОргане");
					ПорядокСтраниц.Добавить("СведенияОбОрганизации");
					ПорядокСтраниц.Добавить("ОрганизацияУчетнаяПолитика");
					ПорядокСтраниц.Добавить("ОрганизацияСтраховыеВзносы"); 
					Если Не (Форма.ИспользоватьГосударственнуюСлужбу Или Форма.ИспользоватьМуниципальнуюСлужбу Или Форма.ИспользоватьВоеннуюСлужбу) Тогда
						ПорядокСтраниц.Добавить("ОрганизацияУчетСтраховыхВзносов");
						ПорядокСтраниц.Добавить("ОрганизацияУчетСтраховыхВзносовПродолжение");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПорядокСтраниц.Добавить("КадровыйУчетШтатноеРасписание");
			
			ПорядокСтраниц.Добавить("НастройкиРасчетаЗарплаты");
			ПорядокСтраниц.Добавить("НастройкиРасчетаЗарплатыПродолжение");
			ПорядокСтраниц.Добавить("ОкладПодневнаяОплата");
			ПорядокСтраниц.Добавить("ПочасоваяОплата");
			Если Форма.НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
				ПорядокСтраниц.Добавить("ПочасоваяОплатаПродолжение");
			КонецЕсли;
			ПорядокСтраниц.Добавить("ПересчетВЧасовуюДневнуюСтавку");
			ПорядокСтраниц.Добавить("КвартальнаяПремия");
			Если Форма.НачисляетсяКвартальнаяПремия Тогда
				ПорядокСтраниц.Добавить("КвартальнаяПремияВариантНачисления");
			КонецЕсли;
			ПорядокСтраниц.Добавить("ГодоваяПремия");
			Если Форма.НачисляетсяГодоваяПремия Тогда
				ПорядокСтраниц.Добавить("ГодоваяПремияВариантНачисления");
			КонецЕсли;
			ПорядокСтраниц.Добавить("ПремияРазовая");
			Если Форма.НачисляетсяРазоваяПремия Тогда
				ПорядокСтраниц.Добавить("ПремияРазоваяВариантНачисления");
			КонецЕсли;
			ПорядокСтраниц.Добавить("Компенсации");
			ПорядокСтраниц.Добавить("ДополнительныеОтпуска");
			ПорядокСтраниц.Добавить("КомандировкиОплатаПоСреднему");
			ПорядокСтраниц.Добавить("ДоплатыДоСреднегоЗаработка");
			Если Форма.НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных Или Форма.НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных Тогда
				ПорядокСтраниц.Добавить("СтраницаОтгулы");
			КонецЕсли;
			ПорядокСтраниц.Добавить("ПростоиНевыходы");
			ПорядокСтраниц.Добавить("ОтпускаБезОплаты"); 
			Если Форма.ИспользоватьГосударственнуюСлужбу Или Форма.ИспользоватьМуниципальнуюСлужбу Тогда
				ПорядокСтраниц.Добавить("ВыплатыКОтпускуГосслужба");
			Иначе
				ПорядокСтраниц.Добавить("МатериальнаяПомощь");
				ПорядокСтраниц.Добавить("ВыплатыКОтпуску");
			КонецЕсли;
			ПорядокСтраниц.Добавить("ПрочиеВыплаты");
			ПорядокСтраниц.Добавить("ДоходыВНатуральнойФорме");
			ПорядокСтраниц.Добавить("ПризыПодарки");
			ПорядокСтраниц.Добавить("УдержанияИзЗарплаты");
			ПорядокСтраниц.Добавить("СтраницаГотово");
			
		Иначе
			
			Если Форма.ЕстьДоступныеВариантыПереносаДанных Тогда
				ПорядокСтраниц.Добавить("ПерваяСтраница");
			КонецЕсли;
			
			Если Форма.ВыполняетсяПереносДанных Тогда
				
				ПорядокСтраниц.Добавить("ПереносДанныхИзИБ");
				Если Форма.ПрименятьУпрощенныйПеренос Тогда
					ПорядокСтраниц.Добавить("ПереносДанныхИзИБНастройки");
				КонецЕсли;
				ПорядокСтраниц.Добавить("ВыгрузкаЗагрузкаДанныхИзИБ");
				
			Иначе
				
				НаименованиеЗаполнено = Ложь;
				Если Форма.ОрганизацияИндивидуальныйПредприниматель Тогда
					НаименованиеЗаполнено = Не ПустаяСтрока(Форма.ИндивидуальныйПредприниматель.ФИО);
				Иначе
					НаименованиеЗаполнено = Не ПустаяСтрока(Форма.Организация.Наименование);
				КонецЕсли;
				
				Если Форма.РаботаВБюджетномУчреждении Тогда
					ПорядокСтраниц.Добавить("ОсобенностиБюджетнойОрганизации");
					Если Форма.ИспользоватьМуниципальнуюСлужбу Тогда
						ПорядокСтраниц.Добавить("МуниципальныеСлужащие");
					КонецЕсли;
					Если Форма.ИспользоватьГосударственнуюСлужбу Тогда
						ПорядокСтраниц.Добавить("ГосударственныеСлужащие");
					КонецЕсли;
					Если Форма.ИспользоватьВоеннуюСлужбу Тогда
						ПорядокСтраниц.Добавить("Военнослужащие");
					КонецЕсли;
				КонецЕсли;
				ПорядокСтраниц.Добавить("ПерваяСтраницаНачальнойНастройки");
				
				Если Не Форма.ИспользуетсяБазоваяВерсия И Не Форма.РаботаВБюджетномУчреждении Тогда
					ПорядокСтраниц.Добавить("ИспользоватьНачислениеЗарплаты");
				КонецЕсли;
				
				Если Форма.ИспользоватьНачислениеЗарплаты Тогда
					ПорядокСтраниц.Добавить("ЗагрузкаДанных");
				КонецЕсли;
				
				Если Форма.ИспользуетсяБазоваяВерсия И Форма.РаботаВБюджетномУчреждении Тогда
				Иначе
					ПорядокСтраниц.Добавить("НашиОрганизации");
				КонецЕсли;
				
				Если Не Форма.ИспользуетсяБазоваяВерсия И НЕ Форма.РаботаВБюджетномУчреждении И Форма.ИспользоватьНачислениеЗарплаты Тогда
					ПорядокСтраниц.Добавить("ЦелевоеФинансированиеХозрасчет");
				КонецЕсли;
				Если Не Форма.ИспользуетсяБазоваяВерсия И Форма.ИспользоватьНесколькоОрганизаций Тогда
					ПорядокСтраниц.Добавить("НесколькоОрганизаций");
				Иначе
					ПорядокСтраниц.Добавить("ОднаОрганизация");
					Если НаименованиеЗаполнено И Форма.ИспользоватьНачислениеЗарплаты Тогда
						ПорядокСтраниц.Добавить("СведенияОРегистрацииВНалоговомОргане");
						ПорядокСтраниц.Добавить("СведенияОбОрганизации");
						ПорядокСтраниц.Добавить("ОрганизацияУчетнаяПолитика");
						ПорядокСтраниц.Добавить("ОрганизацияСтраховыеВзносы"); 
						Если Не (Форма.ИспользоватьГосударственнуюСлужбу Или Форма.ИспользоватьМуниципальнуюСлужбу Или Форма.ИспользоватьВоеннуюСлужбу) Тогда
							ПорядокСтраниц.Добавить("ОрганизацияУчетСтраховыхВзносов");
							ПорядокСтраниц.Добавить("ОрганизацияУчетСтраховыхВзносовПродолжение");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Форма.РаботаВБюджетномУчреждении Тогда
					ПорядокСтраниц.Добавить("НастройкиБюджетногоУчреждения");
				КонецЕсли;
				ПорядокСтраниц.Добавить("КадровыйУчетШтатноеРасписание");
				Если Форма.НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание И Не Форма.ИспользуетсяБазоваяВерсия Тогда
					ПорядокСтраниц.Добавить("ШтатноеРасписание");
				КонецЕсли;
				Если Не Форма.ИспользуетсяБазоваяВерсия Тогда
					ПорядокСтраниц.Добавить("ВоинскийУчет");
				КонецЕсли;
				
				Если Форма.ИспользоватьНачислениеЗарплаты Тогда   
					ПорядокСтраниц.Добавить("НастройкиРасчетаЗарплаты");
					ПорядокСтраниц.Добавить("НастройкиРасчетаЗарплатыПродолжение");
					ПорядокСтраниц.Добавить("ОкладПодневнаяОплата");
					ПорядокСтраниц.Добавить("ПочасоваяОплата");
					Если Форма.НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
						ПорядокСтраниц.Добавить("ПочасоваяОплатаПродолжение");
					КонецЕсли;
					ПорядокСтраниц.Добавить("ПересчетВЧасовуюДневнуюСтавку");
					ПорядокСтраниц.Добавить("ЕжемесячнаяПремия");
					ПорядокСтраниц.Добавить("КвартальнаяПремия");
					Если Форма.НачисляетсяКвартальнаяПремия Тогда
						ПорядокСтраниц.Добавить("КвартальнаяПремияВариантНачисления");
					КонецЕсли;
					ПорядокСтраниц.Добавить("ГодоваяПремия");
					Если Форма.НачисляетсяГодоваяПремия Тогда
						ПорядокСтраниц.Добавить("ГодоваяПремияВариантНачисления");
					КонецЕсли;
					ПорядокСтраниц.Добавить("ПремияРазовая");
					Если Форма.НачисляетсяРазоваяПремия Тогда
						ПорядокСтраниц.Добавить("ПремияРазоваяВариантНачисления");
					КонецЕсли;
					ПорядокСтраниц.Добавить("Надбавки"); 
					ПорядокСтраниц.Добавить("НадбавкиПродолжение");
					ПорядокСтраниц.Добавить("Компенсации");
					ПорядокСтраниц.Добавить("ДополнительныеОтпуска");
					ПорядокСтраниц.Добавить("КомандировкиОплатаПоСреднему");
					ПорядокСтраниц.Добавить("ДоплатыДоСреднегоЗаработка");
					Если Форма.НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных Или Форма.НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных Тогда
						ПорядокСтраниц.Добавить("СтраницаОтгулы");
					КонецЕсли;
					ПорядокСтраниц.Добавить("ПростоиНевыходы");
					ПорядокСтраниц.Добавить("ОтпускаБезОплаты"); 
					Если Форма.ИспользоватьГосударственнуюСлужбу Или Форма.ИспользоватьМуниципальнуюСлужбу Тогда
						ПорядокСтраниц.Добавить("ВыплатыКОтпускуГосслужба");
					Иначе
						ПорядокСтраниц.Добавить("МатериальнаяПомощь");
						ПорядокСтраниц.Добавить("ВыплатыКОтпуску");
					КонецЕсли;
					ПорядокСтраниц.Добавить("ПрочиеВыплаты");
					ПорядокСтраниц.Добавить("ДоходыВНатуральнойФорме");
					ПорядокСтраниц.Добавить("ПризыПодарки");
					ПорядокСтраниц.Добавить("УдержанияИзЗарплаты");
				КонецЕсли;
				
				ПорядокСтраниц.Добавить("СтраницаГотово");
				
				ПорядокСтраниц.Добавить("ПерваяСтраницаПервоначальногоВводаДанных"); 
				ПорядокСтраниц.Добавить("КалендариГрафики");
				Если Форма.НастройкиРасчетаЗарплаты.ИспользоватьТарифныеСеткиПриРасчетеЗарплаты Тогда
					ПорядокСтраниц.Добавить("ТарифныеСетки");
				КонецЕсли;
				ПорядокСтраниц.Добавить("ШтатноеРасписаниеНачальноеЗаполнение");
				Если Форма.НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание Тогда
					ПорядокСтраниц.Добавить("ШтатноеРасписаниеНачальноеЗаполнениеПродолжение");
				КонецЕсли;
				ПорядокСтраниц.Добавить("ШтатнаяРасстановка");
				ПорядокСтраниц.Добавить("ЗадолженностьПоЗарплате");
				ПорядокСтраниц.Добавить("ПервыйРасчетЗарплаты1");
				ПорядокСтраниц.Добавить("ПервыйРасчетЗарплаты2");
				ПорядокСтраниц.Добавить("СтраницаГотовоВводНачальныхДанных");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПорядокСтраниц;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеЭтапаНастройкиПрограммы()

	ОписаниеЭтапа = Новый Структура;
	ОписаниеЭтапа.Вставить("РазрешеноПрименениеНастроек", Истина);
	ОписаниеЭтапа.Вставить("Этап","");
	ОписаниеЭтапа.Вставить("ДействиеКомандыПримененияНастроек", "");
	ОписаниеЭтапа.Вставить("СтраницыЭтапа", Новый Структура );
	Возврат ОписаниеЭтапа;

КонецФункции

&НаСервере
Процедура СоздатьОписанияСтраницИЭтапов()
	
	СтруктураСтраниц = Новый Структура;
	ОписаниеЭтапов   = Новый Структура;
	
	// первый этап
	СтраницыЭтапа = Новый Структура;
	СтраницыЭтапа.Вставить("ПерваяСтраница", НСтр("ru = 'Начало...'"));
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураСтраниц, СтраницыЭтапа);
	
	ОписаниеЭтапа = ОписаниеЭтапаНастройкиПрограммы();
	ОписаниеЭтапа.РазрешеноПрименениеНастроек = Ложь; 
	ОписаниеЭтапа.СтраницыЭтапа = СтраницыЭтапа;
	ОписаниеЭтапа.Этап = "ПерваяСтраница";
	ОписаниеЭтапов.Вставить("ПерваяСтраница", ОписаниеЭтапа);
	
	// Страницы помощника переноса данных.
	СтраницыЭтапа = Новый Структура;
	СтраницыЭтапа.Вставить("ПереносДанныхНачало", НСтр("ru = 'Выбор способа загрузки данных'"));
	СтраницыЭтапа.Вставить("ПереносДанныхИзИБ", НСтр("ru = 'Загрузка данных из информационной базы'"));
	СтраницыЭтапа.Вставить("ПереносДанныхИзИБНастройки", НСтр("ru = 'Настройка загрузки данных из информационной базы'"));
	СтраницыЭтапа.Вставить("ВыгрузкаЗагрузкаДанныхИзИБ", НСтр("ru = 'Перенос данных'"));
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураСтраниц, СтраницыЭтапа);
	
	ОписаниеЭтапа = ОписаниеЭтапаНастройкиПрограммы();
	ОписаниеЭтапа.РазрешеноПрименениеНастроек = Ложь;
	ОписаниеЭтапа.СтраницыЭтапа = СтраницыЭтапа;
	ОписаниеЭтапа.Этап = "ПереносДанных";
	ОписаниеЭтапов.Вставить("ПереносДанных", ОписаниеЭтапа);
	
	// Страницы начальной настройки.
	СтраницыЭтапа = Новый Структура;
	СтраницыЭтапа.Вставить("ОсобенностиБюджетнойОрганизации", НСтр("ru = 'Особенности использования программы'"));
	СтраницыЭтапа.Вставить("ПерваяСтраницаНачальнойНастройки", НСтр("ru = 'Начало...'"));
	СтраницыЭтапа.Вставить("ИспользоватьНачислениеЗарплаты", НСтр("ru = 'Использование программы'"));
	СтраницыЭтапа.Вставить("ЗагрузкаДанных", НСтр("ru = 'Чтобы начать работу сразу...'"));
	СтраницыЭтапа.Вставить("НашиОрганизации", НСтр("ru = 'Ваша организация'"));
	СтраницыЭтапа.Вставить("ОднаОрганизация", НСтр("ru = 'Сведения об организации'"));
	СтраницыЭтапа.Вставить("СведенияОбОрганизации", НСтр("ru = 'Сведения об организации'"));
	СтраницыЭтапа.Вставить("ОрганизацияСтраховыеВзносы", НСтр("ru = 'Сведения об организации'"));
	СтраницыЭтапа.Вставить("ОрганизацияУчетСтраховыхВзносов", НСтр("ru = 'Сведения об организации'"));
	СтраницыЭтапа.Вставить("ОрганизацияУчетСтраховыхВзносовПродолжение", НСтр("ru = 'Сведения об организации'"));
	СтраницыЭтапа.Вставить("НастройкиБюджетногоУчреждения", НСтр("ru = 'Сведения об организации'"));
	СтраницыЭтапа.Вставить("СведенияОРегистрацииВНалоговомОргане", НСтр("ru = 'Сведения о регистрации в налоговом органе'"));
	СтраницыЭтапа.Вставить("ЦелевоеФинансированиеХозрасчет", НСтр("ru = 'Целевое финансирование'"));  
	СтраницыЭтапа.Вставить("ОрганизацияУчетнаяПолитика", НСтр("ru = 'Сведения об организации'"));
	СтраницыЭтапа.Вставить("НесколькоОрганизаций", НСтр("ru = 'Сведения об организациях'"));
	СтраницыЭтапа.Вставить("КадровыйУчетШтатноеРасписание", НСтр("ru = 'Кадровый учет, штатное расписание'"));
	СтраницыЭтапа.Вставить("ШтатноеРасписание", НСтр("ru = 'Штатное расписание'"));
	СтраницыЭтапа.Вставить("ВоинскийУчет", НСтр("ru = 'Воинский учет'"));    
	СтраницыЭтапа.Вставить("НастройкиРасчетаЗарплаты", НСтр("ru = 'Настройки расчета зарплаты'"));
	СтраницыЭтапа.Вставить("НастройкиРасчетаЗарплатыПродолжение", НСтр("ru = 'Настройки расчета зарплаты'"));
	СтраницыЭтапа.Вставить("ОкладПодневнаяОплата", НСтр("ru = 'Настройки расчета зарплаты'"));
	СтраницыЭтапа.Вставить("ПочасоваяОплата", НСтр("ru = 'Почасовая оплата'"));
	СтраницыЭтапа.Вставить("ПочасоваяОплатаПродолжение", НСтр("ru = 'Почасовая оплата'"));
	СтраницыЭтапа.Вставить("ГодоваяПремия", НСтр("ru = 'Годовая премия'"));
	СтраницыЭтапа.Вставить("ГодоваяПремияВариантНачисления", НСтр("ru = 'Годовая премия,  вариант начисления'"));
	СтраницыЭтапа.Вставить("КвартальнаяПремия", НСтр("ru = 'Квартальная премия'"));
	СтраницыЭтапа.Вставить("КвартальнаяПремияВариантНачисления", НСтр("ru = 'Квартальная премия,  вариант начисления'"));
	СтраницыЭтапа.Вставить("ПремияРазовая", НСтр("ru = 'Разовая премия'"));
	СтраницыЭтапа.Вставить("ПремияРазоваяВариантНачисления", НСтр("ru = 'Разовая премия,  вариант начисления'"));
	СтраницыЭтапа.Вставить("Надбавки", НСтр("ru = 'Надбавки'"));   
	СтраницыЭтапа.Вставить("НадбавкиПродолжение", НСтр("ru = 'Надбавки'"));
	СтраницыЭтапа.Вставить("Компенсации", НСтр("ru = 'Компенсационные выплаты'"));
	СтраницыЭтапа.Вставить("ДополнительныеОтпуска", НСтр("ru = 'Дополнительные отпуска'"));
	СтраницыЭтапа.Вставить("КомандировкиОплатаПоСреднему", НСтр("ru = 'Командировки, оплаты по среднему заработку'"));
	СтраницыЭтапа.Вставить("ДоплатыДоСреднегоЗаработка", НСтр("ru = 'Доплаты до среднего заработка'"));
	СтраницыЭтапа.Вставить("СтраницаОтгулы", НСтр("ru = 'Отгулы'"));
	СтраницыЭтапа.Вставить("ПростоиНевыходы", НСтр("ru = 'Простои, невыходы'"));
	СтраницыЭтапа.Вставить("ОтпускаБезОплаты", НСтр("ru = 'Отпуска без оплаты'"));  
	СтраницыЭтапа.Вставить("МатериальнаяПомощь", НСтр("ru = 'Выплата материальной помощи'"));
	СтраницыЭтапа.Вставить("ЕжемесячнаяПремия", НСтр("ru = 'Ежемесячная премия'"));
	СтраницыЭтапа.Вставить("ПрочиеВыплаты", НСтр("ru = 'Использование прочих выплат'"));
	СтраницыЭтапа.Вставить("ДоходыВНатуральнойФорме", НСтр("ru = 'Доходы в натуральной форме'"));
	СтраницыЭтапа.Вставить("ПризыПодарки", НСтр("ru = 'Выдача призов, подарков'"));
	СтраницыЭтапа.Вставить("УдержанияИзЗарплаты", НСтр("ru = 'Удержания из зарплаты'"));
	СтраницыЭтапа.Вставить("ПересчетВЧасовуюДневнуюСтавку", НСтр("ru = 'Пересчет тарифной ставки'"));
	СтраницыЭтапа.Вставить("ВыплатыКОтпускуГосслужба", НСтр("ru = 'Единовременные выплаты к отпуску'"));
	СтраницыЭтапа.Вставить("ВыплатыКОтпуску", НСтр("ru = 'Единовременные выплаты к отпуску'"));
	СтраницыЭтапа.Вставить("МуниципальныеСлужащие", НСтр("ru = 'Муниципальные служащие'"));
	СтраницыЭтапа.Вставить("ГосударственныеСлужащие", НСтр("ru = 'Государственные служащие'"));
	СтраницыЭтапа.Вставить("Военнослужащие", НСтр("ru = 'Расчет денежного довольствия'"));
	СтраницыЭтапа.Вставить("НастройкиКОРП_1", НСтр("ru = 'Структура компании и подбор персонала'"));
	СтраницыЭтапа.Вставить("НастройкиКОРП_2", НСтр("ru = 'Мотивация и льготы'"));
	СтраницыЭтапа.Вставить("НастройкиКОРП_3", НСтр("ru = 'Развитие и обучение'"));
	СтраницыЭтапа.Вставить("НастройкиКОРП_ОхранаТруда", НСтр("ru = 'Охрана труда'"));
	СтраницыЭтапа.Вставить("НастройкиКОРП_4", НСтр("ru = 'Самообслуживание'"));
	СтраницыЭтапа.Вставить("НастройкиКОРП_Готово", НСтр("ru = 'Настройка функциональности программы завершена'"));
	
	СтраницыЭтапа.Вставить("СтраницаГотово", НСтр("ru = 'Настройка функциональности программы завершена'"));
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураСтраниц, СтраницыЭтапа);
	
	ОписаниеЭтапа = ОписаниеЭтапаНастройкиПрограммы();  
	ОписаниеЭтапа.ДействиеКомандыПримененияНастроек = "ЗаписатьНастройки";
	ОписаниеЭтапа.СтраницыЭтапа = СтраницыЭтапа;
	ОписаниеЭтапа.Этап = "НачальнаяНастройка";
	ОписаниеЭтапов.Вставить("НачальнаяНастройка",ОписаниеЭтапа);
	
	// Страницы первоначального ввода данных.
	СтраницыЭтапа = Новый Структура;
	СтраницыЭтапа.Вставить("КалендариГрафики", НСтр("ru = 'Производственный календарь и графики работы'"));
	СтраницыЭтапа.Вставить("ПерваяСтраницаПервоначальногоВводаДанных", НСтр("ru = 'Месяц начала эксплуатации'"));  
	СтраницыЭтапа.Вставить("КалендариГрафики", НСтр("ru = 'Производственный календарь и графики работы'"));
	СтраницыЭтапа.Вставить("ТарифныеСетки", НСтр("ru = 'Тарифные группы'"));
	СтраницыЭтапа.Вставить("ШтатноеРасписаниеНачальноеЗаполнение", НСтр("ru = 'Штатное расписание'"));
	СтраницыЭтапа.Вставить("ШтатноеРасписаниеНачальноеЗаполнениеПродолжение", НСтр("ru = 'Штатное расписание'"));
	СтраницыЭтапа.Вставить("ШтатнаяРасстановка", НСтр("ru = 'Начальная штатная расстановка'"));
	СтраницыЭтапа.Вставить("ЗадолженностьПоЗарплате", НСтр("ru = 'Взаиморасчеты с сотрудниками'"));
	СтраницыЭтапа.Вставить("ПервыйРасчетЗарплаты1", НСтр("ru = 'Первый расчет зарплаты'"));
	СтраницыЭтапа.Вставить("ПервыйРасчетЗарплаты2", НСтр("ru = 'Первый расчет зарплаты'"));
	СтраницыЭтапа.Вставить("СтраницаГотовоВводНачальныхДанных", НСтр("ru = 'Ввод начальных данных закончен'"));
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураСтраниц, СтраницыЭтапа);
	
	ОписаниеЭтапа = ОписаниеЭтапаНастройкиПрограммы();  
	ОписаниеЭтапа.ДействиеКомандыПримененияНастроек = "ЗавершитьВводНачальныхДанных";
	ОписаниеЭтапа.СтраницыЭтапа = СтраницыЭтапа;
	ОписаниеЭтапа.Этап = "ПервоначальныйВВодДанных";
	ОписаниеЭтапов.Вставить("ПервоначальныйВВодДанных",ОписаниеЭтапа);
	
	ЗаголовкиСтраниц = Новый ФиксированнаяСтруктура(СтруктураСтраниц);
	ЭтапыНастройкиПрограммы = Новый ФиксированнаяСтруктура(ОписаниеЭтапов);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция СохраняемыеРеквизиты()
	
	СохраняемыеРеквизиты = Новый Структура("
	|ИспользоватьНачислениеЗарплаты,
	|ИспользоватьСтатьиФинансирования,
	|ИспользоватьПодневнуюОплатуТруда,
	|НеИспользоватьНачислениеЗарплаты,
	|ИспользоватьНесколькоОрганизаций,
	|ИспользуетсяВнебюджетнаяДеятельность,
	|ОрганизацияИндивидуальныйПредприниматель,
	|ОкладТарифТочность,
	|ОкладТарифЧасовойТочность,
	|РегистрироватьСдельнуюОплатуВБухучете,
	|НачисляетсяГодоваяПремия,
	|ГодоваяПремияСпособРасчета,
	|ГодоваяПремияВариантНачисления,
	|ГодоваяПремияМесяцНачисления,
	|НачисляетсяКвартальнаяПремия,
	|КвартальнаяПремияСпособРасчета,
	|КвартальнаяПремияВариантНачисления,
	|НачисляетсяВМесяце01,
	|НачисляетсяВМесяце02,
	|НачисляетсяВМесяце03,
	|НачисляетсяВМесяце04,
	|НачисляетсяВМесяце05,
	|НачисляетсяВМесяце06,
	|НачисляетсяВМесяце07,
	|НачисляетсяВМесяце08,
	|НачисляетсяВМесяце09,
	|НачисляетсяВМесяце10,
	|НачисляетсяВМесяце11,
	|НачисляетсяВМесяце12,
	|НачисляетсяЕжемесячнаяПремия,
	|ЕжемесячнаяПремияСпособРасчета,
	|БазовыйПериодЕжемесячнойПремии,
	|НачисляетсяРазоваяПремия,
	|РазоваяПремияСпособРасчета,
	|РазоваяПремияДлительностьПериода,
	|РазоваяПремияВариантНачисления,
	|ИспользоватьНадбавкуЗаВредность,
	|НачисляетсяНадбавкаЗаВыслугуЛет,
	|ИспользоватьОплатуДнейСдачиКрови,
	|ИспользоватьОплатуДнейСдачиКровиВнутрисменных,
	|ИспользоватьРазовоеНачисление,
	|КоличествоОкладовДляМатериальнойПомощи,
	|ДоплатаЗаВыполнениеПланаСпособНачисления,
	|ИспользоватьДоплатуЗаВыполнениеПлана,
	|ИспользоватьУдержаниеВСчетВозмещенияУщерба,
	|МодифицированностьФормы,
	|ОплатаТрудаВНатуральнойФорме,
	|ИспользоватьВоеннуюСлужбу,
	|РасчетДенежногоДовольствияВоеннослужащих,
	|ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву,
	|РазрешеноСовместительствоВоеннослужащимПоКонтракту,
	|ПремияЗаДВСОРассчитываетсяПоОкладуНаНачалоМесяца,
	|ИспользоватьГосударственнуюСлужбу,
	|ИспользоватьМуниципальнуюСлужбу,
	|НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим,
	|ИспользоватьУчетКлассныхЧинов,
	|ИспользоватьРасчетСохраняемогоДенежногоСодержания,
	|ВыплачиваетсяЕдиноеДенежноеВознаграждение,
	|ВыплачиваетсяЕжемесячнаяКвалификационнаяНадбавка,
	|КоличествоОкладовДляМатериальнойПомощиГосслужащего,
	|КоличествоОкладовДляВыплатыКОтпуску,
	|КоличествоОкладовДляВыплатыКОтпускуГосслужащего,
	|ИспользоватьВыгрузкуВФедеральныйРегистрМедицинскихРаботников,
	|ИспользоватьДоступКНаркотическимСредствам,
	|ИспользоватьТарификационнуюОтчетностьУчрежденийФМБА,
	|ИспользоватьПодработки,
	|ИспользоватьМедицинскоеУчреждение,
	|РаботаВОбразовательномУчреждении,
	|ВыполненУпрощенныйПеренос,
	|ОрганизацияСсылка,
	|МесяцНачалаЭксплуатации,
	|ЕжемесячнаяПремияКодДоходаНДФЛ,
	|КвартальнаяПремияКодДоходаНДФЛ,
	|ГодоваяПремияКодДоходаНДФЛ,
	|ПремияРазоваяКодДоходаНДФЛ");  
	
	Возврат СохраняемыеРеквизиты;
	
КонецФункции 

&НаСервере
Процедура СохранитьРеквизитыФормыНаСервере()
	
	СохраняемыеЗначения = Новый ХранилищеЗначения(ЗначенияСохраняемыхРеквизитовФормы());
	Константы.НачальнаяНастройкаПрограммыОтветыПользователя.Установить(СохраняемыеЗначения);
	ХранилищеОбщихНастроек.Сохранить("НачальнаяНастройкаПрограммыЗК", "НачальнаяСтраница", Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаСервере
Функция ЗначенияСохраняемыхРеквизитовФормы(ЗаписьНастроек = Ложь)
	
	СохраняемыеРеквизиты = СохраняемыеРеквизиты();
	
	МодифицированностьФормы = ?(ЗаписьНастроек, Ложь, ЭтаФорма.Модифицированность);
	ЗаполнитьЗначенияСвойств(СохраняемыеРеквизиты, ЭтаФорма);
	
	СохраняемыеРеквизиты.Вставить("НадбавкиПроцентом", НадбавкиПроцентом.Выгрузить());
	СохраняемыеРеквизиты.Вставить("НадбавкиСуммой", НадбавкиСуммой.Выгрузить());
	СохраняемыеРеквизиты.Вставить("ДополнительныеОтпуска", ДополнительныеОтпуска.Выгрузить());
	СохраняемыеРеквизиты.Вставить("НатуральныеДоходы", НатуральныеДоходы.Выгрузить());
	СохраняемыеРеквизиты.Вставить("КомпенсационныеВыплаты", КомпенсационныеВыплаты.Выгрузить());
	
	Если ЗначениеЗаполнено(Организация.Ссылка) И Организация.ВерсияДанных <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация.Ссылка, "ВерсияДанных") Тогда
		ОрганизацияОбъект = Организация.Ссылка.ПолучитьОбъект();
		ОрганизацияОбъект.Прочитать();
	Иначе
		ОрганизацияОбъект = РеквизитФормыВЗначение("Организация");
	КонецЕсли;
	СохраняемыеРеквизиты.Вставить("Организация", ОбщегоНазначения.ЗначениеВСтрокуXML(ОрганизацияОбъект));  
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Ссылка) И РегистрацияВНалоговомОргане.ВерсияДанных <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане.Ссылка, "ВерсияДанных") Тогда
		РегистрацияВНалоговомОрганеОбъект = РегистрацияВНалоговомОргане.Ссылка.ПолучитьОбъект();
		РегистрацияВНалоговомОрганеОбъект.Прочитать();
	Иначе
		РегистрацияВНалоговомОрганеОбъект = РеквизитФормыВЗначение("РегистрацияВНалоговомОргане");
	КонецЕсли;
	СохраняемыеРеквизиты.Вставить("РегистрацияВНалоговомОргане", ОбщегоНазначения.ЗначениеВСтрокуXML(РегистрацияВНалоговомОрганеОбъект));
	
	Если ЗначениеЗаполнено(ИндивидуальныйПредприниматель.Ссылка) И ИндивидуальныйПредприниматель.ВерсияДанных <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИндивидуальныйПредприниматель.Ссылка, "ВерсияДанных") Тогда
		ФизическоеЛицоОбъект = ИндивидуальныйПредприниматель.Ссылка.ПолучитьОбъект();
		ФизическоеЛицоОбъект.Прочитать();
	Иначе
		ФизическоеЛицоОбъект = РеквизитФормыВЗначение("ИндивидуальныйПредприниматель");
	КонецЕсли;
	СохраняемыеРеквизиты.Вставить("ИндивидуальныйПредприниматель", ОбщегоНазначения.ЗначениеВСтрокуXML(ФизическоеЛицоОбъект));
	
	СохраняемыеРеквизиты.Вставить("НастройкиРасчетаЗарплаты", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	НастройкиРасчетаЗарплаты, Метаданные.РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный));
	СохраняемыеРеквизиты.Вставить("НастройкиРасчетаЗарплатыПрежняя", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	НастройкиРасчетаЗарплатыПрежняя, Метаданные.РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный));
	СохраняемыеРеквизиты.Вставить("НастройкиУчетаВремени", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	НастройкиУчетаВремени, Метаданные.РегистрыСведений.НастройкиУчетаВремени));
	СохраняемыеРеквизиты.Вставить("НастройкиУчетаВремениПрежняя", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	НастройкиУчетаВремениПрежняя, Метаданные.РегистрыСведений.НастройкиУчетаВремени));
	СохраняемыеРеквизиты.Вставить("НастройкиВоинскогоУчета", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	НастройкиВоинскогоУчета, Метаданные.РегистрыСведений.НастройкиВоинскогоУчета));
	СохраняемыеРеквизиты.Вставить("НастройкиВоинскогоУчетаПрежняя", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	НастройкиВоинскогоУчетаПрежняя, Метаданные.РегистрыСведений.НастройкиВоинскогоУчета));
	СохраняемыеРеквизиты.Вставить("НастройкиКадровогоУчета", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	НастройкиКадровогоУчета, Метаданные.РегистрыСведений.НастройкиКадровогоУчета));
	СохраняемыеРеквизиты.Вставить("НастройкиКадровогоУчетаПрежняя", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	НастройкиКадровогоУчетаПрежняя, Метаданные.РегистрыСведений.НастройкиКадровогоУчета));
	СохраняемыеРеквизиты.Вставить("НастройкиШтатногоРасписания", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	НастройкиШтатногоРасписания, Метаданные.РегистрыСведений.НастройкиШтатногоРасписания));
	СохраняемыеРеквизиты.Вставить("НастройкиШтатногоРасписанияПрежняя", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	НастройкиШтатногоРасписанияПрежняя, Метаданные.РегистрыСведений.НастройкиШтатногоРасписания));
	СохраняемыеРеквизиты.Вставить("ПрименяемыеТарифыСтраховыхВзносов", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	ПрименяемыеТарифыСтраховыхВзносов, Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов));
	СохраняемыеРеквизиты.Вставить("УчетнаяПолитикаОрганизаций", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	УчетнаяПолитикаОрганизаций, Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций));
	СохраняемыеРеквизиты.Вставить("НастройкиУчетаСтраховыхВзносов", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	НастройкиУчетаСтраховыхВзносов, Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносов));
	СохраняемыеРеквизиты.Вставить("СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев, Метаданные.РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев));
	СохраняемыеРеквизиты.Вставить("НастройкиЗаймовСотрудникам", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	НастройкиЗаймовСотрудникам, Метаданные.РегистрыСведений.НастройкиЗаймовСотрудникам));
	СохраняемыеРеквизиты.Вставить("НастройкиУчетаПособийСоциальногоСтрахования", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	НастройкиУчетаПособийСоциальногоСтрахования, Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования));
	СохраняемыеРеквизиты.Вставить("ЗарплатаКадрыНастройкиОрганизации", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	ЗарплатаКадрыНастройкиОрганизации, Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная));
	СохраняемыеРеквизиты.Вставить("НастройкиСтатистикиПерсонала", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	НастройкиСтатистикиПерсонала, Метаданные.РегистрыСведений.НастройкиСтатистикиПерсонала));
	СохраняемыеРеквизиты.Вставить("ТерриториальныеУсловияПФР", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
	ТерриториальныеУсловияПФР, Метаданные.РегистрыСведений.ТерриториальныеУсловияПФР));		
	
	НачальнаяНастройкаПрограммы.ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(ЭтаФорма, СохраняемыеРеквизиты);
	
	СохраняемыеРеквизиты.Вставить("СсылкаНаСозданнуюОрганизацию", СсылкаНаСозданнуюОрганизацию);
	СохраняемыеРеквизиты.Вставить("СсылкиНаДокументы", СсылкиНаДокументы.Выгрузить());
	
	СохраненныеНастройкиХранилище = Константы.НачальнаяНастройкаПрограммыОтветыПользователя.Получить();
	Настройки = СохраненныеНастройкиХранилище.Получить();
	Если Настройки <> Неопределено Тогда
		Если Настройки.Свойство("СсылкиНачисленийУдержаний") Тогда
			СохраняемыеРеквизиты.Вставить("СсылкиНачисленийУдержаний", Настройки.СсылкиНачисленийУдержаний);
		КонецЕсли;
		Если Настройки.Свойство("СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты") Тогда
			СохраняемыеРеквизиты.Вставить("СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты", Настройки.СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты);
		КонецЕсли;
		Если Настройки.Свойство("СсылкиПоказателиРасчетаЗарплаты") Тогда
			СохраняемыеРеквизиты.Вставить("СсылкиПоказателиРасчетаЗарплаты", Настройки.СсылкиПоказателиРасчетаЗарплаты);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СохраняемыеРеквизиты;
	
КонецФункции

&НаСервере
Процедура СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, ИмяРеквизита)
	
	Если СохраненныеНастройки.Свойство(ИмяРеквизита) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма[ИмяРеквизита], СохраненныеНастройки[ИмяРеквизита]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбъектВРеквизитФормы(СохраненныеНастройки, ИмяРеквизита)
	
	Если СохраненныеНастройки.Свойство(ИмяРеквизита) Тогда
		
		Если ТипЗнч(СохраненныеНастройки[ИмяРеквизита]) = Тип("Строка") Тогда
			
			Попытка
				СправочникОбъект = ОбщегоНазначения.ЗначениеИзСтрокиXML(СохраненныеНастройки[ИмяРеквизита]);
				ЗначениеВРеквизитФормы(СправочникОбъект, ИмяРеквизита);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохраненныеНастройкиВРеквизитыФормы(СохраненныеНастройки)
	
	СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "НастройкиРасчетаЗарплаты");
	СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "НастройкиРасчетаЗарплатыПрежняя");
	СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "НастройкиУчетаВремени");
	СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "НастройкиУчетаВремениПрежняя");
	СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "НастройкиВоинскогоУчета");
	СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "НастройкиВоинскогоУчетаПрежняя");
	СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "НастройкиКадровогоУчета");
	СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "НастройкиКадровогоУчетаПрежняя");
	СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "НастройкиШтатногоРасписания");
	СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "НастройкиШтатногоРасписанияПрежняя");
	СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "НастройкиЗаймовСотрудникам");
	СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "ЗарплатаКадрыНастройкиОрганизации");
	СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "НастройкиСтатистикиПерсонала");
	СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "ТерриториальныеУсловияПФР");
	
	ИспользоватьИсториюИзмененияШтатногоРасписания = НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания;
	ПроцентДоплатыЗаДниНетрудоспособности = ЗарплатаКадрыНастройкиОрганизации.ПроцентДоплатыЗаДниНетрудоспособности;
	
	НачальнаяНастройкаПрограммы.СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(ЭтаФорма, СохраненныеНастройки);
	
	// Прочитаем текущие сведения об организациях.
	// Восстанавливаем сохраненные настройки организации только если организаций меньше одной.
	Результат = ДанныеОбОрганизациях();
	Выборка = Результат.Выбрать();
	КоличествоОрганизаций = Выборка.Количество();
	Если КоличествоОрганизаций <= 1 Тогда
		
		Выборка.Следующий();
		
		ОбъектВРеквизитФормы(СохраненныеНастройки, "Организация");
		ПрочитатьДанныеПоОрганизациям = (КоличествоОрганизаций = 1) И (Организация.ВерсияДанных <> Выборка.ВерсияДанных);
		
		Если ПрочитатьДанныеПоОрганизациям Тогда
			ЗаполнитьНастройкиОрганизаций(Результат);
		Иначе
			
			СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "ПрименяемыеТарифыСтраховыхВзносов");
			СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "УчетнаяПолитикаОрганизаций");
			СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "НастройкиУчетаСтраховыхВзносов");
			СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев");
			СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "НастройкиУчетаПособийСоциальногоСтрахования");
			СтруктуруМенеджераЗаписиВРеквизитФормы(СохраненныеНастройки, "ЗарплатаКадрыНастройкиОрганизации");
			
			ОбъектВРеквизитФормы(СохраненныеНастройки, "Организация");
			ОбъектВРеквизитФормы(СохраненныеНастройки, "ИндивидуальныйПредприниматель");
			ОбъектВРеквизитФормы(СохраненныеНастройки, "РегистрацияВНалоговомОргане");
			
			ОрганизацияЕстьОбособленныеПодразделения = Организация.ЕстьОбособленныеПодразделения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// заполним таблицы надбавок
	Если СохраненныеНастройки.Свойство("НадбавкиПроцентом") Тогда
		НадбавкиПроцентом.Очистить();
		Для каждого СтрокаТЗ Из СохраненныеНастройки.НадбавкиПроцентом Цикл
			ЗаполнитьЗначенияСвойств(НадбавкиПроцентом.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("НадбавкиСуммой") Тогда
		НадбавкиСуммой.Очистить();
		Для каждого СтрокаТЗ Из СохраненныеНастройки.НадбавкиСуммой Цикл
			ЗаполнитьЗначенияСвойств(НадбавкиСуммой.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("НатуральныеДоходы") Тогда
		НатуральныеДоходы.Очистить();
		Для каждого СтрокаТЗ Из СохраненныеНастройки.НатуральныеДоходы Цикл
			ЗаполнитьЗначенияСвойств(НатуральныеДоходы.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("ДополнительныеОтпуска") Тогда
		ДополнительныеОтпуска.Очистить();
		Для каждого СтрокаТЗ Из СохраненныеНастройки.ДополнительныеОтпуска Цикл
			ЗаполнитьЗначенияСвойств(ДополнительныеОтпуска.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("КомпенсационныеВыплаты") Тогда
		КомпенсационныеВыплаты.Очистить();
		Для каждого СтрокаТЗ Из СохраненныеНастройки.КомпенсационныеВыплаты Цикл
			ЗаполнитьЗначенияСвойств(КомпенсационныеВыплаты.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;
	
	// Сформируем строку свойств, которые надо заполнить и они есть в сохраненных значениях.
	СохраняемыеРеквизиты = СохраняемыеРеквизиты();
	СтрокаСвойств = "";
	ДобавлятьРазделитель = Ложь;
	Для каждого СохраняемыйРеквизит Из СохраняемыеРеквизиты Цикл
		Если СохраненныеНастройки.Свойство(СохраняемыйРеквизит.Ключ) Тогда
			СтрокаСвойств = СтрокаСвойств + ?(ДобавлятьРазделитель,",","") + СохраняемыйРеквизит.Ключ;
			ДобавлятьРазделитель = Истина;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СохраненныеНастройки, СтрокаСвойств);
	
	// Если еще не задавали реквизиты, установим значения по умолчанию - точность до копеек.
	Если Не СохраненныеНастройки.Свойство("ОкладТарифТочность") Тогда
		ОкладТарифТочность = 2;
	КонецЕсли;
	
	Если Не СохраненныеНастройки.Свойство("ОкладТарифЧасовойТочность") Тогда
		ОкладТарифЧасовойТочность = 2;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("СсылкаНаСозданнуюОрганизацию") Тогда
		СсылкаНаСозданнуюОрганизацию = СохраненныеНастройки.СсылкаНаСозданнуюОрганизацию;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("СсылкиНаДокументы") Тогда
		СсылкиНаДокументы.Очистить();
		Для каждого СтрокаТЗ Из СохраненныеНастройки.СсылкиНаДокументы Цикл
			ЗаполнитьЗначенияСвойств(СсылкиНаДокументы.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МесяцНачалаЭксплуатации) Тогда
		МесяцНачалаЭксплуатации = НачалоГода(ТекущаяДатаСеанса());
	КонецЕсли;
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "МесяцНачалаЭксплуатации", "МесяцНачалаЭксплуатацииСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиНастроекНаКлиенте(ЗавершитьНастройку = Ложь)
	
	Модифицированность = Ложь;
	ОбновитьПовторноИспользуемыеЗначения();
	ПослеЗаписиНастроекНаСервере();
	Если ЗаписьПередПереходомКНастройкам Тогда
		ОбработатьКомандуСменыСтраницы(1);
		ОбновитьФормуПриСменеСтраницы();
		ОбновитьФормуПервоначальногоВводаПоНастройкам();
		ЗаписьПередПереходомКНастройкам = Ложь;
	ИначеЕсли ЗавершитьНастройкуПослеЗаписи Тогда
		ЗавершитьНачальнуюНастройкуПрограммыНаСервере();
	КонецЕсли;
	ЗарплатаКадрыРасширенныйВызовСервера.ПередОбновлениемИнтерфейса();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНастроекНаСервере()
	
	ПолучитьНастройкиПрограммы();
	
	СохраненныеНастройкиХранилище = Константы.НачальнаяНастройкаПрограммыОтветыПользователя.Получить();
	СохраненныеНастройки = СохраненныеНастройкиХранилище.Получить();
	Если СохраненныеНастройки <> Неопределено Тогда
		
		Если СохраненныеНастройки.Свойство("СсылкаНаСозданнуюОрганизацию") Тогда
			СсылкаНаСозданнуюОрганизацию = СохраненныеНастройки.СсылкаНаСозданнуюОрганизацию;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьФормуПоНастройкам();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыПоказателейЗарплаты(ПараметрыПоказателей)
	
	ПараметрыПоказателей.ОкладТарифТочность = ОкладТарифТочность;
	ПараметрыПоказателей.ОкладТарифЧасовойТочность = ОкладТарифЧасовойТочность;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыЕжемесячнойПремии(ПараметрыЕжемесячнойПремии)
	
	ПараметрыЕжемесячнойПремии.ИспользоватьПремиюСуммой = НачисляетсяЕжемесячнаяПремия И ЕжемесячнаяПремияСпособРасчета <> 0;
	ПараметрыЕжемесячнойПремии.ИспользоватьПремиюПроцентом = НачисляетсяЕжемесячнаяПремия И ЕжемесячнаяПремияСпособРасчета <> 1;
	ПараметрыЕжемесячнойПремии.БазовыйПериодПрошлыйМесяц = БазовыйПериодЕжемесячнойПремии = 1;
	ПараметрыЕжемесячнойПремии.КодДохода = ЕжемесячнаяПремияКодДоходаНДФЛ;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыКвартальнойПремии(ПараметрыКвартальнойПремии)
	
	НомераМесяцевНачисленияКвартальнойПремии = Новый Массив;
	Если НачисляетсяКвартальнаяПремия И КвартальнаяПремияВариантНачисления = 2 Тогда
		
		Для Сч=1 По 12 Цикл
			ПутьРеквизита = "НачисляетсяВМесяце" + ?(Сч<10,"0","") + Сч;
			Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтаФорма, ПутьРеквизита);
			Если Значение Тогда
				НомераМесяцевНачисленияКвартальнойПремии.Добавить(Сч);
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;
	
	ПараметрыКвартальнойПремии.ИспользоватьПремиюСуммой = НачисляетсяКвартальнаяПремия И КвартальнаяПремияСпособРасчета <> 0;
	ПараметрыКвартальнойПремии.ИспользоватьПремиюПроцентом = НачисляетсяКвартальнаяПремия И КвартальнаяПремияСпособРасчета <> 1;
	ПараметрыКвартальнойПремии.НомераМесяцевНачисленияКвартальнойПремии = НомераМесяцевНачисленияКвартальнойПремии;
	ПараметрыКвартальнойПремии.НачисляетсяПоЗначениюПоказателей = (КвартальнаяПремияВариантНачисления = 0);
	ПараметрыКвартальнойПремии.НачисляетсяОтдельнымДокументом   = (КвартальнаяПремияВариантНачисления = 1);
	ПараметрыКвартальнойПремии.НачисляетсяВМесяцах 			    = (КвартальнаяПремияВариантНачисления = 2);
	ПараметрыКвартальнойПремии.КодДохода = КвартальнаяПремияКодДоходаНДФЛ;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыГодовойПремии(ПараметрыГодовойПремии)
	
	НомерМесяцаНачисленияГодовойПремии = 0;
	Если НачисляетсяГодоваяПремия Тогда
		МесяцНачисленияПремии = МесяцыСтрокой.Найти(ГодоваяПремияМесяцНачисления);
		Если МесяцНачисленияПремии <> Неопределено Тогда
			НомерМесяцаНачисленияГодовойПремии = МесяцНачисленияПремии + 1;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыГодовойПремии.ИспользоватьПремиюСуммой = НачисляетсяГодоваяПремия И ГодоваяПремияСпособРасчета <> 0;
	ПараметрыГодовойПремии.ИспользоватьПремиюПроцентом = НачисляетсяГодоваяПремия И ГодоваяПремияСпособРасчета <> 1;
	ПараметрыГодовойПремии.НомерМесяцаНачисленияГодовойПремии = НомерМесяцаНачисленияГодовойПремии;
	ПараметрыГодовойПремии.НачисляетсяПоЗначениюПоказателей = (ГодоваяПремияВариантНачисления = 0);
	ПараметрыГодовойПремии.НачисляетсяОтдельнымДокументом   = (ГодоваяПремияВариантНачисления = 1);
	ПараметрыГодовойПремии.НачисляетсяВМесяцах 			    = (ГодоваяПремияВариантНачисления = 2);
	ПараметрыГодовойПремии.КодДохода = ГодоваяПремияКодДоходаНДФЛ;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыРазовойПремии(ПараметрыРазовойПремии)
	
	ПараметрыРазовойПремии.ИспользоватьПремиюСуммой = НачисляетсяРазоваяПремия И РазоваяПремияСпособРасчета <> 0;
	ПараметрыРазовойПремии.ИспользоватьПремиюПроцентом = НачисляетсяРазоваяПремия И РазоваяПремияСпособРасчета <> 1;
	ПараметрыРазовойПремии.ЧислоМесяцевПериодаРазовойПремии = РазоваяПремияДлительностьПериода;
	ПараметрыРазовойПремии.НачисляетсяПоЗначениюПоказателей = (РазоваяПремияВариантНачисления = 0);
	ПараметрыРазовойПремии.НачисляетсяОтдельнымДокументом   = (РазоваяПремияВариантНачисления = 1);
	ПараметрыРазовойПремии.КодДохода = ПремияРазоваяКодДоходаНДФЛ;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыНадбавки(ПараметрыНадбавки)
	
	ПараметрыНадбавки.ИспользоватьНадбавкуЗаВредность = ИспользоватьНадбавкуЗаВредность;
	ПараметрыНадбавки.ИспользоватьНадбавкуЗаВыслугуЛет = НачисляетсяНадбавкаЗаВыслугуЛет;
	ПараметрыНадбавки.НадбавкиПроцентом = НадбавкиПроцентом.Выгрузить().ВыгрузитьКолонку("НаименованиеНадбавки");
	ПараметрыНадбавки.НадбавкиСуммой    = НадбавкиСуммой.Выгрузить().ВыгрузитьКолонку("НаименованиеНадбавки");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыНатуральныхДоходов(ПараметрыНатуральныхДоходов)
	
	ПараметрыНатуральныхДоходов.ОплатаТрудаВНатуральнойФорме = ОплатаТрудаВНатуральнойФорме;
	ПараметрыНатуральныхДоходов.НатуральныеДоходы = НатуральныеДоходы.Выгрузить().ВыгрузитьКолонку("НаименованиеНатуральногоДохода");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыДополнительныеОтпуска(ПараметрыДополнительныеОтпуска)
	
	ПараметрыДополнительныеОтпуска.ДополнительныеОтпуска = ДополнительныеОтпуска.Выгрузить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыКомпенсационныеВыплаты(ПараметрыКомпенсационныеВыплаты)
	
	ПараметрыКомпенсационныеВыплаты = КомпенсационныеВыплаты.Выгрузить();
	ПараметрыКомпенсационныеВыплаты.Колонки.Добавить("КодДоходаНДФЛ", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	ПараметрыКомпенсационныеВыплаты.Колонки.Добавить("КодДоходаСтраховыеВзносы",Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовПоСтраховымВзносам"));
	ПараметрыКомпенсационныеВыплаты.Колонки.Добавить("КодДоходаСтраховыеВзносы2017",Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовПоСтраховымВзносам"));
	ПараметрыКомпенсационныеВыплаты.Колонки.Добавить("Показатель",Новый ОписаниеТипов("Строка"));
	
	Для каждого СтрокаТЗ Из ПараметрыКомпенсационныеВыплаты Цикл
		ИндексМассива = ВариантыНалогообложенияКомпенсаций.Найти(СтрокаТЗ.Налогообложение);
		Если ИндексМассива <> Неопределено Тогда
			СтрокаТЗ.КодДоходаНДФЛ = ВариантыНДФЛКомпенсаций["_"+Строка(ИндексМассива)];
			СтрокаТЗ.КодДоходаСтраховыеВзносы = ВариантыВзносыКомпенсаций["_"+Строка(ИндексМассива)];
			СтрокаТЗ.КодДоходаСтраховыеВзносы2017 = СтрокаТЗ.КодДоходаСтраховыеВзносы;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыПрочиеНачисления(ПараметрыПланВидовРасчета)
	
	ПараметрыПланВидовРасчета.ИспользоватьОплатуДнейСдачиКрови = ИспользоватьОплатуДнейСдачиКрови;
	ПараметрыПланВидовРасчета.ИспользоватьОплатуДнейСдачиКровиВнутрисменных = ИспользоватьОплатуДнейСдачиКровиВнутрисменных;
	ПараметрыПланВидовРасчета.ИспользоватьРазовоеНачисление = ИспользоватьРазовоеНачисление;
	ПараметрыПланВидовРасчета.ИспользоватьДоплатуЗаВыполнениеПлана = ИспользоватьДоплатуЗаВыполнениеПлана И ДоплатаЗаВыполнениеПланаСпособНачисления <> 1;
	ПараметрыПланВидовРасчета.ИспользоватьДоплатуЗаВыручкуОтРеализации = ИспользоватьДоплатуЗаВыполнениеПлана И ДоплатаЗаВыполнениеПланаСпособНачисления <> 0;
	ПараметрыПланВидовРасчета.ИспользоватьПодневнуюОплатуТруда = ИспользоватьПодневнуюОплатуТруда;
	ПараметрыПланВидовРасчета.КоличествоОкладовДляМатериальнойПомощи = ?(КоличествоОкладовДляМатериальнойПомощи = 0, 1, КоличествоОкладовДляМатериальнойПомощи);
	ПараметрыПланВидовРасчета.КоличествоОкладовДляМатериальнойПомощиГосслужащего = ?(КоличествоОкладовДляМатериальнойПомощиГосслужащего = 0, 2, КоличествоОкладовДляМатериальнойПомощиГосслужащего);
	ПараметрыПланВидовРасчета.КоличествоОкладовДляВыплатыКОтпуску = ?(КоличествоОкладовДляВыплатыКОтпуску = 0, 2, КоличествоОкладовДляВыплатыКОтпуску);
	ПараметрыПланВидовРасчета.КоличествоОкладовДляВыплатыКОтпускуГосслужащего = ?(КоличествоОкладовДляВыплатыКОтпускуГосслужащего = 0, 2, КоличествоОкладовДляВыплатыКОтпускуГосслужащего);
	ПараметрыПланВидовРасчета.ИспользоватьУдержаниеВСчетВозмещенияУщерба = ИспользоватьУдержаниеВСчетВозмещенияУщерба;
	ПараметрыПланВидовРасчета.РегистрироватьСдельнуюОплатуВБухучете = РегистрироватьСдельнуюОплатуВБухучете;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНастройкиНаСервере()
	
	// обновим зависимые настройки
	Если Не ИспользоватьВоеннуюСлужбу Тогда
		ИспользоватьРасчетДенежногоДовольствияВоеннослужащих = Ложь;
		ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву = Ложь;
		РазрешеноСовместительствоВоеннослужащимПоКонтракту = Ложь;
		ПремияЗаДВСОРассчитываетсяПоОкладуНаНачалоМесяца = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьМуниципальнуюСлужбу Тогда
		НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьГосударственнуюСлужбу Тогда
		ИспользоватьРасчетДенежногоСодержанияПрокуроров = Ложь;
		ИспользоватьРасчетДенежногоСодержанияСудей = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьГосударственнуюСлужбу И Не ИспользоватьМуниципальнуюСлужбу Тогда
		ИспользоватьУчетКлассныхЧинов = Ложь;
		ИспользоватьРасчетСохраняемогоДенежногоСодержания = Ложь;
		ИспользоватьГосударственныеМуниципальныеДолжности = Ложь;
		ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГражданскойСлужбы = Ложь;
		ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГосударственнойСлужбы = Ложь;
		ИспользоватьСохраняемоеДенежноеСодержаниеСудей = Ложь;
	КонецЕсли;
	
	Если ИспользоватьГосударственнуюСлужбу Тогда
		ИспользоватьУчетКлассныхЧинов = Истина;
		ИспользоватьГосударственныеМуниципальныеДолжности = ИспользоватьГосударственныеДолжности;
		ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГражданскойСлужбы = (ПорядокРасчетаОтпусковДолжностейГражданскойСлужбы = 1);
		ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГосударственнойСлужбы = (ПорядокРасчетаОтпусковГосударственныхДолжностей = 1);
		ИспользоватьСохраняемоеДенежноеСодержаниеСудей = (ПорядокРасчетаОтпусковСудей = 1);
	ИначеЕсли ИспользоватьМуниципальнуюСлужбу Тогда
		ИспользоватьГосударственныеМуниципальныеДолжности = ИспользоватьМуниципальныеДолжности;
		ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГражданскойСлужбы = (ПорядокРасчетаОтпусковДолжностейМуниципальнойСлужбы = 1);
		ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГосударственнойСлужбы = (ПорядокРасчетаОтпусковМуниципальныхДолжностей = 1);
	КонецЕсли;
	
	СохраняемыеРеквизитыФормы = ЗначенияСохраняемыхРеквизитовФормы(Истина);
	
	СтруктураПараметров = НачальнаяНастройкаПрограммы.ОписаниеПараметровНачальнойНастройкиПрограммы(); 
	
	ПараметрыНастроекЗК  = СтруктураПараметров.ПараметрыНастроекЗК;
	ПараметрыОрганизации = СтруктураПараметров.ПараметрыОрганизации;
	ПараметрыПрограммы   = СтруктураПараметров.ПараметрыПрограммы;
	ПараметрыНачальнойНастройки = СтруктураПараметров.ПараметрыНачальнойНастройки;
	
	// Заполняем ПараметрыНастроекЗК.
	
	ПараметрыПланВидовРасчета = РасчетЗарплатыРасширенный.ОписаниеПараметровПланаВидовРасчета(); 
	ПараметрыПланВидовРасчета.НачальнаяНастройкаПрограммы = Истина;
	ЗаполнитьПараметрыГодовойПремии(ПараметрыПланВидовРасчета.ГодоваяПремия);
	ЗаполнитьПараметрыКвартальнойПремии(ПараметрыПланВидовРасчета.КвартальнаяПремия);
	ЗаполнитьПараметрыЕжемесячнойПремии(ПараметрыПланВидовРасчета.ЕжемесячнаяПремия);
	ЗаполнитьПараметрыРазовойПремии(ПараметрыПланВидовРасчета.РазоваяПремия);
	ЗаполнитьПараметрыНадбавки(ПараметрыПланВидовРасчета.Надбавки);
	ЗаполнитьПараметрыКомпенсационныеВыплаты(ПараметрыПланВидовРасчета.КомпенсационныеВыплаты);
	ЗаполнитьПараметрыНатуральныхДоходов(ПараметрыПланВидовРасчета.НатуральныеДоходы);
	ЗаполнитьПараметрыДополнительныеОтпуска(ПараметрыПланВидовРасчета.ДополнительныеОтпуска);
	ЗаполнитьПараметрыПоказателейЗарплаты(ПараметрыПланВидовРасчета.ПараметрыПоказателей);
	ЗаполнитьПараметрыПрочиеНачисления(ПараметрыПланВидовРасчета);
	
	ПараметрыНастроекЗК.ПараметрыПланВидовРасчета = ПараметрыПланВидовРасчета;
	ПараметрыНастроекЗК.НастройкиРасчетаЗарплаты = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиРасчетаЗарплаты, Метаданные.РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный);
	ПараметрыНастроекЗК.НастройкиКадровогоУчета = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиКадровогоУчета, Метаданные.РегистрыСведений.НастройкиКадровогоУчета);
	ПараметрыНастроекЗК.НастройкиШтатногоРасписания = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиШтатногоРасписания, Метаданные.РегистрыСведений.НастройкиШтатногоРасписания);
	ПараметрыНастроекЗК.НастройкиВоинскогоУчета = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиВоинскогоУчета, Метаданные.РегистрыСведений.НастройкиВоинскогоУчета);
	ПараметрыНастроекЗК.НастройкиУчетаВремени = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиУчетаВремени, Метаданные.РегистрыСведений.НастройкиУчетаВремени);
	ПараметрыНастроекЗК.НастройкиЗаймовСотрудникам = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиЗаймовСотрудникам, Метаданные.РегистрыСведений.НастройкиЗаймовСотрудникам);
	ПараметрыНастроекЗК.НастройкиСтатистикиПерсонала = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиСтатистикиПерсонала, Метаданные.РегистрыСведений.НастройкиСтатистикиПерсонала);
	
	// Заполняем ПараметрыОрганизации.
	
	ПараметрыОрганизации.ОрганизацияИндивидуальныйПредприниматель = ОрганизацияИндивидуальныйПредприниматель;
	ЗаписыватьОрганизацию = Ложь;
	Если ОрганизацияИндивидуальныйПредприниматель Тогда
		ЗаписыватьОрганизацию = Не ПустаяСтрока(ИндивидуальныйПредприниматель.ФИО);
	Иначе
		ЗаписыватьОрганизацию = Не ПустаяСтрока(Организация.Наименование);
	КонецЕсли;
	Если ЗаписыватьОрганизацию Тогда
		ПараметрыОрганизации.Организация = СохраняемыеРеквизитыФормы.Организация;
		ПараметрыОрганизации.ИндивидуальныйПредприниматель = СохраняемыеРеквизитыФормы.ИндивидуальныйПредприниматель;
		ПараметрыОрганизации.РегистрацияВНалоговомОргане   = СохраняемыеРеквизитыФормы.РегистрацияВНалоговомОргане;
	КонецЕсли;
	ПараметрыОрганизации.ТерриториальныеУсловияПФР = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(ТерриториальныеУсловияПФР, Метаданные.РегистрыСведений.ТерриториальныеУсловияПФР);
	ПараметрыОрганизации.ПрименяемыеТарифыСтраховыхВзносов = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(ПрименяемыеТарифыСтраховыхВзносов, Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов);
	ПараметрыОрганизации.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев, Метаданные.РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев);
	ПараметрыОрганизации.НастройкиУчетаСтраховыхВзносов = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиУчетаСтраховыхВзносов, Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносов);
	ПараметрыОрганизации.НастройкиУчетаПособийСоциальногоСтрахования = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиУчетаПособийСоциальногоСтрахования, Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования);
	ПараметрыОрганизации.УчетнаяПолитикаОрганизаций = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(УчетнаяПолитикаОрганизаций, Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций);
	ПараметрыОрганизации.НастройкиЗарплатаКадрыРасширенная = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(ЗарплатаКадрыНастройкиОрганизации, Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);
	
	// Заполняем ПараметрыПрограммы.
	ЗаполнитьЗначенияСвойств(ПараметрыПрограммы, ЭтаФорма);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.НачальнаяНастройкаПрограммыРеквизитыФормыВПараметры(ЭтаФорма, СтруктураПараметров);
	КонецЕсли;
	
	// Заполняем ПараметрыНачальнойНастройки.
	ПараметрыНачальнойНастройки.ТекущаяСтраницаИмя = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	
	ПараметрыНачальнойНастройки.СохраняемыеЗначения = СохраняемыеРеквизитыФормы;
	
	НачальнаяНастройкаПрограммы.ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(ЭтаФорма, СтруктураПараметров);
	
	НаименованиеЗадания = НСтр("ru = 'Сохранение настроек программы'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
	УникальныйИдентификатор,
	"Обработки.НачальнаяНастройкаПрограммы.ЗаписатьНастройки",
	СтруктураПараметров,
	НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ПослеЗаписиНастроекНаКлиенте();
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗаписатьНастройкиОсобенностейБюджетногоУчреждения()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ПослеЗаписиНастроекНаСервере();
				ОтказОтНачальнойНастройкиПрограммыНаСервере(Истина);
				ЗарплатаКадрыРасширенныйВызовСервера.ПередОбновлениемИнтерфейса();
				ОбновитьИнтерфейс();
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияЗаписатьНастройкиОсобенностейБюджетногоУчреждения",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ДанныеОбОрганизациях()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ИндивидуальныйПредприниматель,
	|	Организации.ЮридическоеФизическоеЛицо,
	|	Организации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудФармацевтов, ЛОЖЬ) КАК ИспользуетсяТрудФармацевтов,
	|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудЧленовЛетныхЭкипажей, ЛОЖЬ) КАК ИспользуетсяТрудЧленовЛетныхЭкипажей,
	|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудЧленовЭкипажейМорскихСудов, ЛОЖЬ) КАК ИспользуетсяТрудЧленовЭкипажейМорскихСудов,
	|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудШахтеров, ЛОЖЬ) КАК ИспользуетсяТрудШахтеров,
	|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуютсяРаботыСДосрочнойПенсией, ЛОЖЬ) КАК ИспользуютсяРаботыСДосрочнойПенсией,
	|	ЕСТЬNULL(НастройкиОрганизаций.ДатаВыплатыАвансаНеПозжеЧем, 0) КАК ДатаВыплатыАвансаНеПозжеЧем,
	|	ЕСТЬNULL(НастройкиОрганизаций.ДатаВыплатыЗарплатыНеПозжеЧем, 0) КАК ДатаВыплатыЗарплатыНеПозжеЧем,
	|	ЕСТЬNULL(НастройкиОрганизаций.ПроцентДоплатыЗаДниНетрудоспособности, 0) КАК ПроцентДоплатыЗаДниНетрудоспособности,
	|	Организации.ВерсияДанных КАК ВерсияДанных,
	|	Организации.ПрименятьСевернуюНадбавку КАК ПрименятьСевернуюНадбавку
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗарплатаКадрыРасширенная КАК НастройкиОрганизаций
	|		ПО Организации.Ссылка = НастройкиОрганизаций.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаСтраховыхВзносов КАК НастройкиУчетаСтраховыхВзносов
	|		ПО Организации.Ссылка = НастройкиУчетаСтраховыхВзносов.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование";
	
	Возврат Запрос.Выполнить();
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьНастройкиОрганизаций(РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	КоличествоОрганизацийВИБ = Выборка.Количество();
	
	Если КоличествоОрганизацийВИБ = 1 Тогда
		
		Выборка.Следующий();
		
		ОрганизацияСсылка = Выборка.Организация;
		ОрганизацияОбъект = ОрганизацияСсылка.ПолучитьОбъект();
		ОрганизацияОбъект.Прочитать();
		ЗначениеВРеквизитФормы(ОрганизацияОбъект, "Организация");
		ПредыдущееНаименованиеСокращенное = ОрганизацияОбъект.НаименованиеСокращенное;
		
		ИндивидуальныйПредпринимательСсылка = Выборка.ИндивидуальныйПредприниматель;
		ЮридическоеФизическоеЛицо = Выборка.ЮридическоеФизическоеЛицо;
		Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо И Не ИндивидуальныйПредпринимательСсылка.Пустая() Тогда
			ИндивидуальныйПредпринимательОбъект = ИндивидуальныйПредпринимательСсылка.ПолучитьОбъект();
			ИндивидуальныйПредпринимательОбъект.Прочитать();
			ЗначениеВРеквизитФормы(ИндивидуальныйПредпринимательОбъект, "ИндивидуальныйПредприниматель");
		КонецЕсли;
		
		РегистрацияВНалоговомОрганеСсылка = Выборка.РегистрацияВНалоговомОргане;
		Если РегистрацияВНалоговомОрганеСсылка.Пустая() Тогда
			РегистрацияВНалоговомОрганеСсылка = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку();
		КонецЕсли;
		РегистрацияВНалоговомОрганеОбъект = РегистрацияВНалоговомОрганеСсылка.ПолучитьОбъект();
		
		Если РегистрацияВНалоговомОрганеОбъект = Неопределено Тогда
			РегистрацияВНалоговомОрганеОбъект = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
			РегистрацияВНалоговомОрганеОбъект.УстановитьСсылкуНового(РегистрацияВНалоговомОрганеСсылка);
			РегистрацияВНалоговомОрганеОбъект.Владелец = Организация.Ссылка;
			Организация.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОрганеСсылка;
		Иначе
			РегистрацияВНалоговомОрганеОбъект.Прочитать();
		КонецЕсли;
		ЗначениеВРеквизитФормы(РегистрацияВНалоговомОрганеОбъект, "РегистрацияВНалоговомОргане");
		
		Отбор = Новый Структура("ГоловнаяОрганизация", ОрганизацияСсылка);
		ЗаполнитьЗначенияСвойств(ПрименяемыеТарифыСтраховыхВзносов, РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(,Отбор));
		Если Не ЗначениеЗаполнено(ПрименяемыеТарифыСтраховыхВзносов.Период) Тогда
			ПрименяемыеТарифыСтраховыхВзносов.Период = Дата(2010,1,1);
			ПрименяемыеТарифыСтраховыхВзносов.ВидТарифа = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим");
		КонецЕсли;
		
		Отбор = Новый Структура("Организация", ОрганизацияСсылка);
		
		ЗаполнитьЗначенияСвойств(СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев, РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СрезПоследних(,Отбор));
		Если Не ЗначениеЗаполнено(СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.Период) ИЛИ СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.Ставка = 0 Тогда
			ЗаписьПоУмолчанию = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.ЗаписьПоУмолчанию();
			ЗаполнитьЗначенияСвойств(СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев, ЗаписьПоУмолчанию);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(УчетнаяПолитикаОрганизаций, РегистрыСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(,Отбор));
		Если Не ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.Период) Тогда
			УчетнаяПолитикаОрганизаций.Период = Дата(2010,1,1);
			УчетнаяПолитикаОрганизаций.ПлательщикЕНВД = Ложь;
		КонецЕсли;
		
		Отбор = Новый Структура("СтруктурнаяЕдиница", ОрганизацияСсылка);
		ТерриториальныеУсловияПФРСрезПоследних = РегистрыСведений.ТерриториальныеУсловияПФР.СрезПоследних(,Отбор);
		Если ТерриториальныеУсловияПФРСрезПоследних.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ТерриториальныеУсловияПФР, ТерриториальныеУсловияПФРСрезПоследних[0]);
		Иначе
			ТерриториальныеУсловияПФР.Период = Дата(1,1,1);
			ТерриториальныеУсловияПФР.ТерриториальныеУсловияПФР = Справочники.ТерриториальныеУсловияПФР.ПустаяСсылка();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЗарплатаКадрыНастройкиОрганизации, Выборка);
		ЗаполнитьЗначенияСвойств(НастройкиУчетаСтраховыхВзносов, Выборка);
		
		Если Организация.РайонныйКоэффициент = 0 Тогда
			Организация.РайонныйКоэффициент = 1;
		КонецЕсли;
		Если Организация.РайонныйКоэффициентРФ = 0 Тогда
			Организация.РайонныйКоэффициентРФ = 1;
		КонецЕсли;
		
		ВыплачиватьЗарплатуВПоследнийДеньМесяца = ?(ЗарплатаКадрыНастройкиОрганизации.ВыплачиватьЗарплатуВПоследнийДеньМесяца, 1, 0);
		
		Если ЗарплатаКадрыНастройкиОрганизации.ДатаВыплатыАвансаНеПозжеЧем = 0 Тогда
			ЗарплатаКадрыНастройкиОрганизации.ДатаВыплатыАвансаНеПозжеЧем = 20;
		КонецЕсли;
		
		Если ЗарплатаКадрыНастройкиОрганизации.ДатаВыплатыЗарплатыНеПозжеЧем = 0 Тогда
			ЗарплатаКадрыНастройкиОрганизации.ДатаВыплатыЗарплатыНеПозжеЧем = 5;
		КонецЕсли;
		
		ОрганизацияЕстьОбособленныеПодразделения = Организация.ЕстьОбособленныеПодразделения;
		ПроцентДоплатыЗаДниНетрудоспособности = ЗарплатаКадрыНастройкиОрганизации.ПроцентДоплатыЗаДниНетрудоспособности;
		
	ИначеЕсли КоличествоОрганизацийВИБ = 0 Тогда
		
		ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
		ОрганизацияСсылкаНового = Справочники.Организации.ПолучитьСсылку();
		ОрганизацияОбъект.УстановитьСсылкуНового(ОрганизацияСсылкаНового);
		ОрганизацияОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		ОрганизацияОбъект.РайонныйКоэффициент = 1;
		ОрганизацияОбъект.РайонныйКоэффициентРФ = 1;
		
		ВыплачиватьЗарплатуВПоследнийДеньМесяца = 0;
		
		ЗарплатаКадрыНастройкиОрганизации.ДатаВыплатыАвансаНеПозжеЧем = 20;
		ЗарплатаКадрыНастройкиОрганизации.ДатаВыплатыЗарплатыНеПозжеЧем = 5;
		
		ПрименяемыеТарифыСтраховыхВзносов.Период = Дата(2010,1,1);
		ПрименяемыеТарифыСтраховыхВзносов.ВидТарифа = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим");
		
		ЗаписьПоУмолчанию = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.ЗаписьПоУмолчанию();
		ЗаполнитьЗначенияСвойств(СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев, ЗаписьПоУмолчанию);
		
		УчетнаяПолитикаОрганизаций.Период = Дата(2010,1,1);
		УчетнаяПолитикаОрганизаций.ПлательщикЕНВД = Ложь;
		
		РегистрацияВНалоговомОрганеОбъект = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
		СсылкаНового = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку();
		РегистрацияВНалоговомОрганеОбъект.УстановитьСсылкуНового(СсылкаНового);
		РегистрацияВНалоговомОрганеОбъект.Владелец = ОрганизацияСсылкаНового;
		ОрганизацияОбъект.РегистрацияВНалоговомОргане = СсылкаНового;
		
		ЗначениеВРеквизитФормы(ОрганизацияОбъект, "Организация");
		ЗначениеВРеквизитФормы(РегистрацияВНалоговомОрганеОбъект, "РегистрацияВНалоговомОргане");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбОрганизациях()
	
	РезультатЗапроса = ДанныеОбОрганизациях();
	ЗаполнитьНастройкиОрганизаций(РезультатЗапроса);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиПрограммы()
	
	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	НеИспользоватьНачислениеЗарплаты = Не ИспользоватьНачислениеЗарплаты;
	
	НастройкиПрограммыБюджетногоУчреждения = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиПрограммыБюджетногоУчреждения,,"РаботаВБюджетномУчреждении");
	РасчетДенежногоДовольствияВоеннослужащих = ?(ИспользоватьРасчетДенежногоДовольствияВоеннослужащих,2,1);
	ИспользоватьМедицинскоеУчреждение = НастройкиПрограммыБюджетногоУчреждения.РаботаВМедицинскомУчреждении;
	
	ПорядокРасчетаОтпусковДолжностейГражданскойСлужбы = ?(НастройкиПрограммыБюджетногоУчреждения.ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГражданскойСлужбы,1,2);
	ПорядокРасчетаОтпусковДолжностейМуниципальнойСлужбы = ПорядокРасчетаОтпусковДолжностейГражданскойСлужбы;
	Если ИспользоватьГосударственнуюСлужбу Тогда
		ИспользоватьГосударственныеДолжности = НастройкиПрограммыБюджетногоУчреждения.ИспользоватьГосударственныеМуниципальныеДолжности;
		ИспользоватьРасчетДенежногоСодержанияСудей = НастройкиПрограммыБюджетногоУчреждения.ИспользоватьРасчетДенежногоСодержанияСудей;
		ПорядокРасчетаОтпусковГосударственныхДолжностей   = ?(ИспользоватьГосударственныеДолжности,?(НастройкиПрограммыБюджетногоУчреждения.ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГосударственнойСлужбы,1,2),0);
		ПорядокРасчетаОтпусковСудей = ?(ИспользоватьРасчетДенежногоСодержанияСудей,?(НастройкиПрограммыБюджетногоУчреждения.ИспользоватьСохраняемоеДенежноеСодержаниеСудей,1,2),0);
	ИначеЕсли ИспользоватьМуниципальнуюСлужбу Тогда
		ИспользоватьМуниципальныеДолжности = НастройкиПрограммыБюджетногоУчреждения.ИспользоватьГосударственныеМуниципальныеДолжности;
		ПорядокРасчетаОтпусковМуниципальныхДолжностей       = ?(ИспользоватьМуниципальныеДолжности,?(НастройкиПрограммыБюджетногоУчреждения.ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГосударственнойСлужбы,1,2),0);
	КонецЕсли;
	
	ИспользоватьСтатьиФинансирования = Константы.ИспользоватьСтатьиФинансированияЗарплата.Получить();
	ИспользоватьПодработки = Константы.ИспользоватьПодработки.Получить();
	
	ЗаполнитьДанныеОбОрганизациях();
	
	Настройки = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, УправлениеШтатнымРасписанием.НастройкиШтатногоРасписания());
	ЗначениеВРеквизитФормы(Настройки, "НастройкиШтатногоРасписания");
	ЗначениеВРеквизитФормы(Настройки, "НастройкиШтатногоРасписанияПрежняя");
	
	Настройки = РегистрыСведений.НастройкиКадровогоУчета.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиКадровогоУчета");
	ЗначениеВРеквизитФормы(Настройки, "НастройкиКадровогоУчетаПрежняя");
	
	Настройки = РегистрыСведений.НастройкиВоинскогоУчета.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиВоинскогоУчета");
	ЗначениеВРеквизитФормы(Настройки, "НастройкиВоинскогоУчетаПрежняя");
	
	Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты());
	
	ЗначениеВРеквизитФормы(Настройки, "НастройкиРасчетаЗарплаты");
	ЗначениеВРеквизитФормы(Настройки, "НастройкиРасчетаЗарплатыПрежняя");
	
	Настройки = РегистрыСведений.НастройкиУчетаВремени.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиУчетаВремени");
	ЗначениеВРеквизитФормы(Настройки, "НастройкиУчетаВремениПрежняя");
	
	Настройки = РегистрыСведений.НастройкиЗаймовСотрудникам.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиЗаймовСотрудникам");
	
	Настройки = РегистрыСведений.НастройкиСтатистикиПерсонала.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	ЗначениеВРеквизитФормы(Настройки, "НастройкиСтатистикиПерсонала");
	ЗначениеВРеквизитФормы(Настройки, "НастройкиСтатистикиПерсоналаПрежнееЗначение");
	
	НачальнаяНастройкаПрограммы.НастройкиПрограммыВРеквизитыФормы(ЭтаФорма);
	
	ПоказательСсылка = ЗарплатаКадрыРасширенный.ПоказательПоИдентификатору("Оклад");
	ОкладТочность = 0;
	Если ПоказательСсылка <> Неопределено Тогда
		ОкладТочность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоказательСсылка, "Точность");
	КонецЕсли;
	ПоказательСсылка = ЗарплатаКадрыРасширенный.ПоказательПоИдентификатору("ТарифнаяСтавкаДневная");
	ТарифнаяСтавкаДневнаяТочность = 0;
	Если ПоказательСсылка <> Неопределено Тогда
		ТарифнаяСтавкаДневнаяТочность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоказательСсылка, "Точность");
	КонецЕсли;	
	ОкладТарифТочность = Макс(ОкладТочность, ТарифнаяСтавкаДневнаяТочность);
	ОкладТарифТочность = ?(ОкладТарифТочность>0,2,0);
	
	ПоказательСсылка = ЗарплатаКадрыРасширенный.ПоказательПоИдентификатору("ТарифнаяСтавкаЧасовая");
	ТарифнаяСтавкаЧасоваяТочность = 0;
	Если ПоказательСсылка <> Неопределено Тогда
		ТарифнаяСтавкаЧасоваяТочность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоказательСсылка, "Точность");
	КонецЕсли;
	ПоказательСсылка = ЗарплатаКадрыРасширенный.ПоказательПоИдентификатору("ЧасовойТарифПоДолжности");
	ЧасовойТарифПоДолжностиТочность = 0;
	Если ПоказательСсылка <> Неопределено Тогда
		ЧасовойТарифПоДолжностиТочность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоказательСсылка, "Точность");
	КонецЕсли;
	ОкладТарифЧасовойТочность = Макс(ТарифнаяСтавкаЧасоваяТочность, ЧасовойТарифПоДолжностиТочность);
	ОкладТарифЧасовойТочность = ?(ОкладТарифЧасовойТочность>2,3,?(ОкладТарифЧасовойТочность=1,2,ОкладТарифЧасовойТочность));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоНастройкам()
	
	Если РаботаВБюджетномУчреждении Тогда
		ОрганизацияИндивидуальныйПредприниматель = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаШтатноеРасписание.Видимость = Не ЗарплатаКадрыРасширенный.ШтатноеРасписаниеВсегдаИспользуется();
	
	// Страница НашиОрганизации
	// если организаций уже больше одной, изменим значение.
	ИспользоватьНесколькоОрганизаций = ?(ИспользуетсяБазоваяВерсия,Ложь,(ИспользоватьНесколькоОрганизаций Или КоличествоОрганизацийВИБ > 1));
	ОднаОрганизацияПереключатель = ?(ИспользоватьНесколькоОрганизаций,1,0);
	НесколькоОрганизацийПереключатель = ?(ИспользоватьНесколькоОрганизаций,1,0);
	Элементы.ОднаОрганизацияПереключатель.Доступность = (КоличествоОрганизацийВИБ < 2);
	ОбновитьГруппуОднаОрганизацияПоНастройкеЮридическоеФизическоеЛицо(ЭтаФорма);
	
	ОбновитьГруппыРК(ЭтаФорма);
	
	ИспользоватьИндексациюЗаработка = НастройкиРасчетаЗарплаты.ИспользоватьИндексациюЗаработка;
	
	// Страница НастройкиОрганизации.
	НеВыполнятьРасчетЗарплатыПоПодразделениям = Не НастройкиРасчетаЗарплаты.ВыполнятьРасчетЗарплатыПоПодразделениям;
	
	ОбновитьДоступностьЭлементовИспользоватьНачислениеЗарплаты(ЭтаФорма);
	
	// Страница СведенияОбОрганизации.
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(
	ЭтаФорма, "УчетнаяПолитикаОрганизаций.Период", "УчетнаяПолитикаПериодСтрокой");
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(
	ЭтаФорма, "ПрименяемыеТарифыСтраховыхВзносов.Период", "ПрименяемыеТарифыПериодСтрокой");
	
	ОписаниеТарифаВзносов = УчетСтраховыхВзносовКлиентСервер.ОписаниеВидаТарифа(ПрименяемыеТарифыСтраховыхВзносов.ВидТарифа);
	Элементы.ДекорацияОписаниеТарифаВзносов.Заголовок = УчетСтраховыхВзносовКлиентСервер.ОписаниеВидаТарифа(ПрименяемыеТарифыСтраховыхВзносов.ВидТарифа);
	ПрименяютсяРезультатыСпециальнойОценкиУсловийТрудаПрежнееЗначение = НастройкиУчетаСтраховыхВзносов.ПрименяютсяРезультатыСпециальнойОценкиУсловийТруда;
	Элементы.ПрименяютсяРезультатыСпециальнойОценкиУсловийТруда.Доступность = НастройкиУчетаСтраховыхВзносов.ИспользуютсяРаботыСДосрочнойПенсией;
	
	Если Не ЗначениеЗаполнено(НастройкиРасчетаЗарплаты.ПорядокРасчетаСтоимостиЕдиницыВремени) Тогда
		НастройкиРасчетаЗарплаты.ПорядокРасчетаСтоимостиЕдиницыВремени = ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТрудаПоСреднегодовомуЗначению;
	КонецЕсли;
	
	ИспользоватьРегистрациюПрочихДоходов = НастройкиРасчетаЗарплаты.ИспользоватьРегистрациюПрочихДоходов;
	ИспользоватьЗаймыСотрудникам = НастройкиЗаймовСотрудникам.ИспользоватьЗаймыСотрудникам;
	ИспользоватьОплатуПростоев = НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев;
	ИспользоватьОплатуВнутрисменныхПростоев = НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев;
	ФормаОтчетностиМониторингаРаботниковСоциальнойСферы = НастройкиСтатистикиПерсонала.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы;
	ИспользоватьИсториюИзмененияШтатногоРасписания = НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания;
	ИспользоватьНесколькоТарифныхСтавок = НастройкиРасчетаЗарплаты.ИспользоватьНесколькоТарифныхСтавок;
	ИспользоватьКраткосрочныеИзмененияОплатыТрудаВЗависимостиОтВыполняемойРаботы = НастройкиРасчетаЗарплаты.ИспользоватьКраткосрочныеИзмененияОплатыТрудаВЗависимостиОтВыполняемойРаботы;
	ИспользоватьНадбавкуЗаВредность     = НастройкиРасчетаЗарплаты.ИспользоватьНадбавкуЗаВредность;
	ИспользоватьНесколькоВидовПлановогоВремени = НастройкиУчетаВремени.ИспользоватьНесколькоВидовПлановогоВремени;
	УчитыватьВремяНаКормлениеРебенка = НастройкиУчетаВремени.УчитыватьВремяНаКормлениеРебенка;
	
	// Страница КомандировкиОплатаПоСреднему.
	ОбновитьДоступностьНастроекИспользоватьОплатуКомандировок(ЭтаФорма);
	ОбновитьДоступностьНастроекИспользоватьОплатуДнейСдачиКрови(ЭтаФорма);
	
	// Страницы ПростоиНевыходы, ОтпускаБезОплаты.
	ОбновитьДоступностьНастроекИспользоватьОплатуПростоев(ЭтаФорма);
	ОбновитьДоступностьНастроекИспользоватьУчетПрочихНевыходов(ЭтаФорма);
	ОбновитьДоступностьНастроекИспользоватьОтпускаБезОплаты(ЭтаФорма);
	
	ГодоваяПремияВариантНачисленияПриИзменении(ЭтаФорма, Ложь);
	ОбновитьДоступностьНастроекНачисляетсяГодоваяПремия(ЭтаФорма);
	Элементы.ГодоваяПремияМесяцНачисления.Доступность = (ГодоваяПремияВариантНачисления=2);
	
	КвартальнаяПремияВариантНачисленияПриИзменении(ЭтаФорма);
	ОбновитьДоступностьНастроекНачисляетсяКвартальнаяПремия(ЭтаФорма);
	
	ОбновитьДоступностьНастроекНачисляетсяЕжемесячнаяПремия(ЭтаФорма);
	ОбновитьДоступностьНастроекЕжемесячнаяПремияСпособРасчета(ЭтаФорма);
	
	ОбновитьДоступностьНастроекНачисляетсяРазоваяПремия(ЭтаФорма);
	Если РазоваяПремияДлительностьПериода = 0 Тогда
		РазоваяПремияДлительностьПериода = 1;
	КонецЕсли;
	
	ОбновитьДоступностьНастроекМониторингаРаботниковСоциальнойСферы(ЭтаФорма);
	ОбновитьДоступностьНастроекОтчетаМониторингаРаботниковСоциальнойСферы(ЭтаФорма);
	ОбновитьДоступностьНастроекШтатногоРасписания(ЭтаФорма);
	ОбновитьДоступностьНастроекВоинскийУчет(ЭтаФорма);
	ОбновитьДоступностьНастроекОтказОтНачальнойНастройкиПрограммы(ЭтаФорма);
	
	ОбновитьДоступностьНастроекИспользоватьДоплатуЗаВыполнениеПлана(ЭтаФорма);
	
	УстановитьДоступностьПроцентДоплатыЗаДниНетрудоспособности(ЭтаФорма);
	УстановитьСтраницыДоплатаЗаДниБолезни(ЭтаФорма);
	
	ОбновитьСтраницуПочасоваяОплата();
	ОбновитьСтраницуНадбавки();
	ОбновитьСтраницуДоходыВНатуральнойФорме();
	
	ОбновитьДоступностьНастроекМатериальнойПомощиКОтпуску(ЭтаФорма);
	ОбновитьВидимостьПроцентаСевернойНадбавкиДляРасчетаФОТ(ЭтаФорма);
	
	ОбновитьСтраницуМуниципальныеСлужащие(ЭтаФорма);
	ОбновитьСтраницуГосударственныеСлужащие(ЭтаФорма);
	ОбновитьФормуПоНастройкамИспользоватьГосударственнуюМуниципальнуюСлужбу(ЭтаФорма);
	УстановитьСтраницуСтраницаНастройкиВоеннослужащие(ЭтаФорма);
	
	ОбновитьДоступностьНастроекПодборПерсонала(ЭтотОбъект);

	Если КоличествоОкладовДляВыплатыКОтпускуГосслужащего = 0 Тогда
		КоличествоОкладовДляВыплатыКОтпускуГосслужащего = 2;
	КонецЕсли;
	Если КоличествоОкладовДляМатериальнойПомощиГосслужащего = 0 Тогда
		КоличествоОкладовДляМатериальнойПомощиГосслужащего = 1;
	КонецЕсли;
	Если КоличествоОкладовДляВыплатыКОтпуску = 0 Тогда
		КоличествоОкладовДляВыплатыКОтпуску = 2;	
	КонецЕсли;
	Если НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощьПриОтпуске И КоличествоОкладовДляМатериальнойПомощи = 0 Тогда
		КоличествоОкладовДляМатериальнойПомощи = 1;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаДоплатаЗаВыполнениеПлана","Видимость", Не ВыполненУпрощенныйПеренос);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаЗавершениеРаботы","Видимость", Не ВыполненУпрощенныйПеренос);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаНапечататьОтчет","Видимость", ВыполненУпрощенныйПеренос);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ЗаголовокЗавершениеНачальнойНастройки","Видимость", Не ВыполненУпрощенныйПеренос);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ЗаголовокЗавершениеНачальнойНастройкиПослеПереноса","Видимость", ВыполненУпрощенныйПеренос);
	
	
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьГруппуОднаОрганизацияПоНастройкеЮридическоеФизическоеЛицо(Форма)
	
	ЭтоЮрлицо = Не Форма.ОрганизацияИндивидуальныйПредприниматель;
	
	Если ЭтоЮрлицо Тогда
		Форма.Элементы.СтраницыВидОрганизации.ТекущаяСтраница = Форма.Элементы.СтраницаЮрлицо;
		ОрганизацииКлиентСервер.ОбработатьОтображениеПоляИНН(Форма.Элементы.ОрганизацияИНН, Форма.Организация.ИНН, Форма.Организация.ЮридическоеФизическоеЛицо, Форма);
		ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(Форма.Элементы.ОрганизацияОГРН, Форма.Организация.ОГРН, Форма.Организация.ЮридическоеФизическоеЛицо, Форма);
	Иначе
		
		Форма.Элементы.СтраницыВидОрганизации.ТекущаяСтраница = Форма.Элементы.СтраницаФизическоеЛицо;
		
		ОрганизацииКлиентСервер.ОбработатьОтображениеПоляИНН(Форма.Элементы.ИндивидуальныйПредпринимательИНН, Форма.ИндивидуальныйПредприниматель.ИНН, Форма.Организация.ЮридическоеФизическоеЛицо, Форма);
		Форма.Элементы.ИндивидуальныйПредпринимательИНННадпись.ЦветТекста = Форма.Элементы.ОрганизацияИНННадпись.ЦветТекста;
		Форма.Элементы.ИндивидуальныйПредпринимательИНННадпись.Подсказка  = Форма.Элементы.ОрганизацияИНННадпись.Подсказка;
		
		ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(Форма.Элементы.ОГРНИП, Форма.Организация.ОГРН, Форма.Организация.ЮридическоеФизическоеЛицо, Форма);
		Форма.Элементы.ИндивидуальныйПредпринимательОГРННадпись.ЦветТекста = Форма.Элементы.ОрганизацияОГРННадпись.ЦветТекста;
		Форма.Элементы.ИндивидуальныйПредпринимательОГРННадпись.Подсказка = Форма.Элементы.ОрганизацияОГРННадпись.Подсказка;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьГруппыРК(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаРКНастройки, Форма.Организация.ПрименятьРайонныйКоэффициент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтраницуНадбавки()
	
	ОбновитьДоступностьНастроекНачисляетсяНадбавкаЗаВыслугуЛет(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтраницуДоходыВНатуральнойФорме()
	
	ОбновитьДоступностьНастроекИспользоватьДоходыВНатуральнойФорме(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекШтатногоРасписания(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.КонтрольДокументов, Форма.НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание);
	
	Если Форма.НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание Тогда
		Форма.ИспользоватьТарифныеСеткиПриРасчетеЗарплатыОписание = НСтр("ru = 'Если в организации используются разряды (квалификационные категории) сотрудников и тарифные группы при описании позиции штатного расписания и при расчете заработной платы, установите этот флажок.'");
	Иначе
		Форма.ИспользоватьТарифныеСеткиПриРасчетеЗарплатыОписание = НСтр("ru = 'Если в организации используются разряды (квалификационные категории) сотрудников и тарифные группы при расчете заработной платы, установите этот флажок.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПодчиненныхЭлементовФормы(ГруппаФормы, Доступность)
	
	Если ТипЗнч(ГруппаФормы) = Тип("ГруппаФормы") Тогда
		Для каждого ЭлементФормы Из ГруппаФормы.ПодчиненныеЭлементы Цикл
			ЭлементФормы.Доступность = Доступность;
		КонецЦикла;
	Иначе
		ГруппаФормы.Доступность = Доступность;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекВоинскийУчет(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ВоинскийУчетБронированиеГруппа, Форма.НастройкиВоинскогоУчета.ИспользоватьВоинскийУчет);
	УстановитьДоступностьГруппыВоинскийУчетИспользованиеКатегорий(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекУчетВремениСотрудниковВЧасах(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ТочностьИнфоГруппа, Форма.НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах);
	
	ОбновитьДоступностьНастроекИспользоватьОплатуКомандировок(Форма);
	ОбновитьДоступностьНастроекИспользоватьОплатуДнейСдачиКрови(Форма);
	ОбновитьДоступностьНастроекИспользоватьОплатуПростоев(Форма);
	ОбновитьДоступностьНастроекИспользоватьУчетПрочихНевыходов(Форма);
	ОбновитьДоступностьНастроекИспользоватьОтпускаБезОплаты(Форма);
	ОбновитьДоступностьНастроекИспользоватьОтгулы(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтраницуПочасоваяОплата()
	
	ОбновитьДоступностьНастроекУчетВремениСотрудниковВЧасах(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекНачисляетсяГодоваяПремия(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаГодоваяПремияСпособРасчета, Форма.НачисляетсяГодоваяПремия);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекНачисляетсяКвартальнаяПремия(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаКвартальнаяПремияСпособРасчета, Форма.НачисляетсяКвартальнаяПремия);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекНачисляетсяЕжемесячнаяПремия(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ЕжемесячнаяПремияНастройки, Форма.НачисляетсяЕжемесячнаяПремия);
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаЕжемесячнаяПремияКодДохода, Форма.НачисляетсяЕжемесячнаяПремия);
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаПояснениеЕжемесячнаяПремия, Форма.НачисляетсяЕжемесячнаяПремия);
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ЕжемесячнаяПремияБазовыйПериодНастройка, Форма.НачисляетсяЕжемесячнаяПремия И Форма.ЕжемесячнаяПремияСпособРасчета <> 1);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекЕжемесячнаяПремияСпособРасчета(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ЕжемесячнаяПремияБазовыйПериодНастройка, Форма.НачисляетсяЕжемесячнаяПремия И Форма.ЕжемесячнаяПремияСпособРасчета <> 1);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекНачисляетсяРазоваяПремия(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаПремияРазоваяСпособРасчета, Форма.НачисляетсяРазоваяПремия);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекНачисляетсяНадбавкаЗаВыслугуЛет(Форма)
	
	Форма.Элементы.РедактированиеШкалыНадбавокЗаСтаж.Доступность = Форма.НачисляетсяНадбавкаЗаВыслугуЛет;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекИспользоватьДоходыВНатуральнойФорме(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.НатуральныеДоходы, Форма.НастройкиРасчетаЗарплаты.ИспользоватьДоходыВНатуральнойФорме);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекИспользоватьОплатуКомандировок(Форма)
	
	Форма.Элементы.ГруппаКомандировкиПодчиненныеНастройки.Видимость = Не Форма.ИспользуетсяБазоваяВерсия И Форма.НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах;
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаКомандировкиПодчиненныеНастройки, Форма.НастройкиРасчетаЗарплаты.ИспользоватьОплатуКомандировок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекИспользоватьОплатуДнейСдачиКрови(Форма)
	
	Форма.Элементы.ГруппаОплатаДнейСдачиКровиВнутрисменная.Видимость = Не Форма.ИспользуетсяБазоваяВерсия И Форма.НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах;
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаОплатаДнейСдачиКровиВнутрисменная, Форма.ИспользоватьОплатуДнейСдачиКрови);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекИспользоватьОплатуПростоев(Форма)
	
	Форма.Элементы.ГруппаПростоиПодчиненныеНастройки.Видимость = Не Форма.ИспользуетсяБазоваяВерсия И Форма.НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах;
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаПростоиПодчиненныеНастройки, Форма.НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекИспользоватьУчетПрочихНевыходов(Форма)
	
	Форма.Элементы.ГруппаПрочиеОтсутствияПодчиненныеНастройки.Видимость = Не Форма.ИспользуетсяБазоваяВерсия И Форма.НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах;
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаПрочиеОтсутствияПодчиненныеНастройки, Форма.НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекИспользоватьОтпускаБезОплаты(Форма)
	
	Форма.Элементы.ГруппаОтпускаБезОплатыПодчиненныеНастройки.Видимость = Не Форма.ИспользуетсяБазоваяВерсия И Форма.НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах;
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаОтпускаБезОплатыПодчиненныеНастройки, Форма.НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекИспользоватьДоплатуЗаВыполнениеПлана(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаДоплатаЗаВыполнениеПланаПодчиненныеНастройки, Форма.ИспользоватьДоплатуЗаВыполнениеПлана);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьГруппыВоинскийУчетИспользованиеКатегорий(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ВоинскийУчетИспользованиеКатегорий, Форма.НастройкиВоинскогоУчета.ИспользоватьБронированиеГраждан);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовИспользоватьНачислениеЗарплаты(Форма)
	
	Форма.Элементы.ГруппаРасчетЗарплатыПоПодразделениям.Видимость = Форма.ИспользоватьНачислениеЗарплаты;
	Форма.Элементы.ВилкаСтавок.Видимость = Форма.ИспользоватьНачислениеЗарплаты;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекМатериальнойПомощиКОтпуску(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаМатпомощьКОтпускуНастройка, Форма.НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощьПриОтпуске);
	Если Форма.НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощьПриОтпуске И Форма.КоличествоОкладовДляМатериальнойПомощи = 0 Тогда
		Форма.КоличествоОкладовДляМатериальнойПомощи = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьПроцентаСевернойНадбавкиДляРасчетаФОТ(Форма)
	
	Если Не Форма.ИспользоватьНесколькоОрганизаций И Форма.Организация.ПрименятьСевернуюНадбавку И Форма.НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание Тогда
		Форма.Элементы.ПроцентСевернойНадбавкиДляФОТСтраницы.ТекущаяСтраница = Форма.Элементы.ПроцентСевернойНадбавкиДляФОТ;
	Иначе
		Форма.Элементы.ПроцентСевернойНадбавкиДляФОТСтраницы.ТекущаяСтраница = Форма.Элементы.ПроцентСевернойНадбавкиДляФОТПустая;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияСозданаОрганизацияНаСервере()
	
	ЗаполнитьДанныеОбОрганизациях();
	ОбновитьФормуПоНастройкам();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОписаниеВариантаПереноса(ПереноситьНачисленияПредыдущейПрограммы, ОписаниеВариантаПереноса)
	
	Если ПереноситьНачисленияПредыдущейПрограммы Тогда
		ОписаниеВариантаПереноса = НСтр("ru = 'Будут перенесены все данные из предыдущей программы. При таком способе переноса есть риск перенести устаревшие данные и накопившиеся ошибки учета.'")	
	Иначе
		ОписаниеВариантаПереноса = НСтр("ru = 'Будут перенесены все данные, необходимые для расчета среднего заработка, сдачи отчетности по НДФЛ и взносам в этом году, но расчет зарплаты начнете ""с чистого листа"" без накопившихся в прошлой системе ошибок.'")
	КонецЕсли;
	
КонецПроцедуры


#Область ОбработчикиСобытий

&НаКлиенте
Процедура НеИспользоватьНачислениеЗарплатыПриИзменении(Элемент)
	
	ИспользоватьНачислениеЗарплаты = Не НеИспользоватьНачислениеЗарплаты;
	УстановитьЗначенияЗависимыхНастроекНачислениеЗарплаты();
	ОбновитьДоступностьЭлементовИспользоватьНачислениеЗарплаты(ЭтаФорма);
	
	// Уточним состав страниц помощника.
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияЗависимыхНастроекНачислениеЗарплаты()
	
	Если ИспользоватьНачислениеЗарплаты Тогда
		
		// Восстановим прежние значения зависимых настроек.
		ЗаполнитьЗначенияСвойств(НастройкиРасчетаЗарплаты, НастройкиРасчетаЗарплатыПрежняя);
		ЗаполнитьЗначенияСвойств(НастройкиУчетаВремени, НастройкиУчетаВремениПрежняя);
		ЗаполнитьЗначенияСвойств(НастройкиЗаймовСотрудникам, НастройкиЗаймовСотрудникамПрежняя);
		
		Если Не ЗначениеЗаполнено(НастройкиРасчетаЗарплаты.ПорядокРасчетаСтоимостиЕдиницыВремени) Тогда
			НастройкиРасчетаЗарплаты.ПорядокРасчетаСтоимостиЕдиницыВремени = ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТрудаПоСреднегодовомуЗначению;
		КонецЕсли;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(НастройкиРасчетаЗарплатыПрежняя, НастройкиРасчетаЗарплаты);
		ЗаполнитьЗначенияСвойств(НастройкиУчетаВремениПрежняя, НастройкиУчетаВремени);
		ЗаполнитьЗначенияСвойств(НастройкиЗаймовСотрудникамПрежняя, НастройкиЗаймовСотрудникам);
		
		НастройкиРасчетаЗарплаты.ПорядокРасчетаСтоимостиЕдиницыВремени = ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТрудаПустаяСсылка;
		
		НастройкиУчетаВремени.ИспользоватьНесколькоВидовПлановогоВремени = Ложь;
		НастройкиУчетаВремени.УчитыватьНочныеЧасы                        = Ложь;
		НастройкиУчетаВремени.УчитыватьВечерниеЧасы                      = Ложь;
		НастройкиУчетаВремени.УчитыватьВремяНаКормлениеРебенка           = Ложь;
		
		НастройкиЗаймовСотрудникам.ИспользоватьЗаймыСотрудникам 		 = Ложь;
		
	КонецЕсли;
	
	НеВыполнятьРасчетЗарплатыПоПодразделениям = Не НастройкиРасчетаЗарплаты.ВыполнятьРасчетЗарплатыПоПодразделениям;
	ИспользоватьЗаймыСотрудникам = НастройкиЗаймовСотрудникам.ИспользоватьЗаймыСотрудникам;
	ИспользоватьНесколькоВидовПлановогоВремени = НастройкиУчетаВремени.ИспользоватьНесколькоВидовПлановогоВремени;
	УчитыватьВремяНаКормлениеРебенка = НастройкиУчетаВремени.УчитыватьВремяНаКормлениеРебенка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОднаОрганизацияПереключательПриИзменении(Элемент)
	
	ИспользоватьНесколькоОрганизаций = Ложь;
	НесколькоОрганизацийПереключатель = 0;
	ОбновитьВидимостьПроцентаСевернойНадбавкиДляРасчетаФОТ(ЭтаФорма);
	УстановитьСтраницыДоплатаЗаДниБолезни(ЭтаФорма);
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НесколькоОрганизацийПереключательПриИзменении(Элемент)
	
	ИспользоватьНесколькоОрганизаций = Истина;
	ОднаОрганизацияПереключатель = 1;
	ОбновитьВидимостьПроцентаСевернойНадбавкиДляРасчетаФОТ(ЭтаФорма);
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияИндивидуальныйПредпринимательПриИзменении(Элемент)
	
	Организация.ЮридическоеФизическоеЛицо = 
	?(ОрганизацияИндивидуальныйПредприниматель,ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"),ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	ОбновитьГруппуОднаОрганизацияПоНастройкеЮридическоеФизическоеЛицо(ЭтаФорма);
	
	// Уточним состав страниц помощника.
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьОбособленныеПодразделенияПриИзменении(Элемент)
	
	Организация.ЕстьОбособленныеПодразделения = ОрганизацияЕстьОбособленныеПодразделения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименятьРайонныйКоэффициентПриИзменении(Элемент)
	
	ОбновитьГруппыРК(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОрганизацийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта",,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОрганизацийПередНачаломИзменения(Элемент, Отказ)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Элемент.ТекущаяСтрока);
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта",ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НеВыполнятьРасчетЗарплатыПоПодразделениямПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ВыполнятьРасчетЗарплатыПоПодразделениям = Не НеВыполнятьРасчетЗарплатыПоПодразделениям;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидТарифаПриИзменении(Элемент)
	
	ОписаниеТарифаВзносов = УчетСтраховыхВзносовКлиентСервер.ОписаниеВидаТарифа(ПрименяемыеТарифыСтраховыхВзносов.ВидТарифа);
	Элементы.ДекорацияОписаниеТарифаВзносов.Заголовок = УчетСтраховыхВзносовКлиентСервер.ОписаниеВидаТарифа(ПрименяемыеТарифыСтраховыхВзносов.ВидТарифа);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяемыеТарифыПериодСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(
	ЭтаФорма, "ПрименяемыеТарифыСтраховыхВзносов.Период", "ПрименяемыеТарифыПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяемыеТарифыПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(
	ЭтаФорма, ЭтаФорма, "ПрименяемыеТарифыСтраховыхВзносов.Период", "ПрименяемыеТарифыПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяемыеТарифыПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(
	ЭтаФорма, "ПрименяемыеТарифыСтраховыхВзносов.Период", "ПрименяемыеТарифыПериодСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяемыеТарифыПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяемыеТарифыПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаПериодСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(
	ЭтаФорма, "УчетнаяПолитикаОрганизаций.Период", "УчетнаяПолитикаПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(
	ЭтаФорма, ЭтаФорма, "УчетнаяПолитикаОрганизаций.Период", "УчетнаяПолитикаПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(
	ЭтаФорма, "УчетнаяПолитикаОрганизаций.Период", "УчетнаяПолитикаПериодСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьШтатноеРасписаниеПриИзменении(Элемент)
	
	УстановитьЗависимыеНастройкиШтатноеРасписание();
	ОбновитьДоступностьНастроекШтатногоРасписания(ЭтаФорма);
	ОбновитьВидимостьПроцентаСевернойНадбавкиДляРасчетаФОТ(ЭтаФорма);
	
	// Уточним состав страниц помощника.
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
	НастройкиШтатногоРасписанияПрежняя.ИспользоватьШтатноеРасписание = 
	НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИсториюИзмененияШтатногоРасписанияПриИзменении(Элемент)
	
	НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания = ИспользоватьИсториюИзмененияШтатногоРасписания;
	
	НастройкиШтатногоРасписанияПрежняя.ИспользоватьИсториюИзмененияШтатногоРасписания = 
	НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписанииПриИзменении(Элемент)
	
	НастройкиШтатногоРасписанияПрежняя.ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании =
	НастройкиШтатногоРасписания.ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматическиПриИзменении(Элемент)
	
	НастройкиШтатногоРасписанияПрежняя.ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически = 
	НастройкиШтатногоРасписания.ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеНастройкиШтатноеРасписание()
	
	Если НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание Тогда
		
		НастройкиШтатногоРасписания.ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании =
		НастройкиШтатногоРасписанияПрежняя.ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании;
		
		НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания = 
		НастройкиШтатногоРасписанияПрежняя.ИспользоватьИсториюИзмененияШтатногоРасписания;
		
		НастройкиШтатногоРасписания.ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически = 
		НастройкиШтатногоРасписанияПрежняя.ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически;
		
		НастройкиШтатногоРасписания.ИспользоватьВилкуСтавокВШтатномРасписании = 
		НастройкиШтатногоРасписанияПрежняя.ИспользоватьВилкуСтавокВШтатномРасписании;
		
	Иначе
		
		НастройкиШтатногоРасписанияПрежняя.ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании =
		НастройкиШтатногоРасписания.ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании;
		
		НастройкиШтатногоРасписанияПрежняя.ИспользоватьИсториюИзмененияШтатногоРасписания = 
		НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания;
		
		НастройкиШтатногоРасписанияПрежняя.ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически = 
		НастройкиШтатногоРасписания.ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически;
		
		НастройкиШтатногоРасписанияПрежняя.ИспользоватьВилкуСтавокВШтатномРасписании = 
		НастройкиШтатногоРасписания.ИспользоватьВилкуСтавокВШтатномРасписании;
		
		НастройкиШтатногоРасписания.ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании = Ложь;	
		НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания = Ложь;
		НастройкиШтатногоРасписания.ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически = Ложь;
		НастройкиШтатногоРасписания.ИспользоватьВилкуСтавокВШтатномРасписании = Ложь;
		
	КонецЕсли;
	
	ИспользоватьИсториюИзмененияШтатногоРасписания = НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВоинскийУчетПриИзменении(Элемент)
	
	УстановитьЗависимыеНастройкиВоинскийУчет();
	ОбновитьДоступностьНастроекВоинскийУчет(ЭтаФорма);
	
	НастройкиВоинскогоУчетаПрежняя.ИспользоватьВоинскийУчет = НастройкиВоинскогоУчета.ИспользоватьВоинскийУчет;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеНастройкиВоинскийУчет()
	
	Если НастройкиВоинскогоУчета.ИспользоватьВоинскийУчет Тогда
		НастройкиВоинскогоУчета.ИспользоватьБронированиеГраждан = НастройкиВоинскогоУчетаПрежняя.ИспользоватьБронированиеГраждан;
	Иначе
		НастройкиВоинскогоУчетаПрежняя.ИспользоватьБронированиеГраждан = НастройкиВоинскогоУчета.ИспользоватьБронированиеГраждан;
		НастройкиВоинскогоУчета.ИспользоватьБронированиеГраждан = Ложь;
	КонецЕсли;
	
	УстановитьЗависимыеНастройкиИспользоватьБронированиеГраждан();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУчетВремениСотрудниковВЧасахПриИзменении(Элемент)
	
	УстановитьЗависимыеНастройкиУчетВремениСотрудниковВЧасах();
	ОбновитьДоступностьНастроекУчетВремениСотрудниковВЧасах(ЭтаФорма);
	
	НастройкиРасчетаЗарплатыПрежняя.ИспользоватьУчетВремениСотрудниковВЧасах = 
	НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах;
	
	// Уточним состав страниц помощника.
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИспользоватьОплатуСверхурочныхПриИзменении(Элемент)
	
	ПорядокСтраниц  = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	ОбновитьИспользованиеОтгулов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтгулыПриИзменении(Элемент)
	
	ОбновитьИспользоватьВнутрисменныеОтгулы();
	ОбновитьДоступностьНастроекИспользоватьОтгулы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИспользованиеОтгулов()

	ОтгулыДоступны = НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных Или НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных;
	Если ОтгулыДоступны Тогда
		НастройкиРасчетаЗарплаты.ИспользоватьОтгулы  = НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОтгулы;
	Иначе
		НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОтгулы  = НастройкиРасчетаЗарплаты.ИспользоватьОтгулы;
		НастройкиРасчетаЗарплаты.ИспользоватьОтгулы  = Ложь;
	КонецЕсли;
	
	ОбновитьИспользоватьВнутрисменныеОтгулы();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИспользоватьВнутрисменныеОтгулы()

	ОтгулыДоступны = НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных Или НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных;
	Если ОтгулыДоступны Тогда
		НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтгулы  = НастройкиРасчетаЗарплатыПрежняя.ИспользоватьВнутрисменныеОтгулы;
	Иначе
		НастройкиРасчетаЗарплатыПрежняя.ИспользоватьВнутрисменныеОтгулы  = НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтгулы;
		НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтгулы  = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекИспользоватьОтгулы(Форма)
	
	Форма.Элементы.ГруппаОтгулыПодчиненныеНастройки.Видимость = Не Форма.ИспользуетсяБазоваяВерсия И Форма.НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах;
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаОтгулыПодчиненныеНастройки, Форма.НастройкиРасчетаЗарплаты.ИспользоватьОтгулы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОплатуПраздничныхИВыходныхПриИзменении(Элемент)
	
	ПорядокСтраниц  = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	ОбновитьИспользованиеОтгулов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоВидовПлановогоВремениПриИзменении(Элемент)
	
	НастройкиУчетаВремени.ИспользоватьНесколькоВидовПлановогоВремени = ИспользоватьНесколькоВидовПлановогоВремени;
	НастройкиУчетаВремениПрежняя.ИспользоватьНесколькоВидовПлановогоВремени = НастройкиУчетаВремени.ИспользоватьНесколькоВидовПлановогоВремени;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьВремяНаКормлениеРебенкаПриИзменении(Элемент)
	
	НастройкиУчетаВремени.УчитыватьВремяНаКормлениеРебенка = УчитыватьВремяНаКормлениеРебенка;
	НастройкиУчетаВремениПрежняя.УчитыватьВремяНаКормлениеРебенка = НастройкиУчетаВремени.УчитыватьВремяНаКормлениеРебенка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеНастройкиУчетВремениСотрудниковВЧасах()
	
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		
		НастройкиУчетаВремени.УчитыватьНочныеЧасы   = НастройкиУчетаВремениПрежняя.УчитыватьНочныеЧасы;
		НастройкиУчетаВремени.УчитыватьВечерниеЧасы = НастройкиУчетаВремениПрежняя.УчитыватьВечерниеЧасы;
		
		НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты		  = НастройкиРасчетаЗарплатыПрежняя.ИспользоватьВнутрисменныеОтпускаБезОплаты;
		НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхКомандировок	  = НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОплатуВнутрисменныхКомандировок;
		НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев		  = НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОплатуВнутрисменныхПростоев;
		НастройкиРасчетаЗарплаты.ИспользоватьУчетВнутрисменныхПрочихНевыходов	  = НастройкиРасчетаЗарплатыПрежняя.ИспользоватьУчетВнутрисменныхПрочихНевыходов;
		НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных               	  = НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОплатуСверхурочных;
		НастройкиРасчетаЗарплаты.ИспользоватьОтгулы				                  = НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОтгулы;
		НастройкиРасчетаЗарплаты.ИспользоватьОплатуПереработокСуммированногоУчета = НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОплатуПереработокСуммированногоУчета;
		
	Иначе
		
		НастройкиУчетаВремениПрежняя.УчитыватьНочныеЧасы   = НастройкиУчетаВремени.УчитыватьНочныеЧасы;
		НастройкиУчетаВремениПрежняя.УчитыватьВечерниеЧасы = НастройкиУчетаВремени.УчитыватьВечерниеЧасы;
		
		НастройкиРасчетаЗарплатыПрежняя.ИспользоватьВнутрисменныеОтпускаБезОплаты  		 = НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты;
		НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОплатуВнутрисменныхКомандировок 	 = НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхКомандировок;
		НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОплатуВнутрисменныхПростоев   	     = НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев;
		НастройкиРасчетаЗарплатыПрежняя.ИспользоватьУчетВнутрисменныхПрочихНевыходов 	 = НастройкиРасчетаЗарплаты.ИспользоватьУчетВнутрисменныхПрочихНевыходов;
		НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОплатуСверхурочных                   = НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных;
		НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОтгулы                           	 = НастройкиРасчетаЗарплаты.ИспользоватьОтгулы;
		НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОплатуПереработокСуммированногоУчета = НастройкиРасчетаЗарплаты.ИспользоватьОплатуПереработокСуммированногоУчета;
		
		НастройкиУчетаВремени.УчитыватьНочныеЧасы   = Ложь;
		НастройкиУчетаВремени.УчитыватьВечерниеЧасы = Ложь;
		
		НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты		  = Ложь;
		НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхКомандировок	  = Ложь;
		НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев    	  = Ложь;
		НастройкиРасчетаЗарплаты.ИспользоватьУчетВнутрисменныхПрочихНевыходов 	  = Ложь;
		НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных		 			  = Ложь;
		НастройкиРасчетаЗарплаты.ИспользоватьОтгулы				 				  = Ложь;
		НастройкиРасчетаЗарплаты.ИспользоватьОплатуПереработокСуммированногоУчета = Ложь;
		
		ОбновитьИспользованиеОтгулов();
		
	КонецЕсли;
	
	УчитыватьВремяНаКормлениеРебенка = НастройкиУчетаВремени.УчитыватьВремяНаКормлениеРебенка;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисляетсяГодоваяПремияПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекНачисляетсяГодоваяПремия(ЭтаФорма);
	
	// Уточним состав страниц помощника.
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисляетсяКвартальнаяПремияПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекНачисляетсяКвартальнаяПремия(ЭтаФорма);
	
	// Уточним состав страниц помощника.
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисляетсяЕжемесячнаяПремияПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекНачисляетсяЕжемесячнаяПремия(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕжемесячнаяПремияСпособРасчетаПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекЕжемесячнаяПремияСпособРасчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисляетсяРазоваяПремияПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекНачисляетсяРазоваяПремия(ЭтаФорма);
	
	// Уточним состав страниц помощника.
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисляетсяНадбавкаЗаВыслугуЛетПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекНачисляетсяНадбавкаЗаВыслугуЛет(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРасчетаЗарплатыИспользоватьДоходыВНатуральнойФормеПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекИспользоватьДоходыВНатуральнойФорме(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОплатуКомандировокПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекИспользоватьОплатуКомандировок(ЭтаФорма);
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуКомандировок Тогда
		НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхКомандировок  = НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОплатуВнутрисменныхКомандировок;
	Иначе
		НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОплатуВнутрисменныхКомандировок  = НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхКомандировок;
		НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхКомандировок  = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОплатуДнейСдачиКровиПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекИспользоватьОплатуДнейСдачиКрови(ЭтаФорма);
	Если ИспользоватьОплатуДнейСдачиКрови Тогда
		ИспользоватьОплатуДнейСдачиКровиВнутрисменных  = ИспользоватьОплатуДнейСдачиКровиВнутрисменныхПрежняя;
	Иначе
		ИспользоватьОплатуДнейСдачиКровиВнутрисменныхПрежняя  = ИспользоватьОплатуДнейСдачиКровиВнутрисменных;
		ИспользоватьОплатуДнейСдачиКровиВнутрисменных  = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОплатуПростоевПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев = ИспользоватьОплатуПростоев;
	ОбновитьДоступностьНастроекИспользоватьОплатуПростоев(ЭтаФорма);
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев Тогда
		НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев  = НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОплатуВнутрисменныхПростоев;
	Иначе
		НастройкиРасчетаЗарплатыПрежняя.ИспользоватьОплатуВнутрисменныхПростоев  = НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев;
		НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев  = Ложь;
	КонецЕсли;
	ИспользоватьОплатуВнутрисменныхПростоев = НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОплатуВнутрисменныхПростоевПриИзменении(Элемент)
	НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев = ИспользоватьОплатуВнутрисменныхПростоев;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУчетПрочихНевыходовПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекИспользоватьУчетПрочихНевыходов(ЭтаФорма);
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов Тогда
		НастройкиРасчетаЗарплаты.ИспользоватьУчетВнутрисменныхПрочихНевыходов  = НастройкиРасчетаЗарплатыПрежняя.ИспользоватьУчетВнутрисменныхПрочихНевыходов;
	Иначе
		НастройкиРасчетаЗарплатыПрежняя.ИспользоватьУчетВнутрисменныхПрочихНевыходов  = НастройкиРасчетаЗарплаты.ИспользоватьУчетВнутрисменныхПрочихНевыходов;
		НастройкиРасчетаЗарплаты.ИспользоватьУчетВнутрисменныхПрочихНевыходов  = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтпускаБезОплатыПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекИспользоватьОтпускаБезОплаты(ЭтаФорма);
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты Тогда
		НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты  = НастройкиРасчетаЗарплатыПрежняя.ИспользоватьВнутрисменныеОтпускаБезОплаты;
	Иначе
		НастройкиРасчетаЗарплатыПрежняя.ИспользоватьВнутрисменныеОтпускаБезОплаты  = НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты;
		НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты  = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДоплатуЗаВыполнениеПланаПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекИспользоватьДоплатуЗаВыполнениеПлана(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНаименованиеПриИзменении(Элемент)
	
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйПредпринимательФИОПриИзменении(Элемент)
	
	Организация.Наименование = ИндивидуальныйПредприниматель.ФИО;
	ИндивидуальныйПредприниматель.Наименование = ИндивидуальныйПредприниматель.ФИО;
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ИндивидуальныйПредприниматель.ФИО);
	Если СтруктураФИО.Фамилия <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтруктураФИО.Отчество) И Не ЗначениеЗаполнено(ИндивидуальныйПредприниматель.Пол) Тогда
			ИндивидуальныйПредприниматель.Пол = СотрудникиКлиентСервер.ОпределитьПолПоОтчеству(СтруктураФИО.Отчество);
		КонецЕсли;
	КонецЕсли;
	
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБронированиеГражданПриИзменении(Элемент)
	
	УстановитьЗависимыеНастройкиИспользоватьБронированиеГраждан();
	УстановитьДоступностьГруппыВоинскийУчетИспользованиеКатегорий(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеНастройкиИспользоватьБронированиеГраждан()
	
	Если НастройкиВоинскогоУчета.ИспользоватьБронированиеГраждан Тогда
		НастройкиВоинскогоУчета.ИспользуетсяТрудЛетноПодъемногоСостава = НастройкиВоинскогоУчетаПрежняя.ИспользуетсяТрудЛетноПодъемногоСостава;
		НастройкиВоинскогоУчета.ИспользуетсяТрудПлавсостава = НастройкиВоинскогоУчетаПрежняя.ИспользуетсяТрудПлавсостава;
	Иначе
		НастройкиВоинскогоУчетаПрежняя.ИспользуетсяТрудЛетноПодъемногоСостава = НастройкиВоинскогоУчета.ИспользуетсяТрудЛетноПодъемногоСостава;
		НастройкиВоинскогоУчетаПрежняя.ИспользуетсяТрудПлавсостава = НастройкиВоинскогоУчета.ИспользуетсяТрудПлавсостава;
		НастройкиВоинскогоУчета.ИспользуетсяТрудЛетноПодъемногоСостава = Ложь;
		НастройкиВоинскогоУчета.ИспользуетсяТрудПлавсостава = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМатериальнуюПомощьПриОтпускеПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекМатериальнойПомощиКОтпуску(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеКПППриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.КПП) Тогда
		
		Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Код) Тогда
			РегистрацияВНалоговомОргане.Код = Лев(РегистрацияВНалоговомОргане.КПП, 4);
		КонецЕсли;
		
		КодРегиона = Лев(РегистрацияВНалоговомОргане.КПП, 2);
		КодыРегионовПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахованияКлиентСервер.КодыРегионовПилотногоПроекта();
		НастройкиУчетаПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий = КодыРегионовПилотногоПроекта[КодРегиона];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйПредпринимательИННПриИзменении(Элемент)
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляИНН(Элемент, ИндивидуальныйПредприниматель.ИНН, Организация.ЮридическоеФизическоеЛицо, ЭтаФорма);
	Элементы.ИндивидуальныйПредпринимательИНННадпись.ЦветТекста = Элементы.ОрганизацияИНННадпись.ЦветТекста;
	Элементы.ИндивидуальныйПредпринимательИНННадпись.Подсказка = Элементы.ОрганизацияИНННадпись.Подсказка;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияИННПриИзменении(Элемент)
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляИНН(Элемент, Организация.ИНН, Организация.ЮридическоеФизическоеЛицо, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОГРНИППриИзменении(Элемент)
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(Элемент, Организация.ОГРН, Организация.ЮридическоеФизическоеЛицо, ЭтаФорма);
	Элементы.ИндивидуальныйПредпринимательОГРННадпись.ЦветТекста = Элементы.ОрганизацияОГРННадпись.ЦветТекста;
	Элементы.ИндивидуальныйПредпринимательОГРННадпись.Подсказка = Элементы.ОрганизацияОГРННадпись.Подсказка;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОГРНПриИзменении(Элемент)
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(Элемент, Организация.ОГРН, Организация.ЮридическоеФизическоеЛицо, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВариантыНачалаРаботыПриИзменении(Элемент)
	
	ВыполняетсяПереносДанных = ЗначениеЗаполнено(ВариантыНачалаРаботы);
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданаОрганизация" Тогда
		ОбработкаОповещенияСозданаОрганизацияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГодоваяПремияВариантНачисления1ПриИзменении(Элемент)
	ГодоваяПремияВариантНачисления = 0;
	ГодоваяПремияВариантНачисленияПриИзменении(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГодоваяПремияВариантНачисления2ПриИзменении(Элемент)
	ГодоваяПремияВариантНачисления = 1;
	ГодоваяПремияВариантНачисленияПриИзменении(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГодоваяПремияВариантНачисления3ПриИзменении(Элемент)
	ГодоваяПремияВариантНачисления = 2;
	ГодоваяПремияВариантНачисленияПриИзменении(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ГодоваяПремияВариантНачисленияПриИзменении(Форма, ОбновлятьМесяцы = Истина)
	
	Если ОбновлятьМесяцы Тогда
		
		Если Форма.ГодоваяПремияВариантНачисления = 2 Тогда
			Форма.ГодоваяПремияМесяцНачисления = Форма.МесяцыСтрокой[11];
			УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГодоваяПремияМесяцНачисления, Истина);
		Иначе
			Форма.ГодоваяПремияМесяцНачисления = Неопределено;
			УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГодоваяПремияМесяцНачисления, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ГодоваяПремияВариантНачисления1 = ?(Форма.ГодоваяПремияВариантНачисления = 0,0,1);
	Форма.ГодоваяПремияВариантНачисления2 = ?(Форма.ГодоваяПремияВариантНачисления = 1,0,1);
	Форма.ГодоваяПремияВариантНачисления3 = ?(Форма.ГодоваяПремияВариантНачисления = 2,0,1);
	
КонецПроцедуры

&НаКлиенте
Процедура КвартальнаяПремияВариантНачисления1ПриИзменении(Элемент)
	КвартальнаяПремияВариантНачисления = 0;
	КвартальнаяПремияВариантНачисленияПриИзменении(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КвартальнаяПремияВариантНачисления2ПриИзменении(Элемент)
	КвартальнаяПремияВариантНачисления = 1;
	КвартальнаяПремияВариантНачисленияПриИзменении(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КвартальнаяПремияВариантНачисления3ПриИзменении(Элемент)
	КвартальнаяПремияВариантНачисления = 2;
	КвартальнаяПремияВариантНачисленияПриИзменении(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КвартальнаяПремияВариантНачисленияПриИзменении(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ГруппаМесяцыНачисления, Форма.КвартальнаяПремияВариантНачисления = 2);
	Форма.КвартальнаяПремияВариантНачисления1 = ?(Форма.КвартальнаяПремияВариантНачисления = 0,0,1);
	Форма.КвартальнаяПремияВариантНачисления2 = ?(Форма.КвартальнаяПремияВариантНачисления = 1,0,1);
	Форма.КвартальнаяПремияВариантНачисления3 = ?(Форма.КвартальнаяПремияВариантНачисления = 2,0,1)
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПутиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаПути.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПутьКИБ	= Элементы.ТаблицаПути.ТекущиеДанные.Путь;
	ИмяИБ	= Элементы.ТаблицаПути.ТекущиеДанные.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегистрациюПрочихДоходовПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьРегистрациюПрочихДоходов = ИспользоватьРегистрациюПрочихДоходов;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоТарифныхСтавокПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьНесколькоТарифныхСтавок = ИспользоватьНесколькоТарифныхСтавок;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКраткосрочныеИзмененияОплатыТрудаВЗависимостиОтВыполняемойРаботыПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьКраткосрочныеИзмененияОплатыТрудаВЗависимостиОтВыполняемойРаботы = ИспользоватьКраткосрочныеИзмененияОплатыТрудаВЗависимостиОтВыполняемойРаботы;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисляетсяНадбавкаЗаВредностьПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьНадбавкуЗаВредность = ИспользоватьНадбавкуЗаВредность;
	
КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьЗаймыСотрудникамПриИзменении(Элемент)
	
	НастройкиЗаймовСотрудникам.ИспользоватьЗаймыСотрудникам = ИспользоватьЗаймыСотрудникам;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферыПриИзменении(Элемент)
	
	УстановитьЗависимыеНастройкиОтчетаМониторингаРаботниковСоциальнойСферы();
	ОбновитьДоступностьНастроекОтчетаМониторингаРаботниковСоциальнойСферы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеНастройкиОтчетаМониторингаРаботниковСоциальнойСферы()
	
	Если НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы Тогда
		НастройкиСтатистикиПерсонала.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы = НастройкиСтатистикиПерсоналаПрежнееЗначение.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы;
	Иначе
		НастройкиСтатистикиПерсоналаПрежнееЗначение.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы = НастройкиСтатистикиПерсонала.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы;
		НастройкиСтатистикиПерсонала.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы = ПредопределенноеЗначение("Перечисление.ВидыФормМониторингаРаботниковСоциальнойСферы.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекОтчетаМониторингаРаботниковСоциальнойСферы(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы, Форма.НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы);
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы1, Форма.НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСтатьиФинансированияПриИзменении(Элемент)
	УстановитьЗависимыеНастройкиМониторингаРаботниковСоциальнойСферы();
	ОбновитьДоступностьНастроекМониторингаРаботниковСоциальнойСферы(ЭтаФорма)
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеНастройкиМониторингаРаботниковСоциальнойСферы()
	
	Если ИспользоватьСтатьиФинансирования Тогда
		НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы = НастройкиСтатистикиПерсоналаПрежнееЗначение.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы;
	Иначе
		НастройкиСтатистикиПерсоналаПрежнееЗначение.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы = НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы;
		НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы = Ложь;
	КонецЕсли;
	УстановитьЗависимыеНастройкиОтчетаМониторингаРаботниковСоциальнойСферы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекМониторингаРаботниковСоциальнойСферы(Форма)
	
	Если Форма.ИспользоватьСтатьиФинансирования Тогда
		Форма.Элементы.ГруппаИспользованиеОтчетовФинмониторинга.ТекущаяСтраница = Форма.Элементы.ГруппаИспользованиеОтчетовФинмониторингаПоказывать;
	Иначе
		Форма.Элементы.ГруппаИспользованиеОтчетовФинмониторинга.ТекущаяСтраница = Форма.Элементы.ГруппаИспользованиеОтчетовФинмониторингаНеПоказывать;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВерсиюКомпоненты(Команда)
	
	ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказОтНачальнойНастройкиПрограммы(Команда)
	
	Если ИспользоватьГосударственнуюСлужбу Или ИспользоватьМуниципальнуюСлужбу Или ИспользоватьВоеннуюСлужбу Тогда
		Результат = ЗаписатьНастройкиОсобенностейБюджетногоУчрежденияНаСервере();
		ЗаписатьНастройкиОсобенностейБюджетногоУчрежденияНаКлиенте(Результат);
	Иначе
		ОтказОтНачальнойНастройкиПрограммыНаСервере();
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНастройкиОсобенностейБюджетногоУчрежденияНаСервере()
	
	ПараметрыПланВидовРасчета = РасчетЗарплатыРасширенный.ОписаниеПараметровПланаВидовРасчета();
	ПараметрыПланВидовРасчета.НачальнаяНастройкаПрограммы = Истина;
	
	СохраняемыеЗначения = Новый Структура;
	СохраняемыеЗначения.Вставить("СсылкаНаСозданнуюОрганизацию", СсылкаНаСозданнуюОрганизацию);
	
	СтруктураПараметров = Новый Структура; 
	СтруктураПараметров.Вставить("ИспользоватьВоеннуюСлужбу", ИспользоватьВоеннуюСлужбу);
	СтруктураПараметров.Вставить("ИспользоватьГосударственнуюСлужбу", ИспользоватьГосударственнуюСлужбу);	
	СтруктураПараметров.Вставить("ИспользоватьМуниципальнуюСлужбу",   ИспользоватьМуниципальнуюСлужбу);
	СтруктураПараметров.Вставить("ИспользоватьРасчетСохраняемогоДенежногоСодержания", ИспользоватьРасчетСохраняемогоДенежногоСодержания);
	СтруктураПараметров.Вставить("ИспользоватьУчетКлассныхЧинов", ИспользоватьУчетКлассныхЧинов); 
	СтруктураПараметров.Вставить("НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим", НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим);
	СтруктураПараметров.Вставить("СохраняемыеЗначения", СохраняемыеЗначения);
	СтруктураПараметров.Вставить("ПараметрыПланВидовРасчета", ПараметрыПланВидовРасчета);
	СтруктураПараметров.Вставить("ТекущаяСтраницаИмя", Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	
	НаименованиеЗадания = НСтр("ru = 'Сохранение настроек программы'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
	УникальныйИдентификатор,
	"Обработки.НачальнаяНастройкаПрограммы.ЗаписатьНастройкиОсобенностейБюджетногоУчреждения",
	СтруктураПараметров,
	НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНастройкиОсобенностейБюджетногоУчрежденияНаКлиенте(Результат)
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗаписатьНастройкиОсобенностейБюджетногоУчреждения", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
	Иначе
		ПослеЗаписиНастроекНаСервере();
		ОтказОтНачальнойНастройкиПрограммыНаСервере(Истина);
		ОбновитьИнтерфейс();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтказОтНачальнойНастройкиПрограммыНаСервере(ЗаписаныНастройкиОсобенностейБюджетногоУчреждения = Ложь)
	
	Если ЗаписаныНастройкиОсобенностейБюджетногоУчреждения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	Константы.ВыполнятьНачальнуюНастройкуПрограммы.Установить(Ложь);
	УчетРабочегоВремениРасширенный.СоздатьГрафикРаботыПятидневка();
	НачальнаяНастройкаПрограммы.СоздатьЕдинственнуюОрганизацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказОтНачальнойНастройкиПрограммыПриИзменении(Элемент)
	ОбновитьДоступностьНастроекОтказОтНачальнойНастройкиПрограммы(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекОтказОтНачальнойНастройкиПрограммы(Форма)
	
	Форма.Элементы.ОтказатьсяОтНачальнойНастройкиПрограммы.Доступность = Форма.ОтказОтНачальнойНастройкиПрограммы;
	Форма.Элементы.Вперед.Доступность = НЕ Форма.ОтказОтНачальнойНастройкиПрограммы;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеНаименованиеПриИзменении(Элемент)
	
	Если ПустаяСтрока(РегистрацияВНалоговомОргане.НаименованиеИФНС) Тогда
		
		НаименованиеИФНС = РегистрацияВНалоговомОргане.Наименование;
		НаименованиеИФНС = СтрЗаменить(НаименованиеИФНС,	НСтр("ru='МИФНС'"),	НСтр("ru='Межрайонная инспекция федеральной налоговой службы'"));
		НаименованиеИФНС = СтрЗаменить(НаименованиеИФНС,	НСтр("ru='ИФНС'"),	НСтр("ru='Инспекция федеральной налоговой службы'"));
		НаименованиеИФНС = СтрЗаменить(НаименованиеИФНС,	НСтр("ru='ФНС'"),	НСтр("ru='Федеральная налоговая служба'"));
		
		РегистрацияВНалоговомОргане.НаименованиеИФНС	= НаименованиеИФНС;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнформационнуюСсылку(ИмяИсточника)
	
	ИнформационнаяСсылка = "";
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УчетХозрасчетныхОрганизацийКлиент");
		Модуль.УстановитьИнформационнуюСсылкуПереносаДанных(ИмяИсточника, ИнформационнаяСсылка);
	КонецЕсли;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УчетБюджетныхУчрежденийКлиент");
		Модуль.УстановитьИнформационнуюСсылкуПереносаДанных(ИмяИсточника, ИнформационнаяСсылка, РаботаВБюджетномУчреждении);
	КонецЕсли;
	Если ПустаяСтрока(ИнформационнаяСсылка) Тогда
		Элементы.ИнформационнаяСсылка.Заголовок = "";
	Иначе
		Элементы.ИнформационнаяСсылка.Заголовок = НСтр("ru = 'Описание переноса данных'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуютсяРаботыСДосрочнойПенсиейПриИзменении(Элемент)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Элементы.ПрименяютсяРезультатыСпециальнойОценкиУсловийТруда, НастройкиУчетаСтраховыхВзносов.ИспользуютсяРаботыСДосрочнойПенсией);
	
	Если НастройкиУчетаСтраховыхВзносов.ИспользуютсяРаботыСДосрочнойПенсией Тогда
		НастройкиУчетаСтраховыхВзносов.ПрименяютсяРезультатыСпециальнойОценкиУсловийТруда = ПрименяютсяРезультатыСпециальнойОценкиУсловийТрудаПрежнееЗначение;
	Иначе
		ПрименяютсяРезультатыСпециальнойОценкиУсловийТрудаПрежнееЗначение = НастройкиУчетаСтраховыхВзносов.ПрименяютсяРезультатыСпециальнойОценкиУсловийТруда;
		НастройкиУчетаСтраховыхВзносов.ПрименяютсяРезультатыСпециальнойОценкиУсловийТруда = Ложь;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПрименятьСевернуюНадбавкуПриИзменении(Элемент)
	
	ОбновитьВидимостьПроцентаСевернойНадбавкиДляРасчетаФОТ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РайонныйКоэффициентПриИзменении(Элемент)
	
	Если Организация.РайонныйКоэффициент < Организация.РайонныйКоэффициентРФ Тогда
		Организация.РайонныйКоэффициент = Организация.РайонныйКоэффициентРФ;
		ТекстПредупреждения = НСтр("ru = 'Районный коэффициент, утвержденный местными органами власти, не может быть меньше районного коэффициента, утвержденного федеральными органами власти.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РайонныйКоэффициентРФПриИзменении(Элемент)
	
	Если Организация.РайонныйКоэффициент < Организация.РайонныйКоэффициентРФ Тогда
		Организация.РайонныйКоэффициент = Организация.РайонныйКоэффициентРФ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВоеннуюСлужбуПриИзменении(Элемент)
	
	Если ИспользоватьВоеннуюСлужбу Тогда
		ИспользоватьМуниципальнуюСлужбу = Ложь;
		НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим = Ложь;
	Иначе
		ИспользоватьРасчетДенежногоДовольствияВоеннослужащих = Ложь;
		ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву = Ложь;
		РазрешеноСовместительствоВоеннослужащимПоКонтракту = Ложь;
		ПремияЗаДВСОРассчитываетсяПоОкладуНаНачалоМесяца = Ложь;
	КонецЕсли;
	
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	УстановитьЗависимыеНастройкиПоОсобенностямБюджетныхОрганизаций();
	ОбновитьФормуПоНастройкамИспользоватьГосударственнуюМуниципальнуюСлужбу(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьГосударственнуюСлужбуПриИзменении(Элемент)
	
	Если ИспользоватьГосударственнуюСлужбу Тогда
		ИспользоватьМуниципальнуюСлужбу = Ложь;
		ИспользоватьУчетКлассныхЧинов = Истина;
		НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим = Ложь;
		ИспользоватьРасчетСохраняемогоДенежногоСодержания = Истина;
	КонецЕсли;
	
	ОбновитьСтраницуГосударственныеСлужащие(ЭтаФорма);
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	УстановитьЗависимыеНастройкиПоОсобенностямБюджетныхОрганизаций();
	ОбновитьФормуПоНастройкамИспользоватьГосударственнуюМуниципальнуюСлужбу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМуниципальнуюСлужбуПриИзменении(Элемент)
	
	Если ИспользоватьМуниципальнуюСлужбу Тогда
		ИспользоватьГосударственнуюСлужбу = Ложь;
		ИспользоватьРасчетСохраняемогоДенежногоСодержания = Ложь;
		ИспользоватьРасчетДенежногоСодержанияПрокуроров = Ложь;
		ИспользоватьВоеннуюСлужбу = Ложь;
		ИспользоватьРасчетДенежногоДовольствияВоеннослужащих = Ложь;
		ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву = Ложь;
		РазрешеноСовместительствоВоеннослужащимПоКонтракту = Ложь;
		ПремияЗаДВСОРассчитываетсяПоОкладуНаНачалоМесяца = Ложь;
	Иначе
		ИспользоватьУчетКлассныхЧинов = Ложь;
		НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим = Ложь;
	КонецЕсли;
	
	ОбновитьСтраницуМуниципальныеСлужащие(ЭтаФорма);
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	УстановитьЗависимыеНастройкиПоОсобенностямБюджетныхОрганизаций();
	ОбновитьФормуПоНастройкамИспользоватьГосударственнуюМуниципальнуюСлужбу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМедицинскоеУчреждениеПриИзменении(Элемент)
	
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	УстановитьЗависимыеНастройкиПоОсобенностямБюджетныхОрганизаций();
	ОбновитьФормуПоНастройкамИспользоватьГосударственнуюМуниципальнуюСлужбу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаВОбразовательномУчрежденииПриИзменении(Элемент)
	
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	УстановитьЗависимыеНастройкиПоОсобенностямБюджетныхОрганизаций();
	ОбновитьФормуПоНастройкамИспользоватьГосударственнуюМуниципальнуюСлужбу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкамИспользоватьГосударственнуюМуниципальнуюСлужбу(Форма)
	
	Элементы = Форма.Элементы;
	Если Форма.ИспользоватьМуниципальнуюСлужбу Или Форма.ИспользоватьГосударственнуюСлужбу Или Форма.ИспользоватьВоеннуюСлужбу Тогда
		Элементы.ИндексацияЗаработкаНастройкаСтраницы.ТекущаяСтраница = Элементы.ИндексацияЗаработкаНастройкаПустая;	
	Иначе
		Элементы.ИндексацияЗаработкаНастройкаСтраницы.ТекущаяСтраница = Элементы.ИндексацияЗаработкаНастройка;
	КонецЕсли;
	
	Если Форма.ИспользоватьГосударственнуюСлужбу Тогда
		Форма.ЗаголовокГруппыВыплатыКОтпускуГосслужащие = НСтр("ru = 'Выплаты государственным служащим'");
	ИначеЕсли Форма.ИспользоватьМуниципальнуюСлужбу Тогда
		Форма.ЗаголовокГруппыВыплатыКОтпускуГосслужащие = НСтр("ru = 'Выплаты муниципальным служащим'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеНастройкиПоОсобенностямБюджетныхОрганизаций()
	
	Если ИспользоватьГосударственнуюСлужбу Или ИспользоватьМуниципальнуюСлужбу Или ИспользоватьВоеннуюСлужбу Тогда
		НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощь = Истина;
		НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощьПриОтпуске  = Истина;
		НастройкиРасчетаЗарплаты.ИспользоватьЕдиновременнуюВыплатуКОтпуску = Истина;
		НастройкиРасчетаЗарплаты.ИспользоватьИндексациюЗаработка = Истина;
		ОплатаТрудаВНатуральнойФорме = Ложь;
	КонецЕсли;
	
	Если ИспользоватьМедицинскоеУчреждение
		И Не ИспользуетсяБазоваяВерсия Тогда
		ИспользоватьПодработки = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУчетКлассныхЧиновПриИзменении(Элемент)
	
	ОбновитьСтраницуМуниципальныеСлужащие(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМуниципальныеДолжностиПриИзменении(Элемент)
	
	Если ИспользоватьМуниципальныеДолжности Тогда
		ПорядокРасчетаОтпусковМуниципальныхДолжностей = 2;
	Иначе
		ПорядокРасчетаОтпусковМуниципальныхДолжностей = 0;
	КонецЕсли;
	
	ОбновитьСтраницуМуниципальныеСлужащие(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтраницуМуниципальныеСлужащие(Форма)
	
	Если Форма.ИспользоватьУчетКлассныхЧинов Тогда
		Форма.Элементы.СтраницыОплатаЗаКлассныйЧин.ТекущаяСтраница = Форма.Элементы.СтраницаОплатаЗаКлассныйЧин;
	Иначе
		Форма.Элементы.СтраницыОплатаЗаКлассныйЧин.ТекущаяСтраница = Форма.Элементы.СтраницаОплатаЗаКлассныйЧинПустая;
	КонецЕсли;
	
	Форма.Элементы.ПорядокРасчетаОтпусковМуниципальныхДолжностей.Доступность = Форма.ИспользоватьМуниципальныеДолжности;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРасчетДенежногоСодержанияСудейПриИзменении(Элемент)
	
	Если ИспользоватьРасчетДенежногоСодержанияСудей Тогда
		ПорядокРасчетаОтпусковСудей = 2;
	Иначе
		ПорядокРасчетаОтпусковСудей = 0;
	КонецЕсли;
	ОбновитьСтраницуГосударственныеСлужащие(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГосударственныеДолжностиПриИзменении(Элемент)
	
	Если ИспользоватьГосударственныеДолжности Тогда
		ПорядокРасчетаОтпусковГосударственныхДолжностей = 1;
	Иначе
		ПорядокРасчетаОтпусковГосударственныхДолжностей = 0;
		ИспользоватьРасчетДенежногоСодержанияСудей = Ложь;
		ПорядокРасчетаОтпусковСудей = 0;
	КонецЕсли;
	ОбновитьСтраницуГосударственныеСлужащие(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтраницуГосударственныеСлужащие(Форма)
	
	Форма.Элементы.ПорядокРасчетаОтпусковГосударственныхДолжностей.Доступность = Форма.ИспользоватьГосударственныеДолжности;
	Форма.Элементы.ГруппаСудьиНастройки.Доступность = Форма.ИспользоватьГосударственныеДолжности;
	Форма.Элементы.ПорядокРасчетаОтпусковСудей.Доступность = Форма.ИспользоватьРасчетДенежногоСодержанияСудей;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетДенежногоДовольствияВоеннослужащихПриИзменении(Элемент)
	
	ИспользоватьРасчетДенежногоДовольствияВоеннослужащих = (РасчетДенежногоДовольствияВоеннослужащих = 2);
	УстановитьСтраницуСтраницаНастройкиВоеннослужащие(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницуСтраницаНастройкиВоеннослужащие(Форма)
	
	Если Форма.РасчетДенежногоДовольствияВоеннослужащих = 1 Тогда
		Форма.Элементы.СтраницыНастройкиВоенных.ТекущаяСтраница = Форма.Элементы.СтраницаНастройкиСотрудниковОИВ;
	Иначе
		Форма.Элементы.СтраницыНастройкиВоенных.ТекущаяСтраница = Форма.Элементы.СтраницаНастройкиВоеннослужащие;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащимПереключательПриИзменении(Элемент)
	
	НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим = ?(НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащимПереключатель = 0,Ложь,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндексациюЗаработкаПриИзменении(Элемент)
	
	НастройкиРасчетаЗарплаты.ИспользоватьИндексациюЗаработка = ИспользоватьИндексациюЗаработка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДоплатуЗаДниБолезниПриИзменении(Элемент)
	
	УстановитьДоступностьПроцентДоплатыЗаДниНетрудоспособности(ЭтаФорма);
	Если НастройкиРасчетаЗарплаты.ИспользоватьДоплатуЗаДниБолезни И ЗарплатаКадрыНастройкиОрганизации.ПроцентДоплатыЗаДниНетрудоспособности = 0 Тогда
		ЗарплатаКадрыНастройкиОрганизации.ПроцентДоплатыЗаДниНетрудоспособности = 100;
		ПроцентДоплатыЗаДниНетрудоспособности = 100;
	ИначеЕсли Не НастройкиРасчетаЗарплаты.ИспользоватьДоплатуЗаДниБолезни Тогда
		ЗарплатаКадрыНастройкиОрганизации.ПроцентДоплатыЗаДниНетрудоспособности = 0;
		ПроцентДоплатыЗаДниНетрудоспособности = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентДоплатыЗаДниНетрудоспособностиПриИзменении(Элемент)
	ЗарплатаКадрыНастройкиОрганизации.ПроцентДоплатыЗаДниНетрудоспособности = ПроцентДоплатыЗаДниНетрудоспособности;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПроцентДоплатыЗаДниНетрудоспособности(Форма)
	
	УстановитьДоступностьПодчиненныхЭлементовФормы(Форма.Элементы.ПроцентДоплатыЗаДниНетрудоспособности, Форма.НастройкиРасчетаЗарплаты.ИспользоватьДоплатуЗаДниБолезни);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницыДоплатаЗаДниБолезни(Форма)
	
	Если Форма.ИспользоватьНесколькоОрганизаций Тогда
		Форма.Элементы.СтраницыДоплатаЗаДниБолезни.ТекущаяСтраница = Форма.Элементы.СтраницаДоплатаЗаДниБолезниПустая;
	Иначе
		Форма.Элементы.СтраницыДоплатаЗаДниБолезни.ТекущаяСтраница = Форма.Элементы.СтраницаДоплатаЗаДниБолезни;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереносДанных

&НаКлиенте
Процедура ЗаписатьФайлыЗУП25(Команда)
	
	ЗаписатьФайлы("ЗУП25");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлы(ПрефиксМакета)
	
	АдресаФайлов = Новый Структура("АдресФайлаПравил, АдресФайлаОбработки");
	ПолучитьФайлыКонвертации(ПрефиксМакета, АдресаФайлов);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПрефиксМакета", ПрефиксМакета);
	ПараметрыОповещения.Вставить("АдресаФайлов", АдресаФайлов);
	
	ОповещениеВопроса = Новый ОписаниеОповещения("ЗаписатьФайлыЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОповещениеВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлыЗавершение(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	ПрефиксМакета = ПараметрыОповещения.ПрефиксМакета;
	АдресаФайлов = ПараметрыОповещения.АдресаФайлов;
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ДиалогВыбораФайла				= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайла.Заголовок		= НСтр("ru = 'Укажите каталог для записи файлов конвертации'");
		
		Если ДиалогВыбораФайла.Выбрать() Тогда
			//	Вариант для установленного расширения для работы с файлами.
			
			Каталог = ДиалогВыбораФайла.Каталог;
			
			ПередаваемыеФайлы = Новый Массив;
			ПереданныеФайлы   = Новый Массив;
			МассивВызовов 	  = Новый Массив;
			
			ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(Каталог + "\" + ПрефиксМакета + "_ЗК30.xml", АдресаФайлов.АдресФайлаПравил);
			ПередаваемыеФайлы.Добавить(ОписаниеФайла);
			ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(Каталог + "\" + ПрефиксМакета + "_ЗК30.ert", АдресаФайлов.АдресФайлаОбработки);
			ПередаваемыеФайлы.Добавить(ОписаниеФайла);
			
			МассивВызовов.Добавить(Новый Массив);
			
			МассивВызовов[0].Добавить("ПолучитьФайлы");
			МассивВызовов[0].Добавить(ПередаваемыеФайлы);
			МассивВызовов[0].Добавить(ПереданныеФайлы);
			МассивВызовов[0].Добавить("");
			МассивВызовов[0].Добавить(Ложь);
			
			Если ЗапроситьРазрешениеПользователя(МассивВызовов) Тогда
				
				ПолучитьФайлы(ПередаваемыеФайлы, ПереданныеФайлы,, Ложь);
				
				ШаблонСообщения = НСтр("ru = 'Обработка выгрузки %1 и правила конвертации %2 записаны в каталог: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ПрефиксМакета + "_ЗК30.ert", ПрефиксМакета + "_ЗК30.xml", Каталог);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				УдалитьИзВременногоХранилища(АдресаФайлов.АдресФайлаПравил);
				УдалитьИзВременногоХранилища(АдресаФайлов.АдресФайлаОбработки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Попытка
			
			ПолучитьФайл(АдресаФайлов.АдресФайлаПравил, ПрефиксМакета + "_ЗК30.xml", Истина);
			Состояние(НСтр("ru = 'Файл правил выгрузки успешно сохранен'"), , АдресаФайлов.АдресФайлаПравил);
			
			ПолучитьФайл(АдресаФайлов.АдресФайлаОбработки, ПрефиксМакета + "_ЗК30.ert", Истина);
			Состояние(НСтр("ru = 'Файл обработки выгрузки успешно сохранен'"), , АдресаФайлов.АдресФайлаОбработки);
			
			УдалитьИзВременногоХранилища(АдресаФайлов.АдресФайлаПравил);
			УдалитьИзВременногоХранилища(АдресаФайлов.АдресФайлаОбработки);
			
		Исключение
			ШаблонСообщения = НСтр("ru = 'При записи файла возникла ошибка
			|%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОписаниеОшибки = ИнформацияОбОшибке();
			
			ЗаписатьОшибкуВЖурнал(ТекстСообщения, ОписаниеОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьФайлыКонвертации(ПрефиксМакета, Параметры)
	
	ИмяВременногоФайлаПравил  = КаталогВременныхФайлов() + ПрефиксМакета + "_ЗК3.xml";
	ДвоичныеДанныеФайлаПравил = Обработки.НачальнаяНастройкаПрограммы.ПолучитьМакет(ПрефиксМакета + "_xml");
	ДвоичныеДанныеФайлаПравил.Записать(ИмяВременногоФайлаПравил);
	
	ИмяВременногоФайлаОбработки  = КаталогВременныхФайлов() + ПрефиксМакета + "_ЗК3.ert";
	ДвоичныеДанныеФайлаОбработки = Обработки.НачальнаяНастройкаПрограммы.ПолучитьМакет(ПрефиксМакета + "_ert");
	ДвоичныеДанныеФайлаОбработки.Записать(ИмяВременногоФайлаОбработки);
	
	Параметры.АдресФайлаПравил    = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаПравил, Новый УникальныйИдентификатор);
	Параметры.АдресФайлаОбработки = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаОбработки, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОшибкуВЖурнал(ТекстСообщения, ОписаниеОшибки)
	
	ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПериодов()
	
	ПериодГодСтрока = Формат(ПериодГод, "ЧГ=0");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодГодСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодГод = ПериодГод + Направление;
	ОписаниеПериодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОшибкиНажатие(Элемент)
	
	ПодготовитьОтчетОбОшибках();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокИБ8()
	
	ТаблицаПути.Очистить();
	
	КаталогДанныхПользователя = "";
	
	#Если ВебКлиент Тогда

		КаталогДанныхПользователя = Вычислить("РабочийКаталогДанныхПользователя()");
		КаталогДанныхПользователя = Сред(КаталогДанныхПользователя, 1, СтрНайти(КаталогДанныхПользователя, "Roaming") + 6);
		
	#Иначе
		Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
			КаталогДанныхПользователя = Вычислить("РабочийКаталогДанныхПользователя()");
			КаталогДанныхПользователя = Сред(КаталогДанныхПользователя, 1, СтрНайти(КаталогДанныхПользователя, "Roaming") + 6);
			
		Иначе
			Оболочка = Новый COMОбъект("WScript.Shell");
			КаталогДанныхПользователя = Оболочка.ExpandEnvironmentStrings("%APPDATA%");
			
		КонецЕсли;
		
	#КонецЕсли
	
	Если НЕ ЗначениеЗаполнено(КаталогДанныхПользователя) Тогда
		Возврат;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = Лев(СистемнаяИнформация.ВерсияПриложения, 3);
	
	Если ВерсияПлатформы = "8.1" Тогда
		ЛокальныеИБ	= КаталогДанныхПользователя + "\1C\1Cv81\ibases.v8i";
		ОбщиеИБ		= КаталогДанныхПользователя + "\1C\1Cv81\ibases.v8l";
		
	Иначе
		ЛокальныеИБ	= КаталогДанныхПользователя + "\1C\1CEStart\ibases.v8i";
		ОбщиеИБ		= КаталогДанныхПользователя + "\1C\1CEStart\ibases.v8l";
		
	КонецЕсли;
	
	Файл = Новый Файл(ЛокальныеИБ);
	Если Файл.Существует() Тогда
		ПрочитатьСписокБаз(ВерсияПлатформы, ЛокальныеИБ);
	КонецЕсли;
	
	Файл = Новый Файл(ОбщиеИБ);
	Если Файл.Существует() Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ОбщиеИБ);
		
		Для НомерСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
			ОбщаяИБ = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
			Файл = Новый Файл(ОбщаяИБ);
			Если Файл.Существует() Тогда
				ПрочитатьСписокБаз(ВерсияПлатформы, ОбщаяИБ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПути.Сортировать("Имя");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокИБ77()
	
	ТаблицаПути.Очистить();
	
	СписокИБ = Новый Соответствие;
	
	Попытка
		HKEY_CURRENT_USER	= 2147483649;
		СписокБаз77			= "Software\1C\1Cv7\7.7\Titles";
		
		СистемныйРеестр = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv");
		
		МассивИБ = Неопределено;
		СистемныйРеестр.EnumValues(HKEY_CURRENT_USER, СписокБаз77, МассивИБ);
		Для Каждого ПутьИБ Из МассивИБ Цикл
			ИмяИБ = "";
			СистемныйРеестр.GetStringValue(HKEY_CURRENT_USER, СписокБаз77, ПутьИБ, ИмяИБ);
			СписокИБ.Вставить(ИмяИБ, ПутьИБ);
		КонецЦикла;
		
	Исключение
		Возврат;
		
	КонецПопытки;
	
	Если СписокИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФайлОписанияМетаданных = Новый ТекстовыйДокумент;
	
	МассивИменФайлов = Новый Массив;
	МассивИменФайлов.Добавить("1cv7.dd");
	МассивИменФайлов.Добавить("1cv7.dds");
	
	Для Каждого КлючИЗначение Из СписокИБ Цикл
		Название	= КлючИЗначение.Ключ;
		Путь		= КлючИЗначение.Значение;
		
		ЯвляетсяКонфигурациейЗиК = Ложь;
		Для Каждого ИмяФайла Из МассивИменФайлов Цикл
			ФайлДляПроверки = Новый Файл(Путь + ИмяФайла);
			Если ФайлДляПроверки.Существует() Тогда
				ФайлОписанияМетаданных.Прочитать(Путь + ИмяФайла);
				ОписанияМетаданных = ФайлОписанияМетаданных.ПолучитьТекст();
				ЯвляетсяКонфигурациейЗиК = СтрНайти(ОписанияМетаданных, "CJ447") > 0;
				Если Не ЯвляетсяКонфигурациейЗиК Тогда
					ЯвляетсяКонфигурациейЗиК = СтрНайти(ОписанияМетаданных, "Журнал расчетов Зарплата") > 0;
					Если ЯвляетсяКонфигурациейЗиК Тогда  
						ЯвляетсяКонфигурациейЗиК = (СтрНайти(ОписанияМетаданных, "Регистр (Дв.)") = 0);
					КонецЕсли;	
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЯвляетсяКонфигурациейЗиК Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПути.Добавить();
		НоваяСтрока.Имя							= Название;
		НоваяСтрока.Путь						= Путь;
	КонецЦикла;
	
	ТаблицаПути.Сортировать("Имя");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСписокБаз(ВерсияПлатформы, ПутьКФайлу)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлу);
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		ИмяИБ	= "";
		ПутьИБ	= "";
		Папка	= "";
		
		ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		Если Лев(ТекущаяСтрока,1) = "[" И Прав(ТекущаяСтрока,1) = "]" Тогда
			ИмяИБ = Сред(ТекущаяСтрока,2,СтрДлина(ТекущаяСтрока)-2);
			НомерСтроки = НомерСтроки + 1;
			ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
			Если СтрНайти(ТекущаяСтрока, "Connect=File=") <> 0 Тогда
				ПутьИБ = Сред(ТекущаяСтрока, 9, СтрДлина(ТекущаяСтрока)- 9);
				
				НоваяСтрока = ТаблицаПути.Добавить();
				НоваяСтрока.Имя		= ИмяИБ;
				НоваяСтрока.Путь	= ПутьИБ;
				
			ИначеЕсли СтрНайти(ТекущаяСтрока, "Connect=Srvr=") <> 0 Тогда
				ПутьИБ = Сред(ТекущаяСтрока, 9, СтрДлина(ТекущаяСтрока)- 9);
				
				НоваяСтрока = ТаблицаПути.Добавить();
				НоваяСтрока.Имя		= ИмяИБ;
				НоваяСтрока.Путь	= ПутьИБ;
				
			КонецЕсли;
			
			Если НомерСтроки >= КоличествоСтрок Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереносДанныхЧерезИБПриИзменении(Элемент)
	
	// Уточним состав страниц помощника.
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереносДанныхЧерезФайлПриИзменении(Элемент)
	
	// Уточним состав страниц помощника.
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗагрузкаИБНажатие(Элемент)
	
	ПереносДанныхЧерезФайл = 0;
	
	// Уточним состав страниц помощника.
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	
	ИндексСтраницы = ПорядокСтраниц.Найти(ТекущаяСтраницаИмя);
	Если ИндексСтраницы <> Неопределено Тогда
		ИндексНовойСтраницы = ИндексСтраницы + 1;
	КонецЕсли;
	
	Если ИндексНовойСтраницы > ПорядокСтраниц.ВГраница() Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтраницаИмя = ПорядокСтраниц.Получить(ИндексНовойСтраницы);
	Если НоваяСтраницаИмя <> Неопределено Тогда
		НоваяСтраница = Элементы.Найти(НоваяСтраницаИмя);
		Если НоваяСтраница <> Неопределено Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = НоваяСтраница;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьФормуПриСменеСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗагрузкаФайлНажатие(Элемент)
	
	ПереносДанныхЧерезФайл = 1;
	
	// Уточним состав страниц помощника.
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	
	ИндексСтраницы = ПорядокСтраниц.Найти(ТекущаяСтраницаИмя);
	Если ИндексСтраницы <> Неопределено Тогда
		ИндексНовойСтраницы = ИндексСтраницы + 1;
	КонецЕсли;
	
	Если ИндексНовойСтраницы > ПорядокСтраниц.ВГраница() Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтраницаИмя = ПорядокСтраниц.Получить(ИндексНовойСтраницы);
	Если НоваяСтраницаИмя <> Неопределено Тогда
		НоваяСтраница = Элементы.Найти(НоваяСтраницаИмя);
		Если НоваяСтраница <> Неопределено Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = НоваяСтраница;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьФормуПриСменеСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ПереносДанныхВыполнен = Ложь;
	
	ТаблицаОшибок.Очистить();
	
	Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница	= Элементы.СтраницаЗаголовокПереносВыполняется;
	Элементы.СтраницыРезультат.ТекущаяСтраница			= Элементы.Процесс;
	
	Перерисовать(1, "ВОчереди");
	
	Если ИспользуетсяБазоваяВерсия Тогда
		НетОшибок = ВыгрузкаИнформационнойБазыБазовая();
	Иначе
		Если ПереносДанныхИзПредприятия8 Тогда
			НетОшибок = ВыгрузкаИнформационнойБазыПРОФИзПредприятия8();
		Иначе
			НетОшибок = ВыгрузкаИнформационнойБазыПРОФИзПредприятия77();
		КонецЕсли;
	КонецЕсли;
	
	Если НетОшибок Тогда
		
		ЗагрузитьФайлыПереноса();
		
	Иначе
		
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница = Элементы.СтраницаЗаголовокПереносЗавершен;
		Элементы.СтраницыРезультат.ТекущаяСтраница        = Элементы.Ошибки;
		ПроверитьОбновитьНастройкиПрограммыПослеЗагрузкиДанных();
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЗагрузкаФайловПереноса

&НаКлиенте
Процедура ЗагрузитьФайлыПереноса()

	// Шаг № 3 инициализация обмена и загрузка данных.
	ЭтапКонвертации = НСтр("ru = 'Загрузка данных'");
	Перерисовать(3, "Выполняется", Истина);
	
	Если СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		
		Для Каждого ОписаниеЭтапа Из СписокЭтаповВыгрузки Цикл
			
			ЭтапКонвертации = "Загрузка данных: " + ОписаниеЭтапа.Представление;
			ОбработкаПрерыванияПользователя();
			ОбновитьОтображениеДанных();
			
			ИмяФайлаДанных = ОписаниеЭтапа.Значение;
			РезультатВыполнения = ВыполнитьЗагрузкуФайлаНаСервере(ИмяФайлаДанных);
			
			Если Не ПустаяСтрока(РезультатВыполнения) Тогда
				ЗафиксироватьОшибкуИСообщить(ЭтаФорма, РезультатВыполнения, 0, Ложь);
				ЗагрузитьФайлыПереносаЗавершение(Ложь);
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗагрузитьФайлыПереносаЗавершение(Истина);
		
	Иначе
		
		ЗагрузитьФайлыПереносаКС();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыПереносаКС()
	
	Для ИндексФайла = 0 По СписокЭтаповВыгрузки.Количество() - 1 Цикл
		
		ОписаниеЭтапа = СписокЭтаповВыгрузки[ИндексФайла];
		ИмяФайлаДанных = ОписаниеЭтапа.Значение;
		
		ЭтапКонвертации = "Загрузка данных: " + ОписаниеЭтапа.Представление;
		ОбработкаПрерыванияПользователя();
		ОбновитьОтображениеДанных();
		
		#Если Не ВебКлиент Тогда
			ЧастиФайла = РазделитьФайл(ИмяФайлаДанных, 524288000);   
		#Иначе
			ЧастиФайла  = Новый Массив;
		#КонецЕсли
		
		АдресаЧастейФайла = Новый Массив;
		Для Каждого ЧастьФайла Из ЧастиФайла Цикл
			АдресаЧастейФайла.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ЧастьФайла), УникальныйИдентификатор));
			УдалитьВременныеФайлыИзКаталога(ЧастьФайла);
		КонецЦикла;
		
		РезультатВыполнения = ПолучитьИЗагрузитьФайлПереносаНаСервере(АдресаЧастейФайла);
		
		Если Не ПустаяСтрока(РезультатВыполнения) Тогда
			ЗафиксироватьОшибкуИСообщить(ЭтаФорма, РезультатВыполнения, 0, Ложь);
			ЗагрузитьФайлыПереносаЗавершение(Ложь);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьФайлыПереносаЗавершение(Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИЗагрузитьФайлПереносаНаСервере(АдресаЧастейФайла)

	ИменаЧастей = Новый Массив;
	
	Для каждого АдресФайла Из АдресаЧастейФайла Цикл
	
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ИменаЧастей.Добавить(ИмяВременногоФайла);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		УдалитьИзВременногоХранилища(АдресФайла);
	
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ОбъединитьФайлы(ИменаЧастей, ИмяВременногоФайла);
	Для каждого ИмяЧастиФайла Из ИменаЧастей Цикл
		УдалитьВременныеФайлыИзКаталога(ИмяЧастиФайла);
	КонецЦикла;
	
	РезультатВыполнения = ВыполнитьЗагрузкуФайлаНаСервере(ИмяВременногоФайла);
	УдалитьВременныеФайлыИзКаталога(ИмяВременногоФайла);
	
	Возврат РезультатВыполнения;

КонецФункции 

&НаСервере
Функция ВыполнитьЗагрузкуФайлаНаСервере(ИмяФайлаДанных)

	// считывание заголовка
	ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.РежимОбмена = "Загрузка";
	ОбработкаОбмена.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
	
	РезультатЗагрузки = "";
	
	ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаДанных;
	Попытка
		
		ОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
		
	Исключение
		
		РезультатЗагрузки = НСтр("ru = 'При чтении данных произошла ошибка:'") + Символы.ПС
				+ ОписаниеОшибки()+ Символы.ПС 
				+ НСтр("ru = 'Ошибка в формате файла данных.'");
				
		Возврат РезультатЗагрузки;
		
	КонецПопытки;
	
	Если НЕ ОбработкаОбмена.мБылиПрочитаныПравилаОбменаПриЗагрузке Тогда
		
		РезультатЗагрузки = НСтр("ru = 'При чтении правил обмена данными произошла ошибка.'");
		
	Иначе
		
		ОбработкаОбмена.ВыполнитьЗагрузку();
		
		Если ОбработкаОбмена.ФлагОшибки Тогда
			РезультатЗагрузки = НСтр("ru = 'Не удалось произвести загрузку данных. Проверьте служебные сообщения в окне сообщений.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатЗагрузки;

КонецФункции

&НаКлиенте
Процедура ЗагрузитьФайлыПереносаЗавершение(ЗагрузкаВыполнена)

	УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
	Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница	= Элементы.СтраницаЗаголовокПереносЗавершен;
	
	Если ЗагрузкаВыполнена Тогда
		
		Перерисовать(3, "Успех", Истина);
		Элементы.СтраницыРезультат.ТекущаяСтраница	= Элементы.Успех;
		Элементы.ЗагрузитьДанные.Доступность		= Ложь;
		
		ЭтапКонвертации = "";
		ВыполненУпрощенныйПеренос = Не ПереноситьНачисленияПредыдущейПрограммы;
		
		Если ВыполненУпрощенныйПеренос Тогда
			ВыполняетсяПереносДанных = Ложь;
			ВариантыНачалаРаботы = "";
		КонецЕсли;
		
		ПереносДанныхВыполнен = Истина;
		
	Иначе
		Элементы.СтраницыРезультат.ТекущаяСтраница		= Элементы.Ошибки;
	КонецЕсли;
	
	ПроверитьОбновитьНастройкиПрограммыПослеЗагрузкиДанных();
	ОбновитьКнопки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ВыгрузкаИнформационнойБазыБазовая()
	
	// Шаг №1 - подключение к ИБ
	ЭтапКонвертации = Нстр("ru = 'Подключение к информационной базе'");
	Перерисовать(1, "Выполняется", Истина);
	
	ИмяФайлаПравил			= "";
	ИмяФайлаОбработки		= "";
	КаталогВыгрузкиЗагрузки	= "";
	УИД						= "";
	ОпределитьКонфигурациюИПолучитьФайлы(ПереносДанныхИзПредприятия8, "-1", ИмяФайлаПравил, ИмяФайлаОбработки, КаталогВыгрузкиЗагрузки, УИД);
	
	ИмяФайлаРезультатов	= КаталогВыгрузкиЗагрузки + "ПереносДанныхРезультат.txt";
	
	ФайлИнструкций = Новый ТекстовыйДокумент;
	ФайлИнструкций.ДобавитьСтроку(КлиентскоеПриложение.ПолучитьЗаголовок());
	ФайлИнструкций.ДобавитьСтроку(ИмяФайлаПравил);
	ФайлИнструкций.ДобавитьСтроку(Формат(ПериодГод, "ЧГ="));
	ФайлИнструкций.ДобавитьСтроку(ИмяФайлаРезультатов);
	ФайлИнструкций.ДобавитьСтроку(КаталогВыгрузкиЗагрузки);
	ФайлИнструкций.ДобавитьСтроку(?(ИспользуетсяБазоваяВерсия, "1", "0"));
	Если ПереносДанныхИзПредприятия8 Тогда
		ФайлИнструкций.ДобавитьСтроку("");
	Иначе
		ФайлИнструкций.ДобавитьСтроку(ИмяФайлаОбработки);
	КонецЕсли;
	
	ФайлИнструкций.ДобавитьСтроку(Формат(МесяцНачалаЭксплуатации, "ДФ=dd.MM.yyyy"));
	ФайлИнструкций.ДобавитьСтроку(?(ПереноситьНачисленияПредыдущейПрограммы,1,0));
	
	Попытка
		
		Если ПереносДанныхИзПредприятия8 Тогда
			ИмяФайлаИнструкций	= КаталогВыгрузкиЗагрузки + "ПереносДанныхИнструкции.txt";
			ФайлИнструкций.Записать(ИмяФайлаИнструкций);
		Иначе
			
			Если ПустаяСтрока(Пользователь) Тогда
				ИмяФайлаИнструкций	= ПутьКИБ + "ПереносДанныхИнструкции.txt";
			Иначе
				ИмяФайлаИнструкций	= КаталогВыгрузкиЗагрузки + "ПереносДанныхИнструкции.txt";
			КонецЕсли;
			ФайлИнструкций.Записать(ИмяФайлаИнструкций, "windows-1251");
			
		КонецЕсли;
		
	Исключение
		
		Перерисовать(1);
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма,11,12,,ИнформацияОбОшибке());
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		Возврат Ложь;
		
	КонецПопытки;
	
	Если ПереносДанныхИзПредприятия8 Тогда
		
		СтрокаПодключения = "/IBConnectionString""" + СтрЗаменить(ПутьКИБ, """", "'");
		Если ЗначениеЗаполнено(Пользователь) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr='" + Пользователь + "'";
		КонецЕсли;
		Если ЗначениеЗаполнено(Пароль) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd='" + Пароль + "'";
		КонецЕсли;
		СтрокаПодключения = СтрокаПодключения + """ /C"+"""ЗарплатаКадрыПереносДанных;" + ИмяФайлаИнструкций+"""";
		
	Иначе
		
		СтрокаПодключения = "enterprise /D""" + ПутьКИБ + """ /M";
		Если ЗначениеЗаполнено(Пользователь) Тогда
			СтрокаПодключения = СтрокаПодключения + " /N""" + Пользователь + """";
		КонецЕсли;
		Если ЗначениеЗаполнено(Пароль) Тогда
			СтрокаПодключения = СтрокаПодключения + " /P""" + Пароль + """";
		КонецЕсли;
		СтрокаПодключения = СтрокаПодключения + " /U""" + КаталогВыгрузкиЗагрузки + """";
		
	КонецЕсли;
	
	Открыта = Ложь;
	ИнформацияОбОшибке = Неопределено;
	Попытка
		Если ПереносДанныхИзПредприятия8 Тогда
			КодВозврата = 0;
			#Если Не ВебКлиент Тогда
				ЗапуститьПриложение("""" + КаталогПрограммы() + "1cv8c.exe"" " + СтрокаПодключения, , Истина, КодВозврата);
			#КонецЕсли
			Открыта = Истина;
			
		Иначе
			СписокИсполняемыйФайлов = Новый Массив;
			Если Не ПустаяСтрока(ВыбранныйДляПереносаИсполняемыйФайлПлатформы77) Тогда
				СписокИсполняемыйФайлов.Добавить(ВыбранныйДляПереносаИсполняемыйФайлПлатформы77);
			КонецЕсли;
			СписокИсполняемыйФайлов.Добавить("C:\Program Files\1Cv77\BIN\1cv7.exe");
			СписокИсполняемыйФайлов.Добавить("C:\Program Files\1Cv77\BIN\1cv7s.exe");
			СписокИсполняемыйФайлов.Добавить("C:\Program Files (x86)\1Cv77\BIN\1cv7.exe");
			СписокИсполняемыйФайлов.Добавить("C:\Program Files (x86)\1Cv77\BIN\1cv7s.exe");
			ИмяИсполняемогоФайла = "";
			Для Каждого ИсполняемыйФайл Из СписокИсполняемыйФайлов Цикл
				Файл = Новый Файл(ИсполняемыйФайл);
				Если Не Файл.Существует() Тогда
					Продолжить;
				КонецЕсли;
				ИмяИсполняемогоФайла = ИсполняемыйФайл;
				Прервать;
			КонецЦикла;
			Если ПустаяСтрока(ИмяИсполняемогоФайла) Тогда
				ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
				ДиалогОткрытияФайла.ПолноеИмяФайла	= "";
				ДиалогОткрытияФайла.Фильтр			= НСтр("ru = '1C:Предприятие 7.7 (1cv7*.exe)|1cv7*.exe'");
				ДиалогОткрытияФайла.Заголовок		= НСтр("ru = 'Выберите исполняемый файл 1C:Предприятие 7.7'");
				Если ДиалогОткрытияФайла.Выбрать() Тогда
					ИмяИсполняемогоФайла = ДиалогОткрытияФайла.ПолноеИмяФайла;
				КонецЕсли;
			КонецЕсли;
			
			ВыбранныйДляПереносаИсполняемыйФайлПлатформы77 = ИмяИсполняемогоФайла;
			
			КодВозврата = 0;
			#Если Не ВебКлиент Тогда
				Если Не ПустаяСтрока(ИмяИсполняемогоФайла) Тогда
					ЗапуститьПриложение("""" + ИмяИсполняемогоФайла + """ " + СтрокаПодключения, , Истина, КодВозврата);
				КонецЕсли;
			#КонецЕсли
			Открыта = Не ПустаяСтрока(ИмяИсполняемогоФайла);
			
		КонецЕсли;
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
	КонецПопытки;
	
	Если Не Открыта Тогда
		ИБИсточник = Неопределено;
		Перерисовать(1);
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма,2,4,,ИнформацияОбОшибке);
		Возврат Ложь;
	КонецЕсли;
	
	Перерисовать(1, "Успех", Истина);
	ЭтапКонвертации = Нстр("ru = 'Выгрузка данных'");
	Перерисовать(2, "Выполняется", Истина);
	
	ФайлРезультатов = Новый Файл(ИмяФайлаРезультатов);
	Если Не ФайлРезультатов.Существует() Тогда
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма,13,14);
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		Возврат Ложь;
	КонецЕсли;
	
	Перерисовать(2, "Успех", Истина);
	
	СписокЭтаповВыгрузки = Новый СписокЗначений;
	
	ФайлРезультатов = Новый ТекстовыйДокумент;
	ФайлРезультатов.Прочитать(ИмяФайлаРезультатов);
	Для Номер = 1 По ФайлРезультатов.КоличествоСтрок() Цикл
		СтрокаРезультата = ФайлРезультатов.ПолучитьСтроку(Номер);
		МассивРезультата = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаРезультата, ";");
		
		ИмяФайлаОбмена				= МассивРезультата[0];
		ПредставлениеФайлаОбмена	= МассивРезультата[1];
		
		СписокЭтаповВыгрузки.Добавить(ИмяФайлаОбмена, ПредставлениеФайлаОбмена);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализацияСообщенийКодов(Форма)
	
	ОписанияСообщений = Новый Соответствие;
	
	ОписанияСообщений.Вставить(2,  Нстр("ru = 'Не удалось произвести подключение к информационной базе:'"));
	ОписанияСообщений.Вставить(3,  НСтр("ru = 'Ошибка создания COM-объекта. Обратитесь к администратору информационной системы.'"));
	ОписанияСообщений.Вставить(4,  НСтр("ru = 'Возможно, пользователь отменил подключение к информационной базе, либо была попытка немонопольного подключения.'"));
	ОписанияСообщений.Вставить(5,  Нстр("ru = 'Не удалось загрузить правила переноса данных:'"));
	ОписанияСообщений.Вставить(6,  Нстр("ru = 'Возможно, в правилах конвертации ошибка. Обратитесь в техническую поддержку.'"));
	ОписанияСообщений.Вставить(7,  Нстр("ru = 'Перенос данных завершился аварийно:'"));
	ОписанияСообщений.Вставить(8,  Нстр("ru = 'Воспользуйтесь вариантом загрузки данных из файла, предварительно сформировав его в информационной базе, из которой производится перенос данных.'"));
	ОписанияСообщений.Вставить(9,  Нстр("ru = 'Не удалось получить данные для загрузки.'"));
	ОписанияСообщений.Вставить(10,  Нстр("ru = 'Рекомендуется обновить релиз конфигурации информационной базы, из которой производится перенос данных.'"));
	ОписанияСообщений.Вставить(11,  Нстр("ru = 'Не записан файл с правилами переноса на диск:'"));
	ОписанияСообщений.Вставить(12,  Нстр("ru = 'Возможно, у пользователя нет прав на запись файлов в каталог с ИБ.'"));
	ОписанияСообщений.Вставить(13,  Нстр("ru = 'Не удалось выгрузить данные'"));
	ОписанияСообщений.Вставить(14,  Нстр("ru = 'Посмотрите список ошибок в конфигурации, из которой выгружались данные.'"));
	ОписанияСообщений.Вставить(15,  Нстр("ru = 'Ошибка создания COM-объекта. Обратитесь к администратору информационной системы. Для выполнения переноса данных на компьютере должна быть установлена полная версия 1С:Предприятия.'"));
	
	Форма.ОписанияСообщений = Новый ФиксированноеСоответствие(ОписанияСообщений);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗафиксироватьОшибкуИСообщить(Форма, КодТекстОшибки, КодРекомендации, СообщатьПользователю = Истина, ИнформацияОбОшибке = Неопределено)

	Если Форма.ОписанияСообщений = Неопределено Тогда
		ИнициализацияСообщенийКодов(Форма);
	КонецЕсли;
	
	Если ТипЗнч(КодТекстОшибки) = Тип("Строка") Тогда
		ТекстОшибки  = ?(ЗначениеЗаполнено(КодТекстОшибки),КодТекстОшибки,Неопределено);
	Иначе
		ТекстОшибки  = Форма.ОписанияСообщений.Получить(КодТекстОшибки);	
	КонецЕсли;
	
	Если ТекстОшибки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстРекомендации = Форма.ОписанияСообщений.Получить(КодРекомендации);
	
	Описание = "";
	Пока ИнформацияОбОшибке <> Неопределено Цикл
		Описание = Описание + Символы.ПС + ИнформацияОбОшибке.Описание;
		ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
	КонецЦикла;
	ТекстОшибки = ТекстОшибки + " " + Описание;
	
	Если СообщатьПользователю Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
	КонецЕсли;
	
	Этап = Форма.ЭтапКонвертации;
	
	Если НЕ ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяОшибка = Форма.ТаблицаОшибок.Добавить();
	НоваяОшибка.Этап			= Этап;
	НоваяОшибка.Ошибка			= ТекстОшибки;
	НоваяОшибка.Рекомендации	= ?(ТекстРекомендации = Неопределено,"",ТекстРекомендации);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьВременныеФайлыИзКаталога(КаталогСФайлами)
	
	Попытка
		УдалитьФайлы(КаталогСФайлами);
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Функция РазобратьПротоколВыгрузки(ФайлПротокола, ТекстОшибок)

	ЕстьОшибки = Ложь;
	Для Номер = 1 По ФайлПротокола.КоличествоСтрок() Цикл
		
		СтрокаРезультата = ФайлПротокола.ПолучитьСтроку(Номер);
		
		Если (ПустаяСтрока(СтрокаРезультата) И Не ЕстьОшибки)
			Или СтрНайти(СтрокаРезультата, "Начало выгрузки") = 1
			Или СтрНайти(СтрокаРезультата, "Окончание выгрузки") = 1
			Или СтрНайти(СтрокаРезультата, "Выгружено объектов") = 1
			Или СтрНайти(СтрокаРезультата, "Ошибка.") = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибки = Истина;
		Если Не ПустаяСтрока(ТекстОшибок) Тогда
			ТекстОшибок = ТекстОшибок + Символы.ПС;
		КонецЕсли;
		ТекстОшибок = ТекстОшибок + СтрокаРезультата;
	КонецЦикла;
	
	Возврат ЕстьОшибки;

КонецФункции 


&НаКлиенте
Функция ВыгрузкаИнформационнойБазыПРОФИзПредприятия8()
	

	// Шаг №1 - подключение к ИБ
	ЭтапКонвертации = Нстр("ru = 'Подключение к информационной базе'");
	Перерисовать(1, "Выполняется", Истина);
	
	ИмяCOMСоединителя = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИмяCOMСоединителя;
	ФайловыйРежим = (СтрНайти(ВРег(ПутьКИБ), "FILE=") > 0);
	
	// создание соединения
	Попытка
		ИБИсточник = Новый COMObject(ИмяCOMСоединителя);
	Исключение
		
		Если Не ФайловыйРежим Или Не СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
			ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 2, 15,,ИнформацияОбОшибке());
			ИБИсточник = "";
			Перерисовать(1);
			Возврат Ложь;
		Иначе
			Возврат ВыгрузкаИнформационнойБазыБазовая();
		КонецЕсли;
		
	КонецПопытки;
	
	СтрокаПодключения = ПутьКИБ;
	Если ЗначениеЗаполнено(Пользователь) Тогда
		СтрокаПодключения = СтрокаПодключения + ";Usr=""" + Пользователь + """";
	КонецЕсли;
	Если ЗначениеЗаполнено(Пароль) Тогда
		СтрокаПодключения = СтрокаПодключения + ";Pwd=""" + Пароль + """";
	КонецЕсли;
	
	Попытка
		ИБИсточник = ИБИсточник.connect(СтрокаПодключения);
	Исключение
		
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 2, 4,,ИнформацияОбОшибке());
		ИБИсточник = "";
		Перерисовать(1);
		Возврат Ложь;
		
	КонецПопытки;
	
	НомерРелизаКонфигурации		= ИБИсточник.Метаданные.Версия;
	ИдентификаторКонфигурации	= ИБИсточник.Метаданные.Имя;
	
	ИмяФайлаПравил			= "";
	ИмяФайлаОбработки		= "";
	КаталогВыгрузкиЗагрузки	= "";
	УИД						= "";
	Ошибка =  ОпределитьКонфигурациюИПолучитьФайлы(ПереносДанныхИзПредприятия8, НомерРелизаКонфигурации, ИмяФайлаПравил, ИмяФайлаОбработки, КаталогВыгрузкиЗагрузки, УИД);
	Если Ошибка Тогда
		ИБИсточник = "";
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаПротокола = КаталогВыгрузкиЗагрузки + "ПереносДанных.txt";
	Перерисовать(1, "Успех", Истина);
	
	// Шаг № 2 выгрузка данных
	ЭтапКонвертации = Нстр("ru = 'Выгрузка данных'");
	Перерисовать(2, "Выполняется", Истина);
	
	Попытка
		
		Если ПериодГод = 0 Тогда
			ПериодГод = 2015;
		КонецЕсли;
		
		ПараметрыПравил = Новый Структура;
		ПараметрыПравил.Вставить("ДатаНачалаПереносаРасчетныхДанных", Дата(ПериодГод, 1, 1));
		ПараметрыПравил.Вставить("МесяцНачалаЭксплуатации", МесяцНачалаЭксплуатации);
		ПараметрыПравил.Вставить("ПереноситьНачисленияПредыдущейПрограммы", ПереноситьНачисленияПредыдущейПрограммы);
		
		ОбработкаОбмена = ИБИсточник.Обработки.УниверсальныйОбменДаннымиXML.Создать();
		ОбработкаОбмена.РежимОбмена												= "Выгрузка";
		ОбработкаОбмена.НеВыводитьНикакихИнформационныхСообщенийПользователю	= Истина;
		ОбработкаОбмена.ИмяФайлаПравилОбмена									= ИмяФайлаПравил;
		ОбработкаОбмена.ИмяФайлаПротоколаОбмена									= ИмяФайлаПротокола;
		ОбработкаОбмена.ЗагрузитьПравилаОбмена();
		ЗаполнитьЗначенияСвойств(ОбработкаОбмена.Параметры, ПараметрыПравил);
				
	Исключение
		
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 5, 6,,ИнформацияОбОшибке());
		
		ИБИсточник = "";
		Перерисовать(2);
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		Возврат Ложь;
		
	КонецПопытки;
	
	Попытка
		
		КорневыеСтрокиПравилВыгрузки = ОбработкаОбмена.ТаблицаПравилВыгрузки.Строки;
		
		СтрокиКУдалению = Новый Массив;
		
		// Выключить все этапы выгрузки.
		Для Каждого ПравилоВыгрузки Из КорневыеСтрокиПравилВыгрузки Цикл
			
			ПравилоВыгрузки.Включить = 0;
			ОбработкаОбмена.УстановитьПометкиПодчиненных(ПравилоВыгрузки, "Включить");
			
			Если ПереноситьНачисленияПредыдущейПрограммы Тогда
				Если СтрНайти(ПравилоВыгрузки.Имя,"_УпрощенныйПеренос") Тогда
					СтрокиКУдалению.Добавить(ПравилоВыгрузки);
				КонецЕсли;
			Иначе
				Если СтрНайти(ПравилоВыгрузки.Имя,"_ПереносНачислений") Тогда
					СтрокиКУдалению.Добавить(ПравилоВыгрузки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ПравилоВыгрузки Из СтрокиКУдалению Цикл
			КорневыеСтрокиПравилВыгрузки.Удалить(ПравилоВыгрузки);
		КонецЦикла;
		
		КоличествоЭтаповВыгрузки = КорневыеСтрокиПравилВыгрузки.Количество();
		
		СписокЭтаповВыгрузки = Новый СписокЗначений;
		
		УИД = Новый УникальныйИдентификатор;
		
		мПрефиксФайловВыгрузки = ВариантыНачалаРаботы + УИД;
		
		Для Каждого ПравилоВыгрузки Из КорневыеСтрокиПравилВыгрузки Цикл
			
			ТекущийНомерВыгрузки = КорневыеСтрокиПравилВыгрузки.Индекс(ПравилоВыгрузки) + 1;
			
			ЭтапКонвертации = Нстр("ru = 'Выгрузка данных:'") + " " + ПравилоВыгрузки.Наименование + " (" + ТекущийНомерВыгрузки + "/" + КоличествоЭтаповВыгрузки + ")";
			
			ИмяФайлаОбмена = КаталогВыгрузкиЗагрузки + мПрефиксФайловВыгрузки + Прав("000" + ТекущийНомерВыгрузки, 3) + ".xml";
			
			ОбработкаПрерыванияПользователя();
			ОбновитьОтображениеДанных();
			
			ПравилоВыгрузки.Включить = 1;
			ОбработкаОбмена.УстановитьПометкиПодчиненных(ПравилоВыгрузки, "Включить");
			ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;
			ОбработкаОбмена.ВыполнитьВыгрузку();
			
			ФайлПротокола = Новый ТекстовыйДокумент;
			ФайлПротокола.Прочитать(ИмяФайлаПротокола);
			
			ТекстОшибок = "";
			ЕстьОшибки = РазобратьПротоколВыгрузки(ФайлПротокола, ТекстОшибок);
			Если ЕстьОшибки Тогда
				
				ЗафиксироватьОшибкуИСообщить(ЭтаФорма, ТекстОшибок, 6, Ложь);
				УдалитьВременныеФайлыИзКаталога(ИмяФайлаПравил);
				УдалитьВременныеФайлыИзКаталога(ИмяФайлаПротокола);
				
				Перерисовать(2);
				
				Возврат Ложь;
				
			КонецЕсли;
			
			СписокЭтаповВыгрузки.Добавить(ИмяФайлаОбмена, ПравилоВыгрузки.Наименование + " (" + ТекущийНомерВыгрузки + "/" + КоличествоЭтаповВыгрузки + ")");
			
			ПравилоВыгрузки.Включить = 0;
			ОбработкаОбмена.УстановитьПометкиПодчиненных(ПравилоВыгрузки, "Включить");
			
		КонецЦикла;
		
	Исключение
		
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 7, 8, Ложь, ИнформацияОбОшибке());
		
		ИБИсточник = "";
		Перерисовать(2);
		
		УдалитьВременныеФайлыИзКаталога(ИмяФайлаПравил);
		УдалитьВременныеФайлыИзКаталога(ИмяФайлаПротокола);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаПравил);
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаПротокола);
	
	ИБИсточник = "";
	
	Перерисовать(2, "Успех", Истина);
	
	Возврат Истина;	
	
КонецФункции	

&НаКлиенте
Функция ВыгрузкаИнформационнойБазыПРОФИзПредприятия77()
	
	// Шаг №1 - подключение к ИБ
	ЭтапКонвертации = Нстр("ru = 'Подключение к информационной базе'");
	Перерисовать(1, "Выполняется", Истина);
	
	ИмяCOMСоединителя = "V1CEnterprise.Application";
	
	ВыгрузитьВРежимеБазовая = Ложь;
	Попытка
		ИБИсточник = Новый COMObject(ИмяCOMСоединителя);
	Исключение
		
		Если Не СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
			ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 2, 3);
		Иначе
			Возврат ВыгрузкаИнформационнойБазыБазовая();
		КонецЕсли;
		
	КонецПопытки;
	
	СтрокаПодключения = "/D""" + ПутьКИБ + """ ";
	Если ЗначениеЗаполнено(Пользователь) Тогда
		СтрокаПодключения = СтрокаПодключения + "/N""" + Пользователь + """";
	КонецЕсли;
	Если ЗначениеЗаполнено(Пароль) Тогда
		СтрокаПодключения = СтрокаПодключения + "/P""" + Пароль + """";
	КонецЕсли;
	
	ИБОткрыта = Ложь;
	ИнформацияОбОшибке = Неопределено;
	Попытка
		ИБОткрыта = ИБИсточник.Initialize(ИБИсточник.RMTrade, СтрокаПодключения, "NO_SPLASH_SHOW");
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	
	Если Не ИБОткрыта Тогда
		
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 2, 4,,ИнформацияОбОшибке);
		ИБИсточник = "";
		Перерисовать(1);
		Возврат Ложь;
		
	КонецЕсли;	
	
	НомерРелизаКонфигурации		= ИБИсточник.Константа.НомерРелиза;
	ИдентификаторКонфигурации	= ИБИсточник.глИдентификаторКонфигурации();
	
	ИмяФайлаПравил			= "";
	ИмяФайлаОбработки		= "";
	КаталогВыгрузкиЗагрузки	= "";
	УИД						= "";
	Ошибка =  ОпределитьКонфигурациюИПолучитьФайлы(ПереносДанныхИзПредприятия8, НомерРелизаКонфигурации, ИмяФайлаПравил, ИмяФайлаОбработки, КаталогВыгрузкиЗагрузки, УИД);
	Если Ошибка Тогда
		ИБИсточник = "";
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаПротокола = КаталогВыгрузкиЗагрузки + "ПереносДанных.txt";
	Перерисовать(1, "Успех", Истина);
	
	// Шаг № 2 выгрузка данных
	ЭтапКонвертации = Нстр("ru = 'Выгрузка данных'");
	Перерисовать(2, "Выполняется", Истина);
	
	Попытка
		
		Если ПериодГод = 0 Тогда
			ПериодГод = 2015;
		КонецЕсли;
		
		ПараметрыВыгрузки = ИБИсточник.CreateObject("СписокЗначений"); 
		ПараметрыВыгрузки.ДобавитьЗначение(ИмяФайлаПравил,					"ИмяФайлаПравил");
		ПараметрыВыгрузки.ДобавитьЗначение("ВыполнитьАлгоритм",				"ИмяКоманды");
		
		Если ПереноситьНачисленияПредыдущейПрограммы Тогда
			ПараметрыВыгрузки.ДобавитьЗначение("ТаблицаЭтаповВыгрузки",			"ИмяАлгоритма");
			ПараметрыВыгрузки.ДобавитьЗначение(Дата(ПериодГод, 1, 1),			"ДатаНачала");
		Иначе
			ПараметрыВыгрузки.ДобавитьЗначение("ТаблицаЭтаповВыгрузки_УпрощенныйПеренос",			"ИмяАлгоритма");
			ПараметрыВыгрузки.ДобавитьЗначение(ДобавитьМесяц(МесяцНачалаЭксплуатации, -36),			"ДатаНачала");
		КонецЕсли;
		
		ИБИсточник.глОбработчикСообщений = ПараметрыВыгрузки;
		ИБИсточник.EvalExpr("ОткрытьФормуМодально(""Отчет"", глОбработчикСообщений, """ + ИмяФайлаОбработки + """)");
		
		ТаблицаЭтаповВыгрузки = ИБИсточник.глОбработчикСообщений;
		
		ТипВозвращенногоЗначения = ИБИсточник.EvalExpr("ТипЗначенияСтр(глОбработчикСообщений)");
		Если ТипВозвращенногоЗначения <> "ТаблицаЗначений" Тогда
			
			Если (ТипВозвращенногоЗначения = "СписокЗначений") И (ИБИсточник.глОбработчикСообщений.Получить("ИмяФайлаПравил") = Неопределено) Тогда
				Описание = ИБИсточник.глОбработчикСообщений.ВСтрокуСРазделителями();
				ТекстСообщения = Нстр("ru = 'При открытии обработки переноса данных возникли ошибки:'" + Символы.ПС + Описание);
			Иначе
				ТекстСообщения = Нстр("ru = 'Не удалось открыть обработку переноса данных.'");
			КонецЕсли;
			ЗафиксироватьОшибкуИСообщить(ЭтаФорма, ТекстСообщения, 6);
			
			УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
			
			ИБИсточник = "";
			Перерисовать(2);
			
			Возврат Ложь;
			
		КонецЕсли;
		
		ПараметрыВыгрузки					= "";
		ТипВозвращенногоЗначения			= "";
		
	Исключение
		
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 5, 6,, ИнформацияОбОшибке());
		
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Попытка
		
		
		КорневыеСтрокиПравилВыгрузки = Новый Массив;
		ТаблицаЭтаповВыгрузки.ВыбратьСтроки();
		Пока ТаблицаЭтаповВыгрузки.ПолучитьСтроку() = 1 Цикл
			
			Если ПереноситьНачисленияПредыдущейПрограммы Тогда
				Если СтрНайти(ТаблицаЭтаповВыгрузки.ИмяГруппы,"_УпрощенныйПеренос") Тогда
					Продолжить;
				КонецЕсли;
			Иначе	
				Если СтрНайти(ТаблицаЭтаповВыгрузки.ИмяГруппы,"_ПереносНачислений") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			КорневыеСтрокиПравилВыгрузки.Добавить(Новый Структура(
			"Наименование, ИспользуемыеПравила, ДатаНачала, ДатаОкончания",
			ТаблицаЭтаповВыгрузки.Представление, ТаблицаЭтаповВыгрузки.ИспользуемыеПравила,
			ТаблицаЭтаповВыгрузки.ДатаНачалаВыгрузки, ТаблицаЭтаповВыгрузки.ДатаОкончанияВыгрузки));
			
		КонецЦикла;
		ТаблицаЭтаповВыгрузки = "";
			
		КоличествоЭтаповВыгрузки = КорневыеСтрокиПравилВыгрузки.Количество();
		
		СписокЭтаповВыгрузки = Новый СписокЗначений;
		
		УИД = Новый УникальныйИдентификатор;
		
		мПрефиксФайловВыгрузки = ВариантыНачалаРаботы + УИД;
		
		Для Каждого ПравилоВыгрузки Из КорневыеСтрокиПравилВыгрузки Цикл
			
			ТекущийНомерВыгрузки = КорневыеСтрокиПравилВыгрузки.Найти(ПравилоВыгрузки) + 1;
			
			ЭтапКонвертации = Нстр("ru = 'Выгрузка данных:'") + " " + ПравилоВыгрузки.Наименование + " (" + ТекущийНомерВыгрузки + "/" + КоличествоЭтаповВыгрузки + ")";
			
			ИмяФайлаОбмена = КаталогВыгрузкиЗагрузки + мПрефиксФайловВыгрузки + Прав("000" + ТекущийНомерВыгрузки, 3) + ".xml";
			
			ОбработкаПрерыванияПользователя();
			ОбновитьОтображениеДанных();
			
			// Выполним переподключение к ИБ, для освобождения памяти.
			ИБИсточник = Новый COMObject(ИмяCOMСоединителя);
			ИБИсточник.Initialize(ИБИсточник.RMTrade, СтрокаПодключения, "NO_SPLASH_SHOW");
			
			ПараметрыПравил = ИБИсточник.CreateObject("СписокЗначений");
			ПараметрыПравил.ДобавитьЗначение(Дата(ПериодГод, 1, 1),			"ДатаНачалаПереносаРасчетныхДанных");
			ПараметрыПравил.ДобавитьЗначение(1,								"ВыгрузкаИзПомощника");
			Если ЗначениеЗаполнено(ПравилоВыгрузки.ДатаНачала) Тогда
				// дата ограничения для "тяжелых" алгоритмов
				ПараметрыПравил.ДобавитьЗначение(ПравилоВыгрузки.ДатаНачала,"ДатаНачалаВыгрузки");
			КонецЕсли;
			Если ЗначениеЗаполнено(ПравилоВыгрузки.ДатаОкончания) Тогда
				// дата ограничения для "тяжелых" алгоритмов
				ПараметрыПравил.ДобавитьЗначение(ПравилоВыгрузки.ДатаОкончания,"ДатаОкончанияВыгрузки");
			КонецЕсли;
			
			Если ПереноситьНачисленияПредыдущейПрограммы Тогда
				ПараметрыПравил.ДобавитьЗначение(1, "ПереноситьНачисленияПредыдущейПрограммы");
			Иначе	
				ПараметрыПравил.ДобавитьЗначение(0, "ПереноситьНачисленияПредыдущейПрограммы");
				ПараметрыПравил.ДобавитьЗначение(МесяцНачалаЭксплуатации,"МесяцНачалаЭксплуатации");
			КонецЕсли;
			
			ПараметрыВыгрузки = ИБИсточник.CreateObject("СписокЗначений");
			ПараметрыВыгрузки.ДобавитьЗначение(ИмяФайлаПравил,						"ИмяФайлаПравил");
			ПараметрыВыгрузки.ДобавитьЗначение(ПравилоВыгрузки.ИспользуемыеПравила,	"ИспользуемыеПравилаВыгрузки");
			ПараметрыВыгрузки.ДобавитьЗначение(ИмяФайлаОбмена,						"ИмяФайлаДанных");
			ПараметрыВыгрузки.ДобавитьЗначение(ПараметрыПравил,						"ТаблицаНастройкиПараметров");
			ПараметрыВыгрузки.ДобавитьЗначение("Выгрузить",							"ИмяКоманды");
			
			ИБИсточник.глОбработчикСообщений = ПараметрыВыгрузки;
			ИБИсточник.EvalExpr("ОткрытьФормуМодально(""Отчет"", глОбработчикСообщений, """ + ИмяФайлаОбработки + """)");
			
			ФайлПротокола = Новый ТекстовыйДокумент;
			
			Результат = ИБИсточник.глОбработчикСообщений.ВСтрокуСРазделителями();
			Если ТипЗнч(Результат) = Тип("Число") Тогда
				ФайлПротокола.ДобавитьСтроку(НСтр("ru = 'Не удалось произвести выгрузку данных.'"));
			КонецЕсли;
			Если Результат <> "" Тогда
				СписокОшибок = СтрЗаменить(Результат, """,""", Символы.ПС);
				Для НомерСтроки = 1 По СтрЧислоСтрок(СписокОшибок) Цикл
					МассивОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СтрПолучитьСтроку(СписокОшибок, НомерСтроки)), "|");
					Если МассивОшибки.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если МассивОшибки.Количество() = 1 Тогда
						ФайлПротокола.ДобавитьСтроку(МассивОшибки[0]);
						
					Иначе
						ФайлПротокола.ДобавитьСтроку(МассивОшибки[0] + " " + МассивОшибки[1]);
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыВыгрузки = "";
			Результат		  = "";
			ПараметрыПравил   = "";
			
			ТекстОшибок = "";
			ЕстьОшибки = РазобратьПротоколВыгрузки(ФайлПротокола, ТекстОшибок);
			Если ЕстьОшибки Тогда
				
				ЗафиксироватьОшибкуИСообщить(ЭтаФорма, ТекстОшибок, 6, Ложь);
				УдалитьВременныеФайлыИзКаталога(ИмяФайлаПравил);
				УдалитьВременныеФайлыИзКаталога(ИмяФайлаПротокола);
				УдалитьВременныеФайлыИзКаталога(ИмяФайлаОбработки);
				
				Перерисовать(2);
				
				Возврат Ложь;
				
			КонецЕсли;
				
			СписокЭтаповВыгрузки.Добавить(ИмяФайлаОбмена, ПравилоВыгрузки.Наименование + " (" + ТекущийНомерВыгрузки + "/" + КоличествоЭтаповВыгрузки + ")");
			
		КонецЦикла;
		
	Исключение
		
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 7, 8, Ложь, ИнформацияОбОшибке());
		
		ИБИсточник = "";
		Перерисовать(2);
		
		УдалитьВременныеФайлыИзКаталога(ИмяФайлаПравил);
		УдалитьВременныеФайлыИзКаталога(ИмяФайлаПротокола);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаПравил);
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаОбработки);
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаПротокола);
	
	ИБИсточник = "";
	
	Перерисовать(2, "Успех", Истина);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПроверитьОбновитьНастройкиПрограммыПослеЗагрузкиДанных()

	Если ЗарплатаКадрыРасширенный.ШтатноеРасписаниеВсегдаИспользуется() Тогда
		Настройки = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
		Настройки.Прочитать();
		Если Не Настройки.ИспользоватьШтатноеРасписание Тогда
			НовыеНастройки = Новый Структура("ИспользоватьШтатноеРасписание,НеИспользоватьШтатноеРасписание");
			НовыеНастройки.ИспользоватьШтатноеРасписание = Истина;
			НовыеНастройки.НеИспользоватьШтатноеРасписание = Ложь;
			ЗаполнитьЗначенияСвойств(Настройки, НовыеНастройки);
			УправлениеШтатнымРасписанием.ЗаписатьНастройкиШтатногоРасписания(Настройки);
		КонецЕсли;	
	КонецЕсли;	
	
	Если Не РежимПереносДанных Тогда
		ПослеЗаписиНастроекНаСервере();
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура Перерисовать(Этап, Состояние = "Ошибка", ОднаКартинка = Ложь)
	
	ИмяЗакладки = "НеВыполняется";
	Если Состояние = "ВОчереди" Тогда
		НомерСостояния = 1;
		
	ИначеЕсли Состояние = "Выполняется" Тогда
		НомерСостояния = 2;
		ИмяЗакладки = "Выполняется";
		
	ИначеЕсли Состояние = "Ошибка" Тогда
		НомерСостояния = 3;
		ИмяЗакладки = "Выполнено";
		
	ИначеЕсли Состояние = "Успех" Тогда
		НомерСостояния = 4;
		ИмяЗакладки = "Выполнено";
		
	Иначе
		НомерСостояния = 3;
		ИмяЗакладки = "Выполнено";
		
	КонецЕсли;
	
	Если ОднаКартинка Тогда
		
		ЭтапСтрока = Этапы.Получить(Этап);
		Элементы[ЭтапСтрока].ТекущаяСтраница    = Элементы[ЭтапСтрока + НомерСостояния];
		Элементы[ЭтапСтрока + "Надпись"].ТекущаяСтраница = Элементы[ЭтапСтрока + "Надпись" + ИмяЗакладки];
		
	Иначе
		
		Для НомерКартинки = Этап По Этапы.Количество() Цикл
			ЭтапСтрока = Этапы.Получить(НомерКартинки);
			Элементы[ЭтапСтрока].ТекущаяСтраница    = Элементы[ЭтапСтрока + НомерСостояния];
			Элементы[ЭтапСтрока + "Надпись"].ТекущаяСтраница = Элементы[ЭтапСтрока + "Надпись" + ИмяЗакладки];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьОтчетОбОшибках()
	
	ОтчетОбОшибках = Новый ТабличныйДокумент;
	ПодготовитьОтчетОбОшибкахСервер(ОтчетОбОшибках);
	ОтчетОбОшибках.ТолькоПросмотр		= Истина;
	ОтчетОбОшибках.ОтображатьЗаголовки	= Ложь;
	ОтчетОбОшибках.ОтображатьСетку		= Ложь;
	ОтчетОбОшибках.Показать(НСтр("ru='Список ошибок'"));
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОтчетОбОшибкахСервер(ОтчетОбОшибках)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.НачальнаяНастройкаПрограммы.СписокОшибок");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Если ЗначениеЗаполнено(ИмяИБ) Тогда
		ОбластьШапка.Параметры.ИмяИБ = ИмяИБ;
		ОбластьШапка.Параметры.ПутьКИБ = ПутьКИБ;
	Иначе
		ОбластьШапка.Параметры.ИмяИБ = Нстр("ru = 'Файл данных'");
		ОбластьШапка.Параметры.ПутьКИБ = Объект.ИмяФайлаДанных;
	КонецЕсли;
	
	ОтчетОбОшибках.Вывести(ОбластьШапка);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		ОбластьСтрока.Параметры.Этап = СтрокаТаблицы.Этап;
		ОбластьСтрока.Параметры.Ошибка = СтрокаТаблицы.Ошибка;
		ОбластьСтрока.Параметры.Рекомендации = СтрокаТаблицы.Рекомендации;
		ОбластьСтрока.Параметры.Расшифровка = СтрокаТаблицы.Расшифровка;
		
		ОтчетОбОшибках.Вывести(ОбластьСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбщийМакетПравилПереносаДанных(ИмяМакета)
	
	Возврат ПолучитьОбщийМакет(ИмяМакета);
	
КонецФункции

&НаКлиенте
Функция ОпределитьКонфигурациюИПолучитьФайлы(
	ПереносДанныхИзПредприятия8,
	НомерРелизаКонфигурации = "",
	ИмяВременногоФайлаПравил = "", ИмяВременногоФайлаОбработки = "",
	КаталогВыгрузкиЗагрузки = "",
	УИД = "")
	
	
	УИД = Новый УникальныйИдентификатор;
	
	КаталогВыгрузкиЗагрузки		= КаталогВременныхФайлов() + "ПереносДанных" + УИД + "\";  
	СоздатьКаталог(КаталогВыгрузкиЗагрузки);
	ДвоичныеДанныеФайлаПравил	= ОбщийМакетПравилПереносаДанных(ВариантыНачалаРаботы);
	ПереносДанныхИзПредприятия8 = ТипЗнч(ДвоичныеДанныеФайлаПравил) <> Тип("ДвоичныеДанные");
	Если ПереносДанныхИзПредприятия8 Тогда
		ИмяВременногоФайлаПравил	= КаталогВыгрузкиЗагрузки + "ПереносДанных.xml";
		Для НомерСтроки = 1 По ДвоичныеДанныеФайлаПравил.КоличествоСтрок() Цикл
			ТекущаяСтрока = ДвоичныеДанныеФайлаПравил.ПолучитьСтроку(НомерСтроки);
			ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока, "ОПД_", "ОбъектыПереносаДанных.");
			ДвоичныеДанныеФайлаПравил.ЗаменитьСтроку(НомерСтроки, ТекущаяСтрока);
		КонецЦикла;
		ДвоичныеДанныеФайлаПравил.Записать(ИмяВременногоФайлаПравил);
		
	Иначе
		
		#Если ВебКлиент Тогда
			// перенос данных в этом режиме недоступен
			Возврат Ложь;
		#Иначе
			
			ИмяВременногоФайлаАрхива	= КаталогВыгрузкиЗагрузки + "ПереносДанных.zip";
			ДвоичныеДанныеФайлаПравил.Записать(ИмяВременногоФайлаАрхива);
			Архив = Новый ЧтениеZipФайла(ИмяВременногоФайлаАрхива);
			Для Каждого АрхивныйФайл Из Архив.Элементы Цикл
				Если АрхивныйФайл.Расширение = "xml" Тогда
					ФайлПравил		= АрхивныйФайл;
				ИначеЕсли АрхивныйФайл.Расширение = "ert" Тогда
					ФайлОбработки	= АрхивныйФайл;
				КонецЕсли;
			КонецЦикла;
			Архив.Извлечь(ФайлПравил, КаталогВыгрузкиЗагрузки);
			Архив.Извлечь(ФайлОбработки, КаталогВыгрузкиЗагрузки);
			ИмяВременногоФайлаПравил	= КаталогВыгрузкиЗагрузки + ФайлПравил.ПолноеИмя;
			ИмяВременногоФайлаОбработки	= КаталогВыгрузкиЗагрузки + ФайлОбработки.ПолноеИмя;
			УдалитьФайлы(ИмяВременногоФайлаАрхива);
			
		#КонецЕсли
		
	КонецЕсли;
	
	ФайлОбмена = Новый ЧтениеXML();
	ФайлОбмена.ОткрытьФайл(ИмяВременногоФайлаПравил);
	Пока ФайлОбмена.Прочитать() Цикл
		Если ФайлОбмена.ЛокальноеИмя = "Источник" Тогда
			МинимальныйНомерРелиза = ФайлОбмена.ПолучитьАтрибут("ВерсияКонфигурации");
			Если ФайлОбмена.Прочитать() Тогда
				УстановитьИнформационнуюСсылку(ФайлОбмена.Значение);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ФайлОбмена.Закрыть();
	
	Если ПустаяСтрока(НомерРелизаКонфигурации) Тогда
		УдалитьФайлы(КаталогВыгрузкиЗагрузки);
		Возврат Истина;
	КонецЕсли;
	
	Если НомерРелизаКонфигурации = "-1" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НомерРелизаКонфигурации + ?(Не ПереносДанныхИзПредприятия8, ".0", ""), МинимальныйНомерРелиза + ?(Не ПереносДанныхИзПредприятия8, ".0", "")) < 0 Тогда
		
		ТекстСообщения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Текущая версия правил предназначена для релиза конфигурации не ниже %1'"), 
		МинимальныйНомерРелиза);
		
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, ТекстСообщения, 10);
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОрганизацияНаименованиеСокращенноеПриИзменении(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.ЗаполнитьНаименованияПоСокращенному(
	Организация.ЮридическоеФизическоеЛицо,
	Организация.НаименованиеСокращенное,
	Организация.Наименование,
	Организация.НаименованиеПолное,
	ПредыдущееНаименованиеСокращенное,
	ИндивидуальныйПредприниматель.ФИО);
	
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	ОбновитьИндикатор(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "МесяцНачалаЭксплуатации", "МесяцНачалаЭксплуатацииСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "МесяцНачалаЭксплуатации", "МесяцНачалаЭксплуатацииСтрокой", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "МесяцНачалаЭксплуатации", "МесяцНачалаЭксплуатацииСтрокой", Направление);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ОткрытьПроизводственныйКалендарьРФ(Команда)
	
	КалендарьРФ = ПроизводственныйКалендарьРоссийскойФедерации();
	Если КалендарьРФ <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Ключ", КалендарьРФ);
		ОткрытьФорму("Справочник.ПроизводственныеКалендари.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРегиональныйПроизводственныйКалендарь(Команда)
	
	РегиональныйКалендарь = РегиональныйПроизводственныйКалендарь();
	Если ЗначениеЗаполнено(РегиональныйКалендарь) Тогда
		ПараметрыФормы = Новый Структура("Ключ", РегиональныйКалендарь);
	Иначе
		ПараметрыФормы = Новый Структура("ЗначениеКопирования", ПроизводственныйКалендарьРоссийскойФедерации());
	КонецЕсли;
	ОткрытьФорму("Справочник.ПроизводственныеКалендари.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГрафиков(Команда)
	
	ОткрытьФорму("Справочник.ГрафикиРаботыСотрудников.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДолжностей(Команда)
	
	Если Не ИспользоватьГосударственнуюСлужбу И Не ИспользоватьМуниципальнуюСлужбу И Не ИспользоватьВоеннуюСлужбу Тогда
		СоздатьДолжностиПоУмолчанию(НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание,НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания,МесяцНачалаЭксплуатации);
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ПоказыватьНовыеДолжности", Истина);
	ОткрытьФорму("Справочник.Должности.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПодразделений(Команда) 
	
	Если Не ИспользоватьГосударственнуюСлужбу И Не ИспользоватьМуниципальнуюСлужбу И Не ИспользоватьВоеннуюСлужбу Тогда
		СоздатьПодразделенияПоУмолчанию(ОрганизацияСсылка, НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание, НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания, МесяцНачалаЭксплуатации);
	КонецЕсли;
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец", ОрганизацияСсылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Владелец", ОрганизацияСсылка);
	ПараметрыФормы.Вставить("ПоказыватьНовыеПодразделения", Истина);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ОткрытьФорму("Справочник.ПодразделенияОрганизаций.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТарифныхСеток(Команда)
	
	ПараметрыФормы = Новый Структура("ДатаСобытия", МесяцНачалаЭксплуатации);
	ОткрытьФорму("Справочник.ТарифныеСетки.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШтатноеРасписание(Команда)
	
	Если ВыполненУпрощенныйПеренос Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", ОрганизацияСсылка);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаСобытия", МесяцНачалаЭксплуатации);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Справочник.ШтатноеРасписание.ФормаСписка", ПараметрыФормы);
		
	Иначе
		
		Если НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			
			СсылкаНаДокумент = СсылкаНаДокумент(ОрганизацияСсылка, "УтверждениеШтатногоРасписания");
			
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("МесяцВступленияВСилу", МесяцНачалаЭксплуатации);
			ЗначенияЗаполнения.Вставить("Организация", ОрганизацияСсылка);
			
			ПараметрыФормы = Новый Структура;
			Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
				ПараметрыФормы.Вставить("Ключ", СсылкаНаДокумент);
			КонецЕсли;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			
			ОткрытьФорму("Документ.УтверждениеШтатногоРасписания.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		Иначе
			
			Отбор = Новый Структура;
			Отбор.Вставить("Владелец", ОрганизацияСсылка);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ДатаСобытия", МесяцНачалаЭксплуатации);
			ПараметрыФормы.Вставить("Отбор", Отбор);
			
			ОткрытьФорму("Справочник.ШтатноеРасписание.ФормаСписка", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокСотрудников(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", ОрганизацияСсылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Отбор);

	ОткрытьФорму("Справочник.Сотрудники.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШтатнуюРасстановку(Команда)
	
	СсылкаНаДокумент = СсылкаНаДокумент(ОрганизацияСсылка, "НачальнаяШтатнаяРасстановка");
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Месяц", МесяцНачалаЭксплуатации);
	ЗначенияЗаполнения.Вставить("Организация", ОрганизацияСсылка);
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		ПараметрыФормы.Вставить("Ключ", СсылкаНаДокумент);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.НачальнаяШтатнаяРасстановка.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНачальнуюЗадолженность(Команда)
	
	Если ВыполненУпрощенныйПеренос Тогда
		
		ОткрытьФорму("Документ.НачальнаяЗадолженностьПоЗарплате.ФормаСписка", , ЭтаФорма);
		
	Иначе	
		
		СсылкаНаДокумент = СсылкаНаДокумент(ОрганизацияСсылка, "НачальнаяЗадолженностьПоЗарплате");
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Месяц", ДобавитьМесяц(МесяцНачалаЭксплуатации, -1));
		ЗначенияЗаполнения.Вставить("Организация", ОрганизацияСсылка);
		
		ПараметрыФормы = Новый Структура;
		Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
			ПараметрыФормы.Вставить("Ключ", СсылкаНаДокумент);
		КонецЕсли;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Документ.НачальнаяЗадолженностьПоЗарплате.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаймы(Команда)
	
	ОткрытьФорму("Документ.ДоговорЗаймаСотруднику.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУдержаний(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", ОрганизацияСсылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаСобытия", МесяцНачалаЭксплуатации);
	ПараметрыФормы.Вставить("Организация", ОрганизацияСсылка);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("ЖурналДокументов.АлиментыИДругиеПостоянныеУдержания.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналКадровыхДокументов(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", ОрганизацияСсылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ОрганизацияСсылка);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("ЖурналДокументов.КадровыеДокументы.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналОтсутствий(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", ОрганизацияСсылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ОрганизацияСсылка);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("ЖурналДокументов.Отсутствия.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОплаченныеРанееПериоды(Команда)
	
	СсылкаНаДокумент = СсылкаНаДокумент(ОрганизацияСсылка, "ПериодыОплаченныеДоНачалаЭксплуатации");
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Месяц", МесяцНачалаЭксплуатации);
	ЗначенияЗаполнения.Вставить("Организация", ОрганизацияСсылка);
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		ПараметрыФормы.Вставить("Ключ", СсылкаНаДокумент);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ПериодыОплаченныеДоНачалаЭксплуатации.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура СписокУволенных(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", ОрганизацияСсылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ОрганизацияСсылка);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Документ.Увольнение.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаАванса(Команда)
	
	СсылкаНаДокумент = СсылкаНаДокумент(ОрганизацияСсылка, "ВедомостьНаВыплатуЗарплатыВКассуАванс");
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ПериодРегистрации", МесяцНачалаЭксплуатации);
	ЗначенияЗаполнения.Вставить("Организация", ОрганизацияСсылка);
	ЗначенияЗаполнения.Вставить("СпособВыплаты", СпособВыплатыАванс());
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		ПараметрыФормы.Вставить("Ключ", СсылкаНаДокумент);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗарплаты(Команда)
	
	СсылкаНаДокумент = СсылкаНаДокумент(ОрганизацияСсылка, "ВедомостьНаВыплатуЗарплатыВКассу");
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ПериодРегистрации", МесяцНачалаЭксплуатации);
	ЗначенияЗаполнения.Вставить("Организация", ОрганизацияСсылка);
	ЗначенияЗаполнения.Вставить("СпособВыплаты", ПредопределенноеЗначение("Справочник.СпособыВыплатыЗарплаты.Зарплата"));
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		ПараметрыФормы.Вставить("Ключ", СсылкаНаДокумент);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПятидневкаОписаниеОбработкаНавигационнойСсылки(Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ГрафикРаботы = ГрафикРаботыПятидневка();
	ПараметрыФормы = Новый Структура("Ключ", ГрафикРаботы);
	ОткрытьФорму("Справочник.ГрафикиРаботыСотрудников.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКвалификацийОписаниеОбработкаНавигационнойСсылки(Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.РазрядыКатегорииДолжностей.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура НачислитьАвансОписаниеОбработкаНавигационнойСсылки(Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СсылкаНаДокумент = СсылкаНаДокумент(ОрганизацияСсылка, "НачислениеЗаПервуюПоловинуМесяца");
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("МесяцНачисления", МесяцНачалаЭксплуатации);
	ЗначенияЗаполнения.Вставить("Организация", ОрганизацияСсылка);
	
	ПараметрыФормы = Новый Структура();
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		ПараметрыФормы.Вставить("Ключ", СсылкаНаДокумент);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.НачислениеЗаПервуюПоловинуМесяца.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьФормуПервоначальногоВводаПоНастройкам();
	
	Отбор = Новый Структура("Организация", ОрганизацияСсылка);
	НайденныеСтроки = СсылкиНаДокументы.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаТаблицы = СсылкиНаДокументы.Добавить();
		СтрокаТаблицы.Организация = ОрганизацияСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПервыйРасчетЗарплатыОписание4ОбработкаНавигационнойСсылки(Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СсылкаНаДокумент = СсылкаНаДокумент(ОрганизацияСсылка, "НачислениеЗарплаты");
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("МесяцНачисления", МесяцНачалаЭксплуатации);
	ЗначенияЗаполнения.Вставить("Организация", ОрганизацияСсылка);
	
	ПараметрыФормы = Новый Структура();
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		ПараметрыФормы.Вставить("Ключ", СсылкаНаДокумент);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.НачислениеЗарплаты.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервыйРасчетЗарплатыОписание5ОбработкаНавигационнойСсылки(Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "РегистрУчетаНДФЛ" Тогда
		
		ПериодОтчета = Новый СтандартныйПериод;
		ПериодОтчета.ДатаНачала = НачалоГода(МесяцНачалаЭксплуатации);
		ПериодОтчета.ДатаОкончания = КонецГода(МесяцНачалаЭксплуатации);
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", ОрганизацияСсылка);
		Отбор.Вставить("Период", ПериодОтчета);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта", "РегистрНалоговогоУчетаПоНДФЛ");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Отчет.РегистрНалоговогоУчетаПоНДФЛ.Форма", ПараметрыФормы)
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "КарточкаУчетаСтраховыхВзносов" Тогда
		
		ПериодОтчета = Новый СтандартныйПериод;
		ПериодОтчета.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		ПериодОтчета.ДатаНачала = НачалоГода(МесяцНачалаЭксплуатации);
		ПериодОтчета.ДатаОкончания = КонецГода(МесяцНачалаЭксплуатации);
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", ОрганизацияСсылка);
		Отбор.Вставить("Период", ПериодОтчета);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта", "КарточкаУчетаСтраховыхВзносовВЦелом");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Отчет.КарточкаУчетаПоСтраховымВзносам.Форма", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Т51" Тогда
		
		ПериодОтчета = Новый СтандартныйПериод;
		ПериодОтчета.Вариант = ВариантСтандартногоПериода.Месяц;
		ПериодОтчета.ДатаНачала = НачалоМесяца(МесяцНачалаЭксплуатации);
		ПериодОтчета.ДатаОкончания = КонецМесяца(МесяцНачалаЭксплуатации);
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", ОрганизацияСсылка);
		Отбор.Вставить("Период", ПериодОтчета);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта", "Т51");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Отчет.АнализНачисленийИУдержаний.Форма", ПараметрыФормы,,"Т51");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "РасчетныйЛисток" Тогда
		
		ПериодОтчета = Новый СтандартныйПериод;
		ПериодОтчета.Вариант = ВариантСтандартногоПериода.Месяц;
		ПериодОтчета.ДатаНачала = НачалоМесяца(МесяцНачалаЭксплуатации);
		ПериодОтчета.ДатаОкончания = КонецМесяца(МесяцНачалаЭксплуатации);
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", ОрганизацияСсылка);
		Отбор.Вставить("Период", ПериодОтчета);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта", "РасчетныйЛисток");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Отчет.АнализНачисленийИУдержаний.Форма", ПараметрыФормы,,"РасчетныйЛисток");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СводНачислений" Тогда
		
		ПериодОтчета = Новый СтандартныйПериод;
		ПериодОтчета.Вариант = ВариантСтандартногоПериода.Месяц;
		ПериодОтчета.ДатаНачала = НачалоМесяца(МесяцНачалаЭксплуатации);
		ПериодОтчета.ДатаОкончания = КонецМесяца(МесяцНачалаЭксплуатации);
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", ОрганизацияСсылка);
		Отбор.Вставить("Период", ПериодОтчета);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта", "ПолныйСводНачисленийУдержанийИВыплат");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Отчет.АнализНачисленийИУдержаний.Форма", ПараметрыФормы,,"СводНачислений");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГрафикРаботыПятидневка()
	
	Возврат Справочники.ГрафикиРаботыСотрудников.НайтиПоНаименованию("Пятидневка");;
	
КонецФункции

&НаСервере
Процедура ОбновитьФормуПервоначальногоВводаПоНастройкам()
	
	Если Не ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		Если КоличествоОрганизацийВИБ = 1 Или ИспользуетсяБазоваяВерсия Тогда
			ОрганизацияСсылка = Организация.Ссылка;
			ЕстьОбособленныеПодразделения = Организация.ЕстьОбособленныеПодразделения;
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации";
			
			Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			Если Организации.Количество()>0 Тогда
				ОрганизацияСсылка = Организации[0];
				ЕстьОбособленныеПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка, "ЕстьОбособленныеПодразделения");
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ЕстьОбособленныеПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка, "ЕстьОбособленныеПодразделения");
	КонецЕсли;
	
	Если ВыполненУпрощенныйПеренос Тогда
		Элементы.ГруппаГруппаШтатноеРасписаниеСтраницы.ТекущаяСтраница = Элементы.ГруппаШтатноеРасписание2;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ЗаполнитьШтатнуюРасстановку","Видимость", КоличествоОрганизацийВИБ = 1);
	Иначе
		Элементы.ГруппаГруппаШтатноеРасписаниеСтраницы.ТекущаяСтраница = Элементы.ГруппаШтатноеРасписание1;
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаОрганизации","Видимость", (Не ИспользуетсяБазоваяВерсия И КоличествоОрганизацийВИБ > 1));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаОбособленныеПодразделения","Видимость", ЕстьОбособленныеПодразделения);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаЗаймы","Видимость", НастройкиЗаймовСотрудникам.ИспользоватьЗаймыСотрудникам);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаПроизводственныеКалендари","Видимость", ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаГруппаШтатнаяРасстановкаСотрудники","Видимость", Не ВыполненУпрощенныйПеренос);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ДокументыНачальнаяШтатнаяРасстановка","Видимость", ВыполненУпрощенныйПеренос И (КоличествоОрганизацийВИБ > 1));
	
	ОбновитьОписанияПоДате(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОписанияПоДате(Форма)
	
	Если Форма.ВыполненУпрощенныйПеренос Тогда
		Описание = НСтр("ru = 'Плановые начисления сотрудников можно заполнить данными из позиций штатного расписания, для этого в документе выберите команду ""Еще - Обновить по штатному расписанию"". При заполнении начальной штатной расстановки необходимо проконтролировать заполнение прав на ежегодные отпуска и остатки отпусков.'");
	Иначе
		Описание = НСтр("ru = 'При заполнении начальной штатной расстановки указывайте те должности, подразделения, оклады и тарифы, которые действовали на начало месяца %1 года. Позже вы сможете внести кадровые переводы, изменения окладов и тарифов соответствующими кадровыми документами.'");
	КонецЕсли;
	Форма.ОписаниеШтатнаяРасстановка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Форма.МесяцНачалаЭксплуатацииСтрокой);
	
	ДатаПериода = ДобавитьМесяц(Форма.МесяцНачалаЭксплуатации, -1);
	Описание = НСтр("ru = 'Если зарплата за %1 года выплачена не полностью, или была допущена переплата, необходимо ввести начальную задолженность по зарплате для соответствующих сотрудников.'");
	Форма.ОписаниеЗадолженностьПоЗарплате1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(ДатаПериода));

	Описание = НСтр("ru = 'Сделайте это до заполнения первой ведомости в кассу или банк, иначе она будет заполнена по начислениям за %1 без учета задолженности.'");
	Форма.ОписаниеЗадолженностьПоЗарплате2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Форма.МесяцНачалаЭксплуатацииСтрокой);
	
	Описание = НСтр("ru = 'Вы ввели минимальные данные, необходимые для расчета зарплаты за %1 года. Если расчет зарплаты на вашем предприятии предполагает более сложные начисления, чем те, которые вы описали при начальной настройке, или требуется настройка документов для ввода первичных данных для расчета зарплаты, например, для ввода сдельного заработка, Вы можете нажать кнопку «Завершить ввод начальных данных» и перейти к созданию своих дополнительных начислений, воспользовавшись документацией.'");
	Форма.ПервыйРасчетЗарплатыОписание1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Форма.МесяцНачалаЭксплуатацииСтрокой);
	
	ДатаПериода = Формат(Форма.МесяцНачалаЭксплуатации, "ДФ='д ММММ гггг'"); 
	Описание = НСтр("ru = 'Для расчета зарплаты, прежде всего, введите кадровые события, наступившие после %1 года: прием на работу новых сотрудников, кадровые переводы и т.д.'");
	Форма.ПервыйРасчетЗарплатыОписание2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ДатаПериода);
	
	Описание = НСтр("ru = 'Теперь нужно ввести поступившие после %1 года первичные документы, связанные с отсутствием сотрудников: больничные листы, командировки, отпуска и т.д., а также зарегистрировать оплаченные ранее периоды.'");
	Форма.ПервыйРасчетЗарплатыОписание3 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ДатаПериода);
	
	ТекстНадписиНачало = НСтр("ru = 'Оформите приказы на уволенных во второй половине месяца, если требуется - введите документы об отсутствиях, после чего -'") + " ";
	ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'выполните окончательный расчет зарплаты'"), , , , "ссылка");
	ТекстНадписиОкончание = " " + НСтр("ru = 'за %1 года.'");
	ТекстНадписиОкончание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиОкончание, Форма.МесяцНачалаЭксплуатацииСтрокой);
	ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ТекстНадписиОкончание);
	Форма.ПервыйРасчетЗарплатыОписание4 = ТекстНадписи;
	
	ТекстНадписи1 = НСтр("ru = 'Конечный шаг - получение аналитической и регламентированной отчетности. Посмотрите, как расчет зарплаты отразился в'") + " ";
	ТекстНадписи2 = НСтр("ru = ', выведите на печать'") + " ";
	ТекстНадписи3 = НСтр("ru = ', распечатайте'") + " ";
	ТекстНадписиГиперссылка1 = Новый ФорматированнаяСтрока(НСтр("ru = 'Регистре учета НДФЛ'"), , , , "РегистрУчетаНДФЛ");
	ТекстНадписиГиперссылка2 = Новый ФорматированнаяСтрока(НСтр("ru = 'Карточку учета страховых взносов'"), , , , "КарточкаУчетаСтраховыхВзносов");
	ТекстНадписиГиперссылка3 = Новый ФорматированнаяСтрока(НСтр("ru = 'Т-51'"), , , , "Т51");
	ТекстНадписиГиперссылка4 = Новый ФорматированнаяСтрока(НСтр("ru = 'Расчетные листки'"), , , , "РасчетныйЛисток");
	ТекстНадписиГиперссылка5 = Новый ФорматированнаяСтрока(НСтр("ru = 'Свод начислений и удержаний'"), , , , "СводНачислений");
	ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписи1, ТекстНадписиГиперссылка1, ТекстНадписи2, ТекстНадписиГиперссылка2, ТекстНадписи3, ТекстНадписиГиперссылка3,", ",ТекстНадписиГиперссылка4,", ",ТекстНадписиГиперссылка5,".");
	Форма.ПервыйРасчетЗарплатыОписание5 = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьНачальнуюНастройкуПрограммыНаСервере()
	Константы.ВыполнятьНачальнуюНастройкуПрограммы.Установить(Ложь);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьДолжностиПоУмолчанию(ИспользоватьШтатноеРасписание,ИспользоватьИсториюИзмененияШтатногоРасписания,МесяцНачалаЭксплуатации)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Должности.ПометкаУдаления
	|ИЗ
	|	Справочник.Должности КАК Должности";
	
	Если Запрос.Выполнить().Пустой() Тогда
		
		НоваяДолжность = Справочники.Должности.СоздатьЭлемент();
		НоваяДолжность.Наименование = НСтр("ru = 'Директор'");
		Если ИспользоватьШтатноеРасписание И Не ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			НоваяДолжность.ВведенаВШтатноеРасписание = Истина;
			НоваяДолжность.ДатаВвода = МесяцНачалаЭксплуатации;
		КонецЕсли;
		НоваяДолжность.Записать();
		
		НоваяДолжность = Справочники.Должности.СоздатьЭлемент();
		НоваяДолжность.Наименование = НСтр("ru = 'Главный бухгалтер'");
		Если ИспользоватьШтатноеРасписание И Не ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			НоваяДолжность.ВведенаВШтатноеРасписание = Истина;
			НоваяДолжность.ДатаВвода = МесяцНачалаЭксплуатации;
		КонецЕсли;
		НоваяДолжность.Записать();
		
	КонецЕсли;

КонецПроцедуры  

&НаСервереБезКонтекста
Процедура СоздатьПодразделенияПоУмолчанию(ОрганизацияСсылка, ИспользоватьШтатноеРасписание,ИспользоватьИсториюИзмененияШтатногоРасписания,МесяцНачалаЭксплуатации)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Подразделения.ПометкаУдаления
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация";
	
	Если Запрос.Выполнить().Пустой() Тогда
		
		НовоеПодразделение = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
		НовоеПодразделение.Наименование = "Администрация";
		НовоеПодразделение.Владелец = ОрганизацияСсылка;
		Если ИспользоватьШтатноеРасписание И Не ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			НовоеПодразделение.Сформировано = Истина;
			НовоеПодразделение.ДатаСоздания = МесяцНачалаЭксплуатации;
		КонецЕсли;
		НовоеПодразделение.Записать();
		
		НовоеПодразделение = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
		НовоеПодразделение.Наименование = "Бухгалтерия";
		НовоеПодразделение.Владелец = ОрганизацияСсылка;
		Если ИспользоватьШтатноеРасписание И Не ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			НовоеПодразделение.Сформировано = Истина;
			НовоеПодразделение.ДатаСоздания = МесяцНачалаЭксплуатации;
		КонецЕсли;
		НовоеПодразделение.Записать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СсылкаНаДокумент(ОрганизацияСсылка, ИмяДокумента)

	Отбор = Новый Структура("Организация", ОрганизацияСсылка);
	НайденныеСтроки = СсылкиНаДокументы.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество()=0 Тогда
		НоваяСтрока = СсылкиНаДокументы.Добавить();
		НоваяСтрока.Организация = ОрганизацияСсылка;
	Иначе
		СсылкаНаДокумент = НайденныеСтроки[0][ИмяДокумента];
		Если СсылкаСуществует(СсылкаНаДокумент) Тогда
			Возврат СсылкаНаДокумент;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция СсылкаСуществует(СсылкаНаДокумент)
	
	Возврат ОбщегоНазначения.СсылкаСуществует(СсылкаНаДокумент);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоДокументВыплатыАванса(ДокументСсылка)

	СпособВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "СпособВыплаты");
	Возврат СпособВыплаты <> Справочники.СпособыВыплатыЗарплаты.Зарплата;

КонецФункции

&НаСервереБезКонтекста
Функция СпособВыплатыАванс()

	Возврат Справочники.СпособыВыплатыЗарплаты.НайтиПоРеквизиту("ХарактерВыплаты", Перечисления.ХарактерВыплатыЗарплаты.Аванс);

КонецФункции

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ИмяКолонки = "";
	Если ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.УтверждениеШтатногоРасписания") Тогда
		ИмяКолонки = "УтверждениеШтатногоРасписания";
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.НачальнаяШтатнаяРасстановка") Тогда
		ИмяКолонки = "НачальнаяШтатнаяРасстановка";
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.НачальнаяЗадолженностьПоЗарплате") Тогда
		ИмяКолонки = "НачальнаяЗадолженностьПоЗарплате";
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.НачислениеЗаПервуюПоловинуМесяца") Тогда
		ИмяКолонки = "НачислениеЗаПервуюПоловинуМесяца";
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
		
		ЭтоВыплатаАванса = ЭтоДокументВыплатыАванса(НовыйОбъект);	
		Если ЭтоВыплатаАванса Тогда
			ИмяКолонки = "ВедомостьНаВыплатуЗарплатыВКассуАванс";
		Иначе
			ИмяКолонки = "ВедомостьНаВыплатуЗарплатыВКассу";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.НачислениеЗарплаты") Тогда
		ИмяКолонки = "НачислениеЗарплаты";
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.ПериодыОплаченныеДоНачалаЭксплуатации") Тогда
		ИмяКолонки = "ПериодыОплаченныеДоНачалаЭксплуатации";	
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяКолонки) Тогда
		Отбор = Новый Структура("Организация", ОрганизацияСсылка);
		НайденныеСтроки = СсылкиНаДокументы.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТаблицы = НайденныеСтроки[0];
		Иначе
			СтрокаТаблицы = СсылкиНаДокументы.Добавить();
			СтрокаТаблицы.Организация = ОрганизацияСсылка;
		КонецЕсли;
		СтрокаТаблицы[ИмяКолонки] = НовыйОбъект;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗарплатаКадрыРасширеннаяВыплачиватьЗарплатуВПоследнийДеньМесяцаПриИзменении(Элемент)
	
	УстановитьПорядокВыплатыЗарплаты(ВыплачиватьЗарплатуВПоследнийДеньМесяца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗарплатаКадрыРасширеннаяВыплачиватьЗарплатуНеВПоследнийДеньМесяцаПриИзменении(Элемент)
	
	УстановитьПорядокВыплатыЗарплаты(ВыплачиватьЗарплатуВПоследнийДеньМесяца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядокВыплатыЗарплаты(ПорядокВыплаты)
	
	ЗарплатаКадрыНастройкиОрганизации.ВыплачиватьЗарплатуВПоследнийДеньМесяца = (ПорядокВыплаты = 1);
	УстановитьДоступностьНомераДняВыплатыЗарплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНомераДняВыплатыЗарплаты(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаВыплатыЗарплатыНеПозжеЧем",
		"Доступность",
		Не Форма.ЗарплатаКадрыНастройкиОрганизации.ВыплачиватьЗарплатуВПоследнийДеньМесяца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьИмяТекущейСтраницы(ИмяТекущейСтраницы)
	
	ХранилищеОбщихНастроек.Сохранить("НачальнаяНастройкаПрограммыЗК", "НачальнаяСтраница", ИмяТекущейСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСдельныйЗаработокПриИзменении(Элемент)
	РегистрироватьСдельнуюОплатуВБухучете = НастройкиРасчетаЗарплаты.ИспользоватьСдельныйЗаработок;
	ОбновитьДоступностьГруппыРегистрироватьСдельнуюОплатуВБухучете(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьГруппыРегистрироватьСдельнуюОплатуВБухучете(Форма)
	Форма.Элементы.РегистрироватьСдельнуюОплатуВБухучете.Доступность = Форма.НастройкиРасчетаЗарплаты.ИспользоватьСдельныйЗаработок;
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьНастроекПодборПерсонала(ЭтотОбъект)
	
	Если ОбщегоНазначенияБЗККлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Модуль = ОбщегоНазначенияБЗККлиентСервер.ОбщийМодуль("ПодборПерсоналаКлиентСервер");
		Модуль.ОбновитьДоступностьНастроекПодборПерсонала(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

