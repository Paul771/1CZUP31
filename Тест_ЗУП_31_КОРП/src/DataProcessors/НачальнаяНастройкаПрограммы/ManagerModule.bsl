#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

#Область ПроцедурыФункцииПечати

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст
//                           ошибки).
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	КоллекцияПечатныхФорм, 
	"MXL_НачальнаяНастройкаПрограммы", 
	"Начальная настройка программы", 
	ПечатнаяФормаНачальнаяНастройкаПрограммы(МассивОбъектов, ОбъектыПечати));
	
КонецПроцедуры

Функция ПечатнаяФормаНачальнаяНастройкаПрограммы(ЗаголовокСписка, ОбъектыПечати)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НачальнаяНастройкаПрограммы";
	ТабДокумент.Защита = Ложь;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.НачальнаяНастройкаПрограммы.MXL_НачальнаяНастройкаПрограммы");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьНастройкиОрганизацийЗаголовок = Макет.ПолучитьОбласть("НастройкиОрганизацийЗаголовок");
	ОбластьПустаяОрганизация = Макет.ПолучитьОбласть("ПустаяОрганизация");
	ОбластьНастройкиОрганизаций = Макет.ПолучитьОбласть("НастройкиОрганизаций");
	
	ОбластьНачисленияЗаголовок = Макет.ПолучитьОбласть("НачисленияЗаголовок");
	ОбластьШапкаНачислений = Макет.ПолучитьОбласть("ШапкаНачислений");
	ОбластьУдержанияЗаголовок = Макет.ПолучитьОбласть("УдержанияЗаголовок");
	ОбластьШапкаУдержаний = Макет.ПолучитьОбласть("ШапкаУдержаний");
	ОбластьСтрокаВидРасчета = Макет.ПолучитьОбласть("СтрокаВидРасчета");
	
	ОбластьНастройкиПрограммыЗаголовок = Макет.ПолучитьОбласть("НастройкиПрограммыЗаголовок");
	ОбластьКадровыйУчетШтатноеРасписание = Макет.ПолучитьОбласть("КадровыйУчетШтатноеРасписание");
	ОбластьВоинскийУчет = Макет.ПолучитьОбласть("ВоинскийУчет");
	ОбластьНастройкиРасчетаЗарплаты = Макет.ПолучитьОбласть("НастройкиРасчетаЗарплаты");
	
	ДанныеДляПечати = ПолучитьДанныеОНачальныхНастройках();
	
	ТабДокумент.Вывести(ОбластьЗаголовок);
	
	// Настройки организаций
	
	НастройкиОрганизаций = ДанныеДляПечати.НастройкиОрганизаций;
	Выборка = НастройкиОрганизаций.Выбрать();
	Если Выборка.Количество() > 1 Тогда
		ЗаголовокОрганизаций = "Организации";
	Иначе
		ЗаголовокОрганизаций = "Организация";
	КонецЕсли;
	ОбластьНастройкиОрганизацийЗаголовок.Параметры.ЗаголовокОрганизаций = ЗаголовокОрганизаций;
	ТабДокумент.Вывести(ОбластьНастройкиОрганизацийЗаголовок);
	
	Если Выборка.Количество() = 0 Тогда
		ТабДокумент.Вывести(ОбластьПустаяОрганизация);
	Иначе
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьНастройкиОрганизаций) Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОбластьНастройкиОрганизаций.Параметры, Выборка);
			
			Если ЗначениеЗаполнено(Выборка.ДатаПередачиФССВыплатыПособий) Тогда
				ВыплатаПособий = НСтр("ru = 'Передана в ФСС с'") + " " + Формат(Выборка.ДатаПередачиФССВыплатыПособий, "ДЛФ=D");
			Иначе
				ВыплатаПособий = НСтр("ru = 'Выполняется страхователем (организацией)'");
			КонецЕсли;
			ОбластьНастройкиОрганизаций.Параметры.ВыплатаПособий = ВыплатаПособий;
			
			ТабДокумент.Вывести(ОбластьНастройкиОрганизаций);
		КонецЦикла;
		
	КонецЕсли;
	
	// Начисления
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(ОбластьНачисленияЗаголовок);
	ВыводимыеОбласти.Добавить(ОбластьШапкаНачислений);
	ВыводимыеОбласти.Добавить(ОбластьСтрокаВидРасчета);
	Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьНачисленияЗаголовок) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьНачисленияЗаголовок);
	ТабДокумент.Вывести(ОбластьШапкаНачислений);
	
	Начисления = ДанныеДляПечати.Начисления;
	Выборка = Начисления.Выбрать();
	НомерСтроки = 1;
	Пока Выборка.Следующий() Цикл
		ОбластьСтрокаВидРасчета.Параметры.НомерСтроки = НомерСтроки;
		ОбластьСтрокаВидРасчета.Параметры.ВидРасчета = Выборка.Наименование;
		Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьСтрокаВидРасчета) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьШапкаНачислений);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьСтрокаВидРасчета);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Удержания
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(ОбластьУдержанияЗаголовок);
	ВыводимыеОбласти.Добавить(ОбластьШапкаУдержаний);
	ВыводимыеОбласти.Добавить(ОбластьСтрокаВидРасчета);
	Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьУдержанияЗаголовок);
	ТабДокумент.Вывести(ОбластьШапкаУдержаний);
	
	Удержания = ДанныеДляПечати.Удержания;
	Выборка = Удержания.Выбрать();
	НомерСтроки = 1;
	Пока Выборка.Следующий() Цикл
		ОбластьСтрокаВидРасчета.Параметры.НомерСтроки = НомерСтроки;
		ОбластьСтрокаВидРасчета.Параметры.ВидРасчета = Выборка.Наименование;
		Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьСтрокаВидРасчета) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьШапкаУдержаний);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьСтрокаВидРасчета);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// настройки программы
	НастройкиПрограммы = ДанныеДляПечати.НастройкиПрограммы;
	
	Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьНастройкиПрограммыЗаголовок) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьНастройкиПрограммыЗаголовок);
	
	// Дополнительные настройки
	НачальнаяНастройкаПрограммы.ВывестиНастройкиПрограммы(НастройкиПрограммы, ТабДокумент);
	
	// Штатное расписание и кадровый учет.
	НастройкиШтатногоРасписания = НастройкиПрограммы.НастройкиШтатногоРасписания;
	ЗаполнитьЗначенияСвойств(ОбластьКадровыйУчетШтатноеРасписание.Параметры, НастройкиШтатногоРасписания);
	
	НастройкиКадровогоУчета = НастройкиПрограммы.НастройкиКадровогоУчета;
	ЗаполнитьЗначенияСвойств(ОбластьКадровыйУчетШтатноеРасписание.Параметры, НастройкиКадровогоУчета);
	
	Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьКадровыйУчетШтатноеРасписание) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьКадровыйУчетШтатноеРасписание);
	
	// Воинский учет
	НастройкиВоинскогоУчета = НастройкиПрограммы.НастройкиВоинскогоУчета;
	ЗаполнитьЗначенияСвойств(ОбластьВоинскийУчет.Параметры, НастройкиВоинскогоУчета);
	Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьВоинскийУчет) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьВоинскийУчет);
	
	// НастройкиРасчетаЗарплаты
	
	НастройкиЗаймовСотрудникам = НастройкиПрограммы.НастройкиЗаймовСотрудникам;
	ЗаполнитьЗначенияСвойств(ОбластьНастройкиРасчетаЗарплаты.Параметры, НастройкиЗаймовСотрудникам);
	
	НастройкиРасчетаЗарплаты = НастройкиПрограммы.НастройкиРасчетаЗарплаты;
	ЗаполнитьЗначенияСвойств(ОбластьНастройкиРасчетаЗарплаты.Параметры, НастройкиРасчетаЗарплаты);
	ОбластьНастройкиРасчетаЗарплаты.Параметры.НеВыполнятьРасчетЗарплатыПоПодразделениям = Не НастройкиРасчетаЗарплаты.ВыполнятьРасчетЗарплатыПоПодразделениям;
	
	НастройкиУчетаВремени = НастройкиПрограммы.НастройкиУчетаВремени;
	ЗаполнитьЗначенияСвойств(ОбластьНастройкиРасчетаЗарплаты.Параметры, НастройкиУчетаВремени);
	
	Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьНастройкиРасчетаЗарплаты) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьНастройкиРасчетаЗарплаты);
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьДанныеОНачальныхНастройках()
	
	ДанныеОНастройках = Новый Структура("НастройкиОрганизаций,
	|Начисления,
	|Удержания,
	|НастройкиПрограммы,
	|СледующиеШаги");
	
	// Получение настроек организаций.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекстНеУказан", НСтр("ru='<Не указан>'"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА Организации.ИНН = """"
	|			ТОГДА &ТекстНеУказан
	|		ИНАЧЕ Организации.ИНН
	|	КОНЕЦ КАК ИНН,
	|	ВЫБОР
	|		КОГДА Организации.РегистрацияВНалоговомОргане.КПП = """"
	|			ТОГДА &ТекстНеУказан
	|		ИНАЧЕ Организации.РегистрацияВНалоговомОргане.КПП
	|	КОНЕЦ КАК КПП,
	|	ЕСТЬNULL(УчетСтраховыхВзносов.ИспользуетсяТрудФармацевтов, ЛОЖЬ) КАК ИспользуетсяТрудФармацевтов,
	|	ЕСТЬNULL(УчетСтраховыхВзносов.ИспользуетсяТрудЧленовЛетныхЭкипажей, ЛОЖЬ) КАК ИспользуетсяТрудЧленовЛетныхЭкипажей,
	|	ЕСТЬNULL(УчетСтраховыхВзносов.ИспользуетсяТрудЧленовЭкипажейМорскихСудов, ЛОЖЬ) КАК ИспользуетсяТрудЧленовЭкипажейМорскихСудов,
	|	ЕСТЬNULL(УчетСтраховыхВзносов.ИспользуетсяТрудШахтеров, ЛОЖЬ) КАК ИспользуетсяТрудШахтеров,
	|	ЕСТЬNULL(УчетСтраховыхВзносов.ИспользуютсяРаботыСДосрочнойПенсией, ЛОЖЬ) КАК ИспользуютсяРаботыСДосрочнойПенсией,
	|	ЕСТЬNULL(ТарифыСтраховыхВзносов.ВидТарифа, &ТекстНеУказан) КАК ВидТарифа,
	|	ЕСТЬNULL(СтавкаФССНС.Ставка, &ТекстНеУказан) КАК СтавкаФССНС,
	|	Организации.ЮридическоеФизическоеЛицо КАК ВидОрганизации,
	|	Организации.ПрименятьРайонныйКоэффициент КАК ПрименятьРайонныйКоэффициент,
	|	Организации.РайонныйКоэффициент КАК РайонныйКоэффициент,
	|	Организации.РайонныйКоэффициентРФ КАК РайонныйКоэффициентРФ,
	|	Организации.ПрименятьСевернуюНадбавку КАК ПрименятьСевернуюНадбавку,
	|	Организации.ЕстьОбособленныеПодразделения КАК ЕстьОбособленныеПодразделения,
	|	УчетПособий.ДатаПередачиФССВыплатыПособий КАК ДатаПередачиФССВыплатыПособий,
	|	ЕСТЬNULL(УчетнаяПолитика.ПлательщикЕНВД, ЛОЖЬ) КАК ПлательщикЕНВД
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаСтраховыхВзносов КАК УчетСтраховыхВзносов
	|		ПО Организации.Ссылка = УчетСтраховыхВзносов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних КАК ТарифыСтраховыхВзносов
	|		ПО Организации.ГоловнаяОрганизация = ТарифыСтраховыхВзносов.ГоловнаяОрганизация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования КАК УчетПособий
	|		ПО (Организации.Ссылка = УчетСтраховыхВзносов.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СрезПоследних КАК СтавкаФССНС
	|		ПО Организации.Ссылка = СтавкаФССНС.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(, ) КАК УчетнаяПолитика
	|		ПО Организации.Ссылка = УчетнаяПолитика.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Результат = Запрос.Выполнить();
	ДанныеОНастройках.НастройкиОрганизаций = Результат;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	Начисления.Наименование
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.РеквизитДопУпорядочивания";
	
	Результат = Запрос.Выполнить();
	ДанныеОНастройках.Начисления = Результат;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.Ссылка,
	|	Удержания.Наименование
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Удержания.РеквизитДопУпорядочивания";
	
	Результат = Запрос.Выполнить();
	ДанныеОНастройках.Удержания = Результат;
	
	// настройки программы
	
	НастройкиПрограммы = Новый Структура;
	
	// Штатное расписание
	Настройки = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиШтатногоРасписания);
	НастройкиПрограммы.Вставить("НастройкиШтатногоРасписания", СтруктураНастроек);
	
	Настройки = РегистрыСведений.НастройкиКадровогоУчета.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиКадровогоУчета);
	НастройкиПрограммы.Вставить("НастройкиКадровогоУчета", СтруктураНастроек);
	
	Настройки = РегистрыСведений.НастройкиВоинскогоУчета.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиВоинскогоУчета);
	НастройкиПрограммы.Вставить("НастройкиВоинскогоУчета", СтруктураНастроек);
	
	Настройки = РегистрыСведений.НастройкиЗаймовСотрудникам.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиЗаймовСотрудникам);
	НастройкиПрограммы.Вставить("НастройкиЗаймовСотрудникам", СтруктураНастроек);
	
	Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный);
	НастройкиПрограммы.Вставить("НастройкиРасчетаЗарплаты", СтруктураНастроек);
	
	Настройки = РегистрыСведений.НастройкиУчетаВремени.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиУчетаВремени);
	НастройкиПрограммы.Вставить("НастройкиУчетаВремени", СтруктураНастроек);
	
	НачальнаяНастройкаПрограммы.ПолучитьНастройкиПрограммы(НастройкиПрограммы);
	
	ДанныеОНастройках.НастройкиПрограммы = НастройкиПрограммы;
	
	Возврат ДанныеОНастройках;
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьФизическоеЛицо(ФизическоеЛицоОбъект)
	
	МенеджерЗаписиФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизическоеЛицоОбъект.ФИО);
	Если СтруктураФИО.Фамилия <> Неопределено Тогда
		МенеджерЗаписиФИО.Фамилия  = СтруктураФИО.Фамилия;
		Если СтруктураФИО.Имя <> Неопределено Тогда
			МенеджерЗаписиФИО.Имя = СтруктураФИО.Имя;
		КонецЕсли;
		Если СтруктураФИО.Отчество <> Неопределено Тогда
			МенеджерЗаписиФИО.Отчество = СтруктураФИО.Отчество;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФизическоеЛицоОбъект.ДатаРождения) Тогда
			МенеджерЗаписиФИО.Период = ФизическоеЛицоОбъект.ДатаРождения;
		Иначе
			МенеджерЗаписиФИО.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
		КонецЕсли;
		
	КонецЕсли;
	
	ФизическоеЛицоОбъект.Записать();
	МенеджерЗаписиФИО.ФизическоеЛицо = ФизическоеЛицоОбъект.Ссылка;
	МенеджерЗаписиФИО.Записать();
	
КонецПроцедуры

Процедура ЗарегистрироватьРегистрациюВНалоговомОргане(Организация, РегистрацияВНалоговомОргане) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СтруктурнаяЕдиница = Организация;
	МенеджерЗаписи.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
	МенеджерЗаписи.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведенийСПериодомМесяц();
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ЗаписатьНастройкиОсобенностейБюджетногоУчреждения(Параметры, АдресХранилища) Экспорт
	
	НачатьТранзакцию();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		
		СозданнаяОрганизация = НачальнаяНастройкаПрограммы.СоздатьЕдинственнуюОрганизацию();
		Если СозданнаяОрганизация <> Неопределено Тогда
			Параметры.СохраняемыеЗначения.СсылкаНаСозданнуюОрганизацию = СозданнаяОрганизация;
		КонецЕсли;
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.ЗаписатьНастройкиОсобенностейБюджетногоУчреждения(Параметры, АдресХранилища);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ПоместитьВоВременноеХранилище(Истина, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаписатьНастройки(Параметры, АдресХранилища) Экспорт
	
	НачатьТранзакцию();
	
	ПараметрыПрограммы 			= Параметры.ПараметрыПрограммы;
	ПараметрыНачальнойНастройки = Параметры.ПараметрыНачальнойНастройки;
	ПараметрыОрганизации 		= Параметры.ПараметрыОрганизации;
	ПараметрыНастроекЗК			= Параметры.ПараметрыНастроекЗК;
	
	СозданнаяОрганизация = Неопределено;
	
	Если НЕ ПараметрыПрограммы.РаботаВБюджетномУчреждении И ПараметрыПрограммы.ИспользоватьСтатьиФинансирования <> Константы.ИспользоватьСтатьиФинансированияЗарплата.Получить() Тогда
		Константы.ИспользоватьСтатьиФинансированияЗарплата.Установить(ПараметрыПрограммы.ИспользоватьСтатьиФинансирования);
	КонецЕсли;
	
	Если Не ПараметрыПрограммы.ИспользоватьНесколькоОрганизаций Тогда
		
		Организация = ПараметрыОрганизации.Организация;
		ИндивидуальныйПредприниматель = ПараметрыОрганизации.ИндивидуальныйПредприниматель;
		РегистрацияВНалоговомОргане = ПараметрыОрганизации.РегистрацияВНалоговомОргане;
		
		Если Организация <> Неопределено Тогда
			
			ОрганизацияОбъект = ОбщегоНазначения.ЗначениеИзСтрокиXML(Организация);
			ИндивидуальныйПредприниматель = ОбщегоНазначения.ЗначениеИзСтрокиXML(ИндивидуальныйПредприниматель);
			
			Если РегистрацияВНалоговомОргане = Неопределено Тогда
				ОрганизацияОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
			Иначе
				РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеИзСтрокиXML(РегистрацияВНалоговомОргане);
				Если РегистрацияВНалоговомОргане.Ссылка.Пустая() Тогда
					СсылкаНового = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку();
					РегистрацияВНалоговомОргане.УстановитьСсылкуНового(СсылкаНового);
					ОрганизацияОбъект.РегистрацияВНалоговомОргане = СсылкаНового;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ПараметрыОрганизации.ОрганизацияИндивидуальныйПредприниматель Тогда
				ОрганизацияОбъект.Записать();
			Иначе
				ИндивидуальныйПредприниматель.Записать();
				ЗаписатьФизическоеЛицо(ИндивидуальныйПредприниматель);
				ОрганизацияОбъект.ИндивидуальныйПредприниматель = ИндивидуальныйПредприниматель.Ссылка;
				ОрганизацияОбъект.ИНН = ИндивидуальныйПредприниматель.ИНН;
				ОрганизацияОбъект.Наименование = ?(ПустаяСтрока(ОрганизацияОбъект.Наименование), ИндивидуальныйПредприниматель.ФИО,ОрганизацияОбъект.Наименование);
				ОрганизацияОбъект.Записать();
				ПараметрыНачальнойНастройки.СохраняемыеЗначения.ИндивидуальныйПредприниматель  = ОбщегоНазначения.ЗначениеВСтрокуXML(ИндивидуальныйПредприниматель);
			КонецЕсли;
			ПараметрыНачальнойНастройки.СохраняемыеЗначения.Организация = ОбщегоНазначения.ЗначениеВСтрокуXML(ОрганизацияОбъект);
			
			Организация = ОрганизацияОбъект.Ссылка;
			Если РегистрацияВНалоговомОргане <>  Неопределено Тогда
				РегистрацияВНалоговомОргане.Владелец = Организация;
				Если ПустаяСтрока(РегистрацияВНалоговомОргане.Наименование) Тогда
					РегистрацияВНалоговомОргане.Наименование = "ИФНС";
				КонецЕсли;
				РегистрацияВНалоговомОргане.Записать();
				ЗарегистрироватьРегистрациюВНалоговомОргане(Организация, РегистрацияВНалоговомОргане.Ссылка);
				ПараметрыНачальнойНастройки.СохраняемыеЗначения.РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеВСтрокуXML(РегистрацияВНалоговомОргане);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыОрганизации.ТерриториальныеУсловияПФР.ТерриториальныеУсловияПФР)
				Или ЗначениеЗаполнено(ПараметрыОрганизации.ТерриториальныеУсловияПФР.Период) Тогда
				
				Настройки = РегистрыСведений.ТерриториальныеУсловияПФР.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Настройки, ПараметрыОрганизации.ТерриториальныеУсловияПФР);
				Настройки.СтруктурнаяЕдиница = Организация;
				Если Не ЗначениеЗаполнено(ПараметрыОрганизации.ТерриториальныеУсловияПФР.Период) Тогда
					Настройки.Период = Дата(2010,1,1);
				КонецЕсли;
				Настройки.Записать();
				
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Организация);
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ПараметрыОрганизации.ПрименяемыеТарифыСтраховыхВзносов);
			НаборЗаписей[0].ГоловнаяОрганизация = Организация;
			Если Не ЗначениеЗаполнено(НаборЗаписей[0].Период) Тогда
				НаборЗаписей[0].Период = Дата(2010,1,1);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НаборЗаписей[0].ДатаРегистрацииИзменений) Тогда
				НаборЗаписей[0].ДатаРегистрацииИзменений = НаборЗаписей[0].Период;
			КонецЕсли;

			НаборЗаписей.Записать();
			
			НаборЗаписей = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация);
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ПараметрыОрганизации.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев);
			НаборЗаписей[0].Организация = Организация;
			Если Не ЗначениеЗаполнено(НаборЗаписей[0].Период) Тогда
				ЗаписьПоУмолчанию = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.ЗаписьПоУмолчанию();
				НаборЗаписей[0].Период = ЗаписьПоУмолчанию.Период;
			КонецЕсли;
			НаборЗаписей.Записать();
			
			Настройки = РегистрыСведений.НастройкиУчетаСтраховыхВзносов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Настройки, ПараметрыОрганизации.НастройкиУчетаСтраховыхВзносов);
			Настройки.Организация = Организация;
			Настройки.Записать();
			
			Настройки = РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Настройки, ПараметрыОрганизации.НастройкиУчетаПособийСоциальногоСтрахования);
			Настройки.Организация = Организация;
			Настройки.Записать();
			
			НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация);
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ПараметрыОрганизации.УчетнаяПолитикаОрганизаций);
			НаборЗаписей[0].Организация = Организация;
			Если Не ЗначениеЗаполнено(НаборЗаписей[0].Период) Тогда
				НаборЗаписей[0].Период = Дата(2010,1,1);
			КонецЕсли;
			НаборЗаписей.Записать();
			
			Настройки = РегистрыСведений.НастройкиЗарплатаКадрыРасширенная.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Настройки, ПараметрыОрганизации.НастройкиЗарплатаКадрыРасширенная);
			Настройки.Организация = Организация;
			Настройки.Записать();
			
		Иначе
			
			СозданнаяОрганизация = НачальнаяНастройкаПрограммы.СоздатьЕдинственнуюОрганизацию();
			
			Если СозданнаяОрганизация <> Неопределено Тогда
				Настройки = РегистрыСведений.НастройкиЗарплатаКадрыРасширенная.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Настройки, ПараметрыОрганизации.НастройкиЗарплатаКадрыРасширенная);
				Настройки.Организация = СозданнаяОрганизация;
				Настройки.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПрограммы.ИспользоватьНачислениеЗарплаты <> Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
		Константы.ИспользоватьНачислениеЗарплаты.Установить(ПараметрыПрограммы.ИспользоватьНачислениеЗарплаты);
	КонецЕсли;
	
	Если ПараметрыПрограммы.ИспользоватьПодработки <> Константы.ИспользоватьПодработки.Получить() Тогда
		Константы.ИспользоватьПодработки.Установить(ПараметрыПрограммы.ИспользоватьПодработки);
	КонецЕсли;
	
	Если ПараметрыПрограммы.РаботаВБюджетномУчреждении Тогда
		
		Если ПараметрыПрограммы.ИспользоватьГосударственнуюСлужбу <> Константы.ИспользоватьГосударственнуюСлужбу.Получить() Тогда
			Если ПараметрыПрограммы.ИспользоватьГосударственнуюСлужбу И Константы.ИспользоватьМуниципальнуюСлужбу.Получить() Тогда
				Константы.ИспользоватьМуниципальнуюСлужбу.Установить(Ложь);
			КонецЕсли;
			Константы.ИспользоватьГосударственнуюСлужбу.Установить(ПараметрыПрограммы.ИспользоватьГосударственнуюСлужбу);
		КонецЕсли;
		
		Если ПараметрыПрограммы.ИспользоватьМуниципальнуюСлужбу <> Константы.ИспользоватьМуниципальнуюСлужбу.Получить() Тогда
			Если ПараметрыПрограммы.ИспользоватьМуниципальнуюСлужбу И Константы.ИспользоватьГосударственнуюСлужбу.Получить() Тогда
				Константы.ИспользоватьГосударственнуюСлужбу.Установить(Ложь);
			КонецЕсли;
			Константы.ИспользоватьМуниципальнуюСлужбу.Установить(ПараметрыПрограммы.ИспользоватьМуниципальнуюСлужбу);
		КонецЕсли;
		
		Если ПараметрыПрограммы.ИспользоватьМедицинскоеУчреждение <> Константы.РаботаВМедицинскомУчреждении.Получить() Тогда
			Константы.РаботаВМедицинскомУчреждении.Установить(ПараметрыПрограммы.ИспользоватьМедицинскоеУчреждение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетХозрасчетныхОрганизаций");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсонала");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Модуль.ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры);
	КонецЕсли;
	
	НачальнаяНастройкаПрограммы.ЗаполнитьПараметрыПланВидовРасчетаСохраненнымиЗначениями(ПараметрыНастроекЗК.ПараметрыПланВидовРасчета);
	
	ЗарплатаКадрыРасширенный.ЗаписатьНастройкиЗарплатаКадры(ПараметрыНастроекЗК);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.ЗаполнитьНачисленияРаспределенияНагрузки(ПараметрыНастроекЗК.ПараметрыПланВидовРасчета);
	КонецЕсли;
	
	ПараметрыПланВидовРасчета = ПараметрыНастроекЗК.ПараметрыПланВидовРасчета;
	ПараметрыНачальнойНастройки.СохраняемыеЗначения.Вставить("СсылкиНачисленийУдержаний", Новый ФиксированнаяСтруктура(ПараметрыПланВидовРасчета.СсылкиНачисленийУдержаний));
	ПараметрыНачальнойНастройки.СохраняемыеЗначения.Вставить("СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты", Новый ФиксированнаяСтруктура(ПараметрыПланВидовРасчета.СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты));
	ПараметрыНачальнойНастройки.СохраняемыеЗначения.Вставить("СсылкиПоказателиРасчетаЗарплаты", Новый ФиксированнаяСтруктура(ПараметрыПланВидовРасчета.СсылкиПоказателиРасчетаЗарплаты));
	
	Если СозданнаяОрганизация <> Неопределено Тогда
		ПараметрыНачальнойНастройки.СохраняемыеЗначения.СсылкаНаСозданнуюОрганизацию = СозданнаяОрганизация;
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("НачальнаяНастройкаПрограммыЗК", "НачальнаяСтраница", ПараметрыНачальнойНастройки.ТекущаяСтраницаИмя);
	
	СохраняемыеЗначения = Новый ХранилищеЗначения(ПараметрыНачальнойНастройки.СохраняемыеЗначения);
	Константы.НачальнаяНастройкаПрограммыОтветыПользователя.Установить(СохраняемыеЗначения);
	
	УчетРабочегоВремениРасширенный.СоздатьГрафикРаботыПятидневка();
	
	ЗафиксироватьТранзакцию();
	
	ПоместитьВоВременноеХранилище(Истина, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
