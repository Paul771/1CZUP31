#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст
//                           ошибки).
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
						КоллекцияПечатныхФорм,
						"ПФ_MXL_Т1", НСтр("ru='Приказ о приеме'"),
						ПолучитьТабличныйДокументПриказаТ1(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т1"), МассивОбъектов, ОбъектыПечати), ,
						"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т1");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т8") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
						КоллекцияПечатныхФорм,
						"ПФ_MXL_Т8", НСтр("ru='Приказ об увольнении'"),
						ПолучитьТабличныйДокументПриказаТ8(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т8"), МассивОбъектов, ОбъектыПечати), ,
						"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т8");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т5") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
						КоллекцияПечатныхФорм,
						"ПФ_MXL_Т5", НСтр("ru='Приказ о переводе'"),
						ПолучитьТабличныйДокументПриказаТ5(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т5"), МассивОбъектов, ОбъектыПечати), ,
						"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т5");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т6") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т6", НСтр("ru='Приказ о предоставлении отпуска'"),
			ТабличныйДокументПриказаТ6(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т6"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т6");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТрудовойДоговорМикропредприятий") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ТрудовойДоговорМикропредприятий", НСтр("ru='Трудовой договор (микропредприятий)'"),
			ТабличныйДокументТрудовойДоговорМикропредприятий(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_ТрудовойДоговорМикропредприятий"),
				МассивОбъектов, ОбъектыПечати, ПараметрыВывода), ,
			"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_ТрудовойДоговорМикропредприятий");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СправкаОСреднемЗаработкеДляПособияПоБезработице") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_СправкаОСреднемЗаработкеДляПособияПоБезработице", НСтр("ru='Справка о среднем заработке для определения размера пособия по безработице'"),
			ТабличныйДокументСправкаОСреднемЗаработкеДляПособияПоБезработице(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_СправкаОСреднемЗаработкеДляПособияПоБезработице"),
				МассивОбъектов, ОбъектыПечати, ПараметрыВывода), ,
			"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_СправкаОСреднемЗаработкеДляПособияПоБезработице");
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыФункцииПечатиКадровыхДанных

// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму приказа о приеме или увольнении.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//	ВидПриказа     - "ПриказОПриеме" или "ПриказОбУвольнении".
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ПолучитьТабличныйДокументПриказаТ1(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПриеме";
	МассивДанныхЗаполнения = ПолучитьДанныеДляПечатиКадровогоПриказаТ1(МассивОбъектов);	
	
	ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
КонецФункции 
	
// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму приказа о приеме или увольнении.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//	ВидПриказа     - "ПриказОПриеме" или "ПриказОбУвольнении".
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ПолучитьТабличныйДокументПриказаТ5(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПереводе";
	МассивДанныхЗаполнения = ПолучитьДанныеДляПечатиКадровогоПриказаТ5(МассивОбъектов);	
	
	ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
КонецФункции 
	
// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму приказа о приеме или увольнении.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//	ВидПриказа     - "ПриказОПриеме" или "ПриказОбУвольнении".
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ПолучитьТабличныйДокументПриказаТ8(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;

	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОбУвольнении";
	МассивДанныхЗаполнения = ПолучитьДанныеДляПечатиКадровогоПриказаТ8(МассивОбъектов);
	
	ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
КонецФункции 

Процедура ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ТабличныйДокумент, МассивДанныхЗаполнения, ОбъектыПечати)
	
	Если Макет <> Неопределено Тогда
		
		ПервыйПриказ = Истина;
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			Если Не ПервыйПриказ Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			Макет.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(Макет);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

Функция ПолучитьДанныеДляПечатиКадровогоПриказаТ1(МассивОбъектов)
	
	Выборка = КадровыйУчет.СформироватьЗапросДляТ1(МассивОбъектов).Выбрать();
	
	МассивПараметров = Новый Массив;
	
	Пока  Выборка.Следующий() Цикл
		
		Параметры = ПараметрыПриказаТ1();		
		
		КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, Выборка);
		
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник, 4, РезультатСклонения, Параметры.Пол) Тогда
			Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		ЦелаяЧасть = Цел(Выборка.ТарифнаяСтавка);
		Параметры.ОкладТарифнаяСтавкаЦелаяЧасть = ЦелаяЧасть;
		ДробнаяЧасть = Выборка.ТарифнаяСтавка - ЦелаяЧасть;
		Параметры.ОкладТарифнаяСтавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100);
		
		МассивПараметров.Добавить(Параметры);
		
	КонецЦикла;
	
	Возврат МассивПараметров;

КонецФункции	

Функция ПолучитьДанныеДляПечатиКадровогоПриказаТ5(МассивОбъектов)
	
	НастройкиПечатныхФорм  = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Выборка = КадровыйУчет.СформироватьЗапросДляТ5(МассивОбъектов).Выбрать();
	
	МассивПараметров = Новый Массив;
	
	Пока  Выборка.Следующий() Цикл
		
		Параметры = ПараметрыПриказаТ5();		
		
		КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, Выборка);
		
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник, 4, РезультатСклонения, Параметры.Пол) Тогда
			Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений
			И ЗначениеЗаполнено(Параметры.НовоеПодразделение) Тогда
			
			Параметры.НовоеПодразделение = Параметры.НовоеПодразделение.ПолноеНаименование();
			
		КонецЕсли;
		
		ЦелаяЧасть = Цел(Выборка.ТарифнаяСтавка);
		Параметры.ОкладТарифнаяСтавкаЦелаяЧасть = ЦелаяЧасть;
		ДробнаяЧасть = Выборка.ТарифнаяСтавка - ЦелаяЧасть;
		Параметры.ОкладТарифнаяСтавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100);
		
		Если ЗначениеЗаполнено(Параметры.НовыйРазрядКатегория) Тогда
			Параметры.НовыйРазрядКатегория = ", " + Параметры.НовыйРазрядКатегория;
		КонецЕсли; 
		
		МассивПараметров.Добавить(Параметры);
		
	КонецЦикла;
	
	Возврат МассивПараметров;

КонецФункции	

Функция ПолучитьДанныеДляПечатиКадровогоПриказаТ8(МассивОбъектов)
	
	Выборка = КадровыйУчет.СформироватьЗапросДляТ8(МассивОбъектов).Выбрать();
	
	МассивПараметров = Новый Массив;
	
	Пока  Выборка.Следующий() Цикл
		
		Параметры = ПараметрыПриказаТ8();		
		
		КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, Выборка);

		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник, 4, РезультатСклонения, Параметры.Пол) Тогда
			Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		ПредставлениеДатыУвольнения  = Формат(Выборка.ДатаУвольнения, "ДЛФ=DD");
		
		Параметры.ДатаУвольненияЧисло = ?(ЗначениеЗаполнено(Выборка.ДатаУвольнения),
			СокрЛП(Лев(ПредставлениеДатыУвольнения,2)),
			"      ");
		Параметры.ДатаУвольненияМесяцГод = ?(ЗначениеЗаполнено(Выборка.ДатаУвольнения),
			СокрЛП(Прав(ПредставлениеДатыУвольнения, СтрДлина(ПредставлениеДатыУвольнения)-2)),
			"                     г.");
			
		Если НЕ ПустаяСтрока(Выборка.ТекстОснования) Тогда
			Параметры.СтатьяТКРФ = Выборка.ТекстОснования + ", " + КадровыйУчет.ПредставлениеСтатьиУвольненияДляТ8(Выборка.СтатьяТКРФ);
		КонецЕсли;
		
		МассивПараметров.Добавить(Параметры);
		
	КонецЦикла;
	
	Возврат МассивПараметров;

КонецФункции	
  
Функция ПараметрыПриказаТ1()
	
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить("ДатаПриема");
	Параметры.Вставить("ДатаЗавершенияТрудовогоДоговора");
	Параметры.Вставить("УсловияПриема");
	Параметры.Вставить("ОкладТарифнаяСтавкаЦелаяЧасть");
	Параметры.Вставить("ОкладТарифнаяСтавкаДробнаяЧасть");
	Параметры.Вставить("ВалютаТарифнойСтавки", "руб.");
	Параметры.Вставить("КопейкиТарифнойСтавки", "коп.");
	Параметры.Вставить("Надбавка", 0);
	Параметры.Вставить("ДлительностьИспытательногоСрока", "");

	Возврат Параметры;
	
КонецФункции	

Функция ПараметрыПриказаТ5()
	
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить("ДатаНачала");
	Параметры.Вставить("ДатаОкончания");
	Параметры.Вставить("ВидПеревода");
	Параметры.Вставить("Подразделение");
	Параметры.Вставить("Должность");
	Параметры.Вставить("НовоеПодразделение");
	Параметры.Вставить("НоваяДолжность");
	Параметры.Вставить("НовыйРазрядКатегория");
	Параметры.Вставить("ОкладТарифнаяСтавкаЦелаяЧасть");
	Параметры.Вставить("ОкладТарифнаяСтавкаДробнаяЧасть");
	Параметры.Вставить("ВалютаТарифнойСтавки", "руб.");
	Параметры.Вставить("КопейкиТарифнойСтавки", "коп.");
	Параметры.Вставить("Надбавка", 0);
	Параметры.Вставить("ОснованиеПеревода");
	Параметры.Вставить("ПричинаПеревода");

	Возврат Параметры;
	
КонецФункции

Функция ПараметрыПриказаТ8()
	
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить("ДатаУвольненияЧисло");
	Параметры.Вставить("ДатаУвольненияМесяцГод");
	Параметры.Вставить("СтатьяТКРФ", "");
	Параметры.Вставить("ОснованиеУвольнения", "");
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область Отпуск

// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму приказа о предоставлении отпуска.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ТабличныйДокументПриказаТ6(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПредоставленииОтпуска";
	МассивДанныхЗаполнения = ДанныеДляПечатиКадровогоПриказаТ6(МассивОбъектов);
	
	Если Макет <> Неопределено Тогда
		
		ПервыйПриказ = Истина;
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
			Если Не ПервыйПриказ Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
			
			МакетШапка = Макет.ПолучитьОбласть("Шапка");
			МакетШапка.Параметры.Заполнить(ПараметрыМакета);
			ДокументРезультат.Вывести(МакетШапка);
				
			МакетРаботник = Макет.ПолучитьОбласть("Работник");
			МакетРаботник.Параметры.Заполнить(ПараметрыМакета);
		
			ДокументРезультат.Вывести(МакетРаботник);
				
			МакетПодвал = Макет.ПолучитьОбласть("Подвал");
			МакетПодвал.Параметры.Заполнить(ПараметрыМакета);
			ДокументРезультат.Вывести(МакетПодвал);
			
			// Печать приложения
			Если ПараметрыМакета.ДополнительныеОтпуска.Количество() > 1 Тогда
				
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				
				МакетШапкиПриложения = Макет.ПолучитьОбласть("ПриложениеШапка");
				МакетШапкиПриложения.Параметры.Заполнить(ПараметрыМакета);
				ДокументРезультат.Вывести(МакетШапкиПриложения);
				
				Для Каждого ПараметрыМакетаПриложения Из ПараметрыМакета.ДополнительныеОтпуска Цикл
					МакетСтрокиПриложения = Макет.ПолучитьОбласть("ПриложениеСтрокаОтпуск");
					МакетСтрокиПриложения.Параметры.Заполнить(ПараметрыМакетаПриложения);
					ДокументРезультат.Вывести(МакетСтрокиПриложения);
					
					Если ПараметрыМакетаПриложения.УказанПериодЗаКоторыйПредоставляетсяОтпуск Тогда
						МакетСтрокиПриложения = Макет.ПолучитьОбласть("ПриложениеСтрокаПериод");
						МакетСтрокиПриложения.Параметры.Заполнить(ПараметрыМакетаПриложения);
						ДокументРезультат.Вывести(МакетСтрокиПриложения);
					КонецЕсли;
					
					МакетСтрокиПриложения = Макет.ПолучитьОбласть("ПриложениеСтрокаОснование");
					МакетСтрокиПриложения.Параметры.Заполнить(ПараметрыМакетаПриложения);
					ДокументРезультат.Вывести(МакетСтрокиПриложения);
					
				КонецЦикла;
				
			КонецЕсли;
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);

		КонецЦикла;

	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеДляПечатиКадровогоПриказаТ6(МассивОбъектов)
	
	МассивПараметров = Новый Массив;
	НомерДополнительногоОтпуска = 1;
	
	Результат = КадровыйУчет.СформироватьЗапросДляТ6(МассивОбъектов);
	
	Если Результат.Пустой() Тогда
		Возврат МассивПараметров
	КонецЕсли;
	
	ВыборкаПоСсылкам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСсылкам.Следующий() Цикл
		
		Выборка = ВыборкаПоСсылкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			Параметры = СтруктураПараметровПриказаТ6();
			
			ВыборкаПоВидуОтпуска = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ДатаНачалаВсего = '00010101';
			ДатаОкончанияВсего = '00010101';
			ШапкаЗаполнена = Ложь;
			ПродолжительностьВсего = 0;
			ОрганизацияДокумента = Неопределено;
			Если ВыборкаПоВидуОтпуска.НайтиСледующий(Новый Структура("ЭтоОсновнойОтпуск", Истина)) Тогда
				
				КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоВидуОтпуска);
				
				РезультатСклонения = "";
				Если ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник, 3, РезультатСклонения, Параметры.Пол) Тогда
					Параметры.Работник = РезультатСклонения
				КонецЕсли;
				
				Параметры.ДатаДок = Формат(ВыборкаПоВидуОтпуска.ДатаДок, "ДЛФ=Д");
				ШапкаЗаполнена = Истина;
				
				ПредставлениеДатыНачалаОсновногоОтпуска  = Формат(ВыборкаПоВидуОтпуска.ДатаНачала, "ДФ='дд ММММ гггг ""г.""'");
				Параметры.ДатаНачалаЧисло = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала), СокрЛП(Лев(ПредставлениеДатыНачалаОсновногоОтпуска,2)), "      ");
				Параметры.ДатаНачалаМесяцГод = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала), СокрЛП(Прав(ПредставлениеДатыНачалаОсновногоОтпуска, СтрДлина(ПредставлениеДатыНачалаОсновногоОтпуска)-2)), "                     г.");
				
				ПредставлениеДатыОкончанияОсновногоОтпуска  = Формат(ВыборкаПоВидуОтпуска.ДатаОкончания, "ДФ='дд ММММ гггг ""г.""'; ДЛФ=DD");
				Параметры.ДатаОкончанияЧисло = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания), СокрЛП(Лев(ПредставлениеДатыОкончанияОсновногоОтпуска,2)), "      ");
				Параметры.ДатаОкончанияМесяцГод = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания),  СокрЛП(Прав(ПредставлениеДатыОкончанияОсновногоОтпуска, СтрДлина(ПредставлениеДатыОкончанияОсновногоОтпуска)-2)), "                     г.");
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.Продолжительность) Тогда
					Параметры.Продолжительность = ВыборкаПоВидуОтпуска.Продолжительность;
					ПродолжительностьВсего  = ВыборкаПоВидуОтпуска.Продолжительность;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала) Тогда
					ДатаНачалаВсего = ВыборкаПоВидуОтпуска.ДатаНачала;
				КонецЕсли;
				
				Если  ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания) Тогда
					ДатаОкончанияВсего = ВыборкаПоВидуОтпуска.ДатаОкончания;
				КонецЕсли;
			КонецЕсли;
			
			ВыборкаПоВидуОтпуска.Сбросить();
			
			ДатаНачалаДоп = '00010101';
			ДатаОкончанияДоп = '00010101';
			СтрокаВидДопОтпуска = "";
			ПродолжительностьДоп = 0;

			Пока ВыборкаПоВидуОтпуска.НайтиСледующий(Новый Структура("ЭтоОсновнойОтпуск", Ложь)) Цикл
				Если НЕ ШапкаЗаполнена  Тогда
					
					КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоВидуОтпуска);
					
					РезультатСклонения = "";
					Если ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник, 3, РезультатСклонения, Параметры.Пол) Тогда
						Параметры.Работник	= РезультатСклонения
					КонецЕсли;
					
					Параметры.Продолжительность  = 0;
					Параметры.ДатаДок = Формат(?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаДок), ВыборкаПоВидуОтпуска.ДатаДок, ТекущаяДатаСеанса()), "ДЛФ=Д");
					ШапкаЗаполнена = Истина;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДатаНачалаДоп) ИЛИ ДатаНачалаДоп > ВыборкаПоВидуОтпуска.ДатаНачала Тогда
					ДатаНачалаДоп = ВыборкаПоВидуОтпуска.ДатаНачала;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДатаОкончанияДоп) ИЛИ ДатаОкончанияДоп < ВыборкаПоВидуОтпуска.ДатаОкончания Тогда
					ДатаОкончанияДоп = ВыборкаПоВидуОтпуска.ДатаОкончания; 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ПолноеНаименованиеОтпуска) Тогда
					СтрокаВидДопОтпуска = СтрокаВидДопОтпуска + ", " + Строка(ВыборкаПоВидуОтпуска.ПолноеНаименованиеОтпуска);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.Продолжительность) Тогда
					ПродолжительностьДоп = ПродолжительностьДоп + ВыборкаПоВидуОтпуска.Продолжительность;
				КонецЕсли;
				
				// Заполнение параметров приложения к приказу.
				ПараметрыДопОтпуска = Новый Структура;
				ПараметрыДопОтпуска.Вставить("НомерОтпуска", НомерДополнительногоОтпуска);
				ПараметрыДопОтпуска.Вставить("НазваниеОтпуска", Строка(ВыборкаПоВидуОтпуска.ПолноеНаименованиеОтпуска));
				ПараметрыДопОтпуска.Вставить("Продолжительность", ВыборкаПоВидуОтпуска.Продолжительность);
				ПараметрыДопОтпуска.Вставить("Основание", ВыборкаПоВидуОтпуска.Основание);
				ПараметрыДопОтпуска.Вставить("УказанПериодЗаКоторыйПредоставляетсяОтпуск", ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск));
				
				ПредставлениеДаты  = Формат(ВыборкаПоВидуОтпуска.ДатаНачала, "ДФ='дд ММММ гггг ""г.""'");
				ПараметрыДопОтпуска.Вставить("ДатаНачалаЧисло", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала), СокрЛП(Лев(ПредставлениеДаты,2)), "      "));
				ПараметрыДопОтпуска.Вставить("ДатаНачалаМесяцГод", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала),  СокрЛП(Прав(ПредставлениеДаты, СтрДлина(ПредставлениеДаты)-2)), "                     г."));
				
				ПредставлениеДаты  = Формат(ВыборкаПоВидуОтпуска.ДатаОкончания, "ДФ='дд ММММ гггг ""г.""'");
				ПараметрыДопОтпуска.Вставить("ДатаОкончанияЧисло", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания), СокрЛП(Лев(ПредставлениеДаты,2)), "      "));
				ПараметрыДопОтпуска.Вставить("ДатаОкончанияМесяцГод", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания),  СокрЛП(Прав(ПредставлениеДаты, СтрДлина(ПредставлениеДаты)-2)), "                     г."));
				
				ПредставлениеДаты  = Формат(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, "ДФ='дд ММММ гггг ""г.""'");
				ПараметрыДопОтпуска.Вставить("ДатаНачалаПериодаЧисло", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск), СокрЛП(Лев(ПредставлениеДаты,2)), "      "));
				ПараметрыДопОтпуска.Вставить("ДатаНачалаПериодаМесяцГод", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск),  СокрЛП(Прав(ПредставлениеДаты, СтрДлина(ПредставлениеДаты)-2)), "                     г."));
				
				ПредставлениеДаты  = Формат(ВыборкаПоВидуОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск, "ДФ='дд ММММ гггг ""г.""'");
				ПараметрыДопОтпуска.Вставить("ДатаОкончанияПериодаЧисло", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск), СокрЛП(Лев(ПредставлениеДаты,2)), "      "));
				ПараметрыДопОтпуска.Вставить("ДатаОкончанияПериодаМесяцГод", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск),  СокрЛП(Прав(ПредставлениеДаты, СтрДлина(ПредставлениеДаты)-2)), "                     г."));
				
				Параметры.ДополнительныеОтпуска.Добавить(ПараметрыДопОтпуска);
				
				НомерДополнительногоОтпуска = НомерДополнительногоОтпуска + 1;
				
			КонецЦикла;
			
			ПредставлениеДатыНачалаДопОтпуска  = Формат(ДатаНачалаДоп, "ДФ='дд ММММ гггг ""г.""'");
			Параметры.ДатаСДопЧисло = ?(ЗначениеЗаполнено(ДатаНачалаДоп), СокрЛП(Лев(ПредставлениеДатыНачалаДопОтпуска,2)), "      ");
			Параметры.ДатаСДопМесяцГод = ?(ЗначениеЗаполнено(ДатаНачалаДоп),  СокрЛП(Прав(ПредставлениеДатыНачалаДопОтпуска, СтрДлина(ПредставлениеДатыНачалаДопОтпуска)-2)), "                     г.");
			
			ПредставлениеДатыОкончанияДопОтпуска  = Формат(ДатаОкончанияДоп, "ДФ='дд ММММ гггг ""г.""'");
			Параметры.ДатаПоДопЧисло = ?(ЗначениеЗаполнено(ДатаОкончанияДоп), СокрЛП(Лев(ПредставлениеДатыОкончанияДопОтпуска,2)), "      ");
			Параметры.ДатаПоДопМесяцГод = ?(ЗначениеЗаполнено(ДатаОкончанияДоп),  СокрЛП(Прав(ПредставлениеДатыОкончанияДопОтпуска, СтрДлина(ПредставлениеДатыОкончанияДопОтпуска)-2)), "                     г.");
			
			Если ЗначениеЗаполнено(ПродолжительностьДоп) Тогда
				Параметры.ПродолжительностьДоп = ПродолжительностьДоп;
				ПродолжительностьВсего = ПродолжительностьВсего + ПродолжительностьДоп;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПродолжительностьВсего) Тогда
				Параметры.ПродолжительностьВсего = ПродолжительностьВсего;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаВидДопОтпуска) Тогда
				СтрокаВидДопОтпуска = Прав(СтрокаВидДопОтпуска,СтрДлина(СтрокаВидДопОтпуска) - 2);
				Параметры.ВидДопОтпуска = СтрокаВидДопОтпуска;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаНачалаВсего) ИЛИ (ЗначениеЗаполнено(ДатаНачалаДоп) И ДатаНачалаВсего > ДатаНачалаДоп) Тогда
				ДатаНачалаВсего = ДатаНачалаДоп;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаОкончанияВсего) ИЛИ (ЗначениеЗаполнено(ДатаОкончанияДоп) И ДатаОкончанияВсего < ДатаОкончанияДоп) Тогда
				ДатаОкончанияВсего = ДатаОкончанияДоп;
			КонецЕсли;
			
			ПредставлениеДатыНачалаВсего  = Формат(ДатаНачалаВсего, "ДФ='дд ММММ гггг ""г.""'");
			Параметры.ДатаНачалаВсегоЧисло = ?(ЗначениеЗаполнено(ДатаНачалаВсего), СокрЛП(Лев(ПредставлениеДатыНачалаВсего,2)), "      ");
			Параметры.ДатаНачалаВсегоМесяцГод = ?(ЗначениеЗаполнено(ДатаНачалаВсего),  СокрЛП(Прав(ПредставлениеДатыНачалаВсего, СтрДлина(ПредставлениеДатыНачалаВсего)-2)), "                     г.");
			
			ПредставлениеДатыОкончанияВсего  = Формат(ДатаОкончанияВсего, "ДФ='дд ММММ гггг ""г.""'");
			Параметры.ДатаОкончанияВсегоЧисло = ?(ЗначениеЗаполнено(ДатаОкончанияВсего), СокрЛП(Лев(ПредставлениеДатыОкончанияВсего,2)), "      ");
			Параметры.ДатаОкончанияВсегоМесяцГод = ?(ЗначениеЗаполнено(ДатаОкончанияВсего),  СокрЛП(Прав(ПредставлениеДатыОкончанияВсего, СтрДлина(ПредставлениеДатыОкончанияВсего)-2)), "                     г.");
			
			МассивПараметров.Добавить(Параметры);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивПараметров;
	
КонецФункции 

Функция СтруктураПараметровПриказаТ6()
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить("НазваниеОрганизации");				
	Параметры.Вставить("КодПоОКПО");
    Параметры.Вставить("Работник");						
	Параметры.Вставить("НомерДок");	
	Параметры.Вставить("ДатаДок");	
	Параметры.Вставить("ТабельныйНомер");
	Параметры.Вставить("Подразделение");							
	Параметры.Вставить("Должность");
	Параметры.Вставить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");	
	Параметры.Вставить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск");
	Параметры.Вставить("Продолжительность");
	Параметры.Вставить("ДатаНачалаЧисло");
	Параметры.Вставить("ДатаНачалаМесяцГод"); 
	Параметры.Вставить("ДатаОкончанияЧисло"); 
	Параметры.Вставить("ДатаОкончанияМесяцГод");  
	Параметры.Вставить("ПродолжительностьДоп");
	Параметры.Вставить("ДатаСДопЧисло");
	Параметры.Вставить("ДатаСДопМесяцГод");
	Параметры.Вставить("ДатаПоДопЧисло");
	Параметры.Вставить("ДатаПоДопМесяцГод");
    Параметры.Вставить("ВидДопОтпуска");						
	Параметры.Вставить("ПродолжительностьВсего");
	Параметры.Вставить("ДатаНачалаВсегоЧисло");
	Параметры.Вставить("ДатаНачалаВсегоМесяцГод");
	Параметры.Вставить("ДатаОкончанияВсегоЧисло");
	Параметры.Вставить("ДатаОкончанияВсегоМесяцГод");
	
	Параметры.Вставить("Основание");
	
	Параметры.Вставить("ДолжностьРуководителя");
	Параметры.Вставить("РуководительРасшифровкаПодписи");	
	
	Параметры.Вставить("ДополнительныеОтпуска", Новый Массив);

	Возврат Параметры;
КонецФункции 

#КонецОбласти

#Область ТрудовойДоговорМикропредприятий

Функция ТабличныйДокументТрудовойДоговорМикропредприятий(Макет, МассивОбъектов, ОбъектыПечати, ПараметрыВывода, ДистанционныеРаботы = Ложь, ДоговорСНадомником = Ложь)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ТрудовойДоговорМикропредприятий";
	
	ДанныеДоговоров = КадровыйУчет.ДанныеТрудовыхДоговоров(МассивОбъектов, ДистанционныеРаботы, ДоговорСНадомником);
	Для каждого ДанныеДоговора Из ДанныеДоговоров Цикл
		
		Если МассивОбъектов.Количество() = 1
			И ЗначениеЗаполнено(ДанныеДоговора.EMail) Тогда
			
			ПараметрыВывода.ПараметрыОтправки.Получатель = ДанныеДоговора.EMail;
			ПараметрыВывода.ПараметрыОтправки.Тема = НСтр("ru='Трудовой договор'");
			
			Если ЗначениеЗаполнено(ДанныеДоговора.ТрудовойДоговорНомер) Тогда
				ПараметрыВывода.ПараметрыОтправки.Тема = ПараметрыВывода.ПараметрыОтправки.Тема + " №" + ДанныеДоговора.ТрудовойДоговорНомер;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеДоговора.ТрудовойДоговорДата) Тогда
				
				ПараметрыВывода.ПараметрыОтправки.Тема = ПараметрыВывода.ПараметрыОтправки.Тема
					+ " " + НСтр("ru='от'") + " " + ДанныеДоговора.ТрудовойДоговорДата;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		Если НомерСтрокиНачало > 1 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ТаблицаТрудовогоДоговора = Новый ТабличныйДокумент;
		
		ПараметрыНумерации = Новый Структура;
		УстановитьНомерРазделаВПараметрахНумерации(ПараметрыНумерации, 1);
		УстановитьНомерПунктаВПараметрахНумерации(ПараметрыНумерации, 1);
		
		ТрудовойДоговорВывестиРаздел("Шапка", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОбщиеПоложения", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ПраваИОбязанностиРаботника", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ПраваИОбязанностиРаботодателя", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОплатаТрудаРаботника", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_РабочееВремяИВремяОтдыхаРаботника", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОхранаТруда", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_СоциальноеСтрахованиеИИныеГарантии", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ИныеУсловияТрудовогоДоговора", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ИзменениеУсловийТрудовогоДоговора", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОтветственностьСторонТрудовогоДоговора", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ЗаключительныеПоложения", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Подвал", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		
		ДокументРезультат.Вывести(ТаблицаТрудовогоДоговора);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДоговора.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ТрудовойДоговорВывестиРаздел(ИмяОбласти, ДокументРезультат, Макет, ДанныеДоговора, ПараметрыНумерации)
	
	Если ИмяОбласти = "Раздел_ОхранаТруда"
		И (ДанныеДоговора.ТрудовойДоговорНаДистанционныеРаботы
			Или ДанныеДоговора.ТрудовойДоговорСНадомником) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбластьНачалаРаздела = Новый ТабличныйДокумент;
	НомерОбласти = 1;
	
	ОбластьРаздела = Макет.ПолучитьОбласть(ИмяОбласти);
	Для каждого ВложеннаяОбласть Из ОбластьРаздела.Области Цикл
		
		Если ОбластьРаздела.Области.Количество() > 1 И ВложеннаяОбласть.Имя = ИмяОбласти Тогда
			Продолжить;
		КонецЕсли;
		
		ВыводимаяОбласть = ОбластьРаздела.ПолучитьОбласть(ВложеннаяОбласть.Имя);
		
		Если ВложеннаяОбласть.Имя = "Пункт_14_б_Начисление"
				Или ВложеннаяОбласть.Имя = "Пункт_14_в_Начисление" Тогда
			
			Если ВложеннаяОбласть.Имя = "Пункт_14_б_Начисление" Тогда
				КоллекцияСтрок = ДанныеДоговора.КомпенсационныеВыплаты;
			ИначеЕсли ВложеннаяОбласть.Имя = "Пункт_14_в_Начисление" Тогда
				КоллекцияСтрок = ДанныеДоговора.СтимулирующиеВыплаты;
			Иначе
				КоллекцияСтрок = Новый Массив;
			КонецЕсли;
			
			Если КоллекцияСтрок.Количество() = 0 Тогда
				
				ВыводимаяОбласть.Параметры.Начисление =
					Символы.ПС
					+ Символы.ПС
					+ Символы.ПС
					+ Символы.ПС;
				
			Иначе
				
				ОбластьТаблицы = Новый ТабличныйДокумент;
				Для каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
					
					ВыводимаяОбласть.Параметры.Заполнить(СтрокаКоллекции);
					ВыводимаяОбласть.Параметры.Размер = Формат(ВыводимаяОбласть.Параметры.Размер, "ЧДЦ=2");
					ОбластьТаблицы.Вывести(ВыводимаяОбласть);
					
				КонецЦикла;
				
				ВыводимаяОбласть = ОбластьТаблицы;
				
			КонецЕсли;
			
		Иначе
			
			//Если ДанныеДоговора.ТрудовойДоговорНаДистанционныеРаботы Тогда
			//	
			//	Если ВложеннаяОбласть.Имя = "Пункт_10_б"
			//		Или ВложеннаяОбласть.Имя = "Пункт_13_з" Тогда
			//		
			//		Продолжить;
			//		
			//	КонецЕсли;
			//	
			//ИначеЕсли ВложеннаяОбласть.Имя = "Пункт_09_01" Тогда
			//	Продолжить;
			//КонецЕсли;
			//
			//Если Не ДанныеДоговора.ТрудовойДоговорСНадомником
			//	И ВложеннаяОбласть.Имя = "Пункт_09_02" Тогда
			//	
			//	Продолжить;
			//	
			//КонецЕсли;
			
			//Если ДанныеДоговора.ТрудовойДоговорНаДистанционныеРаботы
			//	Или ДанныеДоговора.ТрудовойДоговорСНадомником Тогда
			//		
			//	Если ВложеннаяОбласть.Имя = "Пункт_18"
			//		Или ВложеннаяОбласть.Имя = "Подписи_06_ИнструктажПоОхранеТруда" Тогда
			//		
			//		Продолжить;
			//		
			//	КонецЕсли;
			//	
			//КонецЕсли;
			
			ВыводимаяОбласть.Параметры.Заполнить(ПараметрыНумерации);
			ВыводимаяОбласть.Параметры.Заполнить(ДанныеДоговора);
			
		КонецЕсли;
		
		Если НомерОбласти > 2 Тогда
			ДокументРезультат.Вывести(ВыводимаяОбласть);
		Иначе
			
			ОбластьНачалаРаздела.Вывести(ВыводимаяОбласть);
			Если НомерОбласти = 2 Тогда
				
				Если Не ДокументРезультат.ПроверитьВывод(ОбластьНачалаРаздела) Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьНачалаРаздела);
				ОбластьНачалаРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НомерОбласти = НомерОбласти + 1;
		
		Если СтрДлина(ВложеннаяОбласть.Имя) = 8 И СтрНайти(ВложеннаяОбласть.Имя, "Пункт_") = 1 Тогда
			ПараметрыНумерации.НомерПункта = ПараметрыНумерации.НомерПункта + 1;
			УстановитьНомерПодпунктаВПараметрахНумерации(ПараметрыНумерации, 1);
		ИначеЕсли СтрЧислоВхождений(ВложеннаяОбласть.Имя, "_") = 2 Тогда
			УстановитьНомерПодпунктаВПараметрахНумерации(ПараметрыНумерации, ПараметрыНумерации.НомерПодпункта + 1);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбластьНачалаРаздела <> Неопределено Тогда
		
		Если Не ДокументРезультат.ПроверитьВывод(ОбластьНачалаРаздела) Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьНачалаРаздела);
		
	КонецЕсли;
	
	Если СтрНайти(ИмяОбласти, "Раздел_") = 1 Тогда
		УстановитьНомерРазделаВПараметрахНумерации(ПараметрыНумерации, ПараметрыНумерации.НомерРаздела + 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНомерРазделаВПараметрахНумерации(ПараметрыНумерации, Знач НомерРаздела)
	
	ПараметрыНумерации.Вставить("НомерРаздела", НомерРаздела);
	ПараметрыНумерации.Вставить("НомерРазделаВРимскойНотации",
		СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(НомерРаздела, Ложь));
	
КонецПроцедуры

Процедура УстановитьНомерПунктаВПараметрахНумерации(ПараметрыНумерации, Знач НомерПункта)
	
	ПараметрыНумерации.Вставить("НомерПункта", НомерПункта);
	
КонецПроцедуры

Процедура УстановитьНомерПодпунктаВПараметрахНумерации(ПараметрыНумерации, Знач НомерПодпункта)
	
	ПараметрыНумерации.Вставить("НомерПодпункта", НомерПодпункта);
	ПараметрыНумерации.Вставить("НомерПодпунктаБуквой", Сред("абвгдежзиклмнопрстуфхцчшщ", НомерПодпункта, 1));
	
КонецПроцедуры

#КонецОбласти

#Область СправкаОСреднемЗаработкеДляПособияПоБезработице

Функция ТабличныйДокументСправкаОСреднемЗаработкеДляПособияПоБезработице(Макет, МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ДанныеСправок = КадровыйУчет.ДанныеСправокОСреднемЗаработкеДляПособияПоБезработице(МассивОбъектов);
	Для Каждого ДанныеСправки Из ДанныеСправок Цикл
		
		Если МассивОбъектов.Количество() = 1
			И ЗначениеЗаполнено(ДанныеСправки.EMail) Тогда
			
			ПараметрыВывода.ПараметрыОтправки.Получатель = ДанныеСправки.EMail;
			ПараметрыВывода.ПараметрыОтправки.Тема = НСтр("ru='Справка о среднем заработке для определения размера пособия по безработице'");
			
			Если ЗначениеЗаполнено(ДанныеСправки.ДатаСправки) Тогда
				
				ПараметрыВывода.ПараметрыОтправки.Тема = ПараметрыВывода.ПараметрыОтправки.Тема
					+ " " + НСтр("ru='от'") + " " + Формат(ДанныеСправки.ДатаСправки, "ДЛФ=DD");
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(ДанныеСправки);
		ДокументРезультат.Вывести(ОбластьШапка);
		
		ПериодовНаПолномРабочемДне = ДанныеСправки.ПериодыРаботы.НайтиСтроки(Новый Структура("ПериодРаботыСПолнымРабочимДнем", Истина)).Количество();
		Если ПериодовНаПолномРабочемДне = 0 Тогда
			
			ОбластьПериодРаботыНаПолномГрафике = Макет.ПолучитьОбласть("ПериодРаботыНаПолномГрафике");
			ДокументРезультат.Вывести(ОбластьПериодРаботыНаПолномГрафике);
			
		КонецЕсли;
		
		ВывестиОбластьПериодаРаботыНаНеПолномГрафике = Истина;
		Для Каждого ПериодРаботы Из ДанныеСправки.ПериодыРаботы Цикл
			
			Если ПериодРаботы.ПериодРаботыСПолнымРабочимДнем Тогда
				ОбластьПериодРаботы = Макет.ПолучитьОбласть("ПериодРаботыНаПолномГрафике");
			Иначе
				ОбластьПериодРаботы = Макет.ПолучитьОбласть("ПериодРаботыНаНеПолномГрафике");
				ВывестиОбластьПериодаРаботыНаНеПолномГрафике = Ложь;
			КонецЕсли;
			
			ОбластьПериодРаботы.Параметры.Заполнить(ПериодРаботы);
			ДокументРезультат.Вывести(ОбластьПериодРаботы);
			
		КонецЦикла;
		
		Если ВывестиОбластьПериодаРаботыНаНеПолномГрафике Тогда
			
			ОбластьПериодРаботыНаНеПолномГрафике = Макет.ПолучитьОбласть("ПериодРаботыНаНеПолномГрафике");
			ДокументРезультат.Вывести(ОбластьПериодРаботыНаНеПолномГрафике);
			
		КонецЕсли;
		
		ОбластьТело = Макет.ПолучитьОбласть("Тело");
		ДокументРезультат.Вывести(ОбластьТело);
		
		Для Каждого ПериодНеРаботы Из ДанныеСправки.ПериодыНеРаботы Цикл
			
			ОбластьПериодНеРаботы = Макет.ПолучитьОбласть("ПериодНеРаботы");
			ОбластьПериодНеРаботы.Параметры.Заполнить(ПериодНеРаботы);
			ДокументРезультат.Вывести(ОбластьПериодНеРаботы);
			
		КонецЦикла;
		
		Если ДанныеСправки.ПериодыНеРаботы.Количество() < 7 Тогда
			
			ОбластьПериодНеРаботы = Макет.ПолучитьОбласть("ПериодНеРаботы");
			Для НомерОбласти = ДанныеСправки.ПериодыНеРаботы.Количество() + 1 По 7 Цикл
				ДокументРезультат.Вывести(ОбластьПериодНеРаботы);
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Заполнить(ДанныеСправки);
		ДокументРезультат.Вывести(ОбластьПодвал);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли