#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		Элементы.Служебные.Видимость	= Ложь;
		Элементы.Служебные.Доступность	= Ложь;
		
	КонецЕсли;
	
	РежимСинхронизацииОрганизаций =
		?(Объект.ИспользоватьОтборПоОрганизациям, "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям", "СинхронизироватьДанныеПоВсемОрганизациям");
	
	Организации.Загрузить(ВсеОрганизацииПриложения());
	
	ОтметитьВыбранныеЭлементыТаблицы("Организации", "Организация");
	
	РежимСинхронизацииПодразделений =
		?(Объект.ИспользоватьОтборПоПодразделениям, "СинхронизироватьДанныеТолькоПоВыбраннымПодразделениям", "СинхронизироватьДанныеПоВсемПодразделениям");
	
	ВсеПодразделенияПриложения = ВсеПодразделенияПриложения();
	Если ВсеПодразделенияПриложения <> Неопределено Тогда
		ПодразделенияДерево = РеквизитФормыВЗначение("Подразделения");
		Для каждого СтрокаТаблицы Из ВсеПодразделенияПриложения Цикл
			СтрокаРодителя = ПодразделенияДерево.Строки.Найти(СтрокаТаблицы.ПодразделениеРодитель, "Подразделение", Истина);
			Если СтрокаРодителя = Неопределено Тогда
				СтрокаДерева = ПодразделенияДерево.Строки.Добавить();
			Иначе
				СтрокаДерева = СтрокаРодителя.Строки.Добавить();
			КонецЕсли;
			
			СтрокаДерева.Подразделение = СтрокаТаблицы.Подразделение;
		КонецЦикла;
		ПодразделенияДерево.Строки.Сортировать("Подразделение", Истина);
		// Отметим выбранные элементы
		Для Каждого СтрокаТаблицы Из Объект.Подразделения Цикл
			НайденнаяСтрока = ПодразделенияДерево.Строки.Найти(СтрокаТаблицы.Подразделение, "Подразделение", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				НайденнаяСтрока.Использовать = Истина;
			КонецЕсли;
		КонецЦикла;
		ЗначениеВРеквизитФормы(ПодразделенияДерево, "Подразделения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РежимСинхронизацииОрганизацийПриИзмененииЗначения();
	РежимСинхронизацииПодразделенийПриИзмененииЗначения();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ИспользоватьОтборПоОрганизациям =
		(РежимСинхронизацииОрганизаций = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям");
	
	Если ТекущийОбъект.ИспользоватьОтборПоОрганизациям Тогда
		ТекущийОбъект.Организации.Загрузить(Организации.Выгрузить(Новый Структура("Использовать", Истина), "Организация"));
	Иначе
		ТекущийОбъект.Организации.Очистить();
	КонецЕсли;
	
	ТекущийОбъект.ИспользоватьОтборПоПодразделениям =
		(РежимСинхронизацииПодразделений = "СинхронизироватьДанныеТолькоПоВыбраннымПодразделениям");
	
	ТекущийОбъект.Подразделения.Очистить();
	Если ТекущийОбъект.ИспользоватьОтборПоПодразделениям Тогда
		ПодразделенияДерево = РеквизитФормыВЗначение("Подразделения");
		НайденныеСтроки = ПодразделенияДерево.Строки.НайтиСтроки(Новый Структура("Использовать", Истина), Истина);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ТекущийОбъект.Подразделения.Добавить();
			НоваяСтрока.Подразделение = НайденнаяСтрока.Подразделение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Оповестить("ЗакрытаФормаУзлаПланаОбмена");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РежимСинхронизацииОрганизацийПриИзменении(Элемент)
	
	РежимСинхронизацииОрганизацийПриИзмененииЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСинхронизацииПодразделенийПриИзменении(Элемент)
	РежимСинхронизацииПодразделенийПриИзмененииЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Подразделения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделенияИспользоватьПриИзмененииНаСервере(ТекущиеДанные.Подразделение, ТекущиеДанные.Использовать);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьВсеОрганизации(Команда)
	
	ВключитьОтключитьВсеЭлементыВТаблице(Истина, "Организации");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеОрганизации(Команда)
	
	ВключитьОтключитьВсеЭлементыВТаблице(Ложь, "Организации");
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсеПодразделения(Команда)
	ВключитьОтключитьВсеЭлементыВДеревеЗначений(Истина, Подразделения.ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеПодразделения(Команда)
	ВключитьОтключитьВсеЭлементыВДеревеЗначений(Ложь, Подразделения.ПолучитьЭлементы());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВключитьОтключитьВсеЭлементыВТаблице(Включить, ИмяТаблицы)
	
	Для Каждого ЭлементКоллекции Из ЭтаФорма[ИмяТаблицы] Цикл
		ЭлементКоллекции.Использовать = Включить;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьВсеЭлементыВДеревеЗначений(Включить, Строки)
	
	Для Каждого ЭлементКоллекции Из Строки Цикл
		ЭлементКоллекции.Использовать = Включить;
		ВключитьОтключитьВсеЭлементыВДеревеЗначений(Включить, ЭлементКоллекции.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВсеОрганизацииПриложения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК Использовать,
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ВсеПодразделенияПриложения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Возврат Модуль.СтруктураПредприятия();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОтметитьВыбранныеЭлементыТаблицы(ИмяТаблицы, ИмяРеквизита)
	
	Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
		Строки = ЭтаФорма[ИмяТаблицы].НайтиСтроки(Новый Структура(ИмяРеквизита, СтрокаТаблицы[ИмяРеквизита]));
		
		Для каждого НайденнаяСтрока Из Строки Цикл
			НайденнаяСтрока.Использовать = Истина;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСинхронизацииОрганизацийПриИзмененииЗначения()
	
	Элементы.Организации.Доступность =
		(РежимСинхронизацииОрганизаций = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям");
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСинхронизацииПодразделенийПриИзмененииЗначения()
	
	Элементы.Подразделения.Доступность =
		(РежимСинхронизацииПодразделений = "СинхронизироватьДанныеТолькоПоВыбраннымПодразделениям");
	
КонецПроцедуры

&НаСервере
Процедура ПодразделенияИспользоватьПриИзмененииНаСервере(Подразделение, Использование)
	
	МассивПодразделений = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		МассивПодразделений = Модуль.ПодчиненныеПодразделения(Подразделение);
	КонецЕсли;
	
	УстановитьИспользованиеПодразделения(Подразделения.ПолучитьЭлементы(), МассивПодразделений, Использование);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеПодразделения(ЭлементыДерева, МассивПодразделений, Использование)
	
	Для каждого СтрокаПодразделения Из ЭлементыДерева Цикл
		Если МассивПодразделений.Найти(СтрокаПодразделения.Подразделение) <> Неопределено Тогда
			СтрокаПодразделения.Использовать = Использование;
		КонецЕсли;
		УстановитьИспользованиеПодразделения(СтрокаПодразделения.ПолучитьЭлементы(), МассивПодразделений, Использование);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
