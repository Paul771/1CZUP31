
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрыПодключения") Тогда
		ПараметрыСоединения = Параметры.ПараметрыПодключения;
	КонецЕсли;
	
	ИменаРеквизитов                   = СтруктураСоответствияНастройкиОтборовРеквизитамФормы();
	ИменаРеквизитовБазыКорреспондента = СтруктураСоответствияНастройкиОтборовКорреспондентаРеквизитамФормы();
	
	Если Параметры.Свойство("ИдентификаторНастройки") Тогда
		ИдентификаторНастройки = Параметры.ИдентификаторНастройки;
	КонецЕсли;
	
	ОбменДаннымиСервер.ФормаНастройкиУзловПриСозданииНаСервере(ЭтотОбъект, Отказ);
	
	СтруктураОтбора = Новый Структура("Использовать", Истина);
	Организации.Загрузить(Организации.Выгрузить(СтруктураОтбора));
	Для Каждого Строка Из Организации Цикл
		Строка.Представление = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.УникальныйИдентификаторСсылки));
	КонецЦикла;
	Если Не ЗначениеЗаполнено(РежимВыгрузкиПриНеобходимости) Тогда
		РежимВыгрузкиПриНеобходимости = 
			Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости;
	КонецЕсли;

	УстановитьВидимостьНаСервере();
	ОбновитьНаименованиеКомандФормы();
	ПолучитьОписаниеКонтекста();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ФормаНастройкиПередЗакрытием(Отказ, ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьДанныеОбъекта(ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтраницаНастройкиПравилОтправкиДляЭтойИнформационнойБазы

&НаКлиенте
Процедура ПереключательОтправлятьНСИАвтоматическиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИПоНеобходимостиПриИзменении(Элемент)
	
	Если ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" 
		И ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
		
		ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация";
		
	КонецЕсли;

	УстановитьВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИНикогдаПриИзменении(Элемент)
	ПравилаОтправкиДокументов = "НеСинхронизировать";
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьАвтоматическиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьВручнуюПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыНеОтправлятьПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФлагИспользоватьОтборПоОрганизациямПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СтраницаНастройкиПравилОтправкиДляИнформационнойБазыКорреспондента

&НаКлиенте
Процедура ПереключательОтправлятьНСИАвтоматическиКоррПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИПоНеобходимостиКоррПриИзменении(Элемент)
	Если ПравилаОтправкиСправочниковКорр = "СинхронизироватьПоНеобходимости" 
		И ПравилаОтправкиДокументовКорр = "НеСинхронизировать" Тогда
		
		ПравилаОтправкиДокументовКорр = "АвтоматическаяСинхронизация";
		
	КонецЕсли;

	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИНикогдаКоррПриИзменении(Элемент)
	ПравилаОтправкиДокументовКорр = "НеСинхронизировать";
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьАвтоматическиКоррПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьВручнуюКоррПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыНеОтправлятьКоррПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФлагИспользоватьОтборПоОрганизациямКоррПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Не ЗаписатьИЗакрытьНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ФормаНастройкиУзловКомандаЗакрытьФорму(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбранныхОрганизаций(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если ТекущийЭлемент.Имя = "ОткрытьСписокВыбранныхОрганизаций" Тогда
		
		ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "Организации");
		ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Представление");
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
		
		ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
		
	ИначеЕсли ТекущийЭлемент.Имя = "ОткрытьСписокВыбранныхОрганизацийКорр" Тогда
		
		ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "ОрганизацииКорр");
		ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "УникальныйИдентификаторСсылки");
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            ПараметрыСоединения);
		
		ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.Организации");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите организации для отбора:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	
	ОткрытьФорму("ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Форма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаСервере
Процедура ПолучитьОписаниеКонтекста()
	
	ОписаниеКонтекста = (""
		+ СформироватьОписаниеПравилОтправки()
		+ Символы.ПС + Символы.ПС
		+ СформироватьОписаниеПравилОтправкиКорр()
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	// Обновим заголовок выбранных организаций этой информационной базы
	Если Организации.Количество() > 0 Тогда
		
		ВыбранныеОрганизации = Организации.Выгрузить().ВыгрузитьКолонку("Представление");
		НовыйЗаголовокОрганизаций = СтрСоединить(ВыбранныеОрганизации, ", ");
		
	Иначе
		
		НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхОрганизаций.Заголовок = НовыйЗаголовокОрганизаций;
	
	// Обновим заголовок выбранных организаций информационной базы корреспондента
	Если ОрганизацииКорр.Количество() > 0 Тогда
		
		ВыбранныеОрганизации = ОрганизацииКорр.Выгрузить().ВыгрузитьКолонку("Представление");
		НовыйЗаголовокОрганизаций = СтрСоединить(ВыбранныеОрганизации, ", ");
		
	Иначе
		
		НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхОрганизацийКорр.Заголовок = НовыйЗаголовокОрганизаций;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеПравилОтправки()
	
	ТекстОписания = НСтр("ru = 'Правила отправки данных из этой информационной базы:'") + Символы.ПС;
	
	Если ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
		ТекстОписания = ТекстОписания + НСтр("ru = 'Вся нормативно-справочная информация регистрируется к отправке автоматически;'");
	ИначеЕсли ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" Тогда
		ТекстОписания = ТекстОписания + НСтр("ru = 'К отправке регистрируется только используемая в документах нормативно-справочная информация;'");
	ИначеЕсли ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		ТекстОписания = ТекстОписания + НСтр("ru = 'Нормативно-справочная информация отправляться не будет;'");
	КонецЕсли;
	
	Если ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
		Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументов) Тогда
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Документы автоматически регистрируются к отправке начиная с %ДатаНачала%;'");
			ТекстОписания = СтрЗаменить(ТекстОписания, "%ДатаНачала%", Формат(ДатаНачалаВыгрузкиДокументов, "ДЛФ=D"));
		Иначе
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Все документы автоматически регистрируются к отправке;'");
		КонецЕсли;
	ИначеЕсли ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация" Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Пользователь самостоятельно отбирает и регистрирует документы к отправке;'");
	ИначеЕсли ПравилаОтправкиДокументов = "НеСинхронизировать" И Не ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Документы отправляться не будут;'");
	КонецЕсли;
	
	Если Не ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		
		ОтборПоОрганизациямСтрокой = НСтр("ru = 'Данные отправляются по всем организациям'");
		Если ИспользоватьОтборПоОрганизациям Тогда
			
			КоллекцияЗначений = Организации.Выгрузить().ВыгрузитьКолонку("Представление");
			ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
			
			ОтборПоОрганизациямСтрокой = НСтр("ru = 'Данные отправляются с отбором по организациям: %ПредставлениеКоллекции%'");
			ОтборПоОрганизациямСтрокой = СтрЗаменить(ОтборПоОрганизациямСтрокой, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
			
		КонецЕсли;
		
		ТекстОписания = ТекстОписания + Символы.ПС + ОтборПоОрганизациямСтрокой;
		
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

&НаСервере
Функция СформироватьОписаниеПравилОтправкиКорр()
	
	ТекстОписания = НСтр("ru = 'Правила отправки данных из информационной базы корреспондента:'");
	Если ПравилаОтправкиСправочниковКорр = "АвтоматическаяСинхронизация" Тогда
		ТекстОписания = ТекстОписания + НСтр("ru = 'Вся нормативно-справочная информация регистрируется к отправке автоматически;'");
	ИначеЕсли ПравилаОтправкиСправочниковКорр = "СинхронизироватьПоНеобходимости" Тогда
		ТекстОписания = ТекстОписания + НСтр("ru = 'К отправке регистрируется только используемая в документах нормативно-справочная информация;'");
	ИначеЕсли ПравилаОтправкиСправочниковКорр = "НеСинхронизировать" Тогда
		ТекстОписания = ТекстОписания + НСтр("ru = 'Нормативно-справочная информация не отправляется;'");
	КонецЕсли;

	Если ПравилаОтправкиДокументовКорр = "АвтоматическаяСинхронизация" Тогда
		Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументовКорр) Тогда
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Документы автоматически регистрируются к отправке начиная с %ДатаНачала%;'");
			ТекстОписания = СтрЗаменить(ТекстОписания, "%ДатаНачала%", Формат(ДатаНачалаВыгрузкиДокументовКорр, "ДЛФ=D"));
		Иначе
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Все документы автоматически регистрируются к отправке;'");
		КонецЕсли;
	ИначеЕсли ПравилаОтправкиДокументовКорр = "ИнтерактивнаяСинхронизация" Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Пользователь самостоятельно отбирает и регистрирует документы к отправке;'");
	ИначеЕсли ПравилаОтправкиДокументовКорр = "НеСинхронизировать" И Не ПравилаОтправкиСправочниковКорр = "НеСинхронизировать" Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Документы не отправляются;'");
	КонецЕсли;

	Если Не ПравилаОтправкиСправочниковКорр = "НеСинхронизировать" Тогда
		
		ОтборПоОрганизациямСтрокой = НСтр("ru = 'Данные отправляются по всем организациям'");
		Если ИспользоватьОтборПоОрганизациямКорр Тогда
			
			КоллекцияЗначений = ОрганизацииКорр.Выгрузить().ВыгрузитьКолонку("Представление");
			ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
			
			ОтборПоОрганизациямСтрокой = НСтр("ru = 'Данные отправляются с отбором по организациям: %ПредставлениеКоллекции%'");
			ОтборПоОрганизациямСтрокой = СтрЗаменить(ОтборПоОрганизациямСтрокой, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
			
		КонецЕсли;
		
		ТекстОписания = ТекстОписания + Символы.ПС + ОтборПоОрганизациямСтрокой;
		
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

&НаСервере
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2)
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДатаНачалаВыгрузкиДокументов",
		"Доступность",
		ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаНеСинхронизироватьДокументы",
		"Доступность",
		Не ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы.ГруппаДокументы.ПодчиненныеЭлементы,
		"ГруппаРежимОтправкиДокументов",
		"Доступность",
		Не ПравилаОтправкиСправочников = "НеСинхронизировать");
	
		
	#Область ГруппаНастройкаДополнительныхОтборов
		
	#Область ГруппаСтраницыОтборПоОрганизациям
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОтборПоОрганизациям",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") И Не ПравилаОтправкиСправочников = "НеСинхронизировать");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОткрытьСписокВыбранныхОрганизаций",
		"Доступность",
		ИспользоватьОтборПоОрганизациям);
	#КонецОбласти
	
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаСоставДополнительныхОтборов");
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаНастройкаДополнительныхОтборов");
	
	#КонецОбласти
	
	
	#Область ГруппаПрочее
	
	#Область ГруппаДатаЗапретаРедактированияДанных
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаДатаЗапретаРедактированияДанных",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьДатыЗапретаИзменения"));
	#КонецОбласти
		
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаСоставПрочихНастроек");
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаПрочее");
	
	#КонецОбласти
	
	// Правила отправки из информационной базы корреспондента
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДатаНачалаВыгрузкиДокументовКорр",
		"Доступность",
		ПравилаОтправкиДокументовКорр = "АвтоматическаяСинхронизация");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаНеСинхронизироватьДокументыКорр",
		"Доступность",
		Не ПравилаОтправкиСправочниковКорр = "СинхронизироватьПоНеобходимости");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы.ГруппаДокументы.ПодчиненныеЭлементы,
		"ГруппаРежимОтправкиДокументовКорр",
		"Доступность",
		Не ПравилаОтправкиСправочниковКорр = "НеСинхронизировать");
	
		
	#Область ГруппаНастройкаДополнительныхОтборовКорр
		
	#Область ГруппаОтборПоОрганизациямКорр
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОтборПоОрганизациямКорр",
		"Видимость",
		Не ПравилаОтправкиСправочниковКорр = "НеСинхронизировать");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОткрытьСписокВыбранныхОрганизацийКорр",
		"Доступность",
		ИспользоватьОтборПоОрганизациямКорр);
	#КонецОбласти
	
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаСоставДополнительныхОтборовКорр");
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаНастройкаДополнительныхОтборовКорр");
	
	#КонецОбласти
	
	
	#Область ГруппаПрочееКорр
	
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаСоставПрочихНастроекКорр");
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаПрочееКорр");
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивВыбранныхЗначений(ПараметрыФормы)
	
	ТабличнаяЧасть           = ЭтаФорма[ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения];
	
	ТаблицаВыбранныхЗначений = ТабличнаяЧасть.Выгрузить(,ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	МассивВыбранныхЗначений  = ТаблицаВыбранныхЗначений.ВыгрузитьКолонку(ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	
	Возврат МассивВыбранныхЗначений;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	ЭтаФорма[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
	
	СписокВыбранныхЗначений = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище);
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		СписокВыбранныхЗначений.Колонки.Идентификатор.Имя = "УникальныйИдентификаторСсылки";
		СписокВыбранныхЗначений.Колонки.Добавить("Использовать");
		СписокВыбранныхЗначений.ЗаполнитьЗначения( Истина, "Использовать");
		ЭтаФорма[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Загрузить(СписокВыбранныхЗначений);
	КонецЕсли;
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаСервере
Функция СтруктураСоответствияНастройкиОтборовРеквизитамФормы()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям",	"ИспользоватьОтборПоОрганизациям");
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",		"ДатаНачалаВыгрузкиДокументов");
	СтруктураНастроек.Вставить("ПравилаОтправкиДокументов",			"ПравилаОтправкиДокументов");
	СтруктураНастроек.Вставить("ПравилаОтправкиСправочников",		"ПравилаОтправкиСправочников");
	СтруктураНастроек.Вставить("РежимВыгрузкиСправочников",			"РежимВыгрузкиСправочников");
	СтруктураНастроек.Вставить("РежимВыгрузкиДокументов",			"РежимВыгрузкиДокументов");	
	СтруктураНастроек.Вставить("РежимВыгрузкиПриНеобходимости",		"РежимВыгрузкиПриНеобходимости");
	СтруктураНастроек.Вставить("Организации",						"Организации");	
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Функция СтруктураСоответствияНастройкиОтборовКорреспондентаРеквизитамФормы()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", "ИспользоватьОтборПоОрганизациямКорр");
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",    "ДатаНачалаВыгрузкиДокументовКорр");
	СтруктураНастроек.Вставить("ПравилаОтправкиДокументов",       "ПравилаОтправкиДокументовКорр");
	СтруктураНастроек.Вставить("ПравилаОтправкиСправочников",     "ПравилаОтправкиСправочниковКорр");
	СтруктураНастроек.Вставить("РежимВыгрузкиСправочников",       "РежимВыгрузкиСправочниковКорр");
	СтруктураНастроек.Вставить("РежимВыгрузкиДокументов",         "РежимВыгрузкиДокументовКорр");
	СтруктураНастроек.Вставить("РежимВыгрузкиПриНеобходимости",   "РежимВыгрузкиПриНеобходимости");
	СтруктураНастроек.Вставить("Организации",                     "ОрганизацииКорр");
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Функция ЗаписатьИЗакрытьНаСервере()
	
	Если Не ИспользоватьОтборПоОрганизациям И Организации.Количество() <> 0 Тогда
		Организации.Очистить();
	ИначеЕсли Организации.Количество() = 0 И ИспользоватьОтборПоОрганизациям Тогда
		ИспользоватьОтборПоОрганизациям = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьОтборПоОрганизациямКорр И ОрганизацииКорр.Количество() <> 0 Тогда
		ОрганизацииКорр.Очистить();
	ИначеЕсли ОрганизацииКорр.Количество() = 0 И ИспользоватьОтборПоОрганизациямКорр Тогда
		ИспользоватьОтборПоОрганизациямКорр = Ложь;
	КонецЕсли;
	
	Если ПравилаОтправкиДокументов <> "АвтоматическаяСинхронизация" Тогда
		ДатаНачалаВыгрузкиДокументов = Дата(1,1,1,0,0,0);
	КонецЕсли;
	
	Если ПравилаОтправкиДокументовКорр <> "АвтоматическаяСинхронизация" Тогда
		ДатаНачалаВыгрузкиДокументовКорр = Дата(1,1,1,0,0,0);
	КонецЕсли;
	
	ПолучитьОписаниеКонтекста();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьГруппыНаСервере(ЭлементыФормы, ИмяГруппы)
	
	ГруппаФормы = ЭлементыФормы.Найти(ИмяГруппы);
	
	Если ГруппаФормы = Неопределено
		Или Не ТипЗнч(ГруппаФормы) = Тип("ГруппаФормы") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Видимость = Ложь;
	
	Для Каждого ПодчиненныйЭлемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		
		Если Не ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы")	Тогда
			Продолжить; // устанавливаем видимость только по видимости дочерних групп первого уровня вложенности
		КонецЕсли;
		
		Видимость = Видимость ИЛИ ПодчиненныйЭлемент.Видимость;
			
	КонецЦикла;
	
	ГруппаФормы.Видимость = Видимость;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
