#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ИнициализироватьОтчет();

	КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
	Попытка 
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		ПараметрыОтчетов = Новый Структура("Параметры,Отбор", Новый Структура, Новый Структура);
		
		ДополнитьОтборОтчета("Организация", ПараметрыОтчетов.Отбор, НастройкиОтчета);
		ДополнитьОтборОтчета("Подразделение", ПараметрыОтчетов.Отбор, НастройкиОтчета);
		ДополнитьОтборОтчета("Сотрудник", ПараметрыОтчетов.Отбор, НастройкиОтчета);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета);
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
			НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.ЛицевыеСчетаСотрудников.ПФ_MXL_" + КлючВарианта);
		
		Для каждого СтрокаПоГодам Из ДанныеОтчета.Строки Цикл
			
			ФизическиеЛицаОрганизаций = Новый Соответствие;
			МассивСотрудников = Новый Массив;
			МассивФизическихЛиц = Новый Массив;
		
			Для каждого СтрокаОрганизации Из СтрокаПоГодам.Строки Цикл
				Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
					Для каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
						
						МассивСотрудников.Добавить(СтрокаСотрудника.Сотрудник);
						МассивФизическихЛиц.Добавить(СтрокаСотрудника.СотрудникФизическоеЛицо);
						
						Если ЗначениеЗаполнено(СтрокаСотрудника.Организация) Тогда
							
							МассивФизическихЛицОрганизации = ФизическиеЛицаОрганизаций.Получить(СтрокаСотрудника.Организация);
							Если МассивФизическихЛицОрганизации = Неопределено Тогда
								МассивФизическихЛицОрганизации = Новый Массив;
							КонецЕсли; 
							
							МассивФизическихЛицОрганизации.Добавить(СтрокаСотрудника.СотрудникФизическоеЛицо);
							ФизическиеЛицаОрганизаций.Вставить(СтрокаСотрудника.Организация, МассивФизическихЛицОрганизации);
							
						КонецЕсли; 
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			ПериодОтчета = Новый СтандартныйПериод;
			ПериодОтчета.ДатаНачала = СтрокаПоГодам.ГодНачисления;
			
			КонецПериода = КонецГода(СтрокаПоГодам.ГодНачисления);
			ПериодОтчета.ДатаОкончания = ?(СтрокаПоГодам.ПараметрыДанныхКонецПериода < КонецПериода, СтрокаПоГодам.ПараметрыДанныхКонецПериода, КонецПериода);
			
			ПараметрыОтчетов.Параметры.Вставить("Период", ПериодОтчета);
			
			Если МассивСотрудников.Количество() > 0 Тогда
				ПараметрыОтчетов.Отбор.Вставить("Сотрудник", Новый Структура("ВидСравнения,ПравоеЗначение", ВидСравненияКомпоновкиДанных.ВСписке, МассивСотрудников));
			КонецЕсли; 
		
			Если МассивФизическихЛиц.Количество() > 0 Тогда
				ПараметрыОтчетов.Отбор.Вставить("ФизическоеЛицо", Новый Структура("ВидСравнения,ПравоеЗначение", ВидСравненияКомпоновкиДанных.ВСписке, МассивФизическихЛиц));
			КонецЕсли; 
		
			ДополнительныеДанные = Новый Структура;
			
			Если КлючВарианта = "Т54" Тогда
				ДополнительныеДанные.Вставить("ДанныеНачислений", ДанныеНачислений("Т49", ПараметрыОтчетов));
			КонецЕсли;
			
			ДополнительныеДанные.Вставить("КадроваяИстория", КадроваяИстория("КадроваяИсторияСотрудников", ПараметрыОтчетов));
			ДополнительныеДанные.Вставить("ФактическиеОтпуска", ФактическиеОтпуска("ФактическиеОтпускаСотрудников", ПараметрыОтчетов));
			ДополнительныеДанные.Вставить("Удержания", ПлановыеУдержания("ПлановыеУдержанияСотрудников", ПараметрыОтчетов));
			ДополнительныеДанные.Вставить("ДанныеОВычетах", ДанныеОВычетах(ФизическиеЛицаОрганизаций, ПараметрыОтчетов));
			
			Для каждого СтрокаОрганизации Из СтрокаПоГодам.Строки Цикл
				Для каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
					Если КлючВарианта = "Т54" Тогда
						
						// Параметры документа
						ДокументРезультат.ТолькоПросмотр = Истина;
						ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФормаТ54";
						ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
						ДокументРезультат.ПолеСверху = 0;
						ДокументРезультат.ПолеСлева = 0;
						ДокументРезультат.ПолеСнизу = 0;
						ДокументРезультат.ПолеСправа = 0;
						
						ВывестиСотрудниковПодразделенияТ54(СтрокаПодразделения.Строки, ДокументРезультат, Макет, ДополнительныеДанные, КонецПериода);
						
					Иначе
						// Параметры документа
						ДокументРезультат.ТолькоПросмотр = Истина;
						ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФормаТ54а";
						ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
						ДокументРезультат.ПолеСверху = 10;
						ДокументРезультат.ПолеСлева = 0;
						ДокументРезультат.ПолеСнизу = 0;
						ДокументРезультат.ПолеСправа = 0;
						ДокументРезультат.АвтоМасштаб = Истина;
		
						ВывестиСотрудниковПодразделенияТ54а(СтрокаПодразделения.Строки, ДокументРезультат, Макет, ДополнительныеДанные, КонецПериода);
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
		ДопСвойства.Вставить("ОтчетПустой", ДанныеОтчета.Строки.Количество() = 0);
		
		СтандартнаяОбработка = Ложь;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета Т-54 внесены критичные изменения. Отчет не будет сформирован.'") + " " + КраткоеПредставлениеОшибки(Инфо);
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОтчет() Экспорт
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
	
КонецПроцедуры

// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИнициализироватьОтчет();
	ЗначениеВДанныеФормы(ЭтотОбъект, Форма.Отчет);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету Т-54.

Процедура ВывестиСотрудниковПодразделенияТ54(СтрокиСотрудников, ДокументРезультат, Макет, ДополнительныеДанные, ДатаОтчета)
	
	Для каждого СтрокаСотрудника Из СтрокиСотрудников Цикл
		
		ОкончаниеПериода = ?(СтрокаСотрудника.ПараметрыДанныхКонецПериода < КонецГода(СтрокаСотрудника.ГодНачисления), СтрокаСотрудника.ПараметрыДанныхКонецПериода, КонецГода(СтрокаСотрудника.ГодНачисления));
		Если СтрокаСотрудника.СотрудникДатаПриема > ОкончаниеПериода Тогда
			Продолжить;
		КонецЕсли; 
	
		ВывестиШапкуТ54(СтрокаСотрудника, ДокументРезультат, Макет);
		ВывестиСтрокиОбщихДанныхТ54(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные);
		
		МакетПустойИнтервал = Макет.ПолучитьОбласть("ПустойИнтервал");
		ДокументРезультат.Вывести(МакетПустойИнтервал);
		
		ВывестиШапкаПоПериодамТ54(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные);
		ВывестиСтрокиПоПериодамТ54(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные);
		
		МакетПодвал = Макет.ПолучитьОбласть("Подвал");
		МакетПодвал.Параметры.Заполнить(СтрокаСотрудника);
		ЗаполнитьПодписантов(МакетПодвал, СтрокаСотрудника.Организация, ДатаОтчета);
		
		ДокументРезультат.Вывести(МакетПодвал);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиШапкуТ54(СтрокаСотрудника, ДокументРезультат, Макет)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	МакетШапки = Макет.ПолучитьОбласть("Шапка");
	МакетШапки.Параметры.Заполнить(СтрокаСотрудника);
	МакетШапки.Параметры.НачалоПериода = СтрокаСотрудника.ГодНачисления;
	МакетШапки.Параметры.ОкончаниеПериода = ?(СтрокаСотрудника.ПараметрыДанныхКонецПериода < КонецГода(СтрокаСотрудника.ГодНачисления), СтрокаСотрудника.ПараметрыДанныхКонецПериода, КонецГода(СтрокаСотрудника.ГодНачисления));
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(СтрокаСотрудника.Подразделение) Тогда
		МакетШапки.Параметры.ПодразделениеНаименование = СтрокаСотрудника.Подразделение.ПолноеНаименование();
	КонецЕсли;
	
	ДокументРезультат.Вывести(МакетШапки);
	
	МакетШапкаОбщая = Макет.ПолучитьОбласть("ШапкаОбщая");
	
	ДокументРезультат.Вывести(МакетШапкаОбщая);
	
КонецПроцедуры

Процедура ВывестиСтрокиОбщихДанныхТ54(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ВыведеноСтрок = 0;
	
	ДанныеКадровойИстории = ДополнительныеДанные.КадроваяИстория;
	КоллекцияКадровойИстории = ДанныеКадровойИстории.ДанныеОтчета.Получить(СтрокаСотрудника.Сотрудник);
	Если КоллекцияКадровойИстории = Неопределено Тогда
		КоллекцияКадровойИстории = Новый Массив;
	КонецЕсли;
	
	ФактическиеОтпуска = ДополнительныеДанные.ФактическиеОтпуска;
	ФактическиеОтпускаСотрудника = ФактическиеОтпуска.ДанныеОтчета.Строки.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
	Если ФактическиеОтпускаСотрудника = Неопределено Тогда
		КоллекцияФактическихОтпусков = Новый Массив;
	Иначе
		КоллекцияФактическихОтпусков = ФактическиеОтпускаСотрудника.Строки;
	КонецЕсли;
	
	Удержания = ДополнительныеДанные.Удержания;
	УдержанияСотрудника = Удержания.ДанныеОтчета.Строки.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
	Если УдержанияСотрудника = Неопределено Тогда
		КоллекцияУдержанийСотрудника = Новый Массив;
	Иначе
		КоллекцияУдержанийСотрудника = УдержанияСотрудника.Строки;
	КонецЕсли;
	
	Вычеты = ДополнительныеДанные.ДанныеОВычетах;
	ВычетыСотрудникаОрганизации = Вычеты.Получить(СтрокаСотрудника.СотрудникФизическоеЛицо);
	Если ВычетыСотрудникаОрганизации <> Неопределено Тогда
		ВычетыСотрудника = ВычетыСотрудникаОрганизации.Получить(СтрокаСотрудника.Организация);
	Иначе
		ВычетыСотрудника = Неопределено;
	КонецЕсли;
	
	Если ВычетыСотрудника = Неопределено Тогда
		КоллекцияВычетыСотрудника = Новый Массив;
	Иначе
		КоллекцияВычетыСотрудника = ВычетыСотрудника;
	КонецЕсли;
	
	МаксимальноеКоличествоСтрок = Макс(
		КоллекцияКадровойИстории.Количество(),
		КоллекцияФактическихОтпусков.Количество(),
		КоллекцияУдержанийСотрудника.Количество(),
		?(КоллекцияВычетыСотрудника.Количество() = 0, 0, 1));
	
	Если МаксимальноеКоличествоСтрок > 0 Тогда
		
		Для НомерСтроки = 0 По МаксимальноеКоличествоСтрок - 1 Цикл
			
			МакетСтрокаОбщая = Макет.ПолучитьОбласть("СтрокаОбщая");
			
			Если НомерСтроки <= КоллекцияКадровойИстории.Количество() - 1 Тогда
				
				СтрокаДанных = КоллекцияКадровойИстории[НомерСтроки]; 
				МакетСтрокаОбщая.Параметры.Заполнить(СтрокаДанных);
				
			КонецЕсли;
			
			Если НомерСтроки <= КоллекцияФактическихОтпусков.Количество() - 1 Тогда
				
				СтрокаДанных = КоллекцияФактическихОтпусков[НомерСтроки]; 
				МакетСтрокаОбщая.Параметры.Заполнить(СтрокаДанных);
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					МакетСтрокаОбщая, СтрокаДанных, ФактическиеОтпуска.СоответствиеПользовательскихПолей);
				
			КонецЕсли;
			
			Если НомерСтроки <= КоллекцияУдержанийСотрудника.Количество() - 1 Тогда
				
				СтрокаДанных = КоллекцияУдержанийСотрудника[НомерСтроки]; 
				МакетСтрокаОбщая.Параметры.Заполнить(СтрокаДанных);
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					МакетСтрокаОбщая, СтрокаДанных, Удержания.СоответствиеПользовательскихПолей);
				
				МакетСтрокаОбщая.Параметры.ДокументУдержания = ПредставлениеДокументаУдержания(СтрокаДанных, Удержания.СоответствиеПользовательскихПолей)
				
			КонецЕсли;
				
			Если НомерСтроки <= КоллекцияВычетыСотрудника.Количество() - 1 Тогда
				
				ОписаниеВычета = СтрСоединить(КоллекцияВычетыСотрудника, Символы.ПС); 
				МакетСтрокаОбщая.Параметры.ОписаниеВычета = ОписаниеВычета;
				
				КоллекцияВычетыСотрудника.Очистить();
				
			КонецЕсли;
			
			Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
				
				МакетСтрокаОбщая.Параметры.КадровыйПриказНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					МакетСтрокаОбщая.Параметры.КадровыйПриказНомер, Истина, Истина);
				
			КонецЕсли;
			
			Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(МакетСтрокаОбщая.Параметры.Подразделение) Тогда
				МакетСтрокаОбщая.Параметры.Подразделение = МакетСтрокаОбщая.Параметры.Подразделение.ПолноеНаименование();
			КонецЕсли;
			
			ДокументРезультат.Вывести(МакетСтрокаОбщая);
			
		КонецЦикла;
		
		ВыведеноСтрок = ВыведеноСтрок + МаксимальноеКоличествоСтрок - 1;
		
	КонецЕсли;
	
	Для НомерПустойСтроки = ВыведеноСтрок + 1 По 3 Цикл
		МакетСтрокаОбщаяПустая = Макет.ПолучитьОбласть("СтрокаОбщаяПустая");
		ДокументРезультат.Вывести(МакетСтрокаОбщаяПустая);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиШапкаПоПериодамТ54(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные)
	
	МакетШапки = Макет.ПолучитьОбласть("ШапкаПоПериодам");
	МакетШапки.Параметры.Заполнить(СтрокаСотрудника);
	
	ЕстьБольничный = Ложь;
	Для каждого СтрокаТаблицы Из ДополнительныеДанные.ДанныеНачислений.ПорядокДопНачислений Цикл
		
		Если СтрокаТаблицы.Имя = "Больничный" Тогда
			ЕстьБольничный = Истина;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.НомерКолонки >= 6 Тогда
			Продолжить;
		КонецЕсли;
		
		МакетШапки.Параметры["Колонка" + (СтрокаТаблицы.НомерКолонки - ?(ЕстьБольничный, 1, 0))] = СтрокаТаблицы.Заголовок;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из  ДополнительныеДанные.ДанныеНачислений.ПорядокДопУдержаний Цикл
		МакетШапки.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
	КонецЦикла;
	
	ДокументРезультат.Вывести(МакетШапки);
	
КонецПроцедуры

Процедура ВывестиСтрокиПоПериодамТ54(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные)
	
	ВыведеноСтрок = 0;
	
	Для каждого СтрокаПериода Из СтрокаСотрудника.Строки Цикл
		
		МакетСтрокаПоПериодам = Макет.ПолучитьОбласть("СтрокаПоПериодам");
		МакетСтрокаПоПериодам.Параметры.Заполнить(СтрокаПериода);
		
		ДанныеНачислений = ДополнительныеДанные.ДанныеНачислений;
		Если ДанныеНачислений <> Неопределено Тогда
			
			ТаблицаБольничных = ДополнительныеДанные.ДанныеНачислений.ТаблицаБольничных;
			
			СтрокиНачислений = ДанныеНачислений.ДанныеОтчета.Строки.НайтиСтроки(Новый Структура("МесяцНачисления,Сотрудник", СтрокаПериода.МесяцНачисления, СтрокаПериода.Сотрудник), Истина);
			Если СтрокиНачислений.Количество() > 0 Тогда
				
				МакетСтрокаПоПериодам.Параметры.Заполнить(СтрокиНачислений[0]);
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					МакетСтрокаПоПериодам, СтрокиНачислений[0], ДанныеНачислений.СоответствиеПользовательскихПолей);
				
				ТаблицаБольничныхСотрудника = ТаблицаБольничных.Скопировать(Новый Структура("Период,Сотрудник", СтрокиНачислений[0].МесяцНачисления, СтрокиНачислений[0].Сотрудник));
				
				СуммаБольничных = ТаблицаБольничныхСотрудника.Итог("Сумма");
				КоличествоКолонок = ДанныеНачислений.ПорядокДопНачислений.Количество();
				
				ЕстьБольничный = Ложь;
				Для каждого СтрокаТаблицы Из ДанныеНачислений.ПорядокДопНачислений Цикл
					
					Если СтрокаТаблицы.Имя = "Больничный" Тогда
						ЕстьБольничный = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				ПропускатьБольничный = Ложь;
				Для каждого СтрокаТаблицы Из ДанныеНачислений.ПорядокДопНачислений Цикл
					
					СуммаЯчейки = СтрокиНачислений[0][ДанныеНачислений.СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
					Если СтрокаТаблицы.Имя = "Больничный" Тогда
						ПропускатьБольничный = Истина;
						Продолжить;
					КонецЕсли; 
					
					Если СтрокаТаблицы.Имя = "ПрочиеНачисления" И Не ЕстьБольничный Тогда
						СуммаЯчейки = СуммаЯчейки - СуммаБольничных;
					КонецЕсли;
					
					Если ПропускатьБольничный Тогда
						МакетСтрокаПоПериодам.Параметры["Колонка" + (СтрокаТаблицы.НомерКолонки - 1)] = СуммаЯчейки;
					Иначе
						МакетСтрокаПоПериодам.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
					КонецЕсли;
					
				КонецЦикла;
				
				НомерБольничного = 1;
				Для Каждого СтрокаБольничныхСотрудника Из ТаблицаБольничныхСотрудника Цикл
					
					Если НомерБольничного > 3 Тогда
						
						МакетСтрокаПоПериодам.Параметры["БЛМесяц3"] = МакетСтрокаПоПериодам.Параметры["БЛМесяц3"] + "; " + Формат(СтрокаБольничныхСотрудника.ПериодДействия, "ДФ=MM.yy");
						МакетСтрокаПоПериодам.Параметры["БЛДни3"] = Строка(МакетСтрокаПоПериодам.Параметры["БЛДни3"]) + "; " + СтрокаБольничныхСотрудника.ОплаченоДней;
						МакетСтрокаПоПериодам.Параметры["БЛ3"] = Строка(МакетСтрокаПоПериодам.Параметры["БЛ3"])  + "; " + СтрокаБольничныхСотрудника.Сумма;
						
					Иначе
						
						МакетСтрокаПоПериодам.Параметры["БЛМесяц" + НомерБольничного] = Формат(СтрокаБольничныхСотрудника.ПериодДействия, "ДФ=MM.yy");
						МакетСтрокаПоПериодам.Параметры["БЛДни" + НомерБольничного] = СтрокаБольничныхСотрудника.ОплаченоДней;
						МакетСтрокаПоПериодам.Параметры["БЛ" + НомерБольничного] = СтрокаБольничныхСотрудника.Сумма;
						
					КонецЕсли;
					
					НомерБольничного = НомерБольничного + 1;
					
				КонецЦикла;
				
				Для каждого СтрокаТаблицы Из ДанныеНачислений.ПорядокДопУдержаний Цикл
					
					СуммаЯчейки = СтрокиНачислений[0][ДанныеНачислений.СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
					МакетСтрокаПоПериодам.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументРезультат.Вывести(МакетСтрокаПоПериодам);
		
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
	КонецЦикла;
	
	Для НомерПустойСтроки = ВыведеноСтрок + 1 По 3 Цикл
		МакетСтрокаПоПериодамПустая = Макет.ПолучитьОбласть("СтрокаПоПериодамПустая");
		ДокументРезультат.Вывести(МакетСтрокаПоПериодамПустая);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету Т-54.

Процедура ВывестиСотрудниковПодразделенияТ54а(СтрокиСотрудников, ДокументРезультат, Макет, ДополнительныеДанные, ДатаОтчета)
	
	Для каждого СтрокаСотрудника Из СтрокиСотрудников Цикл
	
		ОкончаниеПериода = ?(СтрокаСотрудника.ПараметрыДанныхКонецПериода < КонецГода(СтрокаСотрудника.ГодНачисления), СтрокаСотрудника.ПараметрыДанныхКонецПериода, КонецГода(СтрокаСотрудника.ГодНачисления));
		Если СтрокаСотрудника.СотрудникДатаПриема > ОкончаниеПериода Тогда
			Продолжить;
		КонецЕсли;
	
		ВывестиШапкуТ54а(СтрокаСотрудника, ДокументРезультат, Макет);
		ВывестиСтрокиКадровыеТ54а(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные);
		
		МакетШапкаУдержания = Макет.ПолучитьОбласть("ШапкаУдержания");
		ДокументРезультат.Вывести(МакетШапкаУдержания);
		
		ВывестиСтрокиУдержанийТ54а(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные);
		
		МакетПодвал = Макет.ПолучитьОбласть("Подвал");
		МакетПодвал.Параметры.Заполнить(СтрокаСотрудника);
		ЗаполнитьПодписантов(МакетПодвал, СтрокаСотрудника.Организация, ДатаОтчета);
		
		ДокументРезультат.Вывести(МакетПодвал);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиШапкуТ54а(СтрокаСотрудника, ДокументРезультат, Макет)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	МакетШапки = Макет.ПолучитьОбласть("Шапка");
	МакетШапки.Параметры.Заполнить(СтрокаСотрудника);
	МакетШапки.Параметры.НачалоПериода = СтрокаСотрудника.ГодНачисления;
	МакетШапки.Параметры.ОкончаниеПериода = ?(СтрокаСотрудника.ПараметрыДанныхКонецПериода < КонецГода(СтрокаСотрудника.ГодНачисления), СтрокаСотрудника.ПараметрыДанныхКонецПериода, КонецГода(СтрокаСотрудника.ГодНачисления));
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(СтрокаСотрудника.Подразделение) Тогда
		МакетШапки.Параметры.ПодразделениеНаименование = СтрокаСотрудника.Подразделение.ПолноеНаименование();
	КонецЕсли;
	
	ДокументРезультат.Вывести(МакетШапки);
	
КонецПроцедуры

Процедура ВывестиСтрокиКадровыеТ54а(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ВыведеноСтрок = 0;
	
	ДанныеКадровойИстории = ДополнительныеДанные.КадроваяИстория;
	КоллекцияКадровойИстории = ДанныеКадровойИстории.ДанныеОтчета.Получить(СтрокаСотрудника.Сотрудник);
	Если КоллекцияКадровойИстории = Неопределено Тогда
		КоллекцияКадровойИстории = Новый Массив;
	КонецЕсли;
	
	ФактическиеОтпуска = ДополнительныеДанные.ФактическиеОтпуска;
	ФактическиеОтпускаСотрудника = ФактическиеОтпуска.ДанныеОтчета.Строки.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
	Если ФактическиеОтпускаСотрудника = Неопределено Тогда
		КоллекцияФактическихОтпусков = Новый Массив;
	Иначе
		КоллекцияФактическихОтпусков = ФактическиеОтпускаСотрудника.Строки;
	КонецЕсли;
	
	Вычеты = ДополнительныеДанные.ДанныеОВычетах;
	ВычетыСотрудникаОрганизации = Вычеты.Получить(СтрокаСотрудника.СотрудникФизическоеЛицо);
	Если ВычетыСотрудникаОрганизации <> Неопределено Тогда
		ВычетыСотрудника = ВычетыСотрудникаОрганизации.Получить(СтрокаСотрудника.Организация);
	Иначе
		ВычетыСотрудника = Неопределено;
	КонецЕсли;
	
	Если ВычетыСотрудника = Неопределено Тогда
		КоллекцияВычетыСотрудника = Новый Массив;
	Иначе
		КоллекцияВычетыСотрудника = ВычетыСотрудника;
	КонецЕсли;
	
	МаксимальноеКоличествоСтрок = Макс(
		КоллекцияКадровойИстории.Количество(),
		КоллекцияФактическихОтпусков.Количество(),
		?(КоллекцияВычетыСотрудника.Количество() = 0, 0, 1));
	
	Если МаксимальноеКоличествоСтрок > 0 Тогда
		
		Для НомерСтроки = 0 По МаксимальноеКоличествоСтрок - 1 Цикл
			
			МакетСтроки = Макет.ПолучитьОбласть("СтрокаКадровая");
			
			Если НомерСтроки <= КоллекцияКадровойИстории.Количество() - 1 Тогда
				
				СтрокаДанных = КоллекцияКадровойИстории[НомерСтроки]; 
				МакетСтроки.Параметры.Заполнить(СтрокаДанных);
				
				Если ЗначениеЗаполнено(СтрокаДанных.ГрафикРаботы) Тогда
					
					ТекстовоеОписание = Справочники.ГрафикиРаботыСотрудников.ТекстовоеОписаниеГрафиковРаботы(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаДанных.ГрафикРаботы));
					МакетСтроки.Параметры.УсловияТруда = ТекстовоеОписание.Получить(СтрокаДанных.ГрафикРаботы);
					
				Иначе
					МакетСтроки.Параметры.УсловияТруда = "";
				КонецЕсли;
				
			КонецЕсли;
			
			Если НомерСтроки <= КоллекцияФактическихОтпусков.Количество() - 1 Тогда
				
				СтрокаДанных = КоллекцияФактическихОтпусков[НомерСтроки]; 
				МакетСтроки.Параметры.Заполнить(СтрокаДанных);
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					МакетСтроки, СтрокаДанных, ФактическиеОтпуска.СоответствиеПользовательскихПолей);
				
			КонецЕсли;
			
			Если НомерСтроки <= КоллекцияВычетыСотрудника.Количество() - 1 Тогда
				
				ОписаниеВычета = СтрСоединить(КоллекцияВычетыСотрудника, Символы.ПС);
				МакетСтроки.Параметры.ОписаниеВычета = ОписаниеВычета;
				
				КоллекцияВычетыСотрудника.Очистить();
				
			КонецЕсли;
			
			Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
				
				МакетСтроки.Параметры.КадровыйПриказНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					МакетСтроки.Параметры.КадровыйПриказНомер, Истина, Истина);
				
			КонецЕсли;
			
			Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(МакетСтроки.Параметры.Подразделение) Тогда
				МакетСтроки.Параметры.Подразделение = МакетСтроки.Параметры.Подразделение.ПолноеНаименование();
			КонецЕсли;
			
			ДокументРезультат.Вывести(МакетСтроки);
			
		КонецЦикла;
		
		ВыведеноСтрок = ВыведеноСтрок + МаксимальноеКоличествоСтрок - 1;
		
	КонецЕсли; 
		
	Для НомерПустойСтроки = ВыведеноСтрок + 1 По 3 Цикл
		МакетСтрокаПоПериодамПустая = Макет.ПолучитьОбласть("СтрокаКадровая");
		ДокументРезультат.Вывести(МакетСтрокаПоПериодамПустая);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСтрокиУдержанийТ54а(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные);
	
	ВыведеноСтрок = 0;
	
	Удержания = ДополнительныеДанные.Удержания;
	УдержанияСотрудника = Удержания.ДанныеОтчета.Строки.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
	Если УдержанияСотрудника = Неопределено Тогда
		КоллекцияУдержанийСотрудника = Новый Массив;
	Иначе
		КоллекцияУдержанийСотрудника = УдержанияСотрудника.Строки;
	КонецЕсли;
	
	МаксимальноеКоличествоСтрок = КоллекцияУдержанийСотрудника.Количество();
		
	Если МаксимальноеКоличествоСтрок > 0 Тогда
		
		Для НомерСтроки = 0 По МаксимальноеКоличествоСтрок - 1 Цикл
			
			Если НомерСтроки / 2 = Цел(НомерСтроки / 2) Тогда
				МакетСтроки = Макет.ПолучитьОбласть("СтрокаУдержания|Левая");
			Иначе
				МакетСтроки = Макет.ПолучитьОбласть("СтрокаУдержания|Правая");
			КонецЕсли; 
			
			Если НомерСтроки <= КоллекцияУдержанийСотрудника.Количество() - 1 Тогда
				
				СтрокаДанных = КоллекцияУдержанийСотрудника[НомерСтроки]; 
				МакетСтроки.Параметры.Заполнить(СтрокаДанных);
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					МакетСтроки, СтрокаДанных, Удержания.СоответствиеПользовательскихПолей);
				
				МакетСтроки.Параметры.ДокументУдержания = ПредставлениеДокументаУдержания(СтрокаДанных, Удержания.СоответствиеПользовательскихПолей)
					
			КонецЕсли; 
				
			Если НомерСтроки / 2 = Цел(НомерСтроки / 2) Тогда
				ДокументРезультат.Вывести(МакетСтроки);
				ВыведеноСтрок = ВыведеноСтрок + 1;
			Иначе
				ДокументРезультат.Присоединить(МакетСтроки);
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если МаксимальноеКоличествоСтрок / 2 <> Цел(МаксимальноеКоличествоСтрок / 2) Тогда
		МакетСтроки = Макет.ПолучитьОбласть("СтрокаУдержания|Правая");
		ДокументРезультат.Присоединить(МакетСтроки);
	КонецЕсли; 
	
	Для НомерПустойСтроки = ВыведеноСтрок + 1 По 3 Цикл
		МакетСтрокаПоПериодамПустая = Макет.ПолучитьОбласть("СтрокаУдержания");
		ДокументРезультат.Вывести(МакетСтрокаПоПериодамПустая);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции.

Процедура ДополнитьОтборОтчета(ИмяПоляКомпоновки, ПараметрыОтчетов, Настройки)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновки);
	
	Для каждого Элемент Из Настройки.Отбор.Элементы Цикл
		
		Если Элемент.ЛевоеЗначение = ПолеКомпоновки Тогда
			
			Если Элемент.Использование Тогда
				
				ОписаниеОтбора = Новый Структура("ВидСравнения,ПравоеЗначение");
				ЗаполнитьЗначенияСвойств(ОписаниеОтбора, Элемент);
				ПараметрыОтчетов.Вставить(ИмяПоляКомпоновки, ОписаниеОтбора);
				
			КонецЕсли; 
			
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеНачислений(КлючВарианта, ПараметрыОтчетов)
	
	СтруктураВозврата = Новый Структура;
	
	ОтчетАнализНачисленийИУдержаний = Отчеты.АнализНачисленийИУдержаний.Создать();
	ОтчетАнализНачисленийИУдержаний.ИнициализироватьОтчет();
	
	НастройкиОтчета = ОтчетАнализНачисленийИУдержаний.СхемаКомпоновкиДанных.ВариантыНастроек.Т49.Настройки;
	
	ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОтборОтчетАнализНачисленийИУдержаний = ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки.Отбор;
	ОтборОтчетАнализНачисленийИУдержаний.Элементы.Очистить();
	
	ПараметрыОтчета = ПараметрыОтчетов.Параметры;
	ПараметрПериод = Неопределено;
	ПараметрыОтчета.Свойство("Период", ПараметрПериод);
	Если ЗначениеЗаполнено(ПараметрПериод) Тогда
		ЗначениеПараметраПериод = ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		ЗначениеПараметраПериод.Значение = ПараметрПериод;
		ЗначениеПараметраПериод.Значение.ДатаНачала = НачалоГода(ЗначениеПараметраПериод.Значение.ДатаНачала);
	КонецЕсли;
	
	ПараметрыОтборов = ПараметрыОтчетов.Отбор;
	Для каждого ОписаниеОтбора Из ПараметрыОтборов Цикл
		ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
			ОтборОтчетАнализНачисленийИУдержаний, ОписаниеОтбора.Ключ, ОписаниеОтбора.Значение.ВидСравнения, ОписаниеОтбора.Значение.ПравоеЗначение);
	КонецЦикла;
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета("Т49", ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки);
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49();
	УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисления, ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки, 5);
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49();
	УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеУдержания, ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки, 7, "Удержания");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетАнализНачисленийИУдержаний.СхемаКомпоновкиДанных,
		ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки);
	СтруктураВозврата.Вставить("СоответствиеПользовательскихПолей", СоответствиеПользовательскихПолей);
	
	НаборыВнешнихДанных = ЗарплатаКадрыОтчеты.НаборыВнешнихДанныхАнализНачисленийИУдержаний();
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыВнешнихДанных, , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДанныеОтчета = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ПорядокДопНачислений = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачислений(ДополнительныеНачисления, ДанныеОтчета, СтруктураВозврата.СоответствиеПользовательскихПолей, 1);
	СтруктураВозврата.Вставить("ПорядокДопНачислений", ПорядокДопНачислений);
	
	ПорядокДопУдержаний = УчетНачисленнойЗарплаты.ПорядокДополнительныхУдержаний(ДополнительныеУдержания, ДанныеОтчета, СоответствиеПользовательскихПолей, 38);
	СтруктураВозврата.Вставить("ПорядокДопУдержаний", ПорядокДопУдержаний);
	
	СтруктураВозврата.Вставить("ДанныеОтчета", ДанныеОтчета);
	
	Запрос = Новый Запрос;
	
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	
	Запрос.УстановитьПараметр("МассивКатегорий", МассивКатегорий);
	
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрПериод.ДатаОкончания);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияУдержанияПоСотрудникам.Период,
		|	НачисленияУдержанияПоСотрудникам.ПериодДействия,
		|	НачисленияУдержанияПоСотрудникам.Организация,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник КАК Сотрудник,
		|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма) КАК Сумма,
		|	СУММА(ОтработанноеВремяПоСотрудникам.ОплаченоДней) КАК ОплаченоДней
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
		|		ПО НачисленияУдержанияПоСотрудникам.Регистратор = ОтработанноеВремяПоСотрудникам.Регистратор
		|			И НачисленияУдержанияПоСотрудникам.Сотрудник = ОтработанноеВремяПоСотрудникам.Сотрудник
		|			И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ОтработанноеВремяПоСотрудникам.Начисление
		|			И НачисленияУдержанияПоСотрудникам.ИдентификаторСтроки = ОтработанноеВремяПоСотрудникам.ИдентификаторСтроки
		|			И НачисленияУдержанияПоСотрудникам.Период = ОтработанноеВремяПоСотрудникам.Период
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени В(&МассивКатегорий)
		|	И НачисленияУдержанияПоСотрудникам.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И &УсловияОтбора
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Организация,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник,
		|	НачисленияУдержанияПоСотрудникам.ПериодДействия,
		|	НачисленияУдержанияПоСотрудникам.Период";
	
	ТекстыОтборов = "";
	Для Каждого ОписаниеОтбора Из ПараметрыОтборов Цикл
		
		Если ОписаниеОтбора.Ключ = "Организация" Тогда
			
			ТекстыОтборов = ТекстыОтборов + " И НачисленияУдержанияПоСотрудникам.Организация = &Организация";
			Запрос.УстановитьПараметр("Организация", ОписаниеОтбора.Значение.ПравоеЗначение);
			
		ИначеЕсли ОписаниеОтбора.Ключ = "Сотрудник" Тогда
			
			Если ОписаниеОтбора.Значение.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				ТекстыОтборов = ТекстыОтборов + " И НачисленияУдержанияПоСотрудникам.Сотрудник В (&Сотрудник)";
			Иначе
				ТекстыОтборов = ТекстыОтборов + " И НачисленияУдержанияПоСотрудникам.Сотрудник = &Сотрудник";
			КонецЕсли;
			Запрос.УстановитьПараметр("Сотрудник", ОписаниеОтбора.Значение.ПравоеЗначение);
			
		ИначеЕсли ОписаниеОтбора.Ключ = "ФизическоеЛицо" Тогда
			
			Если ОписаниеОтбора.Значение.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				ТекстыОтборов = ТекстыОтборов + " И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В (&ФизическоеЛицо)";
			Иначе
				ТекстыОтборов = ТекстыОтборов + " И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо = &ФизическоеЛицо";
			КонецЕсли;
			Запрос.УстановитьПараметр("ФизическоеЛицо", ОписаниеОтбора.Значение.ПравоеЗначение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстыОтборов) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловияОтбора", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловияОтбора", ТекстыОтборов);
	КонецЕсли;
	
	ТаблицаБольничных = Запрос.Выполнить().Выгрузить();
	СтруктураВозврата.Вставить("ТаблицаБольничных", ТаблицаБольничных);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция КадроваяИстория(КлючВарианта, ПараметрыОтчетов)
	
	СтруктураВозврата = Новый Структура;
	
	ОтчетыКадроваяИсторияСотрудников = Отчеты.КадроваяИсторияСотрудников.Создать();
	ОтчетыКадроваяИсторияСотрудников.ИнициализироватьОтчет();
	
	НастройкиОтчета = ОтчетыКадроваяИсторияСотрудников.СхемаКомпоновкиДанных.ВариантыНастроек.КадроваяИсторияСотрудников.Настройки;
	
	ОтчетыКадроваяИсторияСотрудников.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОтборОтчетыКадроваяИсторияСотрудников = ОтчетыКадроваяИсторияСотрудников.КомпоновщикНастроек.Настройки.Отбор;
	ОтборОтчетыКадроваяИсторияСотрудников.Элементы.Очистить();
	
	ПараметрыОтчета = ПараметрыОтчетов.Параметры;
	ПараметрПериод = Неопределено;
	ПараметрыОтчета.Свойство("Период", ПараметрПериод);
	Если ЗначениеЗаполнено(ПараметрПериод) Тогда
		ЗначениеПараметраПериод = ОтчетыКадроваяИсторияСотрудников.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		ЗначениеПараметраПериод.Значение = ПараметрПериод;
		ЗначениеПараметраПериод.Значение.ДатаНачала = НачалоГода(ЗначениеПараметраПериод.Значение.ДатаНачала);
	КонецЕсли; 
	
	ПараметрыОтборов = ПараметрыОтчетов.Отбор;
	Для каждого ОписаниеОтбора Из ПараметрыОтборов Цикл
		ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
			ОтборОтчетыКадроваяИсторияСотрудников, ОписаниеОтбора.Ключ, ОписаниеОтбора.Значение.ВидСравнения, ОписаниеОтбора.Значение.ПравоеЗначение);
	КонецЦикла;
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, ОтчетыКадроваяИсторияСотрудников.КомпоновщикНастроек.Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетыКадроваяИсторияСотрудников.СхемаКомпоновкиДанных,
		ОтчетыКадроваяИсторияСотрудников.КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(ОтчетыКадроваяИсторияСотрудников.КомпоновщикНастроек.Настройки);
	СтруктураВозврата.Вставить("СоответствиеПользовательскихПолей", СоответствиеПользовательскихПолей);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДанныеОтчета = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ЗначениеЗаполнено(ПараметрПериод) Тогда
		ЗначениеПараметраПериод = ОтчетыКадроваяИсторияСотрудников.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		ПериодДатаНачала = НачалоГода(ЗначениеПараметраПериод.Значение.ДатаНачала);
		ПериодДатаОкончания = ЗначениеПараметраПериод.Значение.ДатаОкончания;
	Иначе
		ПериодДатаНачала = '00010101';
		ПериодДатаОкончания = '00010101';
	КонецЕсли;
	
	ДанныеРеестра = ЗарплатаКадрыОтчетыРасширенный.ДанныеРеестраКадровыхПриказовПоОтборамОтчета(ПериодДатаНачала, ПериодДатаОкончания, ОтборОтчетыКадроваяИсторияСотрудников.Элементы);
	
	ДанныеСотрудников = Новый Соответствие;
	Для Каждого СтрокаСотрудника Из ДанныеОтчета.Строки Цикл
		
		КадроваяИсторияСотрудника = ПустаяТаблицаКадровойИстории();
		СтрокаПредыдущегоПериода = Неопределено;
		
		СтрокиРеестра = ДанныеРеестра.НайтиСтроки(Новый Структура("Сотрудник", СтрокаСотрудника.Сотрудник));
		Для Каждого СтрокаРеестра Из СтрокиРеестра Цикл
			
			СтрокаТаблицыКадровойИстории = КадроваяИсторияСотрудника.Добавить();
			СтрокаТаблицыКадровойИстории.ВидСобытия = СтрокаРеестра.ВидСобытия;
			СтрокаТаблицыКадровойИстории.Подразделение = СтрокаРеестра.Подразделение;
			СтрокаТаблицыКадровойИстории.Должность = СтрокаРеестра.Должность;
			СтрокаТаблицыКадровойИстории.КадровыйПриказДата = СтрокаРеестра.ДатаПриказа;
			СтрокаТаблицыКадровойИстории.КадровыйПриказНомер = СтрокаРеестра.НомерПриказа;
			СтрокаТаблицыКадровойИстории.Регистратор = СтрокаРеестра.Регистратор;
			СтрокаТаблицыКадровойИстории.ТарифнаяСтавка = СтрокаРеестра.ТарифнаяСтавкаНадбавка;
			
			Если СтрокаТаблицыКадровойИстории.КадровыйПриказДата <= ПериодДатаНачала Тогда
				СтрокаПредыдущегоПериода = СтрокаТаблицыКадровойИстории;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаКадровойИстории Из СтрокаСотрудника.Строки Цикл
			
			ТарифнаяСтавка = СтрокаКадровойИстории[СоответствиеПользовательскихПолей.Получить("ТарифнаяСтавка")];
			Надбавка = СтрокаКадровойИстории[СоответствиеПользовательскихПолей.Получить("Надбавка")];
			ГрафикРаботы = СтрокаКадровойИстории.ГрафикРаботы;
			Подразделение = СтрокаКадровойИстории.Подразделение;
			Должность = СтрокаКадровойИстории.Должность;
			
			Если СтрокаКадровойИстории.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные Тогда
				
				Если СтрокаПредыдущегоПериода <> Неопределено Тогда
					
					СтрокаТаблицыКадровойИстории = СтрокаПредыдущегоПериода;
					СтрокаТаблицыКадровойИстории.ТарифнаяСтавка = ТарифнаяСтавка;
					СтрокаТаблицыКадровойИстории.Надбавка = Надбавка;
					СтрокаТаблицыКадровойИстории.ГрафикРаботы = ГрафикРаботы;
					СтрокаТаблицыКадровойИстории.Подразделение = Подразделение;
					СтрокаТаблицыКадровойИстории.Должность = Должность;
					
				КонецЕсли;
				
			Иначе
				
				СтруктураПоиска = Новый Структура("Регистратор", СтрокаКадровойИстории.Регистратор);
				СтрокиРегистратораВРеестре = КадроваяИсторияСотрудника.НайтиСтроки(СтруктураПоиска);
				
				Если СтрокиРегистратораВРеестре.Количество() > 0 Тогда
					СтрокаТаблицыКадровойИстории = СтрокиРегистратораВРеестре[0];
				Иначе
					СтрокаТаблицыКадровойИстории = КадроваяИсторияСотрудника.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыКадровойИстории, СтрокаКадровойИстории);
				КонецЕсли;
				
				СтрокаТаблицыКадровойИстории.ТарифнаяСтавка = ТарифнаяСтавка;
				СтрокаТаблицыКадровойИстории.Надбавка = Надбавка;
				СтрокаТаблицыКадровойИстории.ГрафикРаботы = ГрафикРаботы;
				СтрокаТаблицыКадровойИстории.Подразделение = Подразделение;
				СтрокаТаблицыКадровойИстории.Должность = Должность;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеСотрудников.Вставить(СтрокаСотрудника.Сотрудник, КадроваяИсторияСотрудника);
		
	КонецЦикла;
	
	СтруктураВозврата.Вставить("ДанныеОтчета", ДанныеСотрудников);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ФактическиеОтпуска(КлючВарианта, ПараметрыОтчетов)
	
	СтруктураВозврата = Новый Структура;
	
	ОтчетыФактическиеОтпускаСотрудников = Отчеты.ФактическиеОтпускаСотрудников.Создать();
	ОтчетыФактическиеОтпускаСотрудников.ИнициализироватьОтчет();
	
	НастройкиОтчета = ОтчетыФактическиеОтпускаСотрудников.СхемаКомпоновкиДанных.ВариантыНастроек.ФактическиеОтпускаСотрудников.Настройки;
	
	ОтчетыФактическиеОтпускаСотрудников.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОтборОтчетыФактическиеОтпускаСотрудников = ОтчетыФактическиеОтпускаСотрудников.КомпоновщикНастроек.Настройки.Отбор;
	ОтборОтчетыФактическиеОтпускаСотрудников.Элементы.Очистить();
	
	ПараметрыОтчета = ПараметрыОтчетов.Параметры;
	ПараметрПериод = Неопределено;
	ПараметрыОтчета.Свойство("Период", ПараметрПериод);
	Если ЗначениеЗаполнено(ПараметрПериод) Тогда
		ЗначениеПараметраПериод = ОтчетыФактическиеОтпускаСотрудников.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		ЗначениеПараметраПериод.Значение = ПараметрПериод;
		ЗначениеПараметраПериод.Значение.ДатаНачала = НачалоГода(ЗначениеПараметраПериод.Значение.ДатаНачала);
	КонецЕсли; 
	
	ПараметрыОтборов = ПараметрыОтчетов.Отбор;
	Для каждого ОписаниеОтбора Из ПараметрыОтборов Цикл
		
		Если ОписаниеОтбора.Ключ = "Организация" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ОписаниеОтбора.Ключ = "Подразделение" Тогда
			Продолжить;
		КонецЕсли; 
		
		ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
			ОтборОтчетыФактическиеОтпускаСотрудников, ОписаниеОтбора.Ключ, ОписаниеОтбора.Значение.ВидСравнения, ОписаниеОтбора.Значение.ПравоеЗначение);
		
	КонецЦикла;
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, ОтчетыФактическиеОтпускаСотрудников.КомпоновщикНастроек.Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетыФактическиеОтпускаСотрудников.СхемаКомпоновкиДанных,
		ОтчетыФактическиеОтпускаСотрудников.КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(ОтчетыФактическиеОтпускаСотрудников.КомпоновщикНастроек.Настройки);
	СтруктураВозврата.Вставить("СоответствиеПользовательскихПолей", СоответствиеПользовательскихПолей);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДанныеОтчета = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	СтруктураВозврата.Вставить("ДанныеОтчета", ДанныеОтчета);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПлановыеУдержания(КлючВарианта, ПараметрыОтчетов)
	
	СтруктураВозврата = Новый Структура;
	
	ОтчетыПлановыеУдержанияСотрудников = Отчеты.ПлановыеУдержанияСотрудников.Создать();
	ОтчетыПлановыеУдержанияСотрудников.ИнициализироватьОтчет();
	
	НастройкиОтчета = ОтчетыПлановыеУдержанияСотрудников.СхемаКомпоновкиДанных.ВариантыНастроек[КлючВарианта].Настройки;
	
	ОтчетыПлановыеУдержанияСотрудников.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОтборОтчетыПлановыеУдержанияСотрудников = ОтчетыПлановыеУдержанияСотрудников.КомпоновщикНастроек.Настройки.Отбор;
	ОтборОтчетыПлановыеУдержанияСотрудников.Элементы.Очистить();
	
	ПараметрыОтчета = ПараметрыОтчетов.Параметры;
	ПараметрПериод = Неопределено;
	ПараметрыОтчета.Свойство("Период", ПараметрПериод);
	Если ЗначениеЗаполнено(ПараметрПериод) Тогда
		ЗначениеПараметраПериод = ОтчетыПлановыеУдержанияСотрудников.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		ЗначениеПараметраПериод.Значение = ПараметрПериод;
		ЗначениеПараметраПериод.Значение.ДатаНачала = НачалоГода(ЗначениеПараметраПериод.Значение.ДатаНачала);
	КонецЕсли;
	
	ПараметрыОтборов = ПараметрыОтчетов.Отбор;
	Для каждого ОписаниеОтбора Из ПараметрыОтборов Цикл
		
		Если ОписаниеОтбора.Ключ = "Организация" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеОтбора.Ключ = "Подразделение" Тогда
			Продолжить;
		КонецЕсли;
		
		ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
			ОтборОтчетыПлановыеУдержанияСотрудников, ОписаниеОтбора.Ключ, ОписаниеОтбора.Значение.ВидСравнения, ОписаниеОтбора.Значение.ПравоеЗначение);
		
	КонецЦикла;
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, ОтчетыПлановыеУдержанияСотрудников.КомпоновщикНастроек.Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетыПлановыеУдержанияСотрудников.СхемаКомпоновкиДанных,
		ОтчетыПлановыеУдержанияСотрудников.КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(ОтчетыПлановыеУдержанияСотрудников.КомпоновщикНастроек.Настройки);
	СтруктураВозврата.Вставить("СоответствиеПользовательскихПолей", СоответствиеПользовательскихПолей);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДанныеОтчета = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	СтруктураВозврата.Вставить("ДанныеОтчета", ДанныеОтчета);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДанныеОВычетах(ФизическиеЛицаОрганизаций, ПараметрыОтчетов)
	
	ЗначениеВозврата = Новый Соответствие;
	
	НалоговыйПериод = Год(ТекущаяДатаСеанса());
	
	ПараметрыОтчета = ПараметрыОтчетов.Параметры;
	ПараметрПериод = Неопределено;
	ПараметрыОтчета.Свойство("Период", ПараметрПериод);
	Если ЗначениеЗаполнено(ПараметрПериод) Тогда
		НалоговыйПериод = Год(ПараметрПериод.ДатаОкончания);
	КонецЕсли;
	
	Для каждого ФизическиеЛицаОрганизации Из ФизическиеЛицаОрганизаций Цикл
		
		Результат = УчетНДФЛ.ДанныеОДоходахНалогахВычетах(ФизическиеЛицаОрганизации.Значение, НалоговыйПериод, ФизическиеЛицаОрганизации.Ключ);
		КоличествоВычетов = Результат.Вычеты.Количество();
		Если КоличествоВычетов > 0 Тогда
			
			ИтогиПоВычетам = Новый Соответствие;
			
			Для каждого Вычет Из Результат.Вычеты Цикл
				
				ОписаниеВычета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 руб. (код %2)'"),
					Формат(Вычет.СуммаВычета, "ЧДЦ=2"),
					СокрЛП(Вычет.КодВычета));
					
				КоличествоВычетов = КоличествоВычетов - 1;
				Если КоличествоВычетов > 0 Тогда
					ОписаниеВычета = ОписаниеВычета + ",";
				КонецЕсли;
				
				ВычетыОрганизаций = ЗначениеВозврата.Получить(Вычет.Сотрудник);
				Если ВычетыОрганизаций = Неопределено Тогда
					ВычетыОрганизаций = Новый Соответствие;
					ЗначениеВозврата.Вставить(Вычет.Сотрудник, ВычетыОрганизаций);
				КонецЕсли;
				
				МассивИнформацииОВычетах = ВычетыОрганизаций.Получить(ФизическиеЛицаОрганизации.Ключ);
				Если МассивИнформацииОВычетах = Неопределено Тогда
					МассивИнформацииОВычетах = Новый Массив;
					ВычетыОрганизаций.Вставить(ФизическиеЛицаОрганизации.Ключ, МассивИнформацииОВычетах);
				КонецЕсли;
				
				МассивИнформацииОВычетах.Добавить(ОписаниеВычета);
				
				ИтогиПоОрганизациям = ИтогиПоВычетам.Получить(Вычет.Сотрудник);
				Если ИтогиПоОрганизациям = Неопределено Тогда
					ИтогиПоОрганизациям = Новый Соответствие;
					ИтогиПоВычетам.Вставить(Вычет.Сотрудник, ИтогиПоОрганизациям);
				КонецЕсли;
				
				ИтогПоВычетам = ИтогиПоОрганизациям.Получить(ФизическиеЛицаОрганизации.Ключ);
				Если ИтогПоВычетам = Неопределено Тогда
					ИтогПоВычетам = 0;
				КонецЕсли;
				
				ИтогПоВычетам = ИтогПоВычетам + Вычет.СуммаВычета;
				ИтогиПоОрганизациям.Вставить(ФизическиеЛицаОрганизации.Ключ, ИтогПоВычетам);
				
			КонецЦикла;
			
			Для Каждого ИтогПоОрганизациям Из ИтогиПоВычетам Цикл
				
				Для Каждого ИтогПоВычетам Из ИтогПоОрганизациям.Значение Цикл
					
					ОписаниеВычета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 руб., в т. ч.:'"),
						Формат(ИтогПоВычетам.Значение, "ЧДЦ=2"));
					
					ИнформацииОВычетахПоОрганизациям = ЗначениеВозврата.Получить(ИтогПоОрганизациям.Ключ);
					Если ИнформацииОВычетахПоОрганизациям = Неопределено Тогда
						ИнформацииОВычетахПоОрганизациям = Новый Соответствие;
						ЗначениеВозврата.Вставить(ИтогПоОрганизациям.Ключ, ИнформацииОВычетахПоОрганизациям);
					КонецЕсли;
					
					МассивИнформацииОВычетах = ИнформацииОВычетахПоОрганизациям.Получить(ИтогПоВычетам.Ключ);
					Если МассивИнформацииОВычетах = Неопределено Тогда
						МассивИнформацииОВычетах = Новый Массив;
						ИнформацииОВычетахПоОрганизациям.Вставить(ИтогПоВычетам.Ключ, МассивИнформацииОВычетах);
					КонецЕсли;
					
					Если МассивИнформацииОВычетах.Количество() > 1 Тогда
						МассивИнформацииОВычетах.Вставить(0, ОписаниеВычета);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПредставлениеДокументаУдержания(СтрокаДанных, СоответствиеПользовательскихПолей)
	
	Представление = "";
	ДокументУдержания = СтрокаДанных[СоответствиеПользовательскихПолей.Получить("ДокументУдержания")];
	
	Если ЗначениеЗаполнено(ДокументУдержания) Тогда
		УстановитьПривилегированныйРежим(Истина);
		СвойстваРегистратора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументУдержания, "Номер,Дата");
		УстановитьПривилегированныйРежим(Ложь);
		
		Представление = КраткоеПредставлениеТипаДокумента(ДокументУдержания)
			+ " № " + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СвойстваРегистратора.Номер, Истина, Истина)
			+ " " + НСтр("ru='от'") + " " + Формат(СвойстваРегистратора.Дата, "ДЛФ=D");
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция КраткоеПредставлениеТипаДокумента(ДокументУдержания)
	
	Если ТипЗнч(ДокументУдержания) = Тип("ДокументСсылка.ИсполнительныйЛист") Тогда
		
		Возврат НСтр("ru='Исп. лист'");
		
	ИначеЕсли ТипЗнч(ДокументУдержания) = Тип("ДокументСсылка.УдержаниеДобровольныхВзносовВНПФ") Тогда
		
		Возврат НСтр("ru='ДВ НПФ'");
		
	ИначеЕсли ТипЗнч(ДокументУдержания) = Тип("ДокументСсылка.УдержаниеДобровольныхСтраховыхВзносов") Тогда
		
		Возврат НСтр("ru='ДСВ'");
		
	ИначеЕсли ТипЗнч(ДокументУдержания) = Тип("ДокументСсылка.УдержаниеПрофсоюзныхВзносов") Тогда
		
		Возврат НСтр("ru='Проф. взносы'");
		
	КонецЕсли;
		
	Возврат НСтр("ru='Прочие уд.'");
	
КонецФункции

Процедура ЗаполнитьПодписантов(Макет, Организация, ДатаОтчета)
	
	ПараметрыЗаполнения = Новый Структура("Бухгалтер,БухгалтерРасшифровкаПодписи");
	КлючиОтветственныхЛиц = "";
	
	НастройкиОтчета = ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрБухгалтер = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Бухгалтер"));	
	Если ПараметрБухгалтер <> Неопределено И ПараметрБухгалтер.Использование Тогда
		Если ЗначениеЗаполнено(ПараметрБухгалтер.Значение) Тогда
			ПараметрыЗаполнения.Бухгалтер = ПараметрБухгалтер.Значение;
		КонецЕсли; 
	Иначе
		КлючиОтветственныхЛиц = "Бухгалтер";
	КонецЕсли;
	
	Если Не ПустаяСтрока(КлючиОтветственныхЛиц) Тогда
		
		ОтветственныеЛица = Новый Структура("Организация," + КлючиОтветственныхЛиц, Организация);
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ОтветственныеЛица, ДатаОтчета);
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ОтветственныеЛица);
		
	КонецЕсли; 
	
	МассивФизЛиц = Новый Массив;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.Бухгалтер) Тогда
		МассивФизЛиц.Добавить(ПараметрыЗаполнения.Бухгалтер);
	КонецЕсли; 
	
	Если МассивФизЛиц.Количество() > 0 Тогда
		
		ФИОФизЛиц = ЗарплатаКадры.СоответствиеФИОФизЛицСсылкам(ДатаОтчета, МассивФизЛиц);
		ПараметрыЗаполнения.БухгалтерРасшифровкаПодписи = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ФИОФизЛиц[ПараметрыЗаполнения.Бухгалтер]);

	КонецЕсли; 
	
	Макет.Параметры.Заполнить(ПараметрыЗаполнения);
	
КонецПроцедуры

Функция ПустаяТаблицаКадровойИстории()
	
	ТаблицаКадровойИстории = Новый ТаблицаЗначений;
	ТаблицаКадровойИстории.Колонки.Добавить("ВидСобытия");
	ТаблицаКадровойИстории.Колонки.Добавить("Подразделение");
	ТаблицаКадровойИстории.Колонки.Добавить("Должность");
	ТаблицаКадровойИстории.Колонки.Добавить("КадровыйПриказДата", Новый ОписаниеТипов("Дата"));
	ТаблицаКадровойИстории.Колонки.Добавить("КадровыйПриказНомер", Новый ОписаниеТипов("Строка"));
	ТаблицаКадровойИстории.Колонки.Добавить("Регистратор");
	ТаблицаКадровойИстории.Колонки.Добавить("ТарифнаяСтавка");
	ТаблицаКадровойИстории.Колонки.Добавить("Надбавка");
	ТаблицаКадровойИстории.Колонки.Добавить("ГрафикРаботы");
	
	Возврат ТаблицаКадровойИстории;
	
КонецФункции

#КонецОбласти

#КонецЕсли