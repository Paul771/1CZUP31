#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "НастройкиПрограммыЗарплатаКадры");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Сводный отчет по настройкам расчета зарплаты и кадрового учета'");
		
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "НастройкиОрганизации");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Отчет по настройкам организации'");

	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "НастройкиПоРазделам");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Отчет по отдельным разделам настроек расчета зарплаты и кадрового учета'");

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьОтчет(Объект, ДокументРезультат, ДанныеРасшифровки) Экспорт
	
	СхемаКомпоновкиДанных = Объект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
      
    Настройки = Объект.КомпоновщикНастроек.ПолучитьНастройки();

	// Подготовка данных 
	НастройкиПоРазделам = НастройкиПоРазделам();
	
	ТаблицаПоказателей = ТаблицаПоказателей();
	
	ПодготовитьДанныеПоРазделуОрганизация(ТаблицаПоказателей);
	
	ПодготовитьДанныеПоРазделуКадровыйУчет(ТаблицаПоказателей);
	
	ПодготовитьДанныеПоРазделуРасчетЗарплаты(ТаблицаПоказателей);
	
	ПодготовитьДанныеПоРазделуУправлениеПерсоналом(ТаблицаПоказателей);
	
	ПодготовитьДанныеПоРазделуОсобенностиПредприятия(ТаблицаПоказателей);
	
	СформироватьИВыполнитьЗапрос(ТаблицаПоказателей, НастройкиПоРазделам, Настройки);
	// Конец Подготовка данных
		      
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
      
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ВнешниеНаборыДанных = Новый Структура;
	
	ВнешниеНаборыДанных.Вставить("НастройкиПоРазделам", НастройкиПоРазделам);
	
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
      
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
   
    ДокументРезультат.Очистить();
      
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
     
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
	
КонецПроцедуры

Функция НастройкиПоРазделам()
	
	НастройкиПоРазделам = Новый ТаблицаЗначений;
	
	НастройкиПоРазделам.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"), "Имя");
	НастройкиПоРазделам.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"), "Представление");
	НастройкиПоРазделам.Колонки.Добавить("Значение", Новый ОписаниеТипов(), "Значение");
	НастройкиПоРазделам.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Строка"), "Раздел");
	НастройкиПоРазделам.Колонки.Добавить("ПодРаздел", Новый ОписаниеТипов("Строка"), "ПодРаздел");
	НастройкиПоРазделам.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	НастройкиПоРазделам.Колонки.Добавить("ПолеСортировкиРазделов", Новый ОписаниеТипов("Число"), "ПолеСортировкиРазделов");
	НастройкиПоРазделам.Колонки.Добавить("ПолеСортировкиПодразделов", Новый ОписаниеТипов("Число"), "ПолеСортировкиПодразделов");
	НастройкиПоРазделам.Колонки.Добавить("ПолеСортировкиНастройки", Новый ОписаниеТипов("Число"), "ПолеСортировкиНастройки");
	НастройкиПоРазделам.Колонки.Добавить("ОтображатьНастройкиОрганизации", Новый ОписаниеТипов("Булево"), "Отображать настройки организации");
	
	Возврат НастройкиПоРазделам;
	
КонецФункции

Функция ТаблицаПоказателей()
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("ИсточникДанных", Новый ОписаниеТипов("Строка"), "ИсточникДанных"); 
	ТаблицаПоказателей.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"), "Имя");
	ТаблицаПоказателей.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"), "Представление");
	ТаблицаПоказателей.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Строка"), "Раздел");
	ТаблицаПоказателей.Колонки.Добавить("ПодРаздел", Новый ОписаниеТипов("Строка"), "ПодРаздел");
	ТаблицаПоказателей.Колонки.Добавить("ЗначениеПоУмолчанию", Новый ОписаниеТипов(), "ЗначениеПоУмолчанию");
	ТаблицаПоказателей.Колонки.Добавить("ПолеСортировкиРазделов", Новый ОписаниеТипов("Число"), "ПолеСортировкиРазделов");
	ТаблицаПоказателей.Колонки.Добавить("ПолеСортировкиПодразделов", Новый ОписаниеТипов("Число"), "ПолеСортировкиПодразделов");
	ТаблицаПоказателей.Колонки.Добавить("ПолеСортировкиНастройки", Новый ОписаниеТипов("Число"), "ПолеСортировкиНастройки");
	ТаблицаПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("Строка"), "Организация");

	Возврат ТаблицаПоказателей;
	
КонецФункции

Процедура ДобавитьПоказатель(ТаблицаПоказателей, ИсточникДанных, Имя, Представление, Раздел, Подраздел, ЗначениеПоУмолчанию, ПолеСортировкиРазделов, ПолеСортировкиПодразделов, ПолеСортировкиНастройки, Организация = "") Экспорт
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	
	НоваяСтрока.ИсточникДанных = ИсточникДанных;
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Представление = Представление;
	НоваяСтрока.ЗначениеПоУмолчанию = ЗначениеПоУмолчанию;
	НоваяСтрока.Раздел = Раздел;
	НоваяСтрока.Подраздел = Подраздел;
	НоваяСтрока.ПолеСортировкиРазделов = ПолеСортировкиРазделов;
	НоваяСтрока.ПолеСортировкиПодразделов = ПолеСортировкиПодразделов;
	НоваяСтрока.ПолеСортировкиНастройки = ПолеСортировкиНастройки;
	НоваяСтрока.Организация = Организация;
	
КонецПроцедуры

Процедура СформироватьИВыполнитьЗапрос(ТаблицаПоказателей, НастройкиПоРазделам, Настройки)
	
	ОтображатьНастройкиОрганизации = Ложь;
	
	Отборы = Настройки.Отбор.Элементы;
	Для Каждого ЭлементОтбора Из Отборы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьНастройкиОрганизации") Тогда
			ОтображатьНастройкиОрганизации = ЭлементОтбора.Использование;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапросаПоТаблицеПоказателей(ТаблицаПоказателей, ОтображатьНастройкиОрганизации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОтображатьНастройкиОрганизации", ОтображатьНастройкиОрганизации);
			
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = НастройкиПоРазделам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПоТаблицеПоказателей(ТаблицаПоказателей, ОтображатьНастройкиОрганизации)
	
	ТекстЗапросаВТ = "";
	
	СоответствиеЗначенийПоУмолчаниюВТ = Новый Соответствие;
	ТаблицаЗначенийПоУмолчанию = ТаблицаПоказателей.Скопировать(, "ЗначениеПоУмолчанию");
	ТаблицаЗначенийПоУмолчанию.Свернуть("ЗначениеПоУмолчанию");
	
	Индекс = 1;
	Для Каждого СтрокаТЗ Из ТаблицаЗначенийПоУмолчанию Цикл
			
		ТекстЗапросаВТ = ТекстЗапросаВТ + 
		"ВЫБРАТЬ
		 | Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		 | Организации.Ссылка КАК Организация,
		 | " + СтрокаТЗ.ЗначениеПоУмолчанию + " КАК ЗначениеПоУмолчанию
		 |ПОМЕСТИТЬ ВТ" + Индекс + "
		 |ИЗ
		 |Справочник.Организации КАК Организации
		 |;
		 |";
		 
		 СоответствиеЗначенийПоУмолчаниюВТ.Вставить(СтрокаТЗ.ЗначениеПоУмолчанию, "ВТ"+Индекс);
		 
		 Индекс = Индекс + 1;
		 
	КонецЦикла;	
	
	ТекстЗапроса = "";
	
	ПерваяСтрока = Истина;
	Для Каждого Показатель Из ТаблицаПоказателей Цикл
		
		Если Показатель.Раздел = "Настройки организации" 
			И Не ОтображатьНастройкиОрганизации Тогда
			Продолжить;
		КонецЕсли;
		
		Путь = СтрЗаменить(Показатель.ИсточникДанных, ".", "");
		Путь = СтрЗаменить(Путь, "()", "");
		
		Если ТекстЗапроса <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса +		 
		 "ВЫБРАТЬ " + ?(Показатель.Раздел = "Настройки организации", "", "Первые 1") +"
		 |	" + ?(Показатель.Раздел = "Настройки организации", "ВТ.Организация", "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)") + ?(ПерваяСтрока, " КАК Организация, ", ",") +"
		 |	" + ?(Показатель.Раздел = "Настройки организации", "&ОтображатьНастройкиОрганизации", "ИСТИНА") + ?(ПерваяСтрока, " КАК ОтображатьНастройкиОрганизации, ", ",") +"
		 |	ЕстьNULL("+Путь + "." + Показатель.Имя + ", ВТ.ЗначениеПоУмолчанию)" + ?(ПерваяСтрока, " КАК Значение, ", ",") +"
		 |	""" + Показатель.Раздел + """" + ?(ПерваяСтрока, " КАК Раздел, ", ",") +"
		 |	""" + Показатель.ПодРаздел + """" + ?(ПерваяСтрока, " КАК ПодРаздел, ", ",") +"
		 |	""" + Показатель.Имя + """" + ?(ПерваяСтрока, " КАК Имя, ", ",")+"
		 |  """ + Показатель.Представление + """" + ?(ПерваяСтрока, " КАК Представление, ", ",")+"
		 |  """ + Показатель.ПолеСортировкиРазделов + """" + ?(ПерваяСтрока, " КАК ПолеСортировкиРазделов, ", ",")+"
		 |  """ + Показатель.ПолеСортировкиПодразделов + """" + ?(ПерваяСтрока, " КАК ПолеСортировкиПодразделов, ", ",")+"
		 |  """ + Показатель.ПолеСортировкиНастройки + """" + ?(ПерваяСтрока, " КАК ПолеСортировкиНастройки ", "")+"
		 |ИЗ
		 | " + СоответствиеЗначенийПоУмолчаниюВТ.Получить(Показатель.ЗначениеПоУмолчанию) + " КАК ВТ 
		 |ЛЕВОЕ СОЕДИНЕНИЕ " + Показатель.ИсточникДанных + " КАК " + Путь + "
		 |ПО " + ?(Показатель.Раздел = "Настройки организации", ?(Показатель.Организация = "ГоловнаяОрганизация", "ВТ.ГоловнаяОрганизация = ", "ВТ.Организация = ") + Путь + "." + Показатель.Организация, "(ИСТИНА)") + "
		 |";			 
						
		 ПерваяСтрока = Ложь;
		 
	КонецЦикла;
		
	Возврат ТекстЗапросаВТ + ТекстЗапроса;
	
КонецФункции

Процедура ПодготовитьДанныеПоРазделуОрганизация(ТаблицаПоказателей)
	
	// Главное
	ДобавитьПоказатель(ТаблицаПоказателей, "Справочник.Организации", "ЮридическоеФизическоеЛицо", 
		"Вид организации", "Настройки организации", "Главное", "Значение(Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка)", 1, 1, 1, "Ссылка");
	ДобавитьПоказатель(ТаблицаПоказателей, "Справочник.Организации", "ИНН", 
		"ИНН", "Настройки организации", "Главное", """""", 1, 1, 2, "Ссылка");
	ДобавитьПоказатель(ТаблицаПоказателей, "Справочник.Организации", "ОГРН", 
		"ОГРН", "Настройки организации", "Главное", """""", 1, 1, 3, "Ссылка");
	ДобавитьПоказатель(ТаблицаПоказателей, "Справочник.Организации", "ЕстьОбособленныеПодразделения", 
		"У организации есть филиалы (обособленные подразделения)", "Настройки организации", "Главное", "Ложь", 1, 1, 4, "Ссылка");
	ДобавитьПоказатель(ТаблицаПоказателей, "Справочник.Организации", "ОбособленноеПодразделение", 
		"Это - филиал (обособленное подразделение)", "Настройки организации", "Главное", "Ложь", 1, 1, 5, "Ссылка");
	ДобавитьПоказатель(ТаблицаПоказателей, "Справочник.Организации", "ГоловнаяОрганизация", 
		"Головная организация филиала", "Настройки организации", "Главное", "Значение(Справочник.Организации.ПустаяСсылка)", 1, 1, 6, "Ссылка");
		
	// Основные сведения	
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиЗарплатаКадры", "ПрименятьРайонныйКоэффициент", 
		"В организации или ее подразделениях начисляется надбавка по районному коэффициенту", "Настройки организации", "Основные сведения", "Ложь", 1, 2, 1, "Организация");
	ДобавитьПоказатель(ТаблицаПоказателей, "Справочник.Организации", "РайонныйКоэффициентРФ", 
		"Районный коэффициент (федеральный)", "Настройки организации", "Основные сведения", "0", 1, 2, 2, "Ссылка");
	ДобавитьПоказатель(ТаблицаПоказателей, "Справочник.Организации", "РайонныйКоэффициент", 
		"Районный коэффициент", "Настройки организации", "Основные сведения", "0", 1, 2, 3, "Ссылка");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиЗарплатаКадры", "ПрименятьСевернуюНадбавку", 
		"В организации или ее подразделениях начисляется северная надбавка", "Настройки организации", "Основные сведения", "Ложь", 1, 2, 4, "Организация");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.ТерриториальныеУсловияПФР.СрезПоследних()", "ТерриториальныеУсловияПФР", 
		"Территориальные условия", "Настройки организации", "Основные сведения", "Значение(Справочник.ТерриториальныеУсловияПФР.ПустаяСсылка)", 1, 2, 5, "СтруктурнаяЕдиница");
	ДобавитьПоказатель(ТаблицаПоказателей, "Справочник.Организации", "ПроцентСевернойНадбавки", 
		"% северной надбавки", "Настройки организации", "Основные сведения", "0", 1, 2, 6, "Ссылка");
	ДобавитьПоказатель(ТаблицаПоказателей, "Справочник.Организации", "ГрафикРаботыСотрудников", 
		"График работы сотрудников", "Настройки организации", "Основные сведения", "Значение(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)", 1, 2, 7, "Ссылка");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних()", "ПлательщикЕНВД", 
		"Является плательщиком ЕНВД", "Настройки организации", "Основные сведения", "Ложь", 1, 2, 8, "Организация");
		
	// Учетная политика
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних()", "ВидТарифа", 
		"Вид тарифа", "Настройки организации", "Учетная политика", "Значение(Справочник.ВидыТарифовСтраховыхВзносов.ПустаяСсылка)", 1, 3, 1, "ГоловнаяОрганизация");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиУчетаСтраховыхВзносов", "ИспользуетсяТрудФармацевтов", 
		"Есть фармацевты", "Настройки организации", "Учетная политика", "Ложь", 1, 3, 2, "Организация");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиУчетаСтраховыхВзносов", "ИспользуетсяТрудЧленовЛетныхЭкипажей", 
		"Есть члены летных экипажей", "Настройки организации", "Учетная политика", "Ложь", 1, 3, 3, "Организация");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиУчетаСтраховыхВзносов", "ИспользуетсяТрудЧленовЭкипажейМорскихСудов", 
		"Есть члены экипажей морских судов", "Настройки организации", "Учетная политика", "Ложь", 1, 3, 4, "Организация");  		
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиУчетаСтраховыхВзносов", "ИспользуетсяТрудШахтеров", 
		"Есть шахтеры (горнорабочие)", "Настройки организации", "Учетная политика", "Ложь", 1, 3, 5, "Организация");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиУчетаСтраховыхВзносов", "ИспользуютсяРаботыСДосрочнойПенсией", 
		"Есть сотрудники с правом досрочного выхода на пенсию", "Настройки организации", "Учетная политика", "Ложь", 1, 3, 6, "Организация");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиУчетаСтраховыхВзносов", "ПрименяютсяРезультатыСпециальнойОценкиУсловийТруда", 
		"Применяются результаты специальной оценки условий труда", "Настройки организации", "Учетная политика", "Ложь", 1, 3, 7, "Организация");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СрезПоследних()", "Ставка", 
		"Ставка взносов в ФСС НС и ПЗ", "Настройки организации", "Учетная политика", "0", 1, 3, 8, "Организация");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования", "ДатаПередачиФССВыплатыПособий", 
		"Выплата пособий", "Настройки организации", "Учетная политика", "ДатаВремя(1, 1, 1)", 1, 3, 9, "Организация");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДоплатуЗаДниБолезни") Тогда
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиЗарплатаКадрыРасширенная", "ПроцентДоплатыЗаДниНетрудоспособности", 
			"Работодатель доплачивает до % среднего заработка", "Настройки организации", "Учетная политика", "0", 1, 3, 10, "Организация");
	КонецЕсли;
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.УчетнаяПолитикаПоНДФЛ", "ОсобенностиИсчисленияНДФЛ", 
		"Стандартные вычеты НДФЛ применяются", "Настройки организации", "Учетная политика", "Значение(Перечисление.ОсобенностиИсчисленияНДФЛ.ПустаяСсылка)", 1, 3, 11, "ГоловнаяОрганизация");
	Если ПолучитьФункциональнуюОпцию("УчитыватьНочныеЧасы") Тогда
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.ЗначенияПоказателейДоплатыЗаРаботуВНочноеВечернееВремя", "ПроцентДоплатыЗаРаботуВНочноеВремя", 
			"В организации действует доплата за работу в ночное время", "Настройки организации", "Учетная политика", "20", 1, 3, 12, "Организация");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("УчитыватьВечерниеЧасы") Тогда
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.ЗначенияПоказателейДоплатыЗаРаботуВНочноеВечернееВремя", "ПроцентДоплатыЗаРаботуВВечернееВремя", 
			"В организации действует доплата за работу в вечернее время", "Настройки организации", "Учетная политика", "10", 1, 3, 13, "Организация");
	КонецЕсли;
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиЗарплатаКадрыРасширенная", "ИспользоватьОбособленныеТерритории", 
		"Использовать обособленные территории", "Настройки организации", "Учетная политика", "Ложь", 1, 3, 14, "Организация");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиЗарплатаКадрыРасширенная", "ИспользоватьОсобыеУсловияТруда", 
		"Использовать особые условия труда", "Настройки организации", "Учетная политика", "Ложь", 1, 3, 15, "Организация");
		
	// Оценочные обязательства (резервы) отпусков
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда	
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних()", "ФормироватьРезервОтпусковБУ", 
			"Формировать оценочные обязательства (резервы)", "Настройки организации", "Оценочные обязательства (резервы) отпусков", "Ложь", 1, 4, 1, "Организация");
	Иначе
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних()", "ФормироватьРезервОтпусковБУ", 
			"Формировать оценочные обязательства (резервы) в бухгалтерском учете", "Настройки организации", "Оценочные обязательства (резервы) отпусков", "Ложь", 1, 4, 1, "Организация");
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних()", "ФормироватьРезервОтпусковНУ", 
			"Формировать оценочные обязательства (резервы) в налоговом учете (по налогу на прибыль): Нормативный метод", "Настройки организации", "Оценочные обязательства (резервы) отпусков", "Ложь", 1, 4, 2, "Организация");
	КонецЕсли;
	
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних()", "МетодНачисленияРезерваОтпусков", 
		"Метод расчета обязательств", "Настройки организации", "Оценочные обязательства (резервы) отпусков", "Значение(Перечисление.МетодыНачисленияРезервовОтпусков.ПустаяСсылка)", 1, 4, 3, "Организация");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних()", "НормативОтчисленийВРезервОтпусков", 
		"Ежемесячный процент отчислений от ФОТ", "Настройки организации", "Оценочные обязательства (резервы) отпусков", "0", 1, 4, 4, "Организация");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних()", "ПредельнаяВеличинаОтчисленийВРезервОтпусков", 
		"Предельная сумма отчислений в год", "Настройки организации", "Оценочные обязательства (резервы) отпусков", "0", 1, 4, 5, "Организация");
		
	// Бухучет и выплата зарплаты
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.БухучетЗарплатыОрганизаций.СрезПоследних()", "СтатьяФинансирования", 
			"Финансирование", "Настройки организации", "Бухучет и выплата зарплаты", "Значение(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)", 1, 5, 1, "Организация");	
	КонецЕсли;
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.БухучетЗарплатыОрганизаций.СрезПоследних()", "СпособОтраженияЗарплатыВБухучете", 
		"Счет, субконто", "Настройки организации", "Бухучет и выплата зарплаты", "Значение(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)", 1, 5, 2, "Организация");	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД") Тогда
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.БухучетЗарплатыОрганизаций.СрезПоследних()", "ОтношениеКЕНВД", 
			"ЕНВД", "Настройки организации", "Бухучет и выплата зарплаты", "Ложь", 1, 5, 3, "Организация");	
	КонецЕсли;
		
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиЗарплатаКадрыРасширенная", "ВыплачиватьЗарплатуВПоследнийДеньМесяца", 
		"Дата выплаты зарплаты", "Настройки организации", "Бухучет и выплата зарплаты", "Ложь", 1, 5, 4, "Организация");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиЗарплатаКадрыРасширенная", "ДатаВыплатыЗарплатыНеПозжеЧем", 
		"Дата выплаты зарплаты", "Настройки организации", "Бухучет и выплата зарплаты", "5", 1, 5, 5, "Организация");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиЗарплатаКадрыРасширенная", "ДатаВыплатыАвансаНеПозжеЧем", 
		"Дата выплаты аванса", "Настройки организации", "Бухучет и выплата зарплаты", "20", 1, 5, 6, "Организация");
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.МестаВыплатыЗарплатыОрганизаций", "Вид", 
		"Как правило, выплата выполняется", "Настройки организации", "Бухучет и выплата зарплаты", "Значение(Перечисление.ВидыМестВыплатыЗарплаты.ПустаяСсылка)", 1, 5, 7, "Организация"); 
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.МестаВыплатыЗарплатыОрганизаций", "МестоВыплаты", 
		"Место выплаты", "Настройки организации", "Бухучет и выплата зарплаты", "Неопределено", 1, 5, 8, "Организация");
	 							
КонецПроцедуры

Процедура ПодготовитьДанныеПоРазделуКадровыйУчет(ТаблицаПоказателей)
	
	БазоваяВерсияКонфигурации = ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации();
	
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиКадровогоУчета", "КонтролироватьУникальностьТабельныхНомеров", 
		"Контролировать уникальность табельных номеров", "Кадровый учет", "", "Ложь", 3, 1, 1);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиКадровогоУчета", "ИспользоватьРаботуНаНеполнуюСтавку", 
		"Используется работа по неполной ставке", "Кадровый учет", "", "Ложь", 3, 1, 2);
	
	Если Не БазоваяВерсияКонфигурации Тогда	
		ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьПодработки", 
			"Использовать подработки", "Кадровый учет", "", "Ложь", 3, 1, 3);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("РаботаВНесколькихХозрасчетныхОрганизациях") Тогда
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиКадровогоУчета", "ИспользоватьПереносОстатковОтпускаПриУвольненииПереводом", 
			"Использовать перенос остатков отпуска при увольнении переводом", "Кадровый учет", "", "Ложь", 3, 1, 4);
	КонецЕсли;
	
	ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьСпециальностиФизическихЛиц", 
		"Вести учет специальностей сотрудников", "Кадровый учет", "", "Ложь", 3, 1, 5);
	
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиКадровогоУчета", "ПечататьТ6ДляОтпусковПоБеременностиИРодам", 
		"Т-6 для отпусков по беременности и родам", "Кадровый учет", "", "Ложь", 3, 1, 6);
	
	// Штатное расписание
	Если Не ЗарплатаКадрыРасширенный.ШтатноеРасписаниеВсегдаИспользуется() Тогда
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиШтатногоРасписания", "ИспользоватьШтатноеРасписание", 
			"Ведется штатное расписание", "Кадровый учет", "Штатное расписание", "Ложь", 3, 2, 1);
	КонецЕсли;
	
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиШтатногоРасписания", "ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически", 
		"Автоматическая проверка кадровых документов на соответствие штатному расписанию", "Кадровый учет", "Штатное расписание", "Ложь", 3, 2, 2);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиШтатногоРасписания", "ИспользоватьИсториюИзмененияШтатногоРасписания", 
		"Ведется история изменений штатного расписания", "Кадровый учет", "Штатное расписание", "Ложь", 3, 2, 3);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиШтатногоРасписания", "ИспользоватьВилкуСтавокВШтатномРасписании", 
		"Используется """"вилка"""" окладов и надбавок", "Кадровый учет", "Штатное расписание", "Ложь", 3, 2, 4);
	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда 
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиШтатногоРасписания", "ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании", 
			"В позиции штатного расписания используются разряды и категории", "Кадровый учет", "Штатное расписание", "Ложь", 3, 2, 5);
	КонецЕсли;
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиШтатногоРасписания", "ПредставлениеТарифовИНадбавок", 
		"Способ отображения надбавок в печатной форме штатного расписания (Т-3)", "Кадровый учет", "Штатное расписание", "Значение(Перечисление.ПредставлениеТарифовИНадбавок.ПустаяСсылка)", 3, 2, 6);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиШтатногоРасписания", "ИспользоватьБронированиеПозиций", 
		"Использовать бронирование позиций", "Кадровый учет", "Штатное расписание", "Ложь", 3, 2, 7);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиШтатногоРасписания", "ДнейСохраненияБрони", 
		"Количество дней, по истечении которых забронированные позиции будут выделены в отчете красным цветом", "Кадровый учет", "Штатное расписание", "0", 3, 2, 8);
	
	// Воинский учет	
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиВоинскогоУчета", "ИспользоватьВоинскийУчет", 
		"Ведется воинский учет", "Кадровый учет", "Воинский учет", "Ложь", 3, 3, 1);	
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиВоинскогоУчета", "ИспользоватьБронированиеГраждан", 
		"Ведется учет бронирования граждан на период мобилизации и на военное время", "Кадровый учет", "Воинский учет", "Ложь", 3, 3, 2);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиВоинскогоУчета", "ИспользуетсяТрудЛетноПодъемногоСостава", 
		"Есть должности, относящиеся к летно-подъемному составу", "Кадровый учет", "Воинский учет", "Ложь", 3, 3, 3);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиВоинскогоУчета", "ИспользуетсяТрудПлавсостава", 
		"Есть должности, относящиеся к плавсоставу", "Кадровый учет", "Воинский учет", "Ложь", 3, 3, 4);
	
	// Аттестации сотрудников	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		Модуль.ДобавитьПоказателиАттестации(ТаблицаПоказателей); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРазделуРасчетЗарплаты(ТаблицаПоказателей)
		
	НастройкиПрограммыБюджетногоУчреждения = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
	РаботаВБюджетномУчреждении = НастройкиПрограммыБюджетногоУчреждения.РаботаВБюджетномУчреждении;
	БазоваяВерсияКонфигурации = ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации();
	
	Если Не РаботаВБюджетномУчреждении Тогда
		Если Не БазоваяВерсияКонфигурации Тогда
			ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьНачислениеЗарплаты", 
				"Использовать программу для расчета заработной платы", "Расчет зарплаты", "", "Ложь", 4, 1, 1);
		Иначе
			ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьНачислениеЗарплаты", 
				"Использовать программу для расчета заработной платы", "Расчет зарплаты", "Прочие настройки расчета зарплаты", "Ложь", 4, 7, 1);
		КонецЕсли;		
	КонецЕсли;
		
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда	
		Если Не БазоваяВерсияКонфигурации Тогда
			ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьСтатьиФинансированияЗарплата", 
				"Использовать учет по статьям финансирования", "Расчет зарплаты", "", "Ложь", 4, 1, 2);
		Иначе
			ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьСтатьиФинансированияЗарплата", 
				"Использовать учет по статьям финансирования", "Расчет зарплаты", "Прочие настройки расчета зарплаты", "Ложь", 4, 7, 2);
		КонецЕсли;		
	КонецЕсли;
	
	Если Не БазоваяВерсияКонфигурации Тогда
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиСтатистикиПерсонала", "ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы", 
			"Предприятие социальной сферы", "Расчет зарплаты", "", "Ложь", 4, 1, 3);
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиСтатистикиПерсонала", "ФормаОтчетностиМониторингаРаботниковСоциальнойСферы", 
			"Вид формы отчетности по мониторингу", "Расчет зарплаты", "", "Значение(Перечисление.ВидыФормМониторингаРаботниковСоциальнойСферы.ПустаяСсылка)", 4, 1, 4);
	Иначе
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиСтатистикиПерсонала", "ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы", 
			"Предприятие социальной сферы", "Расчет зарплаты", "Прочие настройки расчета зарплаты", "Ложь", 4, 7, 3);
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиСтатистикиПерсонала", "ФормаОтчетностиМониторингаРаботниковСоциальнойСферы", 
			"Вид формы отчетности по мониторингу", "Расчет зарплаты", "Прочие настройки расчета зарплаты", "Значение(Перечисление.ВидыФормМониторингаРаботниковСоциальнойСферы.ПустаяСсылка)", 4, 7, 4);
	КонецЕсли;
	
	Если РаботаВБюджетномУчреждении Тогда
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиБюджетныхУчреждений", "ИспользоватьУчетВРазрезеИФО", 
			"Использовать учет в разрезе ИФО (источников финансового обеспечения)", "Расчет зарплаты", "", "Ложь", 4, 1, 5);
	КонецЕсли;
	
	Если Не БазоваяВерсияКонфигурации Тогда
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ВыполнятьРасчетЗарплатыПоПодразделениям", 
			"Расчет и выплата зарплаты выполняется по организации в целом", "Расчет зарплаты", "", "Ложь", 4, 1, 6);
	Иначе
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ВыполнятьРасчетЗарплатыПоПодразделениям", 
			"Расчет и выплата зарплаты выполняется по организации в целом", "Расчет зарплаты", "Прочие настройки расчета зарплаты", "Ложь", 4, 7, 5);
	КонецЕсли;  		
		
	ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "РассчитыватьДокументыПриРедактировании", 
		"Выполнять автоматический пересчет документов при их редактировании", "Расчет зарплаты", "", "Ложь", 4, 1, 7);
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДобавитьПоказательИспользоватьИндексациюЗаработка(ТаблицаПоказателей);
	Иначе
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьИндексациюЗаработка", 
			"Выполняется индексация заработка сотрудников", "Расчет зарплаты", "", "Ложь", 4, 1, 8);
	КонецЕсли;
		
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиЗаймовСотрудникам", "ИспользоватьЗаймыСотрудникам", 
		"Выдаются займы сотрудникам", "Расчет зарплаты", "", "Ложь", 4, 1, 9);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьНачисленияПоДоговорам", 
		"Регистрируются выплаты по договорам гражданско-правового характера", "Расчет зарплаты", "", "Ложь", 4, 1, 10);
		
	Если РаботаВБюджетномУчреждении Тогда
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьТарифныеСеткиПриРасчетеЗарплаты", 
			"Используются ПКГ и ПКУ", "Расчет зарплаты", "", "Ложь", 4, 1, 11);
	Иначе		
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьТарифныеСеткиПриРасчетеЗарплаты", 
			"Используются тарифные группы", "Расчет зарплаты", "", "Ложь", 4, 1, 11);
	КонецЕсли;	
	
	Если Не БазоваяВерсияКонфигурации Тогда
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьНесколькоТарифныхСтавок", 
			"Используется несколько тарифных ставок для одного сотрудника", "Расчет зарплаты", "", "Ложь", 4, 1, 12);
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьКраткосрочныеИзмененияОплатыТрудаВЗависимостиОтВыполняемойРаботы", 
			"Используются краткосрочные изменения оплаты труда в зависимости от выполняемой работы", "Расчет зарплаты", "", "Ложь", 4, 1, 13);
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиУчетаВремени", "ИспользоватьНесколькоВидовПлановогоВремени", 
			"Используется несколько видов времени в графике работы", "Расчет зарплаты", "", "Ложь", 4, 1, 14);
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиУчетаВремени", "ПроверятьСоответствиеФактическогоВремениПлановому", 
			"Проверять соответствие фактического времени плановому", "Расчет зарплаты", "", "Ложь", 4, 1, 15);
	Иначе
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьНесколькоТарифныхСтавок", 
			"Используется несколько тарифных ставок для одного сотрудника", "Расчет зарплаты", "Прочие настройки расчета зарплаты", "Ложь", 4, 7, 6);
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьКраткосрочныеИзмененияОплатыТрудаВЗависимостиОтВыполняемойРаботы", 
			"Используются краткосрочные изменения оплаты труда в зависимости от выполняемой работы", "Расчет зарплаты", "Прочие настройки расчета зарплаты", "Ложь", 4, 7, 7);
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиУчетаВремени", "ИспользоватьНесколькоВидовПлановогоВремени", 
			"Используется несколько видов времени в графике работы", "Расчет зарплаты", "Прочие настройки расчета зарплаты", "Ложь", 4, 7, 8);
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиУчетаВремени", "ПроверятьСоответствиеФактическогоВремениПлановому", 
			"Проверять соответствие фактического времени плановому", "Расчет зарплаты", "Прочие настройки расчета зарплаты", "Ложь", 4, 7, 9);
	КонецЕсли;
			
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьРегистрациюПрочихДоходов", 
		"Регистрируются прочие доходы физических лиц, не связанные с оплатой труда", "Расчет зарплаты", "", "Ложь", 4, 1, 16);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьВыплатыБывшимСотрудникам", 
		"Выплачиваются доходы бывшим сотрудникам предприятия", "Расчет зарплаты", "", "Ложь", 4, 1, 17);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьПризыПодарки", 
		"Выдаются подарки и призы сотрудникам предприятия", "Расчет зарплаты", "", "Ложь", 4, 1, 18);
		
	Если Не БазоваяВерсияКонфигурации Тогда
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ПереноситьДанныеВДругойУчетСреднегоЗаработка", 
			"Сведения для расчета общего среднего заработка принимать к учету для расчета пособий (и наоборот)", "Расчет зарплаты", "", "Ложь", 4, 1, 19);
	    ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ПорядокРасчетаСтоимостиЕдиницыВремени", 
			"При пересчете тарифной ставки сотрудника в стоимость часа (дня) использовать", "Расчет зарплаты", "", "Значение(Перечисление.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПустаяСсылка)", 4, 1, 20);
	Иначе
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ПереноситьДанныеВДругойУчетСреднегоЗаработка", 
			"Сведения для расчета общего среднего заработка принимать к учету для расчета пособий (и наоборот)", "Расчет зарплаты", "Прочие настройки расчета зарплаты", "Ложь", 4, 1, 10);
	    ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ПорядокРасчетаСтоимостиЕдиницыВремени", 
			"При пересчете тарифной ставки сотрудника в стоимость часа (дня) использовать", "Расчет зарплаты", "Прочие настройки расчета зарплаты", "Значение(Перечисление.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПустаяСсылка)", 4, 7, 11);
	КонецЕсли;		
			
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьИндивидуальныйГрафикПриСменеГрафикаРаботы", 
		"При изменении нормы времени из-за смены графика работы не с первого числа месяца, считать норму времени", "Расчет зарплаты", "", "Ложь", 4, 1, 21);
		
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "АвтоматическиОграничиватьИспользованиеДокументов", 
		"Автоматически защищать платежные документы от редактирования после выгрузки из системы", "Расчет зарплаты", "", "Ложь", 4, 1, 22);
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Модуль.ДобавитьПоказательИспользоватьГрантыНеоблагаемыеНДФЛ(ТаблицаПоказателей);
	КонецЕсли;
		
	// Почасовая оплата
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьУчетВремениСотрудниковВЧасах", 
		"Применение почасовой оплаты", "Расчет зарплаты", "Почасовая оплата", "Ложь", 4, 2, 1);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиУчетаВремени", "УчитыватьНочныеЧасы", 
		"Учитывать ночные часы", "Расчет зарплаты", "Почасовая оплата", "Ложь", 4, 2, 2);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиУчетаВремени", "УчитыватьВечерниеЧасы", 
		"Учитывать вечерние часы", "Расчет зарплаты", "Почасовая оплата", "Ложь", 4, 2, 3);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьОплатуСверхурочных", 
		"Учитывать сверхурочную работу", "Расчет зарплаты", "Почасовая оплата", "Ложь", 4, 2, 4);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьОплатуПереработокСуммированногоУчета", 
		"Учитывать переработки при суммированном учете времени", "Расчет зарплаты", "Почасовая оплата", "Ложь", 4, 2, 5);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиУчетаВремени", "УчитыватьВремяНаКормлениеРебенка", 
		"Дополнительные перерывы в работе для кормления ребенка", "Расчет зарплаты", "Почасовая оплата", "Ложь", 4, 2, 6);
		
	// Отпуска	
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьОтпускаУчебные", 
		"Учебные отпуска", "Расчет зарплаты", "Отпуска", "Ложь", 4, 3, 1);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС", 
		"Дополнительные отпуска гражданам, подвергшимся воздействию радиации вследствие катастрофы на Чернобыльской АЭС", "Расчет зарплаты", "Отпуска", "Ложь", 4, 3, 2);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьОтпускаБезОплаты", 
		"Отпуска без оплаты", "Расчет зарплаты", "Отпуска", "Ложь", 4, 3, 3);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьВнутрисменныеОтпускаБезОплаты", 
		"Отпуска без оплаты внутрисменные", "Расчет зарплаты", "Отпуска", "Ложь", 4, 3, 4);
		
	// Учет отсутствий	
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьОплатуКомандировок", 
		"Командировки", "Расчет зарплаты", "Учет отсутствий", "Ложь", 4, 4, 1);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьОплатуВнутрисменныхКомандировок", 
		"Внутрисменные командировки", "Расчет зарплаты", "Учет отсутствий", "Ложь", 4, 4, 2);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьОплатуПростоев", 
		"Простои", "Расчет зарплаты", "Учет отсутствий", "Ложь", 4, 4, 3);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьОплатуВнутрисменныхПростоев", 
		"Внутрисменные простои", "Расчет зарплаты", "Учет отсутствий", "Ложь", 4, 4, 4);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьОтгулы", 
		"Отгулы", "Расчет зарплаты", "Учет отсутствий", "Ложь", 4, 4, 5);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьВнутрисменныеОтгулы", 
		"Внутрисменные отгулы", "Расчет зарплаты", "Учет отсутствий", "Ложь", 4, 4, 6);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьУчетПрочихНевыходов", 
		"Прогулы и неявки", "Расчет зарплаты", "Учет отсутствий", "Ложь", 4, 4, 7);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьУчетВнутрисменныхПрочихНевыходов", 
		"Внутрисменные прогулы и неявки", "Расчет зарплаты", "Учет отсутствий", "Ложь", 4, 4, 8);

	// Прочие начисления	
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьНадбавкуЗаВредность", 
		"Надбавка за вредность", "Расчет зарплаты", "Прочие начисления", "Ложь", 4, 5, 1);
		
	Если РаботаВБюджетномУчреждении И ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты") Тогда
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьКвалификационнуюНадбавку", 
			"Используются квалификационные надбавки", "Расчет зарплаты", "Прочие начисления", "Ложь", 4, 5, 2);
	КонецЕсли;
		
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьОплатуПраздничныхИВыходных", 
		"Работа в праздничные или выходные дни", "Расчет зарплаты", "Прочие начисления", "Ложь", 4, 5, 3);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьСдельныйЗаработок", 
		"Сдельный заработок", "Расчет зарплаты", "Прочие начисления", "Ложь", 4, 5, 4);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьСовмещениеПрофессийДолжностей", 
		"Совмещение, временное исполнение обязанностей", "Расчет зарплаты", "Прочие начисления", "Ложь", 4, 5, 5);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьДоплатуДоСреднегоЗаработка", 
		"Доплата до среднего заработка", "Расчет зарплаты", "Прочие начисления", "Ложь", 4, 5, 6);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьДоплатуЗаДниБолезни", 
		"Доплата за дни болезни", "Расчет зарплаты", "Прочие начисления", "Ложь", 4, 5, 7);
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") Тогда	
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьДоплатуДоСохраняемогоДенежногоСодержанияЗаДниБолезни", 
			"Использовать доплату до сохраняемого денежного содержания за дни болезни", "Расчет зарплаты", "Прочие начисления", "Ложь", 4, 5, 8);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда	
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьМатериальнуюПомощь", 
			"Выплачивается материальная помощь сотрудникам", "Расчет зарплаты", "Прочие начисления", "Ложь", 4, 5, 9);
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьМатериальнуюПомощьПриОтпуске", 
			"Выплата материальной помощи к отпуску", "Расчет зарплаты", "Прочие начисления", "Ложь", 4, 5, 10);
	КонецЕсли;
	
	Если РаботаВБюджетномУчреждении Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДобавитьПоказателиМатериальнаяПомощь(ТаблицаПоказателей);
		КонецЕсли;
	КонецЕсли;

	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьДоходыВНатуральнойФорме", 
		"Регистрируются натуральные доходы", "Расчет зарплаты", "Прочие начисления", "Ложь", 4, 5, 11);

	// Удержания	
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьИсполнительныеЛисты", 
		"Удержания по исполнительным документам", "Расчет зарплаты", "Удержания", "Ложь", 4, 6, 1);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьПрофсоюзныеВзносы", 
		"Профсоюзные взносы", "Расчет зарплаты", "Удержания", "Ложь", 4, 6, 2);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьДобровольныеВзносыВНПФ", 
		"Добровольные страховые взносы в негосударственные ПФ", "Расчет зарплаты", "Удержания", "Ложь", 4, 6, 3);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиРасчетаЗарплатыРасширенный", "ИспользоватьДСВ", 
		"Добровольные страховые взносы на накопительную часть пенсии", "Расчет зарплаты", "Удержания", "Ложь", 4, 6, 4);

КонецПроцедуры

Процедура ПодготовитьДанныеПоРазделуУправлениеПерсоналом(ТаблицаПоказателей)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда 
	
		ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц", 
			"Структура предприятия", "Управление персоналом", "", "Ложь", 5, 1, 1);

		// Грейды	
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиГрейдов", "ИспользоватьГрейды", 
			"Используются грейды", "Управление персоналом", "Грейды", "Ложь", 5, 2, 1);
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиГрейдов", "ИспользоватьИндивидуальныеГрейды", 
			"Грейды сотрудников", "Управление персоналом", "Грейды", "Ложь", 5, 2, 2);
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиГрейдов", "ИспользоватьСозданиеГрейдов", 
			"Использовать инструмент """"Создание грейдов""""", "Управление персоналом", "Грейды", "Ложь", 5, 2, 3);
		
		// Ключевые показатели эффективности
		ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьКлючевыеПоказателиЭффективности", 
			"Используется оценка эффективности по ключевым показателям", "Управление персоналом", "Ключевые показатели эффективности", "Ложь", 5, 5, 1);

		// Льготы
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиЛьготСотрудников", "ИспользоватьЛьготыСотрудников", 
			"Предоставляются льготы сотрудникам", "Управление персоналом", "Льготы", "Ложь", 5, 6, 1);
		ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиЛьготСотрудников", "ИспользоватьИндивидуальныеЛьготыСотрудников", 
			"Предоставляются индивидуальные льготы сотрудникам", "Управление персоналом", "Льготы", "Ложь", 5, 6, 2);
			
	КонецЕсли;
		
	// Подбор персонала
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиПодбораПерсонала", "ИспользоватьПодборПерсонала", 
		"Использовать работу с вакансиями и кандидатами", "Управление персоналом", "Подбор персонала", "Ложь", 5, 3, 1);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиПодбораПерсонала", "ОткрытиеВакансииТребуетСогласования", 
		"Открытие вакансии требует согласования", "Управление персоналом", "Подбор персонала", "Ложь", 5, 3, 2);
	
	// // Адаптация, увольнение
	ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьАдаптациюУвольнение", 
		"Назначаются задачи адаптации и увольнения", "Управление персоналом", "Адаптация и увольнение", "Ложь", 5, 4, 1);
		
	// Обучение и развитие
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиОбученияРазвития", "ИспользоватьОбучениеРазвитиеСотрудников", 
		"Используются программы обучения и развития сотрудников", "Управление персоналом", "Обучение и развитие", "Ложь", 5, 7, 1);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиОбученияРазвития", "ИспользоватьУченическиеДоговоры", 
		"Оформляются ученические договоры", "Управление персоналом", "Обучение и развитие", "Ложь", 5, 7, 2);

	// Кадровый резерв
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиКадровогоРезерва", "ИспользоватьКадровыйРезерв", 
		"Ведется кадровый резерв", "Управление персоналом", "Кадровый резерв", "Ложь", 5, 8, 1);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиКадровогоРезерва", "ИспользоватьЗаявкиНаВключениеВКадровыйРезерв", 
		"Включение в списки резерва осуществляется по заявке руководителя", "Управление персоналом", "Кадровый резерв", "Ложь", 5, 8, 2);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиКадровогоРезерва", "ИспользоватьКадровыйРезервПоВидам", 
		"Кадровый резерв на одну позицию разделяется по видам", "Управление персоналом", "Кадровый резерв", "Ложь", 5, 8, 3);

	// Оценка персонала
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиОценкиПерсонала", "ИспользоватьОценкуПерсонала", 
		"Проводится оценка по методу 360°", "Управление персоналом", "Оценка персонала", "Ложь", 5, 9, 1);
	
	// Самообслуживание сотрудников
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиСамообслуживанияСотрудников", "ИспользоватьСамообслуживаниеСотрудников", 
		"Самообслуживание сотрудников", "Управление персоналом", "Самообслуживание сотрудников", "Ложь", 5, 10, 1);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиСамообслуживанияСотрудников", "ИспользоватьЗаявкиНаКомандировку", 
		"Сотрудники самостоятельно оформляют заявки на командировку", "Управление персоналом", "Самообслуживание сотрудников", "Ложь", 5, 10, 2);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиСамообслуживанияСотрудников", "ИспользоватьЗаявкиНаОтпуск", 
		"Сотрудники самостоятельно оформляют заявки на отпуск", "Управление персоналом", "Самообслуживание сотрудников", "Ложь", 5, 10, 3);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиСамообслуживанияСотрудников", "ИспользоватьСообщенияОбОтсутствии", 
		"Сотрудники самостоятельно оформляют сообщения о своем отсутствии", "Управление персоналом", "Самообслуживание сотрудников", "Ложь", 5, 10, 4);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиСамообслуживанияСотрудников", "ИспользоватьСозданиеПользователейРегламентнымЗаданием", 
		"Создавать учетные записи для вновь принятых сотрудников автоматически", "Управление персоналом", "Самообслуживание сотрудников", "Ложь", 5, 10, 5);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиСамообслуживанияСотрудников", "ИспользоватьРегламентноеЗаданиеДляЗапретаВходаВПрограммуУволеннымСотрудникам", 
		"Запрещать доступ в программу уволенным сотрудникам автоматически", "Управление персоналом", "Самообслуживание сотрудников", "Ложь", 5, 10, 6);

	// Охрана труда
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиСпециальнойОценкиУсловийТруда", "ИспользоватьСпециальнуюОценкуУсловийТруда", 
		"Использовать специальную оценку условий труда", "Управление персоналом", "Охрана труда", "Ложь", 5, 11, 1);
	ДобавитьПоказатель(ТаблицаПоказателей, "РегистрСведений.НастройкиНесчастныхСлучаевНаПроизводстве", "ИспользоватьНесчастныеСлучаиНаПроизводстве", 
		"Вести учет несчастных случаев на производстве", "Управление персоналом", "Охрана труда", "Ложь", 5, 11, 2);

КонецПроцедуры

Процедура ПодготовитьДанныеПоРазделуОсобенностиПредприятия(ТаблицаПоказателей)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.ДобавитьПоказателиБюджетныхУчреждений(ТаблицаПоказателей);
	КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#КонецЕсли
