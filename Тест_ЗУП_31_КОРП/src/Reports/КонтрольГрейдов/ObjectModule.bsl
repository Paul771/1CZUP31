#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий
	
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ИнициализироватьОтчет();

	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки();				   

	ДокументРезультат.Очистить();

	КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
	Если КлючВарианта = "КонтрольГрейдов" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КонтрольГрейдов";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		ПараметрИспользоватьШтатноеРасписание = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ИспользоватьШтатноеРасписание"));	
		Если ПараметрИспользоватьШтатноеРасписание <> Неопределено Тогда
			ПараметрИспользоватьШтатноеРасписание.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
			ПараметрИспользоватьШтатноеРасписание.Использование = Истина;
		КонецЕсли;
		
		ПараметрИспользоватьИндивидуальныеГрейды = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ИспользоватьИндивидуальныеГрейды"));	
		Если ПараметрИспользоватьИндивидуальныеГрейды <> Неопределено Тогда
			ПараметрИспользоватьИндивидуальныеГрейды.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеГрейды");
			ПараметрИспользоватьИндивидуальныеГрейды.Использование = Истина;
		КонецЕсли;
		
		ДанныеОтчета = Новый ДеревоЗначений;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ВывестиМакетКонтрольГрейдов(ДокументРезультат, ДанныеОтчета);
		
	ИначеЕсли КлючВарианта = "МатрицаГрейдов" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МатрицаГрейдов";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		ПараметрИспользоватьШтатноеРасписание = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ИспользоватьШтатноеРасписание"));	
		Если ПараметрИспользоватьШтатноеРасписание <> Неопределено Тогда
			ПараметрИспользоватьШтатноеРасписание.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
			ПараметрИспользоватьШтатноеРасписание.Использование = Истина;
		КонецЕсли;
		
		ПараметрИспользоватьИндивидуальныеГрейды = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ИспользоватьИндивидуальныеГрейды"));	
		Если ПараметрИспользоватьИндивидуальныеГрейды <> Неопределено Тогда
			ПараметрИспользоватьИндивидуальныеГрейды.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеГрейды");
			ПараметрИспользоватьИндивидуальныеГрейды.Использование = Истина;
		КонецЕсли;
		
		ДанныеОтчета = Новый ДеревоЗначений;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ВывестиМакетМатрицаГрейдов(ДокументРезультат, ДанныеОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОтчет() Экспорт
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
	
КонецПроцедуры

// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИнициализироватьОтчет();
	ЗначениеВДанныеФормы(ЭтотОбъект, Форма.Отчет);
	
КонецПроцедуры

Процедура УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета)
	
	ЗначениеПараметраПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметраПериод <> Неопределено Тогда
		
		УстановитьДатуОтчета = Ложь;
		
		Если ТипЗнч(ЗначениеПараметраПериод.Значение) = Тип("Неопределено") Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПараметраПериод.Значение) = Тип("Дата")
			И ЗначениеПараметраПериод.Значение = '00010101' Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли; 
		
		Если ТипЗнч(ЗначениеПараметраПериод.Значение) = Тип("СтандартнаяДатаНачала")
			И Дата(ЗначениеПараметраПериод.Значение) = '00010101' Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли; 
		
		Если УстановитьДатуОтчета Тогда
			ЗначениеПараметраПериод.Значение = ТекущаяДатаСеанса();
		КонецЕсли; 
		
		ДатаОтчета = Дата(ЗначениеПараметраПериод.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ФормированиеОтчетаПоМакетуКонтрольГрейдов

Процедура ВывестиМакетКонтрольГрейдов(ДокументРезультат, ДанныеОтчета)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.КонтрольГрейдов.ПФ_MXL_КонтрольГрейдов");
	
	ОбластьИмяГрейда = Макет.ПолучитьОбласть("ИмяГрейда");
	ОбластьОграничениеФОТ = Макет.ПолучитьОбласть("ОграничениеФОТ");
	ОбластьНачисленияЗаголовок = Макет.ПолучитьОбласть("НачисленияЗаголовок");
	ОбластьДанныеНачисления = Макет.ПолучитьОбласть("ДанныеНачисления");
	ОбластьЛьготыЗаголовок = Макет.ПолучитьОбласть("ЛьготыЗаголовок");
	ОбластьДанныеЛьготы = Макет.ПолучитьОбласть("ДанныеЛьготы");
	ОбластьСотрудникиШапка = Макет.ПолучитьОбласть("СотрудникиШапка");
	ОбластьСотрудникиСтрока = Макет.ПолучитьОбласть("СотрудникиСтрока");
	
	ОграничениеФОТГрейдов = Грейды.ОграничениеФОТГрейдов();
	НачисленияГрейдов = Грейды.НачисленияГрейдов();
	ПоказателиГрейдов = Грейды.ПоказателиГрейдов();
	РазмерНачисленийГрейдов = Грейды.РазмерНачисленийГрейдов();
	ЗначенияПоказателейГрейдов = Грейды.ЗначенияПоказателейГрейдов();
	
	Для Каждого ДанныеГрейда Из ДанныеОтчета.Строки Цикл 
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда 
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ТекущийЛист = Новый ТабличныйДокумент;
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
		ТекущийЛист.АвтоМасштаб = ДокументРезультат.АвтоМасштаб;
		
		ОбластьИмяГрейда.Параметры.Грейд = ДанныеГрейда.ГрейдНаименование;
		ДокументРезультат.Вывести(ОбластьИмяГрейда);
		ТекущийЛист.Вывести(ОбластьИмяГрейда);
		
		ТекстОграничениеФОТ = НСтр("ru = 'Ограничение ФОТ: %1'");
		ОграничениеФОТГрейда = ОграничениеФОТГрейдов[ДанныеГрейда.Грейд];
		Если ОграничениеФОТГрейда <> Неопределено Тогда 
			ПредставлениеОграничения = "" + ОграничениеФОТГрейда.ФОТМин + " - " + ОграничениеФОТГрейда.ФОТМакс;
			ТекстОграничениеФОТ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОграничениеФОТ, ПредставлениеОграничения);
		Иначе 
			ТекстОграничениеФОТ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОграничениеФОТ, НСтр("ru = 'нет'"));
		КонецЕсли;
		ОбластьОграничениеФОТ.Параметры.ОграничениеФОТ = ТекстОграничениеФОТ;
		ДокументРезультат.Вывести(ОбластьОграничениеФОТ);
		ТекущийЛист.Вывести(ОбластьОграничениеФОТ);
		
		НачисленияГрейда = НачисленияГрейдов[ДанныеГрейда.Грейд];
		ПоказателиГрейда = ПоказателиГрейдов[ДанныеГрейда.Грейд];
		ЗначенияПоказателейГрейда = ЗначенияПоказателейГрейдов[ДанныеГрейда.Грейд];
		
		Если НачисленияГрейда <> Неопределено Или ПоказателиГрейда <> Неопределено Тогда 
			ДокументРезультат.Вывести(ОбластьНачисленияЗаголовок);
			ТекущийЛист.Вывести(ОбластьНачисленияЗаголовок);
		КонецЕсли;
		
		ПараметрыНачисленийГрейда = Новый Соответствие;
		ИспользованиеПоказателейГрейда = Новый Соответствие;
		
		Если НачисленияГрейда <> Неопределено Тогда 
			Для Каждого ДанныеНачисления Из НачисленияГрейда Цикл 
				
				ПараметрыНачисления = Новый Структура("ИспользованиеРазрешено, РазмерМин, РазмерМакс");
				ЗаполнитьЗначенияСвойств(ПараметрыНачисления, ДанныеНачисления);
				ПараметрыНачисленийГрейда.Вставить(ДанныеНачисления.Начисление, ПараметрыНачисления);
				
				Если Не ДанныеНачисления.ИспользованиеРазрешено Тогда
					ТекстДанныеНачисления = НСтр("ru = '%1 - использование запрещено'");
					ТекстДанныеНачисления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстДанныеНачисления, ДанныеНачисления.Наименование);
					ОбластьДанныеНачисления.Параметры.ДанныеНачисления = ТекстДанныеНачисления;
					ДокументРезультат.Вывести(ОбластьДанныеНачисления);
					ТекущийЛист.Вывести(ОбластьДанныеНачисления);
					Продолжить;
				КонецЕсли;
				
				НачислениеИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ДанныеНачисления.Начисление);
				Если Не НачислениеИнфо.Рассчитывается Тогда
					Если ДанныеНачисления.РазмерМин = 0 И ДанныеНачисления.РазмерМакс = 0 Тогда 
						Продолжить;
					КонецЕсли;
					ТекстДанныеНачисления = НСтр("ru = '%1, %2 - %3'");
					ТекстДанныеНачисления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДанныеНачисления, 
						ДанныеНачисления.Наименование, ДанныеНачисления.РазмерМин, ДанныеНачисления.РазмерМакс);
					ОбластьДанныеНачисления.Параметры.ДанныеНачисления = ТекстДанныеНачисления;
					ДокументРезультат.Вывести(ОбластьДанныеНачисления);
					ТекущийЛист.Вывести(ОбластьДанныеНачисления);
					Продолжить;
				КонецЕсли;
				
				Если ЗначенияПоказателейГрейда = Неопределено Тогда 
					Продолжить;
				КонецЕсли;	
				ТекстПоказатели = "";
				Для Каждого ДанныеПоказателя Из НачислениеИнфо.Показатели Цикл 
					Если ДанныеПоказателя.ЗапрашиватьПриВводе Тогда 
						ЗначенияПоказателя = ЗначенияПоказателейГрейда[ДанныеПоказателя.Показатель];
						Если ЗначенияПоказателя <> Неопределено Тогда 
							Если ЗначенияПоказателя.ЗначениеМин = 0 И ЗначенияПоказателя.ЗначениеМакс = 0 Тогда 
								Продолжить;
							КонецЕсли;
							ТекстДанныеПоказателя = НСтр("ru = '%1: %2 - %3'");
							ТекстДанныеПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДанныеПоказателя, 
								Строка(ДанныеПоказателя.Показатель), ЗначенияПоказателя.ЗначениеМин, ЗначенияПоказателя.ЗначениеМакс);
							ТекстПоказатели = ТекстПоказатели + ?(ТекстПоказатели = "", "", ", ") + ТекстДанныеПоказателя;	
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;
				Если ТекстПоказатели = "" Тогда 
					Продолжить;
				КонецЕсли;	
				ТекстДанныеНачисления = НСтр("ru = '%1, %2'");
				ТекстДанныеНачисления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстДанныеНачисления, ДанныеНачисления.Наименование, ТекстПоказатели); 
				ОбластьДанныеНачисления.Параметры.ДанныеНачисления = ТекстДанныеНачисления;
				ДокументРезультат.Вывести(ОбластьДанныеНачисления);
				ТекущийЛист.Вывести(ОбластьДанныеНачисления);
				
			КонецЦикла;	
		КонецЕсли;
		
		Если ПоказателиГрейда <> Неопределено Тогда 
			Для Каждого ДанныеПоказателя Из ПоказателиГрейда Цикл 
				
				ИспользованиеПоказателейГрейда.Вставить(ДанныеПоказателя.Показатель, ДанныеПоказателя.ИспользованиеРазрешено);
				
				Если Не ДанныеПоказателя.ИспользованиеРазрешено Тогда
					ТекстДанныеПоказателя = НСтр("ru = '%1 - использование запрещено'");
					ТекстДанныеПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстДанныеПоказателя, ДанныеПоказателя.Наименование);
					ОбластьДанныеНачисления.Параметры.ДанныеНачисления = ТекстДанныеПоказателя;
					ДокументРезультат.Вывести(ОбластьДанныеНачисления);
					ТекущийЛист.Вывести(ОбластьДанныеНачисления);
					Продолжить;
				КонецЕсли;
				
				Если ЗначенияПоказателейГрейда = Неопределено Тогда 
					Продолжить;
				КонецЕсли;	
				ЗначенияПоказателя = ЗначенияПоказателейГрейда[ДанныеПоказателя.Показатель];
				Если ЗначенияПоказателя <> Неопределено Тогда 
					Если ЗначенияПоказателя.ЗначениеМин = 0 И ЗначенияПоказателя.ЗначениеМакс = 0 Тогда 
						Продолжить;
					КонецЕсли;
					ТекстДанныеПоказателя = НСтр("ru = '%1: %2 - %3'");
					ТекстДанныеПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДанныеПоказателя, 
						ДанныеПоказателя.Наименование, ЗначенияПоказателя.ЗначениеМин, ЗначенияПоказателя.ЗначениеМакс);
					ОбластьДанныеНачисления.Параметры.ДанныеНачисления = ТекстДанныеПоказателя;
					ДокументРезультат.Вывести(ОбластьДанныеНачисления);
					ТекущийЛист.Вывести(ОбластьДанныеНачисления);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьСотрудникиШапка);
		ТекущийЛист.Вывести(ОбластьСотрудникиШапка);
		
		Для Каждого ДанныеСотрудника Из ДанныеГрейда.Строки Цикл 
			
			ЗаполнитьЗначенияСвойств(ОбластьСотрудникиСтрока.Параметры, ДанныеСотрудника);
			
			РазмерФОТ = 0;
			
			ТекстДанныеНачислений = "";
			ТекстДанныеЛьгот = "";
			
			Для Каждого ДанныеНачисления Из ДанныеСотрудника.Строки Цикл
				
				Если Не ЗначениеЗаполнено(ДанныеНачисления.Начисление) Тогда 
					Продолжить;
				КонецЕсли;
				
				РазмерФОТ = РазмерФОТ + ДанныеНачисления.Размер;
				
				// Проверка запрета использования начисления.
				ПараметрыНачисленияГрейда = ПараметрыНачисленийГрейда[ДанныеНачисления.Начисление];
				Если ПараметрыНачисленияГрейда <> Неопределено И Не ПараметрыНачисленияГрейда.ИспользованиеРазрешено Тогда 
					НарушеныОграниченияГрейда = Истина;
				КонецЕсли;
				
				Если Не ДанныеНачисления.Рассчитывается Тогда
					
					ТекстДанныеНачисления = НСтр("ru = '%1, %2'");
					ТекстДанныеНачисления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстДанныеНачисления, ДанныеНачисления.НачислениеНаименование, ДанныеНачисления.Размер);
						
					// Проверка размера начисления.
					Если ПараметрыНачисленияГрейда <> Неопределено
						И Не (ПараметрыНачисленияГрейда.РазмерМакс = 0 И ПараметрыНачисленияГрейда.РазмерМин = 0) Тогда 
						Если ДанныеНачисления.Размер > ПараметрыНачисленияГрейда.РазмерМакс 
							Или ДанныеНачисления.Размер < ПараметрыНачисленияГрейда.РазмерМин Тогда
							НарушеныОграниченияГрейда = Истина;
						КонецЕсли;	
					КонецЕсли;
					
				Иначе 
					
					ТекстДанныеНачисления = ДанныеНачисления.НачислениеНаименование;
					ТекстПоказатели = "";
					КоличествоПоказателей = ДанныеНачисления.Строки.Количество();
					
					Для Каждого ДанныеПоказателя Из ДанныеНачисления.Строки Цикл
						
						Если Не ЗначениеЗаполнено(ДанныеПоказателя.Показатель) Тогда 
							Продолжить;
						КонецЕсли;
						
						// Проверка запрета использования показателя.
						Если ИспользованиеПоказателейГрейда[ДанныеПоказателя.Показатель] = Ложь Тогда 
							НарушеныОграниченияГрейда = Истина;
						КонецЕсли;
						
						// Проверка значения показателя.
						Если ЗначенияПоказателейГрейда <> Неопределено Тогда
							ЗначенияПоказателя = ЗначенияПоказателейГрейда[ДанныеПоказателя.Показатель];
							Если ЗначенияПоказателя <> Неопределено 
								И Не (ЗначенияПоказателя.ЗначениеМакс = 0 И ЗначенияПоказателя.ЗначениеМин = 0) Тогда 
								Если ДанныеПоказателя.Значение > ЗначенияПоказателя.ЗначениеМакс 
									Или ДанныеПоказателя.Значение < ЗначенияПоказателя.ЗначениеМин Тогда 
									НарушеныОграниченияГрейда = Истина;
								КонецЕсли;
							КонецЕсли;	
						КонецЕсли;
						
						Если КоличествоПоказателей > 1 Тогда 
							ТекстДанныеПоказателя = НСтр("ru = '%1: %2'");
							ТекстДанныеПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ТекстДанныеПоказателя, ДанныеПоказателя.ПоказательНаименование, ДанныеПоказателя.Значение);
						Иначе 
							ТекстДанныеПоказателя = ДанныеПоказателя.Значение;	
						КонецЕсли;		
						ТекстПоказатели = ТекстПоказатели + ?(ТекстПоказатели = "", "", ", ") + ТекстДанныеПоказателя;
						
					КонецЦикла;
					
					ТекстДанныеНачисления = ТекстДанныеНачисления + ?(ТекстПоказатели = "", "", ", ") + ТекстПоказатели;
					
				КонецЕсли;
				
				Если ДанныеНачисления.НачислениеЯвляетсяЛьготой Тогда 
					ТекстДанныеЛьгот = ТекстДанныеЛьгот + ?(ТекстДанныеЛьгот = "", "", Символы.ПС) + ТекстДанныеНачисления;
				Иначе 
					ТекстДанныеНачислений = ТекстДанныеНачислений + ?(ТекстДанныеНачислений = "", "", Символы.ПС) + ТекстДанныеНачисления;
				КонецЕсли;
				
			КонецЦикла;
			
			ОбластьСотрудникиСтрока.Параметры.Размер = РазмерФОТ;
			
			// Проверка ограничения ФОТ
			НарушеныОграниченияГрейда = Ложь;
			Если ОграничениеФОТГрейда <> Неопределено Тогда 
				Если РазмерФОТ > ОграничениеФОТГрейда.ФОТМакс 
					Или РазмерФОТ < ОграничениеФОТГрейда.ФОТМин Тогда
					НарушеныОграниченияГрейда = Истина;
				КонецЕсли;
			КонецЕсли;
			
			ЦветТекста = ?(НарушеныОграниченияГрейда, ЦветаСтиля.ЦветОсобогоТекста, Новый Цвет);
			ОбластьСотрудникиСтрока.Область("R1C1:R1C12").ЦветТекста = ЦветТекста;
			
			ОбластьСотрудникиСтрока.Параметры.ДанныеНачислений = ТекстДанныеНачислений;
			ОбластьСотрудникиСтрока.Параметры.ДанныеЛьгот = ТекстДанныеЛьгот;
			
			Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекущийЛист, ОбластьСотрудникиСтрока) Тогда
				
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				ДокументРезультат.Вывести(ОбластьСотрудникиШапка);
				
				ТекущийЛист = Новый ТабличныйДокумент;
				ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
				ТекущийЛист.АвтоМасштаб = ДокументРезультат.АвтоМасштаб;
				
				ТекущийЛист.Вывести(ОбластьСотрудникиШапка);
				
			КонецЕсли;
			
			ДокументРезультат.Вывести(ОбластьСотрудникиСтрока);
			ТекущийЛист.Вывести(ОбластьСотрудникиСтрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеОтчетаПоМакетуМатрицаГрейдов

Процедура ВывестиМакетМатрицаГрейдов(ДокументРезультат, ДанныеОтчета)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.КонтрольГрейдов.ПФ_MXL_МатрицаГрейдов");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаГрейда = Макет.ПолучитьОбласть("Шапка|ИмяГрейда");
	ОбластьШапкаИмяПодразделения = Макет.ПолучитьОбласть("Шапка|Подразделение");
	ОбластьИмяГрейда = Макет.ПолучитьОбласть("Грейд|ИмяГрейда");
	ОбластьДолжностиГрейда = Макет.ПолучитьОбласть("Грейд|Подразделение");
	
	ДокументРезультат.Вывести(ОбластьЗаголовок);
	
	ДанныеКолонок = Новый Массив;
	ДокументРезультат.Вывести(ОбластьШапкаГрейда);
	ВывестиШапку(ДокументРезультат, ДанныеОтчета.Строки[0], ОбластьШапкаИмяПодразделения, ДанныеКолонок);
	
	КоличествоСтрок = ДанныеОтчета.Строки.Количество();
	Для Сч = 1 По КоличествоСтрок - 1 Цикл
		ДанныеГрейда = ДанныеОтчета.Строки[Сч];
		ВывестиГрейд(ДокументРезультат, ДанныеГрейда, ОбластьИмяГрейда, ОбластьДолжностиГрейда, ДанныеКолонок);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиГрейд(ДокументРезультат, ДанныеГрейда, ОбластьИмяГрейда, ОбластьДолжностиГрейда, ДанныеКолонок)
	
	ОбластьИмяГрейда.Параметры.Грейд = ДанныеГрейда.ГрейдНаименование;
	ДокументРезультат.Вывести(ОбластьИмяГрейда);
	
	Сч = 0;
	КоличествоКолонок = ДанныеКолонок.Количество();
	
	ДокументРезультат.НачатьАвтогруппировкуКолонок();
	
	Для Каждого ДанныеОрганизации Из ДанныеГрейда.Строки Цикл
		
		Пока ДанныеКолонок[Сч].Подразделение <> ДанныеОрганизации.Организация И Сч < КоличествоКолонок Цикл
			ОбластьДолжностиГрейда.Параметры.Должности = "";
			ДокументРезультат.Присоединить(ОбластьДолжностиГрейда, ДанныеКолонок[Сч].Уровень, , Ложь);
			Сч = Сч + 1;
		КонецЦикла;
		
		ОбластьДолжностиГрейда.Параметры.Должности = ПредставлениеСпискаДолжностей(ДанныеОрганизации);
		ДокументРезультат.Присоединить(ОбластьДолжностиГрейда, 1, , Ложь);
		Сч = Сч + 1;
		ВывестиПодразделенияГрейда(ДокументРезультат, ДанныеОрганизации, ОбластьДолжностиГрейда, ДанныеКолонок, Сч);
		
	КонецЦикла;
	
	Пока Сч < КоличествоКолонок Цикл
		ОбластьДолжностиГрейда.Параметры.Должности = "";
		ДокументРезультат.Присоединить(ОбластьДолжностиГрейда, ДанныеКолонок[Сч].Уровень, , Ложь);
		Сч = Сч + 1;
	КонецЦикла;	
	
	ДокументРезультат.ЗакончитьАвтогруппировкуКолонок();
	
КонецПроцедуры 

Процедура ВывестиПодразделенияГрейда(ДокументРезультат, ДанныеОрганизации, ОбластьДолжностиГрейда, ДанныеКолонок, Сч)
	
	Если ДанныеОрганизации.Строки.Количество() = 0 Или ДанныеОрганизации.Строки[0].Должность <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоКолонок = ДанныеКолонок.Количество();
	
	Для Каждого ДанныеПодразделения Из ДанныеОрганизации.Строки Цикл
		
		Пока ДанныеКолонок[Сч].Подразделение <> ДанныеПодразделения.Подразделение И Сч < КоличествоКолонок Цикл
			ОбластьДолжностиГрейда.Параметры.Должности = "";
			ДокументРезультат.Присоединить(ОбластьДолжностиГрейда, ДанныеКолонок[Сч].Уровень, , Ложь);
			Сч = Сч + 1;
		КонецЦикла;
		
		ОбластьДолжностиГрейда.Параметры.Должности = ПредставлениеСпискаДолжностей(ДанныеПодразделения);
		ДокументРезультат.Присоединить(ОбластьДолжностиГрейда, ДанныеКолонок[Сч].Уровень, , Ложь);
		Сч = Сч + 1;
		ВывестиПодразделенияГрейда(ДокументРезультат, ДанныеПодразделения, ОбластьДолжностиГрейда, ДанныеКолонок, Сч);
		
	КонецЦикла;

КонецПроцедуры

Процедура ВывестиШапку(ДокументРезультат, ДанныеОрганизаций, ОбластьШапкаИмяПодразделения, ДанныеКолонок)
	
	ДокументРезультат.НачатьАвтогруппировкуКолонок();
	Для Каждого ДанныеОрганизации Из ДанныеОрганизаций.Строки Цикл
		ДанныеКолонок.Добавить(Новый Структура("Подразделение, Уровень", ДанныеОрганизации.Организация, 1));
		ОбластьШапкаИмяПодразделения.Параметры.Подразделение = ДанныеОрганизации.ОрганизацияНаименование;
		ДокументРезультат.Присоединить(ОбластьШапкаИмяПодразделения, 1, , Ложь);
		ВывестиПодразделения(ДокументРезультат, ДанныеОрганизации, 1, ОбластьШапкаИмяПодразделения, ДанныеКолонок);
	КонецЦикла;
	ДокументРезультат.ЗакончитьАвтогруппировкуКолонок();
	
КонецПроцедуры

Процедура ВывестиПодразделения(ДокументРезультат, ДанныеОрганизации, Уровень, ОбластьШапкаИмяПодразделения, ДанныеКолонок)
	
	Для Каждого ДанныеПодразделения Из ДанныеОрганизации.Строки Цикл
		ДанныеКолонок.Добавить(Новый Структура("Подразделение, Уровень", ДанныеПодразделения.Подразделение, Уровень + 1));
		ОбластьШапкаИмяПодразделения.Параметры.Подразделение = ДанныеПодразделения.ПодразделениеНаименование;
		ДокументРезультат.Присоединить(ОбластьШапкаИмяПодразделения, Уровень + 1, , Ложь);
		ВывестиПодразделения(ДокументРезультат, ДанныеПодразделения, Уровень + 1, ОбластьШапкаИмяПодразделения, ДанныеКолонок);
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеСпискаДолжностей(ДанныеОрганизации)
	
	СписокДолжностей = Новый СписокЗначений;
	
	ДобавитьСписокДолжностей(ДанныеОрганизации, СписокДолжностей);
	
	ПредставлениеСпискаДолжностей = "";
	
	Для Каждого ДанныеДолжности Из СписокДолжностей Цикл
		ПредставлениеСпискаДолжностей = ПредставлениеСпискаДолжностей 
			+ ?(ПредставлениеСпискаДолжностей = "", "", Символы.ПС) + ДанныеДолжности.Представление;
	КонецЦикла;
	
	Возврат ПредставлениеСпискаДолжностей;
	
КонецФункции

Процедура ДобавитьСписокДолжностей(ДанныеОрганизации, СписокДолжностей)
	
	Для Каждого ДанныеПодразделения Из ДанныеОрганизации.Строки Цикл
		Если ЗначениеЗаполнено(ДанныеПодразделения.Должность) Тогда
			Если СписокДолжностей.НайтиПоЗначению(ДанныеПодразделения.Должность) = Неопределено Тогда 
				СписокДолжностей.Добавить(ДанныеПодразделения.Должность, ДанныеПодразделения.ДолжностьНаименование);
			КонецЕсли;
		Иначе
			ДобавитьСписокДолжностей(ДанныеПодразделения, СписокДолжностей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
