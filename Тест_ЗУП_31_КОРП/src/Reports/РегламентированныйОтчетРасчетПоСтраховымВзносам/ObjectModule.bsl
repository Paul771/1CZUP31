#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Функция СформироватьАвтоматическиРеглОтчет(ПараметрыАвтоформирования, КорректирующийОтчет) Экспорт
															  
	ИмяФормы = ПараметрыАвтоформирования.ИмяФормыОтчета;														  
															  
	РазделыОтчета = РазделыРеглОтчета(ИмяФормы);
			
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	ПараметрыАвтоФормирования.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	
	ЗаполнитьРеглОтчет(ИмяФормы,
					   ПараметрыАвтоформирования,
					   КорректирующийОтчет,
					   РазделыОтчета,
					   ДанныеРеглОтчета);
		
	РазделыОтчета.Титульный.НомерКорректировки = ПараметрыАвтоФормирования.НомерКорректировки;
	РазделыОтчета.Титульный.КПП                = ПараметрыАвтоформирования.Организация.КПП;
	РазделыОтчета.Титульный.НалоговыйОрган     = ПараметрыАвтоформирования.Организация.КодНалоговогоОргана;
	                                                                              	
	РазделыОтчета.Титульный.Период =
		Формат(ДанныеРеглОтчета.СтруктураРеквизитовФормы.КодОтчетногоПериода["НеЗаполненКодФормыРеорганизации_"
			   + Месяц(ПараметрыАвтоформирования.ДатаОкончания)],
	 		   "ЧЦ=2; ЧВН=");
	РазделыОтчета.Титульный.ОтчетГод    = Формат(ПараметрыАвтоформирования.ДатаОкончания, "ДФ=гггг");
	РазделыОтчета.Титульный.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ВидДокумента = ?(КорректирующийОтчет, 1, 0);
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета = ПараметрыАвтоформирования.ДатаОкончания;
	
	ЗаполнитьСведенияОбОрганизации(ИмяФормы,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.ДатаПодписи,
								   РазделыОтчета.Титульный,
								   РазделыОтчета.ФизЛицо);
													  
	ДеревоСтраницОтчета = СтруктураСтраницОтчета(ИмяФормы);
	
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
													  
	ИзменитьНастройкиРазделов(ИмяФормы, РазделыОтчета, ДанныеРеглОтчета);
	                                                                      		
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ПараметрыАвтоформирования.ИсточникОтчета);
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", ПараметрыАвтоформирования.ИмяФормыОтчета);
	ПараметрыЗаписи.Вставить("Организация", ПараметрыАвтоформирования.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыЗаписи.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
	ПараметрыЗаписи.Вставить("Ошибки", ПараметрыАвтоформирования.Ошибки);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", 0);
	ПараметрыЗаписи.Вставить("Комментарий", "");
	ПараметрыЗаписи.Вставить("КодИФНС", РазделыОтчета.Титульный.НалоговыйОрган);
	ПараметрыЗаписи.Вставить("КПП", РазделыОтчета.Титульный.КПП);
	ПараметрыЗаписи.Вставить("СтруктураМногоуровневыхРазделов", ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("ВерсияФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", Ложь);
	ПараметрыЗаписи.Вставить("Автозаполнение", Ложь);
	ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", Неопределено);
	ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", Неопределено);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	ПараметрыЗаписи.Вставить("Вариант", ?(КорректирующийОтчет, 1, 0));
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыОтчета);
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", ДанныеРеглОтчета.СтруктураРеквизитовФормы.НаименованиеОтчета);
				
	Возврат ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи);
	
КонецФункции

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/" + Лев(Прав(СокрЛП(ИмяФормы), 7), 4));
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "Расчет по страховым взносам");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД", "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы11131М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы11132М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1114М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы18М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы19М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы110М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы110М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы21М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы321М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы322М1");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("КодОтчетногоПериода");
	
КонецПроцедуры

Процедура ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы1М1     = "П00001М1";
	СтруктураРеквизитовФормы.мИдГруппы1М2     = "П00001М2";
	СтруктураРеквизитовФормы.мИдГруппы11131М1 = "П11131М1";
	СтруктураРеквизитовФормы.мИдГруппы11132М1 = "П11132М1";
	СтруктураРеквизитовФормы.мИдГруппы1114М1  = "П01114М1";
	СтруктураРеквизитовФормы.мИдГруппы18М1    = "П00018М1";
	СтруктураРеквизитовФормы.мИдГруппы19М1    = "П00019М1";
	СтруктураРеквизитовФормы.мИдГруппы110М1   = "П00110М1";
	СтруктураРеквизитовФормы.мИдГруппы110М2   = "П00110М2";
	СтруктураРеквизитовФормы.мИдГруппы21М1    = "П00021М1";
	СтруктураРеквизитовФормы.мИдГруппы321М1   = "П00321М1";
	СтруктураРеквизитовФормы.мИдГруппы322М1   = "П00322М1";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П00001М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М106001");
	ИменаГраф.Добавить("П00001М107001");
	ИменаГраф.Добавить("П00001М107101");
	ИменаГраф.Добавить("П00001М107201");
	ИменаГраф.Добавить("П00001М107301");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы1М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00001М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М208001");
	ИменаГраф.Добавить("П00001М209001");
	ИменаГраф.Добавить("П00001М209101");
	ИменаГраф.Добавить("П00001М209201");
	ИменаГраф.Добавить("П00001М209301");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы1М2, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П11131М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П11131М100101");
	Для НомСтр = 1 По 5 Цикл
		Для НомКол = 1 По 5 Цикл
			ИменаГраф.Добавить("П11131М10" + НомСтр + "00" + НомКол);
		КонецЦикла;
	КонецЦикла;
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы11131М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П11132М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П11132М100101");
	ИменаГраф.Добавить("П11132М100201");
	ИменаГраф.Добавить("П11132М100301");
	Для НомСтр = 1 По 5 Цикл
		Для НомКол = 1 По 5 Цикл
			ИменаГраф.Добавить("П11132М10" + НомСтр + "00" + НомКол);
		КонецЦикла;
	КонецЦикла;
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы11132М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П01114М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П01114М100101");
	Для НомСтр = 1 По 5 Цикл
		Для НомКол = 1 По 5 Цикл
			ИменаГраф.Добавить("П01114М10" + НомСтр + "00" + НомКол);
		КонецЦикла;
	КонецЦикла;
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы1114М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00018М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00018М102001");
	ИменаГраф.Добавить("П00018М103001");
	ИменаГраф.Добавить("П00018М104001");
	ИменаГраф.Добавить("П00018М105001");
	ИменаГраф.Добавить("П00018М106001");
	ИменаГраф.Добавить("П00018М106002");
	ИменаГраф.Добавить("П00018М106003");
	ИменаГраф.Добавить("П00018М106004");
	ИменаГраф.Добавить("П00018М106005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы18М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00019М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00019М102001");
	ИменаГраф.Добавить("П00019М103001");
	ИменаГраф.Добавить("П00019М104001");
	ИменаГраф.Добавить("П00019М105001");
	ИменаГраф.Добавить("П00019М106001");
	ИменаГраф.Добавить("П00019М107001");
	ИменаГраф.Добавить("П00019М107002");
	ИменаГраф.Добавить("П00019М108001");
	ИменаГраф.Добавить("П00019М108002");
	ИменаГраф.Добавить("П00019М108003");
	ИменаГраф.Добавить("П00019М108004");
	ИменаГраф.Добавить("П00019М108005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы19М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00110М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00110М102001");
	ИменаГраф.Добавить("П00110М103001");
	ИменаГраф.Добавить("П00110М104001");
	ИменаГраф.Добавить("П00110М105001");
	ИменаГраф.Добавить("П00110М106001");
	ИменаГраф.Добавить("П00110М107001");
	ИменаГраф.Добавить("П00110М108001");
	ИменаГраф.Добавить("П00110М109001");
	ИменаГраф.Добавить("П00110М110001");
	ИменаГраф.Добавить("П00110М110002");
	ИменаГраф.Добавить("П00110М110003");
	ИменаГраф.Добавить("П00110М110004");
	ИменаГраф.Добавить("П00110М110005");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппы110М2);
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы110М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00110М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00110М211001");
	ИменаГраф.Добавить("П00110М212001");
	ИменаГраф.Добавить("П00110М213001");
	ИменаГраф.Добавить("П00110М214001");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы110М2, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00021М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00021М101001");
	ИменаГраф.Добавить("П00021М102001");
	ИменаГраф.Добавить("П00021М103001");
	ИменаГраф.Добавить("П00021М104001");
	ИменаГраф.Добавить("П00021М105001");
	ИменаГраф.Добавить("П00021М106001");
	ИменаГраф.Добавить("П00021М107001");
	ИменаГраф.Добавить("П00021М108001");
	ИменаГраф.Добавить("П00021М109001");
	ИменаГраф.Добавить("П00021М109002");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы21М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00321М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00321М119001");
	ИменаГраф.Добавить("П00321М120001");
	ИменаГраф.Добавить("П00321М121001");
	ИменаГраф.Добавить("П00321М122001");
	ИменаГраф.Добавить("П00321М123001");
	ИменаГраф.Добавить("П00321М124001");
	
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы321М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00322М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00322М126001");
	ИменаГраф.Добавить("П00322М127001");
	ИменаГраф.Добавить("П00322М128001");
	ИменаГраф.Добавить("П00322М129001");
	
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы322М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

Процедура ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
												СтруктураРеквизитовФормы,
												СтруктураМногоуровневыхРазделов) Экспорт
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	СтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы1М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы1М2);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Раздел1Прил1Подр1_1и1_2");
	ИменаПодчиненныхРазделов.Добавить("Раздел1Прил1Подр1_3_1");
	ИменаПодчиненныхРазделов.Добавить("Раздел1Прил1Подр1_3_2");
	ИменаПодчиненныхРазделов.Добавить("Раздел1Прил1Подр1_4");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	СтруктураРаздела.Вставить("Многостраничность");
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1Прил1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел1Прил1");
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подразделы 1.1, 1.2");
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1Прил1Подр1_1и1_2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы11131М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел1Прил1");
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 1.3.1");
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1Прил1Подр1_3_1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы11132М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел1Прил1");
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 1.3.2");
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1Прил1Подр1_3_2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы1114М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел1Прил1");
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 1.4");
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1Прил1Подр1_4", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1Прил2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1Прил3", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1Прил4", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1Прил5_6", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1Прил7", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы18М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1Прил8", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы19М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1Прил9", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы110М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1Прил10", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы21М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураМногоуровневыхРазделов.Вставить("Раздел2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы321М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы322М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Многостраничность");
	СтруктураМногоуровневыхРазделов.Вставить("Раздел3", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для каждого Элем Из СтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
														Элем.Ключ,
														СтруктураМногоуровневыхРазделов,
														ТабличныйДокумент,
														СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(ИмяФормы,
										   Элем.Ключ,
										   ТекВетка,
										   СтруктураМногоуровневыхРазделов,
										   ТабличныйДокумент,
										   СтруктураРеквизитовФормы);
		
		// Особая обработка текста в строках 020 и 110 Приложения 10 к Разделу 1.
		Если Элем.Ключ = "Раздел1Прил10" Тогда
			МнЧ_П00110М1 = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы110М1];
			МнЧ_П00110М1.Строки[0].Данные.Вставить("П00110М102001", "001");
			МнЧ_П00110М2 = МнЧ_П00110М1.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы110М2];
			МнЧ_П00110М2.Строки[0].Данные.Вставить("П00110М211001", "001");
		КонецЕсли;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, Новый УникальныйИдентификатор()));
	КонецЦикла;
		
КонецПроцедуры

Функция ДанныеТабличногоДокумента(ИмяФормы,
								  НаимРаздела,
								  СтруктураМногоуровневыхРазделов,
								  ТабличныйДокумент,
								  СтруктураРеквизитовФормы) Экспорт
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(СтруктураРеквизитовФормы,
																					ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
						ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

Процедура ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											 Знач ИмяРаздела,
											 Ветка,
											 СтруктураМногоуровневыхРазделов,
											 ТабличныйДокумент,
											 СтруктураРеквизитовФормы) Экспорт
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
															ИмяПодчРаздела,
															СтруктураМногоуровневыхРазделов,
															ТабличныйДокумент,
															СтруктураРеквизитовФормы);
									
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											   ИмяПодчРаздела,
											   ПодчВетка,
											   СтруктураМногоуровневыхРазделов,
											   ТабличныйДокумент,
											   СтруктураРеквизитовФормы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьОбычныеРазделы(ИмяФормы,
 										 СтруктураРеквизитовФормы,
							 			 СтруктураМногоуровневыхРазделов,
								 		 СтруктураДанныхРазделов,
										 МассивИменРазделов = Неопределено) Экспорт
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		МассивИменРазделов.Добавить("ФизЛицо");
		
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для Каждого ИмяРаздела Из МассивИменРазделов Цикл
				
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   СтруктураДанныхРазделов,
							   ТабличныйДокумент,
							   ИмяРаздела);
		
	КонецЦикла;
			
КонецПроцедуры

Процедура СохранитьДанныеРаздела(ИмяФормы,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 СтруктураДанныхРазделов,
								 ТабличныйДокумент,
								 НаимРаздела,
								 ВеткаРаздела = Неопределено) Экспорт
	
	// Многоуровневые разделы.
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для Каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
														НаимРаздела,
														СтруктураМногоуровневыхРазделов,
														ТабличныйДокумент,
														СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, Новый УникальныйИдентификатор()));
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		СтруктураДанныхРазделов["СтруктураДанных" + НаимРаздела]
			= ДанныеТабличногоДокумента(ИмяФормы,
										НаимРаздела,
		 						  		СтруктураМногоуровневыхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураСтраницОтчета(ИмяФормы) Экспорт
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));	
		
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "ФизЛицо";
	СтрокаУровня1.Представление      = "Сведения о физическом лице";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 0;
	СтрокаУровня1.ПоказатьСтраницу   = 0;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1Прил1";
	СтрокаУровня1.Представление      = "Приложение 1 к Разделу 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1Прил2";
	СтрокаУровня1.Представление      = "Приложение 2 к Разделу 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1Прил3";
	СтрокаУровня1.Представление      = "Приложение 3 к Разделу 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1Прил4";
	СтрокаУровня1.Представление      = "Приложение 4 к Разделу 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1Прил5_6";
	СтрокаУровня1.Представление      = "Приложения 5, 6 к Разделу 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1Прил7";
	СтрокаУровня1.Представление      = "Приложение 7 к Разделу 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1Прил8";
	СтрокаУровня1.Представление      = "Приложение 8 к Разделу 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1Прил9";
	СтрокаУровня1.Представление      = "Приложение 9 к Разделу 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1Прил10";
	СтрокаУровня1.Представление      = "Приложение 10 к Разделу 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция СтруктураДанныхРазделов(ИмяФормы) Экспорт
	
	СтруктураДанныхРазделов = Новый Структура;
	
	СтруктураДанныхРазделов.Вставить("СтруктураДанныхТитульный", Новый Структура);
	СтруктураДанныхРазделов.Вставить("СтруктураДанныхФизЛицо", Новый Структура);
	
	Возврат СтруктураДанныхРазделов;
	
КонецФункции	

Процедура ЗаполнитьЗначенияПоУмолчанию(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураДанныхРазделов) Экспорт
			
	Если СтруктураРеквизитовФормы.ИП Тогда
		СтруктураДанныхРазделов.СтруктураДанныхТитульный.ПоМесту = "120";
	Иначе
		СтруктураДанныхРазделов.СтруктураДанныхТитульный.ПоМесту = "214";
	КонецЕсли;
	
	ДеревоПрил1Раздела1 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Прил1"]);
	ДеревоПрил1Раздела1.Строки[0].Данные.Вставить("П000110000101", "01");
	ПоместитьВоВременноеХранилище(ДеревоПрил1Раздела1,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Прил1"]);
	
	ДеревоПрил2Раздела1 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Прил2"]);
	ДеревоПрил2Раздела1.Строки[0].Данные.Вставить("П000120000101", "2");
	ДеревоПрил2Раздела1.Строки[0].Данные.Вставить("П000120009001", "1");
	ДеревоПрил2Раздела1.Строки[0].Данные.Вставить("П000120009003", "1");
	ДеревоПрил2Раздела1.Строки[0].Данные.Вставить("П000120009005", "1");
	ДеревоПрил2Раздела1.Строки[0].Данные.Вставить("П000120009007", "1");
	ДеревоПрил2Раздела1.Строки[0].Данные.Вставить("П000120009009", "1");
	ПоместитьВоВременноеХранилище(ДеревоПрил2Раздела1,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Прил2"]);
	
КонецПроцедуры

Процедура ЗаполнитьКодОтчетногоПериода(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы.КодОтчетногоПериода = Новый Структура;
	
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_3",  51);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_6",  52);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_9",  53);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_12", 90);
	
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_3",  21);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_6",  31);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_9",  33);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_12", 34);
	
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("КодПоМесту124_3",  83);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("КодПоМесту124_6",  84);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("КодПоМесту124_9",  85);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("КодПоМесту124_12", 34);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 ДатаПодписи,
										 СтруктураДанныхТитульный,
										 СтруктураДанныхФизЛицо,
										 ВПрограммеИзмененаДатаПодписи = Ложь) Экспорт
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКВЭД";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
									СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			
			СтруктураДанныхТитульный.Области.ИНН.Значение = ИНН;
			СтруктураДанныхТитульный.Области.КПП.Значение = КПП;
			
			СтруктураДанныхТитульный.Области.НалоговыйОрган.Значение = КодНО;
			
			СтруктураДанныхТитульный.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
		
			СтруктураДанныхТитульный.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
			
			СтруктураДанныхТитульный.Области.ДатаПодписи.Значение = ДатаПодписи;
			
			ПоМесту = СокрЛП(СтруктураДанныхТитульный.Области.ПоМесту.Значение);
			
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			
			СтруктураДанныхТитульный.ИНН = ИНН;
			СтруктураДанныхТитульный.КПП = КПП;
			
			СтруктураДанныхТитульный.НалоговыйОрган = КодНО;
			
			СтруктураДанныхТитульный.НаимОрг = СокрЛП(НаименованиеОрганизации);
		
			СтруктураДанныхТитульный.ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
			
			СтруктураДанныхТитульный.ДатаПодписи = ДатаПодписи;
			
			ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = СокрЛП(НаименованиеОрганизации);
				
		СсылкаНаРегистрациюВНО = РеквизитЭлементаСправочника(ИмяФормы,
								 	СтруктураРеквизитовФормы.Организация);
		УстановитьКодПоОКТМОИКБКВРазделах1и2ПриАктивномТитульномЛисте(ИмяФормы,
																	  СсылкаНаРегистрациюВНО,
																	  СтруктураРеквизитовФормы,
																	  ПоМесту);
		
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		ИНН = СтруктураДанныхТитульный.Области.ИНН.Значение;
				
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		ИНН = СтруктураДанныхТитульный.ИНН;
				
	КонецЕсли;	
	
	Если СтруктураРеквизитовФормы.ИП
	   И НЕ ЗначениеЗаполнено(ИНН) Тогда
		
		СтрокаСведений = "ДатаРожд, МестоРожд, Гражд, КодУдЛичн, ОрганВыданУдЛичн, СерияУдЛичн, НомерУдЛичн, ДатаУдЛичн,
			|ИндексМЖ, КодСубъектМЖ, РайонМЖ, ГородМЖ, НПунктМЖ, УлицаМЖ, ДомМЖ, КорпусМЖ, КвартираМЖ";
		
		СведенияОФизЛице = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
								СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		Если СведенияОФизЛице.Свойство("ДатаРожд") Тогда
			СтруктураДанныхФизЛицо.ДатаРождения
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.ДатаРожд), СведенияОФизЛице.ДатаРожд, '00010101');
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("МестоРожд") Тогда
			СтруктураДанныхФизЛицо.МестоРождения
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.МестоРожд), СокрЛП(СведенияОФизЛице.МестоРожд), "");
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("Гражд") Тогда
			СтруктураДанныхФизЛицо.КодСтраныГражданства
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.Гражд), СокрЛП(СведенияОФизЛице.Гражд), "");
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("КодУдЛичн") Тогда
			СтруктураДанныхФизЛицо.КодВидаДокумента
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.КодУдЛичн), СокрЛП(СведенияОФизЛице.КодУдЛичн), "");
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("СерияУдЛичн") И СведенияОФизЛице.Свойство("НомерУдЛичн") Тогда
			СерУдЛичн = ?(ЗначениеЗаполнено(СведенияОФизЛице.СерияУдЛичн), СокрЛП(СведенияОФизЛице.СерияУдЛичн), "");
			НомУдЛичн = ?(ЗначениеЗаполнено(СведенияОФизЛице.НомерУдЛичн), СокрЛП(СведенияОФизЛице.НомерУдЛичн), "");
			СтруктураДанныхФизЛицо.СерияДокумента = СерУдЛичн;
			СтруктураДанныхФизЛицо.НомерДокумента = НомУдЛичн;
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("ОрганВыданУдЛичн") Тогда
			СтруктураДанныхФизЛицо.КемВыданДокумент
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.ОрганВыданУдЛичн), СокрЛП(СведенияОФизЛице.ОрганВыданУдЛичн), "");
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("ДатаУдЛичн") Тогда
			СтруктураДанныхФизЛицо.ДатаВыдачи
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.ДатаУдЛичн), СведенияОФизЛице.ДатаУдЛичн, '00010101');
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("ИндексМЖ") Тогда
			СтруктураДанныхФизЛицо.АдресИндекс
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.ИндексМЖ), СокрЛП(СведенияОФизЛице.ИндексМЖ), "");
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("КодСубъектМЖ") Тогда
			СтруктураДанныхФизЛицо.АдресКодРегиона
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.КодСубъектМЖ), СокрЛП(СведенияОФизЛице.КодСубъектМЖ), "");
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("РайонМЖ") Тогда
			СтруктураДанныхФизЛицо.АдресРайон
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.РайонМЖ), СокрЛП(СведенияОФизЛице.РайонМЖ), "");
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("ГородМЖ") Тогда
			СтруктураДанныхФизЛицо.АдресГород
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.ГородМЖ), СокрЛП(СведенияОФизЛице.ГородМЖ), "");
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("НПунктМЖ") Тогда
			СтруктураДанныхФизЛицо.АдресНаселенныйПункт
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.НПунктМЖ), СокрЛП(СведенияОФизЛице.НПунктМЖ), "");
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("УлицаМЖ") Тогда
			СтруктураДанныхФизЛицо.АдресУлица
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.УлицаМЖ), СокрЛП(СведенияОФизЛице.УлицаМЖ), "");
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("ДомМЖ") Тогда
			СтруктураДанныхФизЛицо.АдресНомерДома
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.ДомМЖ), СокрЛП(СведенияОФизЛице.ДомМЖ), "");
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("КорпусМЖ") Тогда
			СтруктураДанныхФизЛицо.АдресНомерКорпуса
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.КорпусМЖ), СокрЛП(СведенияОФизЛице.КорпусМЖ), "");
		КонецЕсли;
		
		Если СведенияОФизЛице.Свойство("КвартираМЖ") Тогда
			СтруктураДанныхФизЛицо.АдресНомерКвартиры
			= ?(ЗначениеЗаполнено(СведенияОФизЛице.КвартираМЖ), СокрЛП(СведенияОФизЛице.КвартираМЖ), "");
		КонецЕсли;
		
	ИначеЕсли НЕ СтруктураРеквизитовФормы.ИП Тогда
		
		СтруктураДанныхФизЛицо.ДатаРождения = '00010101';
		СтруктураДанныхФизЛицо.МестоРождения = "";
		СтруктураДанныхФизЛицо.КодСтраныГражданства = "";
		СтруктураДанныхФизЛицо.КодВидаДокумента = "";
		СтруктураДанныхФизЛицо.СерияДокумента = "";
		СтруктураДанныхФизЛицо.НомерДокумента = "";
		СтруктураДанныхФизЛицо.КемВыданДокумент = "";
		СтруктураДанныхФизЛицо.ДатаВыдачи = '00010101';
		СтруктураДанныхФизЛицо.АдресИндекс = "";
		СтруктураДанныхФизЛицо.АдресКодРегиона = "";
		СтруктураДанныхФизЛицо.АдресРайон = "";
		СтруктураДанныхФизЛицо.АдресГород = "";
		СтруктураДанныхФизЛицо.АдресНаселенныйПункт = "";
		СтруктураДанныхФизЛицо.АдресУлица = "";
		СтруктураДанныхФизЛицо.АдресНомерДома = "";
		СтруктураДанныхФизЛицо.АдресНомерКорпуса = "";
		СтруктураДанныхФизЛицо.АдресНомерКвартиры = "";
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
								?(ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент"),
								 			  СтруктураДанныхТитульный.Области.ОКВЭД.Значение,
											  				   СтруктураДанныхТитульный.ОКВЭД));
	
	ЗаполнитьСведенияОПодписантах(ИмяФормы,
								  СтруктураРеквизитовФормы,
								  СтруктураДанныхТитульный,
								  ДатаПодписи);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах(ИмяФормы,
										СтруктураРеквизитовФормы,
										СтруктураДанныхТитульный,
										ДатаПодписи) Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
			
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		КодНО = СокрЛП(СтруктураДанныхТитульный.Области.НалоговыйОрган.Значение);
		КПП   = СокрЛП(СтруктураДанныхТитульный.Области.КПП.Значение);
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		КодНО = СокрЛП(СтруктураДанныхТитульный.НалоговыйОрган);
		КПП   = СокрЛП(СтруктураДанныхТитульный.КПП);
		
	КонецЕсли;	

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
								СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
										СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук,
																				  СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		// Подписант - представитель.
	    Подписант 							 = СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 				 = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		СтруктураДанныхТитульный.Области.ПрПодп.Значение       = ТипПодписанта;
		СтруктураДанныхТитульный.Области.ОргПодписант.Значение = Подписант;
		СтруктураДанныхТитульный.Области.ОргУп.Значение        = НаименованиеОрганизацииПредставителя;
		СтруктураДанныхТитульный.Области.ДокУпПред.Значение    = ДокументПредставителя;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		СтруктураДанныхТитульный.ПрПодп       = ТипПодписанта;
		СтруктураДанныхТитульный.ОргПодписант = Подписант;
		СтруктураДанныхТитульный.ОргУп        = НаименованиеОрганизацииПредставителя;
		СтруктураДанныхТитульный.ДокУпПред    = ДокументПредставителя;
		
	КонецЕсли;
			
КонецПроцедуры

Функция РеквизитЭлементаСправочника(ИмяФормы, Ссылка) Экспорт
	
	Если Ссылка.Метаданные().Реквизиты.Найти("РегистрацияВНалоговомОргане") <> Неопределено Тогда
		Возврат Ссылка.РегистрацияВНалоговомОргане;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция РазделыРеглОтчета(ИмяФормы) Экспорт
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура);
	РазделыОтчета.Вставить("ФизЛицо",   Новый Структура);
	РазделыОтчета.Вставить("ДанныеМногоуровневыхРазделов", Новый Структура);
	
	Возврат РазделыОтчета;
	
КонецФункции

Функция ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) Экспорт
	
	ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
				
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ПараметрыЗаписи.ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = ПараметрыЗаписи.НаименованиеОтчета;
	ДокументРегламентированныйОтчет.ДатаНачала               = ПараметрыЗаписи.ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ПараметрыЗаписи.ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = Перечисления.Периодичность.Квартал;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ПараметрыЗаписи.ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = ПараметрыЗаписи.Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ПараметрыЗаписи.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ПараметрыЗаписи.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ПараметрыЗаписи.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ПараметрыЗаписи.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ПараметрыЗаписи.КодИФНС;
	ДокументРегламентированныйОтчет.КПП                      = ПараметрыЗаписи.КПП;
	ДокументРегламентированныйОтчет.Вид                      = ПараметрыЗаписи.Вариант;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.
															   ПредставлениеВидаДокумента(
															   ДокументРегламентированныйОтчет.Вид);
		
	ПоказателиОтчета = Новый Структура;
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", ПараметрыЗаписи.РазделыОтчета.Титульный);
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаФизЛицо",   ПараметрыЗаписи.РазделыОтчета.ФизЛицо);
	
	СписокСохранения = Новый Структура;
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для Каждого Элем Из ПараметрыЗаписи.СтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				ПараметрыЗаписи.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
		
	СписокСохранения.Вставить("ВерсияФормы",                 ПараметрыЗаписи.ВерсияФормы);
	СписокСохранения.Вставить("ФлОтклВыборЗначений",         ПараметрыЗаписи.ФлОтклВыборЗначений);
	СписокСохранения.Вставить("Автозаполнение",              ПараметрыЗаписи.Автозаполнение);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", ПараметрыЗаписи.ПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПодсчетСтраниц", 			 ПараметрыЗаписи.ФлПодсчетСтраниц);
		
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(
												 ПараметрыЗаписи.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		ДокументРегламентированныйОтчет.Разблокировать();
						
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
		Возврат Ложь;
		
	КонецПопытки;
			
	Возврат Истина;
	
КонецФункции

Процедура УстановитьКодПоОКТМОИКБКВРазделах1и2ПриАктивномТитульномЛисте(ИмяФормы,
																		СсылкаНаРегистрациюВНО,
																		СтруктураРеквизитовФормы,
																		ПоМесту) Экспорт
	
	Если СсылкаНаРегистрациюВНО <> Неопределено Тогда
		ОКТМО = СсылкаНаРегистрациюВНО.КодПоОКТМО;
	Иначе
		ОКТМО = "";
	КонецЕсли;
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	ДеревоРаздела.Строки[0].Данные.Вставить("П000010001001", ОКТМО);
	
	ДеревоРаздела.Строки[0].Данные.Вставить("П000010002001", "18210202010061010160");
	ДеревоРаздела.Строки[0].Данные.Вставить("П000010004001", "18210202101081013160");
	ДеревоРаздела.Строки[0].Данные.Вставить("П000010010001", "18210202090071010160");
	
	ПоместитьВоВременноеХранилище(ДеревоРаздела,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	Если ПоМесту = "124" ИЛИ ПоМесту = "240" Тогда
		
		ДеревоРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
		
		ДеревоРаздела.Строки[0].Данные.Вставить("П000020001001", ОКТМО);
		
		ДеревоРаздела.Строки[0].Данные.Вставить("П000020002001", "18210202140061110160");
		ДеревоРаздела.Строки[0].Данные.Вставить("П000020004001", "18210202103081013160");
		
		ПоместитьВоВременноеХранилище(ДеревоРаздела,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьМногоуровневыйРаздел(ИмяФормы,
											   СтруктураРеквизитовФормы,
											   СтруктураМногоуровневыхРазделов,
											   ИмяРаздела) Экспорт
	
	УдалитьИзВременногоХранилища(
	 СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанныхРаздела = Новый ДеревоЗначений;
	ДеревоДанныхРаздела.Колонки.Добавить("Данные");
	ДеревоДанныхРаздела.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
		
	ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
			
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
													ИмяРаздела,
													СтруктураМногоуровневыхРазделов,
													ТабличныйДокумент,
													СтруктураРеквизитовФормы);
	
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	ИнициализироватьПодчиненныеРазделы(ИмяФормы,
									   ИмяРаздела,
									   ТекВетка,
									   СтруктураМногоуровневыхРазделов,
			 						   ТабличныйДокумент,
									   СтруктураРеквизитовФормы);
	
	// Особая обработка текста в строках 020 и 110 Приложения 10 к Разделу 1.
	Если ИмяРаздела = "Раздел1Прил10" Тогда
		МнЧ_П00110М1 = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы110М1];
		МнЧ_П00110М1.Строки[0].Данные.Вставить("П00110М102001", "001");
		МнЧ_П00110М2 = МнЧ_П00110М1.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы110М2];
		МнЧ_П00110М2.Строки[0].Данные.Вставить("П00110М211001", "001");
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела,
	ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, Новый УникальныйИдентификатор()));
			
КонецПроцедуры

Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяФормы,
																		  СтруктураРеквизитовФормы,
																		  ТабличныйДокумент,
																		  ИмяГруппы,
																		  ДеревоДанных,
																		  Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты
		 + РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число))
		 <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
			 ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчет(ИмяФормы,
							 ПараметрыАвтоформирования,
							 КорректирующийОтчет,
							 РазделыОтчета,
							 ДанныеРеглОтчета)
		
	ИсточникОтчета = ПараметрыАвтоформирования.ИсточникОтчета;
	ИмяФормыОтчета = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	Организация = ПараметрыАвтоформирования.Организация;
			
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ДопПараметры.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
		
	ДанныеРеглОтчета.Вставить("СтруктураРеквизитовФормы");
	ДанныеРеглОтчета.Вставить("СтруктураМногоуровневыхРазделов");
	
	СтруктураДанныхРазделов = СтруктураДанныхРазделов(ИмяФормы);
		
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ЗаполнитьКодОтчетногоПериода(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ИнициализироватьМногострочныеЧасти(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
			
	ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
										  ДанныеРеглОтчета.СтруктураРеквизитовФормы,
										  ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
	
	ИнициализироватьОбычныеРазделы(ИмяФормы,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов,
								   СтруктураДанныхРазделов);
														  
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация = ПараметрыАвтоформирования.Организация;
													  
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
								  							ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация);
													  
	ЗаполнитьЗначенияПоУмолчанию(ИмяФормы,
								 ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								 СтруктураДанныхРазделов);
														  
	РазделыОтчета.Титульный = СтруктураДанныхРазделов.СтруктураДанныхТитульный;
	РазделыОтчета.ФизЛицо   = СтруктураДанныхРазделов.СтруктураДанныхФизЛицо;													  
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             ПараметрыАвтоформирования.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыОтчета.Вставить("НомерКорректировки",      ПараметрыАвтоформирования.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",             ПараметрыАвтоформирования.ДатаПодписи);
		
	Контейнер = Новый Структура;
	Контейнер.Вставить("Титульный", РазделыОтчета.Титульный);
	Контейнер.Вставить("ФизЛицо",   РазделыОтчета.ФизЛицо);
	
	Для Каждого Раздел Из ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов Цикл
		
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			
			Контейнер.Вставить(Раздел.Ключ, ПолучитьИзВременногоХранилища(
			ДанныеРеглОтчета.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]));
			
			Если Раздел.Ключ = "Раздел3" Тогда
				
				Если НЕ ДанныеРеглОтчета.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство("П000030004001") Тогда
					
					// Очистка строки 040 раздела 3 в случае, если она не заполняется потребителем.
					ДеревоРаздела = Контейнер["Раздел3"];
					
					Для Инд = 0 По ДеревоРаздела.Строки.Количество() - 1 Цикл
						
						ДеревоРаздела.Строки[Инд].Данные.Вставить("П000030004001", "");
						
					КонецЦикла;
					
				Конецесли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
			
	Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
	   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
		
		ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы,
										  Контейнер,
										  ПараметрыАвтоформирования.ВнешниеДанные);
					
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Приемник, Источник)
	
	 // Код тарифа плательщика.
	 Приемник.Раздел1Прил1.Строки[0].Данные.П000110000101 = Источник.Раздел1Прил1.КодТарифаПлательщика;
	
КонецПроцедуры

Функция ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи)
			
	Если НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет = Неопределено Тогда
		
		Если ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
		   И НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет.Пустая() Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет.ПолучитьОбъект();
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
						
		ИначеЕсли ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
						
		Иначе
								
			РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный тип входящего параметра (%1) при автоматическом формировании формы %2'"),
						ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет),  ПараметрыЗаписи.НаименованиеОтчета));			
						
			Возврат Неопределено;
			
		КонецЕсли
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
		
		ДокументРегламентированныйОтчет.Дата = ПараметрыЗаписи.ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
		
	ПараметрыЗаписи.СохраняемыйРеглОтчет = ДокументРегламентированныйОтчет;
		
	Если ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Процедура ИзменитьНастройкиРазделов(ИмяФормы, РазделыОтчета, ДанныеРеглОтчета)
	
	Если ДанныеРеглОтчета.СтруктураРеквизитовФормы.ИП Тогда
		
		ИзменитьНастройкиРазделаВДеревеРазделов(
			ИмяФормы, ДанныеРеглОтчета.ДеревоСтраницОтчета, "ФизЛицо", 1);
		
		ИзменитьНастройкиРазделаВДеревеРазделов(
			ИмяФормы, ДанныеРеглОтчета.ДеревоСтраницОтчета, "Раздел1Прил8", 1);
		
	Иначе
		
		ИзменитьНастройкиРазделаВДеревеРазделов(
			ИмяФормы, ДанныеРеглОтчета.ДеревоСтраницОтчета, "ФизЛицо", 0);
		
		ИзменитьНастройкиРазделаВДеревеРазделов(
			ИмяФормы, ДанныеРеглОтчета.ДеревоСтраницОтчета, "Раздел1Прил8", 0);
						
		ИнициализироватьМногоуровневыйРаздел(
			ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы,
			ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов,
			"Раздел1Прил8");
		
	КонецЕсли;
	
	Если РазделыОтчета.Титульный.ПоМесту = "124"
		ИЛИ РазделыОтчета.Титульный.ПоМесту = "240" Тогда
		
		ИзменитьНастройкиРазделаВДеревеРазделов(
			ИмяФормы, ДанныеРеглОтчета.ДеревоСтраницОтчета, "Раздел2", 1);
		
	Иначе
		
		ИзменитьНастройкиРазделаВДеревеРазделов(
			ИмяФормы, ДанныеРеглОтчета.ДеревоСтраницОтчета, "Раздел2", 0);
		
		ИнициализироватьМногоуровневыйРаздел(
			ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы,
			ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов,
			"Раздел2");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьНастройкиРазделаВДеревеРазделов(ИмяФормы,
												  ДеревоСтраницОтчета,
												  ИмяРаздела,
												  ВариантНастроек)
	
	Для Каждого СтраницаНастроек Из ДеревоСтраницОтчета.Строки Цикл
		
		Если СтраницаНастроек.ИмяСтраницы = ИмяРаздела Тогда
			
			СтраницаНастроек.ПоказатьСтраницу = ВариантНастроек;
			СтраницаНастроек.ВыводНаПечать    = ВариантНастроек;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
					
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы	      = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
	
	ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
	
	ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
									      СтруктураРеквизитовФормы,
										  СтруктураМногоуровневыхРазделов);
														  
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
															  
	СформироватьСтруктуруПоказателей(ИмяФормы,
									 ДанныеОтчета,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИмяФормы,
														ДанныеОтчета,
														СтруктураРеквизитовФормы);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
	
	Если НЕ ПроверитьВозможностьВыгрузки(ИмяФормы,
										 ПараметрыВыгрузки,
										 ДеревоВыгрузки,
										 РезультатВыгрузки,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов) Тогда
		
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ЗаполнитьДанными(ИмяФормы,
					 ДанныеОтчета,
					 ПараметрыВыгрузки,
					 ДеревоВыгрузки,
					 РезультатВыгрузки,
					 СтруктураРеквизитовФормы,
					 СтруктураМногоуровневыхРазделов);
										
	КодировкаФайлаВыгрузки = "windows-1251";									
										
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы,
											 ДеревоВыгрузки,
											 ПараметрыВыгрузки,
											 КодировкаФайлаВыгрузки);
			    	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "РасчетПоСтраховымВзносам");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
		
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы,
										   СтруктураМногоуровневыхРазделов) Экспорт
	
	ДанныеОтчета = Новый Структура;
			
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы,
											СтруктураРеквизитовФормы,
											СтруктураМногоуровневыхРазделов);
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		
		ДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
			
	КонецЦикла;
	
	Для Каждого Раздел Из СтруктураМногоуровневыхРазделов Цикл
		
		ДанныеОтчета.Вставить(Раздел.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СохраненныеДанныеОтчета(ИмяФормы,
								СтруктураРеквизитовФормы,
								СтруктураМногоуровневыхРазделов) Экспорт
		
	СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
		ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
														  СохраненныеДанныеОтчета,
														  СтруктураРеквизитовФормы,
														  СтруктураМногоуровневыхРазделов);
	КонецЕсли;
	
	ДеревоРаздела = СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел3;
	
	Если НЕ ДеревоРаздела.Строки[0].Данные.Свойство("П000030004001") Тогда
		// Заполнение строки 040 раздела 3 (случай сохраненных данных отчета предыдущей версии).
		ЗаполнитьСтроку040Раздела3(ИмяФормы,
								   ДеревоРаздела,
								   СтруктураРеквизитовФормы,
								   СтруктураМногоуровневыхРазделов);
		СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Вставить("Раздел3", ДеревоРаздела);
	КонецЕсли;
		
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

Процедура ЗаполнитьСтроку040Раздела3(ИмяФормы,
									 ДеревоРаздела,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов) Экспорт
	
	ЗаполненРаздел = ЗаполненРаздел(ИмяФормы,
									ДеревоРаздела,
									"Раздел3",
									СтруктураРеквизитовФормы,
									СтруктураМногоуровневыхРазделов);
		
	Для Инд = 0 По ДеревоРаздела.Строки.Количество() - 1 Цикл
		Если ЗаполненРаздел Тогда
			ДеревоРаздела.Строки[Инд].Данные.Вставить("П000030004001", Формат(Инд + 1, "ЧГ="));
		Иначе
			ДеревоРаздела.Строки[Инд].Данные.Вставить("П000030004001", "");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСтруктуруПараметров(ИмяФормы,
										ДанныеОтчета,
										СтруктураРеквизитовФормы) Экспорт
														   
	ИндивидуальныйПредприниматель = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
								  	    СтруктураРеквизитовФормы.мСохраненныйДок.Организация);
														   
	Титульный = ДанныеОтчета.Титульный;
	СведенияОФизЛице = ДанныеОтчета.ФизЛицо;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ПоМесту",  СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("ЭтоЮЛ", НЕ ИндивидуальныйПредприниматель);
	
	ПараметрыВыгрузки.Вставить("ЭтоФизЛицоСИНН", ИндивидуальныйПредприниматель
	И ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН)
	И ПараметрыВыгрузки.ПоМесту = "112");
	
	ПараметрыВыгрузки.Вставить("ЭтоФизЛицоБезИНН", ИндивидуальныйПредприниматель
	И НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН)
	И ПараметрыВыгрузки.ПоМесту = "112");
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ИндивидуальныйПредприниматель
	И НЕ ПараметрыВыгрузки.ЭтоФизЛицоСИНН И НЕ ПараметрыВыгрузки.ЭтоФизЛицоБезИНН);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаПодписи",  Титульный.ДатаПодписи);
	
	ПараметрыВыгрузки.Вставить("ДатаДок_Дата", ТекущаяДатаСеанса());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ПараметрыВыгрузки.ДатаДок_Дата, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	
	// Файлы электроного представления РСВ будут администрироваться на местах.
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", "");
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	ПараметрыВыгрузки.Вставить("ОКВЭД",   СокрЛП(Титульный.ОКВЭД));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("Фамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПред", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ДатаРожд_Дата", СведенияОФизЛице.ДатаРождения);
	
	ПараметрыВыгрузки.Вставить("ДатаРожд",        Формат(ПараметрыВыгрузки.ДатаРожд_Дата, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("МестоРожд",       СокрЛП(СведенияОФизЛице.МестоРождения));
	ПараметрыВыгрузки.Вставить("ОКСМ",            СокрЛП(СведенияОФизЛице.КодСтраныГражданства));
	ПараметрыВыгрузки.Вставить("УдЛичнКодВидДок", СокрЛП(СведенияОФизЛице.КодВидаДокумента));
	ПараметрыВыгрузки.Вставить("УдЛичнСерДок",    СокрЛП(СведенияОФизЛице.СерияДокумента));
	ПараметрыВыгрузки.Вставить("УдЛичнНомДок",    СокрЛП(СведенияОФизЛице.НомерДокумента));
	ПараметрыВыгрузки.Вставить("УдЛичнСерНомДок",
		ПараметрыВыгрузки.УдЛичнСерДок + " " + ПараметрыВыгрузки.УдЛичнНомДок);
	ПараметрыВыгрузки.Вставить("УдЛичнВыдДок",    СокрЛП(СведенияОФизЛице.КемВыданДокумент));
	ПараметрыВыгрузки.Вставить("УдЛичнДатаДок",   Формат(СведенияОФизЛице.ДатаВыдачи, "ДФ=дд.ММ.гггг"));
	
	ПараметрыВыгрузки.Вставить("Индекс", СокрЛП(СведенияОФизЛице.АдресИндекс));
	ПараметрыВыгрузки.Вставить("КодРегион", СокрЛП(СведенияОФизЛице.АдресКодРегиона));
	ПараметрыВыгрузки.Вставить("Район", СокрЛП(СведенияОФизЛице.АдресРайон));
	ПараметрыВыгрузки.Вставить("Город", СокрЛП(СведенияОФизЛице.АдресГород));
	ПараметрыВыгрузки.Вставить("НаселПункт", СокрЛП(СведенияОФизЛице.АдресНаселенныйПункт));
	ПараметрыВыгрузки.Вставить("Улица", СокрЛП(СведенияОФизЛице.АдресУлица));
	ПараметрыВыгрузки.Вставить("Дом", СокрЛП(СведенияОФизЛице.АдресНомерДома));
	ПараметрыВыгрузки.Вставить("Корпус", СокрЛП(СведенияОФизЛице.АдресНомерКорпуса));
	ПараметрыВыгрузки.Вставить("Кварт", СокрЛП(СведенияОФизЛице.АдресНомерКвартиры));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "РасчетСВ");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(
											ИмяФормы, ПараметрыВыгрузки, "NO_RASCHSV"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки501");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(ИмяФормы,
								  	 ПараметрыВыгрузки,
									 ДеревоВыгрузки,
									 РезультатВыгрузки,
								 	 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов) Экспорт
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы,
						СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("112");
	ВозможныеКодыПоМесту.Добавить("120");
	ВозможныеКодыПоМесту.Добавить("121");
	ВозможныеКодыПоМесту.Добавить("122");
	ВозможныеКодыПоМесту.Добавить("124");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("217");
	ВозможныеКодыПоМесту.Добавить("222");
	ВозможныеКодыПоМесту.Добавить("240");
	ВозможныеКодыПоМесту.Добавить("335");
	ВозможныеКодыПоМесту.Добавить("350");
	
	ВозможныеКодыПериода = Новый Массив;
	ВозможныеКодыПериода.Добавить("21");
	ВозможныеКодыПериода.Добавить("31");
	ВозможныеКодыПериода.Добавить("33");
	ВозможныеКодыПериода.Добавить("34");
	ВозможныеКодыПериода.Добавить("51");
	ВозможныеКодыПериода.Добавить("52");
	ВозможныеКодыПериода.Добавить("53");
	ВозможныеКодыПериода.Добавить("90");
	ВозможныеКодыПериода.Добавить("83");
	ВозможныеКодыПериода.Добавить("84");
	ВозможныеКодыПериода.Добавить("85");
	ВозможныеКодыПериода.Добавить("86");
	
	ВозможныеКодыФормыРеорганизции = Новый Массив;
	ВозможныеКодыФормыРеорганизции.Добавить("1");
	ВозможныеКодыФормыРеорганизции.Добавить("2");
	ВозможныеКодыФормыРеорганизции.Добавить("3");
	ВозможныеКодыФормыРеорганизции.Добавить("4");
	ВозможныеКодыФормыРеорганизции.Добавить("5");
	ВозможныеКодыФормыРеорганизции.Добавить("6");
	ВозможныеКодыФормыРеорганизции.Добавить("7");
	ВозможныеКодыФормыРеорганизции.Добавить("0");
	
	МассивСтрок1_2 = Новый Массив;
	МассивСтрок1_2.Добавить("1");
	МассивСтрок1_2.Добавить("2");
	
	МассивСтрок1_3 = Новый Массив;
	МассивСтрок1_3.Добавить("1");
	МассивСтрок1_3.Добавить("2");
	МассивСтрок1_3.Добавить("3");
	
	МассивСтрок1_5 = Новый Массив;
	МассивСтрок1_5.Добавить("1");
	МассивСтрок1_5.Добавить("2");
	МассивСтрок1_5.Добавить("3");
	МассивСтрок1_5.Добавить("4");
	МассивСтрок1_5.Добавить("5");
	
	// Титульный лист.
	Если ПараметрыВыгрузки.ЭтоЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Не задан ИНН организации, обособленного подразделения.",
				"Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Задан ИНН организации, обособленного подразделения, не состоящий из 10 цифр.",
				"Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Не задан КПП организации, обособленного подразделения.",
				"Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Задан КПП организации, обособленного подразделения, не состоящий из 9 символов.",
				"Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Не задано наименование организации, обособленного подразделения.",
				"Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
			Если ПараметрыВыгрузки.ПоМесту = "124" Тогда
				ИП_ГлаваКФХ = " главы крестьянского (фермерского) хозяйства";
			Иначе
				ИП_ГлаваКФХ = " индивидуального предпринимателя";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
				ОписаниеОшибки = "Не задан ИНН" + ИП_ГлаваКФХ + ".";
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки,
					"Титульный", "ИНН");
				СтатусПроверки = Ложь;
			Иначе
				ТекстСообщения = "";
				Если НЕ ИННФЛСоответствуетТребованиям(ПараметрыВыгрузки.ИННОрг, ТекстСообщения) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задан ИНН" + ИП_ГлаваКФХ + "."
					+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "ИНН");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(ПараметрыВыгрузки.Фамилия);
			Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана фамилия" + ИП_ГлаваКФХ + ".",
				"Титульный", "НаимОрг");
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 1, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задана фамилия" + ИП_ГлаваКФХ + "."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "НаимОрг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(ПараметрыВыгрузки.Имя);
			Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано имя" + ИП_ГлаваКФХ + ".",
				"Титульный", "НаимОрг");
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 2, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задано имя" + ИП_ГлаваКФХ + "."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "НаимОрг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(ПараметрыВыгрузки.Отчество);
			Если ЗначениеЗаполнено(РеквизитФИО)
				И НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 3, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задано отчество" + ИП_ГлаваКФХ + "."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "НаимОрг");
				СтатусПроверки = Ложь;
			КонецЕсли;
		Иначе
			Если ПараметрыВыгрузки.ЭтоФизЛицоСИНН Тогда
				ТекстСообщения = "";
				Если НЕ ИННФЛСоответствуетТребованиям(ПараметрыВыгрузки.ИННОрг, ТекстСообщения) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задан ИНН физического лица."
					+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "ИНН");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(ПараметрыВыгрузки.Фамилия);
			Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана фамилия физического лица.",
				"Титульный", "НаимОрг");
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 1, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задана фамилия физического лица."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "НаимОрг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(ПараметрыВыгрузки.Имя);
			Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано имя физического лица.",
				"Титульный", "НаимОрг");
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 2, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задано имя физического лица."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "НаимОрг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(ПараметрыВыгрузки.Отчество);
			Если ЗначениеЗаполнено(РеквизитФИО)
				И НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 3, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задано отчество физического лица."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "НаимОрг");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задан код налогового органа.",
			"Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан код налогового органа, не состоящий из 4 цифр.",
			"Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задан код места, по которому представляется расчет.",
			"Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан некорректный код места, по которому представляется расчет.",
			"Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задан код расчетного (отчетного) периода.",
			"Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан некорректный код расчетного (отчетного) периода.",
			"Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) <> Неопределено Тогда
		Если ПараметрыВыгрузки.ПоМесту = "124" Тогда
			Если Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 3
				И ПараметрыВыгрузки.Период <> "83" Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задано некорректное сочетание кода места, по которому представляется расчет, и кода расчетного (отчетного) периода. Для кода ""124"" места, по которому представляется расчет за 1 квартал, допустим код ""83"" расчетного (отчетного) периода.",
				"Титульный", "ПоМесту");
				СтатусПроверки = Ложь;
			ИначеЕсли Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 6
				И ПараметрыВыгрузки.Период <> "84" Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задано некорректное сочетание кода места, по которому представляется расчет, и кода расчетного (отчетного) периода. Для кода ""124"" места, по которому представляется расчет за полугодие, допустим код ""84"" расчетного (отчетного) периода.",
				"Титульный", "ПоМесту");
				СтатусПроверки = Ложь;
			ИначеЕсли Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 9
				И ПараметрыВыгрузки.Период <> "85" Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задано некорректное сочетание кода места, по которому представляется расчет, и кода расчетного (отчетного) периода. Для кода ""124"" места, по которому представляется расчет за 9 месяцев, допустим код ""85"" расчетного (отчетного) периода.",
				"Титульный", "ПоМесту");
				СтатусПроверки = Ложь;
			ИначеЕсли Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 12
				И ПараметрыВыгрузки.Период <> "34" И ПараметрыВыгрузки.Период <> "86" Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задано некорректное сочетание кода места, по которому представляется расчет, и кода расчетного (отчетного) периода. Для кода ""124"" места, по которому представляется расчет за год, допустимы коды ""34"", ""86"" расчетного (отчетного) периода.",
				"Титульный", "ПоМесту");
				СтатусПроверки = Ложь;
			КонецЕсли;
		ИначеЕсли ПараметрыВыгрузки.ПоМесту = "240" Тогда
			Если Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 3 Тогда
				Если ПараметрыВыгрузки.Период <> "51" Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задано некорректное сочетание кода места, по которому представляется расчет, и кода расчетного (отчетного) периода. Для кода ""240"" места, по которому представляется расчет за 1 квартал, допустим код ""51"" расчетного (отчетного) периода.",
					"Титульный", "ПоМесту");
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код формы реорганизации (ликвидации) при коде ""240"" места, по которому представляется расчет за 1 квартал.",
					"Титульный", "КодФормыРеорганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			ИначеЕсли Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 6 Тогда
				Если ПараметрыВыгрузки.Период <> "52" Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задано некорректное сочетание кода места, по которому представляется расчет, и кода расчетного (отчетного) периода. Для кода ""240"" места, по которому представляется расчет за полугодие, допустим код ""52"" расчетного (отчетного) периода.",
					"Титульный", "ПоМесту");
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код формы реорганизации (ликвидации) при коде ""240"" места, по которому представляется расчет за полугодие.",
					"Титульный", "КодФормыРеорганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			ИначеЕсли Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 9 Тогда
				Если ПараметрыВыгрузки.Период <> "53" Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задано некорректное сочетание кода места, по которому представляется расчет, и кода расчетного (отчетного) периода. Для кода ""240"" места, по которому представляется расчет за 9 месяцев, допустим код ""53"" расчетного (отчетного) периода.",
					"Титульный", "ПоМесту");
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код формы реорганизации (ликвидации) при коде ""240"" места, по которому представляется расчет за 9 месяцев.",
					"Титульный", "КодФормыРеорганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОКВЭД) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задан код по ОКВЭД2.", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(
		ПараметрыВыгрузки.ОКВЭД) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан некорректный код по ОКВЭД2. Допустимы значения, соответствующие шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).",
			"Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" ИЛИ (ПараметрыВыгрузки.ЭтоЮЛ И ПараметрыВыгрузки.ПрПодп = "1") Тогда
		ТекстСообщения = "";
		РеквизитФИО = СокрЛП(ПараметрыВыгрузки.ФамилияПодписанта);
		Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана фамилия подписанта.",
			"Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 1, ТекстСообщения) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задана фамилия подписанта."
			+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		ТекстСообщения = "";
		РеквизитФИО = СокрЛП(ПараметрыВыгрузки.ИмяПодписанта);
		Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано имя подписанта.",
			"Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 2, ТекстСообщения) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задано имя подписанта."
			+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		ТекстСообщения = "";
		РеквизитФИО = СокрЛП(ПараметрыВыгрузки.ОтчествоПодписанта);
		Если ЗначениеЗаполнено(РеквизитФИО)
			И НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 3, ТекстСообщения) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задано отчество подписанта."
			+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задано наименование документа, подтверждающего полномочия представителя плательщика страховых взносов.",
			"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"Не задан код формы реорганизации (ликвидации).",
				"Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг)
			И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			Если ВозможныеКодыФормыРеорганизции.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Задано некорректное значение кода формы реорганизации (ликвидации).",
					"Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			Иначе
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не" + ?(ДлинаИННРеорг = 0, "", "верно")
						+ " задан ИНН реорганизованной организации.",
						"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не" + ?(ДлинаКППРеорг = 0, "", "верно")
						+ " задан КПП реорганизованной организации.",
						"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполненРаздел(ИмяФормы,
						ДанныеМногоуровневыхРазделов.Раздел3,
						"Раздел3",
						СтруктураРеквизитовФормы,
						СтруктураМногоуровневыхРазделов) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ДатаПодписи) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана дата подписи.",
				"Титульный", "ДатаПодписи");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Сведения о физическом лице, не являющемся индивидуальным предпринимателем.
	Если ПараметрыВыгрузки.ЭтоФизЛицоБезИНН Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ДатаРожд) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"В сведениях о физическом лице, не являющемся индивидуальным предпринимателем, не задана дата рождения.",
				"ФизЛицо", "ДатаРождения");
			СтатусПроверки = Ложь;
		ИначеЕсли ПараметрыВыгрузки.ДатаРожд_Дата > ПараметрыВыгрузки.ДатаДок_Дата Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"В сведениях о физическом лице, не являющемся индивидуальным предпринимателем, задана дата рождения, превышающая текущую.",
				"ФизЛицо", "ДатаРождения");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.МестоРожд) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"В сведениях о физическом лице, не являющемся индивидуальным предпринимателем, не задано место рождения.",
				"ФизЛицо", "МестоРождения");
			СтатусПроверки = Ложь;
		КонецЕсли;
		ДлинаОКСМ = СтрДлина(ПараметрыВыгрузки.ОКСМ);
		Если ДлинаОКСМ <> 3 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"В сведениях о физическом лице, не являющемся индивидуальным предпринимателем, не"
				+ ?(ДлинаОКСМ = 0, "", "верно") + " задан код страны гражданства.",
				"ФизЛицо", "КодСтраныГражданства");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДлинаКодВидДок = СтрДлина(ПараметрыВыгрузки.УдЛичнКодВидДок);
		Если ДлинаКодВидДок <> 2 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"В сведениях о физическом лице, не являющемся индивидуальным предпринимателем, не"
				+ ?(ДлинаКодВидДок = 0, "", "верно") + " задан код вида документа.",
				"ФизЛицо", "КодВидаДокумента");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.УдЛичнСерДок) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"В сведениях о физическом лице, не являющемся индивидуальным предпринимателем, не задана серия документа.",
				"ФизЛицо", "СерияДокумента");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.УдЛичнНомДок) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"В сведениях о физическом лице, не являющемся индивидуальным предпринимателем, не задан номер документа.",
				"ФизЛицо", "НомерДокумента");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.УдЛичнСерДок)
			И ЗначениеЗаполнено(ПараметрыВыгрузки.УдЛичнНомДок) Тогда
			УдЛичнСерНомДок = ПараметрыВыгрузки.УдЛичнСерДок + " " + ПараметрыВыгрузки.УдЛичнНомДок;
			Если СтрДлина(УдЛичнСерНомДок) > 25 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"В сведениях о физическом лице, не являющемся индивидуальным предпринимателем, заданы серия и номер документа, в совокупности состоящие более чем из 24 символов.",
					"ФизЛицо", "СерияДокумента");
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.УдЛичнВыдДок) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"В сведениях о физическом лице, не являющемся индивидуальным предпринимателем, не задано наименование органа, выдавшего документ.",
				"ФизЛицо", "КемВыданДокумент");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.УдЛичнДатаДок) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"В сведениях о физическом лице, не являющемся индивидуальным предпринимателем, не задана дата выдачи документа.",
				"ФизЛицо", "ДатаВыдачи");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДлинаКодРегион = СтрДлина(ПараметрыВыгрузки.КодРегион);
		Если ДлинаКодРегион <> 2 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"В сведениях о физическом лице, не являющемся индивидуальным предпринимателем, не"
				+ ?(ДлинаКодРегион = 0, "", "верно") + " задан код региона.", "ФизЛицо", "АдресКодРегиона");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ПарамПроверки = Новый Структура;
	ПарамПроверки.Вставить("ИмяФормы", ИмяФормы);
	
	// Раздел 1.
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел1;
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЭтоПБОЮЛ", ПараметрыВыгрузки.ЭтоПБОЮЛ);
	Если ПараметрыВыгрузки.ПоМесту = "124" ИЛИ ПараметрыВыгрузки.ПоМесту = "240" Тогда
		ДопПараметры.Вставить("НеПроверятьЗаполнениеПризнаковСтроки090");
		ДопПараметры.Вставить("НеПроверятьЗаполнениеКБКСтрок020_040_100Раздела1");
	КонецЕсли;
	ЗаполненРаздел1 = ЗаполненРаздел1(ИмяФормы,
									  ДанныеМногоуровневыхРазделов,
									  СтруктураРеквизитовФормы,
									  СтруктураМногоуровневыхРазделов,
									  ДопПараметры);
	Если НЕ (ПараметрыВыгрузки.ПоМесту = "124" ИЛИ ПараметрыВыгрузки.ПоМесту = "240") ИЛИ ЗаполненРаздел1 Тогда
		
		НомерСтраницы = 1;
		
		Данные = ДеревоРаздела.Строки[0].Данные;
		
		Если НЕ (ПараметрыВыгрузки.ПоМесту = "124" ИЛИ ПараметрыВыгрузки.ПоМесту = "240")
			И НЕ ЗаполненРаздел(ИмяФормы,
								ДеревоРаздела,
								"Раздел1",
								СтруктураРеквизитовФормы,
								СтруктураМногоуровневыхРазделов) Тогда
			
			ИмяПоказателя = ?(ЗначениеЗаполнено(СокрЛП(Данные["П000010001001"])),
			"П000010002001", "П000010001001");
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Раздел 1 не заполнен.", "Раздел1", ИмяПоказателя, НомерСтраницы);
			СтатусПроверки = Ложь;
			
		Иначе
			
			ПарамПроверки.Вставить("ИмяРаздела",    "Раздел1");
			ПарамПроверки.Вставить("Данные",        Данные);
			ПарамПроверки.Вставить("НомерСтраницы", НомерСтраницы);
			
			ОКТМОДлина = СтрДлина(СокрЛП(Данные["П000010001001"]));
			Если НЕ (ОКТМОДлина = 8 ИЛИ ОКТМОДлина = 11) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 1: в строке 010 не" + ?(ОКТМОДлина = 0, "", "верно")
					+ " задан код по ОКТМО.",
					"Раздел1", "П000010001001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КБКДлина = СтрДлина(СокрЛП(Данные["П000010002001"]));
			Если НЕ КБКДлина = 20 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 1: в строке 020 не" + ?(КБКДлина = 0, "", "верно")
					+ " задан код бюджетной классификации.",
					"Раздел1", "П000010002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПроверитьПоказательНаНеотрицательность("П000010003001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П000010003101", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П000010003201", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П000010003301", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			КБКДлина = СтрДлина(СокрЛП(Данные["П000010004001"]));
			Если НЕ КБКДлина = 20 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 1: в строке 040 не" + ?(КБКДлина = 0, "", "верно")
					+ " задан код бюджетной классификации.",
					"Раздел1", "П000010004001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПроверитьПоказательНаНеотрицательность("П000010005001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П000010005101", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П000010005201", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П000010005301", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			ДанныеМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[
			СтруктураРеквизитовФормы.мИдГруппы1М1];
			ИмяПокКБК = "П00001М106001";
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М107001"])
					ИЛИ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М107101"])
					ИЛИ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М107201"])
					ИЛИ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М107301"]) Тогда
					
					Инд = Формат(ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					КБКДлина = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПокКБК]));
					Если НЕ КБКДлина = 20 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
							"Раздел 1: в строке " + Инд + " группы строк 060-073 не"
							+ ?(КБКДлина = 0, "", "верно") + " задан код бюджетной классификации.",
							"Раздел1", ИмяПокКБК + "_" + Инд);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ПарамПроверки.Вставить("Данные",         СтрокаМнЧ.Данные);
					ПарамПроверки.Вставить("НомерСтрокиМнЧ", Инд);
					
					ПроверитьПоказательНаНеотрицательность("П00001М107001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П00001М107101", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П00001М107201", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П00001М107301", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
				КонецЕсли;
			КонецЦикла;
			
			ДанныеМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[
			СтруктураРеквизитовФормы.мИдГруппы1М2];
			ИмяПокКБК = "П00001М208001";
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М209001"])
					ИЛИ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М209101"])
					ИЛИ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М209201"])
					ИЛИ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М209301"]) Тогда
					
					Инд = Формат(ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					КБКДлина = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПокКБК]));
					Если НЕ КБКДлина = 20 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
							"Раздел 1: в строке " + Инд + " группы строк 080-093 не"
							+ ?(КБКДлина = 0, "", "верно") + " задан код бюджетной классификации.",
							"Раздел1", ИмяПокКБК + "_" + Инд);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ПарамПроверки.Вставить("Данные",         СтрокаМнЧ.Данные);
					ПарамПроверки.Вставить("НомерСтрокиМнЧ", Инд);
					
					ПроверитьПоказательНаНеотрицательность("П00001М209001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П00001М209101", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П00001М209201", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П00001М209301", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
				КонецЕсли;
			КонецЦикла;
			
			КБКДлина = СтрДлина(СокрЛП(Данные["П000010010001"]));
			Если НЕ КБКДлина = 20 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 1: в строке 100 не" + ?(КБКДлина = 0, "", "верно")
					+ " задан код бюджетной классификации.",
					"Раздел1", "П000010010001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПарамПроверки.Вставить("Данные", Данные);
			
			ПроверитьПоказательНаНеотрицательность("П000010011001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П000010011101", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П000010011201", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П000010011301", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			ПроверитьПоказательНаНеотрицательность("П000010012001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П000010012101", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П000010012201", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П000010012301", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
		КонецЕсли;
		
		// Приложение 1 к Разделу 1.
		ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел1Прил1;
		Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
			
			Данные = СтраницаРаздела.Данные;
			НомерСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			КодТарифаДлина = СтрДлина(СокрЛП(Данные["П000110000101"]));
			Если НЕ КодТарифаДлина = 2 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Приложение 1 к разделу 1 -> Страница " + НомерСтраницы
					+ ": в строке 001 не" + ?(КодТарифаДлина = 0, "", "верно")
					+ " задан код тарифа плательщика.",
					"Раздел1Прил1", "П000110000101", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Подразделы 1.1 и 1.2 приложения 1 к разделу 1.
			КоординатыПодраздела = НомерСтраницы + ",1,1";
			
			ПарамПроверки.Вставить("ИмяРаздела",           "Раздел1Прил1Подр1_1и1_2");
			ПарамПроверки.Вставить("Данные",               СтраницаРаздела.Строки[0].Строки[0].Данные);
			ПарамПроверки.Вставить("НомерСтраницы",        НомерСтраницы);
			ПарамПроверки.Вставить("КоординатыПодраздела", КоординатыПодраздела);
			
			// Подраздел 1.1 приложения 1 к разделу 1.
			ПроверитьПоказательНаНеотрицательность("П011110003001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110003002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110003003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110003004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110003005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			ПроверитьПоказательНаНеотрицательность("П011110004001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110004002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110004003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110004004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110004005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			ПроверитьПоказательНаНеотрицательность("П011110005001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110005002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110005003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110005004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110005005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			ПроверитьПоказательНаНеотрицательность("П011110005101", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110005102", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110005103", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110005104", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110005105", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			ПроверитьПоказательНаНеотрицательность("П011110006001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110006002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110006003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110006004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110006005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			ПроверитьПоказательНаНеотрицательность("П011110006101", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110006102", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110006103", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110006104", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110006105", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			ПроверитьПоказательНаНеотрицательность("П011110006201", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110006202", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110006203", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110006204", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011110006205", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			// Подраздел 1.2 приложения 1 к разделу 1.
			ПроверитьПоказательНаНеотрицательность("П011120003001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120003002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120003003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120003004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120003005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			ПроверитьПоказательНаНеотрицательность("П011120004001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120004002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120004003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120004004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120004005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			ПроверитьПоказательНаНеотрицательность("П011120005001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120005002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120005003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120005004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120005005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			ПроверитьПоказательНаНеотрицательность("П011120006001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120006002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120006003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120006004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П011120006005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			// Подраздел 1.3.1 приложения 1 к разделу 1.
			ЗаполненПодраздел = Ложь;
			ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы11131М1;
			ДанныеМнЧ = СтраницаРаздела.Строки[1].Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы];
			МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Для каждого ИмяГрафы Из МассивИменГраф Цикл
					Если ЗначениеЗаполнено(СтрокаМнЧ.Данные[ИмяГрафы]) Тогда
						ЗаполненПодраздел = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если ЗаполненПодраздел Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомерСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					КоординатыПодраздела = НомерСтраницы + ",2," + НомерСтроки;
					
					ЗначениеПоказателя = СокрЛП(СтрокаМнЧ.Данные["П11131М100101"]);
					Если МассивСтрок1_2.Найти(ЗначениеПоказателя) = Неопределено Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
							"Приложение 1 к разделу 1 -> Страница " + НомерСтраницы
							+ " -> Подраздел 1.3.1: в строке " + НомерСтроки
							+ " группы строк 001-050 не" + ?(ЗначениеПоказателя = "", "", "верно")
							+ " задан признак основания исчисления сумм страховых взносов по дополнительному тарифу.",
							"Раздел1Прил1Подр1_3_1", "П11131М100101_" + НомерСтроки, КоординатыПодраздела);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ПарамПроверки.Вставить("ИмяРаздела",           "Раздел1Прил1Подр1_3_1");
					ПарамПроверки.Вставить("Данные",               СтрокаМнЧ.Данные);
					ПарамПроверки.Вставить("КоординатыПодраздела", КоординатыПодраздела);
					ПарамПроверки.Вставить("НомерСтрокиМнЧ",       НомерСтроки);
					
					ПроверитьПоказательНаНеотрицательность("П11131М102001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М102002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М102003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М102004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М102005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
					ПроверитьПоказательНаНеотрицательность("П11131М103001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М103002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М103003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М103004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М103005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
					ПроверитьПоказательНаНеотрицательность("П11131М104001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М104002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М104003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М104004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М104005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
					ПроверитьПоказательНаНеотрицательность("П11131М105001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М105002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М105003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М105004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11131М105005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
				КонецЦикла;
			КонецЕсли;
			
			// Подраздел 1.3.2 приложения 1 к разделу 1.
			ЗаполненПодраздел = Ложь;
			ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы11132М1;
			ДанныеМнЧ = СтраницаРаздела.Строки[2].Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы];
			МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Для каждого ИмяГрафы Из МассивИменГраф Цикл
					Если ЗначениеЗаполнено(СтрокаМнЧ.Данные[ИмяГрафы]) Тогда
						ЗаполненПодраздел = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если ЗаполненПодраздел Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомерСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					КоординатыПодраздела = НомерСтраницы + ",3," + НомерСтроки;
					
					ЗначениеПоказателя = СокрЛП(СтрокаМнЧ.Данные["П11132М100101"]);
					Если МассивСтрок1_2.Найти(ЗначениеПоказателя) = Неопределено Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
							"Приложение 1 к разделу 1 -> Страница " + НомерСтраницы
							+ " -> Подраздел 1.3.2: в строке " + НомерСтроки + " группы строк 001-050 не"
							+ ?(ЗначениеПоказателя = "", "", "верно") + " задан код основания исчисления.",
							"Раздел1Прил1Подр1_3_2", "П11132М100101_" + НомерСтроки, КоординатыПодраздела);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗначениеПоказателя = СокрЛП(СтрокаМнЧ.Данные["П11132М100201"]);
					Если МассивСтрок1_3.Найти(ЗначениеПоказателя) = Неопределено Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
							"Приложение 1 к разделу 1 -> Страница " + НомерСтраницы
							+ " -> Подраздел 1.3.2: в строке " + НомерСтроки + " группы строк 001-050 не"
							+ ?(ЗначениеПоказателя = "", "", "верно") + " задано основание заполнения.",
							"Раздел1Прил1Подр1_3_2", "П11132М100201_" + НомерСтроки, КоординатыПодраздела);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗначениеПоказателя = СокрЛП(СтрокаМнЧ.Данные["П11132М100301"]);
					Если МассивСтрок1_5.Найти(ЗначениеПоказателя) = Неопределено Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
							"Приложение 1 к разделу 1 -> Страница " + НомерСтраницы
							+ " -> Подраздел 1.3.2: в строке " + НомерСтроки + " группы строк 001-050 не"
							+ ?(ЗначениеПоказателя = "", "", "верно") + " задан код класса условий труда.",
							"Раздел1Прил1Подр1_3_2", "П11132М100301_" + НомерСтроки, КоординатыПодраздела);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ПарамПроверки.Вставить("ИмяРаздела",           "Раздел1Прил1Подр1_3_2");
					ПарамПроверки.Вставить("Данные",               СтрокаМнЧ.Данные);
					ПарамПроверки.Вставить("КоординатыПодраздела", КоординатыПодраздела);
					ПарамПроверки.Вставить("НомерСтрокиМнЧ",       НомерСтроки);
					
					ПроверитьПоказательНаНеотрицательность("П11132М102001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М102002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М102003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М102004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М102005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
					ПроверитьПоказательНаНеотрицательность("П11132М103001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М103002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М103003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М103004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М103005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
					ПроверитьПоказательНаНеотрицательность("П11132М104001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М104002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М104003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М104004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М104005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
					ПроверитьПоказательНаНеотрицательность("П11132М105001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М105002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М105003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М105004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П11132М105005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
				КонецЦикла;
			КонецЕсли;
			
			// Подраздел 1.4 приложения 1 к разделу 1.
			ЗаполненПодраздел = Ложь;
			ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы1114М1;
			ДанныеМнЧ = СтраницаРаздела.Строки[3].Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы];
			МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Для каждого ИмяГрафы Из МассивИменГраф Цикл
					Если ЗначениеЗаполнено(СтрокаМнЧ.Данные[ИмяГрафы]) Тогда
						ЗаполненПодраздел = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если ЗаполненПодраздел Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомерСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					КоординатыПодраздела = НомерСтраницы + ",4," + НомерСтроки;
					
					ЗначениеПоказателя = СокрЛП(СтрокаМнЧ.Данные["П01114М100101"]);
					Если МассивСтрок1_2.Найти(ЗначениеПоказателя) = Неопределено Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
							"Приложение 1 к разделу 1 -> Страница " + НомерСтраницы
							+ " -> Подраздел 1.4: в строке " + НомерСтроки + " группы строк 001-050 не"
							+ ?(ЗначениеПоказателя = "", "", "верно")
							+ " задан код основания исчисления страховых взносов на дополнительное социальное обеспечение.",
							"Раздел1Прил1Подр1_4", "П01114М100101_" + НомерСтроки, КоординатыПодраздела);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ПарамПроверки.Вставить("ИмяРаздела",           "Раздел1Прил1Подр1_4");
					ПарамПроверки.Вставить("Данные",               СтрокаМнЧ.Данные);
					ПарамПроверки.Вставить("КоординатыПодраздела", КоординатыПодраздела);
					ПарамПроверки.Вставить("НомерСтрокиМнЧ",       НомерСтроки);
					
					ПроверитьПоказательНаНеотрицательность("П01114М102001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М102002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М102003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М102004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М102005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
					ПроверитьПоказательНаНеотрицательность("П01114М103001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М103002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М103003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М103004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М103005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
					ПроверитьПоказательНаНеотрицательность("П01114М104001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М104002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М104003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М104004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М104005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
					ПроверитьПоказательНаНеотрицательность("П01114М105001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М105002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М105003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М105004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П01114М105005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		// Приложение 2 к Разделу 1.
		ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел1Прил2;
		
		Данные = ДеревоРаздела.Строки[0].Данные;
		НомерСтраницы = 1;
		
		ПарамПроверки.Вставить("ИмяРаздела",    "Раздел1Прил2");
		ПарамПроверки.Вставить("Данные",        Данные);
		ПарамПроверки.Вставить("НомерСтраницы", НомерСтраницы);
		
		ПризнакВыплат = СокрЛП(Данные["П000120000101"]);
		Если МассивСтрок1_2.Найти(ПризнакВыплат) = Неопределено Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"Приложение 2 к Разделу 1: в строке 001 не"
				+ ?(ПризнакВыплат = "", "", "верно") + " задан признак выплат.",
				"Раздел1Прил2", "П000120000101", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ПроверитьПоказательНаНеотрицательность("П000120002001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120002002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120002003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120002004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120002005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		ПроверитьПоказательНаНеотрицательность("П000120003001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120003002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120003003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120003004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120003005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		ПроверитьПоказательНаНеотрицательность("П000120004001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120004002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120004003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120004004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120004005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		ПроверитьПоказательНаНеотрицательность("П000120005001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		ПроверитьПоказательНаНеотрицательность("П000120005101", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005102", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005103", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005104", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005105", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		ПроверитьПоказательНаНеотрицательность("П000120005201", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005202", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005203", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005204", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005205", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		ПроверитьПоказательНаНеотрицательность("П000120005301", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005302", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005303", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005304", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005305", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		ПроверитьПоказательНаНеотрицательность("П000120005401", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005402", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005403", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005404", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120005405", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		ПроверитьПоказательНаНеотрицательность("П000120006001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120006002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120006003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120006004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120006005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		ПроверитьПоказательНаНеотрицательность("П000120007001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120007002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120007003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120007004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120007005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		ПроверитьПоказательНаНеотрицательность("П000120008001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120008002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120008003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120008004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120008005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		Для НомГрафы = 1 По 9 Цикл
			Признак = СокрЛП(Данные["П00012000900" + НомГрафы]);
			Если МассивСтрок1_2.Найти(Признак) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Приложение 2 к Разделу 1: в графе " + НомГрафы
					+ " строки 090 не" + ?(Признак = "", "", "верно") + " задан признак.",
					"Раздел1Прил2", "П00012000900" + НомГрафы, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			НомГрафы = НомГрафы + 1;
		КонецЦикла;
		
		ПроверитьПоказательНаНеотрицательность("П000120009002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120009004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120009006", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120009008", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000120009010", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
	КонецЕсли;
	
	// Приложение 3 к Разделу 1.
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел1Прил3;
	Если ЗаполненРаздел(ИмяФормы,
						ДеревоРаздела,
						"Раздел1Прил3",
						СтруктураРеквизитовФормы,
						СтруктураМногоуровневыхРазделов) Тогда
		
		Данные = ДеревоРаздела.Строки[0].Данные;
		НомерСтраницы = 1;
		
		ПарамПроверки.Вставить("ИмяРаздела",    "Раздел1Прил3");
		ПарамПроверки.Вставить("Данные",        Данные);
		ПарамПроверки.Вставить("НомерСтраницы", НомерСтраницы);
		
		ПроверитьПоказательНаНеотрицательность("П000130001003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130001004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130001103", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130001104", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130002003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130002103", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130003003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130003004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130003103", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130003104", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130004003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130005003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130006003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130006004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130006103", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130006104", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130006203", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130006204", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130007003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130007004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130008003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130008004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130009003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130010003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130010004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130011003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000130011004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
	КонецЕсли;
	
	// Приложение 4 к Разделу 1.
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел1Прил4;
	Если ЗаполненРаздел(ИмяФормы,
						ДеревоРаздела,
						"Раздел1Прил4",
						СтруктураРеквизитовФормы,
						СтруктураМногоуровневыхРазделов) Тогда
		
		Данные = ДеревоРаздела.Строки[0].Данные;
		НомерСтраницы = 1;
		
		ПарамПроверки.Вставить("ИмяРаздела",    "Раздел1Прил4");
		ПарамПроверки.Вставить("Данные",        Данные);
		ПарамПроверки.Вставить("НомерСтраницы", НомерСтраницы);
		
		ПроверитьПоказательНаНеотрицательность("П000140001004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140002004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140003004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140004004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140005004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140006004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140007004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140008004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140009004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140010004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140011004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140012004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140013004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140014004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140015004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140016004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140017004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140018004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140019004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140020004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140021004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140022004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140023004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140024004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140025004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140026004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140027004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140028004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140029004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140030004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000140031004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
	КонецЕсли;
	
	// Приложения 5, 6 к Разделу 1.
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел1Прил5_6;
	Если ЗаполненРаздел(ИмяФормы,
						ДеревоРаздела,
						"Раздел1Прил5_6",
						СтруктураРеквизитовФормы,
						СтруктураМногоуровневыхРазделов) Тогда
		
		Данные = ДеревоРаздела.Строки[0].Данные;
		НомерСтраницы = 1;
		
		ПарамПроверки.Вставить("ИмяРаздела",    "Раздел1Прил5_6");
		ПарамПроверки.Вставить("Данные",        Данные);
		ПарамПроверки.Вставить("НомерСтраницы", НомерСтраницы);
		
		Если НЕ ЗначениеЗаполнено(Данные["П000150005002"]) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"Приложение 5 к Разделу 1: не задана дата записи в реестре аккредитованных организаций.",
				"Раздел1Прил5_6", "П000150005002", НомерСтраницы);
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, Данные["П000150005002"]) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"Приложение 5 к Разделу 1: задана дата записи в реестре аккредитованных организаций, выходящая за пределы периода с 01.01.1900 по 31.12.2099.",
				"Раздел1Прил5_6", "П000150005002", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СокрЛП(Данные["П000150005003"])) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"Приложение 5 к Разделу 1: не задан номер записи в реестре аккредитованных организаций.",
				"Раздел1Прил5_6", "П000150005003", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ПроверитьПоказательНаНеотрицательность("П000150002002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000150002003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000150003002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000150003003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000150004002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000150004003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		ПроверитьПоказательНаНеотрицательность("П000160006002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000160007002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000160008002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
	КонецЕсли;
	
	// Приложение 7 к Разделу 1.
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел1Прил7;
	Если ЗаполненРаздел(ИмяФормы,
						ДеревоРаздела,
						"Раздел1Прил7",
						СтруктураРеквизитовФормы,
						СтруктураМногоуровневыхРазделов) Тогда
		
		Данные = ДеревоРаздела.Строки[0].Данные;
		НомерСтраницы = 1;
		
		ПарамПроверки.Вставить("ИмяРаздела",    "Раздел1Прил7");
		ПарамПроверки.Вставить("Данные",        Данные);
		ПарамПроверки.Вставить("НомерСтраницы", НомерСтраницы);
		
		ПроверитьПоказательНаНеотрицательность("П000170001001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000170001002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000170002001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000170002002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000170003001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000170003002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000170004001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000170004002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000170005001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000170005002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
	КонецЕсли;
	
	// Приложение 8 к Разделу 1.
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел1Прил8;
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ЗаполненРаздел(ИмяФормы,
													 ДеревоРаздела,
													 "Раздел1Прил8",
										   			 СтруктураРеквизитовФормы,
										   			 СтруктураМногоуровневыхРазделов) Тогда
		
		Данные = ДеревоРаздела.Строки[0].Данные;
		НомерСтраницы = 1;
		
		ПарамПроверки.Вставить("ИмяРаздела",    "Раздел1Прил8");
		ПарамПроверки.Вставить("Данные",        Данные);
		ПарамПроверки.Вставить("НомерСтраницы", НомерСтраницы);
		
		ПроверитьПоказательНаНеотрицательность("П000180001001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000180001002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000180001003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000180001004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000180001005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы18М1;
		ДанныеМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
			НомерСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные["П00018М102001"])) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Приложение 8 к разделу 1: в строке " + НомерСтроки
					+ " группы строк 020-060 не задан номер патента.",
					"Раздел1Прил8", "П00018М102001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ВидДеятПатентДлина = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00018М103001"]));
			Если НЕ ВидДеятПатентДлина = 6 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Приложение 8 к разделу 1: в строке " + НомерСтроки
					+ " группы строк 020-060 не" + ?(ВидДеятПатентДлина = 0, "", "верно")
					+ " задан код вида предпринимательской деятельности, установленный законодательством субъекта Российской Федерации, указанный в заявлении на получение патента.",
					"Раздел1Прил8", "П00018М103001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00018М104001"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Приложение 8 к разделу 1: в строке " + НомерСтроки
					+ " группы строк 020-060 не задана дата начала действия.",
					"Раздел1Прил8", "П00018М104001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, СтрокаМнЧ.Данные["П00018М104001"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Приложение 8 к разделу 1: в строке " + НомерСтроки
					+ " группы строк 020-060 задана дата начала действия, выходящая за пределы периода с 01.01.1900 по 31.12.2099.",
					"Раздел1Прил8", "П00018М104001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00018М105001"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Приложение 8 к разделу 1: в строке " + НомерСтроки
					+ " группы строк 020-060 не задана дата окончания действия.",
					"Раздел1Прил8", "П00018М105001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, СтрокаМнЧ.Данные["П00018М105001"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Приложение 8 к разделу 1: в строке " + НомерСтроки
					+ " группы строк 020-060 задана дата окончания действия, выходящая за пределы периода с 01.01.1900 по 31.12.2099.",
					"Раздел1Прил8", "П00018М104001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00018М104001"])
				И ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00018М105001"])
				И СтрокаМнЧ.Данные["П00018М104001"] > СтрокаМнЧ.Данные["П00018М105001"] Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Приложение 8 к разделу 1: в строке " + НомерСтроки
					+ " группы строк 020-060 дата начала действия не должна быть больше даты окончания действия.",
					"Раздел1Прил8", "П00018М104001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПарамПроверки.Вставить("Данные",         СтрокаМнЧ.Данные);
			ПарамПроверки.Вставить("НомерСтрокиМнЧ", НомерСтроки);
			
			ПроверитьПоказательНаНеотрицательность("П00018М106001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П00018М106002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П00018М106003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П00018М106004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П00018М106005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Приложение 9 к Разделу 1.
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел1Прил9;
	Если ЗаполненРаздел(ИмяФормы,
						ДеревоРаздела,
						"Раздел1Прил9",
						СтруктураРеквизитовФормы,
						СтруктураМногоуровневыхРазделов) Тогда
		
		Данные = ДеревоРаздела.Строки[0].Данные;
		НомерСтраницы = 1;
		
		ПарамПроверки.Вставить("ИмяРаздела",    "Раздел1Прил9");
		ПарамПроверки.Вставить("Данные",        Данные);
		ПарамПроверки.Вставить("НомерСтраницы", НомерСтраницы);
		
		ПроверитьПоказательНаНеотрицательность("П000190001001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000190001002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000190001003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000190001004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П000190001005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы19М1;
		ДанныеМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
			НомерСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
			
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(СтрокаМнЧ.Данные["П00019М102001"]);
			Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 9 к разделу 1: в строке " + НомерСтроки
				+ " группы строк 020-080 не задана фамилия иностранного гражданина (лица без гражданства).",
				"Раздел1Прил9", "П00019М102001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 1, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 9 к разделу 1: в строке " + НомерСтроки
				+ " группы строк 020-080 неверно задана фамилия иностранного гражданина (лица без гражданства)."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""),
				"Раздел1Прил9", "П00019М102001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(СтрокаМнЧ.Данные["П00019М103001"]);
			Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 9 к разделу 1: в строке " + НомерСтроки
				+ " группы строк 020-080 не задано имя иностранного гражданина (лица без гражданства).",
				"Раздел1Прил9", "П00019М103001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 2, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 9 к разделу 1: в строке " + НомерСтроки
				+ " группы строк 020-080 неверно задано имя иностранного гражданина (лица без гражданства)."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""),
				"Раздел1Прил9", "П00019М103001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(СтрокаМнЧ.Данные["П00019М104001"]);
			Если ЗначениеЗаполнено(РеквизитФИО)
				И НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 3, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 9 к разделу 1: в строке " + НомерСтроки
				+ " группы строк 020-080 неверно задано отчество иностранного гражданина (лица без гражданства)."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""),
				"Раздел1Прил9", "П00019М104001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИННИностр = СокрЛП(СтрокаМнЧ.Данные["П00019М105001"]);
			Если ЗначениеЗаполнено(ИННИностр) Тогда
				ТекстСообщения = "";
				Если НЕ ИННФЛСоответствуетТребованиям(ИННИностр, ТекстСообщения) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 9 к разделу 1: в строке " + НомерСтроки
					+ " группы строк 020-080 неверно задан ИНН иностранного гражданина (лица без гражданства)."
					+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""),
					"Раздел1Прил9", "П00019М105001_" + НомерСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			ТекстСообщения = "";
			СНИЛС = СокрЛП(СтрокаМнЧ.Данные["П00019М106001"]);
			Если ЗначениеЗаполнено(СНИЛС) И НЕ СНИЛССоответствуетТребованиям(СНИЛС, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 9 к разделу 1: в строке " + НомерСтроки
				+ " группы строк 020-080 неверно задан СНИЛС иностранного гражданина (лица без гражданства)."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""),
				"Раздел1Прил9", "П00019М106001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные["П00019М107001"])) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Приложение 9 к разделу 1: в строке " + НомерСтроки
					+ " группы строк 020-080 не задано гражданство (код страны) иностранного гражданина (лица без гражданства).",
					"Раздел1Прил9", "П00019М107001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПарамПроверки.Вставить("Данные",         СтрокаМнЧ.Данные);
			ПарамПроверки.Вставить("НомерСтрокиМнЧ", НомерСтроки);
			
			ПроверитьПоказательНаНеотрицательность("П00019М108001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П00019М108002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П00019М108003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П00019М108004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П00019М108005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Приложение 10 к Разделу 1.
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел1Прил10;
	Если ЗаполненРаздел(ИмяФормы,
						ДеревоРаздела,
						"Раздел1Прил10",
						СтруктураРеквизитовФормы,
						СтруктураМногоуровневыхРазделов) Тогда
		
		Данные = ДеревоРаздела.Строки[0].Данные;
		НомерСтраницы = 1;
		
		ПарамПроверки.Вставить("ИмяРаздела",    "Раздел1Прил10");
		ПарамПроверки.Вставить("Данные",        Данные);
		ПарамПроверки.Вставить("НомерСтраницы", НомерСтраницы);
		
		ПроверитьПоказательНаНеотрицательность("П001100001001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П001100001002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П001100001003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П001100001004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		ПроверитьПоказательНаНеотрицательность("П001100001005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
		
		ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы110М1;
		ДанныеМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
			НомерСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
			
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(СтрокаМнЧ.Данные["П00110М103001"]);
			Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 10 к разделу 1: в строке "
				+ НомерСтроки + " группы строк 020-140 не задана фамилия обучающегося.",
				"Раздел1Прил10", "П00110М103001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 1, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 10 к разделу 1: в строке "
				+ НомерСтроки + " группы строк 020-140 неверно задана фамилия обучающегося."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""),
				"Раздел1Прил10", "П00110М103001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(СтрокаМнЧ.Данные["П00110М104001"]);
			Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 10 к разделу 1: в строке "
				+ НомерСтроки + " группы строк 020-140 не задано имя обучающегося.",
				"Раздел1Прил10", "П00110М104001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 2, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 10 к разделу 1: в строке "
				+ НомерСтроки + " группы строк 020-140 неверно задано имя обучающегося."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""),
				"Раздел1Прил10", "П00110М104001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(СтрокаМнЧ.Данные["П00110М105001"]);
			Если ЗначениеЗаполнено(РеквизитФИО)
				И НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 3, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 10 к разделу 1: в строке "
				+ НомерСтроки + " группы строк 020-140 неверно задано отчество обучающегося."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""),
				"Раздел1Прил10", "П00110М105001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			СправкаСтудОтрядНомер = СокрЛП(СтрокаМнЧ.Данные["П00110М106001"]);
			СправкаСтудОтрядДата  = СтрокаМнЧ.Данные["П00110М107001"];
			СправкаОчноеОбучНомер = СокрЛП(СтрокаМнЧ.Данные["П00110М108001"]);
			СправкаОчноеОбучДата  = СтрокаМнЧ.Данные["П00110М109001"];
			Если (ЗначениеЗаполнено(СправкаСтудОтрядНомер)
				ИЛИ ЗначениеЗаполнено(СправкаСтудОтрядДата))
				И (ЗначениеЗаполнено(СправкаОчноеОбучНомер)
				ИЛИ ЗначениеЗаполнено(СправкаОчноеОбучДата)) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Приложение 10 к разделу 1: в строке " + НомерСтроки
					+ " группы строк 020-140 одновременно заданы сведения из справки, подтверждающих членство в студенческом отряде, и сведения из справки, подтверждающих очную форму обучения.",
					"Раздел1Прил10", "П00110М106001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ЗначениеЗаполнено(СправкаСтудОтрядНомер)
				ИЛИ ЗначениеЗаполнено(СправкаСтудОтрядДата) Тогда
				Если НЕ ЗначениеЗаполнено(СправкаСтудОтрядНомер) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 10 к разделу 1: в строке " + НомерСтроки
						+ " группы строк 020-140 в сведениях из справки, подтверждающих членство в студенческом отряде, не задан номер.",
						"Раздел1Прил10", "П00110М106001_" + НомерСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СправкаСтудОтрядДата) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 10 к разделу 1: в строке " + НомерСтроки
						+ " группы строк 020-140 в сведениях из справки, подтверждающих членство в студенческом отряде, не задана дата.",
						"Раздел1Прил10", "П00110М107001_" + НомерСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, СправкаСтудОтрядДата) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 10 к разделу 1: в строке " + НомерСтроки
						+ " группы строк 020-140 в сведениях из справки, подтверждающих членство в студенческом отряде, задана дата, выходящая за пределы периода с 01.01.1900 по 31.12.2099.",
						"Раздел1Прил10", "П00110М107001_" + НомерСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(СправкаОчноеОбучНомер)
				ИЛИ ЗначениеЗаполнено(СправкаОчноеОбучДата) Тогда
				Если НЕ ЗначениеЗаполнено(СправкаОчноеОбучНомер) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 10 к разделу 1: в строке " + НомерСтроки
						+ " группы строк 020-140 в сведениях из справки, подтверждающих очную форму обучения, не задан номер.",
						"Раздел1Прил10", "П00110М108001_" + НомерСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СправкаОчноеОбучДата) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 10 к разделу 1: в строке " + НомерСтроки
						+ " группы строк 020-140 в сведениях из справки, подтверждающих очную форму обучения, не задана дата.",
						"Раздел1Прил10", "П00110М109001_" + НомерСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, СправкаОчноеОбучДата) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 10 к разделу 1: в строке " + НомерСтроки
						+ " группы строк 020-140 в сведениях из справки, подтверждающих очную форму обучения, задана дата, выходящая за пределы периода с 01.01.1900 по 31.12.2099.",
						"Раздел1Прил10", "П00110М107001_" + НомерСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			Иначе
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Приложение 10 к разделу 1: в строке " + НомерСтроки
					+ " группы строк 020-140 необходимо задать сведения из справки, подтверждающих членство в студенческом отряде, или сведения из справки, подтверждающих очную форму обучения.",
					"Раздел1Прил10", "П00110М106001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПарамПроверки.Вставить("Данные",         СтрокаМнЧ.Данные);
			ПарамПроверки.Вставить("НомерСтрокиМнЧ", НомерСтроки);
			
			ПроверитьПоказательНаНеотрицательность("П00110М110001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П00110М110002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П00110М110003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П00110М110004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П00110М110005", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы110М2];
			Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
				НомерПодчСтроки = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
				
				Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаПодчМнЧ.Данные["П00110М212001"])) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 10 к разделу 1 -> Строка " + НомерСтроки
						+ " группы строк 020-140: в строке " + НомерПодчСтроки + " группы строк 110-140 не задано наименование молодежного и детского объединения.",
						"Раздел1Прил10", "П00110М212001_" + НомерСтроки + "_" + НомерПодчСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаПодчМнЧ.Данные["П00110М213001"]) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 10 к разделу 1 -> Строка " + НомерСтроки
						+ " группы строк 020-140: в строке " + НомерПодчСтроки + " группы строк 110-140 не задана дата записи в реестре.",
						"Раздел1Прил10", "П00110М213001_" + НомерСтроки + "_" + НомерПодчСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаПодчМнЧ.Данные["П00110М214001"])) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 10 к разделу 1 -> Строка " + НомерСтроки
						+ " группы строк 020-140: в строке " + НомерПодчСтроки + " группы строк 110-140 не задан номер записи в реестре.",
						"Раздел1Прил10", "П00110М214001_" + НомерСтроки + "_" + НомерПодчСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 2.
	ДеревоРаздела2 = ДанныеМногоуровневыхРазделов.Раздел2;
	Если ПараметрыВыгрузки.ПоМесту = "124" ИЛИ ПараметрыВыгрузки.ПоМесту = "240" Тогда
		
		НомерСтраницы = 1;
		
		Если НЕ ЗаполненРаздел(ИмяФормы,
							   ДеревоРаздела2,
							   "Раздел2",
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов) Тогда
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"Раздел 2 не заполнен.", "Раздел2", "П000020001001", НомерСтраницы);
			СтатусПроверки = Ложь;
			
		Иначе
			
			Данные = ДеревоРаздела2.Строки[0].Данные;
			
			ПарамПроверки.Вставить("ИмяРаздела",    "Раздел2");
			ПарамПроверки.Вставить("Данные",        Данные);
			ПарамПроверки.Вставить("НомерСтраницы", НомерСтраницы);
			
			ОКТМОДлина = СтрДлина(СокрЛП(Данные["П000020001001"]));
			Если НЕ (ОКТМОДлина = 8 ИЛИ ОКТМОДлина = 11) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 2: в строке 010 не" + ?(ОКТМОДлина = 0, "", "верно")
					+ " задан код по ОКТМО.",
					"Раздел2", "П000020001001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КБКДлина = СтрДлина(СокрЛП(Данные["П000020002001"]));
			Если НЕ КБКДлина = 20 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 2: в строке 020 не" + ?(КБКДлина = 0, "", "верно")
					+ " задан код бюджетной классификации.",
					"Раздел2", "П000020002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПроверитьПоказательНаНеотрицательность("П000020003001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			КБКДлина = СтрДлина(СокрЛП(Данные["П000020004001"]));
			Если НЕ КБКДлина = 20 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 2: в строке 040 не" + ?(КБКДлина = 0, "", "верно")
					+ " задан код бюджетной классификации.",
					"Раздел2", "П000020004001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПроверитьПоказательНаНеотрицательность("П000020005001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			ДанныеМнЧ = ДеревоРаздела2.Строки[0].ДанныеМногострочныхЧастей[
			СтруктураРеквизитовФормы.мИдГруппы21М1];
			
			ИмяПокФамилияФЛ = "П00021М101001";
			ИмяПокИмяФЛ     = "П00021М102001";
			ИмяПокОтчФЛ     = "П00021М103001";
			ИмяПокИННФЛ     = "П00021М104001";
			ИмяПокСНИЛС     = "П00021М105001";
			ИмяПокГодРожд   = "П00021М106001";
			ИмяПокДатаНач   = "П00021М107001";
			ИмяПокДатаКон   = "П00021М108001";
			
			Для Каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				Инд = Формат(ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				
				ТекстСообщения = "";
				РеквизитФИО = СокрЛП(СтрокаМнЧ.Данные[ИмяПокФамилияФЛ]);
				Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 к Разделу 2: в строке " + Инд
					+ " группы строк 010-090 не задана фамилия члена крестьянского (фермерского) хозяйства.",
					"Раздел2", ИмяПокФамилияФЛ + "_" + Инд);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 1, ТекстСообщения) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 к Разделу 2: в строке " + Инд
					+ " группы строк 010-090 неверно задана фамилия члена крестьянского (фермерского) хозяйства."
					+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""),
					"Раздел2", ИмяПокФамилияФЛ + "_" + Инд);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ТекстСообщения = "";
				РеквизитФИО = СокрЛП(СтрокаМнЧ.Данные[ИмяПокИмяФЛ]);
				Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 к Разделу 2: в строке " + Инд
					+ " группы строк 010-090 не задано имя члена крестьянского (фермерского) хозяйства.",
					"Раздел2", ИмяПокИмяФЛ + "_" + Инд);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 2, ТекстСообщения) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 к Разделу 2: в строке " + Инд
					+ " группы строк 010-090 неверно задано имя члена крестьянского (фермерского) хозяйства."
					+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""),
					"Раздел2", ИмяПокИмяФЛ + "_" + Инд);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ТекстСообщения = "";
				РеквизитФИО = СокрЛП(СтрокаМнЧ.Данные[ИмяПокОтчФЛ]);
				Если ЗначениеЗаполнено(РеквизитФИО)
					И НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 3, ТекстСообщения) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 к Разделу 2: в строке " + Инд
					+ " группы строк 010-090 неверно задано отчество члена крестьянского (фермерского) хозяйства."
					+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""),
					"Раздел2", ИмяПокОтчФЛ + "_" + Инд);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИННФЛ = СокрЛП(СтрокаМнЧ.Данные[ИмяПокИННФЛ]);
				Если ЗначениеЗаполнено(ИННФЛ) Тогда
					ТекстСообщения = "";
					Если НЕ ИННФЛСоответствуетТребованиям(ИННФЛ, ТекстСообщения) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 к Разделу 2: в строке " + Инд
						+ " группы строк 010-090 неверно задан ИНН члена крестьянского (фермерского) хозяйства."
						+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Раздел2", ИмяПокИННФЛ + "_" + Инд);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ТекстСообщения = "";
				СНИЛС = СокрЛП(СтрокаМнЧ.Данные[ИмяПокСНИЛС]);
				Если НЕ ЗначениеЗаполнено(СНИЛС) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 к Разделу 2: в строке " + Инд
					+ " группы строк 010-090 не задан задан СНИЛС члена крестьянского (фермерского) хозяйства.",
					"Раздел2", ИмяПокСНИЛС + "_" + Инд);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ СНИЛССоответствуетТребованиям(СтрокаМнЧ.Данные[ИмяПокСНИЛС], ТекстСообщения) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 к Разделу 2: в строке " + Инд
					+ " группы строк 010-090 неверно задан задан СНИЛС члена крестьянского (фермерского) хозяйства."
					+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Раздел2", ИмяПокСНИЛС + "_" + Инд);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ГодРождДлина = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПокГодРожд]));
				Если НЕ ГодРождДлина = 4 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 1 к Разделу 2: в строке " + Инд
						+ " группы строк 010-090 не" + ?(ГодРождДлина = 0, "", "верно")
						+ " задан год рождения члена крестьянского (фермерского) хозяйства.",
						"Раздел2", ИмяПокГодРожд + "_" + Инд);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные[ИмяПокДатаНач]) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 1 к Разделу 2: в строке " + Инд
						+ " группы строк 010-090 не задана дата начала периода членства в крестьянском (фермерском) хозяйстве в расчетный период.",
						"Раздел2", ИмяПокДатаНач + "_" + Инд);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, СтрокаМнЧ.Данные[ИмяПокДатаНач],
					СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала,
					СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 1 к Разделу 2: в строке " + Инд
						+ " группы строк 010-090 задана дата начала периода членства в крестьянском (фермерском) хозяйстве, выходящая за пределы расчетного периода.",
						"Раздел2", ИмяПокДатаНач + "_" + Инд);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные[ИмяПокДатаКон]) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 1 к Разделу 2: в строке " + Инд
						+ " группы строк 010-090 не задана дата окончания периода членства в крестьянском (фермерском) хозяйстве в расчетный период.",
						"Раздел2", ИмяПокДатаКон + "_" + Инд);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, СтрокаМнЧ.Данные[ИмяПокДатаКон],
					СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала,
					СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 1 к Разделу 2: в строке " + Инд
						+ " группы строк 010-090 задана дата окончания периода членства в крестьянском (фермерском) хозяйстве, выходящая за пределы расчетного периода.",
						"Раздел2", ИмяПокДатаКон + "_" + Инд);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаМнЧ.Данные[ИмяПокДатаНач])
					И ЗначениеЗаполнено(СтрокаМнЧ.Данные[ИмяПокДатаКон])
					И СтрокаМнЧ.Данные[ИмяПокДатаНач] > СтрокаМнЧ.Данные[ИмяПокДатаКон] Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
						"Приложение 1 к Разделу 2: в строке " + Инд
						+ " группы строк 010-090 дата начала периода членства в крестьянском (фермерском) хозяйстве не должна быть больше даты окончания.",
						"Раздел2", ИмяПокДатаКон + "_" + Инд);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ПарамПроверки.Вставить("Данные",         СтрокаМнЧ.Данные);
				ПарамПроверки.Вставить("НомерСтрокиМнЧ", Инд);
				
				ПроверитьПоказательНаНеотрицательность("П00021М109001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
				ПроверитьПоказательНаНеотрицательность("П00021М109002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Раздел 3.
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел3;
	Если ЗаполненРаздел(ИмяФормы,
						ДеревоРаздела,
						"Раздел3",
						СтруктураРеквизитовФормы,
						СтруктураМногоуровневыхРазделов) Тогда
		
		ПредставленияСтраницРаздела3СНеуникальнымиПорядковымиНомерами = Новый Массив;
		
		ТаблПорядковыхНомеров = Новый ТаблицаЗначений;
		ТаблПорядковыхНомеров.Колонки.Добавить("ПорядковыйНомер");
		ТаблПорядковыхНомеров.Колонки.Добавить("ИндексСтраницы");
		ТаблПорядковыхНомеров.Колонки.Добавить("СчетчикСтраниц");
		
		Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
			
			// Подраздел 3.1.
			Данные = СтраницаРаздела.Данные;
			НомерСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			ПарамПроверки.Вставить("ИмяРаздела",    "Раздел3");
			ПарамПроверки.Вставить("НомерСтраницы", НомерСтраницы);
			
			ПорядковыйНомер = СокрЛП(Данные["П000030004001"]);
			Если НЕ ЗначениеЗаполнено(ПорядковыйНомер) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 3 -> Страница " + НомерСтраницы
					+ ": в строке 040 не задан номер.",
					"Раздел3", "П000030004001", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				НоваяСтрокаТаблПорядковыхНомеров = ТаблПорядковыхНомеров.Добавить();
				НоваяСтрокаТаблПорядковыхНомеров.ПорядковыйНомер = ПорядковыйНомер;
				НоваяСтрокаТаблПорядковыхНомеров.ИндексСтраницы = ДеревоРаздела.Строки.Индекс(СтраницаРаздела);
				НоваяСтрокаТаблПорядковыхНомеров.СчетчикСтраниц = 1;
			КонецЕсли;
			ИННФЛ = СокрЛП(Данные["П000310006001"]);
			Если ЗначениеЗаполнено(ИННФЛ) Тогда
				ТекстСообщения = "";
				Если НЕ ИННФЛСоответствуетТребованиям(ИННФЛ, ТекстСообщения) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 3 -> Страница " + НомерСтраницы
					+ ": в строке 060 неверно задан ИНН физического лица." + ?(ЗначениеЗаполнено(ТекстСообщения),
					" " + ТекстСообщения, ""), "Раздел3", "П000310006001", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			ТекстСообщения = "";
			СНИЛС = СокрЛП(Данные["П000310007001"]);
			Если НЕ ЗначениеЗаполнено(СНИЛС) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 3 -> Страница " + НомерСтраницы
				+ ": в строке 070 не задан СНИЛС физического лица.", "Раздел3", "П000310007001", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ СНИЛССоответствуетТребованиям(Данные["П000310007001"], ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 3 -> Страница " + НомерСтраницы
				+ ": в строке 070 неверно задан СНИЛС физического лица." + ?(ЗначениеЗаполнено(ТекстСообщения),
				" " + ТекстСообщения, ""), "Раздел3", "П000310007001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;

			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(Данные["П000310008001"]);
			Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 3 -> Страница " + НомерСтраницы
					+ ": в строке 080 не задана фамилия физического лица.",
					"Раздел3", "П000310008001", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 1, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 3 -> Страница " + НомерСтраницы
				+ ": в строке 080 неверно задана фамилия физического лица." + ?(ЗначениеЗаполнено(ТекстСообщения),
				" " + ТекстСообщения, ""), "Раздел3", "П000310008001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(Данные["П000310009001"]);
			Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 3 -> Страница " + НомерСтраницы
					+ ": в строке 090 не задано имя физического лица.",
					"Раздел3", "П000310009001", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 2, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 3 -> Страница " + НомерСтраницы
				+ ": в строке 090 неверно задано имя физического лица." + ?(ЗначениеЗаполнено(ТекстСообщения),
				" " + ТекстСообщения, ""), "Раздел3", "П000310009001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(Данные["П000310010001"]);
			Если ЗначениеЗаполнено(РеквизитФИО)
				И НЕ РеквизитФИОСоответствуетТребованиям(РеквизитФИО, 3, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 3 -> Страница " + НомерСтраницы
				+ ": в строке 100 неверно задано отчество физического лица." + ?(ЗначениеЗаполнено(ТекстСообщения),
				" " + ТекстСообщения, ""), "Раздел3", "П000310010001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Данные["П000310011001"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 3 -> Страница " + НомерСтраницы
					+ ": в строке 110 не задана дата рождения физического лица.",
					"Раздел3", "П000310011001", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, Данные["П000310011001"], , ПараметрыВыгрузки.ДатаДок_Дата) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 3 -> Страница " + НомерСтраницы
					+ ": в строке 110 задана дата рождения физического лица, выходящая за пределы периода с 01.01.1900 по "
					+ Формат(ПараметрыВыгрузки.ДатаДок_Дата, "ДФ=дд.ММ.гггг") + ".",
					"Раздел3", "П000310011001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СокрЛП(Данные["П000310012001"])) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 3 -> Страница " + НомерСтраницы
					+ ": в строке 120 не задано гражданство (код страны) физического лица.",
					"Раздел3", "П000310012001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ЗначениеПоказателя = СокрЛП(Данные["П000310013001"]);
			Если МассивСтрок1_2.Найти(ЗначениеПоказателя) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 3 -> Страница " + НомерСтраницы + ": в строке 130 не"
					+ ?(ЗначениеПоказателя = "", "", "верно") + " задан пол.",
					"Раздел3", "П000310013001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			КодВидДокДлина = СтрДлина(СокрЛП(Данные["П000310014001"]));
			Если НЕ КодВидДокДлина = 2 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 3 -> Страница " + НомерСтраницы + ": в строке 140 не"
					+ ?(КодВидДокДлина = 0, "", "верно") + " задан код вида документа, удостоверяющего личность.",
					"Раздел3", "П000310014001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ (ЗначениеЗаполнено(СокрЛП(Данные["П000310015001"]))
				ИЛИ ЗначениеЗаполнено(СокрЛП(Данные["П000310015002"]))) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 3 -> Страница " + НомерСтраницы
					+ ": в строке 150 не заданы серия и номер документа, удостоверяющего личность.",
					"Раздел3", "П000310015001", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(Данные["П000310015001"])
				+ СокрЛП(Данные["П000310015002"])) > 24 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 3 -> Страница " + НомерСтраницы
					+ ": в строке 150 общее количество символов в серии и номере документа, удостоверяющего личность, превышает 24.",
					"Раздел3", "П000310015001", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				ТекстСообщения = "";
				Если НЕ СерияНомерДокументаСоответствуютТребованиям(
					Данные["П000310014001"], Данные["П000310015001"], Данные["П000310015002"], ТекстСообщения) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 3 -> Страница " + НомерСтраницы
					+ ": в строке 150 неверно заданы серия и номер документа, удостоверяющего личность."
					+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Раздел3",
					?(ЗначениеЗаполнено(Данные["П000310015001"]), "П000310015001", "П000310015002"), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			ЗначениеПоказателя = СокрЛП(Данные["П000310016001"]);
			Если МассивСтрок1_2.Найти(ЗначениеПоказателя) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 3 -> Страница " + НомерСтраницы
					+ ": в строке 160 не" + ?(ЗначениеПоказателя = "", "", "верно")
					+ " задан признак застрахованного лица в системе обязательного пенсионного страхования.",
					"Раздел3", "П000310016001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ЗначениеПоказателя = СокрЛП(Данные["П000310017001"]);
			Если МассивСтрок1_2.Найти(ЗначениеПоказателя) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 3 -> Страница " + НомерСтраницы
					+ ": в строке 170 не" + ?(ЗначениеПоказателя = "", "", "верно")
					+ " задан признак застрахованного лица в системе обязательного медицинского страхования.",
					"Раздел3", "П000310017001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ЗначениеПоказателя = СокрЛП(Данные["П000310018001"]);
			Если МассивСтрок1_2.Найти(ЗначениеПоказателя) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Раздел 3 -> Страница " + НомерСтраницы
					+ ": в строке 180 не" + ?(ЗначениеПоказателя = "", "", "верно")
					+ " задан признак застрахованного лица в системе обязательного социального страхования.",
					"Раздел3", "П000310018001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Проверка в подразделе 3.2.
			ЗаполненПодраздел321 = Ложь;
			ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы321М1;
			ДанныеМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Для каждого ИмяГрафы Из МассивИменГраф Цикл
					Если ЗначениеЗаполнено(СтрокаМнЧ.Данные[ИмяГрафы]) Тогда
						ЗаполненПодраздел321 = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			ЗаполненПодраздел322 = Ложь;
			ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы322М1;
			ДанныеМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Для каждого ИмяГрафы Из МассивИменГраф Цикл
					Если ЗначениеЗаполнено(СтрокаМнЧ.Данные[ИмяГрафы]) Тогда
						ЗаполненПодраздел322 = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			// Подраздел 3.2.1.
			Если ЗаполненПодраздел321 ИЛИ ЗаполненПодраздел322 Тогда
				ДанныеМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы321М1];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомерСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные["П00321М119001"])) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
							"Раздел 3 -> Страница " + НомерСтраницы + " -> в строке "
							+ НомерСтроки + " группы строк 190-240 не задан месяц.",
							"Раздел3", "П00321М119001_" + НомерСтроки, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					КодКатегорииЗЛ = СокрЛП(СтрокаМнЧ.Данные["П00321М120001"]);
					Если НЕ ЗначениеЗаполнено(КодКатегорииЗЛ) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
							"Раздел 3 -> Страница " + НомерСтраницы + " -> в строке "
							+ НомерСтроки + " группы строк 190-240 не задан код категории застрахованного лица.",
							"Раздел3", "П00321М120001_" + НомерСтроки, НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(КодКатегорииЗЛ) < 2 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
							"Раздел 3 -> Страница " + НомерСтраницы + " -> в строке "
							+ НомерСтроки + " группы строк 190-240 задан код категории застрахованного лица, состоящий менее чем из 2 символов.",
							"Раздел3", "П00321М120001_" + НомерСтроки, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ПарамПроверки.Вставить("Данные",         СтрокаМнЧ.Данные);
					ПарамПроверки.Вставить("НомерСтрокиМнЧ", НомерСтроки);
					
					ПроверитьПоказательНаНеотрицательность("П00321М121001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П00321М122001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П00321М123001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П00321М124001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
				КонецЦикла;
			КонецЕсли;
			
			ПарамПроверки.Вставить("Данные", Данные);
			ПроверитьПоказательНаНеотрицательность("П003210025001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П003210025002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П003210025003", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П003210025004", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
			// Подраздел 3.2.2.
			Если ЗаполненПодраздел322 Тогда
				ДанныеМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы322М1];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомерСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные["П00322М126001"])) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
							"Раздел 3 -> Страница " + НомерСтраницы + " -> в строке "
							+ НомерСтроки + " группы строк 260-290 не задан месяц.",
							"Раздел3", "П00322М126001_" + НомерСтроки, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					КодТарифа = СокрЛП(СтрокаМнЧ.Данные["П00322М127001"]);
					Если НЕ ЗначениеЗаполнено(КодТарифа) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
							"Раздел 3 -> Страница " + НомерСтраницы + " -> в строке "
							+ НомерСтроки + " группы строк 260-290 не задан код тарифа.",
							"Раздел3", "П00322М127001_" + НомерСтроки, НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(КодТарифа) < 2 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
							"Раздел 3 -> Страница " + НомерСтраницы + " -> в строке "
							+ НомерСтроки + " группы строк 260-290 задан код тарифа, не состоящий из 2 символов.",
							"Раздел3", "П00322М127001_" + НомерСтроки, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ПарамПроверки.Вставить("Данные",         СтрокаМнЧ.Данные);
					ПарамПроверки.Вставить("НомерСтрокиМнЧ", НомерСтроки);
					
					ПроверитьПоказательНаНеотрицательность("П00322М128001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					ПроверитьПоказательНаНеотрицательность("П00322М129001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
					
				КонецЦикла;
			КонецЕсли;
			
			ПарамПроверки.Вставить("Данные", Данные);
			ПроверитьПоказательНаНеотрицательность("П003220030001", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			ПроверитьПоказательНаНеотрицательность("П003220030002", ПарамПроверки, РезультатВыгрузки, СтатусПроверки);
			
		КонецЦикла;
		
		ТаблПорядНом = ТаблПорядковыхНомеров.Скопировать();
		ТаблПорядНом.Свернуть("ПорядковыйНомер", "СчетчикСтраниц");
		
		ИндексПервойСтраницыРаздела3СНеуникальнымПорядковымНомером = Неопределено;
		
		Если ТаблПорядковыхНомеров.Количество() <> ТаблПорядНом.Количество() Тогда
			
			Для каждого СтрокаТаблПорядНом Из ТаблПорядНом Цикл
				
				Если СтрокаТаблПорядНом.СчетчикСтраниц > 1 Тогда
					
					СтрокиТаблПорядковыхНомеров = ТаблПорядковыхНомеров.НайтиСтроки(
					Новый Структура("ПорядковыйНомер", СтрокаТаблПорядНом.ПорядковыйНомер));
					
					Для каждого СтрокаТаблПорядковыхНомеров Из СтрокиТаблПорядковыхНомеров Цикл
						
						Данные = ДеревоРаздела.Строки[СтрокаТаблПорядковыхНомеров.ИндексСтраницы].Данные;
						
						СтруктПарам = Новый Структура;
						СтруктПарам.Вставить("Фам", Данные.П000310008001);
						СтруктПарам.Вставить("Имя", Данные.П000310009001);
						СтруктПарам.Вставить("Отч", Данные.П000310010001);
						СтруктПарам.Вставить("ДатаРожд", Данные.П000310011001);
						СтруктПарам.Вставить("НомерСтраницы", СтрокаТаблПорядковыхНомеров.ИндексСтраницы + 1);
						ПредставленияСтраницРаздела3СНеуникальнымиПорядковымиНомерами.Добавить(
						"""" + РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРаздела3ФормыРСВ(СтруктПарам) + """");
						
						Если ИндексПервойСтраницыРаздела3СНеуникальнымПорядковымНомером = Неопределено Тогда
							ИндексПервойСтраницыРаздела3СНеуникальнымПорядковымНомером = СтрокаТаблПорядковыхНомеров.ИндексСтраницы;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПредставленияСтраницРаздела3СНеуникальнымиПорядковымиНомерами.Количество() > 0 Тогда
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
				"Раздел 3: заданы неуникальные значения строки 040 на страницах "
				+ СтрСоединить(ПредставленияСтраницРаздела3СНеуникальнымиПорядковымиНомерами, ", ") + ".",
				"Раздел3", "П000030004001", Формат(ИндексПервойСтраницыРаздела3СНеуникальнымПорядковымНомером + 1, "ЧГ="));
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ИННФЛСоответствуетТребованиям(Знач ИНН, ТекстСообщения)
	
	Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, Ложь, ТекстСообщения) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Символы12 = Лев(ИНН, 2);
	
	Если Символы12 = "00"
		ИЛИ Символы12 = "90"
		ИЛИ Символы12 = "93"
		ИЛИ Символы12 = "94"
		ИЛИ Символы12 = "95"
		ИЛИ Символы12 = "96"
		ИЛИ Символы12 = "98" Тогда
		
		ТекстСообщения = НСтр(
		"ru = 'Не допустимы следующие значения в двух первых разрядах ИНН: ""00"", ""90"", ""93"", ""94"", ""95"", ""96"", ""98"".'");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СНИЛССоответствуетТребованиям(Знач СНИЛС, ТекстСообщения)
	
	ТекстСообщенияОбщий = НСтр(
	"ru='СНИЛС должен соответствовать одному из шаблонов: ""ХХХ-ХХХ-ХХХ-ХХ"", ""ХХХ-ХХХ-ХХХ ХХ"" (X - любая цифра).'");
	
	СНИЛС = СокрЛП(СНИЛС);
	
	Если СтрДлина(СНИЛС) <> 14 Тогда
		
		ТекстСообщения = ТекстСообщенияОбщий;
		
		Возврат Ложь;
		
	Иначе
		
		Для Ном = 1 По 14 Цикл
			
			ТекСимв = Сред(СНИЛС, Ном, 1);
			
			Если Ном = 4 ИЛИ Ном = 8 Тогда
				СНИЛССоответствуетТребованиям = ТекСимв = "-";
			ИначеЕсли Ном = 12 Тогда
				СНИЛССоответствуетТребованиям = (ТекСимв = " " ИЛИ ТекСимв = "-");
			Иначе
				СНИЛССоответствуетТребованиям = СтрНайти("1234567890", ТекСимв) > 0;
			КонецЕсли;
			
			Если НЕ СНИЛССоответствуетТребованиям Тогда
				
				ТекстСообщения = ТекстСообщенияОбщий;
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СерияНомерДокументаСоответствуютТребованиям(Знач ВидДок, Знач СерияДок, Знач НомерДок, ТекстСообщения)
	
	ВидДок = СокрЛП(ВидДок);
	
	Если ВидДок <> "21" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ТекстСообщенияОбщий = НСтр(
	"ru='Серия и номер паспорта гражданина Российской Федерации должны соответствовать шаблону: ""ХХ ХХ ХХХХХХ"" (X - любая цифра).'");
	
	СерияДок = СокрЛП(СерияДок);
	НомерДок = СокрЛП(НомерДок);
	
	СерияНомерДок = СокрЛП(СерияДок + " " + НомерДок);
	
	Если СтрДлина(СерияНомерДок) <> 12 Тогда
		
		ТекстСообщения = ТекстСообщенияОбщий;
		
		Возврат Ложь;
		
	Иначе
		
		Для Ном = 1 По 12 Цикл
			
			ТекСимв = Сред(СерияНомерДок, Ном, 1);
			
			Если Ном = 3 ИЛИ Ном = 6 Тогда
				СерияНомерСоответствуютТребованиям = ТекСимв = " ";
			Иначе
				СерияНомерСоответствуютТребованиям = СтрНайти("1234567890", ТекСимв) > 0;
			КонецЕсли;
			
			Если НЕ СерияНомерСоответствуютТребованиям Тогда
				
				ТекстСообщения = ТекстСообщенияОбщий;
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция РеквизитФИОСоответствуетТребованиям(Знач РеквизитФИО, ТипРеквизитаФИО, ТекстСообщения)
	
	Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ТипРеквизитаФИО = 1 Тогда
		
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(РеквизитФИО, , " -.'IV") Тогда
			
			ТекстСообщения = НСтр(
			"ru = 'Фамилия должна быть заполнена прописными (большими) и строчными (маленькими) буквами русского алфавита; допускаются прописные (большие) буквы ""I"", ""V"" латинского алфавита, символы ""."" (точка), ""-"" (дефис), "" ’ "" (апостроф), "" "" (пробел).'");
			
			Возврат Ложь;
			
		КонецЕсли;
		
		РеквизитФИОДлина = СтрДлина(РеквизитФИО);
		
		Если РеквизитФИОДлина = 1 Тогда
			
			Если СтрНайти("-.'IV", РеквизитФИО) > 0 Тогда
				
				ТекстСообщения = НСтр(
				"ru = 'Фамилия не должна содержать в качестве единственного символа прописные (большие) буквы ""I"", ""V"" латинского алфавита, символы ""."" (точка), ""-"" (дефис), "" ’ "" (апостроф).'");
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			НедопустимыйПервыйСимвол    = СтрНайти("-.'IV", Лев(РеквизитФИО, 1)) > 0;
			НедопустимыйПоследнийСимвол = СтрНайти("-.'",  Прав(РеквизитФИО, 1)) > 0;
			
			Если НедопустимыйПервыйСимвол И НедопустимыйПоследнийСимвол Тогда
				
				ТекстСообщения = НСтр(
				"ru = 'Фамилия не должна содержать в качестве первого символа прописные (большие) буквы ""I"", ""V"" латинского алфавита, символы ""."" (точка), ""-"" (дефис), "" ’ "" (апостроф) и не должна содержать в качестве последнего символа ""."" (точку), ""-"" (дефис), "" ’ "" (апостроф).'");
				
				Возврат Ложь;
				
			ИначеЕсли НедопустимыйПервыйСимвол Тогда
				
				ТекстСообщения = НСтр(
				"ru = 'Фамилия не должна содержать в качестве первого символа прописные (большие) буквы ""I"", ""V"" латинского алфавита, символы ""."" (точка), ""-"" (дефис), "" ’ "" (апостроф).'");
				
				Возврат Ложь;
				
			ИначеЕсли НедопустимыйПоследнийСимвол Тогда
				
				ТекстСообщения = НСтр(
				"ru = 'Фамилия не должна содержать в качестве последнего символа ""."" (точку), ""-"" (дефис), "" ’ "" (апостроф).'");
				
				Возврат Ложь;
				
			КонецЕсли;
			
			Для Ном = 1 По РеквизитФИОДлина Цикл
				
				ТекСимв = Сред(РеквизитФИО, Ном, 1);
				
				Если Ном < РеквизитФИОДлина Тогда
					
					Если СтрНайти("-.'", ТекСимв) > 0 Тогда
						
						Если СтрНайти("-.'", Сред(РеквизитФИО, Ном + 1, 1)) > 0 Тогда
							
							ТекстСообщения = НСтр(
							"ru = 'Фамилия не должна содержать сочетание (повторение) подряд двух и более символов ""."" (точка), ""-"" (дефис), "" ’ "" (апостроф).'");
							
							Возврат Ложь;
							
						КонецЕсли;
						
					ИначеЕсли ТекСимв = " " Тогда
						
						Если Сред(РеквизитФИО, Ном + 1, 1) = " " Тогда
							
							ТекстСообщения = НСтр(
							"ru = 'Фамилия не должна содержать сочетание (повторение) подряд двух и более символов "" "" (пробел), если они не являются начальными или конечными.'");
							
							Возврат Ложь;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ПредставлениеРеквизитаФИО = ?(ТипРеквизитаФИО = 2, "Имя ", "Отчество ");
		
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(РеквизитФИО, , " -.'IV") Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = '%1должно быть заполнено прописными (большими) и строчными (маленькими) буквами русского алфавита; допускаются прописные (большие) буквы ""I"", ""V"" латинского алфавита, символы ""."" (точка), ""-"" (дефис), "" ’ "" (апостроф), "" "" (пробел).'"),
			ПредставлениеРеквизитаФИО);
			
			Возврат Ложь;
			
		КонецЕсли;
		
		РеквизитФИОДлина = СтрДлина(РеквизитФИО);
		
		Если РеквизитФИОДлина = 1 Тогда
			
			Если СтрНайти("-.'IV", РеквизитФИО) > 0 Тогда
				
				ТекстСообщения = СтрШаблон(НСтр(
				"ru = '%1не должно содержать в качестве единственного символа прописные (большие) буквы ""I"", ""V"" латинского алфавита, символы ""."" (точка), ""-"" (дефис), "" ’ "" (апостроф).'"),
				ПредставлениеРеквизитаФИО);
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			НедопустимыйПервыйСимвол    = СтрНайти("-.'IV", Лев(РеквизитФИО, 1)) > 0;
			НедопустимыйПоследнийСимвол = СтрНайти("-'",   Прав(РеквизитФИО, 1)) > 0;
			
			Если НедопустимыйПервыйСимвол И НедопустимыйПоследнийСимвол Тогда
				
				ТекстСообщения = СтрШаблон(НСтр(
				"ru = '%1не должно содержать в качестве первого символа прописные (большие) буквы ""I"", ""V"" латинского алфавита, символы ""."" (точка), ""-"" (дефис), "" ’ "" (апостроф) и не должно содержать в качестве последнего символа ""-"" (дефис), "" ’ "" (апостроф).'"),
				ПредставлениеРеквизитаФИО);
				
				Возврат Ложь;
				
			ИначеЕсли НедопустимыйПервыйСимвол Тогда
				
				ТекстСообщения = СтрШаблон(НСтр(
				"ru = '%1не должно содержать в качестве первого символа прописные (большие) буквы ""I"", ""V"" латинского алфавита, символы ""."" (точка), ""-"" (дефис), "" ’ "" (апостроф).'"),
				ПредставлениеРеквизитаФИО);
				
				Возврат Ложь;
				
			ИначеЕсли НедопустимыйПоследнийСимвол Тогда
				
				ТекстСообщения = СтрШаблон(НСтр(
				"ru = '%1не должно содержать в качестве последнего символа ""-"" (дефис), "" ’ "" (апостроф).'"),
				ПредставлениеРеквизитаФИО);
				
				Возврат Ложь;
				
			КонецЕсли;
			
			Для Ном = 1 По РеквизитФИОДлина Цикл
				
				ТекСимв = Сред(РеквизитФИО, Ном, 1);
				
				Если Ном < РеквизитФИОДлина Тогда
					
					Если СтрНайти("-.'", ТекСимв) > 0 Тогда
						
						Если СтрНайти("-.'", Сред(РеквизитФИО, Ном + 1, 1)) > 0 Тогда
							
							ТекстСообщения = СтрШаблон(НСтр(
							"ru = '%1не должно содержать сочетание (повторение) подряд двух и более символов ""."" (точка), ""-"" (дефис), "" ’ "" (апостроф).'"),
							ПредставлениеРеквизитаФИО);
							
							Возврат Ложь;
							
						КонецЕсли;
						
					ИначеЕсли ТекСимв = " " Тогда
						
						Если Сред(РеквизитФИО, Ном + 1, 1) = " " Тогда
							
							ТекстСообщения = СтрШаблон(НСтр(
							"ru = '%1не должно содержать сочетание (повторение) подряд двух и более символов "" "" (пробел), если они не являются начальными или конечными.'"),
							ПредставлениеРеквизитаФИО);
							
							Возврат Ложь;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ПроверитьПоказательНаНеотрицательность(ИмяПоказателя, ПарамПроверки, РезультатВыгрузки, СтатусПроверки)
	
	Если ПарамПроверки.Данные[ИмяПоказателя] < 0 Тогда
		
		КодСтроки = Сред(ИмяПоказателя, 9, 3);
		
		Если ПарамПроверки.ИмяРаздела = "Раздел1" Тогда
			
			Если Сред(ИмяПоказателя, 7, 1) = "М" Тогда
				
				НомерМнЧ = Сред(ИмяПоказателя, 8, 1);
				ТекстГруппаСтрок = "";
				Если НомерМнЧ = "1" Тогда
					ТекстГруппаСтрок = "060-073";
				ИначеЕсли НомерМнЧ = "2" Тогда
					ТекстГруппаСтрок = "080-093";
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Раздел 1: в строке %1 группы строк %2 значение строки с кодом %3 не должно быть отрицательным.'"),
				ПарамПроверки.НомерСтрокиМнЧ, ТекстГруппаСтрок, КодСтроки);
				
				СообщитьВТС(ПарамПроверки.ИмяФормы, РезультатВыгрузки, ТекстСообщения,
				ПарамПроверки.ИмяРаздела, ИмяПоказателя + "_" + ПарамПроверки.НомерСтрокиМнЧ, ПарамПроверки.НомерСтраницы);
				
			Иначе
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Раздел 1: в строке %1 значение не должно быть отрицательным.'"), КодСтроки);
				
				СообщитьВТС(ПарамПроверки.ИмяФормы, РезультатВыгрузки, ТекстСообщения,
				ПарамПроверки.ИмяРаздела, ИмяПоказателя, ПарамПроверки.НомерСтраницы);
				
			КонецЕсли;
			
		ИначеЕсли ПарамПроверки.ИмяРаздела = "Раздел1Прил1Подр1_1и1_2" Тогда
			
			НомерПодраздела = Лев(ИмяПоказателя, 6);
			ТекстНомерПодраздела = "";
			Если НомерПодраздела = "П01111" Тогда
				ТекстНомерПодраздела = "1.1";
			ИначеЕсли НомерПодраздела = "П01112" Тогда
				ТекстНомерПодраздела = "1.2";
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='Приложение 1 к разделу 1 -> Страница %1 -> Подраздел %2: в графе %3 строки %4 значение не должно быть отрицательным.'"),
			ПарамПроверки.НомерСтраницы, ТекстНомерПодраздела, Прав(ИмяПоказателя, 1), КодСтроки);
			
			СообщитьВТС(ПарамПроверки.ИмяФормы, РезультатВыгрузки, ТекстСообщения,
			ПарамПроверки.ИмяРаздела, ИмяПоказателя, ПарамПроверки.КоординатыПодраздела);
			
		ИначеЕсли ПарамПроверки.ИмяРаздела = "Раздел1Прил1Подр1_3_1"
			ИЛИ ПарамПроверки.ИмяРаздела = "Раздел1Прил1Подр1_3_2"
			ИЛИ ПарамПроверки.ИмяРаздела = "Раздел1Прил1Подр1_4" Тогда
			
			ТекстНомерПодраздела = "";
			Если ПарамПроверки.ИмяРаздела = "Раздел1Прил1Подр1_3_1" Тогда
				ТекстНомерПодраздела = "1.3.1";
			ИначеЕсли ПарамПроверки.ИмяРаздела = "Раздел1Прил1Подр1_3_2" Тогда
				ТекстНомерПодраздела = "1.3.2";
			ИначеЕсли ПарамПроверки.ИмяРаздела = "Раздел1Прил1Подр1_4" Тогда
				ТекстНомерПодраздела = "1.4";
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='Приложение 1 к разделу 1 -> Страница %1 -> Подраздел %2: в строке %3 группы строк 001-050 в графе %4 строки %5 значение не должно быть отрицательным.'"),
			ПарамПроверки.НомерСтраницы, ТекстНомерПодраздела, ПарамПроверки.НомерСтрокиМнЧ, Сред(ИмяПоказателя, 13, 1),
			КодСтроки);
			
			СообщитьВТС(ПарамПроверки.ИмяФормы, РезультатВыгрузки, ТекстСообщения, ПарамПроверки.ИмяРаздела,
			ИмяПоказателя + "_" + ПарамПроверки.НомерСтрокиМнЧ, ПарамПроверки.КоординатыПодраздела);
			
		ИначеЕсли ПарамПроверки.ИмяРаздела = "Раздел1Прил2"
			ИЛИ ПарамПроверки.ИмяРаздела = "Раздел1Прил3"
			ИЛИ ПарамПроверки.ИмяРаздела = "Раздел1Прил4"
			ИЛИ ПарамПроверки.ИмяРаздела = "Раздел1Прил5_6"
			ИЛИ ПарамПроверки.ИмяРаздела = "Раздел1Прил7" Тогда
			
			ТекстНомерПриложения = Сред(ИмяПоказателя, 6, 1);
			
			ТекстНомерГрафы = Прав(ИмяПоказателя, 1);
			ТекстНомерГрафы = ?(ТекстНомерГрафы = "0", Прав(ИмяПоказателя, 2), ТекстНомерГрафы);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='Приложение %1 к Разделу 1: в графе %2 строки %3 значение не должно быть отрицательным.'"),
			ТекстНомерПриложения, ТекстНомерГрафы, КодСтроки);
			
			СообщитьВТС(ПарамПроверки.ИмяФормы, РезультатВыгрузки, ТекстСообщения,
			ПарамПроверки.ИмяРаздела, ИмяПоказателя, ПарамПроверки.НомерСтраницы);
			
		ИначеЕсли ПарамПроверки.ИмяРаздела = "Раздел1Прил8"
			ИЛИ ПарамПроверки.ИмяРаздела = "Раздел1Прил9"
			ИЛИ ПарамПроверки.ИмяРаздела = "Раздел1Прил10" Тогда
			
			ТекстНомерПриложения = Сред(ИмяПоказателя, 6, 1);
			ТекстНомерПриложения = ?(ТекстНомерПриложения = "0", Сред(ИмяПоказателя, 5, 2), ТекстНомерПриложения);
			
			ТекстСуммаВыплат = "";
			НомерГрафы = Сред(ИмяПоказателя, 13, 1);
			Если НомерГрафы = "1" Тогда
				ТекстСуммаВыплат = "всего с начала расчетного периода";
			ИначеЕсли НомерГрафы = "2" Тогда
				ТекстСуммаВыплат = "всего за последние три месяца расчетного (отчетного) периода";
			ИначеЕсли НомерГрафы = "3" Тогда
				ТекстСуммаВыплат = "за первый из последних трех месяцев расчетного (отчетного) периода";
			ИначеЕсли НомерГрафы = "4" Тогда
				ТекстСуммаВыплат = "за второй из последних трех месяцев расчетного (отчетного) периода";
			ИначеЕсли НомерГрафы = "5" Тогда
				ТекстСуммаВыплат = "за третий из последних трех месяцев расчетного (отчетного) периода";
			КонецЕсли;
			
			Если Сред(ИмяПоказателя, 7, 1) = "М" Тогда
				
				ТекстГруппаСтрок = "";
				Если ПарамПроверки.ИмяРаздела = "Раздел1Прил8" Тогда
					ТекстГруппаСтрок = "020-060";
				ИначеЕсли ПарамПроверки.ИмяРаздела = "Раздел1Прил9" Тогда
					ТекстГруппаСтрок = "020-080";
				ИначеЕсли ПарамПроверки.ИмяРаздела = "Раздел1Прил10" Тогда
					ТекстГруппаСтрок = "020-100";
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Приложение %1 к разделу 1: в строке %2 группы строк %3 сумма выплат %4 не должна быть отрицательной.'"),
				ТекстНомерПриложения, ПарамПроверки.НомерСтрокиМнЧ, ТекстГруппаСтрок, ТекстСуммаВыплат);
				
				СообщитьВТС(ПарамПроверки.ИмяФормы, РезультатВыгрузки, ТекстСообщения,
				ПарамПроверки.ИмяРаздела, ИмяПоказателя + "_" + ПарамПроверки.НомерСтрокиМнЧ, ПарамПроверки.НомерСтраницы);
				
			Иначе
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Приложение %1 к разделу 1: итоговая сумма выплат %2 не должна быть отрицательной.'"),
				ТекстНомерПриложения, ТекстСуммаВыплат);
				
				СообщитьВТС(ПарамПроверки.ИмяФормы, РезультатВыгрузки, ТекстСообщения,
				ПарамПроверки.ИмяРаздела, ИмяПоказателя, ПарамПроверки.НомерСтраницы);
				
			КонецЕсли;
			
		ИначеЕсли ПарамПроверки.ИмяРаздела = "Раздел2" Тогда
			
			Если Сред(ИмяПоказателя, 7, 1) = "М" Тогда
				
				ТекстСуммаВыплат = "";
				НомерГрафы = Сред(ИмяПоказателя, 13, 1);
				Если НомерГрафы = "1" Тогда
					ТекстСуммаВыплат = "пенсионное";
				ИначеЕсли НомерГрафы = "2" Тогда
					ТекстСуммаВыплат = "медицинское";
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Приложение 1 к разделу 2: в строке %1 группы строк 010-090 сумма начисленных страховых взносов на обязательное %2 страхование не должна быть отрицательной.'"),
				ПарамПроверки.НомерСтрокиМнЧ, ТекстСуммаВыплат);
				
				СообщитьВТС(ПарамПроверки.ИмяФормы, РезультатВыгрузки, ТекстСообщения,
				ПарамПроверки.ИмяРаздела, ИмяПоказателя + "_" + ПарамПроверки.НомерСтрокиМнЧ, ПарамПроверки.НомерСтраницы);
				
			Иначе
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Раздел 2: в строке %1 значение не должно быть отрицательным.'"), КодСтроки);
				
				СообщитьВТС(ПарамПроверки.ИмяФормы, РезультатВыгрузки, ТекстСообщения,
				ПарамПроверки.ИмяРаздела, ИмяПоказателя, ПарамПроверки.НомерСтраницы);
				
			КонецЕсли;
			
		ИначеЕсли ПарамПроверки.ИмяРаздела = "Раздел3" Тогда
			
			Если Сред(ИмяПоказателя, 7, 1) = "М" Тогда
				
				МнЧ = Лев(ИмяПоказателя, 8);
				ТекстГруппаСтрок = "";
				Если МнЧ = "П00321М1" Тогда
					ТекстГруппаСтрок = "190-240";
				ИначеЕсли МнЧ = "П00322М1" Тогда
					ТекстГруппаСтрок = "260-290";
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Раздел 3 -> Страница %1 -> в строке %2 группы строк %3 значение строки с кодом %4 не должно быть отрицательным.'"),
				ПарамПроверки.НомерСтраницы, ПарамПроверки.НомерСтрокиМнЧ, ТекстГруппаСтрок, КодСтроки);
				
				СообщитьВТС(ПарамПроверки.ИмяФормы, РезультатВыгрузки, ТекстСообщения,
				ПарамПроверки.ИмяРаздела, ИмяПоказателя + "_" + ПарамПроверки.НомерСтрокиМнЧ, ПарамПроверки.НомерСтраницы);
				
			Иначе
				
				ТекстСуммаВыплат = "";
				НомерГрафы = Сред(ИмяПоказателя, 13, 1);
				Если КодСтроки = "250" Тогда
					Если НомерГрафы = "1" Тогда
						ТекстСуммаВыплат = "сумма выплат и иных вознаграждений";
					ИначеЕсли НомерГрафы = "2" Тогда
						ТекстСуммаВыплат = "база для исчисления страховых взносов на обязательное пенсионное страхование в пределах предельной величины";
					ИначеЕсли НомерГрафы = "3" Тогда
						ТекстСуммаВыплат = "база для исчисления страховых взносов на обязательное пенсионное страхование в пределах предельной величины по гражданско-правовым договорам";
					ИначеЕсли НомерГрафы = "4" Тогда
						ТекстСуммаВыплат = "сумма исчисленных страховых взносов с базы исчисления страховых взносов, не превышающих предельную величину,";
					КонецЕсли;
				ИначеЕсли КодСтроки = "300" Тогда
					Если НомерГрафы = "1" Тогда
						ТекстСуммаВыплат = "сумма выплат и иных вознаграждений, на которые начислены страховые взносы,";
					ИначеЕсли НомерГрафы = "2" Тогда
						ТекстСуммаВыплат = "сумма исчисленных страховых взносов";
					КонецЕсли;
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Раздел 3 -> Страница %1 -> %2 всего за последние три месяца расчетного (отчетного) периода не должна быть отрицательной.'"),
				ПарамПроверки.НомерСтраницы, ТекстСуммаВыплат);
				
				СообщитьВТС(ПарамПроверки.ИмяФормы, РезультатВыгрузки, ТекстСообщения,
				ПарамПроверки.ИмяРаздела, ИмяПоказателя, ПарамПроверки.НомерСтраницы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьВТС(ИмяФормы, Владелец, Описание, Раздел, ИмяЯчейки, ФИО = "") Экспорт
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Владелец, Описание, Раздел, ИмяЯчейки, ФИО);
		
КонецПроцедуры

Функция ЗаполненРаздел(ИмяФормы,
					   Знач ДеревоРаздела,
					   Знач ИмяРаздела,
					   СтруктураРеквизитовФормы,
					   СтруктураМногоуровневыхРазделов,
					   ДопПараметры = Неопределено) Экспорт
	
	Если ИмяРаздела = "Раздел1Прил8" Тогда
		Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
			Если ДопПараметры.Свойство("ЭтоПБОЮЛ") И ДопПараметры.ЭтоПБОЮЛ Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000010001001");
	
	Если ИмяРаздела = "Раздел1" Тогда
		Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
			Если ДопПараметры.Свойство("НеПроверятьЗаполнениеКБКСтрок020_040_100Раздела1") Тогда
				ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000010002001");
				ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000010004001");
				ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000010010001");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел1Прил2" Тогда
		Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
			Если ДопПараметры.Свойство("НеПроверятьЗаполнениеПризнаковСтроки090") Тогда
				ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120009001");
				ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120009003");
				ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120009005");
				ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120009007");
				ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120009009");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел1Прил5_6" Тогда
		ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000160006002");
		ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000160007002");
		ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000160008002");
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П00110М102001");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П00110М211001");
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		
		Данные = СтраницаРаздела.Данные;
		Для каждого Пок Из Данные Цикл
			Если ЗначениеЗаполнено(Пок.Значение)
				И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
			
			ИменаГруппМнЧ = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
			Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
				
				ДанныеМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
				МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
				Для Каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					Для каждого ИмяГрафы Из МассивИменГраф Цикл
						Если ЗначениеЗаполнено(СтрокаМнЧ.Данные[ИмяГрафы])
							И ПоказателиНеанализируемыеНаЗаполненность.Найти(ИмяГрафы) = Неопределено Тогда
							Возврат Истина;
						КонецЕсли;
					КонецЦикла;
					
					ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
					Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
						
						ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппы];
						МассивИменПодчГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяПодчГруппы]["ИменаГраф"];
						Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
							Для каждого ИмяПодчГрафы Из МассивИменПодчГраф Цикл
								Если ЗначениеЗаполнено(СтрокаПодчМнЧ.Данные[ИмяПодчГрафы])
									И ПоказателиНеанализируемыеНаЗаполненность.Найти(ИмяПодчГрафы) = Неопределено Тогда
									Возврат Истина;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
			ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
			Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
				ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
				ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
				Если ЗаполненРаздел(ИмяФормы,
									ДеревоПодчРаздела,
									ИмяПодчРаздела,
									СтруктураРеквизитовФормы,
									СтруктураМногоуровневыхРазделов) Тогда		
					
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ДатаВходитВРазрешенныйПериод(ИмяФормы,
									 ПровДата,
									 ЛеваяГраница = '19000101',
									 ПраваяГраница = '20991231') Экспорт
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы,
						   ДанныеОтчета,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
						   СтруктураРеквизитовФормы,
						   СтруктураМногоуровневыхРазделов) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ДанныеОтчета,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки);
												  
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 СтруктураРеквизитовФормы,
						 СтруктураМногоуровневыхРазделов,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки);
											
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
															СписокСохранения,
															СтруктураРеквизитовФормы,
															СтруктураМногоуровневыхРазделов)
	
	ПрефиксТД = "ПолеТабличногоДокумента";
	ДанныеМногоуровневыхРазделов = Новый Структура;
	
	// Данные вариантов автозаполнения.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения") Тогда
		СписокСохранения.Удалить("ДанныеВариантовАвтоЗаполнения");
	КонецЕсли;
	
	// Титульный лист.
	ДанныеТит = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Титульный"];
	Для Каждого Показатель Из ДанныеТит Цикл
		ИмяПоказателя = Показатель.Ключ;
		Если ИмяПоказателя = "ИНН1_1" Тогда
			ДанныеТит.Вставить("ИНН", "");
			Для Ном = 1 По 12 Цикл
				ДанныеТит.ИНН = ДанныеТит.ИНН + СокрЛП(ДанныеТит["ИНН1_" + Ном]);
				ДанныеТит.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(ДанныеТит.ИНН, 2) = "00" Тогда
				ДанныеТит.ИНН = Сред(ДанныеТит.ИНН, 3);
			КонецЕсли;
			ДанныеТит.ИНН = СтрЗаменить(ДанныеТит.ИНН, "-", "");
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			ДанныеТит.Вставить("КПП", "");
			Для Ном = 1 По 9 Цикл
				ДанныеТит.КПП = ДанныеТит.КПП + СокрЛП(ДанныеТит["КПП1_" + Ном]);
				ДанныеТит.Удалить("КПП1_" + Ном);
			КонецЦикла;
			ДанныеТит.КПП = СтрЗаменить(ДанныеТит.КПП, "-", "");
		ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
			ДанныеТит.Вставить("НалоговыйОрган", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.НалоговыйОрган = ДанныеТит.НалоговыйОрган + СокрЛП(ДанныеТит["НалоговыйОрган" + Ном]);
				ДанныеТит.Удалить("НалоговыйОрган" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ДанныеТит.Вставить("НомерКорректировки", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.НомерКорректировки = ДанныеТит.НомерКорректировки
				+ СтрЗаменить(СокрЛП(ДанныеТит["НомерКорректировки" + Ном]), "-", "");
				ДанныеТит.Удалить("НомерКорректировки" + Ном);
				Если НЕ ЗначениеЗаполнено(ДанныеТит.НомерКорректировки) Тогда
					ДанныеТит.НомерКорректировки = "0";
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			ДанныеТит.Вставить("Период", "");
			Для Ном = 1 По 2 Цикл
				ДанныеТит.Период = ДанныеТит.Период + СокрЛП(ДанныеТит["Период" + Ном]);
				ДанныеТит.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ДанныеТит.Вставить("ОтчетГод", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.ОтчетГод = ДанныеТит.ОтчетГод + СокрЛП(ДанныеТит["ОтчетГод" + Ном]);
				ДанныеТит.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			ДанныеТит.Вставить("ПоМесту", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.ПоМесту = ДанныеТит.ПоМесту + СокрЛП(ДанныеТит["ПоМесту" + Ном]);
				ДанныеТит.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ДанныеТит.Вставить("Прил", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.Прил = ДанныеТит.Прил + СокрЛП(ДанныеТит["Прил" + Ном]);
				ДанныеТит.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ДанныеТит.Вставить("ДатаПодписи", СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи);
	
	// Сохранение с последующим восстановлением номеров строк многоуровнего раздела.
	// (На случай выгрузки отчета, сохраненного в 2.0, без сохранения в 3.0.)
	СохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
										  СтруктураРеквизитовФормы,
										  СтруктураМногоуровневыхРазделов);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = СохрНомераСтрокМногоуровнегоРаздела;
	
	// Раздел 1.
	ИмяРаздела = "Раздел1";
	ИмяГруппы1 = СтруктураРеквизитовФормы.мИдГруппы1М1;
	ИмяГруппы2 = СтруктураРеквизитовФормы.мИдГруппы1М2;
	СтарДанные = СписокСохранения.ПоказателиОтчета[ПрефиксТД + ИмяРаздела];
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	// Немногострочные данные.
	Для каждого Пок Из СтарДанные Цикл
		Если СтрНачинаетсяС(Пок.Ключ, ИмяГруппы1) ИЛИ СтрНачинаетсяС(Пок.Ключ, ИмяГруппы2) Тогда
			Продолжить;
		КонецЕсли;
		ДеревоРаздела.Строки[0].Данные.Вставить(Пок.Ключ, Пок.Значение);
	КонецЦикла;
	// Многострочные данные 060-073.
	ИмяГруппы = ИмяГруппы1;
	СтруктураМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы];
	ИменаГраф = СтруктураМнЧ.ИменаГраф;
	НомСтр = 1;
	_НомСтр = "_1";
	Пока СтарДанные.Свойство(ИменаГраф[0] + _НомСтр) Цикл
		Если НомСтр = 1 Тогда
			СтрокаМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы].Строки[0];
		Иначе
			СтрокаМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы].Строки.Добавить();
		КонецЕсли;
		СтрокаМнЧ.Данные = Новый Структура;
		СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
		Для каждого ИмяГрафы Из ИменаГраф Цикл
			СтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы + _НомСтр]);
		КонецЦикла;
		НомСтр = НомСтр + 1;
		_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
	КонецЦикла;
	// Многострочные данные 080-093.
	ИмяГруппы = ИмяГруппы2;
	СтруктураМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы];
	ИменаГраф = СтруктураМнЧ.ИменаГраф;
	НомСтр = 1;
	_НомСтр = "_1";
	Пока СтарДанные.Свойство(ИменаГраф[0] + _НомСтр) Цикл
		Если НомСтр = 1 Тогда
			СтрокаМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы].Строки[0];
		Иначе
			СтрокаМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы].Строки.Добавить();
		КонецЕсли;
		СтрокаМнЧ.Данные = Новый Структура;
		СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
		Для каждого ИмяГрафы Из ИменаГраф Цикл
			СтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы + _НомСтр]);
		КонецЦикла;
		НомСтр = НомСтр + 1;
		_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
	КонецЦикла;
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	СписокСохранения.ПоказателиОтчета.Удалить(ПрефиксТД + ИмяРаздела);
	
	// Приложение 1 к разделу 1.
	ИмяРаздела = "Раздел1Прил1";
	ИмяГруппы1    = СтруктураРеквизитовФормы.мИдГруппы11131М1;
	СтруктураМнЧ1 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы1];
	ИменаГраф1    = СтруктураМнЧ1.ИменаГраф;
	ИмяГруппы2    = СтруктураРеквизитовФормы.мИдГруппы11132М1;
	СтруктураМнЧ2 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы2];
	ИменаГраф2    = СтруктураМнЧ2.ИменаГраф;
	ИмяГруппы3    = СтруктураРеквизитовФормы.мИдГруппы1114М1;
	СтруктураМнЧ3 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы3];
	ИменаГраф3    = СтруктураМнЧ3.ИменаГраф;
	СтарТаблица = СписокСохранения.ДанныеМногостраничныхРазделов[ИмяРаздела];
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	Для Инд = 0 По СтарТаблица.Количество() - 1 Цикл
		СтарСтраница = СтарТаблица[Инд];
		СтарДанные = СтарСтраница.Данные;
		Если Инд = 0 Тогда
			СтрокаПриложения1КРазделу1 = ДеревоРаздела.Строки[0];
			СтрокаПодраздела11_12 = СтрокаПриложения1КРазделу1.Строки[0].Строки[0];
			СтрокаПодраздела131 = СтрокаПриложения1КРазделу1.Строки[1].Строки[0];
			СтрокаПодраздела132 = СтрокаПриложения1КРазделу1.Строки[2].Строки[0];
			СтрокаПодраздела14 = СтрокаПриложения1КРазделу1.Строки[3].Строки[0];
		Иначе
			СтрокаПриложения1КРазделу1 = ДеревоРаздела.Строки.Добавить();
			СтрокаПриложения1КРазделу1.Данные = Новый Структура;
			СтрокаПриложения1КРазделу1.ДанныеМногострочныхЧастей = Новый Структура;
			
			СтрокаПодраздела11_12 = СтрокаПриложения1КРазделу1.Строки.Добавить().Строки.Добавить();
			СтрокаПодраздела11_12.Данные = Новый Структура;
			СтрокаПодраздела11_12.ДанныеМногострочныхЧастей = Новый Структура;
			
			СтрокаПодраздела131 = СтрокаПриложения1КРазделу1.Строки.Добавить().Строки.Добавить();
			СтрокаПодраздела131.Данные = Новый Структура;
			ДеревоДопСтрок1 = Новый ДеревоЗначений;
			ДеревоДопСтрок1.Колонки.Добавить("Данные");
			ДеревоДопСтрок1.Колонки.Добавить("ДанныеМногострочныхЧастей");
			СтрокаПодраздела131.ДанныеМногострочныхЧастей = Новый Структура;
			СтрокаПодраздела131.ДанныеМногострочныхЧастей.Вставить(ИмяГруппы1, ДеревоДопСтрок1);
			
			СтрокаПодраздела132 = СтрокаПриложения1КРазделу1.Строки.Добавить().Строки.Добавить();
			СтрокаПодраздела132.Данные = Новый Структура;
			ДеревоДопСтрок2 = Новый ДеревоЗначений;
			ДеревоДопСтрок2.Колонки.Добавить("Данные");
			ДеревоДопСтрок2.Колонки.Добавить("ДанныеМногострочныхЧастей");
			СтрокаПодраздела132.ДанныеМногострочныхЧастей = Новый Структура;
			СтрокаПодраздела132.ДанныеМногострочныхЧастей.Вставить(ИмяГруппы2, ДеревоДопСтрок2);
			
			СтрокаПодраздела14 = СтрокаПриложения1КРазделу1.Строки.Добавить().Строки.Добавить();
			СтрокаПодраздела14.Данные = Новый Структура;
			ДеревоДопСтрок3 = Новый ДеревоЗначений;
			ДеревоДопСтрок3.Колонки.Добавить("Данные");
			ДеревоДопСтрок3.Колонки.Добавить("ДанныеМногострочныхЧастей");
			СтрокаПодраздела14.ДанныеМногострочныхЧастей = Новый Структура;
			СтрокаПодраздела14.ДанныеМногострочныхЧастей.Вставить(ИмяГруппы3, ДеревоДопСтрок3);
		КонецЕсли;
		// Немногострочные данные приложения 1 к разделу 1(единственный показатель).
		СтрокаПриложения1КРазделу1.Данные.Вставить("П000110000101", СтарДанные["П000110000101"]);
		// Немногострочные данные подразделов 1.1, 1.2.
		Для каждого Пок Из СтарДанные Цикл
			Если СтрНачинаетсяС(Пок.Ключ, "П01111") ИЛИ СтрНачинаетсяС(Пок.Ключ, "П01112") Тогда
				СтрокаПодраздела11_12.Данные.Вставить(Пок.Ключ, Пок.Значение);
			КонецЕсли;
		КонецЦикла;
		// Многострочные данные подраздела 1.3.1.
		НомСтр = 1;
		_НомСтр = "_1";
		Пока СтарДанные.Свойство(ИменаГраф1[0] + _НомСтр) Цикл
			Если Инд = 0 И НомСтр = 1 Тогда
				СтрокаМнЧ = СтрокаПодраздела131.ДанныеМногострочныхЧастей[ИмяГруппы1].Строки[0];
			Иначе
				СтрокаМнЧ = СтрокаПодраздела131.ДанныеМногострочныхЧастей[ИмяГруппы1].Строки.Добавить();
			КонецЕсли;
			СтрокаМнЧ.Данные = Новый Структура;
			СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			Для каждого ИмяГрафы Из ИменаГраф1 Цикл
				СтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы + _НомСтр]);
			КонецЦикла;
			НомСтр = НомСтр + 1;
			_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
		КонецЦикла;
		// Многострочные данные подраздела 1.3.2.
		НомСтр = 1;
		_НомСтр = "_1";
		Пока СтарДанные.Свойство(ИменаГраф2[0] + _НомСтр) Цикл
			Если Инд = 0 И НомСтр = 1 Тогда
				СтрокаМнЧ = СтрокаПодраздела132.ДанныеМногострочныхЧастей[ИмяГруппы2].Строки[0];
			Иначе
				СтрокаМнЧ = СтрокаПодраздела132.ДанныеМногострочныхЧастей[ИмяГруппы2].Строки.Добавить();
			КонецЕсли;
			СтрокаМнЧ.Данные = Новый Структура;
			СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			Для каждого ИмяГрафы Из ИменаГраф2 Цикл
				СтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы + _НомСтр]);
			КонецЦикла;
			НомСтр = НомСтр + 1;
			_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
		КонецЦикла;
		// Многострочные данные подраздела 1.4.
		НомСтр = 1;
		_НомСтр = "_1";
		Пока СтарДанные.Свойство(ИменаГраф3[0] + _НомСтр) Цикл
			Если Инд = 0 И НомСтр = 1 Тогда
				СтрокаМнЧ = СтрокаПодраздела14.ДанныеМногострочныхЧастей[ИмяГруппы3].Строки[0];
			Иначе
				СтрокаМнЧ = СтрокаПодраздела14.ДанныеМногострочныхЧастей[ИмяГруппы3].Строки.Добавить();
			КонецЕсли;
			СтрокаМнЧ.Данные = Новый Структура;
			СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			Для каждого ИмяГрафы Из ИменаГраф3 Цикл
				СтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы + _НомСтр]);
			КонецЦикла;
			НомСтр = НомСтр + 1;
			_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
		КонецЦикла;
	КонецЦикла;
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	
	// Приложение 2 к разделу 1.
	ИмяРаздела = "Раздел1Прил2";
	СтарДанные = СписокСохранения.ПоказателиОтчета[ПрефиксТД + ИмяРаздела];
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	ДеревоРаздела.Строки[0].Данные = СтарДанные;
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	СписокСохранения.ПоказателиОтчета.Удалить(ПрефиксТД + ИмяРаздела);
	
	// Приложение 3 к разделу 1.
	ИмяРаздела = "Раздел1Прил3";
	СтарДанные = СписокСохранения.ПоказателиОтчета[ПрефиксТД + ИмяРаздела];
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	ДеревоРаздела.Строки[0].Данные = СтарДанные;
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	СписокСохранения.ПоказателиОтчета.Удалить(ПрефиксТД + ИмяРаздела);
	
	// Приложение 4 к разделу 1.
	ИмяРаздела = "Раздел1Прил4";
	СтарДанные = СписокСохранения.ПоказателиОтчета[ПрефиксТД + ИмяРаздела];
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	ДеревоРаздела.Строки[0].Данные = СтарДанные;
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	СписокСохранения.ПоказателиОтчета.Удалить(ПрефиксТД + ИмяРаздела);
	
	// Приложения 5,6 к разделу 1.
	ИмяРаздела = "Раздел1Прил5_6";
	СтарДанные = СписокСохранения.ПоказателиОтчета[ПрефиксТД + ИмяРаздела];
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	ДеревоРаздела.Строки[0].Данные = СтарДанные;
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	СписокСохранения.ПоказателиОтчета.Удалить(ПрефиксТД + ИмяРаздела);
	
	// Приложение 7 к разделу 1.
	ИмяРаздела = "Раздел1Прил7";
	СтарДанные = СписокСохранения.ПоказателиОтчета[ПрефиксТД + ИмяРаздела];
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	ДеревоРаздела.Строки[0].Данные = СтарДанные;
	Если Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) <> 12 Тогда
		ДеревоРаздела.Строки[0].Данные.Вставить("П000170001002", 0);
		ДеревоРаздела.Строки[0].Данные.Вставить("П000170002002", 0);
		ДеревоРаздела.Строки[0].Данные.Вставить("П000170003002", 0);
		ДеревоРаздела.Строки[0].Данные.Вставить("П000170004002", 0);
		ДеревоРаздела.Строки[0].Данные.Вставить("П000170005002", 0);
	КонецЕсли;
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	СписокСохранения.ПоказателиОтчета.Удалить(ПрефиксТД + ИмяРаздела);
	
	// Приложение 8 к разделу 1.
	ИмяРаздела = "Раздел1Прил8";
	ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы18М1;
	СтарДанные = СписокСохранения.ПоказателиОтчета[ПрефиксТД + ИмяРаздела];
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	// Немногострочные данные.
	Для каждого Пок Из СтарДанные Цикл
		Если СтрНачинаетсяС(Пок.Ключ, ИмяГруппы) Тогда
			Продолжить;
		КонецЕсли;
		ДеревоРаздела.Строки[0].Данные.Вставить(Пок.Ключ, Пок.Значение);
	КонецЦикла;
	// Многострочные данные 020-060.
	СтруктураМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы];
	ИменаГраф = СтруктураМнЧ.ИменаГраф;
	НомСтр = 1;
	_НомСтр = "_1";
	Пока СтарДанные.Свойство(ИменаГраф[0] + _НомСтр) Цикл
		Если НомСтр = 1 Тогда
			СтрокаМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы].Строки[0];
		Иначе
			СтрокаМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы].Строки.Добавить();
		КонецЕсли;
		СтрокаМнЧ.Данные = Новый Структура;
		СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
		Для каждого ИмяГрафы Из ИменаГраф Цикл
			СтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы + _НомСтр]);
		КонецЦикла;
		НомСтр = НомСтр + 1;
		_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
	КонецЦикла;
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	СписокСохранения.ПоказателиОтчета.Удалить(ПрефиксТД + ИмяРаздела);
	
	// Приложение 9 к разделу 1.
	ИмяРаздела = "Раздел1Прил9";
	ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы19М1;
	СтарДанные = СписокСохранения.ПоказателиОтчета[ПрефиксТД + ИмяРаздела];
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	// Немногострочные данные.
	Для каждого Пок Из СтарДанные Цикл
		Если СтрНачинаетсяС(Пок.Ключ, ИмяГруппы) Тогда
			Продолжить;
		КонецЕсли;
		ДеревоРаздела.Строки[0].Данные.Вставить(Пок.Ключ, Пок.Значение);
	КонецЦикла;
	// Многострочные данные 020-080.
	СтруктураМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы];
	ИменаГраф = СтруктураМнЧ.ИменаГраф;
	НомСтр = 1;
	_НомСтр = "_1";
	Пока СтарДанные.Свойство(ИменаГраф[0] + _НомСтр) Цикл
		Если НомСтр = 1 Тогда
			СтрокаМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы].Строки[0];
		Иначе
			СтрокаМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы].Строки.Добавить();
		КонецЕсли;
		СтрокаМнЧ.Данные = Новый Структура;
		СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
		Для каждого ИмяГрафы Из ИменаГраф Цикл
			СтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы + _НомСтр]);
		КонецЦикла;
		НомСтр = НомСтр + 1;
		_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
	КонецЦикла;
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	СписокСохранения.ПоказателиОтчета.Удалить(ПрефиксТД + ИмяРаздела);
	
	// Приложение 10 к разделу 1.
	ИмяРаздела = "Раздел1Прил10";
	ИмяГруппы    = СтруктураРеквизитовФормы.мИдГруппы110М1;
	СтруктураМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы];
	ИменаГраф    = СтруктураМнЧ.ИменаГраф;
	ИмяПодчГруппы    = СтруктураРеквизитовФормы.мИдГруппы110М2;
	СтруктураПодчМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяПодчГруппы];
	ИменаПодчГраф    = СтруктураПодчМнЧ.ИменаГраф;
	СтарТаблица = СписокСохранения.ДанныеМногостраничныхРазделов[ИмяРаздела];
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	Для Инд = 0 По СтарТаблица.Количество() - 1 Цикл
		СтарСтраница = СтарТаблица[Инд];
		СтарДанные = СтарСтраница.Данные;
		// Немногострочные данные.
		Если Инд = 0 Тогда
			Для каждого Пок Из СтарДанные Цикл
				Если СтрНачинаетсяС(Пок.Ключ, ИмяГруппы)
					ИЛИ СтрНачинаетсяС(Пок.Ключ, ИмяПодчГруппы) Тогда
					Продолжить;
				КонецЕсли;
				ДеревоРаздела.Строки[0].Данные.Вставить(Пок.Ключ, Пок.Значение);
			КонецЦикла;
		КонецЕсли;
		// Многострочные данные 020-100.
		Если Инд = 0 Тогда
			СтрокаМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы].Строки[0];
		Иначе
			СтрокаМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы].Строки.Добавить();
		КонецЕсли;
		СтрокаМнЧ.Данные = Новый Структура;
		Для каждого ИмяГрафы Из ИменаГраф Цикл
			Если ИмяГрафы = "П00110М102001" Тогда
				СтрокаМнЧ.Данные.Вставить(ИмяГрафы,
				СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтарДанные[ИмяГрафы], 3, "0"));
			Иначе
				СтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы]);
			КонецЕсли;
		КонецЦикла;
		// Многострочные данные 110-140, подчиненные
		// строке многострочных данных 020-100.
		НомСтр = 1;
		_НомСтр = "_1";
		ДеревоПодчСтрок = Новый ДеревоЗначений;
		ДеревоПодчСтрок.Колонки.Добавить("Данные");
		ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
		СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
		СтрокаМнЧ.ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		Пока СтарДанные.Свойство(ИменаПодчГраф[0] + _НомСтр) Цикл
			СтрокаПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппы].Строки.Добавить();
			СтрокаПодчМнЧ.Данные = Новый Структура;
			СтрокаПодчМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			Для каждого ИмяПодчГрафы Из ИменаПодчГраф Цикл
				Если ИмяПодчГрафы = "П00110М211001" Тогда
					СтрокаПодчМнЧ.Данные.Вставить(ИмяПодчГрафы,
					СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтарДанные[ИмяПодчГрафы + _НомСтр], 3, "0"));
				Иначе
					СтрокаПодчМнЧ.Данные.Вставить(ИмяПодчГрафы, СтарДанные[ИмяПодчГрафы + _НомСтр]);
				КонецЕсли;
			КонецЦикла;
			НомСтр = НомСтр + 1;
			_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
		КонецЦикла;
	КонецЦикла;
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	
	// Раздел 2.
	ИмяРаздела = "Раздел2";
	ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы21М1;
	СтарДанные = СписокСохранения.ПоказателиОтчета[ПрефиксТД + ИмяРаздела];
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	// Немногострочные данные.
	Для каждого Пок Из СтарДанные Цикл
		Если СтрНачинаетсяС(Пок.Ключ, ИмяГруппы) Тогда
			Продолжить;
		КонецЕсли;
		ДеревоРаздела.Строки[0].Данные.Вставить(Пок.Ключ, Пок.Значение);
	КонецЦикла;
	// Многострочные данные 010-090.
	СтруктураМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы];
	ИменаГраф = СтруктураМнЧ.ИменаГраф;
	НомСтр = 1;
	_НомСтр = "_1";
	Пока СтарДанные.Свойство(ИменаГраф[0] + _НомСтр) Цикл
		Если НомСтр = 1 Тогда
			СтрокаМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы].Строки[0];
		Иначе
			СтрокаМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппы].Строки.Добавить();
		КонецЕсли;
		СтрокаМнЧ.Данные = Новый Структура;
		СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
		Для каждого ИмяГрафы Из ИменаГраф Цикл
			СтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы + _НомСтр]);
		КонецЦикла;
		НомСтр = НомСтр + 1;
		_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
	КонецЦикла;
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	СписокСохранения.ПоказателиОтчета.Удалить(ПрефиксТД + ИмяРаздела);
	
	// Раздел 3.
	ИмяРаздела = "Раздел3";
	ИмяГруппы1    = СтруктураРеквизитовФормы.мИдГруппы321М1;
	СтруктураМнЧ1 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы1];
	ИменаГраф1    = СтруктураМнЧ1.ИменаГраф;
	ИмяГруппы2    = СтруктураРеквизитовФормы.мИдГруппы322М1;
	СтруктураМнЧ2 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы2];
	ИменаГраф2    = СтруктураМнЧ2.ИменаГраф;
	СтарТаблица = СписокСохранения.ДанныеМногостраничныхРазделов[ИмяРаздела];
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	Для Инд = 0 По СтарТаблица.Количество() - 1 Цикл
		СтарСтраница = СтарТаблица[Инд];
		СтарДанные = СтарСтраница.Данные;
		Если Инд > 0 Тогда
			ДеревоРаздела.Строки.Добавить();
			ДеревоРаздела.Строки[Инд].Данные = Новый Структура;
			ДеревоДопСтрок1 = Новый ДеревоЗначений;
			ДеревоДопСтрок1.Колонки.Добавить("Данные");
			ДеревоДопСтрок1.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ДеревоДопСтрок2 = Новый ДеревоЗначений;
			ДеревоДопСтрок2.Колонки.Добавить("Данные");
			ДеревоДопСтрок2.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ДеревоРаздела.Строки[Инд].ДанныеМногострочныхЧастей = Новый Структура;
			ДеревоРаздела.Строки[Инд].ДанныеМногострочныхЧастей.Вставить(ИмяГруппы1, ДеревоДопСтрок1);
			ДеревоРаздела.Строки[Инд].ДанныеМногострочныхЧастей.Вставить(ИмяГруппы2, ДеревоДопСтрок2);
		КонецЕсли;
		// Немногострочные данные.
		Для каждого Пок Из СтарДанные Цикл
			Если Пок.Ключ = "П000030002001" ИЛИ Пок.Ключ = "П000030003001" ИЛИ Пок.Ключ = "П000030005001"
				ИЛИ СтрНачинаетсяС(Пок.Ключ, ИмяГруппы1) ИЛИ СтрНачинаетсяС(Пок.Ключ, ИмяГруппы2) Тогда
				Продолжить;
			КонецЕсли;
			ДеревоРаздела.Строки[Инд].Данные.Вставить(Пок.Ключ, Пок.Значение);
		КонецЦикла;
		// Многострочные данные 190-240.
		НомСтр = 1;
		_НомСтр = "_1";
		Пока СтарДанные.Свойство(ИменаГраф1[0] + _НомСтр) Цикл
			Если Инд = 0 И НомСтр = 1 Тогда
				СтрокаМнЧ = ДеревоРаздела.Строки[Инд].ДанныеМногострочныхЧастей[ИмяГруппы1].Строки[0];
			Иначе
				СтрокаМнЧ = ДеревоРаздела.Строки[Инд].ДанныеМногострочныхЧастей[ИмяГруппы1].Строки.Добавить();
			КонецЕсли;
			СтрокаМнЧ.Данные = Новый Структура;
			СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			Для каждого ИмяГрафы Из ИменаГраф1 Цикл
				СтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы + _НомСтр]);
			КонецЦикла;
			НомСтр = НомСтр + 1;
			_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
		КонецЦикла;
		// Многострочные данные 260-290.
		НомСтр = 1;
		_НомСтр = "_1";
		Пока СтарДанные.Свойство(ИменаГраф2[0] + _НомСтр) Цикл
			Если Инд = 0 И НомСтр = 1 Тогда
				СтрокаМнЧ = ДеревоРаздела.Строки[Инд].ДанныеМногострочныхЧастей[ИмяГруппы2].Строки[0];
			Иначе
				СтрокаМнЧ = ДеревоРаздела.Строки[Инд].ДанныеМногострочныхЧастей[ИмяГруппы2].Строки.Добавить();
			КонецЕсли;
			СтрокаМнЧ.Данные = Новый Структура;
			СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			Для каждого ИмяГрафы Из ИменаГраф2 Цикл
				СтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы + _НомСтр]);
			КонецЦикла;
			НомСтр = НомСтр + 1;
			_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
		КонецЦикла;
	КонецЦикла;
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Удалить("ДанныеМногострочныхРазделов");
	СписокСохранения.Удалить("ДанныеМногостраничныхРазделов");
	
КонецПроцедуры

Функция ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки, ПрефиксИмени)
	
	Если ПараметрыВыгрузки.ЭтоЮЛ Тогда
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП);
	ИначеЕсли ПараметрыВыгрузки.ЭтоФизЛицоБезИНН Тогда
		ИННКПП = "000000000000";
	Иначе
		// Случай ПараметрыВыгрузки.ЭтоПБОЮЛ ИЛИ ПараметрыВыгрузки.ЭтоФизЛицоСИНН.
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг);
	КонецЕсли;
	
	ИдентификаторФайла = ПрефиксИмени
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
					ПараметрыВыгрузки.КодИФНСПосредника,
					ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ИННКПП
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ЗаполненРаздел1(ИмяФормы,
						ДанныеМногоуровневыхРазделов,
						СтруктураРеквизитовФормы,
						СтруктураМногоуровневыхРазделов,
						ДопПараметры)
			
	Возврат ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Раздел1"],
		"Раздел1", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, ДопПараметры)
	ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Раздел1Прил1"],
		"Раздел1Прил1", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Раздел1Прил2"],
		"Раздел1Прил2", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, ДопПараметры)
	ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Раздел1Прил3"],
		"Раздел1Прил3", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Раздел1Прил4"],
		"Раздел1Прил4", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Раздел1Прил5_6"],
		"Раздел1Прил5_6", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Раздел1Прил7"],
		"Раздел1Прил7", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Раздел1Прил8"],
		"Раздел1Прил8", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, ДопПараметры)
	ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Раздел1Прил9"],
		"Раздел1Прил9", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Раздел1Прил10"],
		"Раздел1Прил10", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
КонецФункции

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 ДанныеОтчета,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы,
								   ДанныеОтчета,
								   ПараметрыВыгрузки,
								   ТекСтр,
								   РезультатВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   ПараметрыВыгрузки,
							   Узел,
							   НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
																			 "ИмяКлючевогоУзлаСодержательнойЧасти")
			   И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(ИмяФормы,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 Стр,
											 ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
						КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(ИмяФормы, Узел, Стр);
					ЗаполнитьДаннымиУзел(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 ПараметрыВыгрузки,
										 УзелСоответствующийСтроке,
										 НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 ПараметрыВыгрузки,
									 Стр,
									 НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(ИмяФормы,Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(ИмяФормы, Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0
		 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
		   И УзелПуст(ИмяФормы, Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 
			  ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
				И УзелПуст(ИмяФормы, Узел)
				И ?(СтрНайти(Узел.Обязательность, "О") <> 0
			  ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			  	  РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураМногоуровневыхРазделов,
									   УзелРодитель,
									   ПараметрыВыгрузки)
		
	ДанныеМногоуровневыхРазделов = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы,
											СтруктураРеквизитовФормы,
											СтруктураМногоуровневыхРазделов);
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ДеревоДанныхРаздел1        = ДанныеМногоуровневыхРазделов["Раздел1"];
	ДеревоДанныхРаздел1Прил1   = ДанныеМногоуровневыхРазделов["Раздел1Прил1"];
	ДеревоДанныхРаздел1Прил2   = ДанныеМногоуровневыхРазделов["Раздел1Прил2"];
	ДеревоДанныхРаздел1Прил3   = ДанныеМногоуровневыхРазделов["Раздел1Прил3"];
	ДеревоДанныхРаздел1Прил4   = ДанныеМногоуровневыхРазделов["Раздел1Прил4"];
	ДеревоДанныхРаздел1Прил5_6 = ДанныеМногоуровневыхРазделов["Раздел1Прил5_6"];
	ДеревоДанныхРаздел1Прил7   = ДанныеМногоуровневыхРазделов["Раздел1Прил7"];
	ДеревоДанныхРаздел1Прил8   = ДанныеМногоуровневыхРазделов["Раздел1Прил8"];
	ДеревоДанныхРаздел1Прил9   = ДанныеМногоуровневыхРазделов["Раздел1Прил9"];
	ДеревоДанныхРаздел1Прил10  = ДанныеМногоуровневыхРазделов["Раздел1Прил10"];
	ДеревоДанныхРаздел2        = ДанныеМногоуровневыхРазделов["Раздел2"];
	ДеревоДанныхРаздел3        = ДанныеМногоуровневыхРазделов["Раздел3"];
	
	// Раздел 1 (единственная страница, имеющая 2 многострочные части).
	Ветка1 = ДеревоДанныхРаздел1.Строки[0];
	ОбязПлатСВ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ОбязПлатСВ");
	
	// Удаление Раздела 1 вместе с его приложениями из дерева выгрузки по условию.
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЭтоПБОЮЛ", ПараметрыВыгрузки.ЭтоПБОЮЛ);
	ДопПараметры.Вставить("НеПроверятьЗаполнениеПризнаковСтроки090");
	ДопПараметры.Вставить("НеПроверятьЗаполнениеКБКСтрок020_040_100Раздела1");
	Если (ПараметрыВыгрузки.ПоМесту = "124" ИЛИ ПараметрыВыгрузки.ПоМесту = "240")
	   И НЕ ЗаполненРаздел1(ИмяФормы,
	   						ДанныеМногоуровневыхРазделов,
	   						СтруктураРеквизитовФормы,
	   						СтруктураМногоуровневыхРазделов,
	   						ДопПараметры) Тогда	   
	   		
		РегламентированнаяОтчетность.УдалитьУзел(ОбязПлатСВ);
		
	Иначе
		
		// Переопределение обязательности выгрузки Раздела 1.
		Если НЕ (ПараметрыВыгрузки.ПоМесту = "124" ИЛИ ПараметрыВыгрузки.ПоМесту = "240") Тогда
			ОбязПлатСВ.Обязательность = "О";
		КонецЕсли;
		// Немногострочные данные 010-053.
		Для каждого Эл Из ОбязПлатСВ.Строки Цикл
			Если Эл.Код = "ОКТМО" Тогда
				ВывестиПоказательВXML(ИмяФормы, Эл, Ветка1.Данные[Эл.Ключ]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьДаннымиУзел(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 СтруктураМногоуровневыхРазделов,
							 Ветка1.Данные,
							 ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "УплПерОПС"));
		ЗаполнитьДаннымиУзел(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 СтруктураМногоуровневыхРазделов,
							 Ветка1.Данные,
							 ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "УплПерОМС"));
		// Многострочная часть 060-073.
		УплПерОПСДоп = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "УплПерОПСДоп");
		ДанныеМнЧ1 = Ветка1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1М1];
		Для каждого СтрокаМнЧ1 Из ДанныеМнЧ1.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы, 
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 СтрокаМнЧ1.Данные,
								 СкопироватьУзел(ИмяФормы, ОбязПлатСВ, УплПерОПСДоп));
		КонецЦикла;
		// Многострочная часть 080-093.
		УплПерДСО = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "УплПерДСО");
		ДанныеМнЧ2 = Ветка1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1М2];
		Для каждого СтрокаМнЧ2 Из ДанныеМнЧ2.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 СтрокаМнЧ2.Данные,
								 СкопироватьУзел(ИмяФормы, ОбязПлатСВ, УплПерДСО));
		КонецЦикла;
		// Немногострочные данные 100-123.
		УплПревОСС = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "УплПревОСС");
		Для каждого Эл Из УплПревОСС.Строки Цикл
			Если Эл.Код = "КБК" Тогда
				ВывестиПоказательВXML(ИмяФормы, Эл, Ветка1.Данные[Эл.Ключ]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		УплПерОСС = ПолучитьПодчиненныйЭлемент(ИмяФормы, УплПревОСС, "УплПерОСС");
		// Специальная выгрузка строк 110-113.
		Для каждого Эл Из УплПерОСС.Строки Цикл
			Если Эл.Код = "СумСВУплПер" Тогда
				Если Ветка1.Данные["П000010011001"] = 0 И Ветка1.Данные["П000010012001"] = 0 Тогда
					УплПерОСС.Обязательность = "О";
					Эл.Обязательность = "О";
					ВывестиПоказательВXML(ИмяФормы, Эл, 0);
				Иначе
					ВывестиПоказательВXML(ИмяФормы, Эл, Ветка1.Данные["П000010011001"]);
				КонецЕсли;
			ИначеЕсли Эл.Код = "СумСВУпл1М" Тогда
				Если Ветка1.Данные["П000010011101"] = 0 И Ветка1.Данные["П000010012101"] = 0 Тогда
					УплПерОСС.Обязательность = "О";
					Эл.Обязательность = "О";
					ВывестиПоказательВXML(ИмяФормы, Эл, 0);
				Иначе
					ВывестиПоказательВXML(ИмяФормы, Эл, Ветка1.Данные["П000010011101"]);
				КонецЕсли;
			ИначеЕсли Эл.Код = "СумСВУпл2М" Тогда
				Если Ветка1.Данные["П000010011201"] = 0 И Ветка1.Данные["П000010012201"] = 0 Тогда
					УплПерОСС.Обязательность = "О";
					Эл.Обязательность = "О";
					ВывестиПоказательВXML(ИмяФормы, Эл, 0);
				Иначе
					ВывестиПоказательВXML(ИмяФормы, Эл, Ветка1.Данные["П000010011201"]);
				КонецЕсли;
			ИначеЕсли Эл.Код = "СумСВУпл3М" Тогда
				Если Ветка1.Данные["П000010011301"] = 0 И Ветка1.Данные["П000010012301"] = 0 Тогда
					УплПерОСС.Обязательность = "О";
					Эл.Обязательность = "О";
					ВывестиПоказательВXML(ИмяФормы, Эл, 0);
				Иначе
					ВывестиПоказательВXML(ИмяФормы, Эл, Ветка1.Данные["П000010011301"]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьДаннымиУзел(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 СтруктураМногоуровневыхРазделов,
							 Ветка1.Данные,
							 ПолучитьПодчиненныйЭлемент(ИмяФормы, УплПревОСС, "ПревРасхОСС"));
		
		// Приложение 1 к Разделу 1 (иерархический раздел).
		РасчСВ_ОПС_ОМС = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "РасчСВ_ОПС_ОМС");
		Для каждого ВеткаРазд1Пр1 Из ДеревоДанныхРаздел1Прил1.Строки Цикл
			ЭкзРасчСВ_ОПС_ОМС = СкопироватьУзел(ИмяФормы, ОбязПлатСВ, РасчСВ_ОПС_ОМС);
			Для каждого Эл Из ЭкзРасчСВ_ОПС_ОМС.Строки Цикл
				Если Эл.Код = "ТарифПлат" Тогда
					ВывестиПоказательВXML(ИмяФормы, Эл, ВеткаРазд1Пр1.Данные[Эл.Ключ]);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ВеткаРазд1Пр1Подр11_12 = ВеткаРазд1Пр1.Строки[0].Строки[0];
			ВеткаРазд1Пр1Подр131   = ВеткаРазд1Пр1.Строки[1].Строки[0];
			ВеткаРазд1Пр1Подр132   = ВеткаРазд1Пр1.Строки[2].Строки[0];
			ВеткаРазд1Пр1Подр14    = ВеткаРазд1Пр1.Строки[3].Строки[0];
			
			// Подразделы 1.1 и 1.2 (единственная страница, нет многострочной части).
			ЗаполнитьДаннымиУзел(ИмяФормы,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 ВеткаРазд1Пр1Подр11_12.Данные,
								 ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчСВ_ОПС_ОМС, "РасчСВ_ОПС"));
			ЗаполнитьДаннымиУзел(ИмяФормы,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 ВеткаРазд1Пр1Подр11_12.Данные,
								 ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчСВ_ОПС_ОМС, "РасчСВ_ОМС"));
			
			РасчСВ_ОПС428 = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчСВ_ОПС_ОМС, "РасчСВ_ОПС428");
			
			// Подраздел 1.3.1 (единственная страница, имеющая 1 многострочную часть).
			РасчСВ_428_1_2 = ПолучитьПодчиненныйЭлемент(ИмяФормы, РасчСВ_ОПС428, "РасчСВ_428.1-2");
			ДанныеМнЧ131 = ВеткаРазд1Пр1Подр131.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы11131М1];
			Для каждого СтрокаМнЧ131 Из ДанныеМнЧ131.Строки Цикл
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 СтрокаМнЧ131.Данные,
									 СкопироватьУзел(ИмяФормы, РасчСВ_ОПС428, РасчСВ_428_1_2));
			КонецЦикла;
			
			// Подраздел 1.3.2 (единственная страница, имеющая 1 многострочную часть).
			РасчСВ_428_3 = ПолучитьПодчиненныйЭлемент(ИмяФормы, РасчСВ_ОПС428, "РасчСВ_428.3");
			ДанныеМнЧ132 = ВеткаРазд1Пр1Подр132.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы11132М1];
			Для каждого СтрокаМнЧ132 Из ДанныеМнЧ132.Строки Цикл
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 СтрокаМнЧ132.Данные,
									 СкопироватьУзел(ИмяФормы, РасчСВ_ОПС428, РасчСВ_428_3));
			КонецЦикла;
			
			// Подраздел 1.4 (единственная страница, имеющая 1 многострочную часть).
			РасчСВ_ДСО = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчСВ_ОПС_ОМС, "РасчСВ_ДСО");
			ДанныеМнЧ14 = ВеткаРазд1Пр1Подр14.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1114М1];
			Для каждого СтрокаМнЧ14 Из ДанныеМнЧ14.Строки Цикл
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 СтрокаМнЧ14.Данные,
									 СкопироватьУзел(ИмяФормы, ЭкзРасчСВ_ОПС_ОМС, РасчСВ_ДСО));
			КонецЦикла;
		КонецЦикла;
		
		// Приложение 2 к Разделу 1 (единственная страница).
		ЗаполнитьДаннымиУзел(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 СтруктураМногоуровневыхРазделов,
							 ДеревоДанныхРаздел1Прил2.Строки[0].Данные,
							 ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "РасчСВ_ОСС.ВНМ"));
		
		// Приложение 3 к Разделу 1 (единственная страница).
		ЗаполнитьДаннымиУзел(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 СтруктураМногоуровневыхРазделов,
							 ДеревоДанныхРаздел1Прил3.Строки[0].Данные,
							 ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "РасхОССЗак"));
		
		// Приложение 4 к Разделу 1 (единственная страница).
		ЗаполнитьДаннымиУзел(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 СтруктураМногоуровневыхРазделов,
							 ДеревоДанныхРаздел1Прил4.Строки[0].Данные,
						     ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "ВыплФинФБ"));
		
		// Приложения 5-6 к Разделу 1 (единственная страница).
		ЗаполнитьДаннымиУзел(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 СтруктураМногоуровневыхРазделов,
							 ДеревоДанныхРаздел1Прил5_6.Строки[0].Данные,
							 ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "ПравТариф3.1.427"));
		ЗаполнитьДаннымиУзел(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 СтруктураМногоуровневыхРазделов,
							 ДеревоДанныхРаздел1Прил5_6.Строки[0].Данные,
							 ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "ПравТариф5.1.427"));
		
		// Приложения 7 к Разделу 1 (единственная страница).
		ЗаполнитьДаннымиУзел(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 СтруктураМногоуровневыхРазделов,
							 ДеревоДанныхРаздел1Прил7.Строки[0].Данные,
							 ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "ПравТариф7.1.427"));
		
		Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
			// Приложение 8 к Разделу 1 (единственная страница, имеющая 1 многострочную часть).
			ВеткаРазд1Пр8 = ДеревоДанныхРаздел1Прил8.Строки[0];
			СвПримТариф9_1_427 = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "СвПримТариф9.1.427");
			// Немногострочные данные.
			ЗаполнитьДаннымиУзел(ИмяФормы,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 ВеткаРазд1Пр8.Данные,
								 ПолучитьПодчиненныйЭлемент(ИмяФормы, СвПримТариф9_1_427, "ВыплатИт"));
			// Многострочные данные.
			СведПатент = ПолучитьПодчиненныйЭлемент(ИмяФормы, СвПримТариф9_1_427, "СведПатент");
			ДанныеМнЧ18 = ВеткаРазд1Пр8.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы18М1];
			Для каждого СтрокаМнЧ18 Из ДанныеМнЧ18.Строки Цикл
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 СтрокаМнЧ18.Данные,
									 СкопироватьУзел(ИмяФормы, СвПримТариф9_1_427, СведПатент));
			КонецЦикла;
		КонецЕсли;
		
		// Приложение 9 к Разделу 1 (единственная страница, имеющая 1 многострочную часть).
		ВеткаРазд1Пр9 = ДеревоДанныхРаздел1Прил9.Строки[0];
		СвПримТариф2_2_425 = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "СвПримТариф2.2.425");
		// Немногострочные данные.
		ЗаполнитьДаннымиУзел(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 СтруктураМногоуровневыхРазделов,
							 ВеткаРазд1Пр9.Данные,
							 ПолучитьПодчиненныйЭлемент(ИмяФормы, СвПримТариф2_2_425, "ВыплатИт"));
		// Многострочные данные.
		СвИноГражд = ПолучитьПодчиненныйЭлемент(ИмяФормы, СвПримТариф2_2_425, "СвИноГражд");
		ДанныеМнЧ19 = ВеткаРазд1Пр9.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы19М1];
		Для каждого СтрокаМнЧ19 Из ДанныеМнЧ19.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 СтрокаМнЧ19.Данные,
								 СкопироватьУзел(ИмяФормы, СвПримТариф2_2_425, СвИноГражд));
		КонецЦикла;
		
		// Приложение 10 к Разделу 1 (единственная страница,
		// имеющая одну иерархическую (2 уровня) многострочную часть).
		ВеткаРазд1Пр10 = ДеревоДанныхРаздел1Прил10.Строки[0];
		СвПримТариф1_3_422 = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ, "СвПримТариф1.3.422");
		// Немногострочные данные.
		ЗаполнитьДаннымиУзел(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 СтруктураМногоуровневыхРазделов,
							 ВеткаРазд1Пр10.Данные,
							 ПолучитьПодчиненныйЭлемент(ИмяФормы, СвПримТариф1_3_422, "ВыплатИт"));
		// Многострочные данные.
		СведОбуч = ПолучитьПодчиненныйЭлемент(ИмяФормы, СвПримТариф1_3_422, "СведОбуч");
		ДанныеМнЧ110М1 = ВеткаРазд1Пр10.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы110М1];
		Для каждого СтрокаМнЧ110М1 Из ДанныеМнЧ110М1.Строки Цикл
			ЭкзСведОбуч = СкопироватьУзел(ИмяФормы, СвПримТариф1_3_422, СведОбуч);
			// Многострочные данные первого уровня.
			Для каждого Эл Из ЭкзСведОбуч.Строки Цикл
				Если Эл.Код = "УникНомер" Тогда
					// Генерирование "уникальных номеров".
					ВывестиПоказательВXML(
						ИмяФормы, Эл, Формат(ДанныеМнЧ110М1.Строки.Индекс(СтрокаМнЧ110М1) + 1, "ЧГ="));
				ИначеЕсли Эл.Строки.Количество() > 0 И Эл.Код <> "СвРеестрМДО" Тогда
					ЗаполнитьДаннымиУзел(ИмяФормы,
										 СтруктураРеквизитовФормы,
									 	 СтруктураМногоуровневыхРазделов,
										 СтрокаМнЧ110М1.Данные,
										 ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСведОбуч, Эл.Код));
				КонецЕсли;
			КонецЦикла;
			// Многострочные данные второго (подчиненного первому) уровня.
			СвРеестрМДО = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСведОбуч, "СвРеестрМДО");
			ДанныеМнЧ110М2 = СтрокаМнЧ110М1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы110М2];
			Для каждого СтрокаМнЧ110М2 Из ДанныеМнЧ110М2.Строки Цикл
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 СтрокаМнЧ110М2.Данные,
									 СкопироватьУзел(ИмяФормы, ЭкзСведОбуч, СвРеестрМДО));
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 2 (единственная страница, имеющая 1 многострочную часть)
	// выгружается по условию.
	Если ПараметрыВыгрузки.ПоМесту = "124" ИЛИ ПараметрыВыгрузки.ПоМесту = "240" Тогда
		Ветка2 = ДеревоДанныхРаздел2.Строки[0];
		ОбязПлатСВ_КФХ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ОбязПлатСВ_КФХ");
		// Переопределение обязательности выгрузки Раздела 2.
		ОбязПлатСВ_КФХ.Обязательность = "О";
		Для каждого Эл Из ОбязПлатСВ_КФХ.Строки Цикл
			Если Эл.Код = "ОКТМО" Тогда
				ВывестиПоказательВXML(ИмяФормы, Эл, Ветка2.Данные[Эл.Ключ]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьДаннымиУзел(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 СтруктураМногоуровневыхРазделов,
							 Ветка2.Данные,
							 ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ_КФХ, "УплПерОПС"));
		ЗаполнитьДаннымиУзел(ИмяФормы,
							 СтруктураРеквизитовФормы,
							 СтруктураМногоуровневыхРазделов,
							 Ветка2.Данные,
							 ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ_КФХ, "УплПерОМС"));
		// Многострочные данные (Приложение 1 к Разделу 2).
		РасчСВ_КФХ = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбязПлатСВ_КФХ, "РасчСВ_КФХ");
		СведЧлКФХ = ПолучитьПодчиненныйЭлемент(ИмяФормы, РасчСВ_КФХ, "СведЧлКФХ");
		ДанныеМнЧ21 = Ветка2.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы21М1];
		Для каждого СтрокаМнЧ21 Из ДанныеМнЧ21.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 СтрокаМнЧ21.Данные,
								 СкопироватьУзел(ИмяФормы, РасчСВ_КФХ, СведЧлКФХ));
		КонецЦикла;
	КонецЕсли;
	
	// Раздел 3 (многостраничный раздел, на каждой странице есть 2 многострочные части).
	ПерсСвСтрахЛиц = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ПерсСвСтрахЛиц");
	Если ЗаполненРаздел(ИмяФормы,
						ДеревоДанныхРаздел3,
		 				"Раздел3",
						СтруктураРеквизитовФормы,
						СтруктураМногоуровневыхРазделов) Тогда
		
		Для каждого Ветка3 Из ДеревоДанныхРаздел3.Строки Цикл
			
			ЭкзПерсСвСтрахЛиц = СкопироватьУзел(ИмяФормы,
				УзелРодитель, ПерсСвСтрахЛиц, УзелРодитель.Строки.Количество() - 1);
			
			// Немногострочные данные.
			Для каждого Эл Из ЭкзПерсСвСтрахЛиц.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					Если Эл.Код = "Период" Тогда
						ВывестиПоказательВXML(ИмяФормы, Эл, ПараметрыВыгрузки.Период);
					ИначеЕсли Эл.Код = "ОтчетГод" Тогда
						ВывестиПоказательВXML(ИмяФормы, Эл, ПараметрыВыгрузки.ОтчетГод);
					ИначеЕсли Эл.Код = "Номер" Тогда
						ВывестиПоказательВXML(ИмяФормы, Эл,
							?(ЗначениеЗаполнено(Ветка3.Данные[Эл.Ключ]),
						Число(Ветка3.Данные[Эл.Ключ]), 0));
					ИначеЕсли Эл.Код = "Дата" Тогда
						ВывестиПоказательВXML(ИмяФормы, Эл,
							СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи);
					Иначе
						ВывестиПоказательВXML(ИмяФормы, Эл, Ветка3.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ДанФЛПолуч = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзПерсСвСтрахЛиц, "ДанФЛПолуч");
			Для каждого Эл Из ДанФЛПолуч.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					Если Эл.Код = "СерНомДок" Тогда
						// Особая обработка при выгрузке стр. 150 ("Серия и номер").
						ВывестиПоказательВXML(ИмяФормы, Эл,
							Ветка3.Данные["П000310015001"] + " " + Ветка3.Данные["П000310015002"]);
					Иначе
						ВывестиПоказательВXML(ИмяФормы, Эл, Ветка3.Данные[Эл.Ключ]);
					КонецЕсли;
				Иначе
					ЗаполнитьДаннымиУзел(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 Ветка3.Данные, Эл);
				КонецЕсли;
			КонецЦикла;
			
			СвВыплСВОПС = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзПерсСвСтрахЛиц, "СвВыплСВОПС");
			// Немногострочные данные Подраздела 3.2.1.
			СвВыпл = ПолучитьПодчиненныйЭлемент(ИмяФормы, СвВыплСВОПС, "СвВыпл");
			Для каждого Эл Из СвВыпл.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(ИмяФормы, Эл, Ветка3.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			// Многострочные данные Подраздела 3.2.1.
			СвВыплМК = ПолучитьПодчиненныйЭлемент(ИмяФормы, СвВыпл, "СвВыплМК");
			ДанныеМнЧ321 = Ветка3.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы321М1];
			Для каждого СтрокаМнЧ321 Из ДанныеМнЧ321.Строки Цикл
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 СтрокаМнЧ321.Данные,
									 СкопироватьУзел(ИмяФормы, СвВыпл, СвВыплМК, СвВыпл.Строки.Количество() - 1));
			КонецЦикла;
			// Немногострочные данные Подраздела 3.2.2.
			ВыплСВДоп = ПолучитьПодчиненныйЭлемент(ИмяФормы, СвВыплСВОПС, "ВыплСВДоп");
			Для каждого Эл Из ВыплСВДоп.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(ИмяФормы, Эл, Ветка3.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			// Многострочные данные Подраздела 3.2.2.
			ВыплСВДопМТ = ПолучитьПодчиненныйЭлемент(ИмяФормы, ВыплСВДоп, "ВыплСВДопМТ");
			ДанныеМнЧ322 = Ветка3.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы322М1];
			Для каждого СтрокаМнЧ322 Из ДанныеМнЧ322.Строки Цикл
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 СтрокаМнЧ322.Данные,
									 СкопироватьУзел(ИмяФормы, ВыплСВДоп, ВыплСВДопМТ, ВыплСВДоп.Строки.Количество() - 1));
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
						  СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)),
						  ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецФункции

Функция УзелПуст(ИмяФормы, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
		
	Иначе
		
		Если Узел.Код = "УникНомер" Тогда
			// Специальная обработка уникального номера (в необязательном разделе
			// "Приложение 10 к Разделу 1"), которое задается автоматически.
			Возврат Истина;
		Иначе
			Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки, КодировкаФайлаВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки);
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли